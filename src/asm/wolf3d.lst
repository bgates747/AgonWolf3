PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 7A D1 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  
040046             0003*  vdu_play_sfx:
040046 C9          0004*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0005*      ld (@bufferId),hl
04004B ED 43 89 00 0006*      ld (@duration),bc
       04          
040050 3E 17       0007*      ld a,23
040052 32 81 00 04 0008*      ld (@bufferId+2),a
040056 3A 45 00 04 0009*      ld a,(last_channel)
04005A 3C          0010*      inc a
04005B             0011*      ; and 31 ; modulo 32
04005B FE 03       0012*      cp 3
04005D C2 62 00 04 0013*      jp nz,@load_channel
040061 AF          0014*      xor a
040062             0015*  @load_channel:
040062 32 45 00 04 0016*      ld (last_channel),a
040066 32 7C 00 04 0017*      ld (@channel0),a
04006A 32 84 00 04 0018*      ld (@channel1),a
04006E 21 79 00 04 0019*      ld hl, @sample
040072 01 12 00 00 0020*      ld bc, @sample_end - @sample
040076 5B DF       0021*      rst.lil $18
040078 C9          0022*      ret
040079             0023*  @sample:
040079             0024*  ; Command 4: Set waveform
040079             0025*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0026*      .db 23,0,$85                        ; do sound
04007C             0027*  @channel0:
04007C 00 04 08    0028*      .db 0,4,8 ; channel, command, waveform
04007F             0029*  @bufferId:
04007F 00 00       0030*      .dw 0x0000
040081             0031*  ; Command 0: Play note
040081             0032*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0033*      .db 23,0,$85                        ; do sound
040084             0034*  @channel1:
040084 00 00 7F    0035*      .db 0,0,127                ; channel, volume
040087 00 00       0036*      .dw 0
040089             0037*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0038*      .dw 0x0000                        ; duration
04008B             0039*  @sample_end:
04008B 00          0040*      .db 0x00 ; padding
04008C             0041*  
04008C             0042*  ; ############################################################
04008C             0043*  ; VDU SOUND API
04008C             0044*  ; ############################################################
04008C             0045*  ; Command 0: Play note
04008C             0046*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04008C             0047*      MACRO PLAY_NOTE channel, volume, frequency, duration
04008C             0048*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
04008C             0049*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
04008C             0050*      rst.lil $18
04008C             0051*      jr @PLAY_NOTE_END
04008C             0052*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
04008C             0053*                   db channel                  ; Channel, 0 (commented out)
04008C             0054*                   db 0                        ; Play note command
04008C             0055*                   db volume                   ; Volume
04008C             0056*                   dw frequency                ; Frequency
04008C             0057*                   dw duration                 ; Duration
04008C             0058*  @PLAY_NOTE_END:
04008C             0059*      ENDMACRO
04008C             0060*  
04008C             0061*      MACRO MUTE_CHANNEL channel
04008C             0062*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
04008C             0063*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
04008C             0064*      rst.lil $18
04008C             0065*      jr @MUTE_CHANNEL_END
04008C             0066*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
04008C             0067*                     db channel                ; Channel, 0 (commented out)
04008C             0068*                     db 2                      ; Set volume command
04008C             0069*                     db 0                      ; Volume (mute)
04008C             0070*  @MUTE_CHANNEL_END:
04008C             0071*      ENDMACRO
04008C             0072*  
04008C             0073*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
04008C             0074*  vdu_play_note:
04008C 79          0075*      ld a,c
04008D 32 AD 00 04 0076*      ld (@channel),a
040091 78          0077*      ld a,b
040092 32 AF 00 04 0078*      ld (@volume),a
040096 22 B0 00 04 0079*      ld (@frequency),hl
04009A ED 53 B2 00 0080*      ld (@duration),de
       04          
04009F 21 AA 00 04 0081*      ld hl,@cmd
0400A3 01 0A 00 00 0082*      ld bc,@end-@cmd
0400A7 5B DF       0083*      rst.lil $18
0400A9 C9          0084*      ret
0400AA 17 00 85    0085*  @cmd:       db 23, 0, 0x85
0400AD 00          0086*  @channel:   db 0x00
0400AE 00          0087*              db 0x00 ; play note command
0400AF 00          0088*  @volume:    db 0x00
0400B0 00 00       0089*  @frequency: dw 0x0000
0400B2 00 00       0090*  @duration:  dw 0x0000
0400B4 00          0091*  @end:       db 0x00 ; padding
0400B5             0092*  
0400B5             0093*  ; Command 1: Status
0400B5             0094*  ; VDU 23, 0, &85, channel, 1
0400B5             0095*  ; inputs: a = channel
0400B5             0096*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400B5             0097*  ; Bit 	Name 	Meaning
0400B5             0098*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400B5             0099*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400B5             0100*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400B5             0101*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400B5             0102*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400B5             0103*  
0400B5             0104*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400B5             0105*  vdu_channel_status:
0400B5 32 C7 00 04 0106*      ld (@channel),a
0400B9 21 C4 00 04 0107*      ld hl,@cmd
0400BD 01 05 00 00 0108*      ld bc,@end-@cmd
0400C1 5B DF       0109*      rst.lil $18
0400C3 C9          0110*      ret
0400C4 17 00 85    0111*  @cmd:       db 23, 0, 0x85
0400C7 00          0112*  @channel:   db 0x00
0400C8 01          0113*              db 0x01 ; get channel status command
0400C9             0114*  @end:
0400C9             0115*  
0400C9             0116*  ; VDU 23, 0, &85, channel, 2, volume
0400C9             0117*  ; inputs: c = channel, b = volume
0400C9             0118*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400C9             0119*  
0400C9             0120*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400C9             0121*  
0400C9             0122*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400C9             0123*  vdu_channel_volume:
0400C9 79          0124*      ld a,c
0400CA 32 E1 00 04 0125*      ld (@channel),a
0400CE 78          0126*      ld a,b
0400CF 32 E3 00 04 0127*      ld (@volume),a
0400D3 21 DE 00 04 0128*      ld hl,@cmd
0400D7 01 06 00 00 0129*      ld bc,@end-@cmd
0400DB 5B DF       0130*      rst.lil $18
0400DD C9          0131*      ret
0400DE 17 00 85    0132*  @cmd:       db 23, 0, 0x85
0400E1 00          0133*  @channel:   db 0x00
0400E2 02          0134*              db 0x02 ; set volume command
0400E3 00          0135*  @volume:    db 0x00
0400E4             0136*  @end:
0400E4             0137*  
0400E4             0138*  ; VDU 23, 0, &85, channel, 3, frequency;
0400E4             0139*  
0400E4             0140*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0400E4             0141*  
0400E4             0142*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0400E4             0143*  
0400E4             0144*  ; Returns 1 on success, 0 for failure.
0400E4             0145*  vdu_channel_frequency:
0400E4 79          0146*      ld a,c
0400E5 32 FC 00 04 0147*      ld (@channel),a
0400E9 ED 53 FE 00 0148*      ld (@frequency),de
       04          
0400EE 21 F9 00 04 0149*      ld hl,@cmd
0400F2 01 07 00 00 0150*      ld bc,@end-@cmd
0400F6 5B DF       0151*      rst.lil $18
0400F8 C9          0152*      ret
0400F9 17 00 85    0153*  @cmd:       db 23, 0, 0x85
0400FC 00          0154*  @channel:   db 0x00
0400FD 03          0155*              db 0x03 ; set frequency command
0400FE 00 00       0156*  @frequency: dw 0x0000
040100 00          0157*  @end:       db 0x00 ; padding
040101             0158*  
040101             0159*  
040101             0160*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040101             0161*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040101             0162*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040101             0163*  
040101             0164*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040101             0165*  
040101             0166*  ; By default a channel is set to use waveform 0 (square wave).
040101             0167*  
040101             0168*  ; Valid waveform values are as follows:
040101             0169*  ; Value 	Waveform
040101             0170*  ; 0 	Square wave
040101             0171*  ; 1 	Triangle wave
040101             0172*  ; 2 	Sawtooth wave
040101             0173*  ; 3 	Sine wave
040101             0174*  ; 4 	Noise (simple white noise with no frequency support)
040101             0175*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040101             0176*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040101             0177*  
040101             0178*  vdu_channel_waveform:
040101 79          0179*      ld a,c
040102 32 27 01 04 0180*      ld (@channel),a
040106 78          0181*      ld a,b
040107 32 29 01 04 0182*      ld (@waveform),a
04010B FE 08       0183*      cp 8 ; check if the waveform is a sample
04010D 28 06       0184*      jr z, @sample
04010F 01 06 00 00 0185*      ld bc,@bufferId-@cmd
040113 18 08       0186*      jr @sendToVdu
040115             0187*  @sample:
040115 22 2A 01 04 0188*      ld (@bufferId),hl
040119 01 08 00 00 0189*      ld bc,@end-@cmd
04011D             0190*  @sendToVdu:
04011D 21 24 01 04 0191*      ld hl,@cmd
040121 5B DF       0192*      rst.lil $18
040123 C9          0193*      ret
040124 17 00 85    0194*  @cmd:       db 23, 0, 0x85
040127 00          0195*  @channel:   db 0x00
040128 04          0196*              db 0x04 ; set waveform command
040129 00          0197*  @waveform:  db 0x00
04012A 00 00       0198*  @bufferId:  dw 0x0000
04012C 00          0199*  @end:       db 0x00 ; padding
04012D             0200*  
04012D             0201*  
04012D             0202*  
04012D             0203*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04012D             0204*  ; inputs: hl = bufferId; a = format
04012D             0205*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04012D             0206*  ; Value 	Description
04012D             0207*  ; 0 	8-bit signed, 16KHz
04012D             0208*  ; 1 	8-bit unsigned, 16KHz
04012D             0209*  vdu_buffer_to_sound:
04012D 22 46 01 04 0210*      ld (@bufferId),hl
040131 32 48 01 04 0211*      ld (@format),a
040135 21 40 01 04 0212*      ld hl,@cmd
040139 01 09 00 00 0213*      ld bc,@end-@cmd
04013D 5B DF       0214*      rst.lil $18
04013F C9          0215*      ret
040140 17 00 85    0216*  @cmd:       db 23, 0, 0x85
040143 00          0217*              db 0x00 ; a magic number that is always 0
040144 05          0218*              db 0x05 ; buffer to sound command
040145 02          0219*              db 0x02 ; a magic number that is always 2
040146 00 00       0220*  @bufferId:  dw 0x0000
040148 00          0221*  @format:    db 0x00
040149             0222*  @end:
040149             0223*  
040149             0224*  
040149             0225*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040149             0226*  vdu_play_sample:
040149             0227*      ; populate input parameters
040149 79          0228*      ld a,c
04014A 32 74 01 04 0229*      ld (@channel0),a
04014E 32 7C 01 04 0230*      ld (@channel1),a
040152 78          0231*      ld a,b
040153 32 7E 01 04 0232*      ld (@volume),a
040157 ED 53 7F 01 0233*      ld (@frequency),de
       04          
04015C 22 77 01 04 0234*      ld (@bufferId),hl
040160             0235*      ; clean up byte that got stomped on by bufferId load from hl
040160 3E 17       0236*      ld a,23
040162 32 79 01 04 0237*      ld (@cmd1),a
040166             0238*      ; prep the vdu command string
040166 21 71 01 04 0239*      ld hl, @cmd0
04016A 01 12 00 00 0240*      ld bc, @end - @cmd0
04016E 5B DF       0241*      rst.lil $18
040170 C9          0242*      ret
040171 17 00 85    0243*  @cmd0:       db 23, 0, 0x85
040174 00          0244*  @channel0:   db 0x00
040175 04          0245*               db 0x04 ; set waveform command
040176 08          0246*  @waveform:   db 0x08 ; sample
040177 00 00       0247*  @bufferId:   dw 0x0000
040179 17 00 85    0248*  @cmd1:       db 23, 0, 0x85
04017C 00          0249*  @channel1:   db 0x00
04017D 00          0250*               db 0x00 ; play note command
04017E 00          0251*  @volume:     db 0x00
04017F 00 00       0252*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040181 00 00       0253*  @duration:   dw 0x0000 ; milliseconds
040183 00          0254*  @end:        db 0x00 ; padding
040184             0255*  
040184             0256*  
040184             0257*  vdu_enable_channels:
040184             0258*  ; enable all the channels
040184 21 8F 01 04 0259*      ld hl, enable_channels_cmd
040188 01 91 00 00 0260*      ld bc, enable_channels_end - enable_channels_cmd
04018C 5B DF       0261*      rst.lil $18
04018E C9          0262*      ret
04018F             0263*  enable_channels_cmd:
04018F 17 00 85 03 0264*      db 23, 0, $85, 3, 8
       08          
040194 17 00 85 04 0265*      db 23, 0, $85, 4, 8
       08          
040199 17 00 85 05 0266*      db 23, 0, $85, 5, 8
       08          
04019E 17 00 85 06 0267*      db 23, 0, $85, 6, 8
       08          
0401A3 17 00 85 07 0268*      db 23, 0, $85, 7, 8
       08          
0401A8 17 00 85 08 0269*      db 23, 0, $85, 8, 8
       08          
0401AD 17 00 85 09 0270*      db 23, 0, $85, 9, 8
       08          
0401B2 17 00 85 0A 0271*      db 23, 0, $85, 10, 8
       08          
0401B7 17 00 85 0B 0272*      db 23, 0, $85, 11, 8
       08          
0401BC 17 00 85 0C 0273*      db 23, 0, $85, 12, 8
       08          
0401C1 17 00 85 0D 0274*      db 23, 0, $85, 13, 8
       08          
0401C6 17 00 85 0E 0275*      db 23, 0, $85, 14, 8
       08          
0401CB 17 00 85 0F 0276*      db 23, 0, $85, 15, 8
       08          
0401D0 17 00 85 10 0277*      db 23, 0, $85, 16, 8
       08          
0401D5 17 00 85 11 0278*      db 23, 0, $85, 17, 8
       08          
0401DA 17 00 85 12 0279*      db 23, 0, $85, 18, 8
       08          
0401DF 17 00 85 13 0280*      db 23, 0, $85, 19, 8
       08          
0401E4 17 00 85 14 0281*      db 23, 0, $85, 20, 8
       08          
0401E9 17 00 85 15 0282*      db 23, 0, $85, 21, 8
       08          
0401EE 17 00 85 16 0283*      db 23, 0, $85, 22, 8
       08          
0401F3 17 00 85 17 0284*      db 23, 0, $85, 23, 8
       08          
0401F8 17 00 85 18 0285*      db 23, 0, $85, 24, 8
       08          
0401FD 17 00 85 19 0286*      db 23, 0, $85, 25, 8
       08          
040202 17 00 85 1A 0287*      db 23, 0, $85, 26, 8
       08          
040207 17 00 85 1B 0288*      db 23, 0, $85, 27, 8
       08          
04020C 17 00 85 1C 0289*      db 23, 0, $85, 28, 8
       08          
040211 17 00 85 1D 0290*      db 23, 0, $85, 29, 8
       08          
040216 17 00 85 1E 0291*      db 23, 0, $85, 30, 8
       08          
04021B 17 00 85 1F 0292*      db 23, 0, $85, 31, 8
       08          
040220             0293*  enable_channels_end:
040220             0013   	include "src/asm/images.asm"
040220             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
040220             0002*  
040220             0003*  ; cube buffer ids:
040220             0004*  BUF_10_000: equ 0x0100
040220             0005*  BUF_10_001: equ 0x0101
040220             0006*  BUF_10_007: equ 0x0102
040220             0007*  BUF_10_012: equ 0x0103
040220             0008*  BUF_10_017: equ 0x0104
040220             0009*  BUF_10_018: equ 0x0105
040220             0010*  BUF_10_019: equ 0x0106
040220             0011*  BUF_10_020: equ 0x0107
040220             0012*  BUF_10_021: equ 0x0108
040220             0013*  BUF_10_022: equ 0x0109
040220             0014*  BUF_10_023: equ 0x010A
040220             0015*  BUF_10_024: equ 0x010B
040220             0016*  BUF_10_028: equ 0x010C
040220             0017*  BUF_10_032: equ 0x010D
040220             0018*  BUF_10_033: equ 0x010E
040220             0019*  BUF_10_034: equ 0x010F
040220             0020*  BUF_10_035: equ 0x0110
040220             0021*  BUF_10_036: equ 0x0111
040220             0022*  BUF_10_037: equ 0x0112
040220             0023*  BUF_10_040: equ 0x0113
040220             0024*  BUF_10_043: equ 0x0114
040220             0025*  BUF_10_044: equ 0x0115
040220             0026*  BUF_10_045: equ 0x0116
040220             0027*  BUF_10_046: equ 0x0117
040220             0028*  BUF_10_048: equ 0x0118
040220             0029*  BUF_10_050: equ 0x0119
040220             0030*  BUF_10_051: equ 0x011A
040220             0031*  BUF_10_052: equ 0x011B
040220             0032*  BUF_11_000: equ 0x011C
040220             0033*  BUF_11_001: equ 0x011D
040220             0034*  BUF_11_007: equ 0x011E
040220             0035*  BUF_11_012: equ 0x011F
040220             0036*  BUF_11_017: equ 0x0120
040220             0037*  BUF_11_018: equ 0x0121
040220             0038*  BUF_11_019: equ 0x0122
040220             0039*  BUF_11_020: equ 0x0123
040220             0040*  BUF_11_021: equ 0x0124
040220             0041*  BUF_11_022: equ 0x0125
040220             0042*  BUF_11_023: equ 0x0126
040220             0043*  BUF_11_024: equ 0x0127
040220             0044*  BUF_11_028: equ 0x0128
040220             0045*  BUF_11_032: equ 0x0129
040220             0046*  BUF_11_033: equ 0x012A
040220             0047*  BUF_11_034: equ 0x012B
040220             0048*  BUF_11_035: equ 0x012C
040220             0049*  BUF_11_036: equ 0x012D
040220             0050*  BUF_11_037: equ 0x012E
040220             0051*  BUF_11_040: equ 0x012F
040220             0052*  BUF_11_043: equ 0x0130
040220             0053*  BUF_11_044: equ 0x0131
040220             0054*  BUF_11_045: equ 0x0132
040220             0055*  BUF_11_046: equ 0x0133
040220             0056*  BUF_11_048: equ 0x0134
040220             0057*  BUF_11_050: equ 0x0135
040220             0058*  BUF_11_051: equ 0x0136
040220             0059*  BUF_11_052: equ 0x0137
040220             0060*  BUF_12_000: equ 0x0138
040220             0061*  BUF_12_001: equ 0x0139
040220             0062*  BUF_12_007: equ 0x013A
040220             0063*  BUF_12_012: equ 0x013B
040220             0064*  BUF_12_017: equ 0x013C
040220             0065*  BUF_12_018: equ 0x013D
040220             0066*  BUF_12_019: equ 0x013E
040220             0067*  BUF_12_020: equ 0x013F
040220             0068*  BUF_12_021: equ 0x0140
040220             0069*  BUF_12_022: equ 0x0141
040220             0070*  BUF_12_023: equ 0x0142
040220             0071*  BUF_12_024: equ 0x0143
040220             0072*  BUF_12_028: equ 0x0144
040220             0073*  BUF_12_032: equ 0x0145
040220             0074*  BUF_12_033: equ 0x0146
040220             0075*  BUF_12_034: equ 0x0147
040220             0076*  BUF_12_035: equ 0x0148
040220             0077*  BUF_12_036: equ 0x0149
040220             0078*  BUF_12_037: equ 0x014A
040220             0079*  BUF_12_040: equ 0x014B
040220             0080*  BUF_12_043: equ 0x014C
040220             0081*  BUF_12_044: equ 0x014D
040220             0082*  BUF_12_045: equ 0x014E
040220             0083*  BUF_12_046: equ 0x014F
040220             0084*  BUF_12_048: equ 0x0150
040220             0085*  BUF_12_050: equ 0x0151
040220             0086*  BUF_12_051: equ 0x0152
040220             0087*  BUF_12_052: equ 0x0153
040220             0088*  BUF_13_000: equ 0x0154
040220             0089*  BUF_13_001: equ 0x0155
040220             0090*  BUF_13_007: equ 0x0156
040220             0091*  BUF_13_012: equ 0x0157
040220             0092*  BUF_13_017: equ 0x0158
040220             0093*  BUF_13_018: equ 0x0159
040220             0094*  BUF_13_019: equ 0x015A
040220             0095*  BUF_13_020: equ 0x015B
040220             0096*  BUF_13_021: equ 0x015C
040220             0097*  BUF_13_022: equ 0x015D
040220             0098*  BUF_13_023: equ 0x015E
040220             0099*  BUF_13_024: equ 0x015F
040220             0100*  BUF_13_028: equ 0x0160
040220             0101*  BUF_13_032: equ 0x0161
040220             0102*  BUF_13_033: equ 0x0162
040220             0103*  BUF_13_034: equ 0x0163
040220             0104*  BUF_13_035: equ 0x0164
040220             0105*  BUF_13_036: equ 0x0165
040220             0106*  BUF_13_037: equ 0x0166
040220             0107*  BUF_13_040: equ 0x0167
040220             0108*  BUF_13_043: equ 0x0168
040220             0109*  BUF_13_044: equ 0x0169
040220             0110*  BUF_13_045: equ 0x016A
040220             0111*  BUF_13_046: equ 0x016B
040220             0112*  BUF_13_048: equ 0x016C
040220             0113*  BUF_13_050: equ 0x016D
040220             0114*  BUF_13_051: equ 0x016E
040220             0115*  BUF_13_052: equ 0x016F
040220             0116*  BUF_14_000: equ 0x0170
040220             0117*  BUF_14_001: equ 0x0171
040220             0118*  BUF_14_007: equ 0x0172
040220             0119*  BUF_14_012: equ 0x0173
040220             0120*  BUF_14_017: equ 0x0174
040220             0121*  BUF_14_018: equ 0x0175
040220             0122*  BUF_14_019: equ 0x0176
040220             0123*  BUF_14_020: equ 0x0177
040220             0124*  BUF_14_021: equ 0x0178
040220             0125*  BUF_14_022: equ 0x0179
040220             0126*  BUF_14_023: equ 0x017A
040220             0127*  BUF_14_024: equ 0x017B
040220             0128*  BUF_14_028: equ 0x017C
040220             0129*  BUF_14_032: equ 0x017D
040220             0130*  BUF_14_033: equ 0x017E
040220             0131*  BUF_14_034: equ 0x017F
040220             0132*  BUF_14_035: equ 0x0180
040220             0133*  BUF_14_036: equ 0x0181
040220             0134*  BUF_14_037: equ 0x0182
040220             0135*  BUF_14_040: equ 0x0183
040220             0136*  BUF_14_043: equ 0x0184
040220             0137*  BUF_14_044: equ 0x0185
040220             0138*  BUF_14_045: equ 0x0186
040220             0139*  BUF_14_046: equ 0x0187
040220             0140*  BUF_14_048: equ 0x0188
040220             0141*  BUF_14_050: equ 0x0189
040220             0142*  BUF_14_051: equ 0x018A
040220             0143*  BUF_14_052: equ 0x018B
040220             0144*  BUF_15_000: equ 0x018C
040220             0145*  BUF_15_001: equ 0x018D
040220             0146*  BUF_15_007: equ 0x018E
040220             0147*  BUF_15_012: equ 0x018F
040220             0148*  BUF_15_017: equ 0x0190
040220             0149*  BUF_15_018: equ 0x0191
040220             0150*  BUF_15_019: equ 0x0192
040220             0151*  BUF_15_020: equ 0x0193
040220             0152*  BUF_15_021: equ 0x0194
040220             0153*  BUF_15_022: equ 0x0195
040220             0154*  BUF_15_023: equ 0x0196
040220             0155*  BUF_15_024: equ 0x0197
040220             0156*  BUF_15_028: equ 0x0198
040220             0157*  BUF_15_032: equ 0x0199
040220             0158*  BUF_15_033: equ 0x019A
040220             0159*  BUF_15_034: equ 0x019B
040220             0160*  BUF_15_035: equ 0x019C
040220             0161*  BUF_15_036: equ 0x019D
040220             0162*  BUF_15_037: equ 0x019E
040220             0163*  BUF_15_040: equ 0x019F
040220             0164*  BUF_15_043: equ 0x01A0
040220             0165*  BUF_15_044: equ 0x01A1
040220             0166*  BUF_15_045: equ 0x01A2
040220             0167*  BUF_15_046: equ 0x01A3
040220             0168*  BUF_15_048: equ 0x01A4
040220             0169*  BUF_15_050: equ 0x01A5
040220             0170*  BUF_15_051: equ 0x01A6
040220             0171*  BUF_15_052: equ 0x01A7
040220             0172*  BUF_16_000: equ 0x01A8
040220             0173*  BUF_16_001: equ 0x01A9
040220             0174*  BUF_16_007: equ 0x01AA
040220             0175*  BUF_16_012: equ 0x01AB
040220             0176*  BUF_16_017: equ 0x01AC
040220             0177*  BUF_16_018: equ 0x01AD
040220             0178*  BUF_16_019: equ 0x01AE
040220             0179*  BUF_16_020: equ 0x01AF
040220             0180*  BUF_16_021: equ 0x01B0
040220             0181*  BUF_16_022: equ 0x01B1
040220             0182*  BUF_16_023: equ 0x01B2
040220             0183*  BUF_16_024: equ 0x01B3
040220             0184*  BUF_16_028: equ 0x01B4
040220             0185*  BUF_16_032: equ 0x01B5
040220             0186*  BUF_16_033: equ 0x01B6
040220             0187*  BUF_16_034: equ 0x01B7
040220             0188*  BUF_16_035: equ 0x01B8
040220             0189*  BUF_16_036: equ 0x01B9
040220             0190*  BUF_16_037: equ 0x01BA
040220             0191*  BUF_16_040: equ 0x01BB
040220             0192*  BUF_16_043: equ 0x01BC
040220             0193*  BUF_16_044: equ 0x01BD
040220             0194*  BUF_16_045: equ 0x01BE
040220             0195*  BUF_16_046: equ 0x01BF
040220             0196*  BUF_16_048: equ 0x01C0
040220             0197*  BUF_16_050: equ 0x01C1
040220             0198*  BUF_16_051: equ 0x01C2
040220             0199*  BUF_16_052: equ 0x01C3
040220             0200*  BUF_17_000: equ 0x01C4
040220             0201*  BUF_17_001: equ 0x01C5
040220             0202*  BUF_17_007: equ 0x01C6
040220             0203*  BUF_17_012: equ 0x01C7
040220             0204*  BUF_17_017: equ 0x01C8
040220             0205*  BUF_17_018: equ 0x01C9
040220             0206*  BUF_17_019: equ 0x01CA
040220             0207*  BUF_17_020: equ 0x01CB
040220             0208*  BUF_17_021: equ 0x01CC
040220             0209*  BUF_17_022: equ 0x01CD
040220             0210*  BUF_17_023: equ 0x01CE
040220             0211*  BUF_17_024: equ 0x01CF
040220             0212*  BUF_17_028: equ 0x01D0
040220             0213*  BUF_17_032: equ 0x01D1
040220             0214*  BUF_17_033: equ 0x01D2
040220             0215*  BUF_17_034: equ 0x01D3
040220             0216*  BUF_17_035: equ 0x01D4
040220             0217*  BUF_17_036: equ 0x01D5
040220             0218*  BUF_17_037: equ 0x01D6
040220             0219*  BUF_17_040: equ 0x01D7
040220             0220*  BUF_17_043: equ 0x01D8
040220             0221*  BUF_17_044: equ 0x01D9
040220             0222*  BUF_17_045: equ 0x01DA
040220             0223*  BUF_17_046: equ 0x01DB
040220             0224*  BUF_17_048: equ 0x01DC
040220             0225*  BUF_17_050: equ 0x01DD
040220             0226*  BUF_17_051: equ 0x01DE
040220             0227*  BUF_17_052: equ 0x01DF
040220             0228*  BUF_57_000: equ 0x01E0
040220             0229*  BUF_57_001: equ 0x01E1
040220             0230*  BUF_57_007: equ 0x01E2
040220             0231*  BUF_57_012: equ 0x01E3
040220             0232*  BUF_57_017: equ 0x01E4
040220             0233*  BUF_57_018: equ 0x01E5
040220             0234*  BUF_57_019: equ 0x01E6
040220             0235*  BUF_57_020: equ 0x01E7
040220             0236*  BUF_57_021: equ 0x01E8
040220             0237*  BUF_57_022: equ 0x01E9
040220             0238*  BUF_57_023: equ 0x01EA
040220             0239*  BUF_57_024: equ 0x01EB
040220             0240*  BUF_57_028: equ 0x01EC
040220             0241*  BUF_57_032: equ 0x01ED
040220             0242*  BUF_57_033: equ 0x01EE
040220             0243*  BUF_57_034: equ 0x01EF
040220             0244*  BUF_57_035: equ 0x01F0
040220             0245*  BUF_57_036: equ 0x01F1
040220             0246*  BUF_57_037: equ 0x01F2
040220             0247*  BUF_57_040: equ 0x01F3
040220             0248*  BUF_57_043: equ 0x01F4
040220             0249*  BUF_57_044: equ 0x01F5
040220             0250*  BUF_57_045: equ 0x01F6
040220             0251*  BUF_57_046: equ 0x01F7
040220             0252*  BUF_57_048: equ 0x01F8
040220             0253*  BUF_57_050: equ 0x01F9
040220             0254*  BUF_57_051: equ 0x01FA
040220             0255*  BUF_57_052: equ 0x01FB
040220             0256*  BUF_58_000: equ 0x01FC
040220             0257*  BUF_58_001: equ 0x01FD
040220             0258*  BUF_58_007: equ 0x01FE
040220             0259*  BUF_58_012: equ 0x01FF
040220             0260*  BUF_58_017: equ 0x0200
040220             0261*  BUF_58_018: equ 0x0201
040220             0262*  BUF_58_019: equ 0x0202
040220             0263*  BUF_58_020: equ 0x0203
040220             0264*  BUF_58_021: equ 0x0204
040220             0265*  BUF_58_022: equ 0x0205
040220             0266*  BUF_58_023: equ 0x0206
040220             0267*  BUF_58_024: equ 0x0207
040220             0268*  BUF_58_028: equ 0x0208
040220             0269*  BUF_58_032: equ 0x0209
040220             0270*  BUF_58_033: equ 0x020A
040220             0271*  BUF_58_034: equ 0x020B
040220             0272*  BUF_58_035: equ 0x020C
040220             0273*  BUF_58_036: equ 0x020D
040220             0274*  BUF_58_037: equ 0x020E
040220             0275*  BUF_58_040: equ 0x020F
040220             0276*  BUF_58_043: equ 0x0210
040220             0277*  BUF_58_044: equ 0x0211
040220             0278*  BUF_58_045: equ 0x0212
040220             0279*  BUF_58_046: equ 0x0213
040220             0280*  BUF_58_048: equ 0x0214
040220             0281*  BUF_58_050: equ 0x0215
040220             0282*  BUF_58_051: equ 0x0216
040220             0283*  BUF_58_052: equ 0x0217
040220             0284*  BUF_59_000: equ 0x0218
040220             0285*  BUF_59_001: equ 0x0219
040220             0286*  BUF_59_007: equ 0x021A
040220             0287*  BUF_59_012: equ 0x021B
040220             0288*  BUF_59_017: equ 0x021C
040220             0289*  BUF_59_018: equ 0x021D
040220             0290*  BUF_59_019: equ 0x021E
040220             0291*  BUF_59_020: equ 0x021F
040220             0292*  BUF_59_021: equ 0x0220
040220             0293*  BUF_59_022: equ 0x0221
040220             0294*  BUF_59_023: equ 0x0222
040220             0295*  BUF_59_024: equ 0x0223
040220             0296*  BUF_59_028: equ 0x0224
040220             0297*  BUF_59_032: equ 0x0225
040220             0298*  BUF_59_033: equ 0x0226
040220             0299*  BUF_59_034: equ 0x0227
040220             0300*  BUF_59_035: equ 0x0228
040220             0301*  BUF_59_036: equ 0x0229
040220             0302*  BUF_59_037: equ 0x022A
040220             0303*  BUF_59_040: equ 0x022B
040220             0304*  BUF_59_043: equ 0x022C
040220             0305*  BUF_59_044: equ 0x022D
040220             0306*  BUF_59_045: equ 0x022E
040220             0307*  BUF_59_046: equ 0x022F
040220             0308*  BUF_59_048: equ 0x0230
040220             0309*  BUF_59_050: equ 0x0231
040220             0310*  BUF_59_051: equ 0x0232
040220             0311*  BUF_59_052: equ 0x0233
040220             0312*  
040220             0313*  cube_num_panels: equ 308
040220             0314*  
040220             0315*  ; cube buffer id reverse lookup:
040220             0316*  cube_buffer_id_lut:
040220 00 01 00    0317*  	dl BUF_10_000
040223 01 01 00    0318*  	dl BUF_10_001
040226 02 01 00    0319*  	dl BUF_10_007
040229 03 01 00    0320*  	dl BUF_10_012
04022C 04 01 00    0321*  	dl BUF_10_017
04022F 05 01 00    0322*  	dl BUF_10_018
040232 06 01 00    0323*  	dl BUF_10_019
040235 07 01 00    0324*  	dl BUF_10_020
040238 08 01 00    0325*  	dl BUF_10_021
04023B 09 01 00    0326*  	dl BUF_10_022
04023E 0A 01 00    0327*  	dl BUF_10_023
040241 0B 01 00    0328*  	dl BUF_10_024
040244 0C 01 00    0329*  	dl BUF_10_028
040247 0D 01 00    0330*  	dl BUF_10_032
04024A 0E 01 00    0331*  	dl BUF_10_033
04024D 0F 01 00    0332*  	dl BUF_10_034
040250 10 01 00    0333*  	dl BUF_10_035
040253 11 01 00    0334*  	dl BUF_10_036
040256 12 01 00    0335*  	dl BUF_10_037
040259 13 01 00    0336*  	dl BUF_10_040
04025C 14 01 00    0337*  	dl BUF_10_043
04025F 15 01 00    0338*  	dl BUF_10_044
040262 16 01 00    0339*  	dl BUF_10_045
040265 17 01 00    0340*  	dl BUF_10_046
040268 18 01 00    0341*  	dl BUF_10_048
04026B 19 01 00    0342*  	dl BUF_10_050
04026E 1A 01 00    0343*  	dl BUF_10_051
040271 1B 01 00    0344*  	dl BUF_10_052
040274 1C 01 00    0345*  	dl BUF_11_000
040277 1D 01 00    0346*  	dl BUF_11_001
04027A 1E 01 00    0347*  	dl BUF_11_007
04027D 1F 01 00    0348*  	dl BUF_11_012
040280 20 01 00    0349*  	dl BUF_11_017
040283 21 01 00    0350*  	dl BUF_11_018
040286 22 01 00    0351*  	dl BUF_11_019
040289 23 01 00    0352*  	dl BUF_11_020
04028C 24 01 00    0353*  	dl BUF_11_021
04028F 25 01 00    0354*  	dl BUF_11_022
040292 26 01 00    0355*  	dl BUF_11_023
040295 27 01 00    0356*  	dl BUF_11_024
040298 28 01 00    0357*  	dl BUF_11_028
04029B 29 01 00    0358*  	dl BUF_11_032
04029E 2A 01 00    0359*  	dl BUF_11_033
0402A1 2B 01 00    0360*  	dl BUF_11_034
0402A4 2C 01 00    0361*  	dl BUF_11_035
0402A7 2D 01 00    0362*  	dl BUF_11_036
0402AA 2E 01 00    0363*  	dl BUF_11_037
0402AD 2F 01 00    0364*  	dl BUF_11_040
0402B0 30 01 00    0365*  	dl BUF_11_043
0402B3 31 01 00    0366*  	dl BUF_11_044
0402B6 32 01 00    0367*  	dl BUF_11_045
0402B9 33 01 00    0368*  	dl BUF_11_046
0402BC 34 01 00    0369*  	dl BUF_11_048
0402BF 35 01 00    0370*  	dl BUF_11_050
0402C2 36 01 00    0371*  	dl BUF_11_051
0402C5 37 01 00    0372*  	dl BUF_11_052
0402C8 38 01 00    0373*  	dl BUF_12_000
0402CB 39 01 00    0374*  	dl BUF_12_001
0402CE 3A 01 00    0375*  	dl BUF_12_007
0402D1 3B 01 00    0376*  	dl BUF_12_012
0402D4 3C 01 00    0377*  	dl BUF_12_017
0402D7 3D 01 00    0378*  	dl BUF_12_018
0402DA 3E 01 00    0379*  	dl BUF_12_019
0402DD 3F 01 00    0380*  	dl BUF_12_020
0402E0 40 01 00    0381*  	dl BUF_12_021
0402E3 41 01 00    0382*  	dl BUF_12_022
0402E6 42 01 00    0383*  	dl BUF_12_023
0402E9 43 01 00    0384*  	dl BUF_12_024
0402EC 44 01 00    0385*  	dl BUF_12_028
0402EF 45 01 00    0386*  	dl BUF_12_032
0402F2 46 01 00    0387*  	dl BUF_12_033
0402F5 47 01 00    0388*  	dl BUF_12_034
0402F8 48 01 00    0389*  	dl BUF_12_035
0402FB 49 01 00    0390*  	dl BUF_12_036
0402FE 4A 01 00    0391*  	dl BUF_12_037
040301 4B 01 00    0392*  	dl BUF_12_040
040304 4C 01 00    0393*  	dl BUF_12_043
040307 4D 01 00    0394*  	dl BUF_12_044
04030A 4E 01 00    0395*  	dl BUF_12_045
04030D 4F 01 00    0396*  	dl BUF_12_046
040310 50 01 00    0397*  	dl BUF_12_048
040313 51 01 00    0398*  	dl BUF_12_050
040316 52 01 00    0399*  	dl BUF_12_051
040319 53 01 00    0400*  	dl BUF_12_052
04031C 54 01 00    0401*  	dl BUF_13_000
04031F 55 01 00    0402*  	dl BUF_13_001
040322 56 01 00    0403*  	dl BUF_13_007
040325 57 01 00    0404*  	dl BUF_13_012
040328 58 01 00    0405*  	dl BUF_13_017
04032B 59 01 00    0406*  	dl BUF_13_018
04032E 5A 01 00    0407*  	dl BUF_13_019
040331 5B 01 00    0408*  	dl BUF_13_020
040334 5C 01 00    0409*  	dl BUF_13_021
040337 5D 01 00    0410*  	dl BUF_13_022
04033A 5E 01 00    0411*  	dl BUF_13_023
04033D 5F 01 00    0412*  	dl BUF_13_024
040340 60 01 00    0413*  	dl BUF_13_028
040343 61 01 00    0414*  	dl BUF_13_032
040346 62 01 00    0415*  	dl BUF_13_033
040349 63 01 00    0416*  	dl BUF_13_034
04034C 64 01 00    0417*  	dl BUF_13_035
04034F 65 01 00    0418*  	dl BUF_13_036
040352 66 01 00    0419*  	dl BUF_13_037
040355 67 01 00    0420*  	dl BUF_13_040
040358 68 01 00    0421*  	dl BUF_13_043
04035B 69 01 00    0422*  	dl BUF_13_044
04035E 6A 01 00    0423*  	dl BUF_13_045
040361 6B 01 00    0424*  	dl BUF_13_046
040364 6C 01 00    0425*  	dl BUF_13_048
040367 6D 01 00    0426*  	dl BUF_13_050
04036A 6E 01 00    0427*  	dl BUF_13_051
04036D 6F 01 00    0428*  	dl BUF_13_052
040370 70 01 00    0429*  	dl BUF_14_000
040373 71 01 00    0430*  	dl BUF_14_001
040376 72 01 00    0431*  	dl BUF_14_007
040379 73 01 00    0432*  	dl BUF_14_012
04037C 74 01 00    0433*  	dl BUF_14_017
04037F 75 01 00    0434*  	dl BUF_14_018
040382 76 01 00    0435*  	dl BUF_14_019
040385 77 01 00    0436*  	dl BUF_14_020
040388 78 01 00    0437*  	dl BUF_14_021
04038B 79 01 00    0438*  	dl BUF_14_022
04038E 7A 01 00    0439*  	dl BUF_14_023
040391 7B 01 00    0440*  	dl BUF_14_024
040394 7C 01 00    0441*  	dl BUF_14_028
040397 7D 01 00    0442*  	dl BUF_14_032
04039A 7E 01 00    0443*  	dl BUF_14_033
04039D 7F 01 00    0444*  	dl BUF_14_034
0403A0 80 01 00    0445*  	dl BUF_14_035
0403A3 81 01 00    0446*  	dl BUF_14_036
0403A6 82 01 00    0447*  	dl BUF_14_037
0403A9 83 01 00    0448*  	dl BUF_14_040
0403AC 84 01 00    0449*  	dl BUF_14_043
0403AF 85 01 00    0450*  	dl BUF_14_044
0403B2 86 01 00    0451*  	dl BUF_14_045
0403B5 87 01 00    0452*  	dl BUF_14_046
0403B8 88 01 00    0453*  	dl BUF_14_048
0403BB 89 01 00    0454*  	dl BUF_14_050
0403BE 8A 01 00    0455*  	dl BUF_14_051
0403C1 8B 01 00    0456*  	dl BUF_14_052
0403C4 8C 01 00    0457*  	dl BUF_15_000
0403C7 8D 01 00    0458*  	dl BUF_15_001
0403CA 8E 01 00    0459*  	dl BUF_15_007
0403CD 8F 01 00    0460*  	dl BUF_15_012
0403D0 90 01 00    0461*  	dl BUF_15_017
0403D3 91 01 00    0462*  	dl BUF_15_018
0403D6 92 01 00    0463*  	dl BUF_15_019
0403D9 93 01 00    0464*  	dl BUF_15_020
0403DC 94 01 00    0465*  	dl BUF_15_021
0403DF 95 01 00    0466*  	dl BUF_15_022
0403E2 96 01 00    0467*  	dl BUF_15_023
0403E5 97 01 00    0468*  	dl BUF_15_024
0403E8 98 01 00    0469*  	dl BUF_15_028
0403EB 99 01 00    0470*  	dl BUF_15_032
0403EE 9A 01 00    0471*  	dl BUF_15_033
0403F1 9B 01 00    0472*  	dl BUF_15_034
0403F4 9C 01 00    0473*  	dl BUF_15_035
0403F7 9D 01 00    0474*  	dl BUF_15_036
0403FA 9E 01 00    0475*  	dl BUF_15_037
0403FD 9F 01 00    0476*  	dl BUF_15_040
040400 A0 01 00    0477*  	dl BUF_15_043
040403 A1 01 00    0478*  	dl BUF_15_044
040406 A2 01 00    0479*  	dl BUF_15_045
040409 A3 01 00    0480*  	dl BUF_15_046
04040C A4 01 00    0481*  	dl BUF_15_048
04040F A5 01 00    0482*  	dl BUF_15_050
040412 A6 01 00    0483*  	dl BUF_15_051
040415 A7 01 00    0484*  	dl BUF_15_052
040418 A8 01 00    0485*  	dl BUF_16_000
04041B A9 01 00    0486*  	dl BUF_16_001
04041E AA 01 00    0487*  	dl BUF_16_007
040421 AB 01 00    0488*  	dl BUF_16_012
040424 AC 01 00    0489*  	dl BUF_16_017
040427 AD 01 00    0490*  	dl BUF_16_018
04042A AE 01 00    0491*  	dl BUF_16_019
04042D AF 01 00    0492*  	dl BUF_16_020
040430 B0 01 00    0493*  	dl BUF_16_021
040433 B1 01 00    0494*  	dl BUF_16_022
040436 B2 01 00    0495*  	dl BUF_16_023
040439 B3 01 00    0496*  	dl BUF_16_024
04043C B4 01 00    0497*  	dl BUF_16_028
04043F B5 01 00    0498*  	dl BUF_16_032
040442 B6 01 00    0499*  	dl BUF_16_033
040445 B7 01 00    0500*  	dl BUF_16_034
040448 B8 01 00    0501*  	dl BUF_16_035
04044B B9 01 00    0502*  	dl BUF_16_036
04044E BA 01 00    0503*  	dl BUF_16_037
040451 BB 01 00    0504*  	dl BUF_16_040
040454 BC 01 00    0505*  	dl BUF_16_043
040457 BD 01 00    0506*  	dl BUF_16_044
04045A BE 01 00    0507*  	dl BUF_16_045
04045D BF 01 00    0508*  	dl BUF_16_046
040460 C0 01 00    0509*  	dl BUF_16_048
040463 C1 01 00    0510*  	dl BUF_16_050
040466 C2 01 00    0511*  	dl BUF_16_051
040469 C3 01 00    0512*  	dl BUF_16_052
04046C C4 01 00    0513*  	dl BUF_17_000
04046F C5 01 00    0514*  	dl BUF_17_001
040472 C6 01 00    0515*  	dl BUF_17_007
040475 C7 01 00    0516*  	dl BUF_17_012
040478 C8 01 00    0517*  	dl BUF_17_017
04047B C9 01 00    0518*  	dl BUF_17_018
04047E CA 01 00    0519*  	dl BUF_17_019
040481 CB 01 00    0520*  	dl BUF_17_020
040484 CC 01 00    0521*  	dl BUF_17_021
040487 CD 01 00    0522*  	dl BUF_17_022
04048A CE 01 00    0523*  	dl BUF_17_023
04048D CF 01 00    0524*  	dl BUF_17_024
040490 D0 01 00    0525*  	dl BUF_17_028
040493 D1 01 00    0526*  	dl BUF_17_032
040496 D2 01 00    0527*  	dl BUF_17_033
040499 D3 01 00    0528*  	dl BUF_17_034
04049C D4 01 00    0529*  	dl BUF_17_035
04049F D5 01 00    0530*  	dl BUF_17_036
0404A2 D6 01 00    0531*  	dl BUF_17_037
0404A5 D7 01 00    0532*  	dl BUF_17_040
0404A8 D8 01 00    0533*  	dl BUF_17_043
0404AB D9 01 00    0534*  	dl BUF_17_044
0404AE DA 01 00    0535*  	dl BUF_17_045
0404B1 DB 01 00    0536*  	dl BUF_17_046
0404B4 DC 01 00    0537*  	dl BUF_17_048
0404B7 DD 01 00    0538*  	dl BUF_17_050
0404BA DE 01 00    0539*  	dl BUF_17_051
0404BD DF 01 00    0540*  	dl BUF_17_052
0404C0 E0 01 00    0541*  	dl BUF_57_000
0404C3 E1 01 00    0542*  	dl BUF_57_001
0404C6 E2 01 00    0543*  	dl BUF_57_007
0404C9 E3 01 00    0544*  	dl BUF_57_012
0404CC E4 01 00    0545*  	dl BUF_57_017
0404CF E5 01 00    0546*  	dl BUF_57_018
0404D2 E6 01 00    0547*  	dl BUF_57_019
0404D5 E7 01 00    0548*  	dl BUF_57_020
0404D8 E8 01 00    0549*  	dl BUF_57_021
0404DB E9 01 00    0550*  	dl BUF_57_022
0404DE EA 01 00    0551*  	dl BUF_57_023
0404E1 EB 01 00    0552*  	dl BUF_57_024
0404E4 EC 01 00    0553*  	dl BUF_57_028
0404E7 ED 01 00    0554*  	dl BUF_57_032
0404EA EE 01 00    0555*  	dl BUF_57_033
0404ED EF 01 00    0556*  	dl BUF_57_034
0404F0 F0 01 00    0557*  	dl BUF_57_035
0404F3 F1 01 00    0558*  	dl BUF_57_036
0404F6 F2 01 00    0559*  	dl BUF_57_037
0404F9 F3 01 00    0560*  	dl BUF_57_040
0404FC F4 01 00    0561*  	dl BUF_57_043
0404FF F5 01 00    0562*  	dl BUF_57_044
040502 F6 01 00    0563*  	dl BUF_57_045
040505 F7 01 00    0564*  	dl BUF_57_046
040508 F8 01 00    0565*  	dl BUF_57_048
04050B F9 01 00    0566*  	dl BUF_57_050
04050E FA 01 00    0567*  	dl BUF_57_051
040511 FB 01 00    0568*  	dl BUF_57_052
040514 FC 01 00    0569*  	dl BUF_58_000
040517 FD 01 00    0570*  	dl BUF_58_001
04051A FE 01 00    0571*  	dl BUF_58_007
04051D FF 01 00    0572*  	dl BUF_58_012
040520 00 02 00    0573*  	dl BUF_58_017
040523 01 02 00    0574*  	dl BUF_58_018
040526 02 02 00    0575*  	dl BUF_58_019
040529 03 02 00    0576*  	dl BUF_58_020
04052C 04 02 00    0577*  	dl BUF_58_021
04052F 05 02 00    0578*  	dl BUF_58_022
040532 06 02 00    0579*  	dl BUF_58_023
040535 07 02 00    0580*  	dl BUF_58_024
040538 08 02 00    0581*  	dl BUF_58_028
04053B 09 02 00    0582*  	dl BUF_58_032
04053E 0A 02 00    0583*  	dl BUF_58_033
040541 0B 02 00    0584*  	dl BUF_58_034
040544 0C 02 00    0585*  	dl BUF_58_035
040547 0D 02 00    0586*  	dl BUF_58_036
04054A 0E 02 00    0587*  	dl BUF_58_037
04054D 0F 02 00    0588*  	dl BUF_58_040
040550 10 02 00    0589*  	dl BUF_58_043
040553 11 02 00    0590*  	dl BUF_58_044
040556 12 02 00    0591*  	dl BUF_58_045
040559 13 02 00    0592*  	dl BUF_58_046
04055C 14 02 00    0593*  	dl BUF_58_048
04055F 15 02 00    0594*  	dl BUF_58_050
040562 16 02 00    0595*  	dl BUF_58_051
040565 17 02 00    0596*  	dl BUF_58_052
040568 18 02 00    0597*  	dl BUF_59_000
04056B 19 02 00    0598*  	dl BUF_59_001
04056E 1A 02 00    0599*  	dl BUF_59_007
040571 1B 02 00    0600*  	dl BUF_59_012
040574 1C 02 00    0601*  	dl BUF_59_017
040577 1D 02 00    0602*  	dl BUF_59_018
04057A 1E 02 00    0603*  	dl BUF_59_019
04057D 1F 02 00    0604*  	dl BUF_59_020
040580 20 02 00    0605*  	dl BUF_59_021
040583 21 02 00    0606*  	dl BUF_59_022
040586 22 02 00    0607*  	dl BUF_59_023
040589 23 02 00    0608*  	dl BUF_59_024
04058C 24 02 00    0609*  	dl BUF_59_028
04058F 25 02 00    0610*  	dl BUF_59_032
040592 26 02 00    0611*  	dl BUF_59_033
040595 27 02 00    0612*  	dl BUF_59_034
040598 28 02 00    0613*  	dl BUF_59_035
04059B 29 02 00    0614*  	dl BUF_59_036
04059E 2A 02 00    0615*  	dl BUF_59_037
0405A1 2B 02 00    0616*  	dl BUF_59_040
0405A4 2C 02 00    0617*  	dl BUF_59_043
0405A7 2D 02 00    0618*  	dl BUF_59_044
0405AA 2E 02 00    0619*  	dl BUF_59_045
0405AD 2F 02 00    0620*  	dl BUF_59_046
0405B0 30 02 00    0621*  	dl BUF_59_048
0405B3 31 02 00    0622*  	dl BUF_59_050
0405B6 32 02 00    0623*  	dl BUF_59_051
0405B9 33 02 00    0624*  	dl BUF_59_052
0405BC             0625*  
0405BC             0626*  ; cube load routines jump table:
0405BC             0627*  cube_load_panels_table:
0405BC 58 09 04    0628*  	dl ld_10_000
0405BF 82 09 04    0629*  	dl ld_10_001
0405C2 AC 09 04    0630*  	dl ld_10_007
0405C5 D6 09 04    0631*  	dl ld_10_012
0405C8 00 0A 04    0632*  	dl ld_10_017
0405CB 2A 0A 04    0633*  	dl ld_10_018
0405CE 54 0A 04    0634*  	dl ld_10_019
0405D1 7E 0A 04    0635*  	dl ld_10_020
0405D4 A8 0A 04    0636*  	dl ld_10_021
0405D7 D2 0A 04    0637*  	dl ld_10_022
0405DA FC 0A 04    0638*  	dl ld_10_023
0405DD 26 0B 04    0639*  	dl ld_10_024
0405E0 50 0B 04    0640*  	dl ld_10_028
0405E3 7A 0B 04    0641*  	dl ld_10_032
0405E6 A4 0B 04    0642*  	dl ld_10_033
0405E9 CE 0B 04    0643*  	dl ld_10_034
0405EC F8 0B 04    0644*  	dl ld_10_035
0405EF 22 0C 04    0645*  	dl ld_10_036
0405F2 4C 0C 04    0646*  	dl ld_10_037
0405F5 76 0C 04    0647*  	dl ld_10_040
0405F8 A0 0C 04    0648*  	dl ld_10_043
0405FB CA 0C 04    0649*  	dl ld_10_044
0405FE F4 0C 04    0650*  	dl ld_10_045
040601 1E 0D 04    0651*  	dl ld_10_046
040604 48 0D 04    0652*  	dl ld_10_048
040607 72 0D 04    0653*  	dl ld_10_050
04060A 9C 0D 04    0654*  	dl ld_10_051
04060D C6 0D 04    0655*  	dl ld_10_052
040610 F0 0D 04    0656*  	dl ld_11_000
040613 1A 0E 04    0657*  	dl ld_11_001
040616 44 0E 04    0658*  	dl ld_11_007
040619 6E 0E 04    0659*  	dl ld_11_012
04061C 98 0E 04    0660*  	dl ld_11_017
04061F C2 0E 04    0661*  	dl ld_11_018
040622 EC 0E 04    0662*  	dl ld_11_019
040625 16 0F 04    0663*  	dl ld_11_020
040628 40 0F 04    0664*  	dl ld_11_021
04062B 6A 0F 04    0665*  	dl ld_11_022
04062E 94 0F 04    0666*  	dl ld_11_023
040631 BE 0F 04    0667*  	dl ld_11_024
040634 E8 0F 04    0668*  	dl ld_11_028
040637 12 10 04    0669*  	dl ld_11_032
04063A 3C 10 04    0670*  	dl ld_11_033
04063D 66 10 04    0671*  	dl ld_11_034
040640 90 10 04    0672*  	dl ld_11_035
040643 BA 10 04    0673*  	dl ld_11_036
040646 E4 10 04    0674*  	dl ld_11_037
040649 0E 11 04    0675*  	dl ld_11_040
04064C 38 11 04    0676*  	dl ld_11_043
04064F 62 11 04    0677*  	dl ld_11_044
040652 8C 11 04    0678*  	dl ld_11_045
040655 B6 11 04    0679*  	dl ld_11_046
040658 E0 11 04    0680*  	dl ld_11_048
04065B 0A 12 04    0681*  	dl ld_11_050
04065E 34 12 04    0682*  	dl ld_11_051
040661 5E 12 04    0683*  	dl ld_11_052
040664 88 12 04    0684*  	dl ld_12_000
040667 B2 12 04    0685*  	dl ld_12_001
04066A DC 12 04    0686*  	dl ld_12_007
04066D 06 13 04    0687*  	dl ld_12_012
040670 30 13 04    0688*  	dl ld_12_017
040673 5A 13 04    0689*  	dl ld_12_018
040676 84 13 04    0690*  	dl ld_12_019
040679 AE 13 04    0691*  	dl ld_12_020
04067C D8 13 04    0692*  	dl ld_12_021
04067F 02 14 04    0693*  	dl ld_12_022
040682 2C 14 04    0694*  	dl ld_12_023
040685 56 14 04    0695*  	dl ld_12_024
040688 80 14 04    0696*  	dl ld_12_028
04068B AA 14 04    0697*  	dl ld_12_032
04068E D4 14 04    0698*  	dl ld_12_033
040691 FE 14 04    0699*  	dl ld_12_034
040694 28 15 04    0700*  	dl ld_12_035
040697 52 15 04    0701*  	dl ld_12_036
04069A 7C 15 04    0702*  	dl ld_12_037
04069D A6 15 04    0703*  	dl ld_12_040
0406A0 D0 15 04    0704*  	dl ld_12_043
0406A3 FA 15 04    0705*  	dl ld_12_044
0406A6 24 16 04    0706*  	dl ld_12_045
0406A9 4E 16 04    0707*  	dl ld_12_046
0406AC 78 16 04    0708*  	dl ld_12_048
0406AF A2 16 04    0709*  	dl ld_12_050
0406B2 CC 16 04    0710*  	dl ld_12_051
0406B5 F6 16 04    0711*  	dl ld_12_052
0406B8 20 17 04    0712*  	dl ld_13_000
0406BB 4A 17 04    0713*  	dl ld_13_001
0406BE 74 17 04    0714*  	dl ld_13_007
0406C1 9E 17 04    0715*  	dl ld_13_012
0406C4 C8 17 04    0716*  	dl ld_13_017
0406C7 F2 17 04    0717*  	dl ld_13_018
0406CA 1C 18 04    0718*  	dl ld_13_019
0406CD 46 18 04    0719*  	dl ld_13_020
0406D0 70 18 04    0720*  	dl ld_13_021
0406D3 9A 18 04    0721*  	dl ld_13_022
0406D6 C4 18 04    0722*  	dl ld_13_023
0406D9 EE 18 04    0723*  	dl ld_13_024
0406DC 18 19 04    0724*  	dl ld_13_028
0406DF 42 19 04    0725*  	dl ld_13_032
0406E2 6C 19 04    0726*  	dl ld_13_033
0406E5 96 19 04    0727*  	dl ld_13_034
0406E8 C0 19 04    0728*  	dl ld_13_035
0406EB EA 19 04    0729*  	dl ld_13_036
0406EE 14 1A 04    0730*  	dl ld_13_037
0406F1 3E 1A 04    0731*  	dl ld_13_040
0406F4 68 1A 04    0732*  	dl ld_13_043
0406F7 92 1A 04    0733*  	dl ld_13_044
0406FA BC 1A 04    0734*  	dl ld_13_045
0406FD E6 1A 04    0735*  	dl ld_13_046
040700 10 1B 04    0736*  	dl ld_13_048
040703 3A 1B 04    0737*  	dl ld_13_050
040706 64 1B 04    0738*  	dl ld_13_051
040709 8E 1B 04    0739*  	dl ld_13_052
04070C B8 1B 04    0740*  	dl ld_14_000
04070F E2 1B 04    0741*  	dl ld_14_001
040712 0C 1C 04    0742*  	dl ld_14_007
040715 36 1C 04    0743*  	dl ld_14_012
040718 60 1C 04    0744*  	dl ld_14_017
04071B 8A 1C 04    0745*  	dl ld_14_018
04071E B4 1C 04    0746*  	dl ld_14_019
040721 DE 1C 04    0747*  	dl ld_14_020
040724 08 1D 04    0748*  	dl ld_14_021
040727 32 1D 04    0749*  	dl ld_14_022
04072A 5C 1D 04    0750*  	dl ld_14_023
04072D 86 1D 04    0751*  	dl ld_14_024
040730 B0 1D 04    0752*  	dl ld_14_028
040733 DA 1D 04    0753*  	dl ld_14_032
040736 04 1E 04    0754*  	dl ld_14_033
040739 2E 1E 04    0755*  	dl ld_14_034
04073C 58 1E 04    0756*  	dl ld_14_035
04073F 82 1E 04    0757*  	dl ld_14_036
040742 AC 1E 04    0758*  	dl ld_14_037
040745 D6 1E 04    0759*  	dl ld_14_040
040748 00 1F 04    0760*  	dl ld_14_043
04074B 2A 1F 04    0761*  	dl ld_14_044
04074E 54 1F 04    0762*  	dl ld_14_045
040751 7E 1F 04    0763*  	dl ld_14_046
040754 A8 1F 04    0764*  	dl ld_14_048
040757 D2 1F 04    0765*  	dl ld_14_050
04075A FC 1F 04    0766*  	dl ld_14_051
04075D 26 20 04    0767*  	dl ld_14_052
040760 50 20 04    0768*  	dl ld_15_000
040763 7A 20 04    0769*  	dl ld_15_001
040766 A4 20 04    0770*  	dl ld_15_007
040769 CE 20 04    0771*  	dl ld_15_012
04076C F8 20 04    0772*  	dl ld_15_017
04076F 22 21 04    0773*  	dl ld_15_018
040772 4C 21 04    0774*  	dl ld_15_019
040775 76 21 04    0775*  	dl ld_15_020
040778 A0 21 04    0776*  	dl ld_15_021
04077B CA 21 04    0777*  	dl ld_15_022
04077E F4 21 04    0778*  	dl ld_15_023
040781 1E 22 04    0779*  	dl ld_15_024
040784 48 22 04    0780*  	dl ld_15_028
040787 72 22 04    0781*  	dl ld_15_032
04078A 9C 22 04    0782*  	dl ld_15_033
04078D C6 22 04    0783*  	dl ld_15_034
040790 F0 22 04    0784*  	dl ld_15_035
040793 1A 23 04    0785*  	dl ld_15_036
040796 44 23 04    0786*  	dl ld_15_037
040799 6E 23 04    0787*  	dl ld_15_040
04079C 98 23 04    0788*  	dl ld_15_043
04079F C2 23 04    0789*  	dl ld_15_044
0407A2 EC 23 04    0790*  	dl ld_15_045
0407A5 16 24 04    0791*  	dl ld_15_046
0407A8 40 24 04    0792*  	dl ld_15_048
0407AB 6A 24 04    0793*  	dl ld_15_050
0407AE 94 24 04    0794*  	dl ld_15_051
0407B1 BE 24 04    0795*  	dl ld_15_052
0407B4 E8 24 04    0796*  	dl ld_16_000
0407B7 12 25 04    0797*  	dl ld_16_001
0407BA 3C 25 04    0798*  	dl ld_16_007
0407BD 66 25 04    0799*  	dl ld_16_012
0407C0 90 25 04    0800*  	dl ld_16_017
0407C3 BA 25 04    0801*  	dl ld_16_018
0407C6 E4 25 04    0802*  	dl ld_16_019
0407C9 0E 26 04    0803*  	dl ld_16_020
0407CC 38 26 04    0804*  	dl ld_16_021
0407CF 62 26 04    0805*  	dl ld_16_022
0407D2 8C 26 04    0806*  	dl ld_16_023
0407D5 B6 26 04    0807*  	dl ld_16_024
0407D8 E0 26 04    0808*  	dl ld_16_028
0407DB 0A 27 04    0809*  	dl ld_16_032
0407DE 34 27 04    0810*  	dl ld_16_033
0407E1 5E 27 04    0811*  	dl ld_16_034
0407E4 88 27 04    0812*  	dl ld_16_035
0407E7 B2 27 04    0813*  	dl ld_16_036
0407EA DC 27 04    0814*  	dl ld_16_037
0407ED 06 28 04    0815*  	dl ld_16_040
0407F0 30 28 04    0816*  	dl ld_16_043
0407F3 5A 28 04    0817*  	dl ld_16_044
0407F6 84 28 04    0818*  	dl ld_16_045
0407F9 AE 28 04    0819*  	dl ld_16_046
0407FC D8 28 04    0820*  	dl ld_16_048
0407FF 02 29 04    0821*  	dl ld_16_050
040802 2C 29 04    0822*  	dl ld_16_051
040805 56 29 04    0823*  	dl ld_16_052
040808 80 29 04    0824*  	dl ld_17_000
04080B AA 29 04    0825*  	dl ld_17_001
04080E D4 29 04    0826*  	dl ld_17_007
040811 FE 29 04    0827*  	dl ld_17_012
040814 28 2A 04    0828*  	dl ld_17_017
040817 52 2A 04    0829*  	dl ld_17_018
04081A 7C 2A 04    0830*  	dl ld_17_019
04081D A6 2A 04    0831*  	dl ld_17_020
040820 D0 2A 04    0832*  	dl ld_17_021
040823 FA 2A 04    0833*  	dl ld_17_022
040826 24 2B 04    0834*  	dl ld_17_023
040829 4E 2B 04    0835*  	dl ld_17_024
04082C 78 2B 04    0836*  	dl ld_17_028
04082F A2 2B 04    0837*  	dl ld_17_032
040832 CC 2B 04    0838*  	dl ld_17_033
040835 F6 2B 04    0839*  	dl ld_17_034
040838 20 2C 04    0840*  	dl ld_17_035
04083B 4A 2C 04    0841*  	dl ld_17_036
04083E 74 2C 04    0842*  	dl ld_17_037
040841 9E 2C 04    0843*  	dl ld_17_040
040844 C8 2C 04    0844*  	dl ld_17_043
040847 F2 2C 04    0845*  	dl ld_17_044
04084A 1C 2D 04    0846*  	dl ld_17_045
04084D 46 2D 04    0847*  	dl ld_17_046
040850 70 2D 04    0848*  	dl ld_17_048
040853 9A 2D 04    0849*  	dl ld_17_050
040856 C4 2D 04    0850*  	dl ld_17_051
040859 EE 2D 04    0851*  	dl ld_17_052
04085C 18 2E 04    0852*  	dl ld_57_000
04085F 42 2E 04    0853*  	dl ld_57_001
040862 6C 2E 04    0854*  	dl ld_57_007
040865 96 2E 04    0855*  	dl ld_57_012
040868 C0 2E 04    0856*  	dl ld_57_017
04086B EA 2E 04    0857*  	dl ld_57_018
04086E 14 2F 04    0858*  	dl ld_57_019
040871 3E 2F 04    0859*  	dl ld_57_020
040874 68 2F 04    0860*  	dl ld_57_021
040877 92 2F 04    0861*  	dl ld_57_022
04087A BC 2F 04    0862*  	dl ld_57_023
04087D E6 2F 04    0863*  	dl ld_57_024
040880 10 30 04    0864*  	dl ld_57_028
040883 3A 30 04    0865*  	dl ld_57_032
040886 64 30 04    0866*  	dl ld_57_033
040889 8E 30 04    0867*  	dl ld_57_034
04088C B8 30 04    0868*  	dl ld_57_035
04088F E2 30 04    0869*  	dl ld_57_036
040892 0C 31 04    0870*  	dl ld_57_037
040895 36 31 04    0871*  	dl ld_57_040
040898 60 31 04    0872*  	dl ld_57_043
04089B 8A 31 04    0873*  	dl ld_57_044
04089E B4 31 04    0874*  	dl ld_57_045
0408A1 DE 31 04    0875*  	dl ld_57_046
0408A4 08 32 04    0876*  	dl ld_57_048
0408A7 32 32 04    0877*  	dl ld_57_050
0408AA 5C 32 04    0878*  	dl ld_57_051
0408AD 86 32 04    0879*  	dl ld_57_052
0408B0 B0 32 04    0880*  	dl ld_58_000
0408B3 DA 32 04    0881*  	dl ld_58_001
0408B6 04 33 04    0882*  	dl ld_58_007
0408B9 2E 33 04    0883*  	dl ld_58_012
0408BC 58 33 04    0884*  	dl ld_58_017
0408BF 82 33 04    0885*  	dl ld_58_018
0408C2 AC 33 04    0886*  	dl ld_58_019
0408C5 D6 33 04    0887*  	dl ld_58_020
0408C8 00 34 04    0888*  	dl ld_58_021
0408CB 2A 34 04    0889*  	dl ld_58_022
0408CE 54 34 04    0890*  	dl ld_58_023
0408D1 7E 34 04    0891*  	dl ld_58_024
0408D4 A8 34 04    0892*  	dl ld_58_028
0408D7 D2 34 04    0893*  	dl ld_58_032
0408DA FC 34 04    0894*  	dl ld_58_033
0408DD 26 35 04    0895*  	dl ld_58_034
0408E0 50 35 04    0896*  	dl ld_58_035
0408E3 7A 35 04    0897*  	dl ld_58_036
0408E6 A4 35 04    0898*  	dl ld_58_037
0408E9 CE 35 04    0899*  	dl ld_58_040
0408EC F8 35 04    0900*  	dl ld_58_043
0408EF 22 36 04    0901*  	dl ld_58_044
0408F2 4C 36 04    0902*  	dl ld_58_045
0408F5 76 36 04    0903*  	dl ld_58_046
0408F8 A0 36 04    0904*  	dl ld_58_048
0408FB CA 36 04    0905*  	dl ld_58_050
0408FE F4 36 04    0906*  	dl ld_58_051
040901 1E 37 04    0907*  	dl ld_58_052
040904 48 37 04    0908*  	dl ld_59_000
040907 72 37 04    0909*  	dl ld_59_001
04090A 9C 37 04    0910*  	dl ld_59_007
04090D C6 37 04    0911*  	dl ld_59_012
040910 F0 37 04    0912*  	dl ld_59_017
040913 1A 38 04    0913*  	dl ld_59_018
040916 44 38 04    0914*  	dl ld_59_019
040919 6E 38 04    0915*  	dl ld_59_020
04091C 98 38 04    0916*  	dl ld_59_021
04091F C2 38 04    0917*  	dl ld_59_022
040922 EC 38 04    0918*  	dl ld_59_023
040925 16 39 04    0919*  	dl ld_59_024
040928 40 39 04    0920*  	dl ld_59_028
04092B 6A 39 04    0921*  	dl ld_59_032
04092E 94 39 04    0922*  	dl ld_59_033
040931 BE 39 04    0923*  	dl ld_59_034
040934 E8 39 04    0924*  	dl ld_59_035
040937 12 3A 04    0925*  	dl ld_59_036
04093A 3C 3A 04    0926*  	dl ld_59_037
04093D 66 3A 04    0927*  	dl ld_59_040
040940 90 3A 04    0928*  	dl ld_59_043
040943 BA 3A 04    0929*  	dl ld_59_044
040946 E4 3A 04    0930*  	dl ld_59_045
040949 0E 3B 04    0931*  	dl ld_59_046
04094C 38 3B 04    0932*  	dl ld_59_048
04094F 62 3B 04    0933*  	dl ld_59_050
040952 8C 3B 04    0934*  	dl ld_59_051
040955 B6 3B 04    0935*  	dl ld_59_052
040958             0936*  
040958             0937*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
040958             0938*  
040958             0939*  ld_10_000:
040958 21 E0 3B 04 0940*  	ld hl,F10_000
04095C 22 C5 C7 04 0941*  	ld (cur_filename),hl
040960 11 F1 D3 04 0942*  	ld de,filedata
040964 01 00 00 01 0943*  	ld bc,65536
040968 3E 01       0944*  	ld a,mos_load
04096A 5B CF       0945*  	RST.LIL 08h
04096C 21 00 01 00 0946*  	ld hl,BUF_10_000
040970 01 1D 00 00 0947*  	ld bc,29
040974 11 23 00 00 0948*  	ld de,35
040978 DD 21 F7 03 0949*  	ld ix,1015
       00          
04097D CD 40 C9 04 0950*  	call vdu_load_img
040981 C9          0951*  	ret
040982             0952*  
040982             0953*  ld_10_001:
040982 21 F4 3B 04 0954*  	ld hl,F10_001
040986 22 C5 C7 04 0955*  	ld (cur_filename),hl
04098A 11 F1 D3 04 0956*  	ld de,filedata
04098E 01 00 00 01 0957*  	ld bc,65536
040992 3E 01       0958*  	ld a,mos_load
040994 5B CF       0959*  	RST.LIL 08h
040996 21 01 01 00 0960*  	ld hl,BUF_10_001
04099A 01 17 00 00 0961*  	ld bc,23
04099E 11 23 00 00 0962*  	ld de,35
0409A2 DD 21 25 03 0963*  	ld ix,805
       00          
0409A7 CD 40 C9 04 0964*  	call vdu_load_img
0409AB C9          0965*  	ret
0409AC             0966*  
0409AC             0967*  ld_10_007:
0409AC 21 08 3C 04 0968*  	ld hl,F10_007
0409B0 22 C5 C7 04 0969*  	ld (cur_filename),hl
0409B4 11 F1 D3 04 0970*  	ld de,filedata
0409B8 01 00 00 01 0971*  	ld bc,65536
0409BC 3E 01       0972*  	ld a,mos_load
0409BE 5B CF       0973*  	RST.LIL 08h
0409C0 21 02 01 00 0974*  	ld hl,BUF_10_007
0409C4 01 1D 00 00 0975*  	ld bc,29
0409C8 11 23 00 00 0976*  	ld de,35
0409CC DD 21 F7 03 0977*  	ld ix,1015
       00          
0409D1 CD 40 C9 04 0978*  	call vdu_load_img
0409D5 C9          0979*  	ret
0409D6             0980*  
0409D6             0981*  ld_10_012:
0409D6 21 1C 3C 04 0982*  	ld hl,F10_012
0409DA 22 C5 C7 04 0983*  	ld (cur_filename),hl
0409DE 11 F1 D3 04 0984*  	ld de,filedata
0409E2 01 00 00 01 0985*  	ld bc,65536
0409E6 3E 01       0986*  	ld a,mos_load
0409E8 5B CF       0987*  	RST.LIL 08h
0409EA 21 03 01 00 0988*  	ld hl,BUF_10_012
0409EE 01 24 00 00 0989*  	ld bc,36
0409F2 11 23 00 00 0990*  	ld de,35
0409F6 DD 21 EC 04 0991*  	ld ix,1260
       00          
0409FB CD 40 C9 04 0992*  	call vdu_load_img
0409FF C9          0993*  	ret
040A00             0994*  
040A00             0995*  ld_10_017:
040A00 21 30 3C 04 0996*  	ld hl,F10_017
040A04 22 C5 C7 04 0997*  	ld (cur_filename),hl
040A08 11 F1 D3 04 0998*  	ld de,filedata
040A0C 01 00 00 01 0999*  	ld bc,65536
040A10 3E 01       1000*  	ld a,mos_load
040A12 5B CF       1001*  	RST.LIL 08h
040A14 21 04 01 00 1002*  	ld hl,BUF_10_017
040A18 01 23 00 00 1003*  	ld bc,35
040A1C 11 2D 00 00 1004*  	ld de,45
040A20 DD 21 27 06 1005*  	ld ix,1575
       00          
040A25 CD 40 C9 04 1006*  	call vdu_load_img
040A29 C9          1007*  	ret
040A2A             1008*  
040A2A             1009*  ld_10_018:
040A2A 21 44 3C 04 1010*  	ld hl,F10_018
040A2E 22 C5 C7 04 1011*  	ld (cur_filename),hl
040A32 11 F1 D3 04 1012*  	ld de,filedata
040A36 01 00 00 01 1013*  	ld bc,65536
040A3A 3E 01       1014*  	ld a,mos_load
040A3C 5B CF       1015*  	RST.LIL 08h
040A3E 21 05 01 00 1016*  	ld hl,BUF_10_018
040A42 01 1A 00 00 1017*  	ld bc,26
040A46 11 2D 00 00 1018*  	ld de,45
040A4A DD 21 92 04 1019*  	ld ix,1170
       00          
040A4F CD 40 C9 04 1020*  	call vdu_load_img
040A53 C9          1021*  	ret
040A54             1022*  
040A54             1023*  ld_10_019:
040A54 21 58 3C 04 1024*  	ld hl,F10_019
040A58 22 C5 C7 04 1025*  	ld (cur_filename),hl
040A5C 11 F1 D3 04 1026*  	ld de,filedata
040A60 01 00 00 01 1027*  	ld bc,65536
040A64 3E 01       1028*  	ld a,mos_load
040A66 5B CF       1029*  	RST.LIL 08h
040A68 21 06 01 00 1030*  	ld hl,BUF_10_019
040A6C 01 0F 00 00 1031*  	ld bc,15
040A70 11 2D 00 00 1032*  	ld de,45
040A74 DD 21 A3 02 1033*  	ld ix,675
       00          
040A79 CD 40 C9 04 1034*  	call vdu_load_img
040A7D C9          1035*  	ret
040A7E             1036*  
040A7E             1037*  ld_10_020:
040A7E 21 6C 3C 04 1038*  	ld hl,F10_020
040A82 22 C5 C7 04 1039*  	ld (cur_filename),hl
040A86 11 F1 D3 04 1040*  	ld de,filedata
040A8A 01 00 00 01 1041*  	ld bc,65536
040A8E 3E 01       1042*  	ld a,mos_load
040A90 5B CF       1043*  	RST.LIL 08h
040A92 21 07 01 00 1044*  	ld hl,BUF_10_020
040A96 01 05 00 00 1045*  	ld bc,5
040A9A 11 2D 00 00 1046*  	ld de,45
040A9E DD 21 E1 00 1047*  	ld ix,225
       00          
040AA3 CD 40 C9 04 1048*  	call vdu_load_img
040AA7 C9          1049*  	ret
040AA8             1050*  
040AA8             1051*  ld_10_021:
040AA8 21 80 3C 04 1052*  	ld hl,F10_021
040AAC 22 C5 C7 04 1053*  	ld (cur_filename),hl
040AB0 11 F1 D3 04 1054*  	ld de,filedata
040AB4 01 00 00 01 1055*  	ld bc,65536
040AB8 3E 01       1056*  	ld a,mos_load
040ABA 5B CF       1057*  	RST.LIL 08h
040ABC 21 08 01 00 1058*  	ld hl,BUF_10_021
040AC0 01 05 00 00 1059*  	ld bc,5
040AC4 11 2B 00 00 1060*  	ld de,43
040AC8 DD 21 D7 00 1061*  	ld ix,215
       00          
040ACD CD 40 C9 04 1062*  	call vdu_load_img
040AD1 C9          1063*  	ret
040AD2             1064*  
040AD2             1065*  ld_10_022:
040AD2 21 94 3C 04 1066*  	ld hl,F10_022
040AD6 22 C5 C7 04 1067*  	ld (cur_filename),hl
040ADA 11 F1 D3 04 1068*  	ld de,filedata
040ADE 01 00 00 01 1069*  	ld bc,65536
040AE2 3E 01       1070*  	ld a,mos_load
040AE4 5B CF       1071*  	RST.LIL 08h
040AE6 21 09 01 00 1072*  	ld hl,BUF_10_022
040AEA 01 0F 00 00 1073*  	ld bc,15
040AEE 11 2D 00 00 1074*  	ld de,45
040AF2 DD 21 A3 02 1075*  	ld ix,675
       00          
040AF7 CD 40 C9 04 1076*  	call vdu_load_img
040AFB C9          1077*  	ret
040AFC             1078*  
040AFC             1079*  ld_10_023:
040AFC 21 A8 3C 04 1080*  	ld hl,F10_023
040B00 22 C5 C7 04 1081*  	ld (cur_filename),hl
040B04 11 F1 D3 04 1082*  	ld de,filedata
040B08 01 00 00 01 1083*  	ld bc,65536
040B0C 3E 01       1084*  	ld a,mos_load
040B0E 5B CF       1085*  	RST.LIL 08h
040B10 21 0A 01 00 1086*  	ld hl,BUF_10_023
040B14 01 1A 00 00 1087*  	ld bc,26
040B18 11 2D 00 00 1088*  	ld de,45
040B1C DD 21 92 04 1089*  	ld ix,1170
       00          
040B21 CD 40 C9 04 1090*  	call vdu_load_img
040B25 C9          1091*  	ret
040B26             1092*  
040B26             1093*  ld_10_024:
040B26 21 BC 3C 04 1094*  	ld hl,F10_024
040B2A 22 C5 C7 04 1095*  	ld (cur_filename),hl
040B2E 11 F1 D3 04 1096*  	ld de,filedata
040B32 01 00 00 01 1097*  	ld bc,65536
040B36 3E 01       1098*  	ld a,mos_load
040B38 5B CF       1099*  	RST.LIL 08h
040B3A 21 0B 01 00 1100*  	ld hl,BUF_10_024
040B3E 01 23 00 00 1101*  	ld bc,35
040B42 11 2D 00 00 1102*  	ld de,45
040B46 DD 21 27 06 1103*  	ld ix,1575
       00          
040B4B CD 40 C9 04 1104*  	call vdu_load_img
040B4F C9          1105*  	ret
040B50             1106*  
040B50             1107*  ld_10_028:
040B50 21 D0 3C 04 1108*  	ld hl,F10_028
040B54 22 C5 C7 04 1109*  	ld (cur_filename),hl
040B58 11 F1 D3 04 1110*  	ld de,filedata
040B5C 01 00 00 01 1111*  	ld bc,65536
040B60 3E 01       1112*  	ld a,mos_load
040B62 5B CF       1113*  	RST.LIL 08h
040B64 21 0C 01 00 1114*  	ld hl,BUF_10_028
040B68 01 2E 00 00 1115*  	ld bc,46
040B6C 11 2D 00 00 1116*  	ld de,45
040B70 DD 21 16 08 1117*  	ld ix,2070
       00          
040B75 CD 40 C9 04 1118*  	call vdu_load_img
040B79 C9          1119*  	ret
040B7A             1120*  
040B7A             1121*  ld_10_032:
040B7A 21 E4 3C 04 1122*  	ld hl,F10_032
040B7E 22 C5 C7 04 1123*  	ld (cur_filename),hl
040B82 11 F1 D3 04 1124*  	ld de,filedata
040B86 01 00 00 01 1125*  	ld bc,65536
040B8A 3E 01       1126*  	ld a,mos_load
040B8C 5B CF       1127*  	RST.LIL 08h
040B8E 21 0D 01 00 1128*  	ld hl,BUF_10_032
040B92 01 2D 00 00 1129*  	ld bc,45
040B96 11 3F 00 00 1130*  	ld de,63
040B9A DD 21 13 0B 1131*  	ld ix,2835
       00          
040B9F CD 40 C9 04 1132*  	call vdu_load_img
040BA3 C9          1133*  	ret
040BA4             1134*  
040BA4             1135*  ld_10_033:
040BA4 21 F8 3C 04 1136*  	ld hl,F10_033
040BA8 22 C5 C7 04 1137*  	ld (cur_filename),hl
040BAC 11 F1 D3 04 1138*  	ld de,filedata
040BB0 01 00 00 01 1139*  	ld bc,65536
040BB4 3E 01       1140*  	ld a,mos_load
040BB6 5B CF       1141*  	RST.LIL 08h
040BB8 21 0E 01 00 1142*  	ld hl,BUF_10_033
040BBC 01 1B 00 00 1143*  	ld bc,27
040BC0 11 3F 00 00 1144*  	ld de,63
040BC4 DD 21 A5 06 1145*  	ld ix,1701
       00          
040BC9 CD 40 C9 04 1146*  	call vdu_load_img
040BCD C9          1147*  	ret
040BCE             1148*  
040BCE             1149*  ld_10_034:
040BCE 21 0C 3D 04 1150*  	ld hl,F10_034
040BD2 22 C5 C7 04 1151*  	ld (cur_filename),hl
040BD6 11 F1 D3 04 1152*  	ld de,filedata
040BDA 01 00 00 01 1153*  	ld bc,65536
040BDE 3E 01       1154*  	ld a,mos_load
040BE0 5B CF       1155*  	RST.LIL 08h
040BE2 21 0F 01 00 1156*  	ld hl,BUF_10_034
040BE6 01 09 00 00 1157*  	ld bc,9
040BEA 11 3F 00 00 1158*  	ld de,63
040BEE DD 21 37 02 1159*  	ld ix,567
       00          
040BF3 CD 40 C9 04 1160*  	call vdu_load_img
040BF7 C9          1161*  	ret
040BF8             1162*  
040BF8             1163*  ld_10_035:
040BF8 21 20 3D 04 1164*  	ld hl,F10_035
040BFC 22 C5 C7 04 1165*  	ld (cur_filename),hl
040C00 11 F1 D3 04 1166*  	ld de,filedata
040C04 01 00 00 01 1167*  	ld bc,65536
040C08 3E 01       1168*  	ld a,mos_load
040C0A 5B CF       1169*  	RST.LIL 08h
040C0C 21 10 01 00 1170*  	ld hl,BUF_10_035
040C10 01 09 00 00 1171*  	ld bc,9
040C14 11 3D 00 00 1172*  	ld de,61
040C18 DD 21 25 02 1173*  	ld ix,549
       00          
040C1D CD 40 C9 04 1174*  	call vdu_load_img
040C21 C9          1175*  	ret
040C22             1176*  
040C22             1177*  ld_10_036:
040C22 21 34 3D 04 1178*  	ld hl,F10_036
040C26 22 C5 C7 04 1179*  	ld (cur_filename),hl
040C2A 11 F1 D3 04 1180*  	ld de,filedata
040C2E 01 00 00 01 1181*  	ld bc,65536
040C32 3E 01       1182*  	ld a,mos_load
040C34 5B CF       1183*  	RST.LIL 08h
040C36 21 11 01 00 1184*  	ld hl,BUF_10_036
040C3A 01 1B 00 00 1185*  	ld bc,27
040C3E 11 3F 00 00 1186*  	ld de,63
040C42 DD 21 A5 06 1187*  	ld ix,1701
       00          
040C47 CD 40 C9 04 1188*  	call vdu_load_img
040C4B C9          1189*  	ret
040C4C             1190*  
040C4C             1191*  ld_10_037:
040C4C 21 48 3D 04 1192*  	ld hl,F10_037
040C50 22 C5 C7 04 1193*  	ld (cur_filename),hl
040C54 11 F1 D3 04 1194*  	ld de,filedata
040C58 01 00 00 01 1195*  	ld bc,65536
040C5C 3E 01       1196*  	ld a,mos_load
040C5E 5B CF       1197*  	RST.LIL 08h
040C60 21 12 01 00 1198*  	ld hl,BUF_10_037
040C64 01 2D 00 00 1199*  	ld bc,45
040C68 11 3F 00 00 1200*  	ld de,63
040C6C DD 21 13 0B 1201*  	ld ix,2835
       00          
040C71 CD 40 C9 04 1202*  	call vdu_load_img
040C75 C9          1203*  	ret
040C76             1204*  
040C76             1205*  ld_10_040:
040C76 21 5C 3D 04 1206*  	ld hl,F10_040
040C7A 22 C5 C7 04 1207*  	ld (cur_filename),hl
040C7E 11 F1 D3 04 1208*  	ld de,filedata
040C82 01 00 00 01 1209*  	ld bc,65536
040C86 3E 01       1210*  	ld a,mos_load
040C88 5B CF       1211*  	RST.LIL 08h
040C8A 21 13 01 00 1212*  	ld hl,BUF_10_040
040C8E 01 40 00 00 1213*  	ld bc,64
040C92 11 3F 00 00 1214*  	ld de,63
040C96 DD 21 C0 0F 1215*  	ld ix,4032
       00          
040C9B CD 40 C9 04 1216*  	call vdu_load_img
040C9F C9          1217*  	ret
040CA0             1218*  
040CA0             1219*  ld_10_043:
040CA0 21 70 3D 04 1220*  	ld hl,F10_043
040CA4 22 C5 C7 04 1221*  	ld (cur_filename),hl
040CA8 11 F1 D3 04 1222*  	ld de,filedata
040CAC 01 00 00 01 1223*  	ld bc,65536
040CB0 3E 01       1224*  	ld a,mos_load
040CB2 5B CF       1225*  	RST.LIL 08h
040CB4 21 14 01 00 1226*  	ld hl,BUF_10_043
040CB8 01 40 00 00 1227*  	ld bc,64
040CBC 11 6B 00 00 1228*  	ld de,107
040CC0 DD 21 C0 1A 1229*  	ld ix,6848
       00          
040CC5 CD 40 C9 04 1230*  	call vdu_load_img
040CC9 C9          1231*  	ret
040CCA             1232*  
040CCA             1233*  ld_10_044:
040CCA 21 84 3D 04 1234*  	ld hl,F10_044
040CCE 22 C5 C7 04 1235*  	ld (cur_filename),hl
040CD2 11 F1 D3 04 1236*  	ld de,filedata
040CD6 01 00 00 01 1237*  	ld bc,65536
040CDA 3E 01       1238*  	ld a,mos_load
040CDC 5B CF       1239*  	RST.LIL 08h
040CDE 21 15 01 00 1240*  	ld hl,BUF_10_044
040CE2 01 16 00 00 1241*  	ld bc,22
040CE6 11 6B 00 00 1242*  	ld de,107
040CEA DD 21 32 09 1243*  	ld ix,2354
       00          
040CEF CD 40 C9 04 1244*  	call vdu_load_img
040CF3 C9          1245*  	ret
040CF4             1246*  
040CF4             1247*  ld_10_045:
040CF4 21 98 3D 04 1248*  	ld hl,F10_045
040CF8 22 C5 C7 04 1249*  	ld (cur_filename),hl
040CFC 11 F1 D3 04 1250*  	ld de,filedata
040D00 01 00 00 01 1251*  	ld bc,65536
040D04 3E 01       1252*  	ld a,mos_load
040D06 5B CF       1253*  	RST.LIL 08h
040D08 21 16 01 00 1254*  	ld hl,BUF_10_045
040D0C 01 16 00 00 1255*  	ld bc,22
040D10 11 69 00 00 1256*  	ld de,105
040D14 DD 21 06 09 1257*  	ld ix,2310
       00          
040D19 CD 40 C9 04 1258*  	call vdu_load_img
040D1D C9          1259*  	ret
040D1E             1260*  
040D1E             1261*  ld_10_046:
040D1E 21 AC 3D 04 1262*  	ld hl,F10_046
040D22 22 C5 C7 04 1263*  	ld (cur_filename),hl
040D26 11 F1 D3 04 1264*  	ld de,filedata
040D2A 01 00 00 01 1265*  	ld bc,65536
040D2E 3E 01       1266*  	ld a,mos_load
040D30 5B CF       1267*  	RST.LIL 08h
040D32 21 17 01 00 1268*  	ld hl,BUF_10_046
040D36 01 40 00 00 1269*  	ld bc,64
040D3A 11 6B 00 00 1270*  	ld de,107
040D3E DD 21 C0 1A 1271*  	ld ix,6848
       00          
040D43 CD 40 C9 04 1272*  	call vdu_load_img
040D47 C9          1273*  	ret
040D48             1274*  
040D48             1275*  ld_10_048:
040D48 21 C0 3D 04 1276*  	ld hl,F10_048
040D4C 22 C5 C7 04 1277*  	ld (cur_filename),hl
040D50 11 F1 D3 04 1278*  	ld de,filedata
040D54 01 00 00 01 1279*  	ld bc,65536
040D58 3E 01       1280*  	ld a,mos_load
040D5A 5B CF       1281*  	RST.LIL 08h
040D5C 21 18 01 00 1282*  	ld hl,BUF_10_048
040D60 01 6C 00 00 1283*  	ld bc,108
040D64 11 6B 00 00 1284*  	ld de,107
040D68 DD 21 24 2D 1285*  	ld ix,11556
       00          
040D6D CD 40 C9 04 1286*  	call vdu_load_img
040D71 C9          1287*  	ret
040D72             1288*  
040D72             1289*  ld_10_050:
040D72 21 D4 3D 04 1290*  	ld hl,F10_050
040D76 22 C5 C7 04 1291*  	ld (cur_filename),hl
040D7A 11 F1 D3 04 1292*  	ld de,filedata
040D7E 01 00 00 01 1293*  	ld bc,65536
040D82 3E 01       1294*  	ld a,mos_load
040D84 5B CF       1295*  	RST.LIL 08h
040D86 21 19 01 00 1296*  	ld hl,BUF_10_050
040D8A 01 6A 00 00 1297*  	ld bc,106
040D8E 11 A0 00 00 1298*  	ld de,160
040D92 DD 21 40 42 1299*  	ld ix,16960
       00          
040D97 CD 40 C9 04 1300*  	call vdu_load_img
040D9B C9          1301*  	ret
040D9C             1302*  
040D9C             1303*  ld_10_051:
040D9C 21 E8 3D 04 1304*  	ld hl,F10_051
040DA0 22 C5 C7 04 1305*  	ld (cur_filename),hl
040DA4 11 F1 D3 04 1306*  	ld de,filedata
040DA8 01 00 00 01 1307*  	ld bc,65536
040DAC 3E 01       1308*  	ld a,mos_load
040DAE 5B CF       1309*  	RST.LIL 08h
040DB0 21 1A 01 00 1310*  	ld hl,BUF_10_051
040DB4 01 6A 00 00 1311*  	ld bc,106
040DB8 11 A0 00 00 1312*  	ld de,160
040DBC DD 21 40 42 1313*  	ld ix,16960
       00          
040DC1 CD 40 C9 04 1314*  	call vdu_load_img
040DC5 C9          1315*  	ret
040DC6             1316*  
040DC6             1317*  ld_10_052:
040DC6 21 FC 3D 04 1318*  	ld hl,F10_052
040DCA 22 C5 C7 04 1319*  	ld (cur_filename),hl
040DCE 11 F1 D3 04 1320*  	ld de,filedata
040DD2 01 00 00 01 1321*  	ld bc,65536
040DD6 3E 01       1322*  	ld a,mos_load
040DD8 5B CF       1323*  	RST.LIL 08h
040DDA 21 1B 01 00 1324*  	ld hl,BUF_10_052
040DDE 01 40 01 00 1325*  	ld bc,320
040DE2 11 A0 00 00 1326*  	ld de,160
040DE6 DD 21 00 C8 1327*  	ld ix,51200
       00          
040DEB CD 40 C9 04 1328*  	call vdu_load_img
040DEF C9          1329*  	ret
040DF0             1330*  
040DF0             1331*  ld_11_000:
040DF0 21 10 3E 04 1332*  	ld hl,F11_000
040DF4 22 C5 C7 04 1333*  	ld (cur_filename),hl
040DF8 11 F1 D3 04 1334*  	ld de,filedata
040DFC 01 00 00 01 1335*  	ld bc,65536
040E00 3E 01       1336*  	ld a,mos_load
040E02 5B CF       1337*  	RST.LIL 08h
040E04 21 1C 01 00 1338*  	ld hl,BUF_11_000
040E08 01 1D 00 00 1339*  	ld bc,29
040E0C 11 23 00 00 1340*  	ld de,35
040E10 DD 21 F7 03 1341*  	ld ix,1015
       00          
040E15 CD 40 C9 04 1342*  	call vdu_load_img
040E19 C9          1343*  	ret
040E1A             1344*  
040E1A             1345*  ld_11_001:
040E1A 21 24 3E 04 1346*  	ld hl,F11_001
040E1E 22 C5 C7 04 1347*  	ld (cur_filename),hl
040E22 11 F1 D3 04 1348*  	ld de,filedata
040E26 01 00 00 01 1349*  	ld bc,65536
040E2A 3E 01       1350*  	ld a,mos_load
040E2C 5B CF       1351*  	RST.LIL 08h
040E2E 21 1D 01 00 1352*  	ld hl,BUF_11_001
040E32 01 17 00 00 1353*  	ld bc,23
040E36 11 23 00 00 1354*  	ld de,35
040E3A DD 21 25 03 1355*  	ld ix,805
       00          
040E3F CD 40 C9 04 1356*  	call vdu_load_img
040E43 C9          1357*  	ret
040E44             1358*  
040E44             1359*  ld_11_007:
040E44 21 38 3E 04 1360*  	ld hl,F11_007
040E48 22 C5 C7 04 1361*  	ld (cur_filename),hl
040E4C 11 F1 D3 04 1362*  	ld de,filedata
040E50 01 00 00 01 1363*  	ld bc,65536
040E54 3E 01       1364*  	ld a,mos_load
040E56 5B CF       1365*  	RST.LIL 08h
040E58 21 1E 01 00 1366*  	ld hl,BUF_11_007
040E5C 01 1D 00 00 1367*  	ld bc,29
040E60 11 23 00 00 1368*  	ld de,35
040E64 DD 21 F7 03 1369*  	ld ix,1015
       00          
040E69 CD 40 C9 04 1370*  	call vdu_load_img
040E6D C9          1371*  	ret
040E6E             1372*  
040E6E             1373*  ld_11_012:
040E6E 21 4C 3E 04 1374*  	ld hl,F11_012
040E72 22 C5 C7 04 1375*  	ld (cur_filename),hl
040E76 11 F1 D3 04 1376*  	ld de,filedata
040E7A 01 00 00 01 1377*  	ld bc,65536
040E7E 3E 01       1378*  	ld a,mos_load
040E80 5B CF       1379*  	RST.LIL 08h
040E82 21 1F 01 00 1380*  	ld hl,BUF_11_012
040E86 01 24 00 00 1381*  	ld bc,36
040E8A 11 23 00 00 1382*  	ld de,35
040E8E DD 21 EC 04 1383*  	ld ix,1260
       00          
040E93 CD 40 C9 04 1384*  	call vdu_load_img
040E97 C9          1385*  	ret
040E98             1386*  
040E98             1387*  ld_11_017:
040E98 21 60 3E 04 1388*  	ld hl,F11_017
040E9C 22 C5 C7 04 1389*  	ld (cur_filename),hl
040EA0 11 F1 D3 04 1390*  	ld de,filedata
040EA4 01 00 00 01 1391*  	ld bc,65536
040EA8 3E 01       1392*  	ld a,mos_load
040EAA 5B CF       1393*  	RST.LIL 08h
040EAC 21 20 01 00 1394*  	ld hl,BUF_11_017
040EB0 01 23 00 00 1395*  	ld bc,35
040EB4 11 2D 00 00 1396*  	ld de,45
040EB8 DD 21 27 06 1397*  	ld ix,1575
       00          
040EBD CD 40 C9 04 1398*  	call vdu_load_img
040EC1 C9          1399*  	ret
040EC2             1400*  
040EC2             1401*  ld_11_018:
040EC2 21 74 3E 04 1402*  	ld hl,F11_018
040EC6 22 C5 C7 04 1403*  	ld (cur_filename),hl
040ECA 11 F1 D3 04 1404*  	ld de,filedata
040ECE 01 00 00 01 1405*  	ld bc,65536
040ED2 3E 01       1406*  	ld a,mos_load
040ED4 5B CF       1407*  	RST.LIL 08h
040ED6 21 21 01 00 1408*  	ld hl,BUF_11_018
040EDA 01 1A 00 00 1409*  	ld bc,26
040EDE 11 2D 00 00 1410*  	ld de,45
040EE2 DD 21 92 04 1411*  	ld ix,1170
       00          
040EE7 CD 40 C9 04 1412*  	call vdu_load_img
040EEB C9          1413*  	ret
040EEC             1414*  
040EEC             1415*  ld_11_019:
040EEC 21 88 3E 04 1416*  	ld hl,F11_019
040EF0 22 C5 C7 04 1417*  	ld (cur_filename),hl
040EF4 11 F1 D3 04 1418*  	ld de,filedata
040EF8 01 00 00 01 1419*  	ld bc,65536
040EFC 3E 01       1420*  	ld a,mos_load
040EFE 5B CF       1421*  	RST.LIL 08h
040F00 21 22 01 00 1422*  	ld hl,BUF_11_019
040F04 01 0F 00 00 1423*  	ld bc,15
040F08 11 2D 00 00 1424*  	ld de,45
040F0C DD 21 A3 02 1425*  	ld ix,675
       00          
040F11 CD 40 C9 04 1426*  	call vdu_load_img
040F15 C9          1427*  	ret
040F16             1428*  
040F16             1429*  ld_11_020:
040F16 21 9C 3E 04 1430*  	ld hl,F11_020
040F1A 22 C5 C7 04 1431*  	ld (cur_filename),hl
040F1E 11 F1 D3 04 1432*  	ld de,filedata
040F22 01 00 00 01 1433*  	ld bc,65536
040F26 3E 01       1434*  	ld a,mos_load
040F28 5B CF       1435*  	RST.LIL 08h
040F2A 21 23 01 00 1436*  	ld hl,BUF_11_020
040F2E 01 05 00 00 1437*  	ld bc,5
040F32 11 2D 00 00 1438*  	ld de,45
040F36 DD 21 E1 00 1439*  	ld ix,225
       00          
040F3B CD 40 C9 04 1440*  	call vdu_load_img
040F3F C9          1441*  	ret
040F40             1442*  
040F40             1443*  ld_11_021:
040F40 21 B0 3E 04 1444*  	ld hl,F11_021
040F44 22 C5 C7 04 1445*  	ld (cur_filename),hl
040F48 11 F1 D3 04 1446*  	ld de,filedata
040F4C 01 00 00 01 1447*  	ld bc,65536
040F50 3E 01       1448*  	ld a,mos_load
040F52 5B CF       1449*  	RST.LIL 08h
040F54 21 24 01 00 1450*  	ld hl,BUF_11_021
040F58 01 05 00 00 1451*  	ld bc,5
040F5C 11 2B 00 00 1452*  	ld de,43
040F60 DD 21 D7 00 1453*  	ld ix,215
       00          
040F65 CD 40 C9 04 1454*  	call vdu_load_img
040F69 C9          1455*  	ret
040F6A             1456*  
040F6A             1457*  ld_11_022:
040F6A 21 C4 3E 04 1458*  	ld hl,F11_022
040F6E 22 C5 C7 04 1459*  	ld (cur_filename),hl
040F72 11 F1 D3 04 1460*  	ld de,filedata
040F76 01 00 00 01 1461*  	ld bc,65536
040F7A 3E 01       1462*  	ld a,mos_load
040F7C 5B CF       1463*  	RST.LIL 08h
040F7E 21 25 01 00 1464*  	ld hl,BUF_11_022
040F82 01 0F 00 00 1465*  	ld bc,15
040F86 11 2D 00 00 1466*  	ld de,45
040F8A DD 21 A3 02 1467*  	ld ix,675
       00          
040F8F CD 40 C9 04 1468*  	call vdu_load_img
040F93 C9          1469*  	ret
040F94             1470*  
040F94             1471*  ld_11_023:
040F94 21 D8 3E 04 1472*  	ld hl,F11_023
040F98 22 C5 C7 04 1473*  	ld (cur_filename),hl
040F9C 11 F1 D3 04 1474*  	ld de,filedata
040FA0 01 00 00 01 1475*  	ld bc,65536
040FA4 3E 01       1476*  	ld a,mos_load
040FA6 5B CF       1477*  	RST.LIL 08h
040FA8 21 26 01 00 1478*  	ld hl,BUF_11_023
040FAC 01 1A 00 00 1479*  	ld bc,26
040FB0 11 2D 00 00 1480*  	ld de,45
040FB4 DD 21 92 04 1481*  	ld ix,1170
       00          
040FB9 CD 40 C9 04 1482*  	call vdu_load_img
040FBD C9          1483*  	ret
040FBE             1484*  
040FBE             1485*  ld_11_024:
040FBE 21 EC 3E 04 1486*  	ld hl,F11_024
040FC2 22 C5 C7 04 1487*  	ld (cur_filename),hl
040FC6 11 F1 D3 04 1488*  	ld de,filedata
040FCA 01 00 00 01 1489*  	ld bc,65536
040FCE 3E 01       1490*  	ld a,mos_load
040FD0 5B CF       1491*  	RST.LIL 08h
040FD2 21 27 01 00 1492*  	ld hl,BUF_11_024
040FD6 01 23 00 00 1493*  	ld bc,35
040FDA 11 2D 00 00 1494*  	ld de,45
040FDE DD 21 27 06 1495*  	ld ix,1575
       00          
040FE3 CD 40 C9 04 1496*  	call vdu_load_img
040FE7 C9          1497*  	ret
040FE8             1498*  
040FE8             1499*  ld_11_028:
040FE8 21 00 3F 04 1500*  	ld hl,F11_028
040FEC 22 C5 C7 04 1501*  	ld (cur_filename),hl
040FF0 11 F1 D3 04 1502*  	ld de,filedata
040FF4 01 00 00 01 1503*  	ld bc,65536
040FF8 3E 01       1504*  	ld a,mos_load
040FFA 5B CF       1505*  	RST.LIL 08h
040FFC 21 28 01 00 1506*  	ld hl,BUF_11_028
041000 01 2E 00 00 1507*  	ld bc,46
041004 11 2D 00 00 1508*  	ld de,45
041008 DD 21 16 08 1509*  	ld ix,2070
       00          
04100D CD 40 C9 04 1510*  	call vdu_load_img
041011 C9          1511*  	ret
041012             1512*  
041012             1513*  ld_11_032:
041012 21 14 3F 04 1514*  	ld hl,F11_032
041016 22 C5 C7 04 1515*  	ld (cur_filename),hl
04101A 11 F1 D3 04 1516*  	ld de,filedata
04101E 01 00 00 01 1517*  	ld bc,65536
041022 3E 01       1518*  	ld a,mos_load
041024 5B CF       1519*  	RST.LIL 08h
041026 21 29 01 00 1520*  	ld hl,BUF_11_032
04102A 01 2D 00 00 1521*  	ld bc,45
04102E 11 3F 00 00 1522*  	ld de,63
041032 DD 21 13 0B 1523*  	ld ix,2835
       00          
041037 CD 40 C9 04 1524*  	call vdu_load_img
04103B C9          1525*  	ret
04103C             1526*  
04103C             1527*  ld_11_033:
04103C 21 28 3F 04 1528*  	ld hl,F11_033
041040 22 C5 C7 04 1529*  	ld (cur_filename),hl
041044 11 F1 D3 04 1530*  	ld de,filedata
041048 01 00 00 01 1531*  	ld bc,65536
04104C 3E 01       1532*  	ld a,mos_load
04104E 5B CF       1533*  	RST.LIL 08h
041050 21 2A 01 00 1534*  	ld hl,BUF_11_033
041054 01 1B 00 00 1535*  	ld bc,27
041058 11 3F 00 00 1536*  	ld de,63
04105C DD 21 A5 06 1537*  	ld ix,1701
       00          
041061 CD 40 C9 04 1538*  	call vdu_load_img
041065 C9          1539*  	ret
041066             1540*  
041066             1541*  ld_11_034:
041066 21 3C 3F 04 1542*  	ld hl,F11_034
04106A 22 C5 C7 04 1543*  	ld (cur_filename),hl
04106E 11 F1 D3 04 1544*  	ld de,filedata
041072 01 00 00 01 1545*  	ld bc,65536
041076 3E 01       1546*  	ld a,mos_load
041078 5B CF       1547*  	RST.LIL 08h
04107A 21 2B 01 00 1548*  	ld hl,BUF_11_034
04107E 01 09 00 00 1549*  	ld bc,9
041082 11 3F 00 00 1550*  	ld de,63
041086 DD 21 37 02 1551*  	ld ix,567
       00          
04108B CD 40 C9 04 1552*  	call vdu_load_img
04108F C9          1553*  	ret
041090             1554*  
041090             1555*  ld_11_035:
041090 21 50 3F 04 1556*  	ld hl,F11_035
041094 22 C5 C7 04 1557*  	ld (cur_filename),hl
041098 11 F1 D3 04 1558*  	ld de,filedata
04109C 01 00 00 01 1559*  	ld bc,65536
0410A0 3E 01       1560*  	ld a,mos_load
0410A2 5B CF       1561*  	RST.LIL 08h
0410A4 21 2C 01 00 1562*  	ld hl,BUF_11_035
0410A8 01 09 00 00 1563*  	ld bc,9
0410AC 11 3D 00 00 1564*  	ld de,61
0410B0 DD 21 25 02 1565*  	ld ix,549
       00          
0410B5 CD 40 C9 04 1566*  	call vdu_load_img
0410B9 C9          1567*  	ret
0410BA             1568*  
0410BA             1569*  ld_11_036:
0410BA 21 64 3F 04 1570*  	ld hl,F11_036
0410BE 22 C5 C7 04 1571*  	ld (cur_filename),hl
0410C2 11 F1 D3 04 1572*  	ld de,filedata
0410C6 01 00 00 01 1573*  	ld bc,65536
0410CA 3E 01       1574*  	ld a,mos_load
0410CC 5B CF       1575*  	RST.LIL 08h
0410CE 21 2D 01 00 1576*  	ld hl,BUF_11_036
0410D2 01 1B 00 00 1577*  	ld bc,27
0410D6 11 3F 00 00 1578*  	ld de,63
0410DA DD 21 A5 06 1579*  	ld ix,1701
       00          
0410DF CD 40 C9 04 1580*  	call vdu_load_img
0410E3 C9          1581*  	ret
0410E4             1582*  
0410E4             1583*  ld_11_037:
0410E4 21 78 3F 04 1584*  	ld hl,F11_037
0410E8 22 C5 C7 04 1585*  	ld (cur_filename),hl
0410EC 11 F1 D3 04 1586*  	ld de,filedata
0410F0 01 00 00 01 1587*  	ld bc,65536
0410F4 3E 01       1588*  	ld a,mos_load
0410F6 5B CF       1589*  	RST.LIL 08h
0410F8 21 2E 01 00 1590*  	ld hl,BUF_11_037
0410FC 01 2D 00 00 1591*  	ld bc,45
041100 11 3F 00 00 1592*  	ld de,63
041104 DD 21 13 0B 1593*  	ld ix,2835
       00          
041109 CD 40 C9 04 1594*  	call vdu_load_img
04110D C9          1595*  	ret
04110E             1596*  
04110E             1597*  ld_11_040:
04110E 21 8C 3F 04 1598*  	ld hl,F11_040
041112 22 C5 C7 04 1599*  	ld (cur_filename),hl
041116 11 F1 D3 04 1600*  	ld de,filedata
04111A 01 00 00 01 1601*  	ld bc,65536
04111E 3E 01       1602*  	ld a,mos_load
041120 5B CF       1603*  	RST.LIL 08h
041122 21 2F 01 00 1604*  	ld hl,BUF_11_040
041126 01 40 00 00 1605*  	ld bc,64
04112A 11 3F 00 00 1606*  	ld de,63
04112E DD 21 C0 0F 1607*  	ld ix,4032
       00          
041133 CD 40 C9 04 1608*  	call vdu_load_img
041137 C9          1609*  	ret
041138             1610*  
041138             1611*  ld_11_043:
041138 21 A0 3F 04 1612*  	ld hl,F11_043
04113C 22 C5 C7 04 1613*  	ld (cur_filename),hl
041140 11 F1 D3 04 1614*  	ld de,filedata
041144 01 00 00 01 1615*  	ld bc,65536
041148 3E 01       1616*  	ld a,mos_load
04114A 5B CF       1617*  	RST.LIL 08h
04114C 21 30 01 00 1618*  	ld hl,BUF_11_043
041150 01 40 00 00 1619*  	ld bc,64
041154 11 6B 00 00 1620*  	ld de,107
041158 DD 21 C0 1A 1621*  	ld ix,6848
       00          
04115D CD 40 C9 04 1622*  	call vdu_load_img
041161 C9          1623*  	ret
041162             1624*  
041162             1625*  ld_11_044:
041162 21 B4 3F 04 1626*  	ld hl,F11_044
041166 22 C5 C7 04 1627*  	ld (cur_filename),hl
04116A 11 F1 D3 04 1628*  	ld de,filedata
04116E 01 00 00 01 1629*  	ld bc,65536
041172 3E 01       1630*  	ld a,mos_load
041174 5B CF       1631*  	RST.LIL 08h
041176 21 31 01 00 1632*  	ld hl,BUF_11_044
04117A 01 16 00 00 1633*  	ld bc,22
04117E 11 6B 00 00 1634*  	ld de,107
041182 DD 21 32 09 1635*  	ld ix,2354
       00          
041187 CD 40 C9 04 1636*  	call vdu_load_img
04118B C9          1637*  	ret
04118C             1638*  
04118C             1639*  ld_11_045:
04118C 21 C8 3F 04 1640*  	ld hl,F11_045
041190 22 C5 C7 04 1641*  	ld (cur_filename),hl
041194 11 F1 D3 04 1642*  	ld de,filedata
041198 01 00 00 01 1643*  	ld bc,65536
04119C 3E 01       1644*  	ld a,mos_load
04119E 5B CF       1645*  	RST.LIL 08h
0411A0 21 32 01 00 1646*  	ld hl,BUF_11_045
0411A4 01 16 00 00 1647*  	ld bc,22
0411A8 11 69 00 00 1648*  	ld de,105
0411AC DD 21 06 09 1649*  	ld ix,2310
       00          
0411B1 CD 40 C9 04 1650*  	call vdu_load_img
0411B5 C9          1651*  	ret
0411B6             1652*  
0411B6             1653*  ld_11_046:
0411B6 21 DC 3F 04 1654*  	ld hl,F11_046
0411BA 22 C5 C7 04 1655*  	ld (cur_filename),hl
0411BE 11 F1 D3 04 1656*  	ld de,filedata
0411C2 01 00 00 01 1657*  	ld bc,65536
0411C6 3E 01       1658*  	ld a,mos_load
0411C8 5B CF       1659*  	RST.LIL 08h
0411CA 21 33 01 00 1660*  	ld hl,BUF_11_046
0411CE 01 40 00 00 1661*  	ld bc,64
0411D2 11 6B 00 00 1662*  	ld de,107
0411D6 DD 21 C0 1A 1663*  	ld ix,6848
       00          
0411DB CD 40 C9 04 1664*  	call vdu_load_img
0411DF C9          1665*  	ret
0411E0             1666*  
0411E0             1667*  ld_11_048:
0411E0 21 F0 3F 04 1668*  	ld hl,F11_048
0411E4 22 C5 C7 04 1669*  	ld (cur_filename),hl
0411E8 11 F1 D3 04 1670*  	ld de,filedata
0411EC 01 00 00 01 1671*  	ld bc,65536
0411F0 3E 01       1672*  	ld a,mos_load
0411F2 5B CF       1673*  	RST.LIL 08h
0411F4 21 34 01 00 1674*  	ld hl,BUF_11_048
0411F8 01 6C 00 00 1675*  	ld bc,108
0411FC 11 6B 00 00 1676*  	ld de,107
041200 DD 21 24 2D 1677*  	ld ix,11556
       00          
041205 CD 40 C9 04 1678*  	call vdu_load_img
041209 C9          1679*  	ret
04120A             1680*  
04120A             1681*  ld_11_050:
04120A 21 04 40 04 1682*  	ld hl,F11_050
04120E 22 C5 C7 04 1683*  	ld (cur_filename),hl
041212 11 F1 D3 04 1684*  	ld de,filedata
041216 01 00 00 01 1685*  	ld bc,65536
04121A 3E 01       1686*  	ld a,mos_load
04121C 5B CF       1687*  	RST.LIL 08h
04121E 21 35 01 00 1688*  	ld hl,BUF_11_050
041222 01 6A 00 00 1689*  	ld bc,106
041226 11 A0 00 00 1690*  	ld de,160
04122A DD 21 40 42 1691*  	ld ix,16960
       00          
04122F CD 40 C9 04 1692*  	call vdu_load_img
041233 C9          1693*  	ret
041234             1694*  
041234             1695*  ld_11_051:
041234 21 18 40 04 1696*  	ld hl,F11_051
041238 22 C5 C7 04 1697*  	ld (cur_filename),hl
04123C 11 F1 D3 04 1698*  	ld de,filedata
041240 01 00 00 01 1699*  	ld bc,65536
041244 3E 01       1700*  	ld a,mos_load
041246 5B CF       1701*  	RST.LIL 08h
041248 21 36 01 00 1702*  	ld hl,BUF_11_051
04124C 01 6A 00 00 1703*  	ld bc,106
041250 11 A0 00 00 1704*  	ld de,160
041254 DD 21 40 42 1705*  	ld ix,16960
       00          
041259 CD 40 C9 04 1706*  	call vdu_load_img
04125D C9          1707*  	ret
04125E             1708*  
04125E             1709*  ld_11_052:
04125E 21 2C 40 04 1710*  	ld hl,F11_052
041262 22 C5 C7 04 1711*  	ld (cur_filename),hl
041266 11 F1 D3 04 1712*  	ld de,filedata
04126A 01 00 00 01 1713*  	ld bc,65536
04126E 3E 01       1714*  	ld a,mos_load
041270 5B CF       1715*  	RST.LIL 08h
041272 21 37 01 00 1716*  	ld hl,BUF_11_052
041276 01 40 01 00 1717*  	ld bc,320
04127A 11 A0 00 00 1718*  	ld de,160
04127E DD 21 00 C8 1719*  	ld ix,51200
       00          
041283 CD 40 C9 04 1720*  	call vdu_load_img
041287 C9          1721*  	ret
041288             1722*  
041288             1723*  ld_12_000:
041288 21 40 40 04 1724*  	ld hl,F12_000
04128C 22 C5 C7 04 1725*  	ld (cur_filename),hl
041290 11 F1 D3 04 1726*  	ld de,filedata
041294 01 00 00 01 1727*  	ld bc,65536
041298 3E 01       1728*  	ld a,mos_load
04129A 5B CF       1729*  	RST.LIL 08h
04129C 21 38 01 00 1730*  	ld hl,BUF_12_000
0412A0 01 1D 00 00 1731*  	ld bc,29
0412A4 11 23 00 00 1732*  	ld de,35
0412A8 DD 21 F7 03 1733*  	ld ix,1015
       00          
0412AD CD 40 C9 04 1734*  	call vdu_load_img
0412B1 C9          1735*  	ret
0412B2             1736*  
0412B2             1737*  ld_12_001:
0412B2 21 54 40 04 1738*  	ld hl,F12_001
0412B6 22 C5 C7 04 1739*  	ld (cur_filename),hl
0412BA 11 F1 D3 04 1740*  	ld de,filedata
0412BE 01 00 00 01 1741*  	ld bc,65536
0412C2 3E 01       1742*  	ld a,mos_load
0412C4 5B CF       1743*  	RST.LIL 08h
0412C6 21 39 01 00 1744*  	ld hl,BUF_12_001
0412CA 01 17 00 00 1745*  	ld bc,23
0412CE 11 23 00 00 1746*  	ld de,35
0412D2 DD 21 25 03 1747*  	ld ix,805
       00          
0412D7 CD 40 C9 04 1748*  	call vdu_load_img
0412DB C9          1749*  	ret
0412DC             1750*  
0412DC             1751*  ld_12_007:
0412DC 21 68 40 04 1752*  	ld hl,F12_007
0412E0 22 C5 C7 04 1753*  	ld (cur_filename),hl
0412E4 11 F1 D3 04 1754*  	ld de,filedata
0412E8 01 00 00 01 1755*  	ld bc,65536
0412EC 3E 01       1756*  	ld a,mos_load
0412EE 5B CF       1757*  	RST.LIL 08h
0412F0 21 3A 01 00 1758*  	ld hl,BUF_12_007
0412F4 01 1D 00 00 1759*  	ld bc,29
0412F8 11 23 00 00 1760*  	ld de,35
0412FC DD 21 F7 03 1761*  	ld ix,1015
       00          
041301 CD 40 C9 04 1762*  	call vdu_load_img
041305 C9          1763*  	ret
041306             1764*  
041306             1765*  ld_12_012:
041306 21 7C 40 04 1766*  	ld hl,F12_012
04130A 22 C5 C7 04 1767*  	ld (cur_filename),hl
04130E 11 F1 D3 04 1768*  	ld de,filedata
041312 01 00 00 01 1769*  	ld bc,65536
041316 3E 01       1770*  	ld a,mos_load
041318 5B CF       1771*  	RST.LIL 08h
04131A 21 3B 01 00 1772*  	ld hl,BUF_12_012
04131E 01 24 00 00 1773*  	ld bc,36
041322 11 23 00 00 1774*  	ld de,35
041326 DD 21 EC 04 1775*  	ld ix,1260
       00          
04132B CD 40 C9 04 1776*  	call vdu_load_img
04132F C9          1777*  	ret
041330             1778*  
041330             1779*  ld_12_017:
041330 21 90 40 04 1780*  	ld hl,F12_017
041334 22 C5 C7 04 1781*  	ld (cur_filename),hl
041338 11 F1 D3 04 1782*  	ld de,filedata
04133C 01 00 00 01 1783*  	ld bc,65536
041340 3E 01       1784*  	ld a,mos_load
041342 5B CF       1785*  	RST.LIL 08h
041344 21 3C 01 00 1786*  	ld hl,BUF_12_017
041348 01 23 00 00 1787*  	ld bc,35
04134C 11 2D 00 00 1788*  	ld de,45
041350 DD 21 27 06 1789*  	ld ix,1575
       00          
041355 CD 40 C9 04 1790*  	call vdu_load_img
041359 C9          1791*  	ret
04135A             1792*  
04135A             1793*  ld_12_018:
04135A 21 A4 40 04 1794*  	ld hl,F12_018
04135E 22 C5 C7 04 1795*  	ld (cur_filename),hl
041362 11 F1 D3 04 1796*  	ld de,filedata
041366 01 00 00 01 1797*  	ld bc,65536
04136A 3E 01       1798*  	ld a,mos_load
04136C 5B CF       1799*  	RST.LIL 08h
04136E 21 3D 01 00 1800*  	ld hl,BUF_12_018
041372 01 1A 00 00 1801*  	ld bc,26
041376 11 2D 00 00 1802*  	ld de,45
04137A DD 21 92 04 1803*  	ld ix,1170
       00          
04137F CD 40 C9 04 1804*  	call vdu_load_img
041383 C9          1805*  	ret
041384             1806*  
041384             1807*  ld_12_019:
041384 21 B8 40 04 1808*  	ld hl,F12_019
041388 22 C5 C7 04 1809*  	ld (cur_filename),hl
04138C 11 F1 D3 04 1810*  	ld de,filedata
041390 01 00 00 01 1811*  	ld bc,65536
041394 3E 01       1812*  	ld a,mos_load
041396 5B CF       1813*  	RST.LIL 08h
041398 21 3E 01 00 1814*  	ld hl,BUF_12_019
04139C 01 0F 00 00 1815*  	ld bc,15
0413A0 11 2D 00 00 1816*  	ld de,45
0413A4 DD 21 A3 02 1817*  	ld ix,675
       00          
0413A9 CD 40 C9 04 1818*  	call vdu_load_img
0413AD C9          1819*  	ret
0413AE             1820*  
0413AE             1821*  ld_12_020:
0413AE 21 CC 40 04 1822*  	ld hl,F12_020
0413B2 22 C5 C7 04 1823*  	ld (cur_filename),hl
0413B6 11 F1 D3 04 1824*  	ld de,filedata
0413BA 01 00 00 01 1825*  	ld bc,65536
0413BE 3E 01       1826*  	ld a,mos_load
0413C0 5B CF       1827*  	RST.LIL 08h
0413C2 21 3F 01 00 1828*  	ld hl,BUF_12_020
0413C6 01 05 00 00 1829*  	ld bc,5
0413CA 11 2D 00 00 1830*  	ld de,45
0413CE DD 21 E1 00 1831*  	ld ix,225
       00          
0413D3 CD 40 C9 04 1832*  	call vdu_load_img
0413D7 C9          1833*  	ret
0413D8             1834*  
0413D8             1835*  ld_12_021:
0413D8 21 E0 40 04 1836*  	ld hl,F12_021
0413DC 22 C5 C7 04 1837*  	ld (cur_filename),hl
0413E0 11 F1 D3 04 1838*  	ld de,filedata
0413E4 01 00 00 01 1839*  	ld bc,65536
0413E8 3E 01       1840*  	ld a,mos_load
0413EA 5B CF       1841*  	RST.LIL 08h
0413EC 21 40 01 00 1842*  	ld hl,BUF_12_021
0413F0 01 05 00 00 1843*  	ld bc,5
0413F4 11 2B 00 00 1844*  	ld de,43
0413F8 DD 21 D7 00 1845*  	ld ix,215
       00          
0413FD CD 40 C9 04 1846*  	call vdu_load_img
041401 C9          1847*  	ret
041402             1848*  
041402             1849*  ld_12_022:
041402 21 F4 40 04 1850*  	ld hl,F12_022
041406 22 C5 C7 04 1851*  	ld (cur_filename),hl
04140A 11 F1 D3 04 1852*  	ld de,filedata
04140E 01 00 00 01 1853*  	ld bc,65536
041412 3E 01       1854*  	ld a,mos_load
041414 5B CF       1855*  	RST.LIL 08h
041416 21 41 01 00 1856*  	ld hl,BUF_12_022
04141A 01 0F 00 00 1857*  	ld bc,15
04141E 11 2D 00 00 1858*  	ld de,45
041422 DD 21 A3 02 1859*  	ld ix,675
       00          
041427 CD 40 C9 04 1860*  	call vdu_load_img
04142B C9          1861*  	ret
04142C             1862*  
04142C             1863*  ld_12_023:
04142C 21 08 41 04 1864*  	ld hl,F12_023
041430 22 C5 C7 04 1865*  	ld (cur_filename),hl
041434 11 F1 D3 04 1866*  	ld de,filedata
041438 01 00 00 01 1867*  	ld bc,65536
04143C 3E 01       1868*  	ld a,mos_load
04143E 5B CF       1869*  	RST.LIL 08h
041440 21 42 01 00 1870*  	ld hl,BUF_12_023
041444 01 1A 00 00 1871*  	ld bc,26
041448 11 2D 00 00 1872*  	ld de,45
04144C DD 21 92 04 1873*  	ld ix,1170
       00          
041451 CD 40 C9 04 1874*  	call vdu_load_img
041455 C9          1875*  	ret
041456             1876*  
041456             1877*  ld_12_024:
041456 21 1C 41 04 1878*  	ld hl,F12_024
04145A 22 C5 C7 04 1879*  	ld (cur_filename),hl
04145E 11 F1 D3 04 1880*  	ld de,filedata
041462 01 00 00 01 1881*  	ld bc,65536
041466 3E 01       1882*  	ld a,mos_load
041468 5B CF       1883*  	RST.LIL 08h
04146A 21 43 01 00 1884*  	ld hl,BUF_12_024
04146E 01 23 00 00 1885*  	ld bc,35
041472 11 2D 00 00 1886*  	ld de,45
041476 DD 21 27 06 1887*  	ld ix,1575
       00          
04147B CD 40 C9 04 1888*  	call vdu_load_img
04147F C9          1889*  	ret
041480             1890*  
041480             1891*  ld_12_028:
041480 21 30 41 04 1892*  	ld hl,F12_028
041484 22 C5 C7 04 1893*  	ld (cur_filename),hl
041488 11 F1 D3 04 1894*  	ld de,filedata
04148C 01 00 00 01 1895*  	ld bc,65536
041490 3E 01       1896*  	ld a,mos_load
041492 5B CF       1897*  	RST.LIL 08h
041494 21 44 01 00 1898*  	ld hl,BUF_12_028
041498 01 2E 00 00 1899*  	ld bc,46
04149C 11 2D 00 00 1900*  	ld de,45
0414A0 DD 21 16 08 1901*  	ld ix,2070
       00          
0414A5 CD 40 C9 04 1902*  	call vdu_load_img
0414A9 C9          1903*  	ret
0414AA             1904*  
0414AA             1905*  ld_12_032:
0414AA 21 44 41 04 1906*  	ld hl,F12_032
0414AE 22 C5 C7 04 1907*  	ld (cur_filename),hl
0414B2 11 F1 D3 04 1908*  	ld de,filedata
0414B6 01 00 00 01 1909*  	ld bc,65536
0414BA 3E 01       1910*  	ld a,mos_load
0414BC 5B CF       1911*  	RST.LIL 08h
0414BE 21 45 01 00 1912*  	ld hl,BUF_12_032
0414C2 01 2D 00 00 1913*  	ld bc,45
0414C6 11 3F 00 00 1914*  	ld de,63
0414CA DD 21 13 0B 1915*  	ld ix,2835
       00          
0414CF CD 40 C9 04 1916*  	call vdu_load_img
0414D3 C9          1917*  	ret
0414D4             1918*  
0414D4             1919*  ld_12_033:
0414D4 21 58 41 04 1920*  	ld hl,F12_033
0414D8 22 C5 C7 04 1921*  	ld (cur_filename),hl
0414DC 11 F1 D3 04 1922*  	ld de,filedata
0414E0 01 00 00 01 1923*  	ld bc,65536
0414E4 3E 01       1924*  	ld a,mos_load
0414E6 5B CF       1925*  	RST.LIL 08h
0414E8 21 46 01 00 1926*  	ld hl,BUF_12_033
0414EC 01 1B 00 00 1927*  	ld bc,27
0414F0 11 3F 00 00 1928*  	ld de,63
0414F4 DD 21 A5 06 1929*  	ld ix,1701
       00          
0414F9 CD 40 C9 04 1930*  	call vdu_load_img
0414FD C9          1931*  	ret
0414FE             1932*  
0414FE             1933*  ld_12_034:
0414FE 21 6C 41 04 1934*  	ld hl,F12_034
041502 22 C5 C7 04 1935*  	ld (cur_filename),hl
041506 11 F1 D3 04 1936*  	ld de,filedata
04150A 01 00 00 01 1937*  	ld bc,65536
04150E 3E 01       1938*  	ld a,mos_load
041510 5B CF       1939*  	RST.LIL 08h
041512 21 47 01 00 1940*  	ld hl,BUF_12_034
041516 01 09 00 00 1941*  	ld bc,9
04151A 11 3F 00 00 1942*  	ld de,63
04151E DD 21 37 02 1943*  	ld ix,567
       00          
041523 CD 40 C9 04 1944*  	call vdu_load_img
041527 C9          1945*  	ret
041528             1946*  
041528             1947*  ld_12_035:
041528 21 80 41 04 1948*  	ld hl,F12_035
04152C 22 C5 C7 04 1949*  	ld (cur_filename),hl
041530 11 F1 D3 04 1950*  	ld de,filedata
041534 01 00 00 01 1951*  	ld bc,65536
041538 3E 01       1952*  	ld a,mos_load
04153A 5B CF       1953*  	RST.LIL 08h
04153C 21 48 01 00 1954*  	ld hl,BUF_12_035
041540 01 09 00 00 1955*  	ld bc,9
041544 11 3D 00 00 1956*  	ld de,61
041548 DD 21 25 02 1957*  	ld ix,549
       00          
04154D CD 40 C9 04 1958*  	call vdu_load_img
041551 C9          1959*  	ret
041552             1960*  
041552             1961*  ld_12_036:
041552 21 94 41 04 1962*  	ld hl,F12_036
041556 22 C5 C7 04 1963*  	ld (cur_filename),hl
04155A 11 F1 D3 04 1964*  	ld de,filedata
04155E 01 00 00 01 1965*  	ld bc,65536
041562 3E 01       1966*  	ld a,mos_load
041564 5B CF       1967*  	RST.LIL 08h
041566 21 49 01 00 1968*  	ld hl,BUF_12_036
04156A 01 1B 00 00 1969*  	ld bc,27
04156E 11 3F 00 00 1970*  	ld de,63
041572 DD 21 A5 06 1971*  	ld ix,1701
       00          
041577 CD 40 C9 04 1972*  	call vdu_load_img
04157B C9          1973*  	ret
04157C             1974*  
04157C             1975*  ld_12_037:
04157C 21 A8 41 04 1976*  	ld hl,F12_037
041580 22 C5 C7 04 1977*  	ld (cur_filename),hl
041584 11 F1 D3 04 1978*  	ld de,filedata
041588 01 00 00 01 1979*  	ld bc,65536
04158C 3E 01       1980*  	ld a,mos_load
04158E 5B CF       1981*  	RST.LIL 08h
041590 21 4A 01 00 1982*  	ld hl,BUF_12_037
041594 01 2D 00 00 1983*  	ld bc,45
041598 11 3F 00 00 1984*  	ld de,63
04159C DD 21 13 0B 1985*  	ld ix,2835
       00          
0415A1 CD 40 C9 04 1986*  	call vdu_load_img
0415A5 C9          1987*  	ret
0415A6             1988*  
0415A6             1989*  ld_12_040:
0415A6 21 BC 41 04 1990*  	ld hl,F12_040
0415AA 22 C5 C7 04 1991*  	ld (cur_filename),hl
0415AE 11 F1 D3 04 1992*  	ld de,filedata
0415B2 01 00 00 01 1993*  	ld bc,65536
0415B6 3E 01       1994*  	ld a,mos_load
0415B8 5B CF       1995*  	RST.LIL 08h
0415BA 21 4B 01 00 1996*  	ld hl,BUF_12_040
0415BE 01 40 00 00 1997*  	ld bc,64
0415C2 11 3F 00 00 1998*  	ld de,63
0415C6 DD 21 C0 0F 1999*  	ld ix,4032
       00          
0415CB CD 40 C9 04 2000*  	call vdu_load_img
0415CF C9          2001*  	ret
0415D0             2002*  
0415D0             2003*  ld_12_043:
0415D0 21 D0 41 04 2004*  	ld hl,F12_043
0415D4 22 C5 C7 04 2005*  	ld (cur_filename),hl
0415D8 11 F1 D3 04 2006*  	ld de,filedata
0415DC 01 00 00 01 2007*  	ld bc,65536
0415E0 3E 01       2008*  	ld a,mos_load
0415E2 5B CF       2009*  	RST.LIL 08h
0415E4 21 4C 01 00 2010*  	ld hl,BUF_12_043
0415E8 01 40 00 00 2011*  	ld bc,64
0415EC 11 6B 00 00 2012*  	ld de,107
0415F0 DD 21 C0 1A 2013*  	ld ix,6848
       00          
0415F5 CD 40 C9 04 2014*  	call vdu_load_img
0415F9 C9          2015*  	ret
0415FA             2016*  
0415FA             2017*  ld_12_044:
0415FA 21 E4 41 04 2018*  	ld hl,F12_044
0415FE 22 C5 C7 04 2019*  	ld (cur_filename),hl
041602 11 F1 D3 04 2020*  	ld de,filedata
041606 01 00 00 01 2021*  	ld bc,65536
04160A 3E 01       2022*  	ld a,mos_load
04160C 5B CF       2023*  	RST.LIL 08h
04160E 21 4D 01 00 2024*  	ld hl,BUF_12_044
041612 01 16 00 00 2025*  	ld bc,22
041616 11 6B 00 00 2026*  	ld de,107
04161A DD 21 32 09 2027*  	ld ix,2354
       00          
04161F CD 40 C9 04 2028*  	call vdu_load_img
041623 C9          2029*  	ret
041624             2030*  
041624             2031*  ld_12_045:
041624 21 F8 41 04 2032*  	ld hl,F12_045
041628 22 C5 C7 04 2033*  	ld (cur_filename),hl
04162C 11 F1 D3 04 2034*  	ld de,filedata
041630 01 00 00 01 2035*  	ld bc,65536
041634 3E 01       2036*  	ld a,mos_load
041636 5B CF       2037*  	RST.LIL 08h
041638 21 4E 01 00 2038*  	ld hl,BUF_12_045
04163C 01 16 00 00 2039*  	ld bc,22
041640 11 69 00 00 2040*  	ld de,105
041644 DD 21 06 09 2041*  	ld ix,2310
       00          
041649 CD 40 C9 04 2042*  	call vdu_load_img
04164D C9          2043*  	ret
04164E             2044*  
04164E             2045*  ld_12_046:
04164E 21 0C 42 04 2046*  	ld hl,F12_046
041652 22 C5 C7 04 2047*  	ld (cur_filename),hl
041656 11 F1 D3 04 2048*  	ld de,filedata
04165A 01 00 00 01 2049*  	ld bc,65536
04165E 3E 01       2050*  	ld a,mos_load
041660 5B CF       2051*  	RST.LIL 08h
041662 21 4F 01 00 2052*  	ld hl,BUF_12_046
041666 01 40 00 00 2053*  	ld bc,64
04166A 11 6B 00 00 2054*  	ld de,107
04166E DD 21 C0 1A 2055*  	ld ix,6848
       00          
041673 CD 40 C9 04 2056*  	call vdu_load_img
041677 C9          2057*  	ret
041678             2058*  
041678             2059*  ld_12_048:
041678 21 20 42 04 2060*  	ld hl,F12_048
04167C 22 C5 C7 04 2061*  	ld (cur_filename),hl
041680 11 F1 D3 04 2062*  	ld de,filedata
041684 01 00 00 01 2063*  	ld bc,65536
041688 3E 01       2064*  	ld a,mos_load
04168A 5B CF       2065*  	RST.LIL 08h
04168C 21 50 01 00 2066*  	ld hl,BUF_12_048
041690 01 6C 00 00 2067*  	ld bc,108
041694 11 6B 00 00 2068*  	ld de,107
041698 DD 21 24 2D 2069*  	ld ix,11556
       00          
04169D CD 40 C9 04 2070*  	call vdu_load_img
0416A1 C9          2071*  	ret
0416A2             2072*  
0416A2             2073*  ld_12_050:
0416A2 21 34 42 04 2074*  	ld hl,F12_050
0416A6 22 C5 C7 04 2075*  	ld (cur_filename),hl
0416AA 11 F1 D3 04 2076*  	ld de,filedata
0416AE 01 00 00 01 2077*  	ld bc,65536
0416B2 3E 01       2078*  	ld a,mos_load
0416B4 5B CF       2079*  	RST.LIL 08h
0416B6 21 51 01 00 2080*  	ld hl,BUF_12_050
0416BA 01 6A 00 00 2081*  	ld bc,106
0416BE 11 A0 00 00 2082*  	ld de,160
0416C2 DD 21 40 42 2083*  	ld ix,16960
       00          
0416C7 CD 40 C9 04 2084*  	call vdu_load_img
0416CB C9          2085*  	ret
0416CC             2086*  
0416CC             2087*  ld_12_051:
0416CC 21 48 42 04 2088*  	ld hl,F12_051
0416D0 22 C5 C7 04 2089*  	ld (cur_filename),hl
0416D4 11 F1 D3 04 2090*  	ld de,filedata
0416D8 01 00 00 01 2091*  	ld bc,65536
0416DC 3E 01       2092*  	ld a,mos_load
0416DE 5B CF       2093*  	RST.LIL 08h
0416E0 21 52 01 00 2094*  	ld hl,BUF_12_051
0416E4 01 6A 00 00 2095*  	ld bc,106
0416E8 11 A0 00 00 2096*  	ld de,160
0416EC DD 21 40 42 2097*  	ld ix,16960
       00          
0416F1 CD 40 C9 04 2098*  	call vdu_load_img
0416F5 C9          2099*  	ret
0416F6             2100*  
0416F6             2101*  ld_12_052:
0416F6 21 5C 42 04 2102*  	ld hl,F12_052
0416FA 22 C5 C7 04 2103*  	ld (cur_filename),hl
0416FE 11 F1 D3 04 2104*  	ld de,filedata
041702 01 00 00 01 2105*  	ld bc,65536
041706 3E 01       2106*  	ld a,mos_load
041708 5B CF       2107*  	RST.LIL 08h
04170A 21 53 01 00 2108*  	ld hl,BUF_12_052
04170E 01 40 01 00 2109*  	ld bc,320
041712 11 A0 00 00 2110*  	ld de,160
041716 DD 21 00 C8 2111*  	ld ix,51200
       00          
04171B CD 40 C9 04 2112*  	call vdu_load_img
04171F C9          2113*  	ret
041720             2114*  
041720             2115*  ld_13_000:
041720 21 70 42 04 2116*  	ld hl,F13_000
041724 22 C5 C7 04 2117*  	ld (cur_filename),hl
041728 11 F1 D3 04 2118*  	ld de,filedata
04172C 01 00 00 01 2119*  	ld bc,65536
041730 3E 01       2120*  	ld a,mos_load
041732 5B CF       2121*  	RST.LIL 08h
041734 21 54 01 00 2122*  	ld hl,BUF_13_000
041738 01 1D 00 00 2123*  	ld bc,29
04173C 11 23 00 00 2124*  	ld de,35
041740 DD 21 F7 03 2125*  	ld ix,1015
       00          
041745 CD 40 C9 04 2126*  	call vdu_load_img
041749 C9          2127*  	ret
04174A             2128*  
04174A             2129*  ld_13_001:
04174A 21 84 42 04 2130*  	ld hl,F13_001
04174E 22 C5 C7 04 2131*  	ld (cur_filename),hl
041752 11 F1 D3 04 2132*  	ld de,filedata
041756 01 00 00 01 2133*  	ld bc,65536
04175A 3E 01       2134*  	ld a,mos_load
04175C 5B CF       2135*  	RST.LIL 08h
04175E 21 55 01 00 2136*  	ld hl,BUF_13_001
041762 01 17 00 00 2137*  	ld bc,23
041766 11 23 00 00 2138*  	ld de,35
04176A DD 21 25 03 2139*  	ld ix,805
       00          
04176F CD 40 C9 04 2140*  	call vdu_load_img
041773 C9          2141*  	ret
041774             2142*  
041774             2143*  ld_13_007:
041774 21 98 42 04 2144*  	ld hl,F13_007
041778 22 C5 C7 04 2145*  	ld (cur_filename),hl
04177C 11 F1 D3 04 2146*  	ld de,filedata
041780 01 00 00 01 2147*  	ld bc,65536
041784 3E 01       2148*  	ld a,mos_load
041786 5B CF       2149*  	RST.LIL 08h
041788 21 56 01 00 2150*  	ld hl,BUF_13_007
04178C 01 1D 00 00 2151*  	ld bc,29
041790 11 23 00 00 2152*  	ld de,35
041794 DD 21 F7 03 2153*  	ld ix,1015
       00          
041799 CD 40 C9 04 2154*  	call vdu_load_img
04179D C9          2155*  	ret
04179E             2156*  
04179E             2157*  ld_13_012:
04179E 21 AC 42 04 2158*  	ld hl,F13_012
0417A2 22 C5 C7 04 2159*  	ld (cur_filename),hl
0417A6 11 F1 D3 04 2160*  	ld de,filedata
0417AA 01 00 00 01 2161*  	ld bc,65536
0417AE 3E 01       2162*  	ld a,mos_load
0417B0 5B CF       2163*  	RST.LIL 08h
0417B2 21 57 01 00 2164*  	ld hl,BUF_13_012
0417B6 01 24 00 00 2165*  	ld bc,36
0417BA 11 23 00 00 2166*  	ld de,35
0417BE DD 21 EC 04 2167*  	ld ix,1260
       00          
0417C3 CD 40 C9 04 2168*  	call vdu_load_img
0417C7 C9          2169*  	ret
0417C8             2170*  
0417C8             2171*  ld_13_017:
0417C8 21 C0 42 04 2172*  	ld hl,F13_017
0417CC 22 C5 C7 04 2173*  	ld (cur_filename),hl
0417D0 11 F1 D3 04 2174*  	ld de,filedata
0417D4 01 00 00 01 2175*  	ld bc,65536
0417D8 3E 01       2176*  	ld a,mos_load
0417DA 5B CF       2177*  	RST.LIL 08h
0417DC 21 58 01 00 2178*  	ld hl,BUF_13_017
0417E0 01 23 00 00 2179*  	ld bc,35
0417E4 11 2D 00 00 2180*  	ld de,45
0417E8 DD 21 27 06 2181*  	ld ix,1575
       00          
0417ED CD 40 C9 04 2182*  	call vdu_load_img
0417F1 C9          2183*  	ret
0417F2             2184*  
0417F2             2185*  ld_13_018:
0417F2 21 D4 42 04 2186*  	ld hl,F13_018
0417F6 22 C5 C7 04 2187*  	ld (cur_filename),hl
0417FA 11 F1 D3 04 2188*  	ld de,filedata
0417FE 01 00 00 01 2189*  	ld bc,65536
041802 3E 01       2190*  	ld a,mos_load
041804 5B CF       2191*  	RST.LIL 08h
041806 21 59 01 00 2192*  	ld hl,BUF_13_018
04180A 01 1A 00 00 2193*  	ld bc,26
04180E 11 2D 00 00 2194*  	ld de,45
041812 DD 21 92 04 2195*  	ld ix,1170
       00          
041817 CD 40 C9 04 2196*  	call vdu_load_img
04181B C9          2197*  	ret
04181C             2198*  
04181C             2199*  ld_13_019:
04181C 21 E8 42 04 2200*  	ld hl,F13_019
041820 22 C5 C7 04 2201*  	ld (cur_filename),hl
041824 11 F1 D3 04 2202*  	ld de,filedata
041828 01 00 00 01 2203*  	ld bc,65536
04182C 3E 01       2204*  	ld a,mos_load
04182E 5B CF       2205*  	RST.LIL 08h
041830 21 5A 01 00 2206*  	ld hl,BUF_13_019
041834 01 0F 00 00 2207*  	ld bc,15
041838 11 2D 00 00 2208*  	ld de,45
04183C DD 21 A3 02 2209*  	ld ix,675
       00          
041841 CD 40 C9 04 2210*  	call vdu_load_img
041845 C9          2211*  	ret
041846             2212*  
041846             2213*  ld_13_020:
041846 21 FC 42 04 2214*  	ld hl,F13_020
04184A 22 C5 C7 04 2215*  	ld (cur_filename),hl
04184E 11 F1 D3 04 2216*  	ld de,filedata
041852 01 00 00 01 2217*  	ld bc,65536
041856 3E 01       2218*  	ld a,mos_load
041858 5B CF       2219*  	RST.LIL 08h
04185A 21 5B 01 00 2220*  	ld hl,BUF_13_020
04185E 01 05 00 00 2221*  	ld bc,5
041862 11 2D 00 00 2222*  	ld de,45
041866 DD 21 E1 00 2223*  	ld ix,225
       00          
04186B CD 40 C9 04 2224*  	call vdu_load_img
04186F C9          2225*  	ret
041870             2226*  
041870             2227*  ld_13_021:
041870 21 10 43 04 2228*  	ld hl,F13_021
041874 22 C5 C7 04 2229*  	ld (cur_filename),hl
041878 11 F1 D3 04 2230*  	ld de,filedata
04187C 01 00 00 01 2231*  	ld bc,65536
041880 3E 01       2232*  	ld a,mos_load
041882 5B CF       2233*  	RST.LIL 08h
041884 21 5C 01 00 2234*  	ld hl,BUF_13_021
041888 01 05 00 00 2235*  	ld bc,5
04188C 11 2B 00 00 2236*  	ld de,43
041890 DD 21 D7 00 2237*  	ld ix,215
       00          
041895 CD 40 C9 04 2238*  	call vdu_load_img
041899 C9          2239*  	ret
04189A             2240*  
04189A             2241*  ld_13_022:
04189A 21 24 43 04 2242*  	ld hl,F13_022
04189E 22 C5 C7 04 2243*  	ld (cur_filename),hl
0418A2 11 F1 D3 04 2244*  	ld de,filedata
0418A6 01 00 00 01 2245*  	ld bc,65536
0418AA 3E 01       2246*  	ld a,mos_load
0418AC 5B CF       2247*  	RST.LIL 08h
0418AE 21 5D 01 00 2248*  	ld hl,BUF_13_022
0418B2 01 0F 00 00 2249*  	ld bc,15
0418B6 11 2D 00 00 2250*  	ld de,45
0418BA DD 21 A3 02 2251*  	ld ix,675
       00          
0418BF CD 40 C9 04 2252*  	call vdu_load_img
0418C3 C9          2253*  	ret
0418C4             2254*  
0418C4             2255*  ld_13_023:
0418C4 21 38 43 04 2256*  	ld hl,F13_023
0418C8 22 C5 C7 04 2257*  	ld (cur_filename),hl
0418CC 11 F1 D3 04 2258*  	ld de,filedata
0418D0 01 00 00 01 2259*  	ld bc,65536
0418D4 3E 01       2260*  	ld a,mos_load
0418D6 5B CF       2261*  	RST.LIL 08h
0418D8 21 5E 01 00 2262*  	ld hl,BUF_13_023
0418DC 01 1A 00 00 2263*  	ld bc,26
0418E0 11 2D 00 00 2264*  	ld de,45
0418E4 DD 21 92 04 2265*  	ld ix,1170
       00          
0418E9 CD 40 C9 04 2266*  	call vdu_load_img
0418ED C9          2267*  	ret
0418EE             2268*  
0418EE             2269*  ld_13_024:
0418EE 21 4C 43 04 2270*  	ld hl,F13_024
0418F2 22 C5 C7 04 2271*  	ld (cur_filename),hl
0418F6 11 F1 D3 04 2272*  	ld de,filedata
0418FA 01 00 00 01 2273*  	ld bc,65536
0418FE 3E 01       2274*  	ld a,mos_load
041900 5B CF       2275*  	RST.LIL 08h
041902 21 5F 01 00 2276*  	ld hl,BUF_13_024
041906 01 23 00 00 2277*  	ld bc,35
04190A 11 2D 00 00 2278*  	ld de,45
04190E DD 21 27 06 2279*  	ld ix,1575
       00          
041913 CD 40 C9 04 2280*  	call vdu_load_img
041917 C9          2281*  	ret
041918             2282*  
041918             2283*  ld_13_028:
041918 21 60 43 04 2284*  	ld hl,F13_028
04191C 22 C5 C7 04 2285*  	ld (cur_filename),hl
041920 11 F1 D3 04 2286*  	ld de,filedata
041924 01 00 00 01 2287*  	ld bc,65536
041928 3E 01       2288*  	ld a,mos_load
04192A 5B CF       2289*  	RST.LIL 08h
04192C 21 60 01 00 2290*  	ld hl,BUF_13_028
041930 01 2E 00 00 2291*  	ld bc,46
041934 11 2D 00 00 2292*  	ld de,45
041938 DD 21 16 08 2293*  	ld ix,2070
       00          
04193D CD 40 C9 04 2294*  	call vdu_load_img
041941 C9          2295*  	ret
041942             2296*  
041942             2297*  ld_13_032:
041942 21 74 43 04 2298*  	ld hl,F13_032
041946 22 C5 C7 04 2299*  	ld (cur_filename),hl
04194A 11 F1 D3 04 2300*  	ld de,filedata
04194E 01 00 00 01 2301*  	ld bc,65536
041952 3E 01       2302*  	ld a,mos_load
041954 5B CF       2303*  	RST.LIL 08h
041956 21 61 01 00 2304*  	ld hl,BUF_13_032
04195A 01 2D 00 00 2305*  	ld bc,45
04195E 11 3F 00 00 2306*  	ld de,63
041962 DD 21 13 0B 2307*  	ld ix,2835
       00          
041967 CD 40 C9 04 2308*  	call vdu_load_img
04196B C9          2309*  	ret
04196C             2310*  
04196C             2311*  ld_13_033:
04196C 21 88 43 04 2312*  	ld hl,F13_033
041970 22 C5 C7 04 2313*  	ld (cur_filename),hl
041974 11 F1 D3 04 2314*  	ld de,filedata
041978 01 00 00 01 2315*  	ld bc,65536
04197C 3E 01       2316*  	ld a,mos_load
04197E 5B CF       2317*  	RST.LIL 08h
041980 21 62 01 00 2318*  	ld hl,BUF_13_033
041984 01 1B 00 00 2319*  	ld bc,27
041988 11 3F 00 00 2320*  	ld de,63
04198C DD 21 A5 06 2321*  	ld ix,1701
       00          
041991 CD 40 C9 04 2322*  	call vdu_load_img
041995 C9          2323*  	ret
041996             2324*  
041996             2325*  ld_13_034:
041996 21 9C 43 04 2326*  	ld hl,F13_034
04199A 22 C5 C7 04 2327*  	ld (cur_filename),hl
04199E 11 F1 D3 04 2328*  	ld de,filedata
0419A2 01 00 00 01 2329*  	ld bc,65536
0419A6 3E 01       2330*  	ld a,mos_load
0419A8 5B CF       2331*  	RST.LIL 08h
0419AA 21 63 01 00 2332*  	ld hl,BUF_13_034
0419AE 01 09 00 00 2333*  	ld bc,9
0419B2 11 3F 00 00 2334*  	ld de,63
0419B6 DD 21 37 02 2335*  	ld ix,567
       00          
0419BB CD 40 C9 04 2336*  	call vdu_load_img
0419BF C9          2337*  	ret
0419C0             2338*  
0419C0             2339*  ld_13_035:
0419C0 21 B0 43 04 2340*  	ld hl,F13_035
0419C4 22 C5 C7 04 2341*  	ld (cur_filename),hl
0419C8 11 F1 D3 04 2342*  	ld de,filedata
0419CC 01 00 00 01 2343*  	ld bc,65536
0419D0 3E 01       2344*  	ld a,mos_load
0419D2 5B CF       2345*  	RST.LIL 08h
0419D4 21 64 01 00 2346*  	ld hl,BUF_13_035
0419D8 01 09 00 00 2347*  	ld bc,9
0419DC 11 3D 00 00 2348*  	ld de,61
0419E0 DD 21 25 02 2349*  	ld ix,549
       00          
0419E5 CD 40 C9 04 2350*  	call vdu_load_img
0419E9 C9          2351*  	ret
0419EA             2352*  
0419EA             2353*  ld_13_036:
0419EA 21 C4 43 04 2354*  	ld hl,F13_036
0419EE 22 C5 C7 04 2355*  	ld (cur_filename),hl
0419F2 11 F1 D3 04 2356*  	ld de,filedata
0419F6 01 00 00 01 2357*  	ld bc,65536
0419FA 3E 01       2358*  	ld a,mos_load
0419FC 5B CF       2359*  	RST.LIL 08h
0419FE 21 65 01 00 2360*  	ld hl,BUF_13_036
041A02 01 1B 00 00 2361*  	ld bc,27
041A06 11 3F 00 00 2362*  	ld de,63
041A0A DD 21 A5 06 2363*  	ld ix,1701
       00          
041A0F CD 40 C9 04 2364*  	call vdu_load_img
041A13 C9          2365*  	ret
041A14             2366*  
041A14             2367*  ld_13_037:
041A14 21 D8 43 04 2368*  	ld hl,F13_037
041A18 22 C5 C7 04 2369*  	ld (cur_filename),hl
041A1C 11 F1 D3 04 2370*  	ld de,filedata
041A20 01 00 00 01 2371*  	ld bc,65536
041A24 3E 01       2372*  	ld a,mos_load
041A26 5B CF       2373*  	RST.LIL 08h
041A28 21 66 01 00 2374*  	ld hl,BUF_13_037
041A2C 01 2D 00 00 2375*  	ld bc,45
041A30 11 3F 00 00 2376*  	ld de,63
041A34 DD 21 13 0B 2377*  	ld ix,2835
       00          
041A39 CD 40 C9 04 2378*  	call vdu_load_img
041A3D C9          2379*  	ret
041A3E             2380*  
041A3E             2381*  ld_13_040:
041A3E 21 EC 43 04 2382*  	ld hl,F13_040
041A42 22 C5 C7 04 2383*  	ld (cur_filename),hl
041A46 11 F1 D3 04 2384*  	ld de,filedata
041A4A 01 00 00 01 2385*  	ld bc,65536
041A4E 3E 01       2386*  	ld a,mos_load
041A50 5B CF       2387*  	RST.LIL 08h
041A52 21 67 01 00 2388*  	ld hl,BUF_13_040
041A56 01 40 00 00 2389*  	ld bc,64
041A5A 11 3F 00 00 2390*  	ld de,63
041A5E DD 21 C0 0F 2391*  	ld ix,4032
       00          
041A63 CD 40 C9 04 2392*  	call vdu_load_img
041A67 C9          2393*  	ret
041A68             2394*  
041A68             2395*  ld_13_043:
041A68 21 00 44 04 2396*  	ld hl,F13_043
041A6C 22 C5 C7 04 2397*  	ld (cur_filename),hl
041A70 11 F1 D3 04 2398*  	ld de,filedata
041A74 01 00 00 01 2399*  	ld bc,65536
041A78 3E 01       2400*  	ld a,mos_load
041A7A 5B CF       2401*  	RST.LIL 08h
041A7C 21 68 01 00 2402*  	ld hl,BUF_13_043
041A80 01 40 00 00 2403*  	ld bc,64
041A84 11 6B 00 00 2404*  	ld de,107
041A88 DD 21 C0 1A 2405*  	ld ix,6848
       00          
041A8D CD 40 C9 04 2406*  	call vdu_load_img
041A91 C9          2407*  	ret
041A92             2408*  
041A92             2409*  ld_13_044:
041A92 21 14 44 04 2410*  	ld hl,F13_044
041A96 22 C5 C7 04 2411*  	ld (cur_filename),hl
041A9A 11 F1 D3 04 2412*  	ld de,filedata
041A9E 01 00 00 01 2413*  	ld bc,65536
041AA2 3E 01       2414*  	ld a,mos_load
041AA4 5B CF       2415*  	RST.LIL 08h
041AA6 21 69 01 00 2416*  	ld hl,BUF_13_044
041AAA 01 16 00 00 2417*  	ld bc,22
041AAE 11 6B 00 00 2418*  	ld de,107
041AB2 DD 21 32 09 2419*  	ld ix,2354
       00          
041AB7 CD 40 C9 04 2420*  	call vdu_load_img
041ABB C9          2421*  	ret
041ABC             2422*  
041ABC             2423*  ld_13_045:
041ABC 21 28 44 04 2424*  	ld hl,F13_045
041AC0 22 C5 C7 04 2425*  	ld (cur_filename),hl
041AC4 11 F1 D3 04 2426*  	ld de,filedata
041AC8 01 00 00 01 2427*  	ld bc,65536
041ACC 3E 01       2428*  	ld a,mos_load
041ACE 5B CF       2429*  	RST.LIL 08h
041AD0 21 6A 01 00 2430*  	ld hl,BUF_13_045
041AD4 01 16 00 00 2431*  	ld bc,22
041AD8 11 69 00 00 2432*  	ld de,105
041ADC DD 21 06 09 2433*  	ld ix,2310
       00          
041AE1 CD 40 C9 04 2434*  	call vdu_load_img
041AE5 C9          2435*  	ret
041AE6             2436*  
041AE6             2437*  ld_13_046:
041AE6 21 3C 44 04 2438*  	ld hl,F13_046
041AEA 22 C5 C7 04 2439*  	ld (cur_filename),hl
041AEE 11 F1 D3 04 2440*  	ld de,filedata
041AF2 01 00 00 01 2441*  	ld bc,65536
041AF6 3E 01       2442*  	ld a,mos_load
041AF8 5B CF       2443*  	RST.LIL 08h
041AFA 21 6B 01 00 2444*  	ld hl,BUF_13_046
041AFE 01 40 00 00 2445*  	ld bc,64
041B02 11 6B 00 00 2446*  	ld de,107
041B06 DD 21 C0 1A 2447*  	ld ix,6848
       00          
041B0B CD 40 C9 04 2448*  	call vdu_load_img
041B0F C9          2449*  	ret
041B10             2450*  
041B10             2451*  ld_13_048:
041B10 21 50 44 04 2452*  	ld hl,F13_048
041B14 22 C5 C7 04 2453*  	ld (cur_filename),hl
041B18 11 F1 D3 04 2454*  	ld de,filedata
041B1C 01 00 00 01 2455*  	ld bc,65536
041B20 3E 01       2456*  	ld a,mos_load
041B22 5B CF       2457*  	RST.LIL 08h
041B24 21 6C 01 00 2458*  	ld hl,BUF_13_048
041B28 01 6C 00 00 2459*  	ld bc,108
041B2C 11 6B 00 00 2460*  	ld de,107
041B30 DD 21 24 2D 2461*  	ld ix,11556
       00          
041B35 CD 40 C9 04 2462*  	call vdu_load_img
041B39 C9          2463*  	ret
041B3A             2464*  
041B3A             2465*  ld_13_050:
041B3A 21 64 44 04 2466*  	ld hl,F13_050
041B3E 22 C5 C7 04 2467*  	ld (cur_filename),hl
041B42 11 F1 D3 04 2468*  	ld de,filedata
041B46 01 00 00 01 2469*  	ld bc,65536
041B4A 3E 01       2470*  	ld a,mos_load
041B4C 5B CF       2471*  	RST.LIL 08h
041B4E 21 6D 01 00 2472*  	ld hl,BUF_13_050
041B52 01 6A 00 00 2473*  	ld bc,106
041B56 11 A0 00 00 2474*  	ld de,160
041B5A DD 21 40 42 2475*  	ld ix,16960
       00          
041B5F CD 40 C9 04 2476*  	call vdu_load_img
041B63 C9          2477*  	ret
041B64             2478*  
041B64             2479*  ld_13_051:
041B64 21 78 44 04 2480*  	ld hl,F13_051
041B68 22 C5 C7 04 2481*  	ld (cur_filename),hl
041B6C 11 F1 D3 04 2482*  	ld de,filedata
041B70 01 00 00 01 2483*  	ld bc,65536
041B74 3E 01       2484*  	ld a,mos_load
041B76 5B CF       2485*  	RST.LIL 08h
041B78 21 6E 01 00 2486*  	ld hl,BUF_13_051
041B7C 01 6A 00 00 2487*  	ld bc,106
041B80 11 A0 00 00 2488*  	ld de,160
041B84 DD 21 40 42 2489*  	ld ix,16960
       00          
041B89 CD 40 C9 04 2490*  	call vdu_load_img
041B8D C9          2491*  	ret
041B8E             2492*  
041B8E             2493*  ld_13_052:
041B8E 21 8C 44 04 2494*  	ld hl,F13_052
041B92 22 C5 C7 04 2495*  	ld (cur_filename),hl
041B96 11 F1 D3 04 2496*  	ld de,filedata
041B9A 01 00 00 01 2497*  	ld bc,65536
041B9E 3E 01       2498*  	ld a,mos_load
041BA0 5B CF       2499*  	RST.LIL 08h
041BA2 21 6F 01 00 2500*  	ld hl,BUF_13_052
041BA6 01 40 01 00 2501*  	ld bc,320
041BAA 11 A0 00 00 2502*  	ld de,160
041BAE DD 21 00 C8 2503*  	ld ix,51200
       00          
041BB3 CD 40 C9 04 2504*  	call vdu_load_img
041BB7 C9          2505*  	ret
041BB8             2506*  
041BB8             2507*  ld_14_000:
041BB8 21 A0 44 04 2508*  	ld hl,F14_000
041BBC 22 C5 C7 04 2509*  	ld (cur_filename),hl
041BC0 11 F1 D3 04 2510*  	ld de,filedata
041BC4 01 00 00 01 2511*  	ld bc,65536
041BC8 3E 01       2512*  	ld a,mos_load
041BCA 5B CF       2513*  	RST.LIL 08h
041BCC 21 70 01 00 2514*  	ld hl,BUF_14_000
041BD0 01 1D 00 00 2515*  	ld bc,29
041BD4 11 23 00 00 2516*  	ld de,35
041BD8 DD 21 F7 03 2517*  	ld ix,1015
       00          
041BDD CD 40 C9 04 2518*  	call vdu_load_img
041BE1 C9          2519*  	ret
041BE2             2520*  
041BE2             2521*  ld_14_001:
041BE2 21 B4 44 04 2522*  	ld hl,F14_001
041BE6 22 C5 C7 04 2523*  	ld (cur_filename),hl
041BEA 11 F1 D3 04 2524*  	ld de,filedata
041BEE 01 00 00 01 2525*  	ld bc,65536
041BF2 3E 01       2526*  	ld a,mos_load
041BF4 5B CF       2527*  	RST.LIL 08h
041BF6 21 71 01 00 2528*  	ld hl,BUF_14_001
041BFA 01 17 00 00 2529*  	ld bc,23
041BFE 11 23 00 00 2530*  	ld de,35
041C02 DD 21 25 03 2531*  	ld ix,805
       00          
041C07 CD 40 C9 04 2532*  	call vdu_load_img
041C0B C9          2533*  	ret
041C0C             2534*  
041C0C             2535*  ld_14_007:
041C0C 21 C8 44 04 2536*  	ld hl,F14_007
041C10 22 C5 C7 04 2537*  	ld (cur_filename),hl
041C14 11 F1 D3 04 2538*  	ld de,filedata
041C18 01 00 00 01 2539*  	ld bc,65536
041C1C 3E 01       2540*  	ld a,mos_load
041C1E 5B CF       2541*  	RST.LIL 08h
041C20 21 72 01 00 2542*  	ld hl,BUF_14_007
041C24 01 1D 00 00 2543*  	ld bc,29
041C28 11 23 00 00 2544*  	ld de,35
041C2C DD 21 F7 03 2545*  	ld ix,1015
       00          
041C31 CD 40 C9 04 2546*  	call vdu_load_img
041C35 C9          2547*  	ret
041C36             2548*  
041C36             2549*  ld_14_012:
041C36 21 DC 44 04 2550*  	ld hl,F14_012
041C3A 22 C5 C7 04 2551*  	ld (cur_filename),hl
041C3E 11 F1 D3 04 2552*  	ld de,filedata
041C42 01 00 00 01 2553*  	ld bc,65536
041C46 3E 01       2554*  	ld a,mos_load
041C48 5B CF       2555*  	RST.LIL 08h
041C4A 21 73 01 00 2556*  	ld hl,BUF_14_012
041C4E 01 24 00 00 2557*  	ld bc,36
041C52 11 23 00 00 2558*  	ld de,35
041C56 DD 21 EC 04 2559*  	ld ix,1260
       00          
041C5B CD 40 C9 04 2560*  	call vdu_load_img
041C5F C9          2561*  	ret
041C60             2562*  
041C60             2563*  ld_14_017:
041C60 21 F0 44 04 2564*  	ld hl,F14_017
041C64 22 C5 C7 04 2565*  	ld (cur_filename),hl
041C68 11 F1 D3 04 2566*  	ld de,filedata
041C6C 01 00 00 01 2567*  	ld bc,65536
041C70 3E 01       2568*  	ld a,mos_load
041C72 5B CF       2569*  	RST.LIL 08h
041C74 21 74 01 00 2570*  	ld hl,BUF_14_017
041C78 01 23 00 00 2571*  	ld bc,35
041C7C 11 2D 00 00 2572*  	ld de,45
041C80 DD 21 27 06 2573*  	ld ix,1575
       00          
041C85 CD 40 C9 04 2574*  	call vdu_load_img
041C89 C9          2575*  	ret
041C8A             2576*  
041C8A             2577*  ld_14_018:
041C8A 21 04 45 04 2578*  	ld hl,F14_018
041C8E 22 C5 C7 04 2579*  	ld (cur_filename),hl
041C92 11 F1 D3 04 2580*  	ld de,filedata
041C96 01 00 00 01 2581*  	ld bc,65536
041C9A 3E 01       2582*  	ld a,mos_load
041C9C 5B CF       2583*  	RST.LIL 08h
041C9E 21 75 01 00 2584*  	ld hl,BUF_14_018
041CA2 01 1A 00 00 2585*  	ld bc,26
041CA6 11 2D 00 00 2586*  	ld de,45
041CAA DD 21 92 04 2587*  	ld ix,1170
       00          
041CAF CD 40 C9 04 2588*  	call vdu_load_img
041CB3 C9          2589*  	ret
041CB4             2590*  
041CB4             2591*  ld_14_019:
041CB4 21 18 45 04 2592*  	ld hl,F14_019
041CB8 22 C5 C7 04 2593*  	ld (cur_filename),hl
041CBC 11 F1 D3 04 2594*  	ld de,filedata
041CC0 01 00 00 01 2595*  	ld bc,65536
041CC4 3E 01       2596*  	ld a,mos_load
041CC6 5B CF       2597*  	RST.LIL 08h
041CC8 21 76 01 00 2598*  	ld hl,BUF_14_019
041CCC 01 0F 00 00 2599*  	ld bc,15
041CD0 11 2D 00 00 2600*  	ld de,45
041CD4 DD 21 A3 02 2601*  	ld ix,675
       00          
041CD9 CD 40 C9 04 2602*  	call vdu_load_img
041CDD C9          2603*  	ret
041CDE             2604*  
041CDE             2605*  ld_14_020:
041CDE 21 2C 45 04 2606*  	ld hl,F14_020
041CE2 22 C5 C7 04 2607*  	ld (cur_filename),hl
041CE6 11 F1 D3 04 2608*  	ld de,filedata
041CEA 01 00 00 01 2609*  	ld bc,65536
041CEE 3E 01       2610*  	ld a,mos_load
041CF0 5B CF       2611*  	RST.LIL 08h
041CF2 21 77 01 00 2612*  	ld hl,BUF_14_020
041CF6 01 05 00 00 2613*  	ld bc,5
041CFA 11 2D 00 00 2614*  	ld de,45
041CFE DD 21 E1 00 2615*  	ld ix,225
       00          
041D03 CD 40 C9 04 2616*  	call vdu_load_img
041D07 C9          2617*  	ret
041D08             2618*  
041D08             2619*  ld_14_021:
041D08 21 40 45 04 2620*  	ld hl,F14_021
041D0C 22 C5 C7 04 2621*  	ld (cur_filename),hl
041D10 11 F1 D3 04 2622*  	ld de,filedata
041D14 01 00 00 01 2623*  	ld bc,65536
041D18 3E 01       2624*  	ld a,mos_load
041D1A 5B CF       2625*  	RST.LIL 08h
041D1C 21 78 01 00 2626*  	ld hl,BUF_14_021
041D20 01 05 00 00 2627*  	ld bc,5
041D24 11 2B 00 00 2628*  	ld de,43
041D28 DD 21 D7 00 2629*  	ld ix,215
       00          
041D2D CD 40 C9 04 2630*  	call vdu_load_img
041D31 C9          2631*  	ret
041D32             2632*  
041D32             2633*  ld_14_022:
041D32 21 54 45 04 2634*  	ld hl,F14_022
041D36 22 C5 C7 04 2635*  	ld (cur_filename),hl
041D3A 11 F1 D3 04 2636*  	ld de,filedata
041D3E 01 00 00 01 2637*  	ld bc,65536
041D42 3E 01       2638*  	ld a,mos_load
041D44 5B CF       2639*  	RST.LIL 08h
041D46 21 79 01 00 2640*  	ld hl,BUF_14_022
041D4A 01 0F 00 00 2641*  	ld bc,15
041D4E 11 2D 00 00 2642*  	ld de,45
041D52 DD 21 A3 02 2643*  	ld ix,675
       00          
041D57 CD 40 C9 04 2644*  	call vdu_load_img
041D5B C9          2645*  	ret
041D5C             2646*  
041D5C             2647*  ld_14_023:
041D5C 21 68 45 04 2648*  	ld hl,F14_023
041D60 22 C5 C7 04 2649*  	ld (cur_filename),hl
041D64 11 F1 D3 04 2650*  	ld de,filedata
041D68 01 00 00 01 2651*  	ld bc,65536
041D6C 3E 01       2652*  	ld a,mos_load
041D6E 5B CF       2653*  	RST.LIL 08h
041D70 21 7A 01 00 2654*  	ld hl,BUF_14_023
041D74 01 1A 00 00 2655*  	ld bc,26
041D78 11 2D 00 00 2656*  	ld de,45
041D7C DD 21 92 04 2657*  	ld ix,1170
       00          
041D81 CD 40 C9 04 2658*  	call vdu_load_img
041D85 C9          2659*  	ret
041D86             2660*  
041D86             2661*  ld_14_024:
041D86 21 7C 45 04 2662*  	ld hl,F14_024
041D8A 22 C5 C7 04 2663*  	ld (cur_filename),hl
041D8E 11 F1 D3 04 2664*  	ld de,filedata
041D92 01 00 00 01 2665*  	ld bc,65536
041D96 3E 01       2666*  	ld a,mos_load
041D98 5B CF       2667*  	RST.LIL 08h
041D9A 21 7B 01 00 2668*  	ld hl,BUF_14_024
041D9E 01 23 00 00 2669*  	ld bc,35
041DA2 11 2D 00 00 2670*  	ld de,45
041DA6 DD 21 27 06 2671*  	ld ix,1575
       00          
041DAB CD 40 C9 04 2672*  	call vdu_load_img
041DAF C9          2673*  	ret
041DB0             2674*  
041DB0             2675*  ld_14_028:
041DB0 21 90 45 04 2676*  	ld hl,F14_028
041DB4 22 C5 C7 04 2677*  	ld (cur_filename),hl
041DB8 11 F1 D3 04 2678*  	ld de,filedata
041DBC 01 00 00 01 2679*  	ld bc,65536
041DC0 3E 01       2680*  	ld a,mos_load
041DC2 5B CF       2681*  	RST.LIL 08h
041DC4 21 7C 01 00 2682*  	ld hl,BUF_14_028
041DC8 01 2E 00 00 2683*  	ld bc,46
041DCC 11 2D 00 00 2684*  	ld de,45
041DD0 DD 21 16 08 2685*  	ld ix,2070
       00          
041DD5 CD 40 C9 04 2686*  	call vdu_load_img
041DD9 C9          2687*  	ret
041DDA             2688*  
041DDA             2689*  ld_14_032:
041DDA 21 A4 45 04 2690*  	ld hl,F14_032
041DDE 22 C5 C7 04 2691*  	ld (cur_filename),hl
041DE2 11 F1 D3 04 2692*  	ld de,filedata
041DE6 01 00 00 01 2693*  	ld bc,65536
041DEA 3E 01       2694*  	ld a,mos_load
041DEC 5B CF       2695*  	RST.LIL 08h
041DEE 21 7D 01 00 2696*  	ld hl,BUF_14_032
041DF2 01 2D 00 00 2697*  	ld bc,45
041DF6 11 3F 00 00 2698*  	ld de,63
041DFA DD 21 13 0B 2699*  	ld ix,2835
       00          
041DFF CD 40 C9 04 2700*  	call vdu_load_img
041E03 C9          2701*  	ret
041E04             2702*  
041E04             2703*  ld_14_033:
041E04 21 B8 45 04 2704*  	ld hl,F14_033
041E08 22 C5 C7 04 2705*  	ld (cur_filename),hl
041E0C 11 F1 D3 04 2706*  	ld de,filedata
041E10 01 00 00 01 2707*  	ld bc,65536
041E14 3E 01       2708*  	ld a,mos_load
041E16 5B CF       2709*  	RST.LIL 08h
041E18 21 7E 01 00 2710*  	ld hl,BUF_14_033
041E1C 01 1B 00 00 2711*  	ld bc,27
041E20 11 3F 00 00 2712*  	ld de,63
041E24 DD 21 A5 06 2713*  	ld ix,1701
       00          
041E29 CD 40 C9 04 2714*  	call vdu_load_img
041E2D C9          2715*  	ret
041E2E             2716*  
041E2E             2717*  ld_14_034:
041E2E 21 CC 45 04 2718*  	ld hl,F14_034
041E32 22 C5 C7 04 2719*  	ld (cur_filename),hl
041E36 11 F1 D3 04 2720*  	ld de,filedata
041E3A 01 00 00 01 2721*  	ld bc,65536
041E3E 3E 01       2722*  	ld a,mos_load
041E40 5B CF       2723*  	RST.LIL 08h
041E42 21 7F 01 00 2724*  	ld hl,BUF_14_034
041E46 01 09 00 00 2725*  	ld bc,9
041E4A 11 3F 00 00 2726*  	ld de,63
041E4E DD 21 37 02 2727*  	ld ix,567
       00          
041E53 CD 40 C9 04 2728*  	call vdu_load_img
041E57 C9          2729*  	ret
041E58             2730*  
041E58             2731*  ld_14_035:
041E58 21 E0 45 04 2732*  	ld hl,F14_035
041E5C 22 C5 C7 04 2733*  	ld (cur_filename),hl
041E60 11 F1 D3 04 2734*  	ld de,filedata
041E64 01 00 00 01 2735*  	ld bc,65536
041E68 3E 01       2736*  	ld a,mos_load
041E6A 5B CF       2737*  	RST.LIL 08h
041E6C 21 80 01 00 2738*  	ld hl,BUF_14_035
041E70 01 09 00 00 2739*  	ld bc,9
041E74 11 3D 00 00 2740*  	ld de,61
041E78 DD 21 25 02 2741*  	ld ix,549
       00          
041E7D CD 40 C9 04 2742*  	call vdu_load_img
041E81 C9          2743*  	ret
041E82             2744*  
041E82             2745*  ld_14_036:
041E82 21 F4 45 04 2746*  	ld hl,F14_036
041E86 22 C5 C7 04 2747*  	ld (cur_filename),hl
041E8A 11 F1 D3 04 2748*  	ld de,filedata
041E8E 01 00 00 01 2749*  	ld bc,65536
041E92 3E 01       2750*  	ld a,mos_load
041E94 5B CF       2751*  	RST.LIL 08h
041E96 21 81 01 00 2752*  	ld hl,BUF_14_036
041E9A 01 1B 00 00 2753*  	ld bc,27
041E9E 11 3F 00 00 2754*  	ld de,63
041EA2 DD 21 A5 06 2755*  	ld ix,1701
       00          
041EA7 CD 40 C9 04 2756*  	call vdu_load_img
041EAB C9          2757*  	ret
041EAC             2758*  
041EAC             2759*  ld_14_037:
041EAC 21 08 46 04 2760*  	ld hl,F14_037
041EB0 22 C5 C7 04 2761*  	ld (cur_filename),hl
041EB4 11 F1 D3 04 2762*  	ld de,filedata
041EB8 01 00 00 01 2763*  	ld bc,65536
041EBC 3E 01       2764*  	ld a,mos_load
041EBE 5B CF       2765*  	RST.LIL 08h
041EC0 21 82 01 00 2766*  	ld hl,BUF_14_037
041EC4 01 2D 00 00 2767*  	ld bc,45
041EC8 11 3F 00 00 2768*  	ld de,63
041ECC DD 21 13 0B 2769*  	ld ix,2835
       00          
041ED1 CD 40 C9 04 2770*  	call vdu_load_img
041ED5 C9          2771*  	ret
041ED6             2772*  
041ED6             2773*  ld_14_040:
041ED6 21 1C 46 04 2774*  	ld hl,F14_040
041EDA 22 C5 C7 04 2775*  	ld (cur_filename),hl
041EDE 11 F1 D3 04 2776*  	ld de,filedata
041EE2 01 00 00 01 2777*  	ld bc,65536
041EE6 3E 01       2778*  	ld a,mos_load
041EE8 5B CF       2779*  	RST.LIL 08h
041EEA 21 83 01 00 2780*  	ld hl,BUF_14_040
041EEE 01 40 00 00 2781*  	ld bc,64
041EF2 11 3F 00 00 2782*  	ld de,63
041EF6 DD 21 C0 0F 2783*  	ld ix,4032
       00          
041EFB CD 40 C9 04 2784*  	call vdu_load_img
041EFF C9          2785*  	ret
041F00             2786*  
041F00             2787*  ld_14_043:
041F00 21 30 46 04 2788*  	ld hl,F14_043
041F04 22 C5 C7 04 2789*  	ld (cur_filename),hl
041F08 11 F1 D3 04 2790*  	ld de,filedata
041F0C 01 00 00 01 2791*  	ld bc,65536
041F10 3E 01       2792*  	ld a,mos_load
041F12 5B CF       2793*  	RST.LIL 08h
041F14 21 84 01 00 2794*  	ld hl,BUF_14_043
041F18 01 40 00 00 2795*  	ld bc,64
041F1C 11 6B 00 00 2796*  	ld de,107
041F20 DD 21 C0 1A 2797*  	ld ix,6848
       00          
041F25 CD 40 C9 04 2798*  	call vdu_load_img
041F29 C9          2799*  	ret
041F2A             2800*  
041F2A             2801*  ld_14_044:
041F2A 21 44 46 04 2802*  	ld hl,F14_044
041F2E 22 C5 C7 04 2803*  	ld (cur_filename),hl
041F32 11 F1 D3 04 2804*  	ld de,filedata
041F36 01 00 00 01 2805*  	ld bc,65536
041F3A 3E 01       2806*  	ld a,mos_load
041F3C 5B CF       2807*  	RST.LIL 08h
041F3E 21 85 01 00 2808*  	ld hl,BUF_14_044
041F42 01 16 00 00 2809*  	ld bc,22
041F46 11 6B 00 00 2810*  	ld de,107
041F4A DD 21 32 09 2811*  	ld ix,2354
       00          
041F4F CD 40 C9 04 2812*  	call vdu_load_img
041F53 C9          2813*  	ret
041F54             2814*  
041F54             2815*  ld_14_045:
041F54 21 58 46 04 2816*  	ld hl,F14_045
041F58 22 C5 C7 04 2817*  	ld (cur_filename),hl
041F5C 11 F1 D3 04 2818*  	ld de,filedata
041F60 01 00 00 01 2819*  	ld bc,65536
041F64 3E 01       2820*  	ld a,mos_load
041F66 5B CF       2821*  	RST.LIL 08h
041F68 21 86 01 00 2822*  	ld hl,BUF_14_045
041F6C 01 16 00 00 2823*  	ld bc,22
041F70 11 69 00 00 2824*  	ld de,105
041F74 DD 21 06 09 2825*  	ld ix,2310
       00          
041F79 CD 40 C9 04 2826*  	call vdu_load_img
041F7D C9          2827*  	ret
041F7E             2828*  
041F7E             2829*  ld_14_046:
041F7E 21 6C 46 04 2830*  	ld hl,F14_046
041F82 22 C5 C7 04 2831*  	ld (cur_filename),hl
041F86 11 F1 D3 04 2832*  	ld de,filedata
041F8A 01 00 00 01 2833*  	ld bc,65536
041F8E 3E 01       2834*  	ld a,mos_load
041F90 5B CF       2835*  	RST.LIL 08h
041F92 21 87 01 00 2836*  	ld hl,BUF_14_046
041F96 01 40 00 00 2837*  	ld bc,64
041F9A 11 6B 00 00 2838*  	ld de,107
041F9E DD 21 C0 1A 2839*  	ld ix,6848
       00          
041FA3 CD 40 C9 04 2840*  	call vdu_load_img
041FA7 C9          2841*  	ret
041FA8             2842*  
041FA8             2843*  ld_14_048:
041FA8 21 80 46 04 2844*  	ld hl,F14_048
041FAC 22 C5 C7 04 2845*  	ld (cur_filename),hl
041FB0 11 F1 D3 04 2846*  	ld de,filedata
041FB4 01 00 00 01 2847*  	ld bc,65536
041FB8 3E 01       2848*  	ld a,mos_load
041FBA 5B CF       2849*  	RST.LIL 08h
041FBC 21 88 01 00 2850*  	ld hl,BUF_14_048
041FC0 01 6C 00 00 2851*  	ld bc,108
041FC4 11 6B 00 00 2852*  	ld de,107
041FC8 DD 21 24 2D 2853*  	ld ix,11556
       00          
041FCD CD 40 C9 04 2854*  	call vdu_load_img
041FD1 C9          2855*  	ret
041FD2             2856*  
041FD2             2857*  ld_14_050:
041FD2 21 94 46 04 2858*  	ld hl,F14_050
041FD6 22 C5 C7 04 2859*  	ld (cur_filename),hl
041FDA 11 F1 D3 04 2860*  	ld de,filedata
041FDE 01 00 00 01 2861*  	ld bc,65536
041FE2 3E 01       2862*  	ld a,mos_load
041FE4 5B CF       2863*  	RST.LIL 08h
041FE6 21 89 01 00 2864*  	ld hl,BUF_14_050
041FEA 01 6A 00 00 2865*  	ld bc,106
041FEE 11 A0 00 00 2866*  	ld de,160
041FF2 DD 21 40 42 2867*  	ld ix,16960
       00          
041FF7 CD 40 C9 04 2868*  	call vdu_load_img
041FFB C9          2869*  	ret
041FFC             2870*  
041FFC             2871*  ld_14_051:
041FFC 21 A8 46 04 2872*  	ld hl,F14_051
042000 22 C5 C7 04 2873*  	ld (cur_filename),hl
042004 11 F1 D3 04 2874*  	ld de,filedata
042008 01 00 00 01 2875*  	ld bc,65536
04200C 3E 01       2876*  	ld a,mos_load
04200E 5B CF       2877*  	RST.LIL 08h
042010 21 8A 01 00 2878*  	ld hl,BUF_14_051
042014 01 6A 00 00 2879*  	ld bc,106
042018 11 A0 00 00 2880*  	ld de,160
04201C DD 21 40 42 2881*  	ld ix,16960
       00          
042021 CD 40 C9 04 2882*  	call vdu_load_img
042025 C9          2883*  	ret
042026             2884*  
042026             2885*  ld_14_052:
042026 21 BC 46 04 2886*  	ld hl,F14_052
04202A 22 C5 C7 04 2887*  	ld (cur_filename),hl
04202E 11 F1 D3 04 2888*  	ld de,filedata
042032 01 00 00 01 2889*  	ld bc,65536
042036 3E 01       2890*  	ld a,mos_load
042038 5B CF       2891*  	RST.LIL 08h
04203A 21 8B 01 00 2892*  	ld hl,BUF_14_052
04203E 01 40 01 00 2893*  	ld bc,320
042042 11 A0 00 00 2894*  	ld de,160
042046 DD 21 00 C8 2895*  	ld ix,51200
       00          
04204B CD 40 C9 04 2896*  	call vdu_load_img
04204F C9          2897*  	ret
042050             2898*  
042050             2899*  ld_15_000:
042050 21 D0 46 04 2900*  	ld hl,F15_000
042054 22 C5 C7 04 2901*  	ld (cur_filename),hl
042058 11 F1 D3 04 2902*  	ld de,filedata
04205C 01 00 00 01 2903*  	ld bc,65536
042060 3E 01       2904*  	ld a,mos_load
042062 5B CF       2905*  	RST.LIL 08h
042064 21 8C 01 00 2906*  	ld hl,BUF_15_000
042068 01 1D 00 00 2907*  	ld bc,29
04206C 11 23 00 00 2908*  	ld de,35
042070 DD 21 F7 03 2909*  	ld ix,1015
       00          
042075 CD 40 C9 04 2910*  	call vdu_load_img
042079 C9          2911*  	ret
04207A             2912*  
04207A             2913*  ld_15_001:
04207A 21 E4 46 04 2914*  	ld hl,F15_001
04207E 22 C5 C7 04 2915*  	ld (cur_filename),hl
042082 11 F1 D3 04 2916*  	ld de,filedata
042086 01 00 00 01 2917*  	ld bc,65536
04208A 3E 01       2918*  	ld a,mos_load
04208C 5B CF       2919*  	RST.LIL 08h
04208E 21 8D 01 00 2920*  	ld hl,BUF_15_001
042092 01 17 00 00 2921*  	ld bc,23
042096 11 23 00 00 2922*  	ld de,35
04209A DD 21 25 03 2923*  	ld ix,805
       00          
04209F CD 40 C9 04 2924*  	call vdu_load_img
0420A3 C9          2925*  	ret
0420A4             2926*  
0420A4             2927*  ld_15_007:
0420A4 21 F8 46 04 2928*  	ld hl,F15_007
0420A8 22 C5 C7 04 2929*  	ld (cur_filename),hl
0420AC 11 F1 D3 04 2930*  	ld de,filedata
0420B0 01 00 00 01 2931*  	ld bc,65536
0420B4 3E 01       2932*  	ld a,mos_load
0420B6 5B CF       2933*  	RST.LIL 08h
0420B8 21 8E 01 00 2934*  	ld hl,BUF_15_007
0420BC 01 1D 00 00 2935*  	ld bc,29
0420C0 11 23 00 00 2936*  	ld de,35
0420C4 DD 21 F7 03 2937*  	ld ix,1015
       00          
0420C9 CD 40 C9 04 2938*  	call vdu_load_img
0420CD C9          2939*  	ret
0420CE             2940*  
0420CE             2941*  ld_15_012:
0420CE 21 0C 47 04 2942*  	ld hl,F15_012
0420D2 22 C5 C7 04 2943*  	ld (cur_filename),hl
0420D6 11 F1 D3 04 2944*  	ld de,filedata
0420DA 01 00 00 01 2945*  	ld bc,65536
0420DE 3E 01       2946*  	ld a,mos_load
0420E0 5B CF       2947*  	RST.LIL 08h
0420E2 21 8F 01 00 2948*  	ld hl,BUF_15_012
0420E6 01 24 00 00 2949*  	ld bc,36
0420EA 11 23 00 00 2950*  	ld de,35
0420EE DD 21 EC 04 2951*  	ld ix,1260
       00          
0420F3 CD 40 C9 04 2952*  	call vdu_load_img
0420F7 C9          2953*  	ret
0420F8             2954*  
0420F8             2955*  ld_15_017:
0420F8 21 20 47 04 2956*  	ld hl,F15_017
0420FC 22 C5 C7 04 2957*  	ld (cur_filename),hl
042100 11 F1 D3 04 2958*  	ld de,filedata
042104 01 00 00 01 2959*  	ld bc,65536
042108 3E 01       2960*  	ld a,mos_load
04210A 5B CF       2961*  	RST.LIL 08h
04210C 21 90 01 00 2962*  	ld hl,BUF_15_017
042110 01 23 00 00 2963*  	ld bc,35
042114 11 2D 00 00 2964*  	ld de,45
042118 DD 21 27 06 2965*  	ld ix,1575
       00          
04211D CD 40 C9 04 2966*  	call vdu_load_img
042121 C9          2967*  	ret
042122             2968*  
042122             2969*  ld_15_018:
042122 21 34 47 04 2970*  	ld hl,F15_018
042126 22 C5 C7 04 2971*  	ld (cur_filename),hl
04212A 11 F1 D3 04 2972*  	ld de,filedata
04212E 01 00 00 01 2973*  	ld bc,65536
042132 3E 01       2974*  	ld a,mos_load
042134 5B CF       2975*  	RST.LIL 08h
042136 21 91 01 00 2976*  	ld hl,BUF_15_018
04213A 01 1A 00 00 2977*  	ld bc,26
04213E 11 2D 00 00 2978*  	ld de,45
042142 DD 21 92 04 2979*  	ld ix,1170
       00          
042147 CD 40 C9 04 2980*  	call vdu_load_img
04214B C9          2981*  	ret
04214C             2982*  
04214C             2983*  ld_15_019:
04214C 21 48 47 04 2984*  	ld hl,F15_019
042150 22 C5 C7 04 2985*  	ld (cur_filename),hl
042154 11 F1 D3 04 2986*  	ld de,filedata
042158 01 00 00 01 2987*  	ld bc,65536
04215C 3E 01       2988*  	ld a,mos_load
04215E 5B CF       2989*  	RST.LIL 08h
042160 21 92 01 00 2990*  	ld hl,BUF_15_019
042164 01 0F 00 00 2991*  	ld bc,15
042168 11 2D 00 00 2992*  	ld de,45
04216C DD 21 A3 02 2993*  	ld ix,675
       00          
042171 CD 40 C9 04 2994*  	call vdu_load_img
042175 C9          2995*  	ret
042176             2996*  
042176             2997*  ld_15_020:
042176 21 5C 47 04 2998*  	ld hl,F15_020
04217A 22 C5 C7 04 2999*  	ld (cur_filename),hl
04217E 11 F1 D3 04 3000*  	ld de,filedata
042182 01 00 00 01 3001*  	ld bc,65536
042186 3E 01       3002*  	ld a,mos_load
042188 5B CF       3003*  	RST.LIL 08h
04218A 21 93 01 00 3004*  	ld hl,BUF_15_020
04218E 01 05 00 00 3005*  	ld bc,5
042192 11 2D 00 00 3006*  	ld de,45
042196 DD 21 E1 00 3007*  	ld ix,225
       00          
04219B CD 40 C9 04 3008*  	call vdu_load_img
04219F C9          3009*  	ret
0421A0             3010*  
0421A0             3011*  ld_15_021:
0421A0 21 70 47 04 3012*  	ld hl,F15_021
0421A4 22 C5 C7 04 3013*  	ld (cur_filename),hl
0421A8 11 F1 D3 04 3014*  	ld de,filedata
0421AC 01 00 00 01 3015*  	ld bc,65536
0421B0 3E 01       3016*  	ld a,mos_load
0421B2 5B CF       3017*  	RST.LIL 08h
0421B4 21 94 01 00 3018*  	ld hl,BUF_15_021
0421B8 01 05 00 00 3019*  	ld bc,5
0421BC 11 2B 00 00 3020*  	ld de,43
0421C0 DD 21 D7 00 3021*  	ld ix,215
       00          
0421C5 CD 40 C9 04 3022*  	call vdu_load_img
0421C9 C9          3023*  	ret
0421CA             3024*  
0421CA             3025*  ld_15_022:
0421CA 21 84 47 04 3026*  	ld hl,F15_022
0421CE 22 C5 C7 04 3027*  	ld (cur_filename),hl
0421D2 11 F1 D3 04 3028*  	ld de,filedata
0421D6 01 00 00 01 3029*  	ld bc,65536
0421DA 3E 01       3030*  	ld a,mos_load
0421DC 5B CF       3031*  	RST.LIL 08h
0421DE 21 95 01 00 3032*  	ld hl,BUF_15_022
0421E2 01 0F 00 00 3033*  	ld bc,15
0421E6 11 2D 00 00 3034*  	ld de,45
0421EA DD 21 A3 02 3035*  	ld ix,675
       00          
0421EF CD 40 C9 04 3036*  	call vdu_load_img
0421F3 C9          3037*  	ret
0421F4             3038*  
0421F4             3039*  ld_15_023:
0421F4 21 98 47 04 3040*  	ld hl,F15_023
0421F8 22 C5 C7 04 3041*  	ld (cur_filename),hl
0421FC 11 F1 D3 04 3042*  	ld de,filedata
042200 01 00 00 01 3043*  	ld bc,65536
042204 3E 01       3044*  	ld a,mos_load
042206 5B CF       3045*  	RST.LIL 08h
042208 21 96 01 00 3046*  	ld hl,BUF_15_023
04220C 01 1A 00 00 3047*  	ld bc,26
042210 11 2D 00 00 3048*  	ld de,45
042214 DD 21 92 04 3049*  	ld ix,1170
       00          
042219 CD 40 C9 04 3050*  	call vdu_load_img
04221D C9          3051*  	ret
04221E             3052*  
04221E             3053*  ld_15_024:
04221E 21 AC 47 04 3054*  	ld hl,F15_024
042222 22 C5 C7 04 3055*  	ld (cur_filename),hl
042226 11 F1 D3 04 3056*  	ld de,filedata
04222A 01 00 00 01 3057*  	ld bc,65536
04222E 3E 01       3058*  	ld a,mos_load
042230 5B CF       3059*  	RST.LIL 08h
042232 21 97 01 00 3060*  	ld hl,BUF_15_024
042236 01 23 00 00 3061*  	ld bc,35
04223A 11 2D 00 00 3062*  	ld de,45
04223E DD 21 27 06 3063*  	ld ix,1575
       00          
042243 CD 40 C9 04 3064*  	call vdu_load_img
042247 C9          3065*  	ret
042248             3066*  
042248             3067*  ld_15_028:
042248 21 C0 47 04 3068*  	ld hl,F15_028
04224C 22 C5 C7 04 3069*  	ld (cur_filename),hl
042250 11 F1 D3 04 3070*  	ld de,filedata
042254 01 00 00 01 3071*  	ld bc,65536
042258 3E 01       3072*  	ld a,mos_load
04225A 5B CF       3073*  	RST.LIL 08h
04225C 21 98 01 00 3074*  	ld hl,BUF_15_028
042260 01 2E 00 00 3075*  	ld bc,46
042264 11 2D 00 00 3076*  	ld de,45
042268 DD 21 16 08 3077*  	ld ix,2070
       00          
04226D CD 40 C9 04 3078*  	call vdu_load_img
042271 C9          3079*  	ret
042272             3080*  
042272             3081*  ld_15_032:
042272 21 D4 47 04 3082*  	ld hl,F15_032
042276 22 C5 C7 04 3083*  	ld (cur_filename),hl
04227A 11 F1 D3 04 3084*  	ld de,filedata
04227E 01 00 00 01 3085*  	ld bc,65536
042282 3E 01       3086*  	ld a,mos_load
042284 5B CF       3087*  	RST.LIL 08h
042286 21 99 01 00 3088*  	ld hl,BUF_15_032
04228A 01 2D 00 00 3089*  	ld bc,45
04228E 11 3F 00 00 3090*  	ld de,63
042292 DD 21 13 0B 3091*  	ld ix,2835
       00          
042297 CD 40 C9 04 3092*  	call vdu_load_img
04229B C9          3093*  	ret
04229C             3094*  
04229C             3095*  ld_15_033:
04229C 21 E8 47 04 3096*  	ld hl,F15_033
0422A0 22 C5 C7 04 3097*  	ld (cur_filename),hl
0422A4 11 F1 D3 04 3098*  	ld de,filedata
0422A8 01 00 00 01 3099*  	ld bc,65536
0422AC 3E 01       3100*  	ld a,mos_load
0422AE 5B CF       3101*  	RST.LIL 08h
0422B0 21 9A 01 00 3102*  	ld hl,BUF_15_033
0422B4 01 1B 00 00 3103*  	ld bc,27
0422B8 11 3F 00 00 3104*  	ld de,63
0422BC DD 21 A5 06 3105*  	ld ix,1701
       00          
0422C1 CD 40 C9 04 3106*  	call vdu_load_img
0422C5 C9          3107*  	ret
0422C6             3108*  
0422C6             3109*  ld_15_034:
0422C6 21 FC 47 04 3110*  	ld hl,F15_034
0422CA 22 C5 C7 04 3111*  	ld (cur_filename),hl
0422CE 11 F1 D3 04 3112*  	ld de,filedata
0422D2 01 00 00 01 3113*  	ld bc,65536
0422D6 3E 01       3114*  	ld a,mos_load
0422D8 5B CF       3115*  	RST.LIL 08h
0422DA 21 9B 01 00 3116*  	ld hl,BUF_15_034
0422DE 01 09 00 00 3117*  	ld bc,9
0422E2 11 3F 00 00 3118*  	ld de,63
0422E6 DD 21 37 02 3119*  	ld ix,567
       00          
0422EB CD 40 C9 04 3120*  	call vdu_load_img
0422EF C9          3121*  	ret
0422F0             3122*  
0422F0             3123*  ld_15_035:
0422F0 21 10 48 04 3124*  	ld hl,F15_035
0422F4 22 C5 C7 04 3125*  	ld (cur_filename),hl
0422F8 11 F1 D3 04 3126*  	ld de,filedata
0422FC 01 00 00 01 3127*  	ld bc,65536
042300 3E 01       3128*  	ld a,mos_load
042302 5B CF       3129*  	RST.LIL 08h
042304 21 9C 01 00 3130*  	ld hl,BUF_15_035
042308 01 09 00 00 3131*  	ld bc,9
04230C 11 3D 00 00 3132*  	ld de,61
042310 DD 21 25 02 3133*  	ld ix,549
       00          
042315 CD 40 C9 04 3134*  	call vdu_load_img
042319 C9          3135*  	ret
04231A             3136*  
04231A             3137*  ld_15_036:
04231A 21 24 48 04 3138*  	ld hl,F15_036
04231E 22 C5 C7 04 3139*  	ld (cur_filename),hl
042322 11 F1 D3 04 3140*  	ld de,filedata
042326 01 00 00 01 3141*  	ld bc,65536
04232A 3E 01       3142*  	ld a,mos_load
04232C 5B CF       3143*  	RST.LIL 08h
04232E 21 9D 01 00 3144*  	ld hl,BUF_15_036
042332 01 1B 00 00 3145*  	ld bc,27
042336 11 3F 00 00 3146*  	ld de,63
04233A DD 21 A5 06 3147*  	ld ix,1701
       00          
04233F CD 40 C9 04 3148*  	call vdu_load_img
042343 C9          3149*  	ret
042344             3150*  
042344             3151*  ld_15_037:
042344 21 38 48 04 3152*  	ld hl,F15_037
042348 22 C5 C7 04 3153*  	ld (cur_filename),hl
04234C 11 F1 D3 04 3154*  	ld de,filedata
042350 01 00 00 01 3155*  	ld bc,65536
042354 3E 01       3156*  	ld a,mos_load
042356 5B CF       3157*  	RST.LIL 08h
042358 21 9E 01 00 3158*  	ld hl,BUF_15_037
04235C 01 2D 00 00 3159*  	ld bc,45
042360 11 3F 00 00 3160*  	ld de,63
042364 DD 21 13 0B 3161*  	ld ix,2835
       00          
042369 CD 40 C9 04 3162*  	call vdu_load_img
04236D C9          3163*  	ret
04236E             3164*  
04236E             3165*  ld_15_040:
04236E 21 4C 48 04 3166*  	ld hl,F15_040
042372 22 C5 C7 04 3167*  	ld (cur_filename),hl
042376 11 F1 D3 04 3168*  	ld de,filedata
04237A 01 00 00 01 3169*  	ld bc,65536
04237E 3E 01       3170*  	ld a,mos_load
042380 5B CF       3171*  	RST.LIL 08h
042382 21 9F 01 00 3172*  	ld hl,BUF_15_040
042386 01 40 00 00 3173*  	ld bc,64
04238A 11 3F 00 00 3174*  	ld de,63
04238E DD 21 C0 0F 3175*  	ld ix,4032
       00          
042393 CD 40 C9 04 3176*  	call vdu_load_img
042397 C9          3177*  	ret
042398             3178*  
042398             3179*  ld_15_043:
042398 21 60 48 04 3180*  	ld hl,F15_043
04239C 22 C5 C7 04 3181*  	ld (cur_filename),hl
0423A0 11 F1 D3 04 3182*  	ld de,filedata
0423A4 01 00 00 01 3183*  	ld bc,65536
0423A8 3E 01       3184*  	ld a,mos_load
0423AA 5B CF       3185*  	RST.LIL 08h
0423AC 21 A0 01 00 3186*  	ld hl,BUF_15_043
0423B0 01 40 00 00 3187*  	ld bc,64
0423B4 11 6B 00 00 3188*  	ld de,107
0423B8 DD 21 C0 1A 3189*  	ld ix,6848
       00          
0423BD CD 40 C9 04 3190*  	call vdu_load_img
0423C1 C9          3191*  	ret
0423C2             3192*  
0423C2             3193*  ld_15_044:
0423C2 21 74 48 04 3194*  	ld hl,F15_044
0423C6 22 C5 C7 04 3195*  	ld (cur_filename),hl
0423CA 11 F1 D3 04 3196*  	ld de,filedata
0423CE 01 00 00 01 3197*  	ld bc,65536
0423D2 3E 01       3198*  	ld a,mos_load
0423D4 5B CF       3199*  	RST.LIL 08h
0423D6 21 A1 01 00 3200*  	ld hl,BUF_15_044
0423DA 01 16 00 00 3201*  	ld bc,22
0423DE 11 6B 00 00 3202*  	ld de,107
0423E2 DD 21 32 09 3203*  	ld ix,2354
       00          
0423E7 CD 40 C9 04 3204*  	call vdu_load_img
0423EB C9          3205*  	ret
0423EC             3206*  
0423EC             3207*  ld_15_045:
0423EC 21 88 48 04 3208*  	ld hl,F15_045
0423F0 22 C5 C7 04 3209*  	ld (cur_filename),hl
0423F4 11 F1 D3 04 3210*  	ld de,filedata
0423F8 01 00 00 01 3211*  	ld bc,65536
0423FC 3E 01       3212*  	ld a,mos_load
0423FE 5B CF       3213*  	RST.LIL 08h
042400 21 A2 01 00 3214*  	ld hl,BUF_15_045
042404 01 16 00 00 3215*  	ld bc,22
042408 11 69 00 00 3216*  	ld de,105
04240C DD 21 06 09 3217*  	ld ix,2310
       00          
042411 CD 40 C9 04 3218*  	call vdu_load_img
042415 C9          3219*  	ret
042416             3220*  
042416             3221*  ld_15_046:
042416 21 9C 48 04 3222*  	ld hl,F15_046
04241A 22 C5 C7 04 3223*  	ld (cur_filename),hl
04241E 11 F1 D3 04 3224*  	ld de,filedata
042422 01 00 00 01 3225*  	ld bc,65536
042426 3E 01       3226*  	ld a,mos_load
042428 5B CF       3227*  	RST.LIL 08h
04242A 21 A3 01 00 3228*  	ld hl,BUF_15_046
04242E 01 40 00 00 3229*  	ld bc,64
042432 11 6B 00 00 3230*  	ld de,107
042436 DD 21 C0 1A 3231*  	ld ix,6848
       00          
04243B CD 40 C9 04 3232*  	call vdu_load_img
04243F C9          3233*  	ret
042440             3234*  
042440             3235*  ld_15_048:
042440 21 B0 48 04 3236*  	ld hl,F15_048
042444 22 C5 C7 04 3237*  	ld (cur_filename),hl
042448 11 F1 D3 04 3238*  	ld de,filedata
04244C 01 00 00 01 3239*  	ld bc,65536
042450 3E 01       3240*  	ld a,mos_load
042452 5B CF       3241*  	RST.LIL 08h
042454 21 A4 01 00 3242*  	ld hl,BUF_15_048
042458 01 6C 00 00 3243*  	ld bc,108
04245C 11 6B 00 00 3244*  	ld de,107
042460 DD 21 24 2D 3245*  	ld ix,11556
       00          
042465 CD 40 C9 04 3246*  	call vdu_load_img
042469 C9          3247*  	ret
04246A             3248*  
04246A             3249*  ld_15_050:
04246A 21 C4 48 04 3250*  	ld hl,F15_050
04246E 22 C5 C7 04 3251*  	ld (cur_filename),hl
042472 11 F1 D3 04 3252*  	ld de,filedata
042476 01 00 00 01 3253*  	ld bc,65536
04247A 3E 01       3254*  	ld a,mos_load
04247C 5B CF       3255*  	RST.LIL 08h
04247E 21 A5 01 00 3256*  	ld hl,BUF_15_050
042482 01 6A 00 00 3257*  	ld bc,106
042486 11 A0 00 00 3258*  	ld de,160
04248A DD 21 40 42 3259*  	ld ix,16960
       00          
04248F CD 40 C9 04 3260*  	call vdu_load_img
042493 C9          3261*  	ret
042494             3262*  
042494             3263*  ld_15_051:
042494 21 D8 48 04 3264*  	ld hl,F15_051
042498 22 C5 C7 04 3265*  	ld (cur_filename),hl
04249C 11 F1 D3 04 3266*  	ld de,filedata
0424A0 01 00 00 01 3267*  	ld bc,65536
0424A4 3E 01       3268*  	ld a,mos_load
0424A6 5B CF       3269*  	RST.LIL 08h
0424A8 21 A6 01 00 3270*  	ld hl,BUF_15_051
0424AC 01 6A 00 00 3271*  	ld bc,106
0424B0 11 A0 00 00 3272*  	ld de,160
0424B4 DD 21 40 42 3273*  	ld ix,16960
       00          
0424B9 CD 40 C9 04 3274*  	call vdu_load_img
0424BD C9          3275*  	ret
0424BE             3276*  
0424BE             3277*  ld_15_052:
0424BE 21 EC 48 04 3278*  	ld hl,F15_052
0424C2 22 C5 C7 04 3279*  	ld (cur_filename),hl
0424C6 11 F1 D3 04 3280*  	ld de,filedata
0424CA 01 00 00 01 3281*  	ld bc,65536
0424CE 3E 01       3282*  	ld a,mos_load
0424D0 5B CF       3283*  	RST.LIL 08h
0424D2 21 A7 01 00 3284*  	ld hl,BUF_15_052
0424D6 01 40 01 00 3285*  	ld bc,320
0424DA 11 A0 00 00 3286*  	ld de,160
0424DE DD 21 00 C8 3287*  	ld ix,51200
       00          
0424E3 CD 40 C9 04 3288*  	call vdu_load_img
0424E7 C9          3289*  	ret
0424E8             3290*  
0424E8             3291*  ld_16_000:
0424E8 21 00 49 04 3292*  	ld hl,F16_000
0424EC 22 C5 C7 04 3293*  	ld (cur_filename),hl
0424F0 11 F1 D3 04 3294*  	ld de,filedata
0424F4 01 00 00 01 3295*  	ld bc,65536
0424F8 3E 01       3296*  	ld a,mos_load
0424FA 5B CF       3297*  	RST.LIL 08h
0424FC 21 A8 01 00 3298*  	ld hl,BUF_16_000
042500 01 1D 00 00 3299*  	ld bc,29
042504 11 23 00 00 3300*  	ld de,35
042508 DD 21 F7 03 3301*  	ld ix,1015
       00          
04250D CD 40 C9 04 3302*  	call vdu_load_img
042511 C9          3303*  	ret
042512             3304*  
042512             3305*  ld_16_001:
042512 21 14 49 04 3306*  	ld hl,F16_001
042516 22 C5 C7 04 3307*  	ld (cur_filename),hl
04251A 11 F1 D3 04 3308*  	ld de,filedata
04251E 01 00 00 01 3309*  	ld bc,65536
042522 3E 01       3310*  	ld a,mos_load
042524 5B CF       3311*  	RST.LIL 08h
042526 21 A9 01 00 3312*  	ld hl,BUF_16_001
04252A 01 17 00 00 3313*  	ld bc,23
04252E 11 23 00 00 3314*  	ld de,35
042532 DD 21 25 03 3315*  	ld ix,805
       00          
042537 CD 40 C9 04 3316*  	call vdu_load_img
04253B C9          3317*  	ret
04253C             3318*  
04253C             3319*  ld_16_007:
04253C 21 28 49 04 3320*  	ld hl,F16_007
042540 22 C5 C7 04 3321*  	ld (cur_filename),hl
042544 11 F1 D3 04 3322*  	ld de,filedata
042548 01 00 00 01 3323*  	ld bc,65536
04254C 3E 01       3324*  	ld a,mos_load
04254E 5B CF       3325*  	RST.LIL 08h
042550 21 AA 01 00 3326*  	ld hl,BUF_16_007
042554 01 1D 00 00 3327*  	ld bc,29
042558 11 23 00 00 3328*  	ld de,35
04255C DD 21 F7 03 3329*  	ld ix,1015
       00          
042561 CD 40 C9 04 3330*  	call vdu_load_img
042565 C9          3331*  	ret
042566             3332*  
042566             3333*  ld_16_012:
042566 21 3C 49 04 3334*  	ld hl,F16_012
04256A 22 C5 C7 04 3335*  	ld (cur_filename),hl
04256E 11 F1 D3 04 3336*  	ld de,filedata
042572 01 00 00 01 3337*  	ld bc,65536
042576 3E 01       3338*  	ld a,mos_load
042578 5B CF       3339*  	RST.LIL 08h
04257A 21 AB 01 00 3340*  	ld hl,BUF_16_012
04257E 01 24 00 00 3341*  	ld bc,36
042582 11 23 00 00 3342*  	ld de,35
042586 DD 21 EC 04 3343*  	ld ix,1260
       00          
04258B CD 40 C9 04 3344*  	call vdu_load_img
04258F C9          3345*  	ret
042590             3346*  
042590             3347*  ld_16_017:
042590 21 50 49 04 3348*  	ld hl,F16_017
042594 22 C5 C7 04 3349*  	ld (cur_filename),hl
042598 11 F1 D3 04 3350*  	ld de,filedata
04259C 01 00 00 01 3351*  	ld bc,65536
0425A0 3E 01       3352*  	ld a,mos_load
0425A2 5B CF       3353*  	RST.LIL 08h
0425A4 21 AC 01 00 3354*  	ld hl,BUF_16_017
0425A8 01 23 00 00 3355*  	ld bc,35
0425AC 11 2D 00 00 3356*  	ld de,45
0425B0 DD 21 27 06 3357*  	ld ix,1575
       00          
0425B5 CD 40 C9 04 3358*  	call vdu_load_img
0425B9 C9          3359*  	ret
0425BA             3360*  
0425BA             3361*  ld_16_018:
0425BA 21 64 49 04 3362*  	ld hl,F16_018
0425BE 22 C5 C7 04 3363*  	ld (cur_filename),hl
0425C2 11 F1 D3 04 3364*  	ld de,filedata
0425C6 01 00 00 01 3365*  	ld bc,65536
0425CA 3E 01       3366*  	ld a,mos_load
0425CC 5B CF       3367*  	RST.LIL 08h
0425CE 21 AD 01 00 3368*  	ld hl,BUF_16_018
0425D2 01 1A 00 00 3369*  	ld bc,26
0425D6 11 2D 00 00 3370*  	ld de,45
0425DA DD 21 92 04 3371*  	ld ix,1170
       00          
0425DF CD 40 C9 04 3372*  	call vdu_load_img
0425E3 C9          3373*  	ret
0425E4             3374*  
0425E4             3375*  ld_16_019:
0425E4 21 78 49 04 3376*  	ld hl,F16_019
0425E8 22 C5 C7 04 3377*  	ld (cur_filename),hl
0425EC 11 F1 D3 04 3378*  	ld de,filedata
0425F0 01 00 00 01 3379*  	ld bc,65536
0425F4 3E 01       3380*  	ld a,mos_load
0425F6 5B CF       3381*  	RST.LIL 08h
0425F8 21 AE 01 00 3382*  	ld hl,BUF_16_019
0425FC 01 0F 00 00 3383*  	ld bc,15
042600 11 2D 00 00 3384*  	ld de,45
042604 DD 21 A3 02 3385*  	ld ix,675
       00          
042609 CD 40 C9 04 3386*  	call vdu_load_img
04260D C9          3387*  	ret
04260E             3388*  
04260E             3389*  ld_16_020:
04260E 21 8C 49 04 3390*  	ld hl,F16_020
042612 22 C5 C7 04 3391*  	ld (cur_filename),hl
042616 11 F1 D3 04 3392*  	ld de,filedata
04261A 01 00 00 01 3393*  	ld bc,65536
04261E 3E 01       3394*  	ld a,mos_load
042620 5B CF       3395*  	RST.LIL 08h
042622 21 AF 01 00 3396*  	ld hl,BUF_16_020
042626 01 05 00 00 3397*  	ld bc,5
04262A 11 2D 00 00 3398*  	ld de,45
04262E DD 21 E1 00 3399*  	ld ix,225
       00          
042633 CD 40 C9 04 3400*  	call vdu_load_img
042637 C9          3401*  	ret
042638             3402*  
042638             3403*  ld_16_021:
042638 21 A0 49 04 3404*  	ld hl,F16_021
04263C 22 C5 C7 04 3405*  	ld (cur_filename),hl
042640 11 F1 D3 04 3406*  	ld de,filedata
042644 01 00 00 01 3407*  	ld bc,65536
042648 3E 01       3408*  	ld a,mos_load
04264A 5B CF       3409*  	RST.LIL 08h
04264C 21 B0 01 00 3410*  	ld hl,BUF_16_021
042650 01 05 00 00 3411*  	ld bc,5
042654 11 2B 00 00 3412*  	ld de,43
042658 DD 21 D7 00 3413*  	ld ix,215
       00          
04265D CD 40 C9 04 3414*  	call vdu_load_img
042661 C9          3415*  	ret
042662             3416*  
042662             3417*  ld_16_022:
042662 21 B4 49 04 3418*  	ld hl,F16_022
042666 22 C5 C7 04 3419*  	ld (cur_filename),hl
04266A 11 F1 D3 04 3420*  	ld de,filedata
04266E 01 00 00 01 3421*  	ld bc,65536
042672 3E 01       3422*  	ld a,mos_load
042674 5B CF       3423*  	RST.LIL 08h
042676 21 B1 01 00 3424*  	ld hl,BUF_16_022
04267A 01 0F 00 00 3425*  	ld bc,15
04267E 11 2D 00 00 3426*  	ld de,45
042682 DD 21 A3 02 3427*  	ld ix,675
       00          
042687 CD 40 C9 04 3428*  	call vdu_load_img
04268B C9          3429*  	ret
04268C             3430*  
04268C             3431*  ld_16_023:
04268C 21 C8 49 04 3432*  	ld hl,F16_023
042690 22 C5 C7 04 3433*  	ld (cur_filename),hl
042694 11 F1 D3 04 3434*  	ld de,filedata
042698 01 00 00 01 3435*  	ld bc,65536
04269C 3E 01       3436*  	ld a,mos_load
04269E 5B CF       3437*  	RST.LIL 08h
0426A0 21 B2 01 00 3438*  	ld hl,BUF_16_023
0426A4 01 1A 00 00 3439*  	ld bc,26
0426A8 11 2D 00 00 3440*  	ld de,45
0426AC DD 21 92 04 3441*  	ld ix,1170
       00          
0426B1 CD 40 C9 04 3442*  	call vdu_load_img
0426B5 C9          3443*  	ret
0426B6             3444*  
0426B6             3445*  ld_16_024:
0426B6 21 DC 49 04 3446*  	ld hl,F16_024
0426BA 22 C5 C7 04 3447*  	ld (cur_filename),hl
0426BE 11 F1 D3 04 3448*  	ld de,filedata
0426C2 01 00 00 01 3449*  	ld bc,65536
0426C6 3E 01       3450*  	ld a,mos_load
0426C8 5B CF       3451*  	RST.LIL 08h
0426CA 21 B3 01 00 3452*  	ld hl,BUF_16_024
0426CE 01 23 00 00 3453*  	ld bc,35
0426D2 11 2D 00 00 3454*  	ld de,45
0426D6 DD 21 27 06 3455*  	ld ix,1575
       00          
0426DB CD 40 C9 04 3456*  	call vdu_load_img
0426DF C9          3457*  	ret
0426E0             3458*  
0426E0             3459*  ld_16_028:
0426E0 21 F0 49 04 3460*  	ld hl,F16_028
0426E4 22 C5 C7 04 3461*  	ld (cur_filename),hl
0426E8 11 F1 D3 04 3462*  	ld de,filedata
0426EC 01 00 00 01 3463*  	ld bc,65536
0426F0 3E 01       3464*  	ld a,mos_load
0426F2 5B CF       3465*  	RST.LIL 08h
0426F4 21 B4 01 00 3466*  	ld hl,BUF_16_028
0426F8 01 2E 00 00 3467*  	ld bc,46
0426FC 11 2D 00 00 3468*  	ld de,45
042700 DD 21 16 08 3469*  	ld ix,2070
       00          
042705 CD 40 C9 04 3470*  	call vdu_load_img
042709 C9          3471*  	ret
04270A             3472*  
04270A             3473*  ld_16_032:
04270A 21 04 4A 04 3474*  	ld hl,F16_032
04270E 22 C5 C7 04 3475*  	ld (cur_filename),hl
042712 11 F1 D3 04 3476*  	ld de,filedata
042716 01 00 00 01 3477*  	ld bc,65536
04271A 3E 01       3478*  	ld a,mos_load
04271C 5B CF       3479*  	RST.LIL 08h
04271E 21 B5 01 00 3480*  	ld hl,BUF_16_032
042722 01 2D 00 00 3481*  	ld bc,45
042726 11 3F 00 00 3482*  	ld de,63
04272A DD 21 13 0B 3483*  	ld ix,2835
       00          
04272F CD 40 C9 04 3484*  	call vdu_load_img
042733 C9          3485*  	ret
042734             3486*  
042734             3487*  ld_16_033:
042734 21 18 4A 04 3488*  	ld hl,F16_033
042738 22 C5 C7 04 3489*  	ld (cur_filename),hl
04273C 11 F1 D3 04 3490*  	ld de,filedata
042740 01 00 00 01 3491*  	ld bc,65536
042744 3E 01       3492*  	ld a,mos_load
042746 5B CF       3493*  	RST.LIL 08h
042748 21 B6 01 00 3494*  	ld hl,BUF_16_033
04274C 01 1B 00 00 3495*  	ld bc,27
042750 11 3F 00 00 3496*  	ld de,63
042754 DD 21 A5 06 3497*  	ld ix,1701
       00          
042759 CD 40 C9 04 3498*  	call vdu_load_img
04275D C9          3499*  	ret
04275E             3500*  
04275E             3501*  ld_16_034:
04275E 21 2C 4A 04 3502*  	ld hl,F16_034
042762 22 C5 C7 04 3503*  	ld (cur_filename),hl
042766 11 F1 D3 04 3504*  	ld de,filedata
04276A 01 00 00 01 3505*  	ld bc,65536
04276E 3E 01       3506*  	ld a,mos_load
042770 5B CF       3507*  	RST.LIL 08h
042772 21 B7 01 00 3508*  	ld hl,BUF_16_034
042776 01 09 00 00 3509*  	ld bc,9
04277A 11 3F 00 00 3510*  	ld de,63
04277E DD 21 37 02 3511*  	ld ix,567
       00          
042783 CD 40 C9 04 3512*  	call vdu_load_img
042787 C9          3513*  	ret
042788             3514*  
042788             3515*  ld_16_035:
042788 21 40 4A 04 3516*  	ld hl,F16_035
04278C 22 C5 C7 04 3517*  	ld (cur_filename),hl
042790 11 F1 D3 04 3518*  	ld de,filedata
042794 01 00 00 01 3519*  	ld bc,65536
042798 3E 01       3520*  	ld a,mos_load
04279A 5B CF       3521*  	RST.LIL 08h
04279C 21 B8 01 00 3522*  	ld hl,BUF_16_035
0427A0 01 09 00 00 3523*  	ld bc,9
0427A4 11 3D 00 00 3524*  	ld de,61
0427A8 DD 21 25 02 3525*  	ld ix,549
       00          
0427AD CD 40 C9 04 3526*  	call vdu_load_img
0427B1 C9          3527*  	ret
0427B2             3528*  
0427B2             3529*  ld_16_036:
0427B2 21 54 4A 04 3530*  	ld hl,F16_036
0427B6 22 C5 C7 04 3531*  	ld (cur_filename),hl
0427BA 11 F1 D3 04 3532*  	ld de,filedata
0427BE 01 00 00 01 3533*  	ld bc,65536
0427C2 3E 01       3534*  	ld a,mos_load
0427C4 5B CF       3535*  	RST.LIL 08h
0427C6 21 B9 01 00 3536*  	ld hl,BUF_16_036
0427CA 01 1B 00 00 3537*  	ld bc,27
0427CE 11 3F 00 00 3538*  	ld de,63
0427D2 DD 21 A5 06 3539*  	ld ix,1701
       00          
0427D7 CD 40 C9 04 3540*  	call vdu_load_img
0427DB C9          3541*  	ret
0427DC             3542*  
0427DC             3543*  ld_16_037:
0427DC 21 68 4A 04 3544*  	ld hl,F16_037
0427E0 22 C5 C7 04 3545*  	ld (cur_filename),hl
0427E4 11 F1 D3 04 3546*  	ld de,filedata
0427E8 01 00 00 01 3547*  	ld bc,65536
0427EC 3E 01       3548*  	ld a,mos_load
0427EE 5B CF       3549*  	RST.LIL 08h
0427F0 21 BA 01 00 3550*  	ld hl,BUF_16_037
0427F4 01 2D 00 00 3551*  	ld bc,45
0427F8 11 3F 00 00 3552*  	ld de,63
0427FC DD 21 13 0B 3553*  	ld ix,2835
       00          
042801 CD 40 C9 04 3554*  	call vdu_load_img
042805 C9          3555*  	ret
042806             3556*  
042806             3557*  ld_16_040:
042806 21 7C 4A 04 3558*  	ld hl,F16_040
04280A 22 C5 C7 04 3559*  	ld (cur_filename),hl
04280E 11 F1 D3 04 3560*  	ld de,filedata
042812 01 00 00 01 3561*  	ld bc,65536
042816 3E 01       3562*  	ld a,mos_load
042818 5B CF       3563*  	RST.LIL 08h
04281A 21 BB 01 00 3564*  	ld hl,BUF_16_040
04281E 01 40 00 00 3565*  	ld bc,64
042822 11 3F 00 00 3566*  	ld de,63
042826 DD 21 C0 0F 3567*  	ld ix,4032
       00          
04282B CD 40 C9 04 3568*  	call vdu_load_img
04282F C9          3569*  	ret
042830             3570*  
042830             3571*  ld_16_043:
042830 21 90 4A 04 3572*  	ld hl,F16_043
042834 22 C5 C7 04 3573*  	ld (cur_filename),hl
042838 11 F1 D3 04 3574*  	ld de,filedata
04283C 01 00 00 01 3575*  	ld bc,65536
042840 3E 01       3576*  	ld a,mos_load
042842 5B CF       3577*  	RST.LIL 08h
042844 21 BC 01 00 3578*  	ld hl,BUF_16_043
042848 01 40 00 00 3579*  	ld bc,64
04284C 11 6B 00 00 3580*  	ld de,107
042850 DD 21 C0 1A 3581*  	ld ix,6848
       00          
042855 CD 40 C9 04 3582*  	call vdu_load_img
042859 C9          3583*  	ret
04285A             3584*  
04285A             3585*  ld_16_044:
04285A 21 A4 4A 04 3586*  	ld hl,F16_044
04285E 22 C5 C7 04 3587*  	ld (cur_filename),hl
042862 11 F1 D3 04 3588*  	ld de,filedata
042866 01 00 00 01 3589*  	ld bc,65536
04286A 3E 01       3590*  	ld a,mos_load
04286C 5B CF       3591*  	RST.LIL 08h
04286E 21 BD 01 00 3592*  	ld hl,BUF_16_044
042872 01 16 00 00 3593*  	ld bc,22
042876 11 6B 00 00 3594*  	ld de,107
04287A DD 21 32 09 3595*  	ld ix,2354
       00          
04287F CD 40 C9 04 3596*  	call vdu_load_img
042883 C9          3597*  	ret
042884             3598*  
042884             3599*  ld_16_045:
042884 21 B8 4A 04 3600*  	ld hl,F16_045
042888 22 C5 C7 04 3601*  	ld (cur_filename),hl
04288C 11 F1 D3 04 3602*  	ld de,filedata
042890 01 00 00 01 3603*  	ld bc,65536
042894 3E 01       3604*  	ld a,mos_load
042896 5B CF       3605*  	RST.LIL 08h
042898 21 BE 01 00 3606*  	ld hl,BUF_16_045
04289C 01 16 00 00 3607*  	ld bc,22
0428A0 11 69 00 00 3608*  	ld de,105
0428A4 DD 21 06 09 3609*  	ld ix,2310
       00          
0428A9 CD 40 C9 04 3610*  	call vdu_load_img
0428AD C9          3611*  	ret
0428AE             3612*  
0428AE             3613*  ld_16_046:
0428AE 21 CC 4A 04 3614*  	ld hl,F16_046
0428B2 22 C5 C7 04 3615*  	ld (cur_filename),hl
0428B6 11 F1 D3 04 3616*  	ld de,filedata
0428BA 01 00 00 01 3617*  	ld bc,65536
0428BE 3E 01       3618*  	ld a,mos_load
0428C0 5B CF       3619*  	RST.LIL 08h
0428C2 21 BF 01 00 3620*  	ld hl,BUF_16_046
0428C6 01 40 00 00 3621*  	ld bc,64
0428CA 11 6B 00 00 3622*  	ld de,107
0428CE DD 21 C0 1A 3623*  	ld ix,6848
       00          
0428D3 CD 40 C9 04 3624*  	call vdu_load_img
0428D7 C9          3625*  	ret
0428D8             3626*  
0428D8             3627*  ld_16_048:
0428D8 21 E0 4A 04 3628*  	ld hl,F16_048
0428DC 22 C5 C7 04 3629*  	ld (cur_filename),hl
0428E0 11 F1 D3 04 3630*  	ld de,filedata
0428E4 01 00 00 01 3631*  	ld bc,65536
0428E8 3E 01       3632*  	ld a,mos_load
0428EA 5B CF       3633*  	RST.LIL 08h
0428EC 21 C0 01 00 3634*  	ld hl,BUF_16_048
0428F0 01 6C 00 00 3635*  	ld bc,108
0428F4 11 6B 00 00 3636*  	ld de,107
0428F8 DD 21 24 2D 3637*  	ld ix,11556
       00          
0428FD CD 40 C9 04 3638*  	call vdu_load_img
042901 C9          3639*  	ret
042902             3640*  
042902             3641*  ld_16_050:
042902 21 F4 4A 04 3642*  	ld hl,F16_050
042906 22 C5 C7 04 3643*  	ld (cur_filename),hl
04290A 11 F1 D3 04 3644*  	ld de,filedata
04290E 01 00 00 01 3645*  	ld bc,65536
042912 3E 01       3646*  	ld a,mos_load
042914 5B CF       3647*  	RST.LIL 08h
042916 21 C1 01 00 3648*  	ld hl,BUF_16_050
04291A 01 6A 00 00 3649*  	ld bc,106
04291E 11 A0 00 00 3650*  	ld de,160
042922 DD 21 40 42 3651*  	ld ix,16960
       00          
042927 CD 40 C9 04 3652*  	call vdu_load_img
04292B C9          3653*  	ret
04292C             3654*  
04292C             3655*  ld_16_051:
04292C 21 08 4B 04 3656*  	ld hl,F16_051
042930 22 C5 C7 04 3657*  	ld (cur_filename),hl
042934 11 F1 D3 04 3658*  	ld de,filedata
042938 01 00 00 01 3659*  	ld bc,65536
04293C 3E 01       3660*  	ld a,mos_load
04293E 5B CF       3661*  	RST.LIL 08h
042940 21 C2 01 00 3662*  	ld hl,BUF_16_051
042944 01 6A 00 00 3663*  	ld bc,106
042948 11 A0 00 00 3664*  	ld de,160
04294C DD 21 40 42 3665*  	ld ix,16960
       00          
042951 CD 40 C9 04 3666*  	call vdu_load_img
042955 C9          3667*  	ret
042956             3668*  
042956             3669*  ld_16_052:
042956 21 1C 4B 04 3670*  	ld hl,F16_052
04295A 22 C5 C7 04 3671*  	ld (cur_filename),hl
04295E 11 F1 D3 04 3672*  	ld de,filedata
042962 01 00 00 01 3673*  	ld bc,65536
042966 3E 01       3674*  	ld a,mos_load
042968 5B CF       3675*  	RST.LIL 08h
04296A 21 C3 01 00 3676*  	ld hl,BUF_16_052
04296E 01 40 01 00 3677*  	ld bc,320
042972 11 A0 00 00 3678*  	ld de,160
042976 DD 21 00 C8 3679*  	ld ix,51200
       00          
04297B CD 40 C9 04 3680*  	call vdu_load_img
04297F C9          3681*  	ret
042980             3682*  
042980             3683*  ld_17_000:
042980 21 30 4B 04 3684*  	ld hl,F17_000
042984 22 C5 C7 04 3685*  	ld (cur_filename),hl
042988 11 F1 D3 04 3686*  	ld de,filedata
04298C 01 00 00 01 3687*  	ld bc,65536
042990 3E 01       3688*  	ld a,mos_load
042992 5B CF       3689*  	RST.LIL 08h
042994 21 C4 01 00 3690*  	ld hl,BUF_17_000
042998 01 1D 00 00 3691*  	ld bc,29
04299C 11 23 00 00 3692*  	ld de,35
0429A0 DD 21 F7 03 3693*  	ld ix,1015
       00          
0429A5 CD 40 C9 04 3694*  	call vdu_load_img
0429A9 C9          3695*  	ret
0429AA             3696*  
0429AA             3697*  ld_17_001:
0429AA 21 44 4B 04 3698*  	ld hl,F17_001
0429AE 22 C5 C7 04 3699*  	ld (cur_filename),hl
0429B2 11 F1 D3 04 3700*  	ld de,filedata
0429B6 01 00 00 01 3701*  	ld bc,65536
0429BA 3E 01       3702*  	ld a,mos_load
0429BC 5B CF       3703*  	RST.LIL 08h
0429BE 21 C5 01 00 3704*  	ld hl,BUF_17_001
0429C2 01 17 00 00 3705*  	ld bc,23
0429C6 11 23 00 00 3706*  	ld de,35
0429CA DD 21 25 03 3707*  	ld ix,805
       00          
0429CF CD 40 C9 04 3708*  	call vdu_load_img
0429D3 C9          3709*  	ret
0429D4             3710*  
0429D4             3711*  ld_17_007:
0429D4 21 58 4B 04 3712*  	ld hl,F17_007
0429D8 22 C5 C7 04 3713*  	ld (cur_filename),hl
0429DC 11 F1 D3 04 3714*  	ld de,filedata
0429E0 01 00 00 01 3715*  	ld bc,65536
0429E4 3E 01       3716*  	ld a,mos_load
0429E6 5B CF       3717*  	RST.LIL 08h
0429E8 21 C6 01 00 3718*  	ld hl,BUF_17_007
0429EC 01 1D 00 00 3719*  	ld bc,29
0429F0 11 23 00 00 3720*  	ld de,35
0429F4 DD 21 F7 03 3721*  	ld ix,1015
       00          
0429F9 CD 40 C9 04 3722*  	call vdu_load_img
0429FD C9          3723*  	ret
0429FE             3724*  
0429FE             3725*  ld_17_012:
0429FE 21 6C 4B 04 3726*  	ld hl,F17_012
042A02 22 C5 C7 04 3727*  	ld (cur_filename),hl
042A06 11 F1 D3 04 3728*  	ld de,filedata
042A0A 01 00 00 01 3729*  	ld bc,65536
042A0E 3E 01       3730*  	ld a,mos_load
042A10 5B CF       3731*  	RST.LIL 08h
042A12 21 C7 01 00 3732*  	ld hl,BUF_17_012
042A16 01 24 00 00 3733*  	ld bc,36
042A1A 11 23 00 00 3734*  	ld de,35
042A1E DD 21 EC 04 3735*  	ld ix,1260
       00          
042A23 CD 40 C9 04 3736*  	call vdu_load_img
042A27 C9          3737*  	ret
042A28             3738*  
042A28             3739*  ld_17_017:
042A28 21 80 4B 04 3740*  	ld hl,F17_017
042A2C 22 C5 C7 04 3741*  	ld (cur_filename),hl
042A30 11 F1 D3 04 3742*  	ld de,filedata
042A34 01 00 00 01 3743*  	ld bc,65536
042A38 3E 01       3744*  	ld a,mos_load
042A3A 5B CF       3745*  	RST.LIL 08h
042A3C 21 C8 01 00 3746*  	ld hl,BUF_17_017
042A40 01 23 00 00 3747*  	ld bc,35
042A44 11 2D 00 00 3748*  	ld de,45
042A48 DD 21 27 06 3749*  	ld ix,1575
       00          
042A4D CD 40 C9 04 3750*  	call vdu_load_img
042A51 C9          3751*  	ret
042A52             3752*  
042A52             3753*  ld_17_018:
042A52 21 94 4B 04 3754*  	ld hl,F17_018
042A56 22 C5 C7 04 3755*  	ld (cur_filename),hl
042A5A 11 F1 D3 04 3756*  	ld de,filedata
042A5E 01 00 00 01 3757*  	ld bc,65536
042A62 3E 01       3758*  	ld a,mos_load
042A64 5B CF       3759*  	RST.LIL 08h
042A66 21 C9 01 00 3760*  	ld hl,BUF_17_018
042A6A 01 1A 00 00 3761*  	ld bc,26
042A6E 11 2D 00 00 3762*  	ld de,45
042A72 DD 21 92 04 3763*  	ld ix,1170
       00          
042A77 CD 40 C9 04 3764*  	call vdu_load_img
042A7B C9          3765*  	ret
042A7C             3766*  
042A7C             3767*  ld_17_019:
042A7C 21 A8 4B 04 3768*  	ld hl,F17_019
042A80 22 C5 C7 04 3769*  	ld (cur_filename),hl
042A84 11 F1 D3 04 3770*  	ld de,filedata
042A88 01 00 00 01 3771*  	ld bc,65536
042A8C 3E 01       3772*  	ld a,mos_load
042A8E 5B CF       3773*  	RST.LIL 08h
042A90 21 CA 01 00 3774*  	ld hl,BUF_17_019
042A94 01 0F 00 00 3775*  	ld bc,15
042A98 11 2D 00 00 3776*  	ld de,45
042A9C DD 21 A3 02 3777*  	ld ix,675
       00          
042AA1 CD 40 C9 04 3778*  	call vdu_load_img
042AA5 C9          3779*  	ret
042AA6             3780*  
042AA6             3781*  ld_17_020:
042AA6 21 BC 4B 04 3782*  	ld hl,F17_020
042AAA 22 C5 C7 04 3783*  	ld (cur_filename),hl
042AAE 11 F1 D3 04 3784*  	ld de,filedata
042AB2 01 00 00 01 3785*  	ld bc,65536
042AB6 3E 01       3786*  	ld a,mos_load
042AB8 5B CF       3787*  	RST.LIL 08h
042ABA 21 CB 01 00 3788*  	ld hl,BUF_17_020
042ABE 01 05 00 00 3789*  	ld bc,5
042AC2 11 2D 00 00 3790*  	ld de,45
042AC6 DD 21 E1 00 3791*  	ld ix,225
       00          
042ACB CD 40 C9 04 3792*  	call vdu_load_img
042ACF C9          3793*  	ret
042AD0             3794*  
042AD0             3795*  ld_17_021:
042AD0 21 D0 4B 04 3796*  	ld hl,F17_021
042AD4 22 C5 C7 04 3797*  	ld (cur_filename),hl
042AD8 11 F1 D3 04 3798*  	ld de,filedata
042ADC 01 00 00 01 3799*  	ld bc,65536
042AE0 3E 01       3800*  	ld a,mos_load
042AE2 5B CF       3801*  	RST.LIL 08h
042AE4 21 CC 01 00 3802*  	ld hl,BUF_17_021
042AE8 01 05 00 00 3803*  	ld bc,5
042AEC 11 2B 00 00 3804*  	ld de,43
042AF0 DD 21 D7 00 3805*  	ld ix,215
       00          
042AF5 CD 40 C9 04 3806*  	call vdu_load_img
042AF9 C9          3807*  	ret
042AFA             3808*  
042AFA             3809*  ld_17_022:
042AFA 21 E4 4B 04 3810*  	ld hl,F17_022
042AFE 22 C5 C7 04 3811*  	ld (cur_filename),hl
042B02 11 F1 D3 04 3812*  	ld de,filedata
042B06 01 00 00 01 3813*  	ld bc,65536
042B0A 3E 01       3814*  	ld a,mos_load
042B0C 5B CF       3815*  	RST.LIL 08h
042B0E 21 CD 01 00 3816*  	ld hl,BUF_17_022
042B12 01 0F 00 00 3817*  	ld bc,15
042B16 11 2D 00 00 3818*  	ld de,45
042B1A DD 21 A3 02 3819*  	ld ix,675
       00          
042B1F CD 40 C9 04 3820*  	call vdu_load_img
042B23 C9          3821*  	ret
042B24             3822*  
042B24             3823*  ld_17_023:
042B24 21 F8 4B 04 3824*  	ld hl,F17_023
042B28 22 C5 C7 04 3825*  	ld (cur_filename),hl
042B2C 11 F1 D3 04 3826*  	ld de,filedata
042B30 01 00 00 01 3827*  	ld bc,65536
042B34 3E 01       3828*  	ld a,mos_load
042B36 5B CF       3829*  	RST.LIL 08h
042B38 21 CE 01 00 3830*  	ld hl,BUF_17_023
042B3C 01 1A 00 00 3831*  	ld bc,26
042B40 11 2D 00 00 3832*  	ld de,45
042B44 DD 21 92 04 3833*  	ld ix,1170
       00          
042B49 CD 40 C9 04 3834*  	call vdu_load_img
042B4D C9          3835*  	ret
042B4E             3836*  
042B4E             3837*  ld_17_024:
042B4E 21 0C 4C 04 3838*  	ld hl,F17_024
042B52 22 C5 C7 04 3839*  	ld (cur_filename),hl
042B56 11 F1 D3 04 3840*  	ld de,filedata
042B5A 01 00 00 01 3841*  	ld bc,65536
042B5E 3E 01       3842*  	ld a,mos_load
042B60 5B CF       3843*  	RST.LIL 08h
042B62 21 CF 01 00 3844*  	ld hl,BUF_17_024
042B66 01 23 00 00 3845*  	ld bc,35
042B6A 11 2D 00 00 3846*  	ld de,45
042B6E DD 21 27 06 3847*  	ld ix,1575
       00          
042B73 CD 40 C9 04 3848*  	call vdu_load_img
042B77 C9          3849*  	ret
042B78             3850*  
042B78             3851*  ld_17_028:
042B78 21 20 4C 04 3852*  	ld hl,F17_028
042B7C 22 C5 C7 04 3853*  	ld (cur_filename),hl
042B80 11 F1 D3 04 3854*  	ld de,filedata
042B84 01 00 00 01 3855*  	ld bc,65536
042B88 3E 01       3856*  	ld a,mos_load
042B8A 5B CF       3857*  	RST.LIL 08h
042B8C 21 D0 01 00 3858*  	ld hl,BUF_17_028
042B90 01 2E 00 00 3859*  	ld bc,46
042B94 11 2D 00 00 3860*  	ld de,45
042B98 DD 21 16 08 3861*  	ld ix,2070
       00          
042B9D CD 40 C9 04 3862*  	call vdu_load_img
042BA1 C9          3863*  	ret
042BA2             3864*  
042BA2             3865*  ld_17_032:
042BA2 21 34 4C 04 3866*  	ld hl,F17_032
042BA6 22 C5 C7 04 3867*  	ld (cur_filename),hl
042BAA 11 F1 D3 04 3868*  	ld de,filedata
042BAE 01 00 00 01 3869*  	ld bc,65536
042BB2 3E 01       3870*  	ld a,mos_load
042BB4 5B CF       3871*  	RST.LIL 08h
042BB6 21 D1 01 00 3872*  	ld hl,BUF_17_032
042BBA 01 2D 00 00 3873*  	ld bc,45
042BBE 11 3F 00 00 3874*  	ld de,63
042BC2 DD 21 13 0B 3875*  	ld ix,2835
       00          
042BC7 CD 40 C9 04 3876*  	call vdu_load_img
042BCB C9          3877*  	ret
042BCC             3878*  
042BCC             3879*  ld_17_033:
042BCC 21 48 4C 04 3880*  	ld hl,F17_033
042BD0 22 C5 C7 04 3881*  	ld (cur_filename),hl
042BD4 11 F1 D3 04 3882*  	ld de,filedata
042BD8 01 00 00 01 3883*  	ld bc,65536
042BDC 3E 01       3884*  	ld a,mos_load
042BDE 5B CF       3885*  	RST.LIL 08h
042BE0 21 D2 01 00 3886*  	ld hl,BUF_17_033
042BE4 01 1B 00 00 3887*  	ld bc,27
042BE8 11 3F 00 00 3888*  	ld de,63
042BEC DD 21 A5 06 3889*  	ld ix,1701
       00          
042BF1 CD 40 C9 04 3890*  	call vdu_load_img
042BF5 C9          3891*  	ret
042BF6             3892*  
042BF6             3893*  ld_17_034:
042BF6 21 5C 4C 04 3894*  	ld hl,F17_034
042BFA 22 C5 C7 04 3895*  	ld (cur_filename),hl
042BFE 11 F1 D3 04 3896*  	ld de,filedata
042C02 01 00 00 01 3897*  	ld bc,65536
042C06 3E 01       3898*  	ld a,mos_load
042C08 5B CF       3899*  	RST.LIL 08h
042C0A 21 D3 01 00 3900*  	ld hl,BUF_17_034
042C0E 01 09 00 00 3901*  	ld bc,9
042C12 11 3F 00 00 3902*  	ld de,63
042C16 DD 21 37 02 3903*  	ld ix,567
       00          
042C1B CD 40 C9 04 3904*  	call vdu_load_img
042C1F C9          3905*  	ret
042C20             3906*  
042C20             3907*  ld_17_035:
042C20 21 70 4C 04 3908*  	ld hl,F17_035
042C24 22 C5 C7 04 3909*  	ld (cur_filename),hl
042C28 11 F1 D3 04 3910*  	ld de,filedata
042C2C 01 00 00 01 3911*  	ld bc,65536
042C30 3E 01       3912*  	ld a,mos_load
042C32 5B CF       3913*  	RST.LIL 08h
042C34 21 D4 01 00 3914*  	ld hl,BUF_17_035
042C38 01 09 00 00 3915*  	ld bc,9
042C3C 11 3D 00 00 3916*  	ld de,61
042C40 DD 21 25 02 3917*  	ld ix,549
       00          
042C45 CD 40 C9 04 3918*  	call vdu_load_img
042C49 C9          3919*  	ret
042C4A             3920*  
042C4A             3921*  ld_17_036:
042C4A 21 84 4C 04 3922*  	ld hl,F17_036
042C4E 22 C5 C7 04 3923*  	ld (cur_filename),hl
042C52 11 F1 D3 04 3924*  	ld de,filedata
042C56 01 00 00 01 3925*  	ld bc,65536
042C5A 3E 01       3926*  	ld a,mos_load
042C5C 5B CF       3927*  	RST.LIL 08h
042C5E 21 D5 01 00 3928*  	ld hl,BUF_17_036
042C62 01 1B 00 00 3929*  	ld bc,27
042C66 11 3F 00 00 3930*  	ld de,63
042C6A DD 21 A5 06 3931*  	ld ix,1701
       00          
042C6F CD 40 C9 04 3932*  	call vdu_load_img
042C73 C9          3933*  	ret
042C74             3934*  
042C74             3935*  ld_17_037:
042C74 21 98 4C 04 3936*  	ld hl,F17_037
042C78 22 C5 C7 04 3937*  	ld (cur_filename),hl
042C7C 11 F1 D3 04 3938*  	ld de,filedata
042C80 01 00 00 01 3939*  	ld bc,65536
042C84 3E 01       3940*  	ld a,mos_load
042C86 5B CF       3941*  	RST.LIL 08h
042C88 21 D6 01 00 3942*  	ld hl,BUF_17_037
042C8C 01 2D 00 00 3943*  	ld bc,45
042C90 11 3F 00 00 3944*  	ld de,63
042C94 DD 21 13 0B 3945*  	ld ix,2835
       00          
042C99 CD 40 C9 04 3946*  	call vdu_load_img
042C9D C9          3947*  	ret
042C9E             3948*  
042C9E             3949*  ld_17_040:
042C9E 21 AC 4C 04 3950*  	ld hl,F17_040
042CA2 22 C5 C7 04 3951*  	ld (cur_filename),hl
042CA6 11 F1 D3 04 3952*  	ld de,filedata
042CAA 01 00 00 01 3953*  	ld bc,65536
042CAE 3E 01       3954*  	ld a,mos_load
042CB0 5B CF       3955*  	RST.LIL 08h
042CB2 21 D7 01 00 3956*  	ld hl,BUF_17_040
042CB6 01 40 00 00 3957*  	ld bc,64
042CBA 11 3F 00 00 3958*  	ld de,63
042CBE DD 21 C0 0F 3959*  	ld ix,4032
       00          
042CC3 CD 40 C9 04 3960*  	call vdu_load_img
042CC7 C9          3961*  	ret
042CC8             3962*  
042CC8             3963*  ld_17_043:
042CC8 21 C0 4C 04 3964*  	ld hl,F17_043
042CCC 22 C5 C7 04 3965*  	ld (cur_filename),hl
042CD0 11 F1 D3 04 3966*  	ld de,filedata
042CD4 01 00 00 01 3967*  	ld bc,65536
042CD8 3E 01       3968*  	ld a,mos_load
042CDA 5B CF       3969*  	RST.LIL 08h
042CDC 21 D8 01 00 3970*  	ld hl,BUF_17_043
042CE0 01 40 00 00 3971*  	ld bc,64
042CE4 11 6B 00 00 3972*  	ld de,107
042CE8 DD 21 C0 1A 3973*  	ld ix,6848
       00          
042CED CD 40 C9 04 3974*  	call vdu_load_img
042CF1 C9          3975*  	ret
042CF2             3976*  
042CF2             3977*  ld_17_044:
042CF2 21 D4 4C 04 3978*  	ld hl,F17_044
042CF6 22 C5 C7 04 3979*  	ld (cur_filename),hl
042CFA 11 F1 D3 04 3980*  	ld de,filedata
042CFE 01 00 00 01 3981*  	ld bc,65536
042D02 3E 01       3982*  	ld a,mos_load
042D04 5B CF       3983*  	RST.LIL 08h
042D06 21 D9 01 00 3984*  	ld hl,BUF_17_044
042D0A 01 16 00 00 3985*  	ld bc,22
042D0E 11 6B 00 00 3986*  	ld de,107
042D12 DD 21 32 09 3987*  	ld ix,2354
       00          
042D17 CD 40 C9 04 3988*  	call vdu_load_img
042D1B C9          3989*  	ret
042D1C             3990*  
042D1C             3991*  ld_17_045:
042D1C 21 E8 4C 04 3992*  	ld hl,F17_045
042D20 22 C5 C7 04 3993*  	ld (cur_filename),hl
042D24 11 F1 D3 04 3994*  	ld de,filedata
042D28 01 00 00 01 3995*  	ld bc,65536
042D2C 3E 01       3996*  	ld a,mos_load
042D2E 5B CF       3997*  	RST.LIL 08h
042D30 21 DA 01 00 3998*  	ld hl,BUF_17_045
042D34 01 16 00 00 3999*  	ld bc,22
042D38 11 69 00 00 4000*  	ld de,105
042D3C DD 21 06 09 4001*  	ld ix,2310
       00          
042D41 CD 40 C9 04 4002*  	call vdu_load_img
042D45 C9          4003*  	ret
042D46             4004*  
042D46             4005*  ld_17_046:
042D46 21 FC 4C 04 4006*  	ld hl,F17_046
042D4A 22 C5 C7 04 4007*  	ld (cur_filename),hl
042D4E 11 F1 D3 04 4008*  	ld de,filedata
042D52 01 00 00 01 4009*  	ld bc,65536
042D56 3E 01       4010*  	ld a,mos_load
042D58 5B CF       4011*  	RST.LIL 08h
042D5A 21 DB 01 00 4012*  	ld hl,BUF_17_046
042D5E 01 40 00 00 4013*  	ld bc,64
042D62 11 6B 00 00 4014*  	ld de,107
042D66 DD 21 C0 1A 4015*  	ld ix,6848
       00          
042D6B CD 40 C9 04 4016*  	call vdu_load_img
042D6F C9          4017*  	ret
042D70             4018*  
042D70             4019*  ld_17_048:
042D70 21 10 4D 04 4020*  	ld hl,F17_048
042D74 22 C5 C7 04 4021*  	ld (cur_filename),hl
042D78 11 F1 D3 04 4022*  	ld de,filedata
042D7C 01 00 00 01 4023*  	ld bc,65536
042D80 3E 01       4024*  	ld a,mos_load
042D82 5B CF       4025*  	RST.LIL 08h
042D84 21 DC 01 00 4026*  	ld hl,BUF_17_048
042D88 01 6C 00 00 4027*  	ld bc,108
042D8C 11 6B 00 00 4028*  	ld de,107
042D90 DD 21 24 2D 4029*  	ld ix,11556
       00          
042D95 CD 40 C9 04 4030*  	call vdu_load_img
042D99 C9          4031*  	ret
042D9A             4032*  
042D9A             4033*  ld_17_050:
042D9A 21 24 4D 04 4034*  	ld hl,F17_050
042D9E 22 C5 C7 04 4035*  	ld (cur_filename),hl
042DA2 11 F1 D3 04 4036*  	ld de,filedata
042DA6 01 00 00 01 4037*  	ld bc,65536
042DAA 3E 01       4038*  	ld a,mos_load
042DAC 5B CF       4039*  	RST.LIL 08h
042DAE 21 DD 01 00 4040*  	ld hl,BUF_17_050
042DB2 01 6A 00 00 4041*  	ld bc,106
042DB6 11 A0 00 00 4042*  	ld de,160
042DBA DD 21 40 42 4043*  	ld ix,16960
       00          
042DBF CD 40 C9 04 4044*  	call vdu_load_img
042DC3 C9          4045*  	ret
042DC4             4046*  
042DC4             4047*  ld_17_051:
042DC4 21 38 4D 04 4048*  	ld hl,F17_051
042DC8 22 C5 C7 04 4049*  	ld (cur_filename),hl
042DCC 11 F1 D3 04 4050*  	ld de,filedata
042DD0 01 00 00 01 4051*  	ld bc,65536
042DD4 3E 01       4052*  	ld a,mos_load
042DD6 5B CF       4053*  	RST.LIL 08h
042DD8 21 DE 01 00 4054*  	ld hl,BUF_17_051
042DDC 01 6A 00 00 4055*  	ld bc,106
042DE0 11 A0 00 00 4056*  	ld de,160
042DE4 DD 21 40 42 4057*  	ld ix,16960
       00          
042DE9 CD 40 C9 04 4058*  	call vdu_load_img
042DED C9          4059*  	ret
042DEE             4060*  
042DEE             4061*  ld_17_052:
042DEE 21 4C 4D 04 4062*  	ld hl,F17_052
042DF2 22 C5 C7 04 4063*  	ld (cur_filename),hl
042DF6 11 F1 D3 04 4064*  	ld de,filedata
042DFA 01 00 00 01 4065*  	ld bc,65536
042DFE 3E 01       4066*  	ld a,mos_load
042E00 5B CF       4067*  	RST.LIL 08h
042E02 21 DF 01 00 4068*  	ld hl,BUF_17_052
042E06 01 40 01 00 4069*  	ld bc,320
042E0A 11 A0 00 00 4070*  	ld de,160
042E0E DD 21 00 C8 4071*  	ld ix,51200
       00          
042E13 CD 40 C9 04 4072*  	call vdu_load_img
042E17 C9          4073*  	ret
042E18             4074*  
042E18             4075*  ld_57_000:
042E18 21 60 4D 04 4076*  	ld hl,F57_000
042E1C 22 C5 C7 04 4077*  	ld (cur_filename),hl
042E20 11 F1 D3 04 4078*  	ld de,filedata
042E24 01 00 00 01 4079*  	ld bc,65536
042E28 3E 01       4080*  	ld a,mos_load
042E2A 5B CF       4081*  	RST.LIL 08h
042E2C 21 E0 01 00 4082*  	ld hl,BUF_57_000
042E30 01 1D 00 00 4083*  	ld bc,29
042E34 11 23 00 00 4084*  	ld de,35
042E38 DD 21 F7 03 4085*  	ld ix,1015
       00          
042E3D CD 40 C9 04 4086*  	call vdu_load_img
042E41 C9          4087*  	ret
042E42             4088*  
042E42             4089*  ld_57_001:
042E42 21 74 4D 04 4090*  	ld hl,F57_001
042E46 22 C5 C7 04 4091*  	ld (cur_filename),hl
042E4A 11 F1 D3 04 4092*  	ld de,filedata
042E4E 01 00 00 01 4093*  	ld bc,65536
042E52 3E 01       4094*  	ld a,mos_load
042E54 5B CF       4095*  	RST.LIL 08h
042E56 21 E1 01 00 4096*  	ld hl,BUF_57_001
042E5A 01 17 00 00 4097*  	ld bc,23
042E5E 11 23 00 00 4098*  	ld de,35
042E62 DD 21 25 03 4099*  	ld ix,805
       00          
042E67 CD 40 C9 04 4100*  	call vdu_load_img
042E6B C9          4101*  	ret
042E6C             4102*  
042E6C             4103*  ld_57_007:
042E6C 21 88 4D 04 4104*  	ld hl,F57_007
042E70 22 C5 C7 04 4105*  	ld (cur_filename),hl
042E74 11 F1 D3 04 4106*  	ld de,filedata
042E78 01 00 00 01 4107*  	ld bc,65536
042E7C 3E 01       4108*  	ld a,mos_load
042E7E 5B CF       4109*  	RST.LIL 08h
042E80 21 E2 01 00 4110*  	ld hl,BUF_57_007
042E84 01 1D 00 00 4111*  	ld bc,29
042E88 11 23 00 00 4112*  	ld de,35
042E8C DD 21 F7 03 4113*  	ld ix,1015
       00          
042E91 CD 40 C9 04 4114*  	call vdu_load_img
042E95 C9          4115*  	ret
042E96             4116*  
042E96             4117*  ld_57_012:
042E96 21 9C 4D 04 4118*  	ld hl,F57_012
042E9A 22 C5 C7 04 4119*  	ld (cur_filename),hl
042E9E 11 F1 D3 04 4120*  	ld de,filedata
042EA2 01 00 00 01 4121*  	ld bc,65536
042EA6 3E 01       4122*  	ld a,mos_load
042EA8 5B CF       4123*  	RST.LIL 08h
042EAA 21 E3 01 00 4124*  	ld hl,BUF_57_012
042EAE 01 24 00 00 4125*  	ld bc,36
042EB2 11 23 00 00 4126*  	ld de,35
042EB6 DD 21 EC 04 4127*  	ld ix,1260
       00          
042EBB CD 40 C9 04 4128*  	call vdu_load_img
042EBF C9          4129*  	ret
042EC0             4130*  
042EC0             4131*  ld_57_017:
042EC0 21 B0 4D 04 4132*  	ld hl,F57_017
042EC4 22 C5 C7 04 4133*  	ld (cur_filename),hl
042EC8 11 F1 D3 04 4134*  	ld de,filedata
042ECC 01 00 00 01 4135*  	ld bc,65536
042ED0 3E 01       4136*  	ld a,mos_load
042ED2 5B CF       4137*  	RST.LIL 08h
042ED4 21 E4 01 00 4138*  	ld hl,BUF_57_017
042ED8 01 23 00 00 4139*  	ld bc,35
042EDC 11 2D 00 00 4140*  	ld de,45
042EE0 DD 21 27 06 4141*  	ld ix,1575
       00          
042EE5 CD 40 C9 04 4142*  	call vdu_load_img
042EE9 C9          4143*  	ret
042EEA             4144*  
042EEA             4145*  ld_57_018:
042EEA 21 C4 4D 04 4146*  	ld hl,F57_018
042EEE 22 C5 C7 04 4147*  	ld (cur_filename),hl
042EF2 11 F1 D3 04 4148*  	ld de,filedata
042EF6 01 00 00 01 4149*  	ld bc,65536
042EFA 3E 01       4150*  	ld a,mos_load
042EFC 5B CF       4151*  	RST.LIL 08h
042EFE 21 E5 01 00 4152*  	ld hl,BUF_57_018
042F02 01 1A 00 00 4153*  	ld bc,26
042F06 11 2D 00 00 4154*  	ld de,45
042F0A DD 21 92 04 4155*  	ld ix,1170
       00          
042F0F CD 40 C9 04 4156*  	call vdu_load_img
042F13 C9          4157*  	ret
042F14             4158*  
042F14             4159*  ld_57_019:
042F14 21 D8 4D 04 4160*  	ld hl,F57_019
042F18 22 C5 C7 04 4161*  	ld (cur_filename),hl
042F1C 11 F1 D3 04 4162*  	ld de,filedata
042F20 01 00 00 01 4163*  	ld bc,65536
042F24 3E 01       4164*  	ld a,mos_load
042F26 5B CF       4165*  	RST.LIL 08h
042F28 21 E6 01 00 4166*  	ld hl,BUF_57_019
042F2C 01 0F 00 00 4167*  	ld bc,15
042F30 11 2D 00 00 4168*  	ld de,45
042F34 DD 21 A3 02 4169*  	ld ix,675
       00          
042F39 CD 40 C9 04 4170*  	call vdu_load_img
042F3D C9          4171*  	ret
042F3E             4172*  
042F3E             4173*  ld_57_020:
042F3E 21 EC 4D 04 4174*  	ld hl,F57_020
042F42 22 C5 C7 04 4175*  	ld (cur_filename),hl
042F46 11 F1 D3 04 4176*  	ld de,filedata
042F4A 01 00 00 01 4177*  	ld bc,65536
042F4E 3E 01       4178*  	ld a,mos_load
042F50 5B CF       4179*  	RST.LIL 08h
042F52 21 E7 01 00 4180*  	ld hl,BUF_57_020
042F56 01 05 00 00 4181*  	ld bc,5
042F5A 11 2D 00 00 4182*  	ld de,45
042F5E DD 21 E1 00 4183*  	ld ix,225
       00          
042F63 CD 40 C9 04 4184*  	call vdu_load_img
042F67 C9          4185*  	ret
042F68             4186*  
042F68             4187*  ld_57_021:
042F68 21 00 4E 04 4188*  	ld hl,F57_021
042F6C 22 C5 C7 04 4189*  	ld (cur_filename),hl
042F70 11 F1 D3 04 4190*  	ld de,filedata
042F74 01 00 00 01 4191*  	ld bc,65536
042F78 3E 01       4192*  	ld a,mos_load
042F7A 5B CF       4193*  	RST.LIL 08h
042F7C 21 E8 01 00 4194*  	ld hl,BUF_57_021
042F80 01 05 00 00 4195*  	ld bc,5
042F84 11 2B 00 00 4196*  	ld de,43
042F88 DD 21 D7 00 4197*  	ld ix,215
       00          
042F8D CD 40 C9 04 4198*  	call vdu_load_img
042F91 C9          4199*  	ret
042F92             4200*  
042F92             4201*  ld_57_022:
042F92 21 14 4E 04 4202*  	ld hl,F57_022
042F96 22 C5 C7 04 4203*  	ld (cur_filename),hl
042F9A 11 F1 D3 04 4204*  	ld de,filedata
042F9E 01 00 00 01 4205*  	ld bc,65536
042FA2 3E 01       4206*  	ld a,mos_load
042FA4 5B CF       4207*  	RST.LIL 08h
042FA6 21 E9 01 00 4208*  	ld hl,BUF_57_022
042FAA 01 0F 00 00 4209*  	ld bc,15
042FAE 11 2D 00 00 4210*  	ld de,45
042FB2 DD 21 A3 02 4211*  	ld ix,675
       00          
042FB7 CD 40 C9 04 4212*  	call vdu_load_img
042FBB C9          4213*  	ret
042FBC             4214*  
042FBC             4215*  ld_57_023:
042FBC 21 28 4E 04 4216*  	ld hl,F57_023
042FC0 22 C5 C7 04 4217*  	ld (cur_filename),hl
042FC4 11 F1 D3 04 4218*  	ld de,filedata
042FC8 01 00 00 01 4219*  	ld bc,65536
042FCC 3E 01       4220*  	ld a,mos_load
042FCE 5B CF       4221*  	RST.LIL 08h
042FD0 21 EA 01 00 4222*  	ld hl,BUF_57_023
042FD4 01 1A 00 00 4223*  	ld bc,26
042FD8 11 2D 00 00 4224*  	ld de,45
042FDC DD 21 92 04 4225*  	ld ix,1170
       00          
042FE1 CD 40 C9 04 4226*  	call vdu_load_img
042FE5 C9          4227*  	ret
042FE6             4228*  
042FE6             4229*  ld_57_024:
042FE6 21 3C 4E 04 4230*  	ld hl,F57_024
042FEA 22 C5 C7 04 4231*  	ld (cur_filename),hl
042FEE 11 F1 D3 04 4232*  	ld de,filedata
042FF2 01 00 00 01 4233*  	ld bc,65536
042FF6 3E 01       4234*  	ld a,mos_load
042FF8 5B CF       4235*  	RST.LIL 08h
042FFA 21 EB 01 00 4236*  	ld hl,BUF_57_024
042FFE 01 23 00 00 4237*  	ld bc,35
043002 11 2D 00 00 4238*  	ld de,45
043006 DD 21 27 06 4239*  	ld ix,1575
       00          
04300B CD 40 C9 04 4240*  	call vdu_load_img
04300F C9          4241*  	ret
043010             4242*  
043010             4243*  ld_57_028:
043010 21 50 4E 04 4244*  	ld hl,F57_028
043014 22 C5 C7 04 4245*  	ld (cur_filename),hl
043018 11 F1 D3 04 4246*  	ld de,filedata
04301C 01 00 00 01 4247*  	ld bc,65536
043020 3E 01       4248*  	ld a,mos_load
043022 5B CF       4249*  	RST.LIL 08h
043024 21 EC 01 00 4250*  	ld hl,BUF_57_028
043028 01 2E 00 00 4251*  	ld bc,46
04302C 11 2D 00 00 4252*  	ld de,45
043030 DD 21 16 08 4253*  	ld ix,2070
       00          
043035 CD 40 C9 04 4254*  	call vdu_load_img
043039 C9          4255*  	ret
04303A             4256*  
04303A             4257*  ld_57_032:
04303A 21 64 4E 04 4258*  	ld hl,F57_032
04303E 22 C5 C7 04 4259*  	ld (cur_filename),hl
043042 11 F1 D3 04 4260*  	ld de,filedata
043046 01 00 00 01 4261*  	ld bc,65536
04304A 3E 01       4262*  	ld a,mos_load
04304C 5B CF       4263*  	RST.LIL 08h
04304E 21 ED 01 00 4264*  	ld hl,BUF_57_032
043052 01 2D 00 00 4265*  	ld bc,45
043056 11 3F 00 00 4266*  	ld de,63
04305A DD 21 13 0B 4267*  	ld ix,2835
       00          
04305F CD 40 C9 04 4268*  	call vdu_load_img
043063 C9          4269*  	ret
043064             4270*  
043064             4271*  ld_57_033:
043064 21 78 4E 04 4272*  	ld hl,F57_033
043068 22 C5 C7 04 4273*  	ld (cur_filename),hl
04306C 11 F1 D3 04 4274*  	ld de,filedata
043070 01 00 00 01 4275*  	ld bc,65536
043074 3E 01       4276*  	ld a,mos_load
043076 5B CF       4277*  	RST.LIL 08h
043078 21 EE 01 00 4278*  	ld hl,BUF_57_033
04307C 01 1B 00 00 4279*  	ld bc,27
043080 11 3F 00 00 4280*  	ld de,63
043084 DD 21 A5 06 4281*  	ld ix,1701
       00          
043089 CD 40 C9 04 4282*  	call vdu_load_img
04308D C9          4283*  	ret
04308E             4284*  
04308E             4285*  ld_57_034:
04308E 21 8C 4E 04 4286*  	ld hl,F57_034
043092 22 C5 C7 04 4287*  	ld (cur_filename),hl
043096 11 F1 D3 04 4288*  	ld de,filedata
04309A 01 00 00 01 4289*  	ld bc,65536
04309E 3E 01       4290*  	ld a,mos_load
0430A0 5B CF       4291*  	RST.LIL 08h
0430A2 21 EF 01 00 4292*  	ld hl,BUF_57_034
0430A6 01 09 00 00 4293*  	ld bc,9
0430AA 11 3F 00 00 4294*  	ld de,63
0430AE DD 21 37 02 4295*  	ld ix,567
       00          
0430B3 CD 40 C9 04 4296*  	call vdu_load_img
0430B7 C9          4297*  	ret
0430B8             4298*  
0430B8             4299*  ld_57_035:
0430B8 21 A0 4E 04 4300*  	ld hl,F57_035
0430BC 22 C5 C7 04 4301*  	ld (cur_filename),hl
0430C0 11 F1 D3 04 4302*  	ld de,filedata
0430C4 01 00 00 01 4303*  	ld bc,65536
0430C8 3E 01       4304*  	ld a,mos_load
0430CA 5B CF       4305*  	RST.LIL 08h
0430CC 21 F0 01 00 4306*  	ld hl,BUF_57_035
0430D0 01 09 00 00 4307*  	ld bc,9
0430D4 11 3D 00 00 4308*  	ld de,61
0430D8 DD 21 25 02 4309*  	ld ix,549
       00          
0430DD CD 40 C9 04 4310*  	call vdu_load_img
0430E1 C9          4311*  	ret
0430E2             4312*  
0430E2             4313*  ld_57_036:
0430E2 21 B4 4E 04 4314*  	ld hl,F57_036
0430E6 22 C5 C7 04 4315*  	ld (cur_filename),hl
0430EA 11 F1 D3 04 4316*  	ld de,filedata
0430EE 01 00 00 01 4317*  	ld bc,65536
0430F2 3E 01       4318*  	ld a,mos_load
0430F4 5B CF       4319*  	RST.LIL 08h
0430F6 21 F1 01 00 4320*  	ld hl,BUF_57_036
0430FA 01 1B 00 00 4321*  	ld bc,27
0430FE 11 3F 00 00 4322*  	ld de,63
043102 DD 21 A5 06 4323*  	ld ix,1701
       00          
043107 CD 40 C9 04 4324*  	call vdu_load_img
04310B C9          4325*  	ret
04310C             4326*  
04310C             4327*  ld_57_037:
04310C 21 C8 4E 04 4328*  	ld hl,F57_037
043110 22 C5 C7 04 4329*  	ld (cur_filename),hl
043114 11 F1 D3 04 4330*  	ld de,filedata
043118 01 00 00 01 4331*  	ld bc,65536
04311C 3E 01       4332*  	ld a,mos_load
04311E 5B CF       4333*  	RST.LIL 08h
043120 21 F2 01 00 4334*  	ld hl,BUF_57_037
043124 01 2D 00 00 4335*  	ld bc,45
043128 11 3F 00 00 4336*  	ld de,63
04312C DD 21 13 0B 4337*  	ld ix,2835
       00          
043131 CD 40 C9 04 4338*  	call vdu_load_img
043135 C9          4339*  	ret
043136             4340*  
043136             4341*  ld_57_040:
043136 21 DC 4E 04 4342*  	ld hl,F57_040
04313A 22 C5 C7 04 4343*  	ld (cur_filename),hl
04313E 11 F1 D3 04 4344*  	ld de,filedata
043142 01 00 00 01 4345*  	ld bc,65536
043146 3E 01       4346*  	ld a,mos_load
043148 5B CF       4347*  	RST.LIL 08h
04314A 21 F3 01 00 4348*  	ld hl,BUF_57_040
04314E 01 40 00 00 4349*  	ld bc,64
043152 11 3F 00 00 4350*  	ld de,63
043156 DD 21 C0 0F 4351*  	ld ix,4032
       00          
04315B CD 40 C9 04 4352*  	call vdu_load_img
04315F C9          4353*  	ret
043160             4354*  
043160             4355*  ld_57_043:
043160 21 F0 4E 04 4356*  	ld hl,F57_043
043164 22 C5 C7 04 4357*  	ld (cur_filename),hl
043168 11 F1 D3 04 4358*  	ld de,filedata
04316C 01 00 00 01 4359*  	ld bc,65536
043170 3E 01       4360*  	ld a,mos_load
043172 5B CF       4361*  	RST.LIL 08h
043174 21 F4 01 00 4362*  	ld hl,BUF_57_043
043178 01 40 00 00 4363*  	ld bc,64
04317C 11 6B 00 00 4364*  	ld de,107
043180 DD 21 C0 1A 4365*  	ld ix,6848
       00          
043185 CD 40 C9 04 4366*  	call vdu_load_img
043189 C9          4367*  	ret
04318A             4368*  
04318A             4369*  ld_57_044:
04318A 21 04 4F 04 4370*  	ld hl,F57_044
04318E 22 C5 C7 04 4371*  	ld (cur_filename),hl
043192 11 F1 D3 04 4372*  	ld de,filedata
043196 01 00 00 01 4373*  	ld bc,65536
04319A 3E 01       4374*  	ld a,mos_load
04319C 5B CF       4375*  	RST.LIL 08h
04319E 21 F5 01 00 4376*  	ld hl,BUF_57_044
0431A2 01 16 00 00 4377*  	ld bc,22
0431A6 11 6B 00 00 4378*  	ld de,107
0431AA DD 21 32 09 4379*  	ld ix,2354
       00          
0431AF CD 40 C9 04 4380*  	call vdu_load_img
0431B3 C9          4381*  	ret
0431B4             4382*  
0431B4             4383*  ld_57_045:
0431B4 21 18 4F 04 4384*  	ld hl,F57_045
0431B8 22 C5 C7 04 4385*  	ld (cur_filename),hl
0431BC 11 F1 D3 04 4386*  	ld de,filedata
0431C0 01 00 00 01 4387*  	ld bc,65536
0431C4 3E 01       4388*  	ld a,mos_load
0431C6 5B CF       4389*  	RST.LIL 08h
0431C8 21 F6 01 00 4390*  	ld hl,BUF_57_045
0431CC 01 16 00 00 4391*  	ld bc,22
0431D0 11 69 00 00 4392*  	ld de,105
0431D4 DD 21 06 09 4393*  	ld ix,2310
       00          
0431D9 CD 40 C9 04 4394*  	call vdu_load_img
0431DD C9          4395*  	ret
0431DE             4396*  
0431DE             4397*  ld_57_046:
0431DE 21 2C 4F 04 4398*  	ld hl,F57_046
0431E2 22 C5 C7 04 4399*  	ld (cur_filename),hl
0431E6 11 F1 D3 04 4400*  	ld de,filedata
0431EA 01 00 00 01 4401*  	ld bc,65536
0431EE 3E 01       4402*  	ld a,mos_load
0431F0 5B CF       4403*  	RST.LIL 08h
0431F2 21 F7 01 00 4404*  	ld hl,BUF_57_046
0431F6 01 40 00 00 4405*  	ld bc,64
0431FA 11 6B 00 00 4406*  	ld de,107
0431FE DD 21 C0 1A 4407*  	ld ix,6848
       00          
043203 CD 40 C9 04 4408*  	call vdu_load_img
043207 C9          4409*  	ret
043208             4410*  
043208             4411*  ld_57_048:
043208 21 40 4F 04 4412*  	ld hl,F57_048
04320C 22 C5 C7 04 4413*  	ld (cur_filename),hl
043210 11 F1 D3 04 4414*  	ld de,filedata
043214 01 00 00 01 4415*  	ld bc,65536
043218 3E 01       4416*  	ld a,mos_load
04321A 5B CF       4417*  	RST.LIL 08h
04321C 21 F8 01 00 4418*  	ld hl,BUF_57_048
043220 01 6C 00 00 4419*  	ld bc,108
043224 11 6B 00 00 4420*  	ld de,107
043228 DD 21 24 2D 4421*  	ld ix,11556
       00          
04322D CD 40 C9 04 4422*  	call vdu_load_img
043231 C9          4423*  	ret
043232             4424*  
043232             4425*  ld_57_050:
043232 21 54 4F 04 4426*  	ld hl,F57_050
043236 22 C5 C7 04 4427*  	ld (cur_filename),hl
04323A 11 F1 D3 04 4428*  	ld de,filedata
04323E 01 00 00 01 4429*  	ld bc,65536
043242 3E 01       4430*  	ld a,mos_load
043244 5B CF       4431*  	RST.LIL 08h
043246 21 F9 01 00 4432*  	ld hl,BUF_57_050
04324A 01 6A 00 00 4433*  	ld bc,106
04324E 11 A0 00 00 4434*  	ld de,160
043252 DD 21 40 42 4435*  	ld ix,16960
       00          
043257 CD 40 C9 04 4436*  	call vdu_load_img
04325B C9          4437*  	ret
04325C             4438*  
04325C             4439*  ld_57_051:
04325C 21 68 4F 04 4440*  	ld hl,F57_051
043260 22 C5 C7 04 4441*  	ld (cur_filename),hl
043264 11 F1 D3 04 4442*  	ld de,filedata
043268 01 00 00 01 4443*  	ld bc,65536
04326C 3E 01       4444*  	ld a,mos_load
04326E 5B CF       4445*  	RST.LIL 08h
043270 21 FA 01 00 4446*  	ld hl,BUF_57_051
043274 01 6A 00 00 4447*  	ld bc,106
043278 11 A0 00 00 4448*  	ld de,160
04327C DD 21 40 42 4449*  	ld ix,16960
       00          
043281 CD 40 C9 04 4450*  	call vdu_load_img
043285 C9          4451*  	ret
043286             4452*  
043286             4453*  ld_57_052:
043286 21 7C 4F 04 4454*  	ld hl,F57_052
04328A 22 C5 C7 04 4455*  	ld (cur_filename),hl
04328E 11 F1 D3 04 4456*  	ld de,filedata
043292 01 00 00 01 4457*  	ld bc,65536
043296 3E 01       4458*  	ld a,mos_load
043298 5B CF       4459*  	RST.LIL 08h
04329A 21 FB 01 00 4460*  	ld hl,BUF_57_052
04329E 01 40 01 00 4461*  	ld bc,320
0432A2 11 A0 00 00 4462*  	ld de,160
0432A6 DD 21 00 C8 4463*  	ld ix,51200
       00          
0432AB CD 40 C9 04 4464*  	call vdu_load_img
0432AF C9          4465*  	ret
0432B0             4466*  
0432B0             4467*  ld_58_000:
0432B0 21 90 4F 04 4468*  	ld hl,F58_000
0432B4 22 C5 C7 04 4469*  	ld (cur_filename),hl
0432B8 11 F1 D3 04 4470*  	ld de,filedata
0432BC 01 00 00 01 4471*  	ld bc,65536
0432C0 3E 01       4472*  	ld a,mos_load
0432C2 5B CF       4473*  	RST.LIL 08h
0432C4 21 FC 01 00 4474*  	ld hl,BUF_58_000
0432C8 01 1D 00 00 4475*  	ld bc,29
0432CC 11 23 00 00 4476*  	ld de,35
0432D0 DD 21 F7 03 4477*  	ld ix,1015
       00          
0432D5 CD 40 C9 04 4478*  	call vdu_load_img
0432D9 C9          4479*  	ret
0432DA             4480*  
0432DA             4481*  ld_58_001:
0432DA 21 A4 4F 04 4482*  	ld hl,F58_001
0432DE 22 C5 C7 04 4483*  	ld (cur_filename),hl
0432E2 11 F1 D3 04 4484*  	ld de,filedata
0432E6 01 00 00 01 4485*  	ld bc,65536
0432EA 3E 01       4486*  	ld a,mos_load
0432EC 5B CF       4487*  	RST.LIL 08h
0432EE 21 FD 01 00 4488*  	ld hl,BUF_58_001
0432F2 01 17 00 00 4489*  	ld bc,23
0432F6 11 23 00 00 4490*  	ld de,35
0432FA DD 21 25 03 4491*  	ld ix,805
       00          
0432FF CD 40 C9 04 4492*  	call vdu_load_img
043303 C9          4493*  	ret
043304             4494*  
043304             4495*  ld_58_007:
043304 21 B8 4F 04 4496*  	ld hl,F58_007
043308 22 C5 C7 04 4497*  	ld (cur_filename),hl
04330C 11 F1 D3 04 4498*  	ld de,filedata
043310 01 00 00 01 4499*  	ld bc,65536
043314 3E 01       4500*  	ld a,mos_load
043316 5B CF       4501*  	RST.LIL 08h
043318 21 FE 01 00 4502*  	ld hl,BUF_58_007
04331C 01 1D 00 00 4503*  	ld bc,29
043320 11 23 00 00 4504*  	ld de,35
043324 DD 21 F7 03 4505*  	ld ix,1015
       00          
043329 CD 40 C9 04 4506*  	call vdu_load_img
04332D C9          4507*  	ret
04332E             4508*  
04332E             4509*  ld_58_012:
04332E 21 CC 4F 04 4510*  	ld hl,F58_012
043332 22 C5 C7 04 4511*  	ld (cur_filename),hl
043336 11 F1 D3 04 4512*  	ld de,filedata
04333A 01 00 00 01 4513*  	ld bc,65536
04333E 3E 01       4514*  	ld a,mos_load
043340 5B CF       4515*  	RST.LIL 08h
043342 21 FF 01 00 4516*  	ld hl,BUF_58_012
043346 01 24 00 00 4517*  	ld bc,36
04334A 11 23 00 00 4518*  	ld de,35
04334E DD 21 EC 04 4519*  	ld ix,1260
       00          
043353 CD 40 C9 04 4520*  	call vdu_load_img
043357 C9          4521*  	ret
043358             4522*  
043358             4523*  ld_58_017:
043358 21 E0 4F 04 4524*  	ld hl,F58_017
04335C 22 C5 C7 04 4525*  	ld (cur_filename),hl
043360 11 F1 D3 04 4526*  	ld de,filedata
043364 01 00 00 01 4527*  	ld bc,65536
043368 3E 01       4528*  	ld a,mos_load
04336A 5B CF       4529*  	RST.LIL 08h
04336C 21 00 02 00 4530*  	ld hl,BUF_58_017
043370 01 23 00 00 4531*  	ld bc,35
043374 11 2D 00 00 4532*  	ld de,45
043378 DD 21 27 06 4533*  	ld ix,1575
       00          
04337D CD 40 C9 04 4534*  	call vdu_load_img
043381 C9          4535*  	ret
043382             4536*  
043382             4537*  ld_58_018:
043382 21 F4 4F 04 4538*  	ld hl,F58_018
043386 22 C5 C7 04 4539*  	ld (cur_filename),hl
04338A 11 F1 D3 04 4540*  	ld de,filedata
04338E 01 00 00 01 4541*  	ld bc,65536
043392 3E 01       4542*  	ld a,mos_load
043394 5B CF       4543*  	RST.LIL 08h
043396 21 01 02 00 4544*  	ld hl,BUF_58_018
04339A 01 1A 00 00 4545*  	ld bc,26
04339E 11 2D 00 00 4546*  	ld de,45
0433A2 DD 21 92 04 4547*  	ld ix,1170
       00          
0433A7 CD 40 C9 04 4548*  	call vdu_load_img
0433AB C9          4549*  	ret
0433AC             4550*  
0433AC             4551*  ld_58_019:
0433AC 21 08 50 04 4552*  	ld hl,F58_019
0433B0 22 C5 C7 04 4553*  	ld (cur_filename),hl
0433B4 11 F1 D3 04 4554*  	ld de,filedata
0433B8 01 00 00 01 4555*  	ld bc,65536
0433BC 3E 01       4556*  	ld a,mos_load
0433BE 5B CF       4557*  	RST.LIL 08h
0433C0 21 02 02 00 4558*  	ld hl,BUF_58_019
0433C4 01 0F 00 00 4559*  	ld bc,15
0433C8 11 2D 00 00 4560*  	ld de,45
0433CC DD 21 A3 02 4561*  	ld ix,675
       00          
0433D1 CD 40 C9 04 4562*  	call vdu_load_img
0433D5 C9          4563*  	ret
0433D6             4564*  
0433D6             4565*  ld_58_020:
0433D6 21 1C 50 04 4566*  	ld hl,F58_020
0433DA 22 C5 C7 04 4567*  	ld (cur_filename),hl
0433DE 11 F1 D3 04 4568*  	ld de,filedata
0433E2 01 00 00 01 4569*  	ld bc,65536
0433E6 3E 01       4570*  	ld a,mos_load
0433E8 5B CF       4571*  	RST.LIL 08h
0433EA 21 03 02 00 4572*  	ld hl,BUF_58_020
0433EE 01 05 00 00 4573*  	ld bc,5
0433F2 11 2D 00 00 4574*  	ld de,45
0433F6 DD 21 E1 00 4575*  	ld ix,225
       00          
0433FB CD 40 C9 04 4576*  	call vdu_load_img
0433FF C9          4577*  	ret
043400             4578*  
043400             4579*  ld_58_021:
043400 21 30 50 04 4580*  	ld hl,F58_021
043404 22 C5 C7 04 4581*  	ld (cur_filename),hl
043408 11 F1 D3 04 4582*  	ld de,filedata
04340C 01 00 00 01 4583*  	ld bc,65536
043410 3E 01       4584*  	ld a,mos_load
043412 5B CF       4585*  	RST.LIL 08h
043414 21 04 02 00 4586*  	ld hl,BUF_58_021
043418 01 05 00 00 4587*  	ld bc,5
04341C 11 2B 00 00 4588*  	ld de,43
043420 DD 21 D7 00 4589*  	ld ix,215
       00          
043425 CD 40 C9 04 4590*  	call vdu_load_img
043429 C9          4591*  	ret
04342A             4592*  
04342A             4593*  ld_58_022:
04342A 21 44 50 04 4594*  	ld hl,F58_022
04342E 22 C5 C7 04 4595*  	ld (cur_filename),hl
043432 11 F1 D3 04 4596*  	ld de,filedata
043436 01 00 00 01 4597*  	ld bc,65536
04343A 3E 01       4598*  	ld a,mos_load
04343C 5B CF       4599*  	RST.LIL 08h
04343E 21 05 02 00 4600*  	ld hl,BUF_58_022
043442 01 0F 00 00 4601*  	ld bc,15
043446 11 2D 00 00 4602*  	ld de,45
04344A DD 21 A3 02 4603*  	ld ix,675
       00          
04344F CD 40 C9 04 4604*  	call vdu_load_img
043453 C9          4605*  	ret
043454             4606*  
043454             4607*  ld_58_023:
043454 21 58 50 04 4608*  	ld hl,F58_023
043458 22 C5 C7 04 4609*  	ld (cur_filename),hl
04345C 11 F1 D3 04 4610*  	ld de,filedata
043460 01 00 00 01 4611*  	ld bc,65536
043464 3E 01       4612*  	ld a,mos_load
043466 5B CF       4613*  	RST.LIL 08h
043468 21 06 02 00 4614*  	ld hl,BUF_58_023
04346C 01 1A 00 00 4615*  	ld bc,26
043470 11 2D 00 00 4616*  	ld de,45
043474 DD 21 92 04 4617*  	ld ix,1170
       00          
043479 CD 40 C9 04 4618*  	call vdu_load_img
04347D C9          4619*  	ret
04347E             4620*  
04347E             4621*  ld_58_024:
04347E 21 6C 50 04 4622*  	ld hl,F58_024
043482 22 C5 C7 04 4623*  	ld (cur_filename),hl
043486 11 F1 D3 04 4624*  	ld de,filedata
04348A 01 00 00 01 4625*  	ld bc,65536
04348E 3E 01       4626*  	ld a,mos_load
043490 5B CF       4627*  	RST.LIL 08h
043492 21 07 02 00 4628*  	ld hl,BUF_58_024
043496 01 23 00 00 4629*  	ld bc,35
04349A 11 2D 00 00 4630*  	ld de,45
04349E DD 21 27 06 4631*  	ld ix,1575
       00          
0434A3 CD 40 C9 04 4632*  	call vdu_load_img
0434A7 C9          4633*  	ret
0434A8             4634*  
0434A8             4635*  ld_58_028:
0434A8 21 80 50 04 4636*  	ld hl,F58_028
0434AC 22 C5 C7 04 4637*  	ld (cur_filename),hl
0434B0 11 F1 D3 04 4638*  	ld de,filedata
0434B4 01 00 00 01 4639*  	ld bc,65536
0434B8 3E 01       4640*  	ld a,mos_load
0434BA 5B CF       4641*  	RST.LIL 08h
0434BC 21 08 02 00 4642*  	ld hl,BUF_58_028
0434C0 01 2E 00 00 4643*  	ld bc,46
0434C4 11 2D 00 00 4644*  	ld de,45
0434C8 DD 21 16 08 4645*  	ld ix,2070
       00          
0434CD CD 40 C9 04 4646*  	call vdu_load_img
0434D1 C9          4647*  	ret
0434D2             4648*  
0434D2             4649*  ld_58_032:
0434D2 21 94 50 04 4650*  	ld hl,F58_032
0434D6 22 C5 C7 04 4651*  	ld (cur_filename),hl
0434DA 11 F1 D3 04 4652*  	ld de,filedata
0434DE 01 00 00 01 4653*  	ld bc,65536
0434E2 3E 01       4654*  	ld a,mos_load
0434E4 5B CF       4655*  	RST.LIL 08h
0434E6 21 09 02 00 4656*  	ld hl,BUF_58_032
0434EA 01 2D 00 00 4657*  	ld bc,45
0434EE 11 3F 00 00 4658*  	ld de,63
0434F2 DD 21 13 0B 4659*  	ld ix,2835
       00          
0434F7 CD 40 C9 04 4660*  	call vdu_load_img
0434FB C9          4661*  	ret
0434FC             4662*  
0434FC             4663*  ld_58_033:
0434FC 21 A8 50 04 4664*  	ld hl,F58_033
043500 22 C5 C7 04 4665*  	ld (cur_filename),hl
043504 11 F1 D3 04 4666*  	ld de,filedata
043508 01 00 00 01 4667*  	ld bc,65536
04350C 3E 01       4668*  	ld a,mos_load
04350E 5B CF       4669*  	RST.LIL 08h
043510 21 0A 02 00 4670*  	ld hl,BUF_58_033
043514 01 1B 00 00 4671*  	ld bc,27
043518 11 3F 00 00 4672*  	ld de,63
04351C DD 21 A5 06 4673*  	ld ix,1701
       00          
043521 CD 40 C9 04 4674*  	call vdu_load_img
043525 C9          4675*  	ret
043526             4676*  
043526             4677*  ld_58_034:
043526 21 BC 50 04 4678*  	ld hl,F58_034
04352A 22 C5 C7 04 4679*  	ld (cur_filename),hl
04352E 11 F1 D3 04 4680*  	ld de,filedata
043532 01 00 00 01 4681*  	ld bc,65536
043536 3E 01       4682*  	ld a,mos_load
043538 5B CF       4683*  	RST.LIL 08h
04353A 21 0B 02 00 4684*  	ld hl,BUF_58_034
04353E 01 09 00 00 4685*  	ld bc,9
043542 11 3F 00 00 4686*  	ld de,63
043546 DD 21 37 02 4687*  	ld ix,567
       00          
04354B CD 40 C9 04 4688*  	call vdu_load_img
04354F C9          4689*  	ret
043550             4690*  
043550             4691*  ld_58_035:
043550 21 D0 50 04 4692*  	ld hl,F58_035
043554 22 C5 C7 04 4693*  	ld (cur_filename),hl
043558 11 F1 D3 04 4694*  	ld de,filedata
04355C 01 00 00 01 4695*  	ld bc,65536
043560 3E 01       4696*  	ld a,mos_load
043562 5B CF       4697*  	RST.LIL 08h
043564 21 0C 02 00 4698*  	ld hl,BUF_58_035
043568 01 09 00 00 4699*  	ld bc,9
04356C 11 3D 00 00 4700*  	ld de,61
043570 DD 21 25 02 4701*  	ld ix,549
       00          
043575 CD 40 C9 04 4702*  	call vdu_load_img
043579 C9          4703*  	ret
04357A             4704*  
04357A             4705*  ld_58_036:
04357A 21 E4 50 04 4706*  	ld hl,F58_036
04357E 22 C5 C7 04 4707*  	ld (cur_filename),hl
043582 11 F1 D3 04 4708*  	ld de,filedata
043586 01 00 00 01 4709*  	ld bc,65536
04358A 3E 01       4710*  	ld a,mos_load
04358C 5B CF       4711*  	RST.LIL 08h
04358E 21 0D 02 00 4712*  	ld hl,BUF_58_036
043592 01 1B 00 00 4713*  	ld bc,27
043596 11 3F 00 00 4714*  	ld de,63
04359A DD 21 A5 06 4715*  	ld ix,1701
       00          
04359F CD 40 C9 04 4716*  	call vdu_load_img
0435A3 C9          4717*  	ret
0435A4             4718*  
0435A4             4719*  ld_58_037:
0435A4 21 F8 50 04 4720*  	ld hl,F58_037
0435A8 22 C5 C7 04 4721*  	ld (cur_filename),hl
0435AC 11 F1 D3 04 4722*  	ld de,filedata
0435B0 01 00 00 01 4723*  	ld bc,65536
0435B4 3E 01       4724*  	ld a,mos_load
0435B6 5B CF       4725*  	RST.LIL 08h
0435B8 21 0E 02 00 4726*  	ld hl,BUF_58_037
0435BC 01 2D 00 00 4727*  	ld bc,45
0435C0 11 3F 00 00 4728*  	ld de,63
0435C4 DD 21 13 0B 4729*  	ld ix,2835
       00          
0435C9 CD 40 C9 04 4730*  	call vdu_load_img
0435CD C9          4731*  	ret
0435CE             4732*  
0435CE             4733*  ld_58_040:
0435CE 21 0C 51 04 4734*  	ld hl,F58_040
0435D2 22 C5 C7 04 4735*  	ld (cur_filename),hl
0435D6 11 F1 D3 04 4736*  	ld de,filedata
0435DA 01 00 00 01 4737*  	ld bc,65536
0435DE 3E 01       4738*  	ld a,mos_load
0435E0 5B CF       4739*  	RST.LIL 08h
0435E2 21 0F 02 00 4740*  	ld hl,BUF_58_040
0435E6 01 40 00 00 4741*  	ld bc,64
0435EA 11 3F 00 00 4742*  	ld de,63
0435EE DD 21 C0 0F 4743*  	ld ix,4032
       00          
0435F3 CD 40 C9 04 4744*  	call vdu_load_img
0435F7 C9          4745*  	ret
0435F8             4746*  
0435F8             4747*  ld_58_043:
0435F8 21 20 51 04 4748*  	ld hl,F58_043
0435FC 22 C5 C7 04 4749*  	ld (cur_filename),hl
043600 11 F1 D3 04 4750*  	ld de,filedata
043604 01 00 00 01 4751*  	ld bc,65536
043608 3E 01       4752*  	ld a,mos_load
04360A 5B CF       4753*  	RST.LIL 08h
04360C 21 10 02 00 4754*  	ld hl,BUF_58_043
043610 01 40 00 00 4755*  	ld bc,64
043614 11 6B 00 00 4756*  	ld de,107
043618 DD 21 C0 1A 4757*  	ld ix,6848
       00          
04361D CD 40 C9 04 4758*  	call vdu_load_img
043621 C9          4759*  	ret
043622             4760*  
043622             4761*  ld_58_044:
043622 21 34 51 04 4762*  	ld hl,F58_044
043626 22 C5 C7 04 4763*  	ld (cur_filename),hl
04362A 11 F1 D3 04 4764*  	ld de,filedata
04362E 01 00 00 01 4765*  	ld bc,65536
043632 3E 01       4766*  	ld a,mos_load
043634 5B CF       4767*  	RST.LIL 08h
043636 21 11 02 00 4768*  	ld hl,BUF_58_044
04363A 01 16 00 00 4769*  	ld bc,22
04363E 11 6B 00 00 4770*  	ld de,107
043642 DD 21 32 09 4771*  	ld ix,2354
       00          
043647 CD 40 C9 04 4772*  	call vdu_load_img
04364B C9          4773*  	ret
04364C             4774*  
04364C             4775*  ld_58_045:
04364C 21 48 51 04 4776*  	ld hl,F58_045
043650 22 C5 C7 04 4777*  	ld (cur_filename),hl
043654 11 F1 D3 04 4778*  	ld de,filedata
043658 01 00 00 01 4779*  	ld bc,65536
04365C 3E 01       4780*  	ld a,mos_load
04365E 5B CF       4781*  	RST.LIL 08h
043660 21 12 02 00 4782*  	ld hl,BUF_58_045
043664 01 16 00 00 4783*  	ld bc,22
043668 11 69 00 00 4784*  	ld de,105
04366C DD 21 06 09 4785*  	ld ix,2310
       00          
043671 CD 40 C9 04 4786*  	call vdu_load_img
043675 C9          4787*  	ret
043676             4788*  
043676             4789*  ld_58_046:
043676 21 5C 51 04 4790*  	ld hl,F58_046
04367A 22 C5 C7 04 4791*  	ld (cur_filename),hl
04367E 11 F1 D3 04 4792*  	ld de,filedata
043682 01 00 00 01 4793*  	ld bc,65536
043686 3E 01       4794*  	ld a,mos_load
043688 5B CF       4795*  	RST.LIL 08h
04368A 21 13 02 00 4796*  	ld hl,BUF_58_046
04368E 01 40 00 00 4797*  	ld bc,64
043692 11 6B 00 00 4798*  	ld de,107
043696 DD 21 C0 1A 4799*  	ld ix,6848
       00          
04369B CD 40 C9 04 4800*  	call vdu_load_img
04369F C9          4801*  	ret
0436A0             4802*  
0436A0             4803*  ld_58_048:
0436A0 21 70 51 04 4804*  	ld hl,F58_048
0436A4 22 C5 C7 04 4805*  	ld (cur_filename),hl
0436A8 11 F1 D3 04 4806*  	ld de,filedata
0436AC 01 00 00 01 4807*  	ld bc,65536
0436B0 3E 01       4808*  	ld a,mos_load
0436B2 5B CF       4809*  	RST.LIL 08h
0436B4 21 14 02 00 4810*  	ld hl,BUF_58_048
0436B8 01 6C 00 00 4811*  	ld bc,108
0436BC 11 6B 00 00 4812*  	ld de,107
0436C0 DD 21 24 2D 4813*  	ld ix,11556
       00          
0436C5 CD 40 C9 04 4814*  	call vdu_load_img
0436C9 C9          4815*  	ret
0436CA             4816*  
0436CA             4817*  ld_58_050:
0436CA 21 84 51 04 4818*  	ld hl,F58_050
0436CE 22 C5 C7 04 4819*  	ld (cur_filename),hl
0436D2 11 F1 D3 04 4820*  	ld de,filedata
0436D6 01 00 00 01 4821*  	ld bc,65536
0436DA 3E 01       4822*  	ld a,mos_load
0436DC 5B CF       4823*  	RST.LIL 08h
0436DE 21 15 02 00 4824*  	ld hl,BUF_58_050
0436E2 01 6A 00 00 4825*  	ld bc,106
0436E6 11 A0 00 00 4826*  	ld de,160
0436EA DD 21 40 42 4827*  	ld ix,16960
       00          
0436EF CD 40 C9 04 4828*  	call vdu_load_img
0436F3 C9          4829*  	ret
0436F4             4830*  
0436F4             4831*  ld_58_051:
0436F4 21 98 51 04 4832*  	ld hl,F58_051
0436F8 22 C5 C7 04 4833*  	ld (cur_filename),hl
0436FC 11 F1 D3 04 4834*  	ld de,filedata
043700 01 00 00 01 4835*  	ld bc,65536
043704 3E 01       4836*  	ld a,mos_load
043706 5B CF       4837*  	RST.LIL 08h
043708 21 16 02 00 4838*  	ld hl,BUF_58_051
04370C 01 6A 00 00 4839*  	ld bc,106
043710 11 A0 00 00 4840*  	ld de,160
043714 DD 21 40 42 4841*  	ld ix,16960
       00          
043719 CD 40 C9 04 4842*  	call vdu_load_img
04371D C9          4843*  	ret
04371E             4844*  
04371E             4845*  ld_58_052:
04371E 21 AC 51 04 4846*  	ld hl,F58_052
043722 22 C5 C7 04 4847*  	ld (cur_filename),hl
043726 11 F1 D3 04 4848*  	ld de,filedata
04372A 01 00 00 01 4849*  	ld bc,65536
04372E 3E 01       4850*  	ld a,mos_load
043730 5B CF       4851*  	RST.LIL 08h
043732 21 17 02 00 4852*  	ld hl,BUF_58_052
043736 01 40 01 00 4853*  	ld bc,320
04373A 11 A0 00 00 4854*  	ld de,160
04373E DD 21 00 C8 4855*  	ld ix,51200
       00          
043743 CD 40 C9 04 4856*  	call vdu_load_img
043747 C9          4857*  	ret
043748             4858*  
043748             4859*  ld_59_000:
043748 21 C0 51 04 4860*  	ld hl,F59_000
04374C 22 C5 C7 04 4861*  	ld (cur_filename),hl
043750 11 F1 D3 04 4862*  	ld de,filedata
043754 01 00 00 01 4863*  	ld bc,65536
043758 3E 01       4864*  	ld a,mos_load
04375A 5B CF       4865*  	RST.LIL 08h
04375C 21 18 02 00 4866*  	ld hl,BUF_59_000
043760 01 1D 00 00 4867*  	ld bc,29
043764 11 23 00 00 4868*  	ld de,35
043768 DD 21 F7 03 4869*  	ld ix,1015
       00          
04376D CD 40 C9 04 4870*  	call vdu_load_img
043771 C9          4871*  	ret
043772             4872*  
043772             4873*  ld_59_001:
043772 21 D4 51 04 4874*  	ld hl,F59_001
043776 22 C5 C7 04 4875*  	ld (cur_filename),hl
04377A 11 F1 D3 04 4876*  	ld de,filedata
04377E 01 00 00 01 4877*  	ld bc,65536
043782 3E 01       4878*  	ld a,mos_load
043784 5B CF       4879*  	RST.LIL 08h
043786 21 19 02 00 4880*  	ld hl,BUF_59_001
04378A 01 17 00 00 4881*  	ld bc,23
04378E 11 23 00 00 4882*  	ld de,35
043792 DD 21 25 03 4883*  	ld ix,805
       00          
043797 CD 40 C9 04 4884*  	call vdu_load_img
04379B C9          4885*  	ret
04379C             4886*  
04379C             4887*  ld_59_007:
04379C 21 E8 51 04 4888*  	ld hl,F59_007
0437A0 22 C5 C7 04 4889*  	ld (cur_filename),hl
0437A4 11 F1 D3 04 4890*  	ld de,filedata
0437A8 01 00 00 01 4891*  	ld bc,65536
0437AC 3E 01       4892*  	ld a,mos_load
0437AE 5B CF       4893*  	RST.LIL 08h
0437B0 21 1A 02 00 4894*  	ld hl,BUF_59_007
0437B4 01 1D 00 00 4895*  	ld bc,29
0437B8 11 23 00 00 4896*  	ld de,35
0437BC DD 21 F7 03 4897*  	ld ix,1015
       00          
0437C1 CD 40 C9 04 4898*  	call vdu_load_img
0437C5 C9          4899*  	ret
0437C6             4900*  
0437C6             4901*  ld_59_012:
0437C6 21 FC 51 04 4902*  	ld hl,F59_012
0437CA 22 C5 C7 04 4903*  	ld (cur_filename),hl
0437CE 11 F1 D3 04 4904*  	ld de,filedata
0437D2 01 00 00 01 4905*  	ld bc,65536
0437D6 3E 01       4906*  	ld a,mos_load
0437D8 5B CF       4907*  	RST.LIL 08h
0437DA 21 1B 02 00 4908*  	ld hl,BUF_59_012
0437DE 01 24 00 00 4909*  	ld bc,36
0437E2 11 23 00 00 4910*  	ld de,35
0437E6 DD 21 EC 04 4911*  	ld ix,1260
       00          
0437EB CD 40 C9 04 4912*  	call vdu_load_img
0437EF C9          4913*  	ret
0437F0             4914*  
0437F0             4915*  ld_59_017:
0437F0 21 10 52 04 4916*  	ld hl,F59_017
0437F4 22 C5 C7 04 4917*  	ld (cur_filename),hl
0437F8 11 F1 D3 04 4918*  	ld de,filedata
0437FC 01 00 00 01 4919*  	ld bc,65536
043800 3E 01       4920*  	ld a,mos_load
043802 5B CF       4921*  	RST.LIL 08h
043804 21 1C 02 00 4922*  	ld hl,BUF_59_017
043808 01 23 00 00 4923*  	ld bc,35
04380C 11 2D 00 00 4924*  	ld de,45
043810 DD 21 27 06 4925*  	ld ix,1575
       00          
043815 CD 40 C9 04 4926*  	call vdu_load_img
043819 C9          4927*  	ret
04381A             4928*  
04381A             4929*  ld_59_018:
04381A 21 24 52 04 4930*  	ld hl,F59_018
04381E 22 C5 C7 04 4931*  	ld (cur_filename),hl
043822 11 F1 D3 04 4932*  	ld de,filedata
043826 01 00 00 01 4933*  	ld bc,65536
04382A 3E 01       4934*  	ld a,mos_load
04382C 5B CF       4935*  	RST.LIL 08h
04382E 21 1D 02 00 4936*  	ld hl,BUF_59_018
043832 01 1A 00 00 4937*  	ld bc,26
043836 11 2D 00 00 4938*  	ld de,45
04383A DD 21 92 04 4939*  	ld ix,1170
       00          
04383F CD 40 C9 04 4940*  	call vdu_load_img
043843 C9          4941*  	ret
043844             4942*  
043844             4943*  ld_59_019:
043844 21 38 52 04 4944*  	ld hl,F59_019
043848 22 C5 C7 04 4945*  	ld (cur_filename),hl
04384C 11 F1 D3 04 4946*  	ld de,filedata
043850 01 00 00 01 4947*  	ld bc,65536
043854 3E 01       4948*  	ld a,mos_load
043856 5B CF       4949*  	RST.LIL 08h
043858 21 1E 02 00 4950*  	ld hl,BUF_59_019
04385C 01 0F 00 00 4951*  	ld bc,15
043860 11 2D 00 00 4952*  	ld de,45
043864 DD 21 A3 02 4953*  	ld ix,675
       00          
043869 CD 40 C9 04 4954*  	call vdu_load_img
04386D C9          4955*  	ret
04386E             4956*  
04386E             4957*  ld_59_020:
04386E 21 4C 52 04 4958*  	ld hl,F59_020
043872 22 C5 C7 04 4959*  	ld (cur_filename),hl
043876 11 F1 D3 04 4960*  	ld de,filedata
04387A 01 00 00 01 4961*  	ld bc,65536
04387E 3E 01       4962*  	ld a,mos_load
043880 5B CF       4963*  	RST.LIL 08h
043882 21 1F 02 00 4964*  	ld hl,BUF_59_020
043886 01 05 00 00 4965*  	ld bc,5
04388A 11 2D 00 00 4966*  	ld de,45
04388E DD 21 E1 00 4967*  	ld ix,225
       00          
043893 CD 40 C9 04 4968*  	call vdu_load_img
043897 C9          4969*  	ret
043898             4970*  
043898             4971*  ld_59_021:
043898 21 60 52 04 4972*  	ld hl,F59_021
04389C 22 C5 C7 04 4973*  	ld (cur_filename),hl
0438A0 11 F1 D3 04 4974*  	ld de,filedata
0438A4 01 00 00 01 4975*  	ld bc,65536
0438A8 3E 01       4976*  	ld a,mos_load
0438AA 5B CF       4977*  	RST.LIL 08h
0438AC 21 20 02 00 4978*  	ld hl,BUF_59_021
0438B0 01 05 00 00 4979*  	ld bc,5
0438B4 11 2B 00 00 4980*  	ld de,43
0438B8 DD 21 D7 00 4981*  	ld ix,215
       00          
0438BD CD 40 C9 04 4982*  	call vdu_load_img
0438C1 C9          4983*  	ret
0438C2             4984*  
0438C2             4985*  ld_59_022:
0438C2 21 74 52 04 4986*  	ld hl,F59_022
0438C6 22 C5 C7 04 4987*  	ld (cur_filename),hl
0438CA 11 F1 D3 04 4988*  	ld de,filedata
0438CE 01 00 00 01 4989*  	ld bc,65536
0438D2 3E 01       4990*  	ld a,mos_load
0438D4 5B CF       4991*  	RST.LIL 08h
0438D6 21 21 02 00 4992*  	ld hl,BUF_59_022
0438DA 01 0F 00 00 4993*  	ld bc,15
0438DE 11 2D 00 00 4994*  	ld de,45
0438E2 DD 21 A3 02 4995*  	ld ix,675
       00          
0438E7 CD 40 C9 04 4996*  	call vdu_load_img
0438EB C9          4997*  	ret
0438EC             4998*  
0438EC             4999*  ld_59_023:
0438EC 21 88 52 04 5000*  	ld hl,F59_023
0438F0 22 C5 C7 04 5001*  	ld (cur_filename),hl
0438F4 11 F1 D3 04 5002*  	ld de,filedata
0438F8 01 00 00 01 5003*  	ld bc,65536
0438FC 3E 01       5004*  	ld a,mos_load
0438FE 5B CF       5005*  	RST.LIL 08h
043900 21 22 02 00 5006*  	ld hl,BUF_59_023
043904 01 1A 00 00 5007*  	ld bc,26
043908 11 2D 00 00 5008*  	ld de,45
04390C DD 21 92 04 5009*  	ld ix,1170
       00          
043911 CD 40 C9 04 5010*  	call vdu_load_img
043915 C9          5011*  	ret
043916             5012*  
043916             5013*  ld_59_024:
043916 21 9C 52 04 5014*  	ld hl,F59_024
04391A 22 C5 C7 04 5015*  	ld (cur_filename),hl
04391E 11 F1 D3 04 5016*  	ld de,filedata
043922 01 00 00 01 5017*  	ld bc,65536
043926 3E 01       5018*  	ld a,mos_load
043928 5B CF       5019*  	RST.LIL 08h
04392A 21 23 02 00 5020*  	ld hl,BUF_59_024
04392E 01 23 00 00 5021*  	ld bc,35
043932 11 2D 00 00 5022*  	ld de,45
043936 DD 21 27 06 5023*  	ld ix,1575
       00          
04393B CD 40 C9 04 5024*  	call vdu_load_img
04393F C9          5025*  	ret
043940             5026*  
043940             5027*  ld_59_028:
043940 21 B0 52 04 5028*  	ld hl,F59_028
043944 22 C5 C7 04 5029*  	ld (cur_filename),hl
043948 11 F1 D3 04 5030*  	ld de,filedata
04394C 01 00 00 01 5031*  	ld bc,65536
043950 3E 01       5032*  	ld a,mos_load
043952 5B CF       5033*  	RST.LIL 08h
043954 21 24 02 00 5034*  	ld hl,BUF_59_028
043958 01 2E 00 00 5035*  	ld bc,46
04395C 11 2D 00 00 5036*  	ld de,45
043960 DD 21 16 08 5037*  	ld ix,2070
       00          
043965 CD 40 C9 04 5038*  	call vdu_load_img
043969 C9          5039*  	ret
04396A             5040*  
04396A             5041*  ld_59_032:
04396A 21 C4 52 04 5042*  	ld hl,F59_032
04396E 22 C5 C7 04 5043*  	ld (cur_filename),hl
043972 11 F1 D3 04 5044*  	ld de,filedata
043976 01 00 00 01 5045*  	ld bc,65536
04397A 3E 01       5046*  	ld a,mos_load
04397C 5B CF       5047*  	RST.LIL 08h
04397E 21 25 02 00 5048*  	ld hl,BUF_59_032
043982 01 2D 00 00 5049*  	ld bc,45
043986 11 3F 00 00 5050*  	ld de,63
04398A DD 21 13 0B 5051*  	ld ix,2835
       00          
04398F CD 40 C9 04 5052*  	call vdu_load_img
043993 C9          5053*  	ret
043994             5054*  
043994             5055*  ld_59_033:
043994 21 D8 52 04 5056*  	ld hl,F59_033
043998 22 C5 C7 04 5057*  	ld (cur_filename),hl
04399C 11 F1 D3 04 5058*  	ld de,filedata
0439A0 01 00 00 01 5059*  	ld bc,65536
0439A4 3E 01       5060*  	ld a,mos_load
0439A6 5B CF       5061*  	RST.LIL 08h
0439A8 21 26 02 00 5062*  	ld hl,BUF_59_033
0439AC 01 1B 00 00 5063*  	ld bc,27
0439B0 11 3F 00 00 5064*  	ld de,63
0439B4 DD 21 A5 06 5065*  	ld ix,1701
       00          
0439B9 CD 40 C9 04 5066*  	call vdu_load_img
0439BD C9          5067*  	ret
0439BE             5068*  
0439BE             5069*  ld_59_034:
0439BE 21 EC 52 04 5070*  	ld hl,F59_034
0439C2 22 C5 C7 04 5071*  	ld (cur_filename),hl
0439C6 11 F1 D3 04 5072*  	ld de,filedata
0439CA 01 00 00 01 5073*  	ld bc,65536
0439CE 3E 01       5074*  	ld a,mos_load
0439D0 5B CF       5075*  	RST.LIL 08h
0439D2 21 27 02 00 5076*  	ld hl,BUF_59_034
0439D6 01 09 00 00 5077*  	ld bc,9
0439DA 11 3F 00 00 5078*  	ld de,63
0439DE DD 21 37 02 5079*  	ld ix,567
       00          
0439E3 CD 40 C9 04 5080*  	call vdu_load_img
0439E7 C9          5081*  	ret
0439E8             5082*  
0439E8             5083*  ld_59_035:
0439E8 21 00 53 04 5084*  	ld hl,F59_035
0439EC 22 C5 C7 04 5085*  	ld (cur_filename),hl
0439F0 11 F1 D3 04 5086*  	ld de,filedata
0439F4 01 00 00 01 5087*  	ld bc,65536
0439F8 3E 01       5088*  	ld a,mos_load
0439FA 5B CF       5089*  	RST.LIL 08h
0439FC 21 28 02 00 5090*  	ld hl,BUF_59_035
043A00 01 09 00 00 5091*  	ld bc,9
043A04 11 3D 00 00 5092*  	ld de,61
043A08 DD 21 25 02 5093*  	ld ix,549
       00          
043A0D CD 40 C9 04 5094*  	call vdu_load_img
043A11 C9          5095*  	ret
043A12             5096*  
043A12             5097*  ld_59_036:
043A12 21 14 53 04 5098*  	ld hl,F59_036
043A16 22 C5 C7 04 5099*  	ld (cur_filename),hl
043A1A 11 F1 D3 04 5100*  	ld de,filedata
043A1E 01 00 00 01 5101*  	ld bc,65536
043A22 3E 01       5102*  	ld a,mos_load
043A24 5B CF       5103*  	RST.LIL 08h
043A26 21 29 02 00 5104*  	ld hl,BUF_59_036
043A2A 01 1B 00 00 5105*  	ld bc,27
043A2E 11 3F 00 00 5106*  	ld de,63
043A32 DD 21 A5 06 5107*  	ld ix,1701
       00          
043A37 CD 40 C9 04 5108*  	call vdu_load_img
043A3B C9          5109*  	ret
043A3C             5110*  
043A3C             5111*  ld_59_037:
043A3C 21 28 53 04 5112*  	ld hl,F59_037
043A40 22 C5 C7 04 5113*  	ld (cur_filename),hl
043A44 11 F1 D3 04 5114*  	ld de,filedata
043A48 01 00 00 01 5115*  	ld bc,65536
043A4C 3E 01       5116*  	ld a,mos_load
043A4E 5B CF       5117*  	RST.LIL 08h
043A50 21 2A 02 00 5118*  	ld hl,BUF_59_037
043A54 01 2D 00 00 5119*  	ld bc,45
043A58 11 3F 00 00 5120*  	ld de,63
043A5C DD 21 13 0B 5121*  	ld ix,2835
       00          
043A61 CD 40 C9 04 5122*  	call vdu_load_img
043A65 C9          5123*  	ret
043A66             5124*  
043A66             5125*  ld_59_040:
043A66 21 3C 53 04 5126*  	ld hl,F59_040
043A6A 22 C5 C7 04 5127*  	ld (cur_filename),hl
043A6E 11 F1 D3 04 5128*  	ld de,filedata
043A72 01 00 00 01 5129*  	ld bc,65536
043A76 3E 01       5130*  	ld a,mos_load
043A78 5B CF       5131*  	RST.LIL 08h
043A7A 21 2B 02 00 5132*  	ld hl,BUF_59_040
043A7E 01 40 00 00 5133*  	ld bc,64
043A82 11 3F 00 00 5134*  	ld de,63
043A86 DD 21 C0 0F 5135*  	ld ix,4032
       00          
043A8B CD 40 C9 04 5136*  	call vdu_load_img
043A8F C9          5137*  	ret
043A90             5138*  
043A90             5139*  ld_59_043:
043A90 21 50 53 04 5140*  	ld hl,F59_043
043A94 22 C5 C7 04 5141*  	ld (cur_filename),hl
043A98 11 F1 D3 04 5142*  	ld de,filedata
043A9C 01 00 00 01 5143*  	ld bc,65536
043AA0 3E 01       5144*  	ld a,mos_load
043AA2 5B CF       5145*  	RST.LIL 08h
043AA4 21 2C 02 00 5146*  	ld hl,BUF_59_043
043AA8 01 40 00 00 5147*  	ld bc,64
043AAC 11 6B 00 00 5148*  	ld de,107
043AB0 DD 21 C0 1A 5149*  	ld ix,6848
       00          
043AB5 CD 40 C9 04 5150*  	call vdu_load_img
043AB9 C9          5151*  	ret
043ABA             5152*  
043ABA             5153*  ld_59_044:
043ABA 21 64 53 04 5154*  	ld hl,F59_044
043ABE 22 C5 C7 04 5155*  	ld (cur_filename),hl
043AC2 11 F1 D3 04 5156*  	ld de,filedata
043AC6 01 00 00 01 5157*  	ld bc,65536
043ACA 3E 01       5158*  	ld a,mos_load
043ACC 5B CF       5159*  	RST.LIL 08h
043ACE 21 2D 02 00 5160*  	ld hl,BUF_59_044
043AD2 01 16 00 00 5161*  	ld bc,22
043AD6 11 6B 00 00 5162*  	ld de,107
043ADA DD 21 32 09 5163*  	ld ix,2354
       00          
043ADF CD 40 C9 04 5164*  	call vdu_load_img
043AE3 C9          5165*  	ret
043AE4             5166*  
043AE4             5167*  ld_59_045:
043AE4 21 78 53 04 5168*  	ld hl,F59_045
043AE8 22 C5 C7 04 5169*  	ld (cur_filename),hl
043AEC 11 F1 D3 04 5170*  	ld de,filedata
043AF0 01 00 00 01 5171*  	ld bc,65536
043AF4 3E 01       5172*  	ld a,mos_load
043AF6 5B CF       5173*  	RST.LIL 08h
043AF8 21 2E 02 00 5174*  	ld hl,BUF_59_045
043AFC 01 16 00 00 5175*  	ld bc,22
043B00 11 69 00 00 5176*  	ld de,105
043B04 DD 21 06 09 5177*  	ld ix,2310
       00          
043B09 CD 40 C9 04 5178*  	call vdu_load_img
043B0D C9          5179*  	ret
043B0E             5180*  
043B0E             5181*  ld_59_046:
043B0E 21 8C 53 04 5182*  	ld hl,F59_046
043B12 22 C5 C7 04 5183*  	ld (cur_filename),hl
043B16 11 F1 D3 04 5184*  	ld de,filedata
043B1A 01 00 00 01 5185*  	ld bc,65536
043B1E 3E 01       5186*  	ld a,mos_load
043B20 5B CF       5187*  	RST.LIL 08h
043B22 21 2F 02 00 5188*  	ld hl,BUF_59_046
043B26 01 40 00 00 5189*  	ld bc,64
043B2A 11 6B 00 00 5190*  	ld de,107
043B2E DD 21 C0 1A 5191*  	ld ix,6848
       00          
043B33 CD 40 C9 04 5192*  	call vdu_load_img
043B37 C9          5193*  	ret
043B38             5194*  
043B38             5195*  ld_59_048:
043B38 21 A0 53 04 5196*  	ld hl,F59_048
043B3C 22 C5 C7 04 5197*  	ld (cur_filename),hl
043B40 11 F1 D3 04 5198*  	ld de,filedata
043B44 01 00 00 01 5199*  	ld bc,65536
043B48 3E 01       5200*  	ld a,mos_load
043B4A 5B CF       5201*  	RST.LIL 08h
043B4C 21 30 02 00 5202*  	ld hl,BUF_59_048
043B50 01 6C 00 00 5203*  	ld bc,108
043B54 11 6B 00 00 5204*  	ld de,107
043B58 DD 21 24 2D 5205*  	ld ix,11556
       00          
043B5D CD 40 C9 04 5206*  	call vdu_load_img
043B61 C9          5207*  	ret
043B62             5208*  
043B62             5209*  ld_59_050:
043B62 21 B4 53 04 5210*  	ld hl,F59_050
043B66 22 C5 C7 04 5211*  	ld (cur_filename),hl
043B6A 11 F1 D3 04 5212*  	ld de,filedata
043B6E 01 00 00 01 5213*  	ld bc,65536
043B72 3E 01       5214*  	ld a,mos_load
043B74 5B CF       5215*  	RST.LIL 08h
043B76 21 31 02 00 5216*  	ld hl,BUF_59_050
043B7A 01 6A 00 00 5217*  	ld bc,106
043B7E 11 A0 00 00 5218*  	ld de,160
043B82 DD 21 40 42 5219*  	ld ix,16960
       00          
043B87 CD 40 C9 04 5220*  	call vdu_load_img
043B8B C9          5221*  	ret
043B8C             5222*  
043B8C             5223*  ld_59_051:
043B8C 21 C8 53 04 5224*  	ld hl,F59_051
043B90 22 C5 C7 04 5225*  	ld (cur_filename),hl
043B94 11 F1 D3 04 5226*  	ld de,filedata
043B98 01 00 00 01 5227*  	ld bc,65536
043B9C 3E 01       5228*  	ld a,mos_load
043B9E 5B CF       5229*  	RST.LIL 08h
043BA0 21 32 02 00 5230*  	ld hl,BUF_59_051
043BA4 01 6A 00 00 5231*  	ld bc,106
043BA8 11 A0 00 00 5232*  	ld de,160
043BAC DD 21 40 42 5233*  	ld ix,16960
       00          
043BB1 CD 40 C9 04 5234*  	call vdu_load_img
043BB5 C9          5235*  	ret
043BB6             5236*  
043BB6             5237*  ld_59_052:
043BB6 21 DC 53 04 5238*  	ld hl,F59_052
043BBA 22 C5 C7 04 5239*  	ld (cur_filename),hl
043BBE 11 F1 D3 04 5240*  	ld de,filedata
043BC2 01 00 00 01 5241*  	ld bc,65536
043BC6 3E 01       5242*  	ld a,mos_load
043BC8 5B CF       5243*  	RST.LIL 08h
043BCA 21 33 02 00 5244*  	ld hl,BUF_59_052
043BCE 01 40 01 00 5245*  	ld bc,320
043BD2 11 A0 00 00 5246*  	ld de,160
043BD6 DD 21 00 C8 5247*  	ld ix,51200
       00          
043BDB CD 40 C9 04 5248*  	call vdu_load_img
043BDF C9          5249*  	ret
043BE0             5250*  
043BE0             5251*  ; File name lookups:
043BE0 70 61 6E 65 5252*  F10_000: db "panels/10_000.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
043BF4 70 61 6E 65 5253*  F10_001: db "panels/10_001.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
043C08 70 61 6E 65 5254*  F10_007: db "panels/10_007.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
043C1C 70 61 6E 65 5255*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043C30 70 61 6E 65 5256*  F10_017: db "panels/10_017.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
043C44 70 61 6E 65 5257*  F10_018: db "panels/10_018.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
043C58 70 61 6E 65 5258*  F10_019: db "panels/10_019.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
043C6C 70 61 6E 65 5259*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043C80 70 61 6E 65 5260*  F10_021: db "panels/10_021.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
043C94 70 61 6E 65 5261*  F10_022: db "panels/10_022.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
043CA8 70 61 6E 65 5262*  F10_023: db "panels/10_023.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
043CBC 70 61 6E 65 5263*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043CD0 70 61 6E 65 5264*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043CE4 70 61 6E 65 5265*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043CF8 70 61 6E 65 5266*  F10_033: db "panels/10_033.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
043D0C 70 61 6E 65 5267*  F10_034: db "panels/10_034.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
043D20 70 61 6E 65 5268*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043D34 70 61 6E 65 5269*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043D48 70 61 6E 65 5270*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043D5C 70 61 6E 65 5271*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043D70 70 61 6E 65 5272*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043D84 70 61 6E 65 5273*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D98 70 61 6E 65 5274*  F10_045: db "panels/10_045.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
043DAC 70 61 6E 65 5275*  F10_046: db "panels/10_046.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
043DC0 70 61 6E 65 5276*  F10_048: db "panels/10_048.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
043DD4 70 61 6E 65 5277*  F10_050: db "panels/10_050.rgba2",0
       6C 73 2F 31 
       30 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
043DE8 70 61 6E 65 5278*  F10_051: db "panels/10_051.rgba2",0
       6C 73 2F 31 
       30 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
043DFC 70 61 6E 65 5279*  F10_052: db "panels/10_052.rgba2",0
       6C 73 2F 31 
       30 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
043E10 70 61 6E 65 5280*  F11_000: db "panels/11_000.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
043E24 70 61 6E 65 5281*  F11_001: db "panels/11_001.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
043E38 70 61 6E 65 5282*  F11_007: db "panels/11_007.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
043E4C 70 61 6E 65 5283*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043E60 70 61 6E 65 5284*  F11_017: db "panels/11_017.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
043E74 70 61 6E 65 5285*  F11_018: db "panels/11_018.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
043E88 70 61 6E 65 5286*  F11_019: db "panels/11_019.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
043E9C 70 61 6E 65 5287*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043EB0 70 61 6E 65 5288*  F11_021: db "panels/11_021.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
043EC4 70 61 6E 65 5289*  F11_022: db "panels/11_022.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
043ED8 70 61 6E 65 5290*  F11_023: db "panels/11_023.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
043EEC 70 61 6E 65 5291*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043F00 70 61 6E 65 5292*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043F14 70 61 6E 65 5293*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043F28 70 61 6E 65 5294*  F11_033: db "panels/11_033.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
043F3C 70 61 6E 65 5295*  F11_034: db "panels/11_034.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
043F50 70 61 6E 65 5296*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043F64 70 61 6E 65 5297*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043F78 70 61 6E 65 5298*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043F8C 70 61 6E 65 5299*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043FA0 70 61 6E 65 5300*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043FB4 70 61 6E 65 5301*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043FC8 70 61 6E 65 5302*  F11_045: db "panels/11_045.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
043FDC 70 61 6E 65 5303*  F11_046: db "panels/11_046.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
043FF0 70 61 6E 65 5304*  F11_048: db "panels/11_048.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
044004 70 61 6E 65 5305*  F11_050: db "panels/11_050.rgba2",0
       6C 73 2F 31 
       31 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
044018 70 61 6E 65 5306*  F11_051: db "panels/11_051.rgba2",0
       6C 73 2F 31 
       31 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
04402C 70 61 6E 65 5307*  F11_052: db "panels/11_052.rgba2",0
       6C 73 2F 31 
       31 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
044040 70 61 6E 65 5308*  F12_000: db "panels/12_000.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
044054 70 61 6E 65 5309*  F12_001: db "panels/12_001.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
044068 70 61 6E 65 5310*  F12_007: db "panels/12_007.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
04407C 70 61 6E 65 5311*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044090 70 61 6E 65 5312*  F12_017: db "panels/12_017.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
0440A4 70 61 6E 65 5313*  F12_018: db "panels/12_018.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
0440B8 70 61 6E 65 5314*  F12_019: db "panels/12_019.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
0440CC 70 61 6E 65 5315*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0440E0 70 61 6E 65 5316*  F12_021: db "panels/12_021.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
0440F4 70 61 6E 65 5317*  F12_022: db "panels/12_022.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
044108 70 61 6E 65 5318*  F12_023: db "panels/12_023.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
04411C 70 61 6E 65 5319*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044130 70 61 6E 65 5320*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044144 70 61 6E 65 5321*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044158 70 61 6E 65 5322*  F12_033: db "panels/12_033.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
04416C 70 61 6E 65 5323*  F12_034: db "panels/12_034.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
044180 70 61 6E 65 5324*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044194 70 61 6E 65 5325*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0441A8 70 61 6E 65 5326*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0441BC 70 61 6E 65 5327*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0441D0 70 61 6E 65 5328*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
0441E4 70 61 6E 65 5329*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0441F8 70 61 6E 65 5330*  F12_045: db "panels/12_045.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
04420C 70 61 6E 65 5331*  F12_046: db "panels/12_046.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
044220 70 61 6E 65 5332*  F12_048: db "panels/12_048.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
044234 70 61 6E 65 5333*  F12_050: db "panels/12_050.rgba2",0
       6C 73 2F 31 
       32 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
044248 70 61 6E 65 5334*  F12_051: db "panels/12_051.rgba2",0
       6C 73 2F 31 
       32 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
04425C 70 61 6E 65 5335*  F12_052: db "panels/12_052.rgba2",0
       6C 73 2F 31 
       32 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
044270 70 61 6E 65 5336*  F13_000: db "panels/13_000.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
044284 70 61 6E 65 5337*  F13_001: db "panels/13_001.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
044298 70 61 6E 65 5338*  F13_007: db "panels/13_007.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
0442AC 70 61 6E 65 5339*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0442C0 70 61 6E 65 5340*  F13_017: db "panels/13_017.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
0442D4 70 61 6E 65 5341*  F13_018: db "panels/13_018.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
0442E8 70 61 6E 65 5342*  F13_019: db "panels/13_019.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
0442FC 70 61 6E 65 5343*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044310 70 61 6E 65 5344*  F13_021: db "panels/13_021.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
044324 70 61 6E 65 5345*  F13_022: db "panels/13_022.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
044338 70 61 6E 65 5346*  F13_023: db "panels/13_023.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
04434C 70 61 6E 65 5347*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044360 70 61 6E 65 5348*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044374 70 61 6E 65 5349*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044388 70 61 6E 65 5350*  F13_033: db "panels/13_033.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
04439C 70 61 6E 65 5351*  F13_034: db "panels/13_034.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
0443B0 70 61 6E 65 5352*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0443C4 70 61 6E 65 5353*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0443D8 70 61 6E 65 5354*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0443EC 70 61 6E 65 5355*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044400 70 61 6E 65 5356*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044414 70 61 6E 65 5357*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044428 70 61 6E 65 5358*  F13_045: db "panels/13_045.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
04443C 70 61 6E 65 5359*  F13_046: db "panels/13_046.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
044450 70 61 6E 65 5360*  F13_048: db "panels/13_048.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
044464 70 61 6E 65 5361*  F13_050: db "panels/13_050.rgba2",0
       6C 73 2F 31 
       33 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
044478 70 61 6E 65 5362*  F13_051: db "panels/13_051.rgba2",0
       6C 73 2F 31 
       33 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
04448C 70 61 6E 65 5363*  F13_052: db "panels/13_052.rgba2",0
       6C 73 2F 31 
       33 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
0444A0 70 61 6E 65 5364*  F14_000: db "panels/14_000.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
0444B4 70 61 6E 65 5365*  F14_001: db "panels/14_001.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
0444C8 70 61 6E 65 5366*  F14_007: db "panels/14_007.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
0444DC 70 61 6E 65 5367*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0444F0 70 61 6E 65 5368*  F14_017: db "panels/14_017.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
044504 70 61 6E 65 5369*  F14_018: db "panels/14_018.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
044518 70 61 6E 65 5370*  F14_019: db "panels/14_019.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
04452C 70 61 6E 65 5371*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044540 70 61 6E 65 5372*  F14_021: db "panels/14_021.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
044554 70 61 6E 65 5373*  F14_022: db "panels/14_022.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
044568 70 61 6E 65 5374*  F14_023: db "panels/14_023.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
04457C 70 61 6E 65 5375*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044590 70 61 6E 65 5376*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0445A4 70 61 6E 65 5377*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0445B8 70 61 6E 65 5378*  F14_033: db "panels/14_033.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
0445CC 70 61 6E 65 5379*  F14_034: db "panels/14_034.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
0445E0 70 61 6E 65 5380*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0445F4 70 61 6E 65 5381*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044608 70 61 6E 65 5382*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
04461C 70 61 6E 65 5383*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044630 70 61 6E 65 5384*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044644 70 61 6E 65 5385*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044658 70 61 6E 65 5386*  F14_045: db "panels/14_045.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
04466C 70 61 6E 65 5387*  F14_046: db "panels/14_046.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
044680 70 61 6E 65 5388*  F14_048: db "panels/14_048.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
044694 70 61 6E 65 5389*  F14_050: db "panels/14_050.rgba2",0
       6C 73 2F 31 
       34 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
0446A8 70 61 6E 65 5390*  F14_051: db "panels/14_051.rgba2",0
       6C 73 2F 31 
       34 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
0446BC 70 61 6E 65 5391*  F14_052: db "panels/14_052.rgba2",0
       6C 73 2F 31 
       34 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
0446D0 70 61 6E 65 5392*  F15_000: db "panels/15_000.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
0446E4 70 61 6E 65 5393*  F15_001: db "panels/15_001.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
0446F8 70 61 6E 65 5394*  F15_007: db "panels/15_007.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
04470C 70 61 6E 65 5395*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044720 70 61 6E 65 5396*  F15_017: db "panels/15_017.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
044734 70 61 6E 65 5397*  F15_018: db "panels/15_018.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
044748 70 61 6E 65 5398*  F15_019: db "panels/15_019.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
04475C 70 61 6E 65 5399*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044770 70 61 6E 65 5400*  F15_021: db "panels/15_021.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
044784 70 61 6E 65 5401*  F15_022: db "panels/15_022.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
044798 70 61 6E 65 5402*  F15_023: db "panels/15_023.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
0447AC 70 61 6E 65 5403*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0447C0 70 61 6E 65 5404*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0447D4 70 61 6E 65 5405*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0447E8 70 61 6E 65 5406*  F15_033: db "panels/15_033.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
0447FC 70 61 6E 65 5407*  F15_034: db "panels/15_034.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
044810 70 61 6E 65 5408*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044824 70 61 6E 65 5409*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044838 70 61 6E 65 5410*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
04484C 70 61 6E 65 5411*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044860 70 61 6E 65 5412*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044874 70 61 6E 65 5413*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044888 70 61 6E 65 5414*  F15_045: db "panels/15_045.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
04489C 70 61 6E 65 5415*  F15_046: db "panels/15_046.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
0448B0 70 61 6E 65 5416*  F15_048: db "panels/15_048.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
0448C4 70 61 6E 65 5417*  F15_050: db "panels/15_050.rgba2",0
       6C 73 2F 31 
       35 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
0448D8 70 61 6E 65 5418*  F15_051: db "panels/15_051.rgba2",0
       6C 73 2F 31 
       35 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
0448EC 70 61 6E 65 5419*  F15_052: db "panels/15_052.rgba2",0
       6C 73 2F 31 
       35 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
044900 70 61 6E 65 5420*  F16_000: db "panels/16_000.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
044914 70 61 6E 65 5421*  F16_001: db "panels/16_001.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
044928 70 61 6E 65 5422*  F16_007: db "panels/16_007.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
04493C 70 61 6E 65 5423*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044950 70 61 6E 65 5424*  F16_017: db "panels/16_017.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
044964 70 61 6E 65 5425*  F16_018: db "panels/16_018.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
044978 70 61 6E 65 5426*  F16_019: db "panels/16_019.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
04498C 70 61 6E 65 5427*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0449A0 70 61 6E 65 5428*  F16_021: db "panels/16_021.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
0449B4 70 61 6E 65 5429*  F16_022: db "panels/16_022.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
0449C8 70 61 6E 65 5430*  F16_023: db "panels/16_023.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
0449DC 70 61 6E 65 5431*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0449F0 70 61 6E 65 5432*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044A04 70 61 6E 65 5433*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A18 70 61 6E 65 5434*  F16_033: db "panels/16_033.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
044A2C 70 61 6E 65 5435*  F16_034: db "panels/16_034.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
044A40 70 61 6E 65 5436*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044A54 70 61 6E 65 5437*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044A68 70 61 6E 65 5438*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044A7C 70 61 6E 65 5439*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044A90 70 61 6E 65 5440*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044AA4 70 61 6E 65 5441*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044AB8 70 61 6E 65 5442*  F16_045: db "panels/16_045.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
044ACC 70 61 6E 65 5443*  F16_046: db "panels/16_046.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
044AE0 70 61 6E 65 5444*  F16_048: db "panels/16_048.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
044AF4 70 61 6E 65 5445*  F16_050: db "panels/16_050.rgba2",0
       6C 73 2F 31 
       36 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
044B08 70 61 6E 65 5446*  F16_051: db "panels/16_051.rgba2",0
       6C 73 2F 31 
       36 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
044B1C 70 61 6E 65 5447*  F16_052: db "panels/16_052.rgba2",0
       6C 73 2F 31 
       36 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
044B30 70 61 6E 65 5448*  F17_000: db "panels/17_000.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
044B44 70 61 6E 65 5449*  F17_001: db "panels/17_001.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
044B58 70 61 6E 65 5450*  F17_007: db "panels/17_007.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
044B6C 70 61 6E 65 5451*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044B80 70 61 6E 65 5452*  F17_017: db "panels/17_017.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
044B94 70 61 6E 65 5453*  F17_018: db "panels/17_018.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
044BA8 70 61 6E 65 5454*  F17_019: db "panels/17_019.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
044BBC 70 61 6E 65 5455*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044BD0 70 61 6E 65 5456*  F17_021: db "panels/17_021.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
044BE4 70 61 6E 65 5457*  F17_022: db "panels/17_022.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
044BF8 70 61 6E 65 5458*  F17_023: db "panels/17_023.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
044C0C 70 61 6E 65 5459*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044C20 70 61 6E 65 5460*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044C34 70 61 6E 65 5461*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044C48 70 61 6E 65 5462*  F17_033: db "panels/17_033.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
044C5C 70 61 6E 65 5463*  F17_034: db "panels/17_034.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
044C70 70 61 6E 65 5464*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044C84 70 61 6E 65 5465*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044C98 70 61 6E 65 5466*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044CAC 70 61 6E 65 5467*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044CC0 70 61 6E 65 5468*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044CD4 70 61 6E 65 5469*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044CE8 70 61 6E 65 5470*  F17_045: db "panels/17_045.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
044CFC 70 61 6E 65 5471*  F17_046: db "panels/17_046.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
044D10 70 61 6E 65 5472*  F17_048: db "panels/17_048.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
044D24 70 61 6E 65 5473*  F17_050: db "panels/17_050.rgba2",0
       6C 73 2F 31 
       37 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
044D38 70 61 6E 65 5474*  F17_051: db "panels/17_051.rgba2",0
       6C 73 2F 31 
       37 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
044D4C 70 61 6E 65 5475*  F17_052: db "panels/17_052.rgba2",0
       6C 73 2F 31 
       37 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
044D60 70 61 6E 65 5476*  F57_000: db "panels/57_000.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
044D74 70 61 6E 65 5477*  F57_001: db "panels/57_001.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
044D88 70 61 6E 65 5478*  F57_007: db "panels/57_007.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
044D9C 70 61 6E 65 5479*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044DB0 70 61 6E 65 5480*  F57_017: db "panels/57_017.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
044DC4 70 61 6E 65 5481*  F57_018: db "panels/57_018.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
044DD8 70 61 6E 65 5482*  F57_019: db "panels/57_019.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
044DEC 70 61 6E 65 5483*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044E00 70 61 6E 65 5484*  F57_021: db "panels/57_021.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
044E14 70 61 6E 65 5485*  F57_022: db "panels/57_022.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
044E28 70 61 6E 65 5486*  F57_023: db "panels/57_023.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
044E3C 70 61 6E 65 5487*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044E50 70 61 6E 65 5488*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044E64 70 61 6E 65 5489*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044E78 70 61 6E 65 5490*  F57_033: db "panels/57_033.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
044E8C 70 61 6E 65 5491*  F57_034: db "panels/57_034.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
044EA0 70 61 6E 65 5492*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044EB4 70 61 6E 65 5493*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044EC8 70 61 6E 65 5494*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044EDC 70 61 6E 65 5495*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044EF0 70 61 6E 65 5496*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044F04 70 61 6E 65 5497*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044F18 70 61 6E 65 5498*  F57_045: db "panels/57_045.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
044F2C 70 61 6E 65 5499*  F57_046: db "panels/57_046.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
044F40 70 61 6E 65 5500*  F57_048: db "panels/57_048.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
044F54 70 61 6E 65 5501*  F57_050: db "panels/57_050.rgba2",0
       6C 73 2F 35 
       37 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
044F68 70 61 6E 65 5502*  F57_051: db "panels/57_051.rgba2",0
       6C 73 2F 35 
       37 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
044F7C 70 61 6E 65 5503*  F57_052: db "panels/57_052.rgba2",0
       6C 73 2F 35 
       37 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
044F90 70 61 6E 65 5504*  F58_000: db "panels/58_000.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
044FA4 70 61 6E 65 5505*  F58_001: db "panels/58_001.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
044FB8 70 61 6E 65 5506*  F58_007: db "panels/58_007.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
044FCC 70 61 6E 65 5507*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044FE0 70 61 6E 65 5508*  F58_017: db "panels/58_017.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
044FF4 70 61 6E 65 5509*  F58_018: db "panels/58_018.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
045008 70 61 6E 65 5510*  F58_019: db "panels/58_019.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
04501C 70 61 6E 65 5511*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045030 70 61 6E 65 5512*  F58_021: db "panels/58_021.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
045044 70 61 6E 65 5513*  F58_022: db "panels/58_022.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
045058 70 61 6E 65 5514*  F58_023: db "panels/58_023.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
04506C 70 61 6E 65 5515*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
045080 70 61 6E 65 5516*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
045094 70 61 6E 65 5517*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0450A8 70 61 6E 65 5518*  F58_033: db "panels/58_033.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
0450BC 70 61 6E 65 5519*  F58_034: db "panels/58_034.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
0450D0 70 61 6E 65 5520*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0450E4 70 61 6E 65 5521*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0450F8 70 61 6E 65 5522*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
04510C 70 61 6E 65 5523*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045120 70 61 6E 65 5524*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
045134 70 61 6E 65 5525*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045148 70 61 6E 65 5526*  F58_045: db "panels/58_045.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
04515C 70 61 6E 65 5527*  F58_046: db "panels/58_046.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
045170 70 61 6E 65 5528*  F58_048: db "panels/58_048.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
045184 70 61 6E 65 5529*  F58_050: db "panels/58_050.rgba2",0
       6C 73 2F 35 
       38 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
045198 70 61 6E 65 5530*  F58_051: db "panels/58_051.rgba2",0
       6C 73 2F 35 
       38 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
0451AC 70 61 6E 65 5531*  F58_052: db "panels/58_052.rgba2",0
       6C 73 2F 35 
       38 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
0451C0 70 61 6E 65 5532*  F59_000: db "panels/59_000.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       30 2E 72 67 
       62 61 32 00 
0451D4 70 61 6E 65 5533*  F59_001: db "panels/59_001.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       31 2E 72 67 
       62 61 32 00 
0451E8 70 61 6E 65 5534*  F59_007: db "panels/59_007.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       37 2E 72 67 
       62 61 32 00 
0451FC 70 61 6E 65 5535*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
045210 70 61 6E 65 5536*  F59_017: db "panels/59_017.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       37 2E 72 67 
       62 61 32 00 
045224 70 61 6E 65 5537*  F59_018: db "panels/59_018.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       38 2E 72 67 
       62 61 32 00 
045238 70 61 6E 65 5538*  F59_019: db "panels/59_019.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       39 2E 72 67 
       62 61 32 00 
04524C 70 61 6E 65 5539*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045260 70 61 6E 65 5540*  F59_021: db "panels/59_021.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       31 2E 72 67 
       62 61 32 00 
045274 70 61 6E 65 5541*  F59_022: db "panels/59_022.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       32 2E 72 67 
       62 61 32 00 
045288 70 61 6E 65 5542*  F59_023: db "panels/59_023.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       33 2E 72 67 
       62 61 32 00 
04529C 70 61 6E 65 5543*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
0452B0 70 61 6E 65 5544*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0452C4 70 61 6E 65 5545*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0452D8 70 61 6E 65 5546*  F59_033: db "panels/59_033.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       33 2E 72 67 
       62 61 32 00 
0452EC 70 61 6E 65 5547*  F59_034: db "panels/59_034.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       34 2E 72 67 
       62 61 32 00 
045300 70 61 6E 65 5548*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
045314 70 61 6E 65 5549*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
045328 70 61 6E 65 5550*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
04533C 70 61 6E 65 5551*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045350 70 61 6E 65 5552*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
045364 70 61 6E 65 5553*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045378 70 61 6E 65 5554*  F59_045: db "panels/59_045.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       35 2E 72 67 
       62 61 32 00 
04538C 70 61 6E 65 5555*  F59_046: db "panels/59_046.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       36 2E 72 67 
       62 61 32 00 
0453A0 70 61 6E 65 5556*  F59_048: db "panels/59_048.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
0453B4 70 61 6E 65 5557*  F59_050: db "panels/59_050.rgba2",0
       6C 73 2F 35 
       39 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
0453C8 70 61 6E 65 5558*  F59_051: db "panels/59_051.rgba2",0
       6C 73 2F 35 
       39 5F 30 35 
       31 2E 72 67 
       62 61 32 00 
0453DC 70 61 6E 65 5559*  F59_052: db "panels/59_052.rgba2",0
       6C 73 2F 35 
       39 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
0453F0             5560*  
0453F0             5561*  ; sprite buffer ids:
0453F0             5562*  BUF_20_012: equ 0x0234
0453F0             5563*  BUF_20_028: equ 0x0235
0453F0             5564*  BUF_20_040: equ 0x0236
0453F0             5565*  BUF_20_048: equ 0x0237
0453F0             5566*  BUF_20_052: equ 0x0238
0453F0             5567*  BUF_21_012: equ 0x0239
0453F0             5568*  BUF_21_028: equ 0x023A
0453F0             5569*  BUF_21_040: equ 0x023B
0453F0             5570*  BUF_21_048: equ 0x023C
0453F0             5571*  BUF_21_052: equ 0x023D
0453F0             5572*  BUF_22_012: equ 0x023E
0453F0             5573*  BUF_22_028: equ 0x023F
0453F0             5574*  BUF_22_040: equ 0x0240
0453F0             5575*  BUF_22_048: equ 0x0241
0453F0             5576*  BUF_22_052: equ 0x0242
0453F0             5577*  BUF_23_012: equ 0x0243
0453F0             5578*  BUF_23_028: equ 0x0244
0453F0             5579*  BUF_23_040: equ 0x0245
0453F0             5580*  BUF_23_048: equ 0x0246
0453F0             5581*  BUF_23_052: equ 0x0247
0453F0             5582*  BUF_24_012: equ 0x0248
0453F0             5583*  BUF_24_028: equ 0x0249
0453F0             5584*  BUF_24_040: equ 0x024A
0453F0             5585*  BUF_24_048: equ 0x024B
0453F0             5586*  BUF_24_052: equ 0x024C
0453F0             5587*  BUF_40_012: equ 0x024D
0453F0             5588*  BUF_40_028: equ 0x024E
0453F0             5589*  BUF_40_040: equ 0x024F
0453F0             5590*  BUF_40_048: equ 0x0250
0453F0             5591*  BUF_40_052: equ 0x0251
0453F0             5592*  BUF_41_012: equ 0x0252
0453F0             5593*  BUF_41_028: equ 0x0253
0453F0             5594*  BUF_41_040: equ 0x0254
0453F0             5595*  BUF_41_048: equ 0x0255
0453F0             5596*  BUF_41_052: equ 0x0256
0453F0             5597*  BUF_42_012: equ 0x0257
0453F0             5598*  BUF_42_028: equ 0x0258
0453F0             5599*  BUF_42_040: equ 0x0259
0453F0             5600*  BUF_42_048: equ 0x025A
0453F0             5601*  BUF_42_052: equ 0x025B
0453F0             5602*  BUF_43_012: equ 0x025C
0453F0             5603*  BUF_43_028: equ 0x025D
0453F0             5604*  BUF_43_040: equ 0x025E
0453F0             5605*  BUF_43_048: equ 0x025F
0453F0             5606*  BUF_43_052: equ 0x0260
0453F0             5607*  BUF_44_012: equ 0x0261
0453F0             5608*  BUF_44_028: equ 0x0262
0453F0             5609*  BUF_44_040: equ 0x0263
0453F0             5610*  BUF_44_048: equ 0x0264
0453F0             5611*  BUF_44_052: equ 0x0265
0453F0             5612*  BUF_45_012: equ 0x0266
0453F0             5613*  BUF_45_028: equ 0x0267
0453F0             5614*  BUF_45_040: equ 0x0268
0453F0             5615*  BUF_45_048: equ 0x0269
0453F0             5616*  BUF_45_052: equ 0x026A
0453F0             5617*  BUF_46_012: equ 0x026B
0453F0             5618*  BUF_46_028: equ 0x026C
0453F0             5619*  BUF_46_040: equ 0x026D
0453F0             5620*  BUF_46_048: equ 0x026E
0453F0             5621*  BUF_46_052: equ 0x026F
0453F0             5622*  BUF_47_012: equ 0x0270
0453F0             5623*  BUF_47_028: equ 0x0271
0453F0             5624*  BUF_47_040: equ 0x0272
0453F0             5625*  BUF_47_048: equ 0x0273
0453F0             5626*  BUF_47_052: equ 0x0274
0453F0             5627*  BUF_48_012: equ 0x0275
0453F0             5628*  BUF_48_028: equ 0x0276
0453F0             5629*  BUF_48_040: equ 0x0277
0453F0             5630*  BUF_48_048: equ 0x0278
0453F0             5631*  BUF_48_052: equ 0x0279
0453F0             5632*  BUF_49_012: equ 0x027A
0453F0             5633*  BUF_49_028: equ 0x027B
0453F0             5634*  BUF_49_040: equ 0x027C
0453F0             5635*  BUF_49_048: equ 0x027D
0453F0             5636*  BUF_49_052: equ 0x027E
0453F0             5637*  BUF_50_012: equ 0x027F
0453F0             5638*  BUF_50_028: equ 0x0280
0453F0             5639*  BUF_50_040: equ 0x0281
0453F0             5640*  BUF_50_048: equ 0x0282
0453F0             5641*  BUF_50_052: equ 0x0283
0453F0             5642*  BUF_51_012: equ 0x0284
0453F0             5643*  BUF_51_028: equ 0x0285
0453F0             5644*  BUF_51_040: equ 0x0286
0453F0             5645*  BUF_51_048: equ 0x0287
0453F0             5646*  BUF_51_052: equ 0x0288
0453F0             5647*  BUF_52_012: equ 0x0289
0453F0             5648*  BUF_52_028: equ 0x028A
0453F0             5649*  BUF_52_040: equ 0x028B
0453F0             5650*  BUF_52_048: equ 0x028C
0453F0             5651*  BUF_52_052: equ 0x028D
0453F0             5652*  BUF_56_012: equ 0x028E
0453F0             5653*  BUF_56_028: equ 0x028F
0453F0             5654*  BUF_56_040: equ 0x0290
0453F0             5655*  BUF_56_048: equ 0x0291
0453F0             5656*  BUF_56_052: equ 0x0292
0453F0             5657*  BUF_60_012: equ 0x0293
0453F0             5658*  BUF_60_028: equ 0x0294
0453F0             5659*  BUF_60_040: equ 0x0295
0453F0             5660*  BUF_60_048: equ 0x0296
0453F0             5661*  BUF_60_052: equ 0x0297
0453F0             5662*  
0453F0             5663*  sprite_num_panels: equ 100
0453F0             5664*  
0453F0             5665*  ; sprite buffer id reverse lookup:
0453F0             5666*  sprite_buffer_id_lut:
0453F0 34 02 00    5667*  	dl BUF_20_012
0453F3 35 02 00    5668*  	dl BUF_20_028
0453F6 36 02 00    5669*  	dl BUF_20_040
0453F9 37 02 00    5670*  	dl BUF_20_048
0453FC 38 02 00    5671*  	dl BUF_20_052
0453FF 39 02 00    5672*  	dl BUF_21_012
045402 3A 02 00    5673*  	dl BUF_21_028
045405 3B 02 00    5674*  	dl BUF_21_040
045408 3C 02 00    5675*  	dl BUF_21_048
04540B 3D 02 00    5676*  	dl BUF_21_052
04540E 3E 02 00    5677*  	dl BUF_22_012
045411 3F 02 00    5678*  	dl BUF_22_028
045414 40 02 00    5679*  	dl BUF_22_040
045417 41 02 00    5680*  	dl BUF_22_048
04541A 42 02 00    5681*  	dl BUF_22_052
04541D 43 02 00    5682*  	dl BUF_23_012
045420 44 02 00    5683*  	dl BUF_23_028
045423 45 02 00    5684*  	dl BUF_23_040
045426 46 02 00    5685*  	dl BUF_23_048
045429 47 02 00    5686*  	dl BUF_23_052
04542C 48 02 00    5687*  	dl BUF_24_012
04542F 49 02 00    5688*  	dl BUF_24_028
045432 4A 02 00    5689*  	dl BUF_24_040
045435 4B 02 00    5690*  	dl BUF_24_048
045438 4C 02 00    5691*  	dl BUF_24_052
04543B 4D 02 00    5692*  	dl BUF_40_012
04543E 4E 02 00    5693*  	dl BUF_40_028
045441 4F 02 00    5694*  	dl BUF_40_040
045444 50 02 00    5695*  	dl BUF_40_048
045447 51 02 00    5696*  	dl BUF_40_052
04544A 52 02 00    5697*  	dl BUF_41_012
04544D 53 02 00    5698*  	dl BUF_41_028
045450 54 02 00    5699*  	dl BUF_41_040
045453 55 02 00    5700*  	dl BUF_41_048
045456 56 02 00    5701*  	dl BUF_41_052
045459 57 02 00    5702*  	dl BUF_42_012
04545C 58 02 00    5703*  	dl BUF_42_028
04545F 59 02 00    5704*  	dl BUF_42_040
045462 5A 02 00    5705*  	dl BUF_42_048
045465 5B 02 00    5706*  	dl BUF_42_052
045468 5C 02 00    5707*  	dl BUF_43_012
04546B 5D 02 00    5708*  	dl BUF_43_028
04546E 5E 02 00    5709*  	dl BUF_43_040
045471 5F 02 00    5710*  	dl BUF_43_048
045474 60 02 00    5711*  	dl BUF_43_052
045477 61 02 00    5712*  	dl BUF_44_012
04547A 62 02 00    5713*  	dl BUF_44_028
04547D 63 02 00    5714*  	dl BUF_44_040
045480 64 02 00    5715*  	dl BUF_44_048
045483 65 02 00    5716*  	dl BUF_44_052
045486 66 02 00    5717*  	dl BUF_45_012
045489 67 02 00    5718*  	dl BUF_45_028
04548C 68 02 00    5719*  	dl BUF_45_040
04548F 69 02 00    5720*  	dl BUF_45_048
045492 6A 02 00    5721*  	dl BUF_45_052
045495 6B 02 00    5722*  	dl BUF_46_012
045498 6C 02 00    5723*  	dl BUF_46_028
04549B 6D 02 00    5724*  	dl BUF_46_040
04549E 6E 02 00    5725*  	dl BUF_46_048
0454A1 6F 02 00    5726*  	dl BUF_46_052
0454A4 70 02 00    5727*  	dl BUF_47_012
0454A7 71 02 00    5728*  	dl BUF_47_028
0454AA 72 02 00    5729*  	dl BUF_47_040
0454AD 73 02 00    5730*  	dl BUF_47_048
0454B0 74 02 00    5731*  	dl BUF_47_052
0454B3 75 02 00    5732*  	dl BUF_48_012
0454B6 76 02 00    5733*  	dl BUF_48_028
0454B9 77 02 00    5734*  	dl BUF_48_040
0454BC 78 02 00    5735*  	dl BUF_48_048
0454BF 79 02 00    5736*  	dl BUF_48_052
0454C2 7A 02 00    5737*  	dl BUF_49_012
0454C5 7B 02 00    5738*  	dl BUF_49_028
0454C8 7C 02 00    5739*  	dl BUF_49_040
0454CB 7D 02 00    5740*  	dl BUF_49_048
0454CE 7E 02 00    5741*  	dl BUF_49_052
0454D1 7F 02 00    5742*  	dl BUF_50_012
0454D4 80 02 00    5743*  	dl BUF_50_028
0454D7 81 02 00    5744*  	dl BUF_50_040
0454DA 82 02 00    5745*  	dl BUF_50_048
0454DD 83 02 00    5746*  	dl BUF_50_052
0454E0 84 02 00    5747*  	dl BUF_51_012
0454E3 85 02 00    5748*  	dl BUF_51_028
0454E6 86 02 00    5749*  	dl BUF_51_040
0454E9 87 02 00    5750*  	dl BUF_51_048
0454EC 88 02 00    5751*  	dl BUF_51_052
0454EF 89 02 00    5752*  	dl BUF_52_012
0454F2 8A 02 00    5753*  	dl BUF_52_028
0454F5 8B 02 00    5754*  	dl BUF_52_040
0454F8 8C 02 00    5755*  	dl BUF_52_048
0454FB 8D 02 00    5756*  	dl BUF_52_052
0454FE 8E 02 00    5757*  	dl BUF_56_012
045501 8F 02 00    5758*  	dl BUF_56_028
045504 90 02 00    5759*  	dl BUF_56_040
045507 91 02 00    5760*  	dl BUF_56_048
04550A 92 02 00    5761*  	dl BUF_56_052
04550D 93 02 00    5762*  	dl BUF_60_012
045510 94 02 00    5763*  	dl BUF_60_028
045513 95 02 00    5764*  	dl BUF_60_040
045516 96 02 00    5765*  	dl BUF_60_048
045519 97 02 00    5766*  	dl BUF_60_052
04551C             5767*  
04551C             5768*  ; sprite load routines jump table:
04551C             5769*  sprite_load_panels_table:
04551C 48 56 04    5770*  	dl ld_20_012
04551F 72 56 04    5771*  	dl ld_20_028
045522 9C 56 04    5772*  	dl ld_20_040
045525 C6 56 04    5773*  	dl ld_20_048
045528 F0 56 04    5774*  	dl ld_20_052
04552B 1A 57 04    5775*  	dl ld_21_012
04552E 44 57 04    5776*  	dl ld_21_028
045531 6E 57 04    5777*  	dl ld_21_040
045534 98 57 04    5778*  	dl ld_21_048
045537 C2 57 04    5779*  	dl ld_21_052
04553A EC 57 04    5780*  	dl ld_22_012
04553D 16 58 04    5781*  	dl ld_22_028
045540 40 58 04    5782*  	dl ld_22_040
045543 6A 58 04    5783*  	dl ld_22_048
045546 94 58 04    5784*  	dl ld_22_052
045549 BE 58 04    5785*  	dl ld_23_012
04554C E8 58 04    5786*  	dl ld_23_028
04554F 12 59 04    5787*  	dl ld_23_040
045552 3C 59 04    5788*  	dl ld_23_048
045555 66 59 04    5789*  	dl ld_23_052
045558 90 59 04    5790*  	dl ld_24_012
04555B BA 59 04    5791*  	dl ld_24_028
04555E E4 59 04    5792*  	dl ld_24_040
045561 0E 5A 04    5793*  	dl ld_24_048
045564 38 5A 04    5794*  	dl ld_24_052
045567 62 5A 04    5795*  	dl ld_40_012
04556A 8C 5A 04    5796*  	dl ld_40_028
04556D B6 5A 04    5797*  	dl ld_40_040
045570 E0 5A 04    5798*  	dl ld_40_048
045573 0A 5B 04    5799*  	dl ld_40_052
045576 34 5B 04    5800*  	dl ld_41_012
045579 5E 5B 04    5801*  	dl ld_41_028
04557C 88 5B 04    5802*  	dl ld_41_040
04557F B2 5B 04    5803*  	dl ld_41_048
045582 DC 5B 04    5804*  	dl ld_41_052
045585 06 5C 04    5805*  	dl ld_42_012
045588 30 5C 04    5806*  	dl ld_42_028
04558B 5A 5C 04    5807*  	dl ld_42_040
04558E 84 5C 04    5808*  	dl ld_42_048
045591 AE 5C 04    5809*  	dl ld_42_052
045594 D8 5C 04    5810*  	dl ld_43_012
045597 02 5D 04    5811*  	dl ld_43_028
04559A 2C 5D 04    5812*  	dl ld_43_040
04559D 56 5D 04    5813*  	dl ld_43_048
0455A0 80 5D 04    5814*  	dl ld_43_052
0455A3 AA 5D 04    5815*  	dl ld_44_012
0455A6 D4 5D 04    5816*  	dl ld_44_028
0455A9 FE 5D 04    5817*  	dl ld_44_040
0455AC 28 5E 04    5818*  	dl ld_44_048
0455AF 52 5E 04    5819*  	dl ld_44_052
0455B2 7C 5E 04    5820*  	dl ld_45_012
0455B5 A6 5E 04    5821*  	dl ld_45_028
0455B8 D0 5E 04    5822*  	dl ld_45_040
0455BB FA 5E 04    5823*  	dl ld_45_048
0455BE 24 5F 04    5824*  	dl ld_45_052
0455C1 4E 5F 04    5825*  	dl ld_46_012
0455C4 78 5F 04    5826*  	dl ld_46_028
0455C7 A2 5F 04    5827*  	dl ld_46_040
0455CA CC 5F 04    5828*  	dl ld_46_048
0455CD F6 5F 04    5829*  	dl ld_46_052
0455D0 20 60 04    5830*  	dl ld_47_012
0455D3 4A 60 04    5831*  	dl ld_47_028
0455D6 74 60 04    5832*  	dl ld_47_040
0455D9 9E 60 04    5833*  	dl ld_47_048
0455DC C8 60 04    5834*  	dl ld_47_052
0455DF F2 60 04    5835*  	dl ld_48_012
0455E2 1C 61 04    5836*  	dl ld_48_028
0455E5 46 61 04    5837*  	dl ld_48_040
0455E8 70 61 04    5838*  	dl ld_48_048
0455EB 9A 61 04    5839*  	dl ld_48_052
0455EE C4 61 04    5840*  	dl ld_49_012
0455F1 EE 61 04    5841*  	dl ld_49_028
0455F4 18 62 04    5842*  	dl ld_49_040
0455F7 42 62 04    5843*  	dl ld_49_048
0455FA 6C 62 04    5844*  	dl ld_49_052
0455FD 96 62 04    5845*  	dl ld_50_012
045600 C0 62 04    5846*  	dl ld_50_028
045603 EA 62 04    5847*  	dl ld_50_040
045606 14 63 04    5848*  	dl ld_50_048
045609 3E 63 04    5849*  	dl ld_50_052
04560C 68 63 04    5850*  	dl ld_51_012
04560F 92 63 04    5851*  	dl ld_51_028
045612 BC 63 04    5852*  	dl ld_51_040
045615 E6 63 04    5853*  	dl ld_51_048
045618 10 64 04    5854*  	dl ld_51_052
04561B 3A 64 04    5855*  	dl ld_52_012
04561E 64 64 04    5856*  	dl ld_52_028
045621 8E 64 04    5857*  	dl ld_52_040
045624 B8 64 04    5858*  	dl ld_52_048
045627 E2 64 04    5859*  	dl ld_52_052
04562A 0C 65 04    5860*  	dl ld_56_012
04562D 36 65 04    5861*  	dl ld_56_028
045630 60 65 04    5862*  	dl ld_56_040
045633 8A 65 04    5863*  	dl ld_56_048
045636 B4 65 04    5864*  	dl ld_56_052
045639 DE 65 04    5865*  	dl ld_60_012
04563C 08 66 04    5866*  	dl ld_60_028
04563F 32 66 04    5867*  	dl ld_60_040
045642 5C 66 04    5868*  	dl ld_60_048
045645 86 66 04    5869*  	dl ld_60_052
045648             5870*  
045648             5871*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
045648             5872*  
045648             5873*  ld_20_012:
045648 21 B0 66 04 5874*  	ld hl,F20_012
04564C 22 C5 C7 04 5875*  	ld (cur_filename),hl
045650 11 F1 D3 04 5876*  	ld de,filedata
045654 01 00 00 01 5877*  	ld bc,65536
045658 3E 01       5878*  	ld a,mos_load
04565A 5B CF       5879*  	RST.LIL 08h
04565C 21 34 02 00 5880*  	ld hl,BUF_20_012
045660 01 13 00 00 5881*  	ld bc,19
045664 11 12 00 00 5882*  	ld de,18
045668 DD 21 56 01 5883*  	ld ix,342
       00          
04566D CD 40 C9 04 5884*  	call vdu_load_img
045671 C9          5885*  	ret
045672             5886*  
045672             5887*  ld_20_028:
045672 21 C4 66 04 5888*  	ld hl,F20_028
045676 22 C5 C7 04 5889*  	ld (cur_filename),hl
04567A 11 F1 D3 04 5890*  	ld de,filedata
04567E 01 00 00 01 5891*  	ld bc,65536
045682 3E 01       5892*  	ld a,mos_load
045684 5B CF       5893*  	RST.LIL 08h
045686 21 35 02 00 5894*  	ld hl,BUF_20_028
04568A 01 17 00 00 5895*  	ld bc,23
04568E 11 17 00 00 5896*  	ld de,23
045692 DD 21 11 02 5897*  	ld ix,529
       00          
045697 CD 40 C9 04 5898*  	call vdu_load_img
04569B C9          5899*  	ret
04569C             5900*  
04569C             5901*  ld_20_040:
04569C 21 D8 66 04 5902*  	ld hl,F20_040
0456A0 22 C5 C7 04 5903*  	ld (cur_filename),hl
0456A4 11 F1 D3 04 5904*  	ld de,filedata
0456A8 01 00 00 01 5905*  	ld bc,65536
0456AC 3E 01       5906*  	ld a,mos_load
0456AE 5B CF       5907*  	RST.LIL 08h
0456B0 21 36 02 00 5908*  	ld hl,BUF_20_040
0456B4 01 1F 00 00 5909*  	ld bc,31
0456B8 11 21 00 00 5910*  	ld de,33
0456BC DD 21 FF 03 5911*  	ld ix,1023
       00          
0456C1 CD 40 C9 04 5912*  	call vdu_load_img
0456C5 C9          5913*  	ret
0456C6             5914*  
0456C6             5915*  ld_20_048:
0456C6 21 EC 66 04 5916*  	ld hl,F20_048
0456CA 22 C5 C7 04 5917*  	ld (cur_filename),hl
0456CE 11 F1 D3 04 5918*  	ld de,filedata
0456D2 01 00 00 01 5919*  	ld bc,65536
0456D6 3E 01       5920*  	ld a,mos_load
0456D8 5B CF       5921*  	RST.LIL 08h
0456DA 21 37 02 00 5922*  	ld hl,BUF_20_048
0456DE 01 36 00 00 5923*  	ld bc,54
0456E2 11 38 00 00 5924*  	ld de,56
0456E6 DD 21 D0 0B 5925*  	ld ix,3024
       00          
0456EB CD 40 C9 04 5926*  	call vdu_load_img
0456EF C9          5927*  	ret
0456F0             5928*  
0456F0             5929*  ld_20_052:
0456F0 21 00 67 04 5930*  	ld hl,F20_052
0456F4 22 C5 C7 04 5931*  	ld (cur_filename),hl
0456F8 11 F1 D3 04 5932*  	ld de,filedata
0456FC 01 00 00 01 5933*  	ld bc,65536
045700 3E 01       5934*  	ld a,mos_load
045702 5B CF       5935*  	RST.LIL 08h
045704 21 38 02 00 5936*  	ld hl,BUF_20_052
045708 01 6A 00 00 5937*  	ld bc,106
04570C 11 5A 00 00 5938*  	ld de,90
045710 DD 21 44 25 5939*  	ld ix,9540
       00          
045715 CD 40 C9 04 5940*  	call vdu_load_img
045719 C9          5941*  	ret
04571A             5942*  
04571A             5943*  ld_21_012:
04571A 21 14 67 04 5944*  	ld hl,F21_012
04571E 22 C5 C7 04 5945*  	ld (cur_filename),hl
045722 11 F1 D3 04 5946*  	ld de,filedata
045726 01 00 00 01 5947*  	ld bc,65536
04572A 3E 01       5948*  	ld a,mos_load
04572C 5B CF       5949*  	RST.LIL 08h
04572E 21 39 02 00 5950*  	ld hl,BUF_21_012
045732 01 0B 00 00 5951*  	ld bc,11
045736 11 0B 00 00 5952*  	ld de,11
04573A DD 21 79 00 5953*  	ld ix,121
       00          
04573F CD 40 C9 04 5954*  	call vdu_load_img
045743 C9          5955*  	ret
045744             5956*  
045744             5957*  ld_21_028:
045744 21 28 67 04 5958*  	ld hl,F21_028
045748 22 C5 C7 04 5959*  	ld (cur_filename),hl
04574C 11 F1 D3 04 5960*  	ld de,filedata
045750 01 00 00 01 5961*  	ld bc,65536
045754 3E 01       5962*  	ld a,mos_load
045756 5B CF       5963*  	RST.LIL 08h
045758 21 3A 02 00 5964*  	ld hl,BUF_21_028
04575C 01 0E 00 00 5965*  	ld bc,14
045760 11 0E 00 00 5966*  	ld de,14
045764 DD 21 C4 00 5967*  	ld ix,196
       00          
045769 CD 40 C9 04 5968*  	call vdu_load_img
04576D C9          5969*  	ret
04576E             5970*  
04576E             5971*  ld_21_040:
04576E 21 3C 67 04 5972*  	ld hl,F21_040
045772 22 C5 C7 04 5973*  	ld (cur_filename),hl
045776 11 F1 D3 04 5974*  	ld de,filedata
04577A 01 00 00 01 5975*  	ld bc,65536
04577E 3E 01       5976*  	ld a,mos_load
045780 5B CF       5977*  	RST.LIL 08h
045782 21 3B 02 00 5978*  	ld hl,BUF_21_040
045786 01 14 00 00 5979*  	ld bc,20
04578A 11 15 00 00 5980*  	ld de,21
04578E DD 21 A4 01 5981*  	ld ix,420
       00          
045793 CD 40 C9 04 5982*  	call vdu_load_img
045797 C9          5983*  	ret
045798             5984*  
045798             5985*  ld_21_048:
045798 21 50 67 04 5986*  	ld hl,F21_048
04579C 22 C5 C7 04 5987*  	ld (cur_filename),hl
0457A0 11 F1 D3 04 5988*  	ld de,filedata
0457A4 01 00 00 01 5989*  	ld bc,65536
0457A8 3E 01       5990*  	ld a,mos_load
0457AA 5B CF       5991*  	RST.LIL 08h
0457AC 21 3C 02 00 5992*  	ld hl,BUF_21_048
0457B0 01 21 00 00 5993*  	ld bc,33
0457B4 11 24 00 00 5994*  	ld de,36
0457B8 DD 21 A4 04 5995*  	ld ix,1188
       00          
0457BD CD 40 C9 04 5996*  	call vdu_load_img
0457C1 C9          5997*  	ret
0457C2             5998*  
0457C2             5999*  ld_21_052:
0457C2 21 64 67 04 6000*  	ld hl,F21_052
0457C6 22 C5 C7 04 6001*  	ld (cur_filename),hl
0457CA 11 F1 D3 04 6002*  	ld de,filedata
0457CE 01 00 00 01 6003*  	ld bc,65536
0457D2 3E 01       6004*  	ld a,mos_load
0457D4 5B CF       6005*  	RST.LIL 08h
0457D6 21 3D 02 00 6006*  	ld hl,BUF_21_052
0457DA 01 64 00 00 6007*  	ld bc,100
0457DE 11 1E 00 00 6008*  	ld de,30
0457E2 DD 21 B8 0B 6009*  	ld ix,3000
       00          
0457E7 CD 40 C9 04 6010*  	call vdu_load_img
0457EB C9          6011*  	ret
0457EC             6012*  
0457EC             6013*  ld_22_012:
0457EC 21 78 67 04 6014*  	ld hl,F22_012
0457F0 22 C5 C7 04 6015*  	ld (cur_filename),hl
0457F4 11 F1 D3 04 6016*  	ld de,filedata
0457F8 01 00 00 01 6017*  	ld bc,65536
0457FC 3E 01       6018*  	ld a,mos_load
0457FE 5B CF       6019*  	RST.LIL 08h
045800 21 3E 02 00 6020*  	ld hl,BUF_22_012
045804 01 11 00 00 6021*  	ld bc,17
045808 11 0B 00 00 6022*  	ld de,11
04580C DD 21 BB 00 6023*  	ld ix,187
       00          
045811 CD 40 C9 04 6024*  	call vdu_load_img
045815 C9          6025*  	ret
045816             6026*  
045816             6027*  ld_22_028:
045816 21 8C 67 04 6028*  	ld hl,F22_028
04581A 22 C5 C7 04 6029*  	ld (cur_filename),hl
04581E 11 F1 D3 04 6030*  	ld de,filedata
045822 01 00 00 01 6031*  	ld bc,65536
045826 3E 01       6032*  	ld a,mos_load
045828 5B CF       6033*  	RST.LIL 08h
04582A 21 3F 02 00 6034*  	ld hl,BUF_22_028
04582E 01 16 00 00 6035*  	ld bc,22
045832 11 0E 00 00 6036*  	ld de,14
045836 DD 21 34 01 6037*  	ld ix,308
       00          
04583B CD 40 C9 04 6038*  	call vdu_load_img
04583F C9          6039*  	ret
045840             6040*  
045840             6041*  ld_22_040:
045840 21 A0 67 04 6042*  	ld hl,F22_040
045844 22 C5 C7 04 6043*  	ld (cur_filename),hl
045848 11 F1 D3 04 6044*  	ld de,filedata
04584C 01 00 00 01 6045*  	ld bc,65536
045850 3E 01       6046*  	ld a,mos_load
045852 5B CF       6047*  	RST.LIL 08h
045854 21 40 02 00 6048*  	ld hl,BUF_22_040
045858 01 1E 00 00 6049*  	ld bc,30
04585C 11 15 00 00 6050*  	ld de,21
045860 DD 21 76 02 6051*  	ld ix,630
       00          
045865 CD 40 C9 04 6052*  	call vdu_load_img
045869 C9          6053*  	ret
04586A             6054*  
04586A             6055*  ld_22_048:
04586A 21 B4 67 04 6056*  	ld hl,F22_048
04586E 22 C5 C7 04 6057*  	ld (cur_filename),hl
045872 11 F1 D3 04 6058*  	ld de,filedata
045876 01 00 00 01 6059*  	ld bc,65536
04587A 3E 01       6060*  	ld a,mos_load
04587C 5B CF       6061*  	RST.LIL 08h
04587E 21 41 02 00 6062*  	ld hl,BUF_22_048
045882 01 33 00 00 6063*  	ld bc,51
045886 11 24 00 00 6064*  	ld de,36
04588A DD 21 2C 07 6065*  	ld ix,1836
       00          
04588F CD 40 C9 04 6066*  	call vdu_load_img
045893 C9          6067*  	ret
045894             6068*  
045894             6069*  ld_22_052:
045894 21 C8 67 04 6070*  	ld hl,F22_052
045898 22 C5 C7 04 6071*  	ld (cur_filename),hl
04589C 11 F1 D3 04 6072*  	ld de,filedata
0458A0 01 00 00 01 6073*  	ld bc,65536
0458A4 3E 01       6074*  	ld a,mos_load
0458A6 5B CF       6075*  	RST.LIL 08h
0458A8 21 42 02 00 6076*  	ld hl,BUF_22_052
0458AC 01 96 00 00 6077*  	ld bc,150
0458B0 11 1E 00 00 6078*  	ld de,30
0458B4 DD 21 94 11 6079*  	ld ix,4500
       00          
0458B9 CD 40 C9 04 6080*  	call vdu_load_img
0458BD C9          6081*  	ret
0458BE             6082*  
0458BE             6083*  ld_23_012:
0458BE 21 DC 67 04 6084*  	ld hl,F23_012
0458C2 22 C5 C7 04 6085*  	ld (cur_filename),hl
0458C6 11 F1 D3 04 6086*  	ld de,filedata
0458CA 01 00 00 01 6087*  	ld bc,65536
0458CE 3E 01       6088*  	ld a,mos_load
0458D0 5B CF       6089*  	RST.LIL 08h
0458D2 21 43 02 00 6090*  	ld hl,BUF_23_012
0458D6 01 0E 00 00 6091*  	ld bc,14
0458DA 11 06 00 00 6092*  	ld de,6
0458DE DD 21 54 00 6093*  	ld ix,84
       00          
0458E3 CD 40 C9 04 6094*  	call vdu_load_img
0458E7 C9          6095*  	ret
0458E8             6096*  
0458E8             6097*  ld_23_028:
0458E8 21 F0 67 04 6098*  	ld hl,F23_028
0458EC 22 C5 C7 04 6099*  	ld (cur_filename),hl
0458F0 11 F1 D3 04 6100*  	ld de,filedata
0458F4 01 00 00 01 6101*  	ld bc,65536
0458F8 3E 01       6102*  	ld a,mos_load
0458FA 5B CF       6103*  	RST.LIL 08h
0458FC 21 44 02 00 6104*  	ld hl,BUF_23_028
045900 01 11 00 00 6105*  	ld bc,17
045904 11 08 00 00 6106*  	ld de,8
045908 DD 21 88 00 6107*  	ld ix,136
       00          
04590D CD 40 C9 04 6108*  	call vdu_load_img
045911 C9          6109*  	ret
045912             6110*  
045912             6111*  ld_23_040:
045912 21 04 68 04 6112*  	ld hl,F23_040
045916 22 C5 C7 04 6113*  	ld (cur_filename),hl
04591A 11 F1 D3 04 6114*  	ld de,filedata
04591E 01 00 00 01 6115*  	ld bc,65536
045922 3E 01       6116*  	ld a,mos_load
045924 5B CF       6117*  	RST.LIL 08h
045926 21 45 02 00 6118*  	ld hl,BUF_23_040
04592A 01 18 00 00 6119*  	ld bc,24
04592E 11 0B 00 00 6120*  	ld de,11
045932 DD 21 08 01 6121*  	ld ix,264
       00          
045937 CD 40 C9 04 6122*  	call vdu_load_img
04593B C9          6123*  	ret
04593C             6124*  
04593C             6125*  ld_23_048:
04593C 21 18 68 04 6126*  	ld hl,F23_048
045940 22 C5 C7 04 6127*  	ld (cur_filename),hl
045944 11 F1 D3 04 6128*  	ld de,filedata
045948 01 00 00 01 6129*  	ld bc,65536
04594C 3E 01       6130*  	ld a,mos_load
04594E 5B CF       6131*  	RST.LIL 08h
045950 21 46 02 00 6132*  	ld hl,BUF_23_048
045954 01 28 00 00 6133*  	ld bc,40
045958 11 12 00 00 6134*  	ld de,18
04595C DD 21 D0 02 6135*  	ld ix,720
       00          
045961 CD 40 C9 04 6136*  	call vdu_load_img
045965 C9          6137*  	ret
045966             6138*  
045966             6139*  ld_23_052:
045966 21 2C 68 04 6140*  	ld hl,F23_052
04596A 22 C5 C7 04 6141*  	ld (cur_filename),hl
04596E 11 F1 D3 04 6142*  	ld de,filedata
045972 01 00 00 01 6143*  	ld bc,65536
045976 3E 01       6144*  	ld a,mos_load
045978 5B CF       6145*  	RST.LIL 08h
04597A 21 47 02 00 6146*  	ld hl,BUF_23_052
04597E 01 01 00 00 6147*  	ld bc,1
045982 11 01 00 00 6148*  	ld de,1
045986 DD 21 01 00 6149*  	ld ix,1
       00          
04598B CD 40 C9 04 6150*  	call vdu_load_img
04598F C9          6151*  	ret
045990             6152*  
045990             6153*  ld_24_012:
045990 21 40 68 04 6154*  	ld hl,F24_012
045994 22 C5 C7 04 6155*  	ld (cur_filename),hl
045998 11 F1 D3 04 6156*  	ld de,filedata
04599C 01 00 00 01 6157*  	ld bc,65536
0459A0 3E 01       6158*  	ld a,mos_load
0459A2 5B CF       6159*  	RST.LIL 08h
0459A4 21 48 02 00 6160*  	ld hl,BUF_24_012
0459A8 01 0B 00 00 6161*  	ld bc,11
0459AC 11 0B 00 00 6162*  	ld de,11
0459B0 DD 21 79 00 6163*  	ld ix,121
       00          
0459B5 CD 40 C9 04 6164*  	call vdu_load_img
0459B9 C9          6165*  	ret
0459BA             6166*  
0459BA             6167*  ld_24_028:
0459BA 21 54 68 04 6168*  	ld hl,F24_028
0459BE 22 C5 C7 04 6169*  	ld (cur_filename),hl
0459C2 11 F1 D3 04 6170*  	ld de,filedata
0459C6 01 00 00 01 6171*  	ld bc,65536
0459CA 3E 01       6172*  	ld a,mos_load
0459CC 5B CF       6173*  	RST.LIL 08h
0459CE 21 49 02 00 6174*  	ld hl,BUF_24_028
0459D2 01 0E 00 00 6175*  	ld bc,14
0459D6 11 0E 00 00 6176*  	ld de,14
0459DA DD 21 C4 00 6177*  	ld ix,196
       00          
0459DF CD 40 C9 04 6178*  	call vdu_load_img
0459E3 C9          6179*  	ret
0459E4             6180*  
0459E4             6181*  ld_24_040:
0459E4 21 68 68 04 6182*  	ld hl,F24_040
0459E8 22 C5 C7 04 6183*  	ld (cur_filename),hl
0459EC 11 F1 D3 04 6184*  	ld de,filedata
0459F0 01 00 00 01 6185*  	ld bc,65536
0459F4 3E 01       6186*  	ld a,mos_load
0459F6 5B CF       6187*  	RST.LIL 08h
0459F8 21 4A 02 00 6188*  	ld hl,BUF_24_040
0459FC 01 14 00 00 6189*  	ld bc,20
045A00 11 15 00 00 6190*  	ld de,21
045A04 DD 21 A4 01 6191*  	ld ix,420
       00          
045A09 CD 40 C9 04 6192*  	call vdu_load_img
045A0D C9          6193*  	ret
045A0E             6194*  
045A0E             6195*  ld_24_048:
045A0E 21 7C 68 04 6196*  	ld hl,F24_048
045A12 22 C5 C7 04 6197*  	ld (cur_filename),hl
045A16 11 F1 D3 04 6198*  	ld de,filedata
045A1A 01 00 00 01 6199*  	ld bc,65536
045A1E 3E 01       6200*  	ld a,mos_load
045A20 5B CF       6201*  	RST.LIL 08h
045A22 21 4B 02 00 6202*  	ld hl,BUF_24_048
045A26 01 21 00 00 6203*  	ld bc,33
045A2A 11 24 00 00 6204*  	ld de,36
045A2E DD 21 A4 04 6205*  	ld ix,1188
       00          
045A33 CD 40 C9 04 6206*  	call vdu_load_img
045A37 C9          6207*  	ret
045A38             6208*  
045A38             6209*  ld_24_052:
045A38 21 90 68 04 6210*  	ld hl,F24_052
045A3C 22 C5 C7 04 6211*  	ld (cur_filename),hl
045A40 11 F1 D3 04 6212*  	ld de,filedata
045A44 01 00 00 01 6213*  	ld bc,65536
045A48 3E 01       6214*  	ld a,mos_load
045A4A 5B CF       6215*  	RST.LIL 08h
045A4C 21 4C 02 00 6216*  	ld hl,BUF_24_052
045A50 01 64 00 00 6217*  	ld bc,100
045A54 11 1E 00 00 6218*  	ld de,30
045A58 DD 21 B8 0B 6219*  	ld ix,3000
       00          
045A5D CD 40 C9 04 6220*  	call vdu_load_img
045A61 C9          6221*  	ret
045A62             6222*  
045A62             6223*  ld_40_012:
045A62 21 A4 68 04 6224*  	ld hl,F40_012
045A66 22 C5 C7 04 6225*  	ld (cur_filename),hl
045A6A 11 F1 D3 04 6226*  	ld de,filedata
045A6E 01 00 00 01 6227*  	ld bc,65536
045A72 3E 01       6228*  	ld a,mos_load
045A74 5B CF       6229*  	RST.LIL 08h
045A76 21 4D 02 00 6230*  	ld hl,BUF_40_012
045A7A 01 0E 00 00 6231*  	ld bc,14
045A7E 11 07 00 00 6232*  	ld de,7
045A82 DD 21 62 00 6233*  	ld ix,98
       00          
045A87 CD 40 C9 04 6234*  	call vdu_load_img
045A8B C9          6235*  	ret
045A8C             6236*  
045A8C             6237*  ld_40_028:
045A8C 21 B8 68 04 6238*  	ld hl,F40_028
045A90 22 C5 C7 04 6239*  	ld (cur_filename),hl
045A94 11 F1 D3 04 6240*  	ld de,filedata
045A98 01 00 00 01 6241*  	ld bc,65536
045A9C 3E 01       6242*  	ld a,mos_load
045A9E 5B CF       6243*  	RST.LIL 08h
045AA0 21 4E 02 00 6244*  	ld hl,BUF_40_028
045AA4 01 12 00 00 6245*  	ld bc,18
045AA8 11 0A 00 00 6246*  	ld de,10
045AAC DD 21 B4 00 6247*  	ld ix,180
       00          
045AB1 CD 40 C9 04 6248*  	call vdu_load_img
045AB5 C9          6249*  	ret
045AB6             6250*  
045AB6             6251*  ld_40_040:
045AB6 21 CC 68 04 6252*  	ld hl,F40_040
045ABA 22 C5 C7 04 6253*  	ld (cur_filename),hl
045ABE 11 F1 D3 04 6254*  	ld de,filedata
045AC2 01 00 00 01 6255*  	ld bc,65536
045AC6 3E 01       6256*  	ld a,mos_load
045AC8 5B CF       6257*  	RST.LIL 08h
045ACA 21 4F 02 00 6258*  	ld hl,BUF_40_040
045ACE 01 19 00 00 6259*  	ld bc,25
045AD2 11 0E 00 00 6260*  	ld de,14
045AD6 DD 21 5E 01 6261*  	ld ix,350
       00          
045ADB CD 40 C9 04 6262*  	call vdu_load_img
045ADF C9          6263*  	ret
045AE0             6264*  
045AE0             6265*  ld_40_048:
045AE0 21 E0 68 04 6266*  	ld hl,F40_048
045AE4 22 C5 C7 04 6267*  	ld (cur_filename),hl
045AE8 11 F1 D3 04 6268*  	ld de,filedata
045AEC 01 00 00 01 6269*  	ld bc,65536
045AF0 3E 01       6270*  	ld a,mos_load
045AF2 5B CF       6271*  	RST.LIL 08h
045AF4 21 50 02 00 6272*  	ld hl,BUF_40_048
045AF8 01 2B 00 00 6273*  	ld bc,43
045AFC 11 17 00 00 6274*  	ld de,23
045B00 DD 21 DD 03 6275*  	ld ix,989
       00          
045B05 CD 40 C9 04 6276*  	call vdu_load_img
045B09 C9          6277*  	ret
045B0A             6278*  
045B0A             6279*  ld_40_052:
045B0A 21 F4 68 04 6280*  	ld hl,F40_052
045B0E 22 C5 C7 04 6281*  	ld (cur_filename),hl
045B12 11 F1 D3 04 6282*  	ld de,filedata
045B16 01 00 00 01 6283*  	ld bc,65536
045B1A 3E 01       6284*  	ld a,mos_load
045B1C 5B CF       6285*  	RST.LIL 08h
045B1E 21 51 02 00 6286*  	ld hl,BUF_40_052
045B22 01 01 00 00 6287*  	ld bc,1
045B26 11 01 00 00 6288*  	ld de,1
045B2A DD 21 01 00 6289*  	ld ix,1
       00          
045B2F CD 40 C9 04 6290*  	call vdu_load_img
045B33 C9          6291*  	ret
045B34             6292*  
045B34             6293*  ld_41_012:
045B34 21 08 69 04 6294*  	ld hl,F41_012
045B38 22 C5 C7 04 6295*  	ld (cur_filename),hl
045B3C 11 F1 D3 04 6296*  	ld de,filedata
045B40 01 00 00 01 6297*  	ld bc,65536
045B44 3E 01       6298*  	ld a,mos_load
045B46 5B CF       6299*  	RST.LIL 08h
045B48 21 52 02 00 6300*  	ld hl,BUF_41_012
045B4C 01 0B 00 00 6301*  	ld bc,11
045B50 11 0B 00 00 6302*  	ld de,11
045B54 DD 21 79 00 6303*  	ld ix,121
       00          
045B59 CD 40 C9 04 6304*  	call vdu_load_img
045B5D C9          6305*  	ret
045B5E             6306*  
045B5E             6307*  ld_41_028:
045B5E 21 1C 69 04 6308*  	ld hl,F41_028
045B62 22 C5 C7 04 6309*  	ld (cur_filename),hl
045B66 11 F1 D3 04 6310*  	ld de,filedata
045B6A 01 00 00 01 6311*  	ld bc,65536
045B6E 3E 01       6312*  	ld a,mos_load
045B70 5B CF       6313*  	RST.LIL 08h
045B72 21 53 02 00 6314*  	ld hl,BUF_41_028
045B76 01 10 00 00 6315*  	ld bc,16
045B7A 11 0E 00 00 6316*  	ld de,14
045B7E DD 21 E0 00 6317*  	ld ix,224
       00          
045B83 CD 40 C9 04 6318*  	call vdu_load_img
045B87 C9          6319*  	ret
045B88             6320*  
045B88             6321*  ld_41_040:
045B88 21 30 69 04 6322*  	ld hl,F41_040
045B8C 22 C5 C7 04 6323*  	ld (cur_filename),hl
045B90 11 F1 D3 04 6324*  	ld de,filedata
045B94 01 00 00 01 6325*  	ld bc,65536
045B98 3E 01       6326*  	ld a,mos_load
045B9A 5B CF       6327*  	RST.LIL 08h
045B9C 21 54 02 00 6328*  	ld hl,BUF_41_040
045BA0 01 16 00 00 6329*  	ld bc,22
045BA4 11 14 00 00 6330*  	ld de,20
045BA8 DD 21 B8 01 6331*  	ld ix,440
       00          
045BAD CD 40 C9 04 6332*  	call vdu_load_img
045BB1 C9          6333*  	ret
045BB2             6334*  
045BB2             6335*  ld_41_048:
045BB2 21 44 69 04 6336*  	ld hl,F41_048
045BB6 22 C5 C7 04 6337*  	ld (cur_filename),hl
045BBA 11 F1 D3 04 6338*  	ld de,filedata
045BBE 01 00 00 01 6339*  	ld bc,65536
045BC2 3E 01       6340*  	ld a,mos_load
045BC4 5B CF       6341*  	RST.LIL 08h
045BC6 21 55 02 00 6342*  	ld hl,BUF_41_048
045BCA 01 25 00 00 6343*  	ld bc,37
045BCE 11 22 00 00 6344*  	ld de,34
045BD2 DD 21 EA 04 6345*  	ld ix,1258
       00          
045BD7 CD 40 C9 04 6346*  	call vdu_load_img
045BDB C9          6347*  	ret
045BDC             6348*  
045BDC             6349*  ld_41_052:
045BDC 21 58 69 04 6350*  	ld hl,F41_052
045BE0 22 C5 C7 04 6351*  	ld (cur_filename),hl
045BE4 11 F1 D3 04 6352*  	ld de,filedata
045BE8 01 00 00 01 6353*  	ld bc,65536
045BEC 3E 01       6354*  	ld a,mos_load
045BEE 5B CF       6355*  	RST.LIL 08h
045BF0 21 56 02 00 6356*  	ld hl,BUF_41_052
045BF4 01 23 00 00 6357*  	ld bc,35
045BF8 11 19 00 00 6358*  	ld de,25
045BFC DD 21 6B 03 6359*  	ld ix,875
       00          
045C01 CD 40 C9 04 6360*  	call vdu_load_img
045C05 C9          6361*  	ret
045C06             6362*  
045C06             6363*  ld_42_012:
045C06 21 6C 69 04 6364*  	ld hl,F42_012
045C0A 22 C5 C7 04 6365*  	ld (cur_filename),hl
045C0E 11 F1 D3 04 6366*  	ld de,filedata
045C12 01 00 00 01 6367*  	ld bc,65536
045C16 3E 01       6368*  	ld a,mos_load
045C18 5B CF       6369*  	RST.LIL 08h
045C1A 21 57 02 00 6370*  	ld hl,BUF_42_012
045C1E 01 0A 00 00 6371*  	ld bc,10
045C22 11 09 00 00 6372*  	ld de,9
045C26 DD 21 5A 00 6373*  	ld ix,90
       00          
045C2B CD 40 C9 04 6374*  	call vdu_load_img
045C2F C9          6375*  	ret
045C30             6376*  
045C30             6377*  ld_42_028:
045C30 21 80 69 04 6378*  	ld hl,F42_028
045C34 22 C5 C7 04 6379*  	ld (cur_filename),hl
045C38 11 F1 D3 04 6380*  	ld de,filedata
045C3C 01 00 00 01 6381*  	ld bc,65536
045C40 3E 01       6382*  	ld a,mos_load
045C42 5B CF       6383*  	RST.LIL 08h
045C44 21 58 02 00 6384*  	ld hl,BUF_42_028
045C48 01 0E 00 00 6385*  	ld bc,14
045C4C 11 0B 00 00 6386*  	ld de,11
045C50 DD 21 9A 00 6387*  	ld ix,154
       00          
045C55 CD 40 C9 04 6388*  	call vdu_load_img
045C59 C9          6389*  	ret
045C5A             6390*  
045C5A             6391*  ld_42_040:
045C5A 21 94 69 04 6392*  	ld hl,F42_040
045C5E 22 C5 C7 04 6393*  	ld (cur_filename),hl
045C62 11 F1 D3 04 6394*  	ld de,filedata
045C66 01 00 00 01 6395*  	ld bc,65536
045C6A 3E 01       6396*  	ld a,mos_load
045C6C 5B CF       6397*  	RST.LIL 08h
045C6E 21 59 02 00 6398*  	ld hl,BUF_42_040
045C72 01 13 00 00 6399*  	ld bc,19
045C76 11 10 00 00 6400*  	ld de,16
045C7A DD 21 30 01 6401*  	ld ix,304
       00          
045C7F CD 40 C9 04 6402*  	call vdu_load_img
045C83 C9          6403*  	ret
045C84             6404*  
045C84             6405*  ld_42_048:
045C84 21 A8 69 04 6406*  	ld hl,F42_048
045C88 22 C5 C7 04 6407*  	ld (cur_filename),hl
045C8C 11 F1 D3 04 6408*  	ld de,filedata
045C90 01 00 00 01 6409*  	ld bc,65536
045C94 3E 01       6410*  	ld a,mos_load
045C96 5B CF       6411*  	RST.LIL 08h
045C98 21 5A 02 00 6412*  	ld hl,BUF_42_048
045C9C 01 20 00 00 6413*  	ld bc,32
045CA0 11 1B 00 00 6414*  	ld de,27
045CA4 DD 21 60 03 6415*  	ld ix,864
       00          
045CA9 CD 40 C9 04 6416*  	call vdu_load_img
045CAD C9          6417*  	ret
045CAE             6418*  
045CAE             6419*  ld_42_052:
045CAE 21 BC 69 04 6420*  	ld hl,F42_052
045CB2 22 C5 C7 04 6421*  	ld (cur_filename),hl
045CB6 11 F1 D3 04 6422*  	ld de,filedata
045CBA 01 00 00 01 6423*  	ld bc,65536
045CBE 3E 01       6424*  	ld a,mos_load
045CC0 5B CF       6425*  	RST.LIL 08h
045CC2 21 5B 02 00 6426*  	ld hl,BUF_42_052
045CC6 01 3F 00 00 6427*  	ld bc,63
045CCA 11 04 00 00 6428*  	ld de,4
045CCE DD 21 FC 00 6429*  	ld ix,252
       00          
045CD3 CD 40 C9 04 6430*  	call vdu_load_img
045CD7 C9          6431*  	ret
045CD8             6432*  
045CD8             6433*  ld_43_012:
045CD8 21 D0 69 04 6434*  	ld hl,F43_012
045CDC 22 C5 C7 04 6435*  	ld (cur_filename),hl
045CE0 11 F1 D3 04 6436*  	ld de,filedata
045CE4 01 00 00 01 6437*  	ld bc,65536
045CE8 3E 01       6438*  	ld a,mos_load
045CEA 5B CF       6439*  	RST.LIL 08h
045CEC 21 5C 02 00 6440*  	ld hl,BUF_43_012
045CF0 01 0B 00 00 6441*  	ld bc,11
045CF4 11 04 00 00 6442*  	ld de,4
045CF8 DD 21 2C 00 6443*  	ld ix,44
       00          
045CFD CD 40 C9 04 6444*  	call vdu_load_img
045D01 C9          6445*  	ret
045D02             6446*  
045D02             6447*  ld_43_028:
045D02 21 E4 69 04 6448*  	ld hl,F43_028
045D06 22 C5 C7 04 6449*  	ld (cur_filename),hl
045D0A 11 F1 D3 04 6450*  	ld de,filedata
045D0E 01 00 00 01 6451*  	ld bc,65536
045D12 3E 01       6452*  	ld a,mos_load
045D14 5B CF       6453*  	RST.LIL 08h
045D16 21 5D 02 00 6454*  	ld hl,BUF_43_028
045D1A 01 0F 00 00 6455*  	ld bc,15
045D1E 11 04 00 00 6456*  	ld de,4
045D22 DD 21 3C 00 6457*  	ld ix,60
       00          
045D27 CD 40 C9 04 6458*  	call vdu_load_img
045D2B C9          6459*  	ret
045D2C             6460*  
045D2C             6461*  ld_43_040:
045D2C 21 F8 69 04 6462*  	ld hl,F43_040
045D30 22 C5 C7 04 6463*  	ld (cur_filename),hl
045D34 11 F1 D3 04 6464*  	ld de,filedata
045D38 01 00 00 01 6465*  	ld bc,65536
045D3C 3E 01       6466*  	ld a,mos_load
045D3E 5B CF       6467*  	RST.LIL 08h
045D40 21 5E 02 00 6468*  	ld hl,BUF_43_040
045D44 01 15 00 00 6469*  	ld bc,21
045D48 11 06 00 00 6470*  	ld de,6
045D4C DD 21 7E 00 6471*  	ld ix,126
       00          
045D51 CD 40 C9 04 6472*  	call vdu_load_img
045D55 C9          6473*  	ret
045D56             6474*  
045D56             6475*  ld_43_048:
045D56 21 0C 6A 04 6476*  	ld hl,F43_048
045D5A 22 C5 C7 04 6477*  	ld (cur_filename),hl
045D5E 11 F1 D3 04 6478*  	ld de,filedata
045D62 01 00 00 01 6479*  	ld bc,65536
045D66 3E 01       6480*  	ld a,mos_load
045D68 5B CF       6481*  	RST.LIL 08h
045D6A 21 5F 02 00 6482*  	ld hl,BUF_43_048
045D6E 01 23 00 00 6483*  	ld bc,35
045D72 11 0D 00 00 6484*  	ld de,13
045D76 DD 21 C7 01 6485*  	ld ix,455
       00          
045D7B CD 40 C9 04 6486*  	call vdu_load_img
045D7F C9          6487*  	ret
045D80             6488*  
045D80             6489*  ld_43_052:
045D80 21 20 6A 04 6490*  	ld hl,F43_052
045D84 22 C5 C7 04 6491*  	ld (cur_filename),hl
045D88 11 F1 D3 04 6492*  	ld de,filedata
045D8C 01 00 00 01 6493*  	ld bc,65536
045D90 3E 01       6494*  	ld a,mos_load
045D92 5B CF       6495*  	RST.LIL 08h
045D94 21 60 02 00 6496*  	ld hl,BUF_43_052
045D98 01 01 00 00 6497*  	ld bc,1
045D9C 11 01 00 00 6498*  	ld de,1
045DA0 DD 21 01 00 6499*  	ld ix,1
       00          
045DA5 CD 40 C9 04 6500*  	call vdu_load_img
045DA9 C9          6501*  	ret
045DAA             6502*  
045DAA             6503*  ld_44_012:
045DAA 21 34 6A 04 6504*  	ld hl,F44_012
045DAE 22 C5 C7 04 6505*  	ld (cur_filename),hl
045DB2 11 F1 D3 04 6506*  	ld de,filedata
045DB6 01 00 00 01 6507*  	ld bc,65536
045DBA 3E 01       6508*  	ld a,mos_load
045DBC 5B CF       6509*  	RST.LIL 08h
045DBE 21 61 02 00 6510*  	ld hl,BUF_44_012
045DC2 01 05 00 00 6511*  	ld bc,5
045DC6 11 04 00 00 6512*  	ld de,4
045DCA DD 21 14 00 6513*  	ld ix,20
       00          
045DCF CD 40 C9 04 6514*  	call vdu_load_img
045DD3 C9          6515*  	ret
045DD4             6516*  
045DD4             6517*  ld_44_028:
045DD4 21 48 6A 04 6518*  	ld hl,F44_028
045DD8 22 C5 C7 04 6519*  	ld (cur_filename),hl
045DDC 11 F1 D3 04 6520*  	ld de,filedata
045DE0 01 00 00 01 6521*  	ld bc,65536
045DE4 3E 01       6522*  	ld a,mos_load
045DE6 5B CF       6523*  	RST.LIL 08h
045DE8 21 62 02 00 6524*  	ld hl,BUF_44_028
045DEC 01 08 00 00 6525*  	ld bc,8
045DF0 11 06 00 00 6526*  	ld de,6
045DF4 DD 21 30 00 6527*  	ld ix,48
       00          
045DF9 CD 40 C9 04 6528*  	call vdu_load_img
045DFD C9          6529*  	ret
045DFE             6530*  
045DFE             6531*  ld_44_040:
045DFE 21 5C 6A 04 6532*  	ld hl,F44_040
045E02 22 C5 C7 04 6533*  	ld (cur_filename),hl
045E06 11 F1 D3 04 6534*  	ld de,filedata
045E0A 01 00 00 01 6535*  	ld bc,65536
045E0E 3E 01       6536*  	ld a,mos_load
045E10 5B CF       6537*  	RST.LIL 08h
045E12 21 63 02 00 6538*  	ld hl,BUF_44_040
045E16 01 0C 00 00 6539*  	ld bc,12
045E1A 11 09 00 00 6540*  	ld de,9
045E1E DD 21 6C 00 6541*  	ld ix,108
       00          
045E23 CD 40 C9 04 6542*  	call vdu_load_img
045E27 C9          6543*  	ret
045E28             6544*  
045E28             6545*  ld_44_048:
045E28 21 70 6A 04 6546*  	ld hl,F44_048
045E2C 22 C5 C7 04 6547*  	ld (cur_filename),hl
045E30 11 F1 D3 04 6548*  	ld de,filedata
045E34 01 00 00 01 6549*  	ld bc,65536
045E38 3E 01       6550*  	ld a,mos_load
045E3A 5B CF       6551*  	RST.LIL 08h
045E3C 21 64 02 00 6552*  	ld hl,BUF_44_048
045E40 01 14 00 00 6553*  	ld bc,20
045E44 11 0F 00 00 6554*  	ld de,15
045E48 DD 21 2C 01 6555*  	ld ix,300
       00          
045E4D CD 40 C9 04 6556*  	call vdu_load_img
045E51 C9          6557*  	ret
045E52             6558*  
045E52             6559*  ld_44_052:
045E52 21 84 6A 04 6560*  	ld hl,F44_052
045E56 22 C5 C7 04 6561*  	ld (cur_filename),hl
045E5A 11 F1 D3 04 6562*  	ld de,filedata
045E5E 01 00 00 01 6563*  	ld bc,65536
045E62 3E 01       6564*  	ld a,mos_load
045E64 5B CF       6565*  	RST.LIL 08h
045E66 21 65 02 00 6566*  	ld hl,BUF_44_052
045E6A 01 01 00 00 6567*  	ld bc,1
045E6E 11 01 00 00 6568*  	ld de,1
045E72 DD 21 01 00 6569*  	ld ix,1
       00          
045E77 CD 40 C9 04 6570*  	call vdu_load_img
045E7B C9          6571*  	ret
045E7C             6572*  
045E7C             6573*  ld_45_012:
045E7C 21 98 6A 04 6574*  	ld hl,F45_012
045E80 22 C5 C7 04 6575*  	ld (cur_filename),hl
045E84 11 F1 D3 04 6576*  	ld de,filedata
045E88 01 00 00 01 6577*  	ld bc,65536
045E8C 3E 01       6578*  	ld a,mos_load
045E8E 5B CF       6579*  	RST.LIL 08h
045E90 21 66 02 00 6580*  	ld hl,BUF_45_012
045E94 01 10 00 00 6581*  	ld bc,16
045E98 11 0A 00 00 6582*  	ld de,10
045E9C DD 21 A0 00 6583*  	ld ix,160
       00          
045EA1 CD 40 C9 04 6584*  	call vdu_load_img
045EA5 C9          6585*  	ret
045EA6             6586*  
045EA6             6587*  ld_45_028:
045EA6 21 AC 6A 04 6588*  	ld hl,F45_028
045EAA 22 C5 C7 04 6589*  	ld (cur_filename),hl
045EAE 11 F1 D3 04 6590*  	ld de,filedata
045EB2 01 00 00 01 6591*  	ld bc,65536
045EB6 3E 01       6592*  	ld a,mos_load
045EB8 5B CF       6593*  	RST.LIL 08h
045EBA 21 67 02 00 6594*  	ld hl,BUF_45_028
045EBE 01 14 00 00 6595*  	ld bc,20
045EC2 11 0D 00 00 6596*  	ld de,13
045EC6 DD 21 04 01 6597*  	ld ix,260
       00          
045ECB CD 40 C9 04 6598*  	call vdu_load_img
045ECF C9          6599*  	ret
045ED0             6600*  
045ED0             6601*  ld_45_040:
045ED0 21 C0 6A 04 6602*  	ld hl,F45_040
045ED4 22 C5 C7 04 6603*  	ld (cur_filename),hl
045ED8 11 F1 D3 04 6604*  	ld de,filedata
045EDC 01 00 00 01 6605*  	ld bc,65536
045EE0 3E 01       6606*  	ld a,mos_load
045EE2 5B CF       6607*  	RST.LIL 08h
045EE4 21 68 02 00 6608*  	ld hl,BUF_45_040
045EE8 01 1C 00 00 6609*  	ld bc,28
045EEC 11 13 00 00 6610*  	ld de,19
045EF0 DD 21 14 02 6611*  	ld ix,532
       00          
045EF5 CD 40 C9 04 6612*  	call vdu_load_img
045EF9 C9          6613*  	ret
045EFA             6614*  
045EFA             6615*  ld_45_048:
045EFA 21 D4 6A 04 6616*  	ld hl,F45_048
045EFE 22 C5 C7 04 6617*  	ld (cur_filename),hl
045F02 11 F1 D3 04 6618*  	ld de,filedata
045F06 01 00 00 01 6619*  	ld bc,65536
045F0A 3E 01       6620*  	ld a,mos_load
045F0C 5B CF       6621*  	RST.LIL 08h
045F0E 21 69 02 00 6622*  	ld hl,BUF_45_048
045F12 01 30 00 00 6623*  	ld bc,48
045F16 11 21 00 00 6624*  	ld de,33
045F1A DD 21 30 06 6625*  	ld ix,1584
       00          
045F1F CD 40 C9 04 6626*  	call vdu_load_img
045F23 C9          6627*  	ret
045F24             6628*  
045F24             6629*  ld_45_052:
045F24 21 E8 6A 04 6630*  	ld hl,F45_052
045F28 22 C5 C7 04 6631*  	ld (cur_filename),hl
045F2C 11 F1 D3 04 6632*  	ld de,filedata
045F30 01 00 00 01 6633*  	ld bc,65536
045F34 3E 01       6634*  	ld a,mos_load
045F36 5B CF       6635*  	RST.LIL 08h
045F38 21 6A 02 00 6636*  	ld hl,BUF_45_052
045F3C 01 75 00 00 6637*  	ld bc,117
045F40 11 13 00 00 6638*  	ld de,19
045F44 DD 21 AF 08 6639*  	ld ix,2223
       00          
045F49 CD 40 C9 04 6640*  	call vdu_load_img
045F4D C9          6641*  	ret
045F4E             6642*  
045F4E             6643*  ld_46_012:
045F4E 21 FC 6A 04 6644*  	ld hl,F46_012
045F52 22 C5 C7 04 6645*  	ld (cur_filename),hl
045F56 11 F1 D3 04 6646*  	ld de,filedata
045F5A 01 00 00 01 6647*  	ld bc,65536
045F5E 3E 01       6648*  	ld a,mos_load
045F60 5B CF       6649*  	RST.LIL 08h
045F62 21 6B 02 00 6650*  	ld hl,BUF_46_012
045F66 01 10 00 00 6651*  	ld bc,16
045F6A 11 08 00 00 6652*  	ld de,8
045F6E DD 21 80 00 6653*  	ld ix,128
       00          
045F73 CD 40 C9 04 6654*  	call vdu_load_img
045F77 C9          6655*  	ret
045F78             6656*  
045F78             6657*  ld_46_028:
045F78 21 10 6B 04 6658*  	ld hl,F46_028
045F7C 22 C5 C7 04 6659*  	ld (cur_filename),hl
045F80 11 F1 D3 04 6660*  	ld de,filedata
045F84 01 00 00 01 6661*  	ld bc,65536
045F88 3E 01       6662*  	ld a,mos_load
045F8A 5B CF       6663*  	RST.LIL 08h
045F8C 21 6C 02 00 6664*  	ld hl,BUF_46_028
045F90 01 14 00 00 6665*  	ld bc,20
045F94 11 0B 00 00 6666*  	ld de,11
045F98 DD 21 DC 00 6667*  	ld ix,220
       00          
045F9D CD 40 C9 04 6668*  	call vdu_load_img
045FA1 C9          6669*  	ret
045FA2             6670*  
045FA2             6671*  ld_46_040:
045FA2 21 24 6B 04 6672*  	ld hl,F46_040
045FA6 22 C5 C7 04 6673*  	ld (cur_filename),hl
045FAA 11 F1 D3 04 6674*  	ld de,filedata
045FAE 01 00 00 01 6675*  	ld bc,65536
045FB2 3E 01       6676*  	ld a,mos_load
045FB4 5B CF       6677*  	RST.LIL 08h
045FB6 21 6D 02 00 6678*  	ld hl,BUF_46_040
045FBA 01 1C 00 00 6679*  	ld bc,28
045FBE 11 0F 00 00 6680*  	ld de,15
045FC2 DD 21 A4 01 6681*  	ld ix,420
       00          
045FC7 CD 40 C9 04 6682*  	call vdu_load_img
045FCB C9          6683*  	ret
045FCC             6684*  
045FCC             6685*  ld_46_048:
045FCC 21 38 6B 04 6686*  	ld hl,F46_048
045FD0 22 C5 C7 04 6687*  	ld (cur_filename),hl
045FD4 11 F1 D3 04 6688*  	ld de,filedata
045FD8 01 00 00 01 6689*  	ld bc,65536
045FDC 3E 01       6690*  	ld a,mos_load
045FDE 5B CF       6691*  	RST.LIL 08h
045FE0 21 6E 02 00 6692*  	ld hl,BUF_46_048
045FE4 01 30 00 00 6693*  	ld bc,48
045FE8 11 1B 00 00 6694*  	ld de,27
045FEC DD 21 10 05 6695*  	ld ix,1296
       00          
045FF1 CD 40 C9 04 6696*  	call vdu_load_img
045FF5 C9          6697*  	ret
045FF6             6698*  
045FF6             6699*  ld_46_052:
045FF6 21 4C 6B 04 6700*  	ld hl,F46_052
045FFA 22 C5 C7 04 6701*  	ld (cur_filename),hl
045FFE 11 F1 D3 04 6702*  	ld de,filedata
046002 01 00 00 01 6703*  	ld bc,65536
046006 3E 01       6704*  	ld a,mos_load
046008 5B CF       6705*  	RST.LIL 08h
04600A 21 6F 02 00 6706*  	ld hl,BUF_46_052
04600E 01 51 00 00 6707*  	ld bc,81
046012 11 01 00 00 6708*  	ld de,1
046016 DD 21 51 00 6709*  	ld ix,81
       00          
04601B CD 40 C9 04 6710*  	call vdu_load_img
04601F C9          6711*  	ret
046020             6712*  
046020             6713*  ld_47_012:
046020 21 60 6B 04 6714*  	ld hl,F47_012
046024 22 C5 C7 04 6715*  	ld (cur_filename),hl
046028 11 F1 D3 04 6716*  	ld de,filedata
04602C 01 00 00 01 6717*  	ld bc,65536
046030 3E 01       6718*  	ld a,mos_load
046032 5B CF       6719*  	RST.LIL 08h
046034 21 70 02 00 6720*  	ld hl,BUF_47_012
046038 01 10 00 00 6721*  	ld bc,16
04603C 11 09 00 00 6722*  	ld de,9
046040 DD 21 90 00 6723*  	ld ix,144
       00          
046045 CD 40 C9 04 6724*  	call vdu_load_img
046049 C9          6725*  	ret
04604A             6726*  
04604A             6727*  ld_47_028:
04604A 21 74 6B 04 6728*  	ld hl,F47_028
04604E 22 C5 C7 04 6729*  	ld (cur_filename),hl
046052 11 F1 D3 04 6730*  	ld de,filedata
046056 01 00 00 01 6731*  	ld bc,65536
04605A 3E 01       6732*  	ld a,mos_load
04605C 5B CF       6733*  	RST.LIL 08h
04605E 21 71 02 00 6734*  	ld hl,BUF_47_028
046062 01 14 00 00 6735*  	ld bc,20
046066 11 0B 00 00 6736*  	ld de,11
04606A DD 21 DC 00 6737*  	ld ix,220
       00          
04606F CD 40 C9 04 6738*  	call vdu_load_img
046073 C9          6739*  	ret
046074             6740*  
046074             6741*  ld_47_040:
046074 21 88 6B 04 6742*  	ld hl,F47_040
046078 22 C5 C7 04 6743*  	ld (cur_filename),hl
04607C 11 F1 D3 04 6744*  	ld de,filedata
046080 01 00 00 01 6745*  	ld bc,65536
046084 3E 01       6746*  	ld a,mos_load
046086 5B CF       6747*  	RST.LIL 08h
046088 21 72 02 00 6748*  	ld hl,BUF_47_040
04608C 01 1C 00 00 6749*  	ld bc,28
046090 11 10 00 00 6750*  	ld de,16
046094 DD 21 C0 01 6751*  	ld ix,448
       00          
046099 CD 40 C9 04 6752*  	call vdu_load_img
04609D C9          6753*  	ret
04609E             6754*  
04609E             6755*  ld_47_048:
04609E 21 9C 6B 04 6756*  	ld hl,F47_048
0460A2 22 C5 C7 04 6757*  	ld (cur_filename),hl
0460A6 11 F1 D3 04 6758*  	ld de,filedata
0460AA 01 00 00 01 6759*  	ld bc,65536
0460AE 3E 01       6760*  	ld a,mos_load
0460B0 5B CF       6761*  	RST.LIL 08h
0460B2 21 73 02 00 6762*  	ld hl,BUF_47_048
0460B6 01 30 00 00 6763*  	ld bc,48
0460BA 11 1B 00 00 6764*  	ld de,27
0460BE DD 21 10 05 6765*  	ld ix,1296
       00          
0460C3 CD 40 C9 04 6766*  	call vdu_load_img
0460C7 C9          6767*  	ret
0460C8             6768*  
0460C8             6769*  ld_47_052:
0460C8 21 B0 6B 04 6770*  	ld hl,F47_052
0460CC 22 C5 C7 04 6771*  	ld (cur_filename),hl
0460D0 11 F1 D3 04 6772*  	ld de,filedata
0460D4 01 00 00 01 6773*  	ld bc,65536
0460D8 3E 01       6774*  	ld a,mos_load
0460DA 5B CF       6775*  	RST.LIL 08h
0460DC 21 74 02 00 6776*  	ld hl,BUF_47_052
0460E0 01 1B 00 00 6777*  	ld bc,27
0460E4 11 0A 00 00 6778*  	ld de,10
0460E8 DD 21 0E 01 6779*  	ld ix,270
       00          
0460ED CD 40 C9 04 6780*  	call vdu_load_img
0460F1 C9          6781*  	ret
0460F2             6782*  
0460F2             6783*  ld_48_012:
0460F2 21 C4 6B 04 6784*  	ld hl,F48_012
0460F6 22 C5 C7 04 6785*  	ld (cur_filename),hl
0460FA 11 F1 D3 04 6786*  	ld de,filedata
0460FE 01 00 00 01 6787*  	ld bc,65536
046102 3E 01       6788*  	ld a,mos_load
046104 5B CF       6789*  	RST.LIL 08h
046106 21 75 02 00 6790*  	ld hl,BUF_48_012
04610A 01 12 00 00 6791*  	ld bc,18
04610E 11 07 00 00 6792*  	ld de,7
046112 DD 21 7E 00 6793*  	ld ix,126
       00          
046117 CD 40 C9 04 6794*  	call vdu_load_img
04611B C9          6795*  	ret
04611C             6796*  
04611C             6797*  ld_48_028:
04611C 21 D8 6B 04 6798*  	ld hl,F48_028
046120 22 C5 C7 04 6799*  	ld (cur_filename),hl
046124 11 F1 D3 04 6800*  	ld de,filedata
046128 01 00 00 01 6801*  	ld bc,65536
04612C 3E 01       6802*  	ld a,mos_load
04612E 5B CF       6803*  	RST.LIL 08h
046130 21 76 02 00 6804*  	ld hl,BUF_48_028
046134 01 17 00 00 6805*  	ld bc,23
046138 11 0A 00 00 6806*  	ld de,10
04613C DD 21 E6 00 6807*  	ld ix,230
       00          
046141 CD 40 C9 04 6808*  	call vdu_load_img
046145 C9          6809*  	ret
046146             6810*  
046146             6811*  ld_48_040:
046146 21 EC 6B 04 6812*  	ld hl,F48_040
04614A 22 C5 C7 04 6813*  	ld (cur_filename),hl
04614E 11 F1 D3 04 6814*  	ld de,filedata
046152 01 00 00 01 6815*  	ld bc,65536
046156 3E 01       6816*  	ld a,mos_load
046158 5B CF       6817*  	RST.LIL 08h
04615A 21 77 02 00 6818*  	ld hl,BUF_48_040
04615E 01 1F 00 00 6819*  	ld bc,31
046162 11 0D 00 00 6820*  	ld de,13
046166 DD 21 93 01 6821*  	ld ix,403
       00          
04616B CD 40 C9 04 6822*  	call vdu_load_img
04616F C9          6823*  	ret
046170             6824*  
046170             6825*  ld_48_048:
046170 21 00 6C 04 6826*  	ld hl,F48_048
046174 22 C5 C7 04 6827*  	ld (cur_filename),hl
046178 11 F1 D3 04 6828*  	ld de,filedata
04617C 01 00 00 01 6829*  	ld bc,65536
046180 3E 01       6830*  	ld a,mos_load
046182 5B CF       6831*  	RST.LIL 08h
046184 21 78 02 00 6832*  	ld hl,BUF_48_048
046188 01 35 00 00 6833*  	ld bc,53
04618C 11 18 00 00 6834*  	ld de,24
046190 DD 21 F8 04 6835*  	ld ix,1272
       00          
046195 CD 40 C9 04 6836*  	call vdu_load_img
046199 C9          6837*  	ret
04619A             6838*  
04619A             6839*  ld_48_052:
04619A 21 14 6C 04 6840*  	ld hl,F48_052
04619E 22 C5 C7 04 6841*  	ld (cur_filename),hl
0461A2 11 F1 D3 04 6842*  	ld de,filedata
0461A6 01 00 00 01 6843*  	ld bc,65536
0461AA 3E 01       6844*  	ld a,mos_load
0461AC 5B CF       6845*  	RST.LIL 08h
0461AE 21 79 02 00 6846*  	ld hl,BUF_48_052
0461B2 01 01 00 00 6847*  	ld bc,1
0461B6 11 01 00 00 6848*  	ld de,1
0461BA DD 21 01 00 6849*  	ld ix,1
       00          
0461BF CD 40 C9 04 6850*  	call vdu_load_img
0461C3 C9          6851*  	ret
0461C4             6852*  
0461C4             6853*  ld_49_012:
0461C4 21 28 6C 04 6854*  	ld hl,F49_012
0461C8 22 C5 C7 04 6855*  	ld (cur_filename),hl
0461CC 11 F1 D3 04 6856*  	ld de,filedata
0461D0 01 00 00 01 6857*  	ld bc,65536
0461D4 3E 01       6858*  	ld a,mos_load
0461D6 5B CF       6859*  	RST.LIL 08h
0461D8 21 7A 02 00 6860*  	ld hl,BUF_49_012
0461DC 01 0E 00 00 6861*  	ld bc,14
0461E0 11 06 00 00 6862*  	ld de,6
0461E4 DD 21 54 00 6863*  	ld ix,84
       00          
0461E9 CD 40 C9 04 6864*  	call vdu_load_img
0461ED C9          6865*  	ret
0461EE             6866*  
0461EE             6867*  ld_49_028:
0461EE 21 3C 6C 04 6868*  	ld hl,F49_028
0461F2 22 C5 C7 04 6869*  	ld (cur_filename),hl
0461F6 11 F1 D3 04 6870*  	ld de,filedata
0461FA 01 00 00 01 6871*  	ld bc,65536
0461FE 3E 01       6872*  	ld a,mos_load
046200 5B CF       6873*  	RST.LIL 08h
046202 21 7B 02 00 6874*  	ld hl,BUF_49_028
046206 01 12 00 00 6875*  	ld bc,18
04620A 11 08 00 00 6876*  	ld de,8
04620E DD 21 90 00 6877*  	ld ix,144
       00          
046213 CD 40 C9 04 6878*  	call vdu_load_img
046217 C9          6879*  	ret
046218             6880*  
046218             6881*  ld_49_040:
046218 21 50 6C 04 6882*  	ld hl,F49_040
04621C 22 C5 C7 04 6883*  	ld (cur_filename),hl
046220 11 F1 D3 04 6884*  	ld de,filedata
046224 01 00 00 01 6885*  	ld bc,65536
046228 3E 01       6886*  	ld a,mos_load
04622A 5B CF       6887*  	RST.LIL 08h
04622C 21 7C 02 00 6888*  	ld hl,BUF_49_040
046230 01 1A 00 00 6889*  	ld bc,26
046234 11 0B 00 00 6890*  	ld de,11
046238 DD 21 1E 01 6891*  	ld ix,286
       00          
04623D CD 40 C9 04 6892*  	call vdu_load_img
046241 C9          6893*  	ret
046242             6894*  
046242             6895*  ld_49_048:
046242 21 64 6C 04 6896*  	ld hl,F49_048
046246 22 C5 C7 04 6897*  	ld (cur_filename),hl
04624A 11 F1 D3 04 6898*  	ld de,filedata
04624E 01 00 00 01 6899*  	ld bc,65536
046252 3E 01       6900*  	ld a,mos_load
046254 5B CF       6901*  	RST.LIL 08h
046256 21 7D 02 00 6902*  	ld hl,BUF_49_048
04625A 01 2B 00 00 6903*  	ld bc,43
04625E 11 12 00 00 6904*  	ld de,18
046262 DD 21 06 03 6905*  	ld ix,774
       00          
046267 CD 40 C9 04 6906*  	call vdu_load_img
04626B C9          6907*  	ret
04626C             6908*  
04626C             6909*  ld_49_052:
04626C 21 78 6C 04 6910*  	ld hl,F49_052
046270 22 C5 C7 04 6911*  	ld (cur_filename),hl
046274 11 F1 D3 04 6912*  	ld de,filedata
046278 01 00 00 01 6913*  	ld bc,65536
04627C 3E 01       6914*  	ld a,mos_load
04627E 5B CF       6915*  	RST.LIL 08h
046280 21 7E 02 00 6916*  	ld hl,BUF_49_052
046284 01 01 00 00 6917*  	ld bc,1
046288 11 01 00 00 6918*  	ld de,1
04628C DD 21 01 00 6919*  	ld ix,1
       00          
046291 CD 40 C9 04 6920*  	call vdu_load_img
046295 C9          6921*  	ret
046296             6922*  
046296             6923*  ld_50_012:
046296 21 8C 6C 04 6924*  	ld hl,F50_012
04629A 22 C5 C7 04 6925*  	ld (cur_filename),hl
04629E 11 F1 D3 04 6926*  	ld de,filedata
0462A2 01 00 00 01 6927*  	ld bc,65536
0462A6 3E 01       6928*  	ld a,mos_load
0462A8 5B CF       6929*  	RST.LIL 08h
0462AA 21 7F 02 00 6930*  	ld hl,BUF_50_012
0462AE 01 0A 00 00 6931*  	ld bc,10
0462B2 11 0D 00 00 6932*  	ld de,13
0462B6 DD 21 82 00 6933*  	ld ix,130
       00          
0462BB CD 40 C9 04 6934*  	call vdu_load_img
0462BF C9          6935*  	ret
0462C0             6936*  
0462C0             6937*  ld_50_028:
0462C0 21 A0 6C 04 6938*  	ld hl,F50_028
0462C4 22 C5 C7 04 6939*  	ld (cur_filename),hl
0462C8 11 F1 D3 04 6940*  	ld de,filedata
0462CC 01 00 00 01 6941*  	ld bc,65536
0462D0 3E 01       6942*  	ld a,mos_load
0462D2 5B CF       6943*  	RST.LIL 08h
0462D4 21 80 02 00 6944*  	ld hl,BUF_50_028
0462D8 01 0D 00 00 6945*  	ld bc,13
0462DC 11 11 00 00 6946*  	ld de,17
0462E0 DD 21 DD 00 6947*  	ld ix,221
       00          
0462E5 CD 40 C9 04 6948*  	call vdu_load_img
0462E9 C9          6949*  	ret
0462EA             6950*  
0462EA             6951*  ld_50_040:
0462EA 21 B4 6C 04 6952*  	ld hl,F50_040
0462EE 22 C5 C7 04 6953*  	ld (cur_filename),hl
0462F2 11 F1 D3 04 6954*  	ld de,filedata
0462F6 01 00 00 01 6955*  	ld bc,65536
0462FA 3E 01       6956*  	ld a,mos_load
0462FC 5B CF       6957*  	RST.LIL 08h
0462FE 21 81 02 00 6958*  	ld hl,BUF_50_040
046302 01 12 00 00 6959*  	ld bc,18
046306 11 19 00 00 6960*  	ld de,25
04630A DD 21 C2 01 6961*  	ld ix,450
       00          
04630F CD 40 C9 04 6962*  	call vdu_load_img
046313 C9          6963*  	ret
046314             6964*  
046314             6965*  ld_50_048:
046314 21 C8 6C 04 6966*  	ld hl,F50_048
046318 22 C5 C7 04 6967*  	ld (cur_filename),hl
04631C 11 F1 D3 04 6968*  	ld de,filedata
046320 01 00 00 01 6969*  	ld bc,65536
046324 3E 01       6970*  	ld a,mos_load
046326 5B CF       6971*  	RST.LIL 08h
046328 21 82 02 00 6972*  	ld hl,BUF_50_048
04632C 01 1E 00 00 6973*  	ld bc,30
046330 11 2A 00 00 6974*  	ld de,42
046334 DD 21 EC 04 6975*  	ld ix,1260
       00          
046339 CD 40 C9 04 6976*  	call vdu_load_img
04633D C9          6977*  	ret
04633E             6978*  
04633E             6979*  ld_50_052:
04633E 21 DC 6C 04 6980*  	ld hl,F50_052
046342 22 C5 C7 04 6981*  	ld (cur_filename),hl
046346 11 F1 D3 04 6982*  	ld de,filedata
04634A 01 00 00 01 6983*  	ld bc,65536
04634E 3E 01       6984*  	ld a,mos_load
046350 5B CF       6985*  	RST.LIL 08h
046352 21 83 02 00 6986*  	ld hl,BUF_50_052
046356 01 46 00 00 6987*  	ld bc,70
04635A 11 32 00 00 6988*  	ld de,50
04635E DD 21 AC 0D 6989*  	ld ix,3500
       00          
046363 CD 40 C9 04 6990*  	call vdu_load_img
046367 C9          6991*  	ret
046368             6992*  
046368             6993*  ld_51_012:
046368 21 F0 6C 04 6994*  	ld hl,F51_012
04636C 22 C5 C7 04 6995*  	ld (cur_filename),hl
046370 11 F1 D3 04 6996*  	ld de,filedata
046374 01 00 00 01 6997*  	ld bc,65536
046378 3E 01       6998*  	ld a,mos_load
04637A 5B CF       6999*  	RST.LIL 08h
04637C 21 84 02 00 7000*  	ld hl,BUF_51_012
046380 01 11 00 00 7001*  	ld bc,17
046384 11 17 00 00 7002*  	ld de,23
046388 DD 21 87 01 7003*  	ld ix,391
       00          
04638D CD 40 C9 04 7004*  	call vdu_load_img
046391 C9          7005*  	ret
046392             7006*  
046392             7007*  ld_51_028:
046392 21 04 6D 04 7008*  	ld hl,F51_028
046396 22 C5 C7 04 7009*  	ld (cur_filename),hl
04639A 11 F1 D3 04 7010*  	ld de,filedata
04639E 01 00 00 01 7011*  	ld bc,65536
0463A2 3E 01       7012*  	ld a,mos_load
0463A4 5B CF       7013*  	RST.LIL 08h
0463A6 21 85 02 00 7014*  	ld hl,BUF_51_028
0463AA 01 15 00 00 7015*  	ld bc,21
0463AE 11 1D 00 00 7016*  	ld de,29
0463B2 DD 21 61 02 7017*  	ld ix,609
       00          
0463B7 CD 40 C9 04 7018*  	call vdu_load_img
0463BB C9          7019*  	ret
0463BC             7020*  
0463BC             7021*  ld_51_040:
0463BC 21 18 6D 04 7022*  	ld hl,F51_040
0463C0 22 C5 C7 04 7023*  	ld (cur_filename),hl
0463C4 11 F1 D3 04 7024*  	ld de,filedata
0463C8 01 00 00 01 7025*  	ld bc,65536
0463CC 3E 01       7026*  	ld a,mos_load
0463CE 5B CF       7027*  	RST.LIL 08h
0463D0 21 86 02 00 7028*  	ld hl,BUF_51_040
0463D4 01 1D 00 00 7029*  	ld bc,29
0463D8 11 29 00 00 7030*  	ld de,41
0463DC DD 21 A5 04 7031*  	ld ix,1189
       00          
0463E1 CD 40 C9 04 7032*  	call vdu_load_img
0463E5 C9          7033*  	ret
0463E6             7034*  
0463E6             7035*  ld_51_048:
0463E6 21 2C 6D 04 7036*  	ld hl,F51_048
0463EA 22 C5 C7 04 7037*  	ld (cur_filename),hl
0463EE 11 F1 D3 04 7038*  	ld de,filedata
0463F2 01 00 00 01 7039*  	ld bc,65536
0463F6 3E 01       7040*  	ld a,mos_load
0463F8 5B CF       7041*  	RST.LIL 08h
0463FA 21 87 02 00 7042*  	ld hl,BUF_51_048
0463FE 01 31 00 00 7043*  	ld bc,49
046402 11 46 00 00 7044*  	ld de,70
046406 DD 21 66 0D 7045*  	ld ix,3430
       00          
04640B CD 40 C9 04 7046*  	call vdu_load_img
04640F C9          7047*  	ret
046410             7048*  
046410             7049*  ld_51_052:
046410 21 40 6D 04 7050*  	ld hl,F51_052
046414 22 C5 C7 04 7051*  	ld (cur_filename),hl
046418 11 F1 D3 04 7052*  	ld de,filedata
04641C 01 00 00 01 7053*  	ld bc,65536
046420 3E 01       7054*  	ld a,mos_load
046422 5B CF       7055*  	RST.LIL 08h
046424 21 88 02 00 7056*  	ld hl,BUF_51_052
046428 01 91 00 00 7057*  	ld bc,145
04642C 11 82 00 00 7058*  	ld de,130
046430 DD 21 A2 49 7059*  	ld ix,18850
       00          
046435 CD 40 C9 04 7060*  	call vdu_load_img
046439 C9          7061*  	ret
04643A             7062*  
04643A             7063*  ld_52_012:
04643A 21 54 6D 04 7064*  	ld hl,F52_012
04643E 22 C5 C7 04 7065*  	ld (cur_filename),hl
046442 11 F1 D3 04 7066*  	ld de,filedata
046446 01 00 00 01 7067*  	ld bc,65536
04644A 3E 01       7068*  	ld a,mos_load
04644C 5B CF       7069*  	RST.LIL 08h
04644E 21 89 02 00 7070*  	ld hl,BUF_52_012
046452 01 0E 00 00 7071*  	ld bc,14
046456 11 17 00 00 7072*  	ld de,23
04645A DD 21 42 01 7073*  	ld ix,322
       00          
04645F CD 40 C9 04 7074*  	call vdu_load_img
046463 C9          7075*  	ret
046464             7076*  
046464             7077*  ld_52_028:
046464 21 68 6D 04 7078*  	ld hl,F52_028
046468 22 C5 C7 04 7079*  	ld (cur_filename),hl
04646C 11 F1 D3 04 7080*  	ld de,filedata
046470 01 00 00 01 7081*  	ld bc,65536
046474 3E 01       7082*  	ld a,mos_load
046476 5B CF       7083*  	RST.LIL 08h
046478 21 8A 02 00 7084*  	ld hl,BUF_52_028
04647C 01 11 00 00 7085*  	ld bc,17
046480 11 1D 00 00 7086*  	ld de,29
046484 DD 21 ED 01 7087*  	ld ix,493
       00          
046489 CD 40 C9 04 7088*  	call vdu_load_img
04648D C9          7089*  	ret
04648E             7090*  
04648E             7091*  ld_52_040:
04648E 21 7C 6D 04 7092*  	ld hl,F52_040
046492 22 C5 C7 04 7093*  	ld (cur_filename),hl
046496 11 F1 D3 04 7094*  	ld de,filedata
04649A 01 00 00 01 7095*  	ld bc,65536
04649E 3E 01       7096*  	ld a,mos_load
0464A0 5B CF       7097*  	RST.LIL 08h
0464A2 21 8B 02 00 7098*  	ld hl,BUF_52_040
0464A6 01 18 00 00 7099*  	ld bc,24
0464AA 11 29 00 00 7100*  	ld de,41
0464AE DD 21 D8 03 7101*  	ld ix,984
       00          
0464B3 CD 40 C9 04 7102*  	call vdu_load_img
0464B7 C9          7103*  	ret
0464B8             7104*  
0464B8             7105*  ld_52_048:
0464B8 21 90 6D 04 7106*  	ld hl,F52_048
0464BC 22 C5 C7 04 7107*  	ld (cur_filename),hl
0464C0 11 F1 D3 04 7108*  	ld de,filedata
0464C4 01 00 00 01 7109*  	ld bc,65536
0464C8 3E 01       7110*  	ld a,mos_load
0464CA 5B CF       7111*  	RST.LIL 08h
0464CC 21 8C 02 00 7112*  	ld hl,BUF_52_048
0464D0 01 28 00 00 7113*  	ld bc,40
0464D4 11 46 00 00 7114*  	ld de,70
0464D8 DD 21 F0 0A 7115*  	ld ix,2800
       00          
0464DD CD 40 C9 04 7116*  	call vdu_load_img
0464E1 C9          7117*  	ret
0464E2             7118*  
0464E2             7119*  ld_52_052:
0464E2 21 A4 6D 04 7120*  	ld hl,F52_052
0464E6 22 C5 C7 04 7121*  	ld (cur_filename),hl
0464EA 11 F1 D3 04 7122*  	ld de,filedata
0464EE 01 00 00 01 7123*  	ld bc,65536
0464F2 3E 01       7124*  	ld a,mos_load
0464F4 5B CF       7125*  	RST.LIL 08h
0464F6 21 8D 02 00 7126*  	ld hl,BUF_52_052
0464FA 01 77 00 00 7127*  	ld bc,119
0464FE 11 82 00 00 7128*  	ld de,130
046502 DD 21 6E 3C 7129*  	ld ix,15470
       00          
046507 CD 40 C9 04 7130*  	call vdu_load_img
04650B C9          7131*  	ret
04650C             7132*  
04650C             7133*  ld_56_012:
04650C 21 B8 6D 04 7134*  	ld hl,F56_012
046510 22 C5 C7 04 7135*  	ld (cur_filename),hl
046514 11 F1 D3 04 7136*  	ld de,filedata
046518 01 00 00 01 7137*  	ld bc,65536
04651C 3E 01       7138*  	ld a,mos_load
04651E 5B CF       7139*  	RST.LIL 08h
046520 21 8E 02 00 7140*  	ld hl,BUF_56_012
046524 01 15 00 00 7141*  	ld bc,21
046528 11 0A 00 00 7142*  	ld de,10
04652C DD 21 D2 00 7143*  	ld ix,210
       00          
046531 CD 40 C9 04 7144*  	call vdu_load_img
046535 C9          7145*  	ret
046536             7146*  
046536             7147*  ld_56_028:
046536 21 CC 6D 04 7148*  	ld hl,F56_028
04653A 22 C5 C7 04 7149*  	ld (cur_filename),hl
04653E 11 F1 D3 04 7150*  	ld de,filedata
046542 01 00 00 01 7151*  	ld bc,65536
046546 3E 01       7152*  	ld a,mos_load
046548 5B CF       7153*  	RST.LIL 08h
04654A 21 8F 02 00 7154*  	ld hl,BUF_56_028
04654E 01 1A 00 00 7155*  	ld bc,26
046552 11 0C 00 00 7156*  	ld de,12
046556 DD 21 38 01 7157*  	ld ix,312
       00          
04655B CD 40 C9 04 7158*  	call vdu_load_img
04655F C9          7159*  	ret
046560             7160*  
046560             7161*  ld_56_040:
046560 21 E0 6D 04 7162*  	ld hl,F56_040
046564 22 C5 C7 04 7163*  	ld (cur_filename),hl
046568 11 F1 D3 04 7164*  	ld de,filedata
04656C 01 00 00 01 7165*  	ld bc,65536
046570 3E 01       7166*  	ld a,mos_load
046572 5B CF       7167*  	RST.LIL 08h
046574 21 90 02 00 7168*  	ld hl,BUF_56_040
046578 01 27 00 00 7169*  	ld bc,39
04657C 11 11 00 00 7170*  	ld de,17
046580 DD 21 97 02 7171*  	ld ix,663
       00          
046585 CD 40 C9 04 7172*  	call vdu_load_img
046589 C9          7173*  	ret
04658A             7174*  
04658A             7175*  ld_56_048:
04658A 21 F4 6D 04 7176*  	ld hl,F56_048
04658E 22 C5 C7 04 7177*  	ld (cur_filename),hl
046592 11 F1 D3 04 7178*  	ld de,filedata
046596 01 00 00 01 7179*  	ld bc,65536
04659A 3E 01       7180*  	ld a,mos_load
04659C 5B CF       7181*  	RST.LIL 08h
04659E 21 91 02 00 7182*  	ld hl,BUF_56_048
0465A2 01 42 00 00 7183*  	ld bc,66
0465A6 11 1E 00 00 7184*  	ld de,30
0465AA DD 21 BC 07 7185*  	ld ix,1980
       00          
0465AF CD 40 C9 04 7186*  	call vdu_load_img
0465B3 C9          7187*  	ret
0465B4             7188*  
0465B4             7189*  ld_56_052:
0465B4 21 08 6E 04 7190*  	ld hl,F56_052
0465B8 22 C5 C7 04 7191*  	ld (cur_filename),hl
0465BC 11 F1 D3 04 7192*  	ld de,filedata
0465C0 01 00 00 01 7193*  	ld bc,65536
0465C4 3E 01       7194*  	ld a,mos_load
0465C6 5B CF       7195*  	RST.LIL 08h
0465C8 21 92 02 00 7196*  	ld hl,BUF_56_052
0465CC 01 35 00 00 7197*  	ld bc,53
0465D0 11 0C 00 00 7198*  	ld de,12
0465D4 DD 21 7C 02 7199*  	ld ix,636
       00          
0465D9 CD 40 C9 04 7200*  	call vdu_load_img
0465DD C9          7201*  	ret
0465DE             7202*  
0465DE             7203*  ld_60_012:
0465DE 21 1C 6E 04 7204*  	ld hl,F60_012
0465E2 22 C5 C7 04 7205*  	ld (cur_filename),hl
0465E6 11 F1 D3 04 7206*  	ld de,filedata
0465EA 01 00 00 01 7207*  	ld bc,65536
0465EE 3E 01       7208*  	ld a,mos_load
0465F0 5B CF       7209*  	RST.LIL 08h
0465F2 21 93 02 00 7210*  	ld hl,BUF_60_012
0465F6 01 1F 00 00 7211*  	ld bc,31
0465FA 11 20 00 00 7212*  	ld de,32
0465FE DD 21 E0 03 7213*  	ld ix,992
       00          
046603 CD 40 C9 04 7214*  	call vdu_load_img
046607 C9          7215*  	ret
046608             7216*  
046608             7217*  ld_60_028:
046608 21 30 6E 04 7218*  	ld hl,F60_028
04660C 22 C5 C7 04 7219*  	ld (cur_filename),hl
046610 11 F1 D3 04 7220*  	ld de,filedata
046614 01 00 00 01 7221*  	ld bc,65536
046618 3E 01       7222*  	ld a,mos_load
04661A 5B CF       7223*  	RST.LIL 08h
04661C 21 94 02 00 7224*  	ld hl,BUF_60_028
046620 01 29 00 00 7225*  	ld bc,41
046624 11 2A 00 00 7226*  	ld de,42
046628 DD 21 BA 06 7227*  	ld ix,1722
       00          
04662D CD 40 C9 04 7228*  	call vdu_load_img
046631 C9          7229*  	ret
046632             7230*  
046632             7231*  ld_60_040:
046632 21 44 6E 04 7232*  	ld hl,F60_040
046636 22 C5 C7 04 7233*  	ld (cur_filename),hl
04663A 11 F1 D3 04 7234*  	ld de,filedata
04663E 01 00 00 01 7235*  	ld bc,65536
046642 3E 01       7236*  	ld a,mos_load
046644 5B CF       7237*  	RST.LIL 08h
046646 21 95 02 00 7238*  	ld hl,BUF_60_040
04664A 01 38 00 00 7239*  	ld bc,56
04664E 11 3B 00 00 7240*  	ld de,59
046652 DD 21 E8 0C 7241*  	ld ix,3304
       00          
046657 CD 40 C9 04 7242*  	call vdu_load_img
04665B C9          7243*  	ret
04665C             7244*  
04665C             7245*  ld_60_048:
04665C 21 58 6E 04 7246*  	ld hl,F60_048
046660 22 C5 C7 04 7247*  	ld (cur_filename),hl
046664 11 F1 D3 04 7248*  	ld de,filedata
046668 01 00 00 01 7249*  	ld bc,65536
04666C 3E 01       7250*  	ld a,mos_load
04666E 5B CF       7251*  	RST.LIL 08h
046670 21 96 02 00 7252*  	ld hl,BUF_60_048
046674 01 5F 00 00 7253*  	ld bc,95
046678 11 64 00 00 7254*  	ld de,100
04667C DD 21 1C 25 7255*  	ld ix,9500
       00          
046681 CD 40 C9 04 7256*  	call vdu_load_img
046685 C9          7257*  	ret
046686             7258*  
046686             7259*  ld_60_052:
046686 21 6C 6E 04 7260*  	ld hl,F60_052
04668A 22 C5 C7 04 7261*  	ld (cur_filename),hl
04668E 11 F1 D3 04 7262*  	ld de,filedata
046692 01 00 00 01 7263*  	ld bc,65536
046696 3E 01       7264*  	ld a,mos_load
046698 5B CF       7265*  	RST.LIL 08h
04669A 21 97 02 00 7266*  	ld hl,BUF_60_052
04669E 01 18 01 00 7267*  	ld bc,280
0466A2 11 A0 00 00 7268*  	ld de,160
0466A6 DD 21 00 AF 7269*  	ld ix,44800
       00          
0466AB CD 40 C9 04 7270*  	call vdu_load_img
0466AF C9          7271*  	ret
0466B0             7272*  
0466B0             7273*  ; File name lookups:
0466B0 70 61 6E 65 7274*  F20_012: db "panels/20_012.rgba2",0
       6C 73 2F 32 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0466C4 70 61 6E 65 7275*  F20_028: db "panels/20_028.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0466D8 70 61 6E 65 7276*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0466EC 70 61 6E 65 7277*  F20_048: db "panels/20_048.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046700 70 61 6E 65 7278*  F20_052: db "panels/20_052.rgba2",0
       6C 73 2F 32 
       30 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046714 70 61 6E 65 7279*  F21_012: db "panels/21_012.rgba2",0
       6C 73 2F 32 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046728 70 61 6E 65 7280*  F21_028: db "panels/21_028.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04673C 70 61 6E 65 7281*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046750 70 61 6E 65 7282*  F21_048: db "panels/21_048.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046764 70 61 6E 65 7283*  F21_052: db "panels/21_052.rgba2",0
       6C 73 2F 32 
       31 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046778 70 61 6E 65 7284*  F22_012: db "panels/22_012.rgba2",0
       6C 73 2F 32 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04678C 70 61 6E 65 7285*  F22_028: db "panels/22_028.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0467A0 70 61 6E 65 7286*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0467B4 70 61 6E 65 7287*  F22_048: db "panels/22_048.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
0467C8 70 61 6E 65 7288*  F22_052: db "panels/22_052.rgba2",0
       6C 73 2F 32 
       32 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
0467DC 70 61 6E 65 7289*  F23_012: db "panels/23_012.rgba2",0
       6C 73 2F 32 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0467F0 70 61 6E 65 7290*  F23_028: db "panels/23_028.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046804 70 61 6E 65 7291*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046818 70 61 6E 65 7292*  F23_048: db "panels/23_048.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
04682C 70 61 6E 65 7293*  F23_052: db "panels/23_052.rgba2",0
       6C 73 2F 32 
       33 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046840 70 61 6E 65 7294*  F24_012: db "panels/24_012.rgba2",0
       6C 73 2F 32 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046854 70 61 6E 65 7295*  F24_028: db "panels/24_028.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046868 70 61 6E 65 7296*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04687C 70 61 6E 65 7297*  F24_048: db "panels/24_048.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046890 70 61 6E 65 7298*  F24_052: db "panels/24_052.rgba2",0
       6C 73 2F 32 
       34 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
0468A4 70 61 6E 65 7299*  F40_012: db "panels/40_012.rgba2",0
       6C 73 2F 34 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0468B8 70 61 6E 65 7300*  F40_028: db "panels/40_028.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0468CC 70 61 6E 65 7301*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0468E0 70 61 6E 65 7302*  F40_048: db "panels/40_048.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
0468F4 70 61 6E 65 7303*  F40_052: db "panels/40_052.rgba2",0
       6C 73 2F 34 
       30 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046908 70 61 6E 65 7304*  F41_012: db "panels/41_012.rgba2",0
       6C 73 2F 34 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04691C 70 61 6E 65 7305*  F41_028: db "panels/41_028.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046930 70 61 6E 65 7306*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046944 70 61 6E 65 7307*  F41_048: db "panels/41_048.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046958 70 61 6E 65 7308*  F41_052: db "panels/41_052.rgba2",0
       6C 73 2F 34 
       31 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
04696C 70 61 6E 65 7309*  F42_012: db "panels/42_012.rgba2",0
       6C 73 2F 34 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046980 70 61 6E 65 7310*  F42_028: db "panels/42_028.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046994 70 61 6E 65 7311*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0469A8 70 61 6E 65 7312*  F42_048: db "panels/42_048.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
0469BC 70 61 6E 65 7313*  F42_052: db "panels/42_052.rgba2",0
       6C 73 2F 34 
       32 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
0469D0 70 61 6E 65 7314*  F43_012: db "panels/43_012.rgba2",0
       6C 73 2F 34 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0469E4 70 61 6E 65 7315*  F43_028: db "panels/43_028.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0469F8 70 61 6E 65 7316*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046A0C 70 61 6E 65 7317*  F43_048: db "panels/43_048.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046A20 70 61 6E 65 7318*  F43_052: db "panels/43_052.rgba2",0
       6C 73 2F 34 
       33 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046A34 70 61 6E 65 7319*  F44_012: db "panels/44_012.rgba2",0
       6C 73 2F 34 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046A48 70 61 6E 65 7320*  F44_028: db "panels/44_028.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046A5C 70 61 6E 65 7321*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046A70 70 61 6E 65 7322*  F44_048: db "panels/44_048.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046A84 70 61 6E 65 7323*  F44_052: db "panels/44_052.rgba2",0
       6C 73 2F 34 
       34 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046A98 70 61 6E 65 7324*  F45_012: db "panels/45_012.rgba2",0
       6C 73 2F 34 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046AAC 70 61 6E 65 7325*  F45_028: db "panels/45_028.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046AC0 70 61 6E 65 7326*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046AD4 70 61 6E 65 7327*  F45_048: db "panels/45_048.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046AE8 70 61 6E 65 7328*  F45_052: db "panels/45_052.rgba2",0
       6C 73 2F 34 
       35 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046AFC 70 61 6E 65 7329*  F46_012: db "panels/46_012.rgba2",0
       6C 73 2F 34 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046B10 70 61 6E 65 7330*  F46_028: db "panels/46_028.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046B24 70 61 6E 65 7331*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046B38 70 61 6E 65 7332*  F46_048: db "panels/46_048.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046B4C 70 61 6E 65 7333*  F46_052: db "panels/46_052.rgba2",0
       6C 73 2F 34 
       36 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046B60 70 61 6E 65 7334*  F47_012: db "panels/47_012.rgba2",0
       6C 73 2F 34 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046B74 70 61 6E 65 7335*  F47_028: db "panels/47_028.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046B88 70 61 6E 65 7336*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046B9C 70 61 6E 65 7337*  F47_048: db "panels/47_048.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046BB0 70 61 6E 65 7338*  F47_052: db "panels/47_052.rgba2",0
       6C 73 2F 34 
       37 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046BC4 70 61 6E 65 7339*  F48_012: db "panels/48_012.rgba2",0
       6C 73 2F 34 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046BD8 70 61 6E 65 7340*  F48_028: db "panels/48_028.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046BEC 70 61 6E 65 7341*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046C00 70 61 6E 65 7342*  F48_048: db "panels/48_048.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046C14 70 61 6E 65 7343*  F48_052: db "panels/48_052.rgba2",0
       6C 73 2F 34 
       38 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046C28 70 61 6E 65 7344*  F49_012: db "panels/49_012.rgba2",0
       6C 73 2F 34 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046C3C 70 61 6E 65 7345*  F49_028: db "panels/49_028.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046C50 70 61 6E 65 7346*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046C64 70 61 6E 65 7347*  F49_048: db "panels/49_048.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046C78 70 61 6E 65 7348*  F49_052: db "panels/49_052.rgba2",0
       6C 73 2F 34 
       39 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046C8C 70 61 6E 65 7349*  F50_012: db "panels/50_012.rgba2",0
       6C 73 2F 35 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046CA0 70 61 6E 65 7350*  F50_028: db "panels/50_028.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046CB4 70 61 6E 65 7351*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046CC8 70 61 6E 65 7352*  F50_048: db "panels/50_048.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046CDC 70 61 6E 65 7353*  F50_052: db "panels/50_052.rgba2",0
       6C 73 2F 35 
       30 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046CF0 70 61 6E 65 7354*  F51_012: db "panels/51_012.rgba2",0
       6C 73 2F 35 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046D04 70 61 6E 65 7355*  F51_028: db "panels/51_028.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046D18 70 61 6E 65 7356*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046D2C 70 61 6E 65 7357*  F51_048: db "panels/51_048.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046D40 70 61 6E 65 7358*  F51_052: db "panels/51_052.rgba2",0
       6C 73 2F 35 
       31 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046D54 70 61 6E 65 7359*  F52_012: db "panels/52_012.rgba2",0
       6C 73 2F 35 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046D68 70 61 6E 65 7360*  F52_028: db "panels/52_028.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046D7C 70 61 6E 65 7361*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046D90 70 61 6E 65 7362*  F52_048: db "panels/52_048.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046DA4 70 61 6E 65 7363*  F52_052: db "panels/52_052.rgba2",0
       6C 73 2F 35 
       32 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046DB8 70 61 6E 65 7364*  F56_012: db "panels/56_012.rgba2",0
       6C 73 2F 35 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046DCC 70 61 6E 65 7365*  F56_028: db "panels/56_028.rgba2",0
       6C 73 2F 35 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046DE0 70 61 6E 65 7366*  F56_040: db "panels/56_040.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046DF4 70 61 6E 65 7367*  F56_048: db "panels/56_048.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046E08 70 61 6E 65 7368*  F56_052: db "panels/56_052.rgba2",0
       6C 73 2F 35 
       36 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046E1C 70 61 6E 65 7369*  F60_012: db "panels/60_012.rgba2",0
       6C 73 2F 36 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
046E30 70 61 6E 65 7370*  F60_028: db "panels/60_028.rgba2",0
       6C 73 2F 36 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
046E44 70 61 6E 65 7371*  F60_040: db "panels/60_040.rgba2",0
       6C 73 2F 36 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046E58 70 61 6E 65 7372*  F60_048: db "panels/60_048.rgba2",0
       6C 73 2F 36 
       30 5F 30 34 
       38 2E 72 67 
       62 61 32 00 
046E6C 70 61 6E 65 7373*  F60_052: db "panels/60_052.rgba2",0
       6C 73 2F 36 
       30 5F 30 35 
       32 2E 72 67 
       62 61 32 00 
046E80             7374*  
046E80             7375*  ; dws buffer ids:
046E80             7376*  BUF_DW_6: equ 0x0298
046E80             7377*  BUF_DW_7: equ 0x0299
046E80             7378*  BUF_DW_8: equ 0x029A
046E80             7379*  BUF_DW_9: equ 0x029B
046E80             7380*  BUF_DW_10: equ 0x029C
046E80             7381*  BUF_DW_11: equ 0x029D
046E80             7382*  BUF_DW_12: equ 0x029E
046E80             7383*  BUF_DW_13: equ 0x029F
046E80             7384*  BUF_DW_14: equ 0x02A0
046E80             7385*  
046E80             7386*  dws_num_panels: equ 9
046E80             7387*  
046E80             7388*  ; dws buffer id reverse lookup:
046E80             7389*  dws_buffer_id_lut:
046E80 98 02 00    7390*  	dl BUF_DW_6
046E83 99 02 00    7391*  	dl BUF_DW_7
046E86 9A 02 00    7392*  	dl BUF_DW_8
046E89 9B 02 00    7393*  	dl BUF_DW_9
046E8C 9C 02 00    7394*  	dl BUF_DW_10
046E8F 9D 02 00    7395*  	dl BUF_DW_11
046E92 9E 02 00    7396*  	dl BUF_DW_12
046E95 9F 02 00    7397*  	dl BUF_DW_13
046E98 A0 02 00    7398*  	dl BUF_DW_14
046E9B             7399*  
046E9B             7400*  ; dws load routines jump table:
046E9B             7401*  dws_load_panels_table:
046E9B B6 6E 04    7402*  	dl ld_dw_6
046E9E E0 6E 04    7403*  	dl ld_dw_7
046EA1 0A 6F 04    7404*  	dl ld_dw_8
046EA4 34 6F 04    7405*  	dl ld_dw_9
046EA7 5E 6F 04    7406*  	dl ld_dw_10
046EAA 88 6F 04    7407*  	dl ld_dw_11
046EAD B2 6F 04    7408*  	dl ld_dw_12
046EB0 DC 6F 04    7409*  	dl ld_dw_13
046EB3 06 70 04    7410*  	dl ld_dw_14
046EB6             7411*  
046EB6             7412*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
046EB6             7413*  
046EB6             7414*  ld_dw_6:
046EB6 21 30 70 04 7415*  	ld hl,Fdw_6
046EBA 22 C5 C7 04 7416*  	ld (cur_filename),hl
046EBE 11 F1 D3 04 7417*  	ld de,filedata
046EC2 01 00 00 01 7418*  	ld bc,65536
046EC6 3E 01       7419*  	ld a,mos_load
046EC8 5B CF       7420*  	RST.LIL 08h
046ECA 21 98 02 00 7421*  	ld hl,BUF_DW_6
046ECE 01 40 01 00 7422*  	ld bc,320
046ED2 11 1E 00 00 7423*  	ld de,30
046ED6 DD 21 80 25 7424*  	ld ix,9600
       00          
046EDB CD 40 C9 04 7425*  	call vdu_load_img
046EDF C9          7426*  	ret
046EE0             7427*  
046EE0             7428*  ld_dw_7:
046EE0 21 3F 70 04 7429*  	ld hl,Fdw_7
046EE4 22 C5 C7 04 7430*  	ld (cur_filename),hl
046EE8 11 F1 D3 04 7431*  	ld de,filedata
046EEC 01 00 00 01 7432*  	ld bc,65536
046EF0 3E 01       7433*  	ld a,mos_load
046EF2 5B CF       7434*  	RST.LIL 08h
046EF4 21 99 02 00 7435*  	ld hl,BUF_DW_7
046EF8 01 40 01 00 7436*  	ld bc,320
046EFC 11 18 00 00 7437*  	ld de,24
046F00 DD 21 00 1E 7438*  	ld ix,7680
       00          
046F05 CD 40 C9 04 7439*  	call vdu_load_img
046F09 C9          7440*  	ret
046F0A             7441*  
046F0A             7442*  ld_dw_8:
046F0A 21 4E 70 04 7443*  	ld hl,Fdw_8
046F0E 22 C5 C7 04 7444*  	ld (cur_filename),hl
046F12 11 F1 D3 04 7445*  	ld de,filedata
046F16 01 00 00 01 7446*  	ld bc,65536
046F1A 3E 01       7447*  	ld a,mos_load
046F1C 5B CF       7448*  	RST.LIL 08h
046F1E 21 9A 02 00 7449*  	ld hl,BUF_DW_8
046F22 01 40 01 00 7450*  	ld bc,320
046F26 11 12 00 00 7451*  	ld de,18
046F2A DD 21 80 16 7452*  	ld ix,5760
       00          
046F2F CD 40 C9 04 7453*  	call vdu_load_img
046F33 C9          7454*  	ret
046F34             7455*  
046F34             7456*  ld_dw_9:
046F34 21 5D 70 04 7457*  	ld hl,Fdw_9
046F38 22 C5 C7 04 7458*  	ld (cur_filename),hl
046F3C 11 F1 D3 04 7459*  	ld de,filedata
046F40 01 00 00 01 7460*  	ld bc,65536
046F44 3E 01       7461*  	ld a,mos_load
046F46 5B CF       7462*  	RST.LIL 08h
046F48 21 9B 02 00 7463*  	ld hl,BUF_DW_9
046F4C 01 40 01 00 7464*  	ld bc,320
046F50 11 10 00 00 7465*  	ld de,16
046F54 DD 21 00 14 7466*  	ld ix,5120
       00          
046F59 CD 40 C9 04 7467*  	call vdu_load_img
046F5D C9          7468*  	ret
046F5E             7469*  
046F5E             7470*  ld_dw_10:
046F5E 21 6C 70 04 7471*  	ld hl,Fdw_10
046F62 22 C5 C7 04 7472*  	ld (cur_filename),hl
046F66 11 F1 D3 04 7473*  	ld de,filedata
046F6A 01 00 00 01 7474*  	ld bc,65536
046F6E 3E 01       7475*  	ld a,mos_load
046F70 5B CF       7476*  	RST.LIL 08h
046F72 21 9C 02 00 7477*  	ld hl,BUF_DW_10
046F76 01 40 01 00 7478*  	ld bc,320
046F7A 11 10 00 00 7479*  	ld de,16
046F7E DD 21 00 14 7480*  	ld ix,5120
       00          
046F83 CD 40 C9 04 7481*  	call vdu_load_img
046F87 C9          7482*  	ret
046F88             7483*  
046F88             7484*  ld_dw_11:
046F88 21 7C 70 04 7485*  	ld hl,Fdw_11
046F8C 22 C5 C7 04 7486*  	ld (cur_filename),hl
046F90 11 F1 D3 04 7487*  	ld de,filedata
046F94 01 00 00 01 7488*  	ld bc,65536
046F98 3E 01       7489*  	ld a,mos_load
046F9A 5B CF       7490*  	RST.LIL 08h
046F9C 21 9D 02 00 7491*  	ld hl,BUF_DW_11
046FA0 01 40 01 00 7492*  	ld bc,320
046FA4 11 0E 00 00 7493*  	ld de,14
046FA8 DD 21 80 11 7494*  	ld ix,4480
       00          
046FAD CD 40 C9 04 7495*  	call vdu_load_img
046FB1 C9          7496*  	ret
046FB2             7497*  
046FB2             7498*  ld_dw_12:
046FB2 21 8C 70 04 7499*  	ld hl,Fdw_12
046FB6 22 C5 C7 04 7500*  	ld (cur_filename),hl
046FBA 11 F1 D3 04 7501*  	ld de,filedata
046FBE 01 00 00 01 7502*  	ld bc,65536
046FC2 3E 01       7503*  	ld a,mos_load
046FC4 5B CF       7504*  	RST.LIL 08h
046FC6 21 9E 02 00 7505*  	ld hl,BUF_DW_12
046FCA 01 40 01 00 7506*  	ld bc,320
046FCE 11 0C 00 00 7507*  	ld de,12
046FD2 DD 21 00 0F 7508*  	ld ix,3840
       00          
046FD7 CD 40 C9 04 7509*  	call vdu_load_img
046FDB C9          7510*  	ret
046FDC             7511*  
046FDC             7512*  ld_dw_13:
046FDC 21 9C 70 04 7513*  	ld hl,Fdw_13
046FE0 22 C5 C7 04 7514*  	ld (cur_filename),hl
046FE4 11 F1 D3 04 7515*  	ld de,filedata
046FE8 01 00 00 01 7516*  	ld bc,65536
046FEC 3E 01       7517*  	ld a,mos_load
046FEE 5B CF       7518*  	RST.LIL 08h
046FF0 21 9F 02 00 7519*  	ld hl,BUF_DW_13
046FF4 01 40 01 00 7520*  	ld bc,320
046FF8 11 0C 00 00 7521*  	ld de,12
046FFC DD 21 00 0F 7522*  	ld ix,3840
       00          
047001 CD 40 C9 04 7523*  	call vdu_load_img
047005 C9          7524*  	ret
047006             7525*  
047006             7526*  ld_dw_14:
047006 21 AC 70 04 7527*  	ld hl,Fdw_14
04700A 22 C5 C7 04 7528*  	ld (cur_filename),hl
04700E 11 F1 D3 04 7529*  	ld de,filedata
047012 01 00 00 01 7530*  	ld bc,65536
047016 3E 01       7531*  	ld a,mos_load
047018 5B CF       7532*  	RST.LIL 08h
04701A 21 A0 02 00 7533*  	ld hl,BUF_DW_14
04701E 01 40 01 00 7534*  	ld bc,320
047022 11 0C 00 00 7535*  	ld de,12
047026 DD 21 00 0F 7536*  	ld ix,3840
       00          
04702B CD 40 C9 04 7537*  	call vdu_load_img
04702F C9          7538*  	ret
047030             7539*  
047030             7540*  ; File name lookups:
047030 64 77 73 2F 7541*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
04703F 64 77 73 2F 7542*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
04704E 64 77 73 2F 7543*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
04705D 64 77 73 2F 7544*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
04706C 64 77 73 2F 7545*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
04707C 64 77 73 2F 7546*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
04708C 64 77 73 2F 7547*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
04709C 64 77 73 2F 7548*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
0470AC 64 77 73 2F 7549*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
0470BC             0014   	include "src/asm/fonts_bmp.asm"
0470BC             0001*  ; plots a bitmap character to the screen
0470BC             0002*  ; inputs: a; ascii character to plot
0470BC             0003*  ;      bc,de = x,y screen coordinates in pixels
0470BC             0004*  ;      ix pointed at the font definition lut
0470BC             0005*  ; returns: bc as the next x coordinate to plot
0470BC             0006*  ;          pretty pixels which hopefully resemble readable text
0470BC             0007*  ; destroys: lotsa stuff
0470BC             0008*  font_bmp_plot:
0470BC             0009*  ; back up bc,de
0470BC C5          0010*      push bc
0470BD D5          0011*      push de
0470BE             0012*  ; get the buffer id of the character
0470BE D6 20       0013*      sub 32 ; lookup table starts at ascii 32
0470C0 06 06       0014*      ld b,6 ; six bytes per lookup record
0470C2 4F          0015*      ld c,a
0470C3 ED 4C       0016*      mlt bc
0470C5 DD 09       0017*      add ix,bc ; now ix points to the character definition
0470C7 DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
0470CA CD 94 B9 04 0019*      call vdu_buff_select
0470CE             0020*  ; plot the character
0470CE D1          0021*      pop de
0470CF DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
0470D2 83          0023*      add a,e ; add the y-coordinate
0470D3 5F          0024*      ld e,a
0470D4 3E 00       0025*      ld a,0 ; can't xor it because we need carry
0470D6 8A          0026*      adc a,d
0470D7 57          0027*      ld d,a ; plot_y now correct for the character
0470D8 C1          0028*      pop bc ; plot_x
0470D9 C5          0029*      push bc ; we want it back after the plot
0470DA CD 65 BB 04 0030*      call vdu_plot_bmp
0470DE             0031*  ; now set bc to the next x coordinate
0470DE C1          0032*      pop bc
0470DF DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0470E2 C6 02       0034*      add a,2 ; add a little padding between characters
0470E4 81          0035*      add a,c ; bump the original x-coordinate
0470E5 4F          0036*      ld c,a
0470E6 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0470E8 88          0038*      adc a,b
0470E9 47          0039*      ld b,a ; plot_x now correct for the next character
0470EA C9          0040*      ret
0470EB             0041*  
0470EB             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0470EB             0043*  ; inputs: hl; pointer to the string
0470EB             0044*  ;       bc,de = x,y screen coordinates in pixels
0470EB             0045*  ;       ix pointed at the font definition lut
0470EB             0046*  ; returns: bc as the next x coordinate to plot
0470EB             0047*  ;          de as the next y coordinate to plot
0470EB             0048*  ;          pretty pixels which hopefully resemble readable text
0470EB             0049*  font_bmp_print:
0470EB             0050*  @next_char:
0470EB             0051*  ; fetch the next character in the string
0470EB 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0470EC FE 00       0053*      cp 0 ; is it zero?
0470EE C8          0054*      ret z ; if so, we're done
0470EF 23          0055*      inc hl ; point to the next character
0470F0 E5          0056*      push hl ; save the pointer
0470F1 D5          0057*      push de ; save our y-coordinate
0470F2 DD E5       0058*      push ix ; save the font lut pointer
0470F4 CD BC 70 04 0059*      call font_bmp_plot ; plot the character
0470F8 DD E1       0060*      pop ix ; restore the font lut pointer
0470FA D1          0061*      pop de ; restore our y-coordinate
0470FB E1          0062*      pop hl ; restore the pointer
0470FC C3 EB 70 04 0063*      jp @next_char ; loop
047100             0015   	include "src/asm/maps.asm"
047100             0001*  ; ############# MAP CONSTANTS #############
047100             0002*  ; map tables addresses
047100             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
047100             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
047100             0005*  
047100             0006*  ; map status/type flags
047100             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
047100             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
047100             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
047100             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
047100             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
047100             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
047100             0013*  ; bits 1 and 0 are the render_type mask
047100             0014*  render_type_cube:   equ %00000000  ; 0
047100             0015*  render_type_floor:  equ %00000001  ; 1
047100             0016*  render_type_null:   equ %00000010  ; 2
047100             0017*  render_type_sprite: equ %00000011  ; 3
047100             0018*  
047100             0019*  ; HOW THE MAP TABLE IS LAID OUT
047100             0020*  ; map table field offset constants
047100             0021*  ; (mind the little-endianess)
047100             0022*  map_type_status: 	equ 0
047100             0023*  map_img_idx: 		equ 1
047100             0024*  map_obj_id: 		equ 2
047100             0025*  map_sprite_id: 		equ 3
047100             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
047100             0027*  
047100             0028*  ; gets cell info from a directional displacement from a given map location
047100             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
047100             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
047100             0031*  ; calls: get_dx_dy, get_cell_from_coords
047100             0032*  get_neighbor:
047100             0033*  ; modulo 4 on orientation
047100 7B          0034*      ld a,e
047101 E6 03       0035*      and 0x03
047103 5F          0036*      ld e,a
047104 CD 33 71 04 0037*  	call get_dx_dy ; d,e = dy,dx
047108             0038*  ; add add b,c to the deltas in d,e
047108 79          0039*  	ld a,c
047109 83          0040*  	add a,e
04710A 5F          0041*  	ld e,a
04710B 78          0042*  	ld a,b
04710C 82          0043*  	add a,d
04710D 57          0044*  	ld d,a
04710E             0045*  ; fall through to get_cell_from_coords
04710E             0046*  
04710E             0047*  ; gets cell info from a given x,y map coordinate
04710E             0048*  ; inputs: ; d,e = map_y,map_x
04710E             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04710E             0050*  get_cell_from_coords:
04710E             0051*  ; modulo 16 on input coords
04710E 7B          0052*  	ld a,e
04710F E6 0F       0053*  	and 0x0F
047111 5F          0054*  	ld e,a
047112 7A          0055*  	ld a,d
047113 E6 0F       0056*  	and 0x0F
047115 57          0057*  	ld d,a
047116             0058*  ; get cell_id from x,y
047116 42          0059*  	ld b,d ; y
047117 0E 10       0060*  	ld c,16 ; number of cells in a column
047119 ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
04711B 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
04711F 6B          0063*  	ld l,e ; x
047120 09          0064*  	add hl,bc ; hl = cell_id of x,y
047121 E5          0065*  	push hl ; so we can return cell_id
047122 4D          0066*  	ld c,l ; c = cell_id
047123             0067*  ; get address of cell record in cell_status table
047123 06 04       0068*  	ld b,map_record_size ; b = bytes per record
047125 ED 4C       0069*  	mlt bc ; bc = offset to cell record
047127 DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
04712C DD 09       0071*  	add ix,bc ; ix = address of cell record
04712E DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
047131 C1          0073*  	pop bc ; bc = cell_id
047132 C9          0074*  	ret
047133             0075*  
047133             0076*  ; gets dx,dy from orientation and distance
047133             0077*  ; d = distance ; e = orientation
047133             0078*  ; returns: d,e = dy,dx
047133             0079*  get_dx_dy:
047133             0080*  ; make sure deu is zero
047133 E5          0081*  	push hl
047134 21 00 00 00 0082*  	ld hl,0
047138 62          0083*  	ld h,d
047139 6B          0084*  	ld l,e
04713A EB          0085*  	ex de,hl
04713B E1          0086*  	pop hl
04713C             0087*  ; modulo 4 on orientation
04713C 7B          0088*  	ld a,e
04713D E6 03       0089*  	and 0x03
04713F FE 00       0090*  	cp 0
047141 28 11       0091*  	jr z,@north
047143 FE 01       0092*  	cp 1
047145 28 14       0093*  	jr z,@east
047147 FE 02       0094*  	cp 2
047149 28 14       0095*  	jr z,@south
04714B FE 03       0096*  	cp 3
04714D 28 13       0097*  	jr z,@west
04714F             0098*  ; if none of those, return zeroes
04714F 11 00 00 00 0099*  	ld de,0
047153 C9          0100*  	ret
047154             0101*  @north:
047154             0102*  ; x = 0, y = -d
047154 1E 00       0103*  	ld e,0
047156 7A          0104*  	ld a,d
047157 ED 44       0105*  	neg
047159 57          0106*  	ld d,a
04715A C9          0107*  	ret
04715B             0108*  @east:
04715B             0109*  ; x = d, y = 0
04715B 5A          0110*  	ld e,d
04715C 16 00       0111*  	ld d,0
04715E C9          0112*  	ret
04715F             0113*  @south:
04715F             0114*  ; x = 0, y = d
04715F 1E 00       0115*  	ld e,0
047161 C9          0116*  	ret
047162             0117*  @west:
047162             0118*  ; x = -d, y = 0
047162 7A          0119*  	ld a,d
047163 ED 44       0120*  	neg
047165 5F          0121*  	ld e,a
047166 16 00       0122*  	ld d,0
047168 C9          0123*  	ret
047169             0124*  
047169             0125*  ; gets the direction from a dy,dx pair
047169             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
047169             0127*  ; inputs: ; d = dy ; e = dx
047169             0128*  ; returns: a = orientation
047169             0129*  get_dir_from_dy_dx:
047169 AF          0130*  	xor a
04716A 93          0131*  	sub e
04716B 28 06       0132*  	jr z,@not_x
04716D 3E 01       0133*  	ld a,1
04716F F8          0134*  	ret m
047170 3E 03       0135*  	ld a,3
047172 C9          0136*  	ret
047173             0137*  @not_x:
047173 AF          0138*  	xor a
047174 92          0139*  	sub d
047175 C8          0140*  	ret z
047176 3E 02       0141*  	ld a,2
047178 F8          0142*  	ret m
047179 AF          0143*  	xor a
04717A C9          0144*  	ret
04717B             0145*  
04717B             0146*  
04717B             0147*  ; translate camera relative x,y deltas to map x,y deltas
04717B             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
04717B             0149*  ; returns:	d = map_dy ; e = map_dx
04717B             0150*  trans_dx_dy:
04717B             0151*  ; modulo 4 on orientation
04717B E6 03       0152*  	and 0x03
04717D 28 11       0153*  	jr z,@north
04717F FE 01       0154*  	cp 1 ; east
047181 28 12       0155*  	jr z,@east
047183 FE 02       0156*  	cp 2 ; south
047185 28 12       0157*  	jr z,@south
047187 FE 03       0158*  	cp 3 ; west
047189 28 13       0159*  	jr z,@west
04718B             0160*  ; if none of those, return zeroes
04718B 11 00 00 00 0161*  	ld de,0
04718F C9          0162*  	ret
047190             0163*  @north: ; invert y axis, x unnchanged
047190 7A          0164*  	ld a,d
047191 ED 44       0165*  	neg
047193 57          0166*  	ld d,a
047194 C9          0167*  	ret
047195             0168*  @east: ; +x = +y, +y = +x
047195 7A          0169*  	ld a,d
047196 53          0170*  	ld d,e
047197 5F          0171*  	ld e,a
047198 C9          0172*  	ret
047199             0173*  @south: ; invert x axis, y unchanged
047199 7B          0174*  	ld a,e
04719A ED 44       0175*  	neg
04719C 5F          0176*  	ld e,a
04719D C9          0177*  	ret
04719E             0178*  @west: ; +x = -y, +y = -x
04719E 7A          0179*  	ld a,d ; y
04719F ED 44       0180*  	neg ; -y
0471A1 53          0181*  	ld d,e ; x
0471A2 5F          0182*  	ld e,a ; -y
0471A3 7A          0183*  	ld a,d ; x
0471A4 ED 44       0184*  	neg ; -x
0471A6 57          0185*  	ld d,a ; -x
0471A7 C9          0186*  	ret
0471A8             0187*  
0471A8             0188*  ; initialize map variables and load map file
0471A8             0189*  ; inputs: none
0471A8             0190*  map_init:
0471A8 AF          0191*  	xor a
0471A9 32 33 C2 04 0192*  	ld (cur_floor),a
0471AD 32 34 C2 04 0193*  	ld (cur_room),a
0471B1             0194*  ; load room file
0471B1 CD B6 71 04 0195*  	call map_load
0471B5             0196*  ; set player initial position
0471B5 C9          0197*  	ret
0471B6             0198*  
0471B6             0199*  ; load map file
0471B6             0200*  ; inputs: cur_floor, cur_room set
0471B6             0201*  map_load:
0471B6 21 48 73 04 0202*  	ld hl,floors ; address of floors lut
0471BA 3A 33 C2 04 0203*  	ld a,(cur_floor)
0471BE 5F          0204*  	ld e,a
0471BF 16 03       0205*  	ld d,3 ; three bytes per lookup record
0471C1 ED 5C       0206*  	mlt de ; de = offset to floor lut entry
0471C3 19          0207*  	add hl,de ; hl = address of floor lut entry
0471C4 ED 27       0208*  	ld hl,(hl) ; hl = base address of rooms for given floor
0471C6 3A 34 C2 04 0209*  	ld a,(cur_room)
0471CA 5F          0210*  	ld e,a
0471CB 16 03       0211*  	ld d,3 ; three bytes per lookup record
0471CD ED 5C       0212*  	mlt de ; de = offset to room lut entry
0471CF 19          0213*  	add hl,de ; hl = address of room lut entry
0471D0 ED 27       0214*  	ld hl,(hl) ; hl = address of room file name
0471D2 22 C5 C7 04 0215*  	ld (cur_filename),hl ; DEBUG
0471D6 11 00 E0 B7 0216*  	ld de,cell_status ; address to load map data
0471DA 01 00 20 00 0217*  	ld bc,8*1024 ; size of map data in bytes
0471DE 3E 01       0218*  	ld a,mos_load
0471E0 5B CF       0219*  	RST.LIL 08h
0471E2             0220*  ; load sprite data
0471E2 CD E7 71 04 0221*  	call map_init_sprites
0471E6 C9          0222*  	ret
0471E7             0223*  
0471E7             0224*  ; initialize sprite data for the current room into sprite table
0471E7             0225*  ; inputs: map data loaded
0471E7             0226*  map_init_sprites:
0471E7             0227*  ; initialize pointers
0471E7 DD 21 00 E0 0228*  	ld ix,cell_status
       B7          
0471EC FD 21 00 FC 0229*  	ld iy,sprite_table_base
       B7          
0471F1 AF          0230*  	xor a
0471F2 32 36 72 04 0231*  	ld (@cell_id),a
0471F6             0232*  @loop:
0471F6 FD 22 40 AF 0233*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
0471FB DD 7E 03    0234*  	ld a,(ix+map_sprite_id)
0471FE FE FF       0235*  	cp 255 ; check for no sprite
047200 28 1B       0236*  	jr z,@next_cell
047202 FD 77 00    0237*  	ld (iy+sprite_id),a
047205 DD 7E 01    0238*  	ld a,(ix+map_img_idx)
047208 FD 77 01    0239*  	ld (iy+sprite_obj),a
04720B CD E0 B0 04 0240*  	call sprite_init_data
04720F 3A 36 72 04 0241*  	ld a,(@cell_id)
047213 CD 37 72 04 0242*  	call cell_id_to_coords ; d = map_y, e = map_x
047217 FD 1F 04    0243*  	ld (iy+sprite_x),de ; set sprite x,y
04721A ED 33 10    0244*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
04721D             0245*  @next_cell:
04721D ED 32 04    0246*  	lea ix,ix+map_record_size ; advance pointer to next cell
047220             0247*  ; check if we've reached the end of the map data
047220 3A 36 72 04 0248*  	ld a,(@cell_id)
047224 3C          0249*  	inc a
047225 32 36 72 04 0250*  	ld (@cell_id),a
047229 20 CB       0251*  	jr nz,@loop ; still more to do
04722B             0252*  ; cleanup and return
04722B FD 21 00 FC 0253*  	ld iy,sprite_table_base ; reset pointer
       B7          
047230 FD 22 40 AF 0254*  	ld (sprite_table_pointer),iy
       04          
047235 C9          0255*  	ret
047236 00          0256*  @cell_id: db 0
047237             0257*  
047237             0258*  ; get the x,y map coordinates from a cell_id
047237             0259*  ; inputs: a = cell_id
047237             0260*  ; returns: a = cell_id, d = map_y, e = map_x
047237             0261*  cell_id_to_coords:
047237 11 00 00 00 0262*  	ld de,0 ; make sure deu is zero
04723B F5          0263*  	push af	; Save the cell id
04723C             0264*  ; Calculate the y coordinate by dividing the index by 16
04723C 57          0265*  	ld d,a      ; Move index into d
04723D CB 3A       0266*  	srl d        ; Shift right once (d = d / 2)
04723F CB 3A       0267*  	srl d        ; Shift right again (d = d / 4)
047241 CB 3A       0268*  	srl d        ; Shift right again (d = d / 8)
047243 CB 3A       0269*  	srl d        ; Shift right again (d = d / 16)
047245             0270*  ; Calculate the x coordinate by taking the index modulo 16
047245 E6 0F       0271*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
047247 5F          0272*  	ld e,a      ; e is now the x coordinate
047248 F1          0273*  	pop af	; a is cell id
047249 C9          0274*  	ret
04724A             0275*  
04724A             0276*  ; get starting position in room 0 of a floor based on is_start flag being set
04724A             0277*  ; inputs: none
04724A             0278*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
04724A             0279*  ; destroys: c,iy
04724A             0280*  get_floor_start:
04724A             0281*  ; loop through map data to find the obj_id in a
04724A DD 21 00 E0 0282*  	ld ix,cell_status
       B7          
04724F 0E 00       0283*  	ld c,0 ; c will be a loop counter giving us cell_id
047251             0284*  @start_cell_loop:
047251 DD 7E 00    0285*  	ld a,(ix+map_type_status)
047254 E6 08       0286*  	and cell_is_start
047256 20 06       0287*  	jr nz,@start_cell_found
047258 ED 32 04    0288*  	lea ix,ix+map_record_size
04725B 0C          0289*  	inc c
04725C 18 F3       0290*  	jr @start_cell_loop
04725E             0291*  @start_cell_found:
04725E 79          0292*  	ld a,c
04725F CD 37 72 04 0293*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
047263 ED 53 39 C2 0294*  	ld (cur_x),de
       04          
047268 C9          0295*  	ret
047269             0296*  
047269             0297*  ; get starting position based an obj_id
047269             0298*  ; inputs: a is the obj_id to search for
047269             0299*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
047269             0300*  ; destroys: c,iy
047269             0301*  get_room_start:
047269             0302*  ; loop through map data to find the obj_id in a
047269 DD 21 00 E0 0303*  	ld ix,cell_status
       B7          
04726E 0E 00       0304*  	ld c,0 ; c will be a loop counter giving us cell_id
047270             0305*  @start_cell_loop:
047270 DD BE 02    0306*  	cp (ix+map_obj_id)
047273 28 06       0307*  	jr z,@start_cell_found
047275 ED 32 04    0308*  	lea ix,ix+map_record_size
047278 0C          0309*  	inc c
047279 18 F5       0310*  	jr @start_cell_loop
04727B             0311*  @start_cell_found:
04727B 79          0312*  	ld a,c
04727C CD 37 72 04 0313*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
047280 ED 53 39 C2 0314*  	ld (cur_x),de
       04          
047285 C9          0315*  	ret
047286             0316*  
047286             0317*  
047286             0318*  ; moves player to the room indicated by the too room cell they've just entered
047286             0319*  ; inputs: ix = pointer to the cell containing the too room door
047286             0320*  change_room:
047286             0321*  ; set visited flag for old room
047286 3A 34 C2 04 0322*  	ld a,(cur_room)
04728A 21 20 73 04 0323*  	ld hl,room_flags
04728E 11 00 00 00 0324*  	ld de,0 ; make sure deu and d are zero
047292 5F          0325*  	ld e,a
047293 19          0326*  	add hl,de ; hl = address of room flags entry
047294 3E 01       0327*  	ld a,room_flag_visited
047296 B6          0328*  	or (hl)
047297 77          0329*  	ld (hl),a
047298             0330*  ; update from_room
047298 3A 34 C2 04 0331*  	ld a,(cur_room)
04729C 32 37 C2 04 0332*  	ld (from_room),a
0472A0             0333*  ; get the new room id from the cell and update cur_room
0472A0 21 16 73 04 0334*  	ld hl,to_room_obj_lut
0472A4 DD 7E 02    0335*  	ld a,(ix+map_obj_id)
0472A7 96          0336*  	sub (hl)
0472A8 32 34 C2 04 0337*  	ld (cur_room),a
0472AC             0338*  ; save old room state to room dat memory location
0472AC 21 2A 73 04 0339*  	ld hl,room_dat_lut
0472B0 3A 37 C2 04 0340*  	ld a,(from_room)
0472B4 57          0341*  	ld d,a
0472B5 1E 03       0342*  	ld e,3 ; three bytes per lookup record
0472B7 ED 5C       0343*  	mlt de ; de = offset to room dat entry
0472B9 19          0344*  	add hl,de ; hl = address of room dat entry
0472BA ED 17       0345*  	ld de,(hl) ; destination address for room data
0472BC 21 00 E0 B7 0346*  	ld hl,cell_status ; source address for room data
0472C0 01 00 20 00 0347*  	ld bc,8*1024 ; size of room data
0472C4 ED B0       0348*  	ldir
0472C6             0349*  ; check room visited flag for target room
0472C6 21 20 73 04 0350*  	ld hl,room_flags
0472CA 3A 34 C2 04 0351*  	ld a,(cur_room)
0472CE 11 00 00 00 0352*  	ld de,0 ; make sure deu and d are zero
0472D2 5F          0353*  	ld e,a
0472D3 19          0354*  	add hl,de ; hl = address of room flags entry
0472D4 3E 01       0355*  	ld a,room_flag_visited
0472D6 A6          0356*  	and (hl)
0472D7 20 0A       0357*  	jr nz,@room_visited
0472D9             0358*  ; room not visited so load room data from file
0472D9 CD B6 71 04 0359*  	call map_load
0472DD CD E7 71 04 0360*  	call map_init_sprites
0472E1 18 1A       0361*  	jr @get_room_start
0472E3             0362*  @room_visited:
0472E3             0363*  ; fetch new room state from room dat memory location
0472E3 21 2A 73 04 0364*  	ld hl,room_dat_lut
0472E7 3A 34 C2 04 0365*  	ld a,(cur_room)
0472EB 57          0366*  	ld d,a
0472EC 1E 03       0367*  	ld e,3 ; three bytes per lookup record
0472EE ED 5C       0368*  	mlt de ; de = offset to room dat entry
0472F0 19          0369*  	add hl,de ; hl = address of room dat entry
0472F1 ED 27       0370*  	ld hl,(hl) ; source address for room data
0472F3 11 00 E0 B7 0371*  	ld de,cell_status ; destination address for room data
0472F7 01 00 20 00 0372*  	ld bc,8*1024 ; size of room data
0472FB ED B0       0373*  	ldir
0472FD             0374*  @get_room_start:
0472FD             0375*  ; get player starting position from to_room_obj_lut
0472FD 3A 37 C2 04 0376*  	ld a,(from_room)
047301 21 16 73 04 0377*  	ld hl,to_room_obj_lut
047305 11 00 00 00 0378*  	ld de,0 ; make sure deu and d are zero
047309 5F          0379*  	ld e,a
04730A 19          0380*  	add hl,de ; hl = address of to_room_obj_lut entry
04730B 7E          0381*  	ld a,(hl)
04730C CD 69 72 04 0382*  	call get_room_start
047310 ED 53 39 C2 0383*  	ld (cur_x),de
       04          
047315 C9          0384*  	ret
047316             0385*  
047316 1E 1F 20 21 0386*  to_room_obj_lut: db 30,31,32,33,34,35,36,37,38,39
       22 23 24 25 
       26 27       
047320             0387*  
047320 00 00 00 00 0388*  room_flags: blkb 10,0
       00 00 00 00 
       00 00       
04732A             0389*  room_flag_visited: equ %00000001
04732A             0390*  
04732A             0391*  room_dat_lut:
04732A 00 00 0A    0392*  room_00_dat: dl 0x0A0000
04732D 00 20 0A    0393*  room_01_dat: dl 0x0A2000
047330 00 40 0A    0394*  room_02_dat: dl 0x0A4000
047333 00 60 0A    0395*  room_03_dat: dl 0x0A6000
047336 00 80 0A    0396*  room_04_dat: dl 0x0A8000
047339 00 A0 0A    0397*  room_05_dat: dl 0x0AA000
04733C 00 C0 0A    0398*  room_06_dat: dl 0x0AC000
04733F 00 E0 0A    0399*  room_07_dat: dl 0x0AE000
047342 00 00 0B    0400*  room_08_dat: dl 0x0B0000
047345 00 20 0B    0401*  room_09_dat: dl 0x0B2000
047348             0402*  
047348             0403*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
047348             0404*  
047348             0405*  start_obj_id: equ 28
047348             0406*  
047348             0407*  floors:
047348 4B 73 04    0408*  	dl floor_00
04734B             0409*  
04734B             0410*  room_files:
04734B             0411*  floor_00:
04734B 54 73 04    0412*  	dl room_00_0
04734E 66 73 04    0413*  	dl room_00_1
047351 78 73 04    0414*  	dl room_00_2
047354             0415*  
047354 6D 61 70 73 0416*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
047366 6D 61 70 73 0417*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
047378 6D 61 70 73 0418*  room_00_2: db "maps/map_00_2.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       32 2E 62 69 
       6E 00       
04738A             0016   	include "src/asm/render.asm"
04738A             0001*  ; #### RENDERING SCRATCH VARIABLES ####
04738A             0002*  ; first three bytes of cell_status record in little-endian order
04738A             0003*  to_cell_status:
04738A             0004*  to_map_type_status: ds 1
04738B             0005*  to_img_idx: ds 1
04738C             0006*  to_obj_id: ds 1
04738D             0007*  ; fourth byte of cell_status record
04738D             0008*  to_sprite_id: ds 1
04738E             0009*  
04738E             0010*  to_poly_id: ds 1
04738F             0011*  to_buffer_id: ds 3
047392             0012*  
047392             0013*  cur_cell_views: ds 3
047395             0014*  
047395             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
047395             0016*  
047395 03 20 00    0017*  bj_health_image: dl BUF_UI_BJ_100 ; 100% health default
047398             0018*  
047398             0019*  ; render background as a prelude to rendering panels and sprites
047398             0020*  ; hl is the buffer id, bc and de are plot_x and plot_y
047398             0021*  render_background:
047398             0022*  ; back up everything
047398 C5          0023*      push bc
047399 D5          0024*      push de
04739A E5          0025*      push hl
04739B             0026*  ; plot background
04739B AF          0027*      xor a ; color mode
04739C 0E 08       0028*      ld c,c_grey_dk ; color
04739E CD 55 B8 04 0029*      call vdu_gcol_fg
0473A2 01 00 00 00 0030*      ld bc,0 ; x0
0473A6 11 00 00 00 0031*      ld de,0 ; y0
0473AA DD 21 3F 01 0032*      ld ix,319
       00          
0473AF FD 21 50 00 0033*      ld iy,80
       00          
0473B4 CD A2 BB 04 0034*      call vdu_plot_rf
0473B8 AF          0035*      xor a ; color mode
0473B9 0E 07       0036*      ld c,c_grey ; color
0473BB CD 55 B8 04 0037*      call vdu_gcol_fg
0473BF 01 00 00 00 0038*      ld bc,0 ; x0
0473C3 11 50 00 00 0039*      ld de,80 ; y0
0473C7 DD 21 3F 01 0040*      ld ix,319
       00          
0473CC FD 21 9F 00 0041*      ld iy,159
       00          
0473D1 CD A2 BB 04 0042*      call vdu_plot_rf
0473D5             0043*  ; plot the background
0473D5 E1          0044*      pop hl ; get back the buffer id
0473D6 CD 94 B9 04 0045*      call vdu_buff_select
0473DA D1          0046*      pop de ; get back plot_y
0473DB C1          0047*      pop bc ; get back plot_x
0473DC CD 65 BB 04 0048*      call vdu_plot_bmp
0473E0 C9          0049*      ret
0473E1             0050*  
0473E1             0051*  ; render a 3D panel
0473E1             0052*  ; inputs: to_poly_id set, to_buffer_id set
0473E1             0053*  render_panel:
0473E1             0054*  ; make the bitmap buffer active
0473E1 2A 8F 73 04 0055*      ld hl,(to_buffer_id)
0473E5 CD 94 B9 04 0056*      call vdu_buff_select
0473E9             0057*  ; get the coordinates of the panel
0473E9 DD 21 19 76 0058*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
0473EE             0059*  ; get the panel's poly_id
0473EE 3A 8E 73 04 0060*      ld a,(to_poly_id)
0473F2             0061*  ; multiply a by 6 to get the offset
0473F2 47          0062*      ld b,a
0473F3 0E 06       0063*      ld c,6
0473F5 ED 4C       0064*      mlt bc
0473F7             0065*  ; add the offset to the lookup table
0473F7 DD 09       0066*      add ix,bc
0473F9             0067*  ; get the panel coordinates
0473F9 DD 07 00    0068*      ld bc,(ix) ; plot_x
0473FC DD 17 03    0069*      ld de,(ix+3) ; plot_y
0473FF             0070*  ; plot that mofo and go home
0473FF CD 65 BB 04 0071*      call vdu_plot_bmp
047403 C9          0072*      ret
047404             0073*  
047404             0074*  ; render a 3D sprite
047404             0075*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
047404             0076*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
047404             0077*  render_sprite:
047404             0078*  ; look up sprite_obj in sprite table
047404 FD 21 00 FC 0079*      ld iy,sprite_table_base
       B7          
047409 47          0080*      ld b,a ; sprite id
04740A 0E 10       0081*      ld c,sprite_record_size
04740C ED 4C       0082*      mlt bc
04740E FD 09       0083*      add iy,bc ; iy points to sprite record
047410 FD 22 40 AF 0084*      ld (sprite_table_pointer),iy
       04          
047415             0085*  ; get sprite imgs lookup
047415 FD 7E 01    0086*      ld a,(iy+sprite_obj) ; a is sprite_obj
047418 FD 21 3A 79 0087*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
04741D 47          0088*      ld b,a
04741E 0E 03       0089*      ld c,3 ; 3 bytes per record
047420 ED 4C       0090*      mlt bc
047422 FD 09       0091*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
047424 FD 37 00    0092*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
047427             0093*  ; convert to_poly_id to sprite_poly
047427 21 0A 79 04 0094*      ld hl,sprite_polys_lookup
04742B 3A 8E 73 04 0095*      ld a,(to_poly_id)
04742F 01 00 00 00 0096*      ld bc,0  ; make sure bcu and b are zero
047433 4F          0097*      ld c,a
047434 09          0098*      add hl,bc ; hl points to the sprite's poly id
047435             0099*  ; get the sprites image defs for the particular poly id
047435 7E          0100*      ld a,(hl)
047436 47          0101*      ld b,a
047437 0E 09       0102*      ld c,9  ; 9 bytes per record
047439 ED 4C       0103*      mlt bc
04743B FD 09       0104*      add iy,bc ; iy is the offset to the sprite's image def
04743D             0105*  ; select buffer
04743D FD 27 06    0106*      ld hl,(iy+6)
047440 CD 94 B9 04 0107*      call vdu_buff_select
047444             0108*  ; plot sprite
047444 FD 07 00    0109*      ld bc,(iy+0) ; plot_x
047447 FD 17 03    0110*      ld de,(iy+3) ; plot_y
04744A CD 65 BB 04 0111*      call vdu_plot_bmp
04744E C9          0112*      ret
04744F             0113*  
04744F             0114*  ; render the object in a given cell and poly_id
04744F             0115*  ; inputs: to_poly_id set, d,e are the cell coords
04744F             0116*  render_cell:
04744F             0117*  ; get the cell to render's cell_status data and store it in scratch
04744F CD 0E 71 04 0118*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
047453 DD 27 00    0119*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
047456 22 8A 73 04 0120*      ld (to_cell_status),hl
04745A             0121*  ; get sprite_id from cell_status lut
04745A DD 7E 03    0122*      ld a,(ix+map_sprite_id)
04745D FE FF       0123*      cp 255 ; value if no sprite present
04745F C2 04 74 04 0124*      jp nz,render_sprite
047463             0125*  ; get cell's render_type
047463 7D          0126*      ld a,l ; map_type_status
047464 E6 02       0127*      and 2 ; mask off everything but lowest two bits
047466 28 02       0128*      jr z,@cube ; render_type_cube is 0
047468 18 32       0129*      jr @nodraw ; placeholder for future implementation TODO
04746A             0130*  @cube:
04746A             0131*      ; get map_img_idx from cell_status lut
04746A 3A 8B 73 04 0132*      ld a,(to_img_idx)
04746E FE FF       0133*      cp 255 ; value for cell with nothing to draw
047470 28 2A       0134*      jr z,@nodraw
047472             0135*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
047472 21 69 77 04 0136*      ld hl,cube_img_idx_lookup
047476 47          0137*      ld b,a
047477 0E 03       0138*      ld c,3 ; three bytes per record
047479 ED 4C       0139*      mlt bc
04747B 09          0140*      add hl,bc ; hl points to the cube's base buffer id
04747C ED 27       0141*      ld hl,(hl) ; hl is the base buffer id
04747E EB          0142*      ex de,hl ; stash the base buffer id in de for later
04747F 21 39 77 04 0143*      ld hl,cube_poly_idx_lookup
047483 3A 8E 73 04 0144*      ld a,(to_poly_id)
047487 01 00 00 00 0145*      ld bc,0 ; make sure bcu is zero
04748B 4F          0146*      ld c,a
04748C 09          0147*      add hl,bc ; hl is the buffer id index address
04748D 7E          0148*      ld a,(hl) ; a is the buffer id index value
04748E 21 00 00 00 0149*      ld hl,0 ; make sure hlu is zero
047492 6F          0150*      ld l,a ; hl is the buffer id index value
047493 19          0151*      add hl,de ; hl is the buffer id
047494 22 8F 73 04 0152*      ld (to_buffer_id),hl
047498 C3 E1 73 04 0153*      jp render_panel
04749C             0154*  @nodraw:
04749C C9          0155*      ret
04749D             0156*  
04749D             0157*  ; render a full 3d scene
04749D             0158*  ; inputs: cur_x, cur_y, orientation set
04749D             0159*  ; outputs: pretty pictures
04749D             0160*  ; destroys: everything
04749D             0161*  render_scene:
04749D             0162*  ; clear the screen
04749D CD 98 73 04 0163*      call render_background
0474A1             0164*  ; get current map position and camera orientation
0474A1 ED 5B 39 C2 0165*      ld de,(cur_x) ; d,e = cur_y,x
       04          
0474A6 CD 0E 71 04 0166*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
0474AA             0167*  ; get cell_views address for this cell and orientation
0474AA 3A 38 C2 04 0168*      ld a,(orientation)
0474AE 5F          0169*      ld e,a
0474AF 16 06       0170*      ld d,6 ; 6 bytes per orientation
0474B1 ED 5C       0171*      mlt de ; de = orientation offset
0474B3 EB          0172*      ex de,hl ; hl = orientation offset
0474B4 06 18       0173*      ld b,24 ; 24 bytes per cell in cell_views lut
0474B6 ED 4C       0174*      mlt bc ; bc = offset from base address of cell_views lut
0474B8 09          0175*      add hl,bc ; hl = total offset from cell_views base address
0474B9 EB          0176*      ex de,hl ; becaue we can't add iy to hl
0474BA FD 21 00 E4 0177*      ld iy,cell_views ; base address of cell_views lut
       B7          
0474BF FD 19       0178*      add iy,de ; iy = cell_views address
0474C1 FD 22 92 73 0179*      ld (cur_cell_views),iy
       04          
0474C6             0180*  ; cycle through the cell views masks and render the appropriate objects
0474C6 01 00 46 28 0181*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
0474CA AF          0182*      xor a ; poly_id
0474CB 32 8E 73 04 0183*      ld (to_poly_id),a
0474CF             0184*  @loop:
0474CF ED 43 DB 74 0185*      ld (@bit_iy+2),bc
       04          
0474D4 FD 2A 92 73 0186*      ld iy,(cur_cell_views)
       04          
0474D9             0187*  @bit_iy:
0474D9 FD CB 00 46 0188*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
0474DD 28 21       0189*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
0474DF             0190*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
0474DF 3A 8E 73 04 0191*      ld a,(to_poly_id)
0474E3 4F          0192*      ld c,a ; poly_id
0474E4 3A 38 C2 04 0193*      ld a,(orientation)
0474E8 CD E6 75 04 0194*      call get_polys_deltas ; d,e = y,x deltas
0474EC 3A 39 C2 04 0195*      ld a,(cur_x)
0474F0 83          0196*      add a,e
0474F1 5F          0197*      ld e,a
0474F2 3A 3A C2 04 0198*      ld a,(cur_y)
0474F6 82          0199*      add a,d
0474F7 57          0200*      ld d,a
0474F8 3A 8E 73 04 0201*      ld a,(to_poly_id)
0474FC CD 4F 74 04 0202*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
047500             0203*  @next_poly:
047500 ED 4B DB 74 0204*      ld bc,(@bit_iy+2)
       04          
047505 3A 8E 73 04 0205*      ld a,(to_poly_id)
047509 3C          0206*      inc a ; a is next poly_id
04750A 32 8E 73 04 0207*      ld (to_poly_id),a
04750E FE 30       0208*      cp num_polys
047510 28 0D       0209*      jr z,@end
047512 3E 08       0210*      ld a,8
047514 80          0211*      add a,b
047515 47          0212*      ld b,a ; bit tested codes to 0x46 + b/8
047516 FE 86       0213*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
047518 20 B5       0214*      jr nz,@loop
04751A 06 46       0215*      ld b,0x46
04751C 0C          0216*      inc c ; iy address offset
04751D 18 B0       0217*      jr @loop
04751F             0218*  @end:
04751F             0219*  ; draw the graphic portions of the ui
04751F 21 05 20 00 0220*  	ld hl,BUF_UI_LOWER_PANEL
047523 CD 94 B9 04 0221*      call vdu_buff_select
047527 01 00 00 00 0222*  	ld bc,0 ; x
04752B 11 A0 00 00 0223*  	ld de,160 ; y
04752F CD 65 BB 04 0224*  	call vdu_plot_bmp
047533             0225*  
047533 2A 54 C2 04 0226*      ld hl,(plyr_wpn_ui_lg)
047537 ED 5B 66 C2 0227*      ld de,(plyr_wpn_anim_fr)
       04          
04753C 19          0228*      add hl,de
04753D CD 94 B9 04 0229*      call vdu_buff_select
047541 01 80 00 00 0230*      ld bc,128 ; x
047545 11 60 00 00 0231*      ld de,96 ; y
047549 CD 65 BB 04 0232*      call vdu_plot_bmp
04754D             0233*  
04754D 2A 51 C2 04 0234*      ld hl,(plyr_wpn_ui_sm)
047551 CD 94 B9 04 0235*      call vdu_buff_select
047555 01 0A 01 00 0236*      ld bc,266 ; x
047559 11 B2 00 00 0237*      ld de,178 ; y
04755D CD 65 BB 04 0238*      call vdu_plot_bmp
047561             0239*  
047561 2A 95 73 04 0240*      ld hl,(bj_health_image)
047565 CD 94 B9 04 0241*      call vdu_buff_select
047569 01 84 00 00 0242*      ld bc,132 ; x
04756D 11 AA 00 00 0243*      ld de,170 ; y
047571 CD 65 BB 04 0244*      call vdu_plot_bmp
047575             0245*  
047575             0246*  ; draw the text portions of the ui
047575 0E 16       0247*      ld c,22 ; x
047577 06 03       0248*      ld b,3 ; y
047579 CD 68 B9 04 0249*      call vdu_move_cursor
04757D 2A 69 C2 04 0250*      ld hl,(plyr_ammo)
047581 CD 78 BE 04 0251*      call printDec
047585             0252*  
047585 0E 11       0253*      ld c,17 ; x
047587 06 03       0254*      ld b,3 ; y
047589 CD 68 B9 04 0255*      call vdu_move_cursor
04758D 2A 2A C2 04 0256*      ld hl,(plyr_health)
047591 CD 78 BE 04 0257*      call printDec
047595             0258*  
047595             0259*  ; DEBUG
047595 0E 11       0260*      ld c,17 ; x
047597 06 04       0261*      ld b,4  ; y
047599 CD 68 B9 04 0262*      call vdu_move_cursor
04759D 2A C7 C4 04 0263*      ld hl,(last_damage)
0475A1 CD 78 BE 04 0264*      call printDec
0475A5             0265*  ; END DEBUG
0475A5             0266*  
0475A5 0E 07       0267*      ld c,7; x
0475A7 06 03       0268*      ld b,3 ; y
0475A9 CD 68 B9 04 0269*      call vdu_move_cursor
0475AD 2A 30 C2 04 0270*      ld hl,(plyr_lives)
0475B1 CD 78 BE 04 0271*      call printDec
0475B5             0272*  
0475B5 0E 03       0273*      ld c,3 ; x
0475B7 06 03       0274*      ld b,3 ; y
0475B9 CD 68 B9 04 0275*      call vdu_move_cursor
0475BD 2A 27 C2 04 0276*      ld hl,(plyr_score)
0475C1 CD 78 BE 04 0277*      call printDec
0475C5             0278*  
0475C5 0E 01       0279*      ld c,1 ; x
0475C7 06 03       0280*      ld b,3 ; y
0475C9 CD 68 B9 04 0281*      call vdu_move_cursor
0475CD 3A 33 C2 04 0282*      ld a,(cur_floor)
0475D1 CD 5A BE 04 0283*      call printHex8
0475D5             0284*  
0475D5 0E 01       0285*      ld c,1 ; x
0475D7 06 04       0286*      ld b,4 ; y
0475D9 CD 68 B9 04 0287*      call vdu_move_cursor
0475DD 3A 34 C2 04 0288*      ld a,(cur_room)
0475E1 CD 5A BE 04 0289*      call printHex8
0475E5             0290*  
0475E5             0291*  ; ; DEBUG
0475E5             0292*      ; ld c,1 ; x
0475E5             0293*      ; ld b,5 ; y
0475E5             0294*      ; call vdu_move_cursor
0475E5             0295*      ; ld hl,cur_x
0475E5             0296*      ; ld a,5
0475E5             0297*      ; call dumpMemoryHex
0475E5             0298*  
0475E5             0299*      ; ld c,1 ; x
0475E5             0300*      ; ld b,7 ; y
0475E5             0301*      ; call vdu_move_cursor
0475E5             0302*      ; ld hl,room_flags
0475E5             0303*      ; ld a,10
0475E5             0304*      ; call dumpMemoryHex
0475E5             0305*  
0475E5             0306*  ;     ld c,1 ; x
0475E5             0307*  ;     ld b,7 ; y
0475E5             0308*  ;     call vdu_move_cursor
0475E5             0309*  ;     ld hl,sprite_new_x
0475E5             0310*  ;     ld a,3
0475E5             0311*  ;     call dumpMemoryHex
0475E5             0312*  
0475E5             0313*  ;     ld c,1 ; x
0475E5             0314*  ;     ld b,8 ; y
0475E5             0315*  ;     call vdu_move_cursor
0475E5             0316*  ;     ld hl,cur_x
0475E5             0317*  ;     ld a,3
0475E5             0318*  ;     call dumpMemoryHex
0475E5             0319*  ; ; END DEBUG
0475E5             0320*  
0475E5             0321*  ; all done
0475E5 C9          0322*      ret
0475E6             0323*  
0475E6             0324*  ; get the map coordinates deltas for a given orientation and poly_id
0475E6             0325*  ; inputs: a is the orientation, c is the poly_id
0475E6             0326*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
0475E6             0327*  get_polys_deltas:
0475E6             0328*  ; get the base address of the orientation-specific deltas lookup table
0475E6 FE 00       0329*      cp 0
0475E8 28 11       0330*      jr z,@orientation_0
0475EA FE 01       0331*      cp 1
0475EC 28 13       0332*      jr z,@orientation_1
0475EE FE 02       0333*      cp 2
0475F0 28 15       0334*      jr z,@orientation_2
0475F2 FE 03       0335*      cp 3
0475F4 28 17       0336*      jr z,@orientation_3
0475F6             0337*  ; return zeros if not found
0475F6 11 00 00 00 0338*      ld de,0
0475FA C9          0339*      ret
0475FB             0340*  @orientation_0: ; north
0475FB 21 8A 77 04 0341*      ld hl,polys_map_deltas_0
0475FF 18 10       0342*      jr @get_deltas
047601             0343*  @orientation_1: ; east
047601 21 EA 77 04 0344*      ld hl,polys_map_deltas_1
047605 18 0A       0345*      jr @get_deltas
047607             0346*  @orientation_2: ; south
047607 21 4A 78 04 0347*      ld hl,polys_map_deltas_2
04760B 18 04       0348*      jr @get_deltas
04760D             0349*  @orientation_3: ; west
04760D 21 AA 78 04 0350*      ld hl,polys_map_deltas_3
047611             0351*  @get_deltas:
047611 06 02       0352*      ld b,2 ; 2 bytes per record
047613 ED 4C       0353*      mlt bc ; poly_id * 2
047615 09          0354*      add hl,bc ; hl points to the deltas
047616 ED 17       0355*      ld de,(hl) ;d,e = dy,dx
047618 C9          0356*      ret
047619             0017   	include "src/asm/polys.asm"
047619             0001*  num_polys: equ 48
047619             0002*  
047619             0003*  polys_lookup_plot:
047619             0004*  ;	   plot_x,  plot_y:
047619 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
04761F 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
047625 22 01 00 3E 0007*  	dl 0x000122,0x00003E ; poly_id:2 02
       00 00       
04762B 00 00 00 3E 0008*  	dl 0x000000,0x00003E ; poly_id:3 03
       00 00       
047631 23 00 00 3E 0009*  	dl 0x000023,0x00003E ; poly_id:4 04
       00 00       
047637 47 00 00 3E 0010*  	dl 0x000047,0x00003E ; poly_id:5 05
       00 00       
04763D 6A 00 00 3E 0011*  	dl 0x00006A,0x00003E ; poly_id:6 06
       00 00       
047643 8E 00 00 3E 0012*  	dl 0x00008E,0x00003E ; poly_id:7 07
       00 00       
047649 B1 00 00 3E 0013*  	dl 0x0000B1,0x00003E ; poly_id:8 08
       00 00       
04764F D5 00 00 3E 0014*  	dl 0x0000D5,0x00003E ; poly_id:9 09
       00 00       
047655 F8 00 00 3E 0015*  	dl 0x0000F8,0x00003E ; poly_id:10 0A
       00 00       
04765B 1C 01 00 3E 0016*  	dl 0x00011C,0x00003E ; poly_id:11 0B
       00 00       
047661 00 00 00 39 0017*  	dl 0x000000,0x000039 ; poly_id:12 0C
       00 00       
047667 2D 00 00 39 0018*  	dl 0x00002D,0x000039 ; poly_id:13 0D
       00 00       
04766D 5B 00 00 39 0019*  	dl 0x00005B,0x000039 ; poly_id:14 0E
       00 00       
047673 89 00 00 39 0020*  	dl 0x000089,0x000039 ; poly_id:15 0F
       00 00       
047679 B1 00 00 39 0021*  	dl 0x0000B1,0x000039 ; poly_id:16 10
       00 00       
04767F D5 00 00 39 0022*  	dl 0x0000D5,0x000039 ; poly_id:17 11
       00 00       
047685 F8 00 00 39 0023*  	dl 0x0000F8,0x000039 ; poly_id:18 12
       00 00       
04768B 1C 01 00 39 0024*  	dl 0x00011C,0x000039 ; poly_id:19 13
       00 00       
047691 00 00 00 39 0025*  	dl 0x000000,0x000039 ; poly_id:20 14
       00 00       
047697 2D 00 00 39 0026*  	dl 0x00002D,0x000039 ; poly_id:21 15
       00 00       
04769D 5B 00 00 39 0027*  	dl 0x00005B,0x000039 ; poly_id:22 16
       00 00       
0476A3 89 00 00 39 0028*  	dl 0x000089,0x000039 ; poly_id:23 17
       00 00       
0476A9 B6 00 00 39 0029*  	dl 0x0000B6,0x000039 ; poly_id:24 18
       00 00       
0476AF E4 00 00 39 0030*  	dl 0x0000E4,0x000039 ; poly_id:25 19
       00 00       
0476B5 12 01 00 39 0031*  	dl 0x000112,0x000039 ; poly_id:26 1A
       00 00       
0476BB 00 00 00 30 0032*  	dl 0x000000,0x000030 ; poly_id:27 1B
       00 00       
0476C1 40 00 00 30 0033*  	dl 0x000040,0x000030 ; poly_id:28 1C
       00 00       
0476C7 80 00 00 30 0034*  	dl 0x000080,0x000030 ; poly_id:29 1D
       00 00       
0476CD B6 00 00 30 0035*  	dl 0x0000B6,0x000030 ; poly_id:30 1E
       00 00       
0476D3 E4 00 00 30 0036*  	dl 0x0000E4,0x000030 ; poly_id:31 1F
       00 00       
0476D9 12 01 00 30 0037*  	dl 0x000112,0x000030 ; poly_id:32 20
       00 00       
0476DF 00 00 00 30 0038*  	dl 0x000000,0x000030 ; poly_id:33 21
       00 00       
0476E5 40 00 00 30 0039*  	dl 0x000040,0x000030 ; poly_id:34 22
       00 00       
0476EB 80 00 00 30 0040*  	dl 0x000080,0x000030 ; poly_id:35 23
       00 00       
0476F1 BF 00 00 30 0041*  	dl 0x0000BF,0x000030 ; poly_id:36 24
       00 00       
0476F7 FF 00 00 30 0042*  	dl 0x0000FF,0x000030 ; poly_id:37 25
       00 00       
0476FD 00 00 00 1A 0043*  	dl 0x000000,0x00001A ; poly_id:38 26
       00 00       
047703 6A 00 00 1A 0044*  	dl 0x00006A,0x00001A ; poly_id:39 27
       00 00       
047709 BF 00 00 1A 0045*  	dl 0x0000BF,0x00001A ; poly_id:40 28
       00 00       
04770F FF 00 00 1A 0046*  	dl 0x0000FF,0x00001A ; poly_id:41 29
       00 00       
047715 00 00 00 1A 0047*  	dl 0x000000,0x00001A ; poly_id:42 2A
       00 00       
04771B 6A 00 00 1A 0048*  	dl 0x00006A,0x00001A ; poly_id:43 2B
       00 00       
047721 D5 00 00 1A 0049*  	dl 0x0000D5,0x00001A ; poly_id:44 2C
       00 00       
047727 00 00 00 00 0050*  	dl 0x000000,0x000000 ; poly_id:45 2D
       00 00       
04772D D5 00 00 00 0051*  	dl 0x0000D5,0x000000 ; poly_id:46 2E
       00 00       
047733 00 00 00 00 0052*  	dl 0x000000,0x000000 ; poly_id:47 2F
       00 00       
047739             0053*  
047739             0054*  cube_poly_idx_lookup:
047739             0055*  ;	 img_idx,  poly_id
047739 00          0056*  	db 0 ; poly_id:0 0
04773A 01          0057*  	db 1 ; poly_id:1 1
04773B 02          0058*  	db 2 ; poly_id:2 2
04773C 03          0059*  	db 3 ; poly_id:3 3
04773D 03          0060*  	db 3 ; poly_id:4 4
04773E 03          0061*  	db 3 ; poly_id:5 5
04773F 03          0062*  	db 3 ; poly_id:6 6
047740 03          0063*  	db 3 ; poly_id:7 7
047741 03          0064*  	db 3 ; poly_id:8 8
047742 03          0065*  	db 3 ; poly_id:9 9
047743 03          0066*  	db 3 ; poly_id:10 10
047744 03          0067*  	db 3 ; poly_id:11 11
047745 04          0068*  	db 4 ; poly_id:12 12
047746 05          0069*  	db 5 ; poly_id:13 13
047747 06          0070*  	db 6 ; poly_id:14 14
047748 07          0071*  	db 7 ; poly_id:15 15
047749 08          0072*  	db 8 ; poly_id:16 16
04774A 09          0073*  	db 9 ; poly_id:17 17
04774B 0A          0074*  	db 10 ; poly_id:18 18
04774C 0B          0075*  	db 11 ; poly_id:19 19
04774D 0C          0076*  	db 12 ; poly_id:20 20
04774E 0C          0077*  	db 12 ; poly_id:21 21
04774F 0C          0078*  	db 12 ; poly_id:22 22
047750 0C          0079*  	db 12 ; poly_id:23 23
047751 0C          0080*  	db 12 ; poly_id:24 24
047752 0C          0081*  	db 12 ; poly_id:25 25
047753 0C          0082*  	db 12 ; poly_id:26 26
047754 0D          0083*  	db 13 ; poly_id:27 27
047755 0E          0084*  	db 14 ; poly_id:28 28
047756 0F          0085*  	db 15 ; poly_id:29 29
047757 10          0086*  	db 16 ; poly_id:30 30
047758 11          0087*  	db 17 ; poly_id:31 31
047759 12          0088*  	db 18 ; poly_id:32 32
04775A 13          0089*  	db 19 ; poly_id:33 33
04775B 13          0090*  	db 19 ; poly_id:34 34
04775C 13          0091*  	db 19 ; poly_id:35 35
04775D 13          0092*  	db 19 ; poly_id:36 36
04775E 13          0093*  	db 19 ; poly_id:37 37
04775F 14          0094*  	db 20 ; poly_id:38 38
047760 15          0095*  	db 21 ; poly_id:39 39
047761 16          0096*  	db 22 ; poly_id:40 40
047762 17          0097*  	db 23 ; poly_id:41 41
047763 18          0098*  	db 24 ; poly_id:42 42
047764 18          0099*  	db 24 ; poly_id:43 43
047765 18          0100*  	db 24 ; poly_id:44 44
047766 19          0101*  	db 25 ; poly_id:45 45
047767 1A          0102*  	db 26 ; poly_id:46 46
047768 1B          0103*  	db 27 ; poly_id:47 47
047769             0104*  
047769             0105*  cube_img_idx_lookup:
047769             0106*  ;	 img_idx,  bank_id,  obj_id,  tile_name
047769 00 01 00    0107*  	dl BUF_10_000 ; idx:0 render_obj_id:10 LIGHT GREY WALL
04776C 1C 01 00    0108*  	dl BUF_11_000 ; idx:1 render_obj_id:11 JAIL CELL
04776F 38 01 00    0109*  	dl BUF_12_000 ; idx:2 render_obj_id:12 STONE ARCH BIRD
047772 54 01 00    0110*  	dl BUF_13_000 ; idx:3 render_obj_id:13 DARK GREY WALL
047775 70 01 00    0111*  	dl BUF_14_000 ; idx:4 render_obj_id:14 WOOD WALL
047778 8C 01 00    0112*  	dl BUF_15_000 ; idx:5 render_obj_id:15 HANGING FLAG
04777B A8 01 00    0113*  	dl BUF_16_000 ; idx:6 render_obj_id:16 WOOD EAGLE
04777E C4 01 00    0114*  	dl BUF_17_000 ; idx:7 render_obj_id:17 BLUE WALL
047781 E0 01 00    0115*  	dl BUF_57_000 ; idx:8 render_obj_id:57 REGULAR DOOR
047784 FC 01 00    0116*  	dl BUF_58_000 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
047787 18 02 00    0117*  	dl BUF_59_000 ; idx:10 render_obj_id:59 ELEVATOR DOOR
04778A             0118*  
04778A             0119*  ; map_delta_x,  map_delta_y
04778A             0120*  polys_map_deltas_0: ; north orientation
04778A FB FB       0121*  	db 0xFB,0xFB ; poly_id:0 00
04778C FC FB       0122*  	db 0xFC,0xFB ; poly_id:1 01
04778E 05 FB       0123*  	db 0x05,0xFB ; poly_id:2 02
047790 FC FB       0124*  	db 0xFC,0xFB ; poly_id:3 03
047792 FD FB       0125*  	db 0xFD,0xFB ; poly_id:4 04
047794 FE FB       0126*  	db 0xFE,0xFB ; poly_id:5 05
047796 FF FB       0127*  	db 0xFF,0xFB ; poly_id:6 06
047798 00 FB       0128*  	db 0x00,0xFB ; poly_id:7 07
04779A 01 FB       0129*  	db 0x01,0xFB ; poly_id:8 08
04779C 02 FB       0130*  	db 0x02,0xFB ; poly_id:9 09
04779E 03 FB       0131*  	db 0x03,0xFB ; poly_id:10 0A
0477A0 04 FB       0132*  	db 0x04,0xFB ; poly_id:11 0B
0477A2 FC FC       0133*  	db 0xFC,0xFC ; poly_id:12 0C
0477A4 FD FC       0134*  	db 0xFD,0xFC ; poly_id:13 0D
0477A6 FE FC       0135*  	db 0xFE,0xFC ; poly_id:14 0E
0477A8 FF FC       0136*  	db 0xFF,0xFC ; poly_id:15 0F
0477AA 01 FC       0137*  	db 0x01,0xFC ; poly_id:16 10
0477AC 02 FC       0138*  	db 0x02,0xFC ; poly_id:17 11
0477AE 03 FC       0139*  	db 0x03,0xFC ; poly_id:18 12
0477B0 04 FC       0140*  	db 0x04,0xFC ; poly_id:19 13
0477B2 FD FC       0141*  	db 0xFD,0xFC ; poly_id:20 14
0477B4 FE FC       0142*  	db 0xFE,0xFC ; poly_id:21 15
0477B6 FF FC       0143*  	db 0xFF,0xFC ; poly_id:22 16
0477B8 00 FC       0144*  	db 0x00,0xFC ; poly_id:23 17
0477BA 01 FC       0145*  	db 0x01,0xFC ; poly_id:24 18
0477BC 02 FC       0146*  	db 0x02,0xFC ; poly_id:25 19
0477BE 03 FC       0147*  	db 0x03,0xFC ; poly_id:26 1A
0477C0 FD FD       0148*  	db 0xFD,0xFD ; poly_id:27 1B
0477C2 FE FD       0149*  	db 0xFE,0xFD ; poly_id:28 1C
0477C4 FF FD       0150*  	db 0xFF,0xFD ; poly_id:29 1D
0477C6 01 FD       0151*  	db 0x01,0xFD ; poly_id:30 1E
0477C8 02 FD       0152*  	db 0x02,0xFD ; poly_id:31 1F
0477CA 03 FD       0153*  	db 0x03,0xFD ; poly_id:32 20
0477CC FE FD       0154*  	db 0xFE,0xFD ; poly_id:33 21
0477CE FF FD       0155*  	db 0xFF,0xFD ; poly_id:34 22
0477D0 00 FD       0156*  	db 0x00,0xFD ; poly_id:35 23
0477D2 01 FD       0157*  	db 0x01,0xFD ; poly_id:36 24
0477D4 02 FD       0158*  	db 0x02,0xFD ; poly_id:37 25
0477D6 FE FE       0159*  	db 0xFE,0xFE ; poly_id:38 26
0477D8 FF FE       0160*  	db 0xFF,0xFE ; poly_id:39 27
0477DA 01 FE       0161*  	db 0x01,0xFE ; poly_id:40 28
0477DC 02 FE       0162*  	db 0x02,0xFE ; poly_id:41 29
0477DE FF FE       0163*  	db 0xFF,0xFE ; poly_id:42 2A
0477E0 00 FE       0164*  	db 0x00,0xFE ; poly_id:43 2B
0477E2 01 FE       0165*  	db 0x01,0xFE ; poly_id:44 2C
0477E4 FF FF       0166*  	db 0xFF,0xFF ; poly_id:45 2D
0477E6 01 FF       0167*  	db 0x01,0xFF ; poly_id:46 2E
0477E8 00 FF       0168*  	db 0x00,0xFF ; poly_id:47 2F
0477EA             0169*  
0477EA             0170*  polys_map_deltas_1: ; east orientation
0477EA 05 FB       0171*  	db 0x05,0xFB ; poly_id:0 00
0477EC 05 FC       0172*  	db 0x05,0xFC ; poly_id:1 01
0477EE 05 05       0173*  	db 0x05,0x05 ; poly_id:2 02
0477F0 05 FC       0174*  	db 0x05,0xFC ; poly_id:3 03
0477F2 05 FD       0175*  	db 0x05,0xFD ; poly_id:4 04
0477F4 05 FE       0176*  	db 0x05,0xFE ; poly_id:5 05
0477F6 05 FF       0177*  	db 0x05,0xFF ; poly_id:6 06
0477F8 05 00       0178*  	db 0x05,0x00 ; poly_id:7 07
0477FA 05 01       0179*  	db 0x05,0x01 ; poly_id:8 08
0477FC 05 02       0180*  	db 0x05,0x02 ; poly_id:9 09
0477FE 05 03       0181*  	db 0x05,0x03 ; poly_id:10 0A
047800 05 04       0182*  	db 0x05,0x04 ; poly_id:11 0B
047802 04 FC       0183*  	db 0x04,0xFC ; poly_id:12 0C
047804 04 FD       0184*  	db 0x04,0xFD ; poly_id:13 0D
047806 04 FE       0185*  	db 0x04,0xFE ; poly_id:14 0E
047808 04 FF       0186*  	db 0x04,0xFF ; poly_id:15 0F
04780A 04 01       0187*  	db 0x04,0x01 ; poly_id:16 10
04780C 04 02       0188*  	db 0x04,0x02 ; poly_id:17 11
04780E 04 03       0189*  	db 0x04,0x03 ; poly_id:18 12
047810 04 04       0190*  	db 0x04,0x04 ; poly_id:19 13
047812 04 FD       0191*  	db 0x04,0xFD ; poly_id:20 14
047814 04 FE       0192*  	db 0x04,0xFE ; poly_id:21 15
047816 04 FF       0193*  	db 0x04,0xFF ; poly_id:22 16
047818 04 00       0194*  	db 0x04,0x00 ; poly_id:23 17
04781A 04 01       0195*  	db 0x04,0x01 ; poly_id:24 18
04781C 04 02       0196*  	db 0x04,0x02 ; poly_id:25 19
04781E 04 03       0197*  	db 0x04,0x03 ; poly_id:26 1A
047820 03 FD       0198*  	db 0x03,0xFD ; poly_id:27 1B
047822 03 FE       0199*  	db 0x03,0xFE ; poly_id:28 1C
047824 03 FF       0200*  	db 0x03,0xFF ; poly_id:29 1D
047826 03 01       0201*  	db 0x03,0x01 ; poly_id:30 1E
047828 03 02       0202*  	db 0x03,0x02 ; poly_id:31 1F
04782A 03 03       0203*  	db 0x03,0x03 ; poly_id:32 20
04782C 03 FE       0204*  	db 0x03,0xFE ; poly_id:33 21
04782E 03 FF       0205*  	db 0x03,0xFF ; poly_id:34 22
047830 03 00       0206*  	db 0x03,0x00 ; poly_id:35 23
047832 03 01       0207*  	db 0x03,0x01 ; poly_id:36 24
047834 03 02       0208*  	db 0x03,0x02 ; poly_id:37 25
047836 02 FE       0209*  	db 0x02,0xFE ; poly_id:38 26
047838 02 FF       0210*  	db 0x02,0xFF ; poly_id:39 27
04783A 02 01       0211*  	db 0x02,0x01 ; poly_id:40 28
04783C 02 02       0212*  	db 0x02,0x02 ; poly_id:41 29
04783E 02 FF       0213*  	db 0x02,0xFF ; poly_id:42 2A
047840 02 00       0214*  	db 0x02,0x00 ; poly_id:43 2B
047842 02 01       0215*  	db 0x02,0x01 ; poly_id:44 2C
047844 01 FF       0216*  	db 0x01,0xFF ; poly_id:45 2D
047846 01 01       0217*  	db 0x01,0x01 ; poly_id:46 2E
047848 01 00       0218*  	db 0x01,0x00 ; poly_id:47 2F
04784A             0219*  
04784A             0220*  polys_map_deltas_2: ; south orientation
04784A 05 05       0221*  	db 0x05,0x05 ; poly_id:0 00
04784C 04 05       0222*  	db 0x04,0x05 ; poly_id:1 01
04784E FB 05       0223*  	db 0xFB,0x05 ; poly_id:2 02
047850 04 05       0224*  	db 0x04,0x05 ; poly_id:3 03
047852 03 05       0225*  	db 0x03,0x05 ; poly_id:4 04
047854 02 05       0226*  	db 0x02,0x05 ; poly_id:5 05
047856 01 05       0227*  	db 0x01,0x05 ; poly_id:6 06
047858 00 05       0228*  	db 0x00,0x05 ; poly_id:7 07
04785A FF 05       0229*  	db 0xFF,0x05 ; poly_id:8 08
04785C FE 05       0230*  	db 0xFE,0x05 ; poly_id:9 09
04785E FD 05       0231*  	db 0xFD,0x05 ; poly_id:10 0A
047860 FC 05       0232*  	db 0xFC,0x05 ; poly_id:11 0B
047862 04 04       0233*  	db 0x04,0x04 ; poly_id:12 0C
047864 03 04       0234*  	db 0x03,0x04 ; poly_id:13 0D
047866 02 04       0235*  	db 0x02,0x04 ; poly_id:14 0E
047868 01 04       0236*  	db 0x01,0x04 ; poly_id:15 0F
04786A FF 04       0237*  	db 0xFF,0x04 ; poly_id:16 10
04786C FE 04       0238*  	db 0xFE,0x04 ; poly_id:17 11
04786E FD 04       0239*  	db 0xFD,0x04 ; poly_id:18 12
047870 FC 04       0240*  	db 0xFC,0x04 ; poly_id:19 13
047872 03 04       0241*  	db 0x03,0x04 ; poly_id:20 14
047874 02 04       0242*  	db 0x02,0x04 ; poly_id:21 15
047876 01 04       0243*  	db 0x01,0x04 ; poly_id:22 16
047878 00 04       0244*  	db 0x00,0x04 ; poly_id:23 17
04787A FF 04       0245*  	db 0xFF,0x04 ; poly_id:24 18
04787C FE 04       0246*  	db 0xFE,0x04 ; poly_id:25 19
04787E FD 04       0247*  	db 0xFD,0x04 ; poly_id:26 1A
047880 03 03       0248*  	db 0x03,0x03 ; poly_id:27 1B
047882 02 03       0249*  	db 0x02,0x03 ; poly_id:28 1C
047884 01 03       0250*  	db 0x01,0x03 ; poly_id:29 1D
047886 FF 03       0251*  	db 0xFF,0x03 ; poly_id:30 1E
047888 FE 03       0252*  	db 0xFE,0x03 ; poly_id:31 1F
04788A FD 03       0253*  	db 0xFD,0x03 ; poly_id:32 20
04788C 02 03       0254*  	db 0x02,0x03 ; poly_id:33 21
04788E 01 03       0255*  	db 0x01,0x03 ; poly_id:34 22
047890 00 03       0256*  	db 0x00,0x03 ; poly_id:35 23
047892 FF 03       0257*  	db 0xFF,0x03 ; poly_id:36 24
047894 FE 03       0258*  	db 0xFE,0x03 ; poly_id:37 25
047896 02 02       0259*  	db 0x02,0x02 ; poly_id:38 26
047898 01 02       0260*  	db 0x01,0x02 ; poly_id:39 27
04789A FF 02       0261*  	db 0xFF,0x02 ; poly_id:40 28
04789C FE 02       0262*  	db 0xFE,0x02 ; poly_id:41 29
04789E 01 02       0263*  	db 0x01,0x02 ; poly_id:42 2A
0478A0 00 02       0264*  	db 0x00,0x02 ; poly_id:43 2B
0478A2 FF 02       0265*  	db 0xFF,0x02 ; poly_id:44 2C
0478A4 01 01       0266*  	db 0x01,0x01 ; poly_id:45 2D
0478A6 FF 01       0267*  	db 0xFF,0x01 ; poly_id:46 2E
0478A8 00 01       0268*  	db 0x00,0x01 ; poly_id:47 2F
0478AA             0269*  
0478AA             0270*  polys_map_deltas_3: ; west orientation
0478AA FB 05       0271*  	db 0xFB,0x05 ; poly_id:0 00
0478AC FB 04       0272*  	db 0xFB,0x04 ; poly_id:1 01
0478AE FB FB       0273*  	db 0xFB,0xFB ; poly_id:2 02
0478B0 FB 04       0274*  	db 0xFB,0x04 ; poly_id:3 03
0478B2 FB 03       0275*  	db 0xFB,0x03 ; poly_id:4 04
0478B4 FB 02       0276*  	db 0xFB,0x02 ; poly_id:5 05
0478B6 FB 01       0277*  	db 0xFB,0x01 ; poly_id:6 06
0478B8 FB 00       0278*  	db 0xFB,0x00 ; poly_id:7 07
0478BA FB FF       0279*  	db 0xFB,0xFF ; poly_id:8 08
0478BC FB FE       0280*  	db 0xFB,0xFE ; poly_id:9 09
0478BE FB FD       0281*  	db 0xFB,0xFD ; poly_id:10 0A
0478C0 FB FC       0282*  	db 0xFB,0xFC ; poly_id:11 0B
0478C2 FC 04       0283*  	db 0xFC,0x04 ; poly_id:12 0C
0478C4 FC 03       0284*  	db 0xFC,0x03 ; poly_id:13 0D
0478C6 FC 02       0285*  	db 0xFC,0x02 ; poly_id:14 0E
0478C8 FC 01       0286*  	db 0xFC,0x01 ; poly_id:15 0F
0478CA FC FF       0287*  	db 0xFC,0xFF ; poly_id:16 10
0478CC FC FE       0288*  	db 0xFC,0xFE ; poly_id:17 11
0478CE FC FD       0289*  	db 0xFC,0xFD ; poly_id:18 12
0478D0 FC FC       0290*  	db 0xFC,0xFC ; poly_id:19 13
0478D2 FC 03       0291*  	db 0xFC,0x03 ; poly_id:20 14
0478D4 FC 02       0292*  	db 0xFC,0x02 ; poly_id:21 15
0478D6 FC 01       0293*  	db 0xFC,0x01 ; poly_id:22 16
0478D8 FC 00       0294*  	db 0xFC,0x00 ; poly_id:23 17
0478DA FC FF       0295*  	db 0xFC,0xFF ; poly_id:24 18
0478DC FC FE       0296*  	db 0xFC,0xFE ; poly_id:25 19
0478DE FC FD       0297*  	db 0xFC,0xFD ; poly_id:26 1A
0478E0 FD 03       0298*  	db 0xFD,0x03 ; poly_id:27 1B
0478E2 FD 02       0299*  	db 0xFD,0x02 ; poly_id:28 1C
0478E4 FD 01       0300*  	db 0xFD,0x01 ; poly_id:29 1D
0478E6 FD FF       0301*  	db 0xFD,0xFF ; poly_id:30 1E
0478E8 FD FE       0302*  	db 0xFD,0xFE ; poly_id:31 1F
0478EA FD FD       0303*  	db 0xFD,0xFD ; poly_id:32 20
0478EC FD 02       0304*  	db 0xFD,0x02 ; poly_id:33 21
0478EE FD 01       0305*  	db 0xFD,0x01 ; poly_id:34 22
0478F0 FD 00       0306*  	db 0xFD,0x00 ; poly_id:35 23
0478F2 FD FF       0307*  	db 0xFD,0xFF ; poly_id:36 24
0478F4 FD FE       0308*  	db 0xFD,0xFE ; poly_id:37 25
0478F6 FE 02       0309*  	db 0xFE,0x02 ; poly_id:38 26
0478F8 FE 01       0310*  	db 0xFE,0x01 ; poly_id:39 27
0478FA FE FF       0311*  	db 0xFE,0xFF ; poly_id:40 28
0478FC FE FE       0312*  	db 0xFE,0xFE ; poly_id:41 29
0478FE FE 01       0313*  	db 0xFE,0x01 ; poly_id:42 2A
047900 FE 00       0314*  	db 0xFE,0x00 ; poly_id:43 2B
047902 FE FF       0315*  	db 0xFE,0xFF ; poly_id:44 2C
047904 FF 01       0316*  	db 0xFF,0x01 ; poly_id:45 2D
047906 FF FF       0317*  	db 0xFF,0xFF ; poly_id:46 2E
047908 FF 00       0318*  	db 0xFF,0x00 ; poly_id:47 2F
04790A             0319*  
04790A             0320*  num_sprite_polys: equ 25
04790A             0321*  
04790A             0322*  sprite_polys_lookup:
04790A             0323*  ;south_id 	; poly_id
04790A FF          0324*  	db 255	; 0
04790B FF          0325*  	db 255	; 1
04790C FF          0326*  	db 255	; 2
04790D 00          0327*  	db 0	; 3
04790E 01          0328*  	db 1	; 4
04790F 02          0329*  	db 2	; 5
047910 03          0330*  	db 3	; 6
047911 04          0331*  	db 4	; 7
047912 05          0332*  	db 5	; 8
047913 06          0333*  	db 6	; 9
047914 07          0334*  	db 7	; 10
047915 08          0335*  	db 8	; 11
047916 FF          0336*  	db 255	; 12
047917 FF          0337*  	db 255	; 13
047918 FF          0338*  	db 255	; 14
047919 FF          0339*  	db 255	; 15
04791A FF          0340*  	db 255	; 16
04791B FF          0341*  	db 255	; 17
04791C FF          0342*  	db 255	; 18
04791D FF          0343*  	db 255	; 19
04791E 09          0344*  	db 9	; 20
04791F 0A          0345*  	db 10	; 21
047920 0B          0346*  	db 11	; 22
047921 0C          0347*  	db 12	; 23
047922 0D          0348*  	db 13	; 24
047923 0E          0349*  	db 14	; 25
047924 0F          0350*  	db 15	; 26
047925 FF          0351*  	db 255	; 27
047926 FF          0352*  	db 255	; 28
047927 FF          0353*  	db 255	; 29
047928 FF          0354*  	db 255	; 30
047929 FF          0355*  	db 255	; 31
04792A FF          0356*  	db 255	; 32
04792B 10          0357*  	db 16	; 33
04792C 11          0358*  	db 17	; 34
04792D 12          0359*  	db 18	; 35
04792E 13          0360*  	db 19	; 36
04792F 14          0361*  	db 20	; 37
047930 FF          0362*  	db 255	; 38
047931 FF          0363*  	db 255	; 39
047932 FF          0364*  	db 255	; 40
047933 FF          0365*  	db 255	; 41
047934 15          0366*  	db 21	; 42
047935 16          0367*  	db 22	; 43
047936 17          0368*  	db 23	; 44
047937 FF          0369*  	db 255	; 45
047938 FF          0370*  	db 255	; 46
047939 18          0371*  	db 24	; 47
04793A             0372*  
04793A             0373*  sprite_imgs_lookup:
04793A             0374*  ;	 sprite_obj; render_obj_id
04793A 76 79 04    0375*  	dl sprite_obj_000 ; render_obj_id:20
04793D 57 7A 04    0376*  	dl sprite_obj_001 ; render_obj_id:21
047940 38 7B 04    0377*  	dl sprite_obj_002 ; render_obj_id:22
047943 19 7C 04    0378*  	dl sprite_obj_003 ; render_obj_id:23
047946 FA 7C 04    0379*  	dl sprite_obj_004 ; render_obj_id:24
047949 DB 7D 04    0380*  	dl sprite_obj_005 ; render_obj_id:40
04794C BC 7E 04    0381*  	dl sprite_obj_006 ; render_obj_id:41
04794F 9D 7F 04    0382*  	dl sprite_obj_007 ; render_obj_id:42
047952 7E 80 04    0383*  	dl sprite_obj_008 ; render_obj_id:43
047955 5F 81 04    0384*  	dl sprite_obj_009 ; render_obj_id:44
047958 40 82 04    0385*  	dl sprite_obj_010 ; render_obj_id:45
04795B 21 83 04    0386*  	dl sprite_obj_011 ; render_obj_id:46
04795E 02 84 04    0387*  	dl sprite_obj_012 ; render_obj_id:47
047961 E3 84 04    0388*  	dl sprite_obj_013 ; render_obj_id:48
047964 C4 85 04    0389*  	dl sprite_obj_014 ; render_obj_id:49
047967 A5 86 04    0390*  	dl sprite_obj_015 ; render_obj_id:50
04796A 86 87 04    0391*  	dl sprite_obj_016 ; render_obj_id:51
04796D 67 88 04    0392*  	dl sprite_obj_017 ; render_obj_id:52
047970 48 89 04    0393*  	dl sprite_obj_018 ; render_obj_id:56
047973 29 8A 04    0394*  	dl sprite_obj_019 ; render_obj_id:60
047976             0395*  ;	 plot_x,  plot_y, buffer_label
047976             0396*  
047976             0397*  ; render_obj_id:20
047976             0398*  sprite_obj_000:
047976 09 00 00 4E 0399*  	dl 0x000009,0x00004E,BUF_20_012
       00 00 34 02 
       00          
04797F 2C 00 00 4E 0400*  	dl 0x00002C,0x00004E,BUF_20_012
       00 00 34 02 
       00          
047988 50 00 00 4E 0401*  	dl 0x000050,0x00004E,BUF_20_012
       00 00 34 02 
       00          
047991 73 00 00 4E 0402*  	dl 0x000073,0x00004E,BUF_20_012
       00 00 34 02 
       00          
04799A 97 00 00 4E 0403*  	dl 0x000097,0x00004E,BUF_20_012
       00 00 34 02 
       00          
0479A3 BA 00 00 4E 0404*  	dl 0x0000BA,0x00004E,BUF_20_012
       00 00 34 02 
       00          
0479AC DE 00 00 4E 0405*  	dl 0x0000DE,0x00004E,BUF_20_012
       00 00 34 02 
       00          
0479B5 01 01 00 4E 0406*  	dl 0x000101,0x00004E,BUF_20_012
       00 00 34 02 
       00          
0479BE 25 01 00 4E 0407*  	dl 0x000125,0x00004E,BUF_20_012
       00 00 34 02 
       00          
0479C7 0B 00 00 4E 0408*  	dl 0x00000B,0x00004E,BUF_20_028
       00 00 35 02 
       00          
0479D0 38 00 00 4E 0409*  	dl 0x000038,0x00004E,BUF_20_028
       00 00 35 02 
       00          
0479D9 66 00 00 4E 0410*  	dl 0x000066,0x00004E,BUF_20_028
       00 00 35 02 
       00          
0479E2 94 00 00 4E 0411*  	dl 0x000094,0x00004E,BUF_20_028
       00 00 35 02 
       00          
0479EB C1 00 00 4E 0412*  	dl 0x0000C1,0x00004E,BUF_20_028
       00 00 35 02 
       00          
0479F4 EF 00 00 4E 0413*  	dl 0x0000EF,0x00004E,BUF_20_028
       00 00 35 02 
       00          
0479FD 1D 01 00 4E 0414*  	dl 0x00011D,0x00004E,BUF_20_028
       00 00 35 02 
       00          
047A06 10 00 00 4D 0415*  	dl 0x000010,0x00004D,BUF_20_040
       00 00 36 02 
       00          
047A0F 50 00 00 4D 0416*  	dl 0x000050,0x00004D,BUF_20_040
       00 00 36 02 
       00          
047A18 90 00 00 4D 0417*  	dl 0x000090,0x00004D,BUF_20_040
       00 00 36 02 
       00          
047A21 CF 00 00 4D 0418*  	dl 0x0000CF,0x00004D,BUF_20_040
       00 00 36 02 
       00          
047A2A 0F 01 00 4D 0419*  	dl 0x00010F,0x00004D,BUF_20_040
       00 00 36 02 
       00          
047A33 1B 00 00 4C 0420*  	dl 0x00001B,0x00004C,BUF_20_048
       00 00 37 02 
       00          
047A3C 85 00 00 4C 0421*  	dl 0x000085,0x00004C,BUF_20_048
       00 00 37 02 
       00          
047A45 F0 00 00 4C 0422*  	dl 0x0000F0,0x00004C,BUF_20_048
       00 00 37 02 
       00          
047A4E 6B 00 00 45 0423*  	dl 0x00006B,0x000045,BUF_20_052
       00 00 38 02 
       00          
047A57             0424*  
047A57             0425*  ; render_obj_id:21
047A57             0426*  sprite_obj_001:
047A57 0D 00 00 55 0427*  	dl 0x00000D,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A60 30 00 00 55 0428*  	dl 0x000030,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A69 54 00 00 55 0429*  	dl 0x000054,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A72 77 00 00 55 0430*  	dl 0x000077,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A7B 9B 00 00 55 0431*  	dl 0x00009B,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A84 BE 00 00 55 0432*  	dl 0x0000BE,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A8D E2 00 00 55 0433*  	dl 0x0000E2,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A96 05 01 00 55 0434*  	dl 0x000105,0x000055,BUF_21_012
       00 00 39 02 
       00          
047A9F 29 01 00 55 0435*  	dl 0x000129,0x000055,BUF_21_012
       00 00 39 02 
       00          
047AA8 10 00 00 57 0436*  	dl 0x000010,0x000057,BUF_21_028
       00 00 3A 02 
       00          
047AB1 3D 00 00 57 0437*  	dl 0x00003D,0x000057,BUF_21_028
       00 00 3A 02 
       00          
047ABA 6B 00 00 57 0438*  	dl 0x00006B,0x000057,BUF_21_028
       00 00 3A 02 
       00          
047AC3 99 00 00 57 0439*  	dl 0x000099,0x000057,BUF_21_028
       00 00 3A 02 
       00          
047ACC C6 00 00 57 0440*  	dl 0x0000C6,0x000057,BUF_21_028
       00 00 3A 02 
       00          
047AD5 F4 00 00 57 0441*  	dl 0x0000F4,0x000057,BUF_21_028
       00 00 3A 02 
       00          
047ADE 22 01 00 57 0442*  	dl 0x000122,0x000057,BUF_21_028
       00 00 3A 02 
       00          
047AE7 16 00 00 59 0443*  	dl 0x000016,0x000059,BUF_21_040
       00 00 3B 02 
       00          
047AF0 56 00 00 59 0444*  	dl 0x000056,0x000059,BUF_21_040
       00 00 3B 02 
       00          
047AF9 96 00 00 59 0445*  	dl 0x000096,0x000059,BUF_21_040
       00 00 3B 02 
       00          
047B02 D5 00 00 59 0446*  	dl 0x0000D5,0x000059,BUF_21_040
       00 00 3B 02 
       00          
047B0B 15 01 00 59 0447*  	dl 0x000115,0x000059,BUF_21_040
       00 00 3B 02 
       00          
047B14 26 00 00 60 0448*  	dl 0x000026,0x000060,BUF_21_048
       00 00 3C 02 
       00          
047B1D 90 00 00 60 0449*  	dl 0x000090,0x000060,BUF_21_048
       00 00 3C 02 
       00          
047B26 FB 00 00 60 0450*  	dl 0x0000FB,0x000060,BUF_21_048
       00 00 3C 02 
       00          
047B2F 6E 00 00 82 0451*  	dl 0x00006E,0x000082,BUF_21_052
       00 00 3D 02 
       00          
047B38             0452*  
047B38             0453*  ; render_obj_id:22
047B38             0454*  sprite_obj_002:
047B38 09 00 00 55 0455*  	dl 0x000009,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B41 2C 00 00 55 0456*  	dl 0x00002C,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B4A 50 00 00 55 0457*  	dl 0x000050,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B53 73 00 00 55 0458*  	dl 0x000073,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B5C 97 00 00 55 0459*  	dl 0x000097,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B65 BA 00 00 55 0460*  	dl 0x0000BA,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B6E DE 00 00 55 0461*  	dl 0x0000DE,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B77 01 01 00 55 0462*  	dl 0x000101,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B80 25 01 00 55 0463*  	dl 0x000125,0x000055,BUF_22_012
       00 00 3E 02 
       00          
047B89 0B 00 00 57 0464*  	dl 0x00000B,0x000057,BUF_22_028
       00 00 3F 02 
       00          
047B92 38 00 00 57 0465*  	dl 0x000038,0x000057,BUF_22_028
       00 00 3F 02 
       00          
047B9B 66 00 00 57 0466*  	dl 0x000066,0x000057,BUF_22_028
       00 00 3F 02 
       00          
047BA4 94 00 00 57 0467*  	dl 0x000094,0x000057,BUF_22_028
       00 00 3F 02 
       00          
047BAD C1 00 00 57 0468*  	dl 0x0000C1,0x000057,BUF_22_028
       00 00 3F 02 
       00          
047BB6 EF 00 00 57 0469*  	dl 0x0000EF,0x000057,BUF_22_028
       00 00 3F 02 
       00          
047BBF 1D 01 00 57 0470*  	dl 0x00011D,0x000057,BUF_22_028
       00 00 3F 02 
       00          
047BC8 10 00 00 59 0471*  	dl 0x000010,0x000059,BUF_22_040
       00 00 40 02 
       00          
047BD1 50 00 00 59 0472*  	dl 0x000050,0x000059,BUF_22_040
       00 00 40 02 
       00          
047BDA 90 00 00 59 0473*  	dl 0x000090,0x000059,BUF_22_040
       00 00 40 02 
       00          
047BE3 CF 00 00 59 0474*  	dl 0x0000CF,0x000059,BUF_22_040
       00 00 40 02 
       00          
047BEC 0F 01 00 59 0475*  	dl 0x00010F,0x000059,BUF_22_040
       00 00 40 02 
       00          
047BF5 1B 00 00 60 0476*  	dl 0x00001B,0x000060,BUF_22_048
       00 00 41 02 
       00          
047BFE 85 00 00 60 0477*  	dl 0x000085,0x000060,BUF_22_048
       00 00 41 02 
       00          
047C07 F0 00 00 60 0478*  	dl 0x0000F0,0x000060,BUF_22_048
       00 00 41 02 
       00          
047C10 50 00 00 82 0479*  	dl 0x000050,0x000082,BUF_22_052
       00 00 42 02 
       00          
047C19             0480*  
047C19             0481*  ; render_obj_id:23
047C19             0482*  sprite_obj_003:
047C19 0C 00 00 3E 0483*  	dl 0x00000C,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C22 2F 00 00 3E 0484*  	dl 0x00002F,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C2B 53 00 00 3E 0485*  	dl 0x000053,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C34 76 00 00 3E 0486*  	dl 0x000076,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C3D 9A 00 00 3E 0487*  	dl 0x00009A,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C46 BD 00 00 3E 0488*  	dl 0x0000BD,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C4F E1 00 00 3E 0489*  	dl 0x0000E1,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C58 04 01 00 3E 0490*  	dl 0x000104,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C61 28 01 00 3E 0491*  	dl 0x000128,0x00003E,BUF_23_012
       00 00 43 02 
       00          
047C6A 0F 00 00 39 0492*  	dl 0x00000F,0x000039,BUF_23_028
       00 00 44 02 
       00          
047C73 3C 00 00 39 0493*  	dl 0x00003C,0x000039,BUF_23_028
       00 00 44 02 
       00          
047C7C 6A 00 00 39 0494*  	dl 0x00006A,0x000039,BUF_23_028
       00 00 44 02 
       00          
047C85 98 00 00 39 0495*  	dl 0x000098,0x000039,BUF_23_028
       00 00 44 02 
       00          
047C8E C5 00 00 39 0496*  	dl 0x0000C5,0x000039,BUF_23_028
       00 00 44 02 
       00          
047C97 F3 00 00 39 0497*  	dl 0x0000F3,0x000039,BUF_23_028
       00 00 44 02 
       00          
047CA0 21 01 00 39 0498*  	dl 0x000121,0x000039,BUF_23_028
       00 00 44 02 
       00          
047CA9 15 00 00 30 0499*  	dl 0x000015,0x000030,BUF_23_040
       00 00 45 02 
       00          
047CB2 55 00 00 30 0500*  	dl 0x000055,0x000030,BUF_23_040
       00 00 45 02 
       00          
047CBB 95 00 00 30 0501*  	dl 0x000095,0x000030,BUF_23_040
       00 00 45 02 
       00          
047CC4 D4 00 00 30 0502*  	dl 0x0000D4,0x000030,BUF_23_040
       00 00 45 02 
       00          
047CCD 14 01 00 30 0503*  	dl 0x000114,0x000030,BUF_23_040
       00 00 45 02 
       00          
047CD6 24 00 00 1A 0504*  	dl 0x000024,0x00001A,BUF_23_048
       00 00 46 02 
       00          
047CDF 8E 00 00 1A 0505*  	dl 0x00008E,0x00001A,BUF_23_048
       00 00 46 02 
       00          
047CE8 F9 00 00 1A 0506*  	dl 0x0000F9,0x00001A,BUF_23_048
       00 00 46 02 
       00          
047CF1 09 01 00 82 0507*  	dl 0x000109,0x000082,BUF_23_052
       00 00 47 02 
       00          
047CFA             0508*  
047CFA             0509*  ; render_obj_id:24
047CFA             0510*  sprite_obj_004:
047CFA 0D 00 00 55 0511*  	dl 0x00000D,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D03 30 00 00 55 0512*  	dl 0x000030,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D0C 54 00 00 55 0513*  	dl 0x000054,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D15 77 00 00 55 0514*  	dl 0x000077,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D1E 9B 00 00 55 0515*  	dl 0x00009B,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D27 BE 00 00 55 0516*  	dl 0x0000BE,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D30 E2 00 00 55 0517*  	dl 0x0000E2,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D39 05 01 00 55 0518*  	dl 0x000105,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D42 29 01 00 55 0519*  	dl 0x000129,0x000055,BUF_24_012
       00 00 48 02 
       00          
047D4B 10 00 00 57 0520*  	dl 0x000010,0x000057,BUF_24_028
       00 00 49 02 
       00          
047D54 3D 00 00 57 0521*  	dl 0x00003D,0x000057,BUF_24_028
       00 00 49 02 
       00          
047D5D 6B 00 00 57 0522*  	dl 0x00006B,0x000057,BUF_24_028
       00 00 49 02 
       00          
047D66 99 00 00 57 0523*  	dl 0x000099,0x000057,BUF_24_028
       00 00 49 02 
       00          
047D6F C6 00 00 57 0524*  	dl 0x0000C6,0x000057,BUF_24_028
       00 00 49 02 
       00          
047D78 F4 00 00 57 0525*  	dl 0x0000F4,0x000057,BUF_24_028
       00 00 49 02 
       00          
047D81 22 01 00 57 0526*  	dl 0x000122,0x000057,BUF_24_028
       00 00 49 02 
       00          
047D8A 16 00 00 59 0527*  	dl 0x000016,0x000059,BUF_24_040
       00 00 4A 02 
       00          
047D93 56 00 00 59 0528*  	dl 0x000056,0x000059,BUF_24_040
       00 00 4A 02 
       00          
047D9C 96 00 00 59 0529*  	dl 0x000096,0x000059,BUF_24_040
       00 00 4A 02 
       00          
047DA5 D5 00 00 59 0530*  	dl 0x0000D5,0x000059,BUF_24_040
       00 00 4A 02 
       00          
047DAE 15 01 00 59 0531*  	dl 0x000115,0x000059,BUF_24_040
       00 00 4A 02 
       00          
047DB7 26 00 00 60 0532*  	dl 0x000026,0x000060,BUF_24_048
       00 00 4B 02 
       00          
047DC0 90 00 00 60 0533*  	dl 0x000090,0x000060,BUF_24_048
       00 00 4B 02 
       00          
047DC9 FB 00 00 60 0534*  	dl 0x0000FB,0x000060,BUF_24_048
       00 00 4B 02 
       00          
047DD2 6E 00 00 82 0535*  	dl 0x00006E,0x000082,BUF_24_052
       00 00 4C 02 
       00          
047DDB             0536*  
047DDB             0537*  ; render_obj_id:40
047DDB             0538*  sprite_obj_005:
047DDB 0A 00 00 5A 0539*  	dl 0x00000A,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047DE4 2D 00 00 5A 0540*  	dl 0x00002D,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047DED 51 00 00 5A 0541*  	dl 0x000051,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047DF6 74 00 00 5A 0542*  	dl 0x000074,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047DFF 98 00 00 5A 0543*  	dl 0x000098,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047E08 BB 00 00 5A 0544*  	dl 0x0000BB,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047E11 DF 00 00 5A 0545*  	dl 0x0000DF,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047E1A 02 01 00 5A 0546*  	dl 0x000102,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047E23 26 01 00 5A 0547*  	dl 0x000126,0x00005A,BUF_40_012
       00 00 4D 02 
       00          
047E2C 0D 00 00 5C 0548*  	dl 0x00000D,0x00005C,BUF_40_028
       00 00 4E 02 
       00          
047E35 3A 00 00 5C 0549*  	dl 0x00003A,0x00005C,BUF_40_028
       00 00 4E 02 
       00          
047E3E 68 00 00 5C 0550*  	dl 0x000068,0x00005C,BUF_40_028
       00 00 4E 02 
       00          
047E47 96 00 00 5C 0551*  	dl 0x000096,0x00005C,BUF_40_028
       00 00 4E 02 
       00          
047E50 C3 00 00 5C 0552*  	dl 0x0000C3,0x00005C,BUF_40_028
       00 00 4E 02 
       00          
047E59 F1 00 00 5C 0553*  	dl 0x0000F1,0x00005C,BUF_40_028
       00 00 4E 02 
       00          
047E62 1F 01 00 5C 0554*  	dl 0x00011F,0x00005C,BUF_40_028
       00 00 4E 02 
       00          
047E6B 13 00 00 60 0555*  	dl 0x000013,0x000060,BUF_40_040
       00 00 4F 02 
       00          
047E74 53 00 00 60 0556*  	dl 0x000053,0x000060,BUF_40_040
       00 00 4F 02 
       00          
047E7D 93 00 00 60 0557*  	dl 0x000093,0x000060,BUF_40_040
       00 00 4F 02 
       00          
047E86 D2 00 00 60 0558*  	dl 0x0000D2,0x000060,BUF_40_040
       00 00 4F 02 
       00          
047E8F 12 01 00 60 0559*  	dl 0x000112,0x000060,BUF_40_040
       00 00 4F 02 
       00          
047E98 20 00 00 6D 0560*  	dl 0x000020,0x00006D,BUF_40_048
       00 00 50 02 
       00          
047EA1 8A 00 00 6D 0561*  	dl 0x00008A,0x00006D,BUF_40_048
       00 00 50 02 
       00          
047EAA F5 00 00 6D 0562*  	dl 0x0000F5,0x00006D,BUF_40_048
       00 00 50 02 
       00          
047EB3 E0 00 00 9F 0563*  	dl 0x0000E0,0x00009F,BUF_40_052
       00 00 51 02 
       00          
047EBC             0564*  
047EBC             0565*  ; render_obj_id:41
047EBC             0566*  sprite_obj_006:
047EBC 0C 00 00 55 0567*  	dl 0x00000C,0x000055,BUF_41_012
       00 00 52 02 
       00          
047EC5 2F 00 00 55 0568*  	dl 0x00002F,0x000055,BUF_41_012
       00 00 52 02 
       00          
047ECE 53 00 00 55 0569*  	dl 0x000053,0x000055,BUF_41_012
       00 00 52 02 
       00          
047ED7 76 00 00 55 0570*  	dl 0x000076,0x000055,BUF_41_012
       00 00 52 02 
       00          
047EE0 9A 00 00 55 0571*  	dl 0x00009A,0x000055,BUF_41_012
       00 00 52 02 
       00          
047EE9 BD 00 00 55 0572*  	dl 0x0000BD,0x000055,BUF_41_012
       00 00 52 02 
       00          
047EF2 E1 00 00 55 0573*  	dl 0x0000E1,0x000055,BUF_41_012
       00 00 52 02 
       00          
047EFB 04 01 00 55 0574*  	dl 0x000104,0x000055,BUF_41_012
       00 00 52 02 
       00          
047F04 28 01 00 55 0575*  	dl 0x000128,0x000055,BUF_41_012
       00 00 52 02 
       00          
047F0D 0E 00 00 57 0576*  	dl 0x00000E,0x000057,BUF_41_028
       00 00 53 02 
       00          
047F16 3B 00 00 57 0577*  	dl 0x00003B,0x000057,BUF_41_028
       00 00 53 02 
       00          
047F1F 69 00 00 57 0578*  	dl 0x000069,0x000057,BUF_41_028
       00 00 53 02 
       00          
047F28 97 00 00 57 0579*  	dl 0x000097,0x000057,BUF_41_028
       00 00 53 02 
       00          
047F31 C4 00 00 57 0580*  	dl 0x0000C4,0x000057,BUF_41_028
       00 00 53 02 
       00          
047F3A F2 00 00 57 0581*  	dl 0x0000F2,0x000057,BUF_41_028
       00 00 53 02 
       00          
047F43 20 01 00 57 0582*  	dl 0x000120,0x000057,BUF_41_028
       00 00 53 02 
       00          
047F4C 14 00 00 5A 0583*  	dl 0x000014,0x00005A,BUF_41_040
       00 00 54 02 
       00          
047F55 54 00 00 5A 0584*  	dl 0x000054,0x00005A,BUF_41_040
       00 00 54 02 
       00          
047F5E 94 00 00 5A 0585*  	dl 0x000094,0x00005A,BUF_41_040
       00 00 54 02 
       00          
047F67 D3 00 00 5A 0586*  	dl 0x0000D3,0x00005A,BUF_41_040
       00 00 54 02 
       00          
047F70 13 01 00 5A 0587*  	dl 0x000113,0x00005A,BUF_41_040
       00 00 54 02 
       00          
047F79 23 00 00 62 0588*  	dl 0x000023,0x000062,BUF_41_048
       00 00 55 02 
       00          
047F82 8D 00 00 62 0589*  	dl 0x00008D,0x000062,BUF_41_048
       00 00 55 02 
       00          
047F8B F8 00 00 62 0590*  	dl 0x0000F8,0x000062,BUF_41_048
       00 00 55 02 
       00          
047F94 84 00 00 86 0591*  	dl 0x000084,0x000086,BUF_41_052
       00 00 56 02 
       00          
047F9D             0592*  
047F9D             0593*  ; render_obj_id:42
047F9D             0594*  sprite_obj_007:
047F9D 0D 00 00 57 0595*  	dl 0x00000D,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FA6 30 00 00 57 0596*  	dl 0x000030,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FAF 54 00 00 57 0597*  	dl 0x000054,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FB8 77 00 00 57 0598*  	dl 0x000077,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FC1 9B 00 00 57 0599*  	dl 0x00009B,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FCA BE 00 00 57 0600*  	dl 0x0000BE,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FD3 E2 00 00 57 0601*  	dl 0x0000E2,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FDC 05 01 00 57 0602*  	dl 0x000105,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FE5 29 01 00 57 0603*  	dl 0x000129,0x000057,BUF_42_012
       00 00 57 02 
       00          
047FEE 10 00 00 5A 0604*  	dl 0x000010,0x00005A,BUF_42_028
       00 00 58 02 
       00          
047FF7 3D 00 00 5A 0605*  	dl 0x00003D,0x00005A,BUF_42_028
       00 00 58 02 
       00          
048000 6B 00 00 5A 0606*  	dl 0x00006B,0x00005A,BUF_42_028
       00 00 58 02 
       00          
048009 99 00 00 5A 0607*  	dl 0x000099,0x00005A,BUF_42_028
       00 00 58 02 
       00          
048012 C6 00 00 5A 0608*  	dl 0x0000C6,0x00005A,BUF_42_028
       00 00 58 02 
       00          
04801B F4 00 00 5A 0609*  	dl 0x0000F4,0x00005A,BUF_42_028
       00 00 58 02 
       00          
048024 22 01 00 5A 0610*  	dl 0x000122,0x00005A,BUF_42_028
       00 00 58 02 
       00          
04802D 17 00 00 5E 0611*  	dl 0x000017,0x00005E,BUF_42_040
       00 00 59 02 
       00          
048036 57 00 00 5E 0612*  	dl 0x000057,0x00005E,BUF_42_040
       00 00 59 02 
       00          
04803F 97 00 00 5E 0613*  	dl 0x000097,0x00005E,BUF_42_040
       00 00 59 02 
       00          
048048 D6 00 00 5E 0614*  	dl 0x0000D6,0x00005E,BUF_42_040
       00 00 59 02 
       00          
048051 16 01 00 5E 0615*  	dl 0x000116,0x00005E,BUF_42_040
       00 00 59 02 
       00          
04805A 28 00 00 69 0616*  	dl 0x000028,0x000069,BUF_42_048
       00 00 5A 02 
       00          
048063 92 00 00 69 0617*  	dl 0x000092,0x000069,BUF_42_048
       00 00 5A 02 
       00          
04806C FD 00 00 69 0618*  	dl 0x0000FD,0x000069,BUF_42_048
       00 00 5A 02 
       00          
048075 7D 00 00 9B 0619*  	dl 0x00007D,0x00009B,BUF_42_052
       00 00 5B 02 
       00          
04807E             0620*  
04807E             0621*  ; render_obj_id:43
04807E             0622*  sprite_obj_008:
04807E 0C 00 00 5C 0623*  	dl 0x00000C,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
048087 2F 00 00 5C 0624*  	dl 0x00002F,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
048090 53 00 00 5C 0625*  	dl 0x000053,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
048099 76 00 00 5C 0626*  	dl 0x000076,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
0480A2 9A 00 00 5C 0627*  	dl 0x00009A,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
0480AB BD 00 00 5C 0628*  	dl 0x0000BD,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
0480B4 E1 00 00 5C 0629*  	dl 0x0000E1,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
0480BD 04 01 00 5C 0630*  	dl 0x000104,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
0480C6 28 01 00 5C 0631*  	dl 0x000128,0x00005C,BUF_43_012
       00 00 5C 02 
       00          
0480CF 0F 00 00 61 0632*  	dl 0x00000F,0x000061,BUF_43_028
       00 00 5D 02 
       00          
0480D8 3C 00 00 61 0633*  	dl 0x00003C,0x000061,BUF_43_028
       00 00 5D 02 
       00          
0480E1 6A 00 00 61 0634*  	dl 0x00006A,0x000061,BUF_43_028
       00 00 5D 02 
       00          
0480EA 98 00 00 61 0635*  	dl 0x000098,0x000061,BUF_43_028
       00 00 5D 02 
       00          
0480F3 C5 00 00 61 0636*  	dl 0x0000C5,0x000061,BUF_43_028
       00 00 5D 02 
       00          
0480FC F3 00 00 61 0637*  	dl 0x0000F3,0x000061,BUF_43_028
       00 00 5D 02 
       00          
048105 21 01 00 61 0638*  	dl 0x000121,0x000061,BUF_43_028
       00 00 5D 02 
       00          
04810E 15 00 00 68 0639*  	dl 0x000015,0x000068,BUF_43_040
       00 00 5E 02 
       00          
048117 55 00 00 68 0640*  	dl 0x000055,0x000068,BUF_43_040
       00 00 5E 02 
       00          
048120 95 00 00 68 0641*  	dl 0x000095,0x000068,BUF_43_040
       00 00 5E 02 
       00          
048129 D4 00 00 68 0642*  	dl 0x0000D4,0x000068,BUF_43_040
       00 00 5E 02 
       00          
048132 14 01 00 68 0643*  	dl 0x000114,0x000068,BUF_43_040
       00 00 5E 02 
       00          
04813B 24 00 00 77 0644*  	dl 0x000024,0x000077,BUF_43_048
       00 00 5F 02 
       00          
048144 8E 00 00 77 0645*  	dl 0x00008E,0x000077,BUF_43_048
       00 00 5F 02 
       00          
04814D F9 00 00 77 0646*  	dl 0x0000F9,0x000077,BUF_43_048
       00 00 5F 02 
       00          
048156 D4 00 00 9F 0647*  	dl 0x0000D4,0x00009F,BUF_43_052
       00 00 60 02 
       00          
04815F             0648*  
04815F             0649*  ; render_obj_id:44
04815F             0650*  sprite_obj_009:
04815F 0F 00 00 5C 0651*  	dl 0x00000F,0x00005C,BUF_44_012
       00 00 61 02 
       00          
048168 32 00 00 5C 0652*  	dl 0x000032,0x00005C,BUF_44_012
       00 00 61 02 
       00          
048171 56 00 00 5C 0653*  	dl 0x000056,0x00005C,BUF_44_012
       00 00 61 02 
       00          
04817A 79 00 00 5C 0654*  	dl 0x000079,0x00005C,BUF_44_012
       00 00 61 02 
       00          
048183 9D 00 00 5C 0655*  	dl 0x00009D,0x00005C,BUF_44_012
       00 00 61 02 
       00          
04818C C0 00 00 5C 0656*  	dl 0x0000C0,0x00005C,BUF_44_012
       00 00 61 02 
       00          
048195 E4 00 00 5C 0657*  	dl 0x0000E4,0x00005C,BUF_44_012
       00 00 61 02 
       00          
04819E 07 01 00 5C 0658*  	dl 0x000107,0x00005C,BUF_44_012
       00 00 61 02 
       00          
0481A7 2B 01 00 5C 0659*  	dl 0x00012B,0x00005C,BUF_44_012
       00 00 61 02 
       00          
0481B0 14 00 00 5F 0660*  	dl 0x000014,0x00005F,BUF_44_028
       00 00 62 02 
       00          
0481B9 41 00 00 5F 0661*  	dl 0x000041,0x00005F,BUF_44_028
       00 00 62 02 
       00          
0481C2 6F 00 00 5F 0662*  	dl 0x00006F,0x00005F,BUF_44_028
       00 00 62 02 
       00          
0481CB 9D 00 00 5F 0663*  	dl 0x00009D,0x00005F,BUF_44_028
       00 00 62 02 
       00          
0481D4 CA 00 00 5F 0664*  	dl 0x0000CA,0x00005F,BUF_44_028
       00 00 62 02 
       00          
0481DD F8 00 00 5F 0665*  	dl 0x0000F8,0x00005F,BUF_44_028
       00 00 62 02 
       00          
0481E6 26 01 00 5F 0666*  	dl 0x000126,0x00005F,BUF_44_028
       00 00 62 02 
       00          
0481EF 1B 00 00 65 0667*  	dl 0x00001B,0x000065,BUF_44_040
       00 00 63 02 
       00          
0481F8 5B 00 00 65 0668*  	dl 0x00005B,0x000065,BUF_44_040
       00 00 63 02 
       00          
048201 9B 00 00 65 0669*  	dl 0x00009B,0x000065,BUF_44_040
       00 00 63 02 
       00          
04820A DA 00 00 65 0670*  	dl 0x0000DA,0x000065,BUF_44_040
       00 00 63 02 
       00          
048213 1A 01 00 65 0671*  	dl 0x00011A,0x000065,BUF_44_040
       00 00 63 02 
       00          
04821C 2E 00 00 75 0672*  	dl 0x00002E,0x000075,BUF_44_048
       00 00 64 02 
       00          
048225 98 00 00 75 0673*  	dl 0x000098,0x000075,BUF_44_048
       00 00 64 02 
       00          
04822E 03 01 00 75 0674*  	dl 0x000103,0x000075,BUF_44_048
       00 00 64 02 
       00          
048237 C8 00 00 A0 0675*  	dl 0x0000C8,0x0000A0,BUF_44_052
       00 00 65 02 
       00          
048240             0676*  
048240             0677*  ; render_obj_id:45
048240             0678*  sprite_obj_010:
048240 09 00 00 56 0679*  	dl 0x000009,0x000056,BUF_45_012
       00 00 66 02 
       00          
048249 2C 00 00 56 0680*  	dl 0x00002C,0x000056,BUF_45_012
       00 00 66 02 
       00          
048252 50 00 00 56 0681*  	dl 0x000050,0x000056,BUF_45_012
       00 00 66 02 
       00          
04825B 73 00 00 56 0682*  	dl 0x000073,0x000056,BUF_45_012
       00 00 66 02 
       00          
048264 97 00 00 56 0683*  	dl 0x000097,0x000056,BUF_45_012
       00 00 66 02 
       00          
04826D BA 00 00 56 0684*  	dl 0x0000BA,0x000056,BUF_45_012
       00 00 66 02 
       00          
048276 DE 00 00 56 0685*  	dl 0x0000DE,0x000056,BUF_45_012
       00 00 66 02 
       00          
04827F 01 01 00 56 0686*  	dl 0x000101,0x000056,BUF_45_012
       00 00 66 02 
       00          
048288 25 01 00 56 0687*  	dl 0x000125,0x000056,BUF_45_012
       00 00 66 02 
       00          
048291 0C 00 00 58 0688*  	dl 0x00000C,0x000058,BUF_45_028
       00 00 67 02 
       00          
04829A 39 00 00 58 0689*  	dl 0x000039,0x000058,BUF_45_028
       00 00 67 02 
       00          
0482A3 67 00 00 58 0690*  	dl 0x000067,0x000058,BUF_45_028
       00 00 67 02 
       00          
0482AC 95 00 00 58 0691*  	dl 0x000095,0x000058,BUF_45_028
       00 00 67 02 
       00          
0482B5 C2 00 00 58 0692*  	dl 0x0000C2,0x000058,BUF_45_028
       00 00 67 02 
       00          
0482BE F0 00 00 58 0693*  	dl 0x0000F0,0x000058,BUF_45_028
       00 00 67 02 
       00          
0482C7 1E 01 00 58 0694*  	dl 0x00011E,0x000058,BUF_45_028
       00 00 67 02 
       00          
0482D0 11 00 00 5B 0695*  	dl 0x000011,0x00005B,BUF_45_040
       00 00 68 02 
       00          
0482D9 51 00 00 5B 0696*  	dl 0x000051,0x00005B,BUF_45_040
       00 00 68 02 
       00          
0482E2 91 00 00 5B 0697*  	dl 0x000091,0x00005B,BUF_45_040
       00 00 68 02 
       00          
0482EB D0 00 00 5B 0698*  	dl 0x0000D0,0x00005B,BUF_45_040
       00 00 68 02 
       00          
0482F4 10 01 00 5B 0699*  	dl 0x000110,0x00005B,BUF_45_040
       00 00 68 02 
       00          
0482FD 1D 00 00 63 0700*  	dl 0x00001D,0x000063,BUF_45_048
       00 00 69 02 
       00          
048306 87 00 00 63 0701*  	dl 0x000087,0x000063,BUF_45_048
       00 00 69 02 
       00          
04830F F2 00 00 63 0702*  	dl 0x0000F2,0x000063,BUF_45_048
       00 00 69 02 
       00          
048318 58 00 00 8C 0703*  	dl 0x000058,0x00008C,BUF_45_052
       00 00 6A 02 
       00          
048321             0704*  
048321             0705*  ; render_obj_id:46
048321             0706*  sprite_obj_011:
048321 09 00 00 58 0707*  	dl 0x000009,0x000058,BUF_46_012
       00 00 6B 02 
       00          
04832A 2C 00 00 58 0708*  	dl 0x00002C,0x000058,BUF_46_012
       00 00 6B 02 
       00          
048333 50 00 00 58 0709*  	dl 0x000050,0x000058,BUF_46_012
       00 00 6B 02 
       00          
04833C 73 00 00 58 0710*  	dl 0x000073,0x000058,BUF_46_012
       00 00 6B 02 
       00          
048345 97 00 00 58 0711*  	dl 0x000097,0x000058,BUF_46_012
       00 00 6B 02 
       00          
04834E BA 00 00 58 0712*  	dl 0x0000BA,0x000058,BUF_46_012
       00 00 6B 02 
       00          
048357 DE 00 00 58 0713*  	dl 0x0000DE,0x000058,BUF_46_012
       00 00 6B 02 
       00          
048360 01 01 00 58 0714*  	dl 0x000101,0x000058,BUF_46_012
       00 00 6B 02 
       00          
048369 25 01 00 58 0715*  	dl 0x000125,0x000058,BUF_46_012
       00 00 6B 02 
       00          
048372 0C 00 00 5A 0716*  	dl 0x00000C,0x00005A,BUF_46_028
       00 00 6C 02 
       00          
04837B 39 00 00 5A 0717*  	dl 0x000039,0x00005A,BUF_46_028
       00 00 6C 02 
       00          
048384 67 00 00 5A 0718*  	dl 0x000067,0x00005A,BUF_46_028
       00 00 6C 02 
       00          
04838D 95 00 00 5A 0719*  	dl 0x000095,0x00005A,BUF_46_028
       00 00 6C 02 
       00          
048396 C2 00 00 5A 0720*  	dl 0x0000C2,0x00005A,BUF_46_028
       00 00 6C 02 
       00          
04839F F0 00 00 5A 0721*  	dl 0x0000F0,0x00005A,BUF_46_028
       00 00 6C 02 
       00          
0483A8 1E 01 00 5A 0722*  	dl 0x00011E,0x00005A,BUF_46_028
       00 00 6C 02 
       00          
0483B1 11 00 00 5F 0723*  	dl 0x000011,0x00005F,BUF_46_040
       00 00 6D 02 
       00          
0483BA 51 00 00 5F 0724*  	dl 0x000051,0x00005F,BUF_46_040
       00 00 6D 02 
       00          
0483C3 91 00 00 5F 0725*  	dl 0x000091,0x00005F,BUF_46_040
       00 00 6D 02 
       00          
0483CC D0 00 00 5F 0726*  	dl 0x0000D0,0x00005F,BUF_46_040
       00 00 6D 02 
       00          
0483D5 10 01 00 5F 0727*  	dl 0x000110,0x00005F,BUF_46_040
       00 00 6D 02 
       00          
0483DE 1D 00 00 69 0728*  	dl 0x00001D,0x000069,BUF_46_048
       00 00 6E 02 
       00          
0483E7 87 00 00 69 0729*  	dl 0x000087,0x000069,BUF_46_048
       00 00 6E 02 
       00          
0483F0 F2 00 00 69 0730*  	dl 0x0000F2,0x000069,BUF_46_048
       00 00 6E 02 
       00          
0483F9 8E 00 00 9E 0731*  	dl 0x00008E,0x00009E,BUF_46_052
       00 00 6F 02 
       00          
048402             0732*  
048402             0733*  ; render_obj_id:47
048402             0734*  sprite_obj_012:
048402 09 00 00 57 0735*  	dl 0x000009,0x000057,BUF_47_012
       00 00 70 02 
       00          
04840B 2C 00 00 57 0736*  	dl 0x00002C,0x000057,BUF_47_012
       00 00 70 02 
       00          
048414 50 00 00 57 0737*  	dl 0x000050,0x000057,BUF_47_012
       00 00 70 02 
       00          
04841D 73 00 00 57 0738*  	dl 0x000073,0x000057,BUF_47_012
       00 00 70 02 
       00          
048426 97 00 00 57 0739*  	dl 0x000097,0x000057,BUF_47_012
       00 00 70 02 
       00          
04842F BA 00 00 57 0740*  	dl 0x0000BA,0x000057,BUF_47_012
       00 00 70 02 
       00          
048438 DE 00 00 57 0741*  	dl 0x0000DE,0x000057,BUF_47_012
       00 00 70 02 
       00          
048441 01 01 00 57 0742*  	dl 0x000101,0x000057,BUF_47_012
       00 00 70 02 
       00          
04844A 25 01 00 57 0743*  	dl 0x000125,0x000057,BUF_47_012
       00 00 70 02 
       00          
048453 0C 00 00 59 0744*  	dl 0x00000C,0x000059,BUF_47_028
       00 00 71 02 
       00          
04845C 39 00 00 59 0745*  	dl 0x000039,0x000059,BUF_47_028
       00 00 71 02 
       00          
048465 67 00 00 59 0746*  	dl 0x000067,0x000059,BUF_47_028
       00 00 71 02 
       00          
04846E 95 00 00 59 0747*  	dl 0x000095,0x000059,BUF_47_028
       00 00 71 02 
       00          
048477 C2 00 00 59 0748*  	dl 0x0000C2,0x000059,BUF_47_028
       00 00 71 02 
       00          
048480 F0 00 00 59 0749*  	dl 0x0000F0,0x000059,BUF_47_028
       00 00 71 02 
       00          
048489 1E 01 00 59 0750*  	dl 0x00011E,0x000059,BUF_47_028
       00 00 71 02 
       00          
048492 11 00 00 5D 0751*  	dl 0x000011,0x00005D,BUF_47_040
       00 00 72 02 
       00          
04849B 51 00 00 5D 0752*  	dl 0x000051,0x00005D,BUF_47_040
       00 00 72 02 
       00          
0484A4 91 00 00 5D 0753*  	dl 0x000091,0x00005D,BUF_47_040
       00 00 72 02 
       00          
0484AD D0 00 00 5D 0754*  	dl 0x0000D0,0x00005D,BUF_47_040
       00 00 72 02 
       00          
0484B6 10 01 00 5D 0755*  	dl 0x000110,0x00005D,BUF_47_040
       00 00 72 02 
       00          
0484BF 1D 00 00 66 0756*  	dl 0x00001D,0x000066,BUF_47_048
       00 00 73 02 
       00          
0484C8 87 00 00 66 0757*  	dl 0x000087,0x000066,BUF_47_048
       00 00 73 02 
       00          
0484D1 F2 00 00 66 0758*  	dl 0x0000F2,0x000066,BUF_47_048
       00 00 73 02 
       00          
0484DA B2 00 00 95 0759*  	dl 0x0000B2,0x000095,BUF_47_052
       00 00 74 02 
       00          
0484E3             0760*  
0484E3             0761*  ; render_obj_id:48
0484E3             0762*  sprite_obj_013:
0484E3 0A 00 00 5A 0763*  	dl 0x00000A,0x00005A,BUF_48_012
       00 00 75 02 
       00          
0484EC 2D 00 00 5A 0764*  	dl 0x00002D,0x00005A,BUF_48_012
       00 00 75 02 
       00          
0484F5 51 00 00 5A 0765*  	dl 0x000051,0x00005A,BUF_48_012
       00 00 75 02 
       00          
0484FE 74 00 00 5A 0766*  	dl 0x000074,0x00005A,BUF_48_012
       00 00 75 02 
       00          
048507 98 00 00 5A 0767*  	dl 0x000098,0x00005A,BUF_48_012
       00 00 75 02 
       00          
048510 BB 00 00 5A 0768*  	dl 0x0000BB,0x00005A,BUF_48_012
       00 00 75 02 
       00          
048519 DF 00 00 5A 0769*  	dl 0x0000DF,0x00005A,BUF_48_012
       00 00 75 02 
       00          
048522 02 01 00 5A 0770*  	dl 0x000102,0x00005A,BUF_48_012
       00 00 75 02 
       00          
04852B 26 01 00 5A 0771*  	dl 0x000126,0x00005A,BUF_48_012
       00 00 75 02 
       00          
048534 0D 00 00 5C 0772*  	dl 0x00000D,0x00005C,BUF_48_028
       00 00 76 02 
       00          
04853D 3A 00 00 5C 0773*  	dl 0x00003A,0x00005C,BUF_48_028
       00 00 76 02 
       00          
048546 68 00 00 5C 0774*  	dl 0x000068,0x00005C,BUF_48_028
       00 00 76 02 
       00          
04854F 96 00 00 5C 0775*  	dl 0x000096,0x00005C,BUF_48_028
       00 00 76 02 
       00          
048558 C3 00 00 5C 0776*  	dl 0x0000C3,0x00005C,BUF_48_028
       00 00 76 02 
       00          
048561 F1 00 00 5C 0777*  	dl 0x0000F1,0x00005C,BUF_48_028
       00 00 76 02 
       00          
04856A 1F 01 00 5C 0778*  	dl 0x00011F,0x00005C,BUF_48_028
       00 00 76 02 
       00          
048573 11 00 00 61 0779*  	dl 0x000011,0x000061,BUF_48_040
       00 00 77 02 
       00          
04857C 51 00 00 61 0780*  	dl 0x000051,0x000061,BUF_48_040
       00 00 77 02 
       00          
048585 91 00 00 61 0781*  	dl 0x000091,0x000061,BUF_48_040
       00 00 77 02 
       00          
04858E D0 00 00 61 0782*  	dl 0x0000D0,0x000061,BUF_48_040
       00 00 77 02 
       00          
048597 10 01 00 61 0783*  	dl 0x000110,0x000061,BUF_48_040
       00 00 77 02 
       00          
0485A0 1D 00 00 6C 0784*  	dl 0x00001D,0x00006C,BUF_48_048
       00 00 78 02 
       00          
0485A9 87 00 00 6C 0785*  	dl 0x000087,0x00006C,BUF_48_048
       00 00 78 02 
       00          
0485B2 F2 00 00 6C 0786*  	dl 0x0000F2,0x00006C,BUF_48_048
       00 00 78 02 
       00          
0485BB 00 01 00 9F 0787*  	dl 0x000100,0x00009F,BUF_48_052
       00 00 79 02 
       00          
0485C4             0788*  
0485C4             0789*  ; render_obj_id:49
0485C4             0790*  sprite_obj_014:
0485C4 0A 00 00 59 0791*  	dl 0x00000A,0x000059,BUF_49_012
       00 00 7A 02 
       00          
0485CD 2D 00 00 59 0792*  	dl 0x00002D,0x000059,BUF_49_012
       00 00 7A 02 
       00          
0485D6 51 00 00 59 0793*  	dl 0x000051,0x000059,BUF_49_012
       00 00 7A 02 
       00          
0485DF 74 00 00 59 0794*  	dl 0x000074,0x000059,BUF_49_012
       00 00 7A 02 
       00          
0485E8 98 00 00 59 0795*  	dl 0x000098,0x000059,BUF_49_012
       00 00 7A 02 
       00          
0485F1 BB 00 00 59 0796*  	dl 0x0000BB,0x000059,BUF_49_012
       00 00 7A 02 
       00          
0485FA DF 00 00 59 0797*  	dl 0x0000DF,0x000059,BUF_49_012
       00 00 7A 02 
       00          
048603 02 01 00 59 0798*  	dl 0x000102,0x000059,BUF_49_012
       00 00 7A 02 
       00          
04860C 26 01 00 59 0799*  	dl 0x000126,0x000059,BUF_49_012
       00 00 7A 02 
       00          
048615 0E 00 00 5B 0800*  	dl 0x00000E,0x00005B,BUF_49_028
       00 00 7B 02 
       00          
04861E 3B 00 00 5B 0801*  	dl 0x00003B,0x00005B,BUF_49_028
       00 00 7B 02 
       00          
048627 69 00 00 5B 0802*  	dl 0x000069,0x00005B,BUF_49_028
       00 00 7B 02 
       00          
048630 97 00 00 5B 0803*  	dl 0x000097,0x00005B,BUF_49_028
       00 00 7B 02 
       00          
048639 C4 00 00 5B 0804*  	dl 0x0000C4,0x00005B,BUF_49_028
       00 00 7B 02 
       00          
048642 F2 00 00 5B 0805*  	dl 0x0000F2,0x00005B,BUF_49_028
       00 00 7B 02 
       00          
04864B 20 01 00 5B 0806*  	dl 0x000120,0x00005B,BUF_49_028
       00 00 7B 02 
       00          
048654 13 00 00 60 0807*  	dl 0x000013,0x000060,BUF_49_040
       00 00 7C 02 
       00          
04865D 53 00 00 60 0808*  	dl 0x000053,0x000060,BUF_49_040
       00 00 7C 02 
       00          
048666 93 00 00 60 0809*  	dl 0x000093,0x000060,BUF_49_040
       00 00 7C 02 
       00          
04866F D2 00 00 60 0810*  	dl 0x0000D2,0x000060,BUF_49_040
       00 00 7C 02 
       00          
048678 12 01 00 60 0811*  	dl 0x000112,0x000060,BUF_49_040
       00 00 7C 02 
       00          
048681 20 00 00 6C 0812*  	dl 0x000020,0x00006C,BUF_49_048
       00 00 7D 02 
       00          
04868A 8A 00 00 6C 0813*  	dl 0x00008A,0x00006C,BUF_49_048
       00 00 7D 02 
       00          
048693 F5 00 00 6C 0814*  	dl 0x0000F5,0x00006C,BUF_49_048
       00 00 7D 02 
       00          
04869C E8 00 00 9F 0815*  	dl 0x0000E8,0x00009F,BUF_49_052
       00 00 7E 02 
       00          
0486A5             0816*  
0486A5             0817*  ; render_obj_id:50
0486A5             0818*  sprite_obj_015:
0486A5 0D 00 00 53 0819*  	dl 0x00000D,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486AE 30 00 00 53 0820*  	dl 0x000030,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486B7 54 00 00 53 0821*  	dl 0x000054,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486C0 77 00 00 53 0822*  	dl 0x000077,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486C9 9B 00 00 53 0823*  	dl 0x00009B,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486D2 BE 00 00 53 0824*  	dl 0x0000BE,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486DB E2 00 00 53 0825*  	dl 0x0000E2,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486E4 05 01 00 53 0826*  	dl 0x000105,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486ED 29 01 00 53 0827*  	dl 0x000129,0x000053,BUF_50_012
       00 00 7F 02 
       00          
0486F6 10 00 00 54 0828*  	dl 0x000010,0x000054,BUF_50_028
       00 00 80 02 
       00          
0486FF 3D 00 00 54 0829*  	dl 0x00003D,0x000054,BUF_50_028
       00 00 80 02 
       00          
048708 6B 00 00 54 0830*  	dl 0x00006B,0x000054,BUF_50_028
       00 00 80 02 
       00          
048711 99 00 00 54 0831*  	dl 0x000099,0x000054,BUF_50_028
       00 00 80 02 
       00          
04871A C6 00 00 54 0832*  	dl 0x0000C6,0x000054,BUF_50_028
       00 00 80 02 
       00          
048723 F4 00 00 54 0833*  	dl 0x0000F4,0x000054,BUF_50_028
       00 00 80 02 
       00          
04872C 22 01 00 54 0834*  	dl 0x000122,0x000054,BUF_50_028
       00 00 80 02 
       00          
048735 16 00 00 55 0835*  	dl 0x000016,0x000055,BUF_50_040
       00 00 81 02 
       00          
04873E 56 00 00 55 0836*  	dl 0x000056,0x000055,BUF_50_040
       00 00 81 02 
       00          
048747 96 00 00 55 0837*  	dl 0x000096,0x000055,BUF_50_040
       00 00 81 02 
       00          
048750 D5 00 00 55 0838*  	dl 0x0000D5,0x000055,BUF_50_040
       00 00 81 02 
       00          
048759 15 01 00 55 0839*  	dl 0x000115,0x000055,BUF_50_040
       00 00 81 02 
       00          
048762 26 00 00 5A 0840*  	dl 0x000026,0x00005A,BUF_50_048
       00 00 82 02 
       00          
04876B 90 00 00 5A 0841*  	dl 0x000090,0x00005A,BUF_50_048
       00 00 82 02 
       00          
048774 FB 00 00 5A 0842*  	dl 0x0000FB,0x00005A,BUF_50_048
       00 00 82 02 
       00          
04877D 78 00 00 6E 0843*  	dl 0x000078,0x00006E,BUF_50_052
       00 00 83 02 
       00          
048786             0844*  
048786             0845*  ; render_obj_id:51
048786             0846*  sprite_obj_016:
048786 0B 00 00 49 0847*  	dl 0x00000B,0x000049,BUF_51_012
       00 00 84 02 
       00          
04878F 2E 00 00 49 0848*  	dl 0x00002E,0x000049,BUF_51_012
       00 00 84 02 
       00          
048798 52 00 00 49 0849*  	dl 0x000052,0x000049,BUF_51_012
       00 00 84 02 
       00          
0487A1 75 00 00 49 0850*  	dl 0x000075,0x000049,BUF_51_012
       00 00 84 02 
       00          
0487AA 99 00 00 49 0851*  	dl 0x000099,0x000049,BUF_51_012
       00 00 84 02 
       00          
0487B3 BC 00 00 49 0852*  	dl 0x0000BC,0x000049,BUF_51_012
       00 00 84 02 
       00          
0487BC E0 00 00 49 0853*  	dl 0x0000E0,0x000049,BUF_51_012
       00 00 84 02 
       00          
0487C5 03 01 00 49 0854*  	dl 0x000103,0x000049,BUF_51_012
       00 00 84 02 
       00          
0487CE 27 01 00 49 0855*  	dl 0x000127,0x000049,BUF_51_012
       00 00 84 02 
       00          
0487D7 0D 00 00 48 0856*  	dl 0x00000D,0x000048,BUF_51_028
       00 00 85 02 
       00          
0487E0 3A 00 00 48 0857*  	dl 0x00003A,0x000048,BUF_51_028
       00 00 85 02 
       00          
0487E9 68 00 00 48 0858*  	dl 0x000068,0x000048,BUF_51_028
       00 00 85 02 
       00          
0487F2 96 00 00 48 0859*  	dl 0x000096,0x000048,BUF_51_028
       00 00 85 02 
       00          
0487FB C3 00 00 48 0860*  	dl 0x0000C3,0x000048,BUF_51_028
       00 00 85 02 
       00          
048804 F1 00 00 48 0861*  	dl 0x0000F1,0x000048,BUF_51_028
       00 00 85 02 
       00          
04880D 1F 01 00 48 0862*  	dl 0x00011F,0x000048,BUF_51_028
       00 00 85 02 
       00          
048816 12 00 00 45 0863*  	dl 0x000012,0x000045,BUF_51_040
       00 00 86 02 
       00          
04881F 52 00 00 45 0864*  	dl 0x000052,0x000045,BUF_51_040
       00 00 86 02 
       00          
048828 92 00 00 45 0865*  	dl 0x000092,0x000045,BUF_51_040
       00 00 86 02 
       00          
048831 D1 00 00 45 0866*  	dl 0x0000D1,0x000045,BUF_51_040
       00 00 86 02 
       00          
04883A 11 01 00 45 0867*  	dl 0x000111,0x000045,BUF_51_040
       00 00 86 02 
       00          
048843 20 00 00 3E 0868*  	dl 0x000020,0x00003E,BUF_51_048
       00 00 87 02 
       00          
04884C 8A 00 00 3E 0869*  	dl 0x00008A,0x00003E,BUF_51_048
       00 00 87 02 
       00          
048855 F5 00 00 3E 0870*  	dl 0x0000F5,0x00003E,BUF_51_048
       00 00 87 02 
       00          
04885E 5E 00 00 1D 0871*  	dl 0x00005E,0x00001D,BUF_51_052
       00 00 88 02 
       00          
048867             0872*  
048867             0873*  ; render_obj_id:52
048867             0874*  sprite_obj_017:
048867 0C 00 00 49 0875*  	dl 0x00000C,0x000049,BUF_52_012
       00 00 89 02 
       00          
048870 2F 00 00 49 0876*  	dl 0x00002F,0x000049,BUF_52_012
       00 00 89 02 
       00          
048879 53 00 00 49 0877*  	dl 0x000053,0x000049,BUF_52_012
       00 00 89 02 
       00          
048882 76 00 00 49 0878*  	dl 0x000076,0x000049,BUF_52_012
       00 00 89 02 
       00          
04888B 9A 00 00 49 0879*  	dl 0x00009A,0x000049,BUF_52_012
       00 00 89 02 
       00          
048894 BD 00 00 49 0880*  	dl 0x0000BD,0x000049,BUF_52_012
       00 00 89 02 
       00          
04889D E1 00 00 49 0881*  	dl 0x0000E1,0x000049,BUF_52_012
       00 00 89 02 
       00          
0488A6 04 01 00 49 0882*  	dl 0x000104,0x000049,BUF_52_012
       00 00 89 02 
       00          
0488AF 28 01 00 49 0883*  	dl 0x000128,0x000049,BUF_52_012
       00 00 89 02 
       00          
0488B8 0F 00 00 48 0884*  	dl 0x00000F,0x000048,BUF_52_028
       00 00 8A 02 
       00          
0488C1 3C 00 00 48 0885*  	dl 0x00003C,0x000048,BUF_52_028
       00 00 8A 02 
       00          
0488CA 6A 00 00 48 0886*  	dl 0x00006A,0x000048,BUF_52_028
       00 00 8A 02 
       00          
0488D3 98 00 00 48 0887*  	dl 0x000098,0x000048,BUF_52_028
       00 00 8A 02 
       00          
0488DC C5 00 00 48 0888*  	dl 0x0000C5,0x000048,BUF_52_028
       00 00 8A 02 
       00          
0488E5 F3 00 00 48 0889*  	dl 0x0000F3,0x000048,BUF_52_028
       00 00 8A 02 
       00          
0488EE 21 01 00 48 0890*  	dl 0x000121,0x000048,BUF_52_028
       00 00 8A 02 
       00          
0488F7 15 00 00 45 0891*  	dl 0x000015,0x000045,BUF_52_040
       00 00 8B 02 
       00          
048900 55 00 00 45 0892*  	dl 0x000055,0x000045,BUF_52_040
       00 00 8B 02 
       00          
048909 95 00 00 45 0893*  	dl 0x000095,0x000045,BUF_52_040
       00 00 8B 02 
       00          
048912 D4 00 00 45 0894*  	dl 0x0000D4,0x000045,BUF_52_040
       00 00 8B 02 
       00          
04891B 14 01 00 45 0895*  	dl 0x000114,0x000045,BUF_52_040
       00 00 8B 02 
       00          
048924 24 00 00 3E 0896*  	dl 0x000024,0x00003E,BUF_52_048
       00 00 8C 02 
       00          
04892D 8E 00 00 3E 0897*  	dl 0x00008E,0x00003E,BUF_52_048
       00 00 8C 02 
       00          
048936 F9 00 00 3E 0898*  	dl 0x0000F9,0x00003E,BUF_52_048
       00 00 8C 02 
       00          
04893F 6B 00 00 1D 0899*  	dl 0x00006B,0x00001D,BUF_52_052
       00 00 8D 02 
       00          
048948             0900*  
048948             0901*  ; render_obj_id:56
048948             0902*  sprite_obj_018:
048948 08 00 00 56 0903*  	dl 0x000008,0x000056,BUF_56_012
       00 00 8E 02 
       00          
048951 2B 00 00 56 0904*  	dl 0x00002B,0x000056,BUF_56_012
       00 00 8E 02 
       00          
04895A 4F 00 00 56 0905*  	dl 0x00004F,0x000056,BUF_56_012
       00 00 8E 02 
       00          
048963 72 00 00 56 0906*  	dl 0x000072,0x000056,BUF_56_012
       00 00 8E 02 
       00          
04896C 96 00 00 56 0907*  	dl 0x000096,0x000056,BUF_56_012
       00 00 8E 02 
       00          
048975 B9 00 00 56 0908*  	dl 0x0000B9,0x000056,BUF_56_012
       00 00 8E 02 
       00          
04897E DD 00 00 56 0909*  	dl 0x0000DD,0x000056,BUF_56_012
       00 00 8E 02 
       00          
048987 00 01 00 56 0910*  	dl 0x000100,0x000056,BUF_56_012
       00 00 8E 02 
       00          
048990 24 01 00 56 0911*  	dl 0x000124,0x000056,BUF_56_012
       00 00 8E 02 
       00          
048999 0B 00 00 59 0912*  	dl 0x00000B,0x000059,BUF_56_028
       00 00 8F 02 
       00          
0489A2 38 00 00 59 0913*  	dl 0x000038,0x000059,BUF_56_028
       00 00 8F 02 
       00          
0489AB 66 00 00 59 0914*  	dl 0x000066,0x000059,BUF_56_028
       00 00 8F 02 
       00          
0489B4 94 00 00 59 0915*  	dl 0x000094,0x000059,BUF_56_028
       00 00 8F 02 
       00          
0489BD C1 00 00 59 0916*  	dl 0x0000C1,0x000059,BUF_56_028
       00 00 8F 02 
       00          
0489C6 EF 00 00 59 0917*  	dl 0x0000EF,0x000059,BUF_56_028
       00 00 8F 02 
       00          
0489CF 1D 01 00 59 0918*  	dl 0x00011D,0x000059,BUF_56_028
       00 00 8F 02 
       00          
0489D8 0D 00 00 5D 0919*  	dl 0x00000D,0x00005D,BUF_56_040
       00 00 90 02 
       00          
0489E1 4D 00 00 5D 0920*  	dl 0x00004D,0x00005D,BUF_56_040
       00 00 90 02 
       00          
0489EA 8D 00 00 5D 0921*  	dl 0x00008D,0x00005D,BUF_56_040
       00 00 90 02 
       00          
0489F3 CC 00 00 5D 0922*  	dl 0x0000CC,0x00005D,BUF_56_040
       00 00 90 02 
       00          
0489FC 0C 01 00 5D 0923*  	dl 0x00010C,0x00005D,BUF_56_040
       00 00 90 02 
       00          
048A05 17 00 00 66 0924*  	dl 0x000017,0x000066,BUF_56_048
       00 00 91 02 
       00          
048A0E 81 00 00 66 0925*  	dl 0x000081,0x000066,BUF_56_048
       00 00 91 02 
       00          
048A17 EC 00 00 66 0926*  	dl 0x0000EC,0x000066,BUF_56_048
       00 00 91 02 
       00          
048A20 A0 00 00 93 0927*  	dl 0x0000A0,0x000093,BUF_56_052
       00 00 92 02 
       00          
048A29             0928*  
048A29             0929*  ; render_obj_id:60
048A29             0930*  sprite_obj_019:
048A29 03 00 00 41 0931*  	dl 0x000003,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A32 26 00 00 41 0932*  	dl 0x000026,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A3B 4A 00 00 41 0933*  	dl 0x00004A,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A44 6D 00 00 41 0934*  	dl 0x00006D,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A4D 91 00 00 41 0935*  	dl 0x000091,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A56 B4 00 00 41 0936*  	dl 0x0000B4,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A5F D8 00 00 41 0937*  	dl 0x0000D8,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A68 FB 00 00 41 0938*  	dl 0x0000FB,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A71 1F 01 00 41 0939*  	dl 0x00011F,0x000041,BUF_60_012
       00 00 93 02 
       00          
048A7A 03 00 00 3C 0940*  	dl 0x000003,0x00003C,BUF_60_028
       00 00 94 02 
       00          
048A83 30 00 00 3C 0941*  	dl 0x000030,0x00003C,BUF_60_028
       00 00 94 02 
       00          
048A8C 5E 00 00 3C 0942*  	dl 0x00005E,0x00003C,BUF_60_028
       00 00 94 02 
       00          
048A95 8C 00 00 3C 0943*  	dl 0x00008C,0x00003C,BUF_60_028
       00 00 94 02 
       00          
048A9E B9 00 00 3C 0944*  	dl 0x0000B9,0x00003C,BUF_60_028
       00 00 94 02 
       00          
048AA7 E7 00 00 3C 0945*  	dl 0x0000E7,0x00003C,BUF_60_028
       00 00 94 02 
       00          
048AB0 15 01 00 3C 0946*  	dl 0x000115,0x00003C,BUF_60_028
       00 00 94 02 
       00          
048AB9 04 00 00 34 0947*  	dl 0x000004,0x000034,BUF_60_040
       00 00 95 02 
       00          
048AC2 44 00 00 34 0948*  	dl 0x000044,0x000034,BUF_60_040
       00 00 95 02 
       00          
048ACB 84 00 00 34 0949*  	dl 0x000084,0x000034,BUF_60_040
       00 00 95 02 
       00          
048AD4 C3 00 00 34 0950*  	dl 0x0000C3,0x000034,BUF_60_040
       00 00 95 02 
       00          
048ADD 03 01 00 34 0951*  	dl 0x000103,0x000034,BUF_60_040
       00 00 95 02 
       00          
048AE6 07 00 00 21 0952*  	dl 0x000007,0x000021,BUF_60_048
       00 00 96 02 
       00          
048AEF 71 00 00 21 0953*  	dl 0x000071,0x000021,BUF_60_048
       00 00 96 02 
       00          
048AF8 DC 00 00 21 0954*  	dl 0x0000DC,0x000021,BUF_60_048
       00 00 96 02 
       00          
048B01 14 00 00 00 0955*  	dl 0x000014,0x000000,BUF_60_052
       00 00 97 02 
       00          
048B0A             0956*  
048B0A             0957*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
048B0A             0958*  
048B0A             0959*  map_type_status_lut:
048B0A             0960*  ; {map_type_status}, {sprite_obj} ; {obj_id} ({render_obj_id}) {tile_name} {render_type_idx} {render_type}
048B0A 50 FF       0961*  	db %01010000, 255 ; 10 (10) LIGHT GREY WALL 0 cube
048B0C 50 FF       0962*  	db %01010000, 255 ; 11 (11) JAIL CELL 0 cube
048B0E 50 FF       0963*  	db %01010000, 255 ; 12 (12) STONE ARCH BIRD 0 cube
048B10 50 FF       0964*  	db %01010000, 255 ; 13 (13) DARK GREY WALL 0 cube
048B12 50 FF       0965*  	db %01010000, 255 ; 14 (14) WOOD WALL 0 cube
048B14 50 FF       0966*  	db %01010000, 255 ; 15 (15) HANGING FLAG 0 cube
048B16 50 FF       0967*  	db %01010000, 255 ; 16 (16) WOOD EAGLE 0 cube
048B18 50 FF       0968*  	db %01010000, 255 ; 17 (17) BLUE WALL 0 cube
048B1A 02 FF       0969*  	db %00000010, 255 ; 18 (None) PLACEHOLDER 2 null cell
048B1C 42 FF       0970*  	db %01000010, 255 ; 19 (19) NULL CELL 2 null cell
048B1E 43 00       0971*  	db %01000011, 0 ; 20 (20) LAMP 3 sprite
048B20 43 01       0972*  	db %01000011, 1 ; 21 (21) BARREL 3 sprite
048B22 43 02       0973*  	db %01000011, 2 ; 22 (22) TABLE 3 sprite
048B24 03 03       0974*  	db %00000011, 3 ; 23 (23) OVERHEAD LIGHT 3 sprite
048B26 43 04       0975*  	db %01000011, 4 ; 24 (24) RADIOACTIVE BARREL 3 sprite
048B28 00 FF       0976*  	db %00000000, 255 ; 25 (25) BJ 25% 4 ui
048B2A 00 FF       0977*  	db %00000000, 255 ; 26 (26) BJ 50% 4 ui
048B2C 00 FF       0978*  	db %00000000, 255 ; 27 (27) BJ 75% 4 ui
048B2E 08 FF       0979*  	db %00001000, 255 ; 28 (28) BJ 100%/ START POSITION 4 ui
048B30 01 FF       0980*  	db %00000001, 255 ; 29 (29) GREY FLOOR 1 floor
048B32 34 FF       0981*  	db %00110100, 255 ; 30 (57) DOOR TO ROOM 0 0 cube
048B34 34 FF       0982*  	db %00110100, 255 ; 31 (57) DOOR TO ROOM 1 0 cube
048B36 34 FF       0983*  	db %00110100, 255 ; 32 (57) DOOR TO ROOM 2 0 cube
048B38 34 FF       0984*  	db %00110100, 255 ; 33 (57) DOOR TO ROOM 3 0 cube
048B3A 34 FF       0985*  	db %00110100, 255 ; 34 (57) DOOR TO ROOM 4 0 cube
048B3C 34 FF       0986*  	db %00110100, 255 ; 35 (57) DOOR TO ROOM 5 0 cube
048B3E 34 FF       0987*  	db %00110100, 255 ; 36 (57) DOOR TO ROOM 6 0 cube
048B40 34 FF       0988*  	db %00110100, 255 ; 37 (57) DOOR TO ROOM 7 0 cube
048B42 34 FF       0989*  	db %00110100, 255 ; 38 (57) DOOR TO ROOM 8 0 cube
048B44 34 FF       0990*  	db %00110100, 255 ; 39 (57) DOOR TO ROOM 9 0 cube
048B46 03 05       0991*  	db %00000011, 5 ; 40 (40) HEALTH PACK 3 sprite
048B48 03 06       0992*  	db %00000011, 6 ; 41 (41) GOLD CHALISE 3 sprite
048B4A 03 07       0993*  	db %00000011, 7 ; 42 (42) GOLD CROSS 3 sprite
048B4C 03 08       0994*  	db %00000011, 8 ; 43 (43) PLATE OF FOOD 3 sprite
048B4E 03 09       0995*  	db %00000011, 9 ; 44 (44) KEYCARD 3 sprite
048B50 03 0A       0996*  	db %00000011, 10 ; 45 (45) GOLD CHEST 3 sprite
048B52 03 0B       0997*  	db %00000011, 11 ; 46 (46) MACHINE GUN 3 sprite
048B54 03 0C       0998*  	db %00000011, 12 ; 47 (47) GATLING GUN 3 sprite
048B56 03 0D       0999*  	db %00000011, 13 ; 48 (48) DOG FOOD 3 sprite
048B58 03 0E       1000*  	db %00000011, 14 ; 49 (49) GOLD KEY 3 sprite
048B5A 43 0F       1001*  	db %01000011, 15 ; 50 (50) DOG 3 sprite
048B5C 43 10       1002*  	db %01000011, 16 ; 51 (51) GERMAN TROOPER 3 sprite
048B5E 43 11       1003*  	db %01000011, 17 ; 52 (52) SS GUARD 3 sprite
048B60 02 FF       1004*  	db %00000010, 255 ; 53 (None) PLACEHOLDER 2 null cell
048B62 02 FF       1005*  	db %00000010, 255 ; 54 (None) PLACEHOLDER 2 null cell
048B64 02 FF       1006*  	db %00000010, 255 ; 55 (None) PLACEHOLDER 2 null cell
048B66 03 12       1007*  	db %00000011, 18 ; 56 (56) DEAD GUARD 3 sprite
048B68 90 FF       1008*  	db %10010000, 255 ; 57 (57) REGULAR DOOR 0 cube
048B6A 70 FF       1009*  	db %01110000, 255 ; 58 (58) ELEVATOR SWITCH 0 cube
048B6C 90 FF       1010*  	db %10010000, 255 ; 59 (59) ELEVATOR DOOR 0 cube
048B6E 43 13       1011*  	db %01000011, 19 ; 60 (60) EXPLOSION 3 sprite
048B70 02 FF       1012*  	db %00000010, 255 ; 61 (None) PLACEHOLDER 2 null cell
048B72 02 FF       1013*  	db %00000010, 255 ; 62 (None) PLACEHOLDER 2 null cell
048B74 02 FF       1014*  	db %00000010, 255 ; 63 (None) PLACEHOLDER 2 null cell
048B76 02 FF       1015*  	db %00000010, 255 ; 64 (None) PLACEHOLDER 2 null cell
048B78 02 FF       1016*  	db %00000010, 255 ; 65 (None) PLACEHOLDER 2 null cell
048B7A 02 FF       1017*  	db %00000010, 255 ; 66 (None) PLACEHOLDER 2 null cell
048B7C 02 FF       1018*  	db %00000010, 255 ; 67 (None) PLACEHOLDER 2 null cell
048B7E 02 FF       1019*  	db %00000010, 255 ; 68 (None) PLACEHOLDER 2 null cell
048B80 02 FF       1020*  	db %00000010, 255 ; 69 (None) PLACEHOLDER 2 null cell
048B82 02 FF       1021*  	db %00000010, 255 ; 70 (None) PLACEHOLDER 2 null cell
048B84 02 FF       1022*  	db %00000010, 255 ; 71 (None) PLACEHOLDER 2 null cell
048B86 02 FF       1023*  	db %00000010, 255 ; 72 (None) PLACEHOLDER 2 null cell
048B88 02 FF       1024*  	db %00000010, 255 ; 73 (None) PLACEHOLDER 2 null cell
048B8A 02 FF       1025*  	db %00000010, 255 ; 74 (None) PLACEHOLDER 2 null cell
048B8C 02 FF       1026*  	db %00000010, 255 ; 75 (None) PLACEHOLDER 2 null cell
048B8E 02 FF       1027*  	db %00000010, 255 ; 76 (None) PLACEHOLDER 2 null cell
048B90 02 FF       1028*  	db %00000010, 255 ; 77 (None) PLACEHOLDER 2 null cell
048B92 02 FF       1029*  	db %00000010, 255 ; 78 (None) PLACEHOLDER 2 null cell
048B94 02 FF       1030*  	db %00000010, 255 ; 79 (None) PLACEHOLDER 2 null cell
048B96 02 FF       1031*  	db %00000010, 255 ; 80 (None) PLACEHOLDER 2 null cell
048B98 02 FF       1032*  	db %00000010, 255 ; 81 (None) PLACEHOLDER 2 null cell
048B9A 02 FF       1033*  	db %00000010, 255 ; 82 (None) PLACEHOLDER 2 null cell
048B9C 02 FF       1034*  	db %00000010, 255 ; 83 (None) PLACEHOLDER 2 null cell
048B9E 02 FF       1035*  	db %00000010, 255 ; 84 (None) PLACEHOLDER 2 null cell
048BA0 02 FF       1036*  	db %00000010, 255 ; 85 (None) PLACEHOLDER 2 null cell
048BA2 02 FF       1037*  	db %00000010, 255 ; 86 (None) PLACEHOLDER 2 null cell
048BA4 02 FF       1038*  	db %00000010, 255 ; 87 (None) PLACEHOLDER 2 null cell
048BA6 02 FF       1039*  	db %00000010, 255 ; 88 (None) PLACEHOLDER 2 null cell
048BA8 02 FF       1040*  	db %00000010, 255 ; 89 (None) PLACEHOLDER 2 null cell
048BAA 02 FF       1041*  	db %00000010, 255 ; 90 (None) PLACEHOLDER 2 null cell
048BAC 02 FF       1042*  	db %00000010, 255 ; 91 (None) PLACEHOLDER 2 null cell
048BAE 02 FF       1043*  	db %00000010, 255 ; 92 (None) PLACEHOLDER 2 null cell
048BB0 02 FF       1044*  	db %00000010, 255 ; 93 (None) PLACEHOLDER 2 null cell
048BB2 02 FF       1045*  	db %00000010, 255 ; 94 (None) PLACEHOLDER 2 null cell
048BB4 02 FF       1046*  	db %00000010, 255 ; 95 (None) PLACEHOLDER 2 null cell
048BB6 02 FF       1047*  	db %00000010, 255 ; 96 (None) PLACEHOLDER 2 null cell
048BB8 02 FF       1048*  	db %00000010, 255 ; 97 (None) PLACEHOLDER 2 null cell
048BBA 02 FF       1049*  	db %00000010, 255 ; 98 (None) PLACEHOLDER 2 null cell
048BBC 02 FF       1050*  	db %00000010, 255 ; 99 (None) PLACEHOLDER 2 null cell
048BBE             0018   	include "src/asm/font_itc_honda.asm"
048BBE             0001*  ; Bitmap indices:
048BBE             0002*  BUF_4384: equ 0x1120 ; 32
048BBE             0003*  ; Missing character 33 !
048BBE             0004*  ; Missing character 34 "
048BBE             0005*  ; Missing character 35 #
048BBE             0006*  ; Missing character 36 $
048BBE             0007*  ; Missing character 37 %
048BBE             0008*  ; Missing character 38 &
048BBE             0009*  ; Missing character 39 '
048BBE             0010*  ; Missing character 40 (
048BBE             0011*  ; Missing character 41 )
048BBE             0012*  ; Missing character 42 *
048BBE             0013*  ; Missing character 43 +
048BBE             0014*  ; Missing character 44 ,
048BBE             0015*  ; Missing character 45 -
048BBE             0016*  BUF_4398: equ 0x112E ; 46 .
048BBE             0017*  ; Missing character 47 /
048BBE             0018*  BUF_4400: equ 0x1130 ; 48 0
048BBE             0019*  BUF_4401: equ 0x1131 ; 49 1
048BBE             0020*  BUF_4402: equ 0x1132 ; 50 2
048BBE             0021*  BUF_4403: equ 0x1133 ; 51 3
048BBE             0022*  BUF_4404: equ 0x1134 ; 52 4
048BBE             0023*  BUF_4405: equ 0x1135 ; 53 5
048BBE             0024*  BUF_4406: equ 0x1136 ; 54 6
048BBE             0025*  BUF_4407: equ 0x1137 ; 55 7
048BBE             0026*  BUF_4408: equ 0x1138 ; 56 8
048BBE             0027*  BUF_4409: equ 0x1139 ; 57 9
048BBE             0028*  ; Missing character 58 :
048BBE             0029*  ; Missing character 59 ;
048BBE             0030*  ; Missing character 60 <
048BBE             0031*  ; Missing character 61 =
048BBE             0032*  ; Missing character 62 >
048BBE             0033*  ; Missing character 63 ?
048BBE             0034*  ; Missing character 64 @
048BBE             0035*  BUF_4417: equ 0x1141 ; 65 A
048BBE             0036*  BUF_4418: equ 0x1142 ; 66 B
048BBE             0037*  BUF_4419: equ 0x1143 ; 67 C
048BBE             0038*  BUF_4420: equ 0x1144 ; 68 D
048BBE             0039*  BUF_4421: equ 0x1145 ; 69 E
048BBE             0040*  BUF_4422: equ 0x1146 ; 70 F
048BBE             0041*  BUF_4423: equ 0x1147 ; 71 G
048BBE             0042*  BUF_4424: equ 0x1148 ; 72 H
048BBE             0043*  BUF_4425: equ 0x1149 ; 73 I
048BBE             0044*  BUF_4426: equ 0x114A ; 74 J
048BBE             0045*  BUF_4427: equ 0x114B ; 75 K
048BBE             0046*  BUF_4428: equ 0x114C ; 76 L
048BBE             0047*  BUF_4429: equ 0x114D ; 77 M
048BBE             0048*  BUF_4430: equ 0x114E ; 78 N
048BBE             0049*  BUF_4431: equ 0x114F ; 79 O
048BBE             0050*  BUF_4432: equ 0x1150 ; 80 P
048BBE             0051*  BUF_4433: equ 0x1151 ; 81 Q
048BBE             0052*  BUF_4434: equ 0x1152 ; 82 R
048BBE             0053*  BUF_4435: equ 0x1153 ; 83 S
048BBE             0054*  BUF_4436: equ 0x1154 ; 84 T
048BBE             0055*  BUF_4437: equ 0x1155 ; 85 U
048BBE             0056*  BUF_4438: equ 0x1156 ; 86 V
048BBE             0057*  BUF_4439: equ 0x1157 ; 87 W
048BBE             0058*  BUF_4440: equ 0x1158 ; 88 X
048BBE             0059*  BUF_4441: equ 0x1159 ; 89 Y
048BBE             0060*  BUF_4442: equ 0x115A ; 90 Z
048BBE             0061*  ; Missing character 91 [
048BBE             0062*  ; Missing character 92 \
048BBE             0063*  ; Missing character 93 ]
048BBE             0064*  ; Missing character 94 ^
048BBE             0065*  ; Missing character 95 _
048BBE             0066*  ; Missing character 96 `
048BBE             0067*  BUF_4449: equ 0x1161 ; 97 a
048BBE             0068*  BUF_4450: equ 0x1162 ; 98 b
048BBE             0069*  BUF_4451: equ 0x1163 ; 99 c
048BBE             0070*  BUF_4452: equ 0x1164 ; 100 d
048BBE             0071*  BUF_4453: equ 0x1165 ; 101 e
048BBE             0072*  BUF_4454: equ 0x1166 ; 102 f
048BBE             0073*  BUF_4455: equ 0x1167 ; 103 g
048BBE             0074*  BUF_4456: equ 0x1168 ; 104 h
048BBE             0075*  BUF_4457: equ 0x1169 ; 105 i
048BBE             0076*  BUF_4458: equ 0x116A ; 106 j
048BBE             0077*  BUF_4459: equ 0x116B ; 107 k
048BBE             0078*  BUF_4460: equ 0x116C ; 108 l
048BBE             0079*  BUF_4461: equ 0x116D ; 109 m
048BBE             0080*  BUF_4462: equ 0x116E ; 110 n
048BBE             0081*  BUF_4463: equ 0x116F ; 111 o
048BBE             0082*  BUF_4464: equ 0x1170 ; 112 p
048BBE             0083*  BUF_4465: equ 0x1171 ; 113 q
048BBE             0084*  BUF_4466: equ 0x1172 ; 114 r
048BBE             0085*  BUF_4467: equ 0x1173 ; 115 s
048BBE             0086*  BUF_4468: equ 0x1174 ; 116 t
048BBE             0087*  BUF_4469: equ 0x1175 ; 117 u
048BBE             0088*  BUF_4470: equ 0x1176 ; 118 v
048BBE             0089*  BUF_4471: equ 0x1177 ; 119 w
048BBE             0090*  BUF_4472: equ 0x1178 ; 120 x
048BBE             0091*  BUF_4473: equ 0x1179 ; 121 y
048BBE             0092*  BUF_4474: equ 0x117A ; 122 z
048BBE             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
048BBE             0094*  font_itc_honda:
048BBE 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
048BC4 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
048BCA 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
048BD0 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
048BD6 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
048BDC 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
048BE2 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
048BE8 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
048BEE 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
048BF4 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
048BFA 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
048C00 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
048C06 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
048C0C 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
048C12 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
048C18 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
048C1E 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
048C24 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
048C2A 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
048C30 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
048C36 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
048C3C 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
048C42 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
048C48 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
048C4E 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
048C54 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
048C5A 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
048C60 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
048C66 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
048C6C 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
048C72 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
048C78 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
048C7E 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
048C84 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
048C8A 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
048C90 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
048C96 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
048C9C 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
048CA2 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
048CA8 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
048CAE 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
048CB4 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
048CBA 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
048CC0 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
048CC6 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
048CCC 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
048CD2 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
048CD8 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
048CDE 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
048CE4 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
048CEA 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
048CF0 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
048CF6 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
048CFC 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
048D02 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
048D08 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
048D0E 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
048D14 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
048D1A 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
048D20 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
048D26 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
048D2C 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
048D32 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
048D38 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
048D3E 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
048D44 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
048D4A 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
048D50 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
048D56 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
048D5C 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
048D62 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
048D68 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
048D6E 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
048D74 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
048D7A 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
048D80 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
048D86 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
048D8C 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
048D92 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
048D98 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
048D9E 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
048DA4 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
048DAA 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
048DB0 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
048DB6 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
048DBC 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
048DC2 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
048DC8 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
048DCE 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
048DD4 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
048DDA 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
048DE0             0186*  
048DE0             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
048DE0             0188*  load_font_itc_honda:
048DE0             0189*  
048DE0 21 21 97 04 0190*  	ld hl,Fhonda032
048DE4 11 F1 D3 04 0191*  	ld de,filedata
048DE8 01 00 00 01 0192*  	ld bc,65536
048DEC 3E 01       0193*  	ld a,mos_load
048DEE 5B CF       0194*  	RST.LIL 08h
048DF0 21 20 11 00 0195*  	ld hl,BUF_4384
048DF4 01 06 00 00 0196*  	ld bc,6
048DF8 11 01 00 00 0197*  	ld de,1
048DFC DD 21 06 00 0198*  	ld ix,6
       00          
048E01 CD 40 C9 04 0199*  	call vdu_load_img
048E05             0200*  ; Missing character 33
048E05             0201*  ; Missing character 34
048E05             0202*  ; Missing character 35
048E05             0203*  ; Missing character 36
048E05             0204*  ; Missing character 37
048E05             0205*  ; Missing character 38
048E05             0206*  ; Missing character 39
048E05             0207*  ; Missing character 40
048E05             0208*  ; Missing character 41
048E05             0209*  ; Missing character 42
048E05             0210*  ; Missing character 43
048E05             0211*  ; Missing character 44
048E05             0212*  ; Missing character 45
048E05             0213*  
048E05 21 37 97 04 0214*  	ld hl,Fhonda046
048E09 11 F1 D3 04 0215*  	ld de,filedata
048E0D 01 00 00 01 0216*  	ld bc,65536
048E11 3E 01       0217*  	ld a,mos_load
048E13 5B CF       0218*  	RST.LIL 08h
048E15 21 2E 11 00 0219*  	ld hl,BUF_4398
048E19 01 05 00 00 0220*  	ld bc,5
048E1D 11 05 00 00 0221*  	ld de,5
048E21 DD 21 19 00 0222*  	ld ix,25
       00          
048E26 CD 40 C9 04 0223*  	call vdu_load_img
048E2A             0224*  ; Missing character 47
048E2A             0225*  
048E2A 21 4D 97 04 0226*  	ld hl,Fhonda048
048E2E 11 F1 D3 04 0227*  	ld de,filedata
048E32 01 00 00 01 0228*  	ld bc,65536
048E36 3E 01       0229*  	ld a,mos_load
048E38 5B CF       0230*  	RST.LIL 08h
048E3A 21 30 11 00 0231*  	ld hl,BUF_4400
048E3E 01 0A 00 00 0232*  	ld bc,10
048E42 11 12 00 00 0233*  	ld de,18
048E46 DD 21 B4 00 0234*  	ld ix,180
       00          
048E4B CD 40 C9 04 0235*  	call vdu_load_img
048E4F             0236*  
048E4F 21 63 97 04 0237*  	ld hl,Fhonda049
048E53 11 F1 D3 04 0238*  	ld de,filedata
048E57 01 00 00 01 0239*  	ld bc,65536
048E5B 3E 01       0240*  	ld a,mos_load
048E5D 5B CF       0241*  	RST.LIL 08h
048E5F 21 31 11 00 0242*  	ld hl,BUF_4401
048E63 01 04 00 00 0243*  	ld bc,4
048E67 11 12 00 00 0244*  	ld de,18
048E6B DD 21 48 00 0245*  	ld ix,72
       00          
048E70 CD 40 C9 04 0246*  	call vdu_load_img
048E74             0247*  
048E74 21 79 97 04 0248*  	ld hl,Fhonda050
048E78 11 F1 D3 04 0249*  	ld de,filedata
048E7C 01 00 00 01 0250*  	ld bc,65536
048E80 3E 01       0251*  	ld a,mos_load
048E82 5B CF       0252*  	RST.LIL 08h
048E84 21 32 11 00 0253*  	ld hl,BUF_4402
048E88 01 09 00 00 0254*  	ld bc,9
048E8C 11 12 00 00 0255*  	ld de,18
048E90 DD 21 A2 00 0256*  	ld ix,162
       00          
048E95 CD 40 C9 04 0257*  	call vdu_load_img
048E99             0258*  
048E99 21 8F 97 04 0259*  	ld hl,Fhonda051
048E9D 11 F1 D3 04 0260*  	ld de,filedata
048EA1 01 00 00 01 0261*  	ld bc,65536
048EA5 3E 01       0262*  	ld a,mos_load
048EA7 5B CF       0263*  	RST.LIL 08h
048EA9 21 33 11 00 0264*  	ld hl,BUF_4403
048EAD 01 0A 00 00 0265*  	ld bc,10
048EB1 11 12 00 00 0266*  	ld de,18
048EB5 DD 21 B4 00 0267*  	ld ix,180
       00          
048EBA CD 40 C9 04 0268*  	call vdu_load_img
048EBE             0269*  
048EBE 21 A5 97 04 0270*  	ld hl,Fhonda052
048EC2 11 F1 D3 04 0271*  	ld de,filedata
048EC6 01 00 00 01 0272*  	ld bc,65536
048ECA 3E 01       0273*  	ld a,mos_load
048ECC 5B CF       0274*  	RST.LIL 08h
048ECE 21 34 11 00 0275*  	ld hl,BUF_4404
048ED2 01 0C 00 00 0276*  	ld bc,12
048ED6 11 12 00 00 0277*  	ld de,18
048EDA DD 21 D8 00 0278*  	ld ix,216
       00          
048EDF CD 40 C9 04 0279*  	call vdu_load_img
048EE3             0280*  
048EE3 21 BB 97 04 0281*  	ld hl,Fhonda053
048EE7 11 F1 D3 04 0282*  	ld de,filedata
048EEB 01 00 00 01 0283*  	ld bc,65536
048EEF 3E 01       0284*  	ld a,mos_load
048EF1 5B CF       0285*  	RST.LIL 08h
048EF3 21 35 11 00 0286*  	ld hl,BUF_4405
048EF7 01 0A 00 00 0287*  	ld bc,10
048EFB 11 12 00 00 0288*  	ld de,18
048EFF DD 21 B4 00 0289*  	ld ix,180
       00          
048F04 CD 40 C9 04 0290*  	call vdu_load_img
048F08             0291*  
048F08 21 D1 97 04 0292*  	ld hl,Fhonda054
048F0C 11 F1 D3 04 0293*  	ld de,filedata
048F10 01 00 00 01 0294*  	ld bc,65536
048F14 3E 01       0295*  	ld a,mos_load
048F16 5B CF       0296*  	RST.LIL 08h
048F18 21 36 11 00 0297*  	ld hl,BUF_4406
048F1C 01 0A 00 00 0298*  	ld bc,10
048F20 11 12 00 00 0299*  	ld de,18
048F24 DD 21 B4 00 0300*  	ld ix,180
       00          
048F29 CD 40 C9 04 0301*  	call vdu_load_img
048F2D             0302*  
048F2D 21 E7 97 04 0303*  	ld hl,Fhonda055
048F31 11 F1 D3 04 0304*  	ld de,filedata
048F35 01 00 00 01 0305*  	ld bc,65536
048F39 3E 01       0306*  	ld a,mos_load
048F3B 5B CF       0307*  	RST.LIL 08h
048F3D 21 37 11 00 0308*  	ld hl,BUF_4407
048F41 01 08 00 00 0309*  	ld bc,8
048F45 11 12 00 00 0310*  	ld de,18
048F49 DD 21 90 00 0311*  	ld ix,144
       00          
048F4E CD 40 C9 04 0312*  	call vdu_load_img
048F52             0313*  
048F52 21 FD 97 04 0314*  	ld hl,Fhonda056
048F56 11 F1 D3 04 0315*  	ld de,filedata
048F5A 01 00 00 01 0316*  	ld bc,65536
048F5E 3E 01       0317*  	ld a,mos_load
048F60 5B CF       0318*  	RST.LIL 08h
048F62 21 38 11 00 0319*  	ld hl,BUF_4408
048F66 01 0A 00 00 0320*  	ld bc,10
048F6A 11 12 00 00 0321*  	ld de,18
048F6E DD 21 B4 00 0322*  	ld ix,180
       00          
048F73 CD 40 C9 04 0323*  	call vdu_load_img
048F77             0324*  
048F77 21 13 98 04 0325*  	ld hl,Fhonda057
048F7B 11 F1 D3 04 0326*  	ld de,filedata
048F7F 01 00 00 01 0327*  	ld bc,65536
048F83 3E 01       0328*  	ld a,mos_load
048F85 5B CF       0329*  	RST.LIL 08h
048F87 21 39 11 00 0330*  	ld hl,BUF_4409
048F8B 01 0A 00 00 0331*  	ld bc,10
048F8F 11 12 00 00 0332*  	ld de,18
048F93 DD 21 B4 00 0333*  	ld ix,180
       00          
048F98 CD 40 C9 04 0334*  	call vdu_load_img
048F9C             0335*  ; Missing character 58
048F9C             0336*  ; Missing character 59
048F9C             0337*  ; Missing character 60
048F9C             0338*  ; Missing character 61
048F9C             0339*  ; Missing character 62
048F9C             0340*  ; Missing character 63
048F9C             0341*  ; Missing character 64
048F9C             0342*  
048F9C 21 29 98 04 0343*  	ld hl,Fhonda065
048FA0 11 F1 D3 04 0344*  	ld de,filedata
048FA4 01 00 00 01 0345*  	ld bc,65536
048FA8 3E 01       0346*  	ld a,mos_load
048FAA 5B CF       0347*  	RST.LIL 08h
048FAC 21 41 11 00 0348*  	ld hl,BUF_4417
048FB0 01 0A 00 00 0349*  	ld bc,10
048FB4 11 12 00 00 0350*  	ld de,18
048FB8 DD 21 B4 00 0351*  	ld ix,180
       00          
048FBD CD 40 C9 04 0352*  	call vdu_load_img
048FC1             0353*  
048FC1 21 3F 98 04 0354*  	ld hl,Fhonda066
048FC5 11 F1 D3 04 0355*  	ld de,filedata
048FC9 01 00 00 01 0356*  	ld bc,65536
048FCD 3E 01       0357*  	ld a,mos_load
048FCF 5B CF       0358*  	RST.LIL 08h
048FD1 21 42 11 00 0359*  	ld hl,BUF_4418
048FD5 01 0A 00 00 0360*  	ld bc,10
048FD9 11 12 00 00 0361*  	ld de,18
048FDD DD 21 B4 00 0362*  	ld ix,180
       00          
048FE2 CD 40 C9 04 0363*  	call vdu_load_img
048FE6             0364*  
048FE6 21 55 98 04 0365*  	ld hl,Fhonda067
048FEA 11 F1 D3 04 0366*  	ld de,filedata
048FEE 01 00 00 01 0367*  	ld bc,65536
048FF2 3E 01       0368*  	ld a,mos_load
048FF4 5B CF       0369*  	RST.LIL 08h
048FF6 21 43 11 00 0370*  	ld hl,BUF_4419
048FFA 01 08 00 00 0371*  	ld bc,8
048FFE 11 13 00 00 0372*  	ld de,19
049002 DD 21 98 00 0373*  	ld ix,152
       00          
049007 CD 40 C9 04 0374*  	call vdu_load_img
04900B             0375*  
04900B 21 6B 98 04 0376*  	ld hl,Fhonda068
04900F 11 F1 D3 04 0377*  	ld de,filedata
049013 01 00 00 01 0378*  	ld bc,65536
049017 3E 01       0379*  	ld a,mos_load
049019 5B CF       0380*  	RST.LIL 08h
04901B 21 44 11 00 0381*  	ld hl,BUF_4420
04901F 01 0A 00 00 0382*  	ld bc,10
049023 11 12 00 00 0383*  	ld de,18
049027 DD 21 B4 00 0384*  	ld ix,180
       00          
04902C CD 40 C9 04 0385*  	call vdu_load_img
049030             0386*  
049030 21 81 98 04 0387*  	ld hl,Fhonda069
049034 11 F1 D3 04 0388*  	ld de,filedata
049038 01 00 00 01 0389*  	ld bc,65536
04903C 3E 01       0390*  	ld a,mos_load
04903E 5B CF       0391*  	RST.LIL 08h
049040 21 45 11 00 0392*  	ld hl,BUF_4421
049044 01 08 00 00 0393*  	ld bc,8
049048 11 12 00 00 0394*  	ld de,18
04904C DD 21 90 00 0395*  	ld ix,144
       00          
049051 CD 40 C9 04 0396*  	call vdu_load_img
049055             0397*  
049055 21 97 98 04 0398*  	ld hl,Fhonda070
049059 11 F1 D3 04 0399*  	ld de,filedata
04905D 01 00 00 01 0400*  	ld bc,65536
049061 3E 01       0401*  	ld a,mos_load
049063 5B CF       0402*  	RST.LIL 08h
049065 21 46 11 00 0403*  	ld hl,BUF_4422
049069 01 08 00 00 0404*  	ld bc,8
04906D 11 12 00 00 0405*  	ld de,18
049071 DD 21 90 00 0406*  	ld ix,144
       00          
049076 CD 40 C9 04 0407*  	call vdu_load_img
04907A             0408*  
04907A 21 AD 98 04 0409*  	ld hl,Fhonda071
04907E 11 F1 D3 04 0410*  	ld de,filedata
049082 01 00 00 01 0411*  	ld bc,65536
049086 3E 01       0412*  	ld a,mos_load
049088 5B CF       0413*  	RST.LIL 08h
04908A 21 47 11 00 0414*  	ld hl,BUF_4423
04908E 01 0A 00 00 0415*  	ld bc,10
049092 11 12 00 00 0416*  	ld de,18
049096 DD 21 B4 00 0417*  	ld ix,180
       00          
04909B CD 40 C9 04 0418*  	call vdu_load_img
04909F             0419*  
04909F 21 C3 98 04 0420*  	ld hl,Fhonda072
0490A3 11 F1 D3 04 0421*  	ld de,filedata
0490A7 01 00 00 01 0422*  	ld bc,65536
0490AB 3E 01       0423*  	ld a,mos_load
0490AD 5B CF       0424*  	RST.LIL 08h
0490AF 21 48 11 00 0425*  	ld hl,BUF_4424
0490B3 01 0A 00 00 0426*  	ld bc,10
0490B7 11 12 00 00 0427*  	ld de,18
0490BB DD 21 B4 00 0428*  	ld ix,180
       00          
0490C0 CD 40 C9 04 0429*  	call vdu_load_img
0490C4             0430*  
0490C4 21 D9 98 04 0431*  	ld hl,Fhonda073
0490C8 11 F1 D3 04 0432*  	ld de,filedata
0490CC 01 00 00 01 0433*  	ld bc,65536
0490D0 3E 01       0434*  	ld a,mos_load
0490D2 5B CF       0435*  	RST.LIL 08h
0490D4 21 49 11 00 0436*  	ld hl,BUF_4425
0490D8 01 03 00 00 0437*  	ld bc,3
0490DC 11 12 00 00 0438*  	ld de,18
0490E0 DD 21 36 00 0439*  	ld ix,54
       00          
0490E5 CD 40 C9 04 0440*  	call vdu_load_img
0490E9             0441*  
0490E9 21 EF 98 04 0442*  	ld hl,Fhonda074
0490ED 11 F1 D3 04 0443*  	ld de,filedata
0490F1 01 00 00 01 0444*  	ld bc,65536
0490F5 3E 01       0445*  	ld a,mos_load
0490F7 5B CF       0446*  	RST.LIL 08h
0490F9 21 4A 11 00 0447*  	ld hl,BUF_4426
0490FD 01 06 00 00 0448*  	ld bc,6
049101 11 12 00 00 0449*  	ld de,18
049105 DD 21 6C 00 0450*  	ld ix,108
       00          
04910A CD 40 C9 04 0451*  	call vdu_load_img
04910E             0452*  
04910E 21 05 99 04 0453*  	ld hl,Fhonda075
049112 11 F1 D3 04 0454*  	ld de,filedata
049116 01 00 00 01 0455*  	ld bc,65536
04911A 3E 01       0456*  	ld a,mos_load
04911C 5B CF       0457*  	RST.LIL 08h
04911E 21 4B 11 00 0458*  	ld hl,BUF_4427
049122 01 0A 00 00 0459*  	ld bc,10
049126 11 12 00 00 0460*  	ld de,18
04912A DD 21 B4 00 0461*  	ld ix,180
       00          
04912F CD 40 C9 04 0462*  	call vdu_load_img
049133             0463*  
049133 21 1B 99 04 0464*  	ld hl,Fhonda076
049137 11 F1 D3 04 0465*  	ld de,filedata
04913B 01 00 00 01 0466*  	ld bc,65536
04913F 3E 01       0467*  	ld a,mos_load
049141 5B CF       0468*  	RST.LIL 08h
049143 21 4C 11 00 0469*  	ld hl,BUF_4428
049147 01 08 00 00 0470*  	ld bc,8
04914B 11 12 00 00 0471*  	ld de,18
04914F DD 21 90 00 0472*  	ld ix,144
       00          
049154 CD 40 C9 04 0473*  	call vdu_load_img
049158             0474*  
049158 21 31 99 04 0475*  	ld hl,Fhonda077
04915C 11 F1 D3 04 0476*  	ld de,filedata
049160 01 00 00 01 0477*  	ld bc,65536
049164 3E 01       0478*  	ld a,mos_load
049166 5B CF       0479*  	RST.LIL 08h
049168 21 4D 11 00 0480*  	ld hl,BUF_4429
04916C 01 0E 00 00 0481*  	ld bc,14
049170 11 12 00 00 0482*  	ld de,18
049174 DD 21 FC 00 0483*  	ld ix,252
       00          
049179 CD 40 C9 04 0484*  	call vdu_load_img
04917D             0485*  
04917D 21 47 99 04 0486*  	ld hl,Fhonda078
049181 11 F1 D3 04 0487*  	ld de,filedata
049185 01 00 00 01 0488*  	ld bc,65536
049189 3E 01       0489*  	ld a,mos_load
04918B 5B CF       0490*  	RST.LIL 08h
04918D 21 4E 11 00 0491*  	ld hl,BUF_4430
049191 01 0A 00 00 0492*  	ld bc,10
049195 11 12 00 00 0493*  	ld de,18
049199 DD 21 B4 00 0494*  	ld ix,180
       00          
04919E CD 40 C9 04 0495*  	call vdu_load_img
0491A2             0496*  
0491A2 21 5D 99 04 0497*  	ld hl,Fhonda079
0491A6 11 F1 D3 04 0498*  	ld de,filedata
0491AA 01 00 00 01 0499*  	ld bc,65536
0491AE 3E 01       0500*  	ld a,mos_load
0491B0 5B CF       0501*  	RST.LIL 08h
0491B2 21 4F 11 00 0502*  	ld hl,BUF_4431
0491B6 01 0A 00 00 0503*  	ld bc,10
0491BA 11 12 00 00 0504*  	ld de,18
0491BE DD 21 B4 00 0505*  	ld ix,180
       00          
0491C3 CD 40 C9 04 0506*  	call vdu_load_img
0491C7             0507*  
0491C7 21 73 99 04 0508*  	ld hl,Fhonda080
0491CB 11 F1 D3 04 0509*  	ld de,filedata
0491CF 01 00 00 01 0510*  	ld bc,65536
0491D3 3E 01       0511*  	ld a,mos_load
0491D5 5B CF       0512*  	RST.LIL 08h
0491D7 21 50 11 00 0513*  	ld hl,BUF_4432
0491DB 01 0A 00 00 0514*  	ld bc,10
0491DF 11 12 00 00 0515*  	ld de,18
0491E3 DD 21 B4 00 0516*  	ld ix,180
       00          
0491E8 CD 40 C9 04 0517*  	call vdu_load_img
0491EC             0518*  
0491EC 21 89 99 04 0519*  	ld hl,Fhonda081
0491F0 11 F1 D3 04 0520*  	ld de,filedata
0491F4 01 00 00 01 0521*  	ld bc,65536
0491F8 3E 01       0522*  	ld a,mos_load
0491FA 5B CF       0523*  	RST.LIL 08h
0491FC 21 51 11 00 0524*  	ld hl,BUF_4433
049200 01 0A 00 00 0525*  	ld bc,10
049204 11 15 00 00 0526*  	ld de,21
049208 DD 21 D2 00 0527*  	ld ix,210
       00          
04920D CD 40 C9 04 0528*  	call vdu_load_img
049211             0529*  
049211 21 9F 99 04 0530*  	ld hl,Fhonda082
049215 11 F1 D3 04 0531*  	ld de,filedata
049219 01 00 00 01 0532*  	ld bc,65536
04921D 3E 01       0533*  	ld a,mos_load
04921F 5B CF       0534*  	RST.LIL 08h
049221 21 52 11 00 0535*  	ld hl,BUF_4434
049225 01 0A 00 00 0536*  	ld bc,10
049229 11 12 00 00 0537*  	ld de,18
04922D DD 21 B4 00 0538*  	ld ix,180
       00          
049232 CD 40 C9 04 0539*  	call vdu_load_img
049236             0540*  
049236 21 B5 99 04 0541*  	ld hl,Fhonda083
04923A 11 F1 D3 04 0542*  	ld de,filedata
04923E 01 00 00 01 0543*  	ld bc,65536
049242 3E 01       0544*  	ld a,mos_load
049244 5B CF       0545*  	RST.LIL 08h
049246 21 53 11 00 0546*  	ld hl,BUF_4435
04924A 01 09 00 00 0547*  	ld bc,9
04924E 11 13 00 00 0548*  	ld de,19
049252 DD 21 AB 00 0549*  	ld ix,171
       00          
049257 CD 40 C9 04 0550*  	call vdu_load_img
04925B             0551*  
04925B 21 CB 99 04 0552*  	ld hl,Fhonda084
04925F 11 F1 D3 04 0553*  	ld de,filedata
049263 01 00 00 01 0554*  	ld bc,65536
049267 3E 01       0555*  	ld a,mos_load
049269 5B CF       0556*  	RST.LIL 08h
04926B 21 54 11 00 0557*  	ld hl,BUF_4436
04926F 01 0A 00 00 0558*  	ld bc,10
049273 11 12 00 00 0559*  	ld de,18
049277 DD 21 B4 00 0560*  	ld ix,180
       00          
04927C CD 40 C9 04 0561*  	call vdu_load_img
049280             0562*  
049280 21 E1 99 04 0563*  	ld hl,Fhonda085
049284 11 F1 D3 04 0564*  	ld de,filedata
049288 01 00 00 01 0565*  	ld bc,65536
04928C 3E 01       0566*  	ld a,mos_load
04928E 5B CF       0567*  	RST.LIL 08h
049290 21 55 11 00 0568*  	ld hl,BUF_4437
049294 01 0A 00 00 0569*  	ld bc,10
049298 11 12 00 00 0570*  	ld de,18
04929C DD 21 B4 00 0571*  	ld ix,180
       00          
0492A1 CD 40 C9 04 0572*  	call vdu_load_img
0492A5             0573*  
0492A5 21 F7 99 04 0574*  	ld hl,Fhonda086
0492A9 11 F1 D3 04 0575*  	ld de,filedata
0492AD 01 00 00 01 0576*  	ld bc,65536
0492B1 3E 01       0577*  	ld a,mos_load
0492B3 5B CF       0578*  	RST.LIL 08h
0492B5 21 56 11 00 0579*  	ld hl,BUF_4438
0492B9 01 0A 00 00 0580*  	ld bc,10
0492BD 11 12 00 00 0581*  	ld de,18
0492C1 DD 21 B4 00 0582*  	ld ix,180
       00          
0492C6 CD 40 C9 04 0583*  	call vdu_load_img
0492CA             0584*  
0492CA 21 0D 9A 04 0585*  	ld hl,Fhonda087
0492CE 11 F1 D3 04 0586*  	ld de,filedata
0492D2 01 00 00 01 0587*  	ld bc,65536
0492D6 3E 01       0588*  	ld a,mos_load
0492D8 5B CF       0589*  	RST.LIL 08h
0492DA 21 57 11 00 0590*  	ld hl,BUF_4439
0492DE 01 10 00 00 0591*  	ld bc,16
0492E2 11 12 00 00 0592*  	ld de,18
0492E6 DD 21 20 01 0593*  	ld ix,288
       00          
0492EB CD 40 C9 04 0594*  	call vdu_load_img
0492EF             0595*  
0492EF 21 23 9A 04 0596*  	ld hl,Fhonda088
0492F3 11 F1 D3 04 0597*  	ld de,filedata
0492F7 01 00 00 01 0598*  	ld bc,65536
0492FB 3E 01       0599*  	ld a,mos_load
0492FD 5B CF       0600*  	RST.LIL 08h
0492FF 21 58 11 00 0601*  	ld hl,BUF_4440
049303 01 0A 00 00 0602*  	ld bc,10
049307 11 12 00 00 0603*  	ld de,18
04930B DD 21 B4 00 0604*  	ld ix,180
       00          
049310 CD 40 C9 04 0605*  	call vdu_load_img
049314             0606*  
049314 21 39 9A 04 0607*  	ld hl,Fhonda089
049318 11 F1 D3 04 0608*  	ld de,filedata
04931C 01 00 00 01 0609*  	ld bc,65536
049320 3E 01       0610*  	ld a,mos_load
049322 5B CF       0611*  	RST.LIL 08h
049324 21 59 11 00 0612*  	ld hl,BUF_4441
049328 01 0A 00 00 0613*  	ld bc,10
04932C 11 12 00 00 0614*  	ld de,18
049330 DD 21 B4 00 0615*  	ld ix,180
       00          
049335 CD 40 C9 04 0616*  	call vdu_load_img
049339             0617*  
049339 21 4F 9A 04 0618*  	ld hl,Fhonda090
04933D 11 F1 D3 04 0619*  	ld de,filedata
049341 01 00 00 01 0620*  	ld bc,65536
049345 3E 01       0621*  	ld a,mos_load
049347 5B CF       0622*  	RST.LIL 08h
049349 21 5A 11 00 0623*  	ld hl,BUF_4442
04934D 01 09 00 00 0624*  	ld bc,9
049351 11 12 00 00 0625*  	ld de,18
049355 DD 21 A2 00 0626*  	ld ix,162
       00          
04935A CD 40 C9 04 0627*  	call vdu_load_img
04935E             0628*  ; Missing character 91
04935E             0629*  ; Missing character 92
04935E             0630*  ; Missing character 93
04935E             0631*  ; Missing character 94
04935E             0632*  ; Missing character 95
04935E             0633*  ; Missing character 96
04935E             0634*  
04935E 21 65 9A 04 0635*  	ld hl,Fhonda097
049362 11 F1 D3 04 0636*  	ld de,filedata
049366 01 00 00 01 0637*  	ld bc,65536
04936A 3E 01       0638*  	ld a,mos_load
04936C 5B CF       0639*  	RST.LIL 08h
04936E 21 61 11 00 0640*  	ld hl,BUF_4449
049372 01 08 00 00 0641*  	ld bc,8
049376 11 0C 00 00 0642*  	ld de,12
04937A DD 21 60 00 0643*  	ld ix,96
       00          
04937F CD 40 C9 04 0644*  	call vdu_load_img
049383             0645*  
049383 21 7B 9A 04 0646*  	ld hl,Fhonda098
049387 11 F1 D3 04 0647*  	ld de,filedata
04938B 01 00 00 01 0648*  	ld bc,65536
04938F 3E 01       0649*  	ld a,mos_load
049391 5B CF       0650*  	RST.LIL 08h
049393 21 62 11 00 0651*  	ld hl,BUF_4450
049397 01 09 00 00 0652*  	ld bc,9
04939B 11 12 00 00 0653*  	ld de,18
04939F DD 21 A2 00 0654*  	ld ix,162
       00          
0493A4 CD 40 C9 04 0655*  	call vdu_load_img
0493A8             0656*  
0493A8 21 91 9A 04 0657*  	ld hl,Fhonda099
0493AC 11 F1 D3 04 0658*  	ld de,filedata
0493B0 01 00 00 01 0659*  	ld bc,65536
0493B4 3E 01       0660*  	ld a,mos_load
0493B6 5B CF       0661*  	RST.LIL 08h
0493B8 21 63 11 00 0662*  	ld hl,BUF_4451
0493BC 01 07 00 00 0663*  	ld bc,7
0493C0 11 0C 00 00 0664*  	ld de,12
0493C4 DD 21 54 00 0665*  	ld ix,84
       00          
0493C9 CD 40 C9 04 0666*  	call vdu_load_img
0493CD             0667*  
0493CD 21 A7 9A 04 0668*  	ld hl,Fhonda100
0493D1 11 F1 D3 04 0669*  	ld de,filedata
0493D5 01 00 00 01 0670*  	ld bc,65536
0493D9 3E 01       0671*  	ld a,mos_load
0493DB 5B CF       0672*  	RST.LIL 08h
0493DD 21 64 11 00 0673*  	ld hl,BUF_4452
0493E1 01 09 00 00 0674*  	ld bc,9
0493E5 11 12 00 00 0675*  	ld de,18
0493E9 DD 21 A2 00 0676*  	ld ix,162
       00          
0493EE CD 40 C9 04 0677*  	call vdu_load_img
0493F2             0678*  
0493F2 21 BD 9A 04 0679*  	ld hl,Fhonda101
0493F6 11 F1 D3 04 0680*  	ld de,filedata
0493FA 01 00 00 01 0681*  	ld bc,65536
0493FE 3E 01       0682*  	ld a,mos_load
049400 5B CF       0683*  	RST.LIL 08h
049402 21 65 11 00 0684*  	ld hl,BUF_4453
049406 01 08 00 00 0685*  	ld bc,8
04940A 11 0C 00 00 0686*  	ld de,12
04940E DD 21 60 00 0687*  	ld ix,96
       00          
049413 CD 40 C9 04 0688*  	call vdu_load_img
049417             0689*  
049417 21 D3 9A 04 0690*  	ld hl,Fhonda102
04941B 11 F1 D3 04 0691*  	ld de,filedata
04941F 01 00 00 01 0692*  	ld bc,65536
049423 3E 01       0693*  	ld a,mos_load
049425 5B CF       0694*  	RST.LIL 08h
049427 21 66 11 00 0695*  	ld hl,BUF_4454
04942B 01 09 00 00 0696*  	ld bc,9
04942F 11 12 00 00 0697*  	ld de,18
049433 DD 21 A2 00 0698*  	ld ix,162
       00          
049438 CD 40 C9 04 0699*  	call vdu_load_img
04943C             0700*  
04943C 21 E9 9A 04 0701*  	ld hl,Fhonda103
049440 11 F1 D3 04 0702*  	ld de,filedata
049444 01 00 00 01 0703*  	ld bc,65536
049448 3E 01       0704*  	ld a,mos_load
04944A 5B CF       0705*  	RST.LIL 08h
04944C 21 67 11 00 0706*  	ld hl,BUF_4455
049450 01 09 00 00 0707*  	ld bc,9
049454 11 12 00 00 0708*  	ld de,18
049458 DD 21 A2 00 0709*  	ld ix,162
       00          
04945D CD 40 C9 04 0710*  	call vdu_load_img
049461             0711*  
049461 21 FF 9A 04 0712*  	ld hl,Fhonda104
049465 11 F1 D3 04 0713*  	ld de,filedata
049469 01 00 00 01 0714*  	ld bc,65536
04946D 3E 01       0715*  	ld a,mos_load
04946F 5B CF       0716*  	RST.LIL 08h
049471 21 68 11 00 0717*  	ld hl,BUF_4456
049475 01 09 00 00 0718*  	ld bc,9
049479 11 12 00 00 0719*  	ld de,18
04947D DD 21 A2 00 0720*  	ld ix,162
       00          
049482 CD 40 C9 04 0721*  	call vdu_load_img
049486             0722*  
049486 21 15 9B 04 0723*  	ld hl,Fhonda105
04948A 11 F1 D3 04 0724*  	ld de,filedata
04948E 01 00 00 01 0725*  	ld bc,65536
049492 3E 01       0726*  	ld a,mos_load
049494 5B CF       0727*  	RST.LIL 08h
049496 21 69 11 00 0728*  	ld hl,BUF_4457
04949A 01 04 00 00 0729*  	ld bc,4
04949E 11 12 00 00 0730*  	ld de,18
0494A2 DD 21 48 00 0731*  	ld ix,72
       00          
0494A7 CD 40 C9 04 0732*  	call vdu_load_img
0494AB             0733*  
0494AB 21 2B 9B 04 0734*  	ld hl,Fhonda106
0494AF 11 F1 D3 04 0735*  	ld de,filedata
0494B3 01 00 00 01 0736*  	ld bc,65536
0494B7 3E 01       0737*  	ld a,mos_load
0494B9 5B CF       0738*  	RST.LIL 08h
0494BB 21 6A 11 00 0739*  	ld hl,BUF_4458
0494BF 01 08 00 00 0740*  	ld bc,8
0494C3 11 18 00 00 0741*  	ld de,24
0494C7 DD 21 C0 00 0742*  	ld ix,192
       00          
0494CC CD 40 C9 04 0743*  	call vdu_load_img
0494D0             0744*  
0494D0 21 41 9B 04 0745*  	ld hl,Fhonda107
0494D4 11 F1 D3 04 0746*  	ld de,filedata
0494D8 01 00 00 01 0747*  	ld bc,65536
0494DC 3E 01       0748*  	ld a,mos_load
0494DE 5B CF       0749*  	RST.LIL 08h
0494E0 21 6B 11 00 0750*  	ld hl,BUF_4459
0494E4 01 09 00 00 0751*  	ld bc,9
0494E8 11 12 00 00 0752*  	ld de,18
0494EC DD 21 A2 00 0753*  	ld ix,162
       00          
0494F1 CD 40 C9 04 0754*  	call vdu_load_img
0494F5             0755*  
0494F5 21 57 9B 04 0756*  	ld hl,Fhonda108
0494F9 11 F1 D3 04 0757*  	ld de,filedata
0494FD 01 00 00 01 0758*  	ld bc,65536
049501 3E 01       0759*  	ld a,mos_load
049503 5B CF       0760*  	RST.LIL 08h
049505 21 6C 11 00 0761*  	ld hl,BUF_4460
049509 01 03 00 00 0762*  	ld bc,3
04950D 11 12 00 00 0763*  	ld de,18
049511 DD 21 36 00 0764*  	ld ix,54
       00          
049516 CD 40 C9 04 0765*  	call vdu_load_img
04951A             0766*  
04951A 21 6D 9B 04 0767*  	ld hl,Fhonda109
04951E 11 F1 D3 04 0768*  	ld de,filedata
049522 01 00 00 01 0769*  	ld bc,65536
049526 3E 01       0770*  	ld a,mos_load
049528 5B CF       0771*  	RST.LIL 08h
04952A 21 6D 11 00 0772*  	ld hl,BUF_4461
04952E 01 0E 00 00 0773*  	ld bc,14
049532 11 0D 00 00 0774*  	ld de,13
049536 DD 21 B6 00 0775*  	ld ix,182
       00          
04953B CD 40 C9 04 0776*  	call vdu_load_img
04953F             0777*  
04953F 21 83 9B 04 0778*  	ld hl,Fhonda110
049543 11 F1 D3 04 0779*  	ld de,filedata
049547 01 00 00 01 0780*  	ld bc,65536
04954B 3E 01       0781*  	ld a,mos_load
04954D 5B CF       0782*  	RST.LIL 08h
04954F 21 6E 11 00 0783*  	ld hl,BUF_4462
049553 01 09 00 00 0784*  	ld bc,9
049557 11 0C 00 00 0785*  	ld de,12
04955B DD 21 6C 00 0786*  	ld ix,108
       00          
049560 CD 40 C9 04 0787*  	call vdu_load_img
049564             0788*  
049564 21 99 9B 04 0789*  	ld hl,Fhonda111
049568 11 F1 D3 04 0790*  	ld de,filedata
04956C 01 00 00 01 0791*  	ld bc,65536
049570 3E 01       0792*  	ld a,mos_load
049572 5B CF       0793*  	RST.LIL 08h
049574 21 6F 11 00 0794*  	ld hl,BUF_4463
049578 01 09 00 00 0795*  	ld bc,9
04957C 11 0C 00 00 0796*  	ld de,12
049580 DD 21 6C 00 0797*  	ld ix,108
       00          
049585 CD 40 C9 04 0798*  	call vdu_load_img
049589             0799*  
049589 21 AF 9B 04 0800*  	ld hl,Fhonda112
04958D 11 F1 D3 04 0801*  	ld de,filedata
049591 01 00 00 01 0802*  	ld bc,65536
049595 3E 01       0803*  	ld a,mos_load
049597 5B CF       0804*  	RST.LIL 08h
049599 21 70 11 00 0805*  	ld hl,BUF_4464
04959D 01 09 00 00 0806*  	ld bc,9
0495A1 11 12 00 00 0807*  	ld de,18
0495A5 DD 21 A2 00 0808*  	ld ix,162
       00          
0495AA CD 40 C9 04 0809*  	call vdu_load_img
0495AE             0810*  
0495AE 21 C5 9B 04 0811*  	ld hl,Fhonda113
0495B2 11 F1 D3 04 0812*  	ld de,filedata
0495B6 01 00 00 01 0813*  	ld bc,65536
0495BA 3E 01       0814*  	ld a,mos_load
0495BC 5B CF       0815*  	RST.LIL 08h
0495BE 21 71 11 00 0816*  	ld hl,BUF_4465
0495C2 01 09 00 00 0817*  	ld bc,9
0495C6 11 12 00 00 0818*  	ld de,18
0495CA DD 21 A2 00 0819*  	ld ix,162
       00          
0495CF CD 40 C9 04 0820*  	call vdu_load_img
0495D3             0821*  
0495D3 21 DB 9B 04 0822*  	ld hl,Fhonda114
0495D7 11 F1 D3 04 0823*  	ld de,filedata
0495DB 01 00 00 01 0824*  	ld bc,65536
0495DF 3E 01       0825*  	ld a,mos_load
0495E1 5B CF       0826*  	RST.LIL 08h
0495E3 21 72 11 00 0827*  	ld hl,BUF_4466
0495E7 01 06 00 00 0828*  	ld bc,6
0495EB 11 0D 00 00 0829*  	ld de,13
0495EF DD 21 4E 00 0830*  	ld ix,78
       00          
0495F4 CD 40 C9 04 0831*  	call vdu_load_img
0495F8             0832*  
0495F8 21 F1 9B 04 0833*  	ld hl,Fhonda115
0495FC 11 F1 D3 04 0834*  	ld de,filedata
049600 01 00 00 01 0835*  	ld bc,65536
049604 3E 01       0836*  	ld a,mos_load
049606 5B CF       0837*  	RST.LIL 08h
049608 21 73 11 00 0838*  	ld hl,BUF_4467
04960C 01 08 00 00 0839*  	ld bc,8
049610 11 0D 00 00 0840*  	ld de,13
049614 DD 21 68 00 0841*  	ld ix,104
       00          
049619 CD 40 C9 04 0842*  	call vdu_load_img
04961D             0843*  
04961D 21 07 9C 04 0844*  	ld hl,Fhonda116
049621 11 F1 D3 04 0845*  	ld de,filedata
049625 01 00 00 01 0846*  	ld bc,65536
049629 3E 01       0847*  	ld a,mos_load
04962B 5B CF       0848*  	RST.LIL 08h
04962D 21 74 11 00 0849*  	ld hl,BUF_4468
049631 01 07 00 00 0850*  	ld bc,7
049635 11 0F 00 00 0851*  	ld de,15
049639 DD 21 69 00 0852*  	ld ix,105
       00          
04963E CD 40 C9 04 0853*  	call vdu_load_img
049642             0854*  
049642 21 1D 9C 04 0855*  	ld hl,Fhonda117
049646 11 F1 D3 04 0856*  	ld de,filedata
04964A 01 00 00 01 0857*  	ld bc,65536
04964E 3E 01       0858*  	ld a,mos_load
049650 5B CF       0859*  	RST.LIL 08h
049652 21 75 11 00 0860*  	ld hl,BUF_4469
049656 01 09 00 00 0861*  	ld bc,9
04965A 11 0C 00 00 0862*  	ld de,12
04965E DD 21 6C 00 0863*  	ld ix,108
       00          
049663 CD 40 C9 04 0864*  	call vdu_load_img
049667             0865*  
049667 21 33 9C 04 0866*  	ld hl,Fhonda118
04966B 11 F1 D3 04 0867*  	ld de,filedata
04966F 01 00 00 01 0868*  	ld bc,65536
049673 3E 01       0869*  	ld a,mos_load
049675 5B CF       0870*  	RST.LIL 08h
049677 21 76 11 00 0871*  	ld hl,BUF_4470
04967B 01 09 00 00 0872*  	ld bc,9
04967F 11 0C 00 00 0873*  	ld de,12
049683 DD 21 6C 00 0874*  	ld ix,108
       00          
049688 CD 40 C9 04 0875*  	call vdu_load_img
04968C             0876*  
04968C 21 49 9C 04 0877*  	ld hl,Fhonda119
049690 11 F1 D3 04 0878*  	ld de,filedata
049694 01 00 00 01 0879*  	ld bc,65536
049698 3E 01       0880*  	ld a,mos_load
04969A 5B CF       0881*  	RST.LIL 08h
04969C 21 77 11 00 0882*  	ld hl,BUF_4471
0496A0 01 0E 00 00 0883*  	ld bc,14
0496A4 11 0C 00 00 0884*  	ld de,12
0496A8 DD 21 A8 00 0885*  	ld ix,168
       00          
0496AD CD 40 C9 04 0886*  	call vdu_load_img
0496B1             0887*  
0496B1 21 5F 9C 04 0888*  	ld hl,Fhonda120
0496B5 11 F1 D3 04 0889*  	ld de,filedata
0496B9 01 00 00 01 0890*  	ld bc,65536
0496BD 3E 01       0891*  	ld a,mos_load
0496BF 5B CF       0892*  	RST.LIL 08h
0496C1 21 78 11 00 0893*  	ld hl,BUF_4472
0496C5 01 09 00 00 0894*  	ld bc,9
0496C9 11 0C 00 00 0895*  	ld de,12
0496CD DD 21 6C 00 0896*  	ld ix,108
       00          
0496D2 CD 40 C9 04 0897*  	call vdu_load_img
0496D6             0898*  
0496D6 21 75 9C 04 0899*  	ld hl,Fhonda121
0496DA 11 F1 D3 04 0900*  	ld de,filedata
0496DE 01 00 00 01 0901*  	ld bc,65536
0496E2 3E 01       0902*  	ld a,mos_load
0496E4 5B CF       0903*  	RST.LIL 08h
0496E6 21 79 11 00 0904*  	ld hl,BUF_4473
0496EA 01 09 00 00 0905*  	ld bc,9
0496EE 11 11 00 00 0906*  	ld de,17
0496F2 DD 21 99 00 0907*  	ld ix,153
       00          
0496F7 CD 40 C9 04 0908*  	call vdu_load_img
0496FB             0909*  
0496FB 21 8B 9C 04 0910*  	ld hl,Fhonda122
0496FF 11 F1 D3 04 0911*  	ld de,filedata
049703 01 00 00 01 0912*  	ld bc,65536
049707 3E 01       0913*  	ld a,mos_load
049709 5B CF       0914*  	RST.LIL 08h
04970B 21 7A 11 00 0915*  	ld hl,BUF_4474
04970F 01 09 00 00 0916*  	ld bc,9
049713 11 0C 00 00 0917*  	ld de,12
049717 DD 21 6C 00 0918*  	ld ix,108
       00          
04971C CD 40 C9 04 0919*  	call vdu_load_img
049720             0920*  
049720 C9          0921*  	ret
049721             0922*  
049721 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
049737 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
04974D 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
049763 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
049779 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
04978F 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
0497A5 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
0497BB 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
0497D1 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
0497E7 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0497FD 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
049813 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
049829 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
04983F 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
049855 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
04986B 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
049881 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
049897 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
0498AD 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
0498C3 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
0498D9 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0498EF 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
049905 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
04991B 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
049931 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
049947 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
04995D 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
049973 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
049989 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
04999F 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
0499B5 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
0499CB 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
0499E1 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
0499F7 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
049A0D 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
049A23 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
049A39 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
049A4F 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
049A65 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
049A7B 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
049A91 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
049AA7 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
049ABD 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
049AD3 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
049AE9 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
049AFF 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
049B15 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
049B2B 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
049B41 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
049B57 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
049B6D 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
049B83 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
049B99 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
049BAF 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
049BC5 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
049BDB 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
049BF1 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
049C07 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
049C1D 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
049C33 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
049C49 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
049C5F 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
049C75 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
049C8B 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
049CA1             0019   	include "src/asm/font_retro_computer.asm"
049CA1             0001*  ; Bitmap indices:
049CA1             0002*  BUF_4128: equ 0x1020 ; 32
049CA1             0003*  BUF_4129: equ 0x1021 ; 33 !
049CA1             0004*  ; Missing character 34 "
049CA1             0005*  ; Missing character 35 #
049CA1             0006*  ; Missing character 36 $
049CA1             0007*  ; Missing character 37 %
049CA1             0008*  ; Missing character 38 &
049CA1             0009*  ; Missing character 39 '
049CA1             0010*  ; Missing character 40 (
049CA1             0011*  ; Missing character 41 )
049CA1             0012*  ; Missing character 42 *
049CA1             0013*  ; Missing character 43 +
049CA1             0014*  ; Missing character 44 ,
049CA1             0015*  ; Missing character 45 -
049CA1             0016*  ; Missing character 46 .
049CA1             0017*  ; Missing character 47 /
049CA1             0018*  BUF_4144: equ 0x1030 ; 48 0
049CA1             0019*  BUF_4145: equ 0x1031 ; 49 1
049CA1             0020*  BUF_4146: equ 0x1032 ; 50 2
049CA1             0021*  BUF_4147: equ 0x1033 ; 51 3
049CA1             0022*  BUF_4148: equ 0x1034 ; 52 4
049CA1             0023*  BUF_4149: equ 0x1035 ; 53 5
049CA1             0024*  BUF_4150: equ 0x1036 ; 54 6
049CA1             0025*  BUF_4151: equ 0x1037 ; 55 7
049CA1             0026*  BUF_4152: equ 0x1038 ; 56 8
049CA1             0027*  BUF_4153: equ 0x1039 ; 57 9
049CA1             0028*  ; Missing character 58 :
049CA1             0029*  ; Missing character 59 ;
049CA1             0030*  ; Missing character 60 <
049CA1             0031*  ; Missing character 61 =
049CA1             0032*  ; Missing character 62 >
049CA1             0033*  BUF_4159: equ 0x103F ; 63 ?
049CA1             0034*  ; Missing character 64 @
049CA1             0035*  BUF_4161: equ 0x1041 ; 65 A
049CA1             0036*  BUF_4162: equ 0x1042 ; 66 B
049CA1             0037*  BUF_4163: equ 0x1043 ; 67 C
049CA1             0038*  BUF_4164: equ 0x1044 ; 68 D
049CA1             0039*  BUF_4165: equ 0x1045 ; 69 E
049CA1             0040*  BUF_4166: equ 0x1046 ; 70 F
049CA1             0041*  BUF_4167: equ 0x1047 ; 71 G
049CA1             0042*  BUF_4168: equ 0x1048 ; 72 H
049CA1             0043*  BUF_4169: equ 0x1049 ; 73 I
049CA1             0044*  BUF_4170: equ 0x104A ; 74 J
049CA1             0045*  BUF_4171: equ 0x104B ; 75 K
049CA1             0046*  BUF_4172: equ 0x104C ; 76 L
049CA1             0047*  BUF_4173: equ 0x104D ; 77 M
049CA1             0048*  BUF_4174: equ 0x104E ; 78 N
049CA1             0049*  BUF_4175: equ 0x104F ; 79 O
049CA1             0050*  BUF_4176: equ 0x1050 ; 80 P
049CA1             0051*  BUF_4177: equ 0x1051 ; 81 Q
049CA1             0052*  BUF_4178: equ 0x1052 ; 82 R
049CA1             0053*  BUF_4179: equ 0x1053 ; 83 S
049CA1             0054*  BUF_4180: equ 0x1054 ; 84 T
049CA1             0055*  BUF_4181: equ 0x1055 ; 85 U
049CA1             0056*  BUF_4182: equ 0x1056 ; 86 V
049CA1             0057*  BUF_4183: equ 0x1057 ; 87 W
049CA1             0058*  BUF_4184: equ 0x1058 ; 88 X
049CA1             0059*  BUF_4185: equ 0x1059 ; 89 Y
049CA1             0060*  BUF_4186: equ 0x105A ; 90 Z
049CA1             0061*  ; Missing character 91 [
049CA1             0062*  ; Missing character 92 \
049CA1             0063*  ; Missing character 93 ]
049CA1             0064*  ; Missing character 94 ^
049CA1             0065*  ; Missing character 95 _
049CA1             0066*  ; Missing character 96 `
049CA1             0067*  ; Missing character 97 a
049CA1             0068*  ; Missing character 98 b
049CA1             0069*  ; Missing character 99 c
049CA1             0070*  ; Missing character 100 d
049CA1             0071*  ; Missing character 101 e
049CA1             0072*  ; Missing character 102 f
049CA1             0073*  ; Missing character 103 g
049CA1             0074*  ; Missing character 104 h
049CA1             0075*  ; Missing character 105 i
049CA1             0076*  ; Missing character 106 j
049CA1             0077*  ; Missing character 107 k
049CA1             0078*  ; Missing character 108 l
049CA1             0079*  ; Missing character 109 m
049CA1             0080*  ; Missing character 110 n
049CA1             0081*  ; Missing character 111 o
049CA1             0082*  ; Missing character 112 p
049CA1             0083*  ; Missing character 113 q
049CA1             0084*  ; Missing character 114 r
049CA1             0085*  ; Missing character 115 s
049CA1             0086*  ; Missing character 116 t
049CA1             0087*  ; Missing character 117 u
049CA1             0088*  ; Missing character 118 v
049CA1             0089*  ; Missing character 119 w
049CA1             0090*  ; Missing character 120 x
049CA1             0091*  ; Missing character 121 y
049CA1             0092*  ; Missing character 122 z
049CA1             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
049CA1             0094*  font_retro_computer:
049CA1 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
049CA7 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
049CAD 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
049CB3 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
049CB9 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
049CBF 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
049CC5 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
049CCB 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
049CD1 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
049CD7 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
049CDD 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
049CE3 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
049CE9 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
049CEF 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
049CF5 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
049CFB 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
049D01 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
049D07 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
049D0D 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
049D13 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
049D19 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
049D1F 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
049D25 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
049D2B 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
049D31 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
049D37 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
049D3D 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
049D43 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
049D49 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
049D4F 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
049D55 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
049D5B 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
049D61 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
049D67 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
049D6D 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
049D73 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
049D79 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
049D7F 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
049D85 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
049D8B 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
049D91 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
049D97 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
049D9D 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
049DA3 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
049DA9 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
049DAF 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
049DB5 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
049DBB 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
049DC1 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
049DC7 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
049DCD 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
049DD3 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
049DD9 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
049DDF 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
049DE5 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
049DEB 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
049DF1 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
049DF7 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
049DFD 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
049E03 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
049E09 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
049E0F 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
049E15 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
049E1B 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
049E21 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
049E27 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
049E2D 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
049E33 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
049E39 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
049E3F 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
049E45 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
049E4B 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
049E51 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
049E57 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
049E5D 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
049E63 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
049E69 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
049E6F 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
049E75 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
049E7B 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
049E81 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
049E87 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
049E8D 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
049E93 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
049E99 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
049E9F 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
049EA5 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
049EAB 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
049EB1 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
049EB7 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
049EBD 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
049EC3             0186*  
049EC3             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
049EC3             0188*  load_font_retro_computer:
049EC3             0189*  
049EC3 21 67 A4 04 0190*  	ld hl,Frc032
049EC7 11 F1 D3 04 0191*  	ld de,filedata
049ECB 01 00 00 01 0192*  	ld bc,65536
049ECF 3E 01       0193*  	ld a,mos_load
049ED1 5B CF       0194*  	RST.LIL 08h
049ED3 21 20 10 00 0195*  	ld hl,BUF_4128
049ED7 01 06 00 00 0196*  	ld bc,6
049EDB 11 01 00 00 0197*  	ld de,1
049EDF DD 21 06 00 0198*  	ld ix,6
       00          
049EE4 CD 40 C9 04 0199*  	call vdu_load_img
049EE8             0200*  
049EE8 21 7A A4 04 0201*  	ld hl,Frc033
049EEC 11 F1 D3 04 0202*  	ld de,filedata
049EF0 01 00 00 01 0203*  	ld bc,65536
049EF4 3E 01       0204*  	ld a,mos_load
049EF6 5B CF       0205*  	RST.LIL 08h
049EF8 21 21 10 00 0206*  	ld hl,BUF_4129
049EFC 01 03 00 00 0207*  	ld bc,3
049F00 11 0E 00 00 0208*  	ld de,14
049F04 DD 21 2A 00 0209*  	ld ix,42
       00          
049F09 CD 40 C9 04 0210*  	call vdu_load_img
049F0D             0211*  ; Missing character 34
049F0D             0212*  ; Missing character 35
049F0D             0213*  ; Missing character 36
049F0D             0214*  ; Missing character 37
049F0D             0215*  ; Missing character 38
049F0D             0216*  ; Missing character 39
049F0D             0217*  ; Missing character 40
049F0D             0218*  ; Missing character 41
049F0D             0219*  ; Missing character 42
049F0D             0220*  ; Missing character 43
049F0D             0221*  ; Missing character 44
049F0D             0222*  ; Missing character 45
049F0D             0223*  ; Missing character 46
049F0D             0224*  ; Missing character 47
049F0D             0225*  
049F0D 21 8D A4 04 0226*  	ld hl,Frc048
049F11 11 F1 D3 04 0227*  	ld de,filedata
049F15 01 00 00 01 0228*  	ld bc,65536
049F19 3E 01       0229*  	ld a,mos_load
049F1B 5B CF       0230*  	RST.LIL 08h
049F1D 21 30 10 00 0231*  	ld hl,BUF_4144
049F21 01 08 00 00 0232*  	ld bc,8
049F25 11 0E 00 00 0233*  	ld de,14
049F29 DD 21 70 00 0234*  	ld ix,112
       00          
049F2E CD 40 C9 04 0235*  	call vdu_load_img
049F32             0236*  
049F32 21 A0 A4 04 0237*  	ld hl,Frc049
049F36 11 F1 D3 04 0238*  	ld de,filedata
049F3A 01 00 00 01 0239*  	ld bc,65536
049F3E 3E 01       0240*  	ld a,mos_load
049F40 5B CF       0241*  	RST.LIL 08h
049F42 21 31 10 00 0242*  	ld hl,BUF_4145
049F46 01 08 00 00 0243*  	ld bc,8
049F4A 11 0E 00 00 0244*  	ld de,14
049F4E DD 21 70 00 0245*  	ld ix,112
       00          
049F53 CD 40 C9 04 0246*  	call vdu_load_img
049F57             0247*  
049F57 21 B3 A4 04 0248*  	ld hl,Frc050
049F5B 11 F1 D3 04 0249*  	ld de,filedata
049F5F 01 00 00 01 0250*  	ld bc,65536
049F63 3E 01       0251*  	ld a,mos_load
049F65 5B CF       0252*  	RST.LIL 08h
049F67 21 32 10 00 0253*  	ld hl,BUF_4146
049F6B 01 08 00 00 0254*  	ld bc,8
049F6F 11 0E 00 00 0255*  	ld de,14
049F73 DD 21 70 00 0256*  	ld ix,112
       00          
049F78 CD 40 C9 04 0257*  	call vdu_load_img
049F7C             0258*  
049F7C 21 C6 A4 04 0259*  	ld hl,Frc051
049F80 11 F1 D3 04 0260*  	ld de,filedata
049F84 01 00 00 01 0261*  	ld bc,65536
049F88 3E 01       0262*  	ld a,mos_load
049F8A 5B CF       0263*  	RST.LIL 08h
049F8C 21 33 10 00 0264*  	ld hl,BUF_4147
049F90 01 08 00 00 0265*  	ld bc,8
049F94 11 0E 00 00 0266*  	ld de,14
049F98 DD 21 70 00 0267*  	ld ix,112
       00          
049F9D CD 40 C9 04 0268*  	call vdu_load_img
049FA1             0269*  
049FA1 21 D9 A4 04 0270*  	ld hl,Frc052
049FA5 11 F1 D3 04 0271*  	ld de,filedata
049FA9 01 00 00 01 0272*  	ld bc,65536
049FAD 3E 01       0273*  	ld a,mos_load
049FAF 5B CF       0274*  	RST.LIL 08h
049FB1 21 34 10 00 0275*  	ld hl,BUF_4148
049FB5 01 08 00 00 0276*  	ld bc,8
049FB9 11 0E 00 00 0277*  	ld de,14
049FBD DD 21 70 00 0278*  	ld ix,112
       00          
049FC2 CD 40 C9 04 0279*  	call vdu_load_img
049FC6             0280*  
049FC6 21 EC A4 04 0281*  	ld hl,Frc053
049FCA 11 F1 D3 04 0282*  	ld de,filedata
049FCE 01 00 00 01 0283*  	ld bc,65536
049FD2 3E 01       0284*  	ld a,mos_load
049FD4 5B CF       0285*  	RST.LIL 08h
049FD6 21 35 10 00 0286*  	ld hl,BUF_4149
049FDA 01 08 00 00 0287*  	ld bc,8
049FDE 11 0E 00 00 0288*  	ld de,14
049FE2 DD 21 70 00 0289*  	ld ix,112
       00          
049FE7 CD 40 C9 04 0290*  	call vdu_load_img
049FEB             0291*  
049FEB 21 FF A4 04 0292*  	ld hl,Frc054
049FEF 11 F1 D3 04 0293*  	ld de,filedata
049FF3 01 00 00 01 0294*  	ld bc,65536
049FF7 3E 01       0295*  	ld a,mos_load
049FF9 5B CF       0296*  	RST.LIL 08h
049FFB 21 36 10 00 0297*  	ld hl,BUF_4150
049FFF 01 08 00 00 0298*  	ld bc,8
04A003 11 0E 00 00 0299*  	ld de,14
04A007 DD 21 70 00 0300*  	ld ix,112
       00          
04A00C CD 40 C9 04 0301*  	call vdu_load_img
04A010             0302*  
04A010 21 12 A5 04 0303*  	ld hl,Frc055
04A014 11 F1 D3 04 0304*  	ld de,filedata
04A018 01 00 00 01 0305*  	ld bc,65536
04A01C 3E 01       0306*  	ld a,mos_load
04A01E 5B CF       0307*  	RST.LIL 08h
04A020 21 37 10 00 0308*  	ld hl,BUF_4151
04A024 01 08 00 00 0309*  	ld bc,8
04A028 11 0E 00 00 0310*  	ld de,14
04A02C DD 21 70 00 0311*  	ld ix,112
       00          
04A031 CD 40 C9 04 0312*  	call vdu_load_img
04A035             0313*  
04A035 21 25 A5 04 0314*  	ld hl,Frc056
04A039 11 F1 D3 04 0315*  	ld de,filedata
04A03D 01 00 00 01 0316*  	ld bc,65536
04A041 3E 01       0317*  	ld a,mos_load
04A043 5B CF       0318*  	RST.LIL 08h
04A045 21 38 10 00 0319*  	ld hl,BUF_4152
04A049 01 08 00 00 0320*  	ld bc,8
04A04D 11 0E 00 00 0321*  	ld de,14
04A051 DD 21 70 00 0322*  	ld ix,112
       00          
04A056 CD 40 C9 04 0323*  	call vdu_load_img
04A05A             0324*  
04A05A 21 38 A5 04 0325*  	ld hl,Frc057
04A05E 11 F1 D3 04 0326*  	ld de,filedata
04A062 01 00 00 01 0327*  	ld bc,65536
04A066 3E 01       0328*  	ld a,mos_load
04A068 5B CF       0329*  	RST.LIL 08h
04A06A 21 39 10 00 0330*  	ld hl,BUF_4153
04A06E 01 08 00 00 0331*  	ld bc,8
04A072 11 0E 00 00 0332*  	ld de,14
04A076 DD 21 70 00 0333*  	ld ix,112
       00          
04A07B CD 40 C9 04 0334*  	call vdu_load_img
04A07F             0335*  ; Missing character 58
04A07F             0336*  ; Missing character 59
04A07F             0337*  ; Missing character 60
04A07F             0338*  ; Missing character 61
04A07F             0339*  ; Missing character 62
04A07F             0340*  
04A07F 21 4B A5 04 0341*  	ld hl,Frc063
04A083 11 F1 D3 04 0342*  	ld de,filedata
04A087 01 00 00 01 0343*  	ld bc,65536
04A08B 3E 01       0344*  	ld a,mos_load
04A08D 5B CF       0345*  	RST.LIL 08h
04A08F 21 3F 10 00 0346*  	ld hl,BUF_4159
04A093 01 08 00 00 0347*  	ld bc,8
04A097 11 0E 00 00 0348*  	ld de,14
04A09B DD 21 70 00 0349*  	ld ix,112
       00          
04A0A0 CD 40 C9 04 0350*  	call vdu_load_img
04A0A4             0351*  ; Missing character 64
04A0A4             0352*  
04A0A4 21 5E A5 04 0353*  	ld hl,Frc065
04A0A8 11 F1 D3 04 0354*  	ld de,filedata
04A0AC 01 00 00 01 0355*  	ld bc,65536
04A0B0 3E 01       0356*  	ld a,mos_load
04A0B2 5B CF       0357*  	RST.LIL 08h
04A0B4 21 41 10 00 0358*  	ld hl,BUF_4161
04A0B8 01 07 00 00 0359*  	ld bc,7
04A0BC 11 0E 00 00 0360*  	ld de,14
04A0C0 DD 21 62 00 0361*  	ld ix,98
       00          
04A0C5 CD 40 C9 04 0362*  	call vdu_load_img
04A0C9             0363*  
04A0C9 21 71 A5 04 0364*  	ld hl,Frc066
04A0CD 11 F1 D3 04 0365*  	ld de,filedata
04A0D1 01 00 00 01 0366*  	ld bc,65536
04A0D5 3E 01       0367*  	ld a,mos_load
04A0D7 5B CF       0368*  	RST.LIL 08h
04A0D9 21 42 10 00 0369*  	ld hl,BUF_4162
04A0DD 01 08 00 00 0370*  	ld bc,8
04A0E1 11 0E 00 00 0371*  	ld de,14
04A0E5 DD 21 70 00 0372*  	ld ix,112
       00          
04A0EA CD 40 C9 04 0373*  	call vdu_load_img
04A0EE             0374*  
04A0EE 21 84 A5 04 0375*  	ld hl,Frc067
04A0F2 11 F1 D3 04 0376*  	ld de,filedata
04A0F6 01 00 00 01 0377*  	ld bc,65536
04A0FA 3E 01       0378*  	ld a,mos_load
04A0FC 5B CF       0379*  	RST.LIL 08h
04A0FE 21 43 10 00 0380*  	ld hl,BUF_4163
04A102 01 07 00 00 0381*  	ld bc,7
04A106 11 0E 00 00 0382*  	ld de,14
04A10A DD 21 62 00 0383*  	ld ix,98
       00          
04A10F CD 40 C9 04 0384*  	call vdu_load_img
04A113             0385*  
04A113 21 97 A5 04 0386*  	ld hl,Frc068
04A117 11 F1 D3 04 0387*  	ld de,filedata
04A11B 01 00 00 01 0388*  	ld bc,65536
04A11F 3E 01       0389*  	ld a,mos_load
04A121 5B CF       0390*  	RST.LIL 08h
04A123 21 44 10 00 0391*  	ld hl,BUF_4164
04A127 01 08 00 00 0392*  	ld bc,8
04A12B 11 0E 00 00 0393*  	ld de,14
04A12F DD 21 70 00 0394*  	ld ix,112
       00          
04A134 CD 40 C9 04 0395*  	call vdu_load_img
04A138             0396*  
04A138 21 AA A5 04 0397*  	ld hl,Frc069
04A13C 11 F1 D3 04 0398*  	ld de,filedata
04A140 01 00 00 01 0399*  	ld bc,65536
04A144 3E 01       0400*  	ld a,mos_load
04A146 5B CF       0401*  	RST.LIL 08h
04A148 21 45 10 00 0402*  	ld hl,BUF_4165
04A14C 01 08 00 00 0403*  	ld bc,8
04A150 11 0E 00 00 0404*  	ld de,14
04A154 DD 21 70 00 0405*  	ld ix,112
       00          
04A159 CD 40 C9 04 0406*  	call vdu_load_img
04A15D             0407*  
04A15D 21 BD A5 04 0408*  	ld hl,Frc070
04A161 11 F1 D3 04 0409*  	ld de,filedata
04A165 01 00 00 01 0410*  	ld bc,65536
04A169 3E 01       0411*  	ld a,mos_load
04A16B 5B CF       0412*  	RST.LIL 08h
04A16D 21 46 10 00 0413*  	ld hl,BUF_4166
04A171 01 07 00 00 0414*  	ld bc,7
04A175 11 0E 00 00 0415*  	ld de,14
04A179 DD 21 62 00 0416*  	ld ix,98
       00          
04A17E CD 40 C9 04 0417*  	call vdu_load_img
04A182             0418*  
04A182 21 D0 A5 04 0419*  	ld hl,Frc071
04A186 11 F1 D3 04 0420*  	ld de,filedata
04A18A 01 00 00 01 0421*  	ld bc,65536
04A18E 3E 01       0422*  	ld a,mos_load
04A190 5B CF       0423*  	RST.LIL 08h
04A192 21 47 10 00 0424*  	ld hl,BUF_4167
04A196 01 08 00 00 0425*  	ld bc,8
04A19A 11 0E 00 00 0426*  	ld de,14
04A19E DD 21 70 00 0427*  	ld ix,112
       00          
04A1A3 CD 40 C9 04 0428*  	call vdu_load_img
04A1A7             0429*  
04A1A7 21 E3 A5 04 0430*  	ld hl,Frc072
04A1AB 11 F1 D3 04 0431*  	ld de,filedata
04A1AF 01 00 00 01 0432*  	ld bc,65536
04A1B3 3E 01       0433*  	ld a,mos_load
04A1B5 5B CF       0434*  	RST.LIL 08h
04A1B7 21 48 10 00 0435*  	ld hl,BUF_4168
04A1BB 01 07 00 00 0436*  	ld bc,7
04A1BF 11 0E 00 00 0437*  	ld de,14
04A1C3 DD 21 62 00 0438*  	ld ix,98
       00          
04A1C8 CD 40 C9 04 0439*  	call vdu_load_img
04A1CC             0440*  
04A1CC 21 F6 A5 04 0441*  	ld hl,Frc073
04A1D0 11 F1 D3 04 0442*  	ld de,filedata
04A1D4 01 00 00 01 0443*  	ld bc,65536
04A1D8 3E 01       0444*  	ld a,mos_load
04A1DA 5B CF       0445*  	RST.LIL 08h
04A1DC 21 49 10 00 0446*  	ld hl,BUF_4169
04A1E0 01 07 00 00 0447*  	ld bc,7
04A1E4 11 0E 00 00 0448*  	ld de,14
04A1E8 DD 21 62 00 0449*  	ld ix,98
       00          
04A1ED CD 40 C9 04 0450*  	call vdu_load_img
04A1F1             0451*  
04A1F1 21 09 A6 04 0452*  	ld hl,Frc074
04A1F5 11 F1 D3 04 0453*  	ld de,filedata
04A1F9 01 00 00 01 0454*  	ld bc,65536
04A1FD 3E 01       0455*  	ld a,mos_load
04A1FF 5B CF       0456*  	RST.LIL 08h
04A201 21 4A 10 00 0457*  	ld hl,BUF_4170
04A205 01 08 00 00 0458*  	ld bc,8
04A209 11 0E 00 00 0459*  	ld de,14
04A20D DD 21 70 00 0460*  	ld ix,112
       00          
04A212 CD 40 C9 04 0461*  	call vdu_load_img
04A216             0462*  
04A216 21 1C A6 04 0463*  	ld hl,Frc075
04A21A 11 F1 D3 04 0464*  	ld de,filedata
04A21E 01 00 00 01 0465*  	ld bc,65536
04A222 3E 01       0466*  	ld a,mos_load
04A224 5B CF       0467*  	RST.LIL 08h
04A226 21 4B 10 00 0468*  	ld hl,BUF_4171
04A22A 01 07 00 00 0469*  	ld bc,7
04A22E 11 0E 00 00 0470*  	ld de,14
04A232 DD 21 62 00 0471*  	ld ix,98
       00          
04A237 CD 40 C9 04 0472*  	call vdu_load_img
04A23B             0473*  
04A23B 21 2F A6 04 0474*  	ld hl,Frc076
04A23F 11 F1 D3 04 0475*  	ld de,filedata
04A243 01 00 00 01 0476*  	ld bc,65536
04A247 3E 01       0477*  	ld a,mos_load
04A249 5B CF       0478*  	RST.LIL 08h
04A24B 21 4C 10 00 0479*  	ld hl,BUF_4172
04A24F 01 08 00 00 0480*  	ld bc,8
04A253 11 0E 00 00 0481*  	ld de,14
04A257 DD 21 70 00 0482*  	ld ix,112
       00          
04A25C CD 40 C9 04 0483*  	call vdu_load_img
04A260             0484*  
04A260 21 42 A6 04 0485*  	ld hl,Frc077
04A264 11 F1 D3 04 0486*  	ld de,filedata
04A268 01 00 00 01 0487*  	ld bc,65536
04A26C 3E 01       0488*  	ld a,mos_load
04A26E 5B CF       0489*  	RST.LIL 08h
04A270 21 4D 10 00 0490*  	ld hl,BUF_4173
04A274 01 09 00 00 0491*  	ld bc,9
04A278 11 0E 00 00 0492*  	ld de,14
04A27C DD 21 7E 00 0493*  	ld ix,126
       00          
04A281 CD 40 C9 04 0494*  	call vdu_load_img
04A285             0495*  
04A285 21 55 A6 04 0496*  	ld hl,Frc078
04A289 11 F1 D3 04 0497*  	ld de,filedata
04A28D 01 00 00 01 0498*  	ld bc,65536
04A291 3E 01       0499*  	ld a,mos_load
04A293 5B CF       0500*  	RST.LIL 08h
04A295 21 4E 10 00 0501*  	ld hl,BUF_4174
04A299 01 07 00 00 0502*  	ld bc,7
04A29D 11 0E 00 00 0503*  	ld de,14
04A2A1 DD 21 62 00 0504*  	ld ix,98
       00          
04A2A6 CD 40 C9 04 0505*  	call vdu_load_img
04A2AA             0506*  
04A2AA 21 68 A6 04 0507*  	ld hl,Frc079
04A2AE 11 F1 D3 04 0508*  	ld de,filedata
04A2B2 01 00 00 01 0509*  	ld bc,65536
04A2B6 3E 01       0510*  	ld a,mos_load
04A2B8 5B CF       0511*  	RST.LIL 08h
04A2BA 21 4F 10 00 0512*  	ld hl,BUF_4175
04A2BE 01 08 00 00 0513*  	ld bc,8
04A2C2 11 0E 00 00 0514*  	ld de,14
04A2C6 DD 21 70 00 0515*  	ld ix,112
       00          
04A2CB CD 40 C9 04 0516*  	call vdu_load_img
04A2CF             0517*  
04A2CF 21 7B A6 04 0518*  	ld hl,Frc080
04A2D3 11 F1 D3 04 0519*  	ld de,filedata
04A2D7 01 00 00 01 0520*  	ld bc,65536
04A2DB 3E 01       0521*  	ld a,mos_load
04A2DD 5B CF       0522*  	RST.LIL 08h
04A2DF 21 50 10 00 0523*  	ld hl,BUF_4176
04A2E3 01 07 00 00 0524*  	ld bc,7
04A2E7 11 0E 00 00 0525*  	ld de,14
04A2EB DD 21 62 00 0526*  	ld ix,98
       00          
04A2F0 CD 40 C9 04 0527*  	call vdu_load_img
04A2F4             0528*  
04A2F4 21 8E A6 04 0529*  	ld hl,Frc081
04A2F8 11 F1 D3 04 0530*  	ld de,filedata
04A2FC 01 00 00 01 0531*  	ld bc,65536
04A300 3E 01       0532*  	ld a,mos_load
04A302 5B CF       0533*  	RST.LIL 08h
04A304 21 51 10 00 0534*  	ld hl,BUF_4177
04A308 01 08 00 00 0535*  	ld bc,8
04A30C 11 0F 00 00 0536*  	ld de,15
04A310 DD 21 78 00 0537*  	ld ix,120
       00          
04A315 CD 40 C9 04 0538*  	call vdu_load_img
04A319             0539*  
04A319 21 A1 A6 04 0540*  	ld hl,Frc082
04A31D 11 F1 D3 04 0541*  	ld de,filedata
04A321 01 00 00 01 0542*  	ld bc,65536
04A325 3E 01       0543*  	ld a,mos_load
04A327 5B CF       0544*  	RST.LIL 08h
04A329 21 52 10 00 0545*  	ld hl,BUF_4178
04A32D 01 08 00 00 0546*  	ld bc,8
04A331 11 0E 00 00 0547*  	ld de,14
04A335 DD 21 70 00 0548*  	ld ix,112
       00          
04A33A CD 40 C9 04 0549*  	call vdu_load_img
04A33E             0550*  
04A33E 21 B4 A6 04 0551*  	ld hl,Frc083
04A342 11 F1 D3 04 0552*  	ld de,filedata
04A346 01 00 00 01 0553*  	ld bc,65536
04A34A 3E 01       0554*  	ld a,mos_load
04A34C 5B CF       0555*  	RST.LIL 08h
04A34E 21 53 10 00 0556*  	ld hl,BUF_4179
04A352 01 08 00 00 0557*  	ld bc,8
04A356 11 0E 00 00 0558*  	ld de,14
04A35A DD 21 70 00 0559*  	ld ix,112
       00          
04A35F CD 40 C9 04 0560*  	call vdu_load_img
04A363             0561*  
04A363 21 C7 A6 04 0562*  	ld hl,Frc084
04A367 11 F1 D3 04 0563*  	ld de,filedata
04A36B 01 00 00 01 0564*  	ld bc,65536
04A36F 3E 01       0565*  	ld a,mos_load
04A371 5B CF       0566*  	RST.LIL 08h
04A373 21 54 10 00 0567*  	ld hl,BUF_4180
04A377 01 07 00 00 0568*  	ld bc,7
04A37B 11 0E 00 00 0569*  	ld de,14
04A37F DD 21 62 00 0570*  	ld ix,98
       00          
04A384 CD 40 C9 04 0571*  	call vdu_load_img
04A388             0572*  
04A388 21 DA A6 04 0573*  	ld hl,Frc085
04A38C 11 F1 D3 04 0574*  	ld de,filedata
04A390 01 00 00 01 0575*  	ld bc,65536
04A394 3E 01       0576*  	ld a,mos_load
04A396 5B CF       0577*  	RST.LIL 08h
04A398 21 55 10 00 0578*  	ld hl,BUF_4181
04A39C 01 08 00 00 0579*  	ld bc,8
04A3A0 11 0E 00 00 0580*  	ld de,14
04A3A4 DD 21 70 00 0581*  	ld ix,112
       00          
04A3A9 CD 40 C9 04 0582*  	call vdu_load_img
04A3AD             0583*  
04A3AD 21 ED A6 04 0584*  	ld hl,Frc086
04A3B1 11 F1 D3 04 0585*  	ld de,filedata
04A3B5 01 00 00 01 0586*  	ld bc,65536
04A3B9 3E 01       0587*  	ld a,mos_load
04A3BB 5B CF       0588*  	RST.LIL 08h
04A3BD 21 56 10 00 0589*  	ld hl,BUF_4182
04A3C1 01 07 00 00 0590*  	ld bc,7
04A3C5 11 0E 00 00 0591*  	ld de,14
04A3C9 DD 21 62 00 0592*  	ld ix,98
       00          
04A3CE CD 40 C9 04 0593*  	call vdu_load_img
04A3D2             0594*  
04A3D2 21 00 A7 04 0595*  	ld hl,Frc087
04A3D6 11 F1 D3 04 0596*  	ld de,filedata
04A3DA 01 00 00 01 0597*  	ld bc,65536
04A3DE 3E 01       0598*  	ld a,mos_load
04A3E0 5B CF       0599*  	RST.LIL 08h
04A3E2 21 57 10 00 0600*  	ld hl,BUF_4183
04A3E6 01 0B 00 00 0601*  	ld bc,11
04A3EA 11 0E 00 00 0602*  	ld de,14
04A3EE DD 21 9A 00 0603*  	ld ix,154
       00          
04A3F3 CD 40 C9 04 0604*  	call vdu_load_img
04A3F7             0605*  
04A3F7 21 13 A7 04 0606*  	ld hl,Frc088
04A3FB 11 F1 D3 04 0607*  	ld de,filedata
04A3FF 01 00 00 01 0608*  	ld bc,65536
04A403 3E 01       0609*  	ld a,mos_load
04A405 5B CF       0610*  	RST.LIL 08h
04A407 21 58 10 00 0611*  	ld hl,BUF_4184
04A40B 01 07 00 00 0612*  	ld bc,7
04A40F 11 0E 00 00 0613*  	ld de,14
04A413 DD 21 62 00 0614*  	ld ix,98
       00          
04A418 CD 40 C9 04 0615*  	call vdu_load_img
04A41C             0616*  
04A41C 21 26 A7 04 0617*  	ld hl,Frc089
04A420 11 F1 D3 04 0618*  	ld de,filedata
04A424 01 00 00 01 0619*  	ld bc,65536
04A428 3E 01       0620*  	ld a,mos_load
04A42A 5B CF       0621*  	RST.LIL 08h
04A42C 21 59 10 00 0622*  	ld hl,BUF_4185
04A430 01 08 00 00 0623*  	ld bc,8
04A434 11 0E 00 00 0624*  	ld de,14
04A438 DD 21 70 00 0625*  	ld ix,112
       00          
04A43D CD 40 C9 04 0626*  	call vdu_load_img
04A441             0627*  
04A441 21 39 A7 04 0628*  	ld hl,Frc090
04A445 11 F1 D3 04 0629*  	ld de,filedata
04A449 01 00 00 01 0630*  	ld bc,65536
04A44D 3E 01       0631*  	ld a,mos_load
04A44F 5B CF       0632*  	RST.LIL 08h
04A451 21 5A 10 00 0633*  	ld hl,BUF_4186
04A455 01 07 00 00 0634*  	ld bc,7
04A459 11 0E 00 00 0635*  	ld de,14
04A45D DD 21 62 00 0636*  	ld ix,98
       00          
04A462 CD 40 C9 04 0637*  	call vdu_load_img
04A466             0638*  ; Missing character 91
04A466             0639*  ; Missing character 92
04A466             0640*  ; Missing character 93
04A466             0641*  ; Missing character 94
04A466             0642*  ; Missing character 95
04A466             0643*  ; Missing character 96
04A466             0644*  ; Missing character 97
04A466             0645*  ; Missing character 98
04A466             0646*  ; Missing character 99
04A466             0647*  ; Missing character 100
04A466             0648*  ; Missing character 101
04A466             0649*  ; Missing character 102
04A466             0650*  ; Missing character 103
04A466             0651*  ; Missing character 104
04A466             0652*  ; Missing character 105
04A466             0653*  ; Missing character 106
04A466             0654*  ; Missing character 107
04A466             0655*  ; Missing character 108
04A466             0656*  ; Missing character 109
04A466             0657*  ; Missing character 110
04A466             0658*  ; Missing character 111
04A466             0659*  ; Missing character 112
04A466             0660*  ; Missing character 113
04A466             0661*  ; Missing character 114
04A466             0662*  ; Missing character 115
04A466             0663*  ; Missing character 116
04A466             0664*  ; Missing character 117
04A466             0665*  ; Missing character 118
04A466             0666*  ; Missing character 119
04A466             0667*  ; Missing character 120
04A466             0668*  ; Missing character 121
04A466             0669*  ; Missing character 122
04A466             0670*  
04A466 C9          0671*  	ret
04A467             0672*  
04A467 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
04A47A 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
04A48D 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
04A4A0 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
04A4B3 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
04A4C6 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
04A4D9 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
04A4EC 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
04A4FF 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
04A512 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
04A525 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
04A538 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
04A54B 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
04A55E 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
04A571 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
04A584 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
04A597 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
04A5AA 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
04A5BD 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
04A5D0 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
04A5E3 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
04A5F6 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
04A609 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
04A61C 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
04A62F 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
04A642 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
04A655 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
04A668 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
04A67B 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
04A68E 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
04A6A1 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
04A6B4 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
04A6C7 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
04A6DA 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
04A6ED 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
04A700 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
04A713 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
04A726 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
04A739 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
04A74C             0020   	include "src/asm/ui.asm"
04A74C             0001*  ; ui routines will go here
04A74C             0021   	include "src/asm/ui_img.asm"
04A74C             0001*  ; Bitmap indices:
04A74C             0002*  BUF_UI_BJ_025: equ 0x2000
04A74C             0003*  BUF_UI_BJ_050: equ 0x2001
04A74C             0004*  BUF_UI_BJ_075: equ 0x2002
04A74C             0005*  BUF_UI_BJ_100: equ 0x2003
04A74C             0006*  BUF_UI_BJ_120_120: equ 0x2004
04A74C             0007*  BUF_UI_LOWER_PANEL: equ 0x2005
04A74C             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2006
04A74C             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2007
04A74C             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2008
04A74C             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2009
04A74C             0012*  BUF_UI_SPLASH: equ 0x200A
04A74C             0013*  
04A74C             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
04A74C             0015*  load_ui_images:
04A74C             0016*  
04A74C 21 10 A9 04 0017*  	ld hl,F_UI_bj_025
04A750 11 F1 D3 04 0018*  	ld de,filedata
04A754 01 00 00 01 0019*  	ld bc,65536
04A758 3E 01       0020*  	ld a,mos_load
04A75A 5B CF       0021*  	RST.LIL 08h
04A75C 21 00 20 00 0022*  	ld hl,BUF_UI_BJ_025
04A760 01 20 00 00 0023*  	ld bc,32
04A764 11 20 00 00 0024*  	ld de,32
04A768 DD 21 00 04 0025*  	ld ix,1024
       00          
04A76D CD 40 C9 04 0026*  	call vdu_load_img
04A771 3E 2E       0027*  	LD A, '.'
04A773 5B D7       0028*  	RST.LIL 10h
04A775             0029*  
04A775 21 20 A9 04 0030*  	ld hl,F_UI_bj_050
04A779 11 F1 D3 04 0031*  	ld de,filedata
04A77D 01 00 00 01 0032*  	ld bc,65536
04A781 3E 01       0033*  	ld a,mos_load
04A783 5B CF       0034*  	RST.LIL 08h
04A785 21 01 20 00 0035*  	ld hl,BUF_UI_BJ_050
04A789 01 20 00 00 0036*  	ld bc,32
04A78D 11 20 00 00 0037*  	ld de,32
04A791 DD 21 00 04 0038*  	ld ix,1024
       00          
04A796 CD 40 C9 04 0039*  	call vdu_load_img
04A79A 3E 2E       0040*  	LD A, '.'
04A79C 5B D7       0041*  	RST.LIL 10h
04A79E             0042*  
04A79E 21 30 A9 04 0043*  	ld hl,F_UI_bj_075
04A7A2 11 F1 D3 04 0044*  	ld de,filedata
04A7A6 01 00 00 01 0045*  	ld bc,65536
04A7AA 3E 01       0046*  	ld a,mos_load
04A7AC 5B CF       0047*  	RST.LIL 08h
04A7AE 21 02 20 00 0048*  	ld hl,BUF_UI_BJ_075
04A7B2 01 20 00 00 0049*  	ld bc,32
04A7B6 11 20 00 00 0050*  	ld de,32
04A7BA DD 21 00 04 0051*  	ld ix,1024
       00          
04A7BF CD 40 C9 04 0052*  	call vdu_load_img
04A7C3 3E 2E       0053*  	LD A, '.'
04A7C5 5B D7       0054*  	RST.LIL 10h
04A7C7             0055*  
04A7C7 21 40 A9 04 0056*  	ld hl,F_UI_bj_100
04A7CB 11 F1 D3 04 0057*  	ld de,filedata
04A7CF 01 00 00 01 0058*  	ld bc,65536
04A7D3 3E 01       0059*  	ld a,mos_load
04A7D5 5B CF       0060*  	RST.LIL 08h
04A7D7 21 03 20 00 0061*  	ld hl,BUF_UI_BJ_100
04A7DB 01 20 00 00 0062*  	ld bc,32
04A7DF 11 20 00 00 0063*  	ld de,32
04A7E3 DD 21 00 04 0064*  	ld ix,1024
       00          
04A7E8 CD 40 C9 04 0065*  	call vdu_load_img
04A7EC 3E 2E       0066*  	LD A, '.'
04A7EE 5B D7       0067*  	RST.LIL 10h
04A7F0             0068*  
04A7F0 21 50 A9 04 0069*  	ld hl,F_UI_bj_120_120
04A7F4 11 F1 D3 04 0070*  	ld de,filedata
04A7F8 01 00 00 01 0071*  	ld bc,65536
04A7FC 3E 01       0072*  	ld a,mos_load
04A7FE 5B CF       0073*  	RST.LIL 08h
04A800 21 04 20 00 0074*  	ld hl,BUF_UI_BJ_120_120
04A804 01 78 00 00 0075*  	ld bc,120
04A808 11 78 00 00 0076*  	ld de,120
04A80C DD 21 40 38 0077*  	ld ix,14400
       00          
04A811 CD 40 C9 04 0078*  	call vdu_load_img
04A815 3E 2E       0079*  	LD A, '.'
04A817 5B D7       0080*  	RST.LIL 10h
04A819             0081*  
04A819 21 64 A9 04 0082*  	ld hl,F_UI_lower_panel
04A81D 11 F1 D3 04 0083*  	ld de,filedata
04A821 01 00 00 01 0084*  	ld bc,65536
04A825 3E 01       0085*  	ld a,mos_load
04A827 5B CF       0086*  	RST.LIL 08h
04A829 21 05 20 00 0087*  	ld hl,BUF_UI_LOWER_PANEL
04A82D 01 40 01 00 0088*  	ld bc,320
04A831 11 50 00 00 0089*  	ld de,80
04A835 DD 21 00 64 0090*  	ld ix,25600
       00          
04A83A CD 40 C9 04 0091*  	call vdu_load_img
04A83E 3E 2E       0092*  	LD A, '.'
04A840 5B D7       0093*  	RST.LIL 10h
04A842             0094*  
04A842 21 79 A9 04 0095*  	ld hl,F_UI_lower_panel_gatling
04A846 11 F1 D3 04 0096*  	ld de,filedata
04A84A 01 00 00 01 0097*  	ld bc,65536
04A84E 3E 01       0098*  	ld a,mos_load
04A850 5B CF       0099*  	RST.LIL 08h
04A852 21 06 20 00 0100*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
04A856 01 28 00 00 0101*  	ld bc,40
04A85A 11 14 00 00 0102*  	ld de,20
04A85E DD 21 20 03 0103*  	ld ix,800
       00          
04A863 CD 40 C9 04 0104*  	call vdu_load_img
04A867 3E 2E       0105*  	LD A, '.'
04A869 5B D7       0106*  	RST.LIL 10h
04A86B             0107*  
04A86B 21 96 A9 04 0108*  	ld hl,F_UI_lower_panel_knife
04A86F 11 F1 D3 04 0109*  	ld de,filedata
04A873 01 00 00 01 0110*  	ld bc,65536
04A877 3E 01       0111*  	ld a,mos_load
04A879 5B CF       0112*  	RST.LIL 08h
04A87B 21 07 20 00 0113*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
04A87F 01 28 00 00 0114*  	ld bc,40
04A883 11 14 00 00 0115*  	ld de,20
04A887 DD 21 20 03 0116*  	ld ix,800
       00          
04A88C CD 40 C9 04 0117*  	call vdu_load_img
04A890 3E 2E       0118*  	LD A, '.'
04A892 5B D7       0119*  	RST.LIL 10h
04A894             0120*  
04A894 21 B1 A9 04 0121*  	ld hl,F_UI_lower_panel_machine_gun
04A898 11 F1 D3 04 0122*  	ld de,filedata
04A89C 01 00 00 01 0123*  	ld bc,65536
04A8A0 3E 01       0124*  	ld a,mos_load
04A8A2 5B CF       0125*  	RST.LIL 08h
04A8A4 21 08 20 00 0126*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04A8A8 01 28 00 00 0127*  	ld bc,40
04A8AC 11 14 00 00 0128*  	ld de,20
04A8B0 DD 21 20 03 0129*  	ld ix,800
       00          
04A8B5 CD 40 C9 04 0130*  	call vdu_load_img
04A8B9 3E 2E       0131*  	LD A, '.'
04A8BB 5B D7       0132*  	RST.LIL 10h
04A8BD             0133*  
04A8BD 21 D2 A9 04 0134*  	ld hl,F_UI_lower_panel_pistol
04A8C1 11 F1 D3 04 0135*  	ld de,filedata
04A8C5 01 00 00 01 0136*  	ld bc,65536
04A8C9 3E 01       0137*  	ld a,mos_load
04A8CB 5B CF       0138*  	RST.LIL 08h
04A8CD 21 09 20 00 0139*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
04A8D1 01 28 00 00 0140*  	ld bc,40
04A8D5 11 14 00 00 0141*  	ld de,20
04A8D9 DD 21 20 03 0142*  	ld ix,800
       00          
04A8DE CD 40 C9 04 0143*  	call vdu_load_img
04A8E2 3E 2E       0144*  	LD A, '.'
04A8E4 5B D7       0145*  	RST.LIL 10h
04A8E6             0146*  
04A8E6 21 EE A9 04 0147*  	ld hl,F_UI_splash
04A8EA 11 F1 D3 04 0148*  	ld de,filedata
04A8EE 01 00 00 01 0149*  	ld bc,65536
04A8F2 3E 01       0150*  	ld a,mos_load
04A8F4 5B CF       0151*  	RST.LIL 08h
04A8F6 21 0A 20 00 0152*  	ld hl,BUF_UI_SPLASH
04A8FA 01 40 01 00 0153*  	ld bc,320
04A8FE 11 A0 00 00 0154*  	ld de,160
04A902 DD 21 00 C8 0155*  	ld ix,51200
       00          
04A907 CD 40 C9 04 0156*  	call vdu_load_img
04A90B 3E 2E       0157*  	LD A, '.'
04A90D 5B D7       0158*  	RST.LIL 10h
04A90F             0159*  
04A90F C9          0160*  	ret
04A910             0161*  
04A910 75 69 2F 62 0162*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04A920 75 69 2F 62 0163*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
04A930 75 69 2F 62 0164*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
04A940 75 69 2F 62 0165*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
04A950 75 69 2F 62 0166*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
04A964 75 69 2F 6C 0167*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
04A979 75 69 2F 6C 0168*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
04A996 75 69 2F 6C 0169*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
04A9B1 75 69 2F 6C 0170*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
04A9D2 75 69 2F 6C 0171*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
04A9EE 75 69 2F 73 0172*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
04A9FE             0022   	include "src/asm/ui_img_bj.asm"
04A9FE             0001*  ; Bitmap indices:
04A9FE             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
04A9FE             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
04A9FE             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
04A9FE             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
04A9FE             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
04A9FE             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
04A9FE             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
04A9FE             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
04A9FE             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
04A9FE             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
04A9FE             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
04A9FE             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
04A9FE             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
04A9FE             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
04A9FE             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
04A9FE             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
04A9FE             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
04A9FE             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
04A9FE             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
04A9FE             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
04A9FE             0022*  
04A9FE             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
04A9FE             0024*  load_ui_images_bj:
04A9FE             0025*  
04A9FE 21 33 AD 04 0026*  	ld hl,F_UI_bj_gatling_00
04AA02 11 F1 D3 04 0027*  	ld de,filedata
04AA06 01 00 00 01 0028*  	ld bc,65536
04AA0A 3E 01       0029*  	ld a,mos_load
04AA0C 5B CF       0030*  	RST.LIL 08h
04AA0E 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
04AA12 01 40 00 00 0032*  	ld bc,64
04AA16 11 40 00 00 0033*  	ld de,64
04AA1A DD 21 00 10 0034*  	ld ix,4096
       00          
04AA1F CD 40 C9 04 0035*  	call vdu_load_img
04AA23 3E 2E       0036*  	LD A, '.'
04AA25 5B D7       0037*  	RST.LIL 10h
04AA27             0038*  
04AA27 21 4D AD 04 0039*  	ld hl,F_UI_bj_gatling_01
04AA2B 11 F1 D3 04 0040*  	ld de,filedata
04AA2F 01 00 00 01 0041*  	ld bc,65536
04AA33 3E 01       0042*  	ld a,mos_load
04AA35 5B CF       0043*  	RST.LIL 08h
04AA37 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
04AA3B 01 40 00 00 0045*  	ld bc,64
04AA3F 11 40 00 00 0046*  	ld de,64
04AA43 DD 21 00 10 0047*  	ld ix,4096
       00          
04AA48 CD 40 C9 04 0048*  	call vdu_load_img
04AA4C 3E 2E       0049*  	LD A, '.'
04AA4E 5B D7       0050*  	RST.LIL 10h
04AA50             0051*  
04AA50 21 67 AD 04 0052*  	ld hl,F_UI_bj_gatling_02
04AA54 11 F1 D3 04 0053*  	ld de,filedata
04AA58 01 00 00 01 0054*  	ld bc,65536
04AA5C 3E 01       0055*  	ld a,mos_load
04AA5E 5B CF       0056*  	RST.LIL 08h
04AA60 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
04AA64 01 40 00 00 0058*  	ld bc,64
04AA68 11 40 00 00 0059*  	ld de,64
04AA6C DD 21 00 10 0060*  	ld ix,4096
       00          
04AA71 CD 40 C9 04 0061*  	call vdu_load_img
04AA75 3E 2E       0062*  	LD A, '.'
04AA77 5B D7       0063*  	RST.LIL 10h
04AA79             0064*  
04AA79 21 81 AD 04 0065*  	ld hl,F_UI_bj_gatling_03
04AA7D 11 F1 D3 04 0066*  	ld de,filedata
04AA81 01 00 00 01 0067*  	ld bc,65536
04AA85 3E 01       0068*  	ld a,mos_load
04AA87 5B CF       0069*  	RST.LIL 08h
04AA89 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
04AA8D 01 40 00 00 0071*  	ld bc,64
04AA91 11 40 00 00 0072*  	ld de,64
04AA95 DD 21 00 10 0073*  	ld ix,4096
       00          
04AA9A CD 40 C9 04 0074*  	call vdu_load_img
04AA9E 3E 2E       0075*  	LD A, '.'
04AAA0 5B D7       0076*  	RST.LIL 10h
04AAA2             0077*  
04AAA2 21 9B AD 04 0078*  	ld hl,F_UI_bj_gatling_04
04AAA6 11 F1 D3 04 0079*  	ld de,filedata
04AAAA 01 00 00 01 0080*  	ld bc,65536
04AAAE 3E 01       0081*  	ld a,mos_load
04AAB0 5B CF       0082*  	RST.LIL 08h
04AAB2 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
04AAB6 01 40 00 00 0084*  	ld bc,64
04AABA 11 40 00 00 0085*  	ld de,64
04AABE DD 21 00 10 0086*  	ld ix,4096
       00          
04AAC3 CD 40 C9 04 0087*  	call vdu_load_img
04AAC7 3E 2E       0088*  	LD A, '.'
04AAC9 5B D7       0089*  	RST.LIL 10h
04AACB             0090*  
04AACB 21 B5 AD 04 0091*  	ld hl,F_UI_bj_knife_00
04AACF 11 F1 D3 04 0092*  	ld de,filedata
04AAD3 01 00 00 01 0093*  	ld bc,65536
04AAD7 3E 01       0094*  	ld a,mos_load
04AAD9 5B CF       0095*  	RST.LIL 08h
04AADB 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
04AADF 01 40 00 00 0097*  	ld bc,64
04AAE3 11 40 00 00 0098*  	ld de,64
04AAE7 DD 21 00 10 0099*  	ld ix,4096
       00          
04AAEC CD 40 C9 04 0100*  	call vdu_load_img
04AAF0 3E 2E       0101*  	LD A, '.'
04AAF2 5B D7       0102*  	RST.LIL 10h
04AAF4             0103*  
04AAF4 21 CD AD 04 0104*  	ld hl,F_UI_bj_knife_01
04AAF8 11 F1 D3 04 0105*  	ld de,filedata
04AAFC 01 00 00 01 0106*  	ld bc,65536
04AB00 3E 01       0107*  	ld a,mos_load
04AB02 5B CF       0108*  	RST.LIL 08h
04AB04 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
04AB08 01 40 00 00 0110*  	ld bc,64
04AB0C 11 40 00 00 0111*  	ld de,64
04AB10 DD 21 00 10 0112*  	ld ix,4096
       00          
04AB15 CD 40 C9 04 0113*  	call vdu_load_img
04AB19 3E 2E       0114*  	LD A, '.'
04AB1B 5B D7       0115*  	RST.LIL 10h
04AB1D             0116*  
04AB1D 21 E5 AD 04 0117*  	ld hl,F_UI_bj_knife_02
04AB21 11 F1 D3 04 0118*  	ld de,filedata
04AB25 01 00 00 01 0119*  	ld bc,65536
04AB29 3E 01       0120*  	ld a,mos_load
04AB2B 5B CF       0121*  	RST.LIL 08h
04AB2D 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
04AB31 01 40 00 00 0123*  	ld bc,64
04AB35 11 40 00 00 0124*  	ld de,64
04AB39 DD 21 00 10 0125*  	ld ix,4096
       00          
04AB3E CD 40 C9 04 0126*  	call vdu_load_img
04AB42 3E 2E       0127*  	LD A, '.'
04AB44 5B D7       0128*  	RST.LIL 10h
04AB46             0129*  
04AB46 21 FD AD 04 0130*  	ld hl,F_UI_bj_knife_03
04AB4A 11 F1 D3 04 0131*  	ld de,filedata
04AB4E 01 00 00 01 0132*  	ld bc,65536
04AB52 3E 01       0133*  	ld a,mos_load
04AB54 5B CF       0134*  	RST.LIL 08h
04AB56 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
04AB5A 01 40 00 00 0136*  	ld bc,64
04AB5E 11 40 00 00 0137*  	ld de,64
04AB62 DD 21 00 10 0138*  	ld ix,4096
       00          
04AB67 CD 40 C9 04 0139*  	call vdu_load_img
04AB6B 3E 2E       0140*  	LD A, '.'
04AB6D 5B D7       0141*  	RST.LIL 10h
04AB6F             0142*  
04AB6F 21 15 AE 04 0143*  	ld hl,F_UI_bj_knife_04
04AB73 11 F1 D3 04 0144*  	ld de,filedata
04AB77 01 00 00 01 0145*  	ld bc,65536
04AB7B 3E 01       0146*  	ld a,mos_load
04AB7D 5B CF       0147*  	RST.LIL 08h
04AB7F 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
04AB83 01 40 00 00 0149*  	ld bc,64
04AB87 11 40 00 00 0150*  	ld de,64
04AB8B DD 21 00 10 0151*  	ld ix,4096
       00          
04AB90 CD 40 C9 04 0152*  	call vdu_load_img
04AB94 3E 2E       0153*  	LD A, '.'
04AB96 5B D7       0154*  	RST.LIL 10h
04AB98             0155*  
04AB98 21 2D AE 04 0156*  	ld hl,F_UI_bj_machine_gun_00
04AB9C 11 F1 D3 04 0157*  	ld de,filedata
04ABA0 01 00 00 01 0158*  	ld bc,65536
04ABA4 3E 01       0159*  	ld a,mos_load
04ABA6 5B CF       0160*  	RST.LIL 08h
04ABA8 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
04ABAC 01 40 00 00 0162*  	ld bc,64
04ABB0 11 40 00 00 0163*  	ld de,64
04ABB4 DD 21 00 10 0164*  	ld ix,4096
       00          
04ABB9 CD 40 C9 04 0165*  	call vdu_load_img
04ABBD 3E 2E       0166*  	LD A, '.'
04ABBF 5B D7       0167*  	RST.LIL 10h
04ABC1             0168*  
04ABC1 21 4B AE 04 0169*  	ld hl,F_UI_bj_machine_gun_01
04ABC5 11 F1 D3 04 0170*  	ld de,filedata
04ABC9 01 00 00 01 0171*  	ld bc,65536
04ABCD 3E 01       0172*  	ld a,mos_load
04ABCF 5B CF       0173*  	RST.LIL 08h
04ABD1 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
04ABD5 01 40 00 00 0175*  	ld bc,64
04ABD9 11 40 00 00 0176*  	ld de,64
04ABDD DD 21 00 10 0177*  	ld ix,4096
       00          
04ABE2 CD 40 C9 04 0178*  	call vdu_load_img
04ABE6 3E 2E       0179*  	LD A, '.'
04ABE8 5B D7       0180*  	RST.LIL 10h
04ABEA             0181*  
04ABEA 21 69 AE 04 0182*  	ld hl,F_UI_bj_machine_gun_02
04ABEE 11 F1 D3 04 0183*  	ld de,filedata
04ABF2 01 00 00 01 0184*  	ld bc,65536
04ABF6 3E 01       0185*  	ld a,mos_load
04ABF8 5B CF       0186*  	RST.LIL 08h
04ABFA 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
04ABFE 01 40 00 00 0188*  	ld bc,64
04AC02 11 40 00 00 0189*  	ld de,64
04AC06 DD 21 00 10 0190*  	ld ix,4096
       00          
04AC0B CD 40 C9 04 0191*  	call vdu_load_img
04AC0F 3E 2E       0192*  	LD A, '.'
04AC11 5B D7       0193*  	RST.LIL 10h
04AC13             0194*  
04AC13 21 87 AE 04 0195*  	ld hl,F_UI_bj_machine_gun_03
04AC17 11 F1 D3 04 0196*  	ld de,filedata
04AC1B 01 00 00 01 0197*  	ld bc,65536
04AC1F 3E 01       0198*  	ld a,mos_load
04AC21 5B CF       0199*  	RST.LIL 08h
04AC23 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
04AC27 01 40 00 00 0201*  	ld bc,64
04AC2B 11 40 00 00 0202*  	ld de,64
04AC2F DD 21 00 10 0203*  	ld ix,4096
       00          
04AC34 CD 40 C9 04 0204*  	call vdu_load_img
04AC38 3E 2E       0205*  	LD A, '.'
04AC3A 5B D7       0206*  	RST.LIL 10h
04AC3C             0207*  
04AC3C 21 A5 AE 04 0208*  	ld hl,F_UI_bj_machine_gun_04
04AC40 11 F1 D3 04 0209*  	ld de,filedata
04AC44 01 00 00 01 0210*  	ld bc,65536
04AC48 3E 01       0211*  	ld a,mos_load
04AC4A 5B CF       0212*  	RST.LIL 08h
04AC4C 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
04AC50 01 40 00 00 0214*  	ld bc,64
04AC54 11 40 00 00 0215*  	ld de,64
04AC58 DD 21 00 10 0216*  	ld ix,4096
       00          
04AC5D CD 40 C9 04 0217*  	call vdu_load_img
04AC61 3E 2E       0218*  	LD A, '.'
04AC63 5B D7       0219*  	RST.LIL 10h
04AC65             0220*  
04AC65 21 C3 AE 04 0221*  	ld hl,F_UI_bj_pistol_00
04AC69 11 F1 D3 04 0222*  	ld de,filedata
04AC6D 01 00 00 01 0223*  	ld bc,65536
04AC71 3E 01       0224*  	ld a,mos_load
04AC73 5B CF       0225*  	RST.LIL 08h
04AC75 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
04AC79 01 40 00 00 0227*  	ld bc,64
04AC7D 11 40 00 00 0228*  	ld de,64
04AC81 DD 21 00 10 0229*  	ld ix,4096
       00          
04AC86 CD 40 C9 04 0230*  	call vdu_load_img
04AC8A 3E 2E       0231*  	LD A, '.'
04AC8C 5B D7       0232*  	RST.LIL 10h
04AC8E             0233*  
04AC8E 21 DC AE 04 0234*  	ld hl,F_UI_bj_pistol_01
04AC92 11 F1 D3 04 0235*  	ld de,filedata
04AC96 01 00 00 01 0236*  	ld bc,65536
04AC9A 3E 01       0237*  	ld a,mos_load
04AC9C 5B CF       0238*  	RST.LIL 08h
04AC9E 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
04ACA2 01 40 00 00 0240*  	ld bc,64
04ACA6 11 40 00 00 0241*  	ld de,64
04ACAA DD 21 00 10 0242*  	ld ix,4096
       00          
04ACAF CD 40 C9 04 0243*  	call vdu_load_img
04ACB3 3E 2E       0244*  	LD A, '.'
04ACB5 5B D7       0245*  	RST.LIL 10h
04ACB7             0246*  
04ACB7 21 F5 AE 04 0247*  	ld hl,F_UI_bj_pistol_02
04ACBB 11 F1 D3 04 0248*  	ld de,filedata
04ACBF 01 00 00 01 0249*  	ld bc,65536
04ACC3 3E 01       0250*  	ld a,mos_load
04ACC5 5B CF       0251*  	RST.LIL 08h
04ACC7 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
04ACCB 01 40 00 00 0253*  	ld bc,64
04ACCF 11 40 00 00 0254*  	ld de,64
04ACD3 DD 21 00 10 0255*  	ld ix,4096
       00          
04ACD8 CD 40 C9 04 0256*  	call vdu_load_img
04ACDC 3E 2E       0257*  	LD A, '.'
04ACDE 5B D7       0258*  	RST.LIL 10h
04ACE0             0259*  
04ACE0 21 0E AF 04 0260*  	ld hl,F_UI_bj_pistol_03
04ACE4 11 F1 D3 04 0261*  	ld de,filedata
04ACE8 01 00 00 01 0262*  	ld bc,65536
04ACEC 3E 01       0263*  	ld a,mos_load
04ACEE 5B CF       0264*  	RST.LIL 08h
04ACF0 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
04ACF4 01 40 00 00 0266*  	ld bc,64
04ACF8 11 40 00 00 0267*  	ld de,64
04ACFC DD 21 00 10 0268*  	ld ix,4096
       00          
04AD01 CD 40 C9 04 0269*  	call vdu_load_img
04AD05 3E 2E       0270*  	LD A, '.'
04AD07 5B D7       0271*  	RST.LIL 10h
04AD09             0272*  
04AD09 21 27 AF 04 0273*  	ld hl,F_UI_bj_pistol_04
04AD0D 11 F1 D3 04 0274*  	ld de,filedata
04AD11 01 00 00 01 0275*  	ld bc,65536
04AD15 3E 01       0276*  	ld a,mos_load
04AD17 5B CF       0277*  	RST.LIL 08h
04AD19 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
04AD1D 01 40 00 00 0279*  	ld bc,64
04AD21 11 40 00 00 0280*  	ld de,64
04AD25 DD 21 00 10 0281*  	ld ix,4096
       00          
04AD2A CD 40 C9 04 0282*  	call vdu_load_img
04AD2E 3E 2E       0283*  	LD A, '.'
04AD30 5B D7       0284*  	RST.LIL 10h
04AD32             0285*  
04AD32 C9          0286*  	ret
04AD33             0287*  
04AD33 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04AD4D 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04AD67 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04AD81 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04AD9B 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04ADB5 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
04ADCD 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
04ADE5 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
04ADFD 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
04AE15 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
04AE2D 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04AE4B 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04AE69 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04AE87 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04AEA5 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04AEC3 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
04AEDC 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
04AEF5 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
04AF0E 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
04AF27 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
04AF40             0023   	include "src/asm/sprites.asm"
04AF40             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
04AF40             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
04AF40             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
04AF40             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
04AF40             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
04AF40             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
04AF40             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
04AF40             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
04AF40             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
04AF40             0010*  sprite_anim_timer:      equ 08 ; 1 byte  - when hits zero, draw next animation frame
04AF40             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
04AF40             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
04AF40             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, binary
04AF40             0014*  sprite_health_modifier: equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
04AF40             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
04AF40             0016*  sprite_record_size:     equ 16 ; 16 bytes per sprite record
04AF40             0017*  
04AF40             0018*  ; sprite_triggers_mask defs
04AF40             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
04AF40             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
04AF40             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
04AF40             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
04AF40             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
04AF40             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
04AF40             0025*  
04AF40             0026*  ; obj_ids for selected sprites
04AF40             0027*  ; these are the sprite_obj values for the selected sprites
04AF40             0028*  OBJ_ID_DEAD_GUARD:      equ 56
04AF40             0029*  OBJ_ID_EXPLOSION:       equ 60
04AF40             0030*  
04AF40             0031*  ; ###### SPRITE TABLE VARIABLES ######
04AF40             0032*  ; maximum number of sprites
04AF40             0033*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
04AF40             0034*  table_total_bytes:      equ table_max_records*sprite_record_size
04AF40             0035*  
04AF40             0036*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
04AF40             0037*  sprite_table_base:       equ 0xB7FC00
04AF40             0038*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
04AF40             0039*  
04AF40             0040*  ; pointer to top address of current record, initialized to sprite_table_base
04AF40 00 FC B7    0041*  sprite_table_pointer: dl sprite_table_base
04AF43             0042*  ; how many active sprites
04AF43 00          0043*  table_active_sprites: db 0x00
04AF44             0044*  ; flag indicating collision with screen edge
04AF44             0045*  ; uses orientation codes to specify which edge(s)
04AF44 00          0046*  sprite_screen_edge: db #00
04AF45             0047*  ; next sprite id to use
04AF45 00          0048*  sprite_next_id: db 0
04AF46             0049*  
04AF46             0050*  ; ######### COLLISION SPRITE PARAMETERS ##########
04AF46             0051*  ; integer coordinates are all that are needed for collision calculations
04AF46 00          0052*  collision_x: db 0x00
04AF47 00          0053*  collision_y: db 0x00
04AF48 00          0054*  collision_dim_x: db 0x00
04AF49 00          0055*  collision_dim_y: db 0x00
04AF4A             0056*  
04AF4A             0057*  ; scratch variables
04AF4A 00          0058*  x: db 0x00 ; 8-bit signed integer
04AF4B 00          0059*  y: db 0x00 ; 8-bit signed integer
04AF4C 00 00 00    0060*  x0: dl 0x000000 ; 16.8 signed fixed place
04AF4F 00 00 00    0061*  y0: dl 0x000000 ; 16.8 signed fixed place
04AF52 00 00 00    0062*  incx1: dl 0x000000 ; 16.8 signed fixed place
04AF55 00 00 00    0063*  incy1: dl 0x000000 ; 16.8 signed fixed place
04AF58 00 00 00    0064*  incx2: dl 0x000000 ; 16.8 signed fixed place
04AF5B 00 00 00    0065*  incy2: dl 0x000000 ; 16.8 signed fixed place
04AF5E             0066*  
04AF5E             0067*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
04AF5E 00 00 00    0068*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
04AF61 00 00 00    0069*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
04AF64 00 00 00    0070*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04AF67             0071*  
04AF67             0072*  ; gets the next available sprite id
04AF67             0073*  ; inputs; none
04AF67             0074*  ; returns: if new sprite available, a = sprite id,
04AF67             0075*  ;      ix pointing to new sprite vars, carry set
04AF67             0076*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04AF67             0077*  ; destroys: a,b,hl,ix
04AF67             0078*  ; affects: bumps table_active_sprites by one
04AF67             0079*  table_get_next_id:
04AF67 DD 21 00 FC 0080*      ld ix,sprite_table_base
       B7          
04AF6C 11 10 00 00 0081*      ld de,sprite_record_size
04AF70 06 40       0082*      ld b,table_max_records
04AF72             0083*  @loop:
04AF72 DD 7E 01    0084*      ld a,(ix+sprite_obj)
04AF75 A7          0085*      and a
04AF76 28 06       0086*      jr z,@found
04AF78 DD 19       0087*      add ix,de
04AF7A 10 F6       0088*      djnz @loop
04AF7C             0089*  @notfound:
04AF7C AF          0090*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
04AF7D C9          0091*      ret
04AF7E             0092*  @found:
04AF7E             0093*  ; bump number of active sprites
04AF7E 21 43 AF 04 0094*      ld hl,table_active_sprites
04AF82 34          0095*      inc (hl)
04AF83             0096*  ; return sprite id
04AF83 3E 40       0097*      ld a,table_max_records
04AF85 90          0098*      sub b
04AF86 32 45 AF 04 0099*      ld (sprite_next_id),a
04AF8A 37          0100*      scf ; sets carry flag indicating we found a free sprite
04AF8B C9          0101*      ret ; done
04AF8C             0102*  
04AF8C             0103*  ; deactivate the sprite with the given id
04AF8C             0104*  ; inputs: a = sprite id
04AF8C             0105*  ; outputs: nothing
04AF8C             0106*  ; destroys: a,ix,de
04AF8C             0107*  ; affects: decrements table_active_sprites by one
04AF8C             0108*  table_deactivate_sprite:
04AF8C F5          0109*      push af ; save sprite id bc we need it later
04AF8D CD 06 BC 04 0110*      call vdu_sprite_select
04AF91 CD 8A BC 04 0111*      call vdu_sprite_hide
04AF95 F1          0112*      pop af ; restore sprite id
04AF96 11 00 00 00 0113*      ld de,0 ; clear deu
04AF9A 57          0114*      ld d,a
04AF9B 1E 10       0115*      ld e,sprite_record_size
04AF9D ED 5C       0116*      mlt de
04AF9F DD 21 00 FC 0117*      ld ix,sprite_table_base
       B7          
04AFA4 DD 19       0118*      add ix,de
04AFA6 AF          0119*      xor a
04AFA7 DD 77 01    0120*      ld (ix+sprite_obj),a
04AFAA DD 21 43 AF 0121*      ld ix,table_active_sprites
       04          
04AFAF DD 35 00    0122*      dec (ix)
04AFB2 C9          0123*      ret
04AFB3             0124*  
04AFB3             0125*  ; sets iy and sprite_table_pointer to the sprite record with the given id
04AFB3             0126*  ; inputs: a = sprite id
04AFB3             0127*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
04AFB3             0128*  ; destroys: bc
04AFB3             0129*  sprite_set_pointer:
04AFB3 47          0130*      ld b,a
04AFB4 0E 10       0131*      ld c,sprite_record_size
04AFB6 ED 4C       0132*      mlt bc
04AFB8 FD 21 00 FC 0133*      ld iy,sprite_table_base
       B7          
04AFBD FD 09       0134*      add iy,bc
04AFBF FD 22 40 AF 0135*      ld (sprite_table_pointer),iy
       04          
04AFC4 C9          0136*      ret
04AFC5             0137*  
04AFC5             0138*  ; points ix at the map address of the sprite's current location
04AFC5             0139*  ; inputs: iy pointed at sprite record
04AFC5             0140*  ; outputs: ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04AFC5             0141*  ; destroys: af,de,hl
04AFC5             0142*  sprite_get_cell:
04AFC5             0143*  ; point ix at sprite's current map location
04AFC5 11 00 00 00 0144*      ld de,0 ; make sure deu is zero
04AFC9 FD 5E 04    0145*      ld e,(iy+sprite_x)
04AFCC FD 56 05    0146*      ld d,(iy+sprite_y)
04AFCF CD 0E 71 04 0147*      call get_cell_from_coords
04AFD3 C9          0148*      ret
04AFD4             0149*  
04AFD4             0150*  ; set the active sprite record to no sprite and remove it from the map cell it was in
04AFD4             0151*  ; inputs: iy pointed at sprite record to clear
04AFD4             0152*  sprite_kill:
04AFD4             0153*  ; point ix at sprite's current map location
04AFD4 CD C5 AF 04 0154*      call sprite_get_cell
04AFD8             0155*  ; set sprite table record to no sprite
04AFD8 21 FF FF FF 0156*      ld hl,0xFFFFFF ; a string of -1s
04AFDC FD 2F 00    0157*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
04AFDF             0158*  
04AFDF             0159*  ; set map cell to no sprite and normal floor
04AFDF 21 01 FF 1D 0160*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
04AFE3 DD 2F 00    0161*      ld (ix),hl
04AFE6 3E FF       0162*      ld a,0xFF ; no sprite
04AFE8 DD 77 03    0163*      ld (ix+map_sprite_id),a ; now sprite is truly dead
04AFEB C9          0164*      ret
04AFEC             0165*  
04AFEC 00          0166*  sprite_new_x: db 0x00
04AFED 00          0167*  sprite_new_y: db 0x00
04AFEE 00          0168*                db 0x00 ; padding
04AFEF             0169*  
04AFEF             0170*  ; checks if the sprite can move to the new position
04AFEF             0171*  ; inputs: iy pointed at sprite record, d,e = new y,x position
04AFEF             0172*  ; returns: a = 1 if move legal, 0 if not
04AFEF             0173*  ; modifies: sprite_new_x,y populated by de with new y,x position irrespecitve of legality
04AFEF             0174*  sprite_check_move:
04AFEF ED 53 EC AF 0175*      ld (sprite_new_x),de ; save new y,x position
       04          
04AFF4             0176*  ; check whether target cell is occupied by player
04AFF4 2A 39 C2 04 0177*      ld hl,(cur_x) ; h,l = player y,x position
04AFF8 AF          0178*      xor a ; clear carry
04AFF9 ED 52       0179*      sbc hl,de ; zero if player is at target cell
04AFFB C2 08 B0 04 0180*      jp nz,@not_player
04AFFF 3E 01       0181*      ld a,sp_use ; TODO: add melee attack behavior to sprite routines
04B001 CD F0 B0 04 0182*      call do_sprite_behavior
04B005 3E 01       0183*      ld a,1 ; signals caller that move was legal
04B007 C9          0184*      ret
04B008             0185*  @not_player:
04B008 CD 0E 71 04 0186*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04B00C             0187*  ; check whether target cell contains a sprite
04B00C DD 7E 03    0188*      ld a,(ix+map_sprite_id)
04B00F FE FF       0189*      cp 255 ; value if not sprite
04B011 CA 17 B0 04 0190*      jp z,@not_sprite
04B015 AF          0191*      xor a ; signals caller that move was illegal
04B016 C9          0192*      ret
04B017             0193*  @not_sprite:
04B017             0194*  ; read map type/status mask from target cell
04B017 DD 7E 00    0195*      ld a,(ix+map_type_status)
04B01A E6 01       0196*      and render_type_floor
04B01C C8          0197*      ret z ; target cell is not a floor so we can't move there
04B01D             0198*  ; we are cleared for movement
04B01D CD 47 B0 04 0199*      call sprite_move
04B021 3E 01       0200*      ld a,1 ; signals caller that move was legal
04B023 C9          0201*      ret
04B024             0202*  
04B024             0203*  ; creates a new sprite at the given map position
04B024             0204*  ; inputs: a = obj_id, ix pointing at map address, iy pointing at sprite address
04B024             0205*  sprite_spawn:
04B024             0206*  ; copy obj_id to map_obj_id
04B024 DD 77 02    0207*      ld (ix+map_obj_id),a
04B027             0208*  ; lookup map_type_status and sprite_obj from obj_id
04B027 D6 0A       0209*      sub 10 ; first record in list is 10
04B029 21 0A 8B 04 0210*      ld hl,map_type_status_lut
04B02D 47          0211*      ld b,a
04B02E 0E 02       0212*      ld c,2 ; two bytes per record
04B030 ED 4C       0213*      mlt bc
04B032 09          0214*      add hl,bc ; hl points to lookup record
04B033 ED 27       0215*      ld hl,(hl) ; l = map_type_status, h = sprite_obj
04B035             0216*  ; copy sprite_obj to sprite record
04B035 FD 74 01    0217*      ld (iy+sprite_obj),h
04B038             0218*  ; copy map_type_status to map cell
04B038 DD 75 00    0219*      ld (ix+map_type_status),l
04B03B             0220*  ; write sprite_id to map cell
04B03B FD 7E 00    0221*      ld a,(iy+sprite_id)
04B03E DD 77 03    0222*      ld (ix+map_sprite_id),a
04B041             0223*  ; write 255 to map_img_idx to indicate type sprite
04B041 3E FF       0224*      ld a,255
04B043 DD 77 01    0225*      ld (ix+map_img_idx),a
04B046             0226*  ; ; TODO: this will be clunky to do until the sprite table layout is adjusted to better separate definitional from state data
04B046             0227*  ; ; initialize sprite data
04B046             0228*  ;     ld a,sp_init
04B046             0229*  ;     call sprite_init_data
04B046 C9          0230*      ret
04B047             0231*  
04B047             0232*  ; moves the sprite to the given map position
04B047             0233*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
04B047             0234*  sprite_move:
04B047             0235*  ; point ix to old map cell
04B047 FD 17 04    0236*      ld de,(iy+sprite_x) ; d,e = sprite old y,x position
04B04A CD 0E 71 04 0237*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04B04E             0238*  ; update sprite record with new position
04B04E ED 5B EC AF 0239*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
04B053 FD 1F 04    0240*      ld (iy+sprite_x),de
04B056             0241*  ; point iy to old map cell, ix to new map cell
04B056 DD E5       0242*      push ix ; old map cell
04B058 FD E1       0243*      pop iy ; new map cell
04B05A CD 0E 71 04 0244*      call get_cell_from_coords ; d,e already had new y,x
04B05E             0245*  ; copy old cell status to new
04B05E FD 27 00    0246*      ld hl,(iy+map_type_status)
04B061 DD 2F 00    0247*      ld (ix+map_type_status),hl
04B064 FD 7E 03    0248*      ld a,(iy+map_sprite_id)
04B067 DD 77 03    0249*      ld (ix+map_sprite_id),a
04B06A             0250*  ; set old map cell to no sprite and normal floor
04B06A 21 01 FF 1D 0251*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dynanmically based on the defs in tiles.txt at some point
04B06E FD 2F 00    0252*      ld (iy+map_type_status),hl
04B071 3E FF       0253*      ld a,0xFF ; no sprite
04B073 FD 77 03    0254*      ld (iy+map_sprite_id),a
04B076 C9          0255*      ret
04B077             0256*  
04B077             0257*  ; move a sprite in a random direction
04B077             0258*  ; inputs: iy pointed at sprite record
04B077             0259*  ; destroys: potentially everything
04B077             0260*  sprite_move_random:
04B077             0261*  ; point iy at sprite record
04B077 FD 2A 40 AF 0262*      ld iy,(sprite_table_pointer)
       04          
04B07C             0263*  ; set number of times to try a random direction before giving up
04B07C 06 08       0264*      ld b,8
04B07E             0265*  @loop:
04B07E C5          0266*      push bc ; save loop counter
04B07F             0267*  ; pick a random direction
04B07F CD AD C7 04 0268*      call rand_8
04B083 E6 03       0269*      and 3 ; direction between 0 and 3
04B085             0270*  ; get dy,dx for moving once cell in the chosen direction
04B085 5F          0271*      ld e,a
04B086 16 01       0272*      ld d,1 ; distance
04B088 CD 33 71 04 0273*      call get_dx_dy ; d,e = dy,dx
04B08C             0274*  ; calculate new position
04B08C FD 7E 04    0275*      ld a,(iy+sprite_x)
04B08F 83          0276*      add a,e
04B090 E6 0F       0277*      and 15 ; modulo 16
04B092 5F          0278*      ld e,a
04B093 FD 7E 05    0279*      ld a,(iy+sprite_y)
04B096 82          0280*      add a,d
04B097 E6 0F       0281*      and 15 ; modulo 16
04B099 57          0282*      ld d,a
04B09A CD EF AF 04 0283*      call sprite_check_move
04B09E C1          0284*      pop bc ; get back loop counter
04B09F A7          0285*      and a
04B0A0 C0          0286*      ret nz ; move was legal so we're done
04B0A1 10 DB       0287*      djnz @loop ; try again
04B0A3 C9          0288*      ret ; no move found in 8 tries, so we're done
04B0A4             0289*  
04B0A4             0290*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04B0A4             0291*  sprite_behavior_lookup:
04B0A4 0D B1 04    0292*      dl LAMP
04B0A7 3B B1 04    0293*      dl BARREL
04B0AA 8B B1 04    0294*      dl TABLE
04B0AD B9 B1 04    0295*      dl OVERHEAD_LIGHT
04B0B0 E7 B1 04    0296*      dl RADIOACTIVE_BARREL
04B0B3 37 B2 04    0297*      dl HEALTH_PACK
04B0B6 6F B2 04    0298*      dl GOLD_CHALISE
04B0B9 AF B2 04    0299*      dl GOLD_CROSS
04B0BC EF B2 04    0300*      dl PLATE_OF_FOOD
04B0BF 27 B3 04    0301*      dl KEYCARD
04B0C2 62 B3 04    0302*      dl GOLD_CHEST
04B0C5 A2 B3 04    0303*      dl MACHINE_GUN
04B0C8 EF B3 04    0304*      dl GATLING_GUN
04B0CB 3C B4 04    0305*      dl DOG_FOOD
04B0CE 74 B4 04    0306*      dl GOLD_KEY
04B0D1 A2 B4 04    0307*      dl DOG
04B0D4 2C B5 04    0308*      dl GERMAN_TROOPER
04B0D7 CD B5 04    0309*      dl SS_GUARD
04B0DA 6E B6 04    0310*      dl DEAD_GUARD
04B0DD AD B6 04    0311*      dl EXPLOSION
04B0E0             0312*  
04B0E0             0313*  ; initializes sprite data for a particular sprite type and id
04B0E0             0314*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04B0E0             0315*  sprite_init_data:
04B0E0 3E 00       0316*      ld a,sp_init ; index for sprite init routine
04B0E2 CD F0 B0 04 0317*      call do_sprite_behavior ; hl points at address to copy from
04B0E6 ED 13 02    0318*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04B0E9 01 0E 00 00 0319*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04B0ED ED B0       0320*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04B0EF C9          0321*      ret ; done
04B0F0             0322*  
04B0F0             0323*  ; #### SPRITE BEHAVIOR ROUTINES ####
04B0F0             0324*  ; sprite behavior indices
04B0F0             0325*  sp_init:   equ 0
04B0F0             0326*  sp_use:    equ 1
04B0F0             0327*  sp_hurt:  equ 2
04B0F0             0328*  sp_kill:   equ 3
04B0F0             0329*  sp_see:    equ 4
04B0F0             0330*  sp_move:  equ 5
04B0F0             0331*  sp_shoot:  equ 6
04B0F0             0332*  
04B0F0             0333*  ; calls the sprite behavior routine for the sprite pointed to by iy
04B0F0             0334*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04B0F0             0335*  ;         a = type index of routine to call
04B0F0             0336*  do_sprite_behavior:
04B0F0 FD 22 40 AF 0337*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04B0F5 FD 46 01    0338*      ld b,(iy+sprite_obj)
04B0F8 0E 03       0339*      ld c,3 ; three bytes per lookup record
04B0FA ED 4C       0340*      mlt bc ; bc is offset from the base of the lookup table
04B0FC 21 A4 B0 04 0341*      ld hl,sprite_behavior_lookup
04B100 09          0342*      add hl,bc
04B101 ED 27       0343*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04B103 47          0344*      ld b,a ; b holds the routine index
04B104 0E 03       0345*      ld c,3 ; three bytes per lookup record
04B106 ED 4C       0346*      mlt bc ; bc is offset from the base of the lookup table
04B108 09          0347*      add hl,bc ; hl points to the label of the routine to call
04B109 ED 27       0348*      ld hl,(hl) ; hl points to the routine to call
04B10B E9          0349*      jp (hl) ; call the behavior routine
04B10C C9          0350*      ret
04B10D             0351*  
04B10D             0352*  LAMP:
04B10D             0353*  ; behavior routine address lookup
04B10D 22 B1 04    0354*      dl @init
04B110 35 B1 04    0355*      dl @use
04B113 36 B1 04    0356*      dl @hurt
04B116 37 B1 04    0357*      dl @kill
04B119 38 B1 04    0358*      dl @see
04B11C 39 B1 04    0359*      dl @move
04B11F 3A B1 04    0360*      dl @shoot
04B122             0361*  @init:
04B122 21 27 B1 04 0362*      ld hl,@data ; address for LDIR to copy from
04B126 C9          0363*      ret
04B127             0364*  @data:
04B127 64          0365*      db 100 ; sprite_health
04B128 00          0366*      db 000 ; sprite_triggers_mask
04B129 00          0367*      db 000 ; sprite_x
04B12A 00          0368*      db 000 ; sprite_y
04B12B 00          0369*      db 000 ; sprite_orientation
04B12C 00          0370*      db 000 ; sprite_animation
04B12D 00          0371*      db 000 ; sprite_anim_timer
04B12E 01          0372*      db 001 ; sprite_move_timer
04B12F 00          0373*      db 000 ; sprite_move_step
04B130 00          0374*      db 000 ; sprite_points
04B131 00          0375*      db 000 ; sprite_health_modifier
04B132 00          0376*      db 000 ; sprite_unassigned_0
04B133 00          0377*      db 000 ; sprite_unassigned_1
04B134 00          0378*      db 000 ; sprite_unassigned_2
04B135             0379*  @use:
04B135 C9          0380*      ret
04B136             0381*  @hurt:
04B136 C9          0382*      ret
04B137             0383*  @kill:
04B137 C9          0384*      ret
04B138             0385*  @see:
04B138 C9          0386*      ret
04B139             0387*  @move:
04B139 C9          0388*      ret
04B13A             0389*  @shoot:
04B13A C9          0390*      ret
04B13B             0391*  
04B13B             0392*  BARREL:
04B13B             0393*  ; behavior routine address lookup
04B13B 50 B1 04    0394*      dl @init
04B13E 63 B1 04    0395*      dl @use
04B141 64 B1 04    0396*      dl @hurt
04B144 75 B1 04    0397*      dl @kill
04B147 88 B1 04    0398*      dl @see
04B14A 89 B1 04    0399*      dl @move
04B14D 8A B1 04    0400*      dl @shoot
04B150             0401*  @init:
04B150 21 55 B1 04 0402*      ld hl,@data ; address for LDIR to copy from
04B154 C9          0403*      ret
04B155             0404*  @data:
04B155 12          0405*      db 018 ; sprite_health
04B156 00          0406*      db 000 ; sprite_triggers_mask
04B157 00          0407*      db 000 ; sprite_x
04B158 00          0408*      db 000 ; sprite_y
04B159 00          0409*      db 000 ; sprite_orientation
04B15A 00          0410*      db 000 ; sprite_animation
04B15B 00          0411*      db 000 ; sprite_anim_timer
04B15C 01          0412*      db 001 ; sprite_move_timer
04B15D 00          0413*      db 000 ; sprite_move_step
04B15E 00          0414*      db 000 ; sprite_points
04B15F CE          0415*      db -50 ; sprite_health_modifier
04B160 00          0416*      db 000 ; sprite_unassigned_0
04B161 00          0417*      db 000 ; sprite_unassigned_1
04B162 00          0418*      db 000 ; sprite_unassigned_2
04B163             0419*  @use:
04B163 C9          0420*      ret
04B164             0421*  @hurt:
04B164 3E FF       0422*      ld a,255 ; kill player's shot
04B166 32 49 C2 04 0423*      ld (plyr_shot_status),a
04B16A 3A 4D C2 04 0424*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04B16E FD 86 02    0425*      add a,(iy+sprite_health)
04B171 FD 77 02    0426*      ld (iy+sprite_health),a
04B174 F0          0427*      ret p ; if health is positive, return
04B175             0428*      ; otherwise fall through to kill sprite
04B175             0429*  @kill:
04B175 FD E5       0430*      push iy
04B177 CD EC CE 04 0431*      call sfx_play_explode
04B17B FD E1       0432*      pop iy
04B17D 3E 3C       0433*      ld a,OBJ_ID_EXPLOSION
04B17F CD 24 B0 04 0434*      call sprite_spawn
04B183 FD 36 08 05 0435*      ld (iy+sprite_anim_timer),5
04B187 C9          0436*      ret
04B188             0437*  @see:
04B188 C9          0438*      ret
04B189             0439*  @move:
04B189 C9          0440*      ret
04B18A             0441*  @shoot:
04B18A C9          0442*      ret
04B18B             0443*  
04B18B             0444*  TABLE:
04B18B             0445*  ; behavior routine address lookup
04B18B A0 B1 04    0446*      dl @init
04B18E B3 B1 04    0447*      dl @use
04B191 B4 B1 04    0448*      dl @hurt
04B194 B5 B1 04    0449*      dl @kill
04B197 B6 B1 04    0450*      dl @see
04B19A B7 B1 04    0451*      dl @move
04B19D B8 B1 04    0452*      dl @shoot
04B1A0             0453*  @init:
04B1A0 21 A5 B1 04 0454*      ld hl,@data ; address for LDIR to copy from
04B1A4 C9          0455*      ret
04B1A5             0456*  @data:
04B1A5 64          0457*      db 100 ; sprite_health
04B1A6 00          0458*      db 000 ; sprite_triggers_mask
04B1A7 00          0459*      db 000 ; sprite_x
04B1A8 00          0460*      db 000 ; sprite_y
04B1A9 00          0461*      db 000 ; sprite_orientation
04B1AA 00          0462*      db 000 ; sprite_animation
04B1AB 00          0463*      db 000 ; sprite_anim_timer
04B1AC 01          0464*      db 001 ; sprite_move_timer
04B1AD 00          0465*      db 000 ; sprite_move_step
04B1AE 00          0466*      db 000 ; sprite_points
04B1AF 00          0467*      db 000 ; sprite_health_modifier
04B1B0 00          0468*      db 000 ; sprite_unassigned_0
04B1B1 00          0469*      db 000 ; sprite_unassigned_1
04B1B2 00          0470*      db 000 ; sprite_unassigned_2
04B1B3             0471*  @use:
04B1B3 C9          0472*      ret
04B1B4             0473*  @hurt:
04B1B4 C9          0474*      ret
04B1B5             0475*  @kill:
04B1B5 C9          0476*      ret
04B1B6             0477*  @see:
04B1B6 C9          0478*      ret
04B1B7             0479*  @move:
04B1B7 C9          0480*      ret
04B1B8             0481*  @shoot:
04B1B8 C9          0482*      ret
04B1B9             0483*  
04B1B9             0484*  OVERHEAD_LIGHT:
04B1B9             0485*  ; behavior routine address lookup
04B1B9 CE B1 04    0486*      dl @init
04B1BC E1 B1 04    0487*      dl @use
04B1BF E2 B1 04    0488*      dl @hurt
04B1C2 E3 B1 04    0489*      dl @kill
04B1C5 E4 B1 04    0490*      dl @see
04B1C8 E5 B1 04    0491*      dl @move
04B1CB E6 B1 04    0492*      dl @shoot
04B1CE             0493*  @init:
04B1CE 21 D3 B1 04 0494*      ld hl,@data ; address for LDIR to copy from
04B1D2 C9          0495*      ret
04B1D3             0496*  @data:
04B1D3 64          0497*      db 100 ; sprite_health
04B1D4 00          0498*      db 000 ; sprite_triggers_mask
04B1D5 00          0499*      db 000 ; sprite_x
04B1D6 00          0500*      db 000 ; sprite_y
04B1D7 00          0501*      db 000 ; sprite_orientation
04B1D8 00          0502*      db 000 ; sprite_animation
04B1D9 00          0503*      db 000 ; sprite_anim_timer
04B1DA 01          0504*      db 001 ; sprite_move_timer
04B1DB 00          0505*      db 000 ; sprite_move_step
04B1DC 00          0506*      db 000 ; sprite_points
04B1DD 00          0507*      db 000 ; sprite_health_modifier
04B1DE 00          0508*      db 000 ; sprite_unassigned_0
04B1DF 00          0509*      db 000 ; sprite_unassigned_1
04B1E0 00          0510*      db 000 ; sprite_unassigned_2
04B1E1             0511*  @use:
04B1E1 C9          0512*      ret
04B1E2             0513*  @hurt:
04B1E2 C9          0514*      ret
04B1E3             0515*  @kill:
04B1E3 C9          0516*      ret
04B1E4             0517*  @see:
04B1E4 C9          0518*      ret
04B1E5             0519*  @move:
04B1E5 C9          0520*      ret
04B1E6             0521*  @shoot:
04B1E6 C9          0522*      ret
04B1E7             0523*  
04B1E7             0524*  RADIOACTIVE_BARREL:
04B1E7             0525*  ; behavior routine address lookup
04B1E7 FC B1 04    0526*      dl @init
04B1EA 0F B2 04    0527*      dl @use
04B1ED 10 B2 04    0528*      dl @hurt
04B1F0 21 B2 04    0529*      dl @kill
04B1F3 34 B2 04    0530*      dl @see
04B1F6 35 B2 04    0531*      dl @move
04B1F9 36 B2 04    0532*      dl @shoot
04B1FC             0533*  @init:
04B1FC 21 01 B2 04 0534*      ld hl,@data ; address for LDIR to copy from
04B200 C9          0535*      ret
04B201             0536*  @data:
04B201 18          0537*      db 024 ; sprite_health
04B202 00          0538*      db 000 ; sprite_triggers_mask
04B203 00          0539*      db 000 ; sprite_x
04B204 00          0540*      db 000 ; sprite_y
04B205 00          0541*      db 000 ; sprite_orientation
04B206 00          0542*      db 000 ; sprite_animation
04B207 00          0543*      db 000 ; sprite_anim_timer
04B208 01          0544*      db 001 ; sprite_move_timer
04B209 00          0545*      db 000 ; sprite_move_step
04B20A 00          0546*      db 000 ; sprite_points
04B20B B5          0547*      db -75 ; sprite_health_modifier
04B20C 00          0548*      db 000 ; sprite_unassigned_0
04B20D 00          0549*      db 000 ; sprite_unassigned_1
04B20E 00          0550*      db 000 ; sprite_unassigned_2
04B20F             0551*  @use:
04B20F C9          0552*      ret
04B210             0553*  @hurt:
04B210 3E FF       0554*      ld a,255 ; kill player's shot
04B212 32 49 C2 04 0555*      ld (plyr_shot_status),a
04B216 3A 4D C2 04 0556*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04B21A FD 86 02    0557*      add a,(iy+sprite_health)
04B21D FD 77 02    0558*      ld (iy+sprite_health),a
04B220 F0          0559*      ret p ; if health is positive, return
04B221             0560*      ; otherwise fall through to kill sprite
04B221             0561*  @kill:
04B221 FD E5       0562*      push iy
04B223 CD EC CE 04 0563*      call sfx_play_explode
04B227 FD E1       0564*      pop iy
04B229 3E 3C       0565*      ld a,OBJ_ID_EXPLOSION
04B22B CD 24 B0 04 0566*      call sprite_spawn
04B22F FD 36 08 05 0567*      ld (iy+sprite_anim_timer),5
04B233 C9          0568*      ret
04B234             0569*  @see:
04B234 C9          0570*      ret
04B235             0571*  @move:
04B235 C9          0572*      ret
04B236             0573*  @shoot:
04B236 C9          0574*      ret
04B237             0575*  
04B237             0576*  HEALTH_PACK:
04B237             0577*  ; behavior routine address lookup
04B237 4C B2 04    0578*      dl @init
04B23A 5F B2 04    0579*      dl @use
04B23D 6A B2 04    0580*      dl @hurt
04B240 6B B2 04    0581*      dl @kill
04B243 6C B2 04    0582*      dl @see
04B246 6D B2 04    0583*      dl @move
04B249 6E B2 04    0584*      dl @shoot
04B24C             0585*  @init:
04B24C 21 51 B2 04 0586*      ld hl,@data ; address for LDIR to copy from
04B250 C9          0587*      ret
04B251             0588*  @data:
04B251 64          0589*      db 100 ; sprite_health
04B252 00          0590*      db 000 ; sprite_triggers_mask
04B253 00          0591*      db 000 ; sprite_x
04B254 00          0592*      db 000 ; sprite_y
04B255 00          0593*      db 000 ; sprite_orientation
04B256 00          0594*      db 000 ; sprite_animation
04B257 00          0595*      db 000 ; sprite_anim_timer
04B258 01          0596*      db 001 ; sprite_move_timer
04B259 00          0597*      db 000 ; sprite_move_step
04B25A 00          0598*      db 000 ; sprite_points
04B25B 14          0599*      db 020 ; sprite_health_modifier
04B25C 00          0600*      db 000 ; sprite_unassigned_0
04B25D 00          0601*      db 000 ; sprite_unassigned_1
04B25E 00          0602*      db 000 ; sprite_unassigned_2
04B25F             0603*  @use:
04B25F FD 7E 0C    0604*      ld a,(iy+sprite_health_modifier)
04B262 CD 6C C4 04 0605*      call plyr_add_health
04B266 C3 D4 AF 04 0606*      jp sprite_kill
04B26A             0607*  @hurt:
04B26A C9          0608*      ret
04B26B             0609*  @kill:
04B26B C9          0610*      ret
04B26C             0611*  @see:
04B26C C9          0612*      ret
04B26D             0613*  @move:
04B26D C9          0614*      ret
04B26E             0615*  @shoot:
04B26E C9          0616*      ret
04B26F             0617*  
04B26F             0618*  GOLD_CHALISE:
04B26F             0619*  ; behavior routine address lookup
04B26F 84 B2 04    0620*      dl @init
04B272 97 B2 04    0621*      dl @use
04B275 AA B2 04    0622*      dl @hurt
04B278 AB B2 04    0623*      dl @kill
04B27B AC B2 04    0624*      dl @see
04B27E AD B2 04    0625*      dl @move
04B281 AE B2 04    0626*      dl @shoot
04B284             0627*  @init:
04B284 21 89 B2 04 0628*      ld hl,@data ; address for LDIR to copy from
04B288 C9          0629*      ret
04B289             0630*  @data:
04B289 64          0631*      db 100 ; sprite_health
04B28A 00          0632*      db 000 ; sprite_triggers_mask
04B28B 00          0633*      db 000 ; sprite_x
04B28C 00          0634*      db 000 ; sprite_y
04B28D 00          0635*      db 000 ; sprite_orientation
04B28E 00          0636*      db 000 ; sprite_animation
04B28F 00          0637*      db 000 ; sprite_anim_timer
04B290 01          0638*      db 001 ; sprite_move_timer
04B291 00          0639*      db 000 ; sprite_move_step
04B292 64          0640*      db 100 ; sprite_points
04B293 00          0641*      db 000 ; sprite_health_modifier
04B294 00          0642*      db 000 ; sprite_unassigned_0
04B295 00          0643*      db 000 ; sprite_unassigned_1
04B296 00          0644*      db 000 ; sprite_unassigned_2
04B297             0645*  @use:
04B297 FD E5       0646*      push iy
04B299 CD F8 CE 04 0647*      call sfx_play_got_treasure
04B29D FD E1       0648*      pop iy
04B29F FD 7E 0B    0649*      ld a,(iy+sprite_points)
04B2A2 CD CA C4 04 0650*      call plyr_mod_score
04B2A6 C3 D4 AF 04 0651*      jp sprite_kill
04B2AA             0652*  @hurt:
04B2AA C9          0653*      ret
04B2AB             0654*  @kill:
04B2AB C9          0655*      ret
04B2AC             0656*  @see:
04B2AC C9          0657*      ret
04B2AD             0658*  @move:
04B2AD C9          0659*      ret
04B2AE             0660*  @shoot:
04B2AE C9          0661*      ret
04B2AF             0662*  
04B2AF             0663*  GOLD_CROSS:
04B2AF             0664*  ; behavior routine address lookup
04B2AF C4 B2 04    0665*      dl @init
04B2B2 D7 B2 04    0666*      dl @use
04B2B5 EA B2 04    0667*      dl @hurt
04B2B8 EB B2 04    0668*      dl @kill
04B2BB EC B2 04    0669*      dl @see
04B2BE ED B2 04    0670*      dl @move
04B2C1 EE B2 04    0671*      dl @shoot
04B2C4             0672*  @init:
04B2C4 21 C9 B2 04 0673*      ld hl,@data ; address for LDIR to copy from
04B2C8 C9          0674*      ret
04B2C9             0675*  @data:
04B2C9 64          0676*      db 100 ; sprite_health
04B2CA 00          0677*      db 000 ; sprite_triggers_mask
04B2CB 00          0678*      db 000 ; sprite_x
04B2CC 00          0679*      db 000 ; sprite_y
04B2CD 00          0680*      db 000 ; sprite_orientation
04B2CE 00          0681*      db 000 ; sprite_animation
04B2CF 00          0682*      db 000 ; sprite_anim_timer
04B2D0 01          0683*      db 001 ; sprite_move_timer
04B2D1 00          0684*      db 000 ; sprite_move_step
04B2D2 32          0685*      db 050 ; sprite_points
04B2D3 00          0686*      db 000 ; sprite_health_modifier
04B2D4 00          0687*      db 000 ; sprite_unassigned_0
04B2D5 00          0688*      db 000 ; sprite_unassigned_1
04B2D6 00          0689*      db 000 ; sprite_unassigned_2
04B2D7             0690*  @use:
04B2D7 FD E5       0691*      push iy
04B2D9 CD F8 CE 04 0692*      call sfx_play_got_treasure
04B2DD FD E1       0693*      pop iy
04B2DF FD 7E 0B    0694*      ld a,(iy+sprite_points)
04B2E2 CD CA C4 04 0695*      call plyr_mod_score
04B2E6 C3 D4 AF 04 0696*      jp sprite_kill
04B2EA             0697*  @hurt:
04B2EA C9          0698*      ret
04B2EB             0699*  @kill:
04B2EB C9          0700*      ret
04B2EC             0701*  @see:
04B2EC C9          0702*      ret
04B2ED             0703*  @move:
04B2ED C9          0704*      ret
04B2EE             0705*  @shoot:
04B2EE C9          0706*      ret
04B2EF             0707*  
04B2EF             0708*  PLATE_OF_FOOD:
04B2EF             0709*  ; behavior routine address lookup
04B2EF 04 B3 04    0710*      dl @init
04B2F2 17 B3 04    0711*      dl @use
04B2F5 22 B3 04    0712*      dl @hurt
04B2F8 23 B3 04    0713*      dl @kill
04B2FB 24 B3 04    0714*      dl @see
04B2FE 25 B3 04    0715*      dl @move
04B301 26 B3 04    0716*      dl @shoot
04B304             0717*  @init:
04B304 21 09 B3 04 0718*      ld hl,@data ; address for LDIR to copy from
04B308 C9          0719*      ret
04B309             0720*  @data:
04B309 64          0721*      db 100 ; sprite_health
04B30A 00          0722*      db 000 ; sprite_triggers_mask
04B30B 00          0723*      db 000 ; sprite_x
04B30C 00          0724*      db 000 ; sprite_y
04B30D 00          0725*      db 000 ; sprite_orientation
04B30E 00          0726*      db 000 ; sprite_animation
04B30F 00          0727*      db 000 ; sprite_anim_timer
04B310 01          0728*      db 001 ; sprite_move_timer
04B311 00          0729*      db 000 ; sprite_move_step
04B312 00          0730*      db 000 ; sprite_points
04B313 0A          0731*      db 010 ; sprite_health_modifier
04B314 00          0732*      db 000 ; sprite_unassigned_0
04B315 00          0733*      db 000 ; sprite_unassigned_1
04B316 00          0734*      db 000 ; sprite_unassigned_2
04B317             0735*  @use:
04B317 FD 7E 0C    0736*      ld a,(iy+sprite_health_modifier)
04B31A CD 6C C4 04 0737*      call plyr_add_health
04B31E C3 D4 AF 04 0738*      jp sprite_kill
04B322             0739*  @hurt:
04B322 C9          0740*      ret
04B323             0741*  @kill:
04B323 C9          0742*      ret
04B324             0743*  @see:
04B324 C9          0744*      ret
04B325             0745*  @move:
04B325 C9          0746*      ret
04B326             0747*  @shoot:
04B326 C9          0748*      ret
04B327             0749*  
04B327             0750*  KEYCARD:
04B327             0751*  ; behavior routine address lookup
04B327 3C B3 04    0752*      dl @init
04B32A 4F B3 04    0753*      dl @use
04B32D 5D B3 04    0754*      dl @hurt
04B330 5E B3 04    0755*      dl @kill
04B333 5F B3 04    0756*      dl @see
04B336 60 B3 04    0757*      dl @move
04B339 61 B3 04    0758*      dl @shoot
04B33C             0759*  @init:
04B33C 21 41 B3 04 0760*      ld hl,@data ; address for LDIR to copy from
04B340 C9          0761*      ret
04B341             0762*  @data:
04B341 64          0763*      db 100 ; sprite_health
04B342 00          0764*      db 000 ; sprite_triggers_mask
04B343 00          0765*      db 000 ; sprite_x
04B344 00          0766*      db 000 ; sprite_y
04B345 00          0767*      db 000 ; sprite_orientation
04B346 00          0768*      db 000 ; sprite_animation
04B347 00          0769*      db 000 ; sprite_anim_timer
04B348 01          0770*      db 001 ; sprite_move_timer
04B349 00          0771*      db 000 ; sprite_move_step
04B34A 00          0772*      db 000 ; sprite_points
04B34B 00          0773*      db 000 ; sprite_health_modifier
04B34C 00          0774*      db 000 ; sprite_unassigned_0
04B34D 00          0775*      db 000 ; sprite_unassigned_1
04B34E 00          0776*      db 000 ; sprite_unassigned_2
04B34F             0777*  @use:
04B34F 3E 08       0778*      ld a,8
04B351 CD D9 C4 04 0779*      call plyr_add_ammo
04B355 CD 10 CF 04 0780*      call sfx_play_gun_reload
04B359 C3 D4 AF 04 0781*      jp sprite_kill
04B35D             0782*  @hurt:
04B35D C9          0783*      ret
04B35E             0784*  @kill:
04B35E C9          0785*      ret
04B35F             0786*  @see:
04B35F C9          0787*      ret
04B360             0788*  @move:
04B360 C9          0789*      ret
04B361             0790*  @shoot:
04B361 C9          0791*      ret
04B362             0792*  
04B362             0793*  GOLD_CHEST:
04B362             0794*  ; behavior routine address lookup
04B362 77 B3 04    0795*      dl @init
04B365 8A B3 04    0796*      dl @use
04B368 9D B3 04    0797*      dl @hurt
04B36B 9E B3 04    0798*      dl @kill
04B36E 9F B3 04    0799*      dl @see
04B371 A0 B3 04    0800*      dl @move
04B374 A1 B3 04    0801*      dl @shoot
04B377             0802*  @init:
04B377 21 7C B3 04 0803*      ld hl,@data ; address for LDIR to copy from
04B37B C9          0804*      ret
04B37C             0805*  @data:
04B37C 64          0806*      db 100 ; sprite_health
04B37D 00          0807*      db 000 ; sprite_triggers_mask
04B37E 00          0808*      db 000 ; sprite_x
04B37F 00          0809*      db 000 ; sprite_y
04B380 00          0810*      db 000 ; sprite_orientation
04B381 00          0811*      db 000 ; sprite_animation
04B382 00          0812*      db 000 ; sprite_anim_timer
04B383 01          0813*      db 001 ; sprite_move_timer
04B384 00          0814*      db 000 ; sprite_move_step
04B385 FA          0815*      db 250 ; sprite_points
04B386 00          0816*      db 000 ; sprite_health_modifier
04B387 00          0817*      db 000 ; sprite_unassigned_0
04B388 00          0818*      db 000 ; sprite_unassigned_1
04B389 00          0819*      db 000 ; sprite_unassigned_2
04B38A             0820*  @use:
04B38A FD E5       0821*      push iy
04B38C CD F8 CE 04 0822*      call sfx_play_got_treasure
04B390 FD E1       0823*      pop iy
04B392 FD 7E 0B    0824*      ld a,(iy+sprite_points)
04B395 CD CA C4 04 0825*      call plyr_mod_score
04B399 C3 D4 AF 04 0826*      jp sprite_kill
04B39D             0827*  @hurt:
04B39D C9          0828*      ret
04B39E             0829*  @kill:
04B39E C9          0830*      ret
04B39F             0831*  @see:
04B39F C9          0832*      ret
04B3A0             0833*  @move:
04B3A0 C9          0834*      ret
04B3A1             0835*  @shoot:
04B3A1 C9          0836*      ret
04B3A2             0837*  
04B3A2             0838*  MACHINE_GUN:
04B3A2             0839*  ; behavior routine address lookup
04B3A2 B7 B3 04    0840*      dl @init
04B3A5 CA B3 04    0841*      dl @use
04B3A8 EA B3 04    0842*      dl @hurt
04B3AB EB B3 04    0843*      dl @kill
04B3AE EC B3 04    0844*      dl @see
04B3B1 ED B3 04    0845*      dl @move
04B3B4 EE B3 04    0846*      dl @shoot
04B3B7             0847*  @init:
04B3B7 21 BC B3 04 0848*      ld hl,@data ; address for LDIR to copy from
04B3BB C9          0849*      ret
04B3BC             0850*  @data:
04B3BC 64          0851*      db 100 ; sprite_health
04B3BD 00          0852*      db 000 ; sprite_triggers_mask
04B3BE 00          0853*      db 000 ; sprite_x
04B3BF 00          0854*      db 000 ; sprite_y
04B3C0 00          0855*      db 000 ; sprite_orientation
04B3C1 00          0856*      db 000 ; sprite_animation
04B3C2 00          0857*      db 000 ; sprite_anim_timer
04B3C3 01          0858*      db 001 ; sprite_move_timer
04B3C4 00          0859*      db 000 ; sprite_move_step
04B3C5 00          0860*      db 000 ; sprite_points
04B3C6 00          0861*      db 000 ; sprite_health_modifier
04B3C7 00          0862*      db 000 ; sprite_unassigned_0
04B3C8 00          0863*      db 000 ; sprite_unassigned_1
04B3C9 00          0864*      db 000 ; sprite_unassigned_2
04B3CA             0865*  @use:
04B3CA CD D4 AF 04 0866*      call sprite_kill
04B3CE 3E 10       0867*      ld a,16
04B3D0 CD D9 C4 04 0868*      call plyr_add_ammo
04B3D4 CD 10 CF 04 0869*      call sfx_play_gun_reload
04B3D8 3E 04       0870*      ld a,plyr_wpn_mg
04B3DA 21 4E C2 04 0871*      ld hl,plyr_wpns
04B3DE B6          0872*      or (hl)
04B3DF 77          0873*      ld (hl),a
04B3E0 3E 04       0874*      ld a,plyr_wpn_mg
04B3E2 32 4F C2 04 0875*      ld (plyr_wpn_active),a
04B3E6 CD B3 C3 04 0876*      call plyr_set_weapon_parameters
04B3EA             0877*  @hurt:
04B3EA C9          0878*      ret
04B3EB             0879*  @kill:
04B3EB C9          0880*      ret
04B3EC             0881*  @see:
04B3EC C9          0882*      ret
04B3ED             0883*  @move:
04B3ED C9          0884*      ret
04B3EE             0885*  @shoot:
04B3EE C9          0886*      ret
04B3EF             0887*  
04B3EF             0888*  GATLING_GUN:
04B3EF             0889*  ; behavior routine address lookup
04B3EF 04 B4 04    0890*      dl @init
04B3F2 17 B4 04    0891*      dl @use
04B3F5 37 B4 04    0892*      dl @hurt
04B3F8 38 B4 04    0893*      dl @kill
04B3FB 39 B4 04    0894*      dl @see
04B3FE 3A B4 04    0895*      dl @move
04B401 3B B4 04    0896*      dl @shoot
04B404             0897*  @init:
04B404 21 09 B4 04 0898*      ld hl,@data ; address for LDIR to copy from
04B408 C9          0899*      ret
04B409             0900*  @data:
04B409 64          0901*      db 100 ; sprite_health
04B40A 00          0902*      db 000 ; sprite_triggers_mask
04B40B 00          0903*      db 000 ; sprite_x
04B40C 00          0904*      db 000 ; sprite_y
04B40D 00          0905*      db 000 ; sprite_orientation
04B40E 00          0906*      db 000 ; sprite_animation
04B40F 00          0907*      db 000 ; sprite_anim_timer
04B410 01          0908*      db 001 ; sprite_move_timer
04B411 00          0909*      db 000 ; sprite_move_step
04B412 00          0910*      db 000 ; sprite_points
04B413 00          0911*      db 000 ; sprite_health_modifier
04B414 00          0912*      db 000 ; sprite_unassigned_0
04B415 00          0913*      db 000 ; sprite_unassigned_1
04B416 00          0914*      db 000 ; sprite_unassigned_2
04B417             0915*  @use:
04B417 CD D4 AF 04 0916*      call sprite_kill
04B41B 3E 20       0917*      ld a,32
04B41D CD D9 C4 04 0918*      call plyr_add_ammo
04B421 CD 10 CF 04 0919*      call sfx_play_gun_reload
04B425 3E 08       0920*      ld a,plyr_wpn_gg
04B427 21 4E C2 04 0921*      ld hl,plyr_wpns
04B42B B6          0922*      or (hl)
04B42C 77          0923*      ld (hl),a
04B42D 3E 08       0924*      ld a,plyr_wpn_gg
04B42F 32 4F C2 04 0925*      ld (plyr_wpn_active),a
04B433 CD B3 C3 04 0926*      call plyr_set_weapon_parameters
04B437             0927*  @hurt:
04B437 C9          0928*      ret
04B438             0929*  @kill:
04B438 C9          0930*      ret
04B439             0931*  @see:
04B439 C9          0932*      ret
04B43A             0933*  @move:
04B43A C9          0934*      ret
04B43B             0935*  @shoot:
04B43B C9          0936*      ret
04B43C             0937*  
04B43C             0938*  DOG_FOOD:
04B43C             0939*  ; behavior routine address lookup
04B43C 51 B4 04    0940*      dl @init
04B43F 64 B4 04    0941*      dl @use
04B442 6F B4 04    0942*      dl @hurt
04B445 70 B4 04    0943*      dl @kill
04B448 71 B4 04    0944*      dl @see
04B44B 72 B4 04    0945*      dl @move
04B44E 73 B4 04    0946*      dl @shoot
04B451             0947*  @init:
04B451 21 56 B4 04 0948*      ld hl,@data ; address for LDIR to copy from
04B455 C9          0949*      ret
04B456             0950*  @data:
04B456 64          0951*      db 100 ; sprite_health
04B457 00          0952*      db 000 ; sprite_triggers_mask
04B458 00          0953*      db 000 ; sprite_x
04B459 00          0954*      db 000 ; sprite_y
04B45A 00          0955*      db 000 ; sprite_orientation
04B45B 00          0956*      db 000 ; sprite_animation
04B45C 00          0957*      db 000 ; sprite_anim_timer
04B45D 01          0958*      db 001 ; sprite_move_timer
04B45E 00          0959*      db 000 ; sprite_move_step
04B45F 00          0960*      db 000 ; sprite_points
04B460 05          0961*      db 005 ; sprite_health_modifier
04B461 00          0962*      db 000 ; sprite_unassigned_0
04B462 00          0963*      db 000 ; sprite_unassigned_1
04B463 00          0964*      db 000 ; sprite_unassigned_2
04B464             0965*  @use:
04B464 FD 7E 0C    0966*      ld a,(iy+sprite_health_modifier)
04B467 CD 6C C4 04 0967*      call plyr_add_health
04B46B C3 D4 AF 04 0968*      jp sprite_kill
04B46F             0969*  @hurt:
04B46F C9          0970*      ret
04B470             0971*  @kill:
04B470 C9          0972*      ret
04B471             0973*  @see:
04B471 C9          0974*      ret
04B472             0975*  @move:
04B472 C9          0976*      ret
04B473             0977*  @shoot:
04B473 C9          0978*      ret
04B474             0979*  
04B474             0980*  GOLD_KEY:
04B474             0981*  ; behavior routine address lookup
04B474 89 B4 04    0982*      dl @init
04B477 9C B4 04    0983*      dl @use
04B47A 9D B4 04    0984*      dl @hurt
04B47D 9E B4 04    0985*      dl @kill
04B480 9F B4 04    0986*      dl @see
04B483 A0 B4 04    0987*      dl @move
04B486 A1 B4 04    0988*      dl @shoot
04B489             0989*  @init:
04B489 21 8E B4 04 0990*      ld hl,@data ; address for LDIR to copy from
04B48D C9          0991*      ret
04B48E             0992*  @data:
04B48E 64          0993*      db 100 ; sprite_health
04B48F 00          0994*      db 000 ; sprite_triggers_mask
04B490 00          0995*      db 000 ; sprite_x
04B491 00          0996*      db 000 ; sprite_y
04B492 00          0997*      db 000 ; sprite_orientation
04B493 00          0998*      db 000 ; sprite_animation
04B494 00          0999*      db 000 ; sprite_anim_timer
04B495 01          1000*      db 001 ; sprite_move_timer
04B496 00          1001*      db 000 ; sprite_move_step
04B497 00          1002*      db 000 ; sprite_points
04B498 00          1003*      db 000 ; sprite_health_modifier
04B499 00          1004*      db 000 ; sprite_unassigned_0
04B49A 00          1005*      db 000 ; sprite_unassigned_1
04B49B 00          1006*      db 000 ; sprite_unassigned_2
04B49C             1007*  @use:
04B49C C9          1008*      ret
04B49D             1009*  @hurt:
04B49D C9          1010*      ret
04B49E             1011*  @kill:
04B49E C9          1012*      ret
04B49F             1013*  @see:
04B49F C9          1014*      ret
04B4A0             1015*  @move:
04B4A0 C9          1016*      ret
04B4A1             1017*  @shoot:
04B4A1 C9          1018*      ret
04B4A2             1019*  
04B4A2             1020*  DOG:
04B4A2             1021*  ; behavior routine address lookup
04B4A2 B7 B4 04    1022*      dl @init
04B4A5 CA B4 04    1023*      dl @use
04B4A8 DA B4 04    1024*      dl @hurt
04B4AB F6 B4 04    1025*      dl @kill
04B4AE 0A B5 04    1026*      dl @see
04B4B1 0F B5 04    1027*      dl @move
04B4B4 2B B5 04    1028*      dl @shoot
04B4B7             1029*  @init:
04B4B7 21 BC B4 04 1030*      ld hl,@data ; address for LDIR to copy from
04B4BB C9          1031*      ret
04B4BC             1032*  @data:
04B4BC 32          1033*      db 050 ; sprite_health
04B4BD 00          1034*      db 000 ; sprite_triggers_mask
04B4BE 00          1035*      db 000 ; sprite_x
04B4BF 00          1036*      db 000 ; sprite_y
04B4C0 00          1037*      db 000 ; sprite_orientation
04B4C1 00          1038*      db 000 ; sprite_animation
04B4C2 00          1039*      db 000 ; sprite_anim_timer
04B4C3 01          1040*      db 001 ; sprite_move_timer
04B4C4 00          1041*      db 000 ; sprite_move_step
04B4C5 0A          1042*      db 010 ; sprite_points
04B4C6 F6          1043*      db -10 ; sprite_health_modifier
04B4C7 00          1044*      db 000 ; sprite_unassigned_0
04B4C8 00          1045*      db 000 ; sprite_unassigned_1
04B4C9 00          1046*      db 000 ; sprite_unassigned_2
04B4CA             1047*  @use:
04B4CA FD E5       1048*      push iy
04B4CC CD D4 CE 04 1049*      call sfx_play_dog_woof_single
04B4D0 FD E1       1050*      pop iy
04B4D2 FD 7E 0C    1051*      ld a,(iy+sprite_health_modifier)
04B4D5 CD 7C C4 04 1052*      call plyr_sub_health
04B4D9 C9          1053*      ret
04B4DA             1054*  @hurt:
04B4DA FD E5       1055*      push iy
04B4DC CD E0 CE 04 1056*      call sfx_play_dog_yelp
04B4E0 FD E1       1057*      pop iy
04B4E2             1058*  @nosound:
04B4E2 3E FF       1059*      ld a,255 ; kill player's shot
04B4E4 32 49 C2 04 1060*      ld (plyr_shot_status),a
04B4E8 3A 4D C2 04 1061*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04B4EC FD 86 02    1062*      add a,(iy+sprite_health)
04B4EF FD 77 02    1063*      ld (iy+sprite_health),a
04B4F2             1064*      ; ret p ; if health is positive, return
04B4F2 F2 16 B5 04 1065*      jp p,@do_move
04B4F6             1066*      ; otherwise fall through to kill sprite
04B4F6             1067*  @kill:
04B4F6 FD E5       1068*      push iy
04B4F8 CD E0 CE 04 1069*      call sfx_play_dog_yelp
04B4FC FD E1       1070*      pop iy
04B4FE FD 7E 0B    1071*      ld a,(iy+sprite_points)
04B501 CD CA C4 04 1072*      call plyr_mod_score
04B505 C3 D4 AF 04 1073*      jp sprite_kill
04B509 C9          1074*      ret
04B50A             1075*  @see:
04B50A 18 03       1076*      jr @move
04B50C             1077*  @seen:
04B50C AF          1078*      xor a
04B50D 3C          1079*      inc a
04B50E C9          1080*      ret
04B50F             1081*  @move:
04B50F FD 35 09    1082*      dec (iy+sprite_move_timer)
04B512 28 02       1083*      jr z,@do_move
04B514 18 F6       1084*      jr @seen
04B516             1085*  @do_move:
04B516 CD AD C7 04 1086*      call rand_8
04B51A E6 3F       1087*      and %00111111 ; between 0 and 63
04B51C             1088*      ; or %00100000  ; at least 32
04B51C F6 10       1089*      or %00010000  ; at least 16
04B51E FD 77 09    1090*      ld (iy+sprite_move_timer),a
04B521 CD 77 B0 04 1091*      call sprite_move_random
04B525 CD C8 CE 04 1092*      call sfx_play_dog_woof_double
04B529 18 E1       1093*      jr @seen
04B52B             1094*  @shoot:
04B52B C9          1095*      ret
04B52C             1096*  
04B52C             1097*  GERMAN_TROOPER:
04B52C             1098*  ; behavior routine address lookup
04B52C 41 B5 04    1099*      dl @init
04B52F 54 B5 04    1100*      dl @use
04B532 63 B5 04    1101*      dl @hurt
04B535 7F B5 04    1102*      dl @kill
04B538 95 B5 04    1103*      dl @see
04B53B B1 B5 04    1104*      dl @move
04B53E C4 B5 04    1105*      dl @shoot
04B541             1106*  @init:
04B541 21 46 B5 04 1107*      ld hl,@data ; address for LDIR to copy from
04B545 C9          1108*      ret
04B546             1109*  @data:
04B546 4B          1110*      db 075 ; sprite_health
04B547 00          1111*      db 000 ; sprite_triggers_mask
04B548 00          1112*      db 000 ; sprite_x
04B549 00          1113*      db 000 ; sprite_y
04B54A 00          1114*      db 000 ; sprite_orientation
04B54B 00          1115*      db 000 ; sprite_animation
04B54C 00          1116*      db 000 ; sprite_anim_timer
04B54D 01          1117*      db 001 ; sprite_move_timer
04B54E 00          1118*      db 000 ; sprite_move_step
04B54F 14          1119*      db 020 ; sprite_points
04B550 EC          1120*      db -20 ; sprite_health_modifier
04B551 00          1121*      db 000 ; sprite_unassigned_0
04B552 00          1122*      db 000 ; sprite_unassigned_1
04B553 00          1123*      db 000 ; sprite_unassigned_2
04B554             1124*  @use:
04B554 FD E5       1125*      push iy
04B556 CD 8C CE 04 1126*      call sfx_play_achtung
04B55A FD E1       1127*      pop iy
04B55C 3E FB       1128*      ld a,-5
04B55E CD 7C C4 04 1129*      call plyr_sub_health
04B562 C9          1130*      ret
04B563             1131*  @hurt:
04B563 FD E5       1132*      push iy
04B565 CD 69 BD 04 1133*      call sfx_play_random_hurt
04B569 FD E1       1134*      pop iy
04B56B             1135*  @nosound:
04B56B 3E FF       1136*      ld a,255 ; kill player's shot
04B56D 32 49 C2 04 1137*      ld (plyr_shot_status),a
04B571 3A 4D C2 04 1138*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04B575 FD 86 02    1139*      add a,(iy+sprite_health)
04B578 FD 77 02    1140*      ld (iy+sprite_health),a
04B57B             1141*      ; ret p ; if health is positive, return
04B57B F2 BE B5 04 1142*      jp p,@do_move
04B57F             1143*      ; otherwise fall through to kill sprite
04B57F             1144*  @kill:
04B57F FD E5       1145*      push iy
04B581 CD 88 CF 04 1146*      call sfx_play_wilhelm
04B585 FD E1       1147*      pop iy
04B587 FD 7E 0B    1148*      ld a,(iy+sprite_points)
04B58A CD CA C4 04 1149*      call plyr_mod_score
04B58E 3E 38       1150*      ld a,OBJ_ID_DEAD_GUARD
04B590 CD 24 B0 04 1151*      call sprite_spawn
04B594 C9          1152*      ret
04B595             1153*  @see:
04B595 FD 7E 03    1154*      ld a,(iy+sprite_triggers_mask)
04B598 E6 01       1155*      and sprite_trigger_see
04B59A C2 B1 B5 04 1156*      jp nz,@move
04B59E 3E 01       1157*      ld a,sprite_trigger_see
04B5A0 FD B6 03    1158*      or a,(iy+sprite_triggers_mask)
04B5A3 FD 77 03    1159*      ld (iy+sprite_triggers_mask),a
04B5A6 FD E5       1160*      push iy
04B5A8 CD 8C CE 04 1161*      call sfx_play_achtung
04B5AC FD E1       1162*      pop iy
04B5AE             1163*  @seen:
04B5AE AF          1164*      xor a
04B5AF 3C          1165*      inc a
04B5B0 C9          1166*      ret
04B5B1             1167*  @move:
04B5B1 FD 35 09    1168*      dec (iy+sprite_move_timer)
04B5B4 CC C4 B5 04 1169*      call z,@shoot
04B5B8 CC BE B5 04 1170*      call z,@do_move
04B5BC 18 F0       1171*      jr @seen
04B5BE             1172*  @do_move:
04B5BE CD 77 B0 04 1173*      call sprite_move_random
04B5C2 18 EA       1174*      jr @seen
04B5C4             1175*  @shoot:
04B5C4 CD F0 B6 04 1176*      call sprite_reset_move_timer
04B5C8 CD FC B6 04 1177*      call sprite_shoot
04B5CC C9          1178*      ret
04B5CD             1179*  
04B5CD             1180*  SS_GUARD:
04B5CD             1181*  ; behavior routine address lookup
04B5CD E2 B5 04    1182*      dl @init
04B5D0 F5 B5 04    1183*      dl @use
04B5D3 04 B6 04    1184*      dl @hurt
04B5D6 20 B6 04    1185*      dl @kill
04B5D9 36 B6 04    1186*      dl @see
04B5DC 52 B6 04    1187*      dl @move
04B5DF 65 B6 04    1188*      dl @shoot
04B5E2             1189*  @init:
04B5E2 21 E7 B5 04 1190*      ld hl,@data ; address for LDIR to copy from
04B5E6 C9          1191*      ret
04B5E7             1192*  @data:
04B5E7 64          1193*      db 100 ; sprite_health
04B5E8 00          1194*      db 000 ; sprite_triggers_mask
04B5E9 00          1195*      db 000 ; sprite_x
04B5EA 00          1196*      db 000 ; sprite_y
04B5EB 00          1197*      db 000 ; sprite_orientation
04B5EC 00          1198*      db 000 ; sprite_animation
04B5ED 00          1199*      db 000 ; sprite_anim_timer
04B5EE 01          1200*      db 001 ; sprite_move_timer
04B5EF 00          1201*      db 000 ; sprite_move_step
04B5F0 1E          1202*      db 030 ; sprite_points
04B5F1 E2          1203*      db -30 ; sprite_health_modifier
04B5F2 00          1204*      db 000 ; sprite_unassigned_0
04B5F3 00          1205*      db 000 ; sprite_unassigned_1
04B5F4 00          1206*      db 000 ; sprite_unassigned_2
04B5F5             1207*  @use:
04B5F5 FD E5       1208*      push iy
04B5F7 CD 40 CF 04 1209*      call sfx_play_schusstaffel
04B5FB FD E1       1210*      pop iy
04B5FD 3E F6       1211*      ld a,-10
04B5FF CD 7C C4 04 1212*      call plyr_sub_health
04B603 C9          1213*      ret
04B604             1214*  @hurt:
04B604 FD E5       1215*      push iy
04B606 CD 69 BD 04 1216*      call sfx_play_random_hurt
04B60A FD E1       1217*      pop iy
04B60C             1218*  @nosound:
04B60C 3E FF       1219*      ld a,255 ; kill player's shot
04B60E 32 49 C2 04 1220*      ld (plyr_shot_status),a
04B612 3A 4D C2 04 1221*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04B616 FD 86 02    1222*      add a,(iy+sprite_health)
04B619 FD 77 02    1223*      ld (iy+sprite_health),a
04B61C             1224*      ; ret p ; if health is positive, return
04B61C F2 5F B6 04 1225*      jp p,@do_move
04B620             1226*      ; otherwise fall through to kill sprite
04B620             1227*  @kill:
04B620 FD E5       1228*      push iy
04B622 CD 28 CF 04 1229*      call sfx_play_mein_leben
04B626 FD E1       1230*      pop iy
04B628 FD 7E 0B    1231*      ld a,(iy+sprite_points)
04B62B CD CA C4 04 1232*      call plyr_mod_score
04B62F 3E 38       1233*      ld a,OBJ_ID_DEAD_GUARD
04B631 CD 24 B0 04 1234*      call sprite_spawn
04B635 C9          1235*      ret
04B636             1236*  @see:
04B636 FD 7E 03    1237*      ld a,(iy+sprite_triggers_mask)
04B639 E6 01       1238*      and sprite_trigger_see
04B63B C2 52 B6 04 1239*      jp nz,@move
04B63F 3E 01       1240*      ld a,sprite_trigger_see
04B641 FD B6 03    1241*      or a,(iy+sprite_triggers_mask)
04B644 FD 77 03    1242*      ld (iy+sprite_triggers_mask),a
04B647 FD E5       1243*      push iy
04B649 CD 40 CF 04 1244*      call sfx_play_schusstaffel
04B64D FD E1       1245*      pop iy
04B64F             1246*  @seen:
04B64F AF          1247*      xor a
04B650 3C          1248*      inc a
04B651 C9          1249*      ret
04B652             1250*  @move:
04B652 FD 35 09    1251*      dec (iy+sprite_move_timer)
04B655 CC 65 B6 04 1252*      call z,@shoot
04B659 CC 5F B6 04 1253*      call z,@do_move
04B65D 18 F0       1254*      jr @seen
04B65F             1255*  @do_move:
04B65F CD 77 B0 04 1256*      call sprite_move_random
04B663 18 EA       1257*      jr @seen
04B665             1258*  @shoot:
04B665 CD F0 B6 04 1259*      call sprite_reset_move_timer
04B669 CD FC B6 04 1260*      call sprite_shoot
04B66D C9          1261*      ret
04B66E             1262*  
04B66E             1263*  DEAD_GUARD:
04B66E             1264*  ; behavior routine address lookup
04B66E 83 B6 04    1265*      dl @init
04B671 96 B6 04    1266*      dl @use
04B674 A8 B6 04    1267*      dl @hurt
04B677 A9 B6 04    1268*      dl @kill
04B67A AA B6 04    1269*      dl @see
04B67D AB B6 04    1270*      dl @move
04B680 AC B6 04    1271*      dl @shoot
04B683             1272*  @init:
04B683 21 88 B6 04 1273*      ld hl,@data ; address for LDIR to copy from
04B687 C9          1274*      ret
04B688             1275*  @data:
04B688 64          1276*      db 100 ; sprite_health
04B689 00          1277*      db 000 ; sprite_triggers_mask
04B68A 00          1278*      db 000 ; sprite_x
04B68B 00          1279*      db 000 ; sprite_y
04B68C 00          1280*      db 000 ; sprite_orientation
04B68D 00          1281*      db 000 ; sprite_animation
04B68E 00          1282*      db 000 ; sprite_anim_timer
04B68F 01          1283*      db 001 ; sprite_move_timer
04B690 00          1284*      db 000 ; sprite_move_step
04B691 00          1285*      db 000 ; sprite_points
04B692 00          1286*      db 000 ; sprite_health_modifier
04B693 00          1287*      db 000 ; sprite_unassigned_0
04B694 00          1288*      db 000 ; sprite_unassigned_1
04B695 00          1289*      db 000 ; sprite_unassigned_2
04B696             1290*  @use:
04B696 CD AD C7 04 1291*      call rand_8
04B69A E6 07       1292*      and %00000111
04B69C CD D9 C4 04 1293*      call plyr_add_ammo
04B6A0 CD 10 CF 04 1294*      call sfx_play_gun_reload
04B6A4 C3 D4 AF 04 1295*      jp sprite_kill
04B6A8             1296*  @hurt:
04B6A8 C9          1297*      ret
04B6A9             1298*  @kill:
04B6A9 C9          1299*      ret
04B6AA             1300*  @see:
04B6AA C9          1301*      ret
04B6AB             1302*  @move:
04B6AB C9          1303*      ret
04B6AC             1304*  @shoot:
04B6AC C9          1305*      ret
04B6AD             1306*  
04B6AD             1307*  EXPLOSION:
04B6AD             1308*  ; behavior routine address lookup
04B6AD C2 B6 04    1309*      dl @init
04B6B0 D5 B6 04    1310*      dl @use
04B6B3 E4 B6 04    1311*      dl @hurt
04B6B6 E5 B6 04    1312*      dl @kill
04B6B9 E6 B6 04    1313*      dl @see
04B6BC EE B6 04    1314*      dl @move
04B6BF EF B6 04    1315*      dl @shoot
04B6C2             1316*  @init:
04B6C2 21 C7 B6 04 1317*      ld hl,@data ; address for LDIR to copy from
04B6C6 C9          1318*      ret
04B6C7             1319*  @data:
04B6C7 64          1320*      db 100 ; sprite_health
04B6C8 00          1321*      db 000 ; sprite_triggers_mask
04B6C9 00          1322*      db 000 ; sprite_x
04B6CA 00          1323*      db 000 ; sprite_y
04B6CB 00          1324*      db 000 ; sprite_orientation
04B6CC 00          1325*      db 000 ; sprite_animation
04B6CD 05          1326*      db 005 ; sprite_anim_timer
04B6CE 01          1327*      db 001 ; sprite_move_timer
04B6CF 00          1328*      db 000 ; sprite_move_step
04B6D0 00          1329*      db 000 ; sprite_points
04B6D1 9C          1330*      db -100; sprite_health_modifier
04B6D2 00          1331*      db 000 ; sprite_unassigned_0
04B6D3 00          1332*      db 000 ; sprite_unassigned_1
04B6D4 00          1333*      db 000 ; sprite_unassigned_2
04B6D5             1334*  @use:
04B6D5 FD E5       1335*      push iy
04B6D7 CD EC CE 04 1336*      call sfx_play_explode
04B6DB FD E1       1337*      pop iy
04B6DD 3E 9C       1338*      ld a,-100
04B6DF CD 7C C4 04 1339*      call plyr_sub_health
04B6E3 C9          1340*      ret
04B6E4             1341*  @hurt:
04B6E4 C9          1342*      ret
04B6E5             1343*  @kill:
04B6E5 C9          1344*      ret
04B6E6             1345*  @see:
04B6E6 FD 35 08    1346*      dec (iy+sprite_anim_timer)
04B6E9 CC D4 AF 04 1347*      call z,sprite_kill
04B6ED C9          1348*      ret
04B6EE             1349*  @move:
04B6EE C9          1350*      ret
04B6EF             1351*  @shoot:
04B6EF C9          1352*      ret
04B6F0             1353*  
04B6F0             1354*  sprite_reset_move_timer:
04B6F0 CD AD C7 04 1355*      call rand_8
04B6F4 E6 3F       1356*      and %00111111 ; between 0 and 63
04B6F6 F6 10       1357*      or %00010000  ; at least 16
04B6F8 FD 77 09    1358*      ld (iy+sprite_move_timer),a
04B6FB C9          1359*      ret
04B6FC             1360*  
04B6FC             1361*  ; determines whether an enemy sprite can shoot at the player
04B6FC             1362*  ; and handles the shooting mechanics if so
04B6FC             1363*  ; inputs: iy pointed at sprite record
04B6FC             1364*  ; returns: a = 0 if the sprite didn't shoot, 1 if it did
04B6FC             1365*  ; destroys: probably everything
04B6FC             1366*  sprite_shoot:
04B6FC             1367*  ; check whether sprite has the same x or y coordinate as player
04B6FC FD 27 04    1368*      ld hl,(iy+sprite_x) ; h,l = sprite y,x position
04B6FF ED 5B 39 C2 1369*      ld de,(cur_x) ; d,e = player y,x position
       04          
04B704 7D          1370*      ld a,l ; compare x
04B705 BB          1371*      cp e
04B706 28 06       1372*      jr z,@shoot
04B708 7C          1373*      ld a,h ; compare y
04B709 BA          1374*      cp d
04B70A 28 02       1375*      jr z,@shoot
04B70C AF          1376*      xor a ; no shot so return zero
04B70D C9          1377*      ret
04B70E             1378*  @shoot:
04B70E CD 70 CF 04 1379*      call sfx_play_shot_pistol
04B712             1380*  ; generate randomized fractional damage multiplier
04B712 CD AD C7 04 1381*      call rand_8 ; a is a random fraction
04B716 5F          1382*      ld e,a
04B717 FD 7E 0C    1383*      ld a,(iy+sprite_health_modifier)
04B71A ED 44       1384*      neg ; setting up an unsigned mlt
04B71C 57          1385*      ld d,a
04B71D ED 5C       1386*      mlt de ; d.e is an 8.8 fixed point number
04B71F 7A          1387*      ld a,d ; ... we only want the integer portion
04B720 ED 44       1388*      neg ; back to signed
04B722 CD 7C C4 04 1389*      call plyr_sub_health
04B726 3E 01       1390*      ld a,1
04B728 C9          1391*      ret
04B729             1392*  
04B729 00          1393*  see_orientation: db 0x00
04B72A             1394*  ; cycle through all cells visible to the player from the current position
04B72A             1395*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04B72A             1396*  ; inputs: cur_x, cur_y,
04B72A             1397*  ; outputs: player-aware enemies
04B72A             1398*  ; destroys: everything
04B72A             1399*  sprites_see_plyr:
04B72A             1400*  ; ; DEBUG: set up loop timer
04B72A             1401*  ;     call prt_loop_reset
04B72A             1402*  ; ; END DEBUG
04B72A             1403*  ; ; DEBUG: start loop timer
04B72A             1404*  ;     call prt_loop_start
04B72A             1405*  ; ; END DEBUG
04B72A             1406*  
04B72A             1407*  ; intialize orientation
04B72A AF          1408*      xor a
04B72B 32 29 B7 04 1409*      ld (see_orientation),a
04B72F             1410*  @loop_orientation:
04B72F             1411*  ; get current map position and camera orientation
04B72F ED 5B 39 C2 1412*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04B734             1413*      ; 0-1 prt ticks, 4 loops
04B734 CD 0E 71 04 1414*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04B738             1415*  ; get cell_views address for this cell and orientation
04B738 3A 29 B7 04 1416*      ld a,(see_orientation)
04B73C 5F          1417*      ld e,a
04B73D 16 06       1418*      ld d,6 ; 6 bytes per orientation
04B73F ED 5C       1419*      mlt de ; de = orientation offset
04B741 EB          1420*      ex de,hl ; hl = orientation offset
04B742 06 18       1421*      ld b,24 ; 24 bytes per cell in cell_views lut
04B744 ED 4C       1422*      mlt bc ; bc = offset from base address of cell_views lut
04B746 09          1423*      add hl,bc ; hl = total offset from cell_views base address
04B747 EB          1424*      ex de,hl ; because we can't add iy to hl
04B748 FD 21 00 E4 1425*      ld iy,cell_views ; base address of cell_views lut
       B7          
04B74D FD 19       1426*      add iy,de ; iy = cell_views address
04B74F FD 22 92 73 1427*      ld (cur_cell_views),iy
       04          
04B754             1428*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04B754 01 00 46 28 1429*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04B758 AF          1430*      xor a ; poly_id
04B759 32 8E 73 04 1431*      ld (to_poly_id),a
04B75D             1432*  @loop:
04B75D ED 43 69 B7 1433*      ld (@bit_iy+2),bc
       04          
04B762 FD 2A 92 73 1434*      ld iy,(cur_cell_views)
       04          
04B767             1435*  @bit_iy:
04B767 FD CB 00 46 1436*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04B76B 28 2E       1437*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04B76D             1438*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04B76D 3A 8E 73 04 1439*      ld a,(to_poly_id)
04B771 4F          1440*      ld c,a ; poly_id
04B772 3A 29 B7 04 1441*      ld a,(see_orientation)
04B776 CD E6 75 04 1442*      call get_polys_deltas ; d,e = y,x deltas
04B77A 3A 39 C2 04 1443*      ld a,(cur_x)
04B77E 83          1444*      add a,e
04B77F 5F          1445*      ld e,a
04B780 3A 3A C2 04 1446*      ld a,(cur_y)
04B784 82          1447*      add a,d
04B785 57          1448*      ld d,a
04B786 CD 0E 71 04 1449*      call get_cell_from_coords
04B78A DD 7E 03    1450*      ld a,(ix+map_sprite_id)
04B78D FE FF       1451*      cp 0xFF ; no sprite
04B78F 28 0A       1452*      jr z,@next_poly
04B791 CD B3 AF 04 1453*      call sprite_set_pointer
04B795 3E 04       1454*      ld a,sp_see
04B797 CD F0 B0 04 1455*      call do_sprite_behavior
04B79B             1456*  @next_poly:
04B79B ED 4B 69 B7 1457*      ld bc,(@bit_iy+2)
       04          
04B7A0 3A 8E 73 04 1458*      ld a,(to_poly_id)
04B7A4 3C          1459*      inc a ; a is next poly_id
04B7A5 32 8E 73 04 1460*      ld (to_poly_id),a
04B7A9 FE 30       1461*      cp num_polys
04B7AB 28 0F       1462*      jr z,@next_orientation
04B7AD 3E 08       1463*      ld a,8
04B7AF 80          1464*      add a,b
04B7B0 47          1465*      ld b,a ; bit tested codes to 0x46 + b/8
04B7B1 FE 86       1466*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04B7B3 C2 5D B7 04 1467*      jp nz,@loop
04B7B7 06 46       1468*      ld b,0x46
04B7B9 0C          1469*      inc c ; iy address offset
04B7BA 18 A1       1470*      jr @loop
04B7BC             1471*  @next_orientation:
04B7BC 3A 29 B7 04 1472*      ld a,(see_orientation)
04B7C0 3C          1473*      inc a
04B7C1 E6 03       1474*      and 3 ; modulo 4
04B7C3 32 29 B7 04 1475*      ld (see_orientation),a
04B7C7 C2 2F B7 04 1476*      jp nz,@loop_orientation
04B7CB             1477*  
04B7CB             1478*  ; full loop 1-2 prt ticks
04B7CB             1479*  ; ; DEBUG: stop loop timer
04B7CB             1480*  ;     call prt_loop_stop
04B7CB             1481*  ; ; END DEBUG
04B7CB C9          1482*      ret
04B7CC             0024   	include "src/asm/vdu.asm"
04B7CC             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04B7CC             0002*  ; VDU 0: Null (no operation)
04B7CC             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04B7CC             0004*  ; VDU 2: Enable “printer” §§
04B7CC             0005*  ; VDU 3: Disable “printer” §§
04B7CC             0006*  ; VDU 4: Write text at text cursor
04B7CC             0007*  ; VDU 5: Write text at graphics cursor
04B7CC             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04B7CC             0009*  ; VDU 7: Make a short beep (BEL)
04B7CC             0010*  ; VDU 8: Move cursor back one character
04B7CC             0011*  ; VDU 9: Move cursor forward one character
04B7CC             0012*  ; VDU 10: Move cursor down one line
04B7CC             0013*  ; VDU 11: Move cursor up one line
04B7CC             0014*  ; VDU 12: Clear text area (CLS)
04B7CC             0015*  ; VDU 13: Carriage return
04B7CC             0016*  ; VDU 14: Page mode On *
04B7CC             0017*  ; VDU 15: Page mode Off *
04B7CC             0018*  ; VDU 16: Clear graphics area (CLG)
04B7CC             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04B7CC             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04B7CC             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04B7CC             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04B7CC             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04B7CC             0024*  ; VDU 22, n: Select screen mode (MODE n)
04B7CC             0025*  ; VDU 23, n: Re-program display character / System Commands
04B7CC             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04B7CC             0027*  ; VDU 25, mode, x; y;: PLOT command
04B7CC             0028*  ; VDU 26: Reset graphics and text viewports **
04B7CC             0029*  ; VDU 27, char: Output character to screen §
04B7CC             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04B7CC             0031*  ; VDU 29, x; y;: Set graphics origin
04B7CC             0032*  ; VDU 30: Home cursor
04B7CC             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04B7CC             0034*  ; VDU 127: Backspace
04B7CC             0035*  
04B7CC             0036*  ; VDU 0: Null (no operation)
04B7CC             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04B7CC             0038*  ;     This may be useful for padding out a VDU command sequence,
04B7CC             0039*  ;     or for inserting a placeholder for a command that will be added later.
04B7CC             0040*  ; inputs: none
04B7CC             0041*  ; outputs: an empty byte somewhere in VDU
04B7CC             0042*  ; destroys: a
04B7CC             0043*  vdu_null:
04B7CC AF          0044*      xor a
04B7CD 5B D7       0045*  	rst.lil $10
04B7CF C9          0046*  	ret
04B7D0             0047*  
04B7D0             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04B7D0             0049*  ;     Ensures that the next character received by the VDP is sent through to
04B7D0             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04B7D0             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04B7D0             0052*  ;     intended to be displayed on the screen. It allows characters that would
04B7D0             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04B7D0             0054*  ;     If the “printer” has not been enabled then this command will just discard
04B7D0             0055*  ;     the next byte sent to the VDP.
04B7D0             0056*  ; inputs: a is the ascii code of the character to send
04B7D0             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04B7D0             0058*  ; outputs: a character on the serial terminal connected to the USB port
04B7D0             0059*  ;           and the same character on the screen at the current text cursor location
04B7D0             0060*  ; QUESTION: does it also advance the text cursor?
04B7D0             0061*  ; destroys: hl, bc
04B7D0             0062*  vdu_char_to_printer:
04B7D0 32 E0 B7 04 0063*  	ld (@arg),a
04B7D4 21 DF B7 04 0064*  	ld hl,@cmd
04B7D8 01 02 00 00 0065*  	ld bc,@end-@cmd
04B7DC 5B DF       0066*  	rst.lil $18
04B7DE C9          0067*  	ret
04B7DF 01          0068*  @cmd: db 1
04B7E0 00          0069*  @arg: db 0
04B7E1             0070*  @end:
04B7E1             0071*  
04B7E1             0072*  ; VDU 2: Enable “printer” §§
04B7E1             0073*  ;     Enables the “printer”.
04B7E1             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04B7E1             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04B7E1             0076*  ;     this port is used for power, but it can also be used to send and
04B7E1             0077*  ;     receive data to and from the VDP.
04B7E1             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04B7E1             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04B7E1             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04B7E1             0081*  ;     use the VDU 1 command.
04B7E1             0082*  ;     The VDP will not send through other control codes to the printer,
04B7E1             0083*  ;     and will will not send through data it receives as part of other commands.
04B7E1             0084*  vdu_enable_printer:
04B7E1 3E 02       0085*      ld a,2
04B7E3 5B D7       0086*  	rst.lil $10
04B7E5 C9          0087*  	ret
04B7E6             0088*  
04B7E6             0089*  ; VDU 3: Disable “printer” §§
04B7E6             0090*  ; inputs: none
04B7E6             0091*  ; outputs: a USB port bereft of communication with the VDP
04B7E6             0092*  ; destroys: a
04B7E6             0093*  vdu_disable_printer:
04B7E6 3E 03       0094*      ld a,3
04B7E8 5B D7       0095*  	rst.lil $10
04B7EA C9          0096*  	ret
04B7EB             0097*  
04B7EB             0098*  ; VDU 4: Write text at text cursor
04B7EB             0099*  ;     This causes text to be written at the current text cursor position.
04B7EB             0100*  ;     This is the default mode for text display.
04B7EB             0101*  ;     Text is written using the current text foreground and background colours.
04B7EB             0102*  ; inputs: a is the character to write to the screen
04B7EB             0103*  ; prerequisites: the text cursor at the intended position on screen
04B7EB             0104*  ; outputs: prints the character and moves text cursor right one position
04B7EB             0105*  ; destroys: a, hl, bc
04B7EB             0106*  vdu_char_to_text_cursor:
04B7EB 32 FB B7 04 0107*  	ld (@arg),a
04B7EF 21 FA B7 04 0108*  	ld hl,@cmd
04B7F3 01 02 00 00 0109*  	ld bc,@end-@cmd
04B7F7 5B DF       0110*  	rst.lil $18
04B7F9 C9          0111*  	ret
04B7FA 04          0112*  @cmd: db 4
04B7FB 00          0113*  @arg: db 0
04B7FC             0114*  @end:
04B7FC             0115*  
04B7FC             0116*  ; VDU 5: Write text at graphics cursor
04B7FC             0117*  ;     This causes text to be written at the current graphics cursor position.
04B7FC             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04B7FC             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04B7FC             0120*  ;     or for positioning text at a specific location on the screen.
04B7FC             0121*  ;     Characters are plotted using the current graphics foreground colour,
04B7FC             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04B7FC             0123*  ;     The character background is transparent, and will not overwrite any
04B7FC             0124*  ;     graphics that are already present at the character’s location.
04B7FC             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04B7FC             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04B7FC             0127*  ;     graphics background colour.
04B7FC             0128*  ; inputs: a is the character to write to the screen
04B7FC             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04B7FC             0130*  ; outputs: see the name of the function
04B7FC             0131*  ; destroys: a, hl, bc
04B7FC             0132*  vdu_char_to_gfx_cursor:
04B7FC 32 0C B8 04 0133*  	ld (@arg),a
04B800 21 0B B8 04 0134*  	ld hl,@cmd
04B804 01 02 00 00 0135*  	ld bc,@end-@cmd
04B808 5B DF       0136*  	rst.lil $18
04B80A C9          0137*  	ret
04B80B 05          0138*  @cmd: db 5
04B80C 00          0139*  @arg: db 0
04B80D             0140*  @end:
04B80D             0141*  
04B80D             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04B80D             0143*  ;     This enables the screen, and re-enables VDU command processing,
04B80D             0144*  ;     reversing the effect of VDU 21.
04B80D             0145*  ; inputs: none
04B80D             0146*  ; outputs: a functioning screen and VDU
04B80D             0147*  ; destroys: a
04B80D             0148*  vdu_enable_screen:
04B80D 3E 06       0149*      ld a,6
04B80F 5B D7       0150*  	rst.lil $10
04B811 C9          0151*  	ret
04B812             0152*  
04B812             0153*  ; PASSES
04B812             0154*  ; VDU 7: Make a short beep (BEL)
04B812             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04B812             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04B812             0157*  ; inputs: none
04B812             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04B812             0159*  ; destroys: a
04B812             0160*  vdu_beep:
04B812 3E 07       0161*      ld a,7
04B814 5B D7       0162*  	rst.lil $10
04B816 C9          0163*  	ret
04B817             0164*  
04B817             0165*  ; VDU 8: Move cursor back one character
04B817             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04B817             0167*  ;     By default, when at the start of a line it will move to the end of
04B817             0168*  ;     the previous line (as defined by the current text viewport).
04B817             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04B817             0170*  ;     The cursor remains constrained to the current text viewport.
04B817             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04B817             0172*  ;     The cursor is just moved left by one character width.
04B817             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04B817             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04B817             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04B817             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04B817             0177*  vdu_cursor_back:
04B817 3E 08       0178*      ld a,8
04B819 5B D7       0179*  	rst.lil $10
04B81B C9          0180*  	ret
04B81C             0181*  
04B81C             0182*  ; VDU 9: Move cursor forward one character
04B81C             0183*  vdu_cursor_forward:
04B81C 3E 09       0184*      ld a,9
04B81E 5B D7       0185*  	rst.lil $10
04B820 C9          0186*  	ret
04B821             0187*  
04B821             0188*  ; VDU 10: Move cursor down one line
04B821             0189*  vdu_cursor_down:
04B821 3E 0A       0190*      ld a,10
04B823 5B D7       0191*  	rst.lil $10
04B825 C9          0192*  	ret
04B826             0193*  
04B826             0194*  ; VDU 11: Move cursor up one line
04B826             0195*  vdu_cursor_up:
04B826 3E 0B       0196*      ld a,11
04B828 5B D7       0197*  	rst.lil $10
04B82A C9          0198*  	ret
04B82B             0199*  
04B82B             0200*  ; VDU 12: Clear text area (CLS)
04B82B             0201*  vdu_cls:
04B82B 3E 0C       0202*      ld a,12
04B82D 5B D7       0203*  	rst.lil $10
04B82F C9          0204*  	ret
04B830             0205*  
04B830             0206*  ; VDU 13: Carriage return
04B830             0207*  vdu_cr:
04B830 3E 0D       0208*      ld a,13
04B832 5B D7       0209*  	rst.lil $10
04B834 C9          0210*  	ret
04B835             0211*  
04B835             0212*  ; VDU 14: Page mode On *
04B835             0213*  vdu_page_on:
04B835 3E 0E       0214*      ld a,14
04B837 5B D7       0215*  	rst.lil $10
04B839 C9          0216*  	ret
04B83A             0217*  
04B83A             0218*  ; VDU 15: Page mode Off *
04B83A             0219*  vdu_page_off:
04B83A 3E 0F       0220*      ld a,15
04B83C 5B D7       0221*  	rst.lil $10
04B83E C9          0222*  	ret
04B83F             0223*  
04B83F             0224*  ; VDU 16: Clear graphics area (CLG)
04B83F             0225*  vdu_clg:
04B83F 3E 10       0226*      ld a,16
04B841 5B D7       0227*  	rst.lil $10
04B843 C9          0228*  	ret
04B844             0229*  
04B844             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04B844             0231*  vdu_colour_text:
04B844 32 54 B8 04 0232*  	ld (@arg),a
04B848 21 53 B8 04 0233*  	ld hl,@cmd
04B84C 01 02 00 00 0234*  	ld bc,@end-@cmd
04B850 5B DF       0235*  	rst.lil $18
04B852 C9          0236*  	ret
04B853 11          0237*  @cmd: db 17
04B854 00          0238*  @arg: db 0
04B855             0239*  @end:
04B855             0240*  
04B855             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04B855             0242*  ; inputs: a is the plotting mode, c is the colour
04B855             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04B855             0244*  vdu_gcol_fg:
04B855             0245*  ; This command will set both the current graphics colour,
04B855             0246*  ; and the current graphics plotting mode.
04B855             0247*  ; As with VDU 17 the colour number will set the foreground colour
04B855             0248*  ; if it is in the range 0-127, or the background colour if it is
04B855             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04B855             0250*  ; Support for different plotting modes on Agon is currently very limited.
04B855             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04B855             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04B855             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04B855             0254*  ; very limited support for mode 4, which will invert the colour of any
04B855             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04B855             0256*  ; and may not work as expected.
04B855             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04B855             0258*  ; original VDU system, may be added in the future.
04B855             0259*  ; This command is identical to the BASIC GCOL keyword.
04B855 32 6A B8 04 0260*  	ld (@mode),a
04B859 79          0261*      ld a,c
04B85A 32 6B B8 04 0262*      ld (@col),a
04B85E 21 69 B8 04 0263*  	ld hl,@cmd
04B862 01 03 00 00 0264*  	ld bc,@end-@cmd
04B866 5B DF       0265*  	rst.lil $18
04B868 C9          0266*  	ret
04B869 12          0267*  @cmd: db 18
04B86A 00          0268*  @mode: db 0
04B86B 00          0269*  @col: db 0
04B86C             0270*  @end:
04B86C             0271*  
04B86C             0272*  vdu_gcol_bg:
04B86C 32 83 B8 04 0273*  	ld (@mode),a
04B870 79          0274*      ld a,c
04B871 C6 80       0275*      add a,128
04B873 32 84 B8 04 0276*      ld (@col),a
04B877 21 82 B8 04 0277*  	ld hl,@cmd
04B87B 01 03 00 00 0278*  	ld bc,@end-@cmd
04B87F 5B DF       0279*  	rst.lil $18
04B881 C9          0280*  	ret
04B882 12          0281*  @cmd:  db 18
04B883 00          0282*  @mode: db 0
04B884 00          0283*  @col:  db 0
04B885             0284*  @end:
04B885             0285*  
04B885             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04B885             0287*  ;     This command sets the colour palette, by mapping a logical colour
04B885             0288*  ;     to a physical colour. This is useful for defining custom colours,
04B885             0289*  ;     or for redefining the default colours.
04B885             0290*  ;     If the physical colour number is given as 255 then the colour will
04B885             0291*  ;     be defined using the red, green, and blue values given. If the physical
04B885             0292*  ;     colour number is given as any other value then the colour will be defined
04B885             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04B885             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04B885             0295*  ;     must still be provided, but will be ignored.
04B885             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04B885             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04B885             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04B885             0299*  ;     requested. The nearest colour will be chosen.
04B885             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04B885             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04B885             0302*  vdu_def_log_colour:
04B885 32 AA B8 04 0303*  	ld (@physical),a
04B889 47          0304*      ld b,a
04B88A 32 A9 B8 04 0305*      ld (@logical),a
04B88E 79          0306*      ld a,c
04B88F 32 AB B8 04 0307*      ld (@red),a
04B893 7C          0308*      ld a,h
04B894 32 AC B8 04 0309*      ld (@green),a
04B898 7D          0310*      ld a,l
04B899 32 AD B8 04 0311*      ld (@blue),a
04B89D 21 A8 B8 04 0312*  	ld hl,@cmd
04B8A1 01 06 00 00 0313*  	ld bc,@end-@cmd
04B8A5 5B DF       0314*  	rst.lil $18
04B8A7 C9          0315*  	ret
04B8A8 13          0316*  @cmd: db 19
04B8A9 00          0317*  @logical: db 0
04B8AA 00          0318*  @physical: db 0
04B8AB 00          0319*  @red: db 0
04B8AC 00          0320*  @green: db 0
04B8AD 00          0321*  @blue: db 0
04B8AE             0322*  @end:
04B8AE             0323*  
04B8AE             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04B8AE             0325*  vdu_reset_gfx:
04B8AE 3E 14       0326*      ld a,20
04B8B0 5B D7       0327*  	rst.lil $10
04B8B2 C9          0328*  	ret
04B8B3             0329*  
04B8B3             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04B8B3             0331*  ; except for VDU 1 and VDU 6) §§
04B8B3             0332*  vdu_disable_screen:
04B8B3 3E 15       0333*      ld a,21
04B8B5 5B D7       0334*  	rst.lil $10
04B8B7 C9          0335*  	ret
04B8B8             0336*  
04B8B8             0337*  ; VDU 22, n: Select screen mode (MODE n)
04B8B8             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04B8B8             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04B8B8             0340*  ; Screen modes
04B8B8             0341*  ; Modes over 128 are double-buffered
04B8B8             0342*  ; From Version 1.04 or greater
04B8B8             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04B8B8             0344*  ; 0 	640 	480 	16 	    60hz
04B8B8             0345*  ; * 1 	640 	480 	4 	    60hz
04B8B8             0346*  ; 2 	640 	480 	2 	    60hz
04B8B8             0347*  ; 3 	640 	240 	64 	    60hz
04B8B8             0348*  ; 4 	640 	240 	16 	    60hz
04B8B8             0349*  ; 5 	640 	240 	4 	    60hz
04B8B8             0350*  ; 6 	640 	240 	2 	    60hz
04B8B8             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04B8B8             0352*  ; 8 	320 	240 	64 	    60hz
04B8B8             0353*  ; 9 	320 	240 	16 	    60hz
04B8B8             0354*  ; 10 	320 	240 	4 	    60hz
04B8B8             0355*  ; 11 	320 	240 	2 	    60hz
04B8B8             0356*  ; 12 	320 	200 	64 	    70hz
04B8B8             0357*  ; 13 	320 	200 	16 	    70hz
04B8B8             0358*  ; 14 	320 	200 	4 	    70hz
04B8B8             0359*  ; 15 	320 	200 	2 	    70hz
04B8B8             0360*  ; 16 	800 	600 	4 	    60hz
04B8B8             0361*  ; 17 	800 	600 	2 	    60hz
04B8B8             0362*  ; 18 	1024 	768 	2 	    60hz
04B8B8             0363*  ; 129 	640 	480 	4 	    60hz
04B8B8             0364*  ; 130 	640 	480 	2 	    60hz
04B8B8             0365*  ; 132 	640 	240 	16 	    60hz
04B8B8             0366*  ; 133 	640 	240 	4 	    60hz
04B8B8             0367*  ; 134 	640 	240 	2 	    60hz
04B8B8             0368*  ; 136 	320 	240 	64 	    60hz
04B8B8             0369*  ; 137 	320 	240 	16 	    60hz
04B8B8             0370*  ; 138 	320 	240 	4 	    60hz
04B8B8             0371*  ; 139 	320 	240 	2 	    60hz
04B8B8             0372*  ; 140 	320 	200 	64 	    70hz
04B8B8             0373*  ; 141 	320 	200 	16 	    70hz
04B8B8             0374*  ; 142 	320 	200 	4 	    70hz
04B8B8             0375*  ; 143 	320 	200 	2 	    70hz
04B8B8             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04B8B8             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04B8B8             0378*  ; change to the requested mode.
04B8B8             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04B8B8             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04B8B8             0381*  vdu_set_screen_mode:
04B8B8 32 C8 B8 04 0382*  	ld (@arg),a
04B8BC 21 C7 B8 04 0383*  	ld hl,@cmd
04B8C0 01 02 00 00 0384*  	ld bc,@end-@cmd
04B8C4 5B DF       0385*  	rst.lil $18
04B8C6 C9          0386*  	ret
04B8C7 16          0387*  @cmd: db 22 ; set screen mode
04B8C8 00          0388*  @arg: db 0  ; screen mode parameter
04B8C9             0389*  @end:
04B8C9             0390*  
04B8C9             0391*  ; VDU 23, n: Re-program display character / System Commands
04B8C9             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04B8C9             0393*  vdu_define_character:
04B8C9 32 E5 B8 04 0394*  	ld (@ascii),a
04B8CD 11 E6 B8 04 0395*  	ld de,@data
04B8D1 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04B8D3             0397*  @loop:
04B8D3 7E          0398*  	ld a,(hl)
04B8D4 12          0399*  	ld (de),a
04B8D5 23          0400*  	inc hl
04B8D6 13          0401*  	inc de
04B8D7 10 FA       0402*  	djnz @loop
04B8D9 21 E4 B8 04 0403*  	ld hl,@cmd
04B8DD 01 0A 00 00 0404*  	ld bc,@end-@cmd
04B8E1 5B DF       0405*  	rst.lil $18
04B8E3 C9          0406*  	ret
04B8E4 17          0407*  @cmd:   db 23
04B8E5 00          0408*  @ascii: db 0
04B8E6             0409*  @data:  ds 8
04B8EE             0410*  @end:
04B8EE             0411*  
04B8EE             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04B8EE             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04B8EE             0414*  ; 	because we have turned off logical screen scaling
04B8EE             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04B8EE             0416*  ; outputs; nothing
04B8EE             0417*  ; destroys: a might make it out alive
04B8EE             0418*  vdu_set_gfx_viewport:
04B8EE ED 43 0E B9 0419*      ld (@x0),bc
       04          
04B8F3 FD 22 10 B9 0420*      ld (@y1),iy
       04          
04B8F8 DD 22 12 B9 0421*  	ld (@x1),ix
       04          
04B8FD ED 53 14 B9 0422*  	ld (@y0),de
       04          
04B902 21 0D B9 04 0423*  	ld hl,@cmd
04B906 01 09 00 00 0424*  	ld bc,@end-@cmd
04B90A 5B DF       0425*  	rst.lil $18
04B90C C9          0426*  	ret
04B90D 18          0427*  @cmd:   db 24 ; set graphics viewport command
04B90E 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04B910 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04B912 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04B914 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04B916 00          0432*  @end:   db 0x00	  ; padding
04B917             0433*  
04B917             0434*  ; VDU 25, mode, x; y;: PLOT command
04B917             0435*  ; Implemented in vdu_plot.asm
04B917             0436*  
04B917             0437*  ; VDU 26: Reset graphics and text viewports **
04B917             0438*  vdu_reset_txt_gfx_view:
04B917 3E 1A       0439*      ld a,26
04B919 5B D7       0440*  	rst.lil $10
04B91B C9          0441*  	ret
04B91C             0442*  
04B91C             0443*  ; PASSES
04B91C             0444*  ; VDU 27, char: Output character to screen §
04B91C             0445*  ; inputs: a is the ascii code of the character to draw
04B91C             0446*  vdu_draw_char:
04B91C 32 2C B9 04 0447*  	ld (@arg),a
04B920 21 2B B9 04 0448*  	ld hl,@cmd
04B924 01 02 00 00 0449*  	ld bc,@end-@cmd
04B928 5B DF       0450*  	rst.lil $18
04B92A C9          0451*  	ret
04B92B 1B          0452*  @cmd: db 27
04B92C 00          0453*  @arg: db 0  ; ascii code of character to draw
04B92D             0454*  @end:
04B92D             0455*  
04B92D             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04B92D             0457*  ; MIND THE LITTLE-ENDIANESS
04B92D             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04B92D             0459*  ; outputs; nothing
04B92D             0460*  ; destroys: a might make it out alive
04B92D             0461*  vdu_set_txt_viewport:
04B92D ED 43 43 B9 0462*      ld (@lb),bc
       04          
04B932 ED 53 45 B9 0463*  	ld (@rt),de
       04          
04B937 21 42 B9 04 0464*  	ld hl,@cmd
04B93B 01 05 00 00 0465*  	ld bc,@end-@cmd
04B93F 5B DF       0466*  	rst.lil $18
04B941 C9          0467*  	ret
04B942 1C          0468*  @cmd:   db 28 ; set text viewport command
04B943 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04B945 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04B947 00          0471*  @end:   db 0x00	  ; padding
04B948             0472*  
04B948             0473*  ; PASSES
04B948             0474*  ; VDU 29, x; y;: Set graphics origin
04B948             0475*  ; inputs: bc,de x,y coordinates
04B948             0476*  vdu_set_gfx_origin:
04B948 ED 43 5E B9 0477*      ld (@x0),bc
       04          
04B94D ED 53 60 B9 0478*      ld (@y0),de
       04          
04B952 21 5D B9 04 0479*  	ld hl,@cmd
04B956 01 05 00 00 0480*  	ld bc,@end-@cmd
04B95A 5B DF       0481*  	rst.lil $18
04B95C C9          0482*  	ret
04B95D 1D          0483*  @cmd:	db 29
04B95E 00 00       0484*  @x0: 	dw 0
04B960 00 00       0485*  @y0: 	dw 0
04B962 00          0486*  @end: 	db 0 ; padding
04B963             0487*  
04B963             0488*  ; PASSES
04B963             0489*  ; VDU 30: Home cursor
04B963             0490*  vdu_home_cursor:
04B963 3E 1E       0491*      ld a,30
04B965 5B D7       0492*  	rst.lil $10
04B967 C9          0493*  	ret
04B968             0494*  
04B968             0495*  ; PASSES
04B968             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04B968             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04B968             0498*  vdu_move_cursor:
04B968 ED 43 79 B9 0499*      ld (@x0),bc
       04          
04B96D 21 78 B9 04 0500*  	ld hl,@cmd
04B971 01 03 00 00 0501*  	ld bc,@end-@cmd
04B975 5B DF       0502*  	rst.lil $18
04B977 C9          0503*  	ret
04B978 1F          0504*  @cmd: 	db 31
04B979 00          0505*  @x0:	db 0
04B97A 00          0506*  @y0: 	db 0
04B97B 00          0507*  @end: 	db 0 ; padding
04B97C             0508*  
04B97C             0509*  
04B97C             0510*  ; VDU 127: Backspace
04B97C             0511*  vdu_bksp:
04B97C 3E 7F       0512*      ld a,127
04B97E 5B D7       0513*  	rst.lil $10
04B980 C9          0514*  	ret
04B981             0515*  
04B981             0516*  ; activate a bitmap in preparation to draw it
04B981             0517*  ; inputs: a holding the bitmap index
04B981             0518*  vdu_bmp_select:
04B981 32 93 B9 04 0519*  	ld (@bmp),a
04B985 21 90 B9 04 0520*  	ld hl,@cmd
04B989 01 04 00 00 0521*  	ld bc,@end-@cmd
04B98D 5B DF       0522*  	rst.lil $18
04B98F C9          0523*  	ret
04B990 17 1B 00    0524*  @cmd: db 23,27,0
04B993 00          0525*  @bmp: db 0
04B994             0526*  @end:
04B994             0527*  
04B994             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04B994             0529*  ; inputs: hl=bufferId
04B994             0530*  vdu_buff_select:
04B994 22 A6 B9 04 0531*  	ld (@bufferId),hl
04B998 21 A3 B9 04 0532*  	ld hl,@cmd
04B99C 01 05 00 00 0533*  	ld bc,@end-@cmd
04B9A0 5B DF       0534*  	rst.lil $18
04B9A2 C9          0535*  	ret
04B9A3 17 1B 20    0536*  @cmd: db 23,27,0x20
04B9A6 00 00       0537*  @bufferId: dw 0x0000
04B9A8 00          0538*  @end: db 0x00 ; padding
04B9A9             0539*  
04B9A9             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04B9A9             0541*  ; inputs: a=format; bc=width; de=height
04B9A9             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04B9A9             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04B9A9             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04B9A9             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04B9A9             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04B9A9             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04B9A9             0548*  vdu_bmp_create:
04B9A9 ED 43 C5 B9 0549*      ld (@width),bc
       04          
04B9AE ED 53 C7 B9 0550*      ld (@height),de
       04          
04B9B3 32 C9 B9 04 0551*      ld (@fmt),a
04B9B7 21 C2 B9 04 0552*  	ld hl,@cmd
04B9BB 01 08 00 00 0553*  	ld bc,@end-@cmd
04B9BF 5B DF       0554*  	rst.lil $18
04B9C1 C9          0555*  	ret
04B9C2 17 1B 21    0556*  @cmd:       db 23,27,0x21
04B9C5 00 00       0557*  @width:     dw 0x0000
04B9C7 00 00       0558*  @height:    dw 0x0000
04B9C9 00          0559*  @fmt:       db 0x00
04B9CA             0560*  @end:
04B9CA             0561*  
04B9CA             0562*  ; Draw a bitmap on the screen
04B9CA             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04B9CA             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04B9CA             0565*  vdu_bmp_draw:
04B9CA ED 43 E2 B9 0566*      ld (@x0),bc
       04          
04B9CF ED 53 E4 B9 0567*      ld (@y0),de
       04          
04B9D4 21 DF B9 04 0568*  	ld hl,@cmd
04B9D8 01 07 00 00 0569*  	ld bc,@end-@cmd
04B9DC 5B DF       0570*  	rst.lil $18
04B9DE C9          0571*  	ret
04B9DF 17 1B 03    0572*  @cmd: db 23,27,3
04B9E2 00 00       0573*  @x0:  dw 0x0000
04B9E4 00 00       0574*  @y0:  dw 0x0000
04B9E6 00          0575*  @end: db 0x00 ; padding
04B9E7             0576*  
04B9E7             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04B9E7             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04B9E7             0579*  ; note: default setting on boot is scaling ON
04B9E7             0580*  vdu_set_scaling:
04B9E7 32 F9 B9 04 0581*  	ld (@arg),a
04B9EB 21 F6 B9 04 0582*  	ld hl,@cmd
04B9EF 01 04 00 00 0583*  	ld bc,@end-@cmd
04B9F3 5B DF       0584*  	rst.lil $18
04B9F5 C9          0585*  	ret
04B9F6 17 00 C0    0586*  @cmd: db 23,0,0xC0
04B9F9 00          0587*  @arg: db 0  ; scaling on/off
04B9FA             0588*  @end:
04B9FA             0589*  
04B9FA             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04B9FA             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04B9FA             0592*  ; 	(all modes).
04B9FA             0593*  
04B9FA             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04B9FA             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04B9FA             0596*  ; 	mode is not double-buffered then this command will wait for the next
04B9FA             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04B9FA             0598*  ; 	screen with the vertical refresh rate of the monitor.
04B9FA             0599*  
04B9FA             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04B9FA             0601*  ; 	as it will prevent tearing of the screen.
04B9FA             0602*  ; inputs: none
04B9FA             0603*  ; outputs: none
04B9FA             0604*  ; destroys: hl, bc
04B9FA             0605*  vdu_flip:
04B9FA 21 05 BA 04 0606*  	ld hl,@cmd
04B9FE 01 03 00 00 0607*  	ld bc,@end-@cmd
04BA02 5B DF       0608*  	rst.lil $18
04BA04 C9          0609*  	ret
04BA05 17 00 C3    0610*  @cmd: db 23,0,0xC3
04BA08             0611*  @end:
04BA08             0612*  
04BA08             0613*  ; Command 64: Compress a buffer
04BA08             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04BA08             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04BA08             0616*  
04BA08             0617*  
04BA08             0618*  ; Command 65: Decompress a buffer
04BA08             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04BA08             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04BA08             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04BA08             0622*  vdu_decompress_buffer:
04BA08 22 24 BA 04 0623*  	ld (@targetBufferId),hl
04BA0C 22 27 BA 04 0624*  	ld (@sourceBufferId),hl
04BA10 3E 41       0625*  	ld a,65
04BA12 32 26 BA 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04BA16 21 21 BA 04 0627*  	ld hl,@cmd
04BA1A 01 08 00 00 0628*  	ld bc,@end-@cmd
04BA1E 5B DF       0629*  	rst.lil $18
04BA20 C9          0630*  	ret
04BA21 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04BA24 00 00       0632*  @targetBufferId: dw 0x0000
04BA26 41          0633*  @cmd1:	db 65
04BA27 00 00       0634*  @sourceBufferId: dw 0x0000
04BA29 00          0635*  @end: 	db 0x00 ; padding
04BA2A             0636*  
04BA2A             0637*  ; Command 65: Decompress a buffer
04BA2A             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04BA2A             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04BA2A             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04BA2A             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04BA2A             0642*  vdu_decompress_buffer_different:
04BA2A 22 4A BA 04 0643*  	ld (@targetBufferId),hl
04BA2E 21 FF 7F 00 0644*      ld hl,0x7FFF
04BA32 22 4D BA 04 0645*  	ld (@sourceBufferId),hl
04BA36 3E 41       0646*  	ld a,65
04BA38 32 4C BA 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04BA3C 21 47 BA 04 0648*  	ld hl,@cmd
04BA40 01 08 00 00 0649*  	ld bc,@end-@cmd
04BA44 5B DF       0650*  	rst.lil $18
04BA46 C9          0651*  	ret
04BA47 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04BA4A 00 00       0653*  @targetBufferId: dw 0x0000
04BA4C 41          0654*  @cmd1:	db 65
04BA4D 00 00       0655*  @sourceBufferId: dw 0x0000
04BA4F 00          0656*  @end: 	db 0x00 ; padding
04BA50             0657*  
04BA50             0658*  ; #### from vdp.asm ####
04BA50             0659*  
04BA50             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04BA50             0661*  ; VDU 23, 7: Scrolling
04BA50             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04BA50             0663*  ; inputs: a, extent; l, direction; h; speed
04BA50             0664*  vdu_scroll_down:
04BA50 32 65 BA 04 0665*  	ld (@extent),a
04BA54 22 66 BA 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04BA58 21 63 BA 04 0667*  	ld hl,@cmd
04BA5C 01 05 00 00 0668*  	ld bc,@end-@cmd
04BA60 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04BA62 C9          0670*  	ret
04BA63 17 07       0671*  @cmd:       db 23,7
04BA65 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04BA66 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04BA67 00          0674*  @speed:     db 0x00 ; pixels
04BA68 00          0675*  @end:		db 0x00 ; padding
04BA69             0676*  
04BA69             0677*  cursor_on:
04BA69 21 74 BA 04 0678*  	ld hl,@cmd
04BA6D 01 03 00 00 0679*  	ld bc,@end-@cmd
04BA71 5B DF       0680*  	rst.lil $18
04BA73 C9          0681*  	ret
04BA74             0682*  @cmd:
04BA74 17 01 01    0683*  	db 23,1,1
04BA77             0684*  @end:
04BA77             0685*  
04BA77             0686*  cursor_off:
04BA77 21 82 BA 04 0687*  	ld hl,@cmd
04BA7B 01 03 00 00 0688*  	ld bc,@end-@cmd
04BA7F 5B DF       0689*  	rst.lil $18
04BA81 C9          0690*  	ret
04BA82             0691*  @cmd:
04BA82 17 01 00    0692*  	db 23,1,0
04BA85             0693*  @end:
04BA85             0694*  
04BA85 DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04BA87             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04BA87 3E 08       0001*M 			LD	A, function
04BA89 5B CF       0002*M 			RST.LIL	08h
04BA8B DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04BA8E DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04BA91 28 FB       0699*  			JR	Z, @wait
04BA93 DD E1       0700*  			POP	IX
04BA95 C9          0701*  			RET
04BA96             0702*  
04BA96             0703*  ; #### from vdu_bmp.asm ####
04BA96             0704*  ; =========================================================================
04BA96             0705*  ; Bitmaps
04BA96             0706*  ; -------------------------------------------------------------------------
04BA96             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04BA96             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04BA96             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04BA96             0710*  
04BA96             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04BA96             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04BA96             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04BA96             0714*  ; typically "move" style plot commands are used to define the rectangle.
04BA96             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04BA96             0716*  ; inputs: hl; target bufferId
04BA96             0717*  ; all the following are in 16.8 fixed point format
04BA96             0718*  ;   ub.c; top-left x coordinate
04BA96             0719*  ;   ud.e; top-left y coordinate
04BA96             0720*  ;   ui.x; width
04BA96             0721*  ;   ui.y; height
04BA96             0722*  vdu_buff_screen_capture168:
04BA96 ED 53 CD BA 0723*          ld (@y0-1),de
       04          
04BA9B ED 43 CB BA 0724*          ld (@x0-1),bc
       04          
04BAA0 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04BAA2 32 CB BA 04 0726*          ld (@x0-1),a
04BAA6             0727*  
04BAA6 DD 22 D2 BA 0728*          ld (@x1),ix
       04          
04BAAB FD 22 D4 BA 0729*          ld (@y1),iy
       04          
04BAB0 3E 17       0730*          ld a,23
04BAB2 32 D6 BA 04 0731*          ld (@y1+2),a
04BAB6             0732*  
04BAB6 22 D9 BA 04 0733*          ld (@bufId),hl
04BABA AF          0734*          xor a
04BABB 32 DB BA 04 0735*          ld (@bufId+2),a
04BABF             0736*  
04BABF 21 CA BA 04 0737*          ld hl,@begin
04BAC3 01 13 00 00 0738*          ld bc,@end-@begin
04BAC7 5B DF       0739*          rst.lil $18
04BAC9 C9          0740*          ret
04BACA             0741*  @begin:
04BACA             0742*  ; absolute move gfx cursor to top-left screen coordinate
04BACA             0743*  ; VDU 25, mode, x; y;: PLOT command
04BACA 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04BACC 40 00       0745*  @x0: 	dw 64
04BACE 40 00       0746*  @y0: 	dw 64
04BAD0             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04BAD0             0748*  ; VDU 25, mode, x; y;: PLOT command
04BAD0 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04BAD2 0F 00       0750*  @x1: 	dw 15
04BAD4 0F 00       0751*  @y1: 	dw 15
04BAD6             0752*  ; now the main event
04BAD6             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04BAD6 17 1B 21    0754*          db 23,27,0x21
04BAD9 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04BADD             0756*  @end: ; no padding required
04BADD             0757*  
04BADD             0758*  vdu_buff_screen_capture_full:
04BADD 21 E8 BA 04 0759*          ld hl,@begin
04BAE1 01 13 00 00 0760*          ld bc,@end-@begin
04BAE5 5B DF       0761*          rst.lil $18
04BAE7 C9          0762*          ret
04BAE8             0763*  @begin:
04BAE8             0764*  ; absolute move gfx cursor to top-left screen coordinate
04BAE8             0765*  ; VDU 25, mode, x; y;: PLOT command
04BAE8 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04BAEA 00 00       0767*  @x0: 	dw 0
04BAEC 00 00       0768*  @y0: 	dw 0
04BAEE             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04BAEE             0770*  ; VDU 25, mode, x; y;: PLOT command
04BAEE 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04BAF0 3F 01       0772*  @x1: 	dw 319
04BAF2 EF 00       0773*  @y1: 	dw 239
04BAF4             0774*  ; now the main event
04BAF4             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04BAF4 17 1B 21    0776*          db 23,27,0x21
04BAF7 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04BAFB             0778*  @end: ; no padding required
04BAFB             0779*  
04BAFB             0780*  vdu_buff_screen_paste_full:
04BAFB 21 06 BB 04 0781*          ld hl,@begin
04BAFF 01 0B 00 00 0782*          ld bc,@end-@begin
04BB03 5B DF       0783*          rst.lil $18
04BB05 C9          0784*          ret
04BB06             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04BB06 17 1B 20    0786*  @begin:    db 23,27,0x20
04BB09 00 20       0787*  @bufferId: dw 0x2000
04BB0B             0788*  ; VDU 25, mode, x; y;: PLOT command
04BB0B 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04BB0D 00 00 00 00 0790*             dw 0x0000,0x0000
04BB11             0791*  @end: ; no padding required
04BB11             0792*  
04BB11             0793*  vdu_buff_screen_capture_tiles:
04BB11 21 1C BB 04 0794*          ld hl,@begin
04BB15 01 13 00 00 0795*          ld bc,@end-@begin
04BB19 5B DF       0796*          rst.lil $18
04BB1B C9          0797*          ret
04BB1C             0798*  @begin:
04BB1C             0799*  ; absolute move gfx cursor to top-left screen coordinate
04BB1C             0800*  ; VDU 25, mode, x; y;: PLOT command
04BB1C 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04BB1E 00 00       0802*  @x0: 	dw 0
04BB20 00 00       0803*  @y0: 	dw 0
04BB22             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04BB22             0805*  ; VDU 25, mode, x; y;: PLOT command
04BB22 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04BB24 FF 00       0807*  @x1: 	dw 319-64
04BB26 EF 00       0808*  @y1: 	dw 239
04BB28             0809*  ; now the main event
04BB28             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04BB28 17 1B 21    0811*          db 23,27,0x21
04BB2B 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04BB2F             0813*  @end: ; no padding required
04BB2F             0814*  
04BB2F             0815*  vdu_buff_screen_paste_tiles:
04BB2F 21 3A BB 04 0816*          ld hl,@begin
04BB33 01 0B 00 00 0817*          ld bc,@end-@begin
04BB37 5B DF       0818*          rst.lil $18
04BB39 C9          0819*          ret
04BB3A             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04BB3A 17 1B 20    0821*  @begin:    db 23,27,0x20
04BB3D 00 20       0822*  @bufferId: dw 0x2000
04BB3F             0823*  ; VDU 25, mode, x; y;: PLOT command
04BB3F 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04BB41 00 00 01 00 0825*             dw 0x0000,0x0001
04BB45             0826*  @end: ; no padding required
04BB45             0827*  
04BB45             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04BB45             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04BB45             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04BB45             0831*  ; Value	Meaning
04BB45             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04BB45             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04BB45             0834*  ; 2	Mono/Mask (1-bit per pixel)
04BB45             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04BB45             0836*  ;     They have some significant limitations, and are not intended for general use.
04BB45             0837*  
04BB45             0838*  ; =========================================================================
04BB45             0839*  ; Sprites
04BB45             0840*  ; -------------------------------------------------------------------------
04BB45             0841*  ; VDU 23, 27, 4, n: Select sprite n
04BB45             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04BB45             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04BB45             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04BB45             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04BB45             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04BB45             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04BB45             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04BB45             0849*  ; VDU 23, 27, 11: Show current sprite
04BB45             0850*  ; VDU 23, 27, 12: Hide current sprite
04BB45             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04BB45             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04BB45             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04BB45             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04BB45             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04BB45             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04BB45             0857*  
04BB45             0858*  ; =========================================================================
04BB45             0859*  ; Mouse cursor
04BB45             0860*  ; -------------------------------------------------------------------------
04BB45             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04BB45             0862*  
04BB45             0863*  ; #### from vdu_plot.asm ####
04BB45             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04BB45             0865*  ; PLOT code 	(Decimal) 	Effect
04BB45             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04BB45             0867*  plot_sl_both: equ 0x00
04BB45             0868*  
04BB45             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04BB45             0870*  plot_sl_first: equ 0x08
04BB45             0871*  
04BB45             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04BB45             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04BB45             0874*  
04BB45             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04BB45             0876*  plot_sl_last: equ 0x20
04BB45             0877*  
04BB45             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04BB45             0879*  plot_sl_none: equ 0x28
04BB45             0880*  
04BB45             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04BB45             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04BB45             0883*  
04BB45             0884*  ; &40-&47 	64-71 	Point plot
04BB45             0885*  plot_pt: equ 0x40
04BB45             0886*  
04BB45             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04BB45             0888*  plot_lf_lr_non_bg: equ 0x48
04BB45             0889*  
04BB45             0890*  ; &50-&57 	80-87 	Triangle fill
04BB45             0891*  plot_tf: equ 0x50
04BB45             0892*  
04BB45             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04BB45             0894*  plot_lf_r_bg: equ 0x58
04BB45             0895*  
04BB45             0896*  ; &60-&67 	96-103 	Rectangle fill
04BB45             0897*  plot_rf: equ 0x60
04BB45             0898*  
04BB45             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04BB45             0900*  plot_lf_lr_fg: equ 0x60
04BB45             0901*  
04BB45             0902*  ; &70-&77 	112-119 	Parallelogram fill
04BB45             0903*  plot_pf: equ 0x70
04BB45             0904*  
04BB45             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04BB45             0906*  plot_lf_r_non_fg: equ 0x78
04BB45             0907*  
04BB45             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04BB45             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04BB45             0910*  
04BB45             0911*  ; &90-&97 	144-151 	Circle outline
04BB45             0912*  plot_co: equ 0x90
04BB45             0913*  
04BB45             0914*  ; &98-&9F 	152-159 	Circle fill
04BB45             0915*  plot_cf: equ 0x98
04BB45             0916*  
04BB45             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04BB45             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04BB45             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04BB45             0920*  
04BB45             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04BB45             0922*  plot_rcm: equ 0xB8
04BB45             0923*  
04BB45             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04BB45             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04BB45             0926*  ; &D0-&D7 	208-215 	Not defined
04BB45             0927*  ; &D8-&DF 	216-223 	Not defined
04BB45             0928*  ; &E0-&E7 	224-231 	Not defined
04BB45             0929*  
04BB45             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04BB45             0931*  plot_bmp: equ 0xE8
04BB45             0932*  
04BB45             0933*  ; &F0-&F7 	240-247 	Not defined
04BB45             0934*  ; &F8-&FF 	248-255 	Not defined
04BB45             0935*  
04BB45             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04BB45             0937*  ; Agon Console8 VDP 2.2.0
04BB45             0938*  
04BB45             0939*  ; Within each group of eight plot codes, the effects are as follows:
04BB45             0940*  ; Plot code 	Effect
04BB45             0941*  ; 0 	Move relative
04BB45             0942*  mv_rel: equ 0
04BB45             0943*  
04BB45             0944*  ; 1 	Plot relative in current foreground colour
04BB45             0945*  dr_rel_fg: equ 1
04BB45             0946*  
04BB45             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04BB45             0948*  ; 3 	Plot relative in current background colour
04BB45             0949*  dr_rel_bg: equ 3
04BB45             0950*  
04BB45             0951*  ; 4 	Move absolute
04BB45             0952*  mv_abs: equ 4
04BB45             0953*  
04BB45             0954*  ; 5 	Plot absolute in current foreground colour
04BB45             0955*  dr_abs_fg: equ 5
04BB45             0956*  
04BB45             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04BB45             0958*  ; 7 	Plot absolute in current background colour
04BB45             0959*  dr_abs_bg: equ 7
04BB45             0960*  
04BB45             0961*  ; Codes 0-3 use the position data provided as part of the command
04BB45             0962*  ; as a relative position, adding the position given to the current
04BB45             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04BB45             0964*  ; as part of the command as an absolute position, setting the current
04BB45             0965*  ; graphical cursor position to the position given.
04BB45             0966*  
04BB45             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04BB45             0968*  ; current pixel colour. These operations cannot currently be supported
04BB45             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04BB45             0970*  ; supported. Support for these codes may be added in a future version
04BB45             0971*  ; of the VDP firmware.
04BB45             0972*  
04BB45             0973*  ; 16 colour palette constants
04BB45             0974*  c_black: equ 0
04BB45             0975*  c_red_dk: equ 1
04BB45             0976*  c_green_dk: equ 2
04BB45             0977*  c_yellow_dk: equ 3
04BB45             0978*  c_blue_dk: equ 4
04BB45             0979*  c_magenta_dk: equ 5
04BB45             0980*  c_cyan_dk: equ 6
04BB45             0981*  c_grey: equ 7
04BB45             0982*  c_grey_dk: equ 8
04BB45             0983*  c_red: equ 9
04BB45             0984*  c_green: equ 10
04BB45             0985*  c_yellow: equ 11
04BB45             0986*  c_blue: equ 12
04BB45             0987*  c_magenta: equ 13
04BB45             0988*  c_cyan: equ 14
04BB45             0989*  c_white: equ 15
04BB45             0990*  
04BB45             0991*  ; VDU 25, mode, x; y;: PLOT command
04BB45             0992*  ; inputs: a=mode, bc=x0, de=y0
04BB45             0993*  vdu_plot:
04BB45 32 5F BB 04 0994*      ld (@mode),a
04BB49 ED 43 60 BB 0995*      ld (@x0),bc
       04          
04BB4E ED 53 62 BB 0996*      ld (@y0),de
       04          
04BB53 21 5E BB 04 0997*  	ld hl,@cmd
04BB57 01 06 00 00 0998*  	ld bc,@end-@cmd
04BB5B 5B DF       0999*  	rst.lil $18
04BB5D C9          1000*  	ret
04BB5E 19          1001*  @cmd:   db 25
04BB5F 00          1002*  @mode:  db 0
04BB60 00 00       1003*  @x0: 	dw 0
04BB62 00 00       1004*  @y0: 	dw 0
04BB64 00          1005*  @end:   db 0 ; extra byte to soak up deu
04BB65             1006*  
04BB65             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04BB65             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04BB65             1009*  ; VDU 25, mode, x; y;: PLOT command
04BB65             1010*  ; inputs: bc=x0, de=y0
04BB65             1011*  ; prerequisites: vdu_buff_select
04BB65             1012*  vdu_plot_bmp:
04BB65 ED 43 7C BB 1013*      ld (@x0),bc
       04          
04BB6A ED 53 7E BB 1014*      ld (@y0),de
       04          
04BB6F 21 7A BB 04 1015*  	ld hl,@cmd
04BB73 01 06 00 00 1016*  	ld bc,@end-@cmd
04BB77 5B DF       1017*  	rst.lil $18
04BB79 C9          1018*  	ret
04BB7A 19          1019*  @cmd:   db 25
04BB7B ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04BB7C 00 00       1021*  @x0: 	dw 0x0000
04BB7E 00 00       1022*  @y0: 	dw 0x0000
04BB80 00          1023*  @end:   db 0x00 ; padding
04BB81             1024*  
04BB81             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04BB81             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04BB81             1027*  ; VDU 25, mode, x; y;: PLOT command
04BB81             1028*  ; inputs: bc=x0, de=y0
04BB81             1029*  ; USING 16.8 FIXED POINT COORDINATES
04BB81             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04BB81             1031*  ;   the fractional portiion of the inputs are truncated
04BB81             1032*  ;   leaving only the 16-bit integer portion
04BB81             1033*  ; prerequisites: vdu_buff_select
04BB81             1034*  vdu_plot_bmp168:
04BB81             1035*  ; populate in the reverse of normal to keep the
04BB81             1036*  ; inputs from stomping on each other
04BB81 ED 53 9F BB 1037*      ld (@y0-1),de
       04          
04BB86 ED 43 9D BB 1038*      ld (@x0-1),bc
       04          
04BB8B 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04BB8D 32 9D BB 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04BB91 21 9C BB 04 1041*  	ld hl,@cmd
04BB95 01 06 00 00 1042*  	ld bc,@end-@cmd
04BB99 5B DF       1043*  	rst.lil $18
04BB9B C9          1044*  	ret
04BB9C 19          1045*  @cmd:   db 25
04BB9D ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04BB9E 00 00       1047*  @x0: 	dw 0x0000
04BBA0 00 00       1048*  @y0: 	dw 0x0000
04BBA2             1049*  @end:  ; no padding required b/c we shifted de right
04BBA2             1050*  
04BBA2             1051*  ; draw a filled rectangle
04BBA2             1052*  vdu_plot_rf:
04BBA2 ED 43 C9 BB 1053*      ld (@x0),bc
       04          
04BBA7 ED 53 CB BB 1054*      ld (@y0),de
       04          
04BBAC DD 22 CF BB 1055*      ld (@x1),ix
       04          
04BBB1 FD 22 D1 BB 1056*      ld (@y1),iy
       04          
04BBB6 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04BBB8 32 CD BB 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04BBBC 21 C7 BB 04 1059*  	ld hl,@cmd0
04BBC0 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04BBC4 5B DF       1061*  	rst.lil $18
04BBC6 C9          1062*      ret
04BBC7 19          1063*  @cmd0:  db 25 ; plot
04BBC8 04          1064*  @arg0:  db plot_sl_both+mv_abs
04BBC9 00 00       1065*  @x0:    dw 0x0000
04BBCB 00 00       1066*  @y0:    dw 0x0000
04BBCD 19          1067*  @cmd1:  db 25 ; plot
04BBCE 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04BBCF 00 00       1069*  @x1:    dw 0x0000
04BBD1 00 00       1070*  @y1:    dw 0x0000
04BBD3 00          1071*  @end:   db 0x00 ; padding
04BBD4             1072*  
04BBD4             1073*  ; draw a filled circle
04BBD4             1074*  vdu_plot_cf:
04BBD4 ED 43 FB BB 1075*      ld (@x0),bc
       04          
04BBD9 ED 53 FD BB 1076*      ld (@y0),de
       04          
04BBDE DD 22 01 BC 1077*      ld (@x1),ix
       04          
04BBE3 FD 22 03 BC 1078*      ld (@y1),iy
       04          
04BBE8 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04BBEA 32 FF BB 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04BBEE 21 F9 BB 04 1081*  	ld hl,@cmd0
04BBF2 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04BBF6 5B DF       1083*  	rst.lil $18
04BBF8 C9          1084*      ret
04BBF9 19          1085*  @cmd0:  db 25 ; plot
04BBFA 04          1086*  @arg0:  db plot_sl_both+mv_abs
04BBFB 00 00       1087*  @x0:    dw 0x0000
04BBFD 00 00       1088*  @y0:    dw 0x0000
04BBFF 19          1089*  @cmd1:  db 25 ; plot
04BC00 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04BC01 00 00       1091*  @x1:    dw 0x0000
04BC03 00 00       1092*  @y1:    dw 0x0000
04BC05 00          1093*  @end:   db 0x00 ; padding
04BC06             1094*  
04BC06             1095*  ; #### from vdu_sprites.asm ####
04BC06             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04BC06             1097*  ; the VDP can support up to 256 sprites. They must be defined
04BC06             1098*  ; contiguously, and so the first sprite is sprite 0.
04BC06             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04BC06             1100*  ; Once a selection of sprites have been defined, you can activate
04BC06             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04BC06             1102*  ; of sprites to activate. This will activate the first n sprites,
04BC06             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04BC06             1104*  
04BC06             1105*  ; A single sprite can have multiple "frames", referring to
04BC06             1106*  ; different bitmaps.
04BC06             1107*  ; (These bitmaps do not need to be the same size.)
04BC06             1108*  ; This allows a sprite to include an animation sequence,
04BC06             1109*  ; which can be stepped through one frame at a time, or picked
04BC06             1110*  ; in any order.
04BC06             1111*  
04BC06             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04BC06             1113*  ; be noted however that "native" format bitmaps are not
04BC06             1114*  ; recommended for use as sprite frames, as they cannot get
04BC06             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04BC06             1116*  ; format is not really intended for general use.) This is part
04BC06             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04BC06             1118*  ; screen are now stored in RGBA2222 format.
04BC06             1119*  
04BC06             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04BC06             1121*  ; and then later shown again.
04BC06             1122*  
04BC06             1123*  ; Moving sprites around the screen is done by changing the
04BC06             1124*  ; position of the sprite. This can be done either by setting
04BC06             1125*  ; the absolute position of the sprite, or by moving the sprite
04BC06             1126*  ; by a given number of pixels. (Sprites are positioned using
04BC06             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04BC06             1128*  ; In the current sprite system, sprites will not update their
04BC06             1129*  ; position on-screen until either another drawing operation is
04BC06             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04BC06             1131*  
04BC06             1132*  ; Here are the sprite commands:
04BC06             1133*  ;
04BC06             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04BC06             1135*  ; inputs: a is the 8-bit sprite id
04BC06             1136*  ; vdu_sprite_select:
04BC06             1137*  
04BC06             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04BC06             1139*  ; inputs: none
04BC06             1140*  ; prerequisites: vdu_sprite_select
04BC06             1141*  ; vdu_sprite_clear_frames:
04BC06             1142*  
04BC06             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04BC06             1144*  ; inputs: a is the 8-bit bitmap number
04BC06             1145*  ; prerequisites: vdu_sprite_select
04BC06             1146*  ; vdu_sprite_add_bmp:
04BC06             1147*  
04BC06             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04BC06             1149*  ; inputs: a is the number of sprites to activate
04BC06             1150*  ; vdu_sprite_activate:
04BC06             1151*  
04BC06             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04BC06             1153*  ; inputs: none
04BC06             1154*  ; prerequisites: vdu_sprite_select
04BC06             1155*  ; vdu_sprite_next_frame:
04BC06             1156*  
04BC06             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04BC06             1158*  ; inputs: none
04BC06             1159*  ; prerequisites: vdu_sprite_select
04BC06             1160*  ; vdu_sprite_prev_frame:
04BC06             1161*  
04BC06             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04BC06             1163*  ; inputs: a is frame number to select
04BC06             1164*  ; prerequisites: vdu_sprite_select
04BC06             1165*  ; vdu_sprite_select_frame:
04BC06             1166*  
04BC06             1167*  ; VDU 23, 27, 11: Show current sprite
04BC06             1168*  ; inputs: none
04BC06             1169*  ; prerequisites: vdu_sprite_select
04BC06             1170*  ; vdu_sprite_show:
04BC06             1171*  
04BC06             1172*  ; VDU 23, 27, 12: Hide current sprite
04BC06             1173*  ; inputs: none
04BC06             1174*  ; prerequisites: vdu_sprite_select
04BC06             1175*  ; vdu_sprite_hide:
04BC06             1176*  
04BC06             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04BC06             1178*  ; inputs: bc is x coordinate, de is y coordinate
04BC06             1179*  ; prerequisites: vdu_sprite_select
04BC06             1180*  ; vdu_sprite_move_abs:
04BC06             1181*  ;
04BC06             1182*  ; USING 16.8 FIXED POINT COORDINATES
04BC06             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04BC06             1184*  ;   the fractional portiion of the inputs are truncated
04BC06             1185*  ;   leaving only the 16-bit integer portion
04BC06             1186*  ; prerequisites: vdu_sprite_select
04BC06             1187*  ; vdu_sprite_move_abs168:
04BC06             1188*  
04BC06             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04BC06             1190*  ; inputs: bc is x coordinate, de is y coordinate
04BC06             1191*  ; prerequisites: vdu_sprite_select
04BC06             1192*  ; vdu_sprite_move_rel:
04BC06             1193*  ;
04BC06             1194*  ; USING 16.8 FIXED POINT COORDINATES
04BC06             1195*  ; inputs: ub.c is dx, ud.e is dy
04BC06             1196*  ;   the fractional portiion of the inputs are truncated
04BC06             1197*  ;   leaving only the 16-bit integer portion
04BC06             1198*  ; prerequisites: vdu_sprite_select
04BC06             1199*  ; vdu_sprite_move_rel168:
04BC06             1200*  
04BC06             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04BC06             1202*  ; inputs: none
04BC06             1203*  ; vdu_sprite_update:
04BC06             1204*  
04BC06             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04BC06             1206*  ; inputs: none
04BC06             1207*  ; vdu_sprite_bmp_reset:
04BC06             1208*  
04BC06             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04BC06             1210*  ; inputs: none
04BC06             1211*  ; vdu_sprite_reset:
04BC06             1212*  
04BC06             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04BC06             1214*  ; inputs: a is the GCOL paint mode
04BC06             1215*  ; prerequisites: vdu_sprite_select
04BC06             1216*  ; vdu_sprite_set_gcol:
04BC06             1217*  
04BC06             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04BC06             1219*  ; inputs: hl=bufferId
04BC06             1220*  ; prerequisites: vdu_sprite_select
04BC06             1221*  ; vdu_sprite_add_buff:
04BC06             1222*  
04BC06             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04BC06             1224*  
04BC06             1225*  ; VDU 23, 27, 4, n: Select sprite n
04BC06             1226*  ; inputs: a is the 8-bit sprite id
04BC06             1227*  vdu_sprite_select:
04BC06 32 18 BC 04 1228*      ld (@sprite),a
04BC0A 21 15 BC 04 1229*      ld hl,@cmd
04BC0E 01 04 00 00 1230*      ld bc,@end-@cmd
04BC12 5B DF       1231*      rst.lil $18
04BC14 C9          1232*      ret
04BC15 17 1B 04    1233*  @cmd:    db 23,27,4
04BC18 00          1234*  @sprite: db 0x00
04BC19             1235*  @end:
04BC19             1236*  
04BC19             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04BC19             1238*  ; inputs: none
04BC19             1239*  ; prerequisites: vdu_sprite_select
04BC19             1240*  vdu_sprite_clear_frames:
04BC19 21 24 BC 04 1241*      ld hl,@cmd
04BC1D 01 03 00 00 1242*      ld bc,@end-@cmd
04BC21 5B DF       1243*      rst.lil $18
04BC23 C9          1244*      ret
04BC24 17 1B 05    1245*  @cmd: db 23,27,5
04BC27             1246*  @end:
04BC27             1247*  
04BC27             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04BC27             1249*  ; inputs: a is the 8-bit bitmap number
04BC27             1250*  ; prerequisites: vdu_sprite_select
04BC27             1251*  vdu_sprite_add_bmp:
04BC27 32 39 BC 04 1252*      ld (@bmp),a
04BC2B 21 36 BC 04 1253*      ld hl,@cmd
04BC2F 01 04 00 00 1254*      ld bc,@end-@cmd
04BC33 5B DF       1255*      rst.lil $18
04BC35 C9          1256*      ret
04BC36 17 1B 06    1257*  @cmd: db 23,27,6
04BC39 00          1258*  @bmp: db 0x00
04BC3A             1259*  @end:
04BC3A             1260*  
04BC3A             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04BC3A             1262*  ; inputs: a is the number of sprites to activate
04BC3A             1263*  vdu_sprite_activate:
04BC3A 32 4C BC 04 1264*      ld (@num),a
04BC3E 21 49 BC 04 1265*      ld hl,@cmd
04BC42 01 04 00 00 1266*      ld bc,@end-@cmd
04BC46 5B DF       1267*      rst.lil $18
04BC48 C9          1268*      ret
04BC49 17 1B 07    1269*  @cmd: db 23,27,7
04BC4C 00          1270*  @num: db 0x00
04BC4D             1271*  @end:
04BC4D             1272*  
04BC4D             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04BC4D             1274*  ; inputs: none
04BC4D             1275*  ; prerequisites: vdu_sprite_select
04BC4D             1276*  vdu_sprite_next_frame:
04BC4D 21 58 BC 04 1277*      ld hl,@cmd
04BC51 01 03 00 00 1278*      ld bc,@end-@cmd
04BC55 5B DF       1279*      rst.lil $18
04BC57 C9          1280*      ret
04BC58 17 1B 08    1281*  @cmd: db 23,27,8
04BC5B             1282*  @end:
04BC5B             1283*  
04BC5B             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04BC5B             1285*  ; inputs: none
04BC5B             1286*  ; prerequisites: vdu_sprite_select
04BC5B             1287*  vdu_sprite_prev_frame:
04BC5B 21 66 BC 04 1288*      ld hl,@cmd
04BC5F 01 03 00 00 1289*      ld bc,@end-@cmd
04BC63 5B DF       1290*      rst.lil $18
04BC65 C9          1291*      ret
04BC66 17 1B 09    1292*  @cmd: db 23,27,9
04BC69             1293*  @end:
04BC69             1294*  
04BC69             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04BC69             1296*  ; inputs: a is frame number to select
04BC69             1297*  ; prerequisites: vdu_sprite_select
04BC69             1298*  vdu_sprite_select_frame:
04BC69 32 7B BC 04 1299*      ld (@frame),a
04BC6D 21 78 BC 04 1300*      ld hl,@cmd
04BC71 01 04 00 00 1301*      ld bc,@end-@cmd
04BC75 5B DF       1302*      rst.lil $18
04BC77 C9          1303*      ret
04BC78 17 1B 0A    1304*  @cmd:    db 23,27,10
04BC7B 00          1305*  @frame:  db 0x00
04BC7C             1306*  @end:
04BC7C             1307*  
04BC7C             1308*  ; VDU 23, 27, 11: Show current sprite
04BC7C             1309*  ; inputs: none
04BC7C             1310*  ; prerequisites: vdu_sprite_select
04BC7C             1311*  vdu_sprite_show:
04BC7C 21 87 BC 04 1312*      ld hl,@cmd
04BC80 01 03 00 00 1313*      ld bc,@end-@cmd
04BC84 5B DF       1314*      rst.lil $18
04BC86 C9          1315*      ret
04BC87 17 1B 0B    1316*  @cmd: db 23,27,11
04BC8A             1317*  @end:
04BC8A             1318*  
04BC8A             1319*  ; VDU 23, 27, 12: Hide current sprite
04BC8A             1320*  ; inputs: none
04BC8A             1321*  ; prerequisites: vdu_sprite_select
04BC8A             1322*  vdu_sprite_hide:
04BC8A 21 95 BC 04 1323*      ld hl,@cmd
04BC8E 01 03 00 00 1324*      ld bc,@end-@cmd
04BC92 5B DF       1325*      rst.lil $18
04BC94 C9          1326*      ret
04BC95 17 1B 0C    1327*  @cmd: db 23,27,12
04BC98             1328*  @end:
04BC98             1329*  
04BC98             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04BC98             1331*  ; inputs: bc is x coordinate, de is y coordinate
04BC98             1332*  ; prerequisites: vdu_sprite_select
04BC98             1333*  vdu_sprite_move_abs:
04BC98 ED 43 B0 BC 1334*      ld (@xpos),bc
       04          
04BC9D ED 53 B2 BC 1335*      ld (@ypos),de
       04          
04BCA2 21 AD BC 04 1336*      ld hl,@cmd
04BCA6 01 07 00 00 1337*      ld bc,@end-@cmd
04BCAA 5B DF       1338*      rst.lil $18
04BCAC C9          1339*      ret
04BCAD 17 1B 0D    1340*  @cmd:  db 23,27,13
04BCB0 00 00       1341*  @xpos: dw 0x0000
04BCB2 00 00       1342*  @ypos: dw 0x0000
04BCB4 00          1343*  @end:  db 0x00 ; padding
04BCB5             1344*  
04BCB5             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04BCB5             1346*  ; inputs: bc is x coordinate, de is y coordinate
04BCB5             1347*  ; prerequisites: vdu_sprite_select
04BCB5             1348*  vdu_sprite_move_rel:
04BCB5 ED 43 CD BC 1349*      ld (@dx),bc
       04          
04BCBA ED 53 CF BC 1350*      ld (@dy),de
       04          
04BCBF 21 CA BC 04 1351*      ld hl,@cmd
04BCC3 01 07 00 00 1352*      ld bc,@end-@cmd
04BCC7 5B DF       1353*      rst.lil $18
04BCC9 C9          1354*      ret
04BCCA 17 1B 0E    1355*  @cmd: db 23,27,14
04BCCD 00 00       1356*  @dx:  dw 0x0000
04BCCF 00 00       1357*  @dy:  dw 0x0000
04BCD1 00          1358*  @end: db 0x00 ; padding
04BCD2             1359*  
04BCD2             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04BCD2             1361*  ; USING 16.8 FIXED POINT COORDINATES
04BCD2             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04BCD2             1363*  ;   the fractional portiion of the inputs are truncated
04BCD2             1364*  ;   leaving only the 16-bit integer portion
04BCD2             1365*  ; prerequisites: vdu_sprite_select
04BCD2             1366*  vdu_sprite_move_abs168:
04BCD2             1367*  ; populate in the reverse of normal to keep the
04BCD2             1368*  ; inputs from stomping on each other
04BCD2 ED 53 F1 BC 1369*      ld (@ypos-1),de
       04          
04BCD7 ED 43 EF BC 1370*      ld (@xpos-1),bc
       04          
04BCDC 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04BCDE 32 EF BC 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04BCE2 21 ED BC 04 1373*      ld hl,@cmd
04BCE6 01 07 00 00 1374*      ld bc,@end-@cmd
04BCEA 5B DF       1375*      rst.lil $18
04BCEC C9          1376*      ret
04BCED 17 1B 0D    1377*  @cmd:  db 23,27,13
04BCF0 00 00       1378*  @xpos: dw 0x0000
04BCF2 00 00       1379*  @ypos: dw 0x0000
04BCF4             1380*  @end:  ; no padding required b/c we shifted de right
04BCF4             1381*  
04BCF4             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04BCF4             1383*  ; USING 16.8 FIXED POINT COORDINATES
04BCF4             1384*  ; inputs: ub.c is dx, ud.e is dy
04BCF4             1385*  ;   the fractional portiion of the inputs are truncated
04BCF4             1386*  ;   leaving only the 16-bit integer portion
04BCF4             1387*  ; prerequisites: vdu_sprite_select
04BCF4             1388*  vdu_sprite_move_rel168:
04BCF4             1389*  ; populate in the reverse of normal to keep the
04BCF4             1390*  ; inputs from stomping on each other
04BCF4 ED 53 13 BD 1391*      ld (@dy-1),de
       04          
04BCF9 ED 43 11 BD 1392*      ld (@dx-1),bc
       04          
04BCFE 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04BD00 32 11 BD 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04BD04 21 0F BD 04 1395*      ld hl,@cmd
04BD08 01 07 00 00 1396*      ld bc,@end-@cmd
04BD0C 5B DF       1397*      rst.lil $18
04BD0E C9          1398*      ret
04BD0F 17 1B 0E    1399*  @cmd:  db 23,27,14
04BD12 00 00       1400*  @dx: dw 0x0000
04BD14 00 00       1401*  @dy: dw 0x0000
04BD16             1402*  @end:  ; no padding required b/c we shifted de right
04BD16             1403*  
04BD16             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04BD16             1405*  ; inputs: none
04BD16             1406*  vdu_sprite_update:
04BD16 21 21 BD 04 1407*      ld hl,@cmd
04BD1A 01 03 00 00 1408*      ld bc,@end-@cmd
04BD1E 5B DF       1409*      rst.lil $18
04BD20 C9          1410*      ret
04BD21 17 1B 0F    1411*  @cmd: db 23,27,15
04BD24             1412*  @end:
04BD24             1413*  
04BD24             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04BD24             1415*  ; inputs: none
04BD24             1416*  vdu_sprite_bmp_reset:
04BD24 21 2F BD 04 1417*      ld hl,@cmd
04BD28 01 03 00 00 1418*      ld bc,@end-@cmd
04BD2C 5B DF       1419*      rst.lil $18
04BD2E C9          1420*      ret
04BD2F 17 1B 10    1421*  @cmd: db 23,27,16
04BD32             1422*  @end:
04BD32             1423*  
04BD32             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04BD32             1425*  ; inputs: none
04BD32             1426*  vdu_sprite_reset:
04BD32 21 3D BD 04 1427*      ld hl,@cmd
04BD36 01 03 00 00 1428*      ld bc,@end-@cmd
04BD3A 5B DF       1429*      rst.lil $18
04BD3C C9          1430*      ret
04BD3D 17 1B 11    1431*  @cmd: db 23,27,17
04BD40             1432*  @end:
04BD40             1433*  
04BD40             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04BD40             1435*  ; inputs: a is the GCOL paint mode
04BD40             1436*  ; prerequisites: vdu_sprite_select
04BD40             1437*  vdu_sprite_set_gcol:
04BD40 32 52 BD 04 1438*      ld (@mode),a
04BD44 21 4F BD 04 1439*      ld hl,@cmd
04BD48 01 04 00 00 1440*      ld bc,@end-@cmd
04BD4C 5B DF       1441*      rst.lil $18
04BD4E C9          1442*      ret
04BD4F 17 1B 12    1443*  @cmd:  db 23,27,18
04BD52 00          1444*  @mode: db 0x00
04BD53             1445*  @end:
04BD53             1446*  
04BD53             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04BD53             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04BD53             1449*  ; inputs: hl=bufferId
04BD53             1450*  ; prerequisites: vdu_sprite_select
04BD53             1451*  vdu_sprite_add_buff:
04BD53 22 65 BD 04 1452*      ld (@bufferId),hl
04BD57 21 62 BD 04 1453*      ld hl,@cmd
04BD5B 01 05 00 00 1454*      ld bc,@end-@cmd
04BD5F 5B DF       1455*      rst.lil $18
04BD61 C9          1456*      ret
04BD62 17 1B 26    1457*  @cmd:      db 23,27,0x26
04BD65 00 00       1458*  @bufferId: dw 0x0000
04BD67 00          1459*  @end:      db 0x00 ; padding
04BD68             1460*  
04BD68             1461*  
04BD68             1462*  ; #### from sfx.asm ####
04BD68 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04BD69             1464*  
04BD69             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04BD69             1466*  ; ; inputs: hl = bufferId
04BD69             1467*  ; sfx_play:
04BD69             1468*  ; 	ld iy,sfx_last_channel
04BD69             1469*  ; 	ld a,(iy+0)
04BD69             1470*  ; 	ld (@bufferId),hl
04BD69             1471*  ; @find_next_channel:
04BD69             1472*  ; 	inc a ; bump to next channel
04BD69             1473*  ; 	and 31 ; modulo 32 channel
04BD69             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04BD69             1475*  ; 	ret z ; so we return to caller without doing anything
04BD69             1476*  ; 	push af ; back up channel
04BD69             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04BD69             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04BD69             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04BD69             1480*  ; 	pop af ; restore channel
04BD69             1481*  ; 	jr @find_next_channel ; try the next channel
04BD69             1482*  ; @play_sfx:
04BD69             1483*  ; 	pop af ; restore channel
04BD69             1484*  ; 	ld (iy+0),a ; store channel
04BD69             1485*  ; 	ld hl,(@bufferId)
04BD69             1486*  ; 	ld c,a ; channel
04BD69             1487*  ; 	ld b,127 ; full volume
04BD69             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04BD69             1489*  ; 	jp vdu_play_sample
04BD69             1490*  ; @bufferId:
04BD69             1491*  ; 	dw 0x0000 ; 16-bit value
04BD69             1492*  
04BD69             1493*  sfx_play_random_hurt:
04BD69 CD AD C7 04 1494*  	call rand_8
04BD6D E6 03       1495*  	and 3
04BD6F FE 00       1496*  	cp 0
04BD71 CA 98 CE 04 1497*  	jp z,sfx_play_ahh
04BD75 FE 01       1498*  	cp 1
04BD77 CA A4 CE 04 1499*  	jp z,sfx_play_augh
04BD7B FE 02       1500*  	cp 2
04BD7D CA B0 CE 04 1501*  	jp z,sfx_play_ayee
04BD81 C3 7C CF 04 1502*  	jp sfx_play_ugh
04BD85             1503*  
04BD85             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04BD85             1505*  sfx_load_main:
04BD85 21 00 00 00 1506*      ld hl,0
04BD89 22 C2 C7 04 1507*      ld (cur_file_idx),hl
04BD8D             1508*  sfx_load_main_loop:
04BD8D             1509*  ; back up loop counter
04BD8D C5          1510*      push bc
04BD8E             1511*  ; load the next sound
04BD8E CD E2 BD 04 1512*      call load_next_sound
04BD92             1513*  ; draw all the things
04BD92 CD 2B C9 04 1514*      call tmp_draw_all_the_things
04BD96             1515*  ; move bj
04BD96 CD B3 C8 04 1516*  	call move_bj
04BD9A             1517*  ; print welcome message
04BD9A DD 21 BE 8B 1518*  	ld ix,font_itc_honda
       04          
04BD9F 21 95 D1 04 1519*  	ld hl,hello_world
04BDA3 01 20 00 00 1520*  	ld bc,32
04BDA7 11 02 00 00 1521*  	ld de,2
04BDAB CD EB 70 04 1522*  	call font_bmp_print
04BDAF             1523*  ; print current filename
04BDAF CD 2B B8 04 1524*  	call vdu_cls
04BDB3 2A C5 C7 04 1525*  	ld hl,(cur_filename)
04BDB7 CD 2A BE 04 1526*  	call printString
04BDBB CD 3F BE 04 1527*  	call printNewLine
04BDBF             1528*  
04BDBF             1529*  ; print current load stopwatch
04BDBF 21 B7 D1 04 1530*  	ld hl,loading_time
04BDC3 CD 2A BE 04 1531*  	call printString
04BDC7 CD 47 D1 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04BDCB CD 78 BE 04 1533*  	call printDec
04BDCF             1534*  
04BDCF             1535*  ; flip screen
04BDCF CD FA B9 04 1536*      call vdu_flip
04BDD3             1537*  ; ; delay for a bit so sound can play
04BDD3             1538*  ;     ld a,%10000000 ; 1 second delay
04BDD3             1539*  ;     call multiPurposeDelay
04BDD3             1540*  ; decrement loop counter
04BDD3 C1          1541*      pop bc
04BDD4 0B          1542*  	dec bc
04BDD5             1543*  ; ; DEBUG: DUMP REGISTERS
04BDD5             1544*  ; 	push bc
04BDD5             1545*  ; 	call dumpRegistersHex
04BDD5             1546*  ; 	call vdu_flip
04BDD5             1547*  ; 	pop bc
04BDD5             1548*  ; ; END DEBUG
04BDD5 79          1549*      ld a,c
04BDD6 B7          1550*      or a
04BDD7 C2 8D BD 04 1551*      jp nz,sfx_load_main_loop
04BDDB 78          1552*      ld a,b
04BDDC B7          1553*      or a
04BDDD C2 8D BD 04 1554*      jp nz,sfx_load_main_loop
04BDE1 C9          1555*      ret
04BDE2             1556*  
04BDE2             1557*  load_next_sound:
04BDE2             1558*  ; look up the load routine for the current file index
04BDE2 2A C2 C7 04 1559*  	ld hl,(cur_file_idx)
04BDE6 29          1560*  	add hl,hl ; multiply current index by 2 ...
04BDE7 ED 5B C2 C7 1561*  	ld de,(cur_file_idx)
       04          
04BDEC 19          1562*  	add hl,de ; ... now by 3
04BDED ED 5B CE C7 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04BDF2 19          1564*  	add hl,de
04BDF3 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04BDF5 22 FA BD 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04BDF9             1567*  @jump_addr:
04BDF9 CD 00 00 00 1568*  	call 0 ; call the sound load routine
04BDFD             1569*  ; look up the buffer id for the current file
04BDFD 2A C2 C7 04 1570*  	ld hl,(cur_file_idx)
04BE01 29          1571*  	add hl,hl ; multiply current index by 2 ...
04BE02 ED 5B C2 C7 1572*  	ld de,(cur_file_idx)
       04          
04BE07 19          1573*  	add hl,de ; ... now by 3
04BE08 ED 5B CB C7 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04BE0D 19          1575*  	add hl,de
04BE0E ED 27       1576*  	ld hl,(hl)
04BE10 22 C8 C7 04 1577*  	ld (cur_buffer_id),hl
04BE14             1578*  ; bump the current file index
04BE14 2A C2 C7 04 1579*  	ld hl,(cur_file_idx)
04BE18 23          1580*  	inc hl
04BE19 22 C2 C7 04 1581*  	ld (cur_file_idx),hl
04BE1D C9          1582*  	ret
04BE1E             1583*  
04BE1E             1584*  ; load a sound file to a buffer
04BE1E             1585*  ; inputs: hl = bufferId ; ix = file size
04BE1E             1586*  vdu_load_sfx:
04BE1E             1587*  ; back up input parameters
04BE1E E5          1588*      push hl ; bufferId
04BE1F             1589*  ; load the sound
04BE1F CD A4 D3 04 1590*  	call vdu_load_buffer_from_file
04BE23             1591*  ; now make the buffer a sound sample
04BE23 E1          1592*      pop hl ; bufferId
04BE24 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04BE25             1594*      ; push hl ; bufferId
04BE25 CD 2D 01 04 1595*  	call vdu_buffer_to_sound
04BE29             1596*  ; ; play the loaded sound
04BE29             1597*  ;     ld c,0 ; channel
04BE29             1598*  ;     ld b,127 ; full volume
04BE29             1599*  ;     ld de,1000 ; 1 second duration
04BE29             1600*  ;     pop hl ; bufferId
04BE29             1601*  ;     call vdu_play_sample
04BE29 C9          1602*      ret
04BE2A             0025       include "src/asm/functions.asm"
04BE2A             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04BE2A             0002*  ; Print a zero-terminated string
04BE2A             0003*  ; HL: Pointer to string
04BE2A             0004*  printString:
04BE2A C5          0005*  	PUSH	BC
04BE2B 01 00 00 00 0006*  	LD		BC,0
04BE2F 3E 00       0007*  	LD 	 	A,0
04BE31 5B DF       0008*  	RST.LIL 18h
04BE33 C1          0009*  	POP		BC
04BE34 C9          0010*  	RET
04BE35             0011*  ; print a VDU sequence
04BE35             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04BE35             0013*  sendVDUsequence:
04BE35 C5          0014*  	PUSH	BC
04BE36 01 00 00 00 0015*  	LD		BC, 0
04BE3A 4E          0016*  	LD		C, (HL)
04BE3B 5B DF       0017*  	RST.LIL	18h
04BE3D C1          0018*  	POP		BC
04BE3E C9          0019*  	RET
04BE3F             0020*  ; Print Newline sequence to VDP
04BE3F             0021*  printNewLine:
04BE3F 3E 0D       0022*  	LD	A, '\r'
04BE41 5B D7       0023*  	RST.LIL 10h
04BE43 3E 0A       0024*  	LD	A, '\n'
04BE45 5B D7       0025*  	RST.LIL 10h
04BE47 C9          0026*  	RET
04BE48             0027*  ; Print a 24-bit HEX number
04BE48             0028*  ; HLU: Number to print
04BE48             0029*  printHex24:
04BE48 E5          0030*  	PUSH	HL
04BE49 21 02 00 00 0031*  	LD		HL, 2
04BE4D 39          0032*  	ADD		HL, SP
04BE4E 7E          0033*  	LD		A, (HL)
04BE4F E1          0034*  	POP		HL
04BE50 CD 5A BE 04 0035*  	CALL	printHex8
04BE54             0036*  ; Print a 16-bit HEX number
04BE54             0037*  ; HL: Number to print
04BE54             0038*  printHex16:
04BE54 7C          0039*  	LD		A,H
04BE55 CD 5A BE 04 0040*  	CALL	printHex8
04BE59 7D          0041*  	LD		A,L
04BE5A             0042*  ; Print an 8-bit HEX number
04BE5A             0043*  ; A: Number to print
04BE5A             0044*  printHex8:
04BE5A 4F          0045*  	LD		C,A
04BE5B 1F          0046*  	RRA
04BE5C 1F          0047*  	RRA
04BE5D 1F          0048*  	RRA
04BE5E 1F          0049*  	RRA
04BE5F CD 64 BE 04 0050*  	CALL	@F
04BE63 79          0051*  	LD		A,C
04BE64             0052*  @@:
04BE64 E6 0F       0053*  	AND		0Fh
04BE66 C6 90       0054*  	ADD		A,90h
04BE68 27          0055*  	DAA
04BE69 CE 40       0056*  	ADC		A,40h
04BE6B 27          0057*  	DAA
04BE6C 5B D7       0058*  	RST.LIL	10h
04BE6E C9          0059*  	RET
04BE6F             0060*  
04BE6F             0061*  ; Print a 0x HEX prefix
04BE6F             0062*  DisplayHexPrefix:
04BE6F 3E 30       0063*  	LD	A, '0'
04BE71 5B D7       0064*  	RST.LIL 10h
04BE73 3E 78       0065*  	LD	A, 'x'
04BE75 5B D7       0066*  	RST.LIL 10h
04BE77 C9          0067*  	RET
04BE78             0068*  
04BE78             0069*  
04BE78             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04BE78             0071*  ; HL : Value to print
04BE78             0072*  printDec:
04BE78 11 9C BE 04 0073*  	LD	 DE, _printDecBuffer
04BE7C CD A5 BE 04 0074*  	CALL Num2String
04BE80             0075*  ; BEGIN MY CODE
04BE80             0076*  ; replace leading zeroes with spaces
04BE80 21 9C BE 04 0077*      LD	 HL, _printDecBuffer
04BE84 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04BE86             0079*  @loop:
04BE86 7E          0080*      LD	 A, (HL)
04BE87 FE 30       0081*      CP	 '0'
04BE89 C2 97 BE 04 0082*      JP	 NZ, @done
04BE8D 3E 20       0083*      LD   A, ' '
04BE8F 77          0084*      LD	 (HL), A
04BE90 23          0085*      INC	 HL
04BE91 CD 1C B8 04 0086*      CALL vdu_cursor_forward
04BE95 10 EF       0087*      DJNZ @loop
04BE97             0088*  @done:
04BE97             0089*  ; END MY CODE
04BE97             0090*  	; LD	 HL, _printDecBuffer
04BE97 CD 2A BE 04 0091*  	CALL printString
04BE9B C9          0092*  	RET
04BE9C 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04BEA5             0094*  
04BEA5             0095*  ; This routine converts the value from HL into it's ASCII representation,
04BEA5             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04BEA5             0097*  ; so it will allways be 8 characters length
04BEA5             0098*  ; HL : Value to convert to string
04BEA5             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04BEA5             0100*  Num2String:
04BEA5 01 80 69 67 0101*  	LD	 BC,-10000000
04BEA9 CD DC BE 04 0102*  	CALL OneDigit
04BEAD 01 C0 BD F0 0103*  	LD	 BC,-1000000
04BEB1 CD DC BE 04 0104*  	CALL OneDigit
04BEB5 01 60 79 FE 0105*  	LD	 BC,-100000
04BEB9 CD DC BE 04 0106*  	CALL OneDigit
04BEBD 01 F0 D8 FF 0107*  	LD   BC,-10000
04BEC1 CD DC BE 04 0108*  	CALL OneDigit
04BEC5 01 18 FC FF 0109*  	LD   BC,-1000
04BEC9 CD DC BE 04 0110*  	CALL OneDigit
04BECD 01 9C FF FF 0111*  	LD   BC,-100
04BED1 CD DC BE 04 0112*  	CALL OneDigit
04BED5 0E F6       0113*  	LD   C,-10
04BED7 CD DC BE 04 0114*  	CALL OneDigit
04BEDB 48          0115*  	LD   C,B
04BEDC             0116*  OneDigit:
04BEDC 3E 2F       0117*  	LD   A,'0'-1
04BEDE             0118*  DivideMe:
04BEDE 3C          0119*  	INC  A
04BEDF 09          0120*  	ADD  HL,BC
04BEE0 38 FC       0121*  	JR   C,DivideMe
04BEE2 ED 42       0122*  	SBC  HL,BC
04BEE4 12          0123*  	LD   (DE),A
04BEE5 13          0124*  	INC  DE
04BEE6 C9          0125*  	RET
04BEE7             0126*  
04BEE7             0127*  
04BEE7             0128*  ; #### new functions added by Brandon R. Gates ####
04BEE7             0129*  
04BEE7             0130*  ; print the binary representation of the 8-bit value in a
04BEE7             0131*  ; destroys a, hl, bc
04BEE7             0132*  printBin8:
04BEE7 06 08       0133*      ld b,8      ; loop counter for 8 bits
04BEE9 21 04 BF 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04BEED             0135*                  ; (which will be the high bit of the value in a)
04BEED             0136*  @loop:
04BEED 07          0137*      rlca ; put the next highest bit into carry
04BEEE 38 04       0138*      jr c,@one
04BEF0 36 30       0139*      ld (hl),'0'
04BEF2 18 02       0140*      jr @next_bit
04BEF4             0141*  @one:
04BEF4 36 31       0142*      ld (hl),'1'
04BEF6             0143*  @next_bit:
04BEF6 23          0144*      inc hl
04BEF7 10 F4       0145*      djnz @loop
04BEF9             0146*  ; print it
04BEF9 21 04 BF 04 0147*  	ld hl,@cmd
04BEFD 01 08 00 00 0148*  	ld bc,@end-@cmd
04BF01 5B DF       0149*  	rst.lil $18
04BF03 C9          0150*  	ret
04BF04             0151*  @cmd: ds 8 ; eight bytes for eight bits
04BF0C             0152*  @end:
04BF0C             0153*  
04BF0C             0154*  ; print the binary representation of the 8-bit value in a
04BF0C             0155*  ; in reverse order (lsb first)
04BF0C             0156*  ; destroys a, hl, bc
04BF0C             0157*  printBin8Rev:
04BF0C 06 08       0158*      ld b,8      ; loop counter for 8 bits
04BF0E 21 29 BF 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
04BF12             0160*                  ; (which will be the high bit of the value in a)
04BF12             0161*  @loop:
04BF12 0F          0162*      rrca ; put the next lowest bit into carry
04BF13 38 04       0163*      jr c,@one
04BF15 36 30       0164*      ld (hl),'0'
04BF17 18 02       0165*      jr @next_bit
04BF19             0166*  @one:
04BF19 36 31       0167*      ld (hl),'1'
04BF1B             0168*  @next_bit:
04BF1B 23          0169*      inc hl
04BF1C 10 F4       0170*      djnz @loop
04BF1E             0171*  ; print it
04BF1E 21 29 BF 04 0172*  	ld hl,@cmd
04BF22 01 08 00 00 0173*  	ld bc,@end-@cmd
04BF26 5B DF       0174*  	rst.lil $18
04BF28 C9          0175*  	ret
04BF29             0176*  @cmd: ds 8 ; eight bytes for eight bits
04BF31             0177*  @end:
04BF31             0178*  
04BF31             0179*  ; print registers to screen in hexidecimal format
04BF31             0180*  ; inputs: none
04BF31             0181*  ; outputs: values of every register printed to screen
04BF31             0182*  ;    values of each register in global scratch memory
04BF31             0183*  ; destroys: nothing
04BF31             0184*  stepRegistersHex:
04BF31             0185*  ; store everything in scratch
04BF31 22 34 C1 04 0186*      ld (uhl),hl
04BF35 ED 43 37 C1 0187*      ld (ubc),bc
       04          
04BF3A ED 53 3A C1 0188*      ld (ude),de
       04          
04BF3F DD 22 3D C1 0189*      ld (uix),ix
       04          
04BF44 FD 22 40 C1 0190*      ld (uiy),iy
       04          
04BF49 F5          0191*      push af ; fml
04BF4A E1          0192*      pop hl  ; thanks, zilog
04BF4B 22 31 C1 04 0193*      ld (uaf),hl
04BF4F F5          0194*      push af ; dammit
04BF50             0195*  
04BF50             0196*  ; home the cursor
04BF50 CD 63 B9 04 0197*      call vdu_home_cursor
04BF54             0198*  
04BF54             0199*  ; print each register
04BF54 21 BD C0 04 0200*      ld hl,str_afu
04BF58 CD 2A BE 04 0201*      call printString
04BF5C 2A 31 C1 04 0202*      ld hl,(uaf)
04BF60 CD 48 BE 04 0203*      call printHex24
04BF64 CD 3F BE 04 0204*      call printNewLine
04BF68             0205*  
04BF68 21 C1 C0 04 0206*      ld hl,str_hlu
04BF6C CD 2A BE 04 0207*      call printString
04BF70 2A 34 C1 04 0208*      ld hl,(uhl)
04BF74 CD 48 BE 04 0209*      call printHex24
04BF78 CD 3F BE 04 0210*      call printNewLine
04BF7C             0211*  
04BF7C 21 C5 C0 04 0212*      ld hl,str_bcu
04BF80 CD 2A BE 04 0213*      call printString
04BF84 2A 37 C1 04 0214*      ld hl,(ubc)
04BF88 CD 48 BE 04 0215*      call printHex24
04BF8C CD 3F BE 04 0216*      call printNewLine
04BF90             0217*  
04BF90 21 C9 C0 04 0218*      ld hl,str_deu
04BF94 CD 2A BE 04 0219*      call printString
04BF98 2A 3A C1 04 0220*      ld hl,(ude)
04BF9C CD 48 BE 04 0221*      call printHex24
04BFA0 CD 3F BE 04 0222*      call printNewLine
04BFA4             0223*  
04BFA4 21 CD C0 04 0224*      ld hl,str_ixu
04BFA8 CD 2A BE 04 0225*      call printString
04BFAC 2A 3D C1 04 0226*      ld hl,(uix)
04BFB0 CD 48 BE 04 0227*      call printHex24
04BFB4 CD 3F BE 04 0228*      call printNewLine
04BFB8             0229*  
04BFB8 21 D1 C0 04 0230*      ld hl,str_iyu
04BFBC CD 2A BE 04 0231*      call printString
04BFC0 2A 40 C1 04 0232*      ld hl,(uiy)
04BFC4 CD 48 BE 04 0233*      call printHex24
04BFC8 CD 3F BE 04 0234*      call printNewLine
04BFCC             0235*  
04BFCC             0236*      ; call vsync
04BFCC             0237*  
04BFCC CD 3F BE 04 0238*      call printNewLine
04BFD0             0239*  
04BFD0             0240*  ; check for right shift key and quit if pressed
04BFD0             0241*  	MOSCALL mos_getkbmap
04BFD0 3E 1E       0001*M 			LD	A, function
04BFD2 5B CF       0002*M 			RST.LIL	08h
04BFD4             0242*  @stayhere:
04BFD4             0243*  ; 7 RightShift
04BFD4 DD CB 00 76 0244*      bit 6,(ix+0)
04BFD8 20 02       0245*      jr nz,@RightShift
04BFDA 18 F8       0246*      jr @stayhere
04BFDC             0247*  @RightShift:
04BFDC DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
04BFE0 3E 80       0249*      ld a,%10000000
04BFE2 CD 5A D1 04 0250*      call multiPurposeDelay
04BFE6             0251*  
04BFE6             0252*  ; restore everything
04BFE6 2A 34 C1 04 0253*      ld hl, (uhl)
04BFEA ED 4B 37 C1 0254*      ld bc, (ubc)
       04          
04BFEF ED 5B 3A C1 0255*      ld de, (ude)
       04          
04BFF4 DD 2A 3D C1 0256*      ld ix, (uix)
       04          
04BFF9 FD 2A 40 C1 0257*      ld iy, (uiy)
       04          
04BFFE F1          0258*      pop af
04BFFF             0259*  ; all done
04BFFF C9          0260*      ret
04C000             0261*  
04C000             0262*  ; print registers to screen in hexidecimal format
04C000             0263*  ; inputs: none
04C000             0264*  ; outputs: values of every register printed to screen
04C000             0265*  ;    values of each register in global scratch memory
04C000             0266*  ; destroys: nothing
04C000             0267*  dumpRegistersHex:
04C000             0268*  ; store everything in scratch
04C000 22 34 C1 04 0269*      ld (uhl),hl
04C004 ED 43 37 C1 0270*      ld (ubc),bc
       04          
04C009 ED 53 3A C1 0271*      ld (ude),de
       04          
04C00E DD 22 3D C1 0272*      ld (uix),ix
       04          
04C013 FD 22 40 C1 0273*      ld (uiy),iy
       04          
04C018 F5          0274*      push af ; fml
04C019 E1          0275*      pop hl  ; thanks, zilog
04C01A 22 31 C1 04 0276*      ld (uaf),hl
04C01E F5          0277*      push af ; dammit
04C01F             0278*  
04C01F             0279*  ; home the cursor
04C01F CD 63 B9 04 0280*      call vdu_home_cursor
04C023             0281*  
04C023             0282*  ; print each register
04C023 21 BD C0 04 0283*      ld hl,str_afu
04C027 CD 2A BE 04 0284*      call printString
04C02B 2A 31 C1 04 0285*      ld hl,(uaf)
04C02F CD 48 BE 04 0286*      call printHex24
04C033 CD 3F BE 04 0287*      call printNewLine
04C037             0288*  
04C037 21 C1 C0 04 0289*      ld hl,str_hlu
04C03B CD 2A BE 04 0290*      call printString
04C03F 2A 34 C1 04 0291*      ld hl,(uhl)
04C043 CD 48 BE 04 0292*      call printHex24
04C047 CD 3F BE 04 0293*      call printNewLine
04C04B             0294*  
04C04B 21 C5 C0 04 0295*      ld hl,str_bcu
04C04F CD 2A BE 04 0296*      call printString
04C053 2A 37 C1 04 0297*      ld hl,(ubc)
04C057 CD 48 BE 04 0298*      call printHex24
04C05B CD 3F BE 04 0299*      call printNewLine
04C05F             0300*  
04C05F 21 C9 C0 04 0301*      ld hl,str_deu
04C063 CD 2A BE 04 0302*      call printString
04C067 2A 3A C1 04 0303*      ld hl,(ude)
04C06B CD 48 BE 04 0304*      call printHex24
04C06F CD 3F BE 04 0305*      call printNewLine
04C073             0306*  
04C073 21 CD C0 04 0307*      ld hl,str_ixu
04C077 CD 2A BE 04 0308*      call printString
04C07B 2A 3D C1 04 0309*      ld hl,(uix)
04C07F CD 48 BE 04 0310*      call printHex24
04C083 CD 3F BE 04 0311*      call printNewLine
04C087             0312*  
04C087 21 D1 C0 04 0313*      ld hl,str_iyu
04C08B CD 2A BE 04 0314*      call printString
04C08F 2A 40 C1 04 0315*      ld hl,(uiy)
04C093 CD 48 BE 04 0316*      call printHex24
04C097 CD 3F BE 04 0317*      call printNewLine
04C09B             0318*  
04C09B CD 85 BA 04 0319*      call vdu_vblank
04C09F             0320*  
04C09F CD 3F BE 04 0321*      call printNewLine
04C0A3             0322*  ; restore everything
04C0A3 2A 34 C1 04 0323*      ld hl, (uhl)
04C0A7 ED 4B 37 C1 0324*      ld bc, (ubc)
       04          
04C0AC ED 5B 3A C1 0325*      ld de, (ude)
       04          
04C0B1 DD 2A 3D C1 0326*      ld ix, (uix)
       04          
04C0B6 FD 2A 40 C1 0327*      ld iy, (uiy)
       04          
04C0BB F1          0328*      pop af
04C0BC             0329*  ; all done
04C0BC C9          0330*      ret
04C0BD             0331*  
04C0BD 61 66 3D 00 0332*  str_afu: db "af=",0
04C0C1 68 6C 3D 00 0333*  str_hlu: db "hl=",0
04C0C5 62 63 3D 00 0334*  str_bcu: db "bc=",0
04C0C9 64 65 3D 00 0335*  str_deu: db "de=",0
04C0CD 69 78 3D 00 0336*  str_ixu: db "ix=",0
04C0D1 69 79 3D 00 0337*  str_iyu: db "iy=",0
04C0D5             0338*  
04C0D5             0339*  ; print udeuhl to screen in hexidecimal format
04C0D5             0340*  ; inputs: none
04C0D5             0341*  ; outputs: concatenated hexidecimal udeuhl
04C0D5             0342*  ; destroys: nothing
04C0D5             0343*  dumpUDEUHLHex:
04C0D5             0344*  ; store everything in scratch
04C0D5 22 34 C1 04 0345*      ld (uhl),hl
04C0D9 ED 43 37 C1 0346*      ld (ubc),bc
       04          
04C0DE ED 53 3A C1 0347*      ld (ude),de
       04          
04C0E3 DD 22 3D C1 0348*      ld (uix),ix
       04          
04C0E8 FD 22 40 C1 0349*      ld (uiy),iy
       04          
04C0ED F5          0350*      push af
04C0EE             0351*  
04C0EE             0352*  ; print each register
04C0EE             0353*  
04C0EE 21 28 C1 04 0354*      ld hl,str_udeuhl
04C0F2 CD 2A BE 04 0355*      call printString
04C0F6 2A 3A C1 04 0356*      ld hl,(ude)
04C0FA CD 48 BE 04 0357*      call printHex24
04C0FE 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
04C100 5B D7       0359*  	rst.lil 10h
04C102 2A 34 C1 04 0360*      ld hl,(uhl)
04C106 CD 48 BE 04 0361*      call printHex24
04C10A CD 3F BE 04 0362*      call printNewLine
04C10E             0363*  
04C10E             0364*  ; restore everything
04C10E 2A 34 C1 04 0365*      ld hl, (uhl)
04C112 ED 4B 37 C1 0366*      ld bc, (ubc)
       04          
04C117 ED 5B 3A C1 0367*      ld de, (ude)
       04          
04C11C DD 2A 3D C1 0368*      ld ix, (uix)
       04          
04C121 FD 2A 40 C1 0369*      ld iy, (uiy)
       04          
04C126 F1          0370*      pop af
04C127             0371*  ; all done
04C127 C9          0372*      ret
04C128             0373*  
04C128 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04C131             0375*  
04C131             0376*  ; global scratch memory for registers
04C131 00 00 00    0377*  uaf: dl 0
04C134 00 00 00    0378*  uhl: dl 0
04C137 00 00 00    0379*  ubc: dl 0
04C13A 00 00 00    0380*  ude: dl 0
04C13D 00 00 00    0381*  uix: dl 0
04C140 00 00 00    0382*  uiy: dl 0
04C143 00 00 00    0383*  usp: dl 0
04C146 00 00 00    0384*  upc: dl 0
04C149             0385*  
04C149             0386*  ; inputs: whatever is in the flags register
04C149             0387*  ; outputs: binary representation of flags
04C149             0388*  ;          with a header so we know which is what
04C149             0389*  ; destroys: nothing
04C149             0390*  ; preserves: everything
04C149             0391*  dumpFlags:
04C149             0392*  ; first we curse zilog for not giving direct access to flags
04C149 F5          0393*      push af ; this is so we can send it back unharmed
04C14A F5          0394*      push af ; this is so we can pop it to hl
04C14B             0395*  ; store everything in scratch
04C14B 22 34 C1 04 0396*      ld (uhl),hl
04C14F ED 43 37 C1 0397*      ld (ubc),bc
       04          
04C154 ED 53 3A C1 0398*      ld (ude),de
       04          
04C159 DD 22 3D C1 0399*      ld (uix),ix
       04          
04C15E FD 22 40 C1 0400*      ld (uiy),iy
       04          
04C163             0401*  ; next we print the header
04C163 21 8F C1 04 0402*      ld hl,@header
04C167 CD 2A BE 04 0403*      call printString
04C16B E1          0404*      pop hl ; flags are now in l
04C16C 7D          0405*      ld a,l ; flags are now in a
04C16D CD E7 BE 04 0406*      call printBin8
04C171 CD 3F BE 04 0407*  	call printNewLine
04C175             0408*  ; restore everything
04C175 2A 34 C1 04 0409*      ld hl, (uhl)
04C179 ED 4B 37 C1 0410*      ld bc, (ubc)
       04          
04C17E ED 5B 3A C1 0411*      ld de, (ude)
       04          
04C183 DD 2A 3D C1 0412*      ld ix, (uix)
       04          
04C188 FD 2A 40 C1 0413*      ld iy, (uiy)
       04          
04C18D F1          0414*      pop af ; send her home the way she came
04C18E C9          0415*      ret
04C18F             0416*  ; Bit 7 (S): Sign flag
04C18F             0417*  ; Bit 6 (Z): Zero flag
04C18F             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04C18F             0419*  ; Bit 4 (H): Half Carry flag
04C18F             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04C18F             0421*  ; Bit 2 (PV): Parity/Overflow flag
04C18F             0422*  ; Bit 1 (N): Subtract flag
04C18F             0423*  ; Bit 0 (C): Carry flag
04C18F 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04C19A             0425*  
04C19A             0426*  ; set all the bits in the flag register
04C19A             0427*  ; more of an academic exercise than anything useful
04C19A             0428*  ; inputs; none
04C19A             0429*  ; outputs; a=0,f=255
04C19A             0430*  ; destroys: flags, hl
04C19A             0431*  ; preserves: a, because why not
04C19A             0432*  setAllFlags:
04C19A 21 FF 00 00 0433*      ld hl,255
04C19E 67          0434*      ld h,a ; four cycles to preserve a is cheap
04C19F E5          0435*      push hl
04C1A0 F1          0436*      pop af
04C1A1 C9          0437*      ret
04C1A2             0438*  
04C1A2             0439*  ; reset all the bits in the flag register
04C1A2             0440*  ; unlike its inverse counterpart, this may actually be useful
04C1A2             0441*  ; inputs; none
04C1A2             0442*  ; outputs; a=0,f=0
04C1A2             0443*  ; destroys: flags, hl
04C1A2             0444*  ; preserves: a, because why not
04C1A2             0445*  resetAllFlags:
04C1A2 21 00 00 00 0446*      ld hl,0
04C1A6 67          0447*      ld h,a ; four cycles to preserve a is cheap
04C1A7 E5          0448*      push hl
04C1A8 F1          0449*      pop af
04C1A9 C9          0450*      ret
04C1AA             0451*  
04C1AA             0452*  ; wait until user presses a key
04C1AA             0453*  ; inputs: none
04C1AA             0454*  ; outputs: none
04C1AA             0455*  ; destroys: af,ix
04C1AA             0456*  waitKeypress:
04C1AA             0457*      MOSCALL mos_sysvars
04C1AA 3E 08       0001*M 			LD	A, function
04C1AC 5B CF       0002*M 			RST.LIL	08h
04C1AE AF          0458*      xor a ; zero out any prior keypresses
04C1AF DD 77 05    0459*      ld (ix+sysvar_keyascii),a
04C1B2             0460*  @loop:
04C1B2 DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
04C1B5 A7          0462*      and a
04C1B6 C0          0463*      ret nz
04C1B7 18 F9       0464*      jr @loop
04C1B9             0465*  
04C1B9             0466*  
04C1B9             0467*  ; print bytes from an address to the screen in hexidecimal format
04C1B9             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04C1B9             0469*  ; outputs: values of each byte printed to screen separated by spaces
04C1B9             0470*  ; destroys: nothing
04C1B9             0471*  dumpMemoryHex:
04C1B9             0472*  ; save all registers to the stack
04C1B9 F5          0473*      push af
04C1BA C5          0474*      push bc
04C1BB D5          0475*      push de
04C1BC E5          0476*      push hl
04C1BD DD E5       0477*      push ix
04C1BF FD E5       0478*      push iy
04C1C1             0479*  
04C1C1             0480*  ; set b to be our loop counter
04C1C1 47          0481*      ld b,a
04C1C2             0482*  @loop:
04C1C2             0483*  ; print the byte
04C1C2 7E          0484*      ld a,(hl)
04C1C3 CD 5A BE 04 0485*      call printHex8
04C1C7             0486*  ; print a space
04C1C7 3E 20       0487*      ld a,' '
04C1C9 5B D7       0488*      rst.lil 10h
04C1CB 23          0489*      inc hl
04C1CC 10 F4       0490*      djnz @loop
04C1CE CD 3F BE 04 0491*      call printNewLine
04C1D2             0492*  
04C1D2             0493*  ; restore everything
04C1D2 FD E1       0494*      pop iy
04C1D4 DD E1       0495*      pop ix
04C1D6 E1          0496*      pop hl
04C1D7 D1          0497*      pop de
04C1D8 C1          0498*      pop bc
04C1D9 F1          0499*      pop af
04C1DA             0500*  ; all done
04C1DA C9          0501*      ret
04C1DB             0502*  
04C1DB             0503*  
04C1DB             0504*  ; print bytes from an address to the screen in binary format
04C1DB             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04C1DB             0506*  ; outputs: values of each byte printed to screen separated by spaces
04C1DB             0507*  ; destroys: nothing
04C1DB             0508*  dumpMemoryBin:
04C1DB             0509*  ; save all registers to the stack
04C1DB F5          0510*      push af
04C1DC C5          0511*      push bc
04C1DD D5          0512*      push de
04C1DE E5          0513*      push hl
04C1DF DD E5       0514*      push ix
04C1E1 FD E5       0515*      push iy
04C1E3             0516*  
04C1E3             0517*  ; set b to be our loop counter
04C1E3 47          0518*      ld b,a
04C1E4             0519*  @loop:
04C1E4             0520*  ; print the byte
04C1E4 7E          0521*      ld a,(hl)
04C1E5 E5          0522*      push hl
04C1E6 C5          0523*      push bc
04C1E7 CD E7 BE 04 0524*      call printBin8
04C1EB C1          0525*      pop bc
04C1EC             0526*  ; print a space
04C1EC 3E 20       0527*      ld a,' '
04C1EE 5B D7       0528*      rst.lil 10h
04C1F0 E1          0529*      pop hl
04C1F1 23          0530*      inc hl
04C1F2 10 F0       0531*      djnz @loop
04C1F4 CD 3F BE 04 0532*      call printNewLine
04C1F8             0533*  
04C1F8             0534*  ; restore everything
04C1F8 FD E1       0535*      pop iy
04C1FA DD E1       0536*      pop ix
04C1FC E1          0537*      pop hl
04C1FD D1          0538*      pop de
04C1FE C1          0539*      pop bc
04C1FF F1          0540*      pop af
04C200             0541*  ; all done
04C200 C9          0542*      ret
04C201             0543*  
04C201             0544*  ; print bytes from an address to the screen in binary format
04C201             0545*  ; with the bits of each byte in reverse order (lsb first)
04C201             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04C201             0547*  ; outputs: values of each byte printed to screen separated by spaces
04C201             0548*  ; destroys: nothing
04C201             0549*  dumpMemoryBinRev:
04C201             0550*  ; save all registers to the stack
04C201 F5          0551*      push af
04C202 C5          0552*      push bc
04C203 D5          0553*      push de
04C204 E5          0554*      push hl
04C205 DD E5       0555*      push ix
04C207 FD E5       0556*      push iy
04C209             0557*  
04C209             0558*  ; set b to be our loop counter
04C209 47          0559*      ld b,a
04C20A             0560*  @loop:
04C20A             0561*  ; print the byte
04C20A 7E          0562*      ld a,(hl)
04C20B E5          0563*      push hl
04C20C C5          0564*      push bc
04C20D CD 0C BF 04 0565*      call printBin8Rev
04C211 C1          0566*      pop bc
04C212             0567*  ; print a space
04C212 3E 20       0568*      ld a,' '
04C214 5B D7       0569*      rst.lil 10h
04C216 E1          0570*      pop hl
04C217 23          0571*      inc hl
04C218 10 F0       0572*      djnz @loop
04C21A CD 3F BE 04 0573*      call printNewLine
04C21E             0574*  
04C21E             0575*  ; restore everything
04C21E FD E1       0576*      pop iy
04C220 DD E1       0577*      pop ix
04C222 E1          0578*      pop hl
04C223 D1          0579*      pop de
04C224 C1          0580*      pop bc
04C225 F1          0581*      pop af
04C226             0582*  ; all done
04C226 C9          0583*      ret
04C227             0026   	include "src/asm/player.asm"
04C227             0001*  ; ######## GAME STATE VARIABLES #######
04C227             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04C227 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04C22A             0004*  ; player current health,binary
04C22A             0005*  ; when < 0 player splodes
04C22A             0006*  ; restores to plyr_max_health when new ship spawns
04C22A 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04C22D             0008*  ; max player health,binary
04C22D             0009*  ; can increase with power-ups (todo)
04C22D 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04C230             0011*  ; when reaches zero,game ends
04C230             0012*  ; can increase based on TODO
04C230 03 00 00    0013*  plyr_lives: dl 3 ; binary
04C233             0014*  
04C233             0015*  ; ######### Player Variables ##########
04C233             0016*  ; player position on the map and orientation
04C233 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04C234 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04C235 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04C236 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04C237 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04C238 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04C239 00          0023*  cur_x: db 0x00
04C23A 00          0024*  cur_y: db 0x00
04C23B 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04C23C 00          0026*  xvel:  db 0x00
04C23D 00          0027*  yvel:  db 0x00
04C23E 00          0028*         db 0x00 ; padding
04C23F 00          0029*  dy:    db 0x00
04C240 00          0030*  dx:    db 0x00
04C241 00          0031*         db 0x00 ; padding
04C242 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04C243             0033*  
04C243 00          0034*  plyr_shot_x:      db 0x00
04C244 00          0035*  plyr_shot_y:      db 0x00
04C245 00          0036*                      db 0x00 ; padding
04C246 00          0037*  plyr_shot_xvel:   db 0x00
04C247 00          0038*  plyr_shot_yvel:   db 0x00
04C248 00          0039*                      db 0x00 ; padding
04C249 FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04C24A 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04C24D 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04C24E             0043*  
04C24E 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04C24F 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04C250             0046*  plyr_wpn_knife: equ %00000001
04C250             0047*  plyr_wpn_pistol: equ %00000010
04C250             0048*  plyr_wpn_mg: equ %00000100
04C250             0049*  plyr_wpn_gg: equ %00001000
04C250 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04C251 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04C254 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04C257             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04C25D             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04C263 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04C266             0056*  
04C266             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04C266 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04C269             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04C269             0060*  
04C269             0061*  
04C269 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04C26C             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04C274 00          0064*                   db 0 ; string terminator
04C275             0065*  
04C275             0066*  ; ######### PLAYER CONSTANTS ##########
04C275             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04C275             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04C27B             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04C27B             0070*  
04C27B             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04C27B             0072*  ; uses the same offsets from its table base as the main sprite table:
04C27B             0073*  plyr_start_variables: ; label marking beginning of table
04C27B 40          0074*  plyr_id:               db table_max_records
04C27C 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04C27D 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04C280 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04C283 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04C284 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04C285 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04C286 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04C289 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04C28C 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04C28F 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04C292 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04C295 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04C298 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04C29B 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04C29C 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04C29D             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04C29D 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04C29E 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04C29F 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04C2A0             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04C2A0             0095*  
04C2A0             0096*  
04C2A0             0097*  ; set initial player position
04C2A0             0098*  ; inputs: none,everything is hardcoded
04C2A0             0099*  ; outputs: player set to the first valid position on the map
04C2A0             0100*  ; destroys: a
04C2A0             0101*  plyr_init:
04C2A0 CD 4A 72 04 0102*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04C2A4 32 35 C2 04 0103*      ld (cur_cell),a
04C2A8 ED 53 39 C2 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04C2AD AF          0105*      xor a ; north is default orientation
04C2AE 32 38 C2 04 0106*      ld (orientation),a
04C2B2 21 1E 00 00 0107*      ld hl,plyr_move_rate
04C2B6 FD 21 75 C2 0108*      ld iy,plyr_move_timer
       04          
04C2BB CD 1E D1 04 0109*      call timestamp_tmr_set
04C2BF 3E 03       0110*      ld a,3
04C2C1 32 30 C2 04 0111*      ld (plyr_lives),a
04C2C5 3E 64       0112*      ld a,100
04C2C7 32 2A C2 04 0113*      ld (plyr_health),a
04C2CB 3E 08       0114*      ld a,8
04C2CD 32 69 C2 04 0115*      ld (plyr_ammo),a
04C2D1 3E 01       0116*      ld a,plyr_wpn_knife
04C2D3 F6 02       0117*      or plyr_wpn_pistol
04C2D5 32 4E C2 04 0118*      ld (plyr_wpns),a
04C2D9 3E 01       0119*      ld a,plyr_wpn_knife
04C2DB 32 4F C2 04 0120*      ld (plyr_wpn_active),a
04C2DF CD B3 C3 04 0121*      call plyr_set_weapon_parameters
04C2E3 FD 21 57 C2 0122*      ld iy,plyr_wpn_select_tmr
       04          
04C2E8 21 00 00 00 0123*      ld hl,0
04C2EC CD 1E D1 04 0124*      call timestamp_tmr_set
04C2F0 C9          0125*      ret
04C2F1             0126*  
04C2F1             0127*  ; restart player after dying
04C2F1             0128*  ; inputs: none,everything is hardcoded
04C2F1             0129*  ; outputs: player set to the first valid position on the map
04C2F1             0130*  ; destroys: a
04C2F1             0131*  plyr_restart:
04C2F1 3A 34 C2 04 0132*      ld a,(cur_room)
04C2F5 A7          0133*      and a
04C2F6 28 3A       0134*      jr z,@no_load
04C2F8             0135*  ; not in room zero so save state of current room
04C2F8 21 20 73 04 0136*      ld hl,room_flags
04C2FC 11 00 00 00 0137*  	ld de,0 ; make sure deu and d are zero
04C300 5F          0138*  	ld e,a
04C301 19          0139*  	add hl,de ; hl = address of room flags entry
04C302 3E 01       0140*  	ld a,room_flag_visited
04C304 B6          0141*  	or (hl)
04C305 77          0142*  	ld (hl),a
04C306             0143*  ; update from_room
04C306 3A 34 C2 04 0144*  	ld a,(cur_room)
04C30A 32 37 C2 04 0145*  	ld (from_room),a
04C30E             0146*  ; save old room state to room dat memory location
04C30E 21 2A 73 04 0147*  	ld hl,room_dat_lut
04C312 57          0148*  	ld d,a
04C313 1E 03       0149*  	ld e,3 ; three bytes per lookup record
04C315 ED 5C       0150*  	mlt de ; de = offset to room dat entry
04C317 19          0151*  	add hl,de ; hl = address of room dat entry
04C318 ED 17       0152*  	ld de,(hl) ; destination address for room data
04C31A 21 00 E0 B7 0153*  	ld hl,cell_status ; source address for room data
04C31E 01 00 20 00 0154*  	ld bc,8*1024 ; size of room data
04C322 ED B0       0155*  	ldir
04C324             0156*  ; fetch room zero state from room dat memory location
04C324 2A 2A 73 04 0157*  	ld hl,(room_00_dat) ; source address for room data
04C328 11 00 E0 B7 0158*  	ld de,cell_status ; destination address for room data
04C32C 01 00 20 00 0159*  	ld bc,8*1024 ; size of room data
04C330 ED B0       0160*  	ldir
04C332             0161*  @no_load:
04C332 AF          0162*      xor a
04C333 32 34 C2 04 0163*      ld (cur_room),a
04C337 32 38 C2 04 0164*      ld (orientation),a ; north is default orientation
04C33B 21 1E 00 00 0165*      ld hl,plyr_move_rate
04C33F FD 21 75 C2 0166*      ld iy,plyr_move_timer
       04          
04C344             0167*  
04C344 3A 30 C2 04 0168*      ld a,(plyr_lives)
04C348 3D          0169*      dec a
04C349 32 30 C2 04 0170*      ld (plyr_lives),a
04C34D 3E 64       0171*      ld a,100
04C34F 32 2A C2 04 0172*      ld (plyr_health),a
04C353 3E 08       0173*      ld a,8
04C355 CD D9 C4 04 0174*      call plyr_add_ammo
04C359             0175*  
04C359 CD 4A 72 04 0176*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04C35D 32 35 C2 04 0177*      ld (cur_cell),a
04C361 ED 53 39 C2 0178*      ld (cur_x),de ; implicitly populates cur_y
       04          
04C366             0179*  
04C366 C9          0180*      ret
04C367             0181*  
04C367             0182*  plyr_next_weapon:
04C367             0183*  ; check if select weapons timer has expired
04C367 FD 21 57 C2 0184*      ld iy,plyr_wpn_select_tmr
       04          
04C36C CD 29 D1 04 0185*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04C370 F0          0186*      ret p ; time left on timer so no weapon select
04C371             0187*  ; reset weapon select timer
04C371 21 14 00 00 0188*      ld hl,120/6 ; 1/6 second
04C375 CD 1E D1 04 0189*      call timestamp_tmr_set
04C379             0190*  ; select next weapon
04C379 21 4E C2 04 0191*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04C37D ED 07       0192*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04C37F             0193*  @loop:
04C37F 3A 4F C2 04 0194*      ld a,(plyr_wpn_active)
04C383 07          0195*      rlca ; rotate left
04C384 32 4F C2 04 0196*      ld (plyr_wpn_active),a
04C388 A6          0197*      and (hl) ; check inventory mask
04C389 28 F4       0198*      jr z,@loop
04C38B C3 B3 C3 04 0199*      jp plyr_set_weapon_parameters
04C38F             0200*  
04C38F             0201*  plyr_previous_weapon:
04C38F             0202*  ; check if select weapons timer has expired
04C38F FD 21 57 C2 0203*      ld iy,plyr_wpn_select_tmr
       04          
04C394 CD 29 D1 04 0204*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04C398 F0          0205*      ret p ; time left on timer so no weapon select
04C399             0206*  ; reset weapon select timer
04C399 21 14 00 00 0207*      ld hl,120/6 ; 1/6 second
04C39D CD 1E D1 04 0208*      call timestamp_tmr_set
04C3A1             0209*  ; select next weapon
04C3A1 21 4E C2 04 0210*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04C3A5 ED 07       0211*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04C3A7             0212*  @loop:
04C3A7 3A 4F C2 04 0213*      ld a,(plyr_wpn_active)
04C3AB 0F          0214*      rrca ; rotate right
04C3AC 32 4F C2 04 0215*      ld (plyr_wpn_active),a
04C3B0 A6          0216*      and (hl) ; check inventory mask
04C3B1 28 F4       0217*      jr z,@loop
04C3B3             0218*      ; fall through to plyr_set_weapon_parameters
04C3B3             0219*  
04C3B3             0220*  plyr_set_weapon_parameters:
04C3B3 FE 01       0221*      cp %00000001 ; knife
04C3B5 CA CC C3 04 0222*      jp z,@knife
04C3B9 FE 02       0223*      cp %00000010 ; pistol
04C3BB CA F4 C3 04 0224*      jp z,@pistol
04C3BF FE 04       0225*      cp %00000100 ; machine gun
04C3C1 CA 1C C4 04 0226*      jp z,@machine_gun
04C3C5 FE 08       0227*      cp %00001000 ; gatling gun
04C3C7 CA 44 C4 04 0228*      jp z,@gatling_gun
04C3CB C9          0229*      ret ; if none of the above do nothing
04C3CC             0230*  @knife:
04C3CC 21 05 21 00 0231*      ld hl,BUF_UI_BJ_KNIFE_00
04C3D0 22 54 C2 04 0232*      ld (plyr_wpn_ui_lg),hl
04C3D4 21 07 20 00 0233*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04C3D8 22 51 C2 04 0234*      ld (plyr_wpn_ui_sm),hl
04C3DC 3E 14       0235*      ld a,20 ; dps = 60
04C3DE 32 50 C2 04 0236*      ld (plyr_wpn_damage),a
04C3E2 21 3C 00 00 0237*      ld hl,120/2 ; 3 times/second
04C3E6 22 63 C2 04 0238*      ld (plyr_wpn_fire_rate),hl
04C3EA FD 21 5D C2 0239*      ld iy,plyr_wpn_fire_tmr
       04          
04C3EF CD 1E D1 04 0240*      call timestamp_tmr_set
04C3F3 C9          0241*      ret
04C3F4             0242*  @pistol:
04C3F4 21 0F 21 00 0243*      ld hl,BUF_UI_BJ_PISTOL_00
04C3F8 22 54 C2 04 0244*      ld (plyr_wpn_ui_lg),hl
04C3FC 21 09 20 00 0245*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04C400 22 51 C2 04 0246*      ld (plyr_wpn_ui_sm),hl
04C404             0247*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04C404 3E 1E       0248*      ld a,30 ; damage/burst
04C406 32 50 C2 04 0249*      ld (plyr_wpn_damage),a
04C40A 21 28 00 00 0250*      ld hl,120/3 ; 3 bursts/second
04C40E 22 63 C2 04 0251*      ld (plyr_wpn_fire_rate),hl
04C412 FD 21 5D C2 0252*      ld iy,plyr_wpn_fire_tmr
       04          
04C417 CD 1E D1 04 0253*      call timestamp_tmr_set
04C41B C9          0254*      ret
04C41C             0255*  @machine_gun:
04C41C 21 0A 21 00 0256*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04C420 22 54 C2 04 0257*      ld (plyr_wpn_ui_lg),hl
04C424 21 08 20 00 0258*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04C428 22 51 C2 04 0259*      ld (plyr_wpn_ui_sm),hl
04C42C             0260*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04C42C 3E 50       0261*      ld a,80 ; damage/burst
04C42E 32 50 C2 04 0262*      ld (plyr_wpn_damage),a
04C432 21 28 00 00 0263*      ld hl,120/3 ; 3 bursts/second
04C436 22 63 C2 04 0264*      ld (plyr_wpn_fire_rate),hl
04C43A FD 21 5D C2 0265*      ld iy,plyr_wpn_fire_tmr
       04          
04C43F CD 1E D1 04 0266*      call timestamp_tmr_set
04C443 C9          0267*      ret
04C444             0268*  @gatling_gun:
04C444 21 00 21 00 0269*      ld hl,BUF_UI_BJ_GATLING_00
04C448 22 54 C2 04 0270*      ld (plyr_wpn_ui_lg),hl
04C44C 21 06 20 00 0271*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04C450 22 51 C2 04 0272*      ld (plyr_wpn_ui_sm),hl
04C454             0273*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04C454 3E 78       0274*      ld a,120 ; damage/burst
04C456 32 50 C2 04 0275*      ld (plyr_wpn_damage),a
04C45A 21 28 00 00 0276*      ld hl,120/3 ; 3 bursts/second
04C45E 22 63 C2 04 0277*      ld (plyr_wpn_fire_rate),hl
04C462 FD 21 5D C2 0278*      ld iy,plyr_wpn_fire_tmr
       04          
04C467 CD 1E D1 04 0279*      call timestamp_tmr_set
04C46B C9          0280*      ret
04C46C             0281*  
04C46C             0282*  ; adds to player's health by a set amount
04C46C             0283*  ; inputs: a is the signed amount to modify health
04C46C             0284*  ; outputs: a will contain amount of health remaining
04C46C             0285*  ;          carry will be set if health maxes out to 255
04C46C             0286*  plyr_add_health:
04C46C 21 2A C2 04 0287*      ld hl,plyr_health
04C470 86          0288*      add a,(hl)
04C471 D2 77 C4 04 0289*      jp nc,@update ; if we roll over to zero when adding
04C475 3E FF       0290*      ld a,255 ; ... set health remaining to max
04C477             0291*  @update:
04C477 77          0292*      ld (hl),a
04C478 C3 A0 C4 04 0293*      jp plyr_health_image
04C47C             0294*  
04C47C             0295*  ; subtracts from player's health by a set amount
04C47C             0296*  ; inputs: a is the signed amount to modify health
04C47C             0297*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04C47C             0298*  ;        a contains remaining health
04C47C             0299*  plyr_sub_health:
04C47C A7          0300*      and a
04C47D C8          0301*      ret z
04C47E             0302*  ; DEBUG
04C47E ED 44       0303*      neg
04C480 32 C7 C4 04 0304*      ld (last_damage),a
04C484 ED 44       0305*      neg
04C486             0306*  ; END DEBUG
04C486 21 2A C2 04 0307*      ld hl,plyr_health
04C48A 86          0308*      add a,(hl)
04C48B CA 93 C4 04 0309*      jp z,@zero
04C48F DA 9F C4 04 0310*      jp c,@update
04C493             0311*  @zero:
04C493 21 03 20 00 0312*      ld hl,BUF_UI_BJ_100
04C497 22 95 73 04 0313*      ld (bj_health_image),hl
04C49B C3 F1 C2 04 0314*      jp plyr_restart ; will go the right place from there
04C49F             0315*  @update:
04C49F 77          0316*      ld (hl),a
04C4A0             0317*  ; fall through to plyr_health_image
04C4A0             0318*  
04C4A0             0319*  plyr_health_image:
04C4A0 FE 19       0320*      cp 25
04C4A2 38 0E       0321*      jr c,@less_than_25
04C4A4 FE 32       0322*      cp 50
04C4A6 38 10       0323*      jr c,@less_than_50
04C4A8 FE 4B       0324*      cp 75
04C4AA 38 12       0325*      jr c,@less_than_75
04C4AC 21 03 20 00 0326*      ld hl,BUF_UI_BJ_100
04C4B0 18 10       0327*      jr @update
04C4B2             0328*  @less_than_25:
04C4B2 21 00 20 00 0329*      ld hl,BUF_UI_BJ_025
04C4B6 18 0A       0330*      jr @update
04C4B8             0331*  @less_than_50:
04C4B8 21 01 20 00 0332*      ld hl,BUF_UI_BJ_050
04C4BC 18 04       0333*      jr @update
04C4BE             0334*  @less_than_75:
04C4BE 21 02 20 00 0335*      ld hl,BUF_UI_BJ_075
04C4C2             0336*  @update:
04C4C2 22 95 73 04 0337*      ld (bj_health_image),hl
04C4C6 C9          0338*      ret
04C4C7             0339*  
04C4C7 00 00 00    0340*  last_damage: dl 0x00 ; last damage dealt to player
04C4CA             0341*  
04C4CA             0342*  ; modifies the players score by a set amount
04C4CA             0343*  ; inputs: a is the signed amount to modify score
04C4CA             0344*  plyr_mod_score:
04C4CA 11 00 00 00 0345*      ld de,0 ; make sure deu is zero
04C4CE 5F          0346*      ld e,a
04C4CF 2A 27 C2 04 0347*      ld hl,(plyr_score)
04C4D3 19          0348*      add hl,de
04C4D4 22 27 C2 04 0349*      ld (plyr_score),hl
04C4D8 C9          0350*      ret
04C4D9             0351*  
04C4D9             0352*  ; adds to player's ammo by a set amount
04C4D9             0353*  ; inputs: a is the signed amount to modify ammo
04C4D9             0354*  ; outputs: a will contain amount of ammo remaining
04C4D9             0355*  ;          carry will be set if ammo maxes out to 255
04C4D9             0356*  plyr_add_ammo:
04C4D9 21 69 C2 04 0357*      ld hl,plyr_ammo
04C4DD 86          0358*      add a,(hl)
04C4DE D2 E4 C4 04 0359*      jp nc,@update ; if we roll over to zero when adding
04C4E2 3E FF       0360*      ld a,255 ; ... set ammo remaining to max
04C4E4             0361*  @update:
04C4E4 77          0362*      ld (hl),a
04C4E5 C9          0363*      ret
04C4E6             0364*  
04C4E6             0365*  ; subtracts from player's ammo by a set amount
04C4E6             0366*  ; inputs: a is the signed amount to modify ammo
04C4E6             0367*  ; outputs: carry reset if player was out of ammo before firing
04C4E6             0368*  ;          a will also contain amount of ammo remaining after shot
04C4E6             0369*  plyr_sub_ammo:
04C4E6 21 69 C2 04 0370*      ld hl,plyr_ammo
04C4EA 86          0371*      add a,(hl)
04C4EB DA FE C4 04 0372*      jp c,@update
04C4EF 3E 01       0373*      ld a,%00000001 ; knife
04C4F1 32 4F C2 04 0374*      ld (plyr_wpn_active),a
04C4F5 CD B3 C3 04 0375*      call plyr_set_weapon_parameters
04C4F9 AF          0376*      xor a ; clear carry, set ammo to zero
04C4FA 21 69 C2 04 0377*      ld hl,plyr_ammo
04C4FE             0378*  @update:
04C4FE 77          0379*      ld (hl),a
04C4FF C9          0380*      ret
04C500             0381*  
04C500             0382*  plyr_shoot_knife:
04C500 CD 1C CF 04 0383*      call sfx_play_knife
04C504             0384*      ; check whether the player hit anything
04C504 3A 38 C2 04 0385*      ld a,(orientation) ; direction knife is moving
04C508 5F          0386*      ld e,a
04C509 16 01       0387*      ld d,1 ; shot "velocity" in map units
04C50B CD 33 71 04 0388*      call get_dx_dy ; d,e = dy,dx
04C50F ED 53 46 C2 0389*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04C514 2A 39 C2 04 0390*      ld hl,(cur_x) ; h,l = player y,x
04C518 22 43 C2 04 0391*      ld (plyr_shot_x),hl ; initial shot position
04C51C ED 5B 46 C2 0392*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04C521 2A 43 C2 04 0393*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04C525             0394*      ; bump bullet position one map unit in direction of travel
04C525 7D          0395*      ld a,l ; player shot x
04C526 83          0396*      add a,e ; add xvel
04C527 6F          0397*      ld l,a ; save new x
04C528 7C          0398*      ld a,h ; player shot y
04C529 82          0399*      add a,d ; add yvel
04C52A 67          0400*      ld h,a ; save new y
04C52B 22 43 C2 04 0401*      ld (plyr_shot_x),hl ; and save that position
04C52F EB          0402*      ex de,hl ; d,e = bullet y,x
04C530 CD 0E 71 04 0403*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04C534             0404*  ; check whether target cell contains a sprite
04C534 DD 7E 03    0405*      ld a,(ix+map_sprite_id)
04C537 FE FF       0406*      cp 255 ; value if not sprite
04C539 C8          0407*      ret z ; if we hit a non-sprite, we're done
04C53A             0408*  ; is a sprite so run its "hurt" behavior routine
04C53A CD B3 AF 04 0409*      call sprite_set_pointer
04C53E 3E 02       0410*      ld a,sp_hurt
04C540 CD F0 B0 04 0411*      call do_sprite_behavior ; a = sprite behavior return code
04C544 C9          0412*      ret
04C545             0413*  
04C545             0414*  plyr_shoot_pistol:
04C545 3E FF       0415*      ld a,-1
04C547 CD E6 C4 04 0416*      call plyr_sub_ammo
04C54B DA 54 C5 04 0417*      jp c,@shoot
04C54F CD 04 CF 04 0418*      call sfx_play_gun_empty
04C553 C9          0419*      ret
04C554             0420*  @shoot:
04C554 CD 70 CF 04 0421*      call sfx_play_shot_pistol
04C558 C3 8A C5 04 0422*      jp plyr_move_bullet
04C55C             0423*  
04C55C             0424*  plyr_shoot_machine_gun:
04C55C 3E FC       0425*      ld a,-4
04C55E CD E6 C4 04 0426*      call plyr_sub_ammo
04C562 DA 6B C5 04 0427*      jp c,@shoot
04C566 CD 04 CF 04 0428*      call sfx_play_gun_empty
04C56A C9          0429*      ret
04C56B             0430*  @shoot:
04C56B CD 64 CF 04 0431*      call sfx_play_shot_machine_gun_burst
04C56F C3 8A C5 04 0432*      jp plyr_move_bullet
04C573             0433*  
04C573             0434*  plyr_shoot_gatling_gun:
04C573 3E F8       0435*      ld a,-8
04C575 CD E6 C4 04 0436*      call plyr_sub_ammo
04C579 DA 82 C5 04 0437*      jp c,@shoot
04C57D CD 04 CF 04 0438*      call sfx_play_gun_empty
04C581 C9          0439*      ret
04C582             0440*  @shoot:
04C582 CD 58 CF 04 0441*      call sfx_play_shot_gatling_burst
04C586 C3 8A C5 04 0442*      jp plyr_move_bullet
04C58A             0443*  
04C58A             0444*  plyr_move_bullet:
04C58A             0445*      ; check whether the player hit anything
04C58A 3A 38 C2 04 0446*      ld a,(orientation) ; direction shot is moving
04C58E 32 49 C2 04 0447*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04C592 5F          0448*      ld e,a
04C593 16 01       0449*      ld d,1 ; shot "velocity" in map units
04C595 CD 33 71 04 0450*      call get_dx_dy ; d,e = dy,dx
04C599 ED 53 46 C2 0451*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04C59E 2A 39 C2 04 0452*      ld hl,(cur_x) ; h,l = player y,x
04C5A2 22 43 C2 04 0453*      ld (plyr_shot_x),hl ; initial shot position
04C5A6 06 05       0454*      ld b,view_distance ; loop counter so player can't shoot past view distance
04C5A8             0455*  @loop:
04C5A8 C5          0456*      push bc ; save loop counter
04C5A9 ED 5B 46 C2 0457*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04C5AE 2A 43 C2 04 0458*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04C5B2             0459*      ; bump bullet position one map unit in direction of travel
04C5B2 7D          0460*      ld a,l ; player shot x
04C5B3 83          0461*      add a,e ; add xvel
04C5B4 6F          0462*      ld l,a ; save new x
04C5B5 7C          0463*      ld a,h ; player shot y
04C5B6 82          0464*      add a,d ; add yvel
04C5B7 67          0465*      ld h,a ; save new y
04C5B8 22 43 C2 04 0466*      ld (plyr_shot_x),hl ; and save that position
04C5BC EB          0467*      ex de,hl ; d,e = bullet y,x
04C5BD CD 0E 71 04 0468*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04C5C1             0469*  ; check whether target cell contains a sprite
04C5C1 DD 7E 03    0470*      ld a,(ix+map_sprite_id)
04C5C4 FE FF       0471*      cp 255 ; value if not sprite
04C5C6 28 14       0472*      jr z,@not_sprite
04C5C8             0473*  ; is a sprite so run its "hurt" behavior routine
04C5C8 CD B3 AF 04 0474*      call sprite_set_pointer
04C5CC 3E 02       0475*      ld a,sp_hurt
04C5CE CD F0 B0 04 0476*      call do_sprite_behavior ; a = sprite behavior return code
04C5D2 3A 49 C2 04 0477*      ld a,(plyr_shot_status)
04C5D6 FE FF       0478*      cp 255 ; value if shot hit a shootable sprite
04C5D8 28 10       0479*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04C5DA 18 16       0480*      jr @move_bullet ; otherwise keep moving bullet
04C5DC             0481*  @not_sprite:
04C5DC ED 5B 46 C2 0482*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04C5E1             0483*  ; read map type/status mask from target cell
04C5E1 DD 7E 00    0484*      ld a,(ix+map_type_status)
04C5E4 E6 03       0485*      and %00000011 ; mask off everything but the render type mask bits
04C5E6             0486*  ; branch on the values in the bitmask
04C5E6 FE 01       0487*      cp render_type_floor
04C5E8 28 08       0488*      jr z,@move_bullet ; keep going if map cell is a floor
04C5EA             0489*  @stop_bullet:
04C5EA C1          0490*      pop bc ; dummy pop to balance stack
04C5EB 3E FF       0491*      ld a,255
04C5ED 32 49 C2 04 0492*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04C5F1 C9          0493*      ret ; combat ended
04C5F2             0494*  @move_bullet:
04C5F2 C1          0495*      pop bc ; restore loop counter
04C5F3 10 B3       0496*      djnz @loop ; keep moving bullet if we have more distance to cover
04C5F5 3E FF       0497*      ld a,255
04C5F7 32 49 C2 04 0498*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04C5FB C9          0499*      ret ; combat ended
04C5FC             0500*  
04C5FC             0501*  plyr_shoot:
04C5FC             0502*  ; check if fire weapons timer has expired
04C5FC FD 21 5D C2 0503*      ld iy,plyr_wpn_fire_tmr
       04          
04C601 CD 29 D1 04 0504*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04C605 CA 0E C6 04 0505*      jp z,@time_up ; timer zero so fire weapon
04C609 FA 0E C6 04 0506*      jp m,@time_up ; timer negative so fire weapon
04C60D C9          0507*      ret ; timer not expired so don't fire weapon
04C60E             0508*  @time_up:
04C60E             0509*  ; reset fire weapon timer
04C60E FD 21 5D C2 0510*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04C613 2A 63 C2 04 0511*      ld hl,(plyr_wpn_fire_rate)
04C617 CD 1E D1 04 0512*      call timestamp_tmr_set
04C61B             0513*  ; check animation frame for zero
04C61B 21 66 C2 04 0514*      ld hl,plyr_wpn_anim_fr
04C61F 7E          0515*      ld a,(hl)
04C620 A7          0516*      and a
04C621 20 01       0517*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04C623 34          0518*      inc (hl) ; is zero so bump to first animation frame
04C624             0519*  @shoot:
04C624             0520*  ; roll for damage modifier
04C624 CD AD C7 04 0521*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04C628 21 50 C2 04 0522*      ld hl,plyr_wpn_damage
04C62C A6          0523*      and a,(hl) ; a contains modified damage value
04C62D ED 44       0524*      neg ; so we can add the negative
04C62F 32 4D C2 04 0525*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04C633             0526*  ; determine active weapon and shoot it
04C633 3A 4F C2 04 0527*      ld a,(plyr_wpn_active)
04C637 FE 02       0528*      cp plyr_wpn_pistol
04C639 CA 45 C5 04 0529*      jp z,plyr_shoot_pistol
04C63D FE 04       0530*      cp plyr_wpn_mg
04C63F CA 5C C5 04 0531*      jp z,plyr_shoot_machine_gun
04C643 FE 08       0532*      cp plyr_wpn_gg
04C645 CA 73 C5 04 0533*      jp z,plyr_shoot_gatling_gun
04C649 FE 01       0534*      cp plyr_wpn_knife
04C64B CA 00 C5 04 0535*      jp z,plyr_shoot_knife
04C64F C9          0536*      ret
04C650             0537*  
04C650             0538*  ; process player keyboard input
04C650             0539*  ; Inputs: plyr_x/y set at desired position
04C650             0540*  ; Returns: player position updated
04C650             0541*  ; Destroys: probably everything
04C650             0542*  plyr_input:
04C650             0543*  ; check weapon anmation frame for zero
04C650 3A 66 C2 04 0544*      ld a,(plyr_wpn_anim_fr)
04C654 E6 03       0545*      and 3 ; modulo 4
04C656 32 66 C2 04 0546*      ld (plyr_wpn_anim_fr),a
04C65A 28 05       0547*      jr z,@get_input
04C65C             0548*  ; ; animation frame is not zero so check animation timer
04C65C             0549*  ;     ld iy,plyr_wpn_anim_tmr
04C65C             0550*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04C65C             0551*  ;     jp z,@animate ; timer zero so animate
04C65C             0552*  ;     jp m,@animate ; timer negative so animate
04C65C             0553*  ;     jp @get_input ; time left on timer so no animation
04C65C             0554*  ; bump animation frame
04C65C             0555*  @animate:
04C65C 21 66 C2 04 0556*      ld hl,plyr_wpn_anim_fr
04C660 34          0557*      inc (hl) ; next frame
04C661             0558*  ; ; reset animation timer
04C661             0559*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04C661             0560*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04C661             0561*  ;     call timestamp_tmr_set
04C661             0562*  
04C661             0563*  @get_input:
04C661             0564*  ; reset player component velocities to zero as the default
04C661 21 00 00 00 0565*      ld hl,0
04C665 22 3C C2 04 0566*      ld (xvel),hl ; implicitly sets yvel
04C669 AF          0567*      xor a ;
04C66A 32 42 C2 04 0568*      ld (avel),a ; set player angular velocity to zero as default
04C66E             0569*  
04C66E             0570*  ; check for keypresses and branch accordingly
04C66E             0571*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04C66E 3E 1E       0001*M 			LD	A, function
04C670 5B CF       0002*M 			RST.LIL	08h
04C672             0572*  
04C672             0573*  ; CHECK WEAPON CONTROL KEYS
04C672             0574*  ; 58 Up player selects next weapon
04C672 DD CB 07 4E 0575*      bit 1,(ix+7)
04C676 28 08       0576*      jr z,@Up
04C678 DD E5       0577*      push ix ; it gets clobbered by the weapon select routine
04C67A CD 67 C3 04 0578*      call plyr_next_weapon
04C67E DD E1       0579*      pop ix
04C680             0580*  @Up:
04C680             0581*  
04C680             0582*  ; 42 Down
04C680 DD CB 05 4E 0583*      bit 1,(ix+5)
04C684 28 08       0584*      jr z,@Down
04C686 DD E5       0585*      push ix ; it gets clobbered by the weapon select routine
04C688 CD 8F C3 04 0586*      call plyr_previous_weapon
04C68C DD E1       0587*      pop ix
04C68E             0588*  @Down:
04C68E             0589*  
04C68E             0590*  ; =====================
04C68E             0591*  ; 99 Space FIRE ZEE MISSILES!!!111
04C68E DD CB 0C 56 0592*      bit 2,(ix+12)
04C692 28 08       0593*      jr z,@Space
04C694 DD E5       0594*      push ix ; it gets clobbered by the weapon firing
04C696 CD FC C5 04 0595*      call plyr_shoot
04C69A DD E1       0596*      pop ix ; restore ix
04C69C             0597*  @Space:
04C69C             0598*  
04C69C             0599*  ; CHECK MOVEMENT KEYS
04C69C             0600*  ; non-zero means no movement key was pressed
04C69C 3E FF       0601*      ld a,-1
04C69E             0602*  
04C69E             0603*  ; 34 W player moves forward
04C69E DD CB 04 4E 0604*      bit 1,(ix+4)
04C6A2 28 07       0605*      jr z,@W
04C6A4 3E 01       0606*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04C6A6 32 3D C2 04 0607*      ld (yvel),a
04C6AA AF          0608*      xor a
04C6AB             0609*  @W:
04C6AB             0610*  
04C6AB             0611*  ; 82 S player moves backward
04C6AB DD CB 0A 4E 0612*      bit 1,(ix+10)
04C6AF 28 0C       0613*      jr z,@S
04C6B1 16 FF       0614*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04C6B3 3A 3D C2 04 0615*      ld a,(yvel)
04C6B7 82          0616*      add a,d
04C6B8 32 3D C2 04 0617*      ld (yvel),a
04C6BC AF          0618*      xor a
04C6BD             0619*  @S:
04C6BD             0620*  
04C6BD             0621*  ; 66 A plyer moves left
04C6BD DD CB 08 4E 0622*      bit 1,(ix+8)
04C6C1 28 07       0623*      jr z,@A
04C6C3 3E FF       0624*      ld a,-speed_plyr ; no funky axis conversion here
04C6C5 32 3C C2 04 0625*      ld (xvel),a
04C6C9 AF          0626*      xor a
04C6CA             0627*  @A:
04C6CA             0628*  
04C6CA             0629*  ; 51 D player moves right
04C6CA DD CB 06 56 0630*      bit 2,(ix+6)
04C6CE 28 0C       0631*      jr z,@D
04C6D0 16 01       0632*      ld d,speed_plyr ; no funky axis conversion here
04C6D2 3A 3C C2 04 0633*      ld a,(xvel)
04C6D6 82          0634*      add a,d
04C6D7 32 3C C2 04 0635*      ld (xvel),a
04C6DB AF          0636*      xor a
04C6DC             0637*  @D:
04C6DC             0638*  
04C6DC             0639*  ; 26 Left player rotates anti-clockwise
04C6DC DD CB 03 4E 0640*      bit 1,(ix+3)
04C6E0 28 06       0641*      jr z,@Left
04C6E2 21 42 C2 04 0642*      ld hl,avel
04C6E6 35          0643*      dec (hl)
04C6E7 AF          0644*      xor a
04C6E8             0645*  @Left:
04C6E8             0646*  
04C6E8             0647*  ; 122 Right player rotates clockwise
04C6E8 DD CB 0F 4E 0648*      bit 1,(ix+15)
04C6EC 28 06       0649*      jr z,@Right
04C6EE 21 42 C2 04 0650*      ld hl,avel
04C6F2 34          0651*      inc (hl)
04C6F3 AF          0652*      xor a
04C6F4             0653*  @Right:
04C6F4             0654*  
04C6F4             0655*  ; KEYPRESS DETECTION DONE
04C6F4 A7          0656*      and a ; this will zero if player pressed a movement key
04C6F5 C0          0657*      ret nz ; non zero so no key pressed
04C6F6             0658*  ; check move timer
04C6F6 FD 21 75 C2 0659*      ld iy,plyr_move_timer
       04          
04C6FB CD 29 D1 04 0660*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04C6FF F0          0661*      ret p ; time left on timer so no movement
04C700             0662*  ; reset_move_timer
04C700 21 1E 00 00 0663*      ld hl,plyr_move_rate
04C704 FD 21 75 C2 0664*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04C709 CD 1E D1 04 0665*      call timestamp_tmr_set
04C70D             0666*  ; move player according to velocities set by keypresses
04C70D ED 5B 3C C2 0667*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04C712 3A 42 C2 04 0668*      ld a,(avel)
04C716 21 38 C2 04 0669*      ld hl,orientation
04C71A 86          0670*      add a,(hl)
04C71B E6 03       0671*      and 0x03 ; modulo 4
04C71D 77          0672*      ld (hl),a
04C71E CD 7B 71 04 0673*      call trans_dx_dy ; d = dy, e = dx
04C722 ED 53 40 C2 0674*      ld (dx),de
       04          
04C727 3A 39 C2 04 0675*      ld a,(cur_x)
04C72B 83          0676*      add a,e
04C72C 5F          0677*      ld e,a
04C72D 3A 3A C2 04 0678*      ld a,(cur_y)
04C731 82          0679*      add a,d
04C732 57          0680*      ld d,a
04C733 ED 53 3C C2 0681*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04C738 CD 0E 71 04 0682*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04C73C             0683*  ; check whether target cell contains a sprite
04C73C DD 7E 03    0684*      ld a,(ix+map_sprite_id)
04C73F FE FF       0685*      cp 255 ; value if not sprite
04C741 28 0A       0686*      jr z,@not_sprite
04C743             0687*  ; is a sprite so run its "use" behavior routine
04C743 CD B3 AF 04 0688*      call sprite_set_pointer
04C747 3E 01       0689*      ld a,sp_use
04C749 CD F0 B0 04 0690*      call do_sprite_behavior
04C74D             0691*  ; fall through because we still need to check out what's going on in the target cell
04C74D             0692*  @not_sprite:
04C74D ED 5B 3C C2 0693*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04C752             0694*  ; read map type/status mask from target cell
04C752 DD 7E 00    0695*      ld a,(ix+map_type_status)
04C755 47          0696*      ld b,a ; b = target cell type/status
04C756             0697*  ; branch on the values in the bitmask
04C756 3E 40       0698*      ld a,cell_is_wall
04C758 A0          0699*      and b
04C759 C0          0700*      ret nz ; can't move thru walls
04C75A 3E 04       0701*      ld a,cell_is_to_room
04C75C A0          0702*      and b
04C75D C2 86 72 04 0703*      jp nz,change_room
04C761             0704*      ; fall through to @move_it
04C761             0705*  @move_it:
04C761             0706*  ; we are cleared for movement so update player position
04C761 11 00 00 00 0707*      ld de,0 ; make sure deu is zero
04C765 ED 4B 40 C2 0708*      ld bc,(dx) ; b = dy, c = dx
       04          
04C76A 3A 39 C2 04 0709*      ld a,(cur_x)
04C76E 81          0710*      add a,c
04C76F 5F          0711*      ld e,a
04C770 32 39 C2 04 0712*      ld (cur_x),a
04C774 3A 3A C2 04 0713*      ld a,(cur_y)
04C778 80          0714*      add a,b
04C779 57          0715*      ld d,a
04C77A 32 3A C2 04 0716*      ld (cur_y),a
04C77E C9          0717*      ret
04C77F             0027   	include "src/asm/maths.asm"
04C77F 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04C783 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04C787             0003*  
04C787             0004*  ; set bcd values in a scratch memory address from registers bcde
04C787             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04C787             0006*  ; destroys ; hl
04C787             0007*  set_bcd:
04C787 73          0008*      ld (hl),e
04C788 23          0009*      inc hl
04C789 72          0010*      ld (hl),d
04C78A 23          0011*      inc hl
04C78B 71          0012*      ld (hl),c
04C78C 23          0013*      inc hl
04C78D 70          0014*      ld (hl),b
04C78E C9          0015*      ret
04C78F             0016*  
04C78F             0017*  ; load bcd values from a scratch memory address to bcde
04C78F             0018*  ; input: hl; scratch address
04C78F             0019*  ; output: bcde; 8-place bcd number
04C78F             0020*  ; destroys: hl
04C78F             0021*  get_bcd:
04C78F 5E          0022*      ld e,(hl)
04C790 23          0023*      inc hl
04C791 56          0024*      ld d,(hl)
04C792 23          0025*      inc hl
04C793 4E          0026*      ld c,(hl)
04C794 23          0027*      inc hl
04C795 46          0028*      ld b,(hl)
04C796 C9          0029*      ret
04C797             0030*  
04C797             0031*  ; BCD addition
04C797             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04C797             0033*  ;       a is the number of bytes holding each number (number of places/2)
04C797             0034*  ; outputs: (hl) + (de) --> (hl)
04C797             0035*  ; destroys: a,b,de,hl
04C797             0036*  add_bcd:
04C797 47          0037*      ld b,a ; loop counter
04C798 AF          0038*      xor a ; reset a, clear carry flag
04C799             0039*  adcec:
04C799 1A          0040*      ld a,(de) ; addend to acc
04C79A 8E          0041*      adc a,(hl) ; add (hl) to acc
04C79B 27          0042*      daa ; adjust result to bcd
04C79C 77          0043*      ld (hl),a ; store result
04C79D 23          0044*      inc hl ; advance memory pointers
04C79E 13          0045*      inc de
04C79F 10 F8       0046*      djnz adcec ; loop until b == 0
04C7A1 C9          0047*      ret
04C7A2             0048*  
04C7A2             0049*  ; BCD subtraction
04C7A2             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04C7A2             0051*  ;       a is the number of bytes holding each number (number of places/2)
04C7A2             0052*  ; outputs: (hl) - (de) --> (hl)
04C7A2             0053*  ; destroys: a,b,de,hl
04C7A2             0054*  sub_bcd:
04C7A2 47          0055*      ld b,a ; loop counter
04C7A3 AF          0056*      xor a ; reset a,clear carry flag
04C7A4             0057*  subdec:
04C7A4 1A          0058*      ld a,(de) ; subtrahend to acc
04C7A5 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04C7A6 27          0060*      daa ; adjust result to bcd
04C7A7 77          0061*      ld (hl),a ; store result
04C7A8 23          0062*      inc hl ; advance memory pointers
04C7A9 13          0063*      inc de
04C7AA 10 F8       0064*      djnz subdec ; loop until b == 0
04C7AC C9          0065*      ret
04C7AD             0066*  
04C7AD             0067*  ; http://www.z80.info/pseudo-random.txt
04C7AD             0068*  rand_8:
04C7AD C5          0069*      push bc
04C7AE 3A C1 C7 04 0070*      ld a,(r_seed)
04C7B2 4F          0071*      ld c,a
04C7B3             0072*  
04C7B3 0F          0073*      rrca ; multiply by 32
04C7B4 0F          0074*      rrca
04C7B5 0F          0075*      rrca
04C7B6 EE 1F       0076*      xor 0x1f
04C7B8             0077*  
04C7B8 81          0078*      add a,c
04C7B9 DE FF       0079*      sbc a,255 ; carry
04C7BB             0080*  
04C7BB 32 C1 C7 04 0081*      ld (r_seed),a
04C7BF C1          0082*      pop bc
04C7C0 C9          0083*      ret
04C7C1 50          0084*  r_seed: defb $50
04C7C2             0028   	include "src/asm/img_load.asm"
04C7C2 00 00 00    0001*  cur_file_idx: dl 0
04C7C5 00 00 00    0002*  cur_filename: dl 0
04C7C8 00 00 00    0003*  cur_buffer_id: dl 0
04C7CB 00 00 00    0004*  cur_buffer_id_lut: dl 0
04C7CE 00 00 00    0005*  cur_load_jump_table: dl 0
04C7D1             0006*  
04C7D1             0007*  img_load_init:
04C7D1             0008*  ; initialize bj's position parameters
04C7D1 21 00 00 00 0009*  	ld hl,0
04C7D5 22 1F C9 04 0010*  	ld (bj_yvel),hl
04C7D9             0011*  
04C7D9 21 2D 00 00 0012*      ld hl,45
04C7DD 22 22 C9 04 0013*  	ld (bj_y_cur),hl
04C7E1 22 25 C9 04 0014*  	ld (bj_y_min),hl
04C7E5 22 28 C9 04 0015*      ld (bj_y_max),hl
04C7E9             0016*  
04C7E9 21 01 00 00 0017*  	ld hl,1
04C7ED 22 13 C9 04 0018*  	ld (bj_xvel),hl
04C7F1             0019*  
04C7F1 21 0A 00 00 0020*  	ld hl,10
04C7F5 22 16 C9 04 0021*  	ld (bj_x_cur),hl
04C7F9 22 19 C9 04 0022*  	ld (bj_x_min),hl
04C7FD             0023*  
04C7FD 21 C8 00 00 0024*  	ld hl,320-120
04C801 22 1C C9 04 0025*  	ld (bj_x_max),hl
04C805             0026*  
04C805 C9          0027*      ret
04C806             0028*  
04C806             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04C806             0030*  img_load_main:
04C806 21 00 00 00 0031*      ld hl,0
04C80A 22 C2 C7 04 0032*      ld (cur_file_idx),hl
04C80E             0033*  img_load_main_loop:
04C80E             0034*  ; back up loop counter
04C80E C5          0035*      push bc
04C80F             0036*  ; load the next panel
04C80F CD 77 C8 04 0037*      call load_next_panel
04C813             0038*  ; draw all the things
04C813 CD 2B C9 04 0039*      call tmp_draw_all_the_things
04C817             0040*  ; draw the most recently loaded panel
04C817 2A C8 C7 04 0041*  	ld hl,(cur_buffer_id)
04C81B CD 94 B9 04 0042*  	call vdu_buff_select
04C81F 01 00 00 00 0043*  	ld bc,0
04C823 11 00 00 00 0044*  	ld de,0
04C827 CD 65 BB 04 0045*  	call vdu_plot_bmp
04C82B             0046*  ; move bj
04C82B CD B3 C8 04 0047*  	call move_bj
04C82F             0048*  ; print welcome message
04C82F DD 21 BE 8B 0049*  	ld ix,font_itc_honda
       04          
04C834 21 95 D1 04 0050*  	ld hl,hello_world
04C838 01 20 00 00 0051*  	ld bc,32
04C83C 11 02 00 00 0052*  	ld de,2
04C840 CD EB 70 04 0053*  	call font_bmp_print
04C844             0054*  ; print current filename
04C844 CD 2B B8 04 0055*  	call vdu_cls
04C848 2A C5 C7 04 0056*  	ld hl,(cur_filename)
04C84C CD 2A BE 04 0057*  	call printString
04C850 CD 3F BE 04 0058*  	call printNewLine
04C854             0059*  
04C854             0060*  ; print current load stopwatch
04C854 21 B7 D1 04 0061*  	ld hl,loading_time
04C858 CD 2A BE 04 0062*  	call printString
04C85C CD 47 D1 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C860 CD 78 BE 04 0064*  	call printDec
04C864             0065*  
04C864             0066*  ; flip screen
04C864 CD FA B9 04 0067*      call vdu_flip
04C868             0068*  ; decrement loop counter
04C868 C1          0069*      pop bc
04C869 0B          0070*  	dec bc
04C86A             0071*  ; ; DEBUG: DUMP REGISTERS
04C86A             0072*  ; 	push bc
04C86A             0073*  ; 	call dumpRegistersHex
04C86A             0074*  ; 	call vdu_flip
04C86A             0075*  ; 	pop bc
04C86A             0076*  ; ; END DEBUG
04C86A 79          0077*      ld a,c
04C86B B7          0078*      or a
04C86C C2 0E C8 04 0079*      jp nz,img_load_main_loop
04C870 78          0080*      ld a,b
04C871 B7          0081*      or a
04C872 C2 0E C8 04 0082*      jp nz,img_load_main_loop
04C876 C9          0083*      ret
04C877             0084*  
04C877             0085*  load_next_panel:
04C877             0086*  ; look up the load routine for the current file index
04C877 2A C2 C7 04 0087*  	ld hl,(cur_file_idx)
04C87B 29          0088*  	add hl,hl ; multiply current index by 2 ...
04C87C ED 5B C2 C7 0089*  	ld de,(cur_file_idx)
       04          
04C881 19          0090*  	add hl,de ; ... now by 3
04C882 ED 5B CE C7 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04C887 19          0092*  	add hl,de
04C888 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04C88A 22 8F C8 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04C88E             0095*  @jump_addr:
04C88E CD 00 00 00 0096*  	call 0 ; call the panel load routine
04C892             0097*  ; look up the buffer id for the current file
04C892 2A C2 C7 04 0098*  	ld hl,(cur_file_idx)
04C896 29          0099*  	add hl,hl ; multiply current index by 2 ...
04C897 ED 5B C2 C7 0100*  	ld de,(cur_file_idx)
       04          
04C89C 19          0101*  	add hl,de ; ... now by 3
04C89D ED 5B CB C7 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04C8A2 19          0103*  	add hl,de
04C8A3 ED 27       0104*  	ld hl,(hl)
04C8A5 22 C8 C7 04 0105*  	ld (cur_buffer_id),hl
04C8A9             0106*  ; bump the current file index
04C8A9 2A C2 C7 04 0107*  	ld hl,(cur_file_idx)
04C8AD 23          0108*  	inc hl
04C8AE 22 C2 C7 04 0109*  	ld (cur_file_idx),hl
04C8B2 C9          0110*  	ret
04C8B3             0111*  
04C8B3             0112*  move_bj:
04C8B3             0113*  ; activate bj bitmap
04C8B3 21 04 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04C8B7 CD 94 B9 04 0115*  	call vdu_buff_select
04C8BB             0116*  ; update position based on velocity parameters
04C8BB 2A 16 C9 04 0117*  	ld hl, (bj_x_cur)
04C8BF ED 5B 13 C9 0118*  	ld de, (bj_xvel)
       04          
04C8C4 19          0119*  	add hl, de
04C8C5 22 16 C9 04 0120*  	ld (bj_x_cur), hl
04C8C9 EB          0121*  	ex de,hl ; store x_cur in de
04C8CA             0122*  ; check if we're < x_min
04C8CA 2A 19 C9 04 0123*  	ld hl,(bj_x_min)
04C8CE AF          0124*  	xor a ; clear carry
04C8CF ED 52       0125*  	sbc hl,de ; x_min - x_cur
04C8D1 F2 EF C8 04 0126*  	jp p, move_bj_x_min
04C8D5             0127*  ; check if we're > x_max
04C8D5 2A 1C C9 04 0128*  	ld hl,(bj_x_max)
04C8D9 AF          0129*  	xor a ; clear carry
04C8DA ED 52       0130*  	sbc hl,de ; x_max - x_cur
04C8DC FA 01 C9 04 0131*  	jp m, move_bj_x_max
04C8E0             0132*  ; if not at either boundary, fall through to draw bj's
04C8E0             0133*  draw_bj:
04C8E0 ED 4B 16 C9 0134*  	ld bc,(bj_x_cur)
       04          
04C8E5 ED 5B 22 C9 0135*  	ld de,(bj_y_cur)
       04          
04C8EA CD 65 BB 04 0136*  	call vdu_plot_bmp
04C8EE C9          0137*  	ret
04C8EF             0138*  move_bj_x_min:
04C8EF 21 01 00 00 0139*  	ld hl,1
04C8F3 22 13 C9 04 0140*  	ld (bj_xvel),hl
04C8F7 2A 19 C9 04 0141*  	ld hl,(bj_x_min)
04C8FB 22 16 C9 04 0142*  	ld (bj_x_cur),hl
04C8FF 18 DF       0143*  	jr draw_bj
04C901             0144*  move_bj_x_max:
04C901 21 FF FF FF 0145*  	ld hl,-1
04C905 22 13 C9 04 0146*  	ld (bj_xvel),hl
04C909 2A 1C C9 04 0147*  	ld hl,(bj_x_max)
04C90D 22 16 C9 04 0148*  	ld (bj_x_cur),hl
04C911 18 CD       0149*  	jr draw_bj
04C913 00 00 00    0150*  bj_xvel: dl 0
04C916 00 00 00    0151*  bj_x_cur: dl 0
04C919 00 00 00    0152*  bj_x_min: dl 0
04C91C 00 00 00    0153*  bj_x_max: dl 0
04C91F             0154*  
04C91F 00 00 00    0155*  bj_yvel: dl 0
04C922 00 00 00    0156*  bj_y_cur: dl 0
04C925 00 00 00    0157*  bj_y_min: dl 0
04C928 00 00 00    0158*  bj_y_max: dl 0
04C92B             0159*  
04C92B             0160*  tmp_draw_all_the_things:
04C92B 21 0A 20 00 0161*      ld hl,BUF_UI_SPLASH
04C92F CD 94 B9 04 0162*      call vdu_buff_select
04C933 01 00 00 00 0163*      ld bc,0
04C937 11 00 00 00 0164*      ld de,0
04C93B CD 65 BB 04 0165*      call vdu_plot_bmp
04C93F C9          0166*  	ret
04C940             0167*  
04C940             0168*  ; load an uncompressed rgba2222 image file to a buffer
04C940             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04C940             0170*  vdu_load_img:
04C940             0171*  ; back up image dimension parameters
04C940 C5          0172*  	push bc
04C941 D5          0173*  	push de
04C942             0174*  ; load the image
04C942 CD A4 D3 04 0175*  	call vdu_load_buffer_from_file
04C946             0176*  ; now make it a bitmap
04C946 D1          0177*  	pop de
04C947 C1          0178*  	pop bc
04C948 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04C94A C3 A9 B9 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04C94E             0181*  
04C94E             0182*  ; load a compressed rgba2222 image file to a buffer
04C94E             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04C94E             0184*  vdu_load_img_cmp:
04C94E             0185*  ; back up image dimension parameters
04C94E C5          0186*  	push bc
04C94F D5          0187*  	push de
04C950             0188*  ; back up the buffer id
04C950 E5          0189*  	push hl
04C951             0190*  ; load the image
04C951 CD A4 D3 04 0191*  	call vdu_load_buffer_from_file
04C955             0192*  ; decompress the buffer
04C955 E1          0193*  	pop hl ; bufferId
04C956 CD 08 BA 04 0194*  	call vdu_decompress_buffer
04C95A             0195*  ; now make it a bitmap
04C95A D1          0196*  	pop de ; image height
04C95B C1          0197*  	pop bc ; image width
04C95C 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04C95E C3 A9 B9 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04C962             0029   	include "src/asm/sfx.asm"
04C962             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04C962             0002*  
04C962             0003*  SFX_num_buffers: equ 22
04C962             0004*  ; SFX buffer ids:
04C962             0005*  BUF_ACHTUNG: equ 0xFB00
04C962             0006*  BUF_AHH: equ 0xFB01
04C962             0007*  BUF_AUGH: equ 0xFB02
04C962             0008*  BUF_AYEE: equ 0xFB03
04C962             0009*  BUF_AYEE_HIGH: equ 0xFB04
04C962             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04C962             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04C962             0012*  BUF_DOG_YELP: equ 0xFB07
04C962             0013*  BUF_EXPLODE: equ 0xFB08
04C962             0014*  BUF_GOT_TREASURE: equ 0xFB09
04C962             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04C962             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04C962             0017*  BUF_KNIFE: equ 0xFB0C
04C962             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04C962             0019*  BUF_OOF: equ 0xFB0E
04C962             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04C962             0021*  BUF_SCREAM: equ 0xFB10
04C962             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04C962             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04C962             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04C962             0025*  BUF_UGH: equ 0xFB14
04C962             0026*  BUF_WILHELM: equ 0xFB15
04C962             0027*  
04C962             0028*  ; SFX buffer id reverse lookup:
04C962             0029*  SFX_buffer_id_lut:
04C962 00 FB 00    0030*  	dl BUF_ACHTUNG
04C965 01 FB 00    0031*  	dl BUF_AHH
04C968 02 FB 00    0032*  	dl BUF_AUGH
04C96B 03 FB 00    0033*  	dl BUF_AYEE
04C96E 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04C971 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04C974 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04C977 07 FB 00    0037*  	dl BUF_DOG_YELP
04C97A 08 FB 00    0038*  	dl BUF_EXPLODE
04C97D 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04C980 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04C983 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04C986 0C FB 00    0042*  	dl BUF_KNIFE
04C989 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04C98C 0E FB 00    0044*  	dl BUF_OOF
04C98F 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04C992 10 FB 00    0046*  	dl BUF_SCREAM
04C995 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04C998 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04C99B 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04C99E 14 FB 00    0050*  	dl BUF_UGH
04C9A1 15 FB 00    0051*  	dl BUF_WILHELM
04C9A4             0052*  
04C9A4             0053*  ; SFX duration lookup:
04C9A4             0054*  SFX_duration_lut:
04C9A4 58 03       0055*  	dw 856 ; ACHTUNG
04C9A6 91 01       0056*  	dw 401 ; AHH
04C9A8 FC 02       0057*  	dw 764 ; AUGH
04C9AA E6 01       0058*  	dw 486 ; AYEE
04C9AC 40 04       0059*  	dw 1088 ; AYEE_HIGH
04C9AE 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04C9B0 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04C9B2 B0 01       0062*  	dw 432 ; DOG_YELP
04C9B4 13 05       0063*  	dw 1299 ; EXPLODE
04C9B6 A7 05       0064*  	dw 1447 ; GOT_TREASURE
04C9B8 24 01       0065*  	dw 292 ; GUN_EMPTY
04C9BA BA 01       0066*  	dw 442 ; GUN_RELOAD
04C9BC F2 00       0067*  	dw 242 ; KNIFE
04C9BE 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04C9C0 CE 03       0069*  	dw 974 ; OOF
04C9C2 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04C9C4 E0 02       0071*  	dw 736 ; SCREAM
04C9C6 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04C9C8 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04C9CA 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04C9CC 77 01       0075*  	dw 375 ; UGH
04C9CE FD 04       0076*  	dw 1277 ; WILHELM
04C9D0             0077*  
04C9D0             0078*  ; SFX load routines jump table:
04C9D0             0079*  SFX_load_routines_table:
04C9D0 12 CA 04    0080*  	dl load_sfx_ACHTUNG
04C9D3 34 CA 04    0081*  	dl load_sfx_AHH
04C9D6 56 CA 04    0082*  	dl load_sfx_AUGH
04C9D9 78 CA 04    0083*  	dl load_sfx_AYEE
04C9DC 9A CA 04    0084*  	dl load_sfx_AYEE_HIGH
04C9DF BC CA 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04C9E2 DE CA 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04C9E5 00 CB 04    0087*  	dl load_sfx_DOG_YELP
04C9E8 22 CB 04    0088*  	dl load_sfx_EXPLODE
04C9EB 44 CB 04    0089*  	dl load_sfx_GOT_TREASURE
04C9EE 66 CB 04    0090*  	dl load_sfx_GUN_EMPTY
04C9F1 88 CB 04    0091*  	dl load_sfx_GUN_RELOAD
04C9F4 AA CB 04    0092*  	dl load_sfx_KNIFE
04C9F7 CC CB 04    0093*  	dl load_sfx_MEIN_LEBEN
04C9FA EE CB 04    0094*  	dl load_sfx_OOF
04C9FD 10 CC 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04CA00 32 CC 04    0096*  	dl load_sfx_SCREAM
04CA03 54 CC 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04CA06 76 CC 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04CA09 98 CC 04    0099*  	dl load_sfx_SHOT_PISTOL
04CA0C BA CC 04    0100*  	dl load_sfx_UGH
04CA0F DC CC 04    0101*  	dl load_sfx_WILHELM
04CA12             0102*  
04CA12             0103*  ; Import sfx .raw files and load them into VDP buffers
04CA12             0104*  
04CA12             0105*  load_sfx_ACHTUNG:
04CA12 21 FE CC 04 0106*  	ld hl,FACHTUNG
04CA16 22 C5 C7 04 0107*  	ld (cur_filename),hl
04CA1A 11 F1 D3 04 0108*  	ld de,filedata
04CA1E 01 00 00 01 0109*  	ld bc,65536
04CA22 3E 01       0110*  	ld a,mos_load
04CA24 5B CF       0111*  	RST.LIL 08h
04CA26 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04CA2A DD 21 3A 38 0113*  	ld ix,14394
       00          
04CA2F CD 1E BE 04 0114*  	call vdu_load_sfx
04CA33 C9          0115*  	ret
04CA34             0116*  
04CA34             0117*  load_sfx_AHH:
04CA34 21 0E CD 04 0118*  	ld hl,FAHH
04CA38 22 C5 C7 04 0119*  	ld (cur_filename),hl
04CA3C 11 F1 D3 04 0120*  	ld de,filedata
04CA40 01 00 00 01 0121*  	ld bc,65536
04CA44 3E 01       0122*  	ld a,mos_load
04CA46 5B CF       0123*  	RST.LIL 08h
04CA48 21 01 FB 00 0124*  	ld hl,BUF_AHH
04CA4C DD 21 63 1A 0125*  	ld ix,6755
       00          
04CA51 CD 1E BE 04 0126*  	call vdu_load_sfx
04CA55 C9          0127*  	ret
04CA56             0128*  
04CA56             0129*  load_sfx_AUGH:
04CA56 21 1A CD 04 0130*  	ld hl,FAUGH
04CA5A 22 C5 C7 04 0131*  	ld (cur_filename),hl
04CA5E 11 F1 D3 04 0132*  	ld de,filedata
04CA62 01 00 00 01 0133*  	ld bc,65536
04CA66 3E 01       0134*  	ld a,mos_load
04CA68 5B CF       0135*  	RST.LIL 08h
04CA6A 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04CA6E DD 21 39 32 0137*  	ld ix,12857
       00          
04CA73 CD 1E BE 04 0138*  	call vdu_load_sfx
04CA77 C9          0139*  	ret
04CA78             0140*  
04CA78             0141*  load_sfx_AYEE:
04CA78 21 27 CD 04 0142*  	ld hl,FAYEE
04CA7C 22 C5 C7 04 0143*  	ld (cur_filename),hl
04CA80 11 F1 D3 04 0144*  	ld de,filedata
04CA84 01 00 00 01 0145*  	ld bc,65536
04CA88 3E 01       0146*  	ld a,mos_load
04CA8A 5B CF       0147*  	RST.LIL 08h
04CA8C 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04CA90 DD 21 00 20 0149*  	ld ix,8192
       00          
04CA95 CD 1E BE 04 0150*  	call vdu_load_sfx
04CA99 C9          0151*  	ret
04CA9A             0152*  
04CA9A             0153*  load_sfx_AYEE_HIGH:
04CA9A 21 34 CD 04 0154*  	ld hl,FAYEE_HIGH
04CA9E 22 C5 C7 04 0155*  	ld (cur_filename),hl
04CAA2 11 F1 D3 04 0156*  	ld de,filedata
04CAA6 01 00 00 01 0157*  	ld bc,65536
04CAAA 3E 01       0158*  	ld a,mos_load
04CAAC 5B CF       0159*  	RST.LIL 08h
04CAAE 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04CAB2 DD 21 77 47 0161*  	ld ix,18295
       00          
04CAB7 CD 1E BE 04 0162*  	call vdu_load_sfx
04CABB C9          0163*  	ret
04CABC             0164*  
04CABC             0165*  load_sfx_DOG_WOOF_DOUBLE:
04CABC 21 46 CD 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04CAC0 22 C5 C7 04 0167*  	ld (cur_filename),hl
04CAC4 11 F1 D3 04 0168*  	ld de,filedata
04CAC8 01 00 00 01 0169*  	ld bc,65536
04CACC 3E 01       0170*  	ld a,mos_load
04CACE 5B CF       0171*  	RST.LIL 08h
04CAD0 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04CAD4 DD 21 24 28 0173*  	ld ix,10276
       00          
04CAD9 CD 1E BE 04 0174*  	call vdu_load_sfx
04CADD C9          0175*  	ret
04CADE             0176*  
04CADE             0177*  load_sfx_DOG_WOOF_SINGLE:
04CADE 21 5E CD 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04CAE2 22 C5 C7 04 0179*  	ld (cur_filename),hl
04CAE6 11 F1 D3 04 0180*  	ld de,filedata
04CAEA 01 00 00 01 0181*  	ld bc,65536
04CAEE 3E 01       0182*  	ld a,mos_load
04CAF0 5B CF       0183*  	RST.LIL 08h
04CAF2 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04CAF6 DD 21 10 23 0185*  	ld ix,8976
       00          
04CAFB CD 1E BE 04 0186*  	call vdu_load_sfx
04CAFF C9          0187*  	ret
04CB00             0188*  
04CB00             0189*  load_sfx_DOG_YELP:
04CB00 21 76 CD 04 0190*  	ld hl,FDOG_YELP
04CB04 22 C5 C7 04 0191*  	ld (cur_filename),hl
04CB08 11 F1 D3 04 0192*  	ld de,filedata
04CB0C 01 00 00 01 0193*  	ld bc,65536
04CB10 3E 01       0194*  	ld a,mos_load
04CB12 5B CF       0195*  	RST.LIL 08h
04CB14 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04CB18 DD 21 60 1C 0197*  	ld ix,7264
       00          
04CB1D CD 1E BE 04 0198*  	call vdu_load_sfx
04CB21 C9          0199*  	ret
04CB22             0200*  
04CB22             0201*  load_sfx_EXPLODE:
04CB22 21 87 CD 04 0202*  	ld hl,FEXPLODE
04CB26 22 C5 C7 04 0203*  	ld (cur_filename),hl
04CB2A 11 F1 D3 04 0204*  	ld de,filedata
04CB2E 01 00 00 01 0205*  	ld bc,65536
04CB32 3E 01       0206*  	ld a,mos_load
04CB34 5B CF       0207*  	RST.LIL 08h
04CB36 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04CB3A DD 21 48 55 0209*  	ld ix,21832
       00          
04CB3F CD 1E BE 04 0210*  	call vdu_load_sfx
04CB43 C9          0211*  	ret
04CB44             0212*  
04CB44             0213*  load_sfx_GOT_TREASURE:
04CB44 21 97 CD 04 0214*  	ld hl,FGOT_TREASURE
04CB48 22 C5 C7 04 0215*  	ld (cur_filename),hl
04CB4C 11 F1 D3 04 0216*  	ld de,filedata
04CB50 01 00 00 01 0217*  	ld bc,65536
04CB54 3E 01       0218*  	ld a,mos_load
04CB56 5B CF       0219*  	RST.LIL 08h
04CB58 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04CB5C DD 21 07 5F 0221*  	ld ix,24327
       00          
04CB61 CD 1E BE 04 0222*  	call vdu_load_sfx
04CB65 C9          0223*  	ret
04CB66             0224*  
04CB66             0225*  load_sfx_GUN_EMPTY:
04CB66 21 AC CD 04 0226*  	ld hl,FGUN_EMPTY
04CB6A 22 C5 C7 04 0227*  	ld (cur_filename),hl
04CB6E 11 F1 D3 04 0228*  	ld de,filedata
04CB72 01 00 00 01 0229*  	ld bc,65536
04CB76 3E 01       0230*  	ld a,mos_load
04CB78 5B CF       0231*  	RST.LIL 08h
04CB7A 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04CB7E DD 21 3F 13 0233*  	ld ix,4927
       00          
04CB83 CD 1E BE 04 0234*  	call vdu_load_sfx
04CB87 C9          0235*  	ret
04CB88             0236*  
04CB88             0237*  load_sfx_GUN_RELOAD:
04CB88 21 BE CD 04 0238*  	ld hl,FGUN_RELOAD
04CB8C 22 C5 C7 04 0239*  	ld (cur_filename),hl
04CB90 11 F1 D3 04 0240*  	ld de,filedata
04CB94 01 00 00 01 0241*  	ld bc,65536
04CB98 3E 01       0242*  	ld a,mos_load
04CB9A 5B CF       0243*  	RST.LIL 08h
04CB9C 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04CBA0 DD 21 0F 1D 0245*  	ld ix,7439
       00          
04CBA5 CD 1E BE 04 0246*  	call vdu_load_sfx
04CBA9 C9          0247*  	ret
04CBAA             0248*  
04CBAA             0249*  load_sfx_KNIFE:
04CBAA 21 D1 CD 04 0250*  	ld hl,FKNIFE
04CBAE 22 C5 C7 04 0251*  	ld (cur_filename),hl
04CBB2 11 F1 D3 04 0252*  	ld de,filedata
04CBB6 01 00 00 01 0253*  	ld bc,65536
04CBBA 3E 01       0254*  	ld a,mos_load
04CBBC 5B CF       0255*  	RST.LIL 08h
04CBBE 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04CBC2 DD 21 F3 0F 0257*  	ld ix,4083
       00          
04CBC7 CD 1E BE 04 0258*  	call vdu_load_sfx
04CBCB C9          0259*  	ret
04CBCC             0260*  
04CBCC             0261*  load_sfx_MEIN_LEBEN:
04CBCC 21 DF CD 04 0262*  	ld hl,FMEIN_LEBEN
04CBD0 22 C5 C7 04 0263*  	ld (cur_filename),hl
04CBD4 11 F1 D3 04 0264*  	ld de,filedata
04CBD8 01 00 00 01 0265*  	ld bc,65536
04CBDC 3E 01       0266*  	ld a,mos_load
04CBDE 5B CF       0267*  	RST.LIL 08h
04CBE0 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04CBE4 DD 21 81 35 0269*  	ld ix,13697
       00          
04CBE9 CD 1E BE 04 0270*  	call vdu_load_sfx
04CBED C9          0271*  	ret
04CBEE             0272*  
04CBEE             0273*  load_sfx_OOF:
04CBEE 21 F2 CD 04 0274*  	ld hl,FOOF
04CBF2 22 C5 C7 04 0275*  	ld (cur_filename),hl
04CBF6 11 F1 D3 04 0276*  	ld de,filedata
04CBFA 01 00 00 01 0277*  	ld bc,65536
04CBFE 3E 01       0278*  	ld a,mos_load
04CC00 5B CF       0279*  	RST.LIL 08h
04CC02 21 0E FB 00 0280*  	ld hl,BUF_OOF
04CC06 DD 21 00 40 0281*  	ld ix,16384
       00          
04CC0B CD 1E BE 04 0282*  	call vdu_load_sfx
04CC0F C9          0283*  	ret
04CC10             0284*  
04CC10             0285*  load_sfx_SCHUSSTAFFEL:
04CC10 21 FE CD 04 0286*  	ld hl,FSCHUSSTAFFEL
04CC14 22 C5 C7 04 0287*  	ld (cur_filename),hl
04CC18 11 F1 D3 04 0288*  	ld de,filedata
04CC1C 01 00 00 01 0289*  	ld bc,65536
04CC20 3E 01       0290*  	ld a,mos_load
04CC22 5B CF       0291*  	RST.LIL 08h
04CC24 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04CC28 DD 21 63 26 0293*  	ld ix,9827
       00          
04CC2D CD 1E BE 04 0294*  	call vdu_load_sfx
04CC31 C9          0295*  	ret
04CC32             0296*  
04CC32             0297*  load_sfx_SCREAM:
04CC32 21 13 CE 04 0298*  	ld hl,FSCREAM
04CC36 22 C5 C7 04 0299*  	ld (cur_filename),hl
04CC3A 11 F1 D3 04 0300*  	ld de,filedata
04CC3E 01 00 00 01 0301*  	ld bc,65536
04CC42 3E 01       0302*  	ld a,mos_load
04CC44 5B CF       0303*  	RST.LIL 08h
04CC46 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04CC4A DD 21 5E 30 0305*  	ld ix,12382
       00          
04CC4F CD 1E BE 04 0306*  	call vdu_load_sfx
04CC53 C9          0307*  	ret
04CC54             0308*  
04CC54             0309*  load_sfx_SHOT_GATLING_BURST:
04CC54 21 22 CE 04 0310*  	ld hl,FSHOT_GATLING_BURST
04CC58 22 C5 C7 04 0311*  	ld (cur_filename),hl
04CC5C 11 F1 D3 04 0312*  	ld de,filedata
04CC60 01 00 00 01 0313*  	ld bc,65536
04CC64 3E 01       0314*  	ld a,mos_load
04CC66 5B CF       0315*  	RST.LIL 08h
04CC68 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04CC6C DD 21 00 60 0317*  	ld ix,24576
       00          
04CC71 CD 1E BE 04 0318*  	call vdu_load_sfx
04CC75 C9          0319*  	ret
04CC76             0320*  
04CC76             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04CC76 21 3D CE 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04CC7A 22 C5 C7 04 0323*  	ld (cur_filename),hl
04CC7E 11 F1 D3 04 0324*  	ld de,filedata
04CC82 01 00 00 01 0325*  	ld bc,65536
04CC86 3E 01       0326*  	ld a,mos_load
04CC88 5B CF       0327*  	RST.LIL 08h
04CC8A 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04CC8E DD 21 C4 42 0329*  	ld ix,17092
       00          
04CC93 CD 1E BE 04 0330*  	call vdu_load_sfx
04CC97 C9          0331*  	ret
04CC98             0332*  
04CC98             0333*  load_sfx_SHOT_PISTOL:
04CC98 21 5C CE 04 0334*  	ld hl,FSHOT_PISTOL
04CC9C 22 C5 C7 04 0335*  	ld (cur_filename),hl
04CCA0 11 F1 D3 04 0336*  	ld de,filedata
04CCA4 01 00 00 01 0337*  	ld bc,65536
04CCA8 3E 01       0338*  	ld a,mos_load
04CCAA 5B CF       0339*  	RST.LIL 08h
04CCAC 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04CCB0 DD 21 61 4B 0341*  	ld ix,19297
       00          
04CCB5 CD 1E BE 04 0342*  	call vdu_load_sfx
04CCB9 C9          0343*  	ret
04CCBA             0344*  
04CCBA             0345*  load_sfx_UGH:
04CCBA 21 70 CE 04 0346*  	ld hl,FUGH
04CCBE 22 C5 C7 04 0347*  	ld (cur_filename),hl
04CCC2 11 F1 D3 04 0348*  	ld de,filedata
04CCC6 01 00 00 01 0349*  	ld bc,65536
04CCCA 3E 01       0350*  	ld a,mos_load
04CCCC 5B CF       0351*  	RST.LIL 08h
04CCCE 21 14 FB 00 0352*  	ld hl,BUF_UGH
04CCD2 DD 21 A9 18 0353*  	ld ix,6313
       00          
04CCD7 CD 1E BE 04 0354*  	call vdu_load_sfx
04CCDB C9          0355*  	ret
04CCDC             0356*  
04CCDC             0357*  load_sfx_WILHELM:
04CCDC 21 7C CE 04 0358*  	ld hl,FWILHELM
04CCE0 22 C5 C7 04 0359*  	ld (cur_filename),hl
04CCE4 11 F1 D3 04 0360*  	ld de,filedata
04CCE8 01 00 00 01 0361*  	ld bc,65536
04CCEC 3E 01       0362*  	ld a,mos_load
04CCEE 5B CF       0363*  	RST.LIL 08h
04CCF0 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04CCF4 DD 21 D7 53 0365*  	ld ix,21463
       00          
04CCF9 CD 1E BE 04 0366*  	call vdu_load_sfx
04CCFD C9          0367*  	ret
04CCFE             0368*  
04CCFE             0369*  ; File name lookups:
04CCFE 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04CD0E 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04CD1A 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04CD27 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04CD34 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04CD46 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04CD5E 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04CD76 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04CD87 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04CD97 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04CDAC 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04CDBE 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04CDD1 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04CDDF 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04CDF2 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04CDFE 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04CE13 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04CE22 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04CE3D 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04CE5C 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04CE70 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04CE7C 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04CE8C             0392*  
04CE8C             0393*  ; Play sfx routines
04CE8C             0394*  
04CE8C             0395*  sfx_play_achtung:
04CE8C 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04CE90 01 58 03 00 0397*  	ld bc,856
04CE94 C3 46 00 04 0398*  	jp vdu_play_sfx
04CE98             0399*  
04CE98             0400*  sfx_play_ahh:
04CE98 21 01 FB 00 0401*  	ld hl,BUF_AHH
04CE9C 01 91 01 00 0402*  	ld bc,401
04CEA0 C3 46 00 04 0403*  	jp vdu_play_sfx
04CEA4             0404*  
04CEA4             0405*  sfx_play_augh:
04CEA4 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04CEA8 01 FC 02 00 0407*  	ld bc,764
04CEAC C3 46 00 04 0408*  	jp vdu_play_sfx
04CEB0             0409*  
04CEB0             0410*  sfx_play_ayee:
04CEB0 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04CEB4 01 E6 01 00 0412*  	ld bc,486
04CEB8 C3 46 00 04 0413*  	jp vdu_play_sfx
04CEBC             0414*  
04CEBC             0415*  sfx_play_ayee_high:
04CEBC 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04CEC0 01 40 04 00 0417*  	ld bc,1088
04CEC4 C3 46 00 04 0418*  	jp vdu_play_sfx
04CEC8             0419*  
04CEC8             0420*  sfx_play_dog_woof_double:
04CEC8 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04CECC 01 63 02 00 0422*  	ld bc,611
04CED0 C3 46 00 04 0423*  	jp vdu_play_sfx
04CED4             0424*  
04CED4             0425*  sfx_play_dog_woof_single:
04CED4 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04CED8 01 15 02 00 0427*  	ld bc,533
04CEDC C3 46 00 04 0428*  	jp vdu_play_sfx
04CEE0             0429*  
04CEE0             0430*  sfx_play_dog_yelp:
04CEE0 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04CEE4 01 B0 01 00 0432*  	ld bc,432
04CEE8 C3 46 00 04 0433*  	jp vdu_play_sfx
04CEEC             0434*  
04CEEC             0435*  sfx_play_explode:
04CEEC 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04CEF0 01 13 05 00 0437*  	ld bc,1299
04CEF4 C3 46 00 04 0438*  	jp vdu_play_sfx
04CEF8             0439*  
04CEF8             0440*  sfx_play_got_treasure:
04CEF8 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04CEFC 01 A7 05 00 0442*  	ld bc,1447
04CF00 C3 46 00 04 0443*  	jp vdu_play_sfx
04CF04             0444*  
04CF04             0445*  sfx_play_gun_empty:
04CF04 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04CF08 01 24 01 00 0447*  	ld bc,292
04CF0C C3 46 00 04 0448*  	jp vdu_play_sfx
04CF10             0449*  
04CF10             0450*  sfx_play_gun_reload:
04CF10 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04CF14 01 BA 01 00 0452*  	ld bc,442
04CF18 C3 46 00 04 0453*  	jp vdu_play_sfx
04CF1C             0454*  
04CF1C             0455*  sfx_play_knife:
04CF1C 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04CF20 01 F2 00 00 0457*  	ld bc,242
04CF24 C3 46 00 04 0458*  	jp vdu_play_sfx
04CF28             0459*  
04CF28             0460*  sfx_play_mein_leben:
04CF28 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04CF2C 01 2E 03 00 0462*  	ld bc,814
04CF30 C3 46 00 04 0463*  	jp vdu_play_sfx
04CF34             0464*  
04CF34             0465*  sfx_play_oof:
04CF34 21 0E FB 00 0466*  	ld hl,BUF_OOF
04CF38 01 CE 03 00 0467*  	ld bc,974
04CF3C C3 46 00 04 0468*  	jp vdu_play_sfx
04CF40             0469*  
04CF40             0470*  sfx_play_schusstaffel:
04CF40 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04CF44 01 48 02 00 0472*  	ld bc,584
04CF48 C3 46 00 04 0473*  	jp vdu_play_sfx
04CF4C             0474*  
04CF4C             0475*  sfx_play_scream:
04CF4C 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04CF50 01 E0 02 00 0477*  	ld bc,736
04CF54 C3 46 00 04 0478*  	jp vdu_play_sfx
04CF58             0479*  
04CF58             0480*  sfx_play_shot_gatling_burst:
04CF58 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04CF5C 01 B6 05 00 0482*  	ld bc,1462
04CF60 C3 46 00 04 0483*  	jp vdu_play_sfx
04CF64             0484*  
04CF64             0485*  sfx_play_shot_machine_gun_burst:
04CF64 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04CF68 01 F9 03 00 0487*  	ld bc,1017
04CF6C C3 46 00 04 0488*  	jp vdu_play_sfx
04CF70             0489*  
04CF70             0490*  sfx_play_shot_pistol:
04CF70 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04CF74 01 7C 04 00 0492*  	ld bc,1148
04CF78 C3 46 00 04 0493*  	jp vdu_play_sfx
04CF7C             0494*  
04CF7C             0495*  sfx_play_ugh:
04CF7C 21 14 FB 00 0496*  	ld hl,BUF_UGH
04CF80 01 77 01 00 0497*  	ld bc,375
04CF84 C3 46 00 04 0498*  	jp vdu_play_sfx
04CF88             0499*  
04CF88             0500*  sfx_play_wilhelm:
04CF88 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04CF8C 01 FD 04 00 0502*  	ld bc,1277
04CF90 C3 46 00 04 0503*  	jp vdu_play_sfx
04CF94             0030   	include "src/asm/timer.asm"
04CF94             0001*  ; Table 32. Timer Control Registers
04CF94             0002*  ; this constant is the base address of the timer control registers
04CF94             0003*  ; each timer takes three bytes:
04CF94             0004*  ;   0: control register
04CF94             0005*  ;   1: low byte of timer reset value
04CF94             0006*  ;   2: high byte of timer reset value
04CF94             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04CF94             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04CF94             0009*  TMR_CTL:     equ 80h
04CF94             0010*  
04CF94             0011*  ; Timer Control Register Bit Definitions
04CF94             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04CF94             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04CF94             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04CF94             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04CF94             0016*                              ; the TMRx_CTL register is read.
04CF94             0017*  
04CF94             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04CF94             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04CF94             0020*  
04CF94             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04CF94             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04CF94             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04CF94             0024*                              ; written to the counter when the end-of-count value is reached.
04CF94             0025*  
04CF94             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04CF94             0027*  CLK_DIV_256:  equ %00001100 ;
04CF94             0028*  CLK_DIV_64:   equ %00001000 ;
04CF94             0029*  CLK_DIV_16:   equ %00000100 ;
04CF94             0030*  CLK_DIV_4:    equ %00000000 ;
04CF94             0031*  
04CF94             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04CF94             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04CF94             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04CF94             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04CF94             0036*                              ; programmer must ensure that this bit is set to 1 each time
04CF94             0037*                              ; SINGLE-PASS mode is used.
04CF94             0038*  
04CF94             0039*  ; disable/enable the programmable reload timer
04CF94             0040*  PRT_EN_0:     equ %00000000 ;
04CF94             0041*  PRT_EN_1:     equ %00000001 ;
04CF94             0042*  
04CF94             0043*  ; Table 37. Timer Input Source Select Register
04CF94             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04CF94             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04CF94             0046*  ;   00: System clock / CLK_DIV
04CF94             0047*  ;   01: RTC / CLK_DIV
04CF94             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04CF94             0049*  ;   10: GPIO port B pin 1.
04CF94             0050*  ;   11: GPIO port B pin 1.
04CF94             0051*  TMR_ISS:   equ 92h ; register address
04CF94             0052*  
04CF94             0053*  ; Table 51. Real-Time Clock Control Register
04CF94             0054*  RTC_CTRL: equ EDh ; register address
04CF94             0055*  
04CF94             0056*  ; alarm interrupt disable/enable
04CF94             0057*  RTC_ALARM_0:    equ %00000000
04CF94             0058*  RTC_ALARM_1:    equ %10000000
04CF94             0059*  
04CF94             0060*  ; interrupt on alarm disable/enable
04CF94             0061*  RTC_INT_ENT_0:  equ %00000000
04CF94             0062*  RTC_INT_ENT_1:  equ %01000000
04CF94             0063*  
04CF94             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04CF94             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04CF94             0066*  
04CF94             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04CF94             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04CF94             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04CF94             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04CF94             0071*  
04CF94             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04CF94             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04CF94             0074*  
04CF94             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04CF94             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04CF94             0077*  
04CF94             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04CF94             0079*                                  ; RTC counter is enabled.
04CF94             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04CF94             0081*                                  ; RTC counter is disabled.
04CF94             0082*  
04CF94             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04CF94             0084*  
04CF94             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04CF94             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04CF94 00 00 00    0087*  prt_reload: dl 0x000000
04CF97             0088*  
04CF97             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04CF97             0090*  ;          de = number PRT interrupts during test interval
04CF97             0091*  prt_calibrate:
04CF97 CD 85 BA 04 0092*      call vdu_vblank
04CF9B             0093*  ; set a MOS timer
04CF9B 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04CF9F FD 21 F2 D0 0095*      ld iy,tmr_test
       04          
04CFA4 CD D0 D0 04 0096*      call tmr_set
04CFA8             0097*  ; set a PRT timer
04CFA8             0098*      ; ld hl,prt_reload_hardware
04CFA8             0099*      ; ld hl,prt_reload_emulator
04CFA8 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04CFAC 22 94 CF 04 0101*      ld (prt_reload),hl
04CFB0 CD 0B D0 04 0102*      call prt_set
04CFB4             0103*  @loop:
04CFB4             0104*  ; check time remaining on MOS timer
04CFB4 CD DE D0 04 0105*      call tmr_get
04CFB8 CA C2 CF 04 0106*      jp z,@done ; time expired,so quit
04CFBC FA C2 CF 04 0107*      jp m,@done ; time past expiration (negative),so quit
04CFC0 18 F2       0108*      jr @loop
04CFC2             0109*  @done:
04CFC2 ED 5B 59 D0 0110*      ld de,(prt_irq_counter)
       04          
04CFC7 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04CFCB ED 43 94 CF 0112*      ld (prt_reload),bc
       04          
04CFD0 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04CFD4 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04CFD5 32 E2 D1 04 0115*      ld (is_emulator),a
04CFD9 ED 52       0116*      sbc hl,de
04CFDB 21 FA D1 04 0117*      ld hl,on_hardware ; default message for running on hardware
04CFDF CA 97 CF 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04CFE3 F8          0119*      ret m ; negative result means we're on hardware
04CFE4 3C          0120*      inc a ; we're on emulator
04CFE5 32 E2 D1 04 0121*      ld (is_emulator),a
04CFE9 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04CFED ED 43 94 CF 0123*      ld (prt_reload),bc
       04          
04CFF2 21 E3 D1 04 0124*      ld hl,on_emulator
04CFF6 C9          0125*      ret
04CFF7             0126*  
04CFF7 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04D00B             0128*  
04D00B             0129*  ; set PRT timer
04D00B             0130*  prt_set:
04D00B 21 00 00 00 0131*      ld hl,0
04D00F 22 59 D0 04 0132*      ld (prt_irq_counter),hl
04D013 2A 94 CF 04 0133*      ld hl,(prt_reload)
04D017 ED 29 84    0134*      out0 ($84),l
04D01A ED 21 85    0135*  	out0 ($85),h
04D01D             0136*  ; disable timer
04D01D 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04D01F ED 39 83    0138*  	out0 ($83),a
04D022             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04D022 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04D024 ED 39 83    0141*  	out0 ($83),a
04D027 C9          0142*      ret
04D028             0143*  
04D028             0144*  ; ===============================================
04D028             0145*  ; PRT Timer Interrupt Handling
04D028             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04D028             0147*  ; -----------------------------------------------
04D028             0148*  prt_irq_init:
04D028             0149*      ; set up interrupt vector table 2
04D028 21 00 00 00 0150*  	ld hl,0
04D02C 3A 0C 01 00 0151*  	ld a,($10c)
04D030 6F          0152*  	ld l,a
04D031 3A 0D 01 00 0153*  	ld a,($10d)
04D035 67          0154*  	ld h,a
04D036             0155*  
04D036             0156*  	; skip over CALL ($c3)
04D036 23          0157*  	inc hl
04D037             0158*  	; load address of jump into vector table 2 (in ram)
04D037 ED 27       0159*  	ld hl,(hl)
04D039             0160*  
04D039             0161*  	; write CALL prt_irq_handler to vector table 2
04D039 3E C3       0162*  	ld a,$c3
04D03B 77          0163*  	ld (hl),a
04D03C 23          0164*  	inc hl
04D03D 11 44 D0 04 0165*  	ld de,prt_irq_handler
04D041 ED 1F       0166*  	ld (hl),de
04D043             0167*  
04D043 C9          0168*      ret
04D044             0169*  
04D044             0170*  prt_irq_handler:
04D044 F3          0171*  	di
04D045 F5          0172*  	push af
04D046 E5          0173*      push hl
04D047 ED 38 83    0174*  	in0 a,($83)
04D04A 2A 59 D0 04 0175*  	ld hl,(prt_irq_counter)
04D04E 23          0176*  	inc hl
04D04F 22 59 D0 04 0177*  	ld (prt_irq_counter),hl
04D053 E1          0178*      pop hl
04D054 F1          0179*  	pop af
04D055 FB          0180*  	ei
04D056 5B ED 4D    0181*  	reti.l
04D059             0182*  
04D059             0183*  prt_irq_counter:
04D059 00 00 00    0184*  	.dl 0
04D05C             0185*  prt_irq_counter_saved:
04D05C 00 00 00    0186*      .dl 0
04D05F             0187*  
04D05F             0188*  prt_loop_reset:
04D05F E5          0189*      push hl
04D060 21 00 00 00 0190*  	ld hl,0
04D064 22 59 D0 04 0191*  	ld (prt_irq_counter),hl
04D068 22 CA D0 04 0192*      ld (prt_loop_counter),hl
04D06C 22 CD D0 04 0193*      ld (prt_loops),hl
04D070 CD 0B D0 04 0194*      call prt_set
04D074 E1          0195*      pop hl
04D075 C9          0196*      ret
04D076             0197*  
04D076             0198*  prt_loop_start:
04D076 E5          0199*      push hl
04D077 21 00 00 00 0200*  	ld hl,0
04D07B 22 59 D0 04 0201*  	ld (prt_irq_counter),hl
04D07F E1          0202*      pop hl
04D080 C9          0203*      ret
04D081             0204*  
04D081             0205*  prt_loop_stop:
04D081 E5          0206*      push hl
04D082 D5          0207*      push de
04D083 2A 59 D0 04 0208*      ld hl,(prt_irq_counter)
04D087 ED 5B CA D0 0209*      ld de,(prt_loop_counter)
       04          
04D08C 19          0210*      add hl,de
04D08D 22 CA D0 04 0211*      ld (prt_loop_counter),hl
04D091 21 00 00 00 0212*      ld hl,0
04D095 22 59 D0 04 0213*      ld (prt_irq_counter),hl
04D099 2A CD D0 04 0214*      ld hl,(prt_loops)
04D09D 23          0215*      inc hl
04D09E 22 CD D0 04 0216*      ld (prt_loops),hl
04D0A2 D1          0217*      pop de
04D0A3 E1          0218*      pop hl
04D0A4 C9          0219*      ret
04D0A5             0220*  
04D0A5             0221*  ; inputs: bc = y,x text coordinates to print
04D0A5             0222*  prt_loop_print:
04D0A5 F5          0223*      push af
04D0A6 E5          0224*      push hl
04D0A7 C5          0225*      push bc
04D0A8 D5          0226*      push de
04D0A9 DD E5       0227*      push ix
04D0AB FD E5       0228*      push iy
04D0AD CD 68 B9 04 0229*      call vdu_move_cursor
04D0B1             0230*  
04D0B1 2A CA D0 04 0231*      ld hl,(prt_loop_counter)
04D0B5 CD 78 BE 04 0232*      call printDec
04D0B9             0233*  
04D0B9 2A CD D0 04 0234*      ld hl,(prt_loops)
04D0BD CD 78 BE 04 0235*      call printDec
04D0C1             0236*  
04D0C1 FD E1       0237*      pop iy
04D0C3 DD E1       0238*      pop ix
04D0C5 D1          0239*      pop de
04D0C6 C1          0240*      pop bc
04D0C7 E1          0241*      pop hl
04D0C8 F1          0242*      pop af
04D0C9 C9          0243*      ret
04D0CA             0244*  
04D0CA             0245*  prt_loop_counter:
04D0CA 00 00 00    0246*      .dl 0
04D0CD             0247*  prt_loops:
04D0CD 00 00 00    0248*      .dl 0
04D0D0             0249*  
04D0D0             0250*  ; ===============================================
04D0D0             0251*  ; Timer functions
04D0D0             0252*  ; -----------------------------------------------
04D0D0             0253*  ; set a countdown timer
04D0D0             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04D0D0             0255*  ; returns: hl = current time
04D0D0             0256*  tmr_set:
04D0D0 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04D0D3             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04D0D3 3E 08       0001*M 			LD	A, function
04D0D5 5B CF       0002*M 			RST.LIL	08h
04D0D7 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04D0DA FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04D0DD C9          0261*      ret
04D0DE             0262*  
04D0DE             0263*  ; gets time remaining on a countdown timer
04D0DE             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04D0DE             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04D0DE             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04D0DE             0267*  tmr_get:
04D0DE             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04D0DE 3E 08       0001*M 			LD	A, function
04D0E0 5B CF       0002*M 			RST.LIL	08h
04D0E2 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04D0E5 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04D0E8 AF          0271*      xor a                   ; clear carry
04D0E9 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04D0EB FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04D0EE AF          0274*      xor a                   ; clear carry
04D0EF ED 5A       0275*      adc hl,de               ; hl = time remaining
04D0F1             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04D0F1 C9          0277*      ret
04D0F2             0278*  
04D0F2             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04D0F8             0280*  
04D0F8 00 00 00    0281*  timestamp_now: dl 0
04D0FB 00 00 00    0282*  timestamp_old: dl 0
04D0FE 00 00 00    0283*  timestamp_chg: dl 0
04D101             0284*  
04D101             0285*  ; update the global timestamp from the system clock
04D101             0286*  ; inputs: none
04D101             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04D101             0288*  ;          de = current time
04D101             0289*  ;          ix = pointer to syvars table
04D101             0290*  ; destroys: af,hl,de,ix
04D101             0291*  timestamp_tick:
04D101 ED 5B F8 D0 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04D106 ED 53 FB D0 0293*      ld (timestamp_old),de   ; save previous time
       04          
04D10B             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04D10B 3E 08       0001*M 			LD	A, function
04D10D 5B CF       0002*M 			RST.LIL	08h
04D10F DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04D112 22 F8 D0 04 0296*      ld (timestamp_now),hl   ; save current time
04D116 AF          0297*      xor a                   ; clear carry
04D117 ED 52       0298*      sbc hl,de               ; hl = time elapsed
04D119 22 FE D0 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04D11D C9          0300*      ret
04D11E             0301*  
04D11E             0302*  ; set a countdown timer
04D11E             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04D11E             0304*  ; requires: timestamp_tick to be called at least once before this function
04D11E             0305*  ; returns: hl = current time
04D11E             0306*  ; destroys: hl
04D11E             0307*  timestamp_tmr_set:
04D11E FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04D121 2A F8 D0 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04D125 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04D128 C9          0311*      ret
04D129             0312*  
04D129             0313*  ; gets time remaining on a countdown timer following the global timestamp
04D129             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04D129             0315*  ; requires: timestamp_tick to be called at least once before this function
04D129             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04D129             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04D129             0318*  ; destroys: af,hl,de
04D129             0319*  timestamp_tmr_get:
04D129 ED 5B F8 D0 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04D12E FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04D131 AF          0322*      xor a                   ; clear carry
04D132 ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04D134 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04D137 AF          0325*      xor a                   ; clear carry
04D138 ED 5A       0326*      adc hl,de               ; hl = time remaining
04D13A             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04D13A C9          0328*      ret
04D13B             0329*  
04D13B             0330*  ; set a stopwatch
04D13B             0331*  ; returns: hl = start time
04D13B             0332*  ; destroys: hl,ix
04D13B             0333*  stopwatch_set:
04D13B             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04D13B 3E 08       0001*M 			LD	A, function
04D13D 5B CF       0002*M 			RST.LIL	08h
04D13F DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04D142 22 57 D1 04 0336*      ld (stopwatch_started),hl            ; set start time
04D146 C9          0337*      ret
04D147             0338*  
04D147             0339*  ; gets time elapsed on a stopwatch
04D147             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04D147             0341*  ; destroys: af,hl,de,ix
04D147             0342*  stopwatch_get:
04D147             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04D147 3E 08       0001*M 			LD	A, function
04D149 5B CF       0002*M 			RST.LIL	08h
04D14B DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04D14E ED 5B 57 D1 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04D153 AF          0346*      xor a                   ; clear carry
04D154 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04D156 C9          0348*      ret
04D157             0349*  
04D157             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04D15A             0351*  
04D15A             0352*  ; ------------------
04D15A             0353*  ; delay routine
04D15A             0354*  ; Author: Richard Turrnidge
04D15A             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04D15A             0356*  ; routine waits a fixed time,then returns
04D15A             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04D15A             0358*  ; eg. ld A,00000100b
04D15A             0359*  
04D15A             0360*  multiPurposeDelay:
04D15A F5          0361*      push af
04D15B C5          0362*      push bc
04D15C DD E5       0363*      push ix
04D15E 47          0364*      ld b,a
04D15F 3E 08       0365*      ld a,$08
04D161 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04D163             0367*  
04D163             0368*  waitLoop:
04D163             0369*  
04D163 DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04D166             0371*  
04D166             0372*                                  ;   we check if bit set is same as last time we checked.
04D166             0373*                                  ;   bit 0 - don't use
04D166             0374*                                  ;   bit 1 - changes 64 times per second
04D166             0375*                                  ;   bit 2 - changes 32 times per second
04D166             0376*                                  ;   bit 3 - changes 16 times per second
04D166             0377*  
04D166             0378*                                  ;   bit 4 - changes 8 times per second
04D166             0379*                                  ;   bit 5 - changes 4 times per second
04D166             0380*                                  ;   bit 6 - changes 2 times per second
04D166             0381*                                  ;   bit 7 - changes 1 times per second
04D166 A0          0382*      and b
04D167 4F          0383*      ld c,a
04D168 3A 79 D1 04 0384*      ld a,(oldTimeStamp)
04D16C B9          0385*      cp c                        ; is A same as last value?
04D16D 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04D16F 79          0387*      ld a,c
04D170 32 79 D1 04 0388*      ld (oldTimeStamp),a        ; set new value
04D174             0389*  
04D174 DD E1       0390*      pop ix
04D176 C1          0391*      pop bc
04D177 F1          0392*      pop af
04D178 C9          0393*      ret
04D179             0394*  
04D179 00          0395*  oldTimeStamp:   .db 00h
04D17A             0031   
04D17A             0032   
04D17A             0033   start:
04D17A F5          0034       push af
04D17B C5          0035       push bc
04D17C D5          0036       push de
04D17D DD E5       0037       push ix
04D17F FD E5       0038       push iy
04D181             0039   
04D181 CD 11 D2 04 0040   	call init ; Initialization code
04D185 CD 54 D3 04 0041       call main ; Call the main function
04D189             0042   
04D189             0043   exit:
04D189             0044   
04D189 FD E1       0045       pop iy
04D18B DD E1       0046       pop ix
04D18D D1          0047       pop de
04D18E C1          0048       pop bc
04D18F F1          0049       pop af
04D190 21 00 00 00 0050       ld hl,0
04D194             0051   
04D194 C9          0052       ret
04D195             0053   
04D195 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04D1AC 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04D1B7 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04D1C5 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04D1E2 00          0058   is_emulator: defb 0
04D1E3 52 75 6E 6E 0059   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04D1FA 52 75 6E 6E 0060   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
04D211             0061   
04D211             0062   init:
04D211             0063   ; start generic stopwatch to time setup loop
04D211             0064   ; so we can determine if we're running on emulator or hardware
04D211 CD 3B D1 04 0065   	call stopwatch_set
04D215             0066   
04D215             0067   ; initialize global timestamp
04D215 DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04D218 22 F8 D0 04 0069       ld (timestamp_now),hl
04D21C             0070   
04D21C             0071   ; set the cursor off
04D21C CD 77 BA 04 0072   	call cursor_off
04D220             0073   
04D220             0074   ; print loading ui message
04D220 21 AC D1 04 0075   	ld hl,loading_ui
04D224 CD 2A BE 04 0076   	call printString
04D228             0077   
04D228             0078   ; load fonts
04D228 CD E0 8D 04 0079   	call load_font_itc_honda
04D22C CD C3 9E 04 0080   	call load_font_retro_computer
04D230             0081   
04D230             0082   ; load UI images
04D230 CD 4C A7 04 0083   	call load_ui_images
04D234 CD FE A9 04 0084   	call load_ui_images_bj
04D238             0085   
04D238             0086   ; set up the display
04D238 3E 88       0087       ld a,8+128 ; 320x240x64 double-buffered
04D23A CD B8 B8 04 0088       call vdu_set_screen_mode
04D23E AF          0089       xor a
04D23F CD E7 B9 04 0090       call vdu_set_scaling
04D243             0091   
04D243             0092   ; set text background color
04D243 3E 84       0093   	ld a,4 + 128
04D245 CD 44 B8 04 0094   	call vdu_colour_text
04D249             0095   
04D249             0096   ; set text foreground color
04D249 3E 2F       0097   	ld a,47 ; aaaaff lavenderish
04D24B CD 44 B8 04 0098   	call vdu_colour_text
04D24F             0099   
04D24F             0100   ; set gfx bg color
04D24F AF          0101   	xor a ; plotting mode 0
04D250 0E 04       0102   	ld c,4 ; dark blue
04D252 CD 6C B8 04 0103   	call vdu_gcol_bg
04D256 CD 3F B8 04 0104   	call vdu_clg
04D25A             0105   
04D25A             0106   ; set the cursor off again since we changed screen modes
04D25A CD 77 BA 04 0107   	call cursor_off
04D25E             0108   
04D25E             0109   ; VDU 28, left, bottom, right, top: Set text viewport **
04D25E             0110   ; MIND THE LITTLE-ENDIANESS
04D25E             0111   ; inputs: c=left,b=bottom,e=right,d=top
04D25E 0E 00       0112   	ld c,0 ; left
04D260 16 14       0113   	ld d,20 ; top
04D262 1E 27       0114   	ld e,39 ; right
04D264 06 1D       0115   	ld b,29; bottom
04D266 CD 2D B9 04 0116   	call vdu_set_txt_viewport
04D26A             0117   
04D26A             0118   ; initialize image load routine
04D26A CD D1 C7 04 0119   	call img_load_init
04D26E             0120   
04D26E             0121   ; load panels
04D26E 01 34 01 00 0122   	ld bc,cube_num_panels
04D272 21 20 02 04 0123   	ld hl,cube_buffer_id_lut
04D276 22 CB C7 04 0124   	ld (cur_buffer_id_lut),hl
04D27A 21 BC 05 04 0125   	ld hl,cube_load_panels_table
04D27E 22 CE C7 04 0126   	ld (cur_load_jump_table),hl
04D282 CD 06 C8 04 0127   	call img_load_main
04D286             0128   
04D286             0129   ; load sprites
04D286 01 64 00 00 0130   	ld bc,sprite_num_panels
04D28A 21 F0 53 04 0131   	ld hl,sprite_buffer_id_lut
04D28E 22 CB C7 04 0132   	ld (cur_buffer_id_lut),hl
04D292 21 1C 55 04 0133   	ld hl,sprite_load_panels_table
04D296 22 CE C7 04 0134   	ld (cur_load_jump_table),hl
04D29A CD 06 C8 04 0135   	call img_load_main
04D29E             0136   
04D29E             0137   ; load distance walls
04D29E 01 09 00 00 0138   	ld bc,dws_num_panels
04D2A2 21 80 6E 04 0139   	ld hl,dws_buffer_id_lut
04D2A6 22 CB C7 04 0140   	ld (cur_buffer_id_lut),hl
04D2AA 21 9B 6E 04 0141   	ld hl,dws_load_panels_table
04D2AE 22 CE C7 04 0142   	ld (cur_load_jump_table),hl
04D2B2 CD 06 C8 04 0143   	call img_load_main
04D2B6             0144   
04D2B6             0145   ; load sound effects
04D2B6 01 16 00 00 0146   	ld bc,SFX_num_buffers
04D2BA 21 62 C9 04 0147   	ld hl,SFX_buffer_id_lut
04D2BE 22 CB C7 04 0148   	ld (cur_buffer_id_lut),hl
04D2C2 21 D0 C9 04 0149   	ld hl,SFX_load_routines_table
04D2C6 22 CE C7 04 0150   	ld (cur_load_jump_table),hl
04D2CA CD 85 BD 04 0151   	call sfx_load_main
04D2CE             0152   
04D2CE             0153   ; self modify vdu_play_sfx to enable sound
04D2CE AF          0154   	xor a
04D2CF 32 46 00 04 0155   	ld (vdu_play_sfx_disable),a
04D2D3             0156   
04D2D3             0157   ; use loading time to determine if we're running on emulator or hardware
04D2D3 CD 47 D1 04 0158   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04D2D7 11 40 1F 00 0159   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04D2DB AF          0160   	xor a ; clear carry, default is running on hardware
04D2DC 32 E2 D1 04 0161   	ld (is_emulator),a
04D2E0 ED 52       0162   	sbc hl,de
04D2E2 FA F6 D2 04 0163   	jp m,@on_emulator
04D2E6 CD 63 B9 04 0164   	call vdu_home_cursor
04D2EA 21 FA D1 04 0165   	ld hl,on_hardware
04D2EE CD 2A BE 04 0166   	call printString
04D2F2 C3 08 D3 04 0167   	jp @test_done
04D2F6             0168   
04D2F6             0169   @on_emulator:
04D2F6             0170   ; print emulator message
04D2F6 3E 01       0171   	ld a,1
04D2F8 32 E2 D1 04 0172   	ld (is_emulator),a
04D2FC CD 63 B9 04 0173   	call vdu_home_cursor
04D300 21 E3 D1 04 0174   	ld hl,on_emulator
04D304 CD 2A BE 04 0175   	call printString
04D308             0176   
04D308             0177   @test_done:
04D308             0178   ; print final loading time
04D308 21 B7 D1 04 0179   	ld hl,loading_time
04D30C CD 2A BE 04 0180   	call printString
04D310 CD 47 D1 04 0181   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04D314 CD 78 BE 04 0182   	call printDec
04D318 CD 3F BE 04 0183   	call printNewLine
04D31C             0184   
04D31C             0185   ; print loading complete message and wait for user keypress
04D31C 21 C5 D1 04 0186   	ld hl,loading_complete
04D320 CD 2A BE 04 0187   	call printString
04D324 CD FA B9 04 0188   	call vdu_flip
04D328 CD AA C1 04 0189   	call waitKeypress
04D32C             0190   
04D32C             0191   ; initialization done
04D32C C9          0192   	ret
04D32D             0193   
04D32D             0194   ; DEBUG: set up a simple countdown timer
04D32D 01          0195   debug_timer: db 0x01
04D32E             0196   
04D32E             0197   main_loop_tmr: ds 6
04D334             0198   framerate: equ 30
04D334             0199   
04D334             0200   new_game:
04D334             0201   ; initialize map variables and load map file
04D334 21 20 73 04 0202   	ld hl,room_flags
04D338 AF          0203   	xor a
04D339 06 0A       0204   	ld b,10
04D33B             0205   @room_flags_loop:
04D33B 77          0206   	ld (hl),a
04D33C 23          0207   	inc hl
04D33D 10 FC       0208   	djnz @room_flags_loop
04D33F             0209   ; map_init:
04D33F 32 33 C2 04 0210   	ld (cur_floor),a
04D343 32 34 C2 04 0211   	ld (cur_room),a
04D347             0212   ; load room file
04D347 CD B6 71 04 0213   	call map_load
04D34B             0214   ; initialize sprite data
04D34B CD E7 71 04 0215   	call map_init_sprites
04D34F             0216   ; initialize player position
04D34F CD A0 C2 04 0217   	call plyr_init
04D353             0218   
04D353 C9          0219   	ret
04D354             0220   
04D354             0221   main:
04D354 CD 34 D3 04 0222   	call new_game
04D358             0223   
04D358             0224   ; main:
04D358             0225   ; ; set map variables and load initial map file
04D358             0226   ; 	call map_init
04D358             0227   ; ; initialize player position
04D358             0228   ; 	call plyr_init
04D358             0229   
04D358             0230   
04D358             0231   main_loop:
04D358             0232   ; update global timestamp
04D358 CD 01 D1 04 0233       call timestamp_tick
04D35C             0234   
04D35C             0235   ; move enemies
04D35C CD 2A B7 04 0236   	call sprites_see_plyr ; 220-285  prt ticks
04D360             0237   
04D360             0238   ; get player input and update sprite position
04D360             0239   	; 0-1 prt ticks
04D360 CD 50 C6 04 0240   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04D364             0241   
04D364             0242   ; render the updated scene
04D364 CD 9D 74 04 0243   	call render_scene ; 6-12 prt ticks
04D368             0244   ; full loop 12-16 prt ticks
04D368             0245   
04D368             0246   ; flip the screen
04D368 CD FA B9 04 0247   	call vdu_flip
04D36C             0248   
04D36C             0249   @wait:
04D36C FD 21 2E D3 0250   	ld iy,main_loop_tmr
       04          
04D371 CD DE D0 04 0251   	call tmr_get
04D375 CA 81 D3 04 0252   	jp z,@continue
04D379 FA 81 D3 04 0253   	jp m,@continue
04D37D C3 6C D3 04 0254   	jp @wait
04D381             0255   @continue:
04D381             0256   
04D381             0257   ; reset main loop timer
04D381 FD 21 2E D3 0258   	ld iy,main_loop_tmr
       04          
04D386 21 04 00 00 0259   	ld hl,120/framerate
04D38A CD D0 D0 04 0260   	call tmr_set
04D38E             0261   
04D38E             0262   ; check for escape key and quit if pressed
04D38E             0263   	MOSCALL mos_getkbmap
04D38E 3E 1E       0001M  			LD	A, function
04D390 5B CF       0002M  			RST.LIL	08h
04D392             0264   ; 113 Escape
04D392 DD CB 0E 46 0265       bit 0,(ix+14)
04D396 20 02       0266   	jr nz,main_end
04D398             0267   @Escape:
04D398 18 BE       0268   	jr main_loop
04D39A             0269   
04D39A             0270   main_end:
04D39A             0271   	; call do_outro
04D39A             0272   ; restore screen to something normalish
04D39A AF          0273   	xor a
04D39B CD B8 B8 04 0274   	call vdu_set_screen_mode
04D39F CD 69 BA 04 0275   	call cursor_on
04D3A3 C9          0276   	ret
04D3A4             0277   
04D3A4             0278   ; files.asm must go here so that filedata doesn't stomp on program data
04D3A4             0279   	include "src/asm/files.asm"
04D3A4             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04D3A4             0002*  ; inputs: hl = bufferId, ix = file size
04D3A4             0003*  vdu_load_buffer_from_file:
04D3A4             0004*  	; load buffer ids
04D3A4 22 E1 D3 04 0005*  		ld (@id0),hl
04D3A8 22 E7 D3 04 0006*  		ld (@id1),hl
04D3AC 22 EC D3 04 0007*  		ld (@id2),hl
04D3B0             0008*  	; clean up bytes that got stomped on by the ID loads
04D3B0 3E 02       0009*  		ld a,2
04D3B2 32 E3 D3 04 0010*  		ld (@id0+2),a
04D3B6 3E 17       0011*  		ld a,23
04D3B8 32 E9 D3 04 0012*  		ld (@id1+2),a
04D3BC AF          0013*  		xor a
04D3BD 32 EE D3 04 0014*  		ld (@id2+2),a
04D3C1             0015*  	; read size from ix
04D3C1 DD 7D       0016*  		ld a,ixl
04D3C3 32 EF D3 04 0017*  		ld (@size),a
04D3C7 DD 7C       0018*  		ld a,ixh
04D3C9 32 F0 D3 04 0019*  		ld (@size+1),a
04D3CD             0020*  	; get all the ducks in a row for the vdu call
04D3CD 01 13 00 00 0021*  		ld bc,filedata-@start
04D3D1 DD 09       0022*  		add ix,bc
04D3D3 DD 44       0023*  		ld b,ixh
04D3D5 DD 4D       0024*  		ld c,ixl
04D3D7 21 DE D3 04 0025*  		ld hl,@start
04D3DB             0026*  	; push the button
04D3DB 5B DF       0027*  		rst.lil $18
04D3DD             0028*  	; back to caller
04D3DD C9          0029*  		ret
04D3DE             0030*  ; vdp command string:
04D3DE 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04D3E1 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04D3E3 02          0033*  		db 2
04D3E4             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04D3E4 17 1B 20    0035*  		db 23,27,0x20
04D3E7 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04D3E9             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04D3E9 17 00 A0    0038*  		db 23,0,0xA0
04D3EC 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04D3EE 00          0040*  		db 0
04D3EF             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04D3EF 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04D3F1             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04D3F1             0044*  	; ds 65536 ; placeholder for file data	DEBUG
