PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 F9 3F 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.inc" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.inc
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.inc" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  max_channels: equ 6
040046             0003*  
040046             0004*  vdu_play_sfx:
040046 C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0006*      ld (@bufferId),hl
04004B ED 43 89 00 0007*      ld (@duration),bc
       04          
040050 3E 17       0008*      ld a,23
040052 32 81 00 04 0009*      ld (@bufferId+2),a
040056 3A 45 00 04 0010*      ld a,(last_channel)
04005A 3C          0011*      inc a
04005B             0012*      ; and 31 ; modulo 32
04005B FE 06       0013*      cp max_channels
04005D C2 62 00 04 0014*      jp nz,@load_channel
040061 AF          0015*      xor a
040062             0016*  @load_channel:
040062 32 45 00 04 0017*      ld (last_channel),a
040066 32 7C 00 04 0018*      ld (@channel0),a
04006A 32 84 00 04 0019*      ld (@channel1),a
04006E 21 79 00 04 0020*      ld hl, @sample
040072 01 12 00 00 0021*      ld bc, @sample_end - @sample
040076 5B DF       0022*      rst.lil $18
040078 C9          0023*      ret
040079             0024*  @sample:
040079             0025*  ; Command 4: Set waveform
040079             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0027*      .db 23,0,$85                        ; do sound
04007C             0028*  @channel0:
04007C 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
04007F             0030*  @bufferId:
04007F 00 00       0031*      .dw 0x0000
040081             0032*  ; Command 0: Play note
040081             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0034*      .db 23,0,$85                        ; do sound
040084             0035*  @channel1:
040084 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040087 00 00       0037*      .dw 0
040089             0038*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0039*      .dw 0x0000                        ; duration
04008B             0040*  @sample_end:
04008B 00          0041*      .db 0x00 ; padding
04008C             0042*  
04008C             0043*  ; enable enough additional channels so that total enabled = max_channels
04008C             0044*  ; inputs: max_channels set
04008C             0045*  ; returns: nothing
04008C             0046*  ; destroys: af, bc, hl
04008C             0047*  vdu_enable_channels:
04008C 3E 06       0048*      ld a,max_channels
04008E D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040090 F2 97 00 04 0050*      jp p,@loop
040094 C9          0051*      ret
040095 3E 03       0052*      ld a,3 ; first non-default channel
040097             0053*  @loop:
040097 32 B2 00 04 0054*      ld (@channel),a
04009B 21 AF 00 04 0055*      ld hl,@beg
04009F 01 05 00 00 0056*      ld bc,@end-@beg
0400A3 F5          0057*      push af
0400A4 5B DF       0058*      rst.lil $18
0400A6 F1          0059*      pop af
0400A7 3C          0060*      inc a
0400A8 FE 06       0061*      cp max_channels
0400AA C2 97 00 04 0062*      jp nz,@loop
0400AE C9          0063*      ret
0400AF             0064*  @beg:
0400AF 17 00 85    0065*              db 23, 0, $85
0400B2 00          0066*  @channel:   db 0
0400B3 08          0067*              db 8 ; command 8: enable channel
0400B4             0068*  @end:
0400B4             0069*  
0400B4             0070*  ; disable all but the three default sound channels
0400B4             0071*  ; inputs: max_channels set
0400B4             0072*  ; outputs: none
0400B4             0073*  ; destroys: ah,hl,bc
0400B4             0074*  vdu_disable_channels:
0400B4 3E 06       0075*      ld a,max_channels
0400B6 D6 03       0076*      sub 3 ; subtract number of default channels already enabled
0400B8 F2 BF 00 04 0077*      jp p,@loop
0400BC C9          0078*      ret
0400BD 3E 03       0079*      ld a,3 ; first non-default channel
0400BF             0080*  @loop:
0400BF 32 DA 00 04 0081*      ld (@channel),a
0400C3 21 D7 00 04 0082*      ld hl,@beg
0400C7 01 05 00 00 0083*      ld bc,@end-@beg
0400CB F5          0084*      push af
0400CC 5B DF       0085*      rst.lil $18
0400CE F1          0086*      pop af
0400CF 3C          0087*      inc a
0400D0 FE 06       0088*      cp max_channels
0400D2 C2 BF 00 04 0089*      jp nz,@loop
0400D6 C9          0090*      ret
0400D7             0091*  @beg:
0400D7 17 00 85    0092*      db 23, 0, $85
0400DA 00          0093*  @channel: db 0
0400DB 09          0094*      db 9 ; command 9: disable channel
0400DC             0095*  @end:
0400DC             0096*  
0400DC             0097*  
0400DC             0098*  ; ############################################################
0400DC             0099*  ; VDU SOUND API
0400DC             0100*  ; ############################################################
0400DC             0101*  ; Command 0: Play note
0400DC             0102*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0400DC             0103*      MACRO PLAY_NOTE channel, volume, frequency, duration
0400DC             0104*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
0400DC             0105*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
0400DC             0106*      rst.lil $18
0400DC             0107*      jr @PLAY_NOTE_END
0400DC             0108*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
0400DC             0109*                   db channel                  ; Channel, 0 (commented out)
0400DC             0110*                   db 0                        ; Play note command
0400DC             0111*                   db volume                   ; Volume
0400DC             0112*                   dw frequency                ; Frequency
0400DC             0113*                   dw duration                 ; Duration
0400DC             0114*  @PLAY_NOTE_END:
0400DC             0115*      ENDMACRO
0400DC             0116*  
0400DC             0117*      MACRO MUTE_CHANNEL channel
0400DC             0118*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
0400DC             0119*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
0400DC             0120*      rst.lil $18
0400DC             0121*      jr @MUTE_CHANNEL_END
0400DC             0122*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
0400DC             0123*                     db channel                ; Channel, 0 (commented out)
0400DC             0124*                     db 2                      ; Set volume command
0400DC             0125*                     db 0                      ; Volume (mute)
0400DC             0126*  @MUTE_CHANNEL_END:
0400DC             0127*      ENDMACRO
0400DC             0128*  
0400DC             0129*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
0400DC             0130*  vdu_play_note:
0400DC 79          0131*      ld a,c
0400DD 32 FD 00 04 0132*      ld (@channel),a
0400E1 78          0133*      ld a,b
0400E2 32 FF 00 04 0134*      ld (@volume),a
0400E6 22 00 01 04 0135*      ld (@frequency),hl
0400EA ED 53 02 01 0136*      ld (@duration),de
       04          
0400EF 21 FA 00 04 0137*      ld hl,@cmd
0400F3 01 0A 00 00 0138*      ld bc,@end-@cmd
0400F7 5B DF       0139*      rst.lil $18
0400F9 C9          0140*      ret
0400FA 17 00 85    0141*  @cmd:       db 23, 0, 0x85
0400FD 00          0142*  @channel:   db 0x00
0400FE 00          0143*              db 0x00 ; play note command
0400FF 00          0144*  @volume:    db 0x00
040100 00 00       0145*  @frequency: dw 0x0000
040102 00 00       0146*  @duration:  dw 0x0000
040104 00          0147*  @end:       db 0x00 ; padding
040105             0148*  
040105             0149*  ; Command 1: Status
040105             0150*  ; VDU 23, 0, &85, channel, 1
040105             0151*  ; inputs: a = channel
040105             0152*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
040105             0153*  ; Bit 	Name 	Meaning
040105             0154*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
040105             0155*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
040105             0156*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
040105             0157*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
040105             0158*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
040105             0159*  
040105             0160*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
040105             0161*  vdu_channel_status:
040105 32 17 01 04 0162*      ld (@channel),a
040109 21 14 01 04 0163*      ld hl,@cmd
04010D 01 05 00 00 0164*      ld bc,@end-@cmd
040111 5B DF       0165*      rst.lil $18
040113 C9          0166*      ret
040114 17 00 85    0167*  @cmd:       db 23, 0, 0x85
040117 00          0168*  @channel:   db 0x00
040118 01          0169*              db 0x01 ; get channel status command
040119             0170*  @end:
040119             0171*  
040119             0172*  ; VDU 23, 0, &85, channel, 2, volume
040119             0173*  ; inputs: c = channel, b = volume
040119             0174*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
040119             0175*  
040119             0176*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
040119             0177*  
040119             0178*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
040119             0179*  vdu_channel_volume:
040119 79          0180*      ld a,c
04011A 32 31 01 04 0181*      ld (@channel),a
04011E 78          0182*      ld a,b
04011F 32 33 01 04 0183*      ld (@volume),a
040123 21 2E 01 04 0184*      ld hl,@cmd
040127 01 06 00 00 0185*      ld bc,@end-@cmd
04012B 5B DF       0186*      rst.lil $18
04012D C9          0187*      ret
04012E 17 00 85    0188*  @cmd:       db 23, 0, 0x85
040131 00          0189*  @channel:   db 0x00
040132 02          0190*              db 0x02 ; set volume command
040133 00          0191*  @volume:    db 0x00
040134             0192*  @end:
040134             0193*  
040134             0194*  ; VDU 23, 0, &85, channel, 3, frequency;
040134             0195*  
040134             0196*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
040134             0197*  
040134             0198*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
040134             0199*  
040134             0200*  ; Returns 1 on success, 0 for failure.
040134             0201*  vdu_channel_frequency:
040134 79          0202*      ld a,c
040135 32 4C 01 04 0203*      ld (@channel),a
040139 ED 53 4E 01 0204*      ld (@frequency),de
       04          
04013E 21 49 01 04 0205*      ld hl,@cmd
040142 01 07 00 00 0206*      ld bc,@end-@cmd
040146 5B DF       0207*      rst.lil $18
040148 C9          0208*      ret
040149 17 00 85    0209*  @cmd:       db 23, 0, 0x85
04014C 00          0210*  @channel:   db 0x00
04014D 03          0211*              db 0x03 ; set frequency command
04014E 00 00       0212*  @frequency: dw 0x0000
040150 00          0213*  @end:       db 0x00 ; padding
040151             0214*  
040151             0215*  
040151             0216*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040151             0217*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040151             0218*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040151             0219*  
040151             0220*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040151             0221*  
040151             0222*  ; By default a channel is set to use waveform 0 (square wave).
040151             0223*  
040151             0224*  ; Valid waveform values are as follows:
040151             0225*  ; Value 	Waveform
040151             0226*  ; 0 	Square wave
040151             0227*  ; 1 	Triangle wave
040151             0228*  ; 2 	Sawtooth wave
040151             0229*  ; 3 	Sine wave
040151             0230*  ; 4 	Noise (simple white noise with no frequency support)
040151             0231*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040151             0232*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040151             0233*  
040151             0234*  vdu_channel_waveform:
040151 79          0235*      ld a,c
040152 32 77 01 04 0236*      ld (@channel),a
040156 78          0237*      ld a,b
040157 32 79 01 04 0238*      ld (@waveform),a
04015B FE 08       0239*      cp 8 ; check if the waveform is a sample
04015D 28 06       0240*      jr z, @sample
04015F 01 06 00 00 0241*      ld bc,@bufferId-@cmd
040163 18 08       0242*      jr @sendToVdu
040165             0243*  @sample:
040165 22 7A 01 04 0244*      ld (@bufferId),hl
040169 01 08 00 00 0245*      ld bc,@end-@cmd
04016D             0246*  @sendToVdu:
04016D 21 74 01 04 0247*      ld hl,@cmd
040171 5B DF       0248*      rst.lil $18
040173 C9          0249*      ret
040174 17 00 85    0250*  @cmd:       db 23, 0, 0x85
040177 00          0251*  @channel:   db 0x00
040178 04          0252*              db 0x04 ; set waveform command
040179 00          0253*  @waveform:  db 0x00
04017A 00 00       0254*  @bufferId:  dw 0x0000
04017C 00          0255*  @end:       db 0x00 ; padding
04017D             0256*  
04017D             0257*  
04017D             0258*  
04017D             0259*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04017D             0260*  ; inputs: hl = bufferId; a = format
04017D             0261*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04017D             0262*  ; Value 	Description
04017D             0263*  ; 0 	8-bit signed, 16KHz
04017D             0264*  ; 1 	8-bit unsigned, 16KHz
04017D             0265*  vdu_buffer_to_sound:
04017D 22 96 01 04 0266*      ld (@bufferId),hl
040181 32 98 01 04 0267*      ld (@format),a
040185 21 90 01 04 0268*      ld hl,@cmd
040189 01 09 00 00 0269*      ld bc,@end-@cmd
04018D 5B DF       0270*      rst.lil $18
04018F C9          0271*      ret
040190 17 00 85    0272*  @cmd:       db 23, 0, 0x85
040193 00          0273*              db 0x00 ; a magic number that is always 0
040194 05          0274*              db 0x05 ; buffer to sound command
040195 02          0275*              db 0x02 ; a magic number that is always 2
040196 00 00       0276*  @bufferId:  dw 0x0000
040198 00          0277*  @format:    db 0x00
040199             0278*  @end:
040199             0279*  
040199             0280*  
040199             0281*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040199             0282*  vdu_play_sample:
040199             0283*      ; populate input parameters
040199 79          0284*      ld a,c
04019A 32 C4 01 04 0285*      ld (@channel0),a
04019E 32 CC 01 04 0286*      ld (@channel1),a
0401A2 78          0287*      ld a,b
0401A3 32 CE 01 04 0288*      ld (@volume),a
0401A7 ED 53 CF 01 0289*      ld (@frequency),de
       04          
0401AC 22 C7 01 04 0290*      ld (@bufferId),hl
0401B0             0291*      ; clean up byte that got stomped on by bufferId load from hl
0401B0 3E 17       0292*      ld a,23
0401B2 32 C9 01 04 0293*      ld (@cmd1),a
0401B6             0294*      ; prep the vdu command string
0401B6 21 C1 01 04 0295*      ld hl, @cmd0
0401BA 01 12 00 00 0296*      ld bc, @end - @cmd0
0401BE 5B DF       0297*      rst.lil $18
0401C0 C9          0298*      ret
0401C1 17 00 85    0299*  @cmd0:       db 23, 0, 0x85
0401C4 00          0300*  @channel0:   db 0x00
0401C5 04          0301*               db 0x04 ; set waveform command
0401C6 08          0302*  @waveform:   db 0x08 ; sample
0401C7 00 00       0303*  @bufferId:   dw 0x0000
0401C9 17 00 85    0304*  @cmd1:       db 23, 0, 0x85
0401CC 00          0305*  @channel1:   db 0x00
0401CD 00          0306*               db 0x00 ; play note command
0401CE 00          0307*  @volume:     db 0x00
0401CF 00 00       0308*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0401D1 00 00       0309*  @duration:   dw 0x0000 ; milliseconds
0401D3 00          0310*  @end:        db 0x00 ; padding
0401D4             0013   	include "src/asm/images.inc"
0401D4             0001*  ; This file is created by build_92_asm_load_tiles.py, do not edit it!
0401D4             0002*  
0401D4             0003*  ; cube buffer ids:
0401D4             0004*  BUF_10: equ 0x000A
0401D4             0005*  BUF_11: equ 0x000B
0401D4             0006*  BUF_12: equ 0x000C
0401D4             0007*  BUF_13: equ 0x000D
0401D4             0008*  BUF_14: equ 0x000E
0401D4             0009*  BUF_15: equ 0x000F
0401D4             0010*  BUF_16: equ 0x0010
0401D4             0011*  BUF_17: equ 0x0011
0401D4             0012*  BUF_57: equ 0x0039
0401D4             0013*  BUF_58: equ 0x003A
0401D4             0014*  BUF_59: equ 0x003B
0401D4             0015*  
0401D4             0016*  cube_num_tiles: equ 11
0401D4             0017*  
0401D4             0018*  ; cube buffer id reverse lookup:
0401D4             0019*  cube_buffer_id_lut:
0401D4 0A 00 00    0020*  	dl BUF_10
0401D7 0B 00 00    0021*  	dl BUF_11
0401DA 0C 00 00    0022*  	dl BUF_12
0401DD 0D 00 00    0023*  	dl BUF_13
0401E0 0E 00 00    0024*  	dl BUF_14
0401E3 0F 00 00    0025*  	dl BUF_15
0401E6 10 00 00    0026*  	dl BUF_16
0401E9 11 00 00    0027*  	dl BUF_17
0401EC 39 00 00    0028*  	dl BUF_57
0401EF 3A 00 00    0029*  	dl BUF_58
0401F2 3B 00 00    0030*  	dl BUF_59
0401F5             0031*  
0401F5             0032*  ; cube load routines jump table:
0401F5             0033*  cube_load_tiles_table:
0401F5 16 02 04    0034*  	dl ld_10
0401F8 36 02 04    0035*  	dl ld_11
0401FB 56 02 04    0036*  	dl ld_12
0401FE 76 02 04    0037*  	dl ld_13
040201 96 02 04    0038*  	dl ld_14
040204 B6 02 04    0039*  	dl ld_15
040207 D6 02 04    0040*  	dl ld_16
04020A F6 02 04    0041*  	dl ld_17
04020D 16 03 04    0042*  	dl ld_57
040210 36 03 04    0043*  	dl ld_58
040213 56 03 04    0044*  	dl ld_59
040216             0045*  
040216             0046*  ; Import cube .rgba8 bitmap files and load them into VDP buffers
040216             0047*  
040216             0048*  ld_10:
040216 21 0A 00 00 0049*  	ld hl,BUF_10
04021A 01 10 00 00 0050*  	ld bc,16
04021E 11 10 00 00 0051*  	ld de,16
040222 DD 21 00 04 0052*  	ld ix,1024
       00          
040227 FD 21 76 03 0053*  	ld iy,F10
       04          
04022C FD 22 1F 32 0054*  	ld (cur_filename),iy
       04          
040231 CD AA 33 04 0055*  	call vdu_load_img_8
040235 C9          0056*  	ret
040236             0057*  
040236             0058*  ld_11:
040236 21 0B 00 00 0059*  	ld hl,BUF_11
04023A 01 10 00 00 0060*  	ld bc,16
04023E 11 10 00 00 0061*  	ld de,16
040242 DD 21 00 04 0062*  	ld ix,1024
       00          
040247 FD 21 85 03 0063*  	ld iy,F11
       04          
04024C FD 22 1F 32 0064*  	ld (cur_filename),iy
       04          
040251 CD AA 33 04 0065*  	call vdu_load_img_8
040255 C9          0066*  	ret
040256             0067*  
040256             0068*  ld_12:
040256 21 0C 00 00 0069*  	ld hl,BUF_12
04025A 01 10 00 00 0070*  	ld bc,16
04025E 11 10 00 00 0071*  	ld de,16
040262 DD 21 00 04 0072*  	ld ix,1024
       00          
040267 FD 21 94 03 0073*  	ld iy,F12
       04          
04026C FD 22 1F 32 0074*  	ld (cur_filename),iy
       04          
040271 CD AA 33 04 0075*  	call vdu_load_img_8
040275 C9          0076*  	ret
040276             0077*  
040276             0078*  ld_13:
040276 21 0D 00 00 0079*  	ld hl,BUF_13
04027A 01 10 00 00 0080*  	ld bc,16
04027E 11 10 00 00 0081*  	ld de,16
040282 DD 21 00 04 0082*  	ld ix,1024
       00          
040287 FD 21 A3 03 0083*  	ld iy,F13
       04          
04028C FD 22 1F 32 0084*  	ld (cur_filename),iy
       04          
040291 CD AA 33 04 0085*  	call vdu_load_img_8
040295 C9          0086*  	ret
040296             0087*  
040296             0088*  ld_14:
040296 21 0E 00 00 0089*  	ld hl,BUF_14
04029A 01 10 00 00 0090*  	ld bc,16
04029E 11 10 00 00 0091*  	ld de,16
0402A2 DD 21 00 04 0092*  	ld ix,1024
       00          
0402A7 FD 21 B2 03 0093*  	ld iy,F14
       04          
0402AC FD 22 1F 32 0094*  	ld (cur_filename),iy
       04          
0402B1 CD AA 33 04 0095*  	call vdu_load_img_8
0402B5 C9          0096*  	ret
0402B6             0097*  
0402B6             0098*  ld_15:
0402B6 21 0F 00 00 0099*  	ld hl,BUF_15
0402BA 01 10 00 00 0100*  	ld bc,16
0402BE 11 10 00 00 0101*  	ld de,16
0402C2 DD 21 00 04 0102*  	ld ix,1024
       00          
0402C7 FD 21 C1 03 0103*  	ld iy,F15
       04          
0402CC FD 22 1F 32 0104*  	ld (cur_filename),iy
       04          
0402D1 CD AA 33 04 0105*  	call vdu_load_img_8
0402D5 C9          0106*  	ret
0402D6             0107*  
0402D6             0108*  ld_16:
0402D6 21 10 00 00 0109*  	ld hl,BUF_16
0402DA 01 10 00 00 0110*  	ld bc,16
0402DE 11 10 00 00 0111*  	ld de,16
0402E2 DD 21 00 04 0112*  	ld ix,1024
       00          
0402E7 FD 21 D0 03 0113*  	ld iy,F16
       04          
0402EC FD 22 1F 32 0114*  	ld (cur_filename),iy
       04          
0402F1 CD AA 33 04 0115*  	call vdu_load_img_8
0402F5 C9          0116*  	ret
0402F6             0117*  
0402F6             0118*  ld_17:
0402F6 21 11 00 00 0119*  	ld hl,BUF_17
0402FA 01 10 00 00 0120*  	ld bc,16
0402FE 11 10 00 00 0121*  	ld de,16
040302 DD 21 00 04 0122*  	ld ix,1024
       00          
040307 FD 21 DF 03 0123*  	ld iy,F17
       04          
04030C FD 22 1F 32 0124*  	ld (cur_filename),iy
       04          
040311 CD AA 33 04 0125*  	call vdu_load_img_8
040315 C9          0126*  	ret
040316             0127*  
040316             0128*  ld_57:
040316 21 39 00 00 0129*  	ld hl,BUF_57
04031A 01 10 00 00 0130*  	ld bc,16
04031E 11 10 00 00 0131*  	ld de,16
040322 DD 21 00 04 0132*  	ld ix,1024
       00          
040327 FD 21 EE 03 0133*  	ld iy,F57
       04          
04032C FD 22 1F 32 0134*  	ld (cur_filename),iy
       04          
040331 CD AA 33 04 0135*  	call vdu_load_img_8
040335 C9          0136*  	ret
040336             0137*  
040336             0138*  ld_58:
040336 21 3A 00 00 0139*  	ld hl,BUF_58
04033A 01 10 00 00 0140*  	ld bc,16
04033E 11 10 00 00 0141*  	ld de,16
040342 DD 21 00 04 0142*  	ld ix,1024
       00          
040347 FD 21 FD 03 0143*  	ld iy,F58
       04          
04034C FD 22 1F 32 0144*  	ld (cur_filename),iy
       04          
040351 CD AA 33 04 0145*  	call vdu_load_img_8
040355 C9          0146*  	ret
040356             0147*  
040356             0148*  ld_59:
040356 21 3B 00 00 0149*  	ld hl,BUF_59
04035A 01 10 00 00 0150*  	ld bc,16
04035E 11 10 00 00 0151*  	ld de,16
040362 DD 21 00 04 0152*  	ld ix,1024
       00          
040367 FD 21 0C 04 0153*  	ld iy,F59
       04          
04036C FD 22 1F 32 0154*  	ld (cur_filename),iy
       04          
040371 CD AA 33 04 0155*  	call vdu_load_img_8
040375 C9          0156*  	ret
040376             0157*  
040376             0158*  ; File name lookups:
040376 74 69 6C 65 0159*  F10: db "tiles/10.rgba8",0
       73 2F 31 30 
       2E 72 67 62 
       61 38 00    
040385 74 69 6C 65 0160*  F11: db "tiles/11.rgba8",0
       73 2F 31 31 
       2E 72 67 62 
       61 38 00    
040394 74 69 6C 65 0161*  F12: db "tiles/12.rgba8",0
       73 2F 31 32 
       2E 72 67 62 
       61 38 00    
0403A3 74 69 6C 65 0162*  F13: db "tiles/13.rgba8",0
       73 2F 31 33 
       2E 72 67 62 
       61 38 00    
0403B2 74 69 6C 65 0163*  F14: db "tiles/14.rgba8",0
       73 2F 31 34 
       2E 72 67 62 
       61 38 00    
0403C1 74 69 6C 65 0164*  F15: db "tiles/15.rgba8",0
       73 2F 31 35 
       2E 72 67 62 
       61 38 00    
0403D0 74 69 6C 65 0165*  F16: db "tiles/16.rgba8",0
       73 2F 31 36 
       2E 72 67 62 
       61 38 00    
0403DF 74 69 6C 65 0166*  F17: db "tiles/17.rgba8",0
       73 2F 31 37 
       2E 72 67 62 
       61 38 00    
0403EE 74 69 6C 65 0167*  F57: db "tiles/57.rgba8",0
       73 2F 35 37 
       2E 72 67 62 
       61 38 00    
0403FD 74 69 6C 65 0168*  F58: db "tiles/58.rgba8",0
       73 2F 35 38 
       2E 72 67 62 
       61 38 00    
04040C 74 69 6C 65 0169*  F59: db "tiles/59.rgba8",0
       73 2F 35 39 
       2E 72 67 62 
       61 38 00    
04041B             0170*  
04041B             0171*  ; sprite buffer ids:
04041B             0172*  BUF_20: equ 0x0014
04041B             0173*  BUF_21: equ 0x0015
04041B             0174*  BUF_22: equ 0x0016
04041B             0175*  BUF_23: equ 0x0017
04041B             0176*  BUF_24: equ 0x0018
04041B             0177*  BUF_40: equ 0x0028
04041B             0178*  BUF_41: equ 0x0029
04041B             0179*  BUF_42: equ 0x002A
04041B             0180*  BUF_43: equ 0x002B
04041B             0181*  BUF_44: equ 0x002C
04041B             0182*  BUF_45: equ 0x002D
04041B             0183*  BUF_46: equ 0x002E
04041B             0184*  BUF_47: equ 0x002F
04041B             0185*  BUF_48: equ 0x0030
04041B             0186*  BUF_49: equ 0x0031
04041B             0187*  BUF_50: equ 0x0032
04041B             0188*  BUF_51: equ 0x0033
04041B             0189*  BUF_52: equ 0x0034
04041B             0190*  BUF_56: equ 0x0038
04041B             0191*  BUF_60: equ 0x003C
04041B             0192*  
04041B             0193*  sprite_num_tiles: equ 20
04041B             0194*  
04041B             0195*  ; sprite buffer id reverse lookup:
04041B             0196*  sprite_buffer_id_lut:
04041B 14 00 00    0197*  	dl BUF_20
04041E 15 00 00    0198*  	dl BUF_21
040421 16 00 00    0199*  	dl BUF_22
040424 17 00 00    0200*  	dl BUF_23
040427 18 00 00    0201*  	dl BUF_24
04042A 28 00 00    0202*  	dl BUF_40
04042D 29 00 00    0203*  	dl BUF_41
040430 2A 00 00    0204*  	dl BUF_42
040433 2B 00 00    0205*  	dl BUF_43
040436 2C 00 00    0206*  	dl BUF_44
040439 2D 00 00    0207*  	dl BUF_45
04043C 2E 00 00    0208*  	dl BUF_46
04043F 2F 00 00    0209*  	dl BUF_47
040442 30 00 00    0210*  	dl BUF_48
040445 31 00 00    0211*  	dl BUF_49
040448 32 00 00    0212*  	dl BUF_50
04044B 33 00 00    0213*  	dl BUF_51
04044E 34 00 00    0214*  	dl BUF_52
040451 38 00 00    0215*  	dl BUF_56
040454 3C 00 00    0216*  	dl BUF_60
040457             0217*  
040457             0218*  ; sprite load routines jump table:
040457             0219*  sprite_load_tiles_table:
040457 93 04 04    0220*  	dl ld_20
04045A B3 04 04    0221*  	dl ld_21
04045D D3 04 04    0222*  	dl ld_22
040460 F3 04 04    0223*  	dl ld_23
040463 13 05 04    0224*  	dl ld_24
040466 33 05 04    0225*  	dl ld_40
040469 53 05 04    0226*  	dl ld_41
04046C 73 05 04    0227*  	dl ld_42
04046F 93 05 04    0228*  	dl ld_43
040472 B3 05 04    0229*  	dl ld_44
040475 D3 05 04    0230*  	dl ld_45
040478 F3 05 04    0231*  	dl ld_46
04047B 13 06 04    0232*  	dl ld_47
04047E 33 06 04    0233*  	dl ld_48
040481 53 06 04    0234*  	dl ld_49
040484 73 06 04    0235*  	dl ld_50
040487 93 06 04    0236*  	dl ld_51
04048A B3 06 04    0237*  	dl ld_52
04048D D3 06 04    0238*  	dl ld_56
040490 F3 06 04    0239*  	dl ld_60
040493             0240*  
040493             0241*  ; Import sprite .rgba8 bitmap files and load them into VDP buffers
040493             0242*  
040493             0243*  ld_20:
040493 21 14 00 00 0244*  	ld hl,BUF_20
040497 01 10 00 00 0245*  	ld bc,16
04049B 11 10 00 00 0246*  	ld de,16
04049F DD 21 00 04 0247*  	ld ix,1024
       00          
0404A4 FD 21 13 07 0248*  	ld iy,F20
       04          
0404A9 FD 22 1F 32 0249*  	ld (cur_filename),iy
       04          
0404AE CD AA 33 04 0250*  	call vdu_load_img_8
0404B2 C9          0251*  	ret
0404B3             0252*  
0404B3             0253*  ld_21:
0404B3 21 15 00 00 0254*  	ld hl,BUF_21
0404B7 01 10 00 00 0255*  	ld bc,16
0404BB 11 10 00 00 0256*  	ld de,16
0404BF DD 21 00 04 0257*  	ld ix,1024
       00          
0404C4 FD 21 22 07 0258*  	ld iy,F21
       04          
0404C9 FD 22 1F 32 0259*  	ld (cur_filename),iy
       04          
0404CE CD AA 33 04 0260*  	call vdu_load_img_8
0404D2 C9          0261*  	ret
0404D3             0262*  
0404D3             0263*  ld_22:
0404D3 21 16 00 00 0264*  	ld hl,BUF_22
0404D7 01 10 00 00 0265*  	ld bc,16
0404DB 11 10 00 00 0266*  	ld de,16
0404DF DD 21 00 04 0267*  	ld ix,1024
       00          
0404E4 FD 21 31 07 0268*  	ld iy,F22
       04          
0404E9 FD 22 1F 32 0269*  	ld (cur_filename),iy
       04          
0404EE CD AA 33 04 0270*  	call vdu_load_img_8
0404F2 C9          0271*  	ret
0404F3             0272*  
0404F3             0273*  ld_23:
0404F3 21 17 00 00 0274*  	ld hl,BUF_23
0404F7 01 10 00 00 0275*  	ld bc,16
0404FB 11 10 00 00 0276*  	ld de,16
0404FF DD 21 00 04 0277*  	ld ix,1024
       00          
040504 FD 21 40 07 0278*  	ld iy,F23
       04          
040509 FD 22 1F 32 0279*  	ld (cur_filename),iy
       04          
04050E CD AA 33 04 0280*  	call vdu_load_img_8
040512 C9          0281*  	ret
040513             0282*  
040513             0283*  ld_24:
040513 21 18 00 00 0284*  	ld hl,BUF_24
040517 01 10 00 00 0285*  	ld bc,16
04051B 11 10 00 00 0286*  	ld de,16
04051F DD 21 00 04 0287*  	ld ix,1024
       00          
040524 FD 21 4F 07 0288*  	ld iy,F24
       04          
040529 FD 22 1F 32 0289*  	ld (cur_filename),iy
       04          
04052E CD AA 33 04 0290*  	call vdu_load_img_8
040532 C9          0291*  	ret
040533             0292*  
040533             0293*  ld_40:
040533 21 28 00 00 0294*  	ld hl,BUF_40
040537 01 10 00 00 0295*  	ld bc,16
04053B 11 10 00 00 0296*  	ld de,16
04053F DD 21 00 04 0297*  	ld ix,1024
       00          
040544 FD 21 5E 07 0298*  	ld iy,F40
       04          
040549 FD 22 1F 32 0299*  	ld (cur_filename),iy
       04          
04054E CD AA 33 04 0300*  	call vdu_load_img_8
040552 C9          0301*  	ret
040553             0302*  
040553             0303*  ld_41:
040553 21 29 00 00 0304*  	ld hl,BUF_41
040557 01 10 00 00 0305*  	ld bc,16
04055B 11 10 00 00 0306*  	ld de,16
04055F DD 21 00 04 0307*  	ld ix,1024
       00          
040564 FD 21 6D 07 0308*  	ld iy,F41
       04          
040569 FD 22 1F 32 0309*  	ld (cur_filename),iy
       04          
04056E CD AA 33 04 0310*  	call vdu_load_img_8
040572 C9          0311*  	ret
040573             0312*  
040573             0313*  ld_42:
040573 21 2A 00 00 0314*  	ld hl,BUF_42
040577 01 10 00 00 0315*  	ld bc,16
04057B 11 10 00 00 0316*  	ld de,16
04057F DD 21 00 04 0317*  	ld ix,1024
       00          
040584 FD 21 7C 07 0318*  	ld iy,F42
       04          
040589 FD 22 1F 32 0319*  	ld (cur_filename),iy
       04          
04058E CD AA 33 04 0320*  	call vdu_load_img_8
040592 C9          0321*  	ret
040593             0322*  
040593             0323*  ld_43:
040593 21 2B 00 00 0324*  	ld hl,BUF_43
040597 01 10 00 00 0325*  	ld bc,16
04059B 11 10 00 00 0326*  	ld de,16
04059F DD 21 00 04 0327*  	ld ix,1024
       00          
0405A4 FD 21 8B 07 0328*  	ld iy,F43
       04          
0405A9 FD 22 1F 32 0329*  	ld (cur_filename),iy
       04          
0405AE CD AA 33 04 0330*  	call vdu_load_img_8
0405B2 C9          0331*  	ret
0405B3             0332*  
0405B3             0333*  ld_44:
0405B3 21 2C 00 00 0334*  	ld hl,BUF_44
0405B7 01 10 00 00 0335*  	ld bc,16
0405BB 11 10 00 00 0336*  	ld de,16
0405BF DD 21 00 04 0337*  	ld ix,1024
       00          
0405C4 FD 21 9A 07 0338*  	ld iy,F44
       04          
0405C9 FD 22 1F 32 0339*  	ld (cur_filename),iy
       04          
0405CE CD AA 33 04 0340*  	call vdu_load_img_8
0405D2 C9          0341*  	ret
0405D3             0342*  
0405D3             0343*  ld_45:
0405D3 21 2D 00 00 0344*  	ld hl,BUF_45
0405D7 01 10 00 00 0345*  	ld bc,16
0405DB 11 10 00 00 0346*  	ld de,16
0405DF DD 21 00 04 0347*  	ld ix,1024
       00          
0405E4 FD 21 A9 07 0348*  	ld iy,F45
       04          
0405E9 FD 22 1F 32 0349*  	ld (cur_filename),iy
       04          
0405EE CD AA 33 04 0350*  	call vdu_load_img_8
0405F2 C9          0351*  	ret
0405F3             0352*  
0405F3             0353*  ld_46:
0405F3 21 2E 00 00 0354*  	ld hl,BUF_46
0405F7 01 10 00 00 0355*  	ld bc,16
0405FB 11 10 00 00 0356*  	ld de,16
0405FF DD 21 00 04 0357*  	ld ix,1024
       00          
040604 FD 21 B8 07 0358*  	ld iy,F46
       04          
040609 FD 22 1F 32 0359*  	ld (cur_filename),iy
       04          
04060E CD AA 33 04 0360*  	call vdu_load_img_8
040612 C9          0361*  	ret
040613             0362*  
040613             0363*  ld_47:
040613 21 2F 00 00 0364*  	ld hl,BUF_47
040617 01 10 00 00 0365*  	ld bc,16
04061B 11 10 00 00 0366*  	ld de,16
04061F DD 21 00 04 0367*  	ld ix,1024
       00          
040624 FD 21 C7 07 0368*  	ld iy,F47
       04          
040629 FD 22 1F 32 0369*  	ld (cur_filename),iy
       04          
04062E CD AA 33 04 0370*  	call vdu_load_img_8
040632 C9          0371*  	ret
040633             0372*  
040633             0373*  ld_48:
040633 21 30 00 00 0374*  	ld hl,BUF_48
040637 01 10 00 00 0375*  	ld bc,16
04063B 11 10 00 00 0376*  	ld de,16
04063F DD 21 00 04 0377*  	ld ix,1024
       00          
040644 FD 21 D6 07 0378*  	ld iy,F48
       04          
040649 FD 22 1F 32 0379*  	ld (cur_filename),iy
       04          
04064E CD AA 33 04 0380*  	call vdu_load_img_8
040652 C9          0381*  	ret
040653             0382*  
040653             0383*  ld_49:
040653 21 31 00 00 0384*  	ld hl,BUF_49
040657 01 10 00 00 0385*  	ld bc,16
04065B 11 10 00 00 0386*  	ld de,16
04065F DD 21 00 04 0387*  	ld ix,1024
       00          
040664 FD 21 E5 07 0388*  	ld iy,F49
       04          
040669 FD 22 1F 32 0389*  	ld (cur_filename),iy
       04          
04066E CD AA 33 04 0390*  	call vdu_load_img_8
040672 C9          0391*  	ret
040673             0392*  
040673             0393*  ld_50:
040673 21 32 00 00 0394*  	ld hl,BUF_50
040677 01 10 00 00 0395*  	ld bc,16
04067B 11 10 00 00 0396*  	ld de,16
04067F DD 21 00 04 0397*  	ld ix,1024
       00          
040684 FD 21 F4 07 0398*  	ld iy,F50
       04          
040689 FD 22 1F 32 0399*  	ld (cur_filename),iy
       04          
04068E CD AA 33 04 0400*  	call vdu_load_img_8
040692 C9          0401*  	ret
040693             0402*  
040693             0403*  ld_51:
040693 21 33 00 00 0404*  	ld hl,BUF_51
040697 01 10 00 00 0405*  	ld bc,16
04069B 11 10 00 00 0406*  	ld de,16
04069F DD 21 00 04 0407*  	ld ix,1024
       00          
0406A4 FD 21 03 08 0408*  	ld iy,F51
       04          
0406A9 FD 22 1F 32 0409*  	ld (cur_filename),iy
       04          
0406AE CD AA 33 04 0410*  	call vdu_load_img_8
0406B2 C9          0411*  	ret
0406B3             0412*  
0406B3             0413*  ld_52:
0406B3 21 34 00 00 0414*  	ld hl,BUF_52
0406B7 01 10 00 00 0415*  	ld bc,16
0406BB 11 10 00 00 0416*  	ld de,16
0406BF DD 21 00 04 0417*  	ld ix,1024
       00          
0406C4 FD 21 12 08 0418*  	ld iy,F52
       04          
0406C9 FD 22 1F 32 0419*  	ld (cur_filename),iy
       04          
0406CE CD AA 33 04 0420*  	call vdu_load_img_8
0406D2 C9          0421*  	ret
0406D3             0422*  
0406D3             0423*  ld_56:
0406D3 21 38 00 00 0424*  	ld hl,BUF_56
0406D7 01 10 00 00 0425*  	ld bc,16
0406DB 11 10 00 00 0426*  	ld de,16
0406DF DD 21 00 04 0427*  	ld ix,1024
       00          
0406E4 FD 21 21 08 0428*  	ld iy,F56
       04          
0406E9 FD 22 1F 32 0429*  	ld (cur_filename),iy
       04          
0406EE CD AA 33 04 0430*  	call vdu_load_img_8
0406F2 C9          0431*  	ret
0406F3             0432*  
0406F3             0433*  ld_60:
0406F3 21 3C 00 00 0434*  	ld hl,BUF_60
0406F7 01 10 00 00 0435*  	ld bc,16
0406FB 11 10 00 00 0436*  	ld de,16
0406FF DD 21 00 04 0437*  	ld ix,1024
       00          
040704 FD 21 30 08 0438*  	ld iy,F60
       04          
040709 FD 22 1F 32 0439*  	ld (cur_filename),iy
       04          
04070E CD AA 33 04 0440*  	call vdu_load_img_8
040712 C9          0441*  	ret
040713             0442*  
040713             0443*  ; File name lookups:
040713 74 69 6C 65 0444*  F20: db "tiles/20.rgba8",0
       73 2F 32 30 
       2E 72 67 62 
       61 38 00    
040722 74 69 6C 65 0445*  F21: db "tiles/21.rgba8",0
       73 2F 32 31 
       2E 72 67 62 
       61 38 00    
040731 74 69 6C 65 0446*  F22: db "tiles/22.rgba8",0
       73 2F 32 32 
       2E 72 67 62 
       61 38 00    
040740 74 69 6C 65 0447*  F23: db "tiles/23.rgba8",0
       73 2F 32 33 
       2E 72 67 62 
       61 38 00    
04074F 74 69 6C 65 0448*  F24: db "tiles/24.rgba8",0
       73 2F 32 34 
       2E 72 67 62 
       61 38 00    
04075E 74 69 6C 65 0449*  F40: db "tiles/40.rgba8",0
       73 2F 34 30 
       2E 72 67 62 
       61 38 00    
04076D 74 69 6C 65 0450*  F41: db "tiles/41.rgba8",0
       73 2F 34 31 
       2E 72 67 62 
       61 38 00    
04077C 74 69 6C 65 0451*  F42: db "tiles/42.rgba8",0
       73 2F 34 32 
       2E 72 67 62 
       61 38 00    
04078B 74 69 6C 65 0452*  F43: db "tiles/43.rgba8",0
       73 2F 34 33 
       2E 72 67 62 
       61 38 00    
04079A 74 69 6C 65 0453*  F44: db "tiles/44.rgba8",0
       73 2F 34 34 
       2E 72 67 62 
       61 38 00    
0407A9 74 69 6C 65 0454*  F45: db "tiles/45.rgba8",0
       73 2F 34 35 
       2E 72 67 62 
       61 38 00    
0407B8 74 69 6C 65 0455*  F46: db "tiles/46.rgba8",0
       73 2F 34 36 
       2E 72 67 62 
       61 38 00    
0407C7 74 69 6C 65 0456*  F47: db "tiles/47.rgba8",0
       73 2F 34 37 
       2E 72 67 62 
       61 38 00    
0407D6 74 69 6C 65 0457*  F48: db "tiles/48.rgba8",0
       73 2F 34 38 
       2E 72 67 62 
       61 38 00    
0407E5 74 69 6C 65 0458*  F49: db "tiles/49.rgba8",0
       73 2F 34 39 
       2E 72 67 62 
       61 38 00    
0407F4 74 69 6C 65 0459*  F50: db "tiles/50.rgba8",0
       73 2F 35 30 
       2E 72 67 62 
       61 38 00    
040803 74 69 6C 65 0460*  F51: db "tiles/51.rgba8",0
       73 2F 35 31 
       2E 72 67 62 
       61 38 00    
040812 74 69 6C 65 0461*  F52: db "tiles/52.rgba8",0
       73 2F 35 32 
       2E 72 67 62 
       61 38 00    
040821 74 69 6C 65 0462*  F56: db "tiles/56.rgba8",0
       73 2F 35 36 
       2E 72 67 62 
       61 38 00    
040830 74 69 6C 65 0463*  F60: db "tiles/60.rgba8",0
       73 2F 36 30 
       2E 72 67 62 
       61 38 00    
04083F             0014   	include "src/asm/fonts_bmp.inc"
04083F             0001*  ; plots a bitmap character to the screen
04083F             0002*  ; inputs: a; ascii character to plot
04083F             0003*  ;      bc,de = x,y screen coordinates in pixels
04083F             0004*  ;      ix pointed at the font definition lut
04083F             0005*  ; returns: bc as the next x coordinate to plot
04083F             0006*  ;          pretty pixels which hopefully resemble readable text
04083F             0007*  ; destroys: lotsa stuff
04083F             0008*  font_bmp_plot:
04083F             0009*  ; back up bc,de
04083F C5          0010*      push bc
040840 D5          0011*      push de
040841             0012*  ; get the buffer id of the character
040841 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
040843 06 06       0014*      ld b,6 ; six bytes per lookup record
040845 4F          0015*      ld c,a
040846 ED 4C       0016*      mlt bc
040848 DD 09       0017*      add ix,bc ; now ix points to the character definition
04084A DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
04084D CD 35 29 04 0019*      call vdu_buff_select
040851             0020*  ; plot the character
040851 D1          0021*      pop de
040852 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
040855 83          0023*      add a,e ; add the y-coordinate
040856 5F          0024*      ld e,a
040857 3E 00       0025*      ld a,0 ; can't xor it because we need carry
040859 8A          0026*      adc a,d
04085A 57          0027*      ld d,a ; plot_y now correct for the character
04085B C1          0028*      pop bc ; plot_x
04085C C5          0029*      push bc ; we want it back after the plot
04085D CD 06 2B 04 0030*      call vdu_plot_bmp
040861             0031*  ; now set bc to the next x coordinate
040861 C1          0032*      pop bc
040862 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
040865 C6 02       0034*      add a,2 ; add a little padding between characters
040867 81          0035*      add a,c ; bump the original x-coordinate
040868 4F          0036*      ld c,a
040869 3E 00       0037*      ld a,0 ; can't xor it because we need carry
04086B 88          0038*      adc a,b
04086C 47          0039*      ld b,a ; plot_x now correct for the next character
04086D C9          0040*      ret
04086E             0041*  
04086E             0042*  ; plots a zero-terminated string of bitmap characters to the screen
04086E             0043*  ; inputs: hl; pointer to the string
04086E             0044*  ;       bc,de = x,y screen coordinates in pixels
04086E             0045*  ;       ix pointed at the font definition lut
04086E             0046*  ; returns: bc as the next x coordinate to plot
04086E             0047*  ;          de as the next y coordinate to plot
04086E             0048*  ;          pretty pixels which hopefully resemble readable text
04086E             0049*  font_bmp_print:
04086E             0050*  @next_char:
04086E             0051*  ; fetch the next character in the string
04086E 7E          0052*      ld a,(hl) ; a has the ascii value of the character
04086F FE 00       0053*      cp 0 ; is it zero?
040871 C8          0054*      ret z ; if so, we're done
040872 23          0055*      inc hl ; point to the next character
040873 E5          0056*      push hl ; save the pointer
040874 D5          0057*      push de ; save our y-coordinate
040875 DD E5       0058*      push ix ; save the font lut pointer
040877 CD 3F 08 04 0059*      call font_bmp_plot ; plot the character
04087B DD E1       0060*      pop ix ; restore the font lut pointer
04087D D1          0061*      pop de ; restore our y-coordinate
04087E E1          0062*      pop hl ; restore the pointer
04087F C3 6E 08 04 0063*      jp @next_char ; loop
040883             0015   	include "src/asm/maps.inc"
040883             0001*  ; ############# MAP CONSTANTS #############
040883             0002*  ; map tables addresses
040883             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
040883             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
040883             0005*  
040883             0006*  ; map status/type flags
040883             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
040883             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
040883             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
040883             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
040883             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
040883             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
040883             0013*  ; bits 1 and 0 are the render_type mask
040883             0014*  render_type_cube:   equ %00000000  ; 0
040883             0015*  render_type_floor:  equ %00000001  ; 1
040883             0016*  render_type_null:   equ %00000010  ; 2
040883             0017*  render_type_sprite: equ %00000011  ; 3
040883             0018*  
040883             0019*  ; HOW THE MAP TABLE IS LAID OUT
040883             0020*  ; map table field offset constants
040883             0021*  ; (mind the little-endianess)
040883             0022*  map_type_status: 	equ 0
040883             0023*  map_img_idx: 		equ 1
040883             0024*  map_obj_id: 		equ 2
040883             0025*  map_sprite_id: 		equ 3
040883             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
040883             0027*  
040883             0028*  ; gets cell info from a directional displacement from a given map location
040883             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
040883             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
040883             0031*  ; calls: get_dx_dy, get_cell_from_coords
040883             0032*  get_neighbor:
040883             0033*  ; modulo 4 on orientation
040883 7B          0034*      ld a,e
040884 E6 03       0035*      and 0x03
040886 5F          0036*      ld e,a
040887 CD B6 08 04 0037*  	call get_dx_dy ; d,e = dy,dx
04088B             0038*  ; add add b,c to the deltas in d,e
04088B 79          0039*  	ld a,c
04088C 83          0040*  	add a,e
04088D 5F          0041*  	ld e,a
04088E 78          0042*  	ld a,b
04088F 82          0043*  	add a,d
040890 57          0044*  	ld d,a
040891             0045*  ; fall through to get_cell_from_coords
040891             0046*  
040891             0047*  ; gets cell info from a given x,y map coordinate
040891             0048*  ; inputs: ; d,e = map_y,map_x
040891             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
040891             0050*  get_cell_from_coords:
040891             0051*  ; modulo 16 on input coords
040891 7B          0052*  	ld a,e
040892 E6 0F       0053*  	and 0x0F
040894 5F          0054*  	ld e,a
040895 7A          0055*  	ld a,d
040896 E6 0F       0056*  	and 0x0F
040898 57          0057*  	ld d,a
040899             0058*  ; get cell_id from x,y
040899 42          0059*  	ld b,d ; y
04089A 0E 10       0060*  	ld c,16 ; number of cells in a column
04089C ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
04089E 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0408A2 6B          0063*  	ld l,e ; x
0408A3 09          0064*  	add hl,bc ; hl = cell_id of x,y
0408A4 E5          0065*  	push hl ; so we can return cell_id
0408A5 4D          0066*  	ld c,l ; c = cell_id
0408A6             0067*  ; get address of cell record in cell_status table
0408A6 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0408A8 ED 4C       0069*  	mlt bc ; bc = offset to cell record
0408AA DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0408AF DD 09       0071*  	add ix,bc ; ix = address of cell record
0408B1 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0408B4 C1          0073*  	pop bc ; bc = cell_id
0408B5 C9          0074*  	ret
0408B6             0075*  
0408B6             0076*  ; gets dx,dy from orientation and distance
0408B6             0077*  ; d = distance ; e = orientation
0408B6             0078*  ; returns: d,e = dy,dx
0408B6             0079*  get_dx_dy:
0408B6             0080*  ; make sure deu is zero
0408B6 E5          0081*  	push hl
0408B7 21 00 00 00 0082*  	ld hl,0
0408BB 62          0083*  	ld h,d
0408BC 6B          0084*  	ld l,e
0408BD EB          0085*  	ex de,hl
0408BE E1          0086*  	pop hl
0408BF             0087*  ; modulo 4 on orientation
0408BF 7B          0088*  	ld a,e
0408C0 E6 03       0089*  	and 0x03
0408C2 FE 00       0090*  	cp 0
0408C4 28 11       0091*  	jr z,@north
0408C6 FE 01       0092*  	cp 1
0408C8 28 14       0093*  	jr z,@east
0408CA FE 02       0094*  	cp 2
0408CC 28 14       0095*  	jr z,@south
0408CE FE 03       0096*  	cp 3
0408D0 28 13       0097*  	jr z,@west
0408D2             0098*  ; if none of those, return zeroes
0408D2 11 00 00 00 0099*  	ld de,0
0408D6 C9          0100*  	ret
0408D7             0101*  @north:
0408D7             0102*  ; x = 0, y = -d
0408D7 1E 00       0103*  	ld e,0
0408D9 7A          0104*  	ld a,d
0408DA ED 44       0105*  	neg
0408DC 57          0106*  	ld d,a
0408DD C9          0107*  	ret
0408DE             0108*  @east:
0408DE             0109*  ; x = d, y = 0
0408DE 5A          0110*  	ld e,d
0408DF 16 00       0111*  	ld d,0
0408E1 C9          0112*  	ret
0408E2             0113*  @south:
0408E2             0114*  ; x = 0, y = d
0408E2 1E 00       0115*  	ld e,0
0408E4 C9          0116*  	ret
0408E5             0117*  @west:
0408E5             0118*  ; x = -d, y = 0
0408E5 7A          0119*  	ld a,d
0408E6 ED 44       0120*  	neg
0408E8 5F          0121*  	ld e,a
0408E9 16 00       0122*  	ld d,0
0408EB C9          0123*  	ret
0408EC             0124*  
0408EC             0125*  ; gets the direction from a dy,dx pair
0408EC             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
0408EC             0127*  ; inputs: ; d = dy ; e = dx
0408EC             0128*  ; returns: a = orientation
0408EC             0129*  get_dir_from_dy_dx:
0408EC AF          0130*  	xor a
0408ED 93          0131*  	sub e
0408EE 28 06       0132*  	jr z,@not_x
0408F0 3E 01       0133*  	ld a,1
0408F2 F8          0134*  	ret m
0408F3 3E 03       0135*  	ld a,3
0408F5 C9          0136*  	ret
0408F6             0137*  @not_x:
0408F6 AF          0138*  	xor a
0408F7 92          0139*  	sub d
0408F8 C8          0140*  	ret z
0408F9 3E 02       0141*  	ld a,2
0408FB F8          0142*  	ret m
0408FC AF          0143*  	xor a
0408FD C9          0144*  	ret
0408FE             0145*  
0408FE             0146*  
0408FE             0147*  ; translate camera relative x,y deltas to map x,y deltas
0408FE             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
0408FE             0149*  ; returns:	d = map_dy ; e = map_dx
0408FE             0150*  trans_dx_dy:
0408FE             0151*  ; modulo 4 on orientation
0408FE E6 03       0152*  	and 0x03
040900 28 11       0153*  	jr z,@north
040902 FE 01       0154*  	cp 1 ; east
040904 28 12       0155*  	jr z,@east
040906 FE 02       0156*  	cp 2 ; south
040908 28 12       0157*  	jr z,@south
04090A FE 03       0158*  	cp 3 ; west
04090C 28 13       0159*  	jr z,@west
04090E             0160*  ; if none of those, return zeroes
04090E 11 00 00 00 0161*  	ld de,0
040912 C9          0162*  	ret
040913             0163*  @north: ; invert y axis, x unnchanged
040913 7A          0164*  	ld a,d
040914 ED 44       0165*  	neg
040916 57          0166*  	ld d,a
040917 C9          0167*  	ret
040918             0168*  @east: ; +x = +y, +y = +x
040918 7A          0169*  	ld a,d
040919 53          0170*  	ld d,e
04091A 5F          0171*  	ld e,a
04091B C9          0172*  	ret
04091C             0173*  @south: ; invert x axis, y unchanged
04091C 7B          0174*  	ld a,e
04091D ED 44       0175*  	neg
04091F 5F          0176*  	ld e,a
040920 C9          0177*  	ret
040921             0178*  @west: ; +x = -y, +y = -x
040921 7A          0179*  	ld a,d ; y
040922 ED 44       0180*  	neg ; -y
040924 53          0181*  	ld d,e ; x
040925 5F          0182*  	ld e,a ; -y
040926 7A          0183*  	ld a,d ; x
040927 ED 44       0184*  	neg ; -x
040929 57          0185*  	ld d,a ; -x
04092A C9          0186*  	ret
04092B             0187*  
04092B             0188*  ; initialize map variables and load map file
04092B             0189*  ; inputs: none
04092B             0190*  map_init:
04092B AF          0191*  	xor a
04092C 32 F0 3F 04 0192*  	ld (cur_floor),a
040930 32 F1 3F 04 0193*  	ld (cur_room),a
040934             0194*  ; load room file
040934 CD 39 09 04 0195*  	call map_load
040938 C9          0196*  	ret
040939             0197*  
040939             0198*  ; load map file
040939             0199*  ; inputs: cur_floor, cur_room set
040939             0200*  map_load:
040939 3A F0 3F 04 0201*  	ld a,(cur_floor)
04093D 5F          0202*  	ld e,a
04093E 16 03       0203*  	ld d,3 ; three bytes per lookup record
040940 ED 5C       0204*  	mlt de ; de = offset to floor lut entry
040942 21 E7 09 04 0205*  	ld hl,floors ; address of floors lut
040946 19          0206*  	add hl,de ; hl = address of floor lut entry
040947 ED 27       0207*  	ld hl,(hl) ; hl = base address of rooms for given floor
040949 3A F1 3F 04 0208*  	ld a,(cur_room)
04094D 5F          0209*  	ld e,a
04094E 16 03       0210*  	ld d,3 ; three bytes per lookup record
040950 ED 5C       0211*  	mlt de ; de = offset to room lut entry
040952 19          0212*  	add hl,de ; hl = address of room lut entry
040953 ED 27       0213*  	ld hl,(hl) ; hl = address of room file name
040955 22 1F 32 04 0214*  	ld (cur_filename),hl ; DEBUG
040959 11 00 E0 B7 0215*  	ld de,cell_status ; address to load map data
04095D 01 00 08 00 0216*  	ld bc,2048 ; size of map data in bytes
040961 3E 01       0217*  	ld a,mos_load
040963 5B CF       0218*  	RST.LIL 08h
040965             0219*  ; ; load sprite data
040965             0220*  ; 	call map_init_sprites
040965 C9          0221*  	ret
040966             0222*  
040966             0223*  ; ; initialize sprite data for the current room into sprite table
040966             0224*  ; ; inputs: map data loaded
040966             0225*  ; map_init_sprites:
040966             0226*  ; ; initialize pointers
040966             0227*  ; 	ld ix,cell_status
040966             0228*  ; 	ld iy,sprite_table_base
040966             0229*  ; 	xor a
040966             0230*  ; 	ld (@cell_id),a
040966             0231*  ; @loop:
040966             0232*  ; 	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
040966             0233*  ; 	ld a,(ix+map_sprite_id)
040966             0234*  ; 	cp 255 ; check for no sprite
040966             0235*  ; 	jr z,@next_cell
040966             0236*  ; 	ld (iy+sprite_id),a
040966             0237*  ; 	ld a,(ix+map_img_idx)
040966             0238*  ; 	ld (iy+sprite_obj),a
040966             0239*  ; 	call sprite_init_data
040966             0240*  ; 	ld a,(@cell_id)
040966             0241*  ; 	call cell_id_to_coords ; d = map_y, e = map_x
040966             0242*  ; 	ld (iy+sprite_x),de ; set sprite x,y
040966             0243*  ; 	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
040966             0244*  ; @next_cell:
040966             0245*  ; 	lea ix,ix+map_record_size ; advance pointer to next cell
040966             0246*  ; ; check if we've reached the end of the map data
040966             0247*  ; 	ld a,(@cell_id)
040966             0248*  ; 	inc a
040966             0249*  ; 	ld (@cell_id),a
040966             0250*  ; 	jr nz,@loop ; still more to do
040966             0251*  ; ; cleanup and return
040966             0252*  ; 	ld iy,sprite_table_base ; reset pointer
040966             0253*  ; 	ld (sprite_table_pointer),iy
040966             0254*  ; 	ret
040966             0255*  ; @cell_id: db 0
040966             0256*  
040966             0257*  ; get the x,y map coordinates from a cell_id
040966             0258*  ; inputs: a = cell_id
040966             0259*  ; returns: a = cell_id, d = map_y, e = map_x
040966             0260*  cell_id_to_coords:
040966 11 00 00 00 0261*  	ld de,0 ; make sure deu is zero
04096A F5          0262*  	push af	; Save the cell id
04096B             0263*  ; Calculate the y coordinate by dividing the index by 16
04096B 57          0264*  	ld d,a      ; Move index into d
04096C CB 3A       0265*  	srl d        ; Shift right once (d = d / 2)
04096E CB 3A       0266*  	srl d        ; Shift right again (d = d / 4)
040970 CB 3A       0267*  	srl d        ; Shift right again (d = d / 8)
040972 CB 3A       0268*  	srl d        ; Shift right again (d = d / 16)
040974             0269*  ; Calculate the x coordinate by taking the index modulo 16
040974 E6 0F       0270*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
040976 5F          0271*  	ld e,a      ; e is now the x coordinate
040977 F1          0272*  	pop af	; a is cell id
040978 C9          0273*  	ret
040979             0274*  
040979             0275*  ; get starting position in room 0 of a floor based on is_start flag being set
040979             0276*  ; inputs: none
040979             0277*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
040979             0278*  ; destroys: c,iy
040979             0279*  get_floor_start:
040979             0280*  ; loop through map data to find the obj_id in a
040979 DD 21 00 E0 0281*  	ld ix,cell_status
       B7          
04097E 0E 00       0282*  	ld c,0 ; c will be a loop counter giving us cell_id
040980             0283*  @start_cell_loop:
040980 DD 7E 00    0284*  	ld a,(ix+map_type_status)
040983 E6 08       0285*  	and cell_is_start
040985 20 06       0286*  	jr nz,@start_cell_found
040987 ED 32 04    0287*  	lea ix,ix+map_record_size
04098A 0C          0288*  	inc c
04098B 18 F3       0289*  	jr @start_cell_loop
04098D             0290*  @start_cell_found:
04098D 79          0291*  	ld a,c
04098E CD 66 09 04 0292*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
040992 ED 53 F6 3F 0293*  	ld (cur_x),de
       04          
040997 C9          0294*  	ret
040998             0295*  
040998             0296*  ; get starting position based an obj_id
040998             0297*  ; inputs: a is the obj_id to search for
040998             0298*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
040998             0299*  ; destroys: c,iy
040998             0300*  get_room_start:
040998             0301*  ; loop through map data to find the obj_id in a
040998 DD 21 00 E0 0302*  	ld ix,cell_status
       B7          
04099D 0E 00       0303*  	ld c,0 ; c will be a loop counter giving us cell_id
04099F             0304*  @start_cell_loop:
04099F DD BE 02    0305*  	cp (ix+map_obj_id)
0409A2 28 06       0306*  	jr z,@start_cell_found
0409A4 ED 32 04    0307*  	lea ix,ix+map_record_size
0409A7 0C          0308*  	inc c
0409A8 18 F5       0309*  	jr @start_cell_loop
0409AA             0310*  @start_cell_found:
0409AA 79          0311*  	ld a,c
0409AB CD 66 09 04 0312*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
0409AF ED 53 F6 3F 0313*  	ld (cur_x),de
       04          
0409B4 C9          0314*  	ret
0409B5             0315*  
0409B5             0316*  
0409B5             0317*  ; ; moves player to the room indicated by the too room cell they've just entered
0409B5             0318*  ; ; inputs: ix = pointer to the cell containing the too room door
0409B5             0319*  ; change_room:
0409B5             0320*  ; ; set visited flag for old room
0409B5             0321*  ; 	ld a,(cur_room)
0409B5             0322*  ; 	ld hl,room_flags
0409B5             0323*  ; 	ld de,0 ; make sure deu and d are zero
0409B5             0324*  ; 	ld e,a
0409B5             0325*  ; 	add hl,de ; hl = address of room flags entry
0409B5             0326*  ; 	ld a,room_flag_visited
0409B5             0327*  ; 	or (hl)
0409B5             0328*  ; 	ld (hl),a
0409B5             0329*  ; ; update from_room
0409B5             0330*  ; 	ld a,(cur_room)
0409B5             0331*  ; 	ld (from_room),a
0409B5             0332*  ; ; get the new room id from the cell and update cur_room
0409B5             0333*  ; 	ld hl,to_room_obj_lut
0409B5             0334*  ; 	ld a,(ix+map_obj_id)
0409B5             0335*  ; 	sub (hl)
0409B5             0336*  ; 	ld (cur_room),a
0409B5             0337*  ; ; save old room state to room dat memory location
0409B5             0338*  ; 	ld hl,room_dat_lut
0409B5             0339*  ; 	ld a,(from_room)
0409B5             0340*  ; 	ld d,a
0409B5             0341*  ; 	ld e,3 ; three bytes per lookup record
0409B5             0342*  ; 	mlt de ; de = offset to room dat entry
0409B5             0343*  ; 	add hl,de ; hl = address of room dat entry
0409B5             0344*  ; 	ld de,(hl) ; destination address for room data
0409B5             0345*  ; 	ld hl,cell_status ; source address for room data
0409B5             0346*  ; 	ld bc,8*1024 ; size of room data
0409B5             0347*  ; 	ldir
0409B5             0348*  ; ; check room visited flag for target room
0409B5             0349*  ; 	ld hl,room_flags
0409B5             0350*  ; 	ld a,(cur_room)
0409B5             0351*  ; 	ld de,0 ; make sure deu and d are zero
0409B5             0352*  ; 	ld e,a
0409B5             0353*  ; 	add hl,de ; hl = address of room flags entry
0409B5             0354*  ; 	ld a,room_flag_visited
0409B5             0355*  ; 	and (hl)
0409B5             0356*  ; 	jr nz,@room_visited
0409B5             0357*  ; ; room not visited so load room data from file
0409B5             0358*  ; 	call map_load
0409B5             0359*  ; 	call map_init_sprites
0409B5             0360*  ; 	jr @get_room_start
0409B5             0361*  ; @room_visited:
0409B5             0362*  ; ; fetch new room state from room dat memory location
0409B5             0363*  ; 	ld hl,room_dat_lut
0409B5             0364*  ; 	ld a,(cur_room)
0409B5             0365*  ; 	ld d,a
0409B5             0366*  ; 	ld e,3 ; three bytes per lookup record
0409B5             0367*  ; 	mlt de ; de = offset to room dat entry
0409B5             0368*  ; 	add hl,de ; hl = address of room dat entry
0409B5             0369*  ; 	ld hl,(hl) ; source address for room data
0409B5             0370*  ; 	ld de,cell_status ; destination address for room data
0409B5             0371*  ; 	ld bc,8*1024 ; size of room data
0409B5             0372*  ; 	ldir
0409B5             0373*  ; @get_room_start:
0409B5             0374*  ; ; get player starting position from to_room_obj_lut
0409B5             0375*  ; 	ld a,(from_room)
0409B5             0376*  ; 	ld hl,to_room_obj_lut
0409B5             0377*  ; 	ld de,0 ; make sure deu and d are zero
0409B5             0378*  ; 	ld e,a
0409B5             0379*  ; 	add hl,de ; hl = address of to_room_obj_lut entry
0409B5             0380*  ; 	ld a,(hl)
0409B5             0381*  ; 	call get_room_start
0409B5             0382*  ; 	ld (cur_x),de
0409B5             0383*  ; 	ret
0409B5             0384*  
0409B5 1E 1F 20 21 0385*  to_room_obj_lut: db 30,31,32,33,34,35,36,37,38,39
       22 23 24 25 
       26 27       
0409BF             0386*  
0409BF 00 00 00 00 0387*  room_flags: blkb 10,0
       00 00 00 00 
       00 00       
0409C9             0388*  room_flag_visited: equ %00000001
0409C9             0389*  
0409C9             0390*  room_dat_lut:
0409C9 00 00 0A    0391*  room_00_dat: dl 0x0A0000
0409CC 00 20 0A    0392*  room_01_dat: dl 0x0A2000
0409CF 00 40 0A    0393*  room_02_dat: dl 0x0A4000
0409D2 00 60 0A    0394*  room_03_dat: dl 0x0A6000
0409D5 00 80 0A    0395*  room_04_dat: dl 0x0A8000
0409D8 00 A0 0A    0396*  room_05_dat: dl 0x0AA000
0409DB 00 C0 0A    0397*  room_06_dat: dl 0x0AC000
0409DE 00 E0 0A    0398*  room_07_dat: dl 0x0AE000
0409E1 00 00 0B    0399*  room_08_dat: dl 0x0B0000
0409E4 00 20 0B    0400*  room_09_dat: dl 0x0B2000
0409E7             0401*  
0409E7             0402*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
0409E7             0403*  
0409E7             0404*  start_obj_id: equ 28
0409E7             0405*  
0409E7             0406*  floors:
0409E7 EA 09 04    0407*  	dl floor_00
0409EA             0408*  
0409EA             0409*  room_files:
0409EA             0410*  floor_00:
0409EA F3 09 04    0411*  	dl room_00_0
0409ED 05 0A 04    0412*  	dl room_00_1
0409F0 17 0A 04    0413*  	dl room_00_2
0409F3             0414*  
0409F3 6D 61 70 73 0415*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
040A05 6D 61 70 73 0416*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
040A17 6D 61 70 73 0417*  room_00_2: db "maps/map_00_2.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       32 2E 62 69 
       6E 00       
040A29             0016   	; include "src/asm/render.inc"
040A29             0017   	include "src/asm/font_itc_honda.inc"
040A29             0001*  ; Bitmap indices:
040A29             0002*  BUF_0544: equ 0x0220 ; 32
040A29             0003*  ; Missing character 33 !
040A29             0004*  ; Missing character 34 "
040A29             0005*  ; Missing character 35 #
040A29             0006*  ; Missing character 36 $
040A29             0007*  ; Missing character 37 %
040A29             0008*  ; Missing character 38 &
040A29             0009*  ; Missing character 39 '
040A29             0010*  ; Missing character 40 (
040A29             0011*  ; Missing character 41 )
040A29             0012*  ; Missing character 42 *
040A29             0013*  ; Missing character 43 +
040A29             0014*  ; Missing character 44 ,
040A29             0015*  ; Missing character 45 -
040A29             0016*  BUF_0558: equ 0x022E ; 46 .
040A29             0017*  ; Missing character 47 /
040A29             0018*  BUF_0560: equ 0x0230 ; 48 0
040A29             0019*  BUF_0561: equ 0x0231 ; 49 1
040A29             0020*  BUF_0562: equ 0x0232 ; 50 2
040A29             0021*  BUF_0563: equ 0x0233 ; 51 3
040A29             0022*  BUF_0564: equ 0x0234 ; 52 4
040A29             0023*  BUF_0565: equ 0x0235 ; 53 5
040A29             0024*  BUF_0566: equ 0x0236 ; 54 6
040A29             0025*  BUF_0567: equ 0x0237 ; 55 7
040A29             0026*  BUF_0568: equ 0x0238 ; 56 8
040A29             0027*  BUF_0569: equ 0x0239 ; 57 9
040A29             0028*  ; Missing character 58 :
040A29             0029*  ; Missing character 59 ;
040A29             0030*  ; Missing character 60 <
040A29             0031*  ; Missing character 61 =
040A29             0032*  ; Missing character 62 >
040A29             0033*  ; Missing character 63 ?
040A29             0034*  ; Missing character 64 @
040A29             0035*  BUF_0577: equ 0x0241 ; 65 A
040A29             0036*  BUF_0578: equ 0x0242 ; 66 B
040A29             0037*  BUF_0579: equ 0x0243 ; 67 C
040A29             0038*  BUF_0580: equ 0x0244 ; 68 D
040A29             0039*  BUF_0581: equ 0x0245 ; 69 E
040A29             0040*  BUF_0582: equ 0x0246 ; 70 F
040A29             0041*  BUF_0583: equ 0x0247 ; 71 G
040A29             0042*  BUF_0584: equ 0x0248 ; 72 H
040A29             0043*  BUF_0585: equ 0x0249 ; 73 I
040A29             0044*  BUF_0586: equ 0x024A ; 74 J
040A29             0045*  BUF_0587: equ 0x024B ; 75 K
040A29             0046*  BUF_0588: equ 0x024C ; 76 L
040A29             0047*  BUF_0589: equ 0x024D ; 77 M
040A29             0048*  BUF_0590: equ 0x024E ; 78 N
040A29             0049*  BUF_0591: equ 0x024F ; 79 O
040A29             0050*  BUF_0592: equ 0x0250 ; 80 P
040A29             0051*  BUF_0593: equ 0x0251 ; 81 Q
040A29             0052*  BUF_0594: equ 0x0252 ; 82 R
040A29             0053*  BUF_0595: equ 0x0253 ; 83 S
040A29             0054*  BUF_0596: equ 0x0254 ; 84 T
040A29             0055*  BUF_0597: equ 0x0255 ; 85 U
040A29             0056*  BUF_0598: equ 0x0256 ; 86 V
040A29             0057*  BUF_0599: equ 0x0257 ; 87 W
040A29             0058*  BUF_0600: equ 0x0258 ; 88 X
040A29             0059*  BUF_0601: equ 0x0259 ; 89 Y
040A29             0060*  BUF_0602: equ 0x025A ; 90 Z
040A29             0061*  ; Missing character 91 [
040A29             0062*  ; Missing character 92 \
040A29             0063*  ; Missing character 93 ]
040A29             0064*  ; Missing character 94 ^
040A29             0065*  ; Missing character 95 _
040A29             0066*  ; Missing character 96 `
040A29             0067*  BUF_0609: equ 0x0261 ; 97 a
040A29             0068*  BUF_0610: equ 0x0262 ; 98 b
040A29             0069*  BUF_0611: equ 0x0263 ; 99 c
040A29             0070*  BUF_0612: equ 0x0264 ; 100 d
040A29             0071*  BUF_0613: equ 0x0265 ; 101 e
040A29             0072*  BUF_0614: equ 0x0266 ; 102 f
040A29             0073*  BUF_0615: equ 0x0267 ; 103 g
040A29             0074*  BUF_0616: equ 0x0268 ; 104 h
040A29             0075*  BUF_0617: equ 0x0269 ; 105 i
040A29             0076*  BUF_0618: equ 0x026A ; 106 j
040A29             0077*  BUF_0619: equ 0x026B ; 107 k
040A29             0078*  BUF_0620: equ 0x026C ; 108 l
040A29             0079*  BUF_0621: equ 0x026D ; 109 m
040A29             0080*  BUF_0622: equ 0x026E ; 110 n
040A29             0081*  BUF_0623: equ 0x026F ; 111 o
040A29             0082*  BUF_0624: equ 0x0270 ; 112 p
040A29             0083*  BUF_0625: equ 0x0271 ; 113 q
040A29             0084*  BUF_0626: equ 0x0272 ; 114 r
040A29             0085*  BUF_0627: equ 0x0273 ; 115 s
040A29             0086*  BUF_0628: equ 0x0274 ; 116 t
040A29             0087*  BUF_0629: equ 0x0275 ; 117 u
040A29             0088*  BUF_0630: equ 0x0276 ; 118 v
040A29             0089*  BUF_0631: equ 0x0277 ; 119 w
040A29             0090*  BUF_0632: equ 0x0278 ; 120 x
040A29             0091*  BUF_0633: equ 0x0279 ; 121 y
040A29             0092*  BUF_0634: equ 0x027A ; 122 z
040A29             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
040A29             0094*  font_itc_honda:
040A29 06 01 00 20 0095*  	dl 0x000106,BUF_0544
       02 00       
040A2F 06 01 00 20 0096*  	dl 0x000106,BUF_0544 ; Missing character 33
       02 00       
040A35 06 01 00 20 0097*  	dl 0x000106,BUF_0544 ; Missing character 34
       02 00       
040A3B 06 01 00 20 0098*  	dl 0x000106,BUF_0544 ; Missing character 35
       02 00       
040A41 06 01 00 20 0099*  	dl 0x000106,BUF_0544 ; Missing character 36
       02 00       
040A47 06 01 00 20 0100*  	dl 0x000106,BUF_0544 ; Missing character 37
       02 00       
040A4D 06 01 00 20 0101*  	dl 0x000106,BUF_0544 ; Missing character 38
       02 00       
040A53 06 01 00 20 0102*  	dl 0x000106,BUF_0544 ; Missing character 39
       02 00       
040A59 06 01 00 20 0103*  	dl 0x000106,BUF_0544 ; Missing character 40
       02 00       
040A5F 06 01 00 20 0104*  	dl 0x000106,BUF_0544 ; Missing character 41
       02 00       
040A65 06 01 00 20 0105*  	dl 0x000106,BUF_0544 ; Missing character 42
       02 00       
040A6B 06 01 00 20 0106*  	dl 0x000106,BUF_0544 ; Missing character 43
       02 00       
040A71 06 01 00 20 0107*  	dl 0x000106,BUF_0544 ; Missing character 44
       02 00       
040A77 06 01 00 20 0108*  	dl 0x000106,BUF_0544 ; Missing character 45
       02 00       
040A7D 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_0558
       02 00       
040A83 06 01 00 20 0110*  	dl 0x000106,BUF_0544 ; Missing character 47
       02 00       
040A89 0A 12 00 30 0111*  	dl 0x00120A,BUF_0560
       02 00       
040A8F 04 12 00 31 0112*  	dl 0x001204,BUF_0561
       02 00       
040A95 09 12 00 32 0113*  	dl 0x001209,BUF_0562
       02 00       
040A9B 0A 12 00 33 0114*  	dl 0x00120A,BUF_0563
       02 00       
040AA1 0C 12 00 34 0115*  	dl 0x00120C,BUF_0564
       02 00       
040AA7 0A 12 00 35 0116*  	dl 0x00120A,BUF_0565
       02 00       
040AAD 0A 12 00 36 0117*  	dl 0x00120A,BUF_0566
       02 00       
040AB3 08 12 00 37 0118*  	dl 0x001208,BUF_0567
       02 00       
040AB9 0A 12 00 38 0119*  	dl 0x00120A,BUF_0568
       02 00       
040ABF 0A 12 00 39 0120*  	dl 0x00120A,BUF_0569
       02 00       
040AC5 06 01 00 20 0121*  	dl 0x000106,BUF_0544 ; Missing character 58
       02 00       
040ACB 06 01 00 20 0122*  	dl 0x000106,BUF_0544 ; Missing character 59
       02 00       
040AD1 06 01 00 20 0123*  	dl 0x000106,BUF_0544 ; Missing character 60
       02 00       
040AD7 06 01 00 20 0124*  	dl 0x000106,BUF_0544 ; Missing character 61
       02 00       
040ADD 06 01 00 20 0125*  	dl 0x000106,BUF_0544 ; Missing character 62
       02 00       
040AE3 06 01 00 20 0126*  	dl 0x000106,BUF_0544 ; Missing character 63
       02 00       
040AE9 06 01 00 20 0127*  	dl 0x000106,BUF_0544 ; Missing character 64
       02 00       
040AEF 0A 12 01 41 0128*  	dl 0x01120A,BUF_0577
       02 00       
040AF5 0A 12 00 42 0129*  	dl 0x00120A,BUF_0578
       02 00       
040AFB 08 13 00 43 0130*  	dl 0x001308,BUF_0579
       02 00       
040B01 0A 12 00 44 0131*  	dl 0x00120A,BUF_0580
       02 00       
040B07 08 12 00 45 0132*  	dl 0x001208,BUF_0581
       02 00       
040B0D 08 12 00 46 0133*  	dl 0x001208,BUF_0582
       02 00       
040B13 0A 12 00 47 0134*  	dl 0x00120A,BUF_0583
       02 00       
040B19 0A 12 00 48 0135*  	dl 0x00120A,BUF_0584
       02 00       
040B1F 03 12 00 49 0136*  	dl 0x001203,BUF_0585
       02 00       
040B25 06 12 00 4A 0137*  	dl 0x001206,BUF_0586
       02 00       
040B2B 0A 12 00 4B 0138*  	dl 0x00120A,BUF_0587
       02 00       
040B31 08 12 01 4C 0139*  	dl 0x011208,BUF_0588
       02 00       
040B37 0E 12 00 4D 0140*  	dl 0x00120E,BUF_0589
       02 00       
040B3D 0A 12 00 4E 0141*  	dl 0x00120A,BUF_0590
       02 00       
040B43 0A 12 00 4F 0142*  	dl 0x00120A,BUF_0591
       02 00       
040B49 0A 12 00 50 0143*  	dl 0x00120A,BUF_0592
       02 00       
040B4F 0A 15 00 51 0144*  	dl 0x00150A,BUF_0593
       02 00       
040B55 0A 12 00 52 0145*  	dl 0x00120A,BUF_0594
       02 00       
040B5B 09 13 00 53 0146*  	dl 0x001309,BUF_0595
       02 00       
040B61 0A 12 00 54 0147*  	dl 0x00120A,BUF_0596
       02 00       
040B67 0A 12 00 55 0148*  	dl 0x00120A,BUF_0597
       02 00       
040B6D 0A 12 00 56 0149*  	dl 0x00120A,BUF_0598
       02 00       
040B73 10 12 00 57 0150*  	dl 0x001210,BUF_0599
       02 00       
040B79 0A 12 00 58 0151*  	dl 0x00120A,BUF_0600
       02 00       
040B7F 0A 12 01 59 0152*  	dl 0x01120A,BUF_0601
       02 00       
040B85 09 12 01 5A 0153*  	dl 0x011209,BUF_0602
       02 00       
040B8B 06 01 00 20 0154*  	dl 0x000106,BUF_0544 ; Missing character 91
       02 00       
040B91 06 01 00 20 0155*  	dl 0x000106,BUF_0544 ; Missing character 92
       02 00       
040B97 06 01 00 20 0156*  	dl 0x000106,BUF_0544 ; Missing character 93
       02 00       
040B9D 06 01 00 20 0157*  	dl 0x000106,BUF_0544 ; Missing character 94
       02 00       
040BA3 06 01 00 20 0158*  	dl 0x000106,BUF_0544 ; Missing character 95
       02 00       
040BA9 06 01 00 20 0159*  	dl 0x000106,BUF_0544 ; Missing character 96
       02 00       
040BAF 08 0C 06 61 0160*  	dl 0x060C08,BUF_0609
       02 00       
040BB5 09 12 01 62 0161*  	dl 0x011209,BUF_0610
       02 00       
040BBB 07 0C 06 63 0162*  	dl 0x060C07,BUF_0611
       02 00       
040BC1 09 12 00 64 0163*  	dl 0x001209,BUF_0612
       02 00       
040BC7 08 0C 06 65 0164*  	dl 0x060C08,BUF_0613
       02 00       
040BCD 09 12 00 66 0165*  	dl 0x001209,BUF_0614
       02 00       
040BD3 09 12 06 67 0166*  	dl 0x061209,BUF_0615
       02 00       
040BD9 09 12 01 68 0167*  	dl 0x011209,BUF_0616
       02 00       
040BDF 04 12 00 69 0168*  	dl 0x001204,BUF_0617
       02 00       
040BE5 08 18 00 6A 0169*  	dl 0x001808,BUF_0618
       02 00       
040BEB 09 12 01 6B 0170*  	dl 0x011209,BUF_0619
       02 00       
040BF1 03 12 00 6C 0171*  	dl 0x001203,BUF_0620
       02 00       
040BF7 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_0621
       02 00       
040BFD 09 0C 06 6E 0173*  	dl 0x060C09,BUF_0622
       02 00       
040C03 09 0C 06 6F 0174*  	dl 0x060C09,BUF_0623
       02 00       
040C09 09 12 06 70 0175*  	dl 0x061209,BUF_0624
       02 00       
040C0F 09 12 06 71 0176*  	dl 0x061209,BUF_0625
       02 00       
040C15 06 0D 06 72 0177*  	dl 0x060D06,BUF_0626
       02 00       
040C1B 08 0D 06 73 0178*  	dl 0x060D08,BUF_0627
       02 00       
040C21 07 0F 03 74 0179*  	dl 0x030F07,BUF_0628
       02 00       
040C27 09 0C 06 75 0180*  	dl 0x060C09,BUF_0629
       02 00       
040C2D 09 0C 06 76 0181*  	dl 0x060C09,BUF_0630
       02 00       
040C33 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_0631
       02 00       
040C39 09 0C 06 78 0183*  	dl 0x060C09,BUF_0632
       02 00       
040C3F 09 11 06 79 0184*  	dl 0x061109,BUF_0633
       02 00       
040C45 09 0C 06 7A 0185*  	dl 0x060C09,BUF_0634
       02 00       
040C4B             0186*  
040C4B             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
040C4B             0188*  load_font_itc_honda:
040C4B             0189*  
040C4B 21 20 02 00 0190*  	ld hl,BUF_0544
040C4F 01 06 00 00 0191*  	ld bc,6
040C53 11 01 00 00 0192*  	ld de,1
040C57 DD 21 06 00 0193*  	ld ix,6
       00          
040C5C FD 21 CC 12 0194*  	ld iy,Fhonda032
       04          
040C61 CD 9A 33 04 0195*  	call vdu_load_img_2
040C65             0196*  ; Missing character 33
040C65             0197*  ; Missing character 34
040C65             0198*  ; Missing character 35
040C65             0199*  ; Missing character 36
040C65             0200*  ; Missing character 37
040C65             0201*  ; Missing character 38
040C65             0202*  ; Missing character 39
040C65             0203*  ; Missing character 40
040C65             0204*  ; Missing character 41
040C65             0205*  ; Missing character 42
040C65             0206*  ; Missing character 43
040C65             0207*  ; Missing character 44
040C65             0208*  ; Missing character 45
040C65             0209*  
040C65 21 2E 02 00 0210*  	ld hl,BUF_0558
040C69 01 05 00 00 0211*  	ld bc,5
040C6D 11 05 00 00 0212*  	ld de,5
040C71 DD 21 19 00 0213*  	ld ix,25
       00          
040C76 FD 21 E2 12 0214*  	ld iy,Fhonda046
       04          
040C7B CD 9A 33 04 0215*  	call vdu_load_img_2
040C7F             0216*  ; Missing character 47
040C7F             0217*  
040C7F 21 30 02 00 0218*  	ld hl,BUF_0560
040C83 01 0A 00 00 0219*  	ld bc,10
040C87 11 12 00 00 0220*  	ld de,18
040C8B DD 21 B4 00 0221*  	ld ix,180
       00          
040C90 FD 21 F8 12 0222*  	ld iy,Fhonda048
       04          
040C95 CD 9A 33 04 0223*  	call vdu_load_img_2
040C99             0224*  
040C99 21 31 02 00 0225*  	ld hl,BUF_0561
040C9D 01 04 00 00 0226*  	ld bc,4
040CA1 11 12 00 00 0227*  	ld de,18
040CA5 DD 21 48 00 0228*  	ld ix,72
       00          
040CAA FD 21 0E 13 0229*  	ld iy,Fhonda049
       04          
040CAF CD 9A 33 04 0230*  	call vdu_load_img_2
040CB3             0231*  
040CB3 21 32 02 00 0232*  	ld hl,BUF_0562
040CB7 01 09 00 00 0233*  	ld bc,9
040CBB 11 12 00 00 0234*  	ld de,18
040CBF DD 21 A2 00 0235*  	ld ix,162
       00          
040CC4 FD 21 24 13 0236*  	ld iy,Fhonda050
       04          
040CC9 CD 9A 33 04 0237*  	call vdu_load_img_2
040CCD             0238*  
040CCD 21 33 02 00 0239*  	ld hl,BUF_0563
040CD1 01 0A 00 00 0240*  	ld bc,10
040CD5 11 12 00 00 0241*  	ld de,18
040CD9 DD 21 B4 00 0242*  	ld ix,180
       00          
040CDE FD 21 3A 13 0243*  	ld iy,Fhonda051
       04          
040CE3 CD 9A 33 04 0244*  	call vdu_load_img_2
040CE7             0245*  
040CE7 21 34 02 00 0246*  	ld hl,BUF_0564
040CEB 01 0C 00 00 0247*  	ld bc,12
040CEF 11 12 00 00 0248*  	ld de,18
040CF3 DD 21 D8 00 0249*  	ld ix,216
       00          
040CF8 FD 21 50 13 0250*  	ld iy,Fhonda052
       04          
040CFD CD 9A 33 04 0251*  	call vdu_load_img_2
040D01             0252*  
040D01 21 35 02 00 0253*  	ld hl,BUF_0565
040D05 01 0A 00 00 0254*  	ld bc,10
040D09 11 12 00 00 0255*  	ld de,18
040D0D DD 21 B4 00 0256*  	ld ix,180
       00          
040D12 FD 21 66 13 0257*  	ld iy,Fhonda053
       04          
040D17 CD 9A 33 04 0258*  	call vdu_load_img_2
040D1B             0259*  
040D1B 21 36 02 00 0260*  	ld hl,BUF_0566
040D1F 01 0A 00 00 0261*  	ld bc,10
040D23 11 12 00 00 0262*  	ld de,18
040D27 DD 21 B4 00 0263*  	ld ix,180
       00          
040D2C FD 21 7C 13 0264*  	ld iy,Fhonda054
       04          
040D31 CD 9A 33 04 0265*  	call vdu_load_img_2
040D35             0266*  
040D35 21 37 02 00 0267*  	ld hl,BUF_0567
040D39 01 08 00 00 0268*  	ld bc,8
040D3D 11 12 00 00 0269*  	ld de,18
040D41 DD 21 90 00 0270*  	ld ix,144
       00          
040D46 FD 21 92 13 0271*  	ld iy,Fhonda055
       04          
040D4B CD 9A 33 04 0272*  	call vdu_load_img_2
040D4F             0273*  
040D4F 21 38 02 00 0274*  	ld hl,BUF_0568
040D53 01 0A 00 00 0275*  	ld bc,10
040D57 11 12 00 00 0276*  	ld de,18
040D5B DD 21 B4 00 0277*  	ld ix,180
       00          
040D60 FD 21 A8 13 0278*  	ld iy,Fhonda056
       04          
040D65 CD 9A 33 04 0279*  	call vdu_load_img_2
040D69             0280*  
040D69 21 39 02 00 0281*  	ld hl,BUF_0569
040D6D 01 0A 00 00 0282*  	ld bc,10
040D71 11 12 00 00 0283*  	ld de,18
040D75 DD 21 B4 00 0284*  	ld ix,180
       00          
040D7A FD 21 BE 13 0285*  	ld iy,Fhonda057
       04          
040D7F CD 9A 33 04 0286*  	call vdu_load_img_2
040D83             0287*  ; Missing character 58
040D83             0288*  ; Missing character 59
040D83             0289*  ; Missing character 60
040D83             0290*  ; Missing character 61
040D83             0291*  ; Missing character 62
040D83             0292*  ; Missing character 63
040D83             0293*  ; Missing character 64
040D83             0294*  
040D83 21 41 02 00 0295*  	ld hl,BUF_0577
040D87 01 0A 00 00 0296*  	ld bc,10
040D8B 11 12 00 00 0297*  	ld de,18
040D8F DD 21 B4 00 0298*  	ld ix,180
       00          
040D94 FD 21 D4 13 0299*  	ld iy,Fhonda065
       04          
040D99 CD 9A 33 04 0300*  	call vdu_load_img_2
040D9D             0301*  
040D9D 21 42 02 00 0302*  	ld hl,BUF_0578
040DA1 01 0A 00 00 0303*  	ld bc,10
040DA5 11 12 00 00 0304*  	ld de,18
040DA9 DD 21 B4 00 0305*  	ld ix,180
       00          
040DAE FD 21 EA 13 0306*  	ld iy,Fhonda066
       04          
040DB3 CD 9A 33 04 0307*  	call vdu_load_img_2
040DB7             0308*  
040DB7 21 43 02 00 0309*  	ld hl,BUF_0579
040DBB 01 08 00 00 0310*  	ld bc,8
040DBF 11 13 00 00 0311*  	ld de,19
040DC3 DD 21 98 00 0312*  	ld ix,152
       00          
040DC8 FD 21 00 14 0313*  	ld iy,Fhonda067
       04          
040DCD CD 9A 33 04 0314*  	call vdu_load_img_2
040DD1             0315*  
040DD1 21 44 02 00 0316*  	ld hl,BUF_0580
040DD5 01 0A 00 00 0317*  	ld bc,10
040DD9 11 12 00 00 0318*  	ld de,18
040DDD DD 21 B4 00 0319*  	ld ix,180
       00          
040DE2 FD 21 16 14 0320*  	ld iy,Fhonda068
       04          
040DE7 CD 9A 33 04 0321*  	call vdu_load_img_2
040DEB             0322*  
040DEB 21 45 02 00 0323*  	ld hl,BUF_0581
040DEF 01 08 00 00 0324*  	ld bc,8
040DF3 11 12 00 00 0325*  	ld de,18
040DF7 DD 21 90 00 0326*  	ld ix,144
       00          
040DFC FD 21 2C 14 0327*  	ld iy,Fhonda069
       04          
040E01 CD 9A 33 04 0328*  	call vdu_load_img_2
040E05             0329*  
040E05 21 46 02 00 0330*  	ld hl,BUF_0582
040E09 01 08 00 00 0331*  	ld bc,8
040E0D 11 12 00 00 0332*  	ld de,18
040E11 DD 21 90 00 0333*  	ld ix,144
       00          
040E16 FD 21 42 14 0334*  	ld iy,Fhonda070
       04          
040E1B CD 9A 33 04 0335*  	call vdu_load_img_2
040E1F             0336*  
040E1F 21 47 02 00 0337*  	ld hl,BUF_0583
040E23 01 0A 00 00 0338*  	ld bc,10
040E27 11 12 00 00 0339*  	ld de,18
040E2B DD 21 B4 00 0340*  	ld ix,180
       00          
040E30 FD 21 58 14 0341*  	ld iy,Fhonda071
       04          
040E35 CD 9A 33 04 0342*  	call vdu_load_img_2
040E39             0343*  
040E39 21 48 02 00 0344*  	ld hl,BUF_0584
040E3D 01 0A 00 00 0345*  	ld bc,10
040E41 11 12 00 00 0346*  	ld de,18
040E45 DD 21 B4 00 0347*  	ld ix,180
       00          
040E4A FD 21 6E 14 0348*  	ld iy,Fhonda072
       04          
040E4F CD 9A 33 04 0349*  	call vdu_load_img_2
040E53             0350*  
040E53 21 49 02 00 0351*  	ld hl,BUF_0585
040E57 01 03 00 00 0352*  	ld bc,3
040E5B 11 12 00 00 0353*  	ld de,18
040E5F DD 21 36 00 0354*  	ld ix,54
       00          
040E64 FD 21 84 14 0355*  	ld iy,Fhonda073
       04          
040E69 CD 9A 33 04 0356*  	call vdu_load_img_2
040E6D             0357*  
040E6D 21 4A 02 00 0358*  	ld hl,BUF_0586
040E71 01 06 00 00 0359*  	ld bc,6
040E75 11 12 00 00 0360*  	ld de,18
040E79 DD 21 6C 00 0361*  	ld ix,108
       00          
040E7E FD 21 9A 14 0362*  	ld iy,Fhonda074
       04          
040E83 CD 9A 33 04 0363*  	call vdu_load_img_2
040E87             0364*  
040E87 21 4B 02 00 0365*  	ld hl,BUF_0587
040E8B 01 0A 00 00 0366*  	ld bc,10
040E8F 11 12 00 00 0367*  	ld de,18
040E93 DD 21 B4 00 0368*  	ld ix,180
       00          
040E98 FD 21 B0 14 0369*  	ld iy,Fhonda075
       04          
040E9D CD 9A 33 04 0370*  	call vdu_load_img_2
040EA1             0371*  
040EA1 21 4C 02 00 0372*  	ld hl,BUF_0588
040EA5 01 08 00 00 0373*  	ld bc,8
040EA9 11 12 00 00 0374*  	ld de,18
040EAD DD 21 90 00 0375*  	ld ix,144
       00          
040EB2 FD 21 C6 14 0376*  	ld iy,Fhonda076
       04          
040EB7 CD 9A 33 04 0377*  	call vdu_load_img_2
040EBB             0378*  
040EBB 21 4D 02 00 0379*  	ld hl,BUF_0589
040EBF 01 0E 00 00 0380*  	ld bc,14
040EC3 11 12 00 00 0381*  	ld de,18
040EC7 DD 21 FC 00 0382*  	ld ix,252
       00          
040ECC FD 21 DC 14 0383*  	ld iy,Fhonda077
       04          
040ED1 CD 9A 33 04 0384*  	call vdu_load_img_2
040ED5             0385*  
040ED5 21 4E 02 00 0386*  	ld hl,BUF_0590
040ED9 01 0A 00 00 0387*  	ld bc,10
040EDD 11 12 00 00 0388*  	ld de,18
040EE1 DD 21 B4 00 0389*  	ld ix,180
       00          
040EE6 FD 21 F2 14 0390*  	ld iy,Fhonda078
       04          
040EEB CD 9A 33 04 0391*  	call vdu_load_img_2
040EEF             0392*  
040EEF 21 4F 02 00 0393*  	ld hl,BUF_0591
040EF3 01 0A 00 00 0394*  	ld bc,10
040EF7 11 12 00 00 0395*  	ld de,18
040EFB DD 21 B4 00 0396*  	ld ix,180
       00          
040F00 FD 21 08 15 0397*  	ld iy,Fhonda079
       04          
040F05 CD 9A 33 04 0398*  	call vdu_load_img_2
040F09             0399*  
040F09 21 50 02 00 0400*  	ld hl,BUF_0592
040F0D 01 0A 00 00 0401*  	ld bc,10
040F11 11 12 00 00 0402*  	ld de,18
040F15 DD 21 B4 00 0403*  	ld ix,180
       00          
040F1A FD 21 1E 15 0404*  	ld iy,Fhonda080
       04          
040F1F CD 9A 33 04 0405*  	call vdu_load_img_2
040F23             0406*  
040F23 21 51 02 00 0407*  	ld hl,BUF_0593
040F27 01 0A 00 00 0408*  	ld bc,10
040F2B 11 15 00 00 0409*  	ld de,21
040F2F DD 21 D2 00 0410*  	ld ix,210
       00          
040F34 FD 21 34 15 0411*  	ld iy,Fhonda081
       04          
040F39 CD 9A 33 04 0412*  	call vdu_load_img_2
040F3D             0413*  
040F3D 21 52 02 00 0414*  	ld hl,BUF_0594
040F41 01 0A 00 00 0415*  	ld bc,10
040F45 11 12 00 00 0416*  	ld de,18
040F49 DD 21 B4 00 0417*  	ld ix,180
       00          
040F4E FD 21 4A 15 0418*  	ld iy,Fhonda082
       04          
040F53 CD 9A 33 04 0419*  	call vdu_load_img_2
040F57             0420*  
040F57 21 53 02 00 0421*  	ld hl,BUF_0595
040F5B 01 09 00 00 0422*  	ld bc,9
040F5F 11 13 00 00 0423*  	ld de,19
040F63 DD 21 AB 00 0424*  	ld ix,171
       00          
040F68 FD 21 60 15 0425*  	ld iy,Fhonda083
       04          
040F6D CD 9A 33 04 0426*  	call vdu_load_img_2
040F71             0427*  
040F71 21 54 02 00 0428*  	ld hl,BUF_0596
040F75 01 0A 00 00 0429*  	ld bc,10
040F79 11 12 00 00 0430*  	ld de,18
040F7D DD 21 B4 00 0431*  	ld ix,180
       00          
040F82 FD 21 76 15 0432*  	ld iy,Fhonda084
       04          
040F87 CD 9A 33 04 0433*  	call vdu_load_img_2
040F8B             0434*  
040F8B 21 55 02 00 0435*  	ld hl,BUF_0597
040F8F 01 0A 00 00 0436*  	ld bc,10
040F93 11 12 00 00 0437*  	ld de,18
040F97 DD 21 B4 00 0438*  	ld ix,180
       00          
040F9C FD 21 8C 15 0439*  	ld iy,Fhonda085
       04          
040FA1 CD 9A 33 04 0440*  	call vdu_load_img_2
040FA5             0441*  
040FA5 21 56 02 00 0442*  	ld hl,BUF_0598
040FA9 01 0A 00 00 0443*  	ld bc,10
040FAD 11 12 00 00 0444*  	ld de,18
040FB1 DD 21 B4 00 0445*  	ld ix,180
       00          
040FB6 FD 21 A2 15 0446*  	ld iy,Fhonda086
       04          
040FBB CD 9A 33 04 0447*  	call vdu_load_img_2
040FBF             0448*  
040FBF 21 57 02 00 0449*  	ld hl,BUF_0599
040FC3 01 10 00 00 0450*  	ld bc,16
040FC7 11 12 00 00 0451*  	ld de,18
040FCB DD 21 20 01 0452*  	ld ix,288
       00          
040FD0 FD 21 B8 15 0453*  	ld iy,Fhonda087
       04          
040FD5 CD 9A 33 04 0454*  	call vdu_load_img_2
040FD9             0455*  
040FD9 21 58 02 00 0456*  	ld hl,BUF_0600
040FDD 01 0A 00 00 0457*  	ld bc,10
040FE1 11 12 00 00 0458*  	ld de,18
040FE5 DD 21 B4 00 0459*  	ld ix,180
       00          
040FEA FD 21 CE 15 0460*  	ld iy,Fhonda088
       04          
040FEF CD 9A 33 04 0461*  	call vdu_load_img_2
040FF3             0462*  
040FF3 21 59 02 00 0463*  	ld hl,BUF_0601
040FF7 01 0A 00 00 0464*  	ld bc,10
040FFB 11 12 00 00 0465*  	ld de,18
040FFF DD 21 B4 00 0466*  	ld ix,180
       00          
041004 FD 21 E4 15 0467*  	ld iy,Fhonda089
       04          
041009 CD 9A 33 04 0468*  	call vdu_load_img_2
04100D             0469*  
04100D 21 5A 02 00 0470*  	ld hl,BUF_0602
041011 01 09 00 00 0471*  	ld bc,9
041015 11 12 00 00 0472*  	ld de,18
041019 DD 21 A2 00 0473*  	ld ix,162
       00          
04101E FD 21 FA 15 0474*  	ld iy,Fhonda090
       04          
041023 CD 9A 33 04 0475*  	call vdu_load_img_2
041027             0476*  ; Missing character 91
041027             0477*  ; Missing character 92
041027             0478*  ; Missing character 93
041027             0479*  ; Missing character 94
041027             0480*  ; Missing character 95
041027             0481*  ; Missing character 96
041027             0482*  
041027 21 61 02 00 0483*  	ld hl,BUF_0609
04102B 01 08 00 00 0484*  	ld bc,8
04102F 11 0C 00 00 0485*  	ld de,12
041033 DD 21 60 00 0486*  	ld ix,96
       00          
041038 FD 21 10 16 0487*  	ld iy,Fhonda097
       04          
04103D CD 9A 33 04 0488*  	call vdu_load_img_2
041041             0489*  
041041 21 62 02 00 0490*  	ld hl,BUF_0610
041045 01 09 00 00 0491*  	ld bc,9
041049 11 12 00 00 0492*  	ld de,18
04104D DD 21 A2 00 0493*  	ld ix,162
       00          
041052 FD 21 26 16 0494*  	ld iy,Fhonda098
       04          
041057 CD 9A 33 04 0495*  	call vdu_load_img_2
04105B             0496*  
04105B 21 63 02 00 0497*  	ld hl,BUF_0611
04105F 01 07 00 00 0498*  	ld bc,7
041063 11 0C 00 00 0499*  	ld de,12
041067 DD 21 54 00 0500*  	ld ix,84
       00          
04106C FD 21 3C 16 0501*  	ld iy,Fhonda099
       04          
041071 CD 9A 33 04 0502*  	call vdu_load_img_2
041075             0503*  
041075 21 64 02 00 0504*  	ld hl,BUF_0612
041079 01 09 00 00 0505*  	ld bc,9
04107D 11 12 00 00 0506*  	ld de,18
041081 DD 21 A2 00 0507*  	ld ix,162
       00          
041086 FD 21 52 16 0508*  	ld iy,Fhonda100
       04          
04108B CD 9A 33 04 0509*  	call vdu_load_img_2
04108F             0510*  
04108F 21 65 02 00 0511*  	ld hl,BUF_0613
041093 01 08 00 00 0512*  	ld bc,8
041097 11 0C 00 00 0513*  	ld de,12
04109B DD 21 60 00 0514*  	ld ix,96
       00          
0410A0 FD 21 68 16 0515*  	ld iy,Fhonda101
       04          
0410A5 CD 9A 33 04 0516*  	call vdu_load_img_2
0410A9             0517*  
0410A9 21 66 02 00 0518*  	ld hl,BUF_0614
0410AD 01 09 00 00 0519*  	ld bc,9
0410B1 11 12 00 00 0520*  	ld de,18
0410B5 DD 21 A2 00 0521*  	ld ix,162
       00          
0410BA FD 21 7E 16 0522*  	ld iy,Fhonda102
       04          
0410BF CD 9A 33 04 0523*  	call vdu_load_img_2
0410C3             0524*  
0410C3 21 67 02 00 0525*  	ld hl,BUF_0615
0410C7 01 09 00 00 0526*  	ld bc,9
0410CB 11 12 00 00 0527*  	ld de,18
0410CF DD 21 A2 00 0528*  	ld ix,162
       00          
0410D4 FD 21 94 16 0529*  	ld iy,Fhonda103
       04          
0410D9 CD 9A 33 04 0530*  	call vdu_load_img_2
0410DD             0531*  
0410DD 21 68 02 00 0532*  	ld hl,BUF_0616
0410E1 01 09 00 00 0533*  	ld bc,9
0410E5 11 12 00 00 0534*  	ld de,18
0410E9 DD 21 A2 00 0535*  	ld ix,162
       00          
0410EE FD 21 AA 16 0536*  	ld iy,Fhonda104
       04          
0410F3 CD 9A 33 04 0537*  	call vdu_load_img_2
0410F7             0538*  
0410F7 21 69 02 00 0539*  	ld hl,BUF_0617
0410FB 01 04 00 00 0540*  	ld bc,4
0410FF 11 12 00 00 0541*  	ld de,18
041103 DD 21 48 00 0542*  	ld ix,72
       00          
041108 FD 21 C0 16 0543*  	ld iy,Fhonda105
       04          
04110D CD 9A 33 04 0544*  	call vdu_load_img_2
041111             0545*  
041111 21 6A 02 00 0546*  	ld hl,BUF_0618
041115 01 08 00 00 0547*  	ld bc,8
041119 11 18 00 00 0548*  	ld de,24
04111D DD 21 C0 00 0549*  	ld ix,192
       00          
041122 FD 21 D6 16 0550*  	ld iy,Fhonda106
       04          
041127 CD 9A 33 04 0551*  	call vdu_load_img_2
04112B             0552*  
04112B 21 6B 02 00 0553*  	ld hl,BUF_0619
04112F 01 09 00 00 0554*  	ld bc,9
041133 11 12 00 00 0555*  	ld de,18
041137 DD 21 A2 00 0556*  	ld ix,162
       00          
04113C FD 21 EC 16 0557*  	ld iy,Fhonda107
       04          
041141 CD 9A 33 04 0558*  	call vdu_load_img_2
041145             0559*  
041145 21 6C 02 00 0560*  	ld hl,BUF_0620
041149 01 03 00 00 0561*  	ld bc,3
04114D 11 12 00 00 0562*  	ld de,18
041151 DD 21 36 00 0563*  	ld ix,54
       00          
041156 FD 21 02 17 0564*  	ld iy,Fhonda108
       04          
04115B CD 9A 33 04 0565*  	call vdu_load_img_2
04115F             0566*  
04115F 21 6D 02 00 0567*  	ld hl,BUF_0621
041163 01 0E 00 00 0568*  	ld bc,14
041167 11 0D 00 00 0569*  	ld de,13
04116B DD 21 B6 00 0570*  	ld ix,182
       00          
041170 FD 21 18 17 0571*  	ld iy,Fhonda109
       04          
041175 CD 9A 33 04 0572*  	call vdu_load_img_2
041179             0573*  
041179 21 6E 02 00 0574*  	ld hl,BUF_0622
04117D 01 09 00 00 0575*  	ld bc,9
041181 11 0C 00 00 0576*  	ld de,12
041185 DD 21 6C 00 0577*  	ld ix,108
       00          
04118A FD 21 2E 17 0578*  	ld iy,Fhonda110
       04          
04118F CD 9A 33 04 0579*  	call vdu_load_img_2
041193             0580*  
041193 21 6F 02 00 0581*  	ld hl,BUF_0623
041197 01 09 00 00 0582*  	ld bc,9
04119B 11 0C 00 00 0583*  	ld de,12
04119F DD 21 6C 00 0584*  	ld ix,108
       00          
0411A4 FD 21 44 17 0585*  	ld iy,Fhonda111
       04          
0411A9 CD 9A 33 04 0586*  	call vdu_load_img_2
0411AD             0587*  
0411AD 21 70 02 00 0588*  	ld hl,BUF_0624
0411B1 01 09 00 00 0589*  	ld bc,9
0411B5 11 12 00 00 0590*  	ld de,18
0411B9 DD 21 A2 00 0591*  	ld ix,162
       00          
0411BE FD 21 5A 17 0592*  	ld iy,Fhonda112
       04          
0411C3 CD 9A 33 04 0593*  	call vdu_load_img_2
0411C7             0594*  
0411C7 21 71 02 00 0595*  	ld hl,BUF_0625
0411CB 01 09 00 00 0596*  	ld bc,9
0411CF 11 12 00 00 0597*  	ld de,18
0411D3 DD 21 A2 00 0598*  	ld ix,162
       00          
0411D8 FD 21 70 17 0599*  	ld iy,Fhonda113
       04          
0411DD CD 9A 33 04 0600*  	call vdu_load_img_2
0411E1             0601*  
0411E1 21 72 02 00 0602*  	ld hl,BUF_0626
0411E5 01 06 00 00 0603*  	ld bc,6
0411E9 11 0D 00 00 0604*  	ld de,13
0411ED DD 21 4E 00 0605*  	ld ix,78
       00          
0411F2 FD 21 86 17 0606*  	ld iy,Fhonda114
       04          
0411F7 CD 9A 33 04 0607*  	call vdu_load_img_2
0411FB             0608*  
0411FB 21 73 02 00 0609*  	ld hl,BUF_0627
0411FF 01 08 00 00 0610*  	ld bc,8
041203 11 0D 00 00 0611*  	ld de,13
041207 DD 21 68 00 0612*  	ld ix,104
       00          
04120C FD 21 9C 17 0613*  	ld iy,Fhonda115
       04          
041211 CD 9A 33 04 0614*  	call vdu_load_img_2
041215             0615*  
041215 21 74 02 00 0616*  	ld hl,BUF_0628
041219 01 07 00 00 0617*  	ld bc,7
04121D 11 0F 00 00 0618*  	ld de,15
041221 DD 21 69 00 0619*  	ld ix,105
       00          
041226 FD 21 B2 17 0620*  	ld iy,Fhonda116
       04          
04122B CD 9A 33 04 0621*  	call vdu_load_img_2
04122F             0622*  
04122F 21 75 02 00 0623*  	ld hl,BUF_0629
041233 01 09 00 00 0624*  	ld bc,9
041237 11 0C 00 00 0625*  	ld de,12
04123B DD 21 6C 00 0626*  	ld ix,108
       00          
041240 FD 21 C8 17 0627*  	ld iy,Fhonda117
       04          
041245 CD 9A 33 04 0628*  	call vdu_load_img_2
041249             0629*  
041249 21 76 02 00 0630*  	ld hl,BUF_0630
04124D 01 09 00 00 0631*  	ld bc,9
041251 11 0C 00 00 0632*  	ld de,12
041255 DD 21 6C 00 0633*  	ld ix,108
       00          
04125A FD 21 DE 17 0634*  	ld iy,Fhonda118
       04          
04125F CD 9A 33 04 0635*  	call vdu_load_img_2
041263             0636*  
041263 21 77 02 00 0637*  	ld hl,BUF_0631
041267 01 0E 00 00 0638*  	ld bc,14
04126B 11 0C 00 00 0639*  	ld de,12
04126F DD 21 A8 00 0640*  	ld ix,168
       00          
041274 FD 21 F4 17 0641*  	ld iy,Fhonda119
       04          
041279 CD 9A 33 04 0642*  	call vdu_load_img_2
04127D             0643*  
04127D 21 78 02 00 0644*  	ld hl,BUF_0632
041281 01 09 00 00 0645*  	ld bc,9
041285 11 0C 00 00 0646*  	ld de,12
041289 DD 21 6C 00 0647*  	ld ix,108
       00          
04128E FD 21 0A 18 0648*  	ld iy,Fhonda120
       04          
041293 CD 9A 33 04 0649*  	call vdu_load_img_2
041297             0650*  
041297 21 79 02 00 0651*  	ld hl,BUF_0633
04129B 01 09 00 00 0652*  	ld bc,9
04129F 11 11 00 00 0653*  	ld de,17
0412A3 DD 21 99 00 0654*  	ld ix,153
       00          
0412A8 FD 21 20 18 0655*  	ld iy,Fhonda121
       04          
0412AD CD 9A 33 04 0656*  	call vdu_load_img_2
0412B1             0657*  
0412B1 21 7A 02 00 0658*  	ld hl,BUF_0634
0412B5 01 09 00 00 0659*  	ld bc,9
0412B9 11 0C 00 00 0660*  	ld de,12
0412BD DD 21 6C 00 0661*  	ld ix,108
       00          
0412C2 FD 21 36 18 0662*  	ld iy,Fhonda122
       04          
0412C7 CD 9A 33 04 0663*  	call vdu_load_img_2
0412CB             0664*  
0412CB C9          0665*  	ret
0412CC             0666*  
0412CC 66 6F 6E 74 0667*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
0412E2 66 6F 6E 74 0668*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
0412F8 66 6F 6E 74 0669*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
04130E 66 6F 6E 74 0670*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
041324 66 6F 6E 74 0671*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
04133A 66 6F 6E 74 0672*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
041350 66 6F 6E 74 0673*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
041366 66 6F 6E 74 0674*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
04137C 66 6F 6E 74 0675*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
041392 66 6F 6E 74 0676*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0413A8 66 6F 6E 74 0677*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
0413BE 66 6F 6E 74 0678*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
0413D4 66 6F 6E 74 0679*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
0413EA 66 6F 6E 74 0680*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
041400 66 6F 6E 74 0681*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
041416 66 6F 6E 74 0682*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
04142C 66 6F 6E 74 0683*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
041442 66 6F 6E 74 0684*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
041458 66 6F 6E 74 0685*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
04146E 66 6F 6E 74 0686*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
041484 66 6F 6E 74 0687*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
04149A 66 6F 6E 74 0688*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
0414B0 66 6F 6E 74 0689*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
0414C6 66 6F 6E 74 0690*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
0414DC 66 6F 6E 74 0691*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
0414F2 66 6F 6E 74 0692*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
041508 66 6F 6E 74 0693*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
04151E 66 6F 6E 74 0694*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
041534 66 6F 6E 74 0695*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
04154A 66 6F 6E 74 0696*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
041560 66 6F 6E 74 0697*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
041576 66 6F 6E 74 0698*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
04158C 66 6F 6E 74 0699*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
0415A2 66 6F 6E 74 0700*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
0415B8 66 6F 6E 74 0701*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
0415CE 66 6F 6E 74 0702*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
0415E4 66 6F 6E 74 0703*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
0415FA 66 6F 6E 74 0704*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
041610 66 6F 6E 74 0705*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
041626 66 6F 6E 74 0706*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
04163C 66 6F 6E 74 0707*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
041652 66 6F 6E 74 0708*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
041668 66 6F 6E 74 0709*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
04167E 66 6F 6E 74 0710*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
041694 66 6F 6E 74 0711*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
0416AA 66 6F 6E 74 0712*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
0416C0 66 6F 6E 74 0713*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
0416D6 66 6F 6E 74 0714*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
0416EC 66 6F 6E 74 0715*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
041702 66 6F 6E 74 0716*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
041718 66 6F 6E 74 0717*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
04172E 66 6F 6E 74 0718*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
041744 66 6F 6E 74 0719*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
04175A 66 6F 6E 74 0720*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
041770 66 6F 6E 74 0721*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
041786 66 6F 6E 74 0722*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
04179C 66 6F 6E 74 0723*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
0417B2 66 6F 6E 74 0724*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
0417C8 66 6F 6E 74 0725*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
0417DE 66 6F 6E 74 0726*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
0417F4 66 6F 6E 74 0727*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
04180A 66 6F 6E 74 0728*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
041820 66 6F 6E 74 0729*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
041836 66 6F 6E 74 0730*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
04184C             0018   	include "src/asm/font_retro_computer.inc"
04184C             0001*  ; Bitmap indices:
04184C             0002*  BUF_0288: equ 0x0120 ; 32
04184C             0003*  BUF_0289: equ 0x0121 ; 33 !
04184C             0004*  ; Missing character 34 "
04184C             0005*  ; Missing character 35 #
04184C             0006*  ; Missing character 36 $
04184C             0007*  ; Missing character 37 %
04184C             0008*  ; Missing character 38 &
04184C             0009*  ; Missing character 39 '
04184C             0010*  ; Missing character 40 (
04184C             0011*  ; Missing character 41 )
04184C             0012*  ; Missing character 42 *
04184C             0013*  ; Missing character 43 +
04184C             0014*  ; Missing character 44 ,
04184C             0015*  ; Missing character 45 -
04184C             0016*  ; Missing character 46 .
04184C             0017*  ; Missing character 47 /
04184C             0018*  BUF_0304: equ 0x0130 ; 48 0
04184C             0019*  BUF_0305: equ 0x0131 ; 49 1
04184C             0020*  BUF_0306: equ 0x0132 ; 50 2
04184C             0021*  BUF_0307: equ 0x0133 ; 51 3
04184C             0022*  BUF_0308: equ 0x0134 ; 52 4
04184C             0023*  BUF_0309: equ 0x0135 ; 53 5
04184C             0024*  BUF_0310: equ 0x0136 ; 54 6
04184C             0025*  BUF_0311: equ 0x0137 ; 55 7
04184C             0026*  BUF_0312: equ 0x0138 ; 56 8
04184C             0027*  BUF_0313: equ 0x0139 ; 57 9
04184C             0028*  ; Missing character 58 :
04184C             0029*  ; Missing character 59 ;
04184C             0030*  ; Missing character 60 <
04184C             0031*  ; Missing character 61 =
04184C             0032*  ; Missing character 62 >
04184C             0033*  BUF_0319: equ 0x013F ; 63 ?
04184C             0034*  ; Missing character 64 @
04184C             0035*  BUF_0321: equ 0x0141 ; 65 A
04184C             0036*  BUF_0322: equ 0x0142 ; 66 B
04184C             0037*  BUF_0323: equ 0x0143 ; 67 C
04184C             0038*  BUF_0324: equ 0x0144 ; 68 D
04184C             0039*  BUF_0325: equ 0x0145 ; 69 E
04184C             0040*  BUF_0326: equ 0x0146 ; 70 F
04184C             0041*  BUF_0327: equ 0x0147 ; 71 G
04184C             0042*  BUF_0328: equ 0x0148 ; 72 H
04184C             0043*  BUF_0329: equ 0x0149 ; 73 I
04184C             0044*  BUF_0330: equ 0x014A ; 74 J
04184C             0045*  BUF_0331: equ 0x014B ; 75 K
04184C             0046*  BUF_0332: equ 0x014C ; 76 L
04184C             0047*  BUF_0333: equ 0x014D ; 77 M
04184C             0048*  BUF_0334: equ 0x014E ; 78 N
04184C             0049*  BUF_0335: equ 0x014F ; 79 O
04184C             0050*  BUF_0336: equ 0x0150 ; 80 P
04184C             0051*  BUF_0337: equ 0x0151 ; 81 Q
04184C             0052*  BUF_0338: equ 0x0152 ; 82 R
04184C             0053*  BUF_0339: equ 0x0153 ; 83 S
04184C             0054*  BUF_0340: equ 0x0154 ; 84 T
04184C             0055*  BUF_0341: equ 0x0155 ; 85 U
04184C             0056*  BUF_0342: equ 0x0156 ; 86 V
04184C             0057*  BUF_0343: equ 0x0157 ; 87 W
04184C             0058*  BUF_0344: equ 0x0158 ; 88 X
04184C             0059*  BUF_0345: equ 0x0159 ; 89 Y
04184C             0060*  BUF_0346: equ 0x015A ; 90 Z
04184C             0061*  ; Missing character 91 [
04184C             0062*  ; Missing character 92 \
04184C             0063*  ; Missing character 93 ]
04184C             0064*  ; Missing character 94 ^
04184C             0065*  ; Missing character 95 _
04184C             0066*  ; Missing character 96 `
04184C             0067*  ; Missing character 97 a
04184C             0068*  ; Missing character 98 b
04184C             0069*  ; Missing character 99 c
04184C             0070*  ; Missing character 100 d
04184C             0071*  ; Missing character 101 e
04184C             0072*  ; Missing character 102 f
04184C             0073*  ; Missing character 103 g
04184C             0074*  ; Missing character 104 h
04184C             0075*  ; Missing character 105 i
04184C             0076*  ; Missing character 106 j
04184C             0077*  ; Missing character 107 k
04184C             0078*  ; Missing character 108 l
04184C             0079*  ; Missing character 109 m
04184C             0080*  ; Missing character 110 n
04184C             0081*  ; Missing character 111 o
04184C             0082*  ; Missing character 112 p
04184C             0083*  ; Missing character 113 q
04184C             0084*  ; Missing character 114 r
04184C             0085*  ; Missing character 115 s
04184C             0086*  ; Missing character 116 t
04184C             0087*  ; Missing character 117 u
04184C             0088*  ; Missing character 118 v
04184C             0089*  ; Missing character 119 w
04184C             0090*  ; Missing character 120 x
04184C             0091*  ; Missing character 121 y
04184C             0092*  ; Missing character 122 z
04184C             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
04184C             0094*  font_retro_computer:
04184C 06 01 00 20 0095*  	dl 0x000106,BUF_0288
       01 00       
041852 03 0E 00 21 0096*  	dl 0x000E03,BUF_0289
       01 00       
041858 06 01 00 20 0097*  	dl 0x000106,BUF_0288 ; Missing character 34
       01 00       
04185E 06 01 00 20 0098*  	dl 0x000106,BUF_0288 ; Missing character 35
       01 00       
041864 06 01 00 20 0099*  	dl 0x000106,BUF_0288 ; Missing character 36
       01 00       
04186A 06 01 00 20 0100*  	dl 0x000106,BUF_0288 ; Missing character 37
       01 00       
041870 06 01 00 20 0101*  	dl 0x000106,BUF_0288 ; Missing character 38
       01 00       
041876 06 01 00 20 0102*  	dl 0x000106,BUF_0288 ; Missing character 39
       01 00       
04187C 06 01 00 20 0103*  	dl 0x000106,BUF_0288 ; Missing character 40
       01 00       
041882 06 01 00 20 0104*  	dl 0x000106,BUF_0288 ; Missing character 41
       01 00       
041888 06 01 00 20 0105*  	dl 0x000106,BUF_0288 ; Missing character 42
       01 00       
04188E 06 01 00 20 0106*  	dl 0x000106,BUF_0288 ; Missing character 43
       01 00       
041894 06 01 00 20 0107*  	dl 0x000106,BUF_0288 ; Missing character 44
       01 00       
04189A 06 01 00 20 0108*  	dl 0x000106,BUF_0288 ; Missing character 45
       01 00       
0418A0 06 01 00 20 0109*  	dl 0x000106,BUF_0288 ; Missing character 46
       01 00       
0418A6 06 01 00 20 0110*  	dl 0x000106,BUF_0288 ; Missing character 47
       01 00       
0418AC 08 0E 00 30 0111*  	dl 0x000E08,BUF_0304
       01 00       
0418B2 08 0E 00 31 0112*  	dl 0x000E08,BUF_0305
       01 00       
0418B8 08 0E 00 32 0113*  	dl 0x000E08,BUF_0306
       01 00       
0418BE 08 0E 00 33 0114*  	dl 0x000E08,BUF_0307
       01 00       
0418C4 08 0E 00 34 0115*  	dl 0x000E08,BUF_0308
       01 00       
0418CA 08 0E 00 35 0116*  	dl 0x000E08,BUF_0309
       01 00       
0418D0 08 0E 00 36 0117*  	dl 0x000E08,BUF_0310
       01 00       
0418D6 08 0E 00 37 0118*  	dl 0x000E08,BUF_0311
       01 00       
0418DC 08 0E 00 38 0119*  	dl 0x000E08,BUF_0312
       01 00       
0418E2 08 0E 00 39 0120*  	dl 0x000E08,BUF_0313
       01 00       
0418E8 06 01 00 20 0121*  	dl 0x000106,BUF_0288 ; Missing character 58
       01 00       
0418EE 06 01 00 20 0122*  	dl 0x000106,BUF_0288 ; Missing character 59
       01 00       
0418F4 06 01 00 20 0123*  	dl 0x000106,BUF_0288 ; Missing character 60
       01 00       
0418FA 06 01 00 20 0124*  	dl 0x000106,BUF_0288 ; Missing character 61
       01 00       
041900 06 01 00 20 0125*  	dl 0x000106,BUF_0288 ; Missing character 62
       01 00       
041906 08 0E 00 3F 0126*  	dl 0x000E08,BUF_0319
       01 00       
04190C 06 01 00 20 0127*  	dl 0x000106,BUF_0288 ; Missing character 64
       01 00       
041912 07 0E 00 41 0128*  	dl 0x000E07,BUF_0321
       01 00       
041918 08 0E 00 42 0129*  	dl 0x000E08,BUF_0322
       01 00       
04191E 07 0E 00 43 0130*  	dl 0x000E07,BUF_0323
       01 00       
041924 08 0E 00 44 0131*  	dl 0x000E08,BUF_0324
       01 00       
04192A 08 0E 00 45 0132*  	dl 0x000E08,BUF_0325
       01 00       
041930 07 0E 00 46 0133*  	dl 0x000E07,BUF_0326
       01 00       
041936 08 0E 00 47 0134*  	dl 0x000E08,BUF_0327
       01 00       
04193C 07 0E 00 48 0135*  	dl 0x000E07,BUF_0328
       01 00       
041942 07 0E 00 49 0136*  	dl 0x000E07,BUF_0329
       01 00       
041948 08 0E 00 4A 0137*  	dl 0x000E08,BUF_0330
       01 00       
04194E 07 0E 00 4B 0138*  	dl 0x000E07,BUF_0331
       01 00       
041954 08 0E 00 4C 0139*  	dl 0x000E08,BUF_0332
       01 00       
04195A 09 0E 00 4D 0140*  	dl 0x000E09,BUF_0333
       01 00       
041960 07 0E 00 4E 0141*  	dl 0x000E07,BUF_0334
       01 00       
041966 08 0E 00 4F 0142*  	dl 0x000E08,BUF_0335
       01 00       
04196C 07 0E 00 50 0143*  	dl 0x000E07,BUF_0336
       01 00       
041972 08 0F 00 51 0144*  	dl 0x000F08,BUF_0337
       01 00       
041978 08 0E 00 52 0145*  	dl 0x000E08,BUF_0338
       01 00       
04197E 08 0E 00 53 0146*  	dl 0x000E08,BUF_0339
       01 00       
041984 07 0E 00 54 0147*  	dl 0x000E07,BUF_0340
       01 00       
04198A 08 0E 00 55 0148*  	dl 0x000E08,BUF_0341
       01 00       
041990 07 0E 00 56 0149*  	dl 0x000E07,BUF_0342
       01 00       
041996 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_0343
       01 00       
04199C 07 0E 00 58 0151*  	dl 0x000E07,BUF_0344
       01 00       
0419A2 08 0E 00 59 0152*  	dl 0x000E08,BUF_0345
       01 00       
0419A8 07 0E 00 5A 0153*  	dl 0x000E07,BUF_0346
       01 00       
0419AE 06 01 00 20 0154*  	dl 0x000106,BUF_0288 ; Missing character 91
       01 00       
0419B4 06 01 00 20 0155*  	dl 0x000106,BUF_0288 ; Missing character 92
       01 00       
0419BA 06 01 00 20 0156*  	dl 0x000106,BUF_0288 ; Missing character 93
       01 00       
0419C0 06 01 00 20 0157*  	dl 0x000106,BUF_0288 ; Missing character 94
       01 00       
0419C6 06 01 00 20 0158*  	dl 0x000106,BUF_0288 ; Missing character 95
       01 00       
0419CC 06 01 00 20 0159*  	dl 0x000106,BUF_0288 ; Missing character 96
       01 00       
0419D2 06 01 00 20 0160*  	dl 0x000106,BUF_0288 ; Missing character 97
       01 00       
0419D8 06 01 00 20 0161*  	dl 0x000106,BUF_0288 ; Missing character 98
       01 00       
0419DE 06 01 00 20 0162*  	dl 0x000106,BUF_0288 ; Missing character 99
       01 00       
0419E4 06 01 00 20 0163*  	dl 0x000106,BUF_0288 ; Missing character 100
       01 00       
0419EA 06 01 00 20 0164*  	dl 0x000106,BUF_0288 ; Missing character 101
       01 00       
0419F0 06 01 00 20 0165*  	dl 0x000106,BUF_0288 ; Missing character 102
       01 00       
0419F6 06 01 00 20 0166*  	dl 0x000106,BUF_0288 ; Missing character 103
       01 00       
0419FC 06 01 00 20 0167*  	dl 0x000106,BUF_0288 ; Missing character 104
       01 00       
041A02 06 01 00 20 0168*  	dl 0x000106,BUF_0288 ; Missing character 105
       01 00       
041A08 06 01 00 20 0169*  	dl 0x000106,BUF_0288 ; Missing character 106
       01 00       
041A0E 06 01 00 20 0170*  	dl 0x000106,BUF_0288 ; Missing character 107
       01 00       
041A14 06 01 00 20 0171*  	dl 0x000106,BUF_0288 ; Missing character 108
       01 00       
041A1A 06 01 00 20 0172*  	dl 0x000106,BUF_0288 ; Missing character 109
       01 00       
041A20 06 01 00 20 0173*  	dl 0x000106,BUF_0288 ; Missing character 110
       01 00       
041A26 06 01 00 20 0174*  	dl 0x000106,BUF_0288 ; Missing character 111
       01 00       
041A2C 06 01 00 20 0175*  	dl 0x000106,BUF_0288 ; Missing character 112
       01 00       
041A32 06 01 00 20 0176*  	dl 0x000106,BUF_0288 ; Missing character 113
       01 00       
041A38 06 01 00 20 0177*  	dl 0x000106,BUF_0288 ; Missing character 114
       01 00       
041A3E 06 01 00 20 0178*  	dl 0x000106,BUF_0288 ; Missing character 115
       01 00       
041A44 06 01 00 20 0179*  	dl 0x000106,BUF_0288 ; Missing character 116
       01 00       
041A4A 06 01 00 20 0180*  	dl 0x000106,BUF_0288 ; Missing character 117
       01 00       
041A50 06 01 00 20 0181*  	dl 0x000106,BUF_0288 ; Missing character 118
       01 00       
041A56 06 01 00 20 0182*  	dl 0x000106,BUF_0288 ; Missing character 119
       01 00       
041A5C 06 01 00 20 0183*  	dl 0x000106,BUF_0288 ; Missing character 120
       01 00       
041A62 06 01 00 20 0184*  	dl 0x000106,BUF_0288 ; Missing character 121
       01 00       
041A68 06 01 00 20 0185*  	dl 0x000106,BUF_0288 ; Missing character 122
       01 00       
041A6E             0186*  
041A6E             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
041A6E             0188*  load_font_retro_computer:
041A6E             0189*  
041A6E 21 20 01 00 0190*  	ld hl,BUF_0288
041A72 01 06 00 00 0191*  	ld bc,6
041A76 11 01 00 00 0192*  	ld de,1
041A7A DD 21 06 00 0193*  	ld ix,6
       00          
041A7F FD 21 65 1E 0194*  	ld iy,Frc032
       04          
041A84 CD 9A 33 04 0195*  	call vdu_load_img_2
041A88             0196*  
041A88 21 21 01 00 0197*  	ld hl,BUF_0289
041A8C 01 03 00 00 0198*  	ld bc,3
041A90 11 0E 00 00 0199*  	ld de,14
041A94 DD 21 2A 00 0200*  	ld ix,42
       00          
041A99 FD 21 78 1E 0201*  	ld iy,Frc033
       04          
041A9E CD 9A 33 04 0202*  	call vdu_load_img_2
041AA2             0203*  ; Missing character 34
041AA2             0204*  ; Missing character 35
041AA2             0205*  ; Missing character 36
041AA2             0206*  ; Missing character 37
041AA2             0207*  ; Missing character 38
041AA2             0208*  ; Missing character 39
041AA2             0209*  ; Missing character 40
041AA2             0210*  ; Missing character 41
041AA2             0211*  ; Missing character 42
041AA2             0212*  ; Missing character 43
041AA2             0213*  ; Missing character 44
041AA2             0214*  ; Missing character 45
041AA2             0215*  ; Missing character 46
041AA2             0216*  ; Missing character 47
041AA2             0217*  
041AA2 21 30 01 00 0218*  	ld hl,BUF_0304
041AA6 01 08 00 00 0219*  	ld bc,8
041AAA 11 0E 00 00 0220*  	ld de,14
041AAE DD 21 70 00 0221*  	ld ix,112
       00          
041AB3 FD 21 8B 1E 0222*  	ld iy,Frc048
       04          
041AB8 CD 9A 33 04 0223*  	call vdu_load_img_2
041ABC             0224*  
041ABC 21 31 01 00 0225*  	ld hl,BUF_0305
041AC0 01 08 00 00 0226*  	ld bc,8
041AC4 11 0E 00 00 0227*  	ld de,14
041AC8 DD 21 70 00 0228*  	ld ix,112
       00          
041ACD FD 21 9E 1E 0229*  	ld iy,Frc049
       04          
041AD2 CD 9A 33 04 0230*  	call vdu_load_img_2
041AD6             0231*  
041AD6 21 32 01 00 0232*  	ld hl,BUF_0306
041ADA 01 08 00 00 0233*  	ld bc,8
041ADE 11 0E 00 00 0234*  	ld de,14
041AE2 DD 21 70 00 0235*  	ld ix,112
       00          
041AE7 FD 21 B1 1E 0236*  	ld iy,Frc050
       04          
041AEC CD 9A 33 04 0237*  	call vdu_load_img_2
041AF0             0238*  
041AF0 21 33 01 00 0239*  	ld hl,BUF_0307
041AF4 01 08 00 00 0240*  	ld bc,8
041AF8 11 0E 00 00 0241*  	ld de,14
041AFC DD 21 70 00 0242*  	ld ix,112
       00          
041B01 FD 21 C4 1E 0243*  	ld iy,Frc051
       04          
041B06 CD 9A 33 04 0244*  	call vdu_load_img_2
041B0A             0245*  
041B0A 21 34 01 00 0246*  	ld hl,BUF_0308
041B0E 01 08 00 00 0247*  	ld bc,8
041B12 11 0E 00 00 0248*  	ld de,14
041B16 DD 21 70 00 0249*  	ld ix,112
       00          
041B1B FD 21 D7 1E 0250*  	ld iy,Frc052
       04          
041B20 CD 9A 33 04 0251*  	call vdu_load_img_2
041B24             0252*  
041B24 21 35 01 00 0253*  	ld hl,BUF_0309
041B28 01 08 00 00 0254*  	ld bc,8
041B2C 11 0E 00 00 0255*  	ld de,14
041B30 DD 21 70 00 0256*  	ld ix,112
       00          
041B35 FD 21 EA 1E 0257*  	ld iy,Frc053
       04          
041B3A CD 9A 33 04 0258*  	call vdu_load_img_2
041B3E             0259*  
041B3E 21 36 01 00 0260*  	ld hl,BUF_0310
041B42 01 08 00 00 0261*  	ld bc,8
041B46 11 0E 00 00 0262*  	ld de,14
041B4A DD 21 70 00 0263*  	ld ix,112
       00          
041B4F FD 21 FD 1E 0264*  	ld iy,Frc054
       04          
041B54 CD 9A 33 04 0265*  	call vdu_load_img_2
041B58             0266*  
041B58 21 37 01 00 0267*  	ld hl,BUF_0311
041B5C 01 08 00 00 0268*  	ld bc,8
041B60 11 0E 00 00 0269*  	ld de,14
041B64 DD 21 70 00 0270*  	ld ix,112
       00          
041B69 FD 21 10 1F 0271*  	ld iy,Frc055
       04          
041B6E CD 9A 33 04 0272*  	call vdu_load_img_2
041B72             0273*  
041B72 21 38 01 00 0274*  	ld hl,BUF_0312
041B76 01 08 00 00 0275*  	ld bc,8
041B7A 11 0E 00 00 0276*  	ld de,14
041B7E DD 21 70 00 0277*  	ld ix,112
       00          
041B83 FD 21 23 1F 0278*  	ld iy,Frc056
       04          
041B88 CD 9A 33 04 0279*  	call vdu_load_img_2
041B8C             0280*  
041B8C 21 39 01 00 0281*  	ld hl,BUF_0313
041B90 01 08 00 00 0282*  	ld bc,8
041B94 11 0E 00 00 0283*  	ld de,14
041B98 DD 21 70 00 0284*  	ld ix,112
       00          
041B9D FD 21 36 1F 0285*  	ld iy,Frc057
       04          
041BA2 CD 9A 33 04 0286*  	call vdu_load_img_2
041BA6             0287*  ; Missing character 58
041BA6             0288*  ; Missing character 59
041BA6             0289*  ; Missing character 60
041BA6             0290*  ; Missing character 61
041BA6             0291*  ; Missing character 62
041BA6             0292*  
041BA6 21 3F 01 00 0293*  	ld hl,BUF_0319
041BAA 01 08 00 00 0294*  	ld bc,8
041BAE 11 0E 00 00 0295*  	ld de,14
041BB2 DD 21 70 00 0296*  	ld ix,112
       00          
041BB7 FD 21 49 1F 0297*  	ld iy,Frc063
       04          
041BBC CD 9A 33 04 0298*  	call vdu_load_img_2
041BC0             0299*  ; Missing character 64
041BC0             0300*  
041BC0 21 41 01 00 0301*  	ld hl,BUF_0321
041BC4 01 07 00 00 0302*  	ld bc,7
041BC8 11 0E 00 00 0303*  	ld de,14
041BCC DD 21 62 00 0304*  	ld ix,98
       00          
041BD1 FD 21 5C 1F 0305*  	ld iy,Frc065
       04          
041BD6 CD 9A 33 04 0306*  	call vdu_load_img_2
041BDA             0307*  
041BDA 21 42 01 00 0308*  	ld hl,BUF_0322
041BDE 01 08 00 00 0309*  	ld bc,8
041BE2 11 0E 00 00 0310*  	ld de,14
041BE6 DD 21 70 00 0311*  	ld ix,112
       00          
041BEB FD 21 6F 1F 0312*  	ld iy,Frc066
       04          
041BF0 CD 9A 33 04 0313*  	call vdu_load_img_2
041BF4             0314*  
041BF4 21 43 01 00 0315*  	ld hl,BUF_0323
041BF8 01 07 00 00 0316*  	ld bc,7
041BFC 11 0E 00 00 0317*  	ld de,14
041C00 DD 21 62 00 0318*  	ld ix,98
       00          
041C05 FD 21 82 1F 0319*  	ld iy,Frc067
       04          
041C0A CD 9A 33 04 0320*  	call vdu_load_img_2
041C0E             0321*  
041C0E 21 44 01 00 0322*  	ld hl,BUF_0324
041C12 01 08 00 00 0323*  	ld bc,8
041C16 11 0E 00 00 0324*  	ld de,14
041C1A DD 21 70 00 0325*  	ld ix,112
       00          
041C1F FD 21 95 1F 0326*  	ld iy,Frc068
       04          
041C24 CD 9A 33 04 0327*  	call vdu_load_img_2
041C28             0328*  
041C28 21 45 01 00 0329*  	ld hl,BUF_0325
041C2C 01 08 00 00 0330*  	ld bc,8
041C30 11 0E 00 00 0331*  	ld de,14
041C34 DD 21 70 00 0332*  	ld ix,112
       00          
041C39 FD 21 A8 1F 0333*  	ld iy,Frc069
       04          
041C3E CD 9A 33 04 0334*  	call vdu_load_img_2
041C42             0335*  
041C42 21 46 01 00 0336*  	ld hl,BUF_0326
041C46 01 07 00 00 0337*  	ld bc,7
041C4A 11 0E 00 00 0338*  	ld de,14
041C4E DD 21 62 00 0339*  	ld ix,98
       00          
041C53 FD 21 BB 1F 0340*  	ld iy,Frc070
       04          
041C58 CD 9A 33 04 0341*  	call vdu_load_img_2
041C5C             0342*  
041C5C 21 47 01 00 0343*  	ld hl,BUF_0327
041C60 01 08 00 00 0344*  	ld bc,8
041C64 11 0E 00 00 0345*  	ld de,14
041C68 DD 21 70 00 0346*  	ld ix,112
       00          
041C6D FD 21 CE 1F 0347*  	ld iy,Frc071
       04          
041C72 CD 9A 33 04 0348*  	call vdu_load_img_2
041C76             0349*  
041C76 21 48 01 00 0350*  	ld hl,BUF_0328
041C7A 01 07 00 00 0351*  	ld bc,7
041C7E 11 0E 00 00 0352*  	ld de,14
041C82 DD 21 62 00 0353*  	ld ix,98
       00          
041C87 FD 21 E1 1F 0354*  	ld iy,Frc072
       04          
041C8C CD 9A 33 04 0355*  	call vdu_load_img_2
041C90             0356*  
041C90 21 49 01 00 0357*  	ld hl,BUF_0329
041C94 01 07 00 00 0358*  	ld bc,7
041C98 11 0E 00 00 0359*  	ld de,14
041C9C DD 21 62 00 0360*  	ld ix,98
       00          
041CA1 FD 21 F4 1F 0361*  	ld iy,Frc073
       04          
041CA6 CD 9A 33 04 0362*  	call vdu_load_img_2
041CAA             0363*  
041CAA 21 4A 01 00 0364*  	ld hl,BUF_0330
041CAE 01 08 00 00 0365*  	ld bc,8
041CB2 11 0E 00 00 0366*  	ld de,14
041CB6 DD 21 70 00 0367*  	ld ix,112
       00          
041CBB FD 21 07 20 0368*  	ld iy,Frc074
       04          
041CC0 CD 9A 33 04 0369*  	call vdu_load_img_2
041CC4             0370*  
041CC4 21 4B 01 00 0371*  	ld hl,BUF_0331
041CC8 01 07 00 00 0372*  	ld bc,7
041CCC 11 0E 00 00 0373*  	ld de,14
041CD0 DD 21 62 00 0374*  	ld ix,98
       00          
041CD5 FD 21 1A 20 0375*  	ld iy,Frc075
       04          
041CDA CD 9A 33 04 0376*  	call vdu_load_img_2
041CDE             0377*  
041CDE 21 4C 01 00 0378*  	ld hl,BUF_0332
041CE2 01 08 00 00 0379*  	ld bc,8
041CE6 11 0E 00 00 0380*  	ld de,14
041CEA DD 21 70 00 0381*  	ld ix,112
       00          
041CEF FD 21 2D 20 0382*  	ld iy,Frc076
       04          
041CF4 CD 9A 33 04 0383*  	call vdu_load_img_2
041CF8             0384*  
041CF8 21 4D 01 00 0385*  	ld hl,BUF_0333
041CFC 01 09 00 00 0386*  	ld bc,9
041D00 11 0E 00 00 0387*  	ld de,14
041D04 DD 21 7E 00 0388*  	ld ix,126
       00          
041D09 FD 21 40 20 0389*  	ld iy,Frc077
       04          
041D0E CD 9A 33 04 0390*  	call vdu_load_img_2
041D12             0391*  
041D12 21 4E 01 00 0392*  	ld hl,BUF_0334
041D16 01 07 00 00 0393*  	ld bc,7
041D1A 11 0E 00 00 0394*  	ld de,14
041D1E DD 21 62 00 0395*  	ld ix,98
       00          
041D23 FD 21 53 20 0396*  	ld iy,Frc078
       04          
041D28 CD 9A 33 04 0397*  	call vdu_load_img_2
041D2C             0398*  
041D2C 21 4F 01 00 0399*  	ld hl,BUF_0335
041D30 01 08 00 00 0400*  	ld bc,8
041D34 11 0E 00 00 0401*  	ld de,14
041D38 DD 21 70 00 0402*  	ld ix,112
       00          
041D3D FD 21 66 20 0403*  	ld iy,Frc079
       04          
041D42 CD 9A 33 04 0404*  	call vdu_load_img_2
041D46             0405*  
041D46 21 50 01 00 0406*  	ld hl,BUF_0336
041D4A 01 07 00 00 0407*  	ld bc,7
041D4E 11 0E 00 00 0408*  	ld de,14
041D52 DD 21 62 00 0409*  	ld ix,98
       00          
041D57 FD 21 79 20 0410*  	ld iy,Frc080
       04          
041D5C CD 9A 33 04 0411*  	call vdu_load_img_2
041D60             0412*  
041D60 21 51 01 00 0413*  	ld hl,BUF_0337
041D64 01 08 00 00 0414*  	ld bc,8
041D68 11 0F 00 00 0415*  	ld de,15
041D6C DD 21 78 00 0416*  	ld ix,120
       00          
041D71 FD 21 8C 20 0417*  	ld iy,Frc081
       04          
041D76 CD 9A 33 04 0418*  	call vdu_load_img_2
041D7A             0419*  
041D7A 21 52 01 00 0420*  	ld hl,BUF_0338
041D7E 01 08 00 00 0421*  	ld bc,8
041D82 11 0E 00 00 0422*  	ld de,14
041D86 DD 21 70 00 0423*  	ld ix,112
       00          
041D8B FD 21 9F 20 0424*  	ld iy,Frc082
       04          
041D90 CD 9A 33 04 0425*  	call vdu_load_img_2
041D94             0426*  
041D94 21 53 01 00 0427*  	ld hl,BUF_0339
041D98 01 08 00 00 0428*  	ld bc,8
041D9C 11 0E 00 00 0429*  	ld de,14
041DA0 DD 21 70 00 0430*  	ld ix,112
       00          
041DA5 FD 21 B2 20 0431*  	ld iy,Frc083
       04          
041DAA CD 9A 33 04 0432*  	call vdu_load_img_2
041DAE             0433*  
041DAE 21 54 01 00 0434*  	ld hl,BUF_0340
041DB2 01 07 00 00 0435*  	ld bc,7
041DB6 11 0E 00 00 0436*  	ld de,14
041DBA DD 21 62 00 0437*  	ld ix,98
       00          
041DBF FD 21 C5 20 0438*  	ld iy,Frc084
       04          
041DC4 CD 9A 33 04 0439*  	call vdu_load_img_2
041DC8             0440*  
041DC8 21 55 01 00 0441*  	ld hl,BUF_0341
041DCC 01 08 00 00 0442*  	ld bc,8
041DD0 11 0E 00 00 0443*  	ld de,14
041DD4 DD 21 70 00 0444*  	ld ix,112
       00          
041DD9 FD 21 D8 20 0445*  	ld iy,Frc085
       04          
041DDE CD 9A 33 04 0446*  	call vdu_load_img_2
041DE2             0447*  
041DE2 21 56 01 00 0448*  	ld hl,BUF_0342
041DE6 01 07 00 00 0449*  	ld bc,7
041DEA 11 0E 00 00 0450*  	ld de,14
041DEE DD 21 62 00 0451*  	ld ix,98
       00          
041DF3 FD 21 EB 20 0452*  	ld iy,Frc086
       04          
041DF8 CD 9A 33 04 0453*  	call vdu_load_img_2
041DFC             0454*  
041DFC 21 57 01 00 0455*  	ld hl,BUF_0343
041E00 01 0B 00 00 0456*  	ld bc,11
041E04 11 0E 00 00 0457*  	ld de,14
041E08 DD 21 9A 00 0458*  	ld ix,154
       00          
041E0D FD 21 FE 20 0459*  	ld iy,Frc087
       04          
041E12 CD 9A 33 04 0460*  	call vdu_load_img_2
041E16             0461*  
041E16 21 58 01 00 0462*  	ld hl,BUF_0344
041E1A 01 07 00 00 0463*  	ld bc,7
041E1E 11 0E 00 00 0464*  	ld de,14
041E22 DD 21 62 00 0465*  	ld ix,98
       00          
041E27 FD 21 11 21 0466*  	ld iy,Frc088
       04          
041E2C CD 9A 33 04 0467*  	call vdu_load_img_2
041E30             0468*  
041E30 21 59 01 00 0469*  	ld hl,BUF_0345
041E34 01 08 00 00 0470*  	ld bc,8
041E38 11 0E 00 00 0471*  	ld de,14
041E3C DD 21 70 00 0472*  	ld ix,112
       00          
041E41 FD 21 24 21 0473*  	ld iy,Frc089
       04          
041E46 CD 9A 33 04 0474*  	call vdu_load_img_2
041E4A             0475*  
041E4A 21 5A 01 00 0476*  	ld hl,BUF_0346
041E4E 01 07 00 00 0477*  	ld bc,7
041E52 11 0E 00 00 0478*  	ld de,14
041E56 DD 21 62 00 0479*  	ld ix,98
       00          
041E5B FD 21 37 21 0480*  	ld iy,Frc090
       04          
041E60 CD 9A 33 04 0481*  	call vdu_load_img_2
041E64             0482*  ; Missing character 91
041E64             0483*  ; Missing character 92
041E64             0484*  ; Missing character 93
041E64             0485*  ; Missing character 94
041E64             0486*  ; Missing character 95
041E64             0487*  ; Missing character 96
041E64             0488*  ; Missing character 97
041E64             0489*  ; Missing character 98
041E64             0490*  ; Missing character 99
041E64             0491*  ; Missing character 100
041E64             0492*  ; Missing character 101
041E64             0493*  ; Missing character 102
041E64             0494*  ; Missing character 103
041E64             0495*  ; Missing character 104
041E64             0496*  ; Missing character 105
041E64             0497*  ; Missing character 106
041E64             0498*  ; Missing character 107
041E64             0499*  ; Missing character 108
041E64             0500*  ; Missing character 109
041E64             0501*  ; Missing character 110
041E64             0502*  ; Missing character 111
041E64             0503*  ; Missing character 112
041E64             0504*  ; Missing character 113
041E64             0505*  ; Missing character 114
041E64             0506*  ; Missing character 115
041E64             0507*  ; Missing character 116
041E64             0508*  ; Missing character 117
041E64             0509*  ; Missing character 118
041E64             0510*  ; Missing character 119
041E64             0511*  ; Missing character 120
041E64             0512*  ; Missing character 121
041E64             0513*  ; Missing character 122
041E64             0514*  
041E64 C9          0515*  	ret
041E65             0516*  
041E65 66 6F 6E 74 0517*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
041E78 66 6F 6E 74 0518*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
041E8B 66 6F 6E 74 0519*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
041E9E 66 6F 6E 74 0520*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
041EB1 66 6F 6E 74 0521*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
041EC4 66 6F 6E 74 0522*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
041ED7 66 6F 6E 74 0523*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
041EEA 66 6F 6E 74 0524*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
041EFD 66 6F 6E 74 0525*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
041F10 66 6F 6E 74 0526*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
041F23 66 6F 6E 74 0527*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
041F36 66 6F 6E 74 0528*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
041F49 66 6F 6E 74 0529*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
041F5C 66 6F 6E 74 0530*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
041F6F 66 6F 6E 74 0531*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
041F82 66 6F 6E 74 0532*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
041F95 66 6F 6E 74 0533*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
041FA8 66 6F 6E 74 0534*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
041FBB 66 6F 6E 74 0535*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
041FCE 66 6F 6E 74 0536*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
041FE1 66 6F 6E 74 0537*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
041FF4 66 6F 6E 74 0538*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
042007 66 6F 6E 74 0539*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
04201A 66 6F 6E 74 0540*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
04202D 66 6F 6E 74 0541*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
042040 66 6F 6E 74 0542*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
042053 66 6F 6E 74 0543*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
042066 66 6F 6E 74 0544*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
042079 66 6F 6E 74 0545*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
04208C 66 6F 6E 74 0546*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
04209F 66 6F 6E 74 0547*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
0420B2 66 6F 6E 74 0548*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
0420C5 66 6F 6E 74 0549*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
0420D8 66 6F 6E 74 0550*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
0420EB 66 6F 6E 74 0551*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
0420FE 66 6F 6E 74 0552*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
042111 66 6F 6E 74 0553*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
042124 66 6F 6E 74 0554*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
042137 66 6F 6E 74 0555*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
04214A             0019   	include "src/asm/ui.inc"
04214A             0001*  ; ui routines will go here
04214A             0020   	include "src/asm/ui_img.inc"
04214A             0001*  ; Bitmap indices:
04214A             0002*  BUF_UI_BJ_025: equ 0x0300
04214A             0003*  BUF_UI_BJ_050: equ 0x0301
04214A             0004*  BUF_UI_BJ_075: equ 0x0302
04214A             0005*  BUF_UI_BJ_100: equ 0x0303
04214A             0006*  BUF_UI_BJ_120_120: equ 0x0304
04214A             0007*  BUF_UI_LOWER_PANEL: equ 0x0305
04214A             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x0306
04214A             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x0307
04214A             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x0308
04214A             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x0309
04214A             0012*  BUF_UI_SPLASH: equ 0x030A
04214A             0013*  
04214A             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
04214A             0015*  load_ui_images:
04214A             0016*  
04214A 21 00 03 00 0017*  	ld hl,BUF_UI_BJ_025
04214E 01 20 00 00 0018*  	ld bc,32
042152 11 20 00 00 0019*  	ld de,32
042156 DD 21 00 04 0020*  	ld ix,1024
       00          
04215B FD 21 69 22 0021*  	ld iy,F_UI_bj_025
       04          
042160 CD 9A 33 04 0022*  	call vdu_load_img_2
042164             0023*  
042164 21 01 03 00 0024*  	ld hl,BUF_UI_BJ_050
042168 01 20 00 00 0025*  	ld bc,32
04216C 11 20 00 00 0026*  	ld de,32
042170 DD 21 00 04 0027*  	ld ix,1024
       00          
042175 FD 21 79 22 0028*  	ld iy,F_UI_bj_050
       04          
04217A CD 9A 33 04 0029*  	call vdu_load_img_2
04217E             0030*  
04217E 21 02 03 00 0031*  	ld hl,BUF_UI_BJ_075
042182 01 20 00 00 0032*  	ld bc,32
042186 11 20 00 00 0033*  	ld de,32
04218A DD 21 00 04 0034*  	ld ix,1024
       00          
04218F FD 21 89 22 0035*  	ld iy,F_UI_bj_075
       04          
042194 CD 9A 33 04 0036*  	call vdu_load_img_2
042198             0037*  
042198 21 03 03 00 0038*  	ld hl,BUF_UI_BJ_100
04219C 01 20 00 00 0039*  	ld bc,32
0421A0 11 20 00 00 0040*  	ld de,32
0421A4 DD 21 00 04 0041*  	ld ix,1024
       00          
0421A9 FD 21 99 22 0042*  	ld iy,F_UI_bj_100
       04          
0421AE CD 9A 33 04 0043*  	call vdu_load_img_2
0421B2             0044*  
0421B2 21 04 03 00 0045*  	ld hl,BUF_UI_BJ_120_120
0421B6 01 78 00 00 0046*  	ld bc,120
0421BA 11 78 00 00 0047*  	ld de,120
0421BE DD 21 40 38 0048*  	ld ix,14400
       00          
0421C3 FD 21 A9 22 0049*  	ld iy,F_UI_bj_120_120
       04          
0421C8 CD 9A 33 04 0050*  	call vdu_load_img_2
0421CC             0051*  
0421CC 21 05 03 00 0052*  	ld hl,BUF_UI_LOWER_PANEL
0421D0 01 40 01 00 0053*  	ld bc,320
0421D4 11 50 00 00 0054*  	ld de,80
0421D8 DD 21 00 64 0055*  	ld ix,25600
       00          
0421DD FD 21 BD 22 0056*  	ld iy,F_UI_lower_panel
       04          
0421E2 CD 9A 33 04 0057*  	call vdu_load_img_2
0421E6             0058*  
0421E6 21 06 03 00 0059*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
0421EA 01 28 00 00 0060*  	ld bc,40
0421EE 11 14 00 00 0061*  	ld de,20
0421F2 DD 21 20 03 0062*  	ld ix,800
       00          
0421F7 FD 21 D2 22 0063*  	ld iy,F_UI_lower_panel_gatling
       04          
0421FC CD 9A 33 04 0064*  	call vdu_load_img_2
042200             0065*  
042200 21 07 03 00 0066*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
042204 01 28 00 00 0067*  	ld bc,40
042208 11 14 00 00 0068*  	ld de,20
04220C DD 21 20 03 0069*  	ld ix,800
       00          
042211 FD 21 EF 22 0070*  	ld iy,F_UI_lower_panel_knife
       04          
042216 CD 9A 33 04 0071*  	call vdu_load_img_2
04221A             0072*  
04221A 21 08 03 00 0073*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04221E 01 28 00 00 0074*  	ld bc,40
042222 11 14 00 00 0075*  	ld de,20
042226 DD 21 20 03 0076*  	ld ix,800
       00          
04222B FD 21 0A 23 0077*  	ld iy,F_UI_lower_panel_machine_gun
       04          
042230 CD 9A 33 04 0078*  	call vdu_load_img_2
042234             0079*  
042234 21 09 03 00 0080*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
042238 01 28 00 00 0081*  	ld bc,40
04223C 11 14 00 00 0082*  	ld de,20
042240 DD 21 20 03 0083*  	ld ix,800
       00          
042245 FD 21 2B 23 0084*  	ld iy,F_UI_lower_panel_pistol
       04          
04224A CD 9A 33 04 0085*  	call vdu_load_img_2
04224E             0086*  
04224E 21 0A 03 00 0087*  	ld hl,BUF_UI_SPLASH
042252 01 40 01 00 0088*  	ld bc,320
042256 11 A0 00 00 0089*  	ld de,160
04225A DD 21 00 C8 0090*  	ld ix,51200
       00          
04225F FD 21 47 23 0091*  	ld iy,F_UI_splash
       04          
042264 CD 9A 33 04 0092*  	call vdu_load_img_2
042268             0093*  
042268 C9          0094*  	ret
042269             0095*  
042269 75 69 2F 62 0096*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
042279 75 69 2F 62 0097*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
042289 75 69 2F 62 0098*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
042299 75 69 2F 62 0099*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
0422A9 75 69 2F 62 0100*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
0422BD 75 69 2F 6C 0101*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
0422D2 75 69 2F 6C 0102*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
0422EF 75 69 2F 6C 0103*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
04230A 75 69 2F 6C 0104*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
04232B 75 69 2F 6C 0105*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
042347 75 69 2F 73 0106*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
042357             0021   	include "src/asm/ui_img_bj.inc"
042357             0001*  ; Bitmap indices:
042357             0002*  BUF_UI_BJ_GATLING_00: equ 0x0400
042357             0003*  BUF_UI_BJ_GATLING_01: equ 0x0401
042357             0004*  BUF_UI_BJ_GATLING_02: equ 0x0402
042357             0005*  BUF_UI_BJ_GATLING_03: equ 0x0403
042357             0006*  BUF_UI_BJ_GATLING_04: equ 0x0404
042357             0007*  BUF_UI_BJ_KNIFE_00: equ 0x0405
042357             0008*  BUF_UI_BJ_KNIFE_01: equ 0x0406
042357             0009*  BUF_UI_BJ_KNIFE_02: equ 0x0407
042357             0010*  BUF_UI_BJ_KNIFE_03: equ 0x0408
042357             0011*  BUF_UI_BJ_KNIFE_04: equ 0x0409
042357             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x040A
042357             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x040B
042357             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x040C
042357             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x040D
042357             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x040E
042357             0017*  BUF_UI_BJ_PISTOL_00: equ 0x040F
042357             0018*  BUF_UI_BJ_PISTOL_01: equ 0x0410
042357             0019*  BUF_UI_BJ_PISTOL_02: equ 0x0411
042357             0020*  BUF_UI_BJ_PISTOL_03: equ 0x0412
042357             0021*  BUF_UI_BJ_PISTOL_04: equ 0x0413
042357             0022*  
042357             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
042357             0024*  load_ui_images_bj:
042357             0025*  
042357 21 00 04 00 0026*  	ld hl,BUF_UI_BJ_GATLING_00
04235B 01 40 00 00 0027*  	ld bc,64
04235F 11 40 00 00 0028*  	ld de,64
042363 DD 21 00 10 0029*  	ld ix,4096
       00          
042368 FD 21 60 25 0030*  	ld iy,F_UI_bj_gatling_00
       04          
04236D CD 9A 33 04 0031*  	call vdu_load_img_2
042371             0032*  
042371 21 01 04 00 0033*  	ld hl,BUF_UI_BJ_GATLING_01
042375 01 40 00 00 0034*  	ld bc,64
042379 11 40 00 00 0035*  	ld de,64
04237D DD 21 00 10 0036*  	ld ix,4096
       00          
042382 FD 21 7A 25 0037*  	ld iy,F_UI_bj_gatling_01
       04          
042387 CD 9A 33 04 0038*  	call vdu_load_img_2
04238B             0039*  
04238B 21 02 04 00 0040*  	ld hl,BUF_UI_BJ_GATLING_02
04238F 01 40 00 00 0041*  	ld bc,64
042393 11 40 00 00 0042*  	ld de,64
042397 DD 21 00 10 0043*  	ld ix,4096
       00          
04239C FD 21 94 25 0044*  	ld iy,F_UI_bj_gatling_02
       04          
0423A1 CD 9A 33 04 0045*  	call vdu_load_img_2
0423A5             0046*  
0423A5 21 03 04 00 0047*  	ld hl,BUF_UI_BJ_GATLING_03
0423A9 01 40 00 00 0048*  	ld bc,64
0423AD 11 40 00 00 0049*  	ld de,64
0423B1 DD 21 00 10 0050*  	ld ix,4096
       00          
0423B6 FD 21 AE 25 0051*  	ld iy,F_UI_bj_gatling_03
       04          
0423BB CD 9A 33 04 0052*  	call vdu_load_img_2
0423BF             0053*  
0423BF 21 04 04 00 0054*  	ld hl,BUF_UI_BJ_GATLING_04
0423C3 01 40 00 00 0055*  	ld bc,64
0423C7 11 40 00 00 0056*  	ld de,64
0423CB DD 21 00 10 0057*  	ld ix,4096
       00          
0423D0 FD 21 C8 25 0058*  	ld iy,F_UI_bj_gatling_04
       04          
0423D5 CD 9A 33 04 0059*  	call vdu_load_img_2
0423D9             0060*  
0423D9 21 05 04 00 0061*  	ld hl,BUF_UI_BJ_KNIFE_00
0423DD 01 40 00 00 0062*  	ld bc,64
0423E1 11 40 00 00 0063*  	ld de,64
0423E5 DD 21 00 10 0064*  	ld ix,4096
       00          
0423EA FD 21 E2 25 0065*  	ld iy,F_UI_bj_knife_00
       04          
0423EF CD 9A 33 04 0066*  	call vdu_load_img_2
0423F3             0067*  
0423F3 21 06 04 00 0068*  	ld hl,BUF_UI_BJ_KNIFE_01
0423F7 01 40 00 00 0069*  	ld bc,64
0423FB 11 40 00 00 0070*  	ld de,64
0423FF DD 21 00 10 0071*  	ld ix,4096
       00          
042404 FD 21 FA 25 0072*  	ld iy,F_UI_bj_knife_01
       04          
042409 CD 9A 33 04 0073*  	call vdu_load_img_2
04240D             0074*  
04240D 21 07 04 00 0075*  	ld hl,BUF_UI_BJ_KNIFE_02
042411 01 40 00 00 0076*  	ld bc,64
042415 11 40 00 00 0077*  	ld de,64
042419 DD 21 00 10 0078*  	ld ix,4096
       00          
04241E FD 21 12 26 0079*  	ld iy,F_UI_bj_knife_02
       04          
042423 CD 9A 33 04 0080*  	call vdu_load_img_2
042427             0081*  
042427 21 08 04 00 0082*  	ld hl,BUF_UI_BJ_KNIFE_03
04242B 01 40 00 00 0083*  	ld bc,64
04242F 11 40 00 00 0084*  	ld de,64
042433 DD 21 00 10 0085*  	ld ix,4096
       00          
042438 FD 21 2A 26 0086*  	ld iy,F_UI_bj_knife_03
       04          
04243D CD 9A 33 04 0087*  	call vdu_load_img_2
042441             0088*  
042441 21 09 04 00 0089*  	ld hl,BUF_UI_BJ_KNIFE_04
042445 01 40 00 00 0090*  	ld bc,64
042449 11 40 00 00 0091*  	ld de,64
04244D DD 21 00 10 0092*  	ld ix,4096
       00          
042452 FD 21 42 26 0093*  	ld iy,F_UI_bj_knife_04
       04          
042457 CD 9A 33 04 0094*  	call vdu_load_img_2
04245B             0095*  
04245B 21 0A 04 00 0096*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
04245F 01 40 00 00 0097*  	ld bc,64
042463 11 40 00 00 0098*  	ld de,64
042467 DD 21 00 10 0099*  	ld ix,4096
       00          
04246C FD 21 5A 26 0100*  	ld iy,F_UI_bj_machine_gun_00
       04          
042471 CD 9A 33 04 0101*  	call vdu_load_img_2
042475             0102*  
042475 21 0B 04 00 0103*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
042479 01 40 00 00 0104*  	ld bc,64
04247D 11 40 00 00 0105*  	ld de,64
042481 DD 21 00 10 0106*  	ld ix,4096
       00          
042486 FD 21 78 26 0107*  	ld iy,F_UI_bj_machine_gun_01
       04          
04248B CD 9A 33 04 0108*  	call vdu_load_img_2
04248F             0109*  
04248F 21 0C 04 00 0110*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
042493 01 40 00 00 0111*  	ld bc,64
042497 11 40 00 00 0112*  	ld de,64
04249B DD 21 00 10 0113*  	ld ix,4096
       00          
0424A0 FD 21 96 26 0114*  	ld iy,F_UI_bj_machine_gun_02
       04          
0424A5 CD 9A 33 04 0115*  	call vdu_load_img_2
0424A9             0116*  
0424A9 21 0D 04 00 0117*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
0424AD 01 40 00 00 0118*  	ld bc,64
0424B1 11 40 00 00 0119*  	ld de,64
0424B5 DD 21 00 10 0120*  	ld ix,4096
       00          
0424BA FD 21 B4 26 0121*  	ld iy,F_UI_bj_machine_gun_03
       04          
0424BF CD 9A 33 04 0122*  	call vdu_load_img_2
0424C3             0123*  
0424C3 21 0E 04 00 0124*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
0424C7 01 40 00 00 0125*  	ld bc,64
0424CB 11 40 00 00 0126*  	ld de,64
0424CF DD 21 00 10 0127*  	ld ix,4096
       00          
0424D4 FD 21 D2 26 0128*  	ld iy,F_UI_bj_machine_gun_04
       04          
0424D9 CD 9A 33 04 0129*  	call vdu_load_img_2
0424DD             0130*  
0424DD 21 0F 04 00 0131*  	ld hl,BUF_UI_BJ_PISTOL_00
0424E1 01 40 00 00 0132*  	ld bc,64
0424E5 11 40 00 00 0133*  	ld de,64
0424E9 DD 21 00 10 0134*  	ld ix,4096
       00          
0424EE FD 21 F0 26 0135*  	ld iy,F_UI_bj_pistol_00
       04          
0424F3 CD 9A 33 04 0136*  	call vdu_load_img_2
0424F7             0137*  
0424F7 21 10 04 00 0138*  	ld hl,BUF_UI_BJ_PISTOL_01
0424FB 01 40 00 00 0139*  	ld bc,64
0424FF 11 40 00 00 0140*  	ld de,64
042503 DD 21 00 10 0141*  	ld ix,4096
       00          
042508 FD 21 09 27 0142*  	ld iy,F_UI_bj_pistol_01
       04          
04250D CD 9A 33 04 0143*  	call vdu_load_img_2
042511             0144*  
042511 21 11 04 00 0145*  	ld hl,BUF_UI_BJ_PISTOL_02
042515 01 40 00 00 0146*  	ld bc,64
042519 11 40 00 00 0147*  	ld de,64
04251D DD 21 00 10 0148*  	ld ix,4096
       00          
042522 FD 21 22 27 0149*  	ld iy,F_UI_bj_pistol_02
       04          
042527 CD 9A 33 04 0150*  	call vdu_load_img_2
04252B             0151*  
04252B 21 12 04 00 0152*  	ld hl,BUF_UI_BJ_PISTOL_03
04252F 01 40 00 00 0153*  	ld bc,64
042533 11 40 00 00 0154*  	ld de,64
042537 DD 21 00 10 0155*  	ld ix,4096
       00          
04253C FD 21 3B 27 0156*  	ld iy,F_UI_bj_pistol_03
       04          
042541 CD 9A 33 04 0157*  	call vdu_load_img_2
042545             0158*  
042545 21 13 04 00 0159*  	ld hl,BUF_UI_BJ_PISTOL_04
042549 01 40 00 00 0160*  	ld bc,64
04254D 11 40 00 00 0161*  	ld de,64
042551 DD 21 00 10 0162*  	ld ix,4096
       00          
042556 FD 21 54 27 0163*  	ld iy,F_UI_bj_pistol_04
       04          
04255B CD 9A 33 04 0164*  	call vdu_load_img_2
04255F             0165*  
04255F C9          0166*  	ret
042560             0167*  
042560 75 69 2F 62 0168*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04257A 75 69 2F 62 0169*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
042594 75 69 2F 62 0170*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
0425AE 75 69 2F 62 0171*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
0425C8 75 69 2F 62 0172*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
0425E2 75 69 2F 62 0173*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
0425FA 75 69 2F 62 0174*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
042612 75 69 2F 62 0175*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
04262A 75 69 2F 62 0176*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
042642 75 69 2F 62 0177*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
04265A 75 69 2F 62 0178*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
042678 75 69 2F 62 0179*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
042696 75 69 2F 62 0180*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
0426B4 75 69 2F 62 0181*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
0426D2 75 69 2F 62 0182*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
0426F0 75 69 2F 62 0183*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
042709 75 69 2F 62 0184*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
042722 75 69 2F 62 0185*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
04273B 75 69 2F 62 0186*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
042754 75 69 2F 62 0187*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
04276D             0022   	; include "src/asm/sprites.inc"
04276D             0023   	include "src/asm/vdu.inc"
04276D             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04276D             0002*  ; VDU 0: Null (no operation)
04276D             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04276D             0004*  ; VDU 2: Enable “printer” §§
04276D             0005*  ; VDU 3: Disable “printer” §§
04276D             0006*  ; VDU 4: Write text at text cursor
04276D             0007*  ; VDU 5: Write text at graphics cursor
04276D             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04276D             0009*  ; VDU 7: Make a short beep (BEL)
04276D             0010*  ; VDU 8: Move cursor back one character
04276D             0011*  ; VDU 9: Move cursor forward one character
04276D             0012*  ; VDU 10: Move cursor down one line
04276D             0013*  ; VDU 11: Move cursor up one line
04276D             0014*  ; VDU 12: Clear text area (CLS)
04276D             0015*  ; VDU 13: Carriage return
04276D             0016*  ; VDU 14: Page mode On *
04276D             0017*  ; VDU 15: Page mode Off *
04276D             0018*  ; VDU 16: Clear graphics area (CLG)
04276D             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04276D             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04276D             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04276D             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04276D             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04276D             0024*  ; VDU 22, n: Select screen mode (MODE n)
04276D             0025*  ; VDU 23, n: Re-program display character / System Commands
04276D             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04276D             0027*  ; VDU 25, mode, x; y;: PLOT command
04276D             0028*  ; VDU 26: Reset graphics and text viewports **
04276D             0029*  ; VDU 27, char: Output character to screen §
04276D             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04276D             0031*  ; VDU 29, x; y;: Set graphics origin
04276D             0032*  ; VDU 30: Home cursor
04276D             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04276D             0034*  ; VDU 127: Backspace
04276D             0035*  
04276D             0036*  ; VDU 0: Null (no operation)
04276D             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04276D             0038*  ;     This may be useful for padding out a VDU command sequence,
04276D             0039*  ;     or for inserting a placeholder for a command that will be added later.
04276D             0040*  ; inputs: none
04276D             0041*  ; outputs: an empty byte somewhere in VDU
04276D             0042*  ; destroys: a
04276D             0043*  vdu_null:
04276D AF          0044*      xor a
04276E 5B D7       0045*  	rst.lil $10
042770 C9          0046*  	ret
042771             0047*  
042771             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
042771             0049*  ;     Ensures that the next character received by the VDP is sent through to
042771             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
042771             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
042771             0052*  ;     intended to be displayed on the screen. It allows characters that would
042771             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
042771             0054*  ;     If the “printer” has not been enabled then this command will just discard
042771             0055*  ;     the next byte sent to the VDP.
042771             0056*  ; inputs: a is the ascii code of the character to send
042771             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
042771             0058*  ; outputs: a character on the serial terminal connected to the USB port
042771             0059*  ;           and the same character on the screen at the current text cursor location
042771             0060*  ; QUESTION: does it also advance the text cursor?
042771             0061*  ; destroys: hl, bc
042771             0062*  vdu_char_to_printer:
042771 32 81 27 04 0063*  	ld (@arg),a
042775 21 80 27 04 0064*  	ld hl,@cmd
042779 01 02 00 00 0065*  	ld bc,@end-@cmd
04277D 5B DF       0066*  	rst.lil $18
04277F C9          0067*  	ret
042780 01          0068*  @cmd: db 1
042781 00          0069*  @arg: db 0
042782             0070*  @end:
042782             0071*  
042782             0072*  ; VDU 2: Enable “printer” §§
042782             0073*  ;     Enables the “printer”.
042782             0074*  ;     In the context of the Agon platform, the “printer” is a serial
042782             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
042782             0076*  ;     this port is used for power, but it can also be used to send and
042782             0077*  ;     receive data to and from the VDP.
042782             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
042782             0079*  ;     to the “printer” as well as to the screen. It will additionally send
042782             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
042782             0081*  ;     use the VDU 1 command.
042782             0082*  ;     The VDP will not send through other control codes to the printer,
042782             0083*  ;     and will will not send through data it receives as part of other commands.
042782             0084*  vdu_enable_printer:
042782 3E 02       0085*      ld a,2
042784 5B D7       0086*  	rst.lil $10
042786 C9          0087*  	ret
042787             0088*  
042787             0089*  ; VDU 3: Disable “printer” §§
042787             0090*  ; inputs: none
042787             0091*  ; outputs: a USB port bereft of communication with the VDP
042787             0092*  ; destroys: a
042787             0093*  vdu_disable_printer:
042787 3E 03       0094*      ld a,3
042789 5B D7       0095*  	rst.lil $10
04278B C9          0096*  	ret
04278C             0097*  
04278C             0098*  ; VDU 4: Write text at text cursor
04278C             0099*  ;     This causes text to be written at the current text cursor position.
04278C             0100*  ;     This is the default mode for text display.
04278C             0101*  ;     Text is written using the current text foreground and background colours.
04278C             0102*  ; inputs: a is the character to write to the screen
04278C             0103*  ; prerequisites: the text cursor at the intended position on screen
04278C             0104*  ; outputs: prints the character and moves text cursor right one position
04278C             0105*  ; destroys: a, hl, bc
04278C             0106*  vdu_char_to_text_cursor:
04278C 32 9C 27 04 0107*  	ld (@arg),a
042790 21 9B 27 04 0108*  	ld hl,@cmd
042794 01 02 00 00 0109*  	ld bc,@end-@cmd
042798 5B DF       0110*  	rst.lil $18
04279A C9          0111*  	ret
04279B 04          0112*  @cmd: db 4
04279C 00          0113*  @arg: db 0
04279D             0114*  @end:
04279D             0115*  
04279D             0116*  ; VDU 5: Write text at graphics cursor
04279D             0117*  ;     This causes text to be written at the current graphics cursor position.
04279D             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04279D             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04279D             0120*  ;     or for positioning text at a specific location on the screen.
04279D             0121*  ;     Characters are plotted using the current graphics foreground colour,
04279D             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04279D             0123*  ;     The character background is transparent, and will not overwrite any
04279D             0124*  ;     graphics that are already present at the character’s location.
04279D             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04279D             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04279D             0127*  ;     graphics background colour.
04279D             0128*  ; inputs: a is the character to write to the screen
04279D             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04279D             0130*  ; outputs: see the name of the function
04279D             0131*  ; destroys: a, hl, bc
04279D             0132*  vdu_char_to_gfx_cursor:
04279D 32 AD 27 04 0133*  	ld (@arg),a
0427A1 21 AC 27 04 0134*  	ld hl,@cmd
0427A5 01 02 00 00 0135*  	ld bc,@end-@cmd
0427A9 5B DF       0136*  	rst.lil $18
0427AB C9          0137*  	ret
0427AC 05          0138*  @cmd: db 5
0427AD 00          0139*  @arg: db 0
0427AE             0140*  @end:
0427AE             0141*  
0427AE             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
0427AE             0143*  ;     This enables the screen, and re-enables VDU command processing,
0427AE             0144*  ;     reversing the effect of VDU 21.
0427AE             0145*  ; inputs: none
0427AE             0146*  ; outputs: a functioning screen and VDU
0427AE             0147*  ; destroys: a
0427AE             0148*  vdu_enable_screen:
0427AE 3E 06       0149*      ld a,6
0427B0 5B D7       0150*  	rst.lil $10
0427B2 C9          0151*  	ret
0427B3             0152*  
0427B3             0153*  ; PASSES
0427B3             0154*  ; VDU 7: Make a short beep (BEL)
0427B3             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
0427B3             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
0427B3             0157*  ; inputs: none
0427B3             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
0427B3             0159*  ; destroys: a
0427B3             0160*  vdu_beep:
0427B3 3E 07       0161*      ld a,7
0427B5 5B D7       0162*  	rst.lil $10
0427B7 C9          0163*  	ret
0427B8             0164*  
0427B8             0165*  ; VDU 8: Move cursor back one character
0427B8             0166*  ;     Moves the text cursor one character in the negative “X” direction.
0427B8             0167*  ;     By default, when at the start of a line it will move to the end of
0427B8             0168*  ;     the previous line (as defined by the current text viewport).
0427B8             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
0427B8             0170*  ;     The cursor remains constrained to the current text viewport.
0427B8             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
0427B8             0172*  ;     The cursor is just moved left by one character width.
0427B8             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
0427B8             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
0427B8             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
0427B8             0176*  ;     will move the cursor to the left. This is likely to change in the future.
0427B8             0177*  vdu_cursor_back:
0427B8 3E 08       0178*      ld a,8
0427BA 5B D7       0179*  	rst.lil $10
0427BC C9          0180*  	ret
0427BD             0181*  
0427BD             0182*  ; VDU 9: Move cursor forward one character
0427BD             0183*  vdu_cursor_forward:
0427BD 3E 09       0184*      ld a,9
0427BF 5B D7       0185*  	rst.lil $10
0427C1 C9          0186*  	ret
0427C2             0187*  
0427C2             0188*  ; VDU 10: Move cursor down one line
0427C2             0189*  vdu_cursor_down:
0427C2 3E 0A       0190*      ld a,10
0427C4 5B D7       0191*  	rst.lil $10
0427C6 C9          0192*  	ret
0427C7             0193*  
0427C7             0194*  ; VDU 11: Move cursor up one line
0427C7             0195*  vdu_cursor_up:
0427C7 3E 0B       0196*      ld a,11
0427C9 5B D7       0197*  	rst.lil $10
0427CB C9          0198*  	ret
0427CC             0199*  
0427CC             0200*  ; VDU 12: Clear text area (CLS)
0427CC             0201*  vdu_cls:
0427CC 3E 0C       0202*      ld a,12
0427CE 5B D7       0203*  	rst.lil $10
0427D0 C9          0204*  	ret
0427D1             0205*  
0427D1             0206*  ; VDU 13: Carriage return
0427D1             0207*  vdu_cr:
0427D1 3E 0D       0208*      ld a,13
0427D3 5B D7       0209*  	rst.lil $10
0427D5 C9          0210*  	ret
0427D6             0211*  
0427D6             0212*  ; VDU 14: Page mode On *
0427D6             0213*  vdu_page_on:
0427D6 3E 0E       0214*      ld a,14
0427D8 5B D7       0215*  	rst.lil $10
0427DA C9          0216*  	ret
0427DB             0217*  
0427DB             0218*  ; VDU 15: Page mode Off *
0427DB             0219*  vdu_page_off:
0427DB 3E 0F       0220*      ld a,15
0427DD 5B D7       0221*  	rst.lil $10
0427DF C9          0222*  	ret
0427E0             0223*  
0427E0             0224*  ; VDU 16: Clear graphics area (CLG)
0427E0             0225*  vdu_clg:
0427E0 3E 10       0226*      ld a,16
0427E2 5B D7       0227*  	rst.lil $10
0427E4 C9          0228*  	ret
0427E5             0229*  
0427E5             0230*  ; VDU 17, colour: Define text colour (COLOUR)
0427E5             0231*  vdu_colour_text:
0427E5 32 F5 27 04 0232*  	ld (@arg),a
0427E9 21 F4 27 04 0233*  	ld hl,@cmd
0427ED 01 02 00 00 0234*  	ld bc,@end-@cmd
0427F1 5B DF       0235*  	rst.lil $18
0427F3 C9          0236*  	ret
0427F4 11          0237*  @cmd: db 17
0427F5 00          0238*  @arg: db 0
0427F6             0239*  @end:
0427F6             0240*  
0427F6             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
0427F6             0242*  ; inputs: a is the plotting mode, c is the colour
0427F6             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
0427F6             0244*  vdu_gcol_fg:
0427F6             0245*  ; This command will set both the current graphics colour,
0427F6             0246*  ; and the current graphics plotting mode.
0427F6             0247*  ; As with VDU 17 the colour number will set the foreground colour
0427F6             0248*  ; if it is in the range 0-127, or the background colour if it is
0427F6             0249*  ; in the range 128-255, and will be interpreted in the same manner.
0427F6             0250*  ; Support for different plotting modes on Agon is currently very limited.
0427F6             0251*  ; The only fully supported mode is mode 0, which is the default mode.
0427F6             0252*  ; This mode will plot the given colour at the given graphics coordinate,
0427F6             0253*  ; and will overwrite any existing graphics at that coordinate. There is
0427F6             0254*  ; very limited support for mode 4, which will invert the colour of any
0427F6             0255*  ; existing graphics at the given coordinate, but this is not fully supported
0427F6             0256*  ; and may not work as expected.
0427F6             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
0427F6             0258*  ; original VDU system, may be added in the future.
0427F6             0259*  ; This command is identical to the BASIC GCOL keyword.
0427F6 32 0B 28 04 0260*  	ld (@mode),a
0427FA 79          0261*      ld a,c
0427FB 32 0C 28 04 0262*      ld (@col),a
0427FF 21 0A 28 04 0263*  	ld hl,@cmd
042803 01 03 00 00 0264*  	ld bc,@end-@cmd
042807 5B DF       0265*  	rst.lil $18
042809 C9          0266*  	ret
04280A 12          0267*  @cmd: db 18
04280B 00          0268*  @mode: db 0
04280C 00          0269*  @col: db 0
04280D             0270*  @end:
04280D             0271*  
04280D             0272*  vdu_gcol_bg:
04280D 32 24 28 04 0273*  	ld (@mode),a
042811 79          0274*      ld a,c
042812 C6 80       0275*      add a,128
042814 32 25 28 04 0276*      ld (@col),a
042818 21 23 28 04 0277*  	ld hl,@cmd
04281C 01 03 00 00 0278*  	ld bc,@end-@cmd
042820 5B DF       0279*  	rst.lil $18
042822 C9          0280*  	ret
042823 12          0281*  @cmd:  db 18
042824 00          0282*  @mode: db 0
042825 00          0283*  @col:  db 0
042826             0284*  @end:
042826             0285*  
042826             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
042826             0287*  ;     This command sets the colour palette, by mapping a logical colour
042826             0288*  ;     to a physical colour. This is useful for defining custom colours,
042826             0289*  ;     or for redefining the default colours.
042826             0290*  ;     If the physical colour number is given as 255 then the colour will
042826             0291*  ;     be defined using the red, green, and blue values given. If the physical
042826             0292*  ;     colour number is given as any other value then the colour will be defined
042826             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
042826             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
042826             0295*  ;     must still be provided, but will be ignored.
042826             0296*  ;     The values for red, green and blue must be given in the range 0-255.
042826             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
042826             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
042826             0299*  ;     requested. The nearest colour will be chosen.
042826             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
042826             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
042826             0302*  vdu_def_log_colour:
042826 32 4B 28 04 0303*  	ld (@physical),a
04282A 47          0304*      ld b,a
04282B 32 4A 28 04 0305*      ld (@logical),a
04282F 79          0306*      ld a,c
042830 32 4C 28 04 0307*      ld (@red),a
042834 7C          0308*      ld a,h
042835 32 4D 28 04 0309*      ld (@green),a
042839 7D          0310*      ld a,l
04283A 32 4E 28 04 0311*      ld (@blue),a
04283E 21 49 28 04 0312*  	ld hl,@cmd
042842 01 06 00 00 0313*  	ld bc,@end-@cmd
042846 5B DF       0314*  	rst.lil $18
042848 C9          0315*  	ret
042849 13          0316*  @cmd: db 19
04284A 00          0317*  @logical: db 0
04284B 00          0318*  @physical: db 0
04284C 00          0319*  @red: db 0
04284D 00          0320*  @green: db 0
04284E 00          0321*  @blue: db 0
04284F             0322*  @end:
04284F             0323*  
04284F             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04284F             0325*  vdu_reset_gfx:
04284F 3E 14       0326*      ld a,20
042851 5B D7       0327*  	rst.lil $10
042853 C9          0328*  	ret
042854             0329*  
042854             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
042854             0331*  ; except for VDU 1 and VDU 6) §§
042854             0332*  vdu_disable_screen:
042854 3E 15       0333*      ld a,21
042856 5B D7       0334*  	rst.lil $10
042858 C9          0335*  	ret
042859             0336*  
042859             0337*  ; VDU 22, n: Select screen mode (MODE n)
042859             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
042859             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
042859             0340*  ; Screen modes
042859             0341*  ; Modes over 128 are double-buffered
042859             0342*  ; From Version 1.04 or greater
042859             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
042859             0344*  ; 0 	640 	480 	16 	    60hz
042859             0345*  ; * 1 	640 	480 	4 	    60hz
042859             0346*  ; 2 	640 	480 	2 	    60hz
042859             0347*  ; 3 	640 	240 	64 	    60hz
042859             0348*  ; 4 	640 	240 	16 	    60hz
042859             0349*  ; 5 	640 	240 	4 	    60hz
042859             0350*  ; 6 	640 	240 	2 	    60hz
042859             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
042859             0352*  ; 8 	320 	240 	64 	    60hz
042859             0353*  ; 9 	320 	240 	16 	    60hz
042859             0354*  ; 10 	320 	240 	4 	    60hz
042859             0355*  ; 11 	320 	240 	2 	    60hz
042859             0356*  ; 12 	320 	200 	64 	    70hz
042859             0357*  ; 13 	320 	200 	16 	    70hz
042859             0358*  ; 14 	320 	200 	4 	    70hz
042859             0359*  ; 15 	320 	200 	2 	    70hz
042859             0360*  ; 16 	800 	600 	4 	    60hz
042859             0361*  ; 17 	800 	600 	2 	    60hz
042859             0362*  ; 18 	1024 	768 	2 	    60hz
042859             0363*  ; 129 	640 	480 	4 	    60hz
042859             0364*  ; 130 	640 	480 	2 	    60hz
042859             0365*  ; 132 	640 	240 	16 	    60hz
042859             0366*  ; 133 	640 	240 	4 	    60hz
042859             0367*  ; 134 	640 	240 	2 	    60hz
042859             0368*  ; 136 	320 	240 	64 	    60hz
042859             0369*  ; 137 	320 	240 	16 	    60hz
042859             0370*  ; 138 	320 	240 	4 	    60hz
042859             0371*  ; 139 	320 	240 	2 	    60hz
042859             0372*  ; 140 	320 	200 	64 	    70hz
042859             0373*  ; 141 	320 	200 	16 	    70hz
042859             0374*  ; 142 	320 	200 	4 	    70hz
042859             0375*  ; 143 	320 	200 	2 	    70hz
042859             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
042859             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
042859             0378*  ; change to the requested mode.
042859             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
042859             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
042859             0381*  vdu_set_screen_mode:
042859 32 69 28 04 0382*  	ld (@arg),a
04285D 21 68 28 04 0383*  	ld hl,@cmd
042861 01 02 00 00 0384*  	ld bc,@end-@cmd
042865 5B DF       0385*  	rst.lil $18
042867 C9          0386*  	ret
042868 16          0387*  @cmd: db 22 ; set screen mode
042869 00          0388*  @arg: db 0  ; screen mode parameter
04286A             0389*  @end:
04286A             0390*  
04286A             0391*  ; VDU 23, n: Re-program display character / System Commands
04286A             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04286A             0393*  vdu_define_character:
04286A 32 86 28 04 0394*  	ld (@ascii),a
04286E 11 87 28 04 0395*  	ld de,@data
042872 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
042874             0397*  @loop:
042874 7E          0398*  	ld a,(hl)
042875 12          0399*  	ld (de),a
042876 23          0400*  	inc hl
042877 13          0401*  	inc de
042878 10 FA       0402*  	djnz @loop
04287A 21 85 28 04 0403*  	ld hl,@cmd
04287E 01 0A 00 00 0404*  	ld bc,@end-@cmd
042882 5B DF       0405*  	rst.lil $18
042884 C9          0406*  	ret
042885 17          0407*  @cmd:   db 23
042886 00          0408*  @ascii: db 0
042887             0409*  @data:  ds 8
04288F             0410*  @end:
04288F             0411*  
04288F             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04288F             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04288F             0414*  ; 	because we have turned off logical screen scaling
04288F             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04288F             0416*  ; outputs; nothing
04288F             0417*  ; destroys: a might make it out alive
04288F             0418*  vdu_set_gfx_viewport:
04288F ED 43 AF 28 0419*      ld (@x0),bc
       04          
042894 FD 22 B1 28 0420*      ld (@y1),iy
       04          
042899 DD 22 B3 28 0421*  	ld (@x1),ix
       04          
04289E ED 53 B5 28 0422*  	ld (@y0),de
       04          
0428A3 21 AE 28 04 0423*  	ld hl,@cmd
0428A7 01 09 00 00 0424*  	ld bc,@end-@cmd
0428AB 5B DF       0425*  	rst.lil $18
0428AD C9          0426*  	ret
0428AE 18          0427*  @cmd:   db 24 ; set graphics viewport command
0428AF 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
0428B1 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
0428B3 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
0428B5 00 00       0431*  @y0: 	dw 0x0000 ; set by de
0428B7 00          0432*  @end:   db 0x00	  ; padding
0428B8             0433*  
0428B8             0434*  ; VDU 25, mode, x; y;: PLOT command
0428B8             0435*  ; Implemented in vdu_plot.inc
0428B8             0436*  
0428B8             0437*  ; VDU 26: Reset graphics and text viewports **
0428B8             0438*  vdu_reset_txt_gfx_view:
0428B8 3E 1A       0439*      ld a,26
0428BA 5B D7       0440*  	rst.lil $10
0428BC C9          0441*  	ret
0428BD             0442*  
0428BD             0443*  ; PASSES
0428BD             0444*  ; VDU 27, char: Output character to screen §
0428BD             0445*  ; inputs: a is the ascii code of the character to draw
0428BD             0446*  vdu_draw_char:
0428BD 32 CD 28 04 0447*  	ld (@arg),a
0428C1 21 CC 28 04 0448*  	ld hl,@cmd
0428C5 01 02 00 00 0449*  	ld bc,@end-@cmd
0428C9 5B DF       0450*  	rst.lil $18
0428CB C9          0451*  	ret
0428CC 1B          0452*  @cmd: db 27
0428CD 00          0453*  @arg: db 0  ; ascii code of character to draw
0428CE             0454*  @end:
0428CE             0455*  
0428CE             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
0428CE             0457*  ; MIND THE LITTLE-ENDIANESS
0428CE             0458*  ; inputs: c=left,b=bottom,e=right,d=top
0428CE             0459*  ; outputs; nothing
0428CE             0460*  ; destroys: a might make it out alive
0428CE             0461*  vdu_set_txt_viewport:
0428CE ED 43 E4 28 0462*      ld (@lb),bc
       04          
0428D3 ED 53 E6 28 0463*  	ld (@rt),de
       04          
0428D8 21 E3 28 04 0464*  	ld hl,@cmd
0428DC 01 05 00 00 0465*  	ld bc,@end-@cmd
0428E0 5B DF       0466*  	rst.lil $18
0428E2 C9          0467*  	ret
0428E3 1C          0468*  @cmd:   db 28 ; set text viewport command
0428E4 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
0428E6 00 00       0470*  @rt: 	dw 0x0000 ; set by de
0428E8 00          0471*  @end:   db 0x00	  ; padding
0428E9             0472*  
0428E9             0473*  ; PASSES
0428E9             0474*  ; VDU 29, x; y;: Set graphics origin
0428E9             0475*  ; inputs: bc,de x,y coordinates
0428E9             0476*  vdu_set_gfx_origin:
0428E9 ED 43 FF 28 0477*      ld (@x0),bc
       04          
0428EE ED 53 01 29 0478*      ld (@y0),de
       04          
0428F3 21 FE 28 04 0479*  	ld hl,@cmd
0428F7 01 05 00 00 0480*  	ld bc,@end-@cmd
0428FB 5B DF       0481*  	rst.lil $18
0428FD C9          0482*  	ret
0428FE 1D          0483*  @cmd:	db 29
0428FF 00 00       0484*  @x0: 	dw 0
042901 00 00       0485*  @y0: 	dw 0
042903 00          0486*  @end: 	db 0 ; padding
042904             0487*  
042904             0488*  ; PASSES
042904             0489*  ; VDU 30: Home cursor
042904             0490*  vdu_home_cursor:
042904 3E 1E       0491*      ld a,30
042906 5B D7       0492*  	rst.lil $10
042908 C9          0493*  	ret
042909             0494*  
042909             0495*  ; PASSES
042909             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
042909             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
042909             0498*  vdu_move_cursor:
042909 ED 43 1A 29 0499*      ld (@x0),bc
       04          
04290E 21 19 29 04 0500*  	ld hl,@cmd
042912 01 03 00 00 0501*  	ld bc,@end-@cmd
042916 5B DF       0502*  	rst.lil $18
042918 C9          0503*  	ret
042919 1F          0504*  @cmd: 	db 31
04291A 00          0505*  @x0:	db 0
04291B 00          0506*  @y0: 	db 0
04291C 00          0507*  @end: 	db 0 ; padding
04291D             0508*  
04291D             0509*  
04291D             0510*  ; VDU 127: Backspace
04291D             0511*  vdu_bksp:
04291D 3E 7F       0512*      ld a,127
04291F 5B D7       0513*  	rst.lil $10
042921 C9          0514*  	ret
042922             0515*  
042922             0516*  ; activate a bitmap in preparation to draw it
042922             0517*  ; inputs: a holding the bitmap index
042922             0518*  vdu_bmp_select:
042922 32 34 29 04 0519*  	ld (@bmp),a
042926 21 31 29 04 0520*  	ld hl,@cmd
04292A 01 04 00 00 0521*  	ld bc,@end-@cmd
04292E 5B DF       0522*  	rst.lil $18
042930 C9          0523*  	ret
042931 17 1B 00    0524*  @cmd: db 23,27,0
042934 00          0525*  @bmp: db 0
042935             0526*  @end:
042935             0527*  
042935             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042935             0529*  ; inputs: hl=bufferId
042935             0530*  vdu_buff_select:
042935 22 47 29 04 0531*  	ld (@bufferId),hl
042939 21 44 29 04 0532*  	ld hl,@cmd
04293D 01 05 00 00 0533*  	ld bc,@end-@cmd
042941 5B DF       0534*  	rst.lil $18
042943 C9          0535*  	ret
042944 17 1B 20    0536*  @cmd: db 23,27,0x20
042947 00 00       0537*  @bufferId: dw 0x0000
042949 00          0538*  @end: db 0x00 ; padding
04294A             0539*  
04294A             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04294A             0541*  ; inputs: a=format; bc=width; de=height
04294A             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04294A             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04294A             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04294A             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04294A             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04294A             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04294A             0548*  vdu_bmp_create:
04294A ED 43 66 29 0549*      ld (@width),bc
       04          
04294F ED 53 68 29 0550*      ld (@height),de
       04          
042954 32 6A 29 04 0551*      ld (@fmt),a
042958 21 63 29 04 0552*  	ld hl,@cmd
04295C 01 08 00 00 0553*  	ld bc,@end-@cmd
042960 5B DF       0554*  	rst.lil $18
042962 C9          0555*  	ret
042963 17 1B 21    0556*  @cmd:       db 23,27,0x21
042966 00 00       0557*  @width:     dw 0x0000
042968 00 00       0558*  @height:    dw 0x0000
04296A 00          0559*  @fmt:       db 0x00
04296B             0560*  @end:
04296B             0561*  
04296B             0562*  ; Draw a bitmap on the screen
04296B             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04296B             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04296B             0565*  vdu_bmp_draw:
04296B ED 43 83 29 0566*      ld (@x0),bc
       04          
042970 ED 53 85 29 0567*      ld (@y0),de
       04          
042975 21 80 29 04 0568*  	ld hl,@cmd
042979 01 07 00 00 0569*  	ld bc,@end-@cmd
04297D 5B DF       0570*  	rst.lil $18
04297F C9          0571*  	ret
042980 17 1B 03    0572*  @cmd: db 23,27,3
042983 00 00       0573*  @x0:  dw 0x0000
042985 00 00       0574*  @y0:  dw 0x0000
042987 00          0575*  @end: db 0x00 ; padding
042988             0576*  
042988             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
042988             0578*  ; inputs: a is scaling mode, 1=on, 0=off
042988             0579*  ; note: default setting on boot is scaling ON
042988             0580*  vdu_set_scaling:
042988 32 9A 29 04 0581*  	ld (@arg),a
04298C 21 97 29 04 0582*  	ld hl,@cmd
042990 01 04 00 00 0583*  	ld bc,@end-@cmd
042994 5B DF       0584*  	rst.lil $18
042996 C9          0585*  	ret
042997 17 00 C0    0586*  @cmd: db 23,0,0xC0
04299A 00          0587*  @arg: db 0  ; scaling on/off
04299B             0588*  @end:
04299B             0589*  
04299B             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04299B             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04299B             0592*  ; 	(all modes).
04299B             0593*  
04299B             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04299B             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04299B             0596*  ; 	mode is not double-buffered then this command will wait for the next
04299B             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04299B             0598*  ; 	screen with the vertical refresh rate of the monitor.
04299B             0599*  
04299B             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04299B             0601*  ; 	as it will prevent tearing of the screen.
04299B             0602*  ; inputs: none
04299B             0603*  ; outputs: none
04299B             0604*  ; destroys: hl, bc
04299B             0605*  vdu_flip:
04299B 21 A6 29 04 0606*  	ld hl,@cmd
04299F 01 03 00 00 0607*  	ld bc,@end-@cmd
0429A3 5B DF       0608*  	rst.lil $18
0429A5 C9          0609*  	ret
0429A6 17 00 C3    0610*  @cmd: db 23,0,0xC3
0429A9             0611*  @end:
0429A9             0612*  
0429A9             0613*  ; Command 64: Compress a buffer
0429A9             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
0429A9             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
0429A9             0616*  
0429A9             0617*  
0429A9             0618*  ; Command 65: Decompress a buffer
0429A9             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
0429A9             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
0429A9             0621*  ; inputs: hl=sourceBufferId/targetBufferId
0429A9             0622*  vdu_decompress_buffer:
0429A9 22 C5 29 04 0623*  	ld (@targetBufferId),hl
0429AD 22 C8 29 04 0624*  	ld (@sourceBufferId),hl
0429B1 3E 41       0625*  	ld a,65
0429B3 32 C7 29 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
0429B7 21 C2 29 04 0627*  	ld hl,@cmd
0429BB 01 08 00 00 0628*  	ld bc,@end-@cmd
0429BF 5B DF       0629*  	rst.lil $18
0429C1 C9          0630*  	ret
0429C2 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
0429C5 00 00       0632*  @targetBufferId: dw 0x0000
0429C7 41          0633*  @cmd1:	db 65
0429C8 00 00       0634*  @sourceBufferId: dw 0x0000
0429CA 00          0635*  @end: 	db 0x00 ; padding
0429CB             0636*  
0429CB             0637*  ; Command 65: Decompress a buffer
0429CB             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
0429CB             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
0429CB             0640*  ; inputs: hl=sourceBufferId/targetBufferId
0429CB             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
0429CB             0642*  vdu_decompress_buffer_different:
0429CB 22 EB 29 04 0643*  	ld (@targetBufferId),hl
0429CF 21 FF 7F 00 0644*      ld hl,0x7FFF
0429D3 22 EE 29 04 0645*  	ld (@sourceBufferId),hl
0429D7 3E 41       0646*  	ld a,65
0429D9 32 ED 29 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
0429DD 21 E8 29 04 0648*  	ld hl,@cmd
0429E1 01 08 00 00 0649*  	ld bc,@end-@cmd
0429E5 5B DF       0650*  	rst.lil $18
0429E7 C9          0651*  	ret
0429E8 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
0429EB 00 00       0653*  @targetBufferId: dw 0x0000
0429ED 41          0654*  @cmd1:	db 65
0429EE 00 00       0655*  @sourceBufferId: dw 0x0000
0429F0 00          0656*  @end: 	db 0x00 ; padding
0429F1             0657*  
0429F1             0658*  ; #### from vdp.inc ####
0429F1             0659*  
0429F1             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
0429F1             0661*  ; VDU 23, 7: Scrolling
0429F1             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
0429F1             0663*  ; inputs: a, extent; l, direction; h; speed
0429F1             0664*  vdu_scroll_down:
0429F1 32 06 2A 04 0665*  	ld (@extent),a
0429F5 22 07 2A 04 0666*  	ld (@dir),hl ; implicitly populates @speed
0429F9 21 04 2A 04 0667*  	ld hl,@cmd
0429FD 01 05 00 00 0668*  	ld bc,@end-@cmd
042A01 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
042A03 C9          0670*  	ret
042A04 17 07       0671*  @cmd:       db 23,7
042A06 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
042A07 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
042A08 00          0674*  @speed:     db 0x00 ; pixels
042A09 00          0675*  @end:		db 0x00 ; padding
042A0A             0676*  
042A0A             0677*  cursor_on:
042A0A 21 15 2A 04 0678*  	ld hl,@cmd
042A0E 01 03 00 00 0679*  	ld bc,@end-@cmd
042A12 5B DF       0680*  	rst.lil $18
042A14 C9          0681*  	ret
042A15             0682*  @cmd:
042A15 17 01 01    0683*  	db 23,1,1
042A18             0684*  @end:
042A18             0685*  
042A18             0686*  cursor_off:
042A18 21 23 2A 04 0687*  	ld hl,@cmd
042A1C 01 03 00 00 0688*  	ld bc,@end-@cmd
042A20 5B DF       0689*  	rst.lil $18
042A22 C9          0690*  	ret
042A23             0691*  @cmd:
042A23 17 01 00    0692*  	db 23,1,0
042A26             0693*  @end:
042A26             0694*  
042A26 DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
042A28             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
042A28 3E 08       0001*M 			LD	A, function
042A2A 5B CF       0002*M 			RST.LIL	08h
042A2C DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
042A2F DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
042A32 28 FB       0699*  			JR	Z, @wait
042A34 DD E1       0700*  			POP	IX
042A36 C9          0701*  			RET
042A37             0702*  
042A37             0703*  ; #### from vdu_bmp.inc ####
042A37             0704*  ; =========================================================================
042A37             0705*  ; Bitmaps
042A37             0706*  ; -------------------------------------------------------------------------
042A37             0707*  ; VDU 23, 27, 0, n: Select bitmap n
042A37             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
042A37             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
042A37             0710*  
042A37             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
042A37             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
042A37             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
042A37             0714*  ; typically "move" style plot commands are used to define the rectangle.
042A37             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
042A37             0716*  ; inputs: hl; target bufferId
042A37             0717*  ; all the following are in 16.8 fixed point format
042A37             0718*  ;   ub.c; top-left x coordinate
042A37             0719*  ;   ud.e; top-left y coordinate
042A37             0720*  ;   ui.x; width
042A37             0721*  ;   ui.y; height
042A37             0722*  vdu_buff_screen_capture168:
042A37 ED 53 6E 2A 0723*          ld (@y0-1),de
       04          
042A3C ED 43 6C 2A 0724*          ld (@x0-1),bc
       04          
042A41 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
042A43 32 6C 2A 04 0726*          ld (@x0-1),a
042A47             0727*  
042A47 DD 22 73 2A 0728*          ld (@x1),ix
       04          
042A4C FD 22 75 2A 0729*          ld (@y1),iy
       04          
042A51 3E 17       0730*          ld a,23
042A53 32 77 2A 04 0731*          ld (@y1+2),a
042A57             0732*  
042A57 22 7A 2A 04 0733*          ld (@bufId),hl
042A5B AF          0734*          xor a
042A5C 32 7C 2A 04 0735*          ld (@bufId+2),a
042A60             0736*  
042A60 21 6B 2A 04 0737*          ld hl,@begin
042A64 01 13 00 00 0738*          ld bc,@end-@begin
042A68 5B DF       0739*          rst.lil $18
042A6A C9          0740*          ret
042A6B             0741*  @begin:
042A6B             0742*  ; absolute move gfx cursor to top-left screen coordinate
042A6B             0743*  ; VDU 25, mode, x; y;: PLOT command
042A6B 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
042A6D 40 00       0745*  @x0: 	dw 64
042A6F 40 00       0746*  @y0: 	dw 64
042A71             0747*  ; relative move gfx cursor to bottom-right screen coordinate
042A71             0748*  ; VDU 25, mode, x; y;: PLOT command
042A71 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
042A73 0F 00       0750*  @x1: 	dw 15
042A75 0F 00       0751*  @y1: 	dw 15
042A77             0752*  ; now the main event
042A77             0753*  ; VDU 23, 27, &21, bitmapId; 0;
042A77 17 1B 21    0754*          db 23,27,0x21
042A7A 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
042A7E             0756*  @end: ; no padding required
042A7E             0757*  
042A7E             0758*  vdu_buff_screen_capture_full:
042A7E 21 89 2A 04 0759*          ld hl,@begin
042A82 01 13 00 00 0760*          ld bc,@end-@begin
042A86 5B DF       0761*          rst.lil $18
042A88 C9          0762*          ret
042A89             0763*  @begin:
042A89             0764*  ; absolute move gfx cursor to top-left screen coordinate
042A89             0765*  ; VDU 25, mode, x; y;: PLOT command
042A89 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
042A8B 00 00       0767*  @x0: 	dw 0
042A8D 00 00       0768*  @y0: 	dw 0
042A8F             0769*  ; relative move gfx cursor to bottom-right screen coordinate
042A8F             0770*  ; VDU 25, mode, x; y;: PLOT command
042A8F 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
042A91 3F 01       0772*  @x1: 	dw 319
042A93 EF 00       0773*  @y1: 	dw 239
042A95             0774*  ; now the main event
042A95             0775*  ; VDU 23, 27, &21, bitmapId; 0;
042A95 17 1B 21    0776*          db 23,27,0x21
042A98 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
042A9C             0778*  @end: ; no padding required
042A9C             0779*  
042A9C             0780*  vdu_buff_screen_paste_full:
042A9C 21 A7 2A 04 0781*          ld hl,@begin
042AA0 01 0B 00 00 0782*          ld bc,@end-@begin
042AA4 5B DF       0783*          rst.lil $18
042AA6 C9          0784*          ret
042AA7             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042AA7 17 1B 20    0786*  @begin:    db 23,27,0x20
042AAA 00 20       0787*  @bufferId: dw 0x2000
042AAC             0788*  ; VDU 25, mode, x; y;: PLOT command
042AAC 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
042AAE 00 00 00 00 0790*             dw 0x0000,0x0000
042AB2             0791*  @end: ; no padding required
042AB2             0792*  
042AB2             0793*  vdu_buff_screen_capture_tiles:
042AB2 21 BD 2A 04 0794*          ld hl,@begin
042AB6 01 13 00 00 0795*          ld bc,@end-@begin
042ABA 5B DF       0796*          rst.lil $18
042ABC C9          0797*          ret
042ABD             0798*  @begin:
042ABD             0799*  ; absolute move gfx cursor to top-left screen coordinate
042ABD             0800*  ; VDU 25, mode, x; y;: PLOT command
042ABD 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
042ABF 00 00       0802*  @x0: 	dw 0
042AC1 00 00       0803*  @y0: 	dw 0
042AC3             0804*  ; relative move gfx cursor to bottom-right screen coordinate
042AC3             0805*  ; VDU 25, mode, x; y;: PLOT command
042AC3 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
042AC5 FF 00       0807*  @x1: 	dw 319-64
042AC7 EF 00       0808*  @y1: 	dw 239
042AC9             0809*  ; now the main event
042AC9             0810*  ; VDU 23, 27, &21, bitmapId; 0;
042AC9 17 1B 21    0811*          db 23,27,0x21
042ACC 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
042AD0             0813*  @end: ; no padding required
042AD0             0814*  
042AD0             0815*  vdu_buff_screen_paste_tiles:
042AD0 21 DB 2A 04 0816*          ld hl,@begin
042AD4 01 0B 00 00 0817*          ld bc,@end-@begin
042AD8 5B DF       0818*          rst.lil $18
042ADA C9          0819*          ret
042ADB             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042ADB 17 1B 20    0821*  @begin:    db 23,27,0x20
042ADE 00 20       0822*  @bufferId: dw 0x2000
042AE0             0823*  ; VDU 25, mode, x; y;: PLOT command
042AE0 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
042AE2 00 00 01 00 0825*             dw 0x0000,0x0001
042AE6             0826*  @end: ; no padding required
042AE6             0827*  
042AE6             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
042AE6             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
042AE6             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
042AE6             0831*  ; Value	Meaning
042AE6             0832*  ; 0	RGBA8888 (4-bytes per pixel)
042AE6             0833*  ; 1	RGBA2222 (1-bytes per pixel)
042AE6             0834*  ; 2	Mono/Mask (1-bit per pixel)
042AE6             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
042AE6             0836*  ;     They have some significant limitations, and are not intended for general use.
042AE6             0837*  
042AE6             0838*  ; =========================================================================
042AE6             0839*  ; Sprites
042AE6             0840*  ; -------------------------------------------------------------------------
042AE6             0841*  ; VDU 23, 27, 4, n: Select sprite n
042AE6             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
042AE6             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042AE6             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042AE6             0845*  ; VDU 23, 27, 7, n: Activate n sprites
042AE6             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
042AE6             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
042AE6             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042AE6             0849*  ; VDU 23, 27, 11: Show current sprite
042AE6             0850*  ; VDU 23, 27, 12: Hide current sprite
042AE6             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042AE6             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042AE6             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
042AE6             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042AE6             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042AE6             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042AE6             0857*  
042AE6             0858*  ; =========================================================================
042AE6             0859*  ; Mouse cursor
042AE6             0860*  ; -------------------------------------------------------------------------
042AE6             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
042AE6             0862*  
042AE6             0863*  ; #### from vdu_plot.inc ####
042AE6             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042AE6             0865*  ; PLOT code 	(Decimal) 	Effect
042AE6             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
042AE6             0867*  plot_sl_both: equ 0x00
042AE6             0868*  
042AE6             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
042AE6             0870*  plot_sl_first: equ 0x08
042AE6             0871*  
042AE6             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
042AE6             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
042AE6             0874*  
042AE6             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
042AE6             0876*  plot_sl_last: equ 0x20
042AE6             0877*  
042AE6             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
042AE6             0879*  plot_sl_none: equ 0x28
042AE6             0880*  
042AE6             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
042AE6             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
042AE6             0883*  
042AE6             0884*  ; &40-&47 	64-71 	Point plot
042AE6             0885*  plot_pt: equ 0x40
042AE6             0886*  
042AE6             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
042AE6             0888*  plot_lf_lr_non_bg: equ 0x48
042AE6             0889*  
042AE6             0890*  ; &50-&57 	80-87 	Triangle fill
042AE6             0891*  plot_tf: equ 0x50
042AE6             0892*  
042AE6             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
042AE6             0894*  plot_lf_r_bg: equ 0x58
042AE6             0895*  
042AE6             0896*  ; &60-&67 	96-103 	Rectangle fill
042AE6             0897*  plot_rf: equ 0x60
042AE6             0898*  
042AE6             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
042AE6             0900*  plot_lf_lr_fg: equ 0x60
042AE6             0901*  
042AE6             0902*  ; &70-&77 	112-119 	Parallelogram fill
042AE6             0903*  plot_pf: equ 0x70
042AE6             0904*  
042AE6             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
042AE6             0906*  plot_lf_r_non_fg: equ 0x78
042AE6             0907*  
042AE6             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
042AE6             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
042AE6             0910*  
042AE6             0911*  ; &90-&97 	144-151 	Circle outline
042AE6             0912*  plot_co: equ 0x90
042AE6             0913*  
042AE6             0914*  ; &98-&9F 	152-159 	Circle fill
042AE6             0915*  plot_cf: equ 0x98
042AE6             0916*  
042AE6             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
042AE6             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
042AE6             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
042AE6             0920*  
042AE6             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
042AE6             0922*  plot_rcm: equ 0xB8
042AE6             0923*  
042AE6             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
042AE6             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
042AE6             0926*  ; &D0-&D7 	208-215 	Not defined
042AE6             0927*  ; &D8-&DF 	216-223 	Not defined
042AE6             0928*  ; &E0-&E7 	224-231 	Not defined
042AE6             0929*  
042AE6             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
042AE6             0931*  plot_bmp: equ 0xE8
042AE6             0932*  
042AE6             0933*  ; &F0-&F7 	240-247 	Not defined
042AE6             0934*  ; &F8-&FF 	248-255 	Not defined
042AE6             0935*  
042AE6             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
042AE6             0937*  ; Agon Console8 VDP 2.2.0
042AE6             0938*  
042AE6             0939*  ; Within each group of eight plot codes, the effects are as follows:
042AE6             0940*  ; Plot code 	Effect
042AE6             0941*  ; 0 	Move relative
042AE6             0942*  mv_rel: equ 0
042AE6             0943*  
042AE6             0944*  ; 1 	Plot relative in current foreground colour
042AE6             0945*  dr_rel_fg: equ 1
042AE6             0946*  
042AE6             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
042AE6             0948*  ; 3 	Plot relative in current background colour
042AE6             0949*  dr_rel_bg: equ 3
042AE6             0950*  
042AE6             0951*  ; 4 	Move absolute
042AE6             0952*  mv_abs: equ 4
042AE6             0953*  
042AE6             0954*  ; 5 	Plot absolute in current foreground colour
042AE6             0955*  dr_abs_fg: equ 5
042AE6             0956*  
042AE6             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
042AE6             0958*  ; 7 	Plot absolute in current background colour
042AE6             0959*  dr_abs_bg: equ 7
042AE6             0960*  
042AE6             0961*  ; Codes 0-3 use the position data provided as part of the command
042AE6             0962*  ; as a relative position, adding the position given to the current
042AE6             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
042AE6             0964*  ; as part of the command as an absolute position, setting the current
042AE6             0965*  ; graphical cursor position to the position given.
042AE6             0966*  
042AE6             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
042AE6             0968*  ; current pixel colour. These operations cannot currently be supported
042AE6             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
042AE6             0970*  ; supported. Support for these codes may be added in a future version
042AE6             0971*  ; of the VDP firmware.
042AE6             0972*  
042AE6             0973*  ; 16 colour palette constants
042AE6             0974*  c_black: equ 0
042AE6             0975*  c_red_dk: equ 1
042AE6             0976*  c_green_dk: equ 2
042AE6             0977*  c_yellow_dk: equ 3
042AE6             0978*  c_blue_dk: equ 4
042AE6             0979*  c_magenta_dk: equ 5
042AE6             0980*  c_cyan_dk: equ 6
042AE6             0981*  c_grey: equ 7
042AE6             0982*  c_grey_dk: equ 8
042AE6             0983*  c_red: equ 9
042AE6             0984*  c_green: equ 10
042AE6             0985*  c_yellow: equ 11
042AE6             0986*  c_blue: equ 12
042AE6             0987*  c_magenta: equ 13
042AE6             0988*  c_cyan: equ 14
042AE6             0989*  c_white: equ 15
042AE6             0990*  
042AE6             0991*  ; VDU 25, mode, x; y;: PLOT command
042AE6             0992*  ; inputs: a=mode, bc=x0, de=y0
042AE6             0993*  vdu_plot:
042AE6 32 00 2B 04 0994*      ld (@mode),a
042AEA ED 43 01 2B 0995*      ld (@x0),bc
       04          
042AEF ED 53 03 2B 0996*      ld (@y0),de
       04          
042AF4 21 FF 2A 04 0997*  	ld hl,@cmd
042AF8 01 06 00 00 0998*  	ld bc,@end-@cmd
042AFC 5B DF       0999*  	rst.lil $18
042AFE C9          1000*  	ret
042AFF 19          1001*  @cmd:   db 25
042B00 00          1002*  @mode:  db 0
042B01 00 00       1003*  @x0: 	dw 0
042B03 00 00       1004*  @y0: 	dw 0
042B05 00          1005*  @end:   db 0 ; extra byte to soak up deu
042B06             1006*  
042B06             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042B06             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
042B06             1009*  ; VDU 25, mode, x; y;: PLOT command
042B06             1010*  ; inputs: bc=x0, de=y0
042B06             1011*  ; prerequisites: vdu_buff_select
042B06             1012*  vdu_plot_bmp:
042B06 ED 43 1D 2B 1013*      ld (@x0),bc
       04          
042B0B ED 53 1F 2B 1014*      ld (@y0),de
       04          
042B10 21 1B 2B 04 1015*  	ld hl,@cmd
042B14 01 06 00 00 1016*  	ld bc,@end-@cmd
042B18 5B DF       1017*  	rst.lil $18
042B1A C9          1018*  	ret
042B1B 19          1019*  @cmd:   db 25
042B1C ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
042B1D 00 00       1021*  @x0: 	dw 0x0000
042B1F 00 00       1022*  @y0: 	dw 0x0000
042B21 00          1023*  @end:   db 0x00 ; padding
042B22             1024*  
042B22             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042B22             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
042B22             1027*  ; VDU 25, mode, x; y;: PLOT command
042B22             1028*  ; inputs: bc=x0, de=y0
042B22             1029*  ; USING 16.8 FIXED POINT COORDINATES
042B22             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042B22             1031*  ;   the fractional portiion of the inputs are truncated
042B22             1032*  ;   leaving only the 16-bit integer portion
042B22             1033*  ; prerequisites: vdu_buff_select
042B22             1034*  vdu_plot_bmp168:
042B22             1035*  ; populate in the reverse of normal to keep the
042B22             1036*  ; inputs from stomping on each other
042B22 ED 53 40 2B 1037*      ld (@y0-1),de
       04          
042B27 ED 43 3E 2B 1038*      ld (@x0-1),bc
       04          
042B2C 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
042B2E 32 3E 2B 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
042B32 21 3D 2B 04 1041*  	ld hl,@cmd
042B36 01 06 00 00 1042*  	ld bc,@end-@cmd
042B3A 5B DF       1043*  	rst.lil $18
042B3C C9          1044*  	ret
042B3D 19          1045*  @cmd:   db 25
042B3E ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
042B3F 00 00       1047*  @x0: 	dw 0x0000
042B41 00 00       1048*  @y0: 	dw 0x0000
042B43             1049*  @end:  ; no padding required b/c we shifted de right
042B43             1050*  
042B43             1051*  ; draw a filled rectangle
042B43             1052*  vdu_plot_rf:
042B43 ED 43 6A 2B 1053*      ld (@x0),bc
       04          
042B48 ED 53 6C 2B 1054*      ld (@y0),de
       04          
042B4D DD 22 70 2B 1055*      ld (@x1),ix
       04          
042B52 FD 22 72 2B 1056*      ld (@y1),iy
       04          
042B57 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
042B59 32 6E 2B 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
042B5D 21 68 2B 04 1059*  	ld hl,@cmd0
042B61 01 0C 00 00 1060*  	ld bc,@end-@cmd0
042B65 5B DF       1061*  	rst.lil $18
042B67 C9          1062*      ret
042B68 19          1063*  @cmd0:  db 25 ; plot
042B69 04          1064*  @arg0:  db plot_sl_both+mv_abs
042B6A 00 00       1065*  @x0:    dw 0x0000
042B6C 00 00       1066*  @y0:    dw 0x0000
042B6E 19          1067*  @cmd1:  db 25 ; plot
042B6F 65          1068*  @arg1:  db plot_rf+dr_abs_fg
042B70 00 00       1069*  @x1:    dw 0x0000
042B72 00 00       1070*  @y1:    dw 0x0000
042B74 00          1071*  @end:   db 0x00 ; padding
042B75             1072*  
042B75             1073*  ; draw a filled circle
042B75             1074*  vdu_plot_cf:
042B75 ED 43 9C 2B 1075*      ld (@x0),bc
       04          
042B7A ED 53 9E 2B 1076*      ld (@y0),de
       04          
042B7F DD 22 A2 2B 1077*      ld (@x1),ix
       04          
042B84 FD 22 A4 2B 1078*      ld (@y1),iy
       04          
042B89 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
042B8B 32 A0 2B 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
042B8F 21 9A 2B 04 1081*  	ld hl,@cmd0
042B93 01 0C 00 00 1082*  	ld bc,@end-@cmd0
042B97 5B DF       1083*  	rst.lil $18
042B99 C9          1084*      ret
042B9A 19          1085*  @cmd0:  db 25 ; plot
042B9B 04          1086*  @arg0:  db plot_sl_both+mv_abs
042B9C 00 00       1087*  @x0:    dw 0x0000
042B9E 00 00       1088*  @y0:    dw 0x0000
042BA0 19          1089*  @cmd1:  db 25 ; plot
042BA1 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
042BA2 00 00       1091*  @x1:    dw 0x0000
042BA4 00 00       1092*  @y1:    dw 0x0000
042BA6 00          1093*  @end:   db 0x00 ; padding
042BA7             1094*  
042BA7             1095*  ; #### from vdu_sprites.inc ####
042BA7             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
042BA7             1097*  ; the VDP can support up to 256 sprites. They must be defined
042BA7             1098*  ; contiguously, and so the first sprite is sprite 0.
042BA7             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
042BA7             1100*  ; Once a selection of sprites have been defined, you can activate
042BA7             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
042BA7             1102*  ; of sprites to activate. This will activate the first n sprites,
042BA7             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
042BA7             1104*  
042BA7             1105*  ; A single sprite can have multiple "frames", referring to
042BA7             1106*  ; different bitmaps.
042BA7             1107*  ; (These bitmaps do not need to be the same size.)
042BA7             1108*  ; This allows a sprite to include an animation sequence,
042BA7             1109*  ; which can be stepped through one frame at a time, or picked
042BA7             1110*  ; in any order.
042BA7             1111*  
042BA7             1112*  ; Any format of bitmap can be used as a sprite frame. It should
042BA7             1113*  ; be noted however that "native" format bitmaps are not
042BA7             1114*  ; recommended for use as sprite frames, as they cannot get
042BA7             1115*  ; erased from the screen. (As noted above, the "native" bitmap
042BA7             1116*  ; format is not really intended for general use.) This is part
042BA7             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
042BA7             1118*  ; screen are now stored in RGBA2222 format.
042BA7             1119*  
042BA7             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
042BA7             1121*  ; and then later shown again.
042BA7             1122*  
042BA7             1123*  ; Moving sprites around the screen is done by changing the
042BA7             1124*  ; position of the sprite. This can be done either by setting
042BA7             1125*  ; the absolute position of the sprite, or by moving the sprite
042BA7             1126*  ; by a given number of pixels. (Sprites are positioned using
042BA7             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
042BA7             1128*  ; In the current sprite system, sprites will not update their
042BA7             1129*  ; position on-screen until either another drawing operation is
042BA7             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
042BA7             1131*  
042BA7             1132*  ; Here are the sprite commands:
042BA7             1133*  ;
042BA7             1134*  ; VDU 23, 27, 4,  n: Select sprite n
042BA7             1135*  ; inputs: a is the 8-bit sprite id
042BA7             1136*  ; vdu_sprite_select:
042BA7             1137*  
042BA7             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
042BA7             1139*  ; inputs: none
042BA7             1140*  ; prerequisites: vdu_sprite_select
042BA7             1141*  ; vdu_sprite_clear_frames:
042BA7             1142*  
042BA7             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042BA7             1144*  ; inputs: a is the 8-bit bitmap number
042BA7             1145*  ; prerequisites: vdu_sprite_select
042BA7             1146*  ; vdu_sprite_add_bmp:
042BA7             1147*  
042BA7             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
042BA7             1149*  ; inputs: a is the number of sprites to activate
042BA7             1150*  ; vdu_sprite_activate:
042BA7             1151*  
042BA7             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
042BA7             1153*  ; inputs: none
042BA7             1154*  ; prerequisites: vdu_sprite_select
042BA7             1155*  ; vdu_sprite_next_frame:
042BA7             1156*  
042BA7             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
042BA7             1158*  ; inputs: none
042BA7             1159*  ; prerequisites: vdu_sprite_select
042BA7             1160*  ; vdu_sprite_prev_frame:
042BA7             1161*  
042BA7             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042BA7             1163*  ; inputs: a is frame number to select
042BA7             1164*  ; prerequisites: vdu_sprite_select
042BA7             1165*  ; vdu_sprite_select_frame:
042BA7             1166*  
042BA7             1167*  ; VDU 23, 27, 11: Show current sprite
042BA7             1168*  ; inputs: none
042BA7             1169*  ; prerequisites: vdu_sprite_select
042BA7             1170*  ; vdu_sprite_show:
042BA7             1171*  
042BA7             1172*  ; VDU 23, 27, 12: Hide current sprite
042BA7             1173*  ; inputs: none
042BA7             1174*  ; prerequisites: vdu_sprite_select
042BA7             1175*  ; vdu_sprite_hide:
042BA7             1176*  
042BA7             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042BA7             1178*  ; inputs: bc is x coordinate, de is y coordinate
042BA7             1179*  ; prerequisites: vdu_sprite_select
042BA7             1180*  ; vdu_sprite_move_abs:
042BA7             1181*  ;
042BA7             1182*  ; USING 16.8 FIXED POINT COORDINATES
042BA7             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042BA7             1184*  ;   the fractional portiion of the inputs are truncated
042BA7             1185*  ;   leaving only the 16-bit integer portion
042BA7             1186*  ; prerequisites: vdu_sprite_select
042BA7             1187*  ; vdu_sprite_move_abs168:
042BA7             1188*  
042BA7             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042BA7             1190*  ; inputs: bc is x coordinate, de is y coordinate
042BA7             1191*  ; prerequisites: vdu_sprite_select
042BA7             1192*  ; vdu_sprite_move_rel:
042BA7             1193*  ;
042BA7             1194*  ; USING 16.8 FIXED POINT COORDINATES
042BA7             1195*  ; inputs: ub.c is dx, ud.e is dy
042BA7             1196*  ;   the fractional portiion of the inputs are truncated
042BA7             1197*  ;   leaving only the 16-bit integer portion
042BA7             1198*  ; prerequisites: vdu_sprite_select
042BA7             1199*  ; vdu_sprite_move_rel168:
042BA7             1200*  
042BA7             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
042BA7             1202*  ; inputs: none
042BA7             1203*  ; vdu_sprite_update:
042BA7             1204*  
042BA7             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042BA7             1206*  ; inputs: none
042BA7             1207*  ; vdu_sprite_bmp_reset:
042BA7             1208*  
042BA7             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042BA7             1210*  ; inputs: none
042BA7             1211*  ; vdu_sprite_reset:
042BA7             1212*  
042BA7             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042BA7             1214*  ; inputs: a is the GCOL paint mode
042BA7             1215*  ; prerequisites: vdu_sprite_select
042BA7             1216*  ; vdu_sprite_set_gcol:
042BA7             1217*  
042BA7             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042BA7             1219*  ; inputs: hl=bufferId
042BA7             1220*  ; prerequisites: vdu_sprite_select
042BA7             1221*  ; vdu_sprite_add_buff:
042BA7             1222*  
042BA7             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
042BA7             1224*  
042BA7             1225*  ; VDU 23, 27, 4, n: Select sprite n
042BA7             1226*  ; inputs: a is the 8-bit sprite id
042BA7             1227*  vdu_sprite_select:
042BA7 32 B9 2B 04 1228*      ld (@sprite),a
042BAB 21 B6 2B 04 1229*      ld hl,@cmd
042BAF 01 04 00 00 1230*      ld bc,@end-@cmd
042BB3 5B DF       1231*      rst.lil $18
042BB5 C9          1232*      ret
042BB6 17 1B 04    1233*  @cmd:    db 23,27,4
042BB9 00          1234*  @sprite: db 0x00
042BBA             1235*  @end:
042BBA             1236*  
042BBA             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
042BBA             1238*  ; inputs: none
042BBA             1239*  ; prerequisites: vdu_sprite_select
042BBA             1240*  vdu_sprite_clear_frames:
042BBA 21 C5 2B 04 1241*      ld hl,@cmd
042BBE 01 03 00 00 1242*      ld bc,@end-@cmd
042BC2 5B DF       1243*      rst.lil $18
042BC4 C9          1244*      ret
042BC5 17 1B 05    1245*  @cmd: db 23,27,5
042BC8             1246*  @end:
042BC8             1247*  
042BC8             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042BC8             1249*  ; inputs: a is the 8-bit bitmap number
042BC8             1250*  ; prerequisites: vdu_sprite_select
042BC8             1251*  vdu_sprite_add_bmp:
042BC8 32 DA 2B 04 1252*      ld (@bmp),a
042BCC 21 D7 2B 04 1253*      ld hl,@cmd
042BD0 01 04 00 00 1254*      ld bc,@end-@cmd
042BD4 5B DF       1255*      rst.lil $18
042BD6 C9          1256*      ret
042BD7 17 1B 06    1257*  @cmd: db 23,27,6
042BDA 00          1258*  @bmp: db 0x00
042BDB             1259*  @end:
042BDB             1260*  
042BDB             1261*  ; VDU 23, 27, 7, n: Activate n sprites
042BDB             1262*  ; inputs: a is the number of sprites to activate
042BDB             1263*  vdu_sprite_activate:
042BDB 32 ED 2B 04 1264*      ld (@num),a
042BDF 21 EA 2B 04 1265*      ld hl,@cmd
042BE3 01 04 00 00 1266*      ld bc,@end-@cmd
042BE7 5B DF       1267*      rst.lil $18
042BE9 C9          1268*      ret
042BEA 17 1B 07    1269*  @cmd: db 23,27,7
042BED 00          1270*  @num: db 0x00
042BEE             1271*  @end:
042BEE             1272*  
042BEE             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
042BEE             1274*  ; inputs: none
042BEE             1275*  ; prerequisites: vdu_sprite_select
042BEE             1276*  vdu_sprite_next_frame:
042BEE 21 F9 2B 04 1277*      ld hl,@cmd
042BF2 01 03 00 00 1278*      ld bc,@end-@cmd
042BF6 5B DF       1279*      rst.lil $18
042BF8 C9          1280*      ret
042BF9 17 1B 08    1281*  @cmd: db 23,27,8
042BFC             1282*  @end:
042BFC             1283*  
042BFC             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
042BFC             1285*  ; inputs: none
042BFC             1286*  ; prerequisites: vdu_sprite_select
042BFC             1287*  vdu_sprite_prev_frame:
042BFC 21 07 2C 04 1288*      ld hl,@cmd
042C00 01 03 00 00 1289*      ld bc,@end-@cmd
042C04 5B DF       1290*      rst.lil $18
042C06 C9          1291*      ret
042C07 17 1B 09    1292*  @cmd: db 23,27,9
042C0A             1293*  @end:
042C0A             1294*  
042C0A             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042C0A             1296*  ; inputs: a is frame number to select
042C0A             1297*  ; prerequisites: vdu_sprite_select
042C0A             1298*  vdu_sprite_select_frame:
042C0A 32 1C 2C 04 1299*      ld (@frame),a
042C0E 21 19 2C 04 1300*      ld hl,@cmd
042C12 01 04 00 00 1301*      ld bc,@end-@cmd
042C16 5B DF       1302*      rst.lil $18
042C18 C9          1303*      ret
042C19 17 1B 0A    1304*  @cmd:    db 23,27,10
042C1C 00          1305*  @frame:  db 0x00
042C1D             1306*  @end:
042C1D             1307*  
042C1D             1308*  ; VDU 23, 27, 11: Show current sprite
042C1D             1309*  ; inputs: none
042C1D             1310*  ; prerequisites: vdu_sprite_select
042C1D             1311*  vdu_sprite_show:
042C1D 21 28 2C 04 1312*      ld hl,@cmd
042C21 01 03 00 00 1313*      ld bc,@end-@cmd
042C25 5B DF       1314*      rst.lil $18
042C27 C9          1315*      ret
042C28 17 1B 0B    1316*  @cmd: db 23,27,11
042C2B             1317*  @end:
042C2B             1318*  
042C2B             1319*  ; VDU 23, 27, 12: Hide current sprite
042C2B             1320*  ; inputs: none
042C2B             1321*  ; prerequisites: vdu_sprite_select
042C2B             1322*  vdu_sprite_hide:
042C2B 21 36 2C 04 1323*      ld hl,@cmd
042C2F 01 03 00 00 1324*      ld bc,@end-@cmd
042C33 5B DF       1325*      rst.lil $18
042C35 C9          1326*      ret
042C36 17 1B 0C    1327*  @cmd: db 23,27,12
042C39             1328*  @end:
042C39             1329*  
042C39             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042C39             1331*  ; inputs: bc is x coordinate, de is y coordinate
042C39             1332*  ; prerequisites: vdu_sprite_select
042C39             1333*  vdu_sprite_move_abs:
042C39 ED 43 51 2C 1334*      ld (@xpos),bc
       04          
042C3E ED 53 53 2C 1335*      ld (@ypos),de
       04          
042C43 21 4E 2C 04 1336*      ld hl,@cmd
042C47 01 07 00 00 1337*      ld bc,@end-@cmd
042C4B 5B DF       1338*      rst.lil $18
042C4D C9          1339*      ret
042C4E 17 1B 0D    1340*  @cmd:  db 23,27,13
042C51 00 00       1341*  @xpos: dw 0x0000
042C53 00 00       1342*  @ypos: dw 0x0000
042C55 00          1343*  @end:  db 0x00 ; padding
042C56             1344*  
042C56             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042C56             1346*  ; inputs: bc is x coordinate, de is y coordinate
042C56             1347*  ; prerequisites: vdu_sprite_select
042C56             1348*  vdu_sprite_move_rel:
042C56 ED 43 6E 2C 1349*      ld (@dx),bc
       04          
042C5B ED 53 70 2C 1350*      ld (@dy),de
       04          
042C60 21 6B 2C 04 1351*      ld hl,@cmd
042C64 01 07 00 00 1352*      ld bc,@end-@cmd
042C68 5B DF       1353*      rst.lil $18
042C6A C9          1354*      ret
042C6B 17 1B 0E    1355*  @cmd: db 23,27,14
042C6E 00 00       1356*  @dx:  dw 0x0000
042C70 00 00       1357*  @dy:  dw 0x0000
042C72 00          1358*  @end: db 0x00 ; padding
042C73             1359*  
042C73             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042C73             1361*  ; USING 16.8 FIXED POINT COORDINATES
042C73             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042C73             1363*  ;   the fractional portiion of the inputs are truncated
042C73             1364*  ;   leaving only the 16-bit integer portion
042C73             1365*  ; prerequisites: vdu_sprite_select
042C73             1366*  vdu_sprite_move_abs168:
042C73             1367*  ; populate in the reverse of normal to keep the
042C73             1368*  ; inputs from stomping on each other
042C73 ED 53 92 2C 1369*      ld (@ypos-1),de
       04          
042C78 ED 43 90 2C 1370*      ld (@xpos-1),bc
       04          
042C7D 3E 0D       1371*      ld a,13       ; restore the final byte of the command
042C7F 32 90 2C 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
042C83 21 8E 2C 04 1373*      ld hl,@cmd
042C87 01 07 00 00 1374*      ld bc,@end-@cmd
042C8B 5B DF       1375*      rst.lil $18
042C8D C9          1376*      ret
042C8E 17 1B 0D    1377*  @cmd:  db 23,27,13
042C91 00 00       1378*  @xpos: dw 0x0000
042C93 00 00       1379*  @ypos: dw 0x0000
042C95             1380*  @end:  ; no padding required b/c we shifted de right
042C95             1381*  
042C95             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042C95             1383*  ; USING 16.8 FIXED POINT COORDINATES
042C95             1384*  ; inputs: ub.c is dx, ud.e is dy
042C95             1385*  ;   the fractional portiion of the inputs are truncated
042C95             1386*  ;   leaving only the 16-bit integer portion
042C95             1387*  ; prerequisites: vdu_sprite_select
042C95             1388*  vdu_sprite_move_rel168:
042C95             1389*  ; populate in the reverse of normal to keep the
042C95             1390*  ; inputs from stomping on each other
042C95 ED 53 B4 2C 1391*      ld (@dy-1),de
       04          
042C9A ED 43 B2 2C 1392*      ld (@dx-1),bc
       04          
042C9F 3E 0E       1393*      ld a,14       ; restore the final byte of the command
042CA1 32 B2 2C 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
042CA5 21 B0 2C 04 1395*      ld hl,@cmd
042CA9 01 07 00 00 1396*      ld bc,@end-@cmd
042CAD 5B DF       1397*      rst.lil $18
042CAF C9          1398*      ret
042CB0 17 1B 0E    1399*  @cmd:  db 23,27,14
042CB3 00 00       1400*  @dx: dw 0x0000
042CB5 00 00       1401*  @dy: dw 0x0000
042CB7             1402*  @end:  ; no padding required b/c we shifted de right
042CB7             1403*  
042CB7             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
042CB7             1405*  ; inputs: none
042CB7             1406*  vdu_sprite_update:
042CB7 21 C2 2C 04 1407*      ld hl,@cmd
042CBB 01 03 00 00 1408*      ld bc,@end-@cmd
042CBF 5B DF       1409*      rst.lil $18
042CC1 C9          1410*      ret
042CC2 17 1B 0F    1411*  @cmd: db 23,27,15
042CC5             1412*  @end:
042CC5             1413*  
042CC5             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042CC5             1415*  ; inputs: none
042CC5             1416*  vdu_sprite_bmp_reset:
042CC5 21 D0 2C 04 1417*      ld hl,@cmd
042CC9 01 03 00 00 1418*      ld bc,@end-@cmd
042CCD 5B DF       1419*      rst.lil $18
042CCF C9          1420*      ret
042CD0 17 1B 10    1421*  @cmd: db 23,27,16
042CD3             1422*  @end:
042CD3             1423*  
042CD3             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042CD3             1425*  ; inputs: none
042CD3             1426*  vdu_sprite_reset:
042CD3 21 DE 2C 04 1427*      ld hl,@cmd
042CD7 01 03 00 00 1428*      ld bc,@end-@cmd
042CDB 5B DF       1429*      rst.lil $18
042CDD C9          1430*      ret
042CDE 17 1B 11    1431*  @cmd: db 23,27,17
042CE1             1432*  @end:
042CE1             1433*  
042CE1             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042CE1             1435*  ; inputs: a is the GCOL paint mode
042CE1             1436*  ; prerequisites: vdu_sprite_select
042CE1             1437*  vdu_sprite_set_gcol:
042CE1 32 F3 2C 04 1438*      ld (@mode),a
042CE5 21 F0 2C 04 1439*      ld hl,@cmd
042CE9 01 04 00 00 1440*      ld bc,@end-@cmd
042CED 5B DF       1441*      rst.lil $18
042CEF C9          1442*      ret
042CF0 17 1B 12    1443*  @cmd:  db 23,27,18
042CF3 00          1444*  @mode: db 0x00
042CF4             1445*  @end:
042CF4             1446*  
042CF4             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
042CF4             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
042CF4             1449*  ; inputs: hl=bufferId
042CF4             1450*  ; prerequisites: vdu_sprite_select
042CF4             1451*  vdu_sprite_add_buff:
042CF4 22 06 2D 04 1452*      ld (@bufferId),hl
042CF8 21 03 2D 04 1453*      ld hl,@cmd
042CFC 01 05 00 00 1454*      ld bc,@end-@cmd
042D00 5B DF       1455*      rst.lil $18
042D02 C9          1456*      ret
042D03 17 1B 26    1457*  @cmd:      db 23,27,0x26
042D06 00 00       1458*  @bufferId: dw 0x0000
042D08 00          1459*  @end:      db 0x00 ; padding
042D09             1460*  
042D09             1461*  
042D09             1462*  ; #### from sfx.inc ####
042D09 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
042D0A             1464*  
042D0A             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
042D0A             1466*  ; ; inputs: hl = bufferId
042D0A             1467*  ; sfx_play:
042D0A             1468*  ; 	ld iy,sfx_last_channel
042D0A             1469*  ; 	ld a,(iy+0)
042D0A             1470*  ; 	ld (@bufferId),hl
042D0A             1471*  ; @find_next_channel:
042D0A             1472*  ; 	inc a ; bump to next channel
042D0A             1473*  ; 	and 31 ; modulo 32 channel
042D0A             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
042D0A             1475*  ; 	ret z ; so we return to caller without doing anything
042D0A             1476*  ; 	push af ; back up channel
042D0A             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
042D0A             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
042D0A             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
042D0A             1480*  ; 	pop af ; restore channel
042D0A             1481*  ; 	jr @find_next_channel ; try the next channel
042D0A             1482*  ; @play_sfx:
042D0A             1483*  ; 	pop af ; restore channel
042D0A             1484*  ; 	ld (iy+0),a ; store channel
042D0A             1485*  ; 	ld hl,(@bufferId)
042D0A             1486*  ; 	ld c,a ; channel
042D0A             1487*  ; 	ld b,127 ; full volume
042D0A             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
042D0A             1489*  ; 	jp vdu_play_sample
042D0A             1490*  ; @bufferId:
042D0A             1491*  ; 	dw 0x0000 ; 16-bit value
042D0A             1492*  
042D0A             1493*  sfx_play_random_hurt:
042D0A CD 07 32 04 1494*  	call rand_8
042D0E E6 03       1495*  	and 3
042D10 FE 00       1496*  	cp 0
042D12 CA 14 38 04 1497*  	jp z,sfx_play_ahh
042D16 FE 01       1498*  	cp 1
042D18 CA 20 38 04 1499*  	jp z,sfx_play_augh
042D1C FE 02       1500*  	cp 2
042D1E CA 2C 38 04 1501*  	jp z,sfx_play_ayee
042D22 C3 F8 38 04 1502*  	jp sfx_play_ugh
042D26             1503*  
042D26             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
042D26             1505*  sfx_load_main:
042D26 21 00 00 00 1506*      ld hl,0
042D2A 22 1C 32 04 1507*      ld (cur_file_idx),hl
042D2E             1508*  sfx_load_main_loop:
042D2E             1509*  ; back up loop counter
042D2E C5          1510*      push bc
042D2F             1511*  ; load the next sound
042D2F CD 83 2D 04 1512*      call load_next_sound
042D33             1513*  ; draw all the things
042D33 CD 85 33 04 1514*      call tmp_draw_all_the_things
042D37             1515*  ; move bj
042D37 CD 0D 33 04 1516*  	call move_bj
042D3B             1517*  ; print welcome message
042D3B DD 21 29 0A 1518*  	ld ix,font_itc_honda
       04          
042D40 21 14 40 04 1519*  	ld hl,hello_world
042D44 01 20 00 00 1520*  	ld bc,32
042D48 11 02 00 00 1521*  	ld de,2
042D4C CD 6E 08 04 1522*  	call font_bmp_print
042D50             1523*  ; print current filename
042D50 CD CC 27 04 1524*  	call vdu_cls
042D54 2A 1F 32 04 1525*  	ld hl,(cur_filename)
042D58 CD DC 2D 04 1526*  	call printString
042D5C CD F1 2D 04 1527*  	call printNewLine
042D60             1528*  
042D60             1529*  ; print current load stopwatch
042D60 21 36 40 04 1530*  	ld hl,loading_time
042D64 CD DC 2D 04 1531*  	call printString
042D68 CD C3 3A 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
042D6C CD 2A 2E 04 1533*  	call printDec
042D70             1534*  
042D70             1535*  ; flip screen
042D70 CD 9B 29 04 1536*      call vdu_flip
042D74             1537*  ; ; delay for a bit so sound can play
042D74             1538*  ;     ld a,%10000000 ; 1 second delay
042D74             1539*  ;     call multiPurposeDelay
042D74             1540*  ; decrement loop counter
042D74 C1          1541*      pop bc
042D75 0B          1542*  	dec bc
042D76             1543*  ; ; DEBUG: DUMP REGISTERS
042D76             1544*  ; 	push bc
042D76             1545*  ; 	call dumpRegistersHex
042D76             1546*  ; 	call vdu_flip
042D76             1547*  ; 	pop bc
042D76             1548*  ; ; END DEBUG
042D76 79          1549*      ld a,c
042D77 B7          1550*      or a
042D78 C2 2E 2D 04 1551*      jp nz,sfx_load_main_loop
042D7C 78          1552*      ld a,b
042D7D B7          1553*      or a
042D7E C2 2E 2D 04 1554*      jp nz,sfx_load_main_loop
042D82 C9          1555*      ret
042D83             1556*  
042D83             1557*  load_next_sound:
042D83             1558*  ; look up the load routine for the current file index
042D83 2A 1C 32 04 1559*  	ld hl,(cur_file_idx)
042D87 29          1560*  	add hl,hl ; multiply current index by 2 ...
042D88 ED 5B 1C 32 1561*  	ld de,(cur_file_idx)
       04          
042D8D 19          1562*  	add hl,de ; ... now by 3
042D8E ED 5B 28 32 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
042D93 19          1564*  	add hl,de
042D94 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
042D96 22 9B 2D 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
042D9A             1567*  @jump_addr:
042D9A CD 00 00 00 1568*  	call 0 ; call the sound load routine
042D9E             1569*  ; look up the buffer id for the current file
042D9E 2A 1C 32 04 1570*  	ld hl,(cur_file_idx)
042DA2 29          1571*  	add hl,hl ; multiply current index by 2 ...
042DA3 ED 5B 1C 32 1572*  	ld de,(cur_file_idx)
       04          
042DA8 19          1573*  	add hl,de ; ... now by 3
042DA9 ED 5B 25 32 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
042DAE 19          1575*  	add hl,de
042DAF ED 27       1576*  	ld hl,(hl)
042DB1 22 22 32 04 1577*  	ld (cur_buffer_id),hl
042DB5             1578*  ; bump the current file index
042DB5 2A 1C 32 04 1579*  	ld hl,(cur_file_idx)
042DB9 23          1580*  	inc hl
042DBA 22 1C 32 04 1581*  	ld (cur_file_idx),hl
042DBE C9          1582*  	ret
042DBF             1583*  
042DBF             1584*  ; load a sound file to a buffer
042DBF             1585*  ; inputs: hl = bufferId ; ix = file size ; iy = pointer to filename
042DBF             1586*  vdu_load_sfx:
042DBF             1587*  ; back up input parameters
042DBF E5          1588*      push hl ; bufferId
042DC0             1589*  ; load the sound
042DC0 CD 14 42 04 1590*  	call vdu_load_buffer_from_file
042DC4             1591*  ; now make the buffer a sound sample
042DC4 E1          1592*      pop hl ; bufferId
042DC5 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
042DC6             1594*      ; push hl ; bufferId
042DC6 CD 7D 01 04 1595*  	call vdu_buffer_to_sound
042DCA             1596*  ; ; play the loaded sound
042DCA             1597*  ;     ld c,0 ; channel
042DCA             1598*  ;     ld b,127 ; full volume
042DCA             1599*  ;     ld de,1000 ; 1 second duration
042DCA             1600*  ;     pop hl ; bufferId
042DCA             1601*  ;     call vdu_play_sample
042DCA C9          1602*      ret
042DCB             1603*  
042DCB             1604*  vdu_clear_all_buffers:
042DCB             1605*  ; clear all buffers
042DCB 21 D6 2D 04 1606*      ld hl,@beg
042DCF 01 06 00 00 1607*      ld bc,@end-@beg
042DD3 5B DF       1608*      rst.lil $18
042DD5 C9          1609*      ret
042DD6 17 00 A0    1610*  @beg: db 23,0,$A0
042DD9 FF FF       1611*        dw -1 ; clear all buffers
042DDB 02          1612*        db 2  ; command 2: clear a buffer
042DDC             1613*  @end:
042DDC             0024       include "src/asm/functions.inc"
042DDC             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
042DDC             0002*  ; Print a zero-terminated string
042DDC             0003*  ; HL: Pointer to string
042DDC             0004*  printString:
042DDC C5          0005*  	PUSH	BC
042DDD 01 00 00 00 0006*  	LD		BC,0
042DE1 3E 00       0007*  	LD 	 	A,0
042DE3 5B DF       0008*  	RST.LIL 18h
042DE5 C1          0009*  	POP		BC
042DE6 C9          0010*  	RET
042DE7             0011*  ; print a VDU sequence
042DE7             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
042DE7             0013*  sendVDUsequence:
042DE7 C5          0014*  	PUSH	BC
042DE8 01 00 00 00 0015*  	LD		BC, 0
042DEC 4E          0016*  	LD		C, (HL)
042DED 5B DF       0017*  	RST.LIL	18h
042DEF C1          0018*  	POP		BC
042DF0 C9          0019*  	RET
042DF1             0020*  ; Print Newline sequence to VDP
042DF1             0021*  printNewLine:
042DF1 3E 0D       0022*  	LD	A, '\r'
042DF3 5B D7       0023*  	RST.LIL 10h
042DF5 3E 0A       0024*  	LD	A, '\n'
042DF7 5B D7       0025*  	RST.LIL 10h
042DF9 C9          0026*  	RET
042DFA             0027*  ; Print a 24-bit HEX number
042DFA             0028*  ; HLU: Number to print
042DFA             0029*  printHex24:
042DFA E5          0030*  	PUSH	HL
042DFB 21 02 00 00 0031*  	LD		HL, 2
042DFF 39          0032*  	ADD		HL, SP
042E00 7E          0033*  	LD		A, (HL)
042E01 E1          0034*  	POP		HL
042E02 CD 0C 2E 04 0035*  	CALL	printHex8
042E06             0036*  ; Print a 16-bit HEX number
042E06             0037*  ; HL: Number to print
042E06             0038*  printHex16:
042E06 7C          0039*  	LD		A,H
042E07 CD 0C 2E 04 0040*  	CALL	printHex8
042E0B 7D          0041*  	LD		A,L
042E0C             0042*  ; Print an 8-bit HEX number
042E0C             0043*  ; A: Number to print
042E0C             0044*  printHex8:
042E0C 4F          0045*  	LD		C,A
042E0D 1F          0046*  	RRA
042E0E 1F          0047*  	RRA
042E0F 1F          0048*  	RRA
042E10 1F          0049*  	RRA
042E11 CD 16 2E 04 0050*  	CALL	@F
042E15 79          0051*  	LD		A,C
042E16             0052*  @@:
042E16 E6 0F       0053*  	AND		0Fh
042E18 C6 90       0054*  	ADD		A,90h
042E1A 27          0055*  	DAA
042E1B CE 40       0056*  	ADC		A,40h
042E1D 27          0057*  	DAA
042E1E 5B D7       0058*  	RST.LIL	10h
042E20 C9          0059*  	RET
042E21             0060*  
042E21             0061*  ; Print a 0x HEX prefix
042E21             0062*  DisplayHexPrefix:
042E21 3E 30       0063*  	LD	A, '0'
042E23 5B D7       0064*  	RST.LIL 10h
042E25 3E 78       0065*  	LD	A, 'x'
042E27 5B D7       0066*  	RST.LIL 10h
042E29 C9          0067*  	RET
042E2A             0068*  
042E2A             0069*  
042E2A             0070*  ; Prints the right justified decimal value in HL without leading zeroes
042E2A             0071*  ; HL : Value to print
042E2A             0072*  printDec:
042E2A 11 4E 2E 04 0073*  	LD	 DE, _printDecBuffer
042E2E CD 57 2E 04 0074*  	CALL Num2String
042E32             0075*  ; BEGIN MY CODE
042E32             0076*  ; replace leading zeroes with spaces
042E32 21 4E 2E 04 0077*      LD	 HL, _printDecBuffer
042E36 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
042E38             0079*  @loop:
042E38 7E          0080*      LD	 A, (HL)
042E39 FE 30       0081*      CP	 '0'
042E3B C2 49 2E 04 0082*      JP	 NZ, @done
042E3F 3E 20       0083*      LD   A, ' '
042E41 77          0084*      LD	 (HL), A
042E42 23          0085*      INC	 HL
042E43 CD BD 27 04 0086*      CALL vdu_cursor_forward
042E47 10 EF       0087*      DJNZ @loop
042E49             0088*  @done:
042E49             0089*  ; END MY CODE
042E49             0090*  	; LD	 HL, _printDecBuffer
042E49 CD DC 2D 04 0091*  	CALL printString
042E4D C9          0092*  	RET
042E4E 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
042E57             0094*  
042E57             0095*  ; This routine converts the value from HL into it's ASCII representation,
042E57             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
042E57             0097*  ; so it will allways be 8 characters length
042E57             0098*  ; HL : Value to convert to string
042E57             0099*  ; DE : pointer to buffer, at least 8 byte + 0
042E57             0100*  Num2String:
042E57 01 80 69 67 0101*  	LD	 BC,-10000000
042E5B CD 8E 2E 04 0102*  	CALL OneDigit
042E5F 01 C0 BD F0 0103*  	LD	 BC,-1000000
042E63 CD 8E 2E 04 0104*  	CALL OneDigit
042E67 01 60 79 FE 0105*  	LD	 BC,-100000
042E6B CD 8E 2E 04 0106*  	CALL OneDigit
042E6F 01 F0 D8 FF 0107*  	LD   BC,-10000
042E73 CD 8E 2E 04 0108*  	CALL OneDigit
042E77 01 18 FC FF 0109*  	LD   BC,-1000
042E7B CD 8E 2E 04 0110*  	CALL OneDigit
042E7F 01 9C FF FF 0111*  	LD   BC,-100
042E83 CD 8E 2E 04 0112*  	CALL OneDigit
042E87 0E F6       0113*  	LD   C,-10
042E89 CD 8E 2E 04 0114*  	CALL OneDigit
042E8D 48          0115*  	LD   C,B
042E8E             0116*  OneDigit:
042E8E 3E 2F       0117*  	LD   A,'0'-1
042E90             0118*  DivideMe:
042E90 3C          0119*  	INC  A
042E91 09          0120*  	ADD  HL,BC
042E92 38 FC       0121*  	JR   C,DivideMe
042E94 ED 42       0122*  	SBC  HL,BC
042E96 12          0123*  	LD   (DE),A
042E97 13          0124*  	INC  DE
042E98 C9          0125*  	RET
042E99             0126*  
042E99             0127*  
042E99             0128*  ; #### new functions added by Brandon R. Gates ####
042E99             0129*  
042E99             0130*  ; print the binary representation of the 8-bit value in a
042E99             0131*  ; destroys a, hl, bc
042E99             0132*  printBin8:
042E99 06 08       0133*      ld b,8      ; loop counter for 8 bits
042E9B 21 B6 2E 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
042E9F             0135*                  ; (which will be the high bit of the value in a)
042E9F             0136*  @loop:
042E9F 07          0137*      rlca ; put the next highest bit into carry
042EA0 38 04       0138*      jr c,@one
042EA2 36 30       0139*      ld (hl),'0'
042EA4 18 02       0140*      jr @next_bit
042EA6             0141*  @one:
042EA6 36 31       0142*      ld (hl),'1'
042EA8             0143*  @next_bit:
042EA8 23          0144*      inc hl
042EA9 10 F4       0145*      djnz @loop
042EAB             0146*  ; print it
042EAB 21 B6 2E 04 0147*  	ld hl,@cmd
042EAF 01 08 00 00 0148*  	ld bc,@end-@cmd
042EB3 5B DF       0149*  	rst.lil $18
042EB5 C9          0150*  	ret
042EB6             0151*  @cmd: ds 8 ; eight bytes for eight bits
042EBE             0152*  @end:
042EBE             0153*  
042EBE             0154*  ; print the binary representation of the 8-bit value in a
042EBE             0155*  ; in reverse order (lsb first)
042EBE             0156*  ; destroys a, hl, bc
042EBE             0157*  printBin8Rev:
042EBE 06 08       0158*      ld b,8      ; loop counter for 8 bits
042EC0 21 DB 2E 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
042EC4             0160*                  ; (which will be the high bit of the value in a)
042EC4             0161*  @loop:
042EC4 0F          0162*      rrca ; put the next lowest bit into carry
042EC5 38 04       0163*      jr c,@one
042EC7 36 30       0164*      ld (hl),'0'
042EC9 18 02       0165*      jr @next_bit
042ECB             0166*  @one:
042ECB 36 31       0167*      ld (hl),'1'
042ECD             0168*  @next_bit:
042ECD 23          0169*      inc hl
042ECE 10 F4       0170*      djnz @loop
042ED0             0171*  ; print it
042ED0 21 DB 2E 04 0172*  	ld hl,@cmd
042ED4 01 08 00 00 0173*  	ld bc,@end-@cmd
042ED8 5B DF       0174*  	rst.lil $18
042EDA C9          0175*  	ret
042EDB             0176*  @cmd: ds 8 ; eight bytes for eight bits
042EE3             0177*  @end:
042EE3             0178*  
042EE3             0179*  ; print registers to screen in hexidecimal format
042EE3             0180*  ; inputs: none
042EE3             0181*  ; outputs: values of every register printed to screen
042EE3             0182*  ;    values of each register in global scratch memory
042EE3             0183*  ; destroys: nothing
042EE3             0184*  stepRegistersHex:
042EE3             0185*  ; store everything in scratch
042EE3 22 E6 30 04 0186*      ld (uhl),hl
042EE7 ED 43 E9 30 0187*      ld (ubc),bc
       04          
042EEC ED 53 EC 30 0188*      ld (ude),de
       04          
042EF1 DD 22 EF 30 0189*      ld (uix),ix
       04          
042EF6 FD 22 F2 30 0190*      ld (uiy),iy
       04          
042EFB F5          0191*      push af ; fml
042EFC E1          0192*      pop hl  ; thanks, zilog
042EFD 22 E3 30 04 0193*      ld (uaf),hl
042F01 F5          0194*      push af ; dammit
042F02             0195*  
042F02             0196*  ; home the cursor
042F02 CD 04 29 04 0197*      call vdu_home_cursor
042F06             0198*  
042F06             0199*  ; print each register
042F06 21 6F 30 04 0200*      ld hl,str_afu
042F0A CD DC 2D 04 0201*      call printString
042F0E 2A E3 30 04 0202*      ld hl,(uaf)
042F12 CD FA 2D 04 0203*      call printHex24
042F16 CD F1 2D 04 0204*      call printNewLine
042F1A             0205*  
042F1A 21 73 30 04 0206*      ld hl,str_hlu
042F1E CD DC 2D 04 0207*      call printString
042F22 2A E6 30 04 0208*      ld hl,(uhl)
042F26 CD FA 2D 04 0209*      call printHex24
042F2A CD F1 2D 04 0210*      call printNewLine
042F2E             0211*  
042F2E 21 77 30 04 0212*      ld hl,str_bcu
042F32 CD DC 2D 04 0213*      call printString
042F36 2A E9 30 04 0214*      ld hl,(ubc)
042F3A CD FA 2D 04 0215*      call printHex24
042F3E CD F1 2D 04 0216*      call printNewLine
042F42             0217*  
042F42 21 7B 30 04 0218*      ld hl,str_deu
042F46 CD DC 2D 04 0219*      call printString
042F4A 2A EC 30 04 0220*      ld hl,(ude)
042F4E CD FA 2D 04 0221*      call printHex24
042F52 CD F1 2D 04 0222*      call printNewLine
042F56             0223*  
042F56 21 7F 30 04 0224*      ld hl,str_ixu
042F5A CD DC 2D 04 0225*      call printString
042F5E 2A EF 30 04 0226*      ld hl,(uix)
042F62 CD FA 2D 04 0227*      call printHex24
042F66 CD F1 2D 04 0228*      call printNewLine
042F6A             0229*  
042F6A 21 83 30 04 0230*      ld hl,str_iyu
042F6E CD DC 2D 04 0231*      call printString
042F72 2A F2 30 04 0232*      ld hl,(uiy)
042F76 CD FA 2D 04 0233*      call printHex24
042F7A CD F1 2D 04 0234*      call printNewLine
042F7E             0235*  
042F7E             0236*      ; call vsync
042F7E             0237*  
042F7E CD F1 2D 04 0238*      call printNewLine
042F82             0239*  
042F82             0240*  ; check for right shift key and quit if pressed
042F82             0241*  	MOSCALL mos_getkbmap
042F82 3E 1E       0001*M 			LD	A, function
042F84 5B CF       0002*M 			RST.LIL	08h
042F86             0242*  @stayhere:
042F86             0243*  ; 7 RightShift
042F86 DD CB 00 76 0244*      bit 6,(ix+0)
042F8A 20 02       0245*      jr nz,@RightShift
042F8C 18 F8       0246*      jr @stayhere
042F8E             0247*  @RightShift:
042F8E DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
042F92 3E 80       0249*      ld a,%10000000
042F94 CD D6 3A 04 0250*      call multiPurposeDelay
042F98             0251*  
042F98             0252*  ; restore everything
042F98 2A E6 30 04 0253*      ld hl, (uhl)
042F9C ED 4B E9 30 0254*      ld bc, (ubc)
       04          
042FA1 ED 5B EC 30 0255*      ld de, (ude)
       04          
042FA6 DD 2A EF 30 0256*      ld ix, (uix)
       04          
042FAB FD 2A F2 30 0257*      ld iy, (uiy)
       04          
042FB0 F1          0258*      pop af
042FB1             0259*  ; all done
042FB1 C9          0260*      ret
042FB2             0261*  
042FB2             0262*  ; print registers to screen in hexidecimal format
042FB2             0263*  ; inputs: none
042FB2             0264*  ; outputs: values of every register printed to screen
042FB2             0265*  ;    values of each register in global scratch memory
042FB2             0266*  ; destroys: nothing
042FB2             0267*  dumpRegistersHex:
042FB2             0268*  ; store everything in scratch
042FB2 22 E6 30 04 0269*      ld (uhl),hl
042FB6 ED 43 E9 30 0270*      ld (ubc),bc
       04          
042FBB ED 53 EC 30 0271*      ld (ude),de
       04          
042FC0 DD 22 EF 30 0272*      ld (uix),ix
       04          
042FC5 FD 22 F2 30 0273*      ld (uiy),iy
       04          
042FCA F5          0274*      push af ; fml
042FCB E1          0275*      pop hl  ; thanks, zilog
042FCC 22 E3 30 04 0276*      ld (uaf),hl
042FD0 F5          0277*      push af ; dammit
042FD1             0278*  
042FD1             0279*  ; home the cursor
042FD1 CD 04 29 04 0280*      call vdu_home_cursor
042FD5             0281*  
042FD5             0282*  ; print each register
042FD5 21 6F 30 04 0283*      ld hl,str_afu
042FD9 CD DC 2D 04 0284*      call printString
042FDD 2A E3 30 04 0285*      ld hl,(uaf)
042FE1 CD FA 2D 04 0286*      call printHex24
042FE5 CD F1 2D 04 0287*      call printNewLine
042FE9             0288*  
042FE9 21 73 30 04 0289*      ld hl,str_hlu
042FED CD DC 2D 04 0290*      call printString
042FF1 2A E6 30 04 0291*      ld hl,(uhl)
042FF5 CD FA 2D 04 0292*      call printHex24
042FF9 CD F1 2D 04 0293*      call printNewLine
042FFD             0294*  
042FFD 21 77 30 04 0295*      ld hl,str_bcu
043001 CD DC 2D 04 0296*      call printString
043005 2A E9 30 04 0297*      ld hl,(ubc)
043009 CD FA 2D 04 0298*      call printHex24
04300D CD F1 2D 04 0299*      call printNewLine
043011             0300*  
043011 21 7B 30 04 0301*      ld hl,str_deu
043015 CD DC 2D 04 0302*      call printString
043019 2A EC 30 04 0303*      ld hl,(ude)
04301D CD FA 2D 04 0304*      call printHex24
043021 CD F1 2D 04 0305*      call printNewLine
043025             0306*  
043025 21 7F 30 04 0307*      ld hl,str_ixu
043029 CD DC 2D 04 0308*      call printString
04302D 2A EF 30 04 0309*      ld hl,(uix)
043031 CD FA 2D 04 0310*      call printHex24
043035 CD F1 2D 04 0311*      call printNewLine
043039             0312*  
043039 21 83 30 04 0313*      ld hl,str_iyu
04303D CD DC 2D 04 0314*      call printString
043041 2A F2 30 04 0315*      ld hl,(uiy)
043045 CD FA 2D 04 0316*      call printHex24
043049 CD F1 2D 04 0317*      call printNewLine
04304D             0318*  
04304D CD 26 2A 04 0319*      call vdu_vblank
043051             0320*  
043051 CD F1 2D 04 0321*      call printNewLine
043055             0322*  ; restore everything
043055 2A E6 30 04 0323*      ld hl, (uhl)
043059 ED 4B E9 30 0324*      ld bc, (ubc)
       04          
04305E ED 5B EC 30 0325*      ld de, (ude)
       04          
043063 DD 2A EF 30 0326*      ld ix, (uix)
       04          
043068 FD 2A F2 30 0327*      ld iy, (uiy)
       04          
04306D F1          0328*      pop af
04306E             0329*  ; all done
04306E C9          0330*      ret
04306F             0331*  
04306F 61 66 3D 00 0332*  str_afu: db "af=",0
043073 68 6C 3D 00 0333*  str_hlu: db "hl=",0
043077 62 63 3D 00 0334*  str_bcu: db "bc=",0
04307B 64 65 3D 00 0335*  str_deu: db "de=",0
04307F 69 78 3D 00 0336*  str_ixu: db "ix=",0
043083 69 79 3D 00 0337*  str_iyu: db "iy=",0
043087             0338*  
043087             0339*  ; print udeuhl to screen in hexidecimal format
043087             0340*  ; inputs: none
043087             0341*  ; outputs: concatenated hexidecimal udeuhl
043087             0342*  ; destroys: nothing
043087             0343*  dumpUDEUHLHex:
043087             0344*  ; store everything in scratch
043087 22 E6 30 04 0345*      ld (uhl),hl
04308B ED 43 E9 30 0346*      ld (ubc),bc
       04          
043090 ED 53 EC 30 0347*      ld (ude),de
       04          
043095 DD 22 EF 30 0348*      ld (uix),ix
       04          
04309A FD 22 F2 30 0349*      ld (uiy),iy
       04          
04309F F5          0350*      push af
0430A0             0351*  
0430A0             0352*  ; print each register
0430A0             0353*  
0430A0 21 DA 30 04 0354*      ld hl,str_udeuhl
0430A4 CD DC 2D 04 0355*      call printString
0430A8 2A EC 30 04 0356*      ld hl,(ude)
0430AC CD FA 2D 04 0357*      call printHex24
0430B0 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
0430B2 5B D7       0359*  	rst.lil 10h
0430B4 2A E6 30 04 0360*      ld hl,(uhl)
0430B8 CD FA 2D 04 0361*      call printHex24
0430BC CD F1 2D 04 0362*      call printNewLine
0430C0             0363*  
0430C0             0364*  ; restore everything
0430C0 2A E6 30 04 0365*      ld hl, (uhl)
0430C4 ED 4B E9 30 0366*      ld bc, (ubc)
       04          
0430C9 ED 5B EC 30 0367*      ld de, (ude)
       04          
0430CE DD 2A EF 30 0368*      ld ix, (uix)
       04          
0430D3 FD 2A F2 30 0369*      ld iy, (uiy)
       04          
0430D8 F1          0370*      pop af
0430D9             0371*  ; all done
0430D9 C9          0372*      ret
0430DA             0373*  
0430DA 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0430E3             0375*  
0430E3             0376*  ; global scratch memory for registers
0430E3 00 00 00    0377*  uaf: dl 0
0430E6 00 00 00    0378*  uhl: dl 0
0430E9 00 00 00    0379*  ubc: dl 0
0430EC 00 00 00    0380*  ude: dl 0
0430EF 00 00 00    0381*  uix: dl 0
0430F2 00 00 00    0382*  uiy: dl 0
0430F5 00 00 00    0383*  usp: dl 0
0430F8 00 00 00    0384*  upc: dl 0
0430FB             0385*  
0430FB             0386*  ; inputs: whatever is in the flags register
0430FB             0387*  ; outputs: binary representation of flags
0430FB             0388*  ;          with a header so we know which is what
0430FB             0389*  ; destroys: nothing
0430FB             0390*  ; preserves: everything
0430FB             0391*  dumpFlags:
0430FB             0392*  ; first we curse zilog for not giving direct access to flags
0430FB F5          0393*      push af ; this is so we can send it back unharmed
0430FC F5          0394*      push af ; this is so we can pop it to hl
0430FD             0395*  ; store everything in scratch
0430FD 22 E6 30 04 0396*      ld (uhl),hl
043101 ED 43 E9 30 0397*      ld (ubc),bc
       04          
043106 ED 53 EC 30 0398*      ld (ude),de
       04          
04310B DD 22 EF 30 0399*      ld (uix),ix
       04          
043110 FD 22 F2 30 0400*      ld (uiy),iy
       04          
043115             0401*  ; next we print the header
043115 21 41 31 04 0402*      ld hl,@header
043119 CD DC 2D 04 0403*      call printString
04311D E1          0404*      pop hl ; flags are now in l
04311E 7D          0405*      ld a,l ; flags are now in a
04311F CD 99 2E 04 0406*      call printBin8
043123 CD F1 2D 04 0407*  	call printNewLine
043127             0408*  ; restore everything
043127 2A E6 30 04 0409*      ld hl, (uhl)
04312B ED 4B E9 30 0410*      ld bc, (ubc)
       04          
043130 ED 5B EC 30 0411*      ld de, (ude)
       04          
043135 DD 2A EF 30 0412*      ld ix, (uix)
       04          
04313A FD 2A F2 30 0413*      ld iy, (uiy)
       04          
04313F F1          0414*      pop af ; send her home the way she came
043140 C9          0415*      ret
043141             0416*  ; Bit 7 (S): Sign flag
043141             0417*  ; Bit 6 (Z): Zero flag
043141             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
043141             0419*  ; Bit 4 (H): Half Carry flag
043141             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
043141             0421*  ; Bit 2 (PV): Parity/Overflow flag
043141             0422*  ; Bit 1 (N): Subtract flag
043141             0423*  ; Bit 0 (C): Carry flag
043141 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04314C             0425*  
04314C             0426*  ; set all the bits in the flag register
04314C             0427*  ; more of an academic exercise than anything useful
04314C             0428*  ; inputs; none
04314C             0429*  ; outputs; a=0,f=255
04314C             0430*  ; destroys: flags, hl
04314C             0431*  ; preserves: a, because why not
04314C             0432*  setAllFlags:
04314C 21 FF 00 00 0433*      ld hl,255
043150 67          0434*      ld h,a ; four cycles to preserve a is cheap
043151 E5          0435*      push hl
043152 F1          0436*      pop af
043153 C9          0437*      ret
043154             0438*  
043154             0439*  ; reset all the bits in the flag register
043154             0440*  ; unlike its inverse counterpart, this may actually be useful
043154             0441*  ; inputs; none
043154             0442*  ; outputs; a=0,f=0
043154             0443*  ; destroys: flags, hl
043154             0444*  ; preserves: a, because why not
043154             0445*  resetAllFlags:
043154 21 00 00 00 0446*      ld hl,0
043158 67          0447*      ld h,a ; four cycles to preserve a is cheap
043159 E5          0448*      push hl
04315A F1          0449*      pop af
04315B C9          0450*      ret
04315C             0451*  
04315C             0452*  ; wait until user presses a key
04315C             0453*  ; inputs: none
04315C             0454*  ; outputs: none
04315C             0455*  ; destroys: af,ix
04315C             0456*  waitKeypress:
04315C             0457*      MOSCALL mos_sysvars
04315C 3E 08       0001*M 			LD	A, function
04315E 5B CF       0002*M 			RST.LIL	08h
043160 AF          0458*      xor a ; zero out any prior keypresses
043161 DD 77 05    0459*      ld (ix+sysvar_keyascii),a
043164             0460*  @loop:
043164 DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
043167 A7          0462*      and a
043168 C0          0463*      ret nz
043169 18 F9       0464*      jr @loop
04316B             0465*  
04316B             0466*  
04316B             0467*  ; print bytes from an address to the screen in hexidecimal format
04316B             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04316B             0469*  ; outputs: values of each byte printed to screen separated by spaces
04316B             0470*  ; destroys: nothing
04316B             0471*  dumpMemoryHex:
04316B             0472*  ; save all registers to the stack
04316B F5          0473*      push af
04316C C5          0474*      push bc
04316D D5          0475*      push de
04316E E5          0476*      push hl
04316F DD E5       0477*      push ix
043171 FD E5       0478*      push iy
043173             0479*  
043173             0480*  ; set b to be our loop counter
043173 47          0481*      ld b,a
043174             0482*  @loop:
043174             0483*  ; print the byte
043174 7E          0484*      ld a,(hl)
043175 CD 0C 2E 04 0485*      call printHex8
043179             0486*  ; print a space
043179 3E 20       0487*      ld a,' '
04317B 5B D7       0488*      rst.lil 10h
04317D 23          0489*      inc hl
04317E 10 F4       0490*      djnz @loop
043180 CD F1 2D 04 0491*      call printNewLine
043184             0492*  
043184             0493*  ; restore everything
043184 FD E1       0494*      pop iy
043186 DD E1       0495*      pop ix
043188 E1          0496*      pop hl
043189 D1          0497*      pop de
04318A C1          0498*      pop bc
04318B F1          0499*      pop af
04318C             0500*  ; all done
04318C C9          0501*      ret
04318D             0502*  
04318D             0503*  
04318D             0504*  ; print bytes from an address to the screen in binary format
04318D             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04318D             0506*  ; outputs: values of each byte printed to screen separated by spaces
04318D             0507*  ; destroys: nothing
04318D             0508*  dumpMemoryBin:
04318D             0509*  ; save all registers to the stack
04318D F5          0510*      push af
04318E C5          0511*      push bc
04318F D5          0512*      push de
043190 E5          0513*      push hl
043191 DD E5       0514*      push ix
043193 FD E5       0515*      push iy
043195             0516*  
043195             0517*  ; set b to be our loop counter
043195 47          0518*      ld b,a
043196             0519*  @loop:
043196             0520*  ; print the byte
043196 7E          0521*      ld a,(hl)
043197 E5          0522*      push hl
043198 C5          0523*      push bc
043199 CD 99 2E 04 0524*      call printBin8
04319D C1          0525*      pop bc
04319E             0526*  ; print a space
04319E 3E 20       0527*      ld a,' '
0431A0 5B D7       0528*      rst.lil 10h
0431A2 E1          0529*      pop hl
0431A3 23          0530*      inc hl
0431A4 10 F0       0531*      djnz @loop
0431A6 CD F1 2D 04 0532*      call printNewLine
0431AA             0533*  
0431AA             0534*  ; restore everything
0431AA FD E1       0535*      pop iy
0431AC DD E1       0536*      pop ix
0431AE E1          0537*      pop hl
0431AF D1          0538*      pop de
0431B0 C1          0539*      pop bc
0431B1 F1          0540*      pop af
0431B2             0541*  ; all done
0431B2 C9          0542*      ret
0431B3             0543*  
0431B3             0544*  ; print bytes from an address to the screen in binary format
0431B3             0545*  ; with the bits of each byte in reverse order (lsb first)
0431B3             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0431B3             0547*  ; outputs: values of each byte printed to screen separated by spaces
0431B3             0548*  ; destroys: nothing
0431B3             0549*  dumpMemoryBinRev:
0431B3             0550*  ; save all registers to the stack
0431B3 F5          0551*      push af
0431B4 C5          0552*      push bc
0431B5 D5          0553*      push de
0431B6 E5          0554*      push hl
0431B7 DD E5       0555*      push ix
0431B9 FD E5       0556*      push iy
0431BB             0557*  
0431BB             0558*  ; set b to be our loop counter
0431BB 47          0559*      ld b,a
0431BC             0560*  @loop:
0431BC             0561*  ; print the byte
0431BC 7E          0562*      ld a,(hl)
0431BD E5          0563*      push hl
0431BE C5          0564*      push bc
0431BF CD BE 2E 04 0565*      call printBin8Rev
0431C3 C1          0566*      pop bc
0431C4             0567*  ; print a space
0431C4 3E 20       0568*      ld a,' '
0431C6 5B D7       0569*      rst.lil 10h
0431C8 E1          0570*      pop hl
0431C9 23          0571*      inc hl
0431CA 10 F0       0572*      djnz @loop
0431CC CD F1 2D 04 0573*      call printNewLine
0431D0             0574*  
0431D0             0575*  ; restore everything
0431D0 FD E1       0576*      pop iy
0431D2 DD E1       0577*      pop ix
0431D4 E1          0578*      pop hl
0431D5 D1          0579*      pop de
0431D6 C1          0580*      pop bc
0431D7 F1          0581*      pop af
0431D8             0582*  ; all done
0431D8 C9          0583*      ret
0431D9             0025   	; include "src/asm/player.inc"
0431D9             0026   	include "src/asm/maths.inc"
0431D9 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
0431DD 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
0431E1             0003*  
0431E1             0004*  ; set bcd values in a scratch memory address from registers bcde
0431E1             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
0431E1             0006*  ; destroys ; hl
0431E1             0007*  set_bcd:
0431E1 73          0008*      ld (hl),e
0431E2 23          0009*      inc hl
0431E3 72          0010*      ld (hl),d
0431E4 23          0011*      inc hl
0431E5 71          0012*      ld (hl),c
0431E6 23          0013*      inc hl
0431E7 70          0014*      ld (hl),b
0431E8 C9          0015*      ret
0431E9             0016*  
0431E9             0017*  ; load bcd values from a scratch memory address to bcde
0431E9             0018*  ; input: hl; scratch address
0431E9             0019*  ; output: bcde; 8-place bcd number
0431E9             0020*  ; destroys: hl
0431E9             0021*  get_bcd:
0431E9 5E          0022*      ld e,(hl)
0431EA 23          0023*      inc hl
0431EB 56          0024*      ld d,(hl)
0431EC 23          0025*      inc hl
0431ED 4E          0026*      ld c,(hl)
0431EE 23          0027*      inc hl
0431EF 46          0028*      ld b,(hl)
0431F0 C9          0029*      ret
0431F1             0030*  
0431F1             0031*  ; BCD addition
0431F1             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0431F1             0033*  ;       a is the number of bytes holding each number (number of places/2)
0431F1             0034*  ; outputs: (hl) + (de) --> (hl)
0431F1             0035*  ; destroys: a,b,de,hl
0431F1             0036*  add_bcd:
0431F1 47          0037*      ld b,a ; loop counter
0431F2 AF          0038*      xor a ; reset a, clear carry flag
0431F3             0039*  adcec:
0431F3 1A          0040*      ld a,(de) ; addend to acc
0431F4 8E          0041*      adc a,(hl) ; add (hl) to acc
0431F5 27          0042*      daa ; adjust result to bcd
0431F6 77          0043*      ld (hl),a ; store result
0431F7 23          0044*      inc hl ; advance memory pointers
0431F8 13          0045*      inc de
0431F9 10 F8       0046*      djnz adcec ; loop until b == 0
0431FB C9          0047*      ret
0431FC             0048*  
0431FC             0049*  ; BCD subtraction
0431FC             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0431FC             0051*  ;       a is the number of bytes holding each number (number of places/2)
0431FC             0052*  ; outputs: (hl) - (de) --> (hl)
0431FC             0053*  ; destroys: a,b,de,hl
0431FC             0054*  sub_bcd:
0431FC 47          0055*      ld b,a ; loop counter
0431FD AF          0056*      xor a ; reset a,clear carry flag
0431FE             0057*  subdec:
0431FE 1A          0058*      ld a,(de) ; subtrahend to acc
0431FF 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
043200 27          0060*      daa ; adjust result to bcd
043201 77          0061*      ld (hl),a ; store result
043202 23          0062*      inc hl ; advance memory pointers
043203 13          0063*      inc de
043204 10 F8       0064*      djnz subdec ; loop until b == 0
043206 C9          0065*      ret
043207             0066*  
043207             0067*  ; http://www.z80.info/pseudo-random.txt
043207             0068*  rand_8:
043207 C5          0069*      push bc
043208 3A 1B 32 04 0070*      ld a,(r_seed)
04320C 4F          0071*      ld c,a
04320D             0072*  
04320D 0F          0073*      rrca ; multiply by 32
04320E 0F          0074*      rrca
04320F 0F          0075*      rrca
043210 EE 1F       0076*      xor 0x1f
043212             0077*  
043212 81          0078*      add a,c
043213 DE FF       0079*      sbc a,255 ; carry
043215             0080*  
043215 32 1B 32 04 0081*      ld (r_seed),a
043219 C1          0082*      pop bc
04321A C9          0083*      ret
04321B 50          0084*  r_seed: defb $50
04321C             0027   	include "src/asm/img_load.inc"
04321C 00 00 00    0001*  cur_file_idx: dl 0
04321F 00 00 00    0002*  cur_filename: dl 0
043222 00 00 00    0003*  cur_buffer_id: dl 0
043225 00 00 00    0004*  cur_buffer_id_lut: dl 0
043228 00 00 00    0005*  cur_load_jump_table: dl 0
04322B             0006*  
04322B             0007*  img_load_init:
04322B             0008*  ; initialize bj's position parameters
04322B 21 00 00 00 0009*  	ld hl,0
04322F 22 79 33 04 0010*  	ld (bj_yvel),hl
043233             0011*  
043233 21 2D 00 00 0012*      ld hl,45
043237 22 7C 33 04 0013*  	ld (bj_y_cur),hl
04323B 22 7F 33 04 0014*  	ld (bj_y_min),hl
04323F 22 82 33 04 0015*      ld (bj_y_max),hl
043243             0016*  
043243 21 01 00 00 0017*  	ld hl,1
043247 22 6D 33 04 0018*  	ld (bj_xvel),hl
04324B             0019*  
04324B 21 0A 00 00 0020*  	ld hl,10
04324F 22 70 33 04 0021*  	ld (bj_x_cur),hl
043253 22 73 33 04 0022*  	ld (bj_x_min),hl
043257             0023*  
043257 21 C8 00 00 0024*  	ld hl,320-120
04325B 22 76 33 04 0025*  	ld (bj_x_max),hl
04325F             0026*  
04325F C9          0027*      ret
043260             0028*  
043260             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
043260             0030*  img_load_main:
043260 21 00 00 00 0031*      ld hl,0
043264 22 1C 32 04 0032*      ld (cur_file_idx),hl
043268             0033*  img_load_main_loop:
043268             0034*  ; back up loop counter
043268 C5          0035*      push bc
043269             0036*  ; load the next panel
043269 CD D1 32 04 0037*      call load_next_panel
04326D             0038*  ; draw all the things
04326D CD 85 33 04 0039*      call tmp_draw_all_the_things
043271             0040*  ; draw the most recently loaded panel
043271 2A 22 32 04 0041*  	ld hl,(cur_buffer_id)
043275 CD 35 29 04 0042*  	call vdu_buff_select
043279 01 00 00 00 0043*  	ld bc,0
04327D 11 00 00 00 0044*  	ld de,0
043281 CD 06 2B 04 0045*  	call vdu_plot_bmp
043285             0046*  ; move bj
043285 CD 0D 33 04 0047*  	call move_bj
043289             0048*  ; print welcome message
043289 DD 21 29 0A 0049*  	ld ix,font_itc_honda
       04          
04328E 21 14 40 04 0050*  	ld hl,hello_world
043292 01 20 00 00 0051*  	ld bc,32
043296 11 02 00 00 0052*  	ld de,2
04329A CD 6E 08 04 0053*  	call font_bmp_print
04329E             0054*  ; print current filename
04329E CD CC 27 04 0055*  	call vdu_cls
0432A2 2A 1F 32 04 0056*  	ld hl,(cur_filename)
0432A6 CD DC 2D 04 0057*  	call printString
0432AA CD F1 2D 04 0058*  	call printNewLine
0432AE             0059*  
0432AE             0060*  ; print current load stopwatch
0432AE 21 36 40 04 0061*  	ld hl,loading_time
0432B2 CD DC 2D 04 0062*  	call printString
0432B6 CD C3 3A 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
0432BA CD 2A 2E 04 0064*  	call printDec
0432BE             0065*  
0432BE             0066*  ; flip screen
0432BE CD 9B 29 04 0067*      call vdu_flip
0432C2             0068*  ; decrement loop counter
0432C2 C1          0069*      pop bc
0432C3 0B          0070*  	dec bc
0432C4             0071*  ; ; DEBUG: DUMP REGISTERS
0432C4             0072*  ; 	push bc
0432C4             0073*  ; 	call dumpRegistersHex
0432C4             0074*  ; 	call vdu_flip
0432C4             0075*  ; 	pop bc
0432C4             0076*  ; ; END DEBUG
0432C4 79          0077*      ld a,c
0432C5 B7          0078*      or a
0432C6 C2 68 32 04 0079*      jp nz,img_load_main_loop
0432CA 78          0080*      ld a,b
0432CB B7          0081*      or a
0432CC C2 68 32 04 0082*      jp nz,img_load_main_loop
0432D0 C9          0083*      ret
0432D1             0084*  
0432D1             0085*  load_next_panel:
0432D1             0086*  ; look up the load routine for the current file index
0432D1 2A 1C 32 04 0087*  	ld hl,(cur_file_idx)
0432D5 29          0088*  	add hl,hl ; multiply current index by 2 ...
0432D6 ED 5B 1C 32 0089*  	ld de,(cur_file_idx)
       04          
0432DB 19          0090*  	add hl,de ; ... now by 3
0432DC ED 5B 28 32 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
0432E1 19          0092*  	add hl,de
0432E2 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
0432E4 22 E9 32 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
0432E8             0095*  @jump_addr:
0432E8 CD 00 00 00 0096*  	call 0 ; call the panel load routine
0432EC             0097*  ; look up the buffer id for the current file
0432EC 2A 1C 32 04 0098*  	ld hl,(cur_file_idx)
0432F0 29          0099*  	add hl,hl ; multiply current index by 2 ...
0432F1 ED 5B 1C 32 0100*  	ld de,(cur_file_idx)
       04          
0432F6 19          0101*  	add hl,de ; ... now by 3
0432F7 ED 5B 25 32 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
0432FC 19          0103*  	add hl,de
0432FD ED 27       0104*  	ld hl,(hl)
0432FF 22 22 32 04 0105*  	ld (cur_buffer_id),hl
043303             0106*  ; bump the current file index
043303 2A 1C 32 04 0107*  	ld hl,(cur_file_idx)
043307 23          0108*  	inc hl
043308 22 1C 32 04 0109*  	ld (cur_file_idx),hl
04330C C9          0110*  	ret
04330D             0111*  
04330D             0112*  move_bj:
04330D             0113*  ; activate bj bitmap
04330D 21 04 03 00 0114*  	ld hl, BUF_UI_BJ_120_120
043311 CD 35 29 04 0115*  	call vdu_buff_select
043315             0116*  ; update position based on velocity parameters
043315 2A 70 33 04 0117*  	ld hl, (bj_x_cur)
043319 ED 5B 6D 33 0118*  	ld de, (bj_xvel)
       04          
04331E 19          0119*  	add hl, de
04331F 22 70 33 04 0120*  	ld (bj_x_cur), hl
043323 EB          0121*  	ex de,hl ; store x_cur in de
043324             0122*  ; check if we're < x_min
043324 2A 73 33 04 0123*  	ld hl,(bj_x_min)
043328 AF          0124*  	xor a ; clear carry
043329 ED 52       0125*  	sbc hl,de ; x_min - x_cur
04332B F2 49 33 04 0126*  	jp p, move_bj_x_min
04332F             0127*  ; check if we're > x_max
04332F 2A 76 33 04 0128*  	ld hl,(bj_x_max)
043333 AF          0129*  	xor a ; clear carry
043334 ED 52       0130*  	sbc hl,de ; x_max - x_cur
043336 FA 5B 33 04 0131*  	jp m, move_bj_x_max
04333A             0132*  ; if not at either boundary, fall through to draw bj's
04333A             0133*  draw_bj:
04333A ED 4B 70 33 0134*  	ld bc,(bj_x_cur)
       04          
04333F ED 5B 7C 33 0135*  	ld de,(bj_y_cur)
       04          
043344 CD 06 2B 04 0136*  	call vdu_plot_bmp
043348 C9          0137*  	ret
043349             0138*  move_bj_x_min:
043349 21 01 00 00 0139*  	ld hl,1
04334D 22 6D 33 04 0140*  	ld (bj_xvel),hl
043351 2A 73 33 04 0141*  	ld hl,(bj_x_min)
043355 22 70 33 04 0142*  	ld (bj_x_cur),hl
043359 18 DF       0143*  	jr draw_bj
04335B             0144*  move_bj_x_max:
04335B 21 FF FF FF 0145*  	ld hl,-1
04335F 22 6D 33 04 0146*  	ld (bj_xvel),hl
043363 2A 76 33 04 0147*  	ld hl,(bj_x_max)
043367 22 70 33 04 0148*  	ld (bj_x_cur),hl
04336B 18 CD       0149*  	jr draw_bj
04336D 00 00 00    0150*  bj_xvel: dl 0
043370 00 00 00    0151*  bj_x_cur: dl 0
043373 00 00 00    0152*  bj_x_min: dl 0
043376 00 00 00    0153*  bj_x_max: dl 0
043379             0154*  
043379 00 00 00    0155*  bj_yvel: dl 0
04337C 00 00 00    0156*  bj_y_cur: dl 0
04337F 00 00 00    0157*  bj_y_min: dl 0
043382 00 00 00    0158*  bj_y_max: dl 0
043385             0159*  
043385             0160*  tmp_draw_all_the_things:
043385 21 0A 03 00 0161*      ld hl,BUF_UI_SPLASH
043389 CD 35 29 04 0162*      call vdu_buff_select
04338D 01 00 00 00 0163*      ld bc,0
043391 11 00 00 00 0164*      ld de,0
043395 CD 06 2B 04 0165*      call vdu_plot_bmp
043399 C9          0166*  	ret
04339A             0167*  
04339A             0168*  ; load an rgba2222 image file to a buffer
04339A             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
04339A             0170*  vdu_load_img_2:
04339A             0171*  ; back up image dimension parameters and buffer id
04339A E5          0172*  	push hl
04339B C5          0173*  	push bc
04339C D5          0174*  	push de
04339D             0175*  ; load the image
04339D CD 14 42 04 0176*  	call vdu_load_buffer_from_file
0433A1             0177*  ; now make it a bitmap
0433A1 D1          0178*  	pop de
0433A2 C1          0179*  	pop bc
0433A3 E1          0180*  	pop hl
0433A4 3E 01       0181*  	ld a,1 ; the magic number for rgba2222
0433A6 C3 4A 29 04 0182*  	jp vdu_bmp_create ; will return to caller from there
0433AA             0183*  
0433AA             0184*  ; load an rgba8888 image file to a buffer
0433AA             0185*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0433AA             0186*  vdu_load_img_8:
0433AA             0187*  ; back up image dimension parameters and buffer id
0433AA E5          0188*  	push hl
0433AB C5          0189*  	push bc
0433AC D5          0190*  	push de
0433AD             0191*  ; load the image
0433AD CD 14 42 04 0192*  	call vdu_load_buffer_from_file
0433B1             0193*  ; now make it a bitmap
0433B1 D1          0194*  	pop de
0433B2 C1          0195*  	pop bc
0433B3 E1          0196*  	pop hl
0433B4 3E 00       0197*  	ld a,0 ; the magic number for rgba8888
0433B6 C3 4A 29 04 0198*  	jp vdu_bmp_create ; will return to caller from there
0433BA             0028   	include "src/asm/sfx.inc"
0433BA             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
0433BA             0002*  
0433BA             0003*  SFX_num_buffers: equ 22
0433BA             0004*  ; SFX buffer ids:
0433BA             0005*  BUF_ACHTUNG: equ 0x0500
0433BA             0006*  BUF_AHH: equ 0x0501
0433BA             0007*  BUF_AUGH: equ 0x0502
0433BA             0008*  BUF_AYEE: equ 0x0503
0433BA             0009*  BUF_AYEE_HIGH: equ 0x0504
0433BA             0010*  BUF_DOG_WOOF_DOUBLE: equ 0x0505
0433BA             0011*  BUF_DOG_WOOF_SINGLE: equ 0x0506
0433BA             0012*  BUF_DOG_YELP: equ 0x0507
0433BA             0013*  BUF_EXPLODE: equ 0x0508
0433BA             0014*  BUF_GOT_TREASURE: equ 0x0509
0433BA             0015*  BUF_GUN_EMPTY: equ 0x050A
0433BA             0016*  BUF_GUN_RELOAD: equ 0x050B
0433BA             0017*  BUF_KNIFE: equ 0x050C
0433BA             0018*  BUF_MEIN_LEBEN: equ 0x050D
0433BA             0019*  BUF_OOF: equ 0x050E
0433BA             0020*  BUF_SCHUSSTAFFEL: equ 0x050F
0433BA             0021*  BUF_SCREAM: equ 0x0510
0433BA             0022*  BUF_SHOT_GATLING_BURST: equ 0x0511
0433BA             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0x0512
0433BA             0024*  BUF_SHOT_PISTOL: equ 0x0513
0433BA             0025*  BUF_UGH: equ 0x0514
0433BA             0026*  BUF_WILHELM: equ 0x0515
0433BA             0027*  
0433BA             0028*  ; SFX buffer id reverse lookup:
0433BA             0029*  SFX_buffer_id_lut:
0433BA 00 05 00    0030*  	dl BUF_ACHTUNG
0433BD 01 05 00    0031*  	dl BUF_AHH
0433C0 02 05 00    0032*  	dl BUF_AUGH
0433C3 03 05 00    0033*  	dl BUF_AYEE
0433C6 04 05 00    0034*  	dl BUF_AYEE_HIGH
0433C9 05 05 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
0433CC 06 05 00    0036*  	dl BUF_DOG_WOOF_SINGLE
0433CF 07 05 00    0037*  	dl BUF_DOG_YELP
0433D2 08 05 00    0038*  	dl BUF_EXPLODE
0433D5 09 05 00    0039*  	dl BUF_GOT_TREASURE
0433D8 0A 05 00    0040*  	dl BUF_GUN_EMPTY
0433DB 0B 05 00    0041*  	dl BUF_GUN_RELOAD
0433DE 0C 05 00    0042*  	dl BUF_KNIFE
0433E1 0D 05 00    0043*  	dl BUF_MEIN_LEBEN
0433E4 0E 05 00    0044*  	dl BUF_OOF
0433E7 0F 05 00    0045*  	dl BUF_SCHUSSTAFFEL
0433EA 10 05 00    0046*  	dl BUF_SCREAM
0433ED 11 05 00    0047*  	dl BUF_SHOT_GATLING_BURST
0433F0 12 05 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
0433F3 13 05 00    0049*  	dl BUF_SHOT_PISTOL
0433F6 14 05 00    0050*  	dl BUF_UGH
0433F9 15 05 00    0051*  	dl BUF_WILHELM
0433FC             0052*  
0433FC             0053*  ; SFX duration lookup:
0433FC             0054*  SFX_duration_lut:
0433FC 58 03       0055*  	dw 856 ; ACHTUNG
0433FE 91 01       0056*  	dw 401 ; AHH
043400 FC 02       0057*  	dw 764 ; AUGH
043402 E6 01       0058*  	dw 486 ; AYEE
043404 40 04       0059*  	dw 1088 ; AYEE_HIGH
043406 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
043408 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04340A B0 01       0062*  	dw 432 ; DOG_YELP
04340C 13 05       0063*  	dw 1299 ; EXPLODE
04340E A7 05       0064*  	dw 1447 ; GOT_TREASURE
043410 24 01       0065*  	dw 292 ; GUN_EMPTY
043412 BA 01       0066*  	dw 442 ; GUN_RELOAD
043414 F2 00       0067*  	dw 242 ; KNIFE
043416 2E 03       0068*  	dw 814 ; MEIN_LEBEN
043418 CE 03       0069*  	dw 974 ; OOF
04341A 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04341C E0 02       0071*  	dw 736 ; SCREAM
04341E B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
043420 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
043422 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
043424 77 01       0075*  	dw 375 ; UGH
043426 FD 04       0076*  	dw 1277 ; WILHELM
043428             0077*  
043428             0078*  ; SFX load routines jump table:
043428             0079*  SFX_load_routines_table:
043428 6A 34 04    0080*  	dl load_sfx_ACHTUNG
04342B 82 34 04    0081*  	dl load_sfx_AHH
04342E 9A 34 04    0082*  	dl load_sfx_AUGH
043431 B2 34 04    0083*  	dl load_sfx_AYEE
043434 CA 34 04    0084*  	dl load_sfx_AYEE_HIGH
043437 E2 34 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04343A FA 34 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04343D 12 35 04    0087*  	dl load_sfx_DOG_YELP
043440 2A 35 04    0088*  	dl load_sfx_EXPLODE
043443 42 35 04    0089*  	dl load_sfx_GOT_TREASURE
043446 5A 35 04    0090*  	dl load_sfx_GUN_EMPTY
043449 72 35 04    0091*  	dl load_sfx_GUN_RELOAD
04344C 8A 35 04    0092*  	dl load_sfx_KNIFE
04344F A2 35 04    0093*  	dl load_sfx_MEIN_LEBEN
043452 BA 35 04    0094*  	dl load_sfx_OOF
043455 D2 35 04    0095*  	dl load_sfx_SCHUSSTAFFEL
043458 EA 35 04    0096*  	dl load_sfx_SCREAM
04345B 02 36 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04345E 1A 36 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
043461 32 36 04    0099*  	dl load_sfx_SHOT_PISTOL
043464 4A 36 04    0100*  	dl load_sfx_UGH
043467 62 36 04    0101*  	dl load_sfx_WILHELM
04346A             0102*  
04346A             0103*  ; Import sfx .raw files and load them into VDP buffers
04346A             0104*  
04346A             0105*  load_sfx_ACHTUNG:
04346A 21 00 05 00 0106*  	ld hl,BUF_ACHTUNG
04346E DD 21 3A 38 0107*  	ld ix,14394
       00          
043473 FD 21 7A 36 0108*  	ld iy,FACHTUNG
       04          
043478 FD 22 1F 32 0109*  	ld (cur_filename),iy
       04          
04347D CD BF 2D 04 0110*  	call vdu_load_sfx
043481 C9          0111*  	ret
043482             0112*  
043482             0113*  load_sfx_AHH:
043482 21 01 05 00 0114*  	ld hl,BUF_AHH
043486 DD 21 63 1A 0115*  	ld ix,6755
       00          
04348B FD 21 8A 36 0116*  	ld iy,FAHH
       04          
043490 FD 22 1F 32 0117*  	ld (cur_filename),iy
       04          
043495 CD BF 2D 04 0118*  	call vdu_load_sfx
043499 C9          0119*  	ret
04349A             0120*  
04349A             0121*  load_sfx_AUGH:
04349A 21 02 05 00 0122*  	ld hl,BUF_AUGH
04349E DD 21 39 32 0123*  	ld ix,12857
       00          
0434A3 FD 21 96 36 0124*  	ld iy,FAUGH
       04          
0434A8 FD 22 1F 32 0125*  	ld (cur_filename),iy
       04          
0434AD CD BF 2D 04 0126*  	call vdu_load_sfx
0434B1 C9          0127*  	ret
0434B2             0128*  
0434B2             0129*  load_sfx_AYEE:
0434B2 21 03 05 00 0130*  	ld hl,BUF_AYEE
0434B6 DD 21 00 20 0131*  	ld ix,8192
       00          
0434BB FD 21 A3 36 0132*  	ld iy,FAYEE
       04          
0434C0 FD 22 1F 32 0133*  	ld (cur_filename),iy
       04          
0434C5 CD BF 2D 04 0134*  	call vdu_load_sfx
0434C9 C9          0135*  	ret
0434CA             0136*  
0434CA             0137*  load_sfx_AYEE_HIGH:
0434CA 21 04 05 00 0138*  	ld hl,BUF_AYEE_HIGH
0434CE DD 21 77 47 0139*  	ld ix,18295
       00          
0434D3 FD 21 B0 36 0140*  	ld iy,FAYEE_HIGH
       04          
0434D8 FD 22 1F 32 0141*  	ld (cur_filename),iy
       04          
0434DD CD BF 2D 04 0142*  	call vdu_load_sfx
0434E1 C9          0143*  	ret
0434E2             0144*  
0434E2             0145*  load_sfx_DOG_WOOF_DOUBLE:
0434E2 21 05 05 00 0146*  	ld hl,BUF_DOG_WOOF_DOUBLE
0434E6 DD 21 24 28 0147*  	ld ix,10276
       00          
0434EB FD 21 C2 36 0148*  	ld iy,FDOG_WOOF_DOUBLE
       04          
0434F0 FD 22 1F 32 0149*  	ld (cur_filename),iy
       04          
0434F5 CD BF 2D 04 0150*  	call vdu_load_sfx
0434F9 C9          0151*  	ret
0434FA             0152*  
0434FA             0153*  load_sfx_DOG_WOOF_SINGLE:
0434FA 21 06 05 00 0154*  	ld hl,BUF_DOG_WOOF_SINGLE
0434FE DD 21 10 23 0155*  	ld ix,8976
       00          
043503 FD 21 DA 36 0156*  	ld iy,FDOG_WOOF_SINGLE
       04          
043508 FD 22 1F 32 0157*  	ld (cur_filename),iy
       04          
04350D CD BF 2D 04 0158*  	call vdu_load_sfx
043511 C9          0159*  	ret
043512             0160*  
043512             0161*  load_sfx_DOG_YELP:
043512 21 07 05 00 0162*  	ld hl,BUF_DOG_YELP
043516 DD 21 60 1C 0163*  	ld ix,7264
       00          
04351B FD 21 F2 36 0164*  	ld iy,FDOG_YELP
       04          
043520 FD 22 1F 32 0165*  	ld (cur_filename),iy
       04          
043525 CD BF 2D 04 0166*  	call vdu_load_sfx
043529 C9          0167*  	ret
04352A             0168*  
04352A             0169*  load_sfx_EXPLODE:
04352A 21 08 05 00 0170*  	ld hl,BUF_EXPLODE
04352E DD 21 48 55 0171*  	ld ix,21832
       00          
043533 FD 21 03 37 0172*  	ld iy,FEXPLODE
       04          
043538 FD 22 1F 32 0173*  	ld (cur_filename),iy
       04          
04353D CD BF 2D 04 0174*  	call vdu_load_sfx
043541 C9          0175*  	ret
043542             0176*  
043542             0177*  load_sfx_GOT_TREASURE:
043542 21 09 05 00 0178*  	ld hl,BUF_GOT_TREASURE
043546 DD 21 07 5F 0179*  	ld ix,24327
       00          
04354B FD 21 13 37 0180*  	ld iy,FGOT_TREASURE
       04          
043550 FD 22 1F 32 0181*  	ld (cur_filename),iy
       04          
043555 CD BF 2D 04 0182*  	call vdu_load_sfx
043559 C9          0183*  	ret
04355A             0184*  
04355A             0185*  load_sfx_GUN_EMPTY:
04355A 21 0A 05 00 0186*  	ld hl,BUF_GUN_EMPTY
04355E DD 21 3F 13 0187*  	ld ix,4927
       00          
043563 FD 21 28 37 0188*  	ld iy,FGUN_EMPTY
       04          
043568 FD 22 1F 32 0189*  	ld (cur_filename),iy
       04          
04356D CD BF 2D 04 0190*  	call vdu_load_sfx
043571 C9          0191*  	ret
043572             0192*  
043572             0193*  load_sfx_GUN_RELOAD:
043572 21 0B 05 00 0194*  	ld hl,BUF_GUN_RELOAD
043576 DD 21 0F 1D 0195*  	ld ix,7439
       00          
04357B FD 21 3A 37 0196*  	ld iy,FGUN_RELOAD
       04          
043580 FD 22 1F 32 0197*  	ld (cur_filename),iy
       04          
043585 CD BF 2D 04 0198*  	call vdu_load_sfx
043589 C9          0199*  	ret
04358A             0200*  
04358A             0201*  load_sfx_KNIFE:
04358A 21 0C 05 00 0202*  	ld hl,BUF_KNIFE
04358E DD 21 F3 0F 0203*  	ld ix,4083
       00          
043593 FD 21 4D 37 0204*  	ld iy,FKNIFE
       04          
043598 FD 22 1F 32 0205*  	ld (cur_filename),iy
       04          
04359D CD BF 2D 04 0206*  	call vdu_load_sfx
0435A1 C9          0207*  	ret
0435A2             0208*  
0435A2             0209*  load_sfx_MEIN_LEBEN:
0435A2 21 0D 05 00 0210*  	ld hl,BUF_MEIN_LEBEN
0435A6 DD 21 81 35 0211*  	ld ix,13697
       00          
0435AB FD 21 5B 37 0212*  	ld iy,FMEIN_LEBEN
       04          
0435B0 FD 22 1F 32 0213*  	ld (cur_filename),iy
       04          
0435B5 CD BF 2D 04 0214*  	call vdu_load_sfx
0435B9 C9          0215*  	ret
0435BA             0216*  
0435BA             0217*  load_sfx_OOF:
0435BA 21 0E 05 00 0218*  	ld hl,BUF_OOF
0435BE DD 21 00 40 0219*  	ld ix,16384
       00          
0435C3 FD 21 6E 37 0220*  	ld iy,FOOF
       04          
0435C8 FD 22 1F 32 0221*  	ld (cur_filename),iy
       04          
0435CD CD BF 2D 04 0222*  	call vdu_load_sfx
0435D1 C9          0223*  	ret
0435D2             0224*  
0435D2             0225*  load_sfx_SCHUSSTAFFEL:
0435D2 21 0F 05 00 0226*  	ld hl,BUF_SCHUSSTAFFEL
0435D6 DD 21 63 26 0227*  	ld ix,9827
       00          
0435DB FD 21 7A 37 0228*  	ld iy,FSCHUSSTAFFEL
       04          
0435E0 FD 22 1F 32 0229*  	ld (cur_filename),iy
       04          
0435E5 CD BF 2D 04 0230*  	call vdu_load_sfx
0435E9 C9          0231*  	ret
0435EA             0232*  
0435EA             0233*  load_sfx_SCREAM:
0435EA 21 10 05 00 0234*  	ld hl,BUF_SCREAM
0435EE DD 21 5E 30 0235*  	ld ix,12382
       00          
0435F3 FD 21 8F 37 0236*  	ld iy,FSCREAM
       04          
0435F8 FD 22 1F 32 0237*  	ld (cur_filename),iy
       04          
0435FD CD BF 2D 04 0238*  	call vdu_load_sfx
043601 C9          0239*  	ret
043602             0240*  
043602             0241*  load_sfx_SHOT_GATLING_BURST:
043602 21 11 05 00 0242*  	ld hl,BUF_SHOT_GATLING_BURST
043606 DD 21 00 60 0243*  	ld ix,24576
       00          
04360B FD 21 9E 37 0244*  	ld iy,FSHOT_GATLING_BURST
       04          
043610 FD 22 1F 32 0245*  	ld (cur_filename),iy
       04          
043615 CD BF 2D 04 0246*  	call vdu_load_sfx
043619 C9          0247*  	ret
04361A             0248*  
04361A             0249*  load_sfx_SHOT_MACHINE_GUN_BURST:
04361A 21 12 05 00 0250*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04361E DD 21 C4 42 0251*  	ld ix,17092
       00          
043623 FD 21 B9 37 0252*  	ld iy,FSHOT_MACHINE_GUN_BURST
       04          
043628 FD 22 1F 32 0253*  	ld (cur_filename),iy
       04          
04362D CD BF 2D 04 0254*  	call vdu_load_sfx
043631 C9          0255*  	ret
043632             0256*  
043632             0257*  load_sfx_SHOT_PISTOL:
043632 21 13 05 00 0258*  	ld hl,BUF_SHOT_PISTOL
043636 DD 21 61 4B 0259*  	ld ix,19297
       00          
04363B FD 21 D8 37 0260*  	ld iy,FSHOT_PISTOL
       04          
043640 FD 22 1F 32 0261*  	ld (cur_filename),iy
       04          
043645 CD BF 2D 04 0262*  	call vdu_load_sfx
043649 C9          0263*  	ret
04364A             0264*  
04364A             0265*  load_sfx_UGH:
04364A 21 14 05 00 0266*  	ld hl,BUF_UGH
04364E DD 21 A9 18 0267*  	ld ix,6313
       00          
043653 FD 21 EC 37 0268*  	ld iy,FUGH
       04          
043658 FD 22 1F 32 0269*  	ld (cur_filename),iy
       04          
04365D CD BF 2D 04 0270*  	call vdu_load_sfx
043661 C9          0271*  	ret
043662             0272*  
043662             0273*  load_sfx_WILHELM:
043662 21 15 05 00 0274*  	ld hl,BUF_WILHELM
043666 DD 21 D7 53 0275*  	ld ix,21463
       00          
04366B FD 21 F8 37 0276*  	ld iy,FWILHELM
       04          
043670 FD 22 1F 32 0277*  	ld (cur_filename),iy
       04          
043675 CD BF 2D 04 0278*  	call vdu_load_sfx
043679 C9          0279*  	ret
04367A             0280*  
04367A             0281*  ; File name lookups:
04367A 73 66 78 2F 0282*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04368A 73 66 78 2F 0283*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
043696 73 66 78 2F 0284*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
0436A3 73 66 78 2F 0285*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
0436B0 73 66 78 2F 0286*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
0436C2 73 66 78 2F 0287*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
0436DA 73 66 78 2F 0288*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
0436F2 73 66 78 2F 0289*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
043703 73 66 78 2F 0290*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
043713 73 66 78 2F 0291*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
043728 73 66 78 2F 0292*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04373A 73 66 78 2F 0293*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04374D 73 66 78 2F 0294*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04375B 73 66 78 2F 0295*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04376E 73 66 78 2F 0296*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04377A 73 66 78 2F 0297*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04378F 73 66 78 2F 0298*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04379E 73 66 78 2F 0299*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
0437B9 73 66 78 2F 0300*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
0437D8 73 66 78 2F 0301*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
0437EC 73 66 78 2F 0302*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
0437F8 73 66 78 2F 0303*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
043808             0304*  
043808             0305*  ; Play sfx routines
043808             0306*  
043808             0307*  sfx_play_achtung:
043808 21 00 05 00 0308*  	ld hl,BUF_ACHTUNG
04380C 01 58 03 00 0309*  	ld bc,856
043810 C3 46 00 04 0310*  	jp vdu_play_sfx
043814             0311*  
043814             0312*  sfx_play_ahh:
043814 21 01 05 00 0313*  	ld hl,BUF_AHH
043818 01 91 01 00 0314*  	ld bc,401
04381C C3 46 00 04 0315*  	jp vdu_play_sfx
043820             0316*  
043820             0317*  sfx_play_augh:
043820 21 02 05 00 0318*  	ld hl,BUF_AUGH
043824 01 FC 02 00 0319*  	ld bc,764
043828 C3 46 00 04 0320*  	jp vdu_play_sfx
04382C             0321*  
04382C             0322*  sfx_play_ayee:
04382C 21 03 05 00 0323*  	ld hl,BUF_AYEE
043830 01 E6 01 00 0324*  	ld bc,486
043834 C3 46 00 04 0325*  	jp vdu_play_sfx
043838             0326*  
043838             0327*  sfx_play_ayee_high:
043838 21 04 05 00 0328*  	ld hl,BUF_AYEE_HIGH
04383C 01 40 04 00 0329*  	ld bc,1088
043840 C3 46 00 04 0330*  	jp vdu_play_sfx
043844             0331*  
043844             0332*  sfx_play_dog_woof_double:
043844 21 05 05 00 0333*  	ld hl,BUF_DOG_WOOF_DOUBLE
043848 01 63 02 00 0334*  	ld bc,611
04384C C3 46 00 04 0335*  	jp vdu_play_sfx
043850             0336*  
043850             0337*  sfx_play_dog_woof_single:
043850 21 06 05 00 0338*  	ld hl,BUF_DOG_WOOF_SINGLE
043854 01 15 02 00 0339*  	ld bc,533
043858 C3 46 00 04 0340*  	jp vdu_play_sfx
04385C             0341*  
04385C             0342*  sfx_play_dog_yelp:
04385C 21 07 05 00 0343*  	ld hl,BUF_DOG_YELP
043860 01 B0 01 00 0344*  	ld bc,432
043864 C3 46 00 04 0345*  	jp vdu_play_sfx
043868             0346*  
043868             0347*  sfx_play_explode:
043868 21 08 05 00 0348*  	ld hl,BUF_EXPLODE
04386C 01 13 05 00 0349*  	ld bc,1299
043870 C3 46 00 04 0350*  	jp vdu_play_sfx
043874             0351*  
043874             0352*  sfx_play_got_treasure:
043874 21 09 05 00 0353*  	ld hl,BUF_GOT_TREASURE
043878 01 A7 05 00 0354*  	ld bc,1447
04387C C3 46 00 04 0355*  	jp vdu_play_sfx
043880             0356*  
043880             0357*  sfx_play_gun_empty:
043880 21 0A 05 00 0358*  	ld hl,BUF_GUN_EMPTY
043884 01 24 01 00 0359*  	ld bc,292
043888 C3 46 00 04 0360*  	jp vdu_play_sfx
04388C             0361*  
04388C             0362*  sfx_play_gun_reload:
04388C 21 0B 05 00 0363*  	ld hl,BUF_GUN_RELOAD
043890 01 BA 01 00 0364*  	ld bc,442
043894 C3 46 00 04 0365*  	jp vdu_play_sfx
043898             0366*  
043898             0367*  sfx_play_knife:
043898 21 0C 05 00 0368*  	ld hl,BUF_KNIFE
04389C 01 F2 00 00 0369*  	ld bc,242
0438A0 C3 46 00 04 0370*  	jp vdu_play_sfx
0438A4             0371*  
0438A4             0372*  sfx_play_mein_leben:
0438A4 21 0D 05 00 0373*  	ld hl,BUF_MEIN_LEBEN
0438A8 01 2E 03 00 0374*  	ld bc,814
0438AC C3 46 00 04 0375*  	jp vdu_play_sfx
0438B0             0376*  
0438B0             0377*  sfx_play_oof:
0438B0 21 0E 05 00 0378*  	ld hl,BUF_OOF
0438B4 01 CE 03 00 0379*  	ld bc,974
0438B8 C3 46 00 04 0380*  	jp vdu_play_sfx
0438BC             0381*  
0438BC             0382*  sfx_play_schusstaffel:
0438BC 21 0F 05 00 0383*  	ld hl,BUF_SCHUSSTAFFEL
0438C0 01 48 02 00 0384*  	ld bc,584
0438C4 C3 46 00 04 0385*  	jp vdu_play_sfx
0438C8             0386*  
0438C8             0387*  sfx_play_scream:
0438C8 21 10 05 00 0388*  	ld hl,BUF_SCREAM
0438CC 01 E0 02 00 0389*  	ld bc,736
0438D0 C3 46 00 04 0390*  	jp vdu_play_sfx
0438D4             0391*  
0438D4             0392*  sfx_play_shot_gatling_burst:
0438D4 21 11 05 00 0393*  	ld hl,BUF_SHOT_GATLING_BURST
0438D8 01 B6 05 00 0394*  	ld bc,1462
0438DC C3 46 00 04 0395*  	jp vdu_play_sfx
0438E0             0396*  
0438E0             0397*  sfx_play_shot_machine_gun_burst:
0438E0 21 12 05 00 0398*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
0438E4 01 F9 03 00 0399*  	ld bc,1017
0438E8 C3 46 00 04 0400*  	jp vdu_play_sfx
0438EC             0401*  
0438EC             0402*  sfx_play_shot_pistol:
0438EC 21 13 05 00 0403*  	ld hl,BUF_SHOT_PISTOL
0438F0 01 7C 04 00 0404*  	ld bc,1148
0438F4 C3 46 00 04 0405*  	jp vdu_play_sfx
0438F8             0406*  
0438F8             0407*  sfx_play_ugh:
0438F8 21 14 05 00 0408*  	ld hl,BUF_UGH
0438FC 01 77 01 00 0409*  	ld bc,375
043900 C3 46 00 04 0410*  	jp vdu_play_sfx
043904             0411*  
043904             0412*  sfx_play_wilhelm:
043904 21 15 05 00 0413*  	ld hl,BUF_WILHELM
043908 01 FD 04 00 0414*  	ld bc,1277
04390C C3 46 00 04 0415*  	jp vdu_play_sfx
043910             0029   	include "src/asm/timer.inc"
043910             0001*  ; Table 32. Timer Control Registers
043910             0002*  ; this constant is the base address of the timer control registers
043910             0003*  ; each timer takes three bytes:
043910             0004*  ;   0: control register
043910             0005*  ;   1: low byte of timer reset value
043910             0006*  ;   2: high byte of timer reset value
043910             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
043910             0008*  ; which correctly force the high and upper bytes of the address bus to zero
043910             0009*  TMR_CTL:     equ 80h
043910             0010*  
043910             0011*  ; Timer Control Register Bit Definitions
043910             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
043910             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
043910             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
043910             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
043910             0016*                              ; the TMRx_CTL register is read.
043910             0017*  
043910             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
043910             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
043910             0020*  
043910             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
043910             0022*                              ;  0,and counting stops when the end-of-count value is reached.
043910             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
043910             0024*                              ; written to the counter when the end-of-count value is reached.
043910             0025*  
043910             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
043910             0027*  CLK_DIV_256:  equ %00001100 ;
043910             0028*  CLK_DIV_64:   equ %00001000 ;
043910             0029*  CLK_DIV_16:   equ %00000100 ;
043910             0030*  CLK_DIV_4:    equ %00000000 ;
043910             0031*  
043910             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
043910             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
043910             0034*                              ; When a 1 is written to this bit,the values in the reload registers
043910             0035*                              ;  are loaded into the downcounter when the timer restarts. The
043910             0036*                              ; programmer must ensure that this bit is set to 1 each time
043910             0037*                              ; SINGLE-PASS mode is used.
043910             0038*  
043910             0039*  ; disable/enable the programmable reload timer
043910             0040*  PRT_EN_0:     equ %00000000 ;
043910             0041*  PRT_EN_1:     equ %00000001 ;
043910             0042*  
043910             0043*  ; Table 37. Timer Input Source Select Register
043910             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
043910             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
043910             0046*  ;   00: System clock / CLK_DIV
043910             0047*  ;   01: RTC / CLK_DIV
043910             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
043910             0049*  ;   10: GPIO port B pin 1.
043910             0050*  ;   11: GPIO port B pin 1.
043910             0051*  TMR_ISS:   equ 92h ; register address
043910             0052*  
043910             0053*  ; Table 51. Real-Time Clock Control Register
043910             0054*  RTC_CTRL: equ EDh ; register address
043910             0055*  
043910             0056*  ; alarm interrupt disable/enable
043910             0057*  RTC_ALARM_0:    equ %00000000
043910             0058*  RTC_ALARM_1:    equ %10000000
043910             0059*  
043910             0060*  ; interrupt on alarm disable/enable
043910             0061*  RTC_INT_ENT_0:  equ %00000000
043910             0062*  RTC_INT_ENT_1:  equ %01000000
043910             0063*  
043910             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
043910             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
043910             0066*  
043910             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
043910             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
043910             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
043910             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
043910             0071*  
043910             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
043910             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
043910             0074*  
043910             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
043910             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
043910             0077*  
043910             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
043910             0079*                                  ; RTC counter is enabled.
043910             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
043910             0081*                                  ; RTC counter is disabled.
043910             0082*  
043910             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
043910             0084*  
043910             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
043910             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
043910 00 00 00    0087*  prt_reload: dl 0x000000
043913             0088*  
043913             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
043913             0090*  ;          de = number PRT interrupts during test interval
043913             0091*  prt_calibrate:
043913 CD 26 2A 04 0092*      call vdu_vblank
043917             0093*  ; set a MOS timer
043917 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04391B FD 21 6E 3A 0095*      ld iy,tmr_test
       04          
043920 CD 4C 3A 04 0096*      call tmr_set
043924             0097*  ; set a PRT timer
043924             0098*      ; ld hl,prt_reload_hardware
043924             0099*      ; ld hl,prt_reload_emulator
043924 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
043928 22 10 39 04 0101*      ld (prt_reload),hl
04392C CD 87 39 04 0102*      call prt_set
043930             0103*  @loop:
043930             0104*  ; check time remaining on MOS timer
043930 CD 5A 3A 04 0105*      call tmr_get
043934 CA 3E 39 04 0106*      jp z,@done ; time expired,so quit
043938 FA 3E 39 04 0107*      jp m,@done ; time past expiration (negative),so quit
04393C 18 F2       0108*      jr @loop
04393E             0109*  @done:
04393E ED 5B D5 39 0110*      ld de,(prt_irq_counter)
       04          
043943 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
043947 ED 43 10 39 0112*      ld (prt_reload),bc
       04          
04394C 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
043950 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
043951 32 61 40 04 0115*      ld (is_emulator),a
043955 ED 52       0116*      sbc hl,de
043957 21 79 40 04 0117*      ld hl,on_hardware ; default message for running on hardware
04395B CA 13 39 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04395F F8          0119*      ret m ; negative result means we're on hardware
043960 3C          0120*      inc a ; we're on emulator
043961 32 61 40 04 0121*      ld (is_emulator),a
043965 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
043969 ED 43 10 39 0123*      ld (prt_reload),bc
       04          
04396E 21 62 40 04 0124*      ld hl,on_emulator
043972 C9          0125*      ret
043973             0126*  
043973 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
043987             0128*  
043987             0129*  ; set PRT timer
043987             0130*  prt_set:
043987 21 00 00 00 0131*      ld hl,0
04398B 22 D5 39 04 0132*      ld (prt_irq_counter),hl
04398F 2A 10 39 04 0133*      ld hl,(prt_reload)
043993 ED 29 84    0134*      out0 ($84),l
043996 ED 21 85    0135*  	out0 ($85),h
043999             0136*  ; disable timer
043999 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04399B ED 39 83    0138*  	out0 ($83),a
04399E             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04399E 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0439A0 ED 39 83    0141*  	out0 ($83),a
0439A3 C9          0142*      ret
0439A4             0143*  
0439A4             0144*  ; ===============================================
0439A4             0145*  ; PRT Timer Interrupt Handling
0439A4             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0439A4             0147*  ; -----------------------------------------------
0439A4             0148*  prt_irq_init:
0439A4             0149*      ; set up interrupt vector table 2
0439A4 21 00 00 00 0150*  	ld hl,0
0439A8 3A 0C 01 00 0151*  	ld a,($10c)
0439AC 6F          0152*  	ld l,a
0439AD 3A 0D 01 00 0153*  	ld a,($10d)
0439B1 67          0154*  	ld h,a
0439B2             0155*  
0439B2             0156*  	; skip over CALL ($c3)
0439B2 23          0157*  	inc hl
0439B3             0158*  	; load address of jump into vector table 2 (in ram)
0439B3 ED 27       0159*  	ld hl,(hl)
0439B5             0160*  
0439B5             0161*  	; write CALL prt_irq_handler to vector table 2
0439B5 3E C3       0162*  	ld a,$c3
0439B7 77          0163*  	ld (hl),a
0439B8 23          0164*  	inc hl
0439B9 11 C0 39 04 0165*  	ld de,prt_irq_handler
0439BD ED 1F       0166*  	ld (hl),de
0439BF             0167*  
0439BF C9          0168*      ret
0439C0             0169*  
0439C0             0170*  prt_irq_handler:
0439C0 F3          0171*  	di
0439C1 F5          0172*  	push af
0439C2 E5          0173*      push hl
0439C3 ED 38 83    0174*  	in0 a,($83)
0439C6 2A D5 39 04 0175*  	ld hl,(prt_irq_counter)
0439CA 23          0176*  	inc hl
0439CB 22 D5 39 04 0177*  	ld (prt_irq_counter),hl
0439CF E1          0178*      pop hl
0439D0 F1          0179*  	pop af
0439D1 FB          0180*  	ei
0439D2 5B ED 4D    0181*  	reti.l
0439D5             0182*  
0439D5             0183*  prt_irq_counter:
0439D5 00 00 00    0184*  	.dl 0
0439D8             0185*  prt_irq_counter_saved:
0439D8 00 00 00    0186*      .dl 0
0439DB             0187*  
0439DB             0188*  prt_loop_reset:
0439DB E5          0189*      push hl
0439DC 21 00 00 00 0190*  	ld hl,0
0439E0 22 D5 39 04 0191*  	ld (prt_irq_counter),hl
0439E4 22 46 3A 04 0192*      ld (prt_loop_counter),hl
0439E8 22 49 3A 04 0193*      ld (prt_loops),hl
0439EC CD 87 39 04 0194*      call prt_set
0439F0 E1          0195*      pop hl
0439F1 C9          0196*      ret
0439F2             0197*  
0439F2             0198*  prt_loop_start:
0439F2 E5          0199*      push hl
0439F3 21 00 00 00 0200*  	ld hl,0
0439F7 22 D5 39 04 0201*  	ld (prt_irq_counter),hl
0439FB E1          0202*      pop hl
0439FC C9          0203*      ret
0439FD             0204*  
0439FD             0205*  prt_loop_stop:
0439FD E5          0206*      push hl
0439FE D5          0207*      push de
0439FF 2A D5 39 04 0208*      ld hl,(prt_irq_counter)
043A03 ED 5B 46 3A 0209*      ld de,(prt_loop_counter)
       04          
043A08 19          0210*      add hl,de
043A09 22 46 3A 04 0211*      ld (prt_loop_counter),hl
043A0D 21 00 00 00 0212*      ld hl,0
043A11 22 D5 39 04 0213*      ld (prt_irq_counter),hl
043A15 2A 49 3A 04 0214*      ld hl,(prt_loops)
043A19 23          0215*      inc hl
043A1A 22 49 3A 04 0216*      ld (prt_loops),hl
043A1E D1          0217*      pop de
043A1F E1          0218*      pop hl
043A20 C9          0219*      ret
043A21             0220*  
043A21             0221*  ; inputs: bc = y,x text coordinates to print
043A21             0222*  prt_loop_print:
043A21 F5          0223*      push af
043A22 E5          0224*      push hl
043A23 C5          0225*      push bc
043A24 D5          0226*      push de
043A25 DD E5       0227*      push ix
043A27 FD E5       0228*      push iy
043A29 CD 09 29 04 0229*      call vdu_move_cursor
043A2D             0230*  
043A2D 2A 46 3A 04 0231*      ld hl,(prt_loop_counter)
043A31 CD 2A 2E 04 0232*      call printDec
043A35             0233*  
043A35 2A 49 3A 04 0234*      ld hl,(prt_loops)
043A39 CD 2A 2E 04 0235*      call printDec
043A3D             0236*  
043A3D FD E1       0237*      pop iy
043A3F DD E1       0238*      pop ix
043A41 D1          0239*      pop de
043A42 C1          0240*      pop bc
043A43 E1          0241*      pop hl
043A44 F1          0242*      pop af
043A45 C9          0243*      ret
043A46             0244*  
043A46             0245*  prt_loop_counter:
043A46 00 00 00    0246*      .dl 0
043A49             0247*  prt_loops:
043A49 00 00 00    0248*      .dl 0
043A4C             0249*  
043A4C             0250*  ; ===============================================
043A4C             0251*  ; Timer functions
043A4C             0252*  ; -----------------------------------------------
043A4C             0253*  ; set a countdown timer
043A4C             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043A4C             0255*  ; returns: hl = current time
043A4C             0256*  tmr_set:
043A4C FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
043A4F             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
043A4F 3E 08       0001*M 			LD	A, function
043A51 5B CF       0002*M 			RST.LIL	08h
043A53 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
043A56 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
043A59 C9          0261*      ret
043A5A             0262*  
043A5A             0263*  ; gets time remaining on a countdown timer
043A5A             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043A5A             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
043A5A             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
043A5A             0267*  tmr_get:
043A5A             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
043A5A 3E 08       0001*M 			LD	A, function
043A5C 5B CF       0002*M 			RST.LIL	08h
043A5E DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
043A61 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
043A64 AF          0271*      xor a                   ; clear carry
043A65 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
043A67 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
043A6A AF          0274*      xor a                   ; clear carry
043A6B ED 5A       0275*      adc hl,de               ; hl = time remaining
043A6D             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
043A6D C9          0277*      ret
043A6E             0278*  
043A6E             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
043A74             0280*  
043A74 00 00 00    0281*  timestamp_now: dl 0
043A77 00 00 00    0282*  timestamp_old: dl 0
043A7A 00 00 00    0283*  timestamp_chg: dl 0
043A7D             0284*  
043A7D             0285*  ; update the global timestamp from the system clock
043A7D             0286*  ; inputs: none
043A7D             0287*  ; returns: hl = time elapsed in 1/120ths of a second
043A7D             0288*  ;          de = current time
043A7D             0289*  ;          ix = pointer to syvars table
043A7D             0290*  ; destroys: af,hl,de,ix
043A7D             0291*  timestamp_tick:
043A7D ED 5B 74 3A 0292*      ld de,(timestamp_now)   ; get previous time
       04          
043A82 ED 53 77 3A 0293*      ld (timestamp_old),de   ; save previous time
       04          
043A87             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
043A87 3E 08       0001*M 			LD	A, function
043A89 5B CF       0002*M 			RST.LIL	08h
043A8B DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
043A8E 22 74 3A 04 0296*      ld (timestamp_now),hl   ; save current time
043A92 AF          0297*      xor a                   ; clear carry
043A93 ED 52       0298*      sbc hl,de               ; hl = time elapsed
043A95 22 7A 3A 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
043A99 C9          0300*      ret
043A9A             0301*  
043A9A             0302*  ; set a countdown timer
043A9A             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043A9A             0304*  ; requires: timestamp_tick to be called at least once before this function
043A9A             0305*  ; returns: hl = current time
043A9A             0306*  ; destroys: hl
043A9A             0307*  timestamp_tmr_set:
043A9A FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
043A9D 2A 74 3A 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
043AA1 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
043AA4 C9          0311*      ret
043AA5             0312*  
043AA5             0313*  ; gets time remaining on a countdown timer following the global timestamp
043AA5             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043AA5             0315*  ; requires: timestamp_tick to be called at least once before this function
043AA5             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
043AA5             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
043AA5             0318*  ; destroys: af,hl,de
043AA5             0319*  timestamp_tmr_get:
043AA5 ED 5B 74 3A 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
043AAA FD 27 00    0321*      ld hl,(iy+0)            ; get start time
043AAD AF          0322*      xor a                   ; clear carry
043AAE ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
043AB0 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
043AB3 AF          0325*      xor a                   ; clear carry
043AB4 ED 5A       0326*      adc hl,de               ; hl = time remaining
043AB6             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
043AB6 C9          0328*      ret
043AB7             0329*  
043AB7             0330*  ; set a stopwatch
043AB7             0331*  ; returns: hl = start time
043AB7             0332*  ; destroys: hl,ix
043AB7             0333*  stopwatch_set:
043AB7             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
043AB7 3E 08       0001*M 			LD	A, function
043AB9 5B CF       0002*M 			RST.LIL	08h
043ABB DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
043ABE 22 D3 3A 04 0336*      ld (stopwatch_started),hl            ; set start time
043AC2 C9          0337*      ret
043AC3             0338*  
043AC3             0339*  ; gets time elapsed on a stopwatch
043AC3             0340*  ; returns: hl = time elapsed in 1/120ths of a second
043AC3             0341*  ; destroys: af,hl,de,ix
043AC3             0342*  stopwatch_get:
043AC3             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
043AC3 3E 08       0001*M 			LD	A, function
043AC5 5B CF       0002*M 			RST.LIL	08h
043AC7 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
043ACA ED 5B D3 3A 0345*      ld de,(stopwatch_started)            ; get start time
       04          
043ACF AF          0346*      xor a                   ; clear carry
043AD0 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
043AD2 C9          0348*      ret
043AD3             0349*  
043AD3             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
043AD6             0351*  
043AD6             0352*  ; ------------------
043AD6             0353*  ; delay routine
043AD6             0354*  ; Author: Richard Turrnidge
043AD6             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
043AD6             0356*  ; routine waits a fixed time,then returns
043AD6             0357*  ; arrive with A =  the delay byte. One bit to be set only.
043AD6             0358*  ; eg. ld A,00000100b
043AD6             0359*  
043AD6             0360*  multiPurposeDelay:
043AD6 F5          0361*      push af
043AD7 C5          0362*      push bc
043AD8 DD E5       0363*      push ix
043ADA 47          0364*      ld b,a
043ADB 3E 08       0365*      ld a,$08
043ADD 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
043ADF             0367*  
043ADF             0368*  waitLoop:
043ADF             0369*  
043ADF DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
043AE2             0371*  
043AE2             0372*                                  ;   we check if bit set is same as last time we checked.
043AE2             0373*                                  ;   bit 0 - don't use
043AE2             0374*                                  ;   bit 1 - changes 64 times per second
043AE2             0375*                                  ;   bit 2 - changes 32 times per second
043AE2             0376*                                  ;   bit 3 - changes 16 times per second
043AE2             0377*  
043AE2             0378*                                  ;   bit 4 - changes 8 times per second
043AE2             0379*                                  ;   bit 5 - changes 4 times per second
043AE2             0380*                                  ;   bit 6 - changes 2 times per second
043AE2             0381*                                  ;   bit 7 - changes 1 times per second
043AE2 A0          0382*      and b
043AE3 4F          0383*      ld c,a
043AE4 3A F5 3A 04 0384*      ld a,(oldTimeStamp)
043AE8 B9          0385*      cp c                        ; is A same as last value?
043AE9 28 F4       0386*      jr z,waitLoop              ; loop here if it is
043AEB 79          0387*      ld a,c
043AEC 32 F5 3A 04 0388*      ld (oldTimeStamp),a        ; set new value
043AF0             0389*  
043AF0 DD E1       0390*      pop ix
043AF2 C1          0391*      pop bc
043AF3 F1          0392*      pop af
043AF4 C9          0393*      ret
043AF5             0394*  
043AF5 00          0395*  oldTimeStamp:   .db 00h
043AF6             0030   	include "src/asm/vdu_wolf3d.inc"
043AF6             0001*  ; global constants and variables
043AF6             0002*  sid: equ 0x1000 ; scene id is a 16-bit bufferID holding the wolf3d control structure
043AF6             0003*  mid: equ 1 ; model id is an 8-bit unsigned integer used by wolf3d internally
043AF6             0004*  oid: equ 1 ; object id is an 8-bit unsigned integer used by wolf3d internally
043AF6             0005*  obj_scale: equ 256 * 10
043AF6             0006*  objbmid: equ 0x1001
043AF6             0007*  tgtbmid: equ 0x1002
043AF6             0008*  
043AF6             0009*  cstw: equ 240 ; 256
043AF6             0010*  csth: equ 160 ; 128
043AF6             0011*  cstx: equ 40  ; 32
043AF6             0012*  csty: equ 32  ; 20
043AF6             0013*  
043AF6             0014*  camd: equ 32*1 ; 32767/256 * bar
043AF6 00 00 00    0015*  camx: dl  0*camd
043AF9 00 00 00    0016*  camy: dl  0*camd
043AFC 00 00 00    0017*  camz: dl  0*camd
043AFF             0018*  
043AFF 00 00 00    0019*  camdx: dl 0x000000
043B02 00 00 00    0020*  camdy: dl 0x000000
043B05 00 00 00    0021*  camdz: dl 0x000000
043B08             0022*  
043B08             0023*  camdr: equ 91*5 ; 32767/360*foo
043B08 00 00 00    0024*  camrx: dl 0x000000
043B0B 00 00 00    0025*  camry: dl 0x000000
043B0E 00 00 00    0026*  camrz: dl 0x000000
043B11             0027*  
043B11 00 00 00    0028*  camdrx: dl 0x000000
043B14 00 00 00    0029*  camdry: dl 0x000000
043B17 00 00 00    0030*  camdrz: dl 0x000000
043B1A             0031*  
043B1A             0032*  objdr: equ 91*5 ; 32767/360*foo
043B1A 00 00 00    0033*  objdrx: dl 0
043B1D 00 00 00    0034*  objdry: dl 0
043B20 00 00 00    0035*  objdrz: dl 0
043B23             0036*  
043B23 00 00 00    0037*  objrx: dl 0
043B26 00 00 00    0038*  objry: dl 0
043B29 00 00 00    0039*  objrz: dl 0
043B2C             0040*  
043B2C             0041*  objd: equ 32*1 ; 32767/256 * bar
043B2C 00 00 00    0042*  objx: dl 0*objd
043B2F 00 00 00    0043*  objy: dl 0 ; -42 ; -1/3*objd
043B32 40 FC FF    0044*  objz: dl -30*objd
043B35             0045*  
043B35 00 00 00    0046*  objdx: dl 0x000000
043B38 00 00 00    0047*  objdy: dl 0x000000
043B3B 00 00 00    0048*  objdz: dl 0x000000
043B3E             0049*  
043B3E             0050*  filetype: equ 0 ; rgba8
043B3E             0051*  
043B3E 00          0052*  dithering_type: db 0x00 ; 0=none, 1=bayer ordered matrix, 2=floyd-steinberg
043B3F             0053*  
043B3F             0054*  ; create wolf control structure
043B3F             0055*      MACRO CCS SID, SCENE_WIDTH, SCENE_HEIGHT
043B3F             0056*      ld hl,@beg
043B3F             0057*      ld bc,@end-@beg
043B3F             0058*      rst.lil $18
043B3F             0059*      jp @end
043B3F             0060*  @beg:
043B3F             0061*  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
043B3F             0062*      db 23,0,$A0
043B3F             0063*      dw SID
043B3F             0064*      db $49,0
043B3F             0065*      dw SCENE_WIDTH
043B3F             0066*      dw SCENE_HEIGHT
043B3F             0067*  @end:
043B3F             0068*      ENDMACRO
043B3F             0069*  
043B3F             0070*  ; DEFINE MESH VERTICES
043B3F             0071*      MACRO SV SID, MID, VERTICES, VERTICES_N
043B3F             0072*      ld hl,@beg
043B3F             0073*      ld bc,@end-@beg
043B3F             0074*      rst.lil $18
043B3F             0075*      jp @end
043B3F             0076*  @beg:
043B3F             0077*  ;   VDU 23,0, &A0, sid%; &49, 1, mid%; VERTICES%; Define Mesh Vertices
043B3F             0078*      db 23,0,$A0
043B3F             0079*      dw SID
043B3F             0080*      db $49,1
043B3F             0081*      dw MID, VERTICES_N
043B3F             0082*  @end:
043B3F             0083*      ld hl,VERTICES
043B3F             0084*      ld bc,VERTICES_N*6 ; 3 coordinates per vertex, 2 bytes per coordinate
043B3F             0085*      rst.lil $18
043B3F             0086*      ENDMACRO
043B3F             0087*  
043B3F             0088*  ; DEFINE MESH VERTEX INDICES
043B3F             0089*      MACRO SMVI SID, MID, VERTEX_INDICES, INDICES_N
043B3F             0090*      ld hl,@beg
043B3F             0091*      ld bc,@end-@beg
043B3F             0092*      rst.lil $18
043B3F             0093*      jp @end
043B3F             0094*  @beg:
043B3F             0095*  ;   VDU 23,0, &A0, sid%; &49, 2, mid%; model_indices%; Set Mesh Vertex indices
043B3F             0096*      db 23,0,$A0
043B3F             0097*      dw SID
043B3F             0098*      db $49,2
043B3F             0099*      dw MID, INDICES_N
043B3F             0100*  @end:
043B3F             0101*      ld hl,VERTEX_INDICES
043B3F             0102*      ld bc,INDICES_N*2 ; 2 bytes per index
043B3F             0103*      rst.lil $18
043B3F             0104*      ENDMACRO
043B3F             0105*  
043B3F             0106*  ; DEFINE MESH TEXTURE COORDINATES
043B3F             0107*      MACRO STC SID, MID, UVS, UVS_N
043B3F             0108*      ld hl,@beg
043B3F             0109*      ld bc,@end-@beg
043B3F             0110*      rst.lil $18
043B3F             0111*      jp @end
043B3F             0112*  @beg:
043B3F             0113*  ;   VDU 23, 0, &A0, sid; &49, 3, mid; n; u0; v0; ... :  Define Mesh Texture Coordinates
043B3F             0114*      db 23,0,$A0
043B3F             0115*      dw SID
043B3F             0116*      db $49,3
043B3F             0117*      dw MID, UVS_N
043B3F             0118*  @end:
043B3F             0119*      ld hl,UVS
043B3F             0120*      ld bc,UVS_N*4 ; 2 coordinates per uv, 2 bytes per coordinate
043B3F             0121*      rst.lil $18
043B3F             0122*      ENDMACRO
043B3F             0123*  
043B3F             0124*  ; SET MESH TEXTURE COORDINATE INDEXES
043B3F             0125*      MACRO STCI SID, MID, UV_INDICES, INDICES_N
043B3F             0126*      ld hl,@beg
043B3F             0127*      ld bc,@end-@beg
043B3F             0128*      rst.lil $18
043B3F             0129*      jp @end
043B3F             0130*  @beg:
043B3F             0131*  ;   VDU 23, 0, &A0, sid; &49, 4, mid; n; i0; ... :  Set Texture Coordinate Indexes
043B3F             0132*      db 23,0,$A0
043B3F             0133*      dw SID
043B3F             0134*      db $49,4
043B3F             0135*      dw MID, INDICES_N
043B3F             0136*  @end:
043B3F             0137*      ld hl,UV_INDICES
043B3F             0138*      ld bc,INDICES_N*2 ; 2 bytes per index
043B3F             0139*      rst.lil $18
043B3F             0140*      ENDMACRO
043B3F             0141*  
043B3F             0142*  ; DEFINE MESH NORMALS
043B3F             0143*      MACRO SN SID, MID, NORMALS, NORMALS_N
043B3F             0144*      ld hl,@beg
043B3F             0145*      ld bc,@end-@beg
043B3F             0146*      rst.lil $18
043B3F             0147*      jp @end
043B3F             0148*  @beg:
043B3F             0149*  ;   VDU 23, 0, &A0, sid; &49, 129, mid; n; x0; y0; z0; ... :  Define Mesh Normals
043B3F             0150*      db 23,0,$A0
043B3F             0151*      dw SID
043B3F             0152*      db $49,129
043B3F             0153*      dw MID, NORMALS_N
043B3F             0154*  @end:
043B3F             0155*      ld hl,NORMALS
043B3F             0156*      ld bc,NORMALS_N*6 ; 3 coordinates per normal, 2 bytes per coordinate
043B3F             0157*      rst.lil $18
043B3F             0158*      ENDMACRO
043B3F             0159*  
043B3F             0160*  ; SET MESH NORMAL INDEXES
043B3F             0161*      MACRO SMNI SID, MID, NORMAL_INDICES, INDICES_N
043B3F             0162*      ld hl,@beg
043B3F             0163*      ld bc,@end-@beg
043B3F             0164*      rst.lil $18
043B3F             0165*      jp @end
043B3F             0166*  @beg:
043B3F             0167*  ;   VDU 23, 0, &A0, sid; &49, 130, mid; n; i0; ... :  Set Mesh Normal Indexes
043B3F             0168*      db 23,0,$A0
043B3F             0169*      dw SID
043B3F             0170*      db $49,130
043B3F             0171*      dw MID, INDICES_N
043B3F             0172*  @end:
043B3F             0173*      ld hl,NORMAL_INDICES
043B3F             0174*      ld bc,INDICES_N*2 ; 2 bytes per index
043B3F             0175*      rst.lil $18
043B3F             0176*      ENDMACRO
043B3F             0177*  
043B3F             0178*  ; CREATE OBJECT
043B3F             0179*      MACRO CO SID, OID, MID, BMID
043B3F             0180*      ld hl,@beg
043B3F             0181*      ld bc,@end-@beg
043B3F             0182*      rst.lil $18
043B3F             0183*      jp @end
043B3F             0184*  @beg:
043B3F             0185*  ;   VDU 23, 0, &A0, sid; &49, 5, oid; mid; bmid; :  Create Object
043B3F             0186*      db 23,0,$A0
043B3F             0187*      dw SID
043B3F             0188*      db $49,5
043B3F             0189*      dw OID
043B3F             0190*      dw MID
043B3F             0191*      dw BMID
043B3F             0192*  @end:
043B3F             0193*      ENDMACRO
043B3F             0194*  
043B3F             0195*  ; SET OBJECT XYZ SCALE FACTORS
043B3F             0196*      MACRO SO SID, OID, SCALEX, SCALEY, SCALEZ
043B3F             0197*      ld hl,@beg
043B3F             0198*      ld bc,@end-@beg
043B3F             0199*      rst.lil $18
043B3F             0200*      jp @end
043B3F             0201*  @beg:
043B3F             0202*  ;   VDU 23, 0, &A0, sid%; &49, 9, oid%; scale; scale; scale; Set Object XYZ Scale Factors
043B3F             0203*      db 23,0,$A0
043B3F             0204*      dw SID
043B3F             0205*      db $49,9
043B3F             0206*      dw OID
043B3F             0207*      dw SCALEX
043B3F             0208*      dw SCALEY
043B3F             0209*      dw SCALEZ
043B3F             0210*  @end:
043B3F             0211*      ENDMACRO
043B3F             0212*  
043B3F             0213*  ; CREATE RENDER TARGET BITMAP
043B3F             0214*      MACRO CTB BMID, SCENE_WIDTH, SCENE_HEIGHT
043B3F             0215*      ld hl,@beg
043B3F             0216*      ld bc,@end-@beg
043B3F             0217*      rst.lil $18
043B3F             0218*      jp @end
043B3F             0219*  @beg:
043B3F             0220*  ;   VDU 23, 27, &20, bmid2% Select output bitmap
043B3F             0221*      db 23,27,$20
043B3F             0222*      dw BMID
043B3F             0223*  ;   VDU 23, 27, 2, cstw%; csth%; &0000; &00C0; Create solid color bitmap
043B3F             0224*      db 23,27,2
043B3F             0225*      dw SCENE_WIDTH
043B3F             0226*      dw SCENE_HEIGHT
043B3F             0227*      dw $0000
043B3F             0228*      dw $00C0
043B3F             0229*  @end:
043B3F             0230*      ENDMACRO
043B3F             0231*  
043B3F             0232*  ; RENDER TO TARGET BITMAP
043B3F             0233*      MACRO RENDBMP SID, BMID
043B3F             0234*      ld hl,@beg
043B3F             0235*      ld bc,@end-@beg
043B3F             0236*      rst.lil $18
043B3F             0237*      jp @end
043B3F             0238*  @beg:
043B3F             0239*  ;  1040 VDU 23, 0, &A0, sid%; &49, 38, bmid%; Render To Bitmap
043B3F             0240*      db 23, 0, $A0
043B3F             0241*      dw SID
043B3F             0242*      db $49, 38
043B3F             0243*      dw BMID
043B3F             0244*  @end:
043B3F             0245*      ENDMACRO
043B3F             0246*  
043B3F             0247*  ; DISPLAY RENDER TARGET BITMAP
043B3F             0248*      MACRO DISPBMP BMID, X, Y
043B3F             0249*      ld hl,@beg
043B3F             0250*      ld bc,@end-@beg
043B3F             0251*      rst.lil $18
043B3F             0252*      jp @end
043B3F             0253*  @beg:
043B3F             0254*  ;   VDU 23, 27, &20, bmid% Select output bitmap
043B3F             0255*      db 23,27,$20
043B3F             0256*      dw BMID
043B3F             0257*  ;   VDU 23, 27, 3, 0; 0; Display output bitmap
043B3F             0258*      db 23,27,3
043B3F             0259*      dw X,Y
043B3F             0260*  @end:
043B3F             0261*      ENDMACRO
043B3F             0262*  
043B3F             0263*  ; set wolf camera distance
043B3F             0264*  ; inputs: bc distx, de disty, iy distz
043B3F             0265*  scdabs:
043B3F ED 43 60 3B 0266*      ld (@x),bc
       04          
043B44 ED 53 62 3B 0267*      ld (@y),de
       04          
043B49 FD 22 64 3B 0268*      ld (@z),iy
       04          
043B4E 21 59 3B 04 0269*      ld hl,@beg
043B52 01 0D 00 00 0270*      ld bc,@end-@beg
043B56 5B DF       0271*      rst.lil $18
043B58 C9          0272*      ret
043B59             0273*  @beg:
043B59             0274*  ;   360 VDU 23,0, &A0, sid%; &49, 25, distx; disty; distz; Set Camera XYZ Translation Distances
043B59 17 00 A0    0275*      db 23,0,$A0
043B5C 00 10       0276*      dw sid
043B5E 49 19       0277*      db $49,25
043B60 00 00       0278*  @x: dw 0x0000
043B62 00 00       0279*  @y: dw 0x0000
043B64 00 00       0280*  @z: dw 0x0000
043B66 00          0281*  @end: db 0x00 ; padding
043B67             0282*  
043B67             0283*  ; set wolf camera rotation angkes
043B67             0284*  ; inputs: bc anglex, de angley, iy anglez
043B67             0285*  scrabs:
043B67 ED 43 88 3B 0286*      ld (@rx),bc
       04          
043B6C ED 53 8A 3B 0287*      ld (@ry),de
       04          
043B71 FD 22 8C 3B 0288*      ld (@rz),iy
       04          
043B76 21 81 3B 04 0289*      ld hl,@beg
043B7A 01 0D 00 00 0290*      ld bc,@end-@beg
043B7E 5B DF       0291*      rst.lil $18
043B80 C9          0292*      ret
043B81             0293*  @beg:
043B81             0294*  ; VDU 23, 0, &A0, sid; &49, 21, anglex; angley; anglez; : Set Camera XYZ Rotation Angles
043B81 17 00 A0    0295*          db 23,0,$A0
043B84 00 10       0296*          dw sid
043B86 49 12       0297*          db $49,18
043B88 00 00       0298*  @rx:    dw 0x0000
043B8A 00 00       0299*  @ry:    dw 0x0000
043B8C 00 00       0300*  @rz:    dw 0x0000
043B8E 00          0301*  @end:   db 0x00 ; padding
043B8F             0302*  
043B8F             0303*  ; set wolf object distance
043B8F             0304*  ; inputs: hl oid, bc distx, de disty, iy distz
043B8F             0305*  sodabs:
043B8F 22 B4 3B 04 0306*      ld (@oid),hl
043B93 ED 43 B6 3B 0307*      ld (@x),bc
       04          
043B98 ED 53 B8 3B 0308*      ld (@y),de
       04          
043B9D FD 22 BA 3B 0309*      ld (@z),iy
       04          
043BA2 21 AD 3B 04 0310*      ld hl,@beg
043BA6 01 0F 00 00 0311*      ld bc,@end-@beg
043BAA 5B DF       0312*      rst.lil $18
043BAC C9          0313*      ret
043BAD             0314*  @beg:
043BAD             0315*  ; VDU 23, 0, &A0, sid; &49, 17, oid; distx; disty; distz; : Set Object XYZ Translation Distances
043BAD 17 00 A0    0316*          db 23, 0, $A0
043BB0 00 10       0317*          dw sid
043BB2 49 11       0318*          db $49, 17
043BB4 00 00       0319*  @oid:   dw 0
043BB6 00 00       0320*  @x:     dw 0
043BB8 00 00       0321*  @y:     dw 0
043BBA 00 00       0322*  @z:     dw 0
043BBC 00          0323*  @end:   db 0 ; padding
043BBD             0324*  
043BBD             0325*  ; set wolf object rotation angkes
043BBD             0326*  ; inputs: hl oid, bc anglex, de angley, iy anglez
043BBD             0327*  sorabs:
043BBD 22 E2 3B 04 0328*      ld (@oid),hl
043BC1 ED 43 E4 3B 0329*      ld (@rx),bc
       04          
043BC6 ED 53 E6 3B 0330*      ld (@ry),de
       04          
043BCB FD 22 E8 3B 0331*      ld (@rz),iy
       04          
043BD0 21 DB 3B 04 0332*      ld hl,@beg
043BD4 01 0F 00 00 0333*      ld bc,@end-@beg
043BD8 5B DF       0334*      rst.lil $18
043BDA C9          0335*      ret
043BDB             0336*  @beg:
043BDB             0337*  ;  1120 VDU 23, 0, &A0, sid%; &49, 13, oid%; rx; ry; rz; Set Object XYZ Rotation Angles
043BDB 17 00 A0    0338*          db 23, 0, $A0
043BDE 00 10       0339*          dw sid
043BE0 49 0D       0340*          db $49, 13
043BE2 00 00       0341*  @oid:   dw 0
043BE4 00 00       0342*  @rx:    dw 0
043BE6 00 00       0343*  @ry:    dw 0
043BE8 00 00       0344*  @rz:    dw 0
043BEA 00          0345*  @end:   db 0 ; padding
043BEB             0346*  
043BEB             0347*  ; set wolf camera distance relative
043BEB             0348*  ; inputs: bc distx, de disty, iy distz
043BEB             0349*  scdrel:
043BEB ED 43 0C 3C 0350*      ld (@x),bc
       04          
043BF0 ED 53 0E 3C 0351*      ld (@y),de
       04          
043BF5 FD 22 10 3C 0352*      ld (@z),iy
       04          
043BFA 21 05 3C 04 0353*      ld hl,@beg
043BFE 01 0D 00 00 0354*      ld bc,@end-@beg
043C02 5B DF       0355*      rst.lil $18
043C04 C9          0356*      ret
043C05             0357*  @beg:
043C05             0358*  ;   360 VDU 23,0, &A0, sid%; &49, 153, distx; disty; distz; Set Camera XYZ Translation Distances Relative
043C05 17 00 A0    0359*      db 23,0,$A0
043C08 00 10       0360*      dw sid
043C0A 49 99       0361*      db $49,153
043C0C 00 00       0362*  @x: dw 0x0000
043C0E 00 00       0363*  @y: dw 0x0000
043C10 00 00       0364*  @z: dw 0x0000
043C12 00          0365*  @end: db 0x00 ; padding
043C13             0366*  
043C13             0367*  ; set wolf camera rotation angkes relative
043C13             0368*  ; inputs: bc anglex, de angley, iy anglez
043C13             0369*  scrrel:
043C13 ED 43 34 3C 0370*      ld (@rx),bc
       04          
043C18 ED 53 36 3C 0371*      ld (@ry),de
       04          
043C1D FD 22 38 3C 0372*      ld (@rz),iy
       04          
043C22 21 2D 3C 04 0373*      ld hl,@beg
043C26 01 0D 00 00 0374*      ld bc,@end-@beg
043C2A 5B DF       0375*      rst.lil $18
043C2C C9          0376*      ret
043C2D             0377*  @beg:
043C2D             0378*  ; VDU 23, 0, &A0, sid; &49, 149, anglex; angley; anglez; : Set Camera XYZ Rotation Angles Relative
043C2D 17 00 A0    0379*          db 23,0,$A0
043C30 00 10       0380*          dw sid
043C32 49 95       0381*          db $49,149
043C34 00 00       0382*  @rx:    dw 0x0000
043C36 00 00       0383*  @ry:    dw 0x0000
043C38 00 00       0384*  @rz:    dw 0x0000
043C3A 00          0385*  @end:   db 0x00 ; padding
043C3B             0386*  
043C3B             0387*  ; VDU 23, 0, &A0, sid; &49, 42, oid; : Rotate Camera Locally to track a specified object
043C3B             0388*  ; inputs: hl oid
043C3B             0389*  cto:
043C3B 22 51 3C 04 0390*      ld (@oid),hl
043C3F 21 4A 3C 04 0391*      ld hl,@beg
043C43 01 09 00 00 0392*      ld bc,@end-@beg
043C47 5B DF       0393*      rst.lil $18
043C49 C9          0394*      ret
043C4A             0395*  @beg:
043C4A 17 00 A0    0396*      db 23, 0, $A0
043C4D 00 10       0397*      dw sid
043C4F 49 2A       0398*      db $49, 42
043C51 00 00       0399*  @oid:   dw 0
043C53 00          0400*  @end:   db 0 ; padding
043C54             0401*  
043C54             0402*  ; set wolf object distance
043C54             0403*  ; inputs: hl oid, bc distx, de disty, iy distz
043C54             0404*  sodrel:
043C54 22 79 3C 04 0405*      ld (@oid),hl
043C58 ED 43 7B 3C 0406*      ld (@x),bc
       04          
043C5D ED 53 7D 3C 0407*      ld (@y),de
       04          
043C62 FD 22 7F 3C 0408*      ld (@z),iy
       04          
043C67 21 72 3C 04 0409*      ld hl,@beg
043C6B 01 0F 00 00 0410*      ld bc,@end-@beg
043C6F 5B DF       0411*      rst.lil $18
043C71 C9          0412*      ret
043C72             0413*  @beg:
043C72             0414*  ; VDU 23, 0, &A0, sid; &49, 145, oid; distx; disty; distz; : Set Object XYZ Translation Distances Relative
043C72 17 00 A0    0415*          db 23, 0, $A0
043C75 00 10       0416*          dw sid
043C77 49 91       0417*          db $49, 145
043C79 00 00       0418*  @oid:   dw 0
043C7B 00 00       0419*  @x:     dw 0
043C7D 00 00       0420*  @y:     dw 0
043C7F 00 00       0421*  @z:     dw 0
043C81 00          0422*  @end:   db 0 ; padding
043C82             0423*  
043C82             0424*  ; set wolf object rotation angkes
043C82             0425*  ; inputs: hl oid, bc anglex, de angley, iy anglez
043C82             0426*  sorrel:
043C82 22 A7 3C 04 0427*      ld (@oid),hl
043C86 ED 43 A9 3C 0428*      ld (@rx),bc
       04          
043C8B ED 53 AB 3C 0429*      ld (@ry),de
       04          
043C90 FD 22 AD 3C 0430*      ld (@rz),iy
       04          
043C95 21 A0 3C 04 0431*      ld hl,@beg
043C99 01 0F 00 00 0432*      ld bc,@end-@beg
043C9D 5B DF       0433*      rst.lil $18
043C9F C9          0434*      ret
043CA0             0435*  @beg:
043CA0             0436*  ;  1120 VDU 23, 0, &A0, sid%; &49, 141, oid%; rx; ry; rz; Set Object XYZ Rotation Angles Relative
043CA0 17 00 A0    0437*          db 23, 0, $A0
043CA3 00 10       0438*          dw sid
043CA5 49 8D       0439*          db $49, 141
043CA7 00 00       0440*  @oid:   dw 0
043CA9 00 00       0441*  @rx:    dw 0
043CAB 00 00       0442*  @ry:    dw 0
043CAD 00 00       0443*  @rz:    dw 0
043CAF 00          0444*  @end:   db 0 ; padding
043CB0             0445*  
043CB0             0446*  cycle_dithering:
043CB0 3A 3E 3B 04 0447*      ld a,(dithering_type)
043CB4 3C          0448*      inc a
043CB5 FE 03       0449*      cp 3
043CB7 20 01       0450*      jr nz,@set
043CB9 AF          0451*      xor a
043CBA             0452*  @set:
043CBA 32 3E 3B 04 0453*      ld (dithering_type),a
043CBE             0454*  ; fall through to vdu_set_dither
043CBE             0455*  
043CBE             0456*  ; set dithering type
043CBE             0457*  ; inputs: a = dithering type/optons
043CBE             0458*  ; dithering types bits 0-1: 00 none (default), 01 bayer ordered matrix, 10 floyd-steinberg
043CBE             0459*  vdu_set_dither:
043CBE             0460*  ; VDU 23, 0, &A0, sid; &49, 41, type
043CBE 32 D4 3C 04 0461*      ld (@dt),a
043CC2 21 CD 3C 04 0462*      ld hl,@beg
043CC6 01 08 00 00 0463*      ld bc,@end-@beg
043CCA 5B DF       0464*      rst.lil $18
043CCC C9          0465*      ret
043CCD             0466*  @beg:
043CCD 17 00 A0    0467*          db 23,0,$A0
043CD0 00 10       0468*          dw sid
043CD2 49 29       0469*          db $49,41
043CD4 00          0470*  @dt:    db 0x00
043CD5             0471*  @end:
043CD5             0472*  
043CD5             0473*  move_object_abs:
043CD5 CD F1 2D 04 0474*      call printNewLine
043CD9             0475*  
043CD9 2A 2C 3B 04 0476*      ld hl,(objx)
043CDD ED 5B 35 3B 0477*      ld de,(objdx)
       04          
043CE2 19          0478*      add hl,de
043CE3 22 2F 3D 04 0479*      ld (@x),hl
043CE7 22 2C 3B 04 0480*      ld (objx),hl
043CEB CD 2A 2E 04 0481*      call printDec
043CEF             0482*  
043CEF 2A 2F 3B 04 0483*      ld hl,(objy)
043CF3 ED 5B 38 3B 0484*      ld de,(objdy)
       04          
043CF8 19          0485*      add hl,de
043CF9 22 31 3D 04 0486*      ld (@y),hl
043CFD 22 2F 3B 04 0487*      ld (objy),hl
043D01 CD 2A 2E 04 0488*      call printDec
043D05             0489*  
043D05 2A 32 3B 04 0490*      ld hl,(objz)
043D09 ED 5B 3B 3B 0491*      ld de,(objdz)
       04          
043D0E 19          0492*      add hl,de
043D0F 22 33 3D 04 0493*      ld (@z),hl
043D13 22 32 3B 04 0494*      ld (objz),hl
043D17 CD 2A 2E 04 0495*      call printDec
043D1B             0496*  
043D1B 21 26 3D 04 0497*      ld hl,@beg
043D1F 01 0F 00 00 0498*      ld bc,@end-@beg
043D23 5B DF       0499*      rst.lil $18
043D25 C9          0500*      ret
043D26             0501*  @beg:
043D26             0502*  ; VDU 23, 0, &A0, sid; &49, 17, oid; distx; disty; distz; : Set Object XYZ Translation Distances
043D26 17 00 A0    0503*          db 23, 0, $A0
043D29 00 10       0504*          dw sid
043D2B 49 11       0505*          db $49, 17
043D2D 01 00       0506*          dw oid
043D2F 00 00       0507*  @x:     dw 0
043D31 00 00       0508*  @y:     dw 0
043D33 00 00       0509*  @z:     dw 0
043D35 00          0510*  @end:   db 0 ; padding
043D36             0511*  
043D36             0512*  rotate_object_abs:
043D36             0513*  ;  1080 objrx=objrx+objdrx: IF objrx>=pi2 THEN objrx=objrx-pi2
043D36 2A 23 3B 04 0514*      ld hl,(objrx)
043D3A ED 5B 1A 3B 0515*      ld de,(objdrx)
       04          
043D3F 19          0516*      add hl,de
043D40 22 8C 3D 04 0517*      ld (@rx),hl
043D44 22 23 3B 04 0518*      ld (objrx),hl
043D48 CD 2A 2E 04 0519*      call printDec
043D4C             0520*  ;  1090 objry=objry+objdry: IF objry>=pi2 THEN objry=objry-pi2
043D4C 2A 26 3B 04 0521*      ld hl,(objry)
043D50 ED 5B 1D 3B 0522*      ld de,(objdry)
       04          
043D55 19          0523*      add hl,de
043D56 22 8E 3D 04 0524*      ld (@ry),hl
043D5A 22 26 3B 04 0525*      ld (objry),hl
043D5E CD 2A 2E 04 0526*      call printDec
043D62             0527*  ;  1100 objrz=objrz+objdrz: IF objrz>=pi2 THEN objrz=objrz-pi2
043D62 2A 29 3B 04 0528*      ld hl,(objrz)
043D66 ED 5B 20 3B 0529*      ld de,(objdrz)
       04          
043D6B 19          0530*      add hl,de
043D6C 22 90 3D 04 0531*      ld (@rz),hl
043D70 22 29 3B 04 0532*      ld (objrz),hl
043D74 CD 2A 2E 04 0533*      call printDec
043D78             0534*  
043D78 21 83 3D 04 0535*      ld hl,@beg
043D7C 01 0F 00 00 0536*      ld bc,@end-@beg
043D80 5B DF       0537*      rst.lil $18
043D82 C9          0538*      ret
043D83             0539*  @beg:
043D83             0540*  ;  1120 VDU 23, 0, &A0, sid%; &49, 13, oid%; rx; ry; rz; Set Object XYZ Rotation Angles
043D83 17 00 A0    0541*          db 23, 0, $A0
043D86 00 10       0542*          dw sid
043D88 49 0D       0543*          db $49, 13
043D8A 01 00       0544*          dw oid
043D8C 00 00       0545*  @rx:    dw 0
043D8E 00 00       0546*  @ry:    dw 0
043D90 00 00       0547*  @rz:    dw 0
043D92 00          0548*  @end:   db 0 ; padding
043D93             0549*  
043D93             0550*  rotate_camera_abs:
043D93 CD F1 2D 04 0551*      call printNewLine
043D97             0552*  
043D97             0553*  ;  1080 camrx=camrx+camdrx: IF camrx>=pi2 THEN camrx=camrx-pi2
043D97 2A 08 3B 04 0554*      ld hl,(camrx)
043D9B ED 5B 11 3B 0555*      ld de,(camdrx)
       04          
043DA0 19          0556*      add hl,de
043DA1 22 EB 3D 04 0557*      ld (@rx),hl
043DA5 22 08 3B 04 0558*      ld (camrx),hl
043DA9 CD 2A 2E 04 0559*      call printDec
043DAD             0560*  ;  1090 camry=camry+camdry: IF camry>=pi2 THEN camry=camry-pi2
043DAD 2A 0B 3B 04 0561*      ld hl,(camry)
043DB1 ED 5B 14 3B 0562*      ld de,(camdry)
       04          
043DB6 19          0563*      add hl,de
043DB7 22 ED 3D 04 0564*      ld (@ry),hl
043DBB 22 0B 3B 04 0565*      ld (camry),hl
043DBF CD 2A 2E 04 0566*      call printDec
043DC3             0567*  ;  1100 camrz=camrz+camdrz: IF camrz>=pi2 THEN camrz=camrz-pi2
043DC3 2A 0E 3B 04 0568*      ld hl,(camrz)
043DC7 ED 5B 17 3B 0569*      ld de,(camdrz)
       04          
043DCC 19          0570*      add hl,de
043DCD 22 EF 3D 04 0571*      ld (@rz),hl
043DD1 22 0E 3B 04 0572*      ld (camrz),hl
043DD5 CD 2A 2E 04 0573*      call printDec
043DD9             0574*  
043DD9 21 E4 3D 04 0575*      ld hl,@beg
043DDD 01 0D 00 00 0576*      ld bc,@end-@beg
043DE1 5B DF       0577*      rst.lil $18
043DE3 C9          0578*      ret
043DE4             0579*  @beg:
043DE4             0580*  ; VDU 23, 0, &A0, sid; &49, 21, anglex; angley; anglez; : Set Camera XYZ Rotation Angles
043DE4 17 00 A0    0581*          db 23, 0, $A0
043DE7 00 10       0582*          dw sid
043DE9 49 15       0583*          db $49, 21
043DEB 00 00       0584*  @rx:    dw 0
043DED 00 00       0585*  @ry:    dw 0
043DEF 00 00       0586*  @rz:    dw 0
043DF1 00          0587*  @end:   db 0 ; padding
043DF2             0588*  
043DF2             0589*  move_camera_abs:
043DF2 CD F1 2D 04 0590*      call printNewLine
043DF6             0591*  
043DF6 2A F6 3A 04 0592*      ld hl,(camx)
043DFA ED 5B FF 3A 0593*      ld de,(camdx)
       04          
043DFF 19          0594*      add hl,de
043E00 22 4A 3E 04 0595*      ld (@x),hl
043E04 22 F6 3A 04 0596*      ld (camx),hl
043E08 CD 2A 2E 04 0597*      call printDec
043E0C             0598*  
043E0C 2A F9 3A 04 0599*      ld hl,(camy)
043E10 ED 5B 02 3B 0600*      ld de,(camdy)
       04          
043E15 19          0601*      add hl,de
043E16 22 4C 3E 04 0602*      ld (@y),hl
043E1A 22 F9 3A 04 0603*      ld (camy),hl
043E1E CD 2A 2E 04 0604*      call printDec
043E22             0605*  
043E22 2A FC 3A 04 0606*      ld hl,(camz)
043E26 ED 5B 05 3B 0607*      ld de,(camdz)
       04          
043E2B 19          0608*      add hl,de
043E2C 22 4E 3E 04 0609*      ld (@z),hl
043E30 22 FC 3A 04 0610*      ld (camz),hl
043E34 CD 2A 2E 04 0611*      call printDec
043E38             0612*  
043E38 21 43 3E 04 0613*      ld hl,@beg
043E3C 01 0D 00 00 0614*      ld bc,@end-@beg
043E40 5B DF       0615*      rst.lil $18
043E42 C9          0616*      ret
043E43             0617*  @beg:
043E43             0618*  ;   VDU 23, 0, &A0, sid; &48, 25; distx; disty; distz :  Set Camera XYZ Translation Distances
043E43 17 00 A0    0619*          db 23, 0, $A0
043E46 00 10       0620*          dw sid
043E48 49 19       0621*          db $49, 25
043E4A 00 00       0622*  @x:     dw 0
043E4C 00 00       0623*  @y:     dw 0
043E4E 00 00       0624*  @z:     dw 0
043E50 00          0625*  @end:   db 0 ; padding
043E51             0626*  
043E51             0627*  
043E51             0628*  move_object_loc:
043E51 CD F1 2D 04 0629*      call printNewLine
043E55             0630*  
043E55 2A 2C 3B 04 0631*      ld hl,(objx)
043E59 ED 5B 35 3B 0632*      ld de,(objdx)
       04          
043E5E 19          0633*      add hl,de
043E5F ED 53 AE 3E 0634*      ld (@x),de
       04          
043E64 22 2C 3B 04 0635*      ld (objx),hl
043E68 CD 2A 2E 04 0636*      call printDec
043E6C             0637*  
043E6C 2A 2F 3B 04 0638*      ld hl,(objy)
043E70 ED 5B 38 3B 0639*      ld de,(objdy)
       04          
043E75 19          0640*      add hl,de
043E76 ED 53 B0 3E 0641*      ld (@y),de
       04          
043E7B 22 2F 3B 04 0642*      ld (objy),hl
043E7F CD 2A 2E 04 0643*      call printDec
043E83             0644*  
043E83 2A 32 3B 04 0645*      ld hl,(objz)
043E87 ED 5B 3B 3B 0646*      ld de,(objdz)
       04          
043E8C 19          0647*      add hl,de
043E8D ED 53 B2 3E 0648*      ld (@z),de
       04          
043E92 22 32 3B 04 0649*      ld (objz),hl
043E96 CD 2A 2E 04 0650*      call printDec
043E9A             0651*  
043E9A 21 A5 3E 04 0652*      ld hl,@beg
043E9E 01 0F 00 00 0653*      ld bc,@end-@beg
043EA2 5B DF       0654*      rst.lil $18
043EA4 C9          0655*      ret
043EA5             0656*  @beg:
043EA5             0657*  ; VDU 23, 0, &A0, sid; &49, 145, oid; distx; disty; distz :  Set Object XYZ Translation Distances
043EA5 17 00 A0    0658*          db 23, 0, $A0
043EA8 00 10       0659*          dw sid
043EAA 49 91       0660*          db $49, 145
043EAC 01 00       0661*          dw oid
043EAE 00 00       0662*  @x:     dw 0
043EB0 00 00       0663*  @y:     dw 0
043EB2 00 00       0664*  @z:     dw 0
043EB4 00          0665*  @end:   db 0 ; padding
043EB5             0666*  
043EB5             0667*  rotate_object_loc:
043EB5             0668*  ;  1080 objrx=objrx+objdrx: IF objrx>=pi2 THEN objrx=objrx-pi2
043EB5 2A 23 3B 04 0669*      ld hl,(objrx)
043EB9 ED 5B 1A 3B 0670*      ld de,(objdrx)
       04          
043EBE 19          0671*      add hl,de
043EBF ED 53 0E 3F 0672*      ld (@rx),de
       04          
043EC4 22 23 3B 04 0673*      ld (objrx),hl
043EC8 CD 2A 2E 04 0674*      call printDec
043ECC             0675*  ;  1090 objry=objry+objdry: IF objry>=pi2 THEN objry=objry-pi2
043ECC 2A 26 3B 04 0676*      ld hl,(objry)
043ED0 ED 5B 1D 3B 0677*      ld de,(objdry)
       04          
043ED5 19          0678*      add hl,de
043ED6 ED 53 10 3F 0679*      ld (@ry),de
       04          
043EDB 22 26 3B 04 0680*      ld (objry),hl
043EDF CD 2A 2E 04 0681*      call printDec
043EE3             0682*  ;  1100 objrz=objrz+objdrz: IF objrz>=pi2 THEN objrz=objrz-pi2
043EE3 2A 29 3B 04 0683*      ld hl,(objrz)
043EE7 ED 5B 20 3B 0684*      ld de,(objdrz)
       04          
043EEC 19          0685*      add hl,de
043EED ED 53 12 3F 0686*      ld (@rz),de
       04          
043EF2 22 29 3B 04 0687*      ld (objrz),hl
043EF6 CD 2A 2E 04 0688*      call printDec
043EFA             0689*  
043EFA 21 05 3F 04 0690*      ld hl,@beg
043EFE 01 0F 00 00 0691*      ld bc,@end-@beg
043F02 5B DF       0692*      rst.lil $18
043F04 C9          0693*      ret
043F05             0694*  @beg:
043F05             0695*  ; VDU 23, 0, &A0, sid; &49, 141, oid; anglex; angley; anglez; :  Set Object XYZ Rotation Angles Local
043F05 17 00 A0    0696*          db 23, 0, $A0
043F08 00 10       0697*          dw sid
043F0A 49 8D       0698*          db $49, 141
043F0C 01 00       0699*          dw oid
043F0E 00 00       0700*  @rx:    dw 0
043F10 00 00       0701*  @ry:    dw 0
043F12 00 00       0702*  @rz:    dw 0
043F14 00          0703*  @end:   db 0 ; padding
043F15             0704*  
043F15             0705*  rotate_camera_loc:
043F15 CD F1 2D 04 0706*      call printNewLine
043F19             0707*  
043F19 2A 08 3B 04 0708*      ld hl,(camrx)
043F1D ED 5B 11 3B 0709*      ld de,(camdrx)
       04          
043F22 19          0710*      add hl,de
043F23 ED 53 70 3F 0711*      ld (@rx),de
       04          
043F28 22 08 3B 04 0712*      ld (camrx),hl
043F2C CD 2A 2E 04 0713*      call printDec
043F30             0714*  
043F30 2A 0B 3B 04 0715*      ld hl,(camry)
043F34 ED 5B 14 3B 0716*      ld de,(camdry)
       04          
043F39 19          0717*      add hl,de
043F3A ED 53 72 3F 0718*      ld (@ry),de
       04          
043F3F 22 0B 3B 04 0719*      ld (camry),hl
043F43 CD 2A 2E 04 0720*      call printDec
043F47             0721*  
043F47 2A 0E 3B 04 0722*      ld hl,(camrz)
043F4B ED 5B 17 3B 0723*      ld de,(camdrz)
       04          
043F50 19          0724*      add hl,de
043F51 ED 53 74 3F 0725*      ld (@rz),de
       04          
043F56 22 0E 3B 04 0726*      ld (camrz),hl
043F5A CD 2A 2E 04 0727*      call printDec
043F5E             0728*  
043F5E 21 69 3F 04 0729*      ld hl,@beg
043F62 01 0D 00 00 0730*      ld bc,@end-@beg
043F66 5B DF       0731*      rst.lil $18
043F68 C9          0732*      ret
043F69             0733*  @beg:
043F69             0734*  ; VDU 23, 0, &A0, sid; &49, 149; anglex; angley; anglez; :  Set Camera XYZ Rotation Angles (Local)
043F69 17 00 A0    0735*          db 23, 0, $A0
043F6C 00 10       0736*          dw sid
043F6E 49 95       0737*          db $49, 149
043F70 00 00       0738*  @rx:    dw 0
043F72 00 00       0739*  @ry:    dw 0
043F74 00 00       0740*  @rz:    dw 0
043F76 00          0741*  @end:   db 0 ; padding
043F77             0742*  
043F77             0743*  move_camera_loc:
043F77 CD F1 2D 04 0744*      call printNewLine
043F7B             0745*  
043F7B 2A F6 3A 04 0746*      ld hl,(camx)
043F7F ED 5B FF 3A 0747*      ld de,(camdx)
       04          
043F84 19          0748*      add hl,de
043F85 ED 53 D2 3F 0749*      ld (@x),de
       04          
043F8A 22 F6 3A 04 0750*      ld (camx),hl
043F8E CD 2A 2E 04 0751*      call printDec
043F92             0752*  
043F92 2A F9 3A 04 0753*      ld hl,(camy)
043F96 ED 5B 02 3B 0754*      ld de,(camdy)
       04          
043F9B 19          0755*      add hl,de
043F9C ED 53 D4 3F 0756*      ld (@y),de
       04          
043FA1 22 F9 3A 04 0757*      ld (camy),hl
043FA5 CD 2A 2E 04 0758*      call printDec
043FA9             0759*  
043FA9 2A FC 3A 04 0760*      ld hl,(camz)
043FAD ED 5B 05 3B 0761*      ld de,(camdz)
       04          
043FB2 19          0762*      add hl,de
043FB3 ED 53 D6 3F 0763*      ld (@z),de
       04          
043FB8 22 FC 3A 04 0764*      ld (camz),hl
043FBC CD 2A 2E 04 0765*      call printDec
043FC0             0766*  
043FC0 21 CB 3F 04 0767*      ld hl,@beg
043FC4 01 0D 00 00 0768*      ld bc,@end-@beg
043FC8 5B DF       0769*      rst.lil $18
043FCA C9          0770*      ret
043FCB             0771*  @beg:
043FCB             0772*  ;   VDU 23, 0, &A0, sid; &49, 153, distx; disty; distz :  Set Camera XYZ Translation Distances (Local)
043FCB 17 00 A0    0773*          db 23, 0, $A0
043FCE 00 10       0774*          dw sid
043FD0 49 99       0775*          db $49, 153
043FD2 00 00       0776*  @x:     dw 0
043FD4 00 00       0777*  @y:     dw 0
043FD6 00 00       0778*  @z:     dw 0
043FD8 00          0779*  @end:   db 0 ; padding
043FD9             0780*  
043FD9             0781*  ;   VDU 23, 0, &A0, sid; &50, 0, 1, 0 : Initialize Map
043FD9             0782*  vdu_map_init:
043FD9 21 E7 3F 04 0783*      ld hl,@beg
043FDD 01 09 00 00 0784*      ld bc,@end-@beg
043FE1 5B DF       0785*      rst.lil $18
043FE3 C3 F0 3F 04 0786*      jp @end
043FE7             0787*  @beg:
043FE7 17 00 A0    0788*      db 23,0,$A0
043FEA 00 10       0789*      dw sid
043FEC 50 00 01 00 0790*      db $50,0,1,0
043FF0             0791*  @end:
043FF0             0031   
043FF0             0032   	include "src/asm/tmp.inc"
043FF0             0001*  ; labels and subroutines from various include files
043FF0             0002*  ; which have been temporarily excluded until they can be refactored
043FF0             0003*  
043FF0 00          0004*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
043FF1 00          0005*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
043FF2 00          0006*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
043FF3 00          0007*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
043FF4 00          0008*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
043FF5 00          0009*  orientation: db 0x00 ; 0-3 north,east,south,west
043FF6 00          0010*  cur_x: db 0x00
043FF7 00          0011*  cur_y: db 0x00
043FF8 00          0012*         db 0x00 ; padding so we can read/write 24-bit registers
043FF9             0033   
043FF9             0034   
043FF9             0035   start:
043FF9 F5          0036       push af
043FFA C5          0037       push bc
043FFB D5          0038       push de
043FFC DD E5       0039       push ix
043FFE FD E5       0040       push iy
044000             0041   
044000 CD 90 40 04 0042   	call init ; Initialization code
044004 CD CC 41 04 0043       call main ; Call the main function
044008             0044   
044008             0045   exit:
044008             0046   
044008 FD E1       0047       pop iy
04400A DD E1       0048       pop ix
04400C D1          0049       pop de
04400D C1          0050       pop bc
04400E F1          0051       pop af
04400F 21 00 00 00 0052       ld hl,0
044013             0053   
044013 C9          0054       ret
044014             0055   
044014 57 65 6C 63 0056   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04402B 4C 6F 61 64 0057   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
044036 4C 6F 61 64 0058   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
044044 50 72 65 73 0059   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
044061 00          0060   is_emulator: defb 0
044062 52 75 6E 6E 0061   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
044079 52 75 6E 6E 0062   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
044090             0063   
044090             0064   init:
044090             0065   ; clear all buffers
044090 CD CB 2D 04 0066       call vdu_clear_all_buffers
044094             0067   
044094             0068   ; start generic stopwatch to time setup loop
044094             0069   ; so we can determine if we're running on emulator or hardware
044094 CD B7 3A 04 0070   	call stopwatch_set
044098             0071   
044098             0072   ; initialize global timestamp
044098 DD 27 00    0073       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04409B 22 74 3A 04 0074       ld (timestamp_now),hl
04409F             0075   
04409F             0076   ; enable additional audio channels
04409F CD 8C 00 04 0077   	call vdu_enable_channels
0440A3             0078   
0440A3             0079   ; set the cursor off
0440A3 CD 18 2A 04 0080   	call cursor_off
0440A7             0081   
0440A7             0082   ; print loading ui message
0440A7 21 2B 40 04 0083   	ld hl,loading_ui
0440AB CD DC 2D 04 0084   	call printString
0440AF             0085   
0440AF             0086   ; load fonts
0440AF CD 4B 0C 04 0087   	call load_font_itc_honda
0440B3 CD 6E 1A 04 0088   	call load_font_retro_computer
0440B7             0089   
0440B7             0090   ; load UI images
0440B7 CD 4A 21 04 0091   	call load_ui_images
0440BB CD 57 23 04 0092   	call load_ui_images_bj
0440BF             0093   
0440BF             0094   ; set up the display
0440BF 3E 88       0095       ld a,8+128 ; 320x240x64 double-buffered
0440C1 CD 59 28 04 0096       call vdu_set_screen_mode
0440C5 AF          0097       xor a
0440C6 CD 88 29 04 0098       call vdu_set_scaling
0440CA             0099   
0440CA             0100   ; set text background color
0440CA 3E 84       0101   	ld a,4 + 128
0440CC CD E5 27 04 0102   	call vdu_colour_text
0440D0             0103   
0440D0             0104   ; set text foreground color
0440D0 3E 2F       0105   	ld a,47 ; aaaaff lavenderish
0440D2 CD E5 27 04 0106   	call vdu_colour_text
0440D6             0107   
0440D6             0108   ; set gfx bg color
0440D6 AF          0109   	xor a ; plotting mode 0
0440D7 0E 04       0110   	ld c,4 ; dark blue
0440D9 CD 0D 28 04 0111   	call vdu_gcol_bg
0440DD CD E0 27 04 0112   	call vdu_clg
0440E1             0113   
0440E1             0114   ; set the cursor off again since we changed screen modes
0440E1 CD 18 2A 04 0115   	call cursor_off
0440E5             0116   
0440E5             0117   ; VDU 28, left, bottom, right, top: Set text viewport **
0440E5             0118   ; MIND THE LITTLE-ENDIANESS
0440E5             0119   ; inputs: c=left,b=bottom,e=right,d=top
0440E5 0E 00       0120   	ld c,0 ; left
0440E7 16 14       0121   	ld d,20 ; top
0440E9 1E 27       0122   	ld e,39 ; right
0440EB 06 1D       0123   	ld b,29; bottom
0440ED CD CE 28 04 0124   	call vdu_set_txt_viewport
0440F1             0125   
0440F1             0126   ; initialize image load routine
0440F1 CD 2B 32 04 0127   	call img_load_init
0440F5             0128   
0440F5             0129   ; load tiles
0440F5 01 0B 00 00 0130   	ld bc,cube_num_tiles
0440F9 21 D4 01 04 0131   	ld hl,cube_buffer_id_lut
0440FD 22 25 32 04 0132   	ld (cur_buffer_id_lut),hl
044101 21 F5 01 04 0133   	ld hl,cube_load_tiles_table
044105 22 28 32 04 0134   	ld (cur_load_jump_table),hl
044109 CD 60 32 04 0135   	call img_load_main
04410D             0136   
04410D             0137   ; load sprites
04410D 01 14 00 00 0138   	ld bc,sprite_num_tiles
044111 21 1B 04 04 0139   	ld hl,sprite_buffer_id_lut
044115 22 25 32 04 0140   	ld (cur_buffer_id_lut),hl
044119 21 57 04 04 0141   	ld hl,sprite_load_tiles_table
04411D 22 28 32 04 0142   	ld (cur_load_jump_table),hl
044121 CD 60 32 04 0143   	call img_load_main
044125             0144   
044125             0145   ; load sound effects
044125 01 16 00 00 0146   	ld bc,SFX_num_buffers
044129 21 BA 33 04 0147   	ld hl,SFX_buffer_id_lut
04412D 22 25 32 04 0148   	ld (cur_buffer_id_lut),hl
044131 21 28 34 04 0149   	ld hl,SFX_load_routines_table
044135 22 28 32 04 0150   	ld (cur_load_jump_table),hl
044139 CD 26 2D 04 0151   	call sfx_load_main
04413D             0152   
04413D             0153   ; self modify vdu_play_sfx to enable sound
04413D AF          0154   	xor a
04413E 32 46 00 04 0155   	ld (vdu_play_sfx_disable),a
044142             0156   
044142             0157   ; use loading time to determine if we're running on emulator or hardware
044142 CD C3 3A 04 0158   	call stopwatch_get ; hl = elapsed time in 120ths of a second
044146 11 40 1F 00 0159   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04414A AF          0160   	xor a ; clear carry, default is running on hardware
04414B 32 61 40 04 0161   	ld (is_emulator),a
04414F ED 52       0162   	sbc hl,de
044151 FA 65 41 04 0163   	jp m,@on_emulator
044155 CD 04 29 04 0164   	call vdu_home_cursor
044159 21 79 40 04 0165   	ld hl,on_hardware
04415D CD DC 2D 04 0166   	call printString
044161 C3 77 41 04 0167   	jp @test_done
044165             0168   
044165             0169   @on_emulator:
044165             0170   ; print emulator message
044165 3E 01       0171   	ld a,1
044167 32 61 40 04 0172   	ld (is_emulator),a
04416B CD 04 29 04 0173   	call vdu_home_cursor
04416F 21 62 40 04 0174   	ld hl,on_emulator
044173 CD DC 2D 04 0175   	call printString
044177             0176   
044177             0177   @test_done:
044177             0178   ; print final loading time
044177 21 36 40 04 0179   	ld hl,loading_time
04417B CD DC 2D 04 0180   	call printString
04417F CD C3 3A 04 0181   	call stopwatch_get ; hl = elapsed time in 120ths of a second
044183 CD 2A 2E 04 0182   	call printDec
044187 CD F1 2D 04 0183   	call printNewLine
04418B             0184   
04418B             0185   ; print loading complete message and wait for user keypress
04418B 21 44 40 04 0186   	ld hl,loading_complete
04418F CD DC 2D 04 0187   	call printString
044193 CD 9B 29 04 0188   	call vdu_flip
044197 CD 5C 31 04 0189   	call waitKeypress
04419B             0190   
04419B             0191   ; initialization done
04419B C9          0192   	ret
04419C             0193   
04419C             0194   ; DEBUG: set up a simple countdown timer
04419C 01          0195   debug_timer: db 0x01
04419D             0196   
04419D             0197   main_loop_tmr: ds 6
0441A3             0198   framerate: equ 30
0441A3             0199   
0441A3             0200   new_game:
0441A3             0201   ; create wolf3d control structure
0441A3             0202   ccs:
0441A3             0203   	CCS sid, cstw, csth
0441A3 21 B1 41 04 0001M      ld hl,@beg
0441A7 01 0B 00 00 0002M      ld bc,@end-@beg
0441AB 5B DF       0003M      rst.lil $18
0441AD C3 BC 41 04 0004M      jp @end
0441B1             0005M  @beg:
0441B1             0006M  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
0441B1 17 00 A0    0007M      db 23,0,$A0
0441B4 00 10       0008M      dw SID
0441B6 49 00       0009M      db $49,0
0441B8 F0 00       0010M      dw SCENE_WIDTH
0441BA A0 00       0011M      dw SCENE_HEIGHT
0441BC             0012M  @end:
0441BC             0204   
0441BC             0205   ; initialize map variables and load map file
0441BC 21 BF 09 04 0206   	ld hl,room_flags
0441C0 AF          0207   	xor a
0441C1 06 0A       0208   	ld b,10
0441C3             0209   @room_flags_loop:
0441C3 77          0210   	ld (hl),a
0441C4 23          0211   	inc hl
0441C5 10 FC       0212   	djnz @room_flags_loop
0441C7             0213   ; load room file
0441C7 CD 2B 09 04 0214   	call map_init
0441CB             0215   	; call vdu_map_init
0441CB             0216   ; ; initialize sprite data
0441CB             0217   ; 	call map_init_sprites
0441CB             0218   ; ; initialize player position
0441CB             0219   ; 	call plyr_init
0441CB             0220   
0441CB C9          0221   	ret
0441CC             0222   
0441CC             0223   main:
0441CC CD A3 41 04 0224   	call new_game
0441D0             0225   
0441D0             0226   main_loop:
0441D0             0227   ; update global timestamp
0441D0 CD 7D 3A 04 0228       call timestamp_tick
0441D4             0229   
0441D4             0230   ; ; move enemies
0441D4             0231   ; 	call sprites_see_plyr ; 220-285  prt ticks
0441D4             0232   
0441D4             0233   ; ; get player input and update sprite position
0441D4             0234   ; 	; 0-1 prt ticks
0441D4             0235   ; 	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
0441D4             0236   
0441D4             0237   ; ; render the updated scene
0441D4             0238   ; 	call render_scene ; 6-12 prt ticks
0441D4             0239   ; ; full loop 12-16 prt ticks
0441D4             0240   
0441D4             0241   ; ; flip the screen
0441D4             0242   ; 	call vdu_flip
0441D4             0243   
0441D4             0244   @wait:
0441D4 FD 21 9D 41 0245   	ld iy,main_loop_tmr
       04          
0441D9 CD 5A 3A 04 0246   	call tmr_get
0441DD CA E9 41 04 0247   	jp z,@continue
0441E1 FA E9 41 04 0248   	jp m,@continue
0441E5 C3 D4 41 04 0249   	jp @wait
0441E9             0250   @continue:
0441E9             0251   
0441E9             0252   ; reset main loop timer
0441E9 FD 21 9D 41 0253   	ld iy,main_loop_tmr
       04          
0441EE 21 04 00 00 0254   	ld hl,120/framerate
0441F2 CD 4C 3A 04 0255   	call tmr_set
0441F6             0256   
0441F6             0257   ; check for escape key and quit if pressed
0441F6             0258   	MOSCALL mos_getkbmap
0441F6 3E 1E       0001M  			LD	A, function
0441F8 5B CF       0002M  			RST.LIL	08h
0441FA             0259   ; 113 Escape
0441FA DD CB 0E 46 0260       bit 0,(ix+14)
0441FE 20 02       0261   	jr nz,main_end
044200             0262   @Escape:
044200 18 CE       0263   	jr main_loop
044202             0264   
044202             0265   main_end:
044202             0266   	; call do_outro
044202             0267   
044202 CD CB 2D 04 0268       call vdu_clear_all_buffers
044206 CD B4 00 04 0269   	call vdu_disable_channels
04420A             0270   
04420A             0271   ; restore screen to something normalish
04420A AF          0272   	xor a
04420B CD 59 28 04 0273   	call vdu_set_screen_mode
04420F CD 0A 2A 04 0274   	call cursor_on
044213 C9          0275   	ret
044214             0276   
044214             0277   ; files.inc must go here so that filedata doesn't stomp on program data
044214             0278   	include "src/asm/files.inc"
044214             0001*  
044214             0002*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
044214             0003*  ; inputs: hl = bufferId, ix = file size
044214             0004*  vdu_load_buffer_from_file:
044214             0005*      ; back up buffer id
044214 E5          0006*          push hl
044215             0007*      ; load the file from disk into ram
044215 FD E5       0008*          push iy
044217 E1          0009*          pop hl ; pointer to filename
044218 11 72 42 04 0010*          ld de,filedata
04421C 3E 01       0011*          ld a,mos_load
04421E 5B CF       0012*          RST.LIL 08h
044220             0013*  	; load buffer ids
044220 E1          0014*          pop hl
044221 22 62 42 04 0015*  		ld (@id0),hl
044225 22 68 42 04 0016*  		ld (@id1),hl
044229 22 6D 42 04 0017*  		ld (@id2),hl
04422D             0018*  	; clean up bytes that got stomped on by the ID loads
04422D 3E 02       0019*  		ld a,2
04422F 32 64 42 04 0020*  		ld (@id0+2),a
044233 3E 17       0021*  		ld a,23
044235 32 6A 42 04 0022*  		ld (@id1+2),a
044239 AF          0023*  		xor a
04423A 32 6F 42 04 0024*  		ld (@id2+2),a
04423E             0025*  	; read size from ix
04423E DD 7D       0026*  		ld a,ixl
044240 32 70 42 04 0027*  		ld (@size),a
044244 DD 7C       0028*  		ld a,ixh
044246 32 71 42 04 0029*  		ld (@size+1),a
04424A             0030*  	; get all the ducks in a row for the vdu call
04424A 01 13 00 00 0031*  		ld bc,filedata-@start
04424E DD 09       0032*  		add ix,bc
044250 DD 44       0033*  		ld b,ixh
044252 DD 4D       0034*  		ld c,ixl
044254 21 5F 42 04 0035*  		ld hl,@start
044258             0036*  	; push the button
044258 5B DF       0037*  		rst.lil $18
04425A             0038*      ; print a progress breadcrumb
04425A 3E 2E       0039*          ld a,'.'
04425C 5B D7       0040*          rst.lil 10h
04425E             0041*  	; back to caller
04425E C9          0042*  		ret
04425F             0043*  ; vdp command string:
04425F 17 00 A0    0044*  @start: db 23,0,0xA0 ; Clear buffer
044262 00 00       0045*  @id0:	dw 0x0000 ; bufferId
044264 02          0046*  		db 2
044265             0047*  	; select buffer VDU 23, 27, &20, bufferId;
044265 17 1B 20    0048*  		db 23,27,0x20
044268 00 00       0049*  @id1:	dw 0x0000 ; bufferId
04426A             0050*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04426A 17 00 A0    0051*  		db 23,0,0xA0
04426D 00 00       0052*  @id2:	dw 0x0000 ; bufferId
04426F 00          0053*  		db 0
044270             0054*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
044270 00 00       0055*  @size:	dw 0x0000 ; length of data in bytes
044272             0056*  filedata: ; no need to allocate space here if this is the final include of the application
044272             0057*  	; ds 65536 ; placeholder for file data	DEBUG
044272             0058*  
044272             0059*  ; ; TODO: MAKE PROGRESSIVE LOADING WORK
044272             0060*  ; ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
044272             0061*  ; ; inputs: hl = bufferId, ix = file size ; iy = pointer to filename
044272             0062*  ; vdu_load_buffer_from_file:
044272             0063*  ; ; load buffer ids
044272             0064*  ;     ld (@id0),hl
044272             0065*  ;     ld (@id1),hl
044272             0066*  ; ; clean up bytes that got stomped on by the ID loads
044272             0067*  ;     ld a,2
044272             0068*  ;     ld (@id0+2),a
044272             0069*  ;     xor a
044272             0070*  ;     ld (@id1+2),a
044272             0071*  ; ; load the file from disk into ram
044272             0072*  ;     ld (@filesize),ix
044272             0073*  ;     ld bc,(@filesize) ; for the mos_load call
044272             0074*  ;     push iy
044272             0075*  ; 	pop hl ; pointer to filename
044272             0076*  ; 	ld de,filedata
044272             0077*  ; 	ld a,mos_load
044272             0078*  ; 	RST.LIL 08h
044272             0079*  ; ; clear target buffer
044272             0080*  ;     ld hl,@clear0
044272             0081*  ;     ld bc,@clear1-@clear0
044272             0082*  ;     rst.lil $18
044272             0083*  ;     jp @clear1
044272             0084*  ; @clear0: db 23,0,0xA0
044272             0085*  ; @id0:	dw 0x0000 ; bufferId
044272             0086*  ; 		db 2 ; clear buffer
044272             0087*  ; @clear1:
044272             0088*  ; ; load default chunk size of 256 bytes
044272             0089*  ;     xor a
044272             0090*  ;     ld (@chunksize),a
044272             0091*  ;     ld a,1
044272             0092*  ;     ld (@chunksize+1),a
044272             0093*  ; ; point hl at the start of the file data
044272             0094*  ;     ld hl,filedata
044272             0095*  ;     ld (@chunkpointer),hl
044272             0096*  ; @loop:
044272             0097*  ;     ld hl,(@filesize) ; get the remaining bytes
044272             0098*  ;     ld de,256
044272             0099*  ;     xor a ; clear carry
044272             0100*  ;     sbc hl,de
044272             0101*  ;     ld (@filesize),hl ; store remaining bytes
044272             0102*  ;     jp z,@loadchunk ; jp means will return to caller from there
044272             0103*  ;     jp m,@lastchunk ; ditto
044272             0104*  ;     call @loadchunk ; load the next chunk and return here to loop again
044272             0105*  ;     jp @loop ; loop back to load the next chunk
044272             0106*  ; @lastchunk:
044272             0107*  ;     ld de,256
044272             0108*  ;     add hl,de
044272             0109*  ;     ld a,l
044272             0110*  ;     ld (@chunksize),a ; store the remaining bytes
044272             0111*  ;     ld a,h
044272             0112*  ;     ld (@chunksize+1),a
044272             0113*  ;     ; fall through to loadchunk
044272             0114*  ; @loadchunk:
044272             0115*  ;     ld hl,@chunk0
044272             0116*  ;     ld bc,@chunk1-@chunk0
044272             0117*  ;     rst.lil $18
044272             0118*  ;     jp @chunk1
044272             0119*  ; @chunk0:
044272             0120*  ; ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044272             0121*  ; 		db 23,0,0xA0
044272             0122*  ; @id1:	dw 0x0000 ; bufferId
044272             0123*  ; 		db 0 ; load buffer
044272             0124*  ; @chunksize:	dw 0x0000 ; length of data in bytes
044272             0125*  ; @chunk1:
044272             0126*  ;     ld hl,(@chunkpointer) ; get the file data pointer
044272             0127*  ;     ld bc,0 ; make sure bcu is zero
044272             0128*  ;     ld a,(@chunksize)
044272             0129*  ;     ld c,a
044272             0130*  ;     ld a,(@chunksize+1)
044272             0131*  ;     ld b,a
044272             0132*  ;     rst.lil $18
044272             0133*  ;     ld hl,(@chunkpointer) ; get the file data pointer
044272             0134*  ;     ld bc,256
044272             0135*  ;     add hl,bc ; advance the file data pointer
044272             0136*  ;     ld (@chunkpointer),hl ; store pointer to file data
044272             0137*  ;     ld a,'.' ; print a progress breadcrumb
044272             0138*  ;     rst.lil 10h
044272             0139*  ;     ret
044272             0140*  ; @filesize: dl 0 ; file size in bytes
044272             0141*  ; @chunkpointer: dl 0 ; pointer to current chunk
044272             0142*  ; filedata: ; no need to allocate space here if this is the final include of the application
044272             0143*  ; 	; ds 65536 ; placeholder for file data	DEBUG
