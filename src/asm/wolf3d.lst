PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 18 C6 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  
040046             0003*  vdu_play_sfx:
040046 C9          0004*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0005*      ld (@bufferId),hl
04004B ED 43 89 00 0006*      ld (@duration),bc
       04          
040050 3E 17       0007*      ld a,23
040052 32 81 00 04 0008*      ld (@bufferId+2),a
040056 3A 45 00 04 0009*      ld a,(last_channel)
04005A 3C          0010*      inc a
04005B             0011*      ; and 31 ; modulo 32
04005B FE 03       0012*      cp 3
04005D C2 62 00 04 0013*      jp nz,@load_channel
040061 AF          0014*      xor a
040062             0015*  @load_channel:
040062 32 45 00 04 0016*      ld (last_channel),a
040066 32 7C 00 04 0017*      ld (@channel0),a
04006A 32 84 00 04 0018*      ld (@channel1),a
04006E 21 79 00 04 0019*      ld hl, @sample
040072 01 12 00 00 0020*      ld bc, @sample_end - @sample
040076 5B DF       0021*      rst.lil $18
040078 C9          0022*      ret
040079             0023*  @sample:
040079             0024*  ; Command 4: Set waveform
040079             0025*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0026*      .db 23,0,$85                        ; do sound
04007C             0027*  @channel0:
04007C 00 04 08    0028*      .db 0,4,8 ; channel, command, waveform
04007F             0029*  @bufferId:
04007F 00 00       0030*      .dw 0x0000
040081             0031*  ; Command 0: Play note
040081             0032*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0033*      .db 23,0,$85                        ; do sound
040084             0034*  @channel1:
040084 00 00 7F    0035*      .db 0,0,127                ; channel, volume
040087 00 00       0036*      .dw 0
040089             0037*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0038*      .dw 0x0000                        ; duration
04008B             0039*  @sample_end:
04008B 00          0040*      .db 0x00 ; padding
04008C             0041*  
04008C             0042*  ; ############################################################
04008C             0043*  ; VDU SOUND API
04008C             0044*  ; ############################################################
04008C             0045*  ; Command 0: Play note
04008C             0046*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04008C             0047*      MACRO PLAY_NOTE channel, volume, frequency, duration
04008C             0048*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
04008C             0049*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
04008C             0050*      rst.lil $18
04008C             0051*      jr @PLAY_NOTE_END
04008C             0052*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
04008C             0053*                   db channel                  ; Channel, 0 (commented out)
04008C             0054*                   db 0                        ; Play note command
04008C             0055*                   db volume                   ; Volume
04008C             0056*                   dw frequency                ; Frequency
04008C             0057*                   dw duration                 ; Duration
04008C             0058*  @PLAY_NOTE_END:
04008C             0059*      ENDMACRO
04008C             0060*  
04008C             0061*      MACRO MUTE_CHANNEL channel
04008C             0062*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
04008C             0063*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
04008C             0064*      rst.lil $18
04008C             0065*      jr @MUTE_CHANNEL_END
04008C             0066*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
04008C             0067*                     db channel                ; Channel, 0 (commented out)
04008C             0068*                     db 2                      ; Set volume command
04008C             0069*                     db 0                      ; Volume (mute)
04008C             0070*  @MUTE_CHANNEL_END:
04008C             0071*      ENDMACRO
04008C             0072*  
04008C             0073*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
04008C             0074*  vdu_play_note:
04008C 79          0075*      ld a,c
04008D 32 AD 00 04 0076*      ld (@channel),a
040091 78          0077*      ld a,b
040092 32 AF 00 04 0078*      ld (@volume),a
040096 22 B0 00 04 0079*      ld (@frequency),hl
04009A ED 53 B2 00 0080*      ld (@duration),de
       04          
04009F 21 AA 00 04 0081*      ld hl,@cmd
0400A3 01 0A 00 00 0082*      ld bc,@end-@cmd
0400A7 5B DF       0083*      rst.lil $18
0400A9 C9          0084*      ret
0400AA 17 00 85    0085*  @cmd:       db 23, 0, 0x85
0400AD 00          0086*  @channel:   db 0x00
0400AE 00          0087*              db 0x00 ; play note command
0400AF 00          0088*  @volume:    db 0x00
0400B0 00 00       0089*  @frequency: dw 0x0000
0400B2 00 00       0090*  @duration:  dw 0x0000
0400B4 00          0091*  @end:       db 0x00 ; padding
0400B5             0092*  
0400B5             0093*  ; Command 1: Status
0400B5             0094*  ; VDU 23, 0, &85, channel, 1
0400B5             0095*  ; inputs: a = channel
0400B5             0096*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400B5             0097*  ; Bit 	Name 	Meaning
0400B5             0098*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400B5             0099*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400B5             0100*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400B5             0101*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400B5             0102*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400B5             0103*  
0400B5             0104*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400B5             0105*  vdu_channel_status:
0400B5 32 C7 00 04 0106*      ld (@channel),a
0400B9 21 C4 00 04 0107*      ld hl,@cmd
0400BD 01 05 00 00 0108*      ld bc,@end-@cmd
0400C1 5B DF       0109*      rst.lil $18
0400C3 C9          0110*      ret
0400C4 17 00 85    0111*  @cmd:       db 23, 0, 0x85
0400C7 00          0112*  @channel:   db 0x00
0400C8 01          0113*              db 0x01 ; get channel status command
0400C9             0114*  @end:
0400C9             0115*  
0400C9             0116*  ; VDU 23, 0, &85, channel, 2, volume
0400C9             0117*  ; inputs: c = channel, b = volume
0400C9             0118*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400C9             0119*  
0400C9             0120*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400C9             0121*  
0400C9             0122*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400C9             0123*  vdu_channel_volume:
0400C9 79          0124*      ld a,c
0400CA 32 E1 00 04 0125*      ld (@channel),a
0400CE 78          0126*      ld a,b
0400CF 32 E3 00 04 0127*      ld (@volume),a
0400D3 21 DE 00 04 0128*      ld hl,@cmd
0400D7 01 06 00 00 0129*      ld bc,@end-@cmd
0400DB 5B DF       0130*      rst.lil $18
0400DD C9          0131*      ret
0400DE 17 00 85    0132*  @cmd:       db 23, 0, 0x85
0400E1 00          0133*  @channel:   db 0x00
0400E2 02          0134*              db 0x02 ; set volume command
0400E3 00          0135*  @volume:    db 0x00
0400E4             0136*  @end:
0400E4             0137*  
0400E4             0138*  ; VDU 23, 0, &85, channel, 3, frequency;
0400E4             0139*  
0400E4             0140*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0400E4             0141*  
0400E4             0142*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0400E4             0143*  
0400E4             0144*  ; Returns 1 on success, 0 for failure.
0400E4             0145*  vdu_channel_frequency:
0400E4 79          0146*      ld a,c
0400E5 32 FC 00 04 0147*      ld (@channel),a
0400E9 ED 53 FE 00 0148*      ld (@frequency),de
       04          
0400EE 21 F9 00 04 0149*      ld hl,@cmd
0400F2 01 07 00 00 0150*      ld bc,@end-@cmd
0400F6 5B DF       0151*      rst.lil $18
0400F8 C9          0152*      ret
0400F9 17 00 85    0153*  @cmd:       db 23, 0, 0x85
0400FC 00          0154*  @channel:   db 0x00
0400FD 03          0155*              db 0x03 ; set frequency command
0400FE 00 00       0156*  @frequency: dw 0x0000
040100 00          0157*  @end:       db 0x00 ; padding
040101             0158*  
040101             0159*  
040101             0160*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040101             0161*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040101             0162*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040101             0163*  
040101             0164*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040101             0165*  
040101             0166*  ; By default a channel is set to use waveform 0 (square wave).
040101             0167*  
040101             0168*  ; Valid waveform values are as follows:
040101             0169*  ; Value 	Waveform
040101             0170*  ; 0 	Square wave
040101             0171*  ; 1 	Triangle wave
040101             0172*  ; 2 	Sawtooth wave
040101             0173*  ; 3 	Sine wave
040101             0174*  ; 4 	Noise (simple white noise with no frequency support)
040101             0175*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040101             0176*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040101             0177*  
040101             0178*  vdu_channel_waveform:
040101 79          0179*      ld a,c
040102 32 27 01 04 0180*      ld (@channel),a
040106 78          0181*      ld a,b
040107 32 29 01 04 0182*      ld (@waveform),a
04010B FE 08       0183*      cp 8 ; check if the waveform is a sample
04010D 28 06       0184*      jr z, @sample
04010F 01 06 00 00 0185*      ld bc,@bufferId-@cmd
040113 18 08       0186*      jr @sendToVdu
040115             0187*  @sample:
040115 22 2A 01 04 0188*      ld (@bufferId),hl
040119 01 08 00 00 0189*      ld bc,@end-@cmd
04011D             0190*  @sendToVdu:
04011D 21 24 01 04 0191*      ld hl,@cmd
040121 5B DF       0192*      rst.lil $18
040123 C9          0193*      ret
040124 17 00 85    0194*  @cmd:       db 23, 0, 0x85
040127 00          0195*  @channel:   db 0x00
040128 04          0196*              db 0x04 ; set waveform command
040129 00          0197*  @waveform:  db 0x00
04012A 00 00       0198*  @bufferId:  dw 0x0000
04012C 00          0199*  @end:       db 0x00 ; padding
04012D             0200*  
04012D             0201*  
04012D             0202*  
04012D             0203*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04012D             0204*  ; inputs: hl = bufferId; a = format
04012D             0205*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04012D             0206*  ; Value 	Description
04012D             0207*  ; 0 	8-bit signed, 16KHz
04012D             0208*  ; 1 	8-bit unsigned, 16KHz
04012D             0209*  vdu_buffer_to_sound:
04012D 22 46 01 04 0210*      ld (@bufferId),hl
040131 32 48 01 04 0211*      ld (@format),a
040135 21 40 01 04 0212*      ld hl,@cmd
040139 01 09 00 00 0213*      ld bc,@end-@cmd
04013D 5B DF       0214*      rst.lil $18
04013F C9          0215*      ret
040140 17 00 85    0216*  @cmd:       db 23, 0, 0x85
040143 00          0217*              db 0x00 ; a magic number that is always 0
040144 05          0218*              db 0x05 ; buffer to sound command
040145 02          0219*              db 0x02 ; a magic number that is always 2
040146 00 00       0220*  @bufferId:  dw 0x0000
040148 00          0221*  @format:    db 0x00
040149             0222*  @end:
040149             0223*  
040149             0224*  
040149             0225*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040149             0226*  vdu_play_sample:
040149             0227*      ; populate input parameters
040149 79          0228*      ld a,c
04014A 32 74 01 04 0229*      ld (@channel0),a
04014E 32 7C 01 04 0230*      ld (@channel1),a
040152 78          0231*      ld a,b
040153 32 7E 01 04 0232*      ld (@volume),a
040157 ED 53 7F 01 0233*      ld (@frequency),de
       04          
04015C 22 77 01 04 0234*      ld (@bufferId),hl
040160             0235*      ; clean up byte that got stomped on by bufferId load from hl
040160 3E 17       0236*      ld a,23
040162 32 79 01 04 0237*      ld (@cmd1),a
040166             0238*      ; prep the vdu command string
040166 21 71 01 04 0239*      ld hl, @cmd0
04016A 01 12 00 00 0240*      ld bc, @end - @cmd0
04016E 5B DF       0241*      rst.lil $18
040170 C9          0242*      ret
040171 17 00 85    0243*  @cmd0:       db 23, 0, 0x85
040174 00          0244*  @channel0:   db 0x00
040175 04          0245*               db 0x04 ; set waveform command
040176 08          0246*  @waveform:   db 0x08 ; sample
040177 00 00       0247*  @bufferId:   dw 0x0000
040179 17 00 85    0248*  @cmd1:       db 23, 0, 0x85
04017C 00          0249*  @channel1:   db 0x00
04017D 00          0250*               db 0x00 ; play note command
04017E 00          0251*  @volume:     db 0x00
04017F 00 00       0252*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040181 00 00       0253*  @duration:   dw 0x0000 ; milliseconds
040183 00          0254*  @end:        db 0x00 ; padding
040184             0255*  
040184             0256*  
040184             0257*  vdu_enable_channels:
040184             0258*  ; enable all the channels
040184 21 8F 01 04 0259*      ld hl, enable_channels_cmd
040188 01 91 00 00 0260*      ld bc, enable_channels_end - enable_channels_cmd
04018C 5B DF       0261*      rst.lil $18
04018E C9          0262*      ret
04018F             0263*  enable_channels_cmd:
04018F 17 00 85 03 0264*      db 23, 0, $85, 3, 8
       08          
040194 17 00 85 04 0265*      db 23, 0, $85, 4, 8
       08          
040199 17 00 85 05 0266*      db 23, 0, $85, 5, 8
       08          
04019E 17 00 85 06 0267*      db 23, 0, $85, 6, 8
       08          
0401A3 17 00 85 07 0268*      db 23, 0, $85, 7, 8
       08          
0401A8 17 00 85 08 0269*      db 23, 0, $85, 8, 8
       08          
0401AD 17 00 85 09 0270*      db 23, 0, $85, 9, 8
       08          
0401B2 17 00 85 0A 0271*      db 23, 0, $85, 10, 8
       08          
0401B7 17 00 85 0B 0272*      db 23, 0, $85, 11, 8
       08          
0401BC 17 00 85 0C 0273*      db 23, 0, $85, 12, 8
       08          
0401C1 17 00 85 0D 0274*      db 23, 0, $85, 13, 8
       08          
0401C6 17 00 85 0E 0275*      db 23, 0, $85, 14, 8
       08          
0401CB 17 00 85 0F 0276*      db 23, 0, $85, 15, 8
       08          
0401D0 17 00 85 10 0277*      db 23, 0, $85, 16, 8
       08          
0401D5 17 00 85 11 0278*      db 23, 0, $85, 17, 8
       08          
0401DA 17 00 85 12 0279*      db 23, 0, $85, 18, 8
       08          
0401DF 17 00 85 13 0280*      db 23, 0, $85, 19, 8
       08          
0401E4 17 00 85 14 0281*      db 23, 0, $85, 20, 8
       08          
0401E9 17 00 85 15 0282*      db 23, 0, $85, 21, 8
       08          
0401EE 17 00 85 16 0283*      db 23, 0, $85, 22, 8
       08          
0401F3 17 00 85 17 0284*      db 23, 0, $85, 23, 8
       08          
0401F8 17 00 85 18 0285*      db 23, 0, $85, 24, 8
       08          
0401FD 17 00 85 19 0286*      db 23, 0, $85, 25, 8
       08          
040202 17 00 85 1A 0287*      db 23, 0, $85, 26, 8
       08          
040207 17 00 85 1B 0288*      db 23, 0, $85, 27, 8
       08          
04020C 17 00 85 1C 0289*      db 23, 0, $85, 28, 8
       08          
040211 17 00 85 1D 0290*      db 23, 0, $85, 29, 8
       08          
040216 17 00 85 1E 0291*      db 23, 0, $85, 30, 8
       08          
04021B 17 00 85 1F 0292*      db 23, 0, $85, 31, 8
       08          
040220             0293*  enable_channels_end:
040220             0013   	include "src/asm/images.asm"
040220             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
040220             0002*  
040220             0003*  ; cube buffer ids:
040220             0004*  BUF_10_004: equ 0x0100
040220             0005*  BUF_10_009: equ 0x0101
040220             0006*  BUF_10_010: equ 0x0102
040220             0007*  BUF_10_011: equ 0x0103
040220             0008*  BUF_10_012: equ 0x0104
040220             0009*  BUF_10_013: equ 0x0105
040220             0010*  BUF_10_014: equ 0x0106
040220             0011*  BUF_10_015: equ 0x0107
040220             0012*  BUF_10_016: equ 0x0108
040220             0013*  BUF_10_020: equ 0x0109
040220             0014*  BUF_10_024: equ 0x010A
040220             0015*  BUF_10_025: equ 0x010B
040220             0016*  BUF_10_026: equ 0x010C
040220             0017*  BUF_10_027: equ 0x010D
040220             0018*  BUF_10_028: equ 0x010E
040220             0019*  BUF_10_029: equ 0x010F
040220             0020*  BUF_10_032: equ 0x0110
040220             0021*  BUF_10_035: equ 0x0111
040220             0022*  BUF_10_036: equ 0x0112
040220             0023*  BUF_10_037: equ 0x0113
040220             0024*  BUF_10_038: equ 0x0114
040220             0025*  BUF_10_040: equ 0x0115
040220             0026*  BUF_10_042: equ 0x0116
040220             0027*  BUF_10_043: equ 0x0117
040220             0028*  BUF_10_044: equ 0x0118
040220             0029*  BUF_11_004: equ 0x0119
040220             0030*  BUF_11_009: equ 0x011A
040220             0031*  BUF_11_010: equ 0x011B
040220             0032*  BUF_11_011: equ 0x011C
040220             0033*  BUF_11_012: equ 0x011D
040220             0034*  BUF_11_013: equ 0x011E
040220             0035*  BUF_11_014: equ 0x011F
040220             0036*  BUF_11_015: equ 0x0120
040220             0037*  BUF_11_016: equ 0x0121
040220             0038*  BUF_11_020: equ 0x0122
040220             0039*  BUF_11_024: equ 0x0123
040220             0040*  BUF_11_025: equ 0x0124
040220             0041*  BUF_11_026: equ 0x0125
040220             0042*  BUF_11_027: equ 0x0126
040220             0043*  BUF_11_028: equ 0x0127
040220             0044*  BUF_11_029: equ 0x0128
040220             0045*  BUF_11_032: equ 0x0129
040220             0046*  BUF_11_035: equ 0x012A
040220             0047*  BUF_11_036: equ 0x012B
040220             0048*  BUF_11_037: equ 0x012C
040220             0049*  BUF_11_038: equ 0x012D
040220             0050*  BUF_11_040: equ 0x012E
040220             0051*  BUF_11_042: equ 0x012F
040220             0052*  BUF_11_043: equ 0x0130
040220             0053*  BUF_11_044: equ 0x0131
040220             0054*  BUF_12_004: equ 0x0132
040220             0055*  BUF_12_009: equ 0x0133
040220             0056*  BUF_12_010: equ 0x0134
040220             0057*  BUF_12_011: equ 0x0135
040220             0058*  BUF_12_012: equ 0x0136
040220             0059*  BUF_12_013: equ 0x0137
040220             0060*  BUF_12_014: equ 0x0138
040220             0061*  BUF_12_015: equ 0x0139
040220             0062*  BUF_12_016: equ 0x013A
040220             0063*  BUF_12_020: equ 0x013B
040220             0064*  BUF_12_024: equ 0x013C
040220             0065*  BUF_12_025: equ 0x013D
040220             0066*  BUF_12_026: equ 0x013E
040220             0067*  BUF_12_027: equ 0x013F
040220             0068*  BUF_12_028: equ 0x0140
040220             0069*  BUF_12_029: equ 0x0141
040220             0070*  BUF_12_032: equ 0x0142
040220             0071*  BUF_12_035: equ 0x0143
040220             0072*  BUF_12_036: equ 0x0144
040220             0073*  BUF_12_037: equ 0x0145
040220             0074*  BUF_12_038: equ 0x0146
040220             0075*  BUF_12_040: equ 0x0147
040220             0076*  BUF_12_042: equ 0x0148
040220             0077*  BUF_12_043: equ 0x0149
040220             0078*  BUF_12_044: equ 0x014A
040220             0079*  BUF_13_004: equ 0x014B
040220             0080*  BUF_13_009: equ 0x014C
040220             0081*  BUF_13_010: equ 0x014D
040220             0082*  BUF_13_011: equ 0x014E
040220             0083*  BUF_13_012: equ 0x014F
040220             0084*  BUF_13_013: equ 0x0150
040220             0085*  BUF_13_014: equ 0x0151
040220             0086*  BUF_13_015: equ 0x0152
040220             0087*  BUF_13_016: equ 0x0153
040220             0088*  BUF_13_020: equ 0x0154
040220             0089*  BUF_13_024: equ 0x0155
040220             0090*  BUF_13_025: equ 0x0156
040220             0091*  BUF_13_026: equ 0x0157
040220             0092*  BUF_13_027: equ 0x0158
040220             0093*  BUF_13_028: equ 0x0159
040220             0094*  BUF_13_029: equ 0x015A
040220             0095*  BUF_13_032: equ 0x015B
040220             0096*  BUF_13_035: equ 0x015C
040220             0097*  BUF_13_036: equ 0x015D
040220             0098*  BUF_13_037: equ 0x015E
040220             0099*  BUF_13_038: equ 0x015F
040220             0100*  BUF_13_040: equ 0x0160
040220             0101*  BUF_13_042: equ 0x0161
040220             0102*  BUF_13_043: equ 0x0162
040220             0103*  BUF_13_044: equ 0x0163
040220             0104*  BUF_14_004: equ 0x0164
040220             0105*  BUF_14_009: equ 0x0165
040220             0106*  BUF_14_010: equ 0x0166
040220             0107*  BUF_14_011: equ 0x0167
040220             0108*  BUF_14_012: equ 0x0168
040220             0109*  BUF_14_013: equ 0x0169
040220             0110*  BUF_14_014: equ 0x016A
040220             0111*  BUF_14_015: equ 0x016B
040220             0112*  BUF_14_016: equ 0x016C
040220             0113*  BUF_14_020: equ 0x016D
040220             0114*  BUF_14_024: equ 0x016E
040220             0115*  BUF_14_025: equ 0x016F
040220             0116*  BUF_14_026: equ 0x0170
040220             0117*  BUF_14_027: equ 0x0171
040220             0118*  BUF_14_028: equ 0x0172
040220             0119*  BUF_14_029: equ 0x0173
040220             0120*  BUF_14_032: equ 0x0174
040220             0121*  BUF_14_035: equ 0x0175
040220             0122*  BUF_14_036: equ 0x0176
040220             0123*  BUF_14_037: equ 0x0177
040220             0124*  BUF_14_038: equ 0x0178
040220             0125*  BUF_14_040: equ 0x0179
040220             0126*  BUF_14_042: equ 0x017A
040220             0127*  BUF_14_043: equ 0x017B
040220             0128*  BUF_14_044: equ 0x017C
040220             0129*  BUF_15_004: equ 0x017D
040220             0130*  BUF_15_009: equ 0x017E
040220             0131*  BUF_15_010: equ 0x017F
040220             0132*  BUF_15_011: equ 0x0180
040220             0133*  BUF_15_012: equ 0x0181
040220             0134*  BUF_15_013: equ 0x0182
040220             0135*  BUF_15_014: equ 0x0183
040220             0136*  BUF_15_015: equ 0x0184
040220             0137*  BUF_15_016: equ 0x0185
040220             0138*  BUF_15_020: equ 0x0186
040220             0139*  BUF_15_024: equ 0x0187
040220             0140*  BUF_15_025: equ 0x0188
040220             0141*  BUF_15_026: equ 0x0189
040220             0142*  BUF_15_027: equ 0x018A
040220             0143*  BUF_15_028: equ 0x018B
040220             0144*  BUF_15_029: equ 0x018C
040220             0145*  BUF_15_032: equ 0x018D
040220             0146*  BUF_15_035: equ 0x018E
040220             0147*  BUF_15_036: equ 0x018F
040220             0148*  BUF_15_037: equ 0x0190
040220             0149*  BUF_15_038: equ 0x0191
040220             0150*  BUF_15_040: equ 0x0192
040220             0151*  BUF_15_042: equ 0x0193
040220             0152*  BUF_15_043: equ 0x0194
040220             0153*  BUF_15_044: equ 0x0195
040220             0154*  BUF_16_004: equ 0x0196
040220             0155*  BUF_16_009: equ 0x0197
040220             0156*  BUF_16_010: equ 0x0198
040220             0157*  BUF_16_011: equ 0x0199
040220             0158*  BUF_16_012: equ 0x019A
040220             0159*  BUF_16_013: equ 0x019B
040220             0160*  BUF_16_014: equ 0x019C
040220             0161*  BUF_16_015: equ 0x019D
040220             0162*  BUF_16_016: equ 0x019E
040220             0163*  BUF_16_020: equ 0x019F
040220             0164*  BUF_16_024: equ 0x01A0
040220             0165*  BUF_16_025: equ 0x01A1
040220             0166*  BUF_16_026: equ 0x01A2
040220             0167*  BUF_16_027: equ 0x01A3
040220             0168*  BUF_16_028: equ 0x01A4
040220             0169*  BUF_16_029: equ 0x01A5
040220             0170*  BUF_16_032: equ 0x01A6
040220             0171*  BUF_16_035: equ 0x01A7
040220             0172*  BUF_16_036: equ 0x01A8
040220             0173*  BUF_16_037: equ 0x01A9
040220             0174*  BUF_16_038: equ 0x01AA
040220             0175*  BUF_16_040: equ 0x01AB
040220             0176*  BUF_16_042: equ 0x01AC
040220             0177*  BUF_16_043: equ 0x01AD
040220             0178*  BUF_16_044: equ 0x01AE
040220             0179*  BUF_17_004: equ 0x01AF
040220             0180*  BUF_17_009: equ 0x01B0
040220             0181*  BUF_17_010: equ 0x01B1
040220             0182*  BUF_17_011: equ 0x01B2
040220             0183*  BUF_17_012: equ 0x01B3
040220             0184*  BUF_17_013: equ 0x01B4
040220             0185*  BUF_17_014: equ 0x01B5
040220             0186*  BUF_17_015: equ 0x01B6
040220             0187*  BUF_17_016: equ 0x01B7
040220             0188*  BUF_17_020: equ 0x01B8
040220             0189*  BUF_17_024: equ 0x01B9
040220             0190*  BUF_17_025: equ 0x01BA
040220             0191*  BUF_17_026: equ 0x01BB
040220             0192*  BUF_17_027: equ 0x01BC
040220             0193*  BUF_17_028: equ 0x01BD
040220             0194*  BUF_17_029: equ 0x01BE
040220             0195*  BUF_17_032: equ 0x01BF
040220             0196*  BUF_17_035: equ 0x01C0
040220             0197*  BUF_17_036: equ 0x01C1
040220             0198*  BUF_17_037: equ 0x01C2
040220             0199*  BUF_17_038: equ 0x01C3
040220             0200*  BUF_17_040: equ 0x01C4
040220             0201*  BUF_17_042: equ 0x01C5
040220             0202*  BUF_17_043: equ 0x01C6
040220             0203*  BUF_17_044: equ 0x01C7
040220             0204*  BUF_57_004: equ 0x01C8
040220             0205*  BUF_57_009: equ 0x01C9
040220             0206*  BUF_57_010: equ 0x01CA
040220             0207*  BUF_57_011: equ 0x01CB
040220             0208*  BUF_57_012: equ 0x01CC
040220             0209*  BUF_57_013: equ 0x01CD
040220             0210*  BUF_57_014: equ 0x01CE
040220             0211*  BUF_57_015: equ 0x01CF
040220             0212*  BUF_57_016: equ 0x01D0
040220             0213*  BUF_57_020: equ 0x01D1
040220             0214*  BUF_57_024: equ 0x01D2
040220             0215*  BUF_57_025: equ 0x01D3
040220             0216*  BUF_57_026: equ 0x01D4
040220             0217*  BUF_57_027: equ 0x01D5
040220             0218*  BUF_57_028: equ 0x01D6
040220             0219*  BUF_57_029: equ 0x01D7
040220             0220*  BUF_57_032: equ 0x01D8
040220             0221*  BUF_57_035: equ 0x01D9
040220             0222*  BUF_57_036: equ 0x01DA
040220             0223*  BUF_57_037: equ 0x01DB
040220             0224*  BUF_57_038: equ 0x01DC
040220             0225*  BUF_57_040: equ 0x01DD
040220             0226*  BUF_57_042: equ 0x01DE
040220             0227*  BUF_57_043: equ 0x01DF
040220             0228*  BUF_57_044: equ 0x01E0
040220             0229*  BUF_58_004: equ 0x01E1
040220             0230*  BUF_58_009: equ 0x01E2
040220             0231*  BUF_58_010: equ 0x01E3
040220             0232*  BUF_58_011: equ 0x01E4
040220             0233*  BUF_58_012: equ 0x01E5
040220             0234*  BUF_58_013: equ 0x01E6
040220             0235*  BUF_58_014: equ 0x01E7
040220             0236*  BUF_58_015: equ 0x01E8
040220             0237*  BUF_58_016: equ 0x01E9
040220             0238*  BUF_58_020: equ 0x01EA
040220             0239*  BUF_58_024: equ 0x01EB
040220             0240*  BUF_58_025: equ 0x01EC
040220             0241*  BUF_58_026: equ 0x01ED
040220             0242*  BUF_58_027: equ 0x01EE
040220             0243*  BUF_58_028: equ 0x01EF
040220             0244*  BUF_58_029: equ 0x01F0
040220             0245*  BUF_58_032: equ 0x01F1
040220             0246*  BUF_58_035: equ 0x01F2
040220             0247*  BUF_58_036: equ 0x01F3
040220             0248*  BUF_58_037: equ 0x01F4
040220             0249*  BUF_58_038: equ 0x01F5
040220             0250*  BUF_58_040: equ 0x01F6
040220             0251*  BUF_58_042: equ 0x01F7
040220             0252*  BUF_58_043: equ 0x01F8
040220             0253*  BUF_58_044: equ 0x01F9
040220             0254*  BUF_59_004: equ 0x01FA
040220             0255*  BUF_59_009: equ 0x01FB
040220             0256*  BUF_59_010: equ 0x01FC
040220             0257*  BUF_59_011: equ 0x01FD
040220             0258*  BUF_59_012: equ 0x01FE
040220             0259*  BUF_59_013: equ 0x01FF
040220             0260*  BUF_59_014: equ 0x0200
040220             0261*  BUF_59_015: equ 0x0201
040220             0262*  BUF_59_016: equ 0x0202
040220             0263*  BUF_59_020: equ 0x0203
040220             0264*  BUF_59_024: equ 0x0204
040220             0265*  BUF_59_025: equ 0x0205
040220             0266*  BUF_59_026: equ 0x0206
040220             0267*  BUF_59_027: equ 0x0207
040220             0268*  BUF_59_028: equ 0x0208
040220             0269*  BUF_59_029: equ 0x0209
040220             0270*  BUF_59_032: equ 0x020A
040220             0271*  BUF_59_035: equ 0x020B
040220             0272*  BUF_59_036: equ 0x020C
040220             0273*  BUF_59_037: equ 0x020D
040220             0274*  BUF_59_038: equ 0x020E
040220             0275*  BUF_59_040: equ 0x020F
040220             0276*  BUF_59_042: equ 0x0210
040220             0277*  BUF_59_043: equ 0x0211
040220             0278*  BUF_59_044: equ 0x0212
040220             0279*  
040220             0280*  cube_num_panels: equ 275
040220             0281*  
040220             0282*  ; cube buffer id reverse lookup:
040220             0283*  cube_buffer_id_lut:
040220 00 01 00    0284*  	dl BUF_10_004
040223 01 01 00    0285*  	dl BUF_10_009
040226 02 01 00    0286*  	dl BUF_10_010
040229 03 01 00    0287*  	dl BUF_10_011
04022C 04 01 00    0288*  	dl BUF_10_012
04022F 05 01 00    0289*  	dl BUF_10_013
040232 06 01 00    0290*  	dl BUF_10_014
040235 07 01 00    0291*  	dl BUF_10_015
040238 08 01 00    0292*  	dl BUF_10_016
04023B 09 01 00    0293*  	dl BUF_10_020
04023E 0A 01 00    0294*  	dl BUF_10_024
040241 0B 01 00    0295*  	dl BUF_10_025
040244 0C 01 00    0296*  	dl BUF_10_026
040247 0D 01 00    0297*  	dl BUF_10_027
04024A 0E 01 00    0298*  	dl BUF_10_028
04024D 0F 01 00    0299*  	dl BUF_10_029
040250 10 01 00    0300*  	dl BUF_10_032
040253 11 01 00    0301*  	dl BUF_10_035
040256 12 01 00    0302*  	dl BUF_10_036
040259 13 01 00    0303*  	dl BUF_10_037
04025C 14 01 00    0304*  	dl BUF_10_038
04025F 15 01 00    0305*  	dl BUF_10_040
040262 16 01 00    0306*  	dl BUF_10_042
040265 17 01 00    0307*  	dl BUF_10_043
040268 18 01 00    0308*  	dl BUF_10_044
04026B 19 01 00    0309*  	dl BUF_11_004
04026E 1A 01 00    0310*  	dl BUF_11_009
040271 1B 01 00    0311*  	dl BUF_11_010
040274 1C 01 00    0312*  	dl BUF_11_011
040277 1D 01 00    0313*  	dl BUF_11_012
04027A 1E 01 00    0314*  	dl BUF_11_013
04027D 1F 01 00    0315*  	dl BUF_11_014
040280 20 01 00    0316*  	dl BUF_11_015
040283 21 01 00    0317*  	dl BUF_11_016
040286 22 01 00    0318*  	dl BUF_11_020
040289 23 01 00    0319*  	dl BUF_11_024
04028C 24 01 00    0320*  	dl BUF_11_025
04028F 25 01 00    0321*  	dl BUF_11_026
040292 26 01 00    0322*  	dl BUF_11_027
040295 27 01 00    0323*  	dl BUF_11_028
040298 28 01 00    0324*  	dl BUF_11_029
04029B 29 01 00    0325*  	dl BUF_11_032
04029E 2A 01 00    0326*  	dl BUF_11_035
0402A1 2B 01 00    0327*  	dl BUF_11_036
0402A4 2C 01 00    0328*  	dl BUF_11_037
0402A7 2D 01 00    0329*  	dl BUF_11_038
0402AA 2E 01 00    0330*  	dl BUF_11_040
0402AD 2F 01 00    0331*  	dl BUF_11_042
0402B0 30 01 00    0332*  	dl BUF_11_043
0402B3 31 01 00    0333*  	dl BUF_11_044
0402B6 32 01 00    0334*  	dl BUF_12_004
0402B9 33 01 00    0335*  	dl BUF_12_009
0402BC 34 01 00    0336*  	dl BUF_12_010
0402BF 35 01 00    0337*  	dl BUF_12_011
0402C2 36 01 00    0338*  	dl BUF_12_012
0402C5 37 01 00    0339*  	dl BUF_12_013
0402C8 38 01 00    0340*  	dl BUF_12_014
0402CB 39 01 00    0341*  	dl BUF_12_015
0402CE 3A 01 00    0342*  	dl BUF_12_016
0402D1 3B 01 00    0343*  	dl BUF_12_020
0402D4 3C 01 00    0344*  	dl BUF_12_024
0402D7 3D 01 00    0345*  	dl BUF_12_025
0402DA 3E 01 00    0346*  	dl BUF_12_026
0402DD 3F 01 00    0347*  	dl BUF_12_027
0402E0 40 01 00    0348*  	dl BUF_12_028
0402E3 41 01 00    0349*  	dl BUF_12_029
0402E6 42 01 00    0350*  	dl BUF_12_032
0402E9 43 01 00    0351*  	dl BUF_12_035
0402EC 44 01 00    0352*  	dl BUF_12_036
0402EF 45 01 00    0353*  	dl BUF_12_037
0402F2 46 01 00    0354*  	dl BUF_12_038
0402F5 47 01 00    0355*  	dl BUF_12_040
0402F8 48 01 00    0356*  	dl BUF_12_042
0402FB 49 01 00    0357*  	dl BUF_12_043
0402FE 4A 01 00    0358*  	dl BUF_12_044
040301 4B 01 00    0359*  	dl BUF_13_004
040304 4C 01 00    0360*  	dl BUF_13_009
040307 4D 01 00    0361*  	dl BUF_13_010
04030A 4E 01 00    0362*  	dl BUF_13_011
04030D 4F 01 00    0363*  	dl BUF_13_012
040310 50 01 00    0364*  	dl BUF_13_013
040313 51 01 00    0365*  	dl BUF_13_014
040316 52 01 00    0366*  	dl BUF_13_015
040319 53 01 00    0367*  	dl BUF_13_016
04031C 54 01 00    0368*  	dl BUF_13_020
04031F 55 01 00    0369*  	dl BUF_13_024
040322 56 01 00    0370*  	dl BUF_13_025
040325 57 01 00    0371*  	dl BUF_13_026
040328 58 01 00    0372*  	dl BUF_13_027
04032B 59 01 00    0373*  	dl BUF_13_028
04032E 5A 01 00    0374*  	dl BUF_13_029
040331 5B 01 00    0375*  	dl BUF_13_032
040334 5C 01 00    0376*  	dl BUF_13_035
040337 5D 01 00    0377*  	dl BUF_13_036
04033A 5E 01 00    0378*  	dl BUF_13_037
04033D 5F 01 00    0379*  	dl BUF_13_038
040340 60 01 00    0380*  	dl BUF_13_040
040343 61 01 00    0381*  	dl BUF_13_042
040346 62 01 00    0382*  	dl BUF_13_043
040349 63 01 00    0383*  	dl BUF_13_044
04034C 64 01 00    0384*  	dl BUF_14_004
04034F 65 01 00    0385*  	dl BUF_14_009
040352 66 01 00    0386*  	dl BUF_14_010
040355 67 01 00    0387*  	dl BUF_14_011
040358 68 01 00    0388*  	dl BUF_14_012
04035B 69 01 00    0389*  	dl BUF_14_013
04035E 6A 01 00    0390*  	dl BUF_14_014
040361 6B 01 00    0391*  	dl BUF_14_015
040364 6C 01 00    0392*  	dl BUF_14_016
040367 6D 01 00    0393*  	dl BUF_14_020
04036A 6E 01 00    0394*  	dl BUF_14_024
04036D 6F 01 00    0395*  	dl BUF_14_025
040370 70 01 00    0396*  	dl BUF_14_026
040373 71 01 00    0397*  	dl BUF_14_027
040376 72 01 00    0398*  	dl BUF_14_028
040379 73 01 00    0399*  	dl BUF_14_029
04037C 74 01 00    0400*  	dl BUF_14_032
04037F 75 01 00    0401*  	dl BUF_14_035
040382 76 01 00    0402*  	dl BUF_14_036
040385 77 01 00    0403*  	dl BUF_14_037
040388 78 01 00    0404*  	dl BUF_14_038
04038B 79 01 00    0405*  	dl BUF_14_040
04038E 7A 01 00    0406*  	dl BUF_14_042
040391 7B 01 00    0407*  	dl BUF_14_043
040394 7C 01 00    0408*  	dl BUF_14_044
040397 7D 01 00    0409*  	dl BUF_15_004
04039A 7E 01 00    0410*  	dl BUF_15_009
04039D 7F 01 00    0411*  	dl BUF_15_010
0403A0 80 01 00    0412*  	dl BUF_15_011
0403A3 81 01 00    0413*  	dl BUF_15_012
0403A6 82 01 00    0414*  	dl BUF_15_013
0403A9 83 01 00    0415*  	dl BUF_15_014
0403AC 84 01 00    0416*  	dl BUF_15_015
0403AF 85 01 00    0417*  	dl BUF_15_016
0403B2 86 01 00    0418*  	dl BUF_15_020
0403B5 87 01 00    0419*  	dl BUF_15_024
0403B8 88 01 00    0420*  	dl BUF_15_025
0403BB 89 01 00    0421*  	dl BUF_15_026
0403BE 8A 01 00    0422*  	dl BUF_15_027
0403C1 8B 01 00    0423*  	dl BUF_15_028
0403C4 8C 01 00    0424*  	dl BUF_15_029
0403C7 8D 01 00    0425*  	dl BUF_15_032
0403CA 8E 01 00    0426*  	dl BUF_15_035
0403CD 8F 01 00    0427*  	dl BUF_15_036
0403D0 90 01 00    0428*  	dl BUF_15_037
0403D3 91 01 00    0429*  	dl BUF_15_038
0403D6 92 01 00    0430*  	dl BUF_15_040
0403D9 93 01 00    0431*  	dl BUF_15_042
0403DC 94 01 00    0432*  	dl BUF_15_043
0403DF 95 01 00    0433*  	dl BUF_15_044
0403E2 96 01 00    0434*  	dl BUF_16_004
0403E5 97 01 00    0435*  	dl BUF_16_009
0403E8 98 01 00    0436*  	dl BUF_16_010
0403EB 99 01 00    0437*  	dl BUF_16_011
0403EE 9A 01 00    0438*  	dl BUF_16_012
0403F1 9B 01 00    0439*  	dl BUF_16_013
0403F4 9C 01 00    0440*  	dl BUF_16_014
0403F7 9D 01 00    0441*  	dl BUF_16_015
0403FA 9E 01 00    0442*  	dl BUF_16_016
0403FD 9F 01 00    0443*  	dl BUF_16_020
040400 A0 01 00    0444*  	dl BUF_16_024
040403 A1 01 00    0445*  	dl BUF_16_025
040406 A2 01 00    0446*  	dl BUF_16_026
040409 A3 01 00    0447*  	dl BUF_16_027
04040C A4 01 00    0448*  	dl BUF_16_028
04040F A5 01 00    0449*  	dl BUF_16_029
040412 A6 01 00    0450*  	dl BUF_16_032
040415 A7 01 00    0451*  	dl BUF_16_035
040418 A8 01 00    0452*  	dl BUF_16_036
04041B A9 01 00    0453*  	dl BUF_16_037
04041E AA 01 00    0454*  	dl BUF_16_038
040421 AB 01 00    0455*  	dl BUF_16_040
040424 AC 01 00    0456*  	dl BUF_16_042
040427 AD 01 00    0457*  	dl BUF_16_043
04042A AE 01 00    0458*  	dl BUF_16_044
04042D AF 01 00    0459*  	dl BUF_17_004
040430 B0 01 00    0460*  	dl BUF_17_009
040433 B1 01 00    0461*  	dl BUF_17_010
040436 B2 01 00    0462*  	dl BUF_17_011
040439 B3 01 00    0463*  	dl BUF_17_012
04043C B4 01 00    0464*  	dl BUF_17_013
04043F B5 01 00    0465*  	dl BUF_17_014
040442 B6 01 00    0466*  	dl BUF_17_015
040445 B7 01 00    0467*  	dl BUF_17_016
040448 B8 01 00    0468*  	dl BUF_17_020
04044B B9 01 00    0469*  	dl BUF_17_024
04044E BA 01 00    0470*  	dl BUF_17_025
040451 BB 01 00    0471*  	dl BUF_17_026
040454 BC 01 00    0472*  	dl BUF_17_027
040457 BD 01 00    0473*  	dl BUF_17_028
04045A BE 01 00    0474*  	dl BUF_17_029
04045D BF 01 00    0475*  	dl BUF_17_032
040460 C0 01 00    0476*  	dl BUF_17_035
040463 C1 01 00    0477*  	dl BUF_17_036
040466 C2 01 00    0478*  	dl BUF_17_037
040469 C3 01 00    0479*  	dl BUF_17_038
04046C C4 01 00    0480*  	dl BUF_17_040
04046F C5 01 00    0481*  	dl BUF_17_042
040472 C6 01 00    0482*  	dl BUF_17_043
040475 C7 01 00    0483*  	dl BUF_17_044
040478 C8 01 00    0484*  	dl BUF_57_004
04047B C9 01 00    0485*  	dl BUF_57_009
04047E CA 01 00    0486*  	dl BUF_57_010
040481 CB 01 00    0487*  	dl BUF_57_011
040484 CC 01 00    0488*  	dl BUF_57_012
040487 CD 01 00    0489*  	dl BUF_57_013
04048A CE 01 00    0490*  	dl BUF_57_014
04048D CF 01 00    0491*  	dl BUF_57_015
040490 D0 01 00    0492*  	dl BUF_57_016
040493 D1 01 00    0493*  	dl BUF_57_020
040496 D2 01 00    0494*  	dl BUF_57_024
040499 D3 01 00    0495*  	dl BUF_57_025
04049C D4 01 00    0496*  	dl BUF_57_026
04049F D5 01 00    0497*  	dl BUF_57_027
0404A2 D6 01 00    0498*  	dl BUF_57_028
0404A5 D7 01 00    0499*  	dl BUF_57_029
0404A8 D8 01 00    0500*  	dl BUF_57_032
0404AB D9 01 00    0501*  	dl BUF_57_035
0404AE DA 01 00    0502*  	dl BUF_57_036
0404B1 DB 01 00    0503*  	dl BUF_57_037
0404B4 DC 01 00    0504*  	dl BUF_57_038
0404B7 DD 01 00    0505*  	dl BUF_57_040
0404BA DE 01 00    0506*  	dl BUF_57_042
0404BD DF 01 00    0507*  	dl BUF_57_043
0404C0 E0 01 00    0508*  	dl BUF_57_044
0404C3 E1 01 00    0509*  	dl BUF_58_004
0404C6 E2 01 00    0510*  	dl BUF_58_009
0404C9 E3 01 00    0511*  	dl BUF_58_010
0404CC E4 01 00    0512*  	dl BUF_58_011
0404CF E5 01 00    0513*  	dl BUF_58_012
0404D2 E6 01 00    0514*  	dl BUF_58_013
0404D5 E7 01 00    0515*  	dl BUF_58_014
0404D8 E8 01 00    0516*  	dl BUF_58_015
0404DB E9 01 00    0517*  	dl BUF_58_016
0404DE EA 01 00    0518*  	dl BUF_58_020
0404E1 EB 01 00    0519*  	dl BUF_58_024
0404E4 EC 01 00    0520*  	dl BUF_58_025
0404E7 ED 01 00    0521*  	dl BUF_58_026
0404EA EE 01 00    0522*  	dl BUF_58_027
0404ED EF 01 00    0523*  	dl BUF_58_028
0404F0 F0 01 00    0524*  	dl BUF_58_029
0404F3 F1 01 00    0525*  	dl BUF_58_032
0404F6 F2 01 00    0526*  	dl BUF_58_035
0404F9 F3 01 00    0527*  	dl BUF_58_036
0404FC F4 01 00    0528*  	dl BUF_58_037
0404FF F5 01 00    0529*  	dl BUF_58_038
040502 F6 01 00    0530*  	dl BUF_58_040
040505 F7 01 00    0531*  	dl BUF_58_042
040508 F8 01 00    0532*  	dl BUF_58_043
04050B F9 01 00    0533*  	dl BUF_58_044
04050E FA 01 00    0534*  	dl BUF_59_004
040511 FB 01 00    0535*  	dl BUF_59_009
040514 FC 01 00    0536*  	dl BUF_59_010
040517 FD 01 00    0537*  	dl BUF_59_011
04051A FE 01 00    0538*  	dl BUF_59_012
04051D FF 01 00    0539*  	dl BUF_59_013
040520 00 02 00    0540*  	dl BUF_59_014
040523 01 02 00    0541*  	dl BUF_59_015
040526 02 02 00    0542*  	dl BUF_59_016
040529 03 02 00    0543*  	dl BUF_59_020
04052C 04 02 00    0544*  	dl BUF_59_024
04052F 05 02 00    0545*  	dl BUF_59_025
040532 06 02 00    0546*  	dl BUF_59_026
040535 07 02 00    0547*  	dl BUF_59_027
040538 08 02 00    0548*  	dl BUF_59_028
04053B 09 02 00    0549*  	dl BUF_59_029
04053E 0A 02 00    0550*  	dl BUF_59_032
040541 0B 02 00    0551*  	dl BUF_59_035
040544 0C 02 00    0552*  	dl BUF_59_036
040547 0D 02 00    0553*  	dl BUF_59_037
04054A 0E 02 00    0554*  	dl BUF_59_038
04054D 0F 02 00    0555*  	dl BUF_59_040
040550 10 02 00    0556*  	dl BUF_59_042
040553 11 02 00    0557*  	dl BUF_59_043
040556 12 02 00    0558*  	dl BUF_59_044
040559             0559*  
040559             0560*  ; cube load routines jump table:
040559             0561*  cube_load_panels_table:
040559 92 08 04    0562*  	dl ld_10_004
04055C BC 08 04    0563*  	dl ld_10_009
04055F E6 08 04    0564*  	dl ld_10_010
040562 10 09 04    0565*  	dl ld_10_011
040565 3A 09 04    0566*  	dl ld_10_012
040568 64 09 04    0567*  	dl ld_10_013
04056B 8E 09 04    0568*  	dl ld_10_014
04056E B8 09 04    0569*  	dl ld_10_015
040571 E2 09 04    0570*  	dl ld_10_016
040574 0C 0A 04    0571*  	dl ld_10_020
040577 36 0A 04    0572*  	dl ld_10_024
04057A 60 0A 04    0573*  	dl ld_10_025
04057D 8A 0A 04    0574*  	dl ld_10_026
040580 B4 0A 04    0575*  	dl ld_10_027
040583 DE 0A 04    0576*  	dl ld_10_028
040586 08 0B 04    0577*  	dl ld_10_029
040589 32 0B 04    0578*  	dl ld_10_032
04058C 5C 0B 04    0579*  	dl ld_10_035
04058F 86 0B 04    0580*  	dl ld_10_036
040592 B0 0B 04    0581*  	dl ld_10_037
040595 DA 0B 04    0582*  	dl ld_10_038
040598 04 0C 04    0583*  	dl ld_10_040
04059B 2E 0C 04    0584*  	dl ld_10_042
04059E 58 0C 04    0585*  	dl ld_10_043
0405A1 82 0C 04    0586*  	dl ld_10_044
0405A4 AC 0C 04    0587*  	dl ld_11_004
0405A7 D6 0C 04    0588*  	dl ld_11_009
0405AA 00 0D 04    0589*  	dl ld_11_010
0405AD 2A 0D 04    0590*  	dl ld_11_011
0405B0 54 0D 04    0591*  	dl ld_11_012
0405B3 7E 0D 04    0592*  	dl ld_11_013
0405B6 A8 0D 04    0593*  	dl ld_11_014
0405B9 D2 0D 04    0594*  	dl ld_11_015
0405BC FC 0D 04    0595*  	dl ld_11_016
0405BF 26 0E 04    0596*  	dl ld_11_020
0405C2 50 0E 04    0597*  	dl ld_11_024
0405C5 7A 0E 04    0598*  	dl ld_11_025
0405C8 A4 0E 04    0599*  	dl ld_11_026
0405CB CE 0E 04    0600*  	dl ld_11_027
0405CE F8 0E 04    0601*  	dl ld_11_028
0405D1 22 0F 04    0602*  	dl ld_11_029
0405D4 4C 0F 04    0603*  	dl ld_11_032
0405D7 76 0F 04    0604*  	dl ld_11_035
0405DA A0 0F 04    0605*  	dl ld_11_036
0405DD CA 0F 04    0606*  	dl ld_11_037
0405E0 F4 0F 04    0607*  	dl ld_11_038
0405E3 1E 10 04    0608*  	dl ld_11_040
0405E6 48 10 04    0609*  	dl ld_11_042
0405E9 72 10 04    0610*  	dl ld_11_043
0405EC 9C 10 04    0611*  	dl ld_11_044
0405EF C6 10 04    0612*  	dl ld_12_004
0405F2 F0 10 04    0613*  	dl ld_12_009
0405F5 1A 11 04    0614*  	dl ld_12_010
0405F8 44 11 04    0615*  	dl ld_12_011
0405FB 6E 11 04    0616*  	dl ld_12_012
0405FE 98 11 04    0617*  	dl ld_12_013
040601 C2 11 04    0618*  	dl ld_12_014
040604 EC 11 04    0619*  	dl ld_12_015
040607 16 12 04    0620*  	dl ld_12_016
04060A 40 12 04    0621*  	dl ld_12_020
04060D 6A 12 04    0622*  	dl ld_12_024
040610 94 12 04    0623*  	dl ld_12_025
040613 BE 12 04    0624*  	dl ld_12_026
040616 E8 12 04    0625*  	dl ld_12_027
040619 12 13 04    0626*  	dl ld_12_028
04061C 3C 13 04    0627*  	dl ld_12_029
04061F 66 13 04    0628*  	dl ld_12_032
040622 90 13 04    0629*  	dl ld_12_035
040625 BA 13 04    0630*  	dl ld_12_036
040628 E4 13 04    0631*  	dl ld_12_037
04062B 0E 14 04    0632*  	dl ld_12_038
04062E 38 14 04    0633*  	dl ld_12_040
040631 62 14 04    0634*  	dl ld_12_042
040634 8C 14 04    0635*  	dl ld_12_043
040637 B6 14 04    0636*  	dl ld_12_044
04063A E0 14 04    0637*  	dl ld_13_004
04063D 0A 15 04    0638*  	dl ld_13_009
040640 34 15 04    0639*  	dl ld_13_010
040643 5E 15 04    0640*  	dl ld_13_011
040646 88 15 04    0641*  	dl ld_13_012
040649 B2 15 04    0642*  	dl ld_13_013
04064C DC 15 04    0643*  	dl ld_13_014
04064F 06 16 04    0644*  	dl ld_13_015
040652 30 16 04    0645*  	dl ld_13_016
040655 5A 16 04    0646*  	dl ld_13_020
040658 84 16 04    0647*  	dl ld_13_024
04065B AE 16 04    0648*  	dl ld_13_025
04065E D8 16 04    0649*  	dl ld_13_026
040661 02 17 04    0650*  	dl ld_13_027
040664 2C 17 04    0651*  	dl ld_13_028
040667 56 17 04    0652*  	dl ld_13_029
04066A 80 17 04    0653*  	dl ld_13_032
04066D AA 17 04    0654*  	dl ld_13_035
040670 D4 17 04    0655*  	dl ld_13_036
040673 FE 17 04    0656*  	dl ld_13_037
040676 28 18 04    0657*  	dl ld_13_038
040679 52 18 04    0658*  	dl ld_13_040
04067C 7C 18 04    0659*  	dl ld_13_042
04067F A6 18 04    0660*  	dl ld_13_043
040682 D0 18 04    0661*  	dl ld_13_044
040685 FA 18 04    0662*  	dl ld_14_004
040688 24 19 04    0663*  	dl ld_14_009
04068B 4E 19 04    0664*  	dl ld_14_010
04068E 78 19 04    0665*  	dl ld_14_011
040691 A2 19 04    0666*  	dl ld_14_012
040694 CC 19 04    0667*  	dl ld_14_013
040697 F6 19 04    0668*  	dl ld_14_014
04069A 20 1A 04    0669*  	dl ld_14_015
04069D 4A 1A 04    0670*  	dl ld_14_016
0406A0 74 1A 04    0671*  	dl ld_14_020
0406A3 9E 1A 04    0672*  	dl ld_14_024
0406A6 C8 1A 04    0673*  	dl ld_14_025
0406A9 F2 1A 04    0674*  	dl ld_14_026
0406AC 1C 1B 04    0675*  	dl ld_14_027
0406AF 46 1B 04    0676*  	dl ld_14_028
0406B2 70 1B 04    0677*  	dl ld_14_029
0406B5 9A 1B 04    0678*  	dl ld_14_032
0406B8 C4 1B 04    0679*  	dl ld_14_035
0406BB EE 1B 04    0680*  	dl ld_14_036
0406BE 18 1C 04    0681*  	dl ld_14_037
0406C1 42 1C 04    0682*  	dl ld_14_038
0406C4 6C 1C 04    0683*  	dl ld_14_040
0406C7 96 1C 04    0684*  	dl ld_14_042
0406CA C0 1C 04    0685*  	dl ld_14_043
0406CD EA 1C 04    0686*  	dl ld_14_044
0406D0 14 1D 04    0687*  	dl ld_15_004
0406D3 3E 1D 04    0688*  	dl ld_15_009
0406D6 68 1D 04    0689*  	dl ld_15_010
0406D9 92 1D 04    0690*  	dl ld_15_011
0406DC BC 1D 04    0691*  	dl ld_15_012
0406DF E6 1D 04    0692*  	dl ld_15_013
0406E2 10 1E 04    0693*  	dl ld_15_014
0406E5 3A 1E 04    0694*  	dl ld_15_015
0406E8 64 1E 04    0695*  	dl ld_15_016
0406EB 8E 1E 04    0696*  	dl ld_15_020
0406EE B8 1E 04    0697*  	dl ld_15_024
0406F1 E2 1E 04    0698*  	dl ld_15_025
0406F4 0C 1F 04    0699*  	dl ld_15_026
0406F7 36 1F 04    0700*  	dl ld_15_027
0406FA 60 1F 04    0701*  	dl ld_15_028
0406FD 8A 1F 04    0702*  	dl ld_15_029
040700 B4 1F 04    0703*  	dl ld_15_032
040703 DE 1F 04    0704*  	dl ld_15_035
040706 08 20 04    0705*  	dl ld_15_036
040709 32 20 04    0706*  	dl ld_15_037
04070C 5C 20 04    0707*  	dl ld_15_038
04070F 86 20 04    0708*  	dl ld_15_040
040712 B0 20 04    0709*  	dl ld_15_042
040715 DA 20 04    0710*  	dl ld_15_043
040718 04 21 04    0711*  	dl ld_15_044
04071B 2E 21 04    0712*  	dl ld_16_004
04071E 58 21 04    0713*  	dl ld_16_009
040721 82 21 04    0714*  	dl ld_16_010
040724 AC 21 04    0715*  	dl ld_16_011
040727 D6 21 04    0716*  	dl ld_16_012
04072A 00 22 04    0717*  	dl ld_16_013
04072D 2A 22 04    0718*  	dl ld_16_014
040730 54 22 04    0719*  	dl ld_16_015
040733 7E 22 04    0720*  	dl ld_16_016
040736 A8 22 04    0721*  	dl ld_16_020
040739 D2 22 04    0722*  	dl ld_16_024
04073C FC 22 04    0723*  	dl ld_16_025
04073F 26 23 04    0724*  	dl ld_16_026
040742 50 23 04    0725*  	dl ld_16_027
040745 7A 23 04    0726*  	dl ld_16_028
040748 A4 23 04    0727*  	dl ld_16_029
04074B CE 23 04    0728*  	dl ld_16_032
04074E F8 23 04    0729*  	dl ld_16_035
040751 22 24 04    0730*  	dl ld_16_036
040754 4C 24 04    0731*  	dl ld_16_037
040757 76 24 04    0732*  	dl ld_16_038
04075A A0 24 04    0733*  	dl ld_16_040
04075D CA 24 04    0734*  	dl ld_16_042
040760 F4 24 04    0735*  	dl ld_16_043
040763 1E 25 04    0736*  	dl ld_16_044
040766 48 25 04    0737*  	dl ld_17_004
040769 72 25 04    0738*  	dl ld_17_009
04076C 9C 25 04    0739*  	dl ld_17_010
04076F C6 25 04    0740*  	dl ld_17_011
040772 F0 25 04    0741*  	dl ld_17_012
040775 1A 26 04    0742*  	dl ld_17_013
040778 44 26 04    0743*  	dl ld_17_014
04077B 6E 26 04    0744*  	dl ld_17_015
04077E 98 26 04    0745*  	dl ld_17_016
040781 C2 26 04    0746*  	dl ld_17_020
040784 EC 26 04    0747*  	dl ld_17_024
040787 16 27 04    0748*  	dl ld_17_025
04078A 40 27 04    0749*  	dl ld_17_026
04078D 6A 27 04    0750*  	dl ld_17_027
040790 94 27 04    0751*  	dl ld_17_028
040793 BE 27 04    0752*  	dl ld_17_029
040796 E8 27 04    0753*  	dl ld_17_032
040799 12 28 04    0754*  	dl ld_17_035
04079C 3C 28 04    0755*  	dl ld_17_036
04079F 66 28 04    0756*  	dl ld_17_037
0407A2 90 28 04    0757*  	dl ld_17_038
0407A5 BA 28 04    0758*  	dl ld_17_040
0407A8 E4 28 04    0759*  	dl ld_17_042
0407AB 0E 29 04    0760*  	dl ld_17_043
0407AE 38 29 04    0761*  	dl ld_17_044
0407B1 62 29 04    0762*  	dl ld_57_004
0407B4 8C 29 04    0763*  	dl ld_57_009
0407B7 B6 29 04    0764*  	dl ld_57_010
0407BA E0 29 04    0765*  	dl ld_57_011
0407BD 0A 2A 04    0766*  	dl ld_57_012
0407C0 34 2A 04    0767*  	dl ld_57_013
0407C3 5E 2A 04    0768*  	dl ld_57_014
0407C6 88 2A 04    0769*  	dl ld_57_015
0407C9 B2 2A 04    0770*  	dl ld_57_016
0407CC DC 2A 04    0771*  	dl ld_57_020
0407CF 06 2B 04    0772*  	dl ld_57_024
0407D2 30 2B 04    0773*  	dl ld_57_025
0407D5 5A 2B 04    0774*  	dl ld_57_026
0407D8 84 2B 04    0775*  	dl ld_57_027
0407DB AE 2B 04    0776*  	dl ld_57_028
0407DE D8 2B 04    0777*  	dl ld_57_029
0407E1 02 2C 04    0778*  	dl ld_57_032
0407E4 2C 2C 04    0779*  	dl ld_57_035
0407E7 56 2C 04    0780*  	dl ld_57_036
0407EA 80 2C 04    0781*  	dl ld_57_037
0407ED AA 2C 04    0782*  	dl ld_57_038
0407F0 D4 2C 04    0783*  	dl ld_57_040
0407F3 FE 2C 04    0784*  	dl ld_57_042
0407F6 28 2D 04    0785*  	dl ld_57_043
0407F9 52 2D 04    0786*  	dl ld_57_044
0407FC 7C 2D 04    0787*  	dl ld_58_004
0407FF A6 2D 04    0788*  	dl ld_58_009
040802 D0 2D 04    0789*  	dl ld_58_010
040805 FA 2D 04    0790*  	dl ld_58_011
040808 24 2E 04    0791*  	dl ld_58_012
04080B 4E 2E 04    0792*  	dl ld_58_013
04080E 78 2E 04    0793*  	dl ld_58_014
040811 A2 2E 04    0794*  	dl ld_58_015
040814 CC 2E 04    0795*  	dl ld_58_016
040817 F6 2E 04    0796*  	dl ld_58_020
04081A 20 2F 04    0797*  	dl ld_58_024
04081D 4A 2F 04    0798*  	dl ld_58_025
040820 74 2F 04    0799*  	dl ld_58_026
040823 9E 2F 04    0800*  	dl ld_58_027
040826 C8 2F 04    0801*  	dl ld_58_028
040829 F2 2F 04    0802*  	dl ld_58_029
04082C 1C 30 04    0803*  	dl ld_58_032
04082F 46 30 04    0804*  	dl ld_58_035
040832 70 30 04    0805*  	dl ld_58_036
040835 9A 30 04    0806*  	dl ld_58_037
040838 C4 30 04    0807*  	dl ld_58_038
04083B EE 30 04    0808*  	dl ld_58_040
04083E 18 31 04    0809*  	dl ld_58_042
040841 42 31 04    0810*  	dl ld_58_043
040844 6C 31 04    0811*  	dl ld_58_044
040847 96 31 04    0812*  	dl ld_59_004
04084A C0 31 04    0813*  	dl ld_59_009
04084D EA 31 04    0814*  	dl ld_59_010
040850 14 32 04    0815*  	dl ld_59_011
040853 3E 32 04    0816*  	dl ld_59_012
040856 68 32 04    0817*  	dl ld_59_013
040859 92 32 04    0818*  	dl ld_59_014
04085C BC 32 04    0819*  	dl ld_59_015
04085F E6 32 04    0820*  	dl ld_59_016
040862 10 33 04    0821*  	dl ld_59_020
040865 3A 33 04    0822*  	dl ld_59_024
040868 64 33 04    0823*  	dl ld_59_025
04086B 8E 33 04    0824*  	dl ld_59_026
04086E B8 33 04    0825*  	dl ld_59_027
040871 E2 33 04    0826*  	dl ld_59_028
040874 0C 34 04    0827*  	dl ld_59_029
040877 36 34 04    0828*  	dl ld_59_032
04087A 60 34 04    0829*  	dl ld_59_035
04087D 8A 34 04    0830*  	dl ld_59_036
040880 B4 34 04    0831*  	dl ld_59_037
040883 DE 34 04    0832*  	dl ld_59_038
040886 08 35 04    0833*  	dl ld_59_040
040889 32 35 04    0834*  	dl ld_59_042
04088C 5C 35 04    0835*  	dl ld_59_043
04088F 86 35 04    0836*  	dl ld_59_044
040892             0837*  
040892             0838*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
040892             0839*  
040892             0840*  ld_10_004:
040892 21 B0 35 04 0841*  	ld hl,F10_004
040896 22 63 BC 04 0842*  	ld (cur_filename),hl
04089A 11 8F C8 04 0843*  	ld de,filedata
04089E 01 00 00 01 0844*  	ld bc,65536
0408A2 3E 01       0845*  	ld a,mos_load
0408A4 5B CF       0846*  	RST.LIL 08h
0408A6 21 00 01 00 0847*  	ld hl,BUF_10_004
0408AA 01 24 00 00 0848*  	ld bc,36
0408AE 11 23 00 00 0849*  	ld de,35
0408B2 DD 21 EC 04 0850*  	ld ix,1260
       00          
0408B7 CD DE BD 04 0851*  	call vdu_load_img
0408BB C9          0852*  	ret
0408BC             0853*  
0408BC             0854*  ld_10_009:
0408BC 21 C4 35 04 0855*  	ld hl,F10_009
0408C0 22 63 BC 04 0856*  	ld (cur_filename),hl
0408C4 11 8F C8 04 0857*  	ld de,filedata
0408C8 01 00 00 01 0858*  	ld bc,65536
0408CC 3E 01       0859*  	ld a,mos_load
0408CE 5B CF       0860*  	RST.LIL 08h
0408D0 21 01 01 00 0861*  	ld hl,BUF_10_009
0408D4 01 23 00 00 0862*  	ld bc,35
0408D8 11 2D 00 00 0863*  	ld de,45
0408DC DD 21 27 06 0864*  	ld ix,1575
       00          
0408E1 CD DE BD 04 0865*  	call vdu_load_img
0408E5 C9          0866*  	ret
0408E6             0867*  
0408E6             0868*  ld_10_010:
0408E6 21 D8 35 04 0869*  	ld hl,F10_010
0408EA 22 63 BC 04 0870*  	ld (cur_filename),hl
0408EE 11 8F C8 04 0871*  	ld de,filedata
0408F2 01 00 00 01 0872*  	ld bc,65536
0408F6 3E 01       0873*  	ld a,mos_load
0408F8 5B CF       0874*  	RST.LIL 08h
0408FA 21 02 01 00 0875*  	ld hl,BUF_10_010
0408FE 01 19 00 00 0876*  	ld bc,25
040902 11 2D 00 00 0877*  	ld de,45
040906 DD 21 65 04 0878*  	ld ix,1125
       00          
04090B CD DE BD 04 0879*  	call vdu_load_img
04090F C9          0880*  	ret
040910             0881*  
040910             0882*  ld_10_011:
040910 21 EC 35 04 0883*  	ld hl,F10_011
040914 22 63 BC 04 0884*  	ld (cur_filename),hl
040918 11 8F C8 04 0885*  	ld de,filedata
04091C 01 00 00 01 0886*  	ld bc,65536
040920 3E 01       0887*  	ld a,mos_load
040922 5B CF       0888*  	RST.LIL 08h
040924 21 03 01 00 0889*  	ld hl,BUF_10_011
040928 01 0F 00 00 0890*  	ld bc,15
04092C 11 2D 00 00 0891*  	ld de,45
040930 DD 21 A3 02 0892*  	ld ix,675
       00          
040935 CD DE BD 04 0893*  	call vdu_load_img
040939 C9          0894*  	ret
04093A             0895*  
04093A             0896*  ld_10_012:
04093A 21 00 36 04 0897*  	ld hl,F10_012
04093E 22 63 BC 04 0898*  	ld (cur_filename),hl
040942 11 8F C8 04 0899*  	ld de,filedata
040946 01 00 00 01 0900*  	ld bc,65536
04094A 3E 01       0901*  	ld a,mos_load
04094C 5B CF       0902*  	RST.LIL 08h
04094E 21 04 01 00 0903*  	ld hl,BUF_10_012
040952 01 05 00 00 0904*  	ld bc,5
040956 11 2D 00 00 0905*  	ld de,45
04095A DD 21 E1 00 0906*  	ld ix,225
       00          
04095F CD DE BD 04 0907*  	call vdu_load_img
040963 C9          0908*  	ret
040964             0909*  
040964             0910*  ld_10_013:
040964 21 14 36 04 0911*  	ld hl,F10_013
040968 22 63 BC 04 0912*  	ld (cur_filename),hl
04096C 11 8F C8 04 0913*  	ld de,filedata
040970 01 00 00 01 0914*  	ld bc,65536
040974 3E 01       0915*  	ld a,mos_load
040976 5B CF       0916*  	RST.LIL 08h
040978 21 05 01 00 0917*  	ld hl,BUF_10_013
04097C 01 05 00 00 0918*  	ld bc,5
040980 11 2B 00 00 0919*  	ld de,43
040984 DD 21 D7 00 0920*  	ld ix,215
       00          
040989 CD DE BD 04 0921*  	call vdu_load_img
04098D C9          0922*  	ret
04098E             0923*  
04098E             0924*  ld_10_014:
04098E 21 28 36 04 0925*  	ld hl,F10_014
040992 22 63 BC 04 0926*  	ld (cur_filename),hl
040996 11 8F C8 04 0927*  	ld de,filedata
04099A 01 00 00 01 0928*  	ld bc,65536
04099E 3E 01       0929*  	ld a,mos_load
0409A0 5B CF       0930*  	RST.LIL 08h
0409A2 21 06 01 00 0931*  	ld hl,BUF_10_014
0409A6 01 0F 00 00 0932*  	ld bc,15
0409AA 11 2D 00 00 0933*  	ld de,45
0409AE DD 21 A3 02 0934*  	ld ix,675
       00          
0409B3 CD DE BD 04 0935*  	call vdu_load_img
0409B7 C9          0936*  	ret
0409B8             0937*  
0409B8             0938*  ld_10_015:
0409B8 21 3C 36 04 0939*  	ld hl,F10_015
0409BC 22 63 BC 04 0940*  	ld (cur_filename),hl
0409C0 11 8F C8 04 0941*  	ld de,filedata
0409C4 01 00 00 01 0942*  	ld bc,65536
0409C8 3E 01       0943*  	ld a,mos_load
0409CA 5B CF       0944*  	RST.LIL 08h
0409CC 21 07 01 00 0945*  	ld hl,BUF_10_015
0409D0 01 19 00 00 0946*  	ld bc,25
0409D4 11 2D 00 00 0947*  	ld de,45
0409D8 DD 21 65 04 0948*  	ld ix,1125
       00          
0409DD CD DE BD 04 0949*  	call vdu_load_img
0409E1 C9          0950*  	ret
0409E2             0951*  
0409E2             0952*  ld_10_016:
0409E2 21 50 36 04 0953*  	ld hl,F10_016
0409E6 22 63 BC 04 0954*  	ld (cur_filename),hl
0409EA 11 8F C8 04 0955*  	ld de,filedata
0409EE 01 00 00 01 0956*  	ld bc,65536
0409F2 3E 01       0957*  	ld a,mos_load
0409F4 5B CF       0958*  	RST.LIL 08h
0409F6 21 08 01 00 0959*  	ld hl,BUF_10_016
0409FA 01 23 00 00 0960*  	ld bc,35
0409FE 11 2D 00 00 0961*  	ld de,45
040A02 DD 21 27 06 0962*  	ld ix,1575
       00          
040A07 CD DE BD 04 0963*  	call vdu_load_img
040A0B C9          0964*  	ret
040A0C             0965*  
040A0C             0966*  ld_10_020:
040A0C 21 64 36 04 0967*  	ld hl,F10_020
040A10 22 63 BC 04 0968*  	ld (cur_filename),hl
040A14 11 8F C8 04 0969*  	ld de,filedata
040A18 01 00 00 01 0970*  	ld bc,65536
040A1C 3E 01       0971*  	ld a,mos_load
040A1E 5B CF       0972*  	RST.LIL 08h
040A20 21 09 01 00 0973*  	ld hl,BUF_10_020
040A24 01 2E 00 00 0974*  	ld bc,46
040A28 11 2D 00 00 0975*  	ld de,45
040A2C DD 21 16 08 0976*  	ld ix,2070
       00          
040A31 CD DE BD 04 0977*  	call vdu_load_img
040A35 C9          0978*  	ret
040A36             0979*  
040A36             0980*  ld_10_024:
040A36 21 78 36 04 0981*  	ld hl,F10_024
040A3A 22 63 BC 04 0982*  	ld (cur_filename),hl
040A3E 11 8F C8 04 0983*  	ld de,filedata
040A42 01 00 00 01 0984*  	ld bc,65536
040A46 3E 01       0985*  	ld a,mos_load
040A48 5B CF       0986*  	RST.LIL 08h
040A4A 21 0A 01 00 0987*  	ld hl,BUF_10_024
040A4E 01 2E 00 00 0988*  	ld bc,46
040A52 11 40 00 00 0989*  	ld de,64
040A56 DD 21 80 0B 0990*  	ld ix,2944
       00          
040A5B CD DE BD 04 0991*  	call vdu_load_img
040A5F C9          0992*  	ret
040A60             0993*  
040A60             0994*  ld_10_025:
040A60 21 8C 36 04 0995*  	ld hl,F10_025
040A64 22 63 BC 04 0996*  	ld (cur_filename),hl
040A68 11 8F C8 04 0997*  	ld de,filedata
040A6C 01 00 00 01 0998*  	ld bc,65536
040A70 3E 01       0999*  	ld a,mos_load
040A72 5B CF       1000*  	RST.LIL 08h
040A74 21 0B 01 00 1001*  	ld hl,BUF_10_025
040A78 01 1C 00 00 1002*  	ld bc,28
040A7C 11 40 00 00 1003*  	ld de,64
040A80 DD 21 00 07 1004*  	ld ix,1792
       00          
040A85 CD DE BD 04 1005*  	call vdu_load_img
040A89 C9          1006*  	ret
040A8A             1007*  
040A8A             1008*  ld_10_026:
040A8A 21 A0 36 04 1009*  	ld hl,F10_026
040A8E 22 63 BC 04 1010*  	ld (cur_filename),hl
040A92 11 8F C8 04 1011*  	ld de,filedata
040A96 01 00 00 01 1012*  	ld bc,65536
040A9A 3E 01       1013*  	ld a,mos_load
040A9C 5B CF       1014*  	RST.LIL 08h
040A9E 21 0C 01 00 1015*  	ld hl,BUF_10_026
040AA2 01 09 00 00 1016*  	ld bc,9
040AA6 11 40 00 00 1017*  	ld de,64
040AAA DD 21 40 02 1018*  	ld ix,576
       00          
040AAF CD DE BD 04 1019*  	call vdu_load_img
040AB3 C9          1020*  	ret
040AB4             1021*  
040AB4             1022*  ld_10_027:
040AB4 21 B4 36 04 1023*  	ld hl,F10_027
040AB8 22 63 BC 04 1024*  	ld (cur_filename),hl
040ABC 11 8F C8 04 1025*  	ld de,filedata
040AC0 01 00 00 01 1026*  	ld bc,65536
040AC4 3E 01       1027*  	ld a,mos_load
040AC6 5B CF       1028*  	RST.LIL 08h
040AC8 21 0D 01 00 1029*  	ld hl,BUF_10_027
040ACC 01 0A 00 00 1030*  	ld bc,10
040AD0 11 3E 00 00 1031*  	ld de,62
040AD4 DD 21 6C 02 1032*  	ld ix,620
       00          
040AD9 CD DE BD 04 1033*  	call vdu_load_img
040ADD C9          1034*  	ret
040ADE             1035*  
040ADE             1036*  ld_10_028:
040ADE 21 C8 36 04 1037*  	ld hl,F10_028
040AE2 22 63 BC 04 1038*  	ld (cur_filename),hl
040AE6 11 8F C8 04 1039*  	ld de,filedata
040AEA 01 00 00 01 1040*  	ld bc,65536
040AEE 3E 01       1041*  	ld a,mos_load
040AF0 5B CF       1042*  	RST.LIL 08h
040AF2 21 0E 01 00 1043*  	ld hl,BUF_10_028
040AF6 01 1C 00 00 1044*  	ld bc,28
040AFA 11 40 00 00 1045*  	ld de,64
040AFE DD 21 00 07 1046*  	ld ix,1792
       00          
040B03 CD DE BD 04 1047*  	call vdu_load_img
040B07 C9          1048*  	ret
040B08             1049*  
040B08             1050*  ld_10_029:
040B08 21 DC 36 04 1051*  	ld hl,F10_029
040B0C 22 63 BC 04 1052*  	ld (cur_filename),hl
040B10 11 8F C8 04 1053*  	ld de,filedata
040B14 01 00 00 01 1054*  	ld bc,65536
040B18 3E 01       1055*  	ld a,mos_load
040B1A 5B CF       1056*  	RST.LIL 08h
040B1C 21 0F 01 00 1057*  	ld hl,BUF_10_029
040B20 01 2F 00 00 1058*  	ld bc,47
040B24 11 40 00 00 1059*  	ld de,64
040B28 DD 21 C0 0B 1060*  	ld ix,3008
       00          
040B2D CD DE BD 04 1061*  	call vdu_load_img
040B31 C9          1062*  	ret
040B32             1063*  
040B32             1064*  ld_10_032:
040B32 21 F0 36 04 1065*  	ld hl,F10_032
040B36 22 63 BC 04 1066*  	ld (cur_filename),hl
040B3A 11 8F C8 04 1067*  	ld de,filedata
040B3E 01 00 00 01 1068*  	ld bc,65536
040B42 3E 01       1069*  	ld a,mos_load
040B44 5B CF       1070*  	RST.LIL 08h
040B46 21 10 01 00 1071*  	ld hl,BUF_10_032
040B4A 01 41 00 00 1072*  	ld bc,65
040B4E 11 40 00 00 1073*  	ld de,64
040B52 DD 21 40 10 1074*  	ld ix,4160
       00          
040B57 CD DE BD 04 1075*  	call vdu_load_img
040B5B C9          1076*  	ret
040B5C             1077*  
040B5C             1078*  ld_10_035:
040B5C 21 04 37 04 1079*  	ld hl,F10_035
040B60 22 63 BC 04 1080*  	ld (cur_filename),hl
040B64 11 8F C8 04 1081*  	ld de,filedata
040B68 01 00 00 01 1082*  	ld bc,65536
040B6C 3E 01       1083*  	ld a,mos_load
040B6E 5B CF       1084*  	RST.LIL 08h
040B70 21 11 01 00 1085*  	ld hl,BUF_10_035
040B74 01 3F 00 00 1086*  	ld bc,63
040B78 11 6B 00 00 1087*  	ld de,107
040B7C DD 21 55 1A 1088*  	ld ix,6741
       00          
040B81 CD DE BD 04 1089*  	call vdu_load_img
040B85 C9          1090*  	ret
040B86             1091*  
040B86             1092*  ld_10_036:
040B86 21 18 37 04 1093*  	ld hl,F10_036
040B8A 22 63 BC 04 1094*  	ld (cur_filename),hl
040B8E 11 8F C8 04 1095*  	ld de,filedata
040B92 01 00 00 01 1096*  	ld bc,65536
040B96 3E 01       1097*  	ld a,mos_load
040B98 5B CF       1098*  	RST.LIL 08h
040B9A 21 12 01 00 1099*  	ld hl,BUF_10_036
040B9E 01 16 00 00 1100*  	ld bc,22
040BA2 11 6B 00 00 1101*  	ld de,107
040BA6 DD 21 32 09 1102*  	ld ix,2354
       00          
040BAB CD DE BD 04 1103*  	call vdu_load_img
040BAF C9          1104*  	ret
040BB0             1105*  
040BB0             1106*  ld_10_037:
040BB0 21 2C 37 04 1107*  	ld hl,F10_037
040BB4 22 63 BC 04 1108*  	ld (cur_filename),hl
040BB8 11 8F C8 04 1109*  	ld de,filedata
040BBC 01 00 00 01 1110*  	ld bc,65536
040BC0 3E 01       1111*  	ld a,mos_load
040BC2 5B CF       1112*  	RST.LIL 08h
040BC4 21 13 01 00 1113*  	ld hl,BUF_10_037
040BC8 01 15 00 00 1114*  	ld bc,21
040BCC 11 69 00 00 1115*  	ld de,105
040BD0 DD 21 9D 08 1116*  	ld ix,2205
       00          
040BD5 CD DE BD 04 1117*  	call vdu_load_img
040BD9 C9          1118*  	ret
040BDA             1119*  
040BDA             1120*  ld_10_038:
040BDA 21 40 37 04 1121*  	ld hl,F10_038
040BDE 22 63 BC 04 1122*  	ld (cur_filename),hl
040BE2 11 8F C8 04 1123*  	ld de,filedata
040BE6 01 00 00 01 1124*  	ld bc,65536
040BEA 3E 01       1125*  	ld a,mos_load
040BEC 5B CF       1126*  	RST.LIL 08h
040BEE 21 14 01 00 1127*  	ld hl,BUF_10_038
040BF2 01 3F 00 00 1128*  	ld bc,63
040BF6 11 6B 00 00 1129*  	ld de,107
040BFA DD 21 55 1A 1130*  	ld ix,6741
       00          
040BFF CD DE BD 04 1131*  	call vdu_load_img
040C03 C9          1132*  	ret
040C04             1133*  
040C04             1134*  ld_10_040:
040C04 21 54 37 04 1135*  	ld hl,F10_040
040C08 22 63 BC 04 1136*  	ld (cur_filename),hl
040C0C 11 8F C8 04 1137*  	ld de,filedata
040C10 01 00 00 01 1138*  	ld bc,65536
040C14 3E 01       1139*  	ld a,mos_load
040C16 5B CF       1140*  	RST.LIL 08h
040C18 21 15 01 00 1141*  	ld hl,BUF_10_040
040C1C 01 6C 00 00 1142*  	ld bc,108
040C20 11 6B 00 00 1143*  	ld de,107
040C24 DD 21 24 2D 1144*  	ld ix,11556
       00          
040C29 CD DE BD 04 1145*  	call vdu_load_img
040C2D C9          1146*  	ret
040C2E             1147*  
040C2E             1148*  ld_10_042:
040C2E 21 68 37 04 1149*  	ld hl,F10_042
040C32 22 63 BC 04 1150*  	ld (cur_filename),hl
040C36 11 8F C8 04 1151*  	ld de,filedata
040C3A 01 00 00 01 1152*  	ld bc,65536
040C3E 3E 01       1153*  	ld a,mos_load
040C40 5B CF       1154*  	RST.LIL 08h
040C42 21 16 01 00 1155*  	ld hl,BUF_10_042
040C46 01 6A 00 00 1156*  	ld bc,106
040C4A 11 A0 00 00 1157*  	ld de,160
040C4E DD 21 40 42 1158*  	ld ix,16960
       00          
040C53 CD DE BD 04 1159*  	call vdu_load_img
040C57 C9          1160*  	ret
040C58             1161*  
040C58             1162*  ld_10_043:
040C58 21 7C 37 04 1163*  	ld hl,F10_043
040C5C 22 63 BC 04 1164*  	ld (cur_filename),hl
040C60 11 8F C8 04 1165*  	ld de,filedata
040C64 01 00 00 01 1166*  	ld bc,65536
040C68 3E 01       1167*  	ld a,mos_load
040C6A 5B CF       1168*  	RST.LIL 08h
040C6C 21 17 01 00 1169*  	ld hl,BUF_10_043
040C70 01 6B 00 00 1170*  	ld bc,107
040C74 11 A0 00 00 1171*  	ld de,160
040C78 DD 21 E0 42 1172*  	ld ix,17120
       00          
040C7D CD DE BD 04 1173*  	call vdu_load_img
040C81 C9          1174*  	ret
040C82             1175*  
040C82             1176*  ld_10_044:
040C82 21 90 37 04 1177*  	ld hl,F10_044
040C86 22 63 BC 04 1178*  	ld (cur_filename),hl
040C8A 11 8F C8 04 1179*  	ld de,filedata
040C8E 01 00 00 01 1180*  	ld bc,65536
040C92 3E 01       1181*  	ld a,mos_load
040C94 5B CF       1182*  	RST.LIL 08h
040C96 21 18 01 00 1183*  	ld hl,BUF_10_044
040C9A 01 40 01 00 1184*  	ld bc,320
040C9E 11 A0 00 00 1185*  	ld de,160
040CA2 DD 21 00 C8 1186*  	ld ix,51200
       00          
040CA7 CD DE BD 04 1187*  	call vdu_load_img
040CAB C9          1188*  	ret
040CAC             1189*  
040CAC             1190*  ld_11_004:
040CAC 21 A4 37 04 1191*  	ld hl,F11_004
040CB0 22 63 BC 04 1192*  	ld (cur_filename),hl
040CB4 11 8F C8 04 1193*  	ld de,filedata
040CB8 01 00 00 01 1194*  	ld bc,65536
040CBC 3E 01       1195*  	ld a,mos_load
040CBE 5B CF       1196*  	RST.LIL 08h
040CC0 21 19 01 00 1197*  	ld hl,BUF_11_004
040CC4 01 24 00 00 1198*  	ld bc,36
040CC8 11 23 00 00 1199*  	ld de,35
040CCC DD 21 EC 04 1200*  	ld ix,1260
       00          
040CD1 CD DE BD 04 1201*  	call vdu_load_img
040CD5 C9          1202*  	ret
040CD6             1203*  
040CD6             1204*  ld_11_009:
040CD6 21 B8 37 04 1205*  	ld hl,F11_009
040CDA 22 63 BC 04 1206*  	ld (cur_filename),hl
040CDE 11 8F C8 04 1207*  	ld de,filedata
040CE2 01 00 00 01 1208*  	ld bc,65536
040CE6 3E 01       1209*  	ld a,mos_load
040CE8 5B CF       1210*  	RST.LIL 08h
040CEA 21 1A 01 00 1211*  	ld hl,BUF_11_009
040CEE 01 23 00 00 1212*  	ld bc,35
040CF2 11 2D 00 00 1213*  	ld de,45
040CF6 DD 21 27 06 1214*  	ld ix,1575
       00          
040CFB CD DE BD 04 1215*  	call vdu_load_img
040CFF C9          1216*  	ret
040D00             1217*  
040D00             1218*  ld_11_010:
040D00 21 CC 37 04 1219*  	ld hl,F11_010
040D04 22 63 BC 04 1220*  	ld (cur_filename),hl
040D08 11 8F C8 04 1221*  	ld de,filedata
040D0C 01 00 00 01 1222*  	ld bc,65536
040D10 3E 01       1223*  	ld a,mos_load
040D12 5B CF       1224*  	RST.LIL 08h
040D14 21 1B 01 00 1225*  	ld hl,BUF_11_010
040D18 01 19 00 00 1226*  	ld bc,25
040D1C 11 2D 00 00 1227*  	ld de,45
040D20 DD 21 65 04 1228*  	ld ix,1125
       00          
040D25 CD DE BD 04 1229*  	call vdu_load_img
040D29 C9          1230*  	ret
040D2A             1231*  
040D2A             1232*  ld_11_011:
040D2A 21 E0 37 04 1233*  	ld hl,F11_011
040D2E 22 63 BC 04 1234*  	ld (cur_filename),hl
040D32 11 8F C8 04 1235*  	ld de,filedata
040D36 01 00 00 01 1236*  	ld bc,65536
040D3A 3E 01       1237*  	ld a,mos_load
040D3C 5B CF       1238*  	RST.LIL 08h
040D3E 21 1C 01 00 1239*  	ld hl,BUF_11_011
040D42 01 0F 00 00 1240*  	ld bc,15
040D46 11 2D 00 00 1241*  	ld de,45
040D4A DD 21 A3 02 1242*  	ld ix,675
       00          
040D4F CD DE BD 04 1243*  	call vdu_load_img
040D53 C9          1244*  	ret
040D54             1245*  
040D54             1246*  ld_11_012:
040D54 21 F4 37 04 1247*  	ld hl,F11_012
040D58 22 63 BC 04 1248*  	ld (cur_filename),hl
040D5C 11 8F C8 04 1249*  	ld de,filedata
040D60 01 00 00 01 1250*  	ld bc,65536
040D64 3E 01       1251*  	ld a,mos_load
040D66 5B CF       1252*  	RST.LIL 08h
040D68 21 1D 01 00 1253*  	ld hl,BUF_11_012
040D6C 01 05 00 00 1254*  	ld bc,5
040D70 11 2D 00 00 1255*  	ld de,45
040D74 DD 21 E1 00 1256*  	ld ix,225
       00          
040D79 CD DE BD 04 1257*  	call vdu_load_img
040D7D C9          1258*  	ret
040D7E             1259*  
040D7E             1260*  ld_11_013:
040D7E 21 08 38 04 1261*  	ld hl,F11_013
040D82 22 63 BC 04 1262*  	ld (cur_filename),hl
040D86 11 8F C8 04 1263*  	ld de,filedata
040D8A 01 00 00 01 1264*  	ld bc,65536
040D8E 3E 01       1265*  	ld a,mos_load
040D90 5B CF       1266*  	RST.LIL 08h
040D92 21 1E 01 00 1267*  	ld hl,BUF_11_013
040D96 01 05 00 00 1268*  	ld bc,5
040D9A 11 2B 00 00 1269*  	ld de,43
040D9E DD 21 D7 00 1270*  	ld ix,215
       00          
040DA3 CD DE BD 04 1271*  	call vdu_load_img
040DA7 C9          1272*  	ret
040DA8             1273*  
040DA8             1274*  ld_11_014:
040DA8 21 1C 38 04 1275*  	ld hl,F11_014
040DAC 22 63 BC 04 1276*  	ld (cur_filename),hl
040DB0 11 8F C8 04 1277*  	ld de,filedata
040DB4 01 00 00 01 1278*  	ld bc,65536
040DB8 3E 01       1279*  	ld a,mos_load
040DBA 5B CF       1280*  	RST.LIL 08h
040DBC 21 1F 01 00 1281*  	ld hl,BUF_11_014
040DC0 01 0F 00 00 1282*  	ld bc,15
040DC4 11 2D 00 00 1283*  	ld de,45
040DC8 DD 21 A3 02 1284*  	ld ix,675
       00          
040DCD CD DE BD 04 1285*  	call vdu_load_img
040DD1 C9          1286*  	ret
040DD2             1287*  
040DD2             1288*  ld_11_015:
040DD2 21 30 38 04 1289*  	ld hl,F11_015
040DD6 22 63 BC 04 1290*  	ld (cur_filename),hl
040DDA 11 8F C8 04 1291*  	ld de,filedata
040DDE 01 00 00 01 1292*  	ld bc,65536
040DE2 3E 01       1293*  	ld a,mos_load
040DE4 5B CF       1294*  	RST.LIL 08h
040DE6 21 20 01 00 1295*  	ld hl,BUF_11_015
040DEA 01 19 00 00 1296*  	ld bc,25
040DEE 11 2D 00 00 1297*  	ld de,45
040DF2 DD 21 65 04 1298*  	ld ix,1125
       00          
040DF7 CD DE BD 04 1299*  	call vdu_load_img
040DFB C9          1300*  	ret
040DFC             1301*  
040DFC             1302*  ld_11_016:
040DFC 21 44 38 04 1303*  	ld hl,F11_016
040E00 22 63 BC 04 1304*  	ld (cur_filename),hl
040E04 11 8F C8 04 1305*  	ld de,filedata
040E08 01 00 00 01 1306*  	ld bc,65536
040E0C 3E 01       1307*  	ld a,mos_load
040E0E 5B CF       1308*  	RST.LIL 08h
040E10 21 21 01 00 1309*  	ld hl,BUF_11_016
040E14 01 23 00 00 1310*  	ld bc,35
040E18 11 2D 00 00 1311*  	ld de,45
040E1C DD 21 27 06 1312*  	ld ix,1575
       00          
040E21 CD DE BD 04 1313*  	call vdu_load_img
040E25 C9          1314*  	ret
040E26             1315*  
040E26             1316*  ld_11_020:
040E26 21 58 38 04 1317*  	ld hl,F11_020
040E2A 22 63 BC 04 1318*  	ld (cur_filename),hl
040E2E 11 8F C8 04 1319*  	ld de,filedata
040E32 01 00 00 01 1320*  	ld bc,65536
040E36 3E 01       1321*  	ld a,mos_load
040E38 5B CF       1322*  	RST.LIL 08h
040E3A 21 22 01 00 1323*  	ld hl,BUF_11_020
040E3E 01 2E 00 00 1324*  	ld bc,46
040E42 11 2D 00 00 1325*  	ld de,45
040E46 DD 21 16 08 1326*  	ld ix,2070
       00          
040E4B CD DE BD 04 1327*  	call vdu_load_img
040E4F C9          1328*  	ret
040E50             1329*  
040E50             1330*  ld_11_024:
040E50 21 6C 38 04 1331*  	ld hl,F11_024
040E54 22 63 BC 04 1332*  	ld (cur_filename),hl
040E58 11 8F C8 04 1333*  	ld de,filedata
040E5C 01 00 00 01 1334*  	ld bc,65536
040E60 3E 01       1335*  	ld a,mos_load
040E62 5B CF       1336*  	RST.LIL 08h
040E64 21 23 01 00 1337*  	ld hl,BUF_11_024
040E68 01 2E 00 00 1338*  	ld bc,46
040E6C 11 40 00 00 1339*  	ld de,64
040E70 DD 21 80 0B 1340*  	ld ix,2944
       00          
040E75 CD DE BD 04 1341*  	call vdu_load_img
040E79 C9          1342*  	ret
040E7A             1343*  
040E7A             1344*  ld_11_025:
040E7A 21 80 38 04 1345*  	ld hl,F11_025
040E7E 22 63 BC 04 1346*  	ld (cur_filename),hl
040E82 11 8F C8 04 1347*  	ld de,filedata
040E86 01 00 00 01 1348*  	ld bc,65536
040E8A 3E 01       1349*  	ld a,mos_load
040E8C 5B CF       1350*  	RST.LIL 08h
040E8E 21 24 01 00 1351*  	ld hl,BUF_11_025
040E92 01 1C 00 00 1352*  	ld bc,28
040E96 11 40 00 00 1353*  	ld de,64
040E9A DD 21 00 07 1354*  	ld ix,1792
       00          
040E9F CD DE BD 04 1355*  	call vdu_load_img
040EA3 C9          1356*  	ret
040EA4             1357*  
040EA4             1358*  ld_11_026:
040EA4 21 94 38 04 1359*  	ld hl,F11_026
040EA8 22 63 BC 04 1360*  	ld (cur_filename),hl
040EAC 11 8F C8 04 1361*  	ld de,filedata
040EB0 01 00 00 01 1362*  	ld bc,65536
040EB4 3E 01       1363*  	ld a,mos_load
040EB6 5B CF       1364*  	RST.LIL 08h
040EB8 21 25 01 00 1365*  	ld hl,BUF_11_026
040EBC 01 09 00 00 1366*  	ld bc,9
040EC0 11 40 00 00 1367*  	ld de,64
040EC4 DD 21 40 02 1368*  	ld ix,576
       00          
040EC9 CD DE BD 04 1369*  	call vdu_load_img
040ECD C9          1370*  	ret
040ECE             1371*  
040ECE             1372*  ld_11_027:
040ECE 21 A8 38 04 1373*  	ld hl,F11_027
040ED2 22 63 BC 04 1374*  	ld (cur_filename),hl
040ED6 11 8F C8 04 1375*  	ld de,filedata
040EDA 01 00 00 01 1376*  	ld bc,65536
040EDE 3E 01       1377*  	ld a,mos_load
040EE0 5B CF       1378*  	RST.LIL 08h
040EE2 21 26 01 00 1379*  	ld hl,BUF_11_027
040EE6 01 0A 00 00 1380*  	ld bc,10
040EEA 11 3E 00 00 1381*  	ld de,62
040EEE DD 21 6C 02 1382*  	ld ix,620
       00          
040EF3 CD DE BD 04 1383*  	call vdu_load_img
040EF7 C9          1384*  	ret
040EF8             1385*  
040EF8             1386*  ld_11_028:
040EF8 21 BC 38 04 1387*  	ld hl,F11_028
040EFC 22 63 BC 04 1388*  	ld (cur_filename),hl
040F00 11 8F C8 04 1389*  	ld de,filedata
040F04 01 00 00 01 1390*  	ld bc,65536
040F08 3E 01       1391*  	ld a,mos_load
040F0A 5B CF       1392*  	RST.LIL 08h
040F0C 21 27 01 00 1393*  	ld hl,BUF_11_028
040F10 01 1C 00 00 1394*  	ld bc,28
040F14 11 40 00 00 1395*  	ld de,64
040F18 DD 21 00 07 1396*  	ld ix,1792
       00          
040F1D CD DE BD 04 1397*  	call vdu_load_img
040F21 C9          1398*  	ret
040F22             1399*  
040F22             1400*  ld_11_029:
040F22 21 D0 38 04 1401*  	ld hl,F11_029
040F26 22 63 BC 04 1402*  	ld (cur_filename),hl
040F2A 11 8F C8 04 1403*  	ld de,filedata
040F2E 01 00 00 01 1404*  	ld bc,65536
040F32 3E 01       1405*  	ld a,mos_load
040F34 5B CF       1406*  	RST.LIL 08h
040F36 21 28 01 00 1407*  	ld hl,BUF_11_029
040F3A 01 2F 00 00 1408*  	ld bc,47
040F3E 11 40 00 00 1409*  	ld de,64
040F42 DD 21 C0 0B 1410*  	ld ix,3008
       00          
040F47 CD DE BD 04 1411*  	call vdu_load_img
040F4B C9          1412*  	ret
040F4C             1413*  
040F4C             1414*  ld_11_032:
040F4C 21 E4 38 04 1415*  	ld hl,F11_032
040F50 22 63 BC 04 1416*  	ld (cur_filename),hl
040F54 11 8F C8 04 1417*  	ld de,filedata
040F58 01 00 00 01 1418*  	ld bc,65536
040F5C 3E 01       1419*  	ld a,mos_load
040F5E 5B CF       1420*  	RST.LIL 08h
040F60 21 29 01 00 1421*  	ld hl,BUF_11_032
040F64 01 41 00 00 1422*  	ld bc,65
040F68 11 40 00 00 1423*  	ld de,64
040F6C DD 21 40 10 1424*  	ld ix,4160
       00          
040F71 CD DE BD 04 1425*  	call vdu_load_img
040F75 C9          1426*  	ret
040F76             1427*  
040F76             1428*  ld_11_035:
040F76 21 F8 38 04 1429*  	ld hl,F11_035
040F7A 22 63 BC 04 1430*  	ld (cur_filename),hl
040F7E 11 8F C8 04 1431*  	ld de,filedata
040F82 01 00 00 01 1432*  	ld bc,65536
040F86 3E 01       1433*  	ld a,mos_load
040F88 5B CF       1434*  	RST.LIL 08h
040F8A 21 2A 01 00 1435*  	ld hl,BUF_11_035
040F8E 01 3F 00 00 1436*  	ld bc,63
040F92 11 6B 00 00 1437*  	ld de,107
040F96 DD 21 55 1A 1438*  	ld ix,6741
       00          
040F9B CD DE BD 04 1439*  	call vdu_load_img
040F9F C9          1440*  	ret
040FA0             1441*  
040FA0             1442*  ld_11_036:
040FA0 21 0C 39 04 1443*  	ld hl,F11_036
040FA4 22 63 BC 04 1444*  	ld (cur_filename),hl
040FA8 11 8F C8 04 1445*  	ld de,filedata
040FAC 01 00 00 01 1446*  	ld bc,65536
040FB0 3E 01       1447*  	ld a,mos_load
040FB2 5B CF       1448*  	RST.LIL 08h
040FB4 21 2B 01 00 1449*  	ld hl,BUF_11_036
040FB8 01 16 00 00 1450*  	ld bc,22
040FBC 11 6B 00 00 1451*  	ld de,107
040FC0 DD 21 32 09 1452*  	ld ix,2354
       00          
040FC5 CD DE BD 04 1453*  	call vdu_load_img
040FC9 C9          1454*  	ret
040FCA             1455*  
040FCA             1456*  ld_11_037:
040FCA 21 20 39 04 1457*  	ld hl,F11_037
040FCE 22 63 BC 04 1458*  	ld (cur_filename),hl
040FD2 11 8F C8 04 1459*  	ld de,filedata
040FD6 01 00 00 01 1460*  	ld bc,65536
040FDA 3E 01       1461*  	ld a,mos_load
040FDC 5B CF       1462*  	RST.LIL 08h
040FDE 21 2C 01 00 1463*  	ld hl,BUF_11_037
040FE2 01 15 00 00 1464*  	ld bc,21
040FE6 11 69 00 00 1465*  	ld de,105
040FEA DD 21 9D 08 1466*  	ld ix,2205
       00          
040FEF CD DE BD 04 1467*  	call vdu_load_img
040FF3 C9          1468*  	ret
040FF4             1469*  
040FF4             1470*  ld_11_038:
040FF4 21 34 39 04 1471*  	ld hl,F11_038
040FF8 22 63 BC 04 1472*  	ld (cur_filename),hl
040FFC 11 8F C8 04 1473*  	ld de,filedata
041000 01 00 00 01 1474*  	ld bc,65536
041004 3E 01       1475*  	ld a,mos_load
041006 5B CF       1476*  	RST.LIL 08h
041008 21 2D 01 00 1477*  	ld hl,BUF_11_038
04100C 01 3F 00 00 1478*  	ld bc,63
041010 11 6B 00 00 1479*  	ld de,107
041014 DD 21 55 1A 1480*  	ld ix,6741
       00          
041019 CD DE BD 04 1481*  	call vdu_load_img
04101D C9          1482*  	ret
04101E             1483*  
04101E             1484*  ld_11_040:
04101E 21 48 39 04 1485*  	ld hl,F11_040
041022 22 63 BC 04 1486*  	ld (cur_filename),hl
041026 11 8F C8 04 1487*  	ld de,filedata
04102A 01 00 00 01 1488*  	ld bc,65536
04102E 3E 01       1489*  	ld a,mos_load
041030 5B CF       1490*  	RST.LIL 08h
041032 21 2E 01 00 1491*  	ld hl,BUF_11_040
041036 01 6C 00 00 1492*  	ld bc,108
04103A 11 6B 00 00 1493*  	ld de,107
04103E DD 21 24 2D 1494*  	ld ix,11556
       00          
041043 CD DE BD 04 1495*  	call vdu_load_img
041047 C9          1496*  	ret
041048             1497*  
041048             1498*  ld_11_042:
041048 21 5C 39 04 1499*  	ld hl,F11_042
04104C 22 63 BC 04 1500*  	ld (cur_filename),hl
041050 11 8F C8 04 1501*  	ld de,filedata
041054 01 00 00 01 1502*  	ld bc,65536
041058 3E 01       1503*  	ld a,mos_load
04105A 5B CF       1504*  	RST.LIL 08h
04105C 21 2F 01 00 1505*  	ld hl,BUF_11_042
041060 01 6A 00 00 1506*  	ld bc,106
041064 11 A0 00 00 1507*  	ld de,160
041068 DD 21 40 42 1508*  	ld ix,16960
       00          
04106D CD DE BD 04 1509*  	call vdu_load_img
041071 C9          1510*  	ret
041072             1511*  
041072             1512*  ld_11_043:
041072 21 70 39 04 1513*  	ld hl,F11_043
041076 22 63 BC 04 1514*  	ld (cur_filename),hl
04107A 11 8F C8 04 1515*  	ld de,filedata
04107E 01 00 00 01 1516*  	ld bc,65536
041082 3E 01       1517*  	ld a,mos_load
041084 5B CF       1518*  	RST.LIL 08h
041086 21 30 01 00 1519*  	ld hl,BUF_11_043
04108A 01 6B 00 00 1520*  	ld bc,107
04108E 11 A0 00 00 1521*  	ld de,160
041092 DD 21 E0 42 1522*  	ld ix,17120
       00          
041097 CD DE BD 04 1523*  	call vdu_load_img
04109B C9          1524*  	ret
04109C             1525*  
04109C             1526*  ld_11_044:
04109C 21 84 39 04 1527*  	ld hl,F11_044
0410A0 22 63 BC 04 1528*  	ld (cur_filename),hl
0410A4 11 8F C8 04 1529*  	ld de,filedata
0410A8 01 00 00 01 1530*  	ld bc,65536
0410AC 3E 01       1531*  	ld a,mos_load
0410AE 5B CF       1532*  	RST.LIL 08h
0410B0 21 31 01 00 1533*  	ld hl,BUF_11_044
0410B4 01 40 01 00 1534*  	ld bc,320
0410B8 11 A0 00 00 1535*  	ld de,160
0410BC DD 21 00 C8 1536*  	ld ix,51200
       00          
0410C1 CD DE BD 04 1537*  	call vdu_load_img
0410C5 C9          1538*  	ret
0410C6             1539*  
0410C6             1540*  ld_12_004:
0410C6 21 98 39 04 1541*  	ld hl,F12_004
0410CA 22 63 BC 04 1542*  	ld (cur_filename),hl
0410CE 11 8F C8 04 1543*  	ld de,filedata
0410D2 01 00 00 01 1544*  	ld bc,65536
0410D6 3E 01       1545*  	ld a,mos_load
0410D8 5B CF       1546*  	RST.LIL 08h
0410DA 21 32 01 00 1547*  	ld hl,BUF_12_004
0410DE 01 24 00 00 1548*  	ld bc,36
0410E2 11 23 00 00 1549*  	ld de,35
0410E6 DD 21 EC 04 1550*  	ld ix,1260
       00          
0410EB CD DE BD 04 1551*  	call vdu_load_img
0410EF C9          1552*  	ret
0410F0             1553*  
0410F0             1554*  ld_12_009:
0410F0 21 AC 39 04 1555*  	ld hl,F12_009
0410F4 22 63 BC 04 1556*  	ld (cur_filename),hl
0410F8 11 8F C8 04 1557*  	ld de,filedata
0410FC 01 00 00 01 1558*  	ld bc,65536
041100 3E 01       1559*  	ld a,mos_load
041102 5B CF       1560*  	RST.LIL 08h
041104 21 33 01 00 1561*  	ld hl,BUF_12_009
041108 01 23 00 00 1562*  	ld bc,35
04110C 11 2D 00 00 1563*  	ld de,45
041110 DD 21 27 06 1564*  	ld ix,1575
       00          
041115 CD DE BD 04 1565*  	call vdu_load_img
041119 C9          1566*  	ret
04111A             1567*  
04111A             1568*  ld_12_010:
04111A 21 C0 39 04 1569*  	ld hl,F12_010
04111E 22 63 BC 04 1570*  	ld (cur_filename),hl
041122 11 8F C8 04 1571*  	ld de,filedata
041126 01 00 00 01 1572*  	ld bc,65536
04112A 3E 01       1573*  	ld a,mos_load
04112C 5B CF       1574*  	RST.LIL 08h
04112E 21 34 01 00 1575*  	ld hl,BUF_12_010
041132 01 19 00 00 1576*  	ld bc,25
041136 11 2D 00 00 1577*  	ld de,45
04113A DD 21 65 04 1578*  	ld ix,1125
       00          
04113F CD DE BD 04 1579*  	call vdu_load_img
041143 C9          1580*  	ret
041144             1581*  
041144             1582*  ld_12_011:
041144 21 D4 39 04 1583*  	ld hl,F12_011
041148 22 63 BC 04 1584*  	ld (cur_filename),hl
04114C 11 8F C8 04 1585*  	ld de,filedata
041150 01 00 00 01 1586*  	ld bc,65536
041154 3E 01       1587*  	ld a,mos_load
041156 5B CF       1588*  	RST.LIL 08h
041158 21 35 01 00 1589*  	ld hl,BUF_12_011
04115C 01 0F 00 00 1590*  	ld bc,15
041160 11 2D 00 00 1591*  	ld de,45
041164 DD 21 A3 02 1592*  	ld ix,675
       00          
041169 CD DE BD 04 1593*  	call vdu_load_img
04116D C9          1594*  	ret
04116E             1595*  
04116E             1596*  ld_12_012:
04116E 21 E8 39 04 1597*  	ld hl,F12_012
041172 22 63 BC 04 1598*  	ld (cur_filename),hl
041176 11 8F C8 04 1599*  	ld de,filedata
04117A 01 00 00 01 1600*  	ld bc,65536
04117E 3E 01       1601*  	ld a,mos_load
041180 5B CF       1602*  	RST.LIL 08h
041182 21 36 01 00 1603*  	ld hl,BUF_12_012
041186 01 05 00 00 1604*  	ld bc,5
04118A 11 2D 00 00 1605*  	ld de,45
04118E DD 21 E1 00 1606*  	ld ix,225
       00          
041193 CD DE BD 04 1607*  	call vdu_load_img
041197 C9          1608*  	ret
041198             1609*  
041198             1610*  ld_12_013:
041198 21 FC 39 04 1611*  	ld hl,F12_013
04119C 22 63 BC 04 1612*  	ld (cur_filename),hl
0411A0 11 8F C8 04 1613*  	ld de,filedata
0411A4 01 00 00 01 1614*  	ld bc,65536
0411A8 3E 01       1615*  	ld a,mos_load
0411AA 5B CF       1616*  	RST.LIL 08h
0411AC 21 37 01 00 1617*  	ld hl,BUF_12_013
0411B0 01 05 00 00 1618*  	ld bc,5
0411B4 11 2B 00 00 1619*  	ld de,43
0411B8 DD 21 D7 00 1620*  	ld ix,215
       00          
0411BD CD DE BD 04 1621*  	call vdu_load_img
0411C1 C9          1622*  	ret
0411C2             1623*  
0411C2             1624*  ld_12_014:
0411C2 21 10 3A 04 1625*  	ld hl,F12_014
0411C6 22 63 BC 04 1626*  	ld (cur_filename),hl
0411CA 11 8F C8 04 1627*  	ld de,filedata
0411CE 01 00 00 01 1628*  	ld bc,65536
0411D2 3E 01       1629*  	ld a,mos_load
0411D4 5B CF       1630*  	RST.LIL 08h
0411D6 21 38 01 00 1631*  	ld hl,BUF_12_014
0411DA 01 0F 00 00 1632*  	ld bc,15
0411DE 11 2D 00 00 1633*  	ld de,45
0411E2 DD 21 A3 02 1634*  	ld ix,675
       00          
0411E7 CD DE BD 04 1635*  	call vdu_load_img
0411EB C9          1636*  	ret
0411EC             1637*  
0411EC             1638*  ld_12_015:
0411EC 21 24 3A 04 1639*  	ld hl,F12_015
0411F0 22 63 BC 04 1640*  	ld (cur_filename),hl
0411F4 11 8F C8 04 1641*  	ld de,filedata
0411F8 01 00 00 01 1642*  	ld bc,65536
0411FC 3E 01       1643*  	ld a,mos_load
0411FE 5B CF       1644*  	RST.LIL 08h
041200 21 39 01 00 1645*  	ld hl,BUF_12_015
041204 01 19 00 00 1646*  	ld bc,25
041208 11 2D 00 00 1647*  	ld de,45
04120C DD 21 65 04 1648*  	ld ix,1125
       00          
041211 CD DE BD 04 1649*  	call vdu_load_img
041215 C9          1650*  	ret
041216             1651*  
041216             1652*  ld_12_016:
041216 21 38 3A 04 1653*  	ld hl,F12_016
04121A 22 63 BC 04 1654*  	ld (cur_filename),hl
04121E 11 8F C8 04 1655*  	ld de,filedata
041222 01 00 00 01 1656*  	ld bc,65536
041226 3E 01       1657*  	ld a,mos_load
041228 5B CF       1658*  	RST.LIL 08h
04122A 21 3A 01 00 1659*  	ld hl,BUF_12_016
04122E 01 23 00 00 1660*  	ld bc,35
041232 11 2D 00 00 1661*  	ld de,45
041236 DD 21 27 06 1662*  	ld ix,1575
       00          
04123B CD DE BD 04 1663*  	call vdu_load_img
04123F C9          1664*  	ret
041240             1665*  
041240             1666*  ld_12_020:
041240 21 4C 3A 04 1667*  	ld hl,F12_020
041244 22 63 BC 04 1668*  	ld (cur_filename),hl
041248 11 8F C8 04 1669*  	ld de,filedata
04124C 01 00 00 01 1670*  	ld bc,65536
041250 3E 01       1671*  	ld a,mos_load
041252 5B CF       1672*  	RST.LIL 08h
041254 21 3B 01 00 1673*  	ld hl,BUF_12_020
041258 01 2E 00 00 1674*  	ld bc,46
04125C 11 2D 00 00 1675*  	ld de,45
041260 DD 21 16 08 1676*  	ld ix,2070
       00          
041265 CD DE BD 04 1677*  	call vdu_load_img
041269 C9          1678*  	ret
04126A             1679*  
04126A             1680*  ld_12_024:
04126A 21 60 3A 04 1681*  	ld hl,F12_024
04126E 22 63 BC 04 1682*  	ld (cur_filename),hl
041272 11 8F C8 04 1683*  	ld de,filedata
041276 01 00 00 01 1684*  	ld bc,65536
04127A 3E 01       1685*  	ld a,mos_load
04127C 5B CF       1686*  	RST.LIL 08h
04127E 21 3C 01 00 1687*  	ld hl,BUF_12_024
041282 01 2E 00 00 1688*  	ld bc,46
041286 11 40 00 00 1689*  	ld de,64
04128A DD 21 80 0B 1690*  	ld ix,2944
       00          
04128F CD DE BD 04 1691*  	call vdu_load_img
041293 C9          1692*  	ret
041294             1693*  
041294             1694*  ld_12_025:
041294 21 74 3A 04 1695*  	ld hl,F12_025
041298 22 63 BC 04 1696*  	ld (cur_filename),hl
04129C 11 8F C8 04 1697*  	ld de,filedata
0412A0 01 00 00 01 1698*  	ld bc,65536
0412A4 3E 01       1699*  	ld a,mos_load
0412A6 5B CF       1700*  	RST.LIL 08h
0412A8 21 3D 01 00 1701*  	ld hl,BUF_12_025
0412AC 01 1C 00 00 1702*  	ld bc,28
0412B0 11 40 00 00 1703*  	ld de,64
0412B4 DD 21 00 07 1704*  	ld ix,1792
       00          
0412B9 CD DE BD 04 1705*  	call vdu_load_img
0412BD C9          1706*  	ret
0412BE             1707*  
0412BE             1708*  ld_12_026:
0412BE 21 88 3A 04 1709*  	ld hl,F12_026
0412C2 22 63 BC 04 1710*  	ld (cur_filename),hl
0412C6 11 8F C8 04 1711*  	ld de,filedata
0412CA 01 00 00 01 1712*  	ld bc,65536
0412CE 3E 01       1713*  	ld a,mos_load
0412D0 5B CF       1714*  	RST.LIL 08h
0412D2 21 3E 01 00 1715*  	ld hl,BUF_12_026
0412D6 01 09 00 00 1716*  	ld bc,9
0412DA 11 40 00 00 1717*  	ld de,64
0412DE DD 21 40 02 1718*  	ld ix,576
       00          
0412E3 CD DE BD 04 1719*  	call vdu_load_img
0412E7 C9          1720*  	ret
0412E8             1721*  
0412E8             1722*  ld_12_027:
0412E8 21 9C 3A 04 1723*  	ld hl,F12_027
0412EC 22 63 BC 04 1724*  	ld (cur_filename),hl
0412F0 11 8F C8 04 1725*  	ld de,filedata
0412F4 01 00 00 01 1726*  	ld bc,65536
0412F8 3E 01       1727*  	ld a,mos_load
0412FA 5B CF       1728*  	RST.LIL 08h
0412FC 21 3F 01 00 1729*  	ld hl,BUF_12_027
041300 01 0A 00 00 1730*  	ld bc,10
041304 11 3E 00 00 1731*  	ld de,62
041308 DD 21 6C 02 1732*  	ld ix,620
       00          
04130D CD DE BD 04 1733*  	call vdu_load_img
041311 C9          1734*  	ret
041312             1735*  
041312             1736*  ld_12_028:
041312 21 B0 3A 04 1737*  	ld hl,F12_028
041316 22 63 BC 04 1738*  	ld (cur_filename),hl
04131A 11 8F C8 04 1739*  	ld de,filedata
04131E 01 00 00 01 1740*  	ld bc,65536
041322 3E 01       1741*  	ld a,mos_load
041324 5B CF       1742*  	RST.LIL 08h
041326 21 40 01 00 1743*  	ld hl,BUF_12_028
04132A 01 1C 00 00 1744*  	ld bc,28
04132E 11 40 00 00 1745*  	ld de,64
041332 DD 21 00 07 1746*  	ld ix,1792
       00          
041337 CD DE BD 04 1747*  	call vdu_load_img
04133B C9          1748*  	ret
04133C             1749*  
04133C             1750*  ld_12_029:
04133C 21 C4 3A 04 1751*  	ld hl,F12_029
041340 22 63 BC 04 1752*  	ld (cur_filename),hl
041344 11 8F C8 04 1753*  	ld de,filedata
041348 01 00 00 01 1754*  	ld bc,65536
04134C 3E 01       1755*  	ld a,mos_load
04134E 5B CF       1756*  	RST.LIL 08h
041350 21 41 01 00 1757*  	ld hl,BUF_12_029
041354 01 2F 00 00 1758*  	ld bc,47
041358 11 40 00 00 1759*  	ld de,64
04135C DD 21 C0 0B 1760*  	ld ix,3008
       00          
041361 CD DE BD 04 1761*  	call vdu_load_img
041365 C9          1762*  	ret
041366             1763*  
041366             1764*  ld_12_032:
041366 21 D8 3A 04 1765*  	ld hl,F12_032
04136A 22 63 BC 04 1766*  	ld (cur_filename),hl
04136E 11 8F C8 04 1767*  	ld de,filedata
041372 01 00 00 01 1768*  	ld bc,65536
041376 3E 01       1769*  	ld a,mos_load
041378 5B CF       1770*  	RST.LIL 08h
04137A 21 42 01 00 1771*  	ld hl,BUF_12_032
04137E 01 41 00 00 1772*  	ld bc,65
041382 11 40 00 00 1773*  	ld de,64
041386 DD 21 40 10 1774*  	ld ix,4160
       00          
04138B CD DE BD 04 1775*  	call vdu_load_img
04138F C9          1776*  	ret
041390             1777*  
041390             1778*  ld_12_035:
041390 21 EC 3A 04 1779*  	ld hl,F12_035
041394 22 63 BC 04 1780*  	ld (cur_filename),hl
041398 11 8F C8 04 1781*  	ld de,filedata
04139C 01 00 00 01 1782*  	ld bc,65536
0413A0 3E 01       1783*  	ld a,mos_load
0413A2 5B CF       1784*  	RST.LIL 08h
0413A4 21 43 01 00 1785*  	ld hl,BUF_12_035
0413A8 01 3F 00 00 1786*  	ld bc,63
0413AC 11 6B 00 00 1787*  	ld de,107
0413B0 DD 21 55 1A 1788*  	ld ix,6741
       00          
0413B5 CD DE BD 04 1789*  	call vdu_load_img
0413B9 C9          1790*  	ret
0413BA             1791*  
0413BA             1792*  ld_12_036:
0413BA 21 00 3B 04 1793*  	ld hl,F12_036
0413BE 22 63 BC 04 1794*  	ld (cur_filename),hl
0413C2 11 8F C8 04 1795*  	ld de,filedata
0413C6 01 00 00 01 1796*  	ld bc,65536
0413CA 3E 01       1797*  	ld a,mos_load
0413CC 5B CF       1798*  	RST.LIL 08h
0413CE 21 44 01 00 1799*  	ld hl,BUF_12_036
0413D2 01 16 00 00 1800*  	ld bc,22
0413D6 11 6B 00 00 1801*  	ld de,107
0413DA DD 21 32 09 1802*  	ld ix,2354
       00          
0413DF CD DE BD 04 1803*  	call vdu_load_img
0413E3 C9          1804*  	ret
0413E4             1805*  
0413E4             1806*  ld_12_037:
0413E4 21 14 3B 04 1807*  	ld hl,F12_037
0413E8 22 63 BC 04 1808*  	ld (cur_filename),hl
0413EC 11 8F C8 04 1809*  	ld de,filedata
0413F0 01 00 00 01 1810*  	ld bc,65536
0413F4 3E 01       1811*  	ld a,mos_load
0413F6 5B CF       1812*  	RST.LIL 08h
0413F8 21 45 01 00 1813*  	ld hl,BUF_12_037
0413FC 01 15 00 00 1814*  	ld bc,21
041400 11 69 00 00 1815*  	ld de,105
041404 DD 21 9D 08 1816*  	ld ix,2205
       00          
041409 CD DE BD 04 1817*  	call vdu_load_img
04140D C9          1818*  	ret
04140E             1819*  
04140E             1820*  ld_12_038:
04140E 21 28 3B 04 1821*  	ld hl,F12_038
041412 22 63 BC 04 1822*  	ld (cur_filename),hl
041416 11 8F C8 04 1823*  	ld de,filedata
04141A 01 00 00 01 1824*  	ld bc,65536
04141E 3E 01       1825*  	ld a,mos_load
041420 5B CF       1826*  	RST.LIL 08h
041422 21 46 01 00 1827*  	ld hl,BUF_12_038
041426 01 3F 00 00 1828*  	ld bc,63
04142A 11 6B 00 00 1829*  	ld de,107
04142E DD 21 55 1A 1830*  	ld ix,6741
       00          
041433 CD DE BD 04 1831*  	call vdu_load_img
041437 C9          1832*  	ret
041438             1833*  
041438             1834*  ld_12_040:
041438 21 3C 3B 04 1835*  	ld hl,F12_040
04143C 22 63 BC 04 1836*  	ld (cur_filename),hl
041440 11 8F C8 04 1837*  	ld de,filedata
041444 01 00 00 01 1838*  	ld bc,65536
041448 3E 01       1839*  	ld a,mos_load
04144A 5B CF       1840*  	RST.LIL 08h
04144C 21 47 01 00 1841*  	ld hl,BUF_12_040
041450 01 6C 00 00 1842*  	ld bc,108
041454 11 6B 00 00 1843*  	ld de,107
041458 DD 21 24 2D 1844*  	ld ix,11556
       00          
04145D CD DE BD 04 1845*  	call vdu_load_img
041461 C9          1846*  	ret
041462             1847*  
041462             1848*  ld_12_042:
041462 21 50 3B 04 1849*  	ld hl,F12_042
041466 22 63 BC 04 1850*  	ld (cur_filename),hl
04146A 11 8F C8 04 1851*  	ld de,filedata
04146E 01 00 00 01 1852*  	ld bc,65536
041472 3E 01       1853*  	ld a,mos_load
041474 5B CF       1854*  	RST.LIL 08h
041476 21 48 01 00 1855*  	ld hl,BUF_12_042
04147A 01 6A 00 00 1856*  	ld bc,106
04147E 11 A0 00 00 1857*  	ld de,160
041482 DD 21 40 42 1858*  	ld ix,16960
       00          
041487 CD DE BD 04 1859*  	call vdu_load_img
04148B C9          1860*  	ret
04148C             1861*  
04148C             1862*  ld_12_043:
04148C 21 64 3B 04 1863*  	ld hl,F12_043
041490 22 63 BC 04 1864*  	ld (cur_filename),hl
041494 11 8F C8 04 1865*  	ld de,filedata
041498 01 00 00 01 1866*  	ld bc,65536
04149C 3E 01       1867*  	ld a,mos_load
04149E 5B CF       1868*  	RST.LIL 08h
0414A0 21 49 01 00 1869*  	ld hl,BUF_12_043
0414A4 01 6B 00 00 1870*  	ld bc,107
0414A8 11 A0 00 00 1871*  	ld de,160
0414AC DD 21 E0 42 1872*  	ld ix,17120
       00          
0414B1 CD DE BD 04 1873*  	call vdu_load_img
0414B5 C9          1874*  	ret
0414B6             1875*  
0414B6             1876*  ld_12_044:
0414B6 21 78 3B 04 1877*  	ld hl,F12_044
0414BA 22 63 BC 04 1878*  	ld (cur_filename),hl
0414BE 11 8F C8 04 1879*  	ld de,filedata
0414C2 01 00 00 01 1880*  	ld bc,65536
0414C6 3E 01       1881*  	ld a,mos_load
0414C8 5B CF       1882*  	RST.LIL 08h
0414CA 21 4A 01 00 1883*  	ld hl,BUF_12_044
0414CE 01 40 01 00 1884*  	ld bc,320
0414D2 11 A0 00 00 1885*  	ld de,160
0414D6 DD 21 00 C8 1886*  	ld ix,51200
       00          
0414DB CD DE BD 04 1887*  	call vdu_load_img
0414DF C9          1888*  	ret
0414E0             1889*  
0414E0             1890*  ld_13_004:
0414E0 21 8C 3B 04 1891*  	ld hl,F13_004
0414E4 22 63 BC 04 1892*  	ld (cur_filename),hl
0414E8 11 8F C8 04 1893*  	ld de,filedata
0414EC 01 00 00 01 1894*  	ld bc,65536
0414F0 3E 01       1895*  	ld a,mos_load
0414F2 5B CF       1896*  	RST.LIL 08h
0414F4 21 4B 01 00 1897*  	ld hl,BUF_13_004
0414F8 01 24 00 00 1898*  	ld bc,36
0414FC 11 23 00 00 1899*  	ld de,35
041500 DD 21 EC 04 1900*  	ld ix,1260
       00          
041505 CD DE BD 04 1901*  	call vdu_load_img
041509 C9          1902*  	ret
04150A             1903*  
04150A             1904*  ld_13_009:
04150A 21 A0 3B 04 1905*  	ld hl,F13_009
04150E 22 63 BC 04 1906*  	ld (cur_filename),hl
041512 11 8F C8 04 1907*  	ld de,filedata
041516 01 00 00 01 1908*  	ld bc,65536
04151A 3E 01       1909*  	ld a,mos_load
04151C 5B CF       1910*  	RST.LIL 08h
04151E 21 4C 01 00 1911*  	ld hl,BUF_13_009
041522 01 23 00 00 1912*  	ld bc,35
041526 11 2D 00 00 1913*  	ld de,45
04152A DD 21 27 06 1914*  	ld ix,1575
       00          
04152F CD DE BD 04 1915*  	call vdu_load_img
041533 C9          1916*  	ret
041534             1917*  
041534             1918*  ld_13_010:
041534 21 B4 3B 04 1919*  	ld hl,F13_010
041538 22 63 BC 04 1920*  	ld (cur_filename),hl
04153C 11 8F C8 04 1921*  	ld de,filedata
041540 01 00 00 01 1922*  	ld bc,65536
041544 3E 01       1923*  	ld a,mos_load
041546 5B CF       1924*  	RST.LIL 08h
041548 21 4D 01 00 1925*  	ld hl,BUF_13_010
04154C 01 19 00 00 1926*  	ld bc,25
041550 11 2D 00 00 1927*  	ld de,45
041554 DD 21 65 04 1928*  	ld ix,1125
       00          
041559 CD DE BD 04 1929*  	call vdu_load_img
04155D C9          1930*  	ret
04155E             1931*  
04155E             1932*  ld_13_011:
04155E 21 C8 3B 04 1933*  	ld hl,F13_011
041562 22 63 BC 04 1934*  	ld (cur_filename),hl
041566 11 8F C8 04 1935*  	ld de,filedata
04156A 01 00 00 01 1936*  	ld bc,65536
04156E 3E 01       1937*  	ld a,mos_load
041570 5B CF       1938*  	RST.LIL 08h
041572 21 4E 01 00 1939*  	ld hl,BUF_13_011
041576 01 0F 00 00 1940*  	ld bc,15
04157A 11 2D 00 00 1941*  	ld de,45
04157E DD 21 A3 02 1942*  	ld ix,675
       00          
041583 CD DE BD 04 1943*  	call vdu_load_img
041587 C9          1944*  	ret
041588             1945*  
041588             1946*  ld_13_012:
041588 21 DC 3B 04 1947*  	ld hl,F13_012
04158C 22 63 BC 04 1948*  	ld (cur_filename),hl
041590 11 8F C8 04 1949*  	ld de,filedata
041594 01 00 00 01 1950*  	ld bc,65536
041598 3E 01       1951*  	ld a,mos_load
04159A 5B CF       1952*  	RST.LIL 08h
04159C 21 4F 01 00 1953*  	ld hl,BUF_13_012
0415A0 01 05 00 00 1954*  	ld bc,5
0415A4 11 2D 00 00 1955*  	ld de,45
0415A8 DD 21 E1 00 1956*  	ld ix,225
       00          
0415AD CD DE BD 04 1957*  	call vdu_load_img
0415B1 C9          1958*  	ret
0415B2             1959*  
0415B2             1960*  ld_13_013:
0415B2 21 F0 3B 04 1961*  	ld hl,F13_013
0415B6 22 63 BC 04 1962*  	ld (cur_filename),hl
0415BA 11 8F C8 04 1963*  	ld de,filedata
0415BE 01 00 00 01 1964*  	ld bc,65536
0415C2 3E 01       1965*  	ld a,mos_load
0415C4 5B CF       1966*  	RST.LIL 08h
0415C6 21 50 01 00 1967*  	ld hl,BUF_13_013
0415CA 01 05 00 00 1968*  	ld bc,5
0415CE 11 2B 00 00 1969*  	ld de,43
0415D2 DD 21 D7 00 1970*  	ld ix,215
       00          
0415D7 CD DE BD 04 1971*  	call vdu_load_img
0415DB C9          1972*  	ret
0415DC             1973*  
0415DC             1974*  ld_13_014:
0415DC 21 04 3C 04 1975*  	ld hl,F13_014
0415E0 22 63 BC 04 1976*  	ld (cur_filename),hl
0415E4 11 8F C8 04 1977*  	ld de,filedata
0415E8 01 00 00 01 1978*  	ld bc,65536
0415EC 3E 01       1979*  	ld a,mos_load
0415EE 5B CF       1980*  	RST.LIL 08h
0415F0 21 51 01 00 1981*  	ld hl,BUF_13_014
0415F4 01 0F 00 00 1982*  	ld bc,15
0415F8 11 2D 00 00 1983*  	ld de,45
0415FC DD 21 A3 02 1984*  	ld ix,675
       00          
041601 CD DE BD 04 1985*  	call vdu_load_img
041605 C9          1986*  	ret
041606             1987*  
041606             1988*  ld_13_015:
041606 21 18 3C 04 1989*  	ld hl,F13_015
04160A 22 63 BC 04 1990*  	ld (cur_filename),hl
04160E 11 8F C8 04 1991*  	ld de,filedata
041612 01 00 00 01 1992*  	ld bc,65536
041616 3E 01       1993*  	ld a,mos_load
041618 5B CF       1994*  	RST.LIL 08h
04161A 21 52 01 00 1995*  	ld hl,BUF_13_015
04161E 01 19 00 00 1996*  	ld bc,25
041622 11 2D 00 00 1997*  	ld de,45
041626 DD 21 65 04 1998*  	ld ix,1125
       00          
04162B CD DE BD 04 1999*  	call vdu_load_img
04162F C9          2000*  	ret
041630             2001*  
041630             2002*  ld_13_016:
041630 21 2C 3C 04 2003*  	ld hl,F13_016
041634 22 63 BC 04 2004*  	ld (cur_filename),hl
041638 11 8F C8 04 2005*  	ld de,filedata
04163C 01 00 00 01 2006*  	ld bc,65536
041640 3E 01       2007*  	ld a,mos_load
041642 5B CF       2008*  	RST.LIL 08h
041644 21 53 01 00 2009*  	ld hl,BUF_13_016
041648 01 23 00 00 2010*  	ld bc,35
04164C 11 2D 00 00 2011*  	ld de,45
041650 DD 21 27 06 2012*  	ld ix,1575
       00          
041655 CD DE BD 04 2013*  	call vdu_load_img
041659 C9          2014*  	ret
04165A             2015*  
04165A             2016*  ld_13_020:
04165A 21 40 3C 04 2017*  	ld hl,F13_020
04165E 22 63 BC 04 2018*  	ld (cur_filename),hl
041662 11 8F C8 04 2019*  	ld de,filedata
041666 01 00 00 01 2020*  	ld bc,65536
04166A 3E 01       2021*  	ld a,mos_load
04166C 5B CF       2022*  	RST.LIL 08h
04166E 21 54 01 00 2023*  	ld hl,BUF_13_020
041672 01 2E 00 00 2024*  	ld bc,46
041676 11 2D 00 00 2025*  	ld de,45
04167A DD 21 16 08 2026*  	ld ix,2070
       00          
04167F CD DE BD 04 2027*  	call vdu_load_img
041683 C9          2028*  	ret
041684             2029*  
041684             2030*  ld_13_024:
041684 21 54 3C 04 2031*  	ld hl,F13_024
041688 22 63 BC 04 2032*  	ld (cur_filename),hl
04168C 11 8F C8 04 2033*  	ld de,filedata
041690 01 00 00 01 2034*  	ld bc,65536
041694 3E 01       2035*  	ld a,mos_load
041696 5B CF       2036*  	RST.LIL 08h
041698 21 55 01 00 2037*  	ld hl,BUF_13_024
04169C 01 2E 00 00 2038*  	ld bc,46
0416A0 11 40 00 00 2039*  	ld de,64
0416A4 DD 21 80 0B 2040*  	ld ix,2944
       00          
0416A9 CD DE BD 04 2041*  	call vdu_load_img
0416AD C9          2042*  	ret
0416AE             2043*  
0416AE             2044*  ld_13_025:
0416AE 21 68 3C 04 2045*  	ld hl,F13_025
0416B2 22 63 BC 04 2046*  	ld (cur_filename),hl
0416B6 11 8F C8 04 2047*  	ld de,filedata
0416BA 01 00 00 01 2048*  	ld bc,65536
0416BE 3E 01       2049*  	ld a,mos_load
0416C0 5B CF       2050*  	RST.LIL 08h
0416C2 21 56 01 00 2051*  	ld hl,BUF_13_025
0416C6 01 1C 00 00 2052*  	ld bc,28
0416CA 11 40 00 00 2053*  	ld de,64
0416CE DD 21 00 07 2054*  	ld ix,1792
       00          
0416D3 CD DE BD 04 2055*  	call vdu_load_img
0416D7 C9          2056*  	ret
0416D8             2057*  
0416D8             2058*  ld_13_026:
0416D8 21 7C 3C 04 2059*  	ld hl,F13_026
0416DC 22 63 BC 04 2060*  	ld (cur_filename),hl
0416E0 11 8F C8 04 2061*  	ld de,filedata
0416E4 01 00 00 01 2062*  	ld bc,65536
0416E8 3E 01       2063*  	ld a,mos_load
0416EA 5B CF       2064*  	RST.LIL 08h
0416EC 21 57 01 00 2065*  	ld hl,BUF_13_026
0416F0 01 09 00 00 2066*  	ld bc,9
0416F4 11 40 00 00 2067*  	ld de,64
0416F8 DD 21 40 02 2068*  	ld ix,576
       00          
0416FD CD DE BD 04 2069*  	call vdu_load_img
041701 C9          2070*  	ret
041702             2071*  
041702             2072*  ld_13_027:
041702 21 90 3C 04 2073*  	ld hl,F13_027
041706 22 63 BC 04 2074*  	ld (cur_filename),hl
04170A 11 8F C8 04 2075*  	ld de,filedata
04170E 01 00 00 01 2076*  	ld bc,65536
041712 3E 01       2077*  	ld a,mos_load
041714 5B CF       2078*  	RST.LIL 08h
041716 21 58 01 00 2079*  	ld hl,BUF_13_027
04171A 01 0A 00 00 2080*  	ld bc,10
04171E 11 3E 00 00 2081*  	ld de,62
041722 DD 21 6C 02 2082*  	ld ix,620
       00          
041727 CD DE BD 04 2083*  	call vdu_load_img
04172B C9          2084*  	ret
04172C             2085*  
04172C             2086*  ld_13_028:
04172C 21 A4 3C 04 2087*  	ld hl,F13_028
041730 22 63 BC 04 2088*  	ld (cur_filename),hl
041734 11 8F C8 04 2089*  	ld de,filedata
041738 01 00 00 01 2090*  	ld bc,65536
04173C 3E 01       2091*  	ld a,mos_load
04173E 5B CF       2092*  	RST.LIL 08h
041740 21 59 01 00 2093*  	ld hl,BUF_13_028
041744 01 1C 00 00 2094*  	ld bc,28
041748 11 40 00 00 2095*  	ld de,64
04174C DD 21 00 07 2096*  	ld ix,1792
       00          
041751 CD DE BD 04 2097*  	call vdu_load_img
041755 C9          2098*  	ret
041756             2099*  
041756             2100*  ld_13_029:
041756 21 B8 3C 04 2101*  	ld hl,F13_029
04175A 22 63 BC 04 2102*  	ld (cur_filename),hl
04175E 11 8F C8 04 2103*  	ld de,filedata
041762 01 00 00 01 2104*  	ld bc,65536
041766 3E 01       2105*  	ld a,mos_load
041768 5B CF       2106*  	RST.LIL 08h
04176A 21 5A 01 00 2107*  	ld hl,BUF_13_029
04176E 01 2F 00 00 2108*  	ld bc,47
041772 11 40 00 00 2109*  	ld de,64
041776 DD 21 C0 0B 2110*  	ld ix,3008
       00          
04177B CD DE BD 04 2111*  	call vdu_load_img
04177F C9          2112*  	ret
041780             2113*  
041780             2114*  ld_13_032:
041780 21 CC 3C 04 2115*  	ld hl,F13_032
041784 22 63 BC 04 2116*  	ld (cur_filename),hl
041788 11 8F C8 04 2117*  	ld de,filedata
04178C 01 00 00 01 2118*  	ld bc,65536
041790 3E 01       2119*  	ld a,mos_load
041792 5B CF       2120*  	RST.LIL 08h
041794 21 5B 01 00 2121*  	ld hl,BUF_13_032
041798 01 41 00 00 2122*  	ld bc,65
04179C 11 40 00 00 2123*  	ld de,64
0417A0 DD 21 40 10 2124*  	ld ix,4160
       00          
0417A5 CD DE BD 04 2125*  	call vdu_load_img
0417A9 C9          2126*  	ret
0417AA             2127*  
0417AA             2128*  ld_13_035:
0417AA 21 E0 3C 04 2129*  	ld hl,F13_035
0417AE 22 63 BC 04 2130*  	ld (cur_filename),hl
0417B2 11 8F C8 04 2131*  	ld de,filedata
0417B6 01 00 00 01 2132*  	ld bc,65536
0417BA 3E 01       2133*  	ld a,mos_load
0417BC 5B CF       2134*  	RST.LIL 08h
0417BE 21 5C 01 00 2135*  	ld hl,BUF_13_035
0417C2 01 3F 00 00 2136*  	ld bc,63
0417C6 11 6B 00 00 2137*  	ld de,107
0417CA DD 21 55 1A 2138*  	ld ix,6741
       00          
0417CF CD DE BD 04 2139*  	call vdu_load_img
0417D3 C9          2140*  	ret
0417D4             2141*  
0417D4             2142*  ld_13_036:
0417D4 21 F4 3C 04 2143*  	ld hl,F13_036
0417D8 22 63 BC 04 2144*  	ld (cur_filename),hl
0417DC 11 8F C8 04 2145*  	ld de,filedata
0417E0 01 00 00 01 2146*  	ld bc,65536
0417E4 3E 01       2147*  	ld a,mos_load
0417E6 5B CF       2148*  	RST.LIL 08h
0417E8 21 5D 01 00 2149*  	ld hl,BUF_13_036
0417EC 01 16 00 00 2150*  	ld bc,22
0417F0 11 6B 00 00 2151*  	ld de,107
0417F4 DD 21 32 09 2152*  	ld ix,2354
       00          
0417F9 CD DE BD 04 2153*  	call vdu_load_img
0417FD C9          2154*  	ret
0417FE             2155*  
0417FE             2156*  ld_13_037:
0417FE 21 08 3D 04 2157*  	ld hl,F13_037
041802 22 63 BC 04 2158*  	ld (cur_filename),hl
041806 11 8F C8 04 2159*  	ld de,filedata
04180A 01 00 00 01 2160*  	ld bc,65536
04180E 3E 01       2161*  	ld a,mos_load
041810 5B CF       2162*  	RST.LIL 08h
041812 21 5E 01 00 2163*  	ld hl,BUF_13_037
041816 01 15 00 00 2164*  	ld bc,21
04181A 11 69 00 00 2165*  	ld de,105
04181E DD 21 9D 08 2166*  	ld ix,2205
       00          
041823 CD DE BD 04 2167*  	call vdu_load_img
041827 C9          2168*  	ret
041828             2169*  
041828             2170*  ld_13_038:
041828 21 1C 3D 04 2171*  	ld hl,F13_038
04182C 22 63 BC 04 2172*  	ld (cur_filename),hl
041830 11 8F C8 04 2173*  	ld de,filedata
041834 01 00 00 01 2174*  	ld bc,65536
041838 3E 01       2175*  	ld a,mos_load
04183A 5B CF       2176*  	RST.LIL 08h
04183C 21 5F 01 00 2177*  	ld hl,BUF_13_038
041840 01 3F 00 00 2178*  	ld bc,63
041844 11 6B 00 00 2179*  	ld de,107
041848 DD 21 55 1A 2180*  	ld ix,6741
       00          
04184D CD DE BD 04 2181*  	call vdu_load_img
041851 C9          2182*  	ret
041852             2183*  
041852             2184*  ld_13_040:
041852 21 30 3D 04 2185*  	ld hl,F13_040
041856 22 63 BC 04 2186*  	ld (cur_filename),hl
04185A 11 8F C8 04 2187*  	ld de,filedata
04185E 01 00 00 01 2188*  	ld bc,65536
041862 3E 01       2189*  	ld a,mos_load
041864 5B CF       2190*  	RST.LIL 08h
041866 21 60 01 00 2191*  	ld hl,BUF_13_040
04186A 01 6C 00 00 2192*  	ld bc,108
04186E 11 6B 00 00 2193*  	ld de,107
041872 DD 21 24 2D 2194*  	ld ix,11556
       00          
041877 CD DE BD 04 2195*  	call vdu_load_img
04187B C9          2196*  	ret
04187C             2197*  
04187C             2198*  ld_13_042:
04187C 21 44 3D 04 2199*  	ld hl,F13_042
041880 22 63 BC 04 2200*  	ld (cur_filename),hl
041884 11 8F C8 04 2201*  	ld de,filedata
041888 01 00 00 01 2202*  	ld bc,65536
04188C 3E 01       2203*  	ld a,mos_load
04188E 5B CF       2204*  	RST.LIL 08h
041890 21 61 01 00 2205*  	ld hl,BUF_13_042
041894 01 6A 00 00 2206*  	ld bc,106
041898 11 A0 00 00 2207*  	ld de,160
04189C DD 21 40 42 2208*  	ld ix,16960
       00          
0418A1 CD DE BD 04 2209*  	call vdu_load_img
0418A5 C9          2210*  	ret
0418A6             2211*  
0418A6             2212*  ld_13_043:
0418A6 21 58 3D 04 2213*  	ld hl,F13_043
0418AA 22 63 BC 04 2214*  	ld (cur_filename),hl
0418AE 11 8F C8 04 2215*  	ld de,filedata
0418B2 01 00 00 01 2216*  	ld bc,65536
0418B6 3E 01       2217*  	ld a,mos_load
0418B8 5B CF       2218*  	RST.LIL 08h
0418BA 21 62 01 00 2219*  	ld hl,BUF_13_043
0418BE 01 6B 00 00 2220*  	ld bc,107
0418C2 11 A0 00 00 2221*  	ld de,160
0418C6 DD 21 E0 42 2222*  	ld ix,17120
       00          
0418CB CD DE BD 04 2223*  	call vdu_load_img
0418CF C9          2224*  	ret
0418D0             2225*  
0418D0             2226*  ld_13_044:
0418D0 21 6C 3D 04 2227*  	ld hl,F13_044
0418D4 22 63 BC 04 2228*  	ld (cur_filename),hl
0418D8 11 8F C8 04 2229*  	ld de,filedata
0418DC 01 00 00 01 2230*  	ld bc,65536
0418E0 3E 01       2231*  	ld a,mos_load
0418E2 5B CF       2232*  	RST.LIL 08h
0418E4 21 63 01 00 2233*  	ld hl,BUF_13_044
0418E8 01 40 01 00 2234*  	ld bc,320
0418EC 11 A0 00 00 2235*  	ld de,160
0418F0 DD 21 00 C8 2236*  	ld ix,51200
       00          
0418F5 CD DE BD 04 2237*  	call vdu_load_img
0418F9 C9          2238*  	ret
0418FA             2239*  
0418FA             2240*  ld_14_004:
0418FA 21 80 3D 04 2241*  	ld hl,F14_004
0418FE 22 63 BC 04 2242*  	ld (cur_filename),hl
041902 11 8F C8 04 2243*  	ld de,filedata
041906 01 00 00 01 2244*  	ld bc,65536
04190A 3E 01       2245*  	ld a,mos_load
04190C 5B CF       2246*  	RST.LIL 08h
04190E 21 64 01 00 2247*  	ld hl,BUF_14_004
041912 01 24 00 00 2248*  	ld bc,36
041916 11 23 00 00 2249*  	ld de,35
04191A DD 21 EC 04 2250*  	ld ix,1260
       00          
04191F CD DE BD 04 2251*  	call vdu_load_img
041923 C9          2252*  	ret
041924             2253*  
041924             2254*  ld_14_009:
041924 21 94 3D 04 2255*  	ld hl,F14_009
041928 22 63 BC 04 2256*  	ld (cur_filename),hl
04192C 11 8F C8 04 2257*  	ld de,filedata
041930 01 00 00 01 2258*  	ld bc,65536
041934 3E 01       2259*  	ld a,mos_load
041936 5B CF       2260*  	RST.LIL 08h
041938 21 65 01 00 2261*  	ld hl,BUF_14_009
04193C 01 23 00 00 2262*  	ld bc,35
041940 11 2D 00 00 2263*  	ld de,45
041944 DD 21 27 06 2264*  	ld ix,1575
       00          
041949 CD DE BD 04 2265*  	call vdu_load_img
04194D C9          2266*  	ret
04194E             2267*  
04194E             2268*  ld_14_010:
04194E 21 A8 3D 04 2269*  	ld hl,F14_010
041952 22 63 BC 04 2270*  	ld (cur_filename),hl
041956 11 8F C8 04 2271*  	ld de,filedata
04195A 01 00 00 01 2272*  	ld bc,65536
04195E 3E 01       2273*  	ld a,mos_load
041960 5B CF       2274*  	RST.LIL 08h
041962 21 66 01 00 2275*  	ld hl,BUF_14_010
041966 01 19 00 00 2276*  	ld bc,25
04196A 11 2D 00 00 2277*  	ld de,45
04196E DD 21 65 04 2278*  	ld ix,1125
       00          
041973 CD DE BD 04 2279*  	call vdu_load_img
041977 C9          2280*  	ret
041978             2281*  
041978             2282*  ld_14_011:
041978 21 BC 3D 04 2283*  	ld hl,F14_011
04197C 22 63 BC 04 2284*  	ld (cur_filename),hl
041980 11 8F C8 04 2285*  	ld de,filedata
041984 01 00 00 01 2286*  	ld bc,65536
041988 3E 01       2287*  	ld a,mos_load
04198A 5B CF       2288*  	RST.LIL 08h
04198C 21 67 01 00 2289*  	ld hl,BUF_14_011
041990 01 0F 00 00 2290*  	ld bc,15
041994 11 2D 00 00 2291*  	ld de,45
041998 DD 21 A3 02 2292*  	ld ix,675
       00          
04199D CD DE BD 04 2293*  	call vdu_load_img
0419A1 C9          2294*  	ret
0419A2             2295*  
0419A2             2296*  ld_14_012:
0419A2 21 D0 3D 04 2297*  	ld hl,F14_012
0419A6 22 63 BC 04 2298*  	ld (cur_filename),hl
0419AA 11 8F C8 04 2299*  	ld de,filedata
0419AE 01 00 00 01 2300*  	ld bc,65536
0419B2 3E 01       2301*  	ld a,mos_load
0419B4 5B CF       2302*  	RST.LIL 08h
0419B6 21 68 01 00 2303*  	ld hl,BUF_14_012
0419BA 01 05 00 00 2304*  	ld bc,5
0419BE 11 2D 00 00 2305*  	ld de,45
0419C2 DD 21 E1 00 2306*  	ld ix,225
       00          
0419C7 CD DE BD 04 2307*  	call vdu_load_img
0419CB C9          2308*  	ret
0419CC             2309*  
0419CC             2310*  ld_14_013:
0419CC 21 E4 3D 04 2311*  	ld hl,F14_013
0419D0 22 63 BC 04 2312*  	ld (cur_filename),hl
0419D4 11 8F C8 04 2313*  	ld de,filedata
0419D8 01 00 00 01 2314*  	ld bc,65536
0419DC 3E 01       2315*  	ld a,mos_load
0419DE 5B CF       2316*  	RST.LIL 08h
0419E0 21 69 01 00 2317*  	ld hl,BUF_14_013
0419E4 01 05 00 00 2318*  	ld bc,5
0419E8 11 2B 00 00 2319*  	ld de,43
0419EC DD 21 D7 00 2320*  	ld ix,215
       00          
0419F1 CD DE BD 04 2321*  	call vdu_load_img
0419F5 C9          2322*  	ret
0419F6             2323*  
0419F6             2324*  ld_14_014:
0419F6 21 F8 3D 04 2325*  	ld hl,F14_014
0419FA 22 63 BC 04 2326*  	ld (cur_filename),hl
0419FE 11 8F C8 04 2327*  	ld de,filedata
041A02 01 00 00 01 2328*  	ld bc,65536
041A06 3E 01       2329*  	ld a,mos_load
041A08 5B CF       2330*  	RST.LIL 08h
041A0A 21 6A 01 00 2331*  	ld hl,BUF_14_014
041A0E 01 0F 00 00 2332*  	ld bc,15
041A12 11 2D 00 00 2333*  	ld de,45
041A16 DD 21 A3 02 2334*  	ld ix,675
       00          
041A1B CD DE BD 04 2335*  	call vdu_load_img
041A1F C9          2336*  	ret
041A20             2337*  
041A20             2338*  ld_14_015:
041A20 21 0C 3E 04 2339*  	ld hl,F14_015
041A24 22 63 BC 04 2340*  	ld (cur_filename),hl
041A28 11 8F C8 04 2341*  	ld de,filedata
041A2C 01 00 00 01 2342*  	ld bc,65536
041A30 3E 01       2343*  	ld a,mos_load
041A32 5B CF       2344*  	RST.LIL 08h
041A34 21 6B 01 00 2345*  	ld hl,BUF_14_015
041A38 01 19 00 00 2346*  	ld bc,25
041A3C 11 2D 00 00 2347*  	ld de,45
041A40 DD 21 65 04 2348*  	ld ix,1125
       00          
041A45 CD DE BD 04 2349*  	call vdu_load_img
041A49 C9          2350*  	ret
041A4A             2351*  
041A4A             2352*  ld_14_016:
041A4A 21 20 3E 04 2353*  	ld hl,F14_016
041A4E 22 63 BC 04 2354*  	ld (cur_filename),hl
041A52 11 8F C8 04 2355*  	ld de,filedata
041A56 01 00 00 01 2356*  	ld bc,65536
041A5A 3E 01       2357*  	ld a,mos_load
041A5C 5B CF       2358*  	RST.LIL 08h
041A5E 21 6C 01 00 2359*  	ld hl,BUF_14_016
041A62 01 23 00 00 2360*  	ld bc,35
041A66 11 2D 00 00 2361*  	ld de,45
041A6A DD 21 27 06 2362*  	ld ix,1575
       00          
041A6F CD DE BD 04 2363*  	call vdu_load_img
041A73 C9          2364*  	ret
041A74             2365*  
041A74             2366*  ld_14_020:
041A74 21 34 3E 04 2367*  	ld hl,F14_020
041A78 22 63 BC 04 2368*  	ld (cur_filename),hl
041A7C 11 8F C8 04 2369*  	ld de,filedata
041A80 01 00 00 01 2370*  	ld bc,65536
041A84 3E 01       2371*  	ld a,mos_load
041A86 5B CF       2372*  	RST.LIL 08h
041A88 21 6D 01 00 2373*  	ld hl,BUF_14_020
041A8C 01 2E 00 00 2374*  	ld bc,46
041A90 11 2D 00 00 2375*  	ld de,45
041A94 DD 21 16 08 2376*  	ld ix,2070
       00          
041A99 CD DE BD 04 2377*  	call vdu_load_img
041A9D C9          2378*  	ret
041A9E             2379*  
041A9E             2380*  ld_14_024:
041A9E 21 48 3E 04 2381*  	ld hl,F14_024
041AA2 22 63 BC 04 2382*  	ld (cur_filename),hl
041AA6 11 8F C8 04 2383*  	ld de,filedata
041AAA 01 00 00 01 2384*  	ld bc,65536
041AAE 3E 01       2385*  	ld a,mos_load
041AB0 5B CF       2386*  	RST.LIL 08h
041AB2 21 6E 01 00 2387*  	ld hl,BUF_14_024
041AB6 01 2E 00 00 2388*  	ld bc,46
041ABA 11 40 00 00 2389*  	ld de,64
041ABE DD 21 80 0B 2390*  	ld ix,2944
       00          
041AC3 CD DE BD 04 2391*  	call vdu_load_img
041AC7 C9          2392*  	ret
041AC8             2393*  
041AC8             2394*  ld_14_025:
041AC8 21 5C 3E 04 2395*  	ld hl,F14_025
041ACC 22 63 BC 04 2396*  	ld (cur_filename),hl
041AD0 11 8F C8 04 2397*  	ld de,filedata
041AD4 01 00 00 01 2398*  	ld bc,65536
041AD8 3E 01       2399*  	ld a,mos_load
041ADA 5B CF       2400*  	RST.LIL 08h
041ADC 21 6F 01 00 2401*  	ld hl,BUF_14_025
041AE0 01 1C 00 00 2402*  	ld bc,28
041AE4 11 40 00 00 2403*  	ld de,64
041AE8 DD 21 00 07 2404*  	ld ix,1792
       00          
041AED CD DE BD 04 2405*  	call vdu_load_img
041AF1 C9          2406*  	ret
041AF2             2407*  
041AF2             2408*  ld_14_026:
041AF2 21 70 3E 04 2409*  	ld hl,F14_026
041AF6 22 63 BC 04 2410*  	ld (cur_filename),hl
041AFA 11 8F C8 04 2411*  	ld de,filedata
041AFE 01 00 00 01 2412*  	ld bc,65536
041B02 3E 01       2413*  	ld a,mos_load
041B04 5B CF       2414*  	RST.LIL 08h
041B06 21 70 01 00 2415*  	ld hl,BUF_14_026
041B0A 01 09 00 00 2416*  	ld bc,9
041B0E 11 40 00 00 2417*  	ld de,64
041B12 DD 21 40 02 2418*  	ld ix,576
       00          
041B17 CD DE BD 04 2419*  	call vdu_load_img
041B1B C9          2420*  	ret
041B1C             2421*  
041B1C             2422*  ld_14_027:
041B1C 21 84 3E 04 2423*  	ld hl,F14_027
041B20 22 63 BC 04 2424*  	ld (cur_filename),hl
041B24 11 8F C8 04 2425*  	ld de,filedata
041B28 01 00 00 01 2426*  	ld bc,65536
041B2C 3E 01       2427*  	ld a,mos_load
041B2E 5B CF       2428*  	RST.LIL 08h
041B30 21 71 01 00 2429*  	ld hl,BUF_14_027
041B34 01 0A 00 00 2430*  	ld bc,10
041B38 11 3E 00 00 2431*  	ld de,62
041B3C DD 21 6C 02 2432*  	ld ix,620
       00          
041B41 CD DE BD 04 2433*  	call vdu_load_img
041B45 C9          2434*  	ret
041B46             2435*  
041B46             2436*  ld_14_028:
041B46 21 98 3E 04 2437*  	ld hl,F14_028
041B4A 22 63 BC 04 2438*  	ld (cur_filename),hl
041B4E 11 8F C8 04 2439*  	ld de,filedata
041B52 01 00 00 01 2440*  	ld bc,65536
041B56 3E 01       2441*  	ld a,mos_load
041B58 5B CF       2442*  	RST.LIL 08h
041B5A 21 72 01 00 2443*  	ld hl,BUF_14_028
041B5E 01 1C 00 00 2444*  	ld bc,28
041B62 11 40 00 00 2445*  	ld de,64
041B66 DD 21 00 07 2446*  	ld ix,1792
       00          
041B6B CD DE BD 04 2447*  	call vdu_load_img
041B6F C9          2448*  	ret
041B70             2449*  
041B70             2450*  ld_14_029:
041B70 21 AC 3E 04 2451*  	ld hl,F14_029
041B74 22 63 BC 04 2452*  	ld (cur_filename),hl
041B78 11 8F C8 04 2453*  	ld de,filedata
041B7C 01 00 00 01 2454*  	ld bc,65536
041B80 3E 01       2455*  	ld a,mos_load
041B82 5B CF       2456*  	RST.LIL 08h
041B84 21 73 01 00 2457*  	ld hl,BUF_14_029
041B88 01 2F 00 00 2458*  	ld bc,47
041B8C 11 40 00 00 2459*  	ld de,64
041B90 DD 21 C0 0B 2460*  	ld ix,3008
       00          
041B95 CD DE BD 04 2461*  	call vdu_load_img
041B99 C9          2462*  	ret
041B9A             2463*  
041B9A             2464*  ld_14_032:
041B9A 21 C0 3E 04 2465*  	ld hl,F14_032
041B9E 22 63 BC 04 2466*  	ld (cur_filename),hl
041BA2 11 8F C8 04 2467*  	ld de,filedata
041BA6 01 00 00 01 2468*  	ld bc,65536
041BAA 3E 01       2469*  	ld a,mos_load
041BAC 5B CF       2470*  	RST.LIL 08h
041BAE 21 74 01 00 2471*  	ld hl,BUF_14_032
041BB2 01 41 00 00 2472*  	ld bc,65
041BB6 11 40 00 00 2473*  	ld de,64
041BBA DD 21 40 10 2474*  	ld ix,4160
       00          
041BBF CD DE BD 04 2475*  	call vdu_load_img
041BC3 C9          2476*  	ret
041BC4             2477*  
041BC4             2478*  ld_14_035:
041BC4 21 D4 3E 04 2479*  	ld hl,F14_035
041BC8 22 63 BC 04 2480*  	ld (cur_filename),hl
041BCC 11 8F C8 04 2481*  	ld de,filedata
041BD0 01 00 00 01 2482*  	ld bc,65536
041BD4 3E 01       2483*  	ld a,mos_load
041BD6 5B CF       2484*  	RST.LIL 08h
041BD8 21 75 01 00 2485*  	ld hl,BUF_14_035
041BDC 01 3F 00 00 2486*  	ld bc,63
041BE0 11 6B 00 00 2487*  	ld de,107
041BE4 DD 21 55 1A 2488*  	ld ix,6741
       00          
041BE9 CD DE BD 04 2489*  	call vdu_load_img
041BED C9          2490*  	ret
041BEE             2491*  
041BEE             2492*  ld_14_036:
041BEE 21 E8 3E 04 2493*  	ld hl,F14_036
041BF2 22 63 BC 04 2494*  	ld (cur_filename),hl
041BF6 11 8F C8 04 2495*  	ld de,filedata
041BFA 01 00 00 01 2496*  	ld bc,65536
041BFE 3E 01       2497*  	ld a,mos_load
041C00 5B CF       2498*  	RST.LIL 08h
041C02 21 76 01 00 2499*  	ld hl,BUF_14_036
041C06 01 16 00 00 2500*  	ld bc,22
041C0A 11 6B 00 00 2501*  	ld de,107
041C0E DD 21 32 09 2502*  	ld ix,2354
       00          
041C13 CD DE BD 04 2503*  	call vdu_load_img
041C17 C9          2504*  	ret
041C18             2505*  
041C18             2506*  ld_14_037:
041C18 21 FC 3E 04 2507*  	ld hl,F14_037
041C1C 22 63 BC 04 2508*  	ld (cur_filename),hl
041C20 11 8F C8 04 2509*  	ld de,filedata
041C24 01 00 00 01 2510*  	ld bc,65536
041C28 3E 01       2511*  	ld a,mos_load
041C2A 5B CF       2512*  	RST.LIL 08h
041C2C 21 77 01 00 2513*  	ld hl,BUF_14_037
041C30 01 15 00 00 2514*  	ld bc,21
041C34 11 69 00 00 2515*  	ld de,105
041C38 DD 21 9D 08 2516*  	ld ix,2205
       00          
041C3D CD DE BD 04 2517*  	call vdu_load_img
041C41 C9          2518*  	ret
041C42             2519*  
041C42             2520*  ld_14_038:
041C42 21 10 3F 04 2521*  	ld hl,F14_038
041C46 22 63 BC 04 2522*  	ld (cur_filename),hl
041C4A 11 8F C8 04 2523*  	ld de,filedata
041C4E 01 00 00 01 2524*  	ld bc,65536
041C52 3E 01       2525*  	ld a,mos_load
041C54 5B CF       2526*  	RST.LIL 08h
041C56 21 78 01 00 2527*  	ld hl,BUF_14_038
041C5A 01 3F 00 00 2528*  	ld bc,63
041C5E 11 6B 00 00 2529*  	ld de,107
041C62 DD 21 55 1A 2530*  	ld ix,6741
       00          
041C67 CD DE BD 04 2531*  	call vdu_load_img
041C6B C9          2532*  	ret
041C6C             2533*  
041C6C             2534*  ld_14_040:
041C6C 21 24 3F 04 2535*  	ld hl,F14_040
041C70 22 63 BC 04 2536*  	ld (cur_filename),hl
041C74 11 8F C8 04 2537*  	ld de,filedata
041C78 01 00 00 01 2538*  	ld bc,65536
041C7C 3E 01       2539*  	ld a,mos_load
041C7E 5B CF       2540*  	RST.LIL 08h
041C80 21 79 01 00 2541*  	ld hl,BUF_14_040
041C84 01 6C 00 00 2542*  	ld bc,108
041C88 11 6B 00 00 2543*  	ld de,107
041C8C DD 21 24 2D 2544*  	ld ix,11556
       00          
041C91 CD DE BD 04 2545*  	call vdu_load_img
041C95 C9          2546*  	ret
041C96             2547*  
041C96             2548*  ld_14_042:
041C96 21 38 3F 04 2549*  	ld hl,F14_042
041C9A 22 63 BC 04 2550*  	ld (cur_filename),hl
041C9E 11 8F C8 04 2551*  	ld de,filedata
041CA2 01 00 00 01 2552*  	ld bc,65536
041CA6 3E 01       2553*  	ld a,mos_load
041CA8 5B CF       2554*  	RST.LIL 08h
041CAA 21 7A 01 00 2555*  	ld hl,BUF_14_042
041CAE 01 6A 00 00 2556*  	ld bc,106
041CB2 11 A0 00 00 2557*  	ld de,160
041CB6 DD 21 40 42 2558*  	ld ix,16960
       00          
041CBB CD DE BD 04 2559*  	call vdu_load_img
041CBF C9          2560*  	ret
041CC0             2561*  
041CC0             2562*  ld_14_043:
041CC0 21 4C 3F 04 2563*  	ld hl,F14_043
041CC4 22 63 BC 04 2564*  	ld (cur_filename),hl
041CC8 11 8F C8 04 2565*  	ld de,filedata
041CCC 01 00 00 01 2566*  	ld bc,65536
041CD0 3E 01       2567*  	ld a,mos_load
041CD2 5B CF       2568*  	RST.LIL 08h
041CD4 21 7B 01 00 2569*  	ld hl,BUF_14_043
041CD8 01 6B 00 00 2570*  	ld bc,107
041CDC 11 A0 00 00 2571*  	ld de,160
041CE0 DD 21 E0 42 2572*  	ld ix,17120
       00          
041CE5 CD DE BD 04 2573*  	call vdu_load_img
041CE9 C9          2574*  	ret
041CEA             2575*  
041CEA             2576*  ld_14_044:
041CEA 21 60 3F 04 2577*  	ld hl,F14_044
041CEE 22 63 BC 04 2578*  	ld (cur_filename),hl
041CF2 11 8F C8 04 2579*  	ld de,filedata
041CF6 01 00 00 01 2580*  	ld bc,65536
041CFA 3E 01       2581*  	ld a,mos_load
041CFC 5B CF       2582*  	RST.LIL 08h
041CFE 21 7C 01 00 2583*  	ld hl,BUF_14_044
041D02 01 40 01 00 2584*  	ld bc,320
041D06 11 A0 00 00 2585*  	ld de,160
041D0A DD 21 00 C8 2586*  	ld ix,51200
       00          
041D0F CD DE BD 04 2587*  	call vdu_load_img
041D13 C9          2588*  	ret
041D14             2589*  
041D14             2590*  ld_15_004:
041D14 21 74 3F 04 2591*  	ld hl,F15_004
041D18 22 63 BC 04 2592*  	ld (cur_filename),hl
041D1C 11 8F C8 04 2593*  	ld de,filedata
041D20 01 00 00 01 2594*  	ld bc,65536
041D24 3E 01       2595*  	ld a,mos_load
041D26 5B CF       2596*  	RST.LIL 08h
041D28 21 7D 01 00 2597*  	ld hl,BUF_15_004
041D2C 01 24 00 00 2598*  	ld bc,36
041D30 11 23 00 00 2599*  	ld de,35
041D34 DD 21 EC 04 2600*  	ld ix,1260
       00          
041D39 CD DE BD 04 2601*  	call vdu_load_img
041D3D C9          2602*  	ret
041D3E             2603*  
041D3E             2604*  ld_15_009:
041D3E 21 88 3F 04 2605*  	ld hl,F15_009
041D42 22 63 BC 04 2606*  	ld (cur_filename),hl
041D46 11 8F C8 04 2607*  	ld de,filedata
041D4A 01 00 00 01 2608*  	ld bc,65536
041D4E 3E 01       2609*  	ld a,mos_load
041D50 5B CF       2610*  	RST.LIL 08h
041D52 21 7E 01 00 2611*  	ld hl,BUF_15_009
041D56 01 23 00 00 2612*  	ld bc,35
041D5A 11 2D 00 00 2613*  	ld de,45
041D5E DD 21 27 06 2614*  	ld ix,1575
       00          
041D63 CD DE BD 04 2615*  	call vdu_load_img
041D67 C9          2616*  	ret
041D68             2617*  
041D68             2618*  ld_15_010:
041D68 21 9C 3F 04 2619*  	ld hl,F15_010
041D6C 22 63 BC 04 2620*  	ld (cur_filename),hl
041D70 11 8F C8 04 2621*  	ld de,filedata
041D74 01 00 00 01 2622*  	ld bc,65536
041D78 3E 01       2623*  	ld a,mos_load
041D7A 5B CF       2624*  	RST.LIL 08h
041D7C 21 7F 01 00 2625*  	ld hl,BUF_15_010
041D80 01 19 00 00 2626*  	ld bc,25
041D84 11 2D 00 00 2627*  	ld de,45
041D88 DD 21 65 04 2628*  	ld ix,1125
       00          
041D8D CD DE BD 04 2629*  	call vdu_load_img
041D91 C9          2630*  	ret
041D92             2631*  
041D92             2632*  ld_15_011:
041D92 21 B0 3F 04 2633*  	ld hl,F15_011
041D96 22 63 BC 04 2634*  	ld (cur_filename),hl
041D9A 11 8F C8 04 2635*  	ld de,filedata
041D9E 01 00 00 01 2636*  	ld bc,65536
041DA2 3E 01       2637*  	ld a,mos_load
041DA4 5B CF       2638*  	RST.LIL 08h
041DA6 21 80 01 00 2639*  	ld hl,BUF_15_011
041DAA 01 0F 00 00 2640*  	ld bc,15
041DAE 11 2D 00 00 2641*  	ld de,45
041DB2 DD 21 A3 02 2642*  	ld ix,675
       00          
041DB7 CD DE BD 04 2643*  	call vdu_load_img
041DBB C9          2644*  	ret
041DBC             2645*  
041DBC             2646*  ld_15_012:
041DBC 21 C4 3F 04 2647*  	ld hl,F15_012
041DC0 22 63 BC 04 2648*  	ld (cur_filename),hl
041DC4 11 8F C8 04 2649*  	ld de,filedata
041DC8 01 00 00 01 2650*  	ld bc,65536
041DCC 3E 01       2651*  	ld a,mos_load
041DCE 5B CF       2652*  	RST.LIL 08h
041DD0 21 81 01 00 2653*  	ld hl,BUF_15_012
041DD4 01 05 00 00 2654*  	ld bc,5
041DD8 11 2D 00 00 2655*  	ld de,45
041DDC DD 21 E1 00 2656*  	ld ix,225
       00          
041DE1 CD DE BD 04 2657*  	call vdu_load_img
041DE5 C9          2658*  	ret
041DE6             2659*  
041DE6             2660*  ld_15_013:
041DE6 21 D8 3F 04 2661*  	ld hl,F15_013
041DEA 22 63 BC 04 2662*  	ld (cur_filename),hl
041DEE 11 8F C8 04 2663*  	ld de,filedata
041DF2 01 00 00 01 2664*  	ld bc,65536
041DF6 3E 01       2665*  	ld a,mos_load
041DF8 5B CF       2666*  	RST.LIL 08h
041DFA 21 82 01 00 2667*  	ld hl,BUF_15_013
041DFE 01 05 00 00 2668*  	ld bc,5
041E02 11 2B 00 00 2669*  	ld de,43
041E06 DD 21 D7 00 2670*  	ld ix,215
       00          
041E0B CD DE BD 04 2671*  	call vdu_load_img
041E0F C9          2672*  	ret
041E10             2673*  
041E10             2674*  ld_15_014:
041E10 21 EC 3F 04 2675*  	ld hl,F15_014
041E14 22 63 BC 04 2676*  	ld (cur_filename),hl
041E18 11 8F C8 04 2677*  	ld de,filedata
041E1C 01 00 00 01 2678*  	ld bc,65536
041E20 3E 01       2679*  	ld a,mos_load
041E22 5B CF       2680*  	RST.LIL 08h
041E24 21 83 01 00 2681*  	ld hl,BUF_15_014
041E28 01 0F 00 00 2682*  	ld bc,15
041E2C 11 2D 00 00 2683*  	ld de,45
041E30 DD 21 A3 02 2684*  	ld ix,675
       00          
041E35 CD DE BD 04 2685*  	call vdu_load_img
041E39 C9          2686*  	ret
041E3A             2687*  
041E3A             2688*  ld_15_015:
041E3A 21 00 40 04 2689*  	ld hl,F15_015
041E3E 22 63 BC 04 2690*  	ld (cur_filename),hl
041E42 11 8F C8 04 2691*  	ld de,filedata
041E46 01 00 00 01 2692*  	ld bc,65536
041E4A 3E 01       2693*  	ld a,mos_load
041E4C 5B CF       2694*  	RST.LIL 08h
041E4E 21 84 01 00 2695*  	ld hl,BUF_15_015
041E52 01 19 00 00 2696*  	ld bc,25
041E56 11 2D 00 00 2697*  	ld de,45
041E5A DD 21 65 04 2698*  	ld ix,1125
       00          
041E5F CD DE BD 04 2699*  	call vdu_load_img
041E63 C9          2700*  	ret
041E64             2701*  
041E64             2702*  ld_15_016:
041E64 21 14 40 04 2703*  	ld hl,F15_016
041E68 22 63 BC 04 2704*  	ld (cur_filename),hl
041E6C 11 8F C8 04 2705*  	ld de,filedata
041E70 01 00 00 01 2706*  	ld bc,65536
041E74 3E 01       2707*  	ld a,mos_load
041E76 5B CF       2708*  	RST.LIL 08h
041E78 21 85 01 00 2709*  	ld hl,BUF_15_016
041E7C 01 23 00 00 2710*  	ld bc,35
041E80 11 2D 00 00 2711*  	ld de,45
041E84 DD 21 27 06 2712*  	ld ix,1575
       00          
041E89 CD DE BD 04 2713*  	call vdu_load_img
041E8D C9          2714*  	ret
041E8E             2715*  
041E8E             2716*  ld_15_020:
041E8E 21 28 40 04 2717*  	ld hl,F15_020
041E92 22 63 BC 04 2718*  	ld (cur_filename),hl
041E96 11 8F C8 04 2719*  	ld de,filedata
041E9A 01 00 00 01 2720*  	ld bc,65536
041E9E 3E 01       2721*  	ld a,mos_load
041EA0 5B CF       2722*  	RST.LIL 08h
041EA2 21 86 01 00 2723*  	ld hl,BUF_15_020
041EA6 01 2E 00 00 2724*  	ld bc,46
041EAA 11 2D 00 00 2725*  	ld de,45
041EAE DD 21 16 08 2726*  	ld ix,2070
       00          
041EB3 CD DE BD 04 2727*  	call vdu_load_img
041EB7 C9          2728*  	ret
041EB8             2729*  
041EB8             2730*  ld_15_024:
041EB8 21 3C 40 04 2731*  	ld hl,F15_024
041EBC 22 63 BC 04 2732*  	ld (cur_filename),hl
041EC0 11 8F C8 04 2733*  	ld de,filedata
041EC4 01 00 00 01 2734*  	ld bc,65536
041EC8 3E 01       2735*  	ld a,mos_load
041ECA 5B CF       2736*  	RST.LIL 08h
041ECC 21 87 01 00 2737*  	ld hl,BUF_15_024
041ED0 01 2E 00 00 2738*  	ld bc,46
041ED4 11 40 00 00 2739*  	ld de,64
041ED8 DD 21 80 0B 2740*  	ld ix,2944
       00          
041EDD CD DE BD 04 2741*  	call vdu_load_img
041EE1 C9          2742*  	ret
041EE2             2743*  
041EE2             2744*  ld_15_025:
041EE2 21 50 40 04 2745*  	ld hl,F15_025
041EE6 22 63 BC 04 2746*  	ld (cur_filename),hl
041EEA 11 8F C8 04 2747*  	ld de,filedata
041EEE 01 00 00 01 2748*  	ld bc,65536
041EF2 3E 01       2749*  	ld a,mos_load
041EF4 5B CF       2750*  	RST.LIL 08h
041EF6 21 88 01 00 2751*  	ld hl,BUF_15_025
041EFA 01 1C 00 00 2752*  	ld bc,28
041EFE 11 40 00 00 2753*  	ld de,64
041F02 DD 21 00 07 2754*  	ld ix,1792
       00          
041F07 CD DE BD 04 2755*  	call vdu_load_img
041F0B C9          2756*  	ret
041F0C             2757*  
041F0C             2758*  ld_15_026:
041F0C 21 64 40 04 2759*  	ld hl,F15_026
041F10 22 63 BC 04 2760*  	ld (cur_filename),hl
041F14 11 8F C8 04 2761*  	ld de,filedata
041F18 01 00 00 01 2762*  	ld bc,65536
041F1C 3E 01       2763*  	ld a,mos_load
041F1E 5B CF       2764*  	RST.LIL 08h
041F20 21 89 01 00 2765*  	ld hl,BUF_15_026
041F24 01 09 00 00 2766*  	ld bc,9
041F28 11 40 00 00 2767*  	ld de,64
041F2C DD 21 40 02 2768*  	ld ix,576
       00          
041F31 CD DE BD 04 2769*  	call vdu_load_img
041F35 C9          2770*  	ret
041F36             2771*  
041F36             2772*  ld_15_027:
041F36 21 78 40 04 2773*  	ld hl,F15_027
041F3A 22 63 BC 04 2774*  	ld (cur_filename),hl
041F3E 11 8F C8 04 2775*  	ld de,filedata
041F42 01 00 00 01 2776*  	ld bc,65536
041F46 3E 01       2777*  	ld a,mos_load
041F48 5B CF       2778*  	RST.LIL 08h
041F4A 21 8A 01 00 2779*  	ld hl,BUF_15_027
041F4E 01 0A 00 00 2780*  	ld bc,10
041F52 11 3E 00 00 2781*  	ld de,62
041F56 DD 21 6C 02 2782*  	ld ix,620
       00          
041F5B CD DE BD 04 2783*  	call vdu_load_img
041F5F C9          2784*  	ret
041F60             2785*  
041F60             2786*  ld_15_028:
041F60 21 8C 40 04 2787*  	ld hl,F15_028
041F64 22 63 BC 04 2788*  	ld (cur_filename),hl
041F68 11 8F C8 04 2789*  	ld de,filedata
041F6C 01 00 00 01 2790*  	ld bc,65536
041F70 3E 01       2791*  	ld a,mos_load
041F72 5B CF       2792*  	RST.LIL 08h
041F74 21 8B 01 00 2793*  	ld hl,BUF_15_028
041F78 01 1C 00 00 2794*  	ld bc,28
041F7C 11 40 00 00 2795*  	ld de,64
041F80 DD 21 00 07 2796*  	ld ix,1792
       00          
041F85 CD DE BD 04 2797*  	call vdu_load_img
041F89 C9          2798*  	ret
041F8A             2799*  
041F8A             2800*  ld_15_029:
041F8A 21 A0 40 04 2801*  	ld hl,F15_029
041F8E 22 63 BC 04 2802*  	ld (cur_filename),hl
041F92 11 8F C8 04 2803*  	ld de,filedata
041F96 01 00 00 01 2804*  	ld bc,65536
041F9A 3E 01       2805*  	ld a,mos_load
041F9C 5B CF       2806*  	RST.LIL 08h
041F9E 21 8C 01 00 2807*  	ld hl,BUF_15_029
041FA2 01 2F 00 00 2808*  	ld bc,47
041FA6 11 40 00 00 2809*  	ld de,64
041FAA DD 21 C0 0B 2810*  	ld ix,3008
       00          
041FAF CD DE BD 04 2811*  	call vdu_load_img
041FB3 C9          2812*  	ret
041FB4             2813*  
041FB4             2814*  ld_15_032:
041FB4 21 B4 40 04 2815*  	ld hl,F15_032
041FB8 22 63 BC 04 2816*  	ld (cur_filename),hl
041FBC 11 8F C8 04 2817*  	ld de,filedata
041FC0 01 00 00 01 2818*  	ld bc,65536
041FC4 3E 01       2819*  	ld a,mos_load
041FC6 5B CF       2820*  	RST.LIL 08h
041FC8 21 8D 01 00 2821*  	ld hl,BUF_15_032
041FCC 01 41 00 00 2822*  	ld bc,65
041FD0 11 40 00 00 2823*  	ld de,64
041FD4 DD 21 40 10 2824*  	ld ix,4160
       00          
041FD9 CD DE BD 04 2825*  	call vdu_load_img
041FDD C9          2826*  	ret
041FDE             2827*  
041FDE             2828*  ld_15_035:
041FDE 21 C8 40 04 2829*  	ld hl,F15_035
041FE2 22 63 BC 04 2830*  	ld (cur_filename),hl
041FE6 11 8F C8 04 2831*  	ld de,filedata
041FEA 01 00 00 01 2832*  	ld bc,65536
041FEE 3E 01       2833*  	ld a,mos_load
041FF0 5B CF       2834*  	RST.LIL 08h
041FF2 21 8E 01 00 2835*  	ld hl,BUF_15_035
041FF6 01 3F 00 00 2836*  	ld bc,63
041FFA 11 6B 00 00 2837*  	ld de,107
041FFE DD 21 55 1A 2838*  	ld ix,6741
       00          
042003 CD DE BD 04 2839*  	call vdu_load_img
042007 C9          2840*  	ret
042008             2841*  
042008             2842*  ld_15_036:
042008 21 DC 40 04 2843*  	ld hl,F15_036
04200C 22 63 BC 04 2844*  	ld (cur_filename),hl
042010 11 8F C8 04 2845*  	ld de,filedata
042014 01 00 00 01 2846*  	ld bc,65536
042018 3E 01       2847*  	ld a,mos_load
04201A 5B CF       2848*  	RST.LIL 08h
04201C 21 8F 01 00 2849*  	ld hl,BUF_15_036
042020 01 16 00 00 2850*  	ld bc,22
042024 11 6B 00 00 2851*  	ld de,107
042028 DD 21 32 09 2852*  	ld ix,2354
       00          
04202D CD DE BD 04 2853*  	call vdu_load_img
042031 C9          2854*  	ret
042032             2855*  
042032             2856*  ld_15_037:
042032 21 F0 40 04 2857*  	ld hl,F15_037
042036 22 63 BC 04 2858*  	ld (cur_filename),hl
04203A 11 8F C8 04 2859*  	ld de,filedata
04203E 01 00 00 01 2860*  	ld bc,65536
042042 3E 01       2861*  	ld a,mos_load
042044 5B CF       2862*  	RST.LIL 08h
042046 21 90 01 00 2863*  	ld hl,BUF_15_037
04204A 01 15 00 00 2864*  	ld bc,21
04204E 11 69 00 00 2865*  	ld de,105
042052 DD 21 9D 08 2866*  	ld ix,2205
       00          
042057 CD DE BD 04 2867*  	call vdu_load_img
04205B C9          2868*  	ret
04205C             2869*  
04205C             2870*  ld_15_038:
04205C 21 04 41 04 2871*  	ld hl,F15_038
042060 22 63 BC 04 2872*  	ld (cur_filename),hl
042064 11 8F C8 04 2873*  	ld de,filedata
042068 01 00 00 01 2874*  	ld bc,65536
04206C 3E 01       2875*  	ld a,mos_load
04206E 5B CF       2876*  	RST.LIL 08h
042070 21 91 01 00 2877*  	ld hl,BUF_15_038
042074 01 3F 00 00 2878*  	ld bc,63
042078 11 6B 00 00 2879*  	ld de,107
04207C DD 21 55 1A 2880*  	ld ix,6741
       00          
042081 CD DE BD 04 2881*  	call vdu_load_img
042085 C9          2882*  	ret
042086             2883*  
042086             2884*  ld_15_040:
042086 21 18 41 04 2885*  	ld hl,F15_040
04208A 22 63 BC 04 2886*  	ld (cur_filename),hl
04208E 11 8F C8 04 2887*  	ld de,filedata
042092 01 00 00 01 2888*  	ld bc,65536
042096 3E 01       2889*  	ld a,mos_load
042098 5B CF       2890*  	RST.LIL 08h
04209A 21 92 01 00 2891*  	ld hl,BUF_15_040
04209E 01 6C 00 00 2892*  	ld bc,108
0420A2 11 6B 00 00 2893*  	ld de,107
0420A6 DD 21 24 2D 2894*  	ld ix,11556
       00          
0420AB CD DE BD 04 2895*  	call vdu_load_img
0420AF C9          2896*  	ret
0420B0             2897*  
0420B0             2898*  ld_15_042:
0420B0 21 2C 41 04 2899*  	ld hl,F15_042
0420B4 22 63 BC 04 2900*  	ld (cur_filename),hl
0420B8 11 8F C8 04 2901*  	ld de,filedata
0420BC 01 00 00 01 2902*  	ld bc,65536
0420C0 3E 01       2903*  	ld a,mos_load
0420C2 5B CF       2904*  	RST.LIL 08h
0420C4 21 93 01 00 2905*  	ld hl,BUF_15_042
0420C8 01 6A 00 00 2906*  	ld bc,106
0420CC 11 A0 00 00 2907*  	ld de,160
0420D0 DD 21 40 42 2908*  	ld ix,16960
       00          
0420D5 CD DE BD 04 2909*  	call vdu_load_img
0420D9 C9          2910*  	ret
0420DA             2911*  
0420DA             2912*  ld_15_043:
0420DA 21 40 41 04 2913*  	ld hl,F15_043
0420DE 22 63 BC 04 2914*  	ld (cur_filename),hl
0420E2 11 8F C8 04 2915*  	ld de,filedata
0420E6 01 00 00 01 2916*  	ld bc,65536
0420EA 3E 01       2917*  	ld a,mos_load
0420EC 5B CF       2918*  	RST.LIL 08h
0420EE 21 94 01 00 2919*  	ld hl,BUF_15_043
0420F2 01 6B 00 00 2920*  	ld bc,107
0420F6 11 A0 00 00 2921*  	ld de,160
0420FA DD 21 E0 42 2922*  	ld ix,17120
       00          
0420FF CD DE BD 04 2923*  	call vdu_load_img
042103 C9          2924*  	ret
042104             2925*  
042104             2926*  ld_15_044:
042104 21 54 41 04 2927*  	ld hl,F15_044
042108 22 63 BC 04 2928*  	ld (cur_filename),hl
04210C 11 8F C8 04 2929*  	ld de,filedata
042110 01 00 00 01 2930*  	ld bc,65536
042114 3E 01       2931*  	ld a,mos_load
042116 5B CF       2932*  	RST.LIL 08h
042118 21 95 01 00 2933*  	ld hl,BUF_15_044
04211C 01 40 01 00 2934*  	ld bc,320
042120 11 A0 00 00 2935*  	ld de,160
042124 DD 21 00 C8 2936*  	ld ix,51200
       00          
042129 CD DE BD 04 2937*  	call vdu_load_img
04212D C9          2938*  	ret
04212E             2939*  
04212E             2940*  ld_16_004:
04212E 21 68 41 04 2941*  	ld hl,F16_004
042132 22 63 BC 04 2942*  	ld (cur_filename),hl
042136 11 8F C8 04 2943*  	ld de,filedata
04213A 01 00 00 01 2944*  	ld bc,65536
04213E 3E 01       2945*  	ld a,mos_load
042140 5B CF       2946*  	RST.LIL 08h
042142 21 96 01 00 2947*  	ld hl,BUF_16_004
042146 01 24 00 00 2948*  	ld bc,36
04214A 11 23 00 00 2949*  	ld de,35
04214E DD 21 EC 04 2950*  	ld ix,1260
       00          
042153 CD DE BD 04 2951*  	call vdu_load_img
042157 C9          2952*  	ret
042158             2953*  
042158             2954*  ld_16_009:
042158 21 7C 41 04 2955*  	ld hl,F16_009
04215C 22 63 BC 04 2956*  	ld (cur_filename),hl
042160 11 8F C8 04 2957*  	ld de,filedata
042164 01 00 00 01 2958*  	ld bc,65536
042168 3E 01       2959*  	ld a,mos_load
04216A 5B CF       2960*  	RST.LIL 08h
04216C 21 97 01 00 2961*  	ld hl,BUF_16_009
042170 01 23 00 00 2962*  	ld bc,35
042174 11 2D 00 00 2963*  	ld de,45
042178 DD 21 27 06 2964*  	ld ix,1575
       00          
04217D CD DE BD 04 2965*  	call vdu_load_img
042181 C9          2966*  	ret
042182             2967*  
042182             2968*  ld_16_010:
042182 21 90 41 04 2969*  	ld hl,F16_010
042186 22 63 BC 04 2970*  	ld (cur_filename),hl
04218A 11 8F C8 04 2971*  	ld de,filedata
04218E 01 00 00 01 2972*  	ld bc,65536
042192 3E 01       2973*  	ld a,mos_load
042194 5B CF       2974*  	RST.LIL 08h
042196 21 98 01 00 2975*  	ld hl,BUF_16_010
04219A 01 19 00 00 2976*  	ld bc,25
04219E 11 2D 00 00 2977*  	ld de,45
0421A2 DD 21 65 04 2978*  	ld ix,1125
       00          
0421A7 CD DE BD 04 2979*  	call vdu_load_img
0421AB C9          2980*  	ret
0421AC             2981*  
0421AC             2982*  ld_16_011:
0421AC 21 A4 41 04 2983*  	ld hl,F16_011
0421B0 22 63 BC 04 2984*  	ld (cur_filename),hl
0421B4 11 8F C8 04 2985*  	ld de,filedata
0421B8 01 00 00 01 2986*  	ld bc,65536
0421BC 3E 01       2987*  	ld a,mos_load
0421BE 5B CF       2988*  	RST.LIL 08h
0421C0 21 99 01 00 2989*  	ld hl,BUF_16_011
0421C4 01 0F 00 00 2990*  	ld bc,15
0421C8 11 2D 00 00 2991*  	ld de,45
0421CC DD 21 A3 02 2992*  	ld ix,675
       00          
0421D1 CD DE BD 04 2993*  	call vdu_load_img
0421D5 C9          2994*  	ret
0421D6             2995*  
0421D6             2996*  ld_16_012:
0421D6 21 B8 41 04 2997*  	ld hl,F16_012
0421DA 22 63 BC 04 2998*  	ld (cur_filename),hl
0421DE 11 8F C8 04 2999*  	ld de,filedata
0421E2 01 00 00 01 3000*  	ld bc,65536
0421E6 3E 01       3001*  	ld a,mos_load
0421E8 5B CF       3002*  	RST.LIL 08h
0421EA 21 9A 01 00 3003*  	ld hl,BUF_16_012
0421EE 01 05 00 00 3004*  	ld bc,5
0421F2 11 2D 00 00 3005*  	ld de,45
0421F6 DD 21 E1 00 3006*  	ld ix,225
       00          
0421FB CD DE BD 04 3007*  	call vdu_load_img
0421FF C9          3008*  	ret
042200             3009*  
042200             3010*  ld_16_013:
042200 21 CC 41 04 3011*  	ld hl,F16_013
042204 22 63 BC 04 3012*  	ld (cur_filename),hl
042208 11 8F C8 04 3013*  	ld de,filedata
04220C 01 00 00 01 3014*  	ld bc,65536
042210 3E 01       3015*  	ld a,mos_load
042212 5B CF       3016*  	RST.LIL 08h
042214 21 9B 01 00 3017*  	ld hl,BUF_16_013
042218 01 05 00 00 3018*  	ld bc,5
04221C 11 2B 00 00 3019*  	ld de,43
042220 DD 21 D7 00 3020*  	ld ix,215
       00          
042225 CD DE BD 04 3021*  	call vdu_load_img
042229 C9          3022*  	ret
04222A             3023*  
04222A             3024*  ld_16_014:
04222A 21 E0 41 04 3025*  	ld hl,F16_014
04222E 22 63 BC 04 3026*  	ld (cur_filename),hl
042232 11 8F C8 04 3027*  	ld de,filedata
042236 01 00 00 01 3028*  	ld bc,65536
04223A 3E 01       3029*  	ld a,mos_load
04223C 5B CF       3030*  	RST.LIL 08h
04223E 21 9C 01 00 3031*  	ld hl,BUF_16_014
042242 01 0F 00 00 3032*  	ld bc,15
042246 11 2D 00 00 3033*  	ld de,45
04224A DD 21 A3 02 3034*  	ld ix,675
       00          
04224F CD DE BD 04 3035*  	call vdu_load_img
042253 C9          3036*  	ret
042254             3037*  
042254             3038*  ld_16_015:
042254 21 F4 41 04 3039*  	ld hl,F16_015
042258 22 63 BC 04 3040*  	ld (cur_filename),hl
04225C 11 8F C8 04 3041*  	ld de,filedata
042260 01 00 00 01 3042*  	ld bc,65536
042264 3E 01       3043*  	ld a,mos_load
042266 5B CF       3044*  	RST.LIL 08h
042268 21 9D 01 00 3045*  	ld hl,BUF_16_015
04226C 01 19 00 00 3046*  	ld bc,25
042270 11 2D 00 00 3047*  	ld de,45
042274 DD 21 65 04 3048*  	ld ix,1125
       00          
042279 CD DE BD 04 3049*  	call vdu_load_img
04227D C9          3050*  	ret
04227E             3051*  
04227E             3052*  ld_16_016:
04227E 21 08 42 04 3053*  	ld hl,F16_016
042282 22 63 BC 04 3054*  	ld (cur_filename),hl
042286 11 8F C8 04 3055*  	ld de,filedata
04228A 01 00 00 01 3056*  	ld bc,65536
04228E 3E 01       3057*  	ld a,mos_load
042290 5B CF       3058*  	RST.LIL 08h
042292 21 9E 01 00 3059*  	ld hl,BUF_16_016
042296 01 23 00 00 3060*  	ld bc,35
04229A 11 2D 00 00 3061*  	ld de,45
04229E DD 21 27 06 3062*  	ld ix,1575
       00          
0422A3 CD DE BD 04 3063*  	call vdu_load_img
0422A7 C9          3064*  	ret
0422A8             3065*  
0422A8             3066*  ld_16_020:
0422A8 21 1C 42 04 3067*  	ld hl,F16_020
0422AC 22 63 BC 04 3068*  	ld (cur_filename),hl
0422B0 11 8F C8 04 3069*  	ld de,filedata
0422B4 01 00 00 01 3070*  	ld bc,65536
0422B8 3E 01       3071*  	ld a,mos_load
0422BA 5B CF       3072*  	RST.LIL 08h
0422BC 21 9F 01 00 3073*  	ld hl,BUF_16_020
0422C0 01 2E 00 00 3074*  	ld bc,46
0422C4 11 2D 00 00 3075*  	ld de,45
0422C8 DD 21 16 08 3076*  	ld ix,2070
       00          
0422CD CD DE BD 04 3077*  	call vdu_load_img
0422D1 C9          3078*  	ret
0422D2             3079*  
0422D2             3080*  ld_16_024:
0422D2 21 30 42 04 3081*  	ld hl,F16_024
0422D6 22 63 BC 04 3082*  	ld (cur_filename),hl
0422DA 11 8F C8 04 3083*  	ld de,filedata
0422DE 01 00 00 01 3084*  	ld bc,65536
0422E2 3E 01       3085*  	ld a,mos_load
0422E4 5B CF       3086*  	RST.LIL 08h
0422E6 21 A0 01 00 3087*  	ld hl,BUF_16_024
0422EA 01 2E 00 00 3088*  	ld bc,46
0422EE 11 40 00 00 3089*  	ld de,64
0422F2 DD 21 80 0B 3090*  	ld ix,2944
       00          
0422F7 CD DE BD 04 3091*  	call vdu_load_img
0422FB C9          3092*  	ret
0422FC             3093*  
0422FC             3094*  ld_16_025:
0422FC 21 44 42 04 3095*  	ld hl,F16_025
042300 22 63 BC 04 3096*  	ld (cur_filename),hl
042304 11 8F C8 04 3097*  	ld de,filedata
042308 01 00 00 01 3098*  	ld bc,65536
04230C 3E 01       3099*  	ld a,mos_load
04230E 5B CF       3100*  	RST.LIL 08h
042310 21 A1 01 00 3101*  	ld hl,BUF_16_025
042314 01 1C 00 00 3102*  	ld bc,28
042318 11 40 00 00 3103*  	ld de,64
04231C DD 21 00 07 3104*  	ld ix,1792
       00          
042321 CD DE BD 04 3105*  	call vdu_load_img
042325 C9          3106*  	ret
042326             3107*  
042326             3108*  ld_16_026:
042326 21 58 42 04 3109*  	ld hl,F16_026
04232A 22 63 BC 04 3110*  	ld (cur_filename),hl
04232E 11 8F C8 04 3111*  	ld de,filedata
042332 01 00 00 01 3112*  	ld bc,65536
042336 3E 01       3113*  	ld a,mos_load
042338 5B CF       3114*  	RST.LIL 08h
04233A 21 A2 01 00 3115*  	ld hl,BUF_16_026
04233E 01 09 00 00 3116*  	ld bc,9
042342 11 40 00 00 3117*  	ld de,64
042346 DD 21 40 02 3118*  	ld ix,576
       00          
04234B CD DE BD 04 3119*  	call vdu_load_img
04234F C9          3120*  	ret
042350             3121*  
042350             3122*  ld_16_027:
042350 21 6C 42 04 3123*  	ld hl,F16_027
042354 22 63 BC 04 3124*  	ld (cur_filename),hl
042358 11 8F C8 04 3125*  	ld de,filedata
04235C 01 00 00 01 3126*  	ld bc,65536
042360 3E 01       3127*  	ld a,mos_load
042362 5B CF       3128*  	RST.LIL 08h
042364 21 A3 01 00 3129*  	ld hl,BUF_16_027
042368 01 0A 00 00 3130*  	ld bc,10
04236C 11 3E 00 00 3131*  	ld de,62
042370 DD 21 6C 02 3132*  	ld ix,620
       00          
042375 CD DE BD 04 3133*  	call vdu_load_img
042379 C9          3134*  	ret
04237A             3135*  
04237A             3136*  ld_16_028:
04237A 21 80 42 04 3137*  	ld hl,F16_028
04237E 22 63 BC 04 3138*  	ld (cur_filename),hl
042382 11 8F C8 04 3139*  	ld de,filedata
042386 01 00 00 01 3140*  	ld bc,65536
04238A 3E 01       3141*  	ld a,mos_load
04238C 5B CF       3142*  	RST.LIL 08h
04238E 21 A4 01 00 3143*  	ld hl,BUF_16_028
042392 01 1C 00 00 3144*  	ld bc,28
042396 11 40 00 00 3145*  	ld de,64
04239A DD 21 00 07 3146*  	ld ix,1792
       00          
04239F CD DE BD 04 3147*  	call vdu_load_img
0423A3 C9          3148*  	ret
0423A4             3149*  
0423A4             3150*  ld_16_029:
0423A4 21 94 42 04 3151*  	ld hl,F16_029
0423A8 22 63 BC 04 3152*  	ld (cur_filename),hl
0423AC 11 8F C8 04 3153*  	ld de,filedata
0423B0 01 00 00 01 3154*  	ld bc,65536
0423B4 3E 01       3155*  	ld a,mos_load
0423B6 5B CF       3156*  	RST.LIL 08h
0423B8 21 A5 01 00 3157*  	ld hl,BUF_16_029
0423BC 01 2F 00 00 3158*  	ld bc,47
0423C0 11 40 00 00 3159*  	ld de,64
0423C4 DD 21 C0 0B 3160*  	ld ix,3008
       00          
0423C9 CD DE BD 04 3161*  	call vdu_load_img
0423CD C9          3162*  	ret
0423CE             3163*  
0423CE             3164*  ld_16_032:
0423CE 21 A8 42 04 3165*  	ld hl,F16_032
0423D2 22 63 BC 04 3166*  	ld (cur_filename),hl
0423D6 11 8F C8 04 3167*  	ld de,filedata
0423DA 01 00 00 01 3168*  	ld bc,65536
0423DE 3E 01       3169*  	ld a,mos_load
0423E0 5B CF       3170*  	RST.LIL 08h
0423E2 21 A6 01 00 3171*  	ld hl,BUF_16_032
0423E6 01 41 00 00 3172*  	ld bc,65
0423EA 11 40 00 00 3173*  	ld de,64
0423EE DD 21 40 10 3174*  	ld ix,4160
       00          
0423F3 CD DE BD 04 3175*  	call vdu_load_img
0423F7 C9          3176*  	ret
0423F8             3177*  
0423F8             3178*  ld_16_035:
0423F8 21 BC 42 04 3179*  	ld hl,F16_035
0423FC 22 63 BC 04 3180*  	ld (cur_filename),hl
042400 11 8F C8 04 3181*  	ld de,filedata
042404 01 00 00 01 3182*  	ld bc,65536
042408 3E 01       3183*  	ld a,mos_load
04240A 5B CF       3184*  	RST.LIL 08h
04240C 21 A7 01 00 3185*  	ld hl,BUF_16_035
042410 01 3F 00 00 3186*  	ld bc,63
042414 11 6B 00 00 3187*  	ld de,107
042418 DD 21 55 1A 3188*  	ld ix,6741
       00          
04241D CD DE BD 04 3189*  	call vdu_load_img
042421 C9          3190*  	ret
042422             3191*  
042422             3192*  ld_16_036:
042422 21 D0 42 04 3193*  	ld hl,F16_036
042426 22 63 BC 04 3194*  	ld (cur_filename),hl
04242A 11 8F C8 04 3195*  	ld de,filedata
04242E 01 00 00 01 3196*  	ld bc,65536
042432 3E 01       3197*  	ld a,mos_load
042434 5B CF       3198*  	RST.LIL 08h
042436 21 A8 01 00 3199*  	ld hl,BUF_16_036
04243A 01 16 00 00 3200*  	ld bc,22
04243E 11 6B 00 00 3201*  	ld de,107
042442 DD 21 32 09 3202*  	ld ix,2354
       00          
042447 CD DE BD 04 3203*  	call vdu_load_img
04244B C9          3204*  	ret
04244C             3205*  
04244C             3206*  ld_16_037:
04244C 21 E4 42 04 3207*  	ld hl,F16_037
042450 22 63 BC 04 3208*  	ld (cur_filename),hl
042454 11 8F C8 04 3209*  	ld de,filedata
042458 01 00 00 01 3210*  	ld bc,65536
04245C 3E 01       3211*  	ld a,mos_load
04245E 5B CF       3212*  	RST.LIL 08h
042460 21 A9 01 00 3213*  	ld hl,BUF_16_037
042464 01 15 00 00 3214*  	ld bc,21
042468 11 69 00 00 3215*  	ld de,105
04246C DD 21 9D 08 3216*  	ld ix,2205
       00          
042471 CD DE BD 04 3217*  	call vdu_load_img
042475 C9          3218*  	ret
042476             3219*  
042476             3220*  ld_16_038:
042476 21 F8 42 04 3221*  	ld hl,F16_038
04247A 22 63 BC 04 3222*  	ld (cur_filename),hl
04247E 11 8F C8 04 3223*  	ld de,filedata
042482 01 00 00 01 3224*  	ld bc,65536
042486 3E 01       3225*  	ld a,mos_load
042488 5B CF       3226*  	RST.LIL 08h
04248A 21 AA 01 00 3227*  	ld hl,BUF_16_038
04248E 01 3F 00 00 3228*  	ld bc,63
042492 11 6B 00 00 3229*  	ld de,107
042496 DD 21 55 1A 3230*  	ld ix,6741
       00          
04249B CD DE BD 04 3231*  	call vdu_load_img
04249F C9          3232*  	ret
0424A0             3233*  
0424A0             3234*  ld_16_040:
0424A0 21 0C 43 04 3235*  	ld hl,F16_040
0424A4 22 63 BC 04 3236*  	ld (cur_filename),hl
0424A8 11 8F C8 04 3237*  	ld de,filedata
0424AC 01 00 00 01 3238*  	ld bc,65536
0424B0 3E 01       3239*  	ld a,mos_load
0424B2 5B CF       3240*  	RST.LIL 08h
0424B4 21 AB 01 00 3241*  	ld hl,BUF_16_040
0424B8 01 6C 00 00 3242*  	ld bc,108
0424BC 11 6B 00 00 3243*  	ld de,107
0424C0 DD 21 24 2D 3244*  	ld ix,11556
       00          
0424C5 CD DE BD 04 3245*  	call vdu_load_img
0424C9 C9          3246*  	ret
0424CA             3247*  
0424CA             3248*  ld_16_042:
0424CA 21 20 43 04 3249*  	ld hl,F16_042
0424CE 22 63 BC 04 3250*  	ld (cur_filename),hl
0424D2 11 8F C8 04 3251*  	ld de,filedata
0424D6 01 00 00 01 3252*  	ld bc,65536
0424DA 3E 01       3253*  	ld a,mos_load
0424DC 5B CF       3254*  	RST.LIL 08h
0424DE 21 AC 01 00 3255*  	ld hl,BUF_16_042
0424E2 01 6A 00 00 3256*  	ld bc,106
0424E6 11 A0 00 00 3257*  	ld de,160
0424EA DD 21 40 42 3258*  	ld ix,16960
       00          
0424EF CD DE BD 04 3259*  	call vdu_load_img
0424F3 C9          3260*  	ret
0424F4             3261*  
0424F4             3262*  ld_16_043:
0424F4 21 34 43 04 3263*  	ld hl,F16_043
0424F8 22 63 BC 04 3264*  	ld (cur_filename),hl
0424FC 11 8F C8 04 3265*  	ld de,filedata
042500 01 00 00 01 3266*  	ld bc,65536
042504 3E 01       3267*  	ld a,mos_load
042506 5B CF       3268*  	RST.LIL 08h
042508 21 AD 01 00 3269*  	ld hl,BUF_16_043
04250C 01 6B 00 00 3270*  	ld bc,107
042510 11 A0 00 00 3271*  	ld de,160
042514 DD 21 E0 42 3272*  	ld ix,17120
       00          
042519 CD DE BD 04 3273*  	call vdu_load_img
04251D C9          3274*  	ret
04251E             3275*  
04251E             3276*  ld_16_044:
04251E 21 48 43 04 3277*  	ld hl,F16_044
042522 22 63 BC 04 3278*  	ld (cur_filename),hl
042526 11 8F C8 04 3279*  	ld de,filedata
04252A 01 00 00 01 3280*  	ld bc,65536
04252E 3E 01       3281*  	ld a,mos_load
042530 5B CF       3282*  	RST.LIL 08h
042532 21 AE 01 00 3283*  	ld hl,BUF_16_044
042536 01 40 01 00 3284*  	ld bc,320
04253A 11 A0 00 00 3285*  	ld de,160
04253E DD 21 00 C8 3286*  	ld ix,51200
       00          
042543 CD DE BD 04 3287*  	call vdu_load_img
042547 C9          3288*  	ret
042548             3289*  
042548             3290*  ld_17_004:
042548 21 5C 43 04 3291*  	ld hl,F17_004
04254C 22 63 BC 04 3292*  	ld (cur_filename),hl
042550 11 8F C8 04 3293*  	ld de,filedata
042554 01 00 00 01 3294*  	ld bc,65536
042558 3E 01       3295*  	ld a,mos_load
04255A 5B CF       3296*  	RST.LIL 08h
04255C 21 AF 01 00 3297*  	ld hl,BUF_17_004
042560 01 24 00 00 3298*  	ld bc,36
042564 11 23 00 00 3299*  	ld de,35
042568 DD 21 EC 04 3300*  	ld ix,1260
       00          
04256D CD DE BD 04 3301*  	call vdu_load_img
042571 C9          3302*  	ret
042572             3303*  
042572             3304*  ld_17_009:
042572 21 70 43 04 3305*  	ld hl,F17_009
042576 22 63 BC 04 3306*  	ld (cur_filename),hl
04257A 11 8F C8 04 3307*  	ld de,filedata
04257E 01 00 00 01 3308*  	ld bc,65536
042582 3E 01       3309*  	ld a,mos_load
042584 5B CF       3310*  	RST.LIL 08h
042586 21 B0 01 00 3311*  	ld hl,BUF_17_009
04258A 01 23 00 00 3312*  	ld bc,35
04258E 11 2D 00 00 3313*  	ld de,45
042592 DD 21 27 06 3314*  	ld ix,1575
       00          
042597 CD DE BD 04 3315*  	call vdu_load_img
04259B C9          3316*  	ret
04259C             3317*  
04259C             3318*  ld_17_010:
04259C 21 84 43 04 3319*  	ld hl,F17_010
0425A0 22 63 BC 04 3320*  	ld (cur_filename),hl
0425A4 11 8F C8 04 3321*  	ld de,filedata
0425A8 01 00 00 01 3322*  	ld bc,65536
0425AC 3E 01       3323*  	ld a,mos_load
0425AE 5B CF       3324*  	RST.LIL 08h
0425B0 21 B1 01 00 3325*  	ld hl,BUF_17_010
0425B4 01 19 00 00 3326*  	ld bc,25
0425B8 11 2D 00 00 3327*  	ld de,45
0425BC DD 21 65 04 3328*  	ld ix,1125
       00          
0425C1 CD DE BD 04 3329*  	call vdu_load_img
0425C5 C9          3330*  	ret
0425C6             3331*  
0425C6             3332*  ld_17_011:
0425C6 21 98 43 04 3333*  	ld hl,F17_011
0425CA 22 63 BC 04 3334*  	ld (cur_filename),hl
0425CE 11 8F C8 04 3335*  	ld de,filedata
0425D2 01 00 00 01 3336*  	ld bc,65536
0425D6 3E 01       3337*  	ld a,mos_load
0425D8 5B CF       3338*  	RST.LIL 08h
0425DA 21 B2 01 00 3339*  	ld hl,BUF_17_011
0425DE 01 0F 00 00 3340*  	ld bc,15
0425E2 11 2D 00 00 3341*  	ld de,45
0425E6 DD 21 A3 02 3342*  	ld ix,675
       00          
0425EB CD DE BD 04 3343*  	call vdu_load_img
0425EF C9          3344*  	ret
0425F0             3345*  
0425F0             3346*  ld_17_012:
0425F0 21 AC 43 04 3347*  	ld hl,F17_012
0425F4 22 63 BC 04 3348*  	ld (cur_filename),hl
0425F8 11 8F C8 04 3349*  	ld de,filedata
0425FC 01 00 00 01 3350*  	ld bc,65536
042600 3E 01       3351*  	ld a,mos_load
042602 5B CF       3352*  	RST.LIL 08h
042604 21 B3 01 00 3353*  	ld hl,BUF_17_012
042608 01 05 00 00 3354*  	ld bc,5
04260C 11 2D 00 00 3355*  	ld de,45
042610 DD 21 E1 00 3356*  	ld ix,225
       00          
042615 CD DE BD 04 3357*  	call vdu_load_img
042619 C9          3358*  	ret
04261A             3359*  
04261A             3360*  ld_17_013:
04261A 21 C0 43 04 3361*  	ld hl,F17_013
04261E 22 63 BC 04 3362*  	ld (cur_filename),hl
042622 11 8F C8 04 3363*  	ld de,filedata
042626 01 00 00 01 3364*  	ld bc,65536
04262A 3E 01       3365*  	ld a,mos_load
04262C 5B CF       3366*  	RST.LIL 08h
04262E 21 B4 01 00 3367*  	ld hl,BUF_17_013
042632 01 05 00 00 3368*  	ld bc,5
042636 11 2B 00 00 3369*  	ld de,43
04263A DD 21 D7 00 3370*  	ld ix,215
       00          
04263F CD DE BD 04 3371*  	call vdu_load_img
042643 C9          3372*  	ret
042644             3373*  
042644             3374*  ld_17_014:
042644 21 D4 43 04 3375*  	ld hl,F17_014
042648 22 63 BC 04 3376*  	ld (cur_filename),hl
04264C 11 8F C8 04 3377*  	ld de,filedata
042650 01 00 00 01 3378*  	ld bc,65536
042654 3E 01       3379*  	ld a,mos_load
042656 5B CF       3380*  	RST.LIL 08h
042658 21 B5 01 00 3381*  	ld hl,BUF_17_014
04265C 01 0F 00 00 3382*  	ld bc,15
042660 11 2D 00 00 3383*  	ld de,45
042664 DD 21 A3 02 3384*  	ld ix,675
       00          
042669 CD DE BD 04 3385*  	call vdu_load_img
04266D C9          3386*  	ret
04266E             3387*  
04266E             3388*  ld_17_015:
04266E 21 E8 43 04 3389*  	ld hl,F17_015
042672 22 63 BC 04 3390*  	ld (cur_filename),hl
042676 11 8F C8 04 3391*  	ld de,filedata
04267A 01 00 00 01 3392*  	ld bc,65536
04267E 3E 01       3393*  	ld a,mos_load
042680 5B CF       3394*  	RST.LIL 08h
042682 21 B6 01 00 3395*  	ld hl,BUF_17_015
042686 01 19 00 00 3396*  	ld bc,25
04268A 11 2D 00 00 3397*  	ld de,45
04268E DD 21 65 04 3398*  	ld ix,1125
       00          
042693 CD DE BD 04 3399*  	call vdu_load_img
042697 C9          3400*  	ret
042698             3401*  
042698             3402*  ld_17_016:
042698 21 FC 43 04 3403*  	ld hl,F17_016
04269C 22 63 BC 04 3404*  	ld (cur_filename),hl
0426A0 11 8F C8 04 3405*  	ld de,filedata
0426A4 01 00 00 01 3406*  	ld bc,65536
0426A8 3E 01       3407*  	ld a,mos_load
0426AA 5B CF       3408*  	RST.LIL 08h
0426AC 21 B7 01 00 3409*  	ld hl,BUF_17_016
0426B0 01 23 00 00 3410*  	ld bc,35
0426B4 11 2D 00 00 3411*  	ld de,45
0426B8 DD 21 27 06 3412*  	ld ix,1575
       00          
0426BD CD DE BD 04 3413*  	call vdu_load_img
0426C1 C9          3414*  	ret
0426C2             3415*  
0426C2             3416*  ld_17_020:
0426C2 21 10 44 04 3417*  	ld hl,F17_020
0426C6 22 63 BC 04 3418*  	ld (cur_filename),hl
0426CA 11 8F C8 04 3419*  	ld de,filedata
0426CE 01 00 00 01 3420*  	ld bc,65536
0426D2 3E 01       3421*  	ld a,mos_load
0426D4 5B CF       3422*  	RST.LIL 08h
0426D6 21 B8 01 00 3423*  	ld hl,BUF_17_020
0426DA 01 2E 00 00 3424*  	ld bc,46
0426DE 11 2D 00 00 3425*  	ld de,45
0426E2 DD 21 16 08 3426*  	ld ix,2070
       00          
0426E7 CD DE BD 04 3427*  	call vdu_load_img
0426EB C9          3428*  	ret
0426EC             3429*  
0426EC             3430*  ld_17_024:
0426EC 21 24 44 04 3431*  	ld hl,F17_024
0426F0 22 63 BC 04 3432*  	ld (cur_filename),hl
0426F4 11 8F C8 04 3433*  	ld de,filedata
0426F8 01 00 00 01 3434*  	ld bc,65536
0426FC 3E 01       3435*  	ld a,mos_load
0426FE 5B CF       3436*  	RST.LIL 08h
042700 21 B9 01 00 3437*  	ld hl,BUF_17_024
042704 01 2E 00 00 3438*  	ld bc,46
042708 11 40 00 00 3439*  	ld de,64
04270C DD 21 80 0B 3440*  	ld ix,2944
       00          
042711 CD DE BD 04 3441*  	call vdu_load_img
042715 C9          3442*  	ret
042716             3443*  
042716             3444*  ld_17_025:
042716 21 38 44 04 3445*  	ld hl,F17_025
04271A 22 63 BC 04 3446*  	ld (cur_filename),hl
04271E 11 8F C8 04 3447*  	ld de,filedata
042722 01 00 00 01 3448*  	ld bc,65536
042726 3E 01       3449*  	ld a,mos_load
042728 5B CF       3450*  	RST.LIL 08h
04272A 21 BA 01 00 3451*  	ld hl,BUF_17_025
04272E 01 1C 00 00 3452*  	ld bc,28
042732 11 40 00 00 3453*  	ld de,64
042736 DD 21 00 07 3454*  	ld ix,1792
       00          
04273B CD DE BD 04 3455*  	call vdu_load_img
04273F C9          3456*  	ret
042740             3457*  
042740             3458*  ld_17_026:
042740 21 4C 44 04 3459*  	ld hl,F17_026
042744 22 63 BC 04 3460*  	ld (cur_filename),hl
042748 11 8F C8 04 3461*  	ld de,filedata
04274C 01 00 00 01 3462*  	ld bc,65536
042750 3E 01       3463*  	ld a,mos_load
042752 5B CF       3464*  	RST.LIL 08h
042754 21 BB 01 00 3465*  	ld hl,BUF_17_026
042758 01 09 00 00 3466*  	ld bc,9
04275C 11 40 00 00 3467*  	ld de,64
042760 DD 21 40 02 3468*  	ld ix,576
       00          
042765 CD DE BD 04 3469*  	call vdu_load_img
042769 C9          3470*  	ret
04276A             3471*  
04276A             3472*  ld_17_027:
04276A 21 60 44 04 3473*  	ld hl,F17_027
04276E 22 63 BC 04 3474*  	ld (cur_filename),hl
042772 11 8F C8 04 3475*  	ld de,filedata
042776 01 00 00 01 3476*  	ld bc,65536
04277A 3E 01       3477*  	ld a,mos_load
04277C 5B CF       3478*  	RST.LIL 08h
04277E 21 BC 01 00 3479*  	ld hl,BUF_17_027
042782 01 0A 00 00 3480*  	ld bc,10
042786 11 3E 00 00 3481*  	ld de,62
04278A DD 21 6C 02 3482*  	ld ix,620
       00          
04278F CD DE BD 04 3483*  	call vdu_load_img
042793 C9          3484*  	ret
042794             3485*  
042794             3486*  ld_17_028:
042794 21 74 44 04 3487*  	ld hl,F17_028
042798 22 63 BC 04 3488*  	ld (cur_filename),hl
04279C 11 8F C8 04 3489*  	ld de,filedata
0427A0 01 00 00 01 3490*  	ld bc,65536
0427A4 3E 01       3491*  	ld a,mos_load
0427A6 5B CF       3492*  	RST.LIL 08h
0427A8 21 BD 01 00 3493*  	ld hl,BUF_17_028
0427AC 01 1C 00 00 3494*  	ld bc,28
0427B0 11 40 00 00 3495*  	ld de,64
0427B4 DD 21 00 07 3496*  	ld ix,1792
       00          
0427B9 CD DE BD 04 3497*  	call vdu_load_img
0427BD C9          3498*  	ret
0427BE             3499*  
0427BE             3500*  ld_17_029:
0427BE 21 88 44 04 3501*  	ld hl,F17_029
0427C2 22 63 BC 04 3502*  	ld (cur_filename),hl
0427C6 11 8F C8 04 3503*  	ld de,filedata
0427CA 01 00 00 01 3504*  	ld bc,65536
0427CE 3E 01       3505*  	ld a,mos_load
0427D0 5B CF       3506*  	RST.LIL 08h
0427D2 21 BE 01 00 3507*  	ld hl,BUF_17_029
0427D6 01 2F 00 00 3508*  	ld bc,47
0427DA 11 40 00 00 3509*  	ld de,64
0427DE DD 21 C0 0B 3510*  	ld ix,3008
       00          
0427E3 CD DE BD 04 3511*  	call vdu_load_img
0427E7 C9          3512*  	ret
0427E8             3513*  
0427E8             3514*  ld_17_032:
0427E8 21 9C 44 04 3515*  	ld hl,F17_032
0427EC 22 63 BC 04 3516*  	ld (cur_filename),hl
0427F0 11 8F C8 04 3517*  	ld de,filedata
0427F4 01 00 00 01 3518*  	ld bc,65536
0427F8 3E 01       3519*  	ld a,mos_load
0427FA 5B CF       3520*  	RST.LIL 08h
0427FC 21 BF 01 00 3521*  	ld hl,BUF_17_032
042800 01 41 00 00 3522*  	ld bc,65
042804 11 40 00 00 3523*  	ld de,64
042808 DD 21 40 10 3524*  	ld ix,4160
       00          
04280D CD DE BD 04 3525*  	call vdu_load_img
042811 C9          3526*  	ret
042812             3527*  
042812             3528*  ld_17_035:
042812 21 B0 44 04 3529*  	ld hl,F17_035
042816 22 63 BC 04 3530*  	ld (cur_filename),hl
04281A 11 8F C8 04 3531*  	ld de,filedata
04281E 01 00 00 01 3532*  	ld bc,65536
042822 3E 01       3533*  	ld a,mos_load
042824 5B CF       3534*  	RST.LIL 08h
042826 21 C0 01 00 3535*  	ld hl,BUF_17_035
04282A 01 3F 00 00 3536*  	ld bc,63
04282E 11 6B 00 00 3537*  	ld de,107
042832 DD 21 55 1A 3538*  	ld ix,6741
       00          
042837 CD DE BD 04 3539*  	call vdu_load_img
04283B C9          3540*  	ret
04283C             3541*  
04283C             3542*  ld_17_036:
04283C 21 C4 44 04 3543*  	ld hl,F17_036
042840 22 63 BC 04 3544*  	ld (cur_filename),hl
042844 11 8F C8 04 3545*  	ld de,filedata
042848 01 00 00 01 3546*  	ld bc,65536
04284C 3E 01       3547*  	ld a,mos_load
04284E 5B CF       3548*  	RST.LIL 08h
042850 21 C1 01 00 3549*  	ld hl,BUF_17_036
042854 01 16 00 00 3550*  	ld bc,22
042858 11 6B 00 00 3551*  	ld de,107
04285C DD 21 32 09 3552*  	ld ix,2354
       00          
042861 CD DE BD 04 3553*  	call vdu_load_img
042865 C9          3554*  	ret
042866             3555*  
042866             3556*  ld_17_037:
042866 21 D8 44 04 3557*  	ld hl,F17_037
04286A 22 63 BC 04 3558*  	ld (cur_filename),hl
04286E 11 8F C8 04 3559*  	ld de,filedata
042872 01 00 00 01 3560*  	ld bc,65536
042876 3E 01       3561*  	ld a,mos_load
042878 5B CF       3562*  	RST.LIL 08h
04287A 21 C2 01 00 3563*  	ld hl,BUF_17_037
04287E 01 15 00 00 3564*  	ld bc,21
042882 11 69 00 00 3565*  	ld de,105
042886 DD 21 9D 08 3566*  	ld ix,2205
       00          
04288B CD DE BD 04 3567*  	call vdu_load_img
04288F C9          3568*  	ret
042890             3569*  
042890             3570*  ld_17_038:
042890 21 EC 44 04 3571*  	ld hl,F17_038
042894 22 63 BC 04 3572*  	ld (cur_filename),hl
042898 11 8F C8 04 3573*  	ld de,filedata
04289C 01 00 00 01 3574*  	ld bc,65536
0428A0 3E 01       3575*  	ld a,mos_load
0428A2 5B CF       3576*  	RST.LIL 08h
0428A4 21 C3 01 00 3577*  	ld hl,BUF_17_038
0428A8 01 3F 00 00 3578*  	ld bc,63
0428AC 11 6B 00 00 3579*  	ld de,107
0428B0 DD 21 55 1A 3580*  	ld ix,6741
       00          
0428B5 CD DE BD 04 3581*  	call vdu_load_img
0428B9 C9          3582*  	ret
0428BA             3583*  
0428BA             3584*  ld_17_040:
0428BA 21 00 45 04 3585*  	ld hl,F17_040
0428BE 22 63 BC 04 3586*  	ld (cur_filename),hl
0428C2 11 8F C8 04 3587*  	ld de,filedata
0428C6 01 00 00 01 3588*  	ld bc,65536
0428CA 3E 01       3589*  	ld a,mos_load
0428CC 5B CF       3590*  	RST.LIL 08h
0428CE 21 C4 01 00 3591*  	ld hl,BUF_17_040
0428D2 01 6C 00 00 3592*  	ld bc,108
0428D6 11 6B 00 00 3593*  	ld de,107
0428DA DD 21 24 2D 3594*  	ld ix,11556
       00          
0428DF CD DE BD 04 3595*  	call vdu_load_img
0428E3 C9          3596*  	ret
0428E4             3597*  
0428E4             3598*  ld_17_042:
0428E4 21 14 45 04 3599*  	ld hl,F17_042
0428E8 22 63 BC 04 3600*  	ld (cur_filename),hl
0428EC 11 8F C8 04 3601*  	ld de,filedata
0428F0 01 00 00 01 3602*  	ld bc,65536
0428F4 3E 01       3603*  	ld a,mos_load
0428F6 5B CF       3604*  	RST.LIL 08h
0428F8 21 C5 01 00 3605*  	ld hl,BUF_17_042
0428FC 01 6A 00 00 3606*  	ld bc,106
042900 11 A0 00 00 3607*  	ld de,160
042904 DD 21 40 42 3608*  	ld ix,16960
       00          
042909 CD DE BD 04 3609*  	call vdu_load_img
04290D C9          3610*  	ret
04290E             3611*  
04290E             3612*  ld_17_043:
04290E 21 28 45 04 3613*  	ld hl,F17_043
042912 22 63 BC 04 3614*  	ld (cur_filename),hl
042916 11 8F C8 04 3615*  	ld de,filedata
04291A 01 00 00 01 3616*  	ld bc,65536
04291E 3E 01       3617*  	ld a,mos_load
042920 5B CF       3618*  	RST.LIL 08h
042922 21 C6 01 00 3619*  	ld hl,BUF_17_043
042926 01 6B 00 00 3620*  	ld bc,107
04292A 11 A0 00 00 3621*  	ld de,160
04292E DD 21 E0 42 3622*  	ld ix,17120
       00          
042933 CD DE BD 04 3623*  	call vdu_load_img
042937 C9          3624*  	ret
042938             3625*  
042938             3626*  ld_17_044:
042938 21 3C 45 04 3627*  	ld hl,F17_044
04293C 22 63 BC 04 3628*  	ld (cur_filename),hl
042940 11 8F C8 04 3629*  	ld de,filedata
042944 01 00 00 01 3630*  	ld bc,65536
042948 3E 01       3631*  	ld a,mos_load
04294A 5B CF       3632*  	RST.LIL 08h
04294C 21 C7 01 00 3633*  	ld hl,BUF_17_044
042950 01 40 01 00 3634*  	ld bc,320
042954 11 A0 00 00 3635*  	ld de,160
042958 DD 21 00 C8 3636*  	ld ix,51200
       00          
04295D CD DE BD 04 3637*  	call vdu_load_img
042961 C9          3638*  	ret
042962             3639*  
042962             3640*  ld_57_004:
042962 21 50 45 04 3641*  	ld hl,F57_004
042966 22 63 BC 04 3642*  	ld (cur_filename),hl
04296A 11 8F C8 04 3643*  	ld de,filedata
04296E 01 00 00 01 3644*  	ld bc,65536
042972 3E 01       3645*  	ld a,mos_load
042974 5B CF       3646*  	RST.LIL 08h
042976 21 C8 01 00 3647*  	ld hl,BUF_57_004
04297A 01 24 00 00 3648*  	ld bc,36
04297E 11 23 00 00 3649*  	ld de,35
042982 DD 21 EC 04 3650*  	ld ix,1260
       00          
042987 CD DE BD 04 3651*  	call vdu_load_img
04298B C9          3652*  	ret
04298C             3653*  
04298C             3654*  ld_57_009:
04298C 21 64 45 04 3655*  	ld hl,F57_009
042990 22 63 BC 04 3656*  	ld (cur_filename),hl
042994 11 8F C8 04 3657*  	ld de,filedata
042998 01 00 00 01 3658*  	ld bc,65536
04299C 3E 01       3659*  	ld a,mos_load
04299E 5B CF       3660*  	RST.LIL 08h
0429A0 21 C9 01 00 3661*  	ld hl,BUF_57_009
0429A4 01 23 00 00 3662*  	ld bc,35
0429A8 11 2D 00 00 3663*  	ld de,45
0429AC DD 21 27 06 3664*  	ld ix,1575
       00          
0429B1 CD DE BD 04 3665*  	call vdu_load_img
0429B5 C9          3666*  	ret
0429B6             3667*  
0429B6             3668*  ld_57_010:
0429B6 21 78 45 04 3669*  	ld hl,F57_010
0429BA 22 63 BC 04 3670*  	ld (cur_filename),hl
0429BE 11 8F C8 04 3671*  	ld de,filedata
0429C2 01 00 00 01 3672*  	ld bc,65536
0429C6 3E 01       3673*  	ld a,mos_load
0429C8 5B CF       3674*  	RST.LIL 08h
0429CA 21 CA 01 00 3675*  	ld hl,BUF_57_010
0429CE 01 19 00 00 3676*  	ld bc,25
0429D2 11 2D 00 00 3677*  	ld de,45
0429D6 DD 21 65 04 3678*  	ld ix,1125
       00          
0429DB CD DE BD 04 3679*  	call vdu_load_img
0429DF C9          3680*  	ret
0429E0             3681*  
0429E0             3682*  ld_57_011:
0429E0 21 8C 45 04 3683*  	ld hl,F57_011
0429E4 22 63 BC 04 3684*  	ld (cur_filename),hl
0429E8 11 8F C8 04 3685*  	ld de,filedata
0429EC 01 00 00 01 3686*  	ld bc,65536
0429F0 3E 01       3687*  	ld a,mos_load
0429F2 5B CF       3688*  	RST.LIL 08h
0429F4 21 CB 01 00 3689*  	ld hl,BUF_57_011
0429F8 01 0F 00 00 3690*  	ld bc,15
0429FC 11 2D 00 00 3691*  	ld de,45
042A00 DD 21 A3 02 3692*  	ld ix,675
       00          
042A05 CD DE BD 04 3693*  	call vdu_load_img
042A09 C9          3694*  	ret
042A0A             3695*  
042A0A             3696*  ld_57_012:
042A0A 21 A0 45 04 3697*  	ld hl,F57_012
042A0E 22 63 BC 04 3698*  	ld (cur_filename),hl
042A12 11 8F C8 04 3699*  	ld de,filedata
042A16 01 00 00 01 3700*  	ld bc,65536
042A1A 3E 01       3701*  	ld a,mos_load
042A1C 5B CF       3702*  	RST.LIL 08h
042A1E 21 CC 01 00 3703*  	ld hl,BUF_57_012
042A22 01 05 00 00 3704*  	ld bc,5
042A26 11 2D 00 00 3705*  	ld de,45
042A2A DD 21 E1 00 3706*  	ld ix,225
       00          
042A2F CD DE BD 04 3707*  	call vdu_load_img
042A33 C9          3708*  	ret
042A34             3709*  
042A34             3710*  ld_57_013:
042A34 21 B4 45 04 3711*  	ld hl,F57_013
042A38 22 63 BC 04 3712*  	ld (cur_filename),hl
042A3C 11 8F C8 04 3713*  	ld de,filedata
042A40 01 00 00 01 3714*  	ld bc,65536
042A44 3E 01       3715*  	ld a,mos_load
042A46 5B CF       3716*  	RST.LIL 08h
042A48 21 CD 01 00 3717*  	ld hl,BUF_57_013
042A4C 01 05 00 00 3718*  	ld bc,5
042A50 11 2B 00 00 3719*  	ld de,43
042A54 DD 21 D7 00 3720*  	ld ix,215
       00          
042A59 CD DE BD 04 3721*  	call vdu_load_img
042A5D C9          3722*  	ret
042A5E             3723*  
042A5E             3724*  ld_57_014:
042A5E 21 C8 45 04 3725*  	ld hl,F57_014
042A62 22 63 BC 04 3726*  	ld (cur_filename),hl
042A66 11 8F C8 04 3727*  	ld de,filedata
042A6A 01 00 00 01 3728*  	ld bc,65536
042A6E 3E 01       3729*  	ld a,mos_load
042A70 5B CF       3730*  	RST.LIL 08h
042A72 21 CE 01 00 3731*  	ld hl,BUF_57_014
042A76 01 0F 00 00 3732*  	ld bc,15
042A7A 11 2D 00 00 3733*  	ld de,45
042A7E DD 21 A3 02 3734*  	ld ix,675
       00          
042A83 CD DE BD 04 3735*  	call vdu_load_img
042A87 C9          3736*  	ret
042A88             3737*  
042A88             3738*  ld_57_015:
042A88 21 DC 45 04 3739*  	ld hl,F57_015
042A8C 22 63 BC 04 3740*  	ld (cur_filename),hl
042A90 11 8F C8 04 3741*  	ld de,filedata
042A94 01 00 00 01 3742*  	ld bc,65536
042A98 3E 01       3743*  	ld a,mos_load
042A9A 5B CF       3744*  	RST.LIL 08h
042A9C 21 CF 01 00 3745*  	ld hl,BUF_57_015
042AA0 01 19 00 00 3746*  	ld bc,25
042AA4 11 2D 00 00 3747*  	ld de,45
042AA8 DD 21 65 04 3748*  	ld ix,1125
       00          
042AAD CD DE BD 04 3749*  	call vdu_load_img
042AB1 C9          3750*  	ret
042AB2             3751*  
042AB2             3752*  ld_57_016:
042AB2 21 F0 45 04 3753*  	ld hl,F57_016
042AB6 22 63 BC 04 3754*  	ld (cur_filename),hl
042ABA 11 8F C8 04 3755*  	ld de,filedata
042ABE 01 00 00 01 3756*  	ld bc,65536
042AC2 3E 01       3757*  	ld a,mos_load
042AC4 5B CF       3758*  	RST.LIL 08h
042AC6 21 D0 01 00 3759*  	ld hl,BUF_57_016
042ACA 01 23 00 00 3760*  	ld bc,35
042ACE 11 2D 00 00 3761*  	ld de,45
042AD2 DD 21 27 06 3762*  	ld ix,1575
       00          
042AD7 CD DE BD 04 3763*  	call vdu_load_img
042ADB C9          3764*  	ret
042ADC             3765*  
042ADC             3766*  ld_57_020:
042ADC 21 04 46 04 3767*  	ld hl,F57_020
042AE0 22 63 BC 04 3768*  	ld (cur_filename),hl
042AE4 11 8F C8 04 3769*  	ld de,filedata
042AE8 01 00 00 01 3770*  	ld bc,65536
042AEC 3E 01       3771*  	ld a,mos_load
042AEE 5B CF       3772*  	RST.LIL 08h
042AF0 21 D1 01 00 3773*  	ld hl,BUF_57_020
042AF4 01 2E 00 00 3774*  	ld bc,46
042AF8 11 2D 00 00 3775*  	ld de,45
042AFC DD 21 16 08 3776*  	ld ix,2070
       00          
042B01 CD DE BD 04 3777*  	call vdu_load_img
042B05 C9          3778*  	ret
042B06             3779*  
042B06             3780*  ld_57_024:
042B06 21 18 46 04 3781*  	ld hl,F57_024
042B0A 22 63 BC 04 3782*  	ld (cur_filename),hl
042B0E 11 8F C8 04 3783*  	ld de,filedata
042B12 01 00 00 01 3784*  	ld bc,65536
042B16 3E 01       3785*  	ld a,mos_load
042B18 5B CF       3786*  	RST.LIL 08h
042B1A 21 D2 01 00 3787*  	ld hl,BUF_57_024
042B1E 01 2E 00 00 3788*  	ld bc,46
042B22 11 40 00 00 3789*  	ld de,64
042B26 DD 21 80 0B 3790*  	ld ix,2944
       00          
042B2B CD DE BD 04 3791*  	call vdu_load_img
042B2F C9          3792*  	ret
042B30             3793*  
042B30             3794*  ld_57_025:
042B30 21 2C 46 04 3795*  	ld hl,F57_025
042B34 22 63 BC 04 3796*  	ld (cur_filename),hl
042B38 11 8F C8 04 3797*  	ld de,filedata
042B3C 01 00 00 01 3798*  	ld bc,65536
042B40 3E 01       3799*  	ld a,mos_load
042B42 5B CF       3800*  	RST.LIL 08h
042B44 21 D3 01 00 3801*  	ld hl,BUF_57_025
042B48 01 1C 00 00 3802*  	ld bc,28
042B4C 11 40 00 00 3803*  	ld de,64
042B50 DD 21 00 07 3804*  	ld ix,1792
       00          
042B55 CD DE BD 04 3805*  	call vdu_load_img
042B59 C9          3806*  	ret
042B5A             3807*  
042B5A             3808*  ld_57_026:
042B5A 21 40 46 04 3809*  	ld hl,F57_026
042B5E 22 63 BC 04 3810*  	ld (cur_filename),hl
042B62 11 8F C8 04 3811*  	ld de,filedata
042B66 01 00 00 01 3812*  	ld bc,65536
042B6A 3E 01       3813*  	ld a,mos_load
042B6C 5B CF       3814*  	RST.LIL 08h
042B6E 21 D4 01 00 3815*  	ld hl,BUF_57_026
042B72 01 09 00 00 3816*  	ld bc,9
042B76 11 40 00 00 3817*  	ld de,64
042B7A DD 21 40 02 3818*  	ld ix,576
       00          
042B7F CD DE BD 04 3819*  	call vdu_load_img
042B83 C9          3820*  	ret
042B84             3821*  
042B84             3822*  ld_57_027:
042B84 21 54 46 04 3823*  	ld hl,F57_027
042B88 22 63 BC 04 3824*  	ld (cur_filename),hl
042B8C 11 8F C8 04 3825*  	ld de,filedata
042B90 01 00 00 01 3826*  	ld bc,65536
042B94 3E 01       3827*  	ld a,mos_load
042B96 5B CF       3828*  	RST.LIL 08h
042B98 21 D5 01 00 3829*  	ld hl,BUF_57_027
042B9C 01 0A 00 00 3830*  	ld bc,10
042BA0 11 3E 00 00 3831*  	ld de,62
042BA4 DD 21 6C 02 3832*  	ld ix,620
       00          
042BA9 CD DE BD 04 3833*  	call vdu_load_img
042BAD C9          3834*  	ret
042BAE             3835*  
042BAE             3836*  ld_57_028:
042BAE 21 68 46 04 3837*  	ld hl,F57_028
042BB2 22 63 BC 04 3838*  	ld (cur_filename),hl
042BB6 11 8F C8 04 3839*  	ld de,filedata
042BBA 01 00 00 01 3840*  	ld bc,65536
042BBE 3E 01       3841*  	ld a,mos_load
042BC0 5B CF       3842*  	RST.LIL 08h
042BC2 21 D6 01 00 3843*  	ld hl,BUF_57_028
042BC6 01 1C 00 00 3844*  	ld bc,28
042BCA 11 40 00 00 3845*  	ld de,64
042BCE DD 21 00 07 3846*  	ld ix,1792
       00          
042BD3 CD DE BD 04 3847*  	call vdu_load_img
042BD7 C9          3848*  	ret
042BD8             3849*  
042BD8             3850*  ld_57_029:
042BD8 21 7C 46 04 3851*  	ld hl,F57_029
042BDC 22 63 BC 04 3852*  	ld (cur_filename),hl
042BE0 11 8F C8 04 3853*  	ld de,filedata
042BE4 01 00 00 01 3854*  	ld bc,65536
042BE8 3E 01       3855*  	ld a,mos_load
042BEA 5B CF       3856*  	RST.LIL 08h
042BEC 21 D7 01 00 3857*  	ld hl,BUF_57_029
042BF0 01 2F 00 00 3858*  	ld bc,47
042BF4 11 40 00 00 3859*  	ld de,64
042BF8 DD 21 C0 0B 3860*  	ld ix,3008
       00          
042BFD CD DE BD 04 3861*  	call vdu_load_img
042C01 C9          3862*  	ret
042C02             3863*  
042C02             3864*  ld_57_032:
042C02 21 90 46 04 3865*  	ld hl,F57_032
042C06 22 63 BC 04 3866*  	ld (cur_filename),hl
042C0A 11 8F C8 04 3867*  	ld de,filedata
042C0E 01 00 00 01 3868*  	ld bc,65536
042C12 3E 01       3869*  	ld a,mos_load
042C14 5B CF       3870*  	RST.LIL 08h
042C16 21 D8 01 00 3871*  	ld hl,BUF_57_032
042C1A 01 41 00 00 3872*  	ld bc,65
042C1E 11 40 00 00 3873*  	ld de,64
042C22 DD 21 40 10 3874*  	ld ix,4160
       00          
042C27 CD DE BD 04 3875*  	call vdu_load_img
042C2B C9          3876*  	ret
042C2C             3877*  
042C2C             3878*  ld_57_035:
042C2C 21 A4 46 04 3879*  	ld hl,F57_035
042C30 22 63 BC 04 3880*  	ld (cur_filename),hl
042C34 11 8F C8 04 3881*  	ld de,filedata
042C38 01 00 00 01 3882*  	ld bc,65536
042C3C 3E 01       3883*  	ld a,mos_load
042C3E 5B CF       3884*  	RST.LIL 08h
042C40 21 D9 01 00 3885*  	ld hl,BUF_57_035
042C44 01 3F 00 00 3886*  	ld bc,63
042C48 11 6B 00 00 3887*  	ld de,107
042C4C DD 21 55 1A 3888*  	ld ix,6741
       00          
042C51 CD DE BD 04 3889*  	call vdu_load_img
042C55 C9          3890*  	ret
042C56             3891*  
042C56             3892*  ld_57_036:
042C56 21 B8 46 04 3893*  	ld hl,F57_036
042C5A 22 63 BC 04 3894*  	ld (cur_filename),hl
042C5E 11 8F C8 04 3895*  	ld de,filedata
042C62 01 00 00 01 3896*  	ld bc,65536
042C66 3E 01       3897*  	ld a,mos_load
042C68 5B CF       3898*  	RST.LIL 08h
042C6A 21 DA 01 00 3899*  	ld hl,BUF_57_036
042C6E 01 16 00 00 3900*  	ld bc,22
042C72 11 6B 00 00 3901*  	ld de,107
042C76 DD 21 32 09 3902*  	ld ix,2354
       00          
042C7B CD DE BD 04 3903*  	call vdu_load_img
042C7F C9          3904*  	ret
042C80             3905*  
042C80             3906*  ld_57_037:
042C80 21 CC 46 04 3907*  	ld hl,F57_037
042C84 22 63 BC 04 3908*  	ld (cur_filename),hl
042C88 11 8F C8 04 3909*  	ld de,filedata
042C8C 01 00 00 01 3910*  	ld bc,65536
042C90 3E 01       3911*  	ld a,mos_load
042C92 5B CF       3912*  	RST.LIL 08h
042C94 21 DB 01 00 3913*  	ld hl,BUF_57_037
042C98 01 15 00 00 3914*  	ld bc,21
042C9C 11 69 00 00 3915*  	ld de,105
042CA0 DD 21 9D 08 3916*  	ld ix,2205
       00          
042CA5 CD DE BD 04 3917*  	call vdu_load_img
042CA9 C9          3918*  	ret
042CAA             3919*  
042CAA             3920*  ld_57_038:
042CAA 21 E0 46 04 3921*  	ld hl,F57_038
042CAE 22 63 BC 04 3922*  	ld (cur_filename),hl
042CB2 11 8F C8 04 3923*  	ld de,filedata
042CB6 01 00 00 01 3924*  	ld bc,65536
042CBA 3E 01       3925*  	ld a,mos_load
042CBC 5B CF       3926*  	RST.LIL 08h
042CBE 21 DC 01 00 3927*  	ld hl,BUF_57_038
042CC2 01 3F 00 00 3928*  	ld bc,63
042CC6 11 6B 00 00 3929*  	ld de,107
042CCA DD 21 55 1A 3930*  	ld ix,6741
       00          
042CCF CD DE BD 04 3931*  	call vdu_load_img
042CD3 C9          3932*  	ret
042CD4             3933*  
042CD4             3934*  ld_57_040:
042CD4 21 F4 46 04 3935*  	ld hl,F57_040
042CD8 22 63 BC 04 3936*  	ld (cur_filename),hl
042CDC 11 8F C8 04 3937*  	ld de,filedata
042CE0 01 00 00 01 3938*  	ld bc,65536
042CE4 3E 01       3939*  	ld a,mos_load
042CE6 5B CF       3940*  	RST.LIL 08h
042CE8 21 DD 01 00 3941*  	ld hl,BUF_57_040
042CEC 01 6C 00 00 3942*  	ld bc,108
042CF0 11 6B 00 00 3943*  	ld de,107
042CF4 DD 21 24 2D 3944*  	ld ix,11556
       00          
042CF9 CD DE BD 04 3945*  	call vdu_load_img
042CFD C9          3946*  	ret
042CFE             3947*  
042CFE             3948*  ld_57_042:
042CFE 21 08 47 04 3949*  	ld hl,F57_042
042D02 22 63 BC 04 3950*  	ld (cur_filename),hl
042D06 11 8F C8 04 3951*  	ld de,filedata
042D0A 01 00 00 01 3952*  	ld bc,65536
042D0E 3E 01       3953*  	ld a,mos_load
042D10 5B CF       3954*  	RST.LIL 08h
042D12 21 DE 01 00 3955*  	ld hl,BUF_57_042
042D16 01 6A 00 00 3956*  	ld bc,106
042D1A 11 A0 00 00 3957*  	ld de,160
042D1E DD 21 40 42 3958*  	ld ix,16960
       00          
042D23 CD DE BD 04 3959*  	call vdu_load_img
042D27 C9          3960*  	ret
042D28             3961*  
042D28             3962*  ld_57_043:
042D28 21 1C 47 04 3963*  	ld hl,F57_043
042D2C 22 63 BC 04 3964*  	ld (cur_filename),hl
042D30 11 8F C8 04 3965*  	ld de,filedata
042D34 01 00 00 01 3966*  	ld bc,65536
042D38 3E 01       3967*  	ld a,mos_load
042D3A 5B CF       3968*  	RST.LIL 08h
042D3C 21 DF 01 00 3969*  	ld hl,BUF_57_043
042D40 01 6B 00 00 3970*  	ld bc,107
042D44 11 A0 00 00 3971*  	ld de,160
042D48 DD 21 E0 42 3972*  	ld ix,17120
       00          
042D4D CD DE BD 04 3973*  	call vdu_load_img
042D51 C9          3974*  	ret
042D52             3975*  
042D52             3976*  ld_57_044:
042D52 21 30 47 04 3977*  	ld hl,F57_044
042D56 22 63 BC 04 3978*  	ld (cur_filename),hl
042D5A 11 8F C8 04 3979*  	ld de,filedata
042D5E 01 00 00 01 3980*  	ld bc,65536
042D62 3E 01       3981*  	ld a,mos_load
042D64 5B CF       3982*  	RST.LIL 08h
042D66 21 E0 01 00 3983*  	ld hl,BUF_57_044
042D6A 01 40 01 00 3984*  	ld bc,320
042D6E 11 A0 00 00 3985*  	ld de,160
042D72 DD 21 00 C8 3986*  	ld ix,51200
       00          
042D77 CD DE BD 04 3987*  	call vdu_load_img
042D7B C9          3988*  	ret
042D7C             3989*  
042D7C             3990*  ld_58_004:
042D7C 21 44 47 04 3991*  	ld hl,F58_004
042D80 22 63 BC 04 3992*  	ld (cur_filename),hl
042D84 11 8F C8 04 3993*  	ld de,filedata
042D88 01 00 00 01 3994*  	ld bc,65536
042D8C 3E 01       3995*  	ld a,mos_load
042D8E 5B CF       3996*  	RST.LIL 08h
042D90 21 E1 01 00 3997*  	ld hl,BUF_58_004
042D94 01 24 00 00 3998*  	ld bc,36
042D98 11 23 00 00 3999*  	ld de,35
042D9C DD 21 EC 04 4000*  	ld ix,1260
       00          
042DA1 CD DE BD 04 4001*  	call vdu_load_img
042DA5 C9          4002*  	ret
042DA6             4003*  
042DA6             4004*  ld_58_009:
042DA6 21 58 47 04 4005*  	ld hl,F58_009
042DAA 22 63 BC 04 4006*  	ld (cur_filename),hl
042DAE 11 8F C8 04 4007*  	ld de,filedata
042DB2 01 00 00 01 4008*  	ld bc,65536
042DB6 3E 01       4009*  	ld a,mos_load
042DB8 5B CF       4010*  	RST.LIL 08h
042DBA 21 E2 01 00 4011*  	ld hl,BUF_58_009
042DBE 01 23 00 00 4012*  	ld bc,35
042DC2 11 2D 00 00 4013*  	ld de,45
042DC6 DD 21 27 06 4014*  	ld ix,1575
       00          
042DCB CD DE BD 04 4015*  	call vdu_load_img
042DCF C9          4016*  	ret
042DD0             4017*  
042DD0             4018*  ld_58_010:
042DD0 21 6C 47 04 4019*  	ld hl,F58_010
042DD4 22 63 BC 04 4020*  	ld (cur_filename),hl
042DD8 11 8F C8 04 4021*  	ld de,filedata
042DDC 01 00 00 01 4022*  	ld bc,65536
042DE0 3E 01       4023*  	ld a,mos_load
042DE2 5B CF       4024*  	RST.LIL 08h
042DE4 21 E3 01 00 4025*  	ld hl,BUF_58_010
042DE8 01 19 00 00 4026*  	ld bc,25
042DEC 11 2D 00 00 4027*  	ld de,45
042DF0 DD 21 65 04 4028*  	ld ix,1125
       00          
042DF5 CD DE BD 04 4029*  	call vdu_load_img
042DF9 C9          4030*  	ret
042DFA             4031*  
042DFA             4032*  ld_58_011:
042DFA 21 80 47 04 4033*  	ld hl,F58_011
042DFE 22 63 BC 04 4034*  	ld (cur_filename),hl
042E02 11 8F C8 04 4035*  	ld de,filedata
042E06 01 00 00 01 4036*  	ld bc,65536
042E0A 3E 01       4037*  	ld a,mos_load
042E0C 5B CF       4038*  	RST.LIL 08h
042E0E 21 E4 01 00 4039*  	ld hl,BUF_58_011
042E12 01 0F 00 00 4040*  	ld bc,15
042E16 11 2D 00 00 4041*  	ld de,45
042E1A DD 21 A3 02 4042*  	ld ix,675
       00          
042E1F CD DE BD 04 4043*  	call vdu_load_img
042E23 C9          4044*  	ret
042E24             4045*  
042E24             4046*  ld_58_012:
042E24 21 94 47 04 4047*  	ld hl,F58_012
042E28 22 63 BC 04 4048*  	ld (cur_filename),hl
042E2C 11 8F C8 04 4049*  	ld de,filedata
042E30 01 00 00 01 4050*  	ld bc,65536
042E34 3E 01       4051*  	ld a,mos_load
042E36 5B CF       4052*  	RST.LIL 08h
042E38 21 E5 01 00 4053*  	ld hl,BUF_58_012
042E3C 01 05 00 00 4054*  	ld bc,5
042E40 11 2D 00 00 4055*  	ld de,45
042E44 DD 21 E1 00 4056*  	ld ix,225
       00          
042E49 CD DE BD 04 4057*  	call vdu_load_img
042E4D C9          4058*  	ret
042E4E             4059*  
042E4E             4060*  ld_58_013:
042E4E 21 A8 47 04 4061*  	ld hl,F58_013
042E52 22 63 BC 04 4062*  	ld (cur_filename),hl
042E56 11 8F C8 04 4063*  	ld de,filedata
042E5A 01 00 00 01 4064*  	ld bc,65536
042E5E 3E 01       4065*  	ld a,mos_load
042E60 5B CF       4066*  	RST.LIL 08h
042E62 21 E6 01 00 4067*  	ld hl,BUF_58_013
042E66 01 05 00 00 4068*  	ld bc,5
042E6A 11 2B 00 00 4069*  	ld de,43
042E6E DD 21 D7 00 4070*  	ld ix,215
       00          
042E73 CD DE BD 04 4071*  	call vdu_load_img
042E77 C9          4072*  	ret
042E78             4073*  
042E78             4074*  ld_58_014:
042E78 21 BC 47 04 4075*  	ld hl,F58_014
042E7C 22 63 BC 04 4076*  	ld (cur_filename),hl
042E80 11 8F C8 04 4077*  	ld de,filedata
042E84 01 00 00 01 4078*  	ld bc,65536
042E88 3E 01       4079*  	ld a,mos_load
042E8A 5B CF       4080*  	RST.LIL 08h
042E8C 21 E7 01 00 4081*  	ld hl,BUF_58_014
042E90 01 0F 00 00 4082*  	ld bc,15
042E94 11 2D 00 00 4083*  	ld de,45
042E98 DD 21 A3 02 4084*  	ld ix,675
       00          
042E9D CD DE BD 04 4085*  	call vdu_load_img
042EA1 C9          4086*  	ret
042EA2             4087*  
042EA2             4088*  ld_58_015:
042EA2 21 D0 47 04 4089*  	ld hl,F58_015
042EA6 22 63 BC 04 4090*  	ld (cur_filename),hl
042EAA 11 8F C8 04 4091*  	ld de,filedata
042EAE 01 00 00 01 4092*  	ld bc,65536
042EB2 3E 01       4093*  	ld a,mos_load
042EB4 5B CF       4094*  	RST.LIL 08h
042EB6 21 E8 01 00 4095*  	ld hl,BUF_58_015
042EBA 01 19 00 00 4096*  	ld bc,25
042EBE 11 2D 00 00 4097*  	ld de,45
042EC2 DD 21 65 04 4098*  	ld ix,1125
       00          
042EC7 CD DE BD 04 4099*  	call vdu_load_img
042ECB C9          4100*  	ret
042ECC             4101*  
042ECC             4102*  ld_58_016:
042ECC 21 E4 47 04 4103*  	ld hl,F58_016
042ED0 22 63 BC 04 4104*  	ld (cur_filename),hl
042ED4 11 8F C8 04 4105*  	ld de,filedata
042ED8 01 00 00 01 4106*  	ld bc,65536
042EDC 3E 01       4107*  	ld a,mos_load
042EDE 5B CF       4108*  	RST.LIL 08h
042EE0 21 E9 01 00 4109*  	ld hl,BUF_58_016
042EE4 01 23 00 00 4110*  	ld bc,35
042EE8 11 2D 00 00 4111*  	ld de,45
042EEC DD 21 27 06 4112*  	ld ix,1575
       00          
042EF1 CD DE BD 04 4113*  	call vdu_load_img
042EF5 C9          4114*  	ret
042EF6             4115*  
042EF6             4116*  ld_58_020:
042EF6 21 F8 47 04 4117*  	ld hl,F58_020
042EFA 22 63 BC 04 4118*  	ld (cur_filename),hl
042EFE 11 8F C8 04 4119*  	ld de,filedata
042F02 01 00 00 01 4120*  	ld bc,65536
042F06 3E 01       4121*  	ld a,mos_load
042F08 5B CF       4122*  	RST.LIL 08h
042F0A 21 EA 01 00 4123*  	ld hl,BUF_58_020
042F0E 01 2E 00 00 4124*  	ld bc,46
042F12 11 2D 00 00 4125*  	ld de,45
042F16 DD 21 16 08 4126*  	ld ix,2070
       00          
042F1B CD DE BD 04 4127*  	call vdu_load_img
042F1F C9          4128*  	ret
042F20             4129*  
042F20             4130*  ld_58_024:
042F20 21 0C 48 04 4131*  	ld hl,F58_024
042F24 22 63 BC 04 4132*  	ld (cur_filename),hl
042F28 11 8F C8 04 4133*  	ld de,filedata
042F2C 01 00 00 01 4134*  	ld bc,65536
042F30 3E 01       4135*  	ld a,mos_load
042F32 5B CF       4136*  	RST.LIL 08h
042F34 21 EB 01 00 4137*  	ld hl,BUF_58_024
042F38 01 2E 00 00 4138*  	ld bc,46
042F3C 11 40 00 00 4139*  	ld de,64
042F40 DD 21 80 0B 4140*  	ld ix,2944
       00          
042F45 CD DE BD 04 4141*  	call vdu_load_img
042F49 C9          4142*  	ret
042F4A             4143*  
042F4A             4144*  ld_58_025:
042F4A 21 20 48 04 4145*  	ld hl,F58_025
042F4E 22 63 BC 04 4146*  	ld (cur_filename),hl
042F52 11 8F C8 04 4147*  	ld de,filedata
042F56 01 00 00 01 4148*  	ld bc,65536
042F5A 3E 01       4149*  	ld a,mos_load
042F5C 5B CF       4150*  	RST.LIL 08h
042F5E 21 EC 01 00 4151*  	ld hl,BUF_58_025
042F62 01 1C 00 00 4152*  	ld bc,28
042F66 11 40 00 00 4153*  	ld de,64
042F6A DD 21 00 07 4154*  	ld ix,1792
       00          
042F6F CD DE BD 04 4155*  	call vdu_load_img
042F73 C9          4156*  	ret
042F74             4157*  
042F74             4158*  ld_58_026:
042F74 21 34 48 04 4159*  	ld hl,F58_026
042F78 22 63 BC 04 4160*  	ld (cur_filename),hl
042F7C 11 8F C8 04 4161*  	ld de,filedata
042F80 01 00 00 01 4162*  	ld bc,65536
042F84 3E 01       4163*  	ld a,mos_load
042F86 5B CF       4164*  	RST.LIL 08h
042F88 21 ED 01 00 4165*  	ld hl,BUF_58_026
042F8C 01 09 00 00 4166*  	ld bc,9
042F90 11 40 00 00 4167*  	ld de,64
042F94 DD 21 40 02 4168*  	ld ix,576
       00          
042F99 CD DE BD 04 4169*  	call vdu_load_img
042F9D C9          4170*  	ret
042F9E             4171*  
042F9E             4172*  ld_58_027:
042F9E 21 48 48 04 4173*  	ld hl,F58_027
042FA2 22 63 BC 04 4174*  	ld (cur_filename),hl
042FA6 11 8F C8 04 4175*  	ld de,filedata
042FAA 01 00 00 01 4176*  	ld bc,65536
042FAE 3E 01       4177*  	ld a,mos_load
042FB0 5B CF       4178*  	RST.LIL 08h
042FB2 21 EE 01 00 4179*  	ld hl,BUF_58_027
042FB6 01 0A 00 00 4180*  	ld bc,10
042FBA 11 3E 00 00 4181*  	ld de,62
042FBE DD 21 6C 02 4182*  	ld ix,620
       00          
042FC3 CD DE BD 04 4183*  	call vdu_load_img
042FC7 C9          4184*  	ret
042FC8             4185*  
042FC8             4186*  ld_58_028:
042FC8 21 5C 48 04 4187*  	ld hl,F58_028
042FCC 22 63 BC 04 4188*  	ld (cur_filename),hl
042FD0 11 8F C8 04 4189*  	ld de,filedata
042FD4 01 00 00 01 4190*  	ld bc,65536
042FD8 3E 01       4191*  	ld a,mos_load
042FDA 5B CF       4192*  	RST.LIL 08h
042FDC 21 EF 01 00 4193*  	ld hl,BUF_58_028
042FE0 01 1C 00 00 4194*  	ld bc,28
042FE4 11 40 00 00 4195*  	ld de,64
042FE8 DD 21 00 07 4196*  	ld ix,1792
       00          
042FED CD DE BD 04 4197*  	call vdu_load_img
042FF1 C9          4198*  	ret
042FF2             4199*  
042FF2             4200*  ld_58_029:
042FF2 21 70 48 04 4201*  	ld hl,F58_029
042FF6 22 63 BC 04 4202*  	ld (cur_filename),hl
042FFA 11 8F C8 04 4203*  	ld de,filedata
042FFE 01 00 00 01 4204*  	ld bc,65536
043002 3E 01       4205*  	ld a,mos_load
043004 5B CF       4206*  	RST.LIL 08h
043006 21 F0 01 00 4207*  	ld hl,BUF_58_029
04300A 01 2F 00 00 4208*  	ld bc,47
04300E 11 40 00 00 4209*  	ld de,64
043012 DD 21 C0 0B 4210*  	ld ix,3008
       00          
043017 CD DE BD 04 4211*  	call vdu_load_img
04301B C9          4212*  	ret
04301C             4213*  
04301C             4214*  ld_58_032:
04301C 21 84 48 04 4215*  	ld hl,F58_032
043020 22 63 BC 04 4216*  	ld (cur_filename),hl
043024 11 8F C8 04 4217*  	ld de,filedata
043028 01 00 00 01 4218*  	ld bc,65536
04302C 3E 01       4219*  	ld a,mos_load
04302E 5B CF       4220*  	RST.LIL 08h
043030 21 F1 01 00 4221*  	ld hl,BUF_58_032
043034 01 41 00 00 4222*  	ld bc,65
043038 11 40 00 00 4223*  	ld de,64
04303C DD 21 40 10 4224*  	ld ix,4160
       00          
043041 CD DE BD 04 4225*  	call vdu_load_img
043045 C9          4226*  	ret
043046             4227*  
043046             4228*  ld_58_035:
043046 21 98 48 04 4229*  	ld hl,F58_035
04304A 22 63 BC 04 4230*  	ld (cur_filename),hl
04304E 11 8F C8 04 4231*  	ld de,filedata
043052 01 00 00 01 4232*  	ld bc,65536
043056 3E 01       4233*  	ld a,mos_load
043058 5B CF       4234*  	RST.LIL 08h
04305A 21 F2 01 00 4235*  	ld hl,BUF_58_035
04305E 01 3F 00 00 4236*  	ld bc,63
043062 11 6B 00 00 4237*  	ld de,107
043066 DD 21 55 1A 4238*  	ld ix,6741
       00          
04306B CD DE BD 04 4239*  	call vdu_load_img
04306F C9          4240*  	ret
043070             4241*  
043070             4242*  ld_58_036:
043070 21 AC 48 04 4243*  	ld hl,F58_036
043074 22 63 BC 04 4244*  	ld (cur_filename),hl
043078 11 8F C8 04 4245*  	ld de,filedata
04307C 01 00 00 01 4246*  	ld bc,65536
043080 3E 01       4247*  	ld a,mos_load
043082 5B CF       4248*  	RST.LIL 08h
043084 21 F3 01 00 4249*  	ld hl,BUF_58_036
043088 01 16 00 00 4250*  	ld bc,22
04308C 11 6B 00 00 4251*  	ld de,107
043090 DD 21 32 09 4252*  	ld ix,2354
       00          
043095 CD DE BD 04 4253*  	call vdu_load_img
043099 C9          4254*  	ret
04309A             4255*  
04309A             4256*  ld_58_037:
04309A 21 C0 48 04 4257*  	ld hl,F58_037
04309E 22 63 BC 04 4258*  	ld (cur_filename),hl
0430A2 11 8F C8 04 4259*  	ld de,filedata
0430A6 01 00 00 01 4260*  	ld bc,65536
0430AA 3E 01       4261*  	ld a,mos_load
0430AC 5B CF       4262*  	RST.LIL 08h
0430AE 21 F4 01 00 4263*  	ld hl,BUF_58_037
0430B2 01 15 00 00 4264*  	ld bc,21
0430B6 11 69 00 00 4265*  	ld de,105
0430BA DD 21 9D 08 4266*  	ld ix,2205
       00          
0430BF CD DE BD 04 4267*  	call vdu_load_img
0430C3 C9          4268*  	ret
0430C4             4269*  
0430C4             4270*  ld_58_038:
0430C4 21 D4 48 04 4271*  	ld hl,F58_038
0430C8 22 63 BC 04 4272*  	ld (cur_filename),hl
0430CC 11 8F C8 04 4273*  	ld de,filedata
0430D0 01 00 00 01 4274*  	ld bc,65536
0430D4 3E 01       4275*  	ld a,mos_load
0430D6 5B CF       4276*  	RST.LIL 08h
0430D8 21 F5 01 00 4277*  	ld hl,BUF_58_038
0430DC 01 3F 00 00 4278*  	ld bc,63
0430E0 11 6B 00 00 4279*  	ld de,107
0430E4 DD 21 55 1A 4280*  	ld ix,6741
       00          
0430E9 CD DE BD 04 4281*  	call vdu_load_img
0430ED C9          4282*  	ret
0430EE             4283*  
0430EE             4284*  ld_58_040:
0430EE 21 E8 48 04 4285*  	ld hl,F58_040
0430F2 22 63 BC 04 4286*  	ld (cur_filename),hl
0430F6 11 8F C8 04 4287*  	ld de,filedata
0430FA 01 00 00 01 4288*  	ld bc,65536
0430FE 3E 01       4289*  	ld a,mos_load
043100 5B CF       4290*  	RST.LIL 08h
043102 21 F6 01 00 4291*  	ld hl,BUF_58_040
043106 01 6C 00 00 4292*  	ld bc,108
04310A 11 6B 00 00 4293*  	ld de,107
04310E DD 21 24 2D 4294*  	ld ix,11556
       00          
043113 CD DE BD 04 4295*  	call vdu_load_img
043117 C9          4296*  	ret
043118             4297*  
043118             4298*  ld_58_042:
043118 21 FC 48 04 4299*  	ld hl,F58_042
04311C 22 63 BC 04 4300*  	ld (cur_filename),hl
043120 11 8F C8 04 4301*  	ld de,filedata
043124 01 00 00 01 4302*  	ld bc,65536
043128 3E 01       4303*  	ld a,mos_load
04312A 5B CF       4304*  	RST.LIL 08h
04312C 21 F7 01 00 4305*  	ld hl,BUF_58_042
043130 01 6A 00 00 4306*  	ld bc,106
043134 11 A0 00 00 4307*  	ld de,160
043138 DD 21 40 42 4308*  	ld ix,16960
       00          
04313D CD DE BD 04 4309*  	call vdu_load_img
043141 C9          4310*  	ret
043142             4311*  
043142             4312*  ld_58_043:
043142 21 10 49 04 4313*  	ld hl,F58_043
043146 22 63 BC 04 4314*  	ld (cur_filename),hl
04314A 11 8F C8 04 4315*  	ld de,filedata
04314E 01 00 00 01 4316*  	ld bc,65536
043152 3E 01       4317*  	ld a,mos_load
043154 5B CF       4318*  	RST.LIL 08h
043156 21 F8 01 00 4319*  	ld hl,BUF_58_043
04315A 01 6B 00 00 4320*  	ld bc,107
04315E 11 A0 00 00 4321*  	ld de,160
043162 DD 21 E0 42 4322*  	ld ix,17120
       00          
043167 CD DE BD 04 4323*  	call vdu_load_img
04316B C9          4324*  	ret
04316C             4325*  
04316C             4326*  ld_58_044:
04316C 21 24 49 04 4327*  	ld hl,F58_044
043170 22 63 BC 04 4328*  	ld (cur_filename),hl
043174 11 8F C8 04 4329*  	ld de,filedata
043178 01 00 00 01 4330*  	ld bc,65536
04317C 3E 01       4331*  	ld a,mos_load
04317E 5B CF       4332*  	RST.LIL 08h
043180 21 F9 01 00 4333*  	ld hl,BUF_58_044
043184 01 40 01 00 4334*  	ld bc,320
043188 11 A0 00 00 4335*  	ld de,160
04318C DD 21 00 C8 4336*  	ld ix,51200
       00          
043191 CD DE BD 04 4337*  	call vdu_load_img
043195 C9          4338*  	ret
043196             4339*  
043196             4340*  ld_59_004:
043196 21 38 49 04 4341*  	ld hl,F59_004
04319A 22 63 BC 04 4342*  	ld (cur_filename),hl
04319E 11 8F C8 04 4343*  	ld de,filedata
0431A2 01 00 00 01 4344*  	ld bc,65536
0431A6 3E 01       4345*  	ld a,mos_load
0431A8 5B CF       4346*  	RST.LIL 08h
0431AA 21 FA 01 00 4347*  	ld hl,BUF_59_004
0431AE 01 24 00 00 4348*  	ld bc,36
0431B2 11 23 00 00 4349*  	ld de,35
0431B6 DD 21 EC 04 4350*  	ld ix,1260
       00          
0431BB CD DE BD 04 4351*  	call vdu_load_img
0431BF C9          4352*  	ret
0431C0             4353*  
0431C0             4354*  ld_59_009:
0431C0 21 4C 49 04 4355*  	ld hl,F59_009
0431C4 22 63 BC 04 4356*  	ld (cur_filename),hl
0431C8 11 8F C8 04 4357*  	ld de,filedata
0431CC 01 00 00 01 4358*  	ld bc,65536
0431D0 3E 01       4359*  	ld a,mos_load
0431D2 5B CF       4360*  	RST.LIL 08h
0431D4 21 FB 01 00 4361*  	ld hl,BUF_59_009
0431D8 01 23 00 00 4362*  	ld bc,35
0431DC 11 2D 00 00 4363*  	ld de,45
0431E0 DD 21 27 06 4364*  	ld ix,1575
       00          
0431E5 CD DE BD 04 4365*  	call vdu_load_img
0431E9 C9          4366*  	ret
0431EA             4367*  
0431EA             4368*  ld_59_010:
0431EA 21 60 49 04 4369*  	ld hl,F59_010
0431EE 22 63 BC 04 4370*  	ld (cur_filename),hl
0431F2 11 8F C8 04 4371*  	ld de,filedata
0431F6 01 00 00 01 4372*  	ld bc,65536
0431FA 3E 01       4373*  	ld a,mos_load
0431FC 5B CF       4374*  	RST.LIL 08h
0431FE 21 FC 01 00 4375*  	ld hl,BUF_59_010
043202 01 19 00 00 4376*  	ld bc,25
043206 11 2D 00 00 4377*  	ld de,45
04320A DD 21 65 04 4378*  	ld ix,1125
       00          
04320F CD DE BD 04 4379*  	call vdu_load_img
043213 C9          4380*  	ret
043214             4381*  
043214             4382*  ld_59_011:
043214 21 74 49 04 4383*  	ld hl,F59_011
043218 22 63 BC 04 4384*  	ld (cur_filename),hl
04321C 11 8F C8 04 4385*  	ld de,filedata
043220 01 00 00 01 4386*  	ld bc,65536
043224 3E 01       4387*  	ld a,mos_load
043226 5B CF       4388*  	RST.LIL 08h
043228 21 FD 01 00 4389*  	ld hl,BUF_59_011
04322C 01 0F 00 00 4390*  	ld bc,15
043230 11 2D 00 00 4391*  	ld de,45
043234 DD 21 A3 02 4392*  	ld ix,675
       00          
043239 CD DE BD 04 4393*  	call vdu_load_img
04323D C9          4394*  	ret
04323E             4395*  
04323E             4396*  ld_59_012:
04323E 21 88 49 04 4397*  	ld hl,F59_012
043242 22 63 BC 04 4398*  	ld (cur_filename),hl
043246 11 8F C8 04 4399*  	ld de,filedata
04324A 01 00 00 01 4400*  	ld bc,65536
04324E 3E 01       4401*  	ld a,mos_load
043250 5B CF       4402*  	RST.LIL 08h
043252 21 FE 01 00 4403*  	ld hl,BUF_59_012
043256 01 05 00 00 4404*  	ld bc,5
04325A 11 2D 00 00 4405*  	ld de,45
04325E DD 21 E1 00 4406*  	ld ix,225
       00          
043263 CD DE BD 04 4407*  	call vdu_load_img
043267 C9          4408*  	ret
043268             4409*  
043268             4410*  ld_59_013:
043268 21 9C 49 04 4411*  	ld hl,F59_013
04326C 22 63 BC 04 4412*  	ld (cur_filename),hl
043270 11 8F C8 04 4413*  	ld de,filedata
043274 01 00 00 01 4414*  	ld bc,65536
043278 3E 01       4415*  	ld a,mos_load
04327A 5B CF       4416*  	RST.LIL 08h
04327C 21 FF 01 00 4417*  	ld hl,BUF_59_013
043280 01 05 00 00 4418*  	ld bc,5
043284 11 2B 00 00 4419*  	ld de,43
043288 DD 21 D7 00 4420*  	ld ix,215
       00          
04328D CD DE BD 04 4421*  	call vdu_load_img
043291 C9          4422*  	ret
043292             4423*  
043292             4424*  ld_59_014:
043292 21 B0 49 04 4425*  	ld hl,F59_014
043296 22 63 BC 04 4426*  	ld (cur_filename),hl
04329A 11 8F C8 04 4427*  	ld de,filedata
04329E 01 00 00 01 4428*  	ld bc,65536
0432A2 3E 01       4429*  	ld a,mos_load
0432A4 5B CF       4430*  	RST.LIL 08h
0432A6 21 00 02 00 4431*  	ld hl,BUF_59_014
0432AA 01 0F 00 00 4432*  	ld bc,15
0432AE 11 2D 00 00 4433*  	ld de,45
0432B2 DD 21 A3 02 4434*  	ld ix,675
       00          
0432B7 CD DE BD 04 4435*  	call vdu_load_img
0432BB C9          4436*  	ret
0432BC             4437*  
0432BC             4438*  ld_59_015:
0432BC 21 C4 49 04 4439*  	ld hl,F59_015
0432C0 22 63 BC 04 4440*  	ld (cur_filename),hl
0432C4 11 8F C8 04 4441*  	ld de,filedata
0432C8 01 00 00 01 4442*  	ld bc,65536
0432CC 3E 01       4443*  	ld a,mos_load
0432CE 5B CF       4444*  	RST.LIL 08h
0432D0 21 01 02 00 4445*  	ld hl,BUF_59_015
0432D4 01 19 00 00 4446*  	ld bc,25
0432D8 11 2D 00 00 4447*  	ld de,45
0432DC DD 21 65 04 4448*  	ld ix,1125
       00          
0432E1 CD DE BD 04 4449*  	call vdu_load_img
0432E5 C9          4450*  	ret
0432E6             4451*  
0432E6             4452*  ld_59_016:
0432E6 21 D8 49 04 4453*  	ld hl,F59_016
0432EA 22 63 BC 04 4454*  	ld (cur_filename),hl
0432EE 11 8F C8 04 4455*  	ld de,filedata
0432F2 01 00 00 01 4456*  	ld bc,65536
0432F6 3E 01       4457*  	ld a,mos_load
0432F8 5B CF       4458*  	RST.LIL 08h
0432FA 21 02 02 00 4459*  	ld hl,BUF_59_016
0432FE 01 23 00 00 4460*  	ld bc,35
043302 11 2D 00 00 4461*  	ld de,45
043306 DD 21 27 06 4462*  	ld ix,1575
       00          
04330B CD DE BD 04 4463*  	call vdu_load_img
04330F C9          4464*  	ret
043310             4465*  
043310             4466*  ld_59_020:
043310 21 EC 49 04 4467*  	ld hl,F59_020
043314 22 63 BC 04 4468*  	ld (cur_filename),hl
043318 11 8F C8 04 4469*  	ld de,filedata
04331C 01 00 00 01 4470*  	ld bc,65536
043320 3E 01       4471*  	ld a,mos_load
043322 5B CF       4472*  	RST.LIL 08h
043324 21 03 02 00 4473*  	ld hl,BUF_59_020
043328 01 2E 00 00 4474*  	ld bc,46
04332C 11 2D 00 00 4475*  	ld de,45
043330 DD 21 16 08 4476*  	ld ix,2070
       00          
043335 CD DE BD 04 4477*  	call vdu_load_img
043339 C9          4478*  	ret
04333A             4479*  
04333A             4480*  ld_59_024:
04333A 21 00 4A 04 4481*  	ld hl,F59_024
04333E 22 63 BC 04 4482*  	ld (cur_filename),hl
043342 11 8F C8 04 4483*  	ld de,filedata
043346 01 00 00 01 4484*  	ld bc,65536
04334A 3E 01       4485*  	ld a,mos_load
04334C 5B CF       4486*  	RST.LIL 08h
04334E 21 04 02 00 4487*  	ld hl,BUF_59_024
043352 01 2E 00 00 4488*  	ld bc,46
043356 11 40 00 00 4489*  	ld de,64
04335A DD 21 80 0B 4490*  	ld ix,2944
       00          
04335F CD DE BD 04 4491*  	call vdu_load_img
043363 C9          4492*  	ret
043364             4493*  
043364             4494*  ld_59_025:
043364 21 14 4A 04 4495*  	ld hl,F59_025
043368 22 63 BC 04 4496*  	ld (cur_filename),hl
04336C 11 8F C8 04 4497*  	ld de,filedata
043370 01 00 00 01 4498*  	ld bc,65536
043374 3E 01       4499*  	ld a,mos_load
043376 5B CF       4500*  	RST.LIL 08h
043378 21 05 02 00 4501*  	ld hl,BUF_59_025
04337C 01 1C 00 00 4502*  	ld bc,28
043380 11 40 00 00 4503*  	ld de,64
043384 DD 21 00 07 4504*  	ld ix,1792
       00          
043389 CD DE BD 04 4505*  	call vdu_load_img
04338D C9          4506*  	ret
04338E             4507*  
04338E             4508*  ld_59_026:
04338E 21 28 4A 04 4509*  	ld hl,F59_026
043392 22 63 BC 04 4510*  	ld (cur_filename),hl
043396 11 8F C8 04 4511*  	ld de,filedata
04339A 01 00 00 01 4512*  	ld bc,65536
04339E 3E 01       4513*  	ld a,mos_load
0433A0 5B CF       4514*  	RST.LIL 08h
0433A2 21 06 02 00 4515*  	ld hl,BUF_59_026
0433A6 01 09 00 00 4516*  	ld bc,9
0433AA 11 40 00 00 4517*  	ld de,64
0433AE DD 21 40 02 4518*  	ld ix,576
       00          
0433B3 CD DE BD 04 4519*  	call vdu_load_img
0433B7 C9          4520*  	ret
0433B8             4521*  
0433B8             4522*  ld_59_027:
0433B8 21 3C 4A 04 4523*  	ld hl,F59_027
0433BC 22 63 BC 04 4524*  	ld (cur_filename),hl
0433C0 11 8F C8 04 4525*  	ld de,filedata
0433C4 01 00 00 01 4526*  	ld bc,65536
0433C8 3E 01       4527*  	ld a,mos_load
0433CA 5B CF       4528*  	RST.LIL 08h
0433CC 21 07 02 00 4529*  	ld hl,BUF_59_027
0433D0 01 0A 00 00 4530*  	ld bc,10
0433D4 11 3E 00 00 4531*  	ld de,62
0433D8 DD 21 6C 02 4532*  	ld ix,620
       00          
0433DD CD DE BD 04 4533*  	call vdu_load_img
0433E1 C9          4534*  	ret
0433E2             4535*  
0433E2             4536*  ld_59_028:
0433E2 21 50 4A 04 4537*  	ld hl,F59_028
0433E6 22 63 BC 04 4538*  	ld (cur_filename),hl
0433EA 11 8F C8 04 4539*  	ld de,filedata
0433EE 01 00 00 01 4540*  	ld bc,65536
0433F2 3E 01       4541*  	ld a,mos_load
0433F4 5B CF       4542*  	RST.LIL 08h
0433F6 21 08 02 00 4543*  	ld hl,BUF_59_028
0433FA 01 1C 00 00 4544*  	ld bc,28
0433FE 11 40 00 00 4545*  	ld de,64
043402 DD 21 00 07 4546*  	ld ix,1792
       00          
043407 CD DE BD 04 4547*  	call vdu_load_img
04340B C9          4548*  	ret
04340C             4549*  
04340C             4550*  ld_59_029:
04340C 21 64 4A 04 4551*  	ld hl,F59_029
043410 22 63 BC 04 4552*  	ld (cur_filename),hl
043414 11 8F C8 04 4553*  	ld de,filedata
043418 01 00 00 01 4554*  	ld bc,65536
04341C 3E 01       4555*  	ld a,mos_load
04341E 5B CF       4556*  	RST.LIL 08h
043420 21 09 02 00 4557*  	ld hl,BUF_59_029
043424 01 2F 00 00 4558*  	ld bc,47
043428 11 40 00 00 4559*  	ld de,64
04342C DD 21 C0 0B 4560*  	ld ix,3008
       00          
043431 CD DE BD 04 4561*  	call vdu_load_img
043435 C9          4562*  	ret
043436             4563*  
043436             4564*  ld_59_032:
043436 21 78 4A 04 4565*  	ld hl,F59_032
04343A 22 63 BC 04 4566*  	ld (cur_filename),hl
04343E 11 8F C8 04 4567*  	ld de,filedata
043442 01 00 00 01 4568*  	ld bc,65536
043446 3E 01       4569*  	ld a,mos_load
043448 5B CF       4570*  	RST.LIL 08h
04344A 21 0A 02 00 4571*  	ld hl,BUF_59_032
04344E 01 41 00 00 4572*  	ld bc,65
043452 11 40 00 00 4573*  	ld de,64
043456 DD 21 40 10 4574*  	ld ix,4160
       00          
04345B CD DE BD 04 4575*  	call vdu_load_img
04345F C9          4576*  	ret
043460             4577*  
043460             4578*  ld_59_035:
043460 21 8C 4A 04 4579*  	ld hl,F59_035
043464 22 63 BC 04 4580*  	ld (cur_filename),hl
043468 11 8F C8 04 4581*  	ld de,filedata
04346C 01 00 00 01 4582*  	ld bc,65536
043470 3E 01       4583*  	ld a,mos_load
043472 5B CF       4584*  	RST.LIL 08h
043474 21 0B 02 00 4585*  	ld hl,BUF_59_035
043478 01 3F 00 00 4586*  	ld bc,63
04347C 11 6B 00 00 4587*  	ld de,107
043480 DD 21 55 1A 4588*  	ld ix,6741
       00          
043485 CD DE BD 04 4589*  	call vdu_load_img
043489 C9          4590*  	ret
04348A             4591*  
04348A             4592*  ld_59_036:
04348A 21 A0 4A 04 4593*  	ld hl,F59_036
04348E 22 63 BC 04 4594*  	ld (cur_filename),hl
043492 11 8F C8 04 4595*  	ld de,filedata
043496 01 00 00 01 4596*  	ld bc,65536
04349A 3E 01       4597*  	ld a,mos_load
04349C 5B CF       4598*  	RST.LIL 08h
04349E 21 0C 02 00 4599*  	ld hl,BUF_59_036
0434A2 01 16 00 00 4600*  	ld bc,22
0434A6 11 6B 00 00 4601*  	ld de,107
0434AA DD 21 32 09 4602*  	ld ix,2354
       00          
0434AF CD DE BD 04 4603*  	call vdu_load_img
0434B3 C9          4604*  	ret
0434B4             4605*  
0434B4             4606*  ld_59_037:
0434B4 21 B4 4A 04 4607*  	ld hl,F59_037
0434B8 22 63 BC 04 4608*  	ld (cur_filename),hl
0434BC 11 8F C8 04 4609*  	ld de,filedata
0434C0 01 00 00 01 4610*  	ld bc,65536
0434C4 3E 01       4611*  	ld a,mos_load
0434C6 5B CF       4612*  	RST.LIL 08h
0434C8 21 0D 02 00 4613*  	ld hl,BUF_59_037
0434CC 01 15 00 00 4614*  	ld bc,21
0434D0 11 69 00 00 4615*  	ld de,105
0434D4 DD 21 9D 08 4616*  	ld ix,2205
       00          
0434D9 CD DE BD 04 4617*  	call vdu_load_img
0434DD C9          4618*  	ret
0434DE             4619*  
0434DE             4620*  ld_59_038:
0434DE 21 C8 4A 04 4621*  	ld hl,F59_038
0434E2 22 63 BC 04 4622*  	ld (cur_filename),hl
0434E6 11 8F C8 04 4623*  	ld de,filedata
0434EA 01 00 00 01 4624*  	ld bc,65536
0434EE 3E 01       4625*  	ld a,mos_load
0434F0 5B CF       4626*  	RST.LIL 08h
0434F2 21 0E 02 00 4627*  	ld hl,BUF_59_038
0434F6 01 3F 00 00 4628*  	ld bc,63
0434FA 11 6B 00 00 4629*  	ld de,107
0434FE DD 21 55 1A 4630*  	ld ix,6741
       00          
043503 CD DE BD 04 4631*  	call vdu_load_img
043507 C9          4632*  	ret
043508             4633*  
043508             4634*  ld_59_040:
043508 21 DC 4A 04 4635*  	ld hl,F59_040
04350C 22 63 BC 04 4636*  	ld (cur_filename),hl
043510 11 8F C8 04 4637*  	ld de,filedata
043514 01 00 00 01 4638*  	ld bc,65536
043518 3E 01       4639*  	ld a,mos_load
04351A 5B CF       4640*  	RST.LIL 08h
04351C 21 0F 02 00 4641*  	ld hl,BUF_59_040
043520 01 6C 00 00 4642*  	ld bc,108
043524 11 6B 00 00 4643*  	ld de,107
043528 DD 21 24 2D 4644*  	ld ix,11556
       00          
04352D CD DE BD 04 4645*  	call vdu_load_img
043531 C9          4646*  	ret
043532             4647*  
043532             4648*  ld_59_042:
043532 21 F0 4A 04 4649*  	ld hl,F59_042
043536 22 63 BC 04 4650*  	ld (cur_filename),hl
04353A 11 8F C8 04 4651*  	ld de,filedata
04353E 01 00 00 01 4652*  	ld bc,65536
043542 3E 01       4653*  	ld a,mos_load
043544 5B CF       4654*  	RST.LIL 08h
043546 21 10 02 00 4655*  	ld hl,BUF_59_042
04354A 01 6A 00 00 4656*  	ld bc,106
04354E 11 A0 00 00 4657*  	ld de,160
043552 DD 21 40 42 4658*  	ld ix,16960
       00          
043557 CD DE BD 04 4659*  	call vdu_load_img
04355B C9          4660*  	ret
04355C             4661*  
04355C             4662*  ld_59_043:
04355C 21 04 4B 04 4663*  	ld hl,F59_043
043560 22 63 BC 04 4664*  	ld (cur_filename),hl
043564 11 8F C8 04 4665*  	ld de,filedata
043568 01 00 00 01 4666*  	ld bc,65536
04356C 3E 01       4667*  	ld a,mos_load
04356E 5B CF       4668*  	RST.LIL 08h
043570 21 11 02 00 4669*  	ld hl,BUF_59_043
043574 01 6B 00 00 4670*  	ld bc,107
043578 11 A0 00 00 4671*  	ld de,160
04357C DD 21 E0 42 4672*  	ld ix,17120
       00          
043581 CD DE BD 04 4673*  	call vdu_load_img
043585 C9          4674*  	ret
043586             4675*  
043586             4676*  ld_59_044:
043586 21 18 4B 04 4677*  	ld hl,F59_044
04358A 22 63 BC 04 4678*  	ld (cur_filename),hl
04358E 11 8F C8 04 4679*  	ld de,filedata
043592 01 00 00 01 4680*  	ld bc,65536
043596 3E 01       4681*  	ld a,mos_load
043598 5B CF       4682*  	RST.LIL 08h
04359A 21 12 02 00 4683*  	ld hl,BUF_59_044
04359E 01 40 01 00 4684*  	ld bc,320
0435A2 11 A0 00 00 4685*  	ld de,160
0435A6 DD 21 00 C8 4686*  	ld ix,51200
       00          
0435AB CD DE BD 04 4687*  	call vdu_load_img
0435AF C9          4688*  	ret
0435B0             4689*  
0435B0             4690*  ; File name lookups:
0435B0 70 61 6E 65 4691*  F10_004: db "panels/10_004.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0435C4 70 61 6E 65 4692*  F10_009: db "panels/10_009.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0435D8 70 61 6E 65 4693*  F10_010: db "panels/10_010.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0435EC 70 61 6E 65 4694*  F10_011: db "panels/10_011.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043600 70 61 6E 65 4695*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043614 70 61 6E 65 4696*  F10_013: db "panels/10_013.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043628 70 61 6E 65 4697*  F10_014: db "panels/10_014.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
04363C 70 61 6E 65 4698*  F10_015: db "panels/10_015.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043650 70 61 6E 65 4699*  F10_016: db "panels/10_016.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043664 70 61 6E 65 4700*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043678 70 61 6E 65 4701*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04368C 70 61 6E 65 4702*  F10_025: db "panels/10_025.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0436A0 70 61 6E 65 4703*  F10_026: db "panels/10_026.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0436B4 70 61 6E 65 4704*  F10_027: db "panels/10_027.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0436C8 70 61 6E 65 4705*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0436DC 70 61 6E 65 4706*  F10_029: db "panels/10_029.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0436F0 70 61 6E 65 4707*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043704 70 61 6E 65 4708*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043718 70 61 6E 65 4709*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04372C 70 61 6E 65 4710*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043740 70 61 6E 65 4711*  F10_038: db "panels/10_038.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043754 70 61 6E 65 4712*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043768 70 61 6E 65 4713*  F10_042: db "panels/10_042.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04377C 70 61 6E 65 4714*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043790 70 61 6E 65 4715*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0437A4 70 61 6E 65 4716*  F11_004: db "panels/11_004.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0437B8 70 61 6E 65 4717*  F11_009: db "panels/11_009.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0437CC 70 61 6E 65 4718*  F11_010: db "panels/11_010.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0437E0 70 61 6E 65 4719*  F11_011: db "panels/11_011.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0437F4 70 61 6E 65 4720*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043808 70 61 6E 65 4721*  F11_013: db "panels/11_013.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04381C 70 61 6E 65 4722*  F11_014: db "panels/11_014.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043830 70 61 6E 65 4723*  F11_015: db "panels/11_015.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043844 70 61 6E 65 4724*  F11_016: db "panels/11_016.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043858 70 61 6E 65 4725*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04386C 70 61 6E 65 4726*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043880 70 61 6E 65 4727*  F11_025: db "panels/11_025.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043894 70 61 6E 65 4728*  F11_026: db "panels/11_026.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0438A8 70 61 6E 65 4729*  F11_027: db "panels/11_027.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0438BC 70 61 6E 65 4730*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0438D0 70 61 6E 65 4731*  F11_029: db "panels/11_029.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0438E4 70 61 6E 65 4732*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0438F8 70 61 6E 65 4733*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
04390C 70 61 6E 65 4734*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043920 70 61 6E 65 4735*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043934 70 61 6E 65 4736*  F11_038: db "panels/11_038.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043948 70 61 6E 65 4737*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04395C 70 61 6E 65 4738*  F11_042: db "panels/11_042.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043970 70 61 6E 65 4739*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043984 70 61 6E 65 4740*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043998 70 61 6E 65 4741*  F12_004: db "panels/12_004.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0439AC 70 61 6E 65 4742*  F12_009: db "panels/12_009.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0439C0 70 61 6E 65 4743*  F12_010: db "panels/12_010.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0439D4 70 61 6E 65 4744*  F12_011: db "panels/12_011.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0439E8 70 61 6E 65 4745*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0439FC 70 61 6E 65 4746*  F12_013: db "panels/12_013.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043A10 70 61 6E 65 4747*  F12_014: db "panels/12_014.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043A24 70 61 6E 65 4748*  F12_015: db "panels/12_015.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043A38 70 61 6E 65 4749*  F12_016: db "panels/12_016.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043A4C 70 61 6E 65 4750*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043A60 70 61 6E 65 4751*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043A74 70 61 6E 65 4752*  F12_025: db "panels/12_025.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043A88 70 61 6E 65 4753*  F12_026: db "panels/12_026.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043A9C 70 61 6E 65 4754*  F12_027: db "panels/12_027.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043AB0 70 61 6E 65 4755*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043AC4 70 61 6E 65 4756*  F12_029: db "panels/12_029.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043AD8 70 61 6E 65 4757*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043AEC 70 61 6E 65 4758*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043B00 70 61 6E 65 4759*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043B14 70 61 6E 65 4760*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043B28 70 61 6E 65 4761*  F12_038: db "panels/12_038.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043B3C 70 61 6E 65 4762*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043B50 70 61 6E 65 4763*  F12_042: db "panels/12_042.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043B64 70 61 6E 65 4764*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043B78 70 61 6E 65 4765*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043B8C 70 61 6E 65 4766*  F13_004: db "panels/13_004.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043BA0 70 61 6E 65 4767*  F13_009: db "panels/13_009.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043BB4 70 61 6E 65 4768*  F13_010: db "panels/13_010.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043BC8 70 61 6E 65 4769*  F13_011: db "panels/13_011.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043BDC 70 61 6E 65 4770*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043BF0 70 61 6E 65 4771*  F13_013: db "panels/13_013.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043C04 70 61 6E 65 4772*  F13_014: db "panels/13_014.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043C18 70 61 6E 65 4773*  F13_015: db "panels/13_015.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043C2C 70 61 6E 65 4774*  F13_016: db "panels/13_016.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043C40 70 61 6E 65 4775*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043C54 70 61 6E 65 4776*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043C68 70 61 6E 65 4777*  F13_025: db "panels/13_025.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043C7C 70 61 6E 65 4778*  F13_026: db "panels/13_026.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043C90 70 61 6E 65 4779*  F13_027: db "panels/13_027.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043CA4 70 61 6E 65 4780*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043CB8 70 61 6E 65 4781*  F13_029: db "panels/13_029.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043CCC 70 61 6E 65 4782*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043CE0 70 61 6E 65 4783*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043CF4 70 61 6E 65 4784*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043D08 70 61 6E 65 4785*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043D1C 70 61 6E 65 4786*  F13_038: db "panels/13_038.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043D30 70 61 6E 65 4787*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043D44 70 61 6E 65 4788*  F13_042: db "panels/13_042.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043D58 70 61 6E 65 4789*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043D6C 70 61 6E 65 4790*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D80 70 61 6E 65 4791*  F14_004: db "panels/14_004.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043D94 70 61 6E 65 4792*  F14_009: db "panels/14_009.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043DA8 70 61 6E 65 4793*  F14_010: db "panels/14_010.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043DBC 70 61 6E 65 4794*  F14_011: db "panels/14_011.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043DD0 70 61 6E 65 4795*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043DE4 70 61 6E 65 4796*  F14_013: db "panels/14_013.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043DF8 70 61 6E 65 4797*  F14_014: db "panels/14_014.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043E0C 70 61 6E 65 4798*  F14_015: db "panels/14_015.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043E20 70 61 6E 65 4799*  F14_016: db "panels/14_016.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043E34 70 61 6E 65 4800*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043E48 70 61 6E 65 4801*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043E5C 70 61 6E 65 4802*  F14_025: db "panels/14_025.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043E70 70 61 6E 65 4803*  F14_026: db "panels/14_026.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043E84 70 61 6E 65 4804*  F14_027: db "panels/14_027.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043E98 70 61 6E 65 4805*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043EAC 70 61 6E 65 4806*  F14_029: db "panels/14_029.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043EC0 70 61 6E 65 4807*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043ED4 70 61 6E 65 4808*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043EE8 70 61 6E 65 4809*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043EFC 70 61 6E 65 4810*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043F10 70 61 6E 65 4811*  F14_038: db "panels/14_038.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043F24 70 61 6E 65 4812*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043F38 70 61 6E 65 4813*  F14_042: db "panels/14_042.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043F4C 70 61 6E 65 4814*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043F60 70 61 6E 65 4815*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043F74 70 61 6E 65 4816*  F15_004: db "panels/15_004.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043F88 70 61 6E 65 4817*  F15_009: db "panels/15_009.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043F9C 70 61 6E 65 4818*  F15_010: db "panels/15_010.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043FB0 70 61 6E 65 4819*  F15_011: db "panels/15_011.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043FC4 70 61 6E 65 4820*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043FD8 70 61 6E 65 4821*  F15_013: db "panels/15_013.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043FEC 70 61 6E 65 4822*  F15_014: db "panels/15_014.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044000 70 61 6E 65 4823*  F15_015: db "panels/15_015.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044014 70 61 6E 65 4824*  F15_016: db "panels/15_016.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044028 70 61 6E 65 4825*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04403C 70 61 6E 65 4826*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044050 70 61 6E 65 4827*  F15_025: db "panels/15_025.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044064 70 61 6E 65 4828*  F15_026: db "panels/15_026.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044078 70 61 6E 65 4829*  F15_027: db "panels/15_027.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04408C 70 61 6E 65 4830*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0440A0 70 61 6E 65 4831*  F15_029: db "panels/15_029.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0440B4 70 61 6E 65 4832*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0440C8 70 61 6E 65 4833*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0440DC 70 61 6E 65 4834*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0440F0 70 61 6E 65 4835*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044104 70 61 6E 65 4836*  F15_038: db "panels/15_038.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044118 70 61 6E 65 4837*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04412C 70 61 6E 65 4838*  F15_042: db "panels/15_042.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044140 70 61 6E 65 4839*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044154 70 61 6E 65 4840*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044168 70 61 6E 65 4841*  F16_004: db "panels/16_004.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04417C 70 61 6E 65 4842*  F16_009: db "panels/16_009.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044190 70 61 6E 65 4843*  F16_010: db "panels/16_010.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0441A4 70 61 6E 65 4844*  F16_011: db "panels/16_011.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0441B8 70 61 6E 65 4845*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0441CC 70 61 6E 65 4846*  F16_013: db "panels/16_013.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0441E0 70 61 6E 65 4847*  F16_014: db "panels/16_014.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0441F4 70 61 6E 65 4848*  F16_015: db "panels/16_015.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044208 70 61 6E 65 4849*  F16_016: db "panels/16_016.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04421C 70 61 6E 65 4850*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044230 70 61 6E 65 4851*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044244 70 61 6E 65 4852*  F16_025: db "panels/16_025.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044258 70 61 6E 65 4853*  F16_026: db "panels/16_026.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
04426C 70 61 6E 65 4854*  F16_027: db "panels/16_027.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044280 70 61 6E 65 4855*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044294 70 61 6E 65 4856*  F16_029: db "panels/16_029.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0442A8 70 61 6E 65 4857*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0442BC 70 61 6E 65 4858*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0442D0 70 61 6E 65 4859*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0442E4 70 61 6E 65 4860*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0442F8 70 61 6E 65 4861*  F16_038: db "panels/16_038.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
04430C 70 61 6E 65 4862*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044320 70 61 6E 65 4863*  F16_042: db "panels/16_042.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044334 70 61 6E 65 4864*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044348 70 61 6E 65 4865*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04435C 70 61 6E 65 4866*  F17_004: db "panels/17_004.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044370 70 61 6E 65 4867*  F17_009: db "panels/17_009.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044384 70 61 6E 65 4868*  F17_010: db "panels/17_010.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044398 70 61 6E 65 4869*  F17_011: db "panels/17_011.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0443AC 70 61 6E 65 4870*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0443C0 70 61 6E 65 4871*  F17_013: db "panels/17_013.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0443D4 70 61 6E 65 4872*  F17_014: db "panels/17_014.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0443E8 70 61 6E 65 4873*  F17_015: db "panels/17_015.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0443FC 70 61 6E 65 4874*  F17_016: db "panels/17_016.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044410 70 61 6E 65 4875*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044424 70 61 6E 65 4876*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044438 70 61 6E 65 4877*  F17_025: db "panels/17_025.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04444C 70 61 6E 65 4878*  F17_026: db "panels/17_026.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044460 70 61 6E 65 4879*  F17_027: db "panels/17_027.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044474 70 61 6E 65 4880*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044488 70 61 6E 65 4881*  F17_029: db "panels/17_029.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04449C 70 61 6E 65 4882*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0444B0 70 61 6E 65 4883*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0444C4 70 61 6E 65 4884*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0444D8 70 61 6E 65 4885*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0444EC 70 61 6E 65 4886*  F17_038: db "panels/17_038.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044500 70 61 6E 65 4887*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044514 70 61 6E 65 4888*  F17_042: db "panels/17_042.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044528 70 61 6E 65 4889*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04453C 70 61 6E 65 4890*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044550 70 61 6E 65 4891*  F57_004: db "panels/57_004.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044564 70 61 6E 65 4892*  F57_009: db "panels/57_009.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044578 70 61 6E 65 4893*  F57_010: db "panels/57_010.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04458C 70 61 6E 65 4894*  F57_011: db "panels/57_011.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0445A0 70 61 6E 65 4895*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0445B4 70 61 6E 65 4896*  F57_013: db "panels/57_013.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0445C8 70 61 6E 65 4897*  F57_014: db "panels/57_014.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0445DC 70 61 6E 65 4898*  F57_015: db "panels/57_015.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0445F0 70 61 6E 65 4899*  F57_016: db "panels/57_016.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044604 70 61 6E 65 4900*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044618 70 61 6E 65 4901*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04462C 70 61 6E 65 4902*  F57_025: db "panels/57_025.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044640 70 61 6E 65 4903*  F57_026: db "panels/57_026.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044654 70 61 6E 65 4904*  F57_027: db "panels/57_027.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044668 70 61 6E 65 4905*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04467C 70 61 6E 65 4906*  F57_029: db "panels/57_029.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044690 70 61 6E 65 4907*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0446A4 70 61 6E 65 4908*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0446B8 70 61 6E 65 4909*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0446CC 70 61 6E 65 4910*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0446E0 70 61 6E 65 4911*  F57_038: db "panels/57_038.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0446F4 70 61 6E 65 4912*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044708 70 61 6E 65 4913*  F57_042: db "panels/57_042.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04471C 70 61 6E 65 4914*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044730 70 61 6E 65 4915*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044744 70 61 6E 65 4916*  F58_004: db "panels/58_004.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044758 70 61 6E 65 4917*  F58_009: db "panels/58_009.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04476C 70 61 6E 65 4918*  F58_010: db "panels/58_010.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044780 70 61 6E 65 4919*  F58_011: db "panels/58_011.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044794 70 61 6E 65 4920*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0447A8 70 61 6E 65 4921*  F58_013: db "panels/58_013.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0447BC 70 61 6E 65 4922*  F58_014: db "panels/58_014.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0447D0 70 61 6E 65 4923*  F58_015: db "panels/58_015.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0447E4 70 61 6E 65 4924*  F58_016: db "panels/58_016.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0447F8 70 61 6E 65 4925*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04480C 70 61 6E 65 4926*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044820 70 61 6E 65 4927*  F58_025: db "panels/58_025.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044834 70 61 6E 65 4928*  F58_026: db "panels/58_026.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044848 70 61 6E 65 4929*  F58_027: db "panels/58_027.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04485C 70 61 6E 65 4930*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044870 70 61 6E 65 4931*  F58_029: db "panels/58_029.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044884 70 61 6E 65 4932*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044898 70 61 6E 65 4933*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0448AC 70 61 6E 65 4934*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0448C0 70 61 6E 65 4935*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0448D4 70 61 6E 65 4936*  F58_038: db "panels/58_038.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0448E8 70 61 6E 65 4937*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0448FC 70 61 6E 65 4938*  F58_042: db "panels/58_042.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044910 70 61 6E 65 4939*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044924 70 61 6E 65 4940*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044938 70 61 6E 65 4941*  F59_004: db "panels/59_004.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04494C 70 61 6E 65 4942*  F59_009: db "panels/59_009.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044960 70 61 6E 65 4943*  F59_010: db "panels/59_010.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044974 70 61 6E 65 4944*  F59_011: db "panels/59_011.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044988 70 61 6E 65 4945*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04499C 70 61 6E 65 4946*  F59_013: db "panels/59_013.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0449B0 70 61 6E 65 4947*  F59_014: db "panels/59_014.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0449C4 70 61 6E 65 4948*  F59_015: db "panels/59_015.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0449D8 70 61 6E 65 4949*  F59_016: db "panels/59_016.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0449EC 70 61 6E 65 4950*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044A00 70 61 6E 65 4951*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044A14 70 61 6E 65 4952*  F59_025: db "panels/59_025.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044A28 70 61 6E 65 4953*  F59_026: db "panels/59_026.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044A3C 70 61 6E 65 4954*  F59_027: db "panels/59_027.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044A50 70 61 6E 65 4955*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044A64 70 61 6E 65 4956*  F59_029: db "panels/59_029.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044A78 70 61 6E 65 4957*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A8C 70 61 6E 65 4958*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044AA0 70 61 6E 65 4959*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044AB4 70 61 6E 65 4960*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044AC8 70 61 6E 65 4961*  F59_038: db "panels/59_038.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044ADC 70 61 6E 65 4962*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044AF0 70 61 6E 65 4963*  F59_042: db "panels/59_042.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044B04 70 61 6E 65 4964*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044B18 70 61 6E 65 4965*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044B2C             4966*  
044B2C             4967*  ; sprite buffer ids:
044B2C             4968*  BUF_20_004: equ 0x0213
044B2C             4969*  BUF_20_020: equ 0x0214
044B2C             4970*  BUF_20_032: equ 0x0215
044B2C             4971*  BUF_20_040: equ 0x0216
044B2C             4972*  BUF_20_044: equ 0x0217
044B2C             4973*  BUF_21_004: equ 0x0218
044B2C             4974*  BUF_21_020: equ 0x0219
044B2C             4975*  BUF_21_032: equ 0x021A
044B2C             4976*  BUF_21_040: equ 0x021B
044B2C             4977*  BUF_21_044: equ 0x021C
044B2C             4978*  BUF_22_004: equ 0x021D
044B2C             4979*  BUF_22_020: equ 0x021E
044B2C             4980*  BUF_22_032: equ 0x021F
044B2C             4981*  BUF_22_040: equ 0x0220
044B2C             4982*  BUF_22_044: equ 0x0221
044B2C             4983*  BUF_23_004: equ 0x0222
044B2C             4984*  BUF_23_020: equ 0x0223
044B2C             4985*  BUF_23_032: equ 0x0224
044B2C             4986*  BUF_23_040: equ 0x0225
044B2C             4987*  BUF_23_044: equ 0x0226
044B2C             4988*  BUF_24_004: equ 0x0227
044B2C             4989*  BUF_24_020: equ 0x0228
044B2C             4990*  BUF_24_032: equ 0x0229
044B2C             4991*  BUF_24_040: equ 0x022A
044B2C             4992*  BUF_24_044: equ 0x022B
044B2C             4993*  BUF_40_004: equ 0x022C
044B2C             4994*  BUF_40_020: equ 0x022D
044B2C             4995*  BUF_40_032: equ 0x022E
044B2C             4996*  BUF_40_040: equ 0x022F
044B2C             4997*  BUF_40_044: equ 0x0230
044B2C             4998*  BUF_41_004: equ 0x0231
044B2C             4999*  BUF_41_020: equ 0x0232
044B2C             5000*  BUF_41_032: equ 0x0233
044B2C             5001*  BUF_41_040: equ 0x0234
044B2C             5002*  BUF_41_044: equ 0x0235
044B2C             5003*  BUF_42_004: equ 0x0236
044B2C             5004*  BUF_42_020: equ 0x0237
044B2C             5005*  BUF_42_032: equ 0x0238
044B2C             5006*  BUF_42_040: equ 0x0239
044B2C             5007*  BUF_42_044: equ 0x023A
044B2C             5008*  BUF_43_004: equ 0x023B
044B2C             5009*  BUF_43_020: equ 0x023C
044B2C             5010*  BUF_43_032: equ 0x023D
044B2C             5011*  BUF_43_040: equ 0x023E
044B2C             5012*  BUF_43_044: equ 0x023F
044B2C             5013*  BUF_44_004: equ 0x0240
044B2C             5014*  BUF_44_020: equ 0x0241
044B2C             5015*  BUF_44_032: equ 0x0242
044B2C             5016*  BUF_44_040: equ 0x0243
044B2C             5017*  BUF_44_044: equ 0x0244
044B2C             5018*  BUF_45_004: equ 0x0245
044B2C             5019*  BUF_45_020: equ 0x0246
044B2C             5020*  BUF_45_032: equ 0x0247
044B2C             5021*  BUF_45_040: equ 0x0248
044B2C             5022*  BUF_45_044: equ 0x0249
044B2C             5023*  BUF_46_004: equ 0x024A
044B2C             5024*  BUF_46_020: equ 0x024B
044B2C             5025*  BUF_46_032: equ 0x024C
044B2C             5026*  BUF_46_040: equ 0x024D
044B2C             5027*  BUF_46_044: equ 0x024E
044B2C             5028*  BUF_47_004: equ 0x024F
044B2C             5029*  BUF_47_020: equ 0x0250
044B2C             5030*  BUF_47_032: equ 0x0251
044B2C             5031*  BUF_47_040: equ 0x0252
044B2C             5032*  BUF_47_044: equ 0x0253
044B2C             5033*  BUF_48_004: equ 0x0254
044B2C             5034*  BUF_48_020: equ 0x0255
044B2C             5035*  BUF_48_032: equ 0x0256
044B2C             5036*  BUF_48_040: equ 0x0257
044B2C             5037*  BUF_48_044: equ 0x0258
044B2C             5038*  BUF_49_004: equ 0x0259
044B2C             5039*  BUF_49_020: equ 0x025A
044B2C             5040*  BUF_49_032: equ 0x025B
044B2C             5041*  BUF_49_040: equ 0x025C
044B2C             5042*  BUF_49_044: equ 0x025D
044B2C             5043*  BUF_50_004: equ 0x025E
044B2C             5044*  BUF_50_020: equ 0x025F
044B2C             5045*  BUF_50_032: equ 0x0260
044B2C             5046*  BUF_50_040: equ 0x0261
044B2C             5047*  BUF_50_044: equ 0x0262
044B2C             5048*  BUF_51_004: equ 0x0263
044B2C             5049*  BUF_51_020: equ 0x0264
044B2C             5050*  BUF_51_032: equ 0x0265
044B2C             5051*  BUF_51_040: equ 0x0266
044B2C             5052*  BUF_51_044: equ 0x0267
044B2C             5053*  BUF_52_004: equ 0x0268
044B2C             5054*  BUF_52_020: equ 0x0269
044B2C             5055*  BUF_52_032: equ 0x026A
044B2C             5056*  BUF_52_040: equ 0x026B
044B2C             5057*  BUF_52_044: equ 0x026C
044B2C             5058*  BUF_56_004: equ 0x026D
044B2C             5059*  BUF_56_020: equ 0x026E
044B2C             5060*  BUF_56_032: equ 0x026F
044B2C             5061*  BUF_56_040: equ 0x0270
044B2C             5062*  BUF_56_044: equ 0x0271
044B2C             5063*  
044B2C             5064*  sprite_num_panels: equ 95
044B2C             5065*  
044B2C             5066*  ; sprite buffer id reverse lookup:
044B2C             5067*  sprite_buffer_id_lut:
044B2C 13 02 00    5068*  	dl BUF_20_004
044B2F 14 02 00    5069*  	dl BUF_20_020
044B32 15 02 00    5070*  	dl BUF_20_032
044B35 16 02 00    5071*  	dl BUF_20_040
044B38 17 02 00    5072*  	dl BUF_20_044
044B3B 18 02 00    5073*  	dl BUF_21_004
044B3E 19 02 00    5074*  	dl BUF_21_020
044B41 1A 02 00    5075*  	dl BUF_21_032
044B44 1B 02 00    5076*  	dl BUF_21_040
044B47 1C 02 00    5077*  	dl BUF_21_044
044B4A 1D 02 00    5078*  	dl BUF_22_004
044B4D 1E 02 00    5079*  	dl BUF_22_020
044B50 1F 02 00    5080*  	dl BUF_22_032
044B53 20 02 00    5081*  	dl BUF_22_040
044B56 21 02 00    5082*  	dl BUF_22_044
044B59 22 02 00    5083*  	dl BUF_23_004
044B5C 23 02 00    5084*  	dl BUF_23_020
044B5F 24 02 00    5085*  	dl BUF_23_032
044B62 25 02 00    5086*  	dl BUF_23_040
044B65 26 02 00    5087*  	dl BUF_23_044
044B68 27 02 00    5088*  	dl BUF_24_004
044B6B 28 02 00    5089*  	dl BUF_24_020
044B6E 29 02 00    5090*  	dl BUF_24_032
044B71 2A 02 00    5091*  	dl BUF_24_040
044B74 2B 02 00    5092*  	dl BUF_24_044
044B77 2C 02 00    5093*  	dl BUF_40_004
044B7A 2D 02 00    5094*  	dl BUF_40_020
044B7D 2E 02 00    5095*  	dl BUF_40_032
044B80 2F 02 00    5096*  	dl BUF_40_040
044B83 30 02 00    5097*  	dl BUF_40_044
044B86 31 02 00    5098*  	dl BUF_41_004
044B89 32 02 00    5099*  	dl BUF_41_020
044B8C 33 02 00    5100*  	dl BUF_41_032
044B8F 34 02 00    5101*  	dl BUF_41_040
044B92 35 02 00    5102*  	dl BUF_41_044
044B95 36 02 00    5103*  	dl BUF_42_004
044B98 37 02 00    5104*  	dl BUF_42_020
044B9B 38 02 00    5105*  	dl BUF_42_032
044B9E 39 02 00    5106*  	dl BUF_42_040
044BA1 3A 02 00    5107*  	dl BUF_42_044
044BA4 3B 02 00    5108*  	dl BUF_43_004
044BA7 3C 02 00    5109*  	dl BUF_43_020
044BAA 3D 02 00    5110*  	dl BUF_43_032
044BAD 3E 02 00    5111*  	dl BUF_43_040
044BB0 3F 02 00    5112*  	dl BUF_43_044
044BB3 40 02 00    5113*  	dl BUF_44_004
044BB6 41 02 00    5114*  	dl BUF_44_020
044BB9 42 02 00    5115*  	dl BUF_44_032
044BBC 43 02 00    5116*  	dl BUF_44_040
044BBF 44 02 00    5117*  	dl BUF_44_044
044BC2 45 02 00    5118*  	dl BUF_45_004
044BC5 46 02 00    5119*  	dl BUF_45_020
044BC8 47 02 00    5120*  	dl BUF_45_032
044BCB 48 02 00    5121*  	dl BUF_45_040
044BCE 49 02 00    5122*  	dl BUF_45_044
044BD1 4A 02 00    5123*  	dl BUF_46_004
044BD4 4B 02 00    5124*  	dl BUF_46_020
044BD7 4C 02 00    5125*  	dl BUF_46_032
044BDA 4D 02 00    5126*  	dl BUF_46_040
044BDD 4E 02 00    5127*  	dl BUF_46_044
044BE0 4F 02 00    5128*  	dl BUF_47_004
044BE3 50 02 00    5129*  	dl BUF_47_020
044BE6 51 02 00    5130*  	dl BUF_47_032
044BE9 52 02 00    5131*  	dl BUF_47_040
044BEC 53 02 00    5132*  	dl BUF_47_044
044BEF 54 02 00    5133*  	dl BUF_48_004
044BF2 55 02 00    5134*  	dl BUF_48_020
044BF5 56 02 00    5135*  	dl BUF_48_032
044BF8 57 02 00    5136*  	dl BUF_48_040
044BFB 58 02 00    5137*  	dl BUF_48_044
044BFE 59 02 00    5138*  	dl BUF_49_004
044C01 5A 02 00    5139*  	dl BUF_49_020
044C04 5B 02 00    5140*  	dl BUF_49_032
044C07 5C 02 00    5141*  	dl BUF_49_040
044C0A 5D 02 00    5142*  	dl BUF_49_044
044C0D 5E 02 00    5143*  	dl BUF_50_004
044C10 5F 02 00    5144*  	dl BUF_50_020
044C13 60 02 00    5145*  	dl BUF_50_032
044C16 61 02 00    5146*  	dl BUF_50_040
044C19 62 02 00    5147*  	dl BUF_50_044
044C1C 63 02 00    5148*  	dl BUF_51_004
044C1F 64 02 00    5149*  	dl BUF_51_020
044C22 65 02 00    5150*  	dl BUF_51_032
044C25 66 02 00    5151*  	dl BUF_51_040
044C28 67 02 00    5152*  	dl BUF_51_044
044C2B 68 02 00    5153*  	dl BUF_52_004
044C2E 69 02 00    5154*  	dl BUF_52_020
044C31 6A 02 00    5155*  	dl BUF_52_032
044C34 6B 02 00    5156*  	dl BUF_52_040
044C37 6C 02 00    5157*  	dl BUF_52_044
044C3A 6D 02 00    5158*  	dl BUF_56_004
044C3D 6E 02 00    5159*  	dl BUF_56_020
044C40 6F 02 00    5160*  	dl BUF_56_032
044C43 70 02 00    5161*  	dl BUF_56_040
044C46 71 02 00    5162*  	dl BUF_56_044
044C49             5163*  
044C49             5164*  ; sprite load routines jump table:
044C49             5165*  sprite_load_panels_table:
044C49 66 4D 04    5166*  	dl ld_20_004
044C4C 90 4D 04    5167*  	dl ld_20_020
044C4F BA 4D 04    5168*  	dl ld_20_032
044C52 E4 4D 04    5169*  	dl ld_20_040
044C55 0E 4E 04    5170*  	dl ld_20_044
044C58 38 4E 04    5171*  	dl ld_21_004
044C5B 62 4E 04    5172*  	dl ld_21_020
044C5E 8C 4E 04    5173*  	dl ld_21_032
044C61 B6 4E 04    5174*  	dl ld_21_040
044C64 E0 4E 04    5175*  	dl ld_21_044
044C67 0A 4F 04    5176*  	dl ld_22_004
044C6A 34 4F 04    5177*  	dl ld_22_020
044C6D 5E 4F 04    5178*  	dl ld_22_032
044C70 88 4F 04    5179*  	dl ld_22_040
044C73 B2 4F 04    5180*  	dl ld_22_044
044C76 DC 4F 04    5181*  	dl ld_23_004
044C79 06 50 04    5182*  	dl ld_23_020
044C7C 30 50 04    5183*  	dl ld_23_032
044C7F 5A 50 04    5184*  	dl ld_23_040
044C82 84 50 04    5185*  	dl ld_23_044
044C85 AE 50 04    5186*  	dl ld_24_004
044C88 D8 50 04    5187*  	dl ld_24_020
044C8B 02 51 04    5188*  	dl ld_24_032
044C8E 2C 51 04    5189*  	dl ld_24_040
044C91 56 51 04    5190*  	dl ld_24_044
044C94 80 51 04    5191*  	dl ld_40_004
044C97 AA 51 04    5192*  	dl ld_40_020
044C9A D4 51 04    5193*  	dl ld_40_032
044C9D FE 51 04    5194*  	dl ld_40_040
044CA0 28 52 04    5195*  	dl ld_40_044
044CA3 52 52 04    5196*  	dl ld_41_004
044CA6 7C 52 04    5197*  	dl ld_41_020
044CA9 A6 52 04    5198*  	dl ld_41_032
044CAC D0 52 04    5199*  	dl ld_41_040
044CAF FA 52 04    5200*  	dl ld_41_044
044CB2 24 53 04    5201*  	dl ld_42_004
044CB5 4E 53 04    5202*  	dl ld_42_020
044CB8 78 53 04    5203*  	dl ld_42_032
044CBB A2 53 04    5204*  	dl ld_42_040
044CBE CC 53 04    5205*  	dl ld_42_044
044CC1 F6 53 04    5206*  	dl ld_43_004
044CC4 20 54 04    5207*  	dl ld_43_020
044CC7 4A 54 04    5208*  	dl ld_43_032
044CCA 74 54 04    5209*  	dl ld_43_040
044CCD 9E 54 04    5210*  	dl ld_43_044
044CD0 C8 54 04    5211*  	dl ld_44_004
044CD3 F2 54 04    5212*  	dl ld_44_020
044CD6 1C 55 04    5213*  	dl ld_44_032
044CD9 46 55 04    5214*  	dl ld_44_040
044CDC 70 55 04    5215*  	dl ld_44_044
044CDF 9A 55 04    5216*  	dl ld_45_004
044CE2 C4 55 04    5217*  	dl ld_45_020
044CE5 EE 55 04    5218*  	dl ld_45_032
044CE8 18 56 04    5219*  	dl ld_45_040
044CEB 42 56 04    5220*  	dl ld_45_044
044CEE 6C 56 04    5221*  	dl ld_46_004
044CF1 96 56 04    5222*  	dl ld_46_020
044CF4 C0 56 04    5223*  	dl ld_46_032
044CF7 EA 56 04    5224*  	dl ld_46_040
044CFA 14 57 04    5225*  	dl ld_46_044
044CFD 3E 57 04    5226*  	dl ld_47_004
044D00 68 57 04    5227*  	dl ld_47_020
044D03 92 57 04    5228*  	dl ld_47_032
044D06 BC 57 04    5229*  	dl ld_47_040
044D09 E6 57 04    5230*  	dl ld_47_044
044D0C 10 58 04    5231*  	dl ld_48_004
044D0F 3A 58 04    5232*  	dl ld_48_020
044D12 64 58 04    5233*  	dl ld_48_032
044D15 8E 58 04    5234*  	dl ld_48_040
044D18 B8 58 04    5235*  	dl ld_48_044
044D1B E2 58 04    5236*  	dl ld_49_004
044D1E 0C 59 04    5237*  	dl ld_49_020
044D21 36 59 04    5238*  	dl ld_49_032
044D24 60 59 04    5239*  	dl ld_49_040
044D27 8A 59 04    5240*  	dl ld_49_044
044D2A B4 59 04    5241*  	dl ld_50_004
044D2D DE 59 04    5242*  	dl ld_50_020
044D30 08 5A 04    5243*  	dl ld_50_032
044D33 32 5A 04    5244*  	dl ld_50_040
044D36 5C 5A 04    5245*  	dl ld_50_044
044D39 86 5A 04    5246*  	dl ld_51_004
044D3C B0 5A 04    5247*  	dl ld_51_020
044D3F DA 5A 04    5248*  	dl ld_51_032
044D42 04 5B 04    5249*  	dl ld_51_040
044D45 2E 5B 04    5250*  	dl ld_51_044
044D48 58 5B 04    5251*  	dl ld_52_004
044D4B 82 5B 04    5252*  	dl ld_52_020
044D4E AC 5B 04    5253*  	dl ld_52_032
044D51 D6 5B 04    5254*  	dl ld_52_040
044D54 00 5C 04    5255*  	dl ld_52_044
044D57 2A 5C 04    5256*  	dl ld_56_004
044D5A 54 5C 04    5257*  	dl ld_56_020
044D5D 7E 5C 04    5258*  	dl ld_56_032
044D60 A8 5C 04    5259*  	dl ld_56_040
044D63 D2 5C 04    5260*  	dl ld_56_044
044D66             5261*  
044D66             5262*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
044D66             5263*  
044D66             5264*  ld_20_004:
044D66 21 FC 5C 04 5265*  	ld hl,F20_004
044D6A 22 63 BC 04 5266*  	ld (cur_filename),hl
044D6E 11 8F C8 04 5267*  	ld de,filedata
044D72 01 00 00 01 5268*  	ld bc,65536
044D76 3E 01       5269*  	ld a,mos_load
044D78 5B CF       5270*  	RST.LIL 08h
044D7A 21 13 02 00 5271*  	ld hl,BUF_20_004
044D7E 01 13 00 00 5272*  	ld bc,19
044D82 11 12 00 00 5273*  	ld de,18
044D86 DD 21 56 01 5274*  	ld ix,342
       00          
044D8B CD DE BD 04 5275*  	call vdu_load_img
044D8F C9          5276*  	ret
044D90             5277*  
044D90             5278*  ld_20_020:
044D90 21 10 5D 04 5279*  	ld hl,F20_020
044D94 22 63 BC 04 5280*  	ld (cur_filename),hl
044D98 11 8F C8 04 5281*  	ld de,filedata
044D9C 01 00 00 01 5282*  	ld bc,65536
044DA0 3E 01       5283*  	ld a,mos_load
044DA2 5B CF       5284*  	RST.LIL 08h
044DA4 21 14 02 00 5285*  	ld hl,BUF_20_020
044DA8 01 17 00 00 5286*  	ld bc,23
044DAC 11 17 00 00 5287*  	ld de,23
044DB0 DD 21 11 02 5288*  	ld ix,529
       00          
044DB5 CD DE BD 04 5289*  	call vdu_load_img
044DB9 C9          5290*  	ret
044DBA             5291*  
044DBA             5292*  ld_20_032:
044DBA 21 24 5D 04 5293*  	ld hl,F20_032
044DBE 22 63 BC 04 5294*  	ld (cur_filename),hl
044DC2 11 8F C8 04 5295*  	ld de,filedata
044DC6 01 00 00 01 5296*  	ld bc,65536
044DCA 3E 01       5297*  	ld a,mos_load
044DCC 5B CF       5298*  	RST.LIL 08h
044DCE 21 15 02 00 5299*  	ld hl,BUF_20_032
044DD2 01 20 00 00 5300*  	ld bc,32
044DD6 11 22 00 00 5301*  	ld de,34
044DDA DD 21 40 04 5302*  	ld ix,1088
       00          
044DDF CD DE BD 04 5303*  	call vdu_load_img
044DE3 C9          5304*  	ret
044DE4             5305*  
044DE4             5306*  ld_20_040:
044DE4 21 38 5D 04 5307*  	ld hl,F20_040
044DE8 22 63 BC 04 5308*  	ld (cur_filename),hl
044DEC 11 8F C8 04 5309*  	ld de,filedata
044DF0 01 00 00 01 5310*  	ld bc,65536
044DF4 3E 01       5311*  	ld a,mos_load
044DF6 5B CF       5312*  	RST.LIL 08h
044DF8 21 16 02 00 5313*  	ld hl,BUF_20_040
044DFC 01 36 00 00 5314*  	ld bc,54
044E00 11 38 00 00 5315*  	ld de,56
044E04 DD 21 D0 0B 5316*  	ld ix,3024
       00          
044E09 CD DE BD 04 5317*  	call vdu_load_img
044E0D C9          5318*  	ret
044E0E             5319*  
044E0E             5320*  ld_20_044:
044E0E 21 4C 5D 04 5321*  	ld hl,F20_044
044E12 22 63 BC 04 5322*  	ld (cur_filename),hl
044E16 11 8F C8 04 5323*  	ld de,filedata
044E1A 01 00 00 01 5324*  	ld bc,65536
044E1E 3E 01       5325*  	ld a,mos_load
044E20 5B CF       5326*  	RST.LIL 08h
044E22 21 17 02 00 5327*  	ld hl,BUF_20_044
044E26 01 6B 00 00 5328*  	ld bc,107
044E2A 11 5B 00 00 5329*  	ld de,91
044E2E DD 21 09 26 5330*  	ld ix,9737
       00          
044E33 CD DE BD 04 5331*  	call vdu_load_img
044E37 C9          5332*  	ret
044E38             5333*  
044E38             5334*  ld_21_004:
044E38 21 60 5D 04 5335*  	ld hl,F21_004
044E3C 22 63 BC 04 5336*  	ld (cur_filename),hl
044E40 11 8F C8 04 5337*  	ld de,filedata
044E44 01 00 00 01 5338*  	ld bc,65536
044E48 3E 01       5339*  	ld a,mos_load
044E4A 5B CF       5340*  	RST.LIL 08h
044E4C 21 18 02 00 5341*  	ld hl,BUF_21_004
044E50 01 0B 00 00 5342*  	ld bc,11
044E54 11 0B 00 00 5343*  	ld de,11
044E58 DD 21 79 00 5344*  	ld ix,121
       00          
044E5D CD DE BD 04 5345*  	call vdu_load_img
044E61 C9          5346*  	ret
044E62             5347*  
044E62             5348*  ld_21_020:
044E62 21 74 5D 04 5349*  	ld hl,F21_020
044E66 22 63 BC 04 5350*  	ld (cur_filename),hl
044E6A 11 8F C8 04 5351*  	ld de,filedata
044E6E 01 00 00 01 5352*  	ld bc,65536
044E72 3E 01       5353*  	ld a,mos_load
044E74 5B CF       5354*  	RST.LIL 08h
044E76 21 19 02 00 5355*  	ld hl,BUF_21_020
044E7A 01 0E 00 00 5356*  	ld bc,14
044E7E 11 0E 00 00 5357*  	ld de,14
044E82 DD 21 C4 00 5358*  	ld ix,196
       00          
044E87 CD DE BD 04 5359*  	call vdu_load_img
044E8B C9          5360*  	ret
044E8C             5361*  
044E8C             5362*  ld_21_032:
044E8C 21 88 5D 04 5363*  	ld hl,F21_032
044E90 22 63 BC 04 5364*  	ld (cur_filename),hl
044E94 11 8F C8 04 5365*  	ld de,filedata
044E98 01 00 00 01 5366*  	ld bc,65536
044E9C 3E 01       5367*  	ld a,mos_load
044E9E 5B CF       5368*  	RST.LIL 08h
044EA0 21 1A 02 00 5369*  	ld hl,BUF_21_032
044EA4 01 14 00 00 5370*  	ld bc,20
044EA8 11 16 00 00 5371*  	ld de,22
044EAC DD 21 B8 01 5372*  	ld ix,440
       00          
044EB1 CD DE BD 04 5373*  	call vdu_load_img
044EB5 C9          5374*  	ret
044EB6             5375*  
044EB6             5376*  ld_21_040:
044EB6 21 9C 5D 04 5377*  	ld hl,F21_040
044EBA 22 63 BC 04 5378*  	ld (cur_filename),hl
044EBE 11 8F C8 04 5379*  	ld de,filedata
044EC2 01 00 00 01 5380*  	ld bc,65536
044EC6 3E 01       5381*  	ld a,mos_load
044EC8 5B CF       5382*  	RST.LIL 08h
044ECA 21 1B 02 00 5383*  	ld hl,BUF_21_040
044ECE 01 21 00 00 5384*  	ld bc,33
044ED2 11 24 00 00 5385*  	ld de,36
044ED6 DD 21 A4 04 5386*  	ld ix,1188
       00          
044EDB CD DE BD 04 5387*  	call vdu_load_img
044EDF C9          5388*  	ret
044EE0             5389*  
044EE0             5390*  ld_21_044:
044EE0 21 B0 5D 04 5391*  	ld hl,F21_044
044EE4 22 63 BC 04 5392*  	ld (cur_filename),hl
044EE8 11 8F C8 04 5393*  	ld de,filedata
044EEC 01 00 00 01 5394*  	ld bc,65536
044EF0 3E 01       5395*  	ld a,mos_load
044EF2 5B CF       5396*  	RST.LIL 08h
044EF4 21 1C 02 00 5397*  	ld hl,BUF_21_044
044EF8 01 64 00 00 5398*  	ld bc,100
044EFC 11 1E 00 00 5399*  	ld de,30
044F00 DD 21 B8 0B 5400*  	ld ix,3000
       00          
044F05 CD DE BD 04 5401*  	call vdu_load_img
044F09 C9          5402*  	ret
044F0A             5403*  
044F0A             5404*  ld_22_004:
044F0A 21 C4 5D 04 5405*  	ld hl,F22_004
044F0E 22 63 BC 04 5406*  	ld (cur_filename),hl
044F12 11 8F C8 04 5407*  	ld de,filedata
044F16 01 00 00 01 5408*  	ld bc,65536
044F1A 3E 01       5409*  	ld a,mos_load
044F1C 5B CF       5410*  	RST.LIL 08h
044F1E 21 1D 02 00 5411*  	ld hl,BUF_22_004
044F22 01 11 00 00 5412*  	ld bc,17
044F26 11 0B 00 00 5413*  	ld de,11
044F2A DD 21 BB 00 5414*  	ld ix,187
       00          
044F2F CD DE BD 04 5415*  	call vdu_load_img
044F33 C9          5416*  	ret
044F34             5417*  
044F34             5418*  ld_22_020:
044F34 21 D8 5D 04 5419*  	ld hl,F22_020
044F38 22 63 BC 04 5420*  	ld (cur_filename),hl
044F3C 11 8F C8 04 5421*  	ld de,filedata
044F40 01 00 00 01 5422*  	ld bc,65536
044F44 3E 01       5423*  	ld a,mos_load
044F46 5B CF       5424*  	RST.LIL 08h
044F48 21 1E 02 00 5425*  	ld hl,BUF_22_020
044F4C 01 16 00 00 5426*  	ld bc,22
044F50 11 0E 00 00 5427*  	ld de,14
044F54 DD 21 34 01 5428*  	ld ix,308
       00          
044F59 CD DE BD 04 5429*  	call vdu_load_img
044F5D C9          5430*  	ret
044F5E             5431*  
044F5E             5432*  ld_22_032:
044F5E 21 EC 5D 04 5433*  	ld hl,F22_032
044F62 22 63 BC 04 5434*  	ld (cur_filename),hl
044F66 11 8F C8 04 5435*  	ld de,filedata
044F6A 01 00 00 01 5436*  	ld bc,65536
044F6E 3E 01       5437*  	ld a,mos_load
044F70 5B CF       5438*  	RST.LIL 08h
044F72 21 1F 02 00 5439*  	ld hl,BUF_22_032
044F76 01 1E 00 00 5440*  	ld bc,30
044F7A 11 16 00 00 5441*  	ld de,22
044F7E DD 21 94 02 5442*  	ld ix,660
       00          
044F83 CD DE BD 04 5443*  	call vdu_load_img
044F87 C9          5444*  	ret
044F88             5445*  
044F88             5446*  ld_22_040:
044F88 21 00 5E 04 5447*  	ld hl,F22_040
044F8C 22 63 BC 04 5448*  	ld (cur_filename),hl
044F90 11 8F C8 04 5449*  	ld de,filedata
044F94 01 00 00 01 5450*  	ld bc,65536
044F98 3E 01       5451*  	ld a,mos_load
044F9A 5B CF       5452*  	RST.LIL 08h
044F9C 21 20 02 00 5453*  	ld hl,BUF_22_040
044FA0 01 33 00 00 5454*  	ld bc,51
044FA4 11 24 00 00 5455*  	ld de,36
044FA8 DD 21 2C 07 5456*  	ld ix,1836
       00          
044FAD CD DE BD 04 5457*  	call vdu_load_img
044FB1 C9          5458*  	ret
044FB2             5459*  
044FB2             5460*  ld_22_044:
044FB2 21 14 5E 04 5461*  	ld hl,F22_044
044FB6 22 63 BC 04 5462*  	ld (cur_filename),hl
044FBA 11 8F C8 04 5463*  	ld de,filedata
044FBE 01 00 00 01 5464*  	ld bc,65536
044FC2 3E 01       5465*  	ld a,mos_load
044FC4 5B CF       5466*  	RST.LIL 08h
044FC6 21 21 02 00 5467*  	ld hl,BUF_22_044
044FCA 01 96 00 00 5468*  	ld bc,150
044FCE 11 1E 00 00 5469*  	ld de,30
044FD2 DD 21 94 11 5470*  	ld ix,4500
       00          
044FD7 CD DE BD 04 5471*  	call vdu_load_img
044FDB C9          5472*  	ret
044FDC             5473*  
044FDC             5474*  ld_23_004:
044FDC 21 28 5E 04 5475*  	ld hl,F23_004
044FE0 22 63 BC 04 5476*  	ld (cur_filename),hl
044FE4 11 8F C8 04 5477*  	ld de,filedata
044FE8 01 00 00 01 5478*  	ld bc,65536
044FEC 3E 01       5479*  	ld a,mos_load
044FEE 5B CF       5480*  	RST.LIL 08h
044FF0 21 22 02 00 5481*  	ld hl,BUF_23_004
044FF4 01 0E 00 00 5482*  	ld bc,14
044FF8 11 06 00 00 5483*  	ld de,6
044FFC DD 21 54 00 5484*  	ld ix,84
       00          
045001 CD DE BD 04 5485*  	call vdu_load_img
045005 C9          5486*  	ret
045006             5487*  
045006             5488*  ld_23_020:
045006 21 3C 5E 04 5489*  	ld hl,F23_020
04500A 22 63 BC 04 5490*  	ld (cur_filename),hl
04500E 11 8F C8 04 5491*  	ld de,filedata
045012 01 00 00 01 5492*  	ld bc,65536
045016 3E 01       5493*  	ld a,mos_load
045018 5B CF       5494*  	RST.LIL 08h
04501A 21 23 02 00 5495*  	ld hl,BUF_23_020
04501E 01 11 00 00 5496*  	ld bc,17
045022 11 08 00 00 5497*  	ld de,8
045026 DD 21 88 00 5498*  	ld ix,136
       00          
04502B CD DE BD 04 5499*  	call vdu_load_img
04502F C9          5500*  	ret
045030             5501*  
045030             5502*  ld_23_032:
045030 21 50 5E 04 5503*  	ld hl,F23_032
045034 22 63 BC 04 5504*  	ld (cur_filename),hl
045038 11 8F C8 04 5505*  	ld de,filedata
04503C 01 00 00 01 5506*  	ld bc,65536
045040 3E 01       5507*  	ld a,mos_load
045042 5B CF       5508*  	RST.LIL 08h
045044 21 24 02 00 5509*  	ld hl,BUF_23_032
045048 01 19 00 00 5510*  	ld bc,25
04504C 11 0B 00 00 5511*  	ld de,11
045050 DD 21 13 01 5512*  	ld ix,275
       00          
045055 CD DE BD 04 5513*  	call vdu_load_img
045059 C9          5514*  	ret
04505A             5515*  
04505A             5516*  ld_23_040:
04505A 21 64 5E 04 5517*  	ld hl,F23_040
04505E 22 63 BC 04 5518*  	ld (cur_filename),hl
045062 11 8F C8 04 5519*  	ld de,filedata
045066 01 00 00 01 5520*  	ld bc,65536
04506A 3E 01       5521*  	ld a,mos_load
04506C 5B CF       5522*  	RST.LIL 08h
04506E 21 25 02 00 5523*  	ld hl,BUF_23_040
045072 01 28 00 00 5524*  	ld bc,40
045076 11 12 00 00 5525*  	ld de,18
04507A DD 21 D0 02 5526*  	ld ix,720
       00          
04507F CD DE BD 04 5527*  	call vdu_load_img
045083 C9          5528*  	ret
045084             5529*  
045084             5530*  ld_23_044:
045084 21 78 5E 04 5531*  	ld hl,F23_044
045088 22 63 BC 04 5532*  	ld (cur_filename),hl
04508C 11 8F C8 04 5533*  	ld de,filedata
045090 01 00 00 01 5534*  	ld bc,65536
045094 3E 01       5535*  	ld a,mos_load
045096 5B CF       5536*  	RST.LIL 08h
045098 21 26 02 00 5537*  	ld hl,BUF_23_044
04509C 01 01 00 00 5538*  	ld bc,1
0450A0 11 01 00 00 5539*  	ld de,1
0450A4 DD 21 01 00 5540*  	ld ix,1
       00          
0450A9 CD DE BD 04 5541*  	call vdu_load_img
0450AD C9          5542*  	ret
0450AE             5543*  
0450AE             5544*  ld_24_004:
0450AE 21 8C 5E 04 5545*  	ld hl,F24_004
0450B2 22 63 BC 04 5546*  	ld (cur_filename),hl
0450B6 11 8F C8 04 5547*  	ld de,filedata
0450BA 01 00 00 01 5548*  	ld bc,65536
0450BE 3E 01       5549*  	ld a,mos_load
0450C0 5B CF       5550*  	RST.LIL 08h
0450C2 21 27 02 00 5551*  	ld hl,BUF_24_004
0450C6 01 0B 00 00 5552*  	ld bc,11
0450CA 11 0B 00 00 5553*  	ld de,11
0450CE DD 21 79 00 5554*  	ld ix,121
       00          
0450D3 CD DE BD 04 5555*  	call vdu_load_img
0450D7 C9          5556*  	ret
0450D8             5557*  
0450D8             5558*  ld_24_020:
0450D8 21 A0 5E 04 5559*  	ld hl,F24_020
0450DC 22 63 BC 04 5560*  	ld (cur_filename),hl
0450E0 11 8F C8 04 5561*  	ld de,filedata
0450E4 01 00 00 01 5562*  	ld bc,65536
0450E8 3E 01       5563*  	ld a,mos_load
0450EA 5B CF       5564*  	RST.LIL 08h
0450EC 21 28 02 00 5565*  	ld hl,BUF_24_020
0450F0 01 0E 00 00 5566*  	ld bc,14
0450F4 11 0E 00 00 5567*  	ld de,14
0450F8 DD 21 C4 00 5568*  	ld ix,196
       00          
0450FD CD DE BD 04 5569*  	call vdu_load_img
045101 C9          5570*  	ret
045102             5571*  
045102             5572*  ld_24_032:
045102 21 B4 5E 04 5573*  	ld hl,F24_032
045106 22 63 BC 04 5574*  	ld (cur_filename),hl
04510A 11 8F C8 04 5575*  	ld de,filedata
04510E 01 00 00 01 5576*  	ld bc,65536
045112 3E 01       5577*  	ld a,mos_load
045114 5B CF       5578*  	RST.LIL 08h
045116 21 29 02 00 5579*  	ld hl,BUF_24_032
04511A 01 14 00 00 5580*  	ld bc,20
04511E 11 16 00 00 5581*  	ld de,22
045122 DD 21 B8 01 5582*  	ld ix,440
       00          
045127 CD DE BD 04 5583*  	call vdu_load_img
04512B C9          5584*  	ret
04512C             5585*  
04512C             5586*  ld_24_040:
04512C 21 C8 5E 04 5587*  	ld hl,F24_040
045130 22 63 BC 04 5588*  	ld (cur_filename),hl
045134 11 8F C8 04 5589*  	ld de,filedata
045138 01 00 00 01 5590*  	ld bc,65536
04513C 3E 01       5591*  	ld a,mos_load
04513E 5B CF       5592*  	RST.LIL 08h
045140 21 2A 02 00 5593*  	ld hl,BUF_24_040
045144 01 21 00 00 5594*  	ld bc,33
045148 11 24 00 00 5595*  	ld de,36
04514C DD 21 A4 04 5596*  	ld ix,1188
       00          
045151 CD DE BD 04 5597*  	call vdu_load_img
045155 C9          5598*  	ret
045156             5599*  
045156             5600*  ld_24_044:
045156 21 DC 5E 04 5601*  	ld hl,F24_044
04515A 22 63 BC 04 5602*  	ld (cur_filename),hl
04515E 11 8F C8 04 5603*  	ld de,filedata
045162 01 00 00 01 5604*  	ld bc,65536
045166 3E 01       5605*  	ld a,mos_load
045168 5B CF       5606*  	RST.LIL 08h
04516A 21 2B 02 00 5607*  	ld hl,BUF_24_044
04516E 01 64 00 00 5608*  	ld bc,100
045172 11 1E 00 00 5609*  	ld de,30
045176 DD 21 B8 0B 5610*  	ld ix,3000
       00          
04517B CD DE BD 04 5611*  	call vdu_load_img
04517F C9          5612*  	ret
045180             5613*  
045180             5614*  ld_40_004:
045180 21 F0 5E 04 5615*  	ld hl,F40_004
045184 22 63 BC 04 5616*  	ld (cur_filename),hl
045188 11 8F C8 04 5617*  	ld de,filedata
04518C 01 00 00 01 5618*  	ld bc,65536
045190 3E 01       5619*  	ld a,mos_load
045192 5B CF       5620*  	RST.LIL 08h
045194 21 2C 02 00 5621*  	ld hl,BUF_40_004
045198 01 0E 00 00 5622*  	ld bc,14
04519C 11 07 00 00 5623*  	ld de,7
0451A0 DD 21 62 00 5624*  	ld ix,98
       00          
0451A5 CD DE BD 04 5625*  	call vdu_load_img
0451A9 C9          5626*  	ret
0451AA             5627*  
0451AA             5628*  ld_40_020:
0451AA 21 04 5F 04 5629*  	ld hl,F40_020
0451AE 22 63 BC 04 5630*  	ld (cur_filename),hl
0451B2 11 8F C8 04 5631*  	ld de,filedata
0451B6 01 00 00 01 5632*  	ld bc,65536
0451BA 3E 01       5633*  	ld a,mos_load
0451BC 5B CF       5634*  	RST.LIL 08h
0451BE 21 2D 02 00 5635*  	ld hl,BUF_40_020
0451C2 01 12 00 00 5636*  	ld bc,18
0451C6 11 0A 00 00 5637*  	ld de,10
0451CA DD 21 B4 00 5638*  	ld ix,180
       00          
0451CF CD DE BD 04 5639*  	call vdu_load_img
0451D3 C9          5640*  	ret
0451D4             5641*  
0451D4             5642*  ld_40_032:
0451D4 21 18 5F 04 5643*  	ld hl,F40_032
0451D8 22 63 BC 04 5644*  	ld (cur_filename),hl
0451DC 11 8F C8 04 5645*  	ld de,filedata
0451E0 01 00 00 01 5646*  	ld bc,65536
0451E4 3E 01       5647*  	ld a,mos_load
0451E6 5B CF       5648*  	RST.LIL 08h
0451E8 21 2E 02 00 5649*  	ld hl,BUF_40_032
0451EC 01 1A 00 00 5650*  	ld bc,26
0451F0 11 0D 00 00 5651*  	ld de,13
0451F4 DD 21 52 01 5652*  	ld ix,338
       00          
0451F9 CD DE BD 04 5653*  	call vdu_load_img
0451FD C9          5654*  	ret
0451FE             5655*  
0451FE             5656*  ld_40_040:
0451FE 21 2C 5F 04 5657*  	ld hl,F40_040
045202 22 63 BC 04 5658*  	ld (cur_filename),hl
045206 11 8F C8 04 5659*  	ld de,filedata
04520A 01 00 00 01 5660*  	ld bc,65536
04520E 3E 01       5661*  	ld a,mos_load
045210 5B CF       5662*  	RST.LIL 08h
045212 21 2F 02 00 5663*  	ld hl,BUF_40_040
045216 01 2B 00 00 5664*  	ld bc,43
04521A 11 17 00 00 5665*  	ld de,23
04521E DD 21 DD 03 5666*  	ld ix,989
       00          
045223 CD DE BD 04 5667*  	call vdu_load_img
045227 C9          5668*  	ret
045228             5669*  
045228             5670*  ld_40_044:
045228 21 40 5F 04 5671*  	ld hl,F40_044
04522C 22 63 BC 04 5672*  	ld (cur_filename),hl
045230 11 8F C8 04 5673*  	ld de,filedata
045234 01 00 00 01 5674*  	ld bc,65536
045238 3E 01       5675*  	ld a,mos_load
04523A 5B CF       5676*  	RST.LIL 08h
04523C 21 30 02 00 5677*  	ld hl,BUF_40_044
045240 01 01 00 00 5678*  	ld bc,1
045244 11 01 00 00 5679*  	ld de,1
045248 DD 21 01 00 5680*  	ld ix,1
       00          
04524D CD DE BD 04 5681*  	call vdu_load_img
045251 C9          5682*  	ret
045252             5683*  
045252             5684*  ld_41_004:
045252 21 54 5F 04 5685*  	ld hl,F41_004
045256 22 63 BC 04 5686*  	ld (cur_filename),hl
04525A 11 8F C8 04 5687*  	ld de,filedata
04525E 01 00 00 01 5688*  	ld bc,65536
045262 3E 01       5689*  	ld a,mos_load
045264 5B CF       5690*  	RST.LIL 08h
045266 21 31 02 00 5691*  	ld hl,BUF_41_004
04526A 01 0B 00 00 5692*  	ld bc,11
04526E 11 0B 00 00 5693*  	ld de,11
045272 DD 21 79 00 5694*  	ld ix,121
       00          
045277 CD DE BD 04 5695*  	call vdu_load_img
04527B C9          5696*  	ret
04527C             5697*  
04527C             5698*  ld_41_020:
04527C 21 68 5F 04 5699*  	ld hl,F41_020
045280 22 63 BC 04 5700*  	ld (cur_filename),hl
045284 11 8F C8 04 5701*  	ld de,filedata
045288 01 00 00 01 5702*  	ld bc,65536
04528C 3E 01       5703*  	ld a,mos_load
04528E 5B CF       5704*  	RST.LIL 08h
045290 21 32 02 00 5705*  	ld hl,BUF_41_020
045294 01 10 00 00 5706*  	ld bc,16
045298 11 0E 00 00 5707*  	ld de,14
04529C DD 21 E0 00 5708*  	ld ix,224
       00          
0452A1 CD DE BD 04 5709*  	call vdu_load_img
0452A5 C9          5710*  	ret
0452A6             5711*  
0452A6             5712*  ld_41_032:
0452A6 21 7C 5F 04 5713*  	ld hl,F41_032
0452AA 22 63 BC 04 5714*  	ld (cur_filename),hl
0452AE 11 8F C8 04 5715*  	ld de,filedata
0452B2 01 00 00 01 5716*  	ld bc,65536
0452B6 3E 01       5717*  	ld a,mos_load
0452B8 5B CF       5718*  	RST.LIL 08h
0452BA 21 33 02 00 5719*  	ld hl,BUF_41_032
0452BE 01 16 00 00 5720*  	ld bc,22
0452C2 11 14 00 00 5721*  	ld de,20
0452C6 DD 21 B8 01 5722*  	ld ix,440
       00          
0452CB CD DE BD 04 5723*  	call vdu_load_img
0452CF C9          5724*  	ret
0452D0             5725*  
0452D0             5726*  ld_41_040:
0452D0 21 90 5F 04 5727*  	ld hl,F41_040
0452D4 22 63 BC 04 5728*  	ld (cur_filename),hl
0452D8 11 8F C8 04 5729*  	ld de,filedata
0452DC 01 00 00 01 5730*  	ld bc,65536
0452E0 3E 01       5731*  	ld a,mos_load
0452E2 5B CF       5732*  	RST.LIL 08h
0452E4 21 34 02 00 5733*  	ld hl,BUF_41_040
0452E8 01 25 00 00 5734*  	ld bc,37
0452EC 11 22 00 00 5735*  	ld de,34
0452F0 DD 21 EA 04 5736*  	ld ix,1258
       00          
0452F5 CD DE BD 04 5737*  	call vdu_load_img
0452F9 C9          5738*  	ret
0452FA             5739*  
0452FA             5740*  ld_41_044:
0452FA 21 A4 5F 04 5741*  	ld hl,F41_044
0452FE 22 63 BC 04 5742*  	ld (cur_filename),hl
045302 11 8F C8 04 5743*  	ld de,filedata
045306 01 00 00 01 5744*  	ld bc,65536
04530A 3E 01       5745*  	ld a,mos_load
04530C 5B CF       5746*  	RST.LIL 08h
04530E 21 35 02 00 5747*  	ld hl,BUF_41_044
045312 01 23 00 00 5748*  	ld bc,35
045316 11 19 00 00 5749*  	ld de,25
04531A DD 21 6B 03 5750*  	ld ix,875
       00          
04531F CD DE BD 04 5751*  	call vdu_load_img
045323 C9          5752*  	ret
045324             5753*  
045324             5754*  ld_42_004:
045324 21 B8 5F 04 5755*  	ld hl,F42_004
045328 22 63 BC 04 5756*  	ld (cur_filename),hl
04532C 11 8F C8 04 5757*  	ld de,filedata
045330 01 00 00 01 5758*  	ld bc,65536
045334 3E 01       5759*  	ld a,mos_load
045336 5B CF       5760*  	RST.LIL 08h
045338 21 36 02 00 5761*  	ld hl,BUF_42_004
04533C 01 0A 00 00 5762*  	ld bc,10
045340 11 09 00 00 5763*  	ld de,9
045344 DD 21 5A 00 5764*  	ld ix,90
       00          
045349 CD DE BD 04 5765*  	call vdu_load_img
04534D C9          5766*  	ret
04534E             5767*  
04534E             5768*  ld_42_020:
04534E 21 CC 5F 04 5769*  	ld hl,F42_020
045352 22 63 BC 04 5770*  	ld (cur_filename),hl
045356 11 8F C8 04 5771*  	ld de,filedata
04535A 01 00 00 01 5772*  	ld bc,65536
04535E 3E 01       5773*  	ld a,mos_load
045360 5B CF       5774*  	RST.LIL 08h
045362 21 37 02 00 5775*  	ld hl,BUF_42_020
045366 01 0E 00 00 5776*  	ld bc,14
04536A 11 0B 00 00 5777*  	ld de,11
04536E DD 21 9A 00 5778*  	ld ix,154
       00          
045373 CD DE BD 04 5779*  	call vdu_load_img
045377 C9          5780*  	ret
045378             5781*  
045378             5782*  ld_42_032:
045378 21 E0 5F 04 5783*  	ld hl,F42_032
04537C 22 63 BC 04 5784*  	ld (cur_filename),hl
045380 11 8F C8 04 5785*  	ld de,filedata
045384 01 00 00 01 5786*  	ld bc,65536
045388 3E 01       5787*  	ld a,mos_load
04538A 5B CF       5788*  	RST.LIL 08h
04538C 21 38 02 00 5789*  	ld hl,BUF_42_032
045390 01 13 00 00 5790*  	ld bc,19
045394 11 10 00 00 5791*  	ld de,16
045398 DD 21 30 01 5792*  	ld ix,304
       00          
04539D CD DE BD 04 5793*  	call vdu_load_img
0453A1 C9          5794*  	ret
0453A2             5795*  
0453A2             5796*  ld_42_040:
0453A2 21 F4 5F 04 5797*  	ld hl,F42_040
0453A6 22 63 BC 04 5798*  	ld (cur_filename),hl
0453AA 11 8F C8 04 5799*  	ld de,filedata
0453AE 01 00 00 01 5800*  	ld bc,65536
0453B2 3E 01       5801*  	ld a,mos_load
0453B4 5B CF       5802*  	RST.LIL 08h
0453B6 21 39 02 00 5803*  	ld hl,BUF_42_040
0453BA 01 20 00 00 5804*  	ld bc,32
0453BE 11 1B 00 00 5805*  	ld de,27
0453C2 DD 21 60 03 5806*  	ld ix,864
       00          
0453C7 CD DE BD 04 5807*  	call vdu_load_img
0453CB C9          5808*  	ret
0453CC             5809*  
0453CC             5810*  ld_42_044:
0453CC 21 08 60 04 5811*  	ld hl,F42_044
0453D0 22 63 BC 04 5812*  	ld (cur_filename),hl
0453D4 11 8F C8 04 5813*  	ld de,filedata
0453D8 01 00 00 01 5814*  	ld bc,65536
0453DC 3E 01       5815*  	ld a,mos_load
0453DE 5B CF       5816*  	RST.LIL 08h
0453E0 21 3A 02 00 5817*  	ld hl,BUF_42_044
0453E4 01 3F 00 00 5818*  	ld bc,63
0453E8 11 04 00 00 5819*  	ld de,4
0453EC DD 21 FC 00 5820*  	ld ix,252
       00          
0453F1 CD DE BD 04 5821*  	call vdu_load_img
0453F5 C9          5822*  	ret
0453F6             5823*  
0453F6             5824*  ld_43_004:
0453F6 21 1C 60 04 5825*  	ld hl,F43_004
0453FA 22 63 BC 04 5826*  	ld (cur_filename),hl
0453FE 11 8F C8 04 5827*  	ld de,filedata
045402 01 00 00 01 5828*  	ld bc,65536
045406 3E 01       5829*  	ld a,mos_load
045408 5B CF       5830*  	RST.LIL 08h
04540A 21 3B 02 00 5831*  	ld hl,BUF_43_004
04540E 01 0B 00 00 5832*  	ld bc,11
045412 11 04 00 00 5833*  	ld de,4
045416 DD 21 2C 00 5834*  	ld ix,44
       00          
04541B CD DE BD 04 5835*  	call vdu_load_img
04541F C9          5836*  	ret
045420             5837*  
045420             5838*  ld_43_020:
045420 21 30 60 04 5839*  	ld hl,F43_020
045424 22 63 BC 04 5840*  	ld (cur_filename),hl
045428 11 8F C8 04 5841*  	ld de,filedata
04542C 01 00 00 01 5842*  	ld bc,65536
045430 3E 01       5843*  	ld a,mos_load
045432 5B CF       5844*  	RST.LIL 08h
045434 21 3C 02 00 5845*  	ld hl,BUF_43_020
045438 01 0F 00 00 5846*  	ld bc,15
04543C 11 04 00 00 5847*  	ld de,4
045440 DD 21 3C 00 5848*  	ld ix,60
       00          
045445 CD DE BD 04 5849*  	call vdu_load_img
045449 C9          5850*  	ret
04544A             5851*  
04544A             5852*  ld_43_032:
04544A 21 44 60 04 5853*  	ld hl,F43_032
04544E 22 63 BC 04 5854*  	ld (cur_filename),hl
045452 11 8F C8 04 5855*  	ld de,filedata
045456 01 00 00 01 5856*  	ld bc,65536
04545A 3E 01       5857*  	ld a,mos_load
04545C 5B CF       5858*  	RST.LIL 08h
04545E 21 3D 02 00 5859*  	ld hl,BUF_43_032
045462 01 15 00 00 5860*  	ld bc,21
045466 11 07 00 00 5861*  	ld de,7
04546A DD 21 93 00 5862*  	ld ix,147
       00          
04546F CD DE BD 04 5863*  	call vdu_load_img
045473 C9          5864*  	ret
045474             5865*  
045474             5866*  ld_43_040:
045474 21 58 60 04 5867*  	ld hl,F43_040
045478 22 63 BC 04 5868*  	ld (cur_filename),hl
04547C 11 8F C8 04 5869*  	ld de,filedata
045480 01 00 00 01 5870*  	ld bc,65536
045484 3E 01       5871*  	ld a,mos_load
045486 5B CF       5872*  	RST.LIL 08h
045488 21 3E 02 00 5873*  	ld hl,BUF_43_040
04548C 01 23 00 00 5874*  	ld bc,35
045490 11 0D 00 00 5875*  	ld de,13
045494 DD 21 C7 01 5876*  	ld ix,455
       00          
045499 CD DE BD 04 5877*  	call vdu_load_img
04549D C9          5878*  	ret
04549E             5879*  
04549E             5880*  ld_43_044:
04549E 21 6C 60 04 5881*  	ld hl,F43_044
0454A2 22 63 BC 04 5882*  	ld (cur_filename),hl
0454A6 11 8F C8 04 5883*  	ld de,filedata
0454AA 01 00 00 01 5884*  	ld bc,65536
0454AE 3E 01       5885*  	ld a,mos_load
0454B0 5B CF       5886*  	RST.LIL 08h
0454B2 21 3F 02 00 5887*  	ld hl,BUF_43_044
0454B6 01 01 00 00 5888*  	ld bc,1
0454BA 11 01 00 00 5889*  	ld de,1
0454BE DD 21 01 00 5890*  	ld ix,1
       00          
0454C3 CD DE BD 04 5891*  	call vdu_load_img
0454C7 C9          5892*  	ret
0454C8             5893*  
0454C8             5894*  ld_44_004:
0454C8 21 80 60 04 5895*  	ld hl,F44_004
0454CC 22 63 BC 04 5896*  	ld (cur_filename),hl
0454D0 11 8F C8 04 5897*  	ld de,filedata
0454D4 01 00 00 01 5898*  	ld bc,65536
0454D8 3E 01       5899*  	ld a,mos_load
0454DA 5B CF       5900*  	RST.LIL 08h
0454DC 21 40 02 00 5901*  	ld hl,BUF_44_004
0454E0 01 05 00 00 5902*  	ld bc,5
0454E4 11 04 00 00 5903*  	ld de,4
0454E8 DD 21 14 00 5904*  	ld ix,20
       00          
0454ED CD DE BD 04 5905*  	call vdu_load_img
0454F1 C9          5906*  	ret
0454F2             5907*  
0454F2             5908*  ld_44_020:
0454F2 21 94 60 04 5909*  	ld hl,F44_020
0454F6 22 63 BC 04 5910*  	ld (cur_filename),hl
0454FA 11 8F C8 04 5911*  	ld de,filedata
0454FE 01 00 00 01 5912*  	ld bc,65536
045502 3E 01       5913*  	ld a,mos_load
045504 5B CF       5914*  	RST.LIL 08h
045506 21 41 02 00 5915*  	ld hl,BUF_44_020
04550A 01 08 00 00 5916*  	ld bc,8
04550E 11 06 00 00 5917*  	ld de,6
045512 DD 21 30 00 5918*  	ld ix,48
       00          
045517 CD DE BD 04 5919*  	call vdu_load_img
04551B C9          5920*  	ret
04551C             5921*  
04551C             5922*  ld_44_032:
04551C 21 A8 60 04 5923*  	ld hl,F44_032
045520 22 63 BC 04 5924*  	ld (cur_filename),hl
045524 11 8F C8 04 5925*  	ld de,filedata
045528 01 00 00 01 5926*  	ld bc,65536
04552C 3E 01       5927*  	ld a,mos_load
04552E 5B CF       5928*  	RST.LIL 08h
045530 21 42 02 00 5929*  	ld hl,BUF_44_032
045534 01 0D 00 00 5930*  	ld bc,13
045538 11 0A 00 00 5931*  	ld de,10
04553C DD 21 82 00 5932*  	ld ix,130
       00          
045541 CD DE BD 04 5933*  	call vdu_load_img
045545 C9          5934*  	ret
045546             5935*  
045546             5936*  ld_44_040:
045546 21 BC 60 04 5937*  	ld hl,F44_040
04554A 22 63 BC 04 5938*  	ld (cur_filename),hl
04554E 11 8F C8 04 5939*  	ld de,filedata
045552 01 00 00 01 5940*  	ld bc,65536
045556 3E 01       5941*  	ld a,mos_load
045558 5B CF       5942*  	RST.LIL 08h
04555A 21 43 02 00 5943*  	ld hl,BUF_44_040
04555E 01 14 00 00 5944*  	ld bc,20
045562 11 0F 00 00 5945*  	ld de,15
045566 DD 21 2C 01 5946*  	ld ix,300
       00          
04556B CD DE BD 04 5947*  	call vdu_load_img
04556F C9          5948*  	ret
045570             5949*  
045570             5950*  ld_44_044:
045570 21 D0 60 04 5951*  	ld hl,F44_044
045574 22 63 BC 04 5952*  	ld (cur_filename),hl
045578 11 8F C8 04 5953*  	ld de,filedata
04557C 01 00 00 01 5954*  	ld bc,65536
045580 3E 01       5955*  	ld a,mos_load
045582 5B CF       5956*  	RST.LIL 08h
045584 21 44 02 00 5957*  	ld hl,BUF_44_044
045588 01 01 00 00 5958*  	ld bc,1
04558C 11 01 00 00 5959*  	ld de,1
045590 DD 21 01 00 5960*  	ld ix,1
       00          
045595 CD DE BD 04 5961*  	call vdu_load_img
045599 C9          5962*  	ret
04559A             5963*  
04559A             5964*  ld_45_004:
04559A 21 E4 60 04 5965*  	ld hl,F45_004
04559E 22 63 BC 04 5966*  	ld (cur_filename),hl
0455A2 11 8F C8 04 5967*  	ld de,filedata
0455A6 01 00 00 01 5968*  	ld bc,65536
0455AA 3E 01       5969*  	ld a,mos_load
0455AC 5B CF       5970*  	RST.LIL 08h
0455AE 21 45 02 00 5971*  	ld hl,BUF_45_004
0455B2 01 10 00 00 5972*  	ld bc,16
0455B6 11 0A 00 00 5973*  	ld de,10
0455BA DD 21 A0 00 5974*  	ld ix,160
       00          
0455BF CD DE BD 04 5975*  	call vdu_load_img
0455C3 C9          5976*  	ret
0455C4             5977*  
0455C4             5978*  ld_45_020:
0455C4 21 F8 60 04 5979*  	ld hl,F45_020
0455C8 22 63 BC 04 5980*  	ld (cur_filename),hl
0455CC 11 8F C8 04 5981*  	ld de,filedata
0455D0 01 00 00 01 5982*  	ld bc,65536
0455D4 3E 01       5983*  	ld a,mos_load
0455D6 5B CF       5984*  	RST.LIL 08h
0455D8 21 46 02 00 5985*  	ld hl,BUF_45_020
0455DC 01 14 00 00 5986*  	ld bc,20
0455E0 11 0D 00 00 5987*  	ld de,13
0455E4 DD 21 04 01 5988*  	ld ix,260
       00          
0455E9 CD DE BD 04 5989*  	call vdu_load_img
0455ED C9          5990*  	ret
0455EE             5991*  
0455EE             5992*  ld_45_032:
0455EE 21 0C 61 04 5993*  	ld hl,F45_032
0455F2 22 63 BC 04 5994*  	ld (cur_filename),hl
0455F6 11 8F C8 04 5995*  	ld de,filedata
0455FA 01 00 00 01 5996*  	ld bc,65536
0455FE 3E 01       5997*  	ld a,mos_load
045600 5B CF       5998*  	RST.LIL 08h
045602 21 47 02 00 5999*  	ld hl,BUF_45_032
045606 01 1D 00 00 6000*  	ld bc,29
04560A 11 12 00 00 6001*  	ld de,18
04560E DD 21 0A 02 6002*  	ld ix,522
       00          
045613 CD DE BD 04 6003*  	call vdu_load_img
045617 C9          6004*  	ret
045618             6005*  
045618             6006*  ld_45_040:
045618 21 20 61 04 6007*  	ld hl,F45_040
04561C 22 63 BC 04 6008*  	ld (cur_filename),hl
045620 11 8F C8 04 6009*  	ld de,filedata
045624 01 00 00 01 6010*  	ld bc,65536
045628 3E 01       6011*  	ld a,mos_load
04562A 5B CF       6012*  	RST.LIL 08h
04562C 21 48 02 00 6013*  	ld hl,BUF_45_040
045630 01 30 00 00 6014*  	ld bc,48
045634 11 21 00 00 6015*  	ld de,33
045638 DD 21 30 06 6016*  	ld ix,1584
       00          
04563D CD DE BD 04 6017*  	call vdu_load_img
045641 C9          6018*  	ret
045642             6019*  
045642             6020*  ld_45_044:
045642 21 34 61 04 6021*  	ld hl,F45_044
045646 22 63 BC 04 6022*  	ld (cur_filename),hl
04564A 11 8F C8 04 6023*  	ld de,filedata
04564E 01 00 00 01 6024*  	ld bc,65536
045652 3E 01       6025*  	ld a,mos_load
045654 5B CF       6026*  	RST.LIL 08h
045656 21 49 02 00 6027*  	ld hl,BUF_45_044
04565A 01 75 00 00 6028*  	ld bc,117
04565E 11 13 00 00 6029*  	ld de,19
045662 DD 21 AF 08 6030*  	ld ix,2223
       00          
045667 CD DE BD 04 6031*  	call vdu_load_img
04566B C9          6032*  	ret
04566C             6033*  
04566C             6034*  ld_46_004:
04566C 21 48 61 04 6035*  	ld hl,F46_004
045670 22 63 BC 04 6036*  	ld (cur_filename),hl
045674 11 8F C8 04 6037*  	ld de,filedata
045678 01 00 00 01 6038*  	ld bc,65536
04567C 3E 01       6039*  	ld a,mos_load
04567E 5B CF       6040*  	RST.LIL 08h
045680 21 4A 02 00 6041*  	ld hl,BUF_46_004
045684 01 10 00 00 6042*  	ld bc,16
045688 11 08 00 00 6043*  	ld de,8
04568C DD 21 80 00 6044*  	ld ix,128
       00          
045691 CD DE BD 04 6045*  	call vdu_load_img
045695 C9          6046*  	ret
045696             6047*  
045696             6048*  ld_46_020:
045696 21 5C 61 04 6049*  	ld hl,F46_020
04569A 22 63 BC 04 6050*  	ld (cur_filename),hl
04569E 11 8F C8 04 6051*  	ld de,filedata
0456A2 01 00 00 01 6052*  	ld bc,65536
0456A6 3E 01       6053*  	ld a,mos_load
0456A8 5B CF       6054*  	RST.LIL 08h
0456AA 21 4B 02 00 6055*  	ld hl,BUF_46_020
0456AE 01 14 00 00 6056*  	ld bc,20
0456B2 11 0B 00 00 6057*  	ld de,11
0456B6 DD 21 DC 00 6058*  	ld ix,220
       00          
0456BB CD DE BD 04 6059*  	call vdu_load_img
0456BF C9          6060*  	ret
0456C0             6061*  
0456C0             6062*  ld_46_032:
0456C0 21 70 61 04 6063*  	ld hl,F46_032
0456C4 22 63 BC 04 6064*  	ld (cur_filename),hl
0456C8 11 8F C8 04 6065*  	ld de,filedata
0456CC 01 00 00 01 6066*  	ld bc,65536
0456D0 3E 01       6067*  	ld a,mos_load
0456D2 5B CF       6068*  	RST.LIL 08h
0456D4 21 4C 02 00 6069*  	ld hl,BUF_46_032
0456D8 01 1D 00 00 6070*  	ld bc,29
0456DC 11 0F 00 00 6071*  	ld de,15
0456E0 DD 21 B3 01 6072*  	ld ix,435
       00          
0456E5 CD DE BD 04 6073*  	call vdu_load_img
0456E9 C9          6074*  	ret
0456EA             6075*  
0456EA             6076*  ld_46_040:
0456EA 21 84 61 04 6077*  	ld hl,F46_040
0456EE 22 63 BC 04 6078*  	ld (cur_filename),hl
0456F2 11 8F C8 04 6079*  	ld de,filedata
0456F6 01 00 00 01 6080*  	ld bc,65536
0456FA 3E 01       6081*  	ld a,mos_load
0456FC 5B CF       6082*  	RST.LIL 08h
0456FE 21 4D 02 00 6083*  	ld hl,BUF_46_040
045702 01 30 00 00 6084*  	ld bc,48
045706 11 1B 00 00 6085*  	ld de,27
04570A DD 21 10 05 6086*  	ld ix,1296
       00          
04570F CD DE BD 04 6087*  	call vdu_load_img
045713 C9          6088*  	ret
045714             6089*  
045714             6090*  ld_46_044:
045714 21 98 61 04 6091*  	ld hl,F46_044
045718 22 63 BC 04 6092*  	ld (cur_filename),hl
04571C 11 8F C8 04 6093*  	ld de,filedata
045720 01 00 00 01 6094*  	ld bc,65536
045724 3E 01       6095*  	ld a,mos_load
045726 5B CF       6096*  	RST.LIL 08h
045728 21 4E 02 00 6097*  	ld hl,BUF_46_044
04572C 01 51 00 00 6098*  	ld bc,81
045730 11 01 00 00 6099*  	ld de,1
045734 DD 21 51 00 6100*  	ld ix,81
       00          
045739 CD DE BD 04 6101*  	call vdu_load_img
04573D C9          6102*  	ret
04573E             6103*  
04573E             6104*  ld_47_004:
04573E 21 AC 61 04 6105*  	ld hl,F47_004
045742 22 63 BC 04 6106*  	ld (cur_filename),hl
045746 11 8F C8 04 6107*  	ld de,filedata
04574A 01 00 00 01 6108*  	ld bc,65536
04574E 3E 01       6109*  	ld a,mos_load
045750 5B CF       6110*  	RST.LIL 08h
045752 21 4F 02 00 6111*  	ld hl,BUF_47_004
045756 01 10 00 00 6112*  	ld bc,16
04575A 11 09 00 00 6113*  	ld de,9
04575E DD 21 90 00 6114*  	ld ix,144
       00          
045763 CD DE BD 04 6115*  	call vdu_load_img
045767 C9          6116*  	ret
045768             6117*  
045768             6118*  ld_47_020:
045768 21 C0 61 04 6119*  	ld hl,F47_020
04576C 22 63 BC 04 6120*  	ld (cur_filename),hl
045770 11 8F C8 04 6121*  	ld de,filedata
045774 01 00 00 01 6122*  	ld bc,65536
045778 3E 01       6123*  	ld a,mos_load
04577A 5B CF       6124*  	RST.LIL 08h
04577C 21 50 02 00 6125*  	ld hl,BUF_47_020
045780 01 14 00 00 6126*  	ld bc,20
045784 11 0B 00 00 6127*  	ld de,11
045788 DD 21 DC 00 6128*  	ld ix,220
       00          
04578D CD DE BD 04 6129*  	call vdu_load_img
045791 C9          6130*  	ret
045792             6131*  
045792             6132*  ld_47_032:
045792 21 D4 61 04 6133*  	ld hl,F47_032
045796 22 63 BC 04 6134*  	ld (cur_filename),hl
04579A 11 8F C8 04 6135*  	ld de,filedata
04579E 01 00 00 01 6136*  	ld bc,65536
0457A2 3E 01       6137*  	ld a,mos_load
0457A4 5B CF       6138*  	RST.LIL 08h
0457A6 21 51 02 00 6139*  	ld hl,BUF_47_032
0457AA 01 1D 00 00 6140*  	ld bc,29
0457AE 11 11 00 00 6141*  	ld de,17
0457B2 DD 21 ED 01 6142*  	ld ix,493
       00          
0457B7 CD DE BD 04 6143*  	call vdu_load_img
0457BB C9          6144*  	ret
0457BC             6145*  
0457BC             6146*  ld_47_040:
0457BC 21 E8 61 04 6147*  	ld hl,F47_040
0457C0 22 63 BC 04 6148*  	ld (cur_filename),hl
0457C4 11 8F C8 04 6149*  	ld de,filedata
0457C8 01 00 00 01 6150*  	ld bc,65536
0457CC 3E 01       6151*  	ld a,mos_load
0457CE 5B CF       6152*  	RST.LIL 08h
0457D0 21 52 02 00 6153*  	ld hl,BUF_47_040
0457D4 01 30 00 00 6154*  	ld bc,48
0457D8 11 1B 00 00 6155*  	ld de,27
0457DC DD 21 10 05 6156*  	ld ix,1296
       00          
0457E1 CD DE BD 04 6157*  	call vdu_load_img
0457E5 C9          6158*  	ret
0457E6             6159*  
0457E6             6160*  ld_47_044:
0457E6 21 FC 61 04 6161*  	ld hl,F47_044
0457EA 22 63 BC 04 6162*  	ld (cur_filename),hl
0457EE 11 8F C8 04 6163*  	ld de,filedata
0457F2 01 00 00 01 6164*  	ld bc,65536
0457F6 3E 01       6165*  	ld a,mos_load
0457F8 5B CF       6166*  	RST.LIL 08h
0457FA 21 53 02 00 6167*  	ld hl,BUF_47_044
0457FE 01 1B 00 00 6168*  	ld bc,27
045802 11 0A 00 00 6169*  	ld de,10
045806 DD 21 0E 01 6170*  	ld ix,270
       00          
04580B CD DE BD 04 6171*  	call vdu_load_img
04580F C9          6172*  	ret
045810             6173*  
045810             6174*  ld_48_004:
045810 21 10 62 04 6175*  	ld hl,F48_004
045814 22 63 BC 04 6176*  	ld (cur_filename),hl
045818 11 8F C8 04 6177*  	ld de,filedata
04581C 01 00 00 01 6178*  	ld bc,65536
045820 3E 01       6179*  	ld a,mos_load
045822 5B CF       6180*  	RST.LIL 08h
045824 21 54 02 00 6181*  	ld hl,BUF_48_004
045828 01 12 00 00 6182*  	ld bc,18
04582C 11 07 00 00 6183*  	ld de,7
045830 DD 21 7E 00 6184*  	ld ix,126
       00          
045835 CD DE BD 04 6185*  	call vdu_load_img
045839 C9          6186*  	ret
04583A             6187*  
04583A             6188*  ld_48_020:
04583A 21 24 62 04 6189*  	ld hl,F48_020
04583E 22 63 BC 04 6190*  	ld (cur_filename),hl
045842 11 8F C8 04 6191*  	ld de,filedata
045846 01 00 00 01 6192*  	ld bc,65536
04584A 3E 01       6193*  	ld a,mos_load
04584C 5B CF       6194*  	RST.LIL 08h
04584E 21 55 02 00 6195*  	ld hl,BUF_48_020
045852 01 17 00 00 6196*  	ld bc,23
045856 11 0A 00 00 6197*  	ld de,10
04585A DD 21 E6 00 6198*  	ld ix,230
       00          
04585F CD DE BD 04 6199*  	call vdu_load_img
045863 C9          6200*  	ret
045864             6201*  
045864             6202*  ld_48_032:
045864 21 38 62 04 6203*  	ld hl,F48_032
045868 22 63 BC 04 6204*  	ld (cur_filename),hl
04586C 11 8F C8 04 6205*  	ld de,filedata
045870 01 00 00 01 6206*  	ld bc,65536
045874 3E 01       6207*  	ld a,mos_load
045876 5B CF       6208*  	RST.LIL 08h
045878 21 56 02 00 6209*  	ld hl,BUF_48_032
04587C 01 20 00 00 6210*  	ld bc,32
045880 11 0D 00 00 6211*  	ld de,13
045884 DD 21 A0 01 6212*  	ld ix,416
       00          
045889 CD DE BD 04 6213*  	call vdu_load_img
04588D C9          6214*  	ret
04588E             6215*  
04588E             6216*  ld_48_040:
04588E 21 4C 62 04 6217*  	ld hl,F48_040
045892 22 63 BC 04 6218*  	ld (cur_filename),hl
045896 11 8F C8 04 6219*  	ld de,filedata
04589A 01 00 00 01 6220*  	ld bc,65536
04589E 3E 01       6221*  	ld a,mos_load
0458A0 5B CF       6222*  	RST.LIL 08h
0458A2 21 57 02 00 6223*  	ld hl,BUF_48_040
0458A6 01 35 00 00 6224*  	ld bc,53
0458AA 11 18 00 00 6225*  	ld de,24
0458AE DD 21 F8 04 6226*  	ld ix,1272
       00          
0458B3 CD DE BD 04 6227*  	call vdu_load_img
0458B7 C9          6228*  	ret
0458B8             6229*  
0458B8             6230*  ld_48_044:
0458B8 21 60 62 04 6231*  	ld hl,F48_044
0458BC 22 63 BC 04 6232*  	ld (cur_filename),hl
0458C0 11 8F C8 04 6233*  	ld de,filedata
0458C4 01 00 00 01 6234*  	ld bc,65536
0458C8 3E 01       6235*  	ld a,mos_load
0458CA 5B CF       6236*  	RST.LIL 08h
0458CC 21 58 02 00 6237*  	ld hl,BUF_48_044
0458D0 01 01 00 00 6238*  	ld bc,1
0458D4 11 01 00 00 6239*  	ld de,1
0458D8 DD 21 01 00 6240*  	ld ix,1
       00          
0458DD CD DE BD 04 6241*  	call vdu_load_img
0458E1 C9          6242*  	ret
0458E2             6243*  
0458E2             6244*  ld_49_004:
0458E2 21 74 62 04 6245*  	ld hl,F49_004
0458E6 22 63 BC 04 6246*  	ld (cur_filename),hl
0458EA 11 8F C8 04 6247*  	ld de,filedata
0458EE 01 00 00 01 6248*  	ld bc,65536
0458F2 3E 01       6249*  	ld a,mos_load
0458F4 5B CF       6250*  	RST.LIL 08h
0458F6 21 59 02 00 6251*  	ld hl,BUF_49_004
0458FA 01 0E 00 00 6252*  	ld bc,14
0458FE 11 06 00 00 6253*  	ld de,6
045902 DD 21 54 00 6254*  	ld ix,84
       00          
045907 CD DE BD 04 6255*  	call vdu_load_img
04590B C9          6256*  	ret
04590C             6257*  
04590C             6258*  ld_49_020:
04590C 21 88 62 04 6259*  	ld hl,F49_020
045910 22 63 BC 04 6260*  	ld (cur_filename),hl
045914 11 8F C8 04 6261*  	ld de,filedata
045918 01 00 00 01 6262*  	ld bc,65536
04591C 3E 01       6263*  	ld a,mos_load
04591E 5B CF       6264*  	RST.LIL 08h
045920 21 5A 02 00 6265*  	ld hl,BUF_49_020
045924 01 12 00 00 6266*  	ld bc,18
045928 11 08 00 00 6267*  	ld de,8
04592C DD 21 90 00 6268*  	ld ix,144
       00          
045931 CD DE BD 04 6269*  	call vdu_load_img
045935 C9          6270*  	ret
045936             6271*  
045936             6272*  ld_49_032:
045936 21 9C 62 04 6273*  	ld hl,F49_032
04593A 22 63 BC 04 6274*  	ld (cur_filename),hl
04593E 11 8F C8 04 6275*  	ld de,filedata
045942 01 00 00 01 6276*  	ld bc,65536
045946 3E 01       6277*  	ld a,mos_load
045948 5B CF       6278*  	RST.LIL 08h
04594A 21 5B 02 00 6279*  	ld hl,BUF_49_032
04594E 01 1A 00 00 6280*  	ld bc,26
045952 11 0B 00 00 6281*  	ld de,11
045956 DD 21 1E 01 6282*  	ld ix,286
       00          
04595B CD DE BD 04 6283*  	call vdu_load_img
04595F C9          6284*  	ret
045960             6285*  
045960             6286*  ld_49_040:
045960 21 B0 62 04 6287*  	ld hl,F49_040
045964 22 63 BC 04 6288*  	ld (cur_filename),hl
045968 11 8F C8 04 6289*  	ld de,filedata
04596C 01 00 00 01 6290*  	ld bc,65536
045970 3E 01       6291*  	ld a,mos_load
045972 5B CF       6292*  	RST.LIL 08h
045974 21 5C 02 00 6293*  	ld hl,BUF_49_040
045978 01 2B 00 00 6294*  	ld bc,43
04597C 11 12 00 00 6295*  	ld de,18
045980 DD 21 06 03 6296*  	ld ix,774
       00          
045985 CD DE BD 04 6297*  	call vdu_load_img
045989 C9          6298*  	ret
04598A             6299*  
04598A             6300*  ld_49_044:
04598A 21 C4 62 04 6301*  	ld hl,F49_044
04598E 22 63 BC 04 6302*  	ld (cur_filename),hl
045992 11 8F C8 04 6303*  	ld de,filedata
045996 01 00 00 01 6304*  	ld bc,65536
04599A 3E 01       6305*  	ld a,mos_load
04599C 5B CF       6306*  	RST.LIL 08h
04599E 21 5D 02 00 6307*  	ld hl,BUF_49_044
0459A2 01 01 00 00 6308*  	ld bc,1
0459A6 11 01 00 00 6309*  	ld de,1
0459AA DD 21 01 00 6310*  	ld ix,1
       00          
0459AF CD DE BD 04 6311*  	call vdu_load_img
0459B3 C9          6312*  	ret
0459B4             6313*  
0459B4             6314*  ld_50_004:
0459B4 21 D8 62 04 6315*  	ld hl,F50_004
0459B8 22 63 BC 04 6316*  	ld (cur_filename),hl
0459BC 11 8F C8 04 6317*  	ld de,filedata
0459C0 01 00 00 01 6318*  	ld bc,65536
0459C4 3E 01       6319*  	ld a,mos_load
0459C6 5B CF       6320*  	RST.LIL 08h
0459C8 21 5E 02 00 6321*  	ld hl,BUF_50_004
0459CC 01 0A 00 00 6322*  	ld bc,10
0459D0 11 0D 00 00 6323*  	ld de,13
0459D4 DD 21 82 00 6324*  	ld ix,130
       00          
0459D9 CD DE BD 04 6325*  	call vdu_load_img
0459DD C9          6326*  	ret
0459DE             6327*  
0459DE             6328*  ld_50_020:
0459DE 21 EC 62 04 6329*  	ld hl,F50_020
0459E2 22 63 BC 04 6330*  	ld (cur_filename),hl
0459E6 11 8F C8 04 6331*  	ld de,filedata
0459EA 01 00 00 01 6332*  	ld bc,65536
0459EE 3E 01       6333*  	ld a,mos_load
0459F0 5B CF       6334*  	RST.LIL 08h
0459F2 21 5F 02 00 6335*  	ld hl,BUF_50_020
0459F6 01 0D 00 00 6336*  	ld bc,13
0459FA 11 11 00 00 6337*  	ld de,17
0459FE DD 21 DD 00 6338*  	ld ix,221
       00          
045A03 CD DE BD 04 6339*  	call vdu_load_img
045A07 C9          6340*  	ret
045A08             6341*  
045A08             6342*  ld_50_032:
045A08 21 00 63 04 6343*  	ld hl,F50_032
045A0C 22 63 BC 04 6344*  	ld (cur_filename),hl
045A10 11 8F C8 04 6345*  	ld de,filedata
045A14 01 00 00 01 6346*  	ld bc,65536
045A18 3E 01       6347*  	ld a,mos_load
045A1A 5B CF       6348*  	RST.LIL 08h
045A1C 21 60 02 00 6349*  	ld hl,BUF_50_032
045A20 01 12 00 00 6350*  	ld bc,18
045A24 11 1A 00 00 6351*  	ld de,26
045A28 DD 21 D4 01 6352*  	ld ix,468
       00          
045A2D CD DE BD 04 6353*  	call vdu_load_img
045A31 C9          6354*  	ret
045A32             6355*  
045A32             6356*  ld_50_040:
045A32 21 14 63 04 6357*  	ld hl,F50_040
045A36 22 63 BC 04 6358*  	ld (cur_filename),hl
045A3A 11 8F C8 04 6359*  	ld de,filedata
045A3E 01 00 00 01 6360*  	ld bc,65536
045A42 3E 01       6361*  	ld a,mos_load
045A44 5B CF       6362*  	RST.LIL 08h
045A46 21 61 02 00 6363*  	ld hl,BUF_50_040
045A4A 01 1E 00 00 6364*  	ld bc,30
045A4E 11 2A 00 00 6365*  	ld de,42
045A52 DD 21 EC 04 6366*  	ld ix,1260
       00          
045A57 CD DE BD 04 6367*  	call vdu_load_img
045A5B C9          6368*  	ret
045A5C             6369*  
045A5C             6370*  ld_50_044:
045A5C 21 28 63 04 6371*  	ld hl,F50_044
045A60 22 63 BC 04 6372*  	ld (cur_filename),hl
045A64 11 8F C8 04 6373*  	ld de,filedata
045A68 01 00 00 01 6374*  	ld bc,65536
045A6C 3E 01       6375*  	ld a,mos_load
045A6E 5B CF       6376*  	RST.LIL 08h
045A70 21 62 02 00 6377*  	ld hl,BUF_50_044
045A74 01 46 00 00 6378*  	ld bc,70
045A78 11 32 00 00 6379*  	ld de,50
045A7C DD 21 AC 0D 6380*  	ld ix,3500
       00          
045A81 CD DE BD 04 6381*  	call vdu_load_img
045A85 C9          6382*  	ret
045A86             6383*  
045A86             6384*  ld_51_004:
045A86 21 3C 63 04 6385*  	ld hl,F51_004
045A8A 22 63 BC 04 6386*  	ld (cur_filename),hl
045A8E 11 8F C8 04 6387*  	ld de,filedata
045A92 01 00 00 01 6388*  	ld bc,65536
045A96 3E 01       6389*  	ld a,mos_load
045A98 5B CF       6390*  	RST.LIL 08h
045A9A 21 63 02 00 6391*  	ld hl,BUF_51_004
045A9E 01 11 00 00 6392*  	ld bc,17
045AA2 11 17 00 00 6393*  	ld de,23
045AA6 DD 21 87 01 6394*  	ld ix,391
       00          
045AAB CD DE BD 04 6395*  	call vdu_load_img
045AAF C9          6396*  	ret
045AB0             6397*  
045AB0             6398*  ld_51_020:
045AB0 21 50 63 04 6399*  	ld hl,F51_020
045AB4 22 63 BC 04 6400*  	ld (cur_filename),hl
045AB8 11 8F C8 04 6401*  	ld de,filedata
045ABC 01 00 00 01 6402*  	ld bc,65536
045AC0 3E 01       6403*  	ld a,mos_load
045AC2 5B CF       6404*  	RST.LIL 08h
045AC4 21 64 02 00 6405*  	ld hl,BUF_51_020
045AC8 01 15 00 00 6406*  	ld bc,21
045ACC 11 1D 00 00 6407*  	ld de,29
045AD0 DD 21 61 02 6408*  	ld ix,609
       00          
045AD5 CD DE BD 04 6409*  	call vdu_load_img
045AD9 C9          6410*  	ret
045ADA             6411*  
045ADA             6412*  ld_51_032:
045ADA 21 64 63 04 6413*  	ld hl,F51_032
045ADE 22 63 BC 04 6414*  	ld (cur_filename),hl
045AE2 11 8F C8 04 6415*  	ld de,filedata
045AE6 01 00 00 01 6416*  	ld bc,65536
045AEA 3E 01       6417*  	ld a,mos_load
045AEC 5B CF       6418*  	RST.LIL 08h
045AEE 21 65 02 00 6419*  	ld hl,BUF_51_032
045AF2 01 1E 00 00 6420*  	ld bc,30
045AF6 11 2A 00 00 6421*  	ld de,42
045AFA DD 21 EC 04 6422*  	ld ix,1260
       00          
045AFF CD DE BD 04 6423*  	call vdu_load_img
045B03 C9          6424*  	ret
045B04             6425*  
045B04             6426*  ld_51_040:
045B04 21 78 63 04 6427*  	ld hl,F51_040
045B08 22 63 BC 04 6428*  	ld (cur_filename),hl
045B0C 11 8F C8 04 6429*  	ld de,filedata
045B10 01 00 00 01 6430*  	ld bc,65536
045B14 3E 01       6431*  	ld a,mos_load
045B16 5B CF       6432*  	RST.LIL 08h
045B18 21 66 02 00 6433*  	ld hl,BUF_51_040
045B1C 01 31 00 00 6434*  	ld bc,49
045B20 11 46 00 00 6435*  	ld de,70
045B24 DD 21 66 0D 6436*  	ld ix,3430
       00          
045B29 CD DE BD 04 6437*  	call vdu_load_img
045B2D C9          6438*  	ret
045B2E             6439*  
045B2E             6440*  ld_51_044:
045B2E 21 8C 63 04 6441*  	ld hl,F51_044
045B32 22 63 BC 04 6442*  	ld (cur_filename),hl
045B36 11 8F C8 04 6443*  	ld de,filedata
045B3A 01 00 00 01 6444*  	ld bc,65536
045B3E 3E 01       6445*  	ld a,mos_load
045B40 5B CF       6446*  	RST.LIL 08h
045B42 21 67 02 00 6447*  	ld hl,BUF_51_044
045B46 01 92 00 00 6448*  	ld bc,146
045B4A 11 83 00 00 6449*  	ld de,131
045B4E DD 21 B6 4A 6450*  	ld ix,19126
       00          
045B53 CD DE BD 04 6451*  	call vdu_load_img
045B57 C9          6452*  	ret
045B58             6453*  
045B58             6454*  ld_52_004:
045B58 21 A0 63 04 6455*  	ld hl,F52_004
045B5C 22 63 BC 04 6456*  	ld (cur_filename),hl
045B60 11 8F C8 04 6457*  	ld de,filedata
045B64 01 00 00 01 6458*  	ld bc,65536
045B68 3E 01       6459*  	ld a,mos_load
045B6A 5B CF       6460*  	RST.LIL 08h
045B6C 21 68 02 00 6461*  	ld hl,BUF_52_004
045B70 01 0E 00 00 6462*  	ld bc,14
045B74 11 17 00 00 6463*  	ld de,23
045B78 DD 21 42 01 6464*  	ld ix,322
       00          
045B7D CD DE BD 04 6465*  	call vdu_load_img
045B81 C9          6466*  	ret
045B82             6467*  
045B82             6468*  ld_52_020:
045B82 21 B4 63 04 6469*  	ld hl,F52_020
045B86 22 63 BC 04 6470*  	ld (cur_filename),hl
045B8A 11 8F C8 04 6471*  	ld de,filedata
045B8E 01 00 00 01 6472*  	ld bc,65536
045B92 3E 01       6473*  	ld a,mos_load
045B94 5B CF       6474*  	RST.LIL 08h
045B96 21 69 02 00 6475*  	ld hl,BUF_52_020
045B9A 01 11 00 00 6476*  	ld bc,17
045B9E 11 1D 00 00 6477*  	ld de,29
045BA2 DD 21 ED 01 6478*  	ld ix,493
       00          
045BA7 CD DE BD 04 6479*  	call vdu_load_img
045BAB C9          6480*  	ret
045BAC             6481*  
045BAC             6482*  ld_52_032:
045BAC 21 C8 63 04 6483*  	ld hl,F52_032
045BB0 22 63 BC 04 6484*  	ld (cur_filename),hl
045BB4 11 8F C8 04 6485*  	ld de,filedata
045BB8 01 00 00 01 6486*  	ld bc,65536
045BBC 3E 01       6487*  	ld a,mos_load
045BBE 5B CF       6488*  	RST.LIL 08h
045BC0 21 6A 02 00 6489*  	ld hl,BUF_52_032
045BC4 01 19 00 00 6490*  	ld bc,25
045BC8 11 2A 00 00 6491*  	ld de,42
045BCC DD 21 1A 04 6492*  	ld ix,1050
       00          
045BD1 CD DE BD 04 6493*  	call vdu_load_img
045BD5 C9          6494*  	ret
045BD6             6495*  
045BD6             6496*  ld_52_040:
045BD6 21 DC 63 04 6497*  	ld hl,F52_040
045BDA 22 63 BC 04 6498*  	ld (cur_filename),hl
045BDE 11 8F C8 04 6499*  	ld de,filedata
045BE2 01 00 00 01 6500*  	ld bc,65536
045BE6 3E 01       6501*  	ld a,mos_load
045BE8 5B CF       6502*  	RST.LIL 08h
045BEA 21 6B 02 00 6503*  	ld hl,BUF_52_040
045BEE 01 28 00 00 6504*  	ld bc,40
045BF2 11 46 00 00 6505*  	ld de,70
045BF6 DD 21 F0 0A 6506*  	ld ix,2800
       00          
045BFB CD DE BD 04 6507*  	call vdu_load_img
045BFF C9          6508*  	ret
045C00             6509*  
045C00             6510*  ld_52_044:
045C00 21 F0 63 04 6511*  	ld hl,F52_044
045C04 22 63 BC 04 6512*  	ld (cur_filename),hl
045C08 11 8F C8 04 6513*  	ld de,filedata
045C0C 01 00 00 01 6514*  	ld bc,65536
045C10 3E 01       6515*  	ld a,mos_load
045C12 5B CF       6516*  	RST.LIL 08h
045C14 21 6C 02 00 6517*  	ld hl,BUF_52_044
045C18 01 78 00 00 6518*  	ld bc,120
045C1C 11 83 00 00 6519*  	ld de,131
045C20 DD 21 68 3D 6520*  	ld ix,15720
       00          
045C25 CD DE BD 04 6521*  	call vdu_load_img
045C29 C9          6522*  	ret
045C2A             6523*  
045C2A             6524*  ld_56_004:
045C2A 21 04 64 04 6525*  	ld hl,F56_004
045C2E 22 63 BC 04 6526*  	ld (cur_filename),hl
045C32 11 8F C8 04 6527*  	ld de,filedata
045C36 01 00 00 01 6528*  	ld bc,65536
045C3A 3E 01       6529*  	ld a,mos_load
045C3C 5B CF       6530*  	RST.LIL 08h
045C3E 21 6D 02 00 6531*  	ld hl,BUF_56_004
045C42 01 15 00 00 6532*  	ld bc,21
045C46 11 0A 00 00 6533*  	ld de,10
045C4A DD 21 D2 00 6534*  	ld ix,210
       00          
045C4F CD DE BD 04 6535*  	call vdu_load_img
045C53 C9          6536*  	ret
045C54             6537*  
045C54             6538*  ld_56_020:
045C54 21 18 64 04 6539*  	ld hl,F56_020
045C58 22 63 BC 04 6540*  	ld (cur_filename),hl
045C5C 11 8F C8 04 6541*  	ld de,filedata
045C60 01 00 00 01 6542*  	ld bc,65536
045C64 3E 01       6543*  	ld a,mos_load
045C66 5B CF       6544*  	RST.LIL 08h
045C68 21 6E 02 00 6545*  	ld hl,BUF_56_020
045C6C 01 1A 00 00 6546*  	ld bc,26
045C70 11 0C 00 00 6547*  	ld de,12
045C74 DD 21 38 01 6548*  	ld ix,312
       00          
045C79 CD DE BD 04 6549*  	call vdu_load_img
045C7D C9          6550*  	ret
045C7E             6551*  
045C7E             6552*  ld_56_032:
045C7E 21 2C 64 04 6553*  	ld hl,F56_032
045C82 22 63 BC 04 6554*  	ld (cur_filename),hl
045C86 11 8F C8 04 6555*  	ld de,filedata
045C8A 01 00 00 01 6556*  	ld bc,65536
045C8E 3E 01       6557*  	ld a,mos_load
045C90 5B CF       6558*  	RST.LIL 08h
045C92 21 6F 02 00 6559*  	ld hl,BUF_56_032
045C96 01 27 00 00 6560*  	ld bc,39
045C9A 11 12 00 00 6561*  	ld de,18
045C9E DD 21 BE 02 6562*  	ld ix,702
       00          
045CA3 CD DE BD 04 6563*  	call vdu_load_img
045CA7 C9          6564*  	ret
045CA8             6565*  
045CA8             6566*  ld_56_040:
045CA8 21 40 64 04 6567*  	ld hl,F56_040
045CAC 22 63 BC 04 6568*  	ld (cur_filename),hl
045CB0 11 8F C8 04 6569*  	ld de,filedata
045CB4 01 00 00 01 6570*  	ld bc,65536
045CB8 3E 01       6571*  	ld a,mos_load
045CBA 5B CF       6572*  	RST.LIL 08h
045CBC 21 70 02 00 6573*  	ld hl,BUF_56_040
045CC0 01 42 00 00 6574*  	ld bc,66
045CC4 11 1E 00 00 6575*  	ld de,30
045CC8 DD 21 BC 07 6576*  	ld ix,1980
       00          
045CCD CD DE BD 04 6577*  	call vdu_load_img
045CD1 C9          6578*  	ret
045CD2             6579*  
045CD2             6580*  ld_56_044:
045CD2 21 54 64 04 6581*  	ld hl,F56_044
045CD6 22 63 BC 04 6582*  	ld (cur_filename),hl
045CDA 11 8F C8 04 6583*  	ld de,filedata
045CDE 01 00 00 01 6584*  	ld bc,65536
045CE2 3E 01       6585*  	ld a,mos_load
045CE4 5B CF       6586*  	RST.LIL 08h
045CE6 21 71 02 00 6587*  	ld hl,BUF_56_044
045CEA 01 36 00 00 6588*  	ld bc,54
045CEE 11 0C 00 00 6589*  	ld de,12
045CF2 DD 21 88 02 6590*  	ld ix,648
       00          
045CF7 CD DE BD 04 6591*  	call vdu_load_img
045CFB C9          6592*  	ret
045CFC             6593*  
045CFC             6594*  ; File name lookups:
045CFC 70 61 6E 65 6595*  F20_004: db "panels/20_004.rgba2",0
       6C 73 2F 32 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045D10 70 61 6E 65 6596*  F20_020: db "panels/20_020.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045D24 70 61 6E 65 6597*  F20_032: db "panels/20_032.rgba2",0
       6C 73 2F 32 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D38 70 61 6E 65 6598*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D4C 70 61 6E 65 6599*  F20_044: db "panels/20_044.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D60 70 61 6E 65 6600*  F21_004: db "panels/21_004.rgba2",0
       6C 73 2F 32 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045D74 70 61 6E 65 6601*  F21_020: db "panels/21_020.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045D88 70 61 6E 65 6602*  F21_032: db "panels/21_032.rgba2",0
       6C 73 2F 32 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D9C 70 61 6E 65 6603*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045DB0 70 61 6E 65 6604*  F21_044: db "panels/21_044.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045DC4 70 61 6E 65 6605*  F22_004: db "panels/22_004.rgba2",0
       6C 73 2F 32 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045DD8 70 61 6E 65 6606*  F22_020: db "panels/22_020.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045DEC 70 61 6E 65 6607*  F22_032: db "panels/22_032.rgba2",0
       6C 73 2F 32 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E00 70 61 6E 65 6608*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E14 70 61 6E 65 6609*  F22_044: db "panels/22_044.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E28 70 61 6E 65 6610*  F23_004: db "panels/23_004.rgba2",0
       6C 73 2F 32 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E3C 70 61 6E 65 6611*  F23_020: db "panels/23_020.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E50 70 61 6E 65 6612*  F23_032: db "panels/23_032.rgba2",0
       6C 73 2F 32 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E64 70 61 6E 65 6613*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E78 70 61 6E 65 6614*  F23_044: db "panels/23_044.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E8C 70 61 6E 65 6615*  F24_004: db "panels/24_004.rgba2",0
       6C 73 2F 32 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045EA0 70 61 6E 65 6616*  F24_020: db "panels/24_020.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045EB4 70 61 6E 65 6617*  F24_032: db "panels/24_032.rgba2",0
       6C 73 2F 32 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045EC8 70 61 6E 65 6618*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045EDC 70 61 6E 65 6619*  F24_044: db "panels/24_044.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045EF0 70 61 6E 65 6620*  F40_004: db "panels/40_004.rgba2",0
       6C 73 2F 34 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F04 70 61 6E 65 6621*  F40_020: db "panels/40_020.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F18 70 61 6E 65 6622*  F40_032: db "panels/40_032.rgba2",0
       6C 73 2F 34 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F2C 70 61 6E 65 6623*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F40 70 61 6E 65 6624*  F40_044: db "panels/40_044.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F54 70 61 6E 65 6625*  F41_004: db "panels/41_004.rgba2",0
       6C 73 2F 34 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F68 70 61 6E 65 6626*  F41_020: db "panels/41_020.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F7C 70 61 6E 65 6627*  F41_032: db "panels/41_032.rgba2",0
       6C 73 2F 34 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F90 70 61 6E 65 6628*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045FA4 70 61 6E 65 6629*  F41_044: db "panels/41_044.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045FB8 70 61 6E 65 6630*  F42_004: db "panels/42_004.rgba2",0
       6C 73 2F 34 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045FCC 70 61 6E 65 6631*  F42_020: db "panels/42_020.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045FE0 70 61 6E 65 6632*  F42_032: db "panels/42_032.rgba2",0
       6C 73 2F 34 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045FF4 70 61 6E 65 6633*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046008 70 61 6E 65 6634*  F42_044: db "panels/42_044.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04601C 70 61 6E 65 6635*  F43_004: db "panels/43_004.rgba2",0
       6C 73 2F 34 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046030 70 61 6E 65 6636*  F43_020: db "panels/43_020.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046044 70 61 6E 65 6637*  F43_032: db "panels/43_032.rgba2",0
       6C 73 2F 34 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046058 70 61 6E 65 6638*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04606C 70 61 6E 65 6639*  F43_044: db "panels/43_044.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046080 70 61 6E 65 6640*  F44_004: db "panels/44_004.rgba2",0
       6C 73 2F 34 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046094 70 61 6E 65 6641*  F44_020: db "panels/44_020.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0460A8 70 61 6E 65 6642*  F44_032: db "panels/44_032.rgba2",0
       6C 73 2F 34 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0460BC 70 61 6E 65 6643*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0460D0 70 61 6E 65 6644*  F44_044: db "panels/44_044.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0460E4 70 61 6E 65 6645*  F45_004: db "panels/45_004.rgba2",0
       6C 73 2F 34 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0460F8 70 61 6E 65 6646*  F45_020: db "panels/45_020.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04610C 70 61 6E 65 6647*  F45_032: db "panels/45_032.rgba2",0
       6C 73 2F 34 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046120 70 61 6E 65 6648*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046134 70 61 6E 65 6649*  F45_044: db "panels/45_044.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046148 70 61 6E 65 6650*  F46_004: db "panels/46_004.rgba2",0
       6C 73 2F 34 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04615C 70 61 6E 65 6651*  F46_020: db "panels/46_020.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046170 70 61 6E 65 6652*  F46_032: db "panels/46_032.rgba2",0
       6C 73 2F 34 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046184 70 61 6E 65 6653*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046198 70 61 6E 65 6654*  F46_044: db "panels/46_044.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0461AC 70 61 6E 65 6655*  F47_004: db "panels/47_004.rgba2",0
       6C 73 2F 34 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0461C0 70 61 6E 65 6656*  F47_020: db "panels/47_020.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0461D4 70 61 6E 65 6657*  F47_032: db "panels/47_032.rgba2",0
       6C 73 2F 34 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0461E8 70 61 6E 65 6658*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0461FC 70 61 6E 65 6659*  F47_044: db "panels/47_044.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046210 70 61 6E 65 6660*  F48_004: db "panels/48_004.rgba2",0
       6C 73 2F 34 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046224 70 61 6E 65 6661*  F48_020: db "panels/48_020.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046238 70 61 6E 65 6662*  F48_032: db "panels/48_032.rgba2",0
       6C 73 2F 34 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04624C 70 61 6E 65 6663*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046260 70 61 6E 65 6664*  F48_044: db "panels/48_044.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046274 70 61 6E 65 6665*  F49_004: db "panels/49_004.rgba2",0
       6C 73 2F 34 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046288 70 61 6E 65 6666*  F49_020: db "panels/49_020.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04629C 70 61 6E 65 6667*  F49_032: db "panels/49_032.rgba2",0
       6C 73 2F 34 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0462B0 70 61 6E 65 6668*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0462C4 70 61 6E 65 6669*  F49_044: db "panels/49_044.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0462D8 70 61 6E 65 6670*  F50_004: db "panels/50_004.rgba2",0
       6C 73 2F 35 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0462EC 70 61 6E 65 6671*  F50_020: db "panels/50_020.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046300 70 61 6E 65 6672*  F50_032: db "panels/50_032.rgba2",0
       6C 73 2F 35 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046314 70 61 6E 65 6673*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046328 70 61 6E 65 6674*  F50_044: db "panels/50_044.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04633C 70 61 6E 65 6675*  F51_004: db "panels/51_004.rgba2",0
       6C 73 2F 35 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046350 70 61 6E 65 6676*  F51_020: db "panels/51_020.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046364 70 61 6E 65 6677*  F51_032: db "panels/51_032.rgba2",0
       6C 73 2F 35 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046378 70 61 6E 65 6678*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04638C 70 61 6E 65 6679*  F51_044: db "panels/51_044.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0463A0 70 61 6E 65 6680*  F52_004: db "panels/52_004.rgba2",0
       6C 73 2F 35 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0463B4 70 61 6E 65 6681*  F52_020: db "panels/52_020.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0463C8 70 61 6E 65 6682*  F52_032: db "panels/52_032.rgba2",0
       6C 73 2F 35 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0463DC 70 61 6E 65 6683*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0463F0 70 61 6E 65 6684*  F52_044: db "panels/52_044.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046404 70 61 6E 65 6685*  F56_004: db "panels/56_004.rgba2",0
       6C 73 2F 35 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046418 70 61 6E 65 6686*  F56_020: db "panels/56_020.rgba2",0
       6C 73 2F 35 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04642C 70 61 6E 65 6687*  F56_032: db "panels/56_032.rgba2",0
       6C 73 2F 35 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046440 70 61 6E 65 6688*  F56_040: db "panels/56_040.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046454 70 61 6E 65 6689*  F56_044: db "panels/56_044.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046468             6690*  
046468             6691*  ; dws buffer ids:
046468             6692*  BUF_DW_6: equ 0x0272
046468             6693*  BUF_DW_7: equ 0x0273
046468             6694*  BUF_DW_8: equ 0x0274
046468             6695*  BUF_DW_9: equ 0x0275
046468             6696*  BUF_DW_10: equ 0x0276
046468             6697*  BUF_DW_11: equ 0x0277
046468             6698*  BUF_DW_12: equ 0x0278
046468             6699*  BUF_DW_13: equ 0x0279
046468             6700*  BUF_DW_14: equ 0x027A
046468             6701*  
046468             6702*  dws_num_panels: equ 9
046468             6703*  
046468             6704*  ; dws buffer id reverse lookup:
046468             6705*  dws_buffer_id_lut:
046468 72 02 00    6706*  	dl BUF_DW_6
04646B 73 02 00    6707*  	dl BUF_DW_7
04646E 74 02 00    6708*  	dl BUF_DW_8
046471 75 02 00    6709*  	dl BUF_DW_9
046474 76 02 00    6710*  	dl BUF_DW_10
046477 77 02 00    6711*  	dl BUF_DW_11
04647A 78 02 00    6712*  	dl BUF_DW_12
04647D 79 02 00    6713*  	dl BUF_DW_13
046480 7A 02 00    6714*  	dl BUF_DW_14
046483             6715*  
046483             6716*  ; dws load routines jump table:
046483             6717*  dws_load_panels_table:
046483 9E 64 04    6718*  	dl ld_dw_6
046486 C8 64 04    6719*  	dl ld_dw_7
046489 F2 64 04    6720*  	dl ld_dw_8
04648C 1C 65 04    6721*  	dl ld_dw_9
04648F 46 65 04    6722*  	dl ld_dw_10
046492 70 65 04    6723*  	dl ld_dw_11
046495 9A 65 04    6724*  	dl ld_dw_12
046498 C4 65 04    6725*  	dl ld_dw_13
04649B EE 65 04    6726*  	dl ld_dw_14
04649E             6727*  
04649E             6728*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
04649E             6729*  
04649E             6730*  ld_dw_6:
04649E 21 18 66 04 6731*  	ld hl,Fdw_6
0464A2 22 63 BC 04 6732*  	ld (cur_filename),hl
0464A6 11 8F C8 04 6733*  	ld de,filedata
0464AA 01 00 00 01 6734*  	ld bc,65536
0464AE 3E 01       6735*  	ld a,mos_load
0464B0 5B CF       6736*  	RST.LIL 08h
0464B2 21 72 02 00 6737*  	ld hl,BUF_DW_6
0464B6 01 40 01 00 6738*  	ld bc,320
0464BA 11 1E 00 00 6739*  	ld de,30
0464BE DD 21 80 25 6740*  	ld ix,9600
       00          
0464C3 CD DE BD 04 6741*  	call vdu_load_img
0464C7 C9          6742*  	ret
0464C8             6743*  
0464C8             6744*  ld_dw_7:
0464C8 21 27 66 04 6745*  	ld hl,Fdw_7
0464CC 22 63 BC 04 6746*  	ld (cur_filename),hl
0464D0 11 8F C8 04 6747*  	ld de,filedata
0464D4 01 00 00 01 6748*  	ld bc,65536
0464D8 3E 01       6749*  	ld a,mos_load
0464DA 5B CF       6750*  	RST.LIL 08h
0464DC 21 73 02 00 6751*  	ld hl,BUF_DW_7
0464E0 01 40 01 00 6752*  	ld bc,320
0464E4 11 18 00 00 6753*  	ld de,24
0464E8 DD 21 00 1E 6754*  	ld ix,7680
       00          
0464ED CD DE BD 04 6755*  	call vdu_load_img
0464F1 C9          6756*  	ret
0464F2             6757*  
0464F2             6758*  ld_dw_8:
0464F2 21 36 66 04 6759*  	ld hl,Fdw_8
0464F6 22 63 BC 04 6760*  	ld (cur_filename),hl
0464FA 11 8F C8 04 6761*  	ld de,filedata
0464FE 01 00 00 01 6762*  	ld bc,65536
046502 3E 01       6763*  	ld a,mos_load
046504 5B CF       6764*  	RST.LIL 08h
046506 21 74 02 00 6765*  	ld hl,BUF_DW_8
04650A 01 40 01 00 6766*  	ld bc,320
04650E 11 12 00 00 6767*  	ld de,18
046512 DD 21 80 16 6768*  	ld ix,5760
       00          
046517 CD DE BD 04 6769*  	call vdu_load_img
04651B C9          6770*  	ret
04651C             6771*  
04651C             6772*  ld_dw_9:
04651C 21 45 66 04 6773*  	ld hl,Fdw_9
046520 22 63 BC 04 6774*  	ld (cur_filename),hl
046524 11 8F C8 04 6775*  	ld de,filedata
046528 01 00 00 01 6776*  	ld bc,65536
04652C 3E 01       6777*  	ld a,mos_load
04652E 5B CF       6778*  	RST.LIL 08h
046530 21 75 02 00 6779*  	ld hl,BUF_DW_9
046534 01 40 01 00 6780*  	ld bc,320
046538 11 10 00 00 6781*  	ld de,16
04653C DD 21 00 14 6782*  	ld ix,5120
       00          
046541 CD DE BD 04 6783*  	call vdu_load_img
046545 C9          6784*  	ret
046546             6785*  
046546             6786*  ld_dw_10:
046546 21 54 66 04 6787*  	ld hl,Fdw_10
04654A 22 63 BC 04 6788*  	ld (cur_filename),hl
04654E 11 8F C8 04 6789*  	ld de,filedata
046552 01 00 00 01 6790*  	ld bc,65536
046556 3E 01       6791*  	ld a,mos_load
046558 5B CF       6792*  	RST.LIL 08h
04655A 21 76 02 00 6793*  	ld hl,BUF_DW_10
04655E 01 40 01 00 6794*  	ld bc,320
046562 11 10 00 00 6795*  	ld de,16
046566 DD 21 00 14 6796*  	ld ix,5120
       00          
04656B CD DE BD 04 6797*  	call vdu_load_img
04656F C9          6798*  	ret
046570             6799*  
046570             6800*  ld_dw_11:
046570 21 64 66 04 6801*  	ld hl,Fdw_11
046574 22 63 BC 04 6802*  	ld (cur_filename),hl
046578 11 8F C8 04 6803*  	ld de,filedata
04657C 01 00 00 01 6804*  	ld bc,65536
046580 3E 01       6805*  	ld a,mos_load
046582 5B CF       6806*  	RST.LIL 08h
046584 21 77 02 00 6807*  	ld hl,BUF_DW_11
046588 01 40 01 00 6808*  	ld bc,320
04658C 11 0E 00 00 6809*  	ld de,14
046590 DD 21 80 11 6810*  	ld ix,4480
       00          
046595 CD DE BD 04 6811*  	call vdu_load_img
046599 C9          6812*  	ret
04659A             6813*  
04659A             6814*  ld_dw_12:
04659A 21 74 66 04 6815*  	ld hl,Fdw_12
04659E 22 63 BC 04 6816*  	ld (cur_filename),hl
0465A2 11 8F C8 04 6817*  	ld de,filedata
0465A6 01 00 00 01 6818*  	ld bc,65536
0465AA 3E 01       6819*  	ld a,mos_load
0465AC 5B CF       6820*  	RST.LIL 08h
0465AE 21 78 02 00 6821*  	ld hl,BUF_DW_12
0465B2 01 40 01 00 6822*  	ld bc,320
0465B6 11 0C 00 00 6823*  	ld de,12
0465BA DD 21 00 0F 6824*  	ld ix,3840
       00          
0465BF CD DE BD 04 6825*  	call vdu_load_img
0465C3 C9          6826*  	ret
0465C4             6827*  
0465C4             6828*  ld_dw_13:
0465C4 21 84 66 04 6829*  	ld hl,Fdw_13
0465C8 22 63 BC 04 6830*  	ld (cur_filename),hl
0465CC 11 8F C8 04 6831*  	ld de,filedata
0465D0 01 00 00 01 6832*  	ld bc,65536
0465D4 3E 01       6833*  	ld a,mos_load
0465D6 5B CF       6834*  	RST.LIL 08h
0465D8 21 79 02 00 6835*  	ld hl,BUF_DW_13
0465DC 01 40 01 00 6836*  	ld bc,320
0465E0 11 0C 00 00 6837*  	ld de,12
0465E4 DD 21 00 0F 6838*  	ld ix,3840
       00          
0465E9 CD DE BD 04 6839*  	call vdu_load_img
0465ED C9          6840*  	ret
0465EE             6841*  
0465EE             6842*  ld_dw_14:
0465EE 21 94 66 04 6843*  	ld hl,Fdw_14
0465F2 22 63 BC 04 6844*  	ld (cur_filename),hl
0465F6 11 8F C8 04 6845*  	ld de,filedata
0465FA 01 00 00 01 6846*  	ld bc,65536
0465FE 3E 01       6847*  	ld a,mos_load
046600 5B CF       6848*  	RST.LIL 08h
046602 21 7A 02 00 6849*  	ld hl,BUF_DW_14
046606 01 40 01 00 6850*  	ld bc,320
04660A 11 0C 00 00 6851*  	ld de,12
04660E DD 21 00 0F 6852*  	ld ix,3840
       00          
046613 CD DE BD 04 6853*  	call vdu_load_img
046617 C9          6854*  	ret
046618             6855*  
046618             6856*  ; File name lookups:
046618 64 77 73 2F 6857*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
046627 64 77 73 2F 6858*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
046636 64 77 73 2F 6859*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
046645 64 77 73 2F 6860*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
046654 64 77 73 2F 6861*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
046664 64 77 73 2F 6862*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
046674 64 77 73 2F 6863*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
046684 64 77 73 2F 6864*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
046694 64 77 73 2F 6865*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
0466A4             0014   	include "src/asm/fonts_bmp.asm"
0466A4             0001*  ; plots a bitmap character to the screen
0466A4             0002*  ; inputs: a; ascii character to plot
0466A4             0003*  ;      bc,de = x,y screen coordinates in pixels
0466A4             0004*  ;      ix pointed at the font definition lut
0466A4             0005*  ; returns: bc as the next x coordinate to plot
0466A4             0006*  ;          pretty pixels which hopefully resemble readable text
0466A4             0007*  ; destroys: lotsa stuff
0466A4             0008*  font_bmp_plot:
0466A4             0009*  ; back up bc,de
0466A4 C5          0010*      push bc
0466A5 D5          0011*      push de
0466A6             0012*  ; get the buffer id of the character
0466A6 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
0466A8 06 06       0014*      ld b,6 ; six bytes per lookup record
0466AA 4F          0015*      ld c,a
0466AB ED 4C       0016*      mlt bc
0466AD DD 09       0017*      add ix,bc ; now ix points to the character definition
0466AF DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
0466B2 CD 32 AE 04 0019*      call vdu_buff_select
0466B6             0020*  ; plot the character
0466B6 D1          0021*      pop de
0466B7 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
0466BA 83          0023*      add a,e ; add the y-coordinate
0466BB 5F          0024*      ld e,a
0466BC 3E 00       0025*      ld a,0 ; can't xor it because we need carry
0466BE 8A          0026*      adc a,d
0466BF 57          0027*      ld d,a ; plot_y now correct for the character
0466C0 C1          0028*      pop bc ; plot_x
0466C1 C5          0029*      push bc ; we want it back after the plot
0466C2 CD 03 B0 04 0030*      call vdu_plot_bmp
0466C6             0031*  ; now set bc to the next x coordinate
0466C6 C1          0032*      pop bc
0466C7 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0466CA C6 02       0034*      add a,2 ; add a little padding between characters
0466CC 81          0035*      add a,c ; bump the original x-coordinate
0466CD 4F          0036*      ld c,a
0466CE 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0466D0 88          0038*      adc a,b
0466D1 47          0039*      ld b,a ; plot_x now correct for the next character
0466D2 C9          0040*      ret
0466D3             0041*  
0466D3             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0466D3             0043*  ; inputs: hl; pointer to the string
0466D3             0044*  ;       bc,de = x,y screen coordinates in pixels
0466D3             0045*  ;       ix pointed at the font definition lut
0466D3             0046*  ; returns: bc as the next x coordinate to plot
0466D3             0047*  ;          de as the next y coordinate to plot
0466D3             0048*  ;          pretty pixels which hopefully resemble readable text
0466D3             0049*  font_bmp_print:
0466D3             0050*  @next_char:
0466D3             0051*  ; fetch the next character in the string
0466D3 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0466D4 FE 00       0053*      cp 0 ; is it zero?
0466D6 C8          0054*      ret z ; if so, we're done
0466D7 23          0055*      inc hl ; point to the next character
0466D8 E5          0056*      push hl ; save the pointer
0466D9 D5          0057*      push de ; save our y-coordinate
0466DA DD E5       0058*      push ix ; save the font lut pointer
0466DC CD A4 66 04 0059*      call font_bmp_plot ; plot the character
0466E0 DD E1       0060*      pop ix ; restore the font lut pointer
0466E2 D1          0061*      pop de ; restore our y-coordinate
0466E3 E1          0062*      pop hl ; restore the pointer
0466E4 C3 D3 66 04 0063*      jp @next_char ; loop
0466E8             0015   	include "src/asm/maps.asm"
0466E8             0001*  ; ############# MAP CONSTANTS #############
0466E8             0002*  ; map tables addresses
0466E8             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
0466E8             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
0466E8             0005*  
0466E8             0006*  ; map status/type flags
0466E8             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
0466E8             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
0466E8             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
0466E8             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
0466E8             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
0466E8             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
0466E8             0013*  ; bits 1 and 0 are the render_type mask
0466E8             0014*  render_type_cube:   equ %00000000  ; 0
0466E8             0015*  render_type_floor:  equ %00000001  ; 1
0466E8             0016*  render_type_null:   equ %00000010  ; 2
0466E8             0017*  render_type_sprite: equ %00000011  ; 3
0466E8             0018*  
0466E8             0019*  ; HOW THE MAP TABLE IS LAID OUT
0466E8             0020*  ; map table field offset constants
0466E8             0021*  ; (mind the little-endianess)
0466E8             0022*  map_type_status: 	equ 0
0466E8             0023*  map_img_idx: 		equ 1
0466E8             0024*  map_obj_id: 		equ 2
0466E8             0025*  map_sprite_id: 		equ 3
0466E8             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
0466E8             0027*  
0466E8             0028*  ; gets cell info from a directional displacement from a given map location
0466E8             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
0466E8             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
0466E8             0031*  ; calls: get_dx_dy, get_cell_from_coords
0466E8             0032*  get_neighbor:
0466E8             0033*  ; modulo 4 on orientation
0466E8 7B          0034*      ld a,e
0466E9 E6 03       0035*      and 0x03
0466EB 5F          0036*      ld e,a
0466EC CD 1B 67 04 0037*  	call get_dx_dy ; d,e = dy,dx
0466F0             0038*  ; add add b,c to the deltas in d,e
0466F0 79          0039*  	ld a,c
0466F1 83          0040*  	add a,e
0466F2 5F          0041*  	ld e,a
0466F3 78          0042*  	ld a,b
0466F4 82          0043*  	add a,d
0466F5 57          0044*  	ld d,a
0466F6             0045*  ; fall through to get_cell_from_coords
0466F6             0046*  
0466F6             0047*  ; gets cell info from a given x,y map coordinate
0466F6             0048*  ; inputs: ; d,e = map_y,map_x
0466F6             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
0466F6             0050*  get_cell_from_coords:
0466F6             0051*  ; modulo 16 on input coords
0466F6 7B          0052*  	ld a,e
0466F7 E6 0F       0053*  	and 0x0F
0466F9 5F          0054*  	ld e,a
0466FA 7A          0055*  	ld a,d
0466FB E6 0F       0056*  	and 0x0F
0466FD 57          0057*  	ld d,a
0466FE             0058*  ; get cell_id from x,y
0466FE 42          0059*  	ld b,d ; y
0466FF 0E 10       0060*  	ld c,16 ; number of cells in a column
046701 ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
046703 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
046707 6B          0063*  	ld l,e ; x
046708 09          0064*  	add hl,bc ; hl = cell_id of x,y
046709 E5          0065*  	push hl ; so we can return cell_id
04670A 4D          0066*  	ld c,l ; c = cell_id
04670B             0067*  ; get address of cell record in cell_status table
04670B 06 04       0068*  	ld b,map_record_size ; b = bytes per record
04670D ED 4C       0069*  	mlt bc ; bc = offset to cell record
04670F DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
046714 DD 09       0071*  	add ix,bc ; ix = address of cell record
046716 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
046719 C1          0073*  	pop bc ; bc = cell_id
04671A C9          0074*  	ret
04671B             0075*  
04671B             0076*  ; gets dx,dy from orientation and distance
04671B             0077*  ; d = distance ; e = orientation
04671B             0078*  ; returns: d,e = dy,dx
04671B             0079*  get_dx_dy:
04671B             0080*  ; make sure deu is zero
04671B E5          0081*  	push hl
04671C 21 00 00 00 0082*  	ld hl,0
046720 62          0083*  	ld h,d
046721 6B          0084*  	ld l,e
046722 EB          0085*  	ex de,hl
046723 E1          0086*  	pop hl
046724             0087*  ; modulo 4 on orientation
046724 7B          0088*  	ld a,e
046725 E6 03       0089*  	and 0x03
046727 FE 00       0090*  	cp 0
046729 28 11       0091*  	jr z,@north
04672B FE 01       0092*  	cp 1
04672D 28 14       0093*  	jr z,@east
04672F FE 02       0094*  	cp 2
046731 28 14       0095*  	jr z,@south
046733 FE 03       0096*  	cp 3
046735 28 13       0097*  	jr z,@west
046737             0098*  ; if none of those, return zeroes
046737 11 00 00 00 0099*  	ld de,0
04673B C9          0100*  	ret
04673C             0101*  @north:
04673C             0102*  ; x = 0, y = -d
04673C 1E 00       0103*  	ld e,0
04673E 7A          0104*  	ld a,d
04673F ED 44       0105*  	neg
046741 57          0106*  	ld d,a
046742 C9          0107*  	ret
046743             0108*  @east:
046743             0109*  ; x = d, y = 0
046743 5A          0110*  	ld e,d
046744 16 00       0111*  	ld d,0
046746 C9          0112*  	ret
046747             0113*  @south:
046747             0114*  ; x = 0, y = d
046747 1E 00       0115*  	ld e,0
046749 C9          0116*  	ret
04674A             0117*  @west:
04674A             0118*  ; x = -d, y = 0
04674A 7A          0119*  	ld a,d
04674B ED 44       0120*  	neg
04674D 5F          0121*  	ld e,a
04674E 16 00       0122*  	ld d,0
046750 C9          0123*  	ret
046751             0124*  
046751             0125*  ; gets the direction from a dy,dx pair
046751             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
046751             0127*  ; inputs: ; d = dy ; e = dx
046751             0128*  ; returns: a = orientation
046751             0129*  get_dir_from_dy_dx:
046751 AF          0130*  	xor a
046752 93          0131*  	sub e
046753 28 06       0132*  	jr z,@not_x
046755 3E 01       0133*  	ld a,1
046757 F8          0134*  	ret m
046758 3E 03       0135*  	ld a,3
04675A C9          0136*  	ret
04675B             0137*  @not_x:
04675B AF          0138*  	xor a
04675C 92          0139*  	sub d
04675D C8          0140*  	ret z
04675E 3E 02       0141*  	ld a,2
046760 F8          0142*  	ret m
046761 AF          0143*  	xor a
046762 C9          0144*  	ret
046763             0145*  
046763             0146*  
046763             0147*  ; translate camera relative x,y deltas to map x,y deltas
046763             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
046763             0149*  ; returns:	d = map_dy ; e = map_dx
046763             0150*  trans_dx_dy:
046763             0151*  ; modulo 4 on orientation
046763 E6 03       0152*  	and 0x03
046765 28 11       0153*  	jr z,@north
046767 FE 01       0154*  	cp 1 ; east
046769 28 12       0155*  	jr z,@east
04676B FE 02       0156*  	cp 2 ; south
04676D 28 12       0157*  	jr z,@south
04676F FE 03       0158*  	cp 3 ; west
046771 28 13       0159*  	jr z,@west
046773             0160*  ; if none of those, return zeroes
046773 11 00 00 00 0161*  	ld de,0
046777 C9          0162*  	ret
046778             0163*  @north: ; invert y axis, x unnchanged
046778 7A          0164*  	ld a,d
046779 ED 44       0165*  	neg
04677B 57          0166*  	ld d,a
04677C C9          0167*  	ret
04677D             0168*  @east: ; +x = +y, +y = +x
04677D 7A          0169*  	ld a,d
04677E 53          0170*  	ld d,e
04677F 5F          0171*  	ld e,a
046780 C9          0172*  	ret
046781             0173*  @south: ; invert x axis, y unchanged
046781 7B          0174*  	ld a,e
046782 ED 44       0175*  	neg
046784 5F          0176*  	ld e,a
046785 C9          0177*  	ret
046786             0178*  @west: ; +x = -y, +y = -x
046786 7A          0179*  	ld a,d ; y
046787 ED 44       0180*  	neg ; -y
046789 53          0181*  	ld d,e ; x
04678A 5F          0182*  	ld e,a ; -y
04678B 7A          0183*  	ld a,d ; x
04678C ED 44       0184*  	neg ; -x
04678E 57          0185*  	ld d,a ; -x
04678F C9          0186*  	ret
046790             0187*  
046790             0188*  ; initialize map variables and load map file
046790             0189*  ; inputs: none
046790             0190*  map_init:
046790 AF          0191*  	xor a
046791 32 D1 B6 04 0192*  	ld (cur_floor),a
046795 32 D2 B6 04 0193*  	ld (cur_room),a
046799             0194*  ; load room file
046799 CD 9E 67 04 0195*  	call map_load
04679D             0196*  ; set player initial position
04679D C9          0197*  	ret
04679E             0198*  
04679E             0199*  ; load map file
04679E             0200*  ; inputs: cur_floor, cur_room set
04679E             0201*  map_load:
04679E 21 30 69 04 0202*  	ld hl,floors ; address of floors lut
0467A2 3A D1 B6 04 0203*  	ld a,(cur_floor)
0467A6 5F          0204*  	ld e,a
0467A7 16 03       0205*  	ld d,3 ; three bytes per lookup record
0467A9 ED 5C       0206*  	mlt de ; de = offset to floor lut entry
0467AB 19          0207*  	add hl,de ; hl = address of floor lut entry
0467AC ED 27       0208*  	ld hl,(hl) ; hl = base address of rooms for given floor
0467AE 3A D2 B6 04 0209*  	ld a,(cur_room)
0467B2 5F          0210*  	ld e,a
0467B3 16 03       0211*  	ld d,3 ; three bytes per lookup record
0467B5 ED 5C       0212*  	mlt de ; de = offset to room lut entry
0467B7 19          0213*  	add hl,de ; hl = address of room lut entry
0467B8 ED 27       0214*  	ld hl,(hl) ; hl = address of room file name
0467BA 22 63 BC 04 0215*  	ld (cur_filename),hl ; DEBUG
0467BE 11 00 E0 B7 0216*  	ld de,cell_status ; address to load map data
0467C2 01 00 20 00 0217*  	ld bc,8*1024 ; size of map data in bytes
0467C6 3E 01       0218*  	ld a,mos_load
0467C8 5B CF       0219*  	RST.LIL 08h
0467CA             0220*  ; load sprite data
0467CA CD CF 67 04 0221*  	call map_init_sprites
0467CE C9          0222*  	ret
0467CF             0223*  
0467CF             0224*  ; initialize sprite data for the current room into sprite table
0467CF             0225*  ; inputs: map data loaded
0467CF             0226*  map_init_sprites:
0467CF             0227*  ; initialize pointers
0467CF DD 21 00 E0 0228*  	ld ix,cell_status
       B7          
0467D4 FD 21 00 FC 0229*  	ld iy,sprite_table_base
       B7          
0467D9 AF          0230*  	xor a
0467DA 32 1E 68 04 0231*  	ld (@cell_id),a
0467DE             0232*  @loop:
0467DE FD 22 14 A4 0233*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
0467E3 DD 7E 03    0234*  	ld a,(ix+map_sprite_id)
0467E6 FE FF       0235*  	cp 255 ; check for no sprite
0467E8 28 1B       0236*  	jr z,@next_cell
0467EA FD 77 00    0237*  	ld (iy+sprite_id),a
0467ED DD 7E 01    0238*  	ld a,(ix+map_img_idx)
0467F0 FD 77 01    0239*  	ld (iy+sprite_obj),a
0467F3 CD B1 A5 04 0240*  	call sprite_init_data
0467F7 3A 1E 68 04 0241*  	ld a,(@cell_id)
0467FB CD 1F 68 04 0242*  	call cell_id_to_coords ; d = map_y, e = map_x
0467FF FD 1F 04    0243*  	ld (iy+sprite_x),de ; set sprite x,y
046802 ED 33 10    0244*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
046805             0245*  @next_cell:
046805 ED 32 04    0246*  	lea ix,ix+map_record_size ; advance pointer to next cell
046808             0247*  ; check if we've reached the end of the map data
046808 3A 1E 68 04 0248*  	ld a,(@cell_id)
04680C 3C          0249*  	inc a
04680D 32 1E 68 04 0250*  	ld (@cell_id),a
046811 20 CB       0251*  	jr nz,@loop ; still more to do
046813             0252*  ; cleanup and return
046813 FD 21 00 FC 0253*  	ld iy,sprite_table_base ; reset pointer
       B7          
046818 FD 22 14 A4 0254*  	ld (sprite_table_pointer),iy
       04          
04681D C9          0255*  	ret
04681E 00          0256*  @cell_id: db 0
04681F             0257*  
04681F             0258*  ; get the x,y map coordinates from a cell_id
04681F             0259*  ; inputs: a = cell_id
04681F             0260*  ; returns: a = cell_id, d = map_y, e = map_x
04681F             0261*  cell_id_to_coords:
04681F 11 00 00 00 0262*  	ld de,0 ; make sure deu is zero
046823 F5          0263*  	push af	; Save the cell id
046824             0264*  ; Calculate the y coordinate by dividing the index by 16
046824 57          0265*  	ld d,a      ; Move index into d
046825 CB 3A       0266*  	srl d        ; Shift right once (d = d / 2)
046827 CB 3A       0267*  	srl d        ; Shift right again (d = d / 4)
046829 CB 3A       0268*  	srl d        ; Shift right again (d = d / 8)
04682B CB 3A       0269*  	srl d        ; Shift right again (d = d / 16)
04682D             0270*  ; Calculate the x coordinate by taking the index modulo 16
04682D E6 0F       0271*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
04682F 5F          0272*  	ld e,a      ; e is now the x coordinate
046830 F1          0273*  	pop af	; a is cell id
046831 C9          0274*  	ret
046832             0275*  
046832             0276*  ; get starting position in room 0 of a floor based on is_start flag being set
046832             0277*  ; inputs: none
046832             0278*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
046832             0279*  ; destroys: c,iy
046832             0280*  get_floor_start:
046832             0281*  ; loop through map data to find the obj_id in a
046832 DD 21 00 E0 0282*  	ld ix,cell_status
       B7          
046837 0E 00       0283*  	ld c,0 ; c will be a loop counter giving us cell_id
046839             0284*  @start_cell_loop:
046839 DD 7E 00    0285*  	ld a,(ix+map_type_status)
04683C E6 08       0286*  	and cell_is_start
04683E 20 06       0287*  	jr nz,@start_cell_found
046840 ED 32 04    0288*  	lea ix,ix+map_record_size
046843 0C          0289*  	inc c
046844 18 F3       0290*  	jr @start_cell_loop
046846             0291*  @start_cell_found:
046846 79          0292*  	ld a,c
046847 CD 1F 68 04 0293*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
04684B ED 53 D7 B6 0294*  	ld (cur_x),de
       04          
046850 C9          0295*  	ret
046851             0296*  
046851             0297*  ; get starting position based an obj_id
046851             0298*  ; inputs: a is the obj_id to search for
046851             0299*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
046851             0300*  ; destroys: c,iy
046851             0301*  get_room_start:
046851             0302*  ; loop through map data to find the obj_id in a
046851 DD 21 00 E0 0303*  	ld ix,cell_status
       B7          
046856 0E 00       0304*  	ld c,0 ; c will be a loop counter giving us cell_id
046858             0305*  @start_cell_loop:
046858 DD BE 02    0306*  	cp (ix+map_obj_id)
04685B 28 06       0307*  	jr z,@start_cell_found
04685D ED 32 04    0308*  	lea ix,ix+map_record_size
046860 0C          0309*  	inc c
046861 18 F5       0310*  	jr @start_cell_loop
046863             0311*  @start_cell_found:
046863 79          0312*  	ld a,c
046864 CD 1F 68 04 0313*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
046868 ED 53 D7 B6 0314*  	ld (cur_x),de
       04          
04686D C9          0315*  	ret
04686E             0316*  
04686E             0317*  
04686E             0318*  ; moves player to the room indicated by the too room cell they've just entered
04686E             0319*  ; inputs: ix = pointer to the cell containing the too room door
04686E             0320*  change_room:
04686E             0321*  ; set visited flag for old room
04686E 3A D2 B6 04 0322*  	ld a,(cur_room)
046872 21 08 69 04 0323*  	ld hl,room_flags
046876 11 00 00 00 0324*  	ld de,0 ; make sure deu and d are zero
04687A 5F          0325*  	ld e,a
04687B 19          0326*  	add hl,de ; hl = address of room flags entry
04687C 3E 01       0327*  	ld a,room_flag_visited
04687E B6          0328*  	or (hl)
04687F 77          0329*  	ld (hl),a
046880             0330*  ; update from_room
046880 3A D2 B6 04 0331*  	ld a,(cur_room)
046884 32 D5 B6 04 0332*  	ld (from_room),a
046888             0333*  ; get the new room id from the cell and update cur_room
046888 21 FE 68 04 0334*  	ld hl,to_room_obj_lut
04688C DD 7E 02    0335*  	ld a,(ix+map_obj_id)
04688F 96          0336*  	sub (hl)
046890 32 D2 B6 04 0337*  	ld (cur_room),a
046894             0338*  ; save old room state to room dat memory location
046894 21 12 69 04 0339*  	ld hl,room_dat_lut
046898 3A D5 B6 04 0340*  	ld a,(from_room)
04689C 57          0341*  	ld d,a
04689D 1E 03       0342*  	ld e,3 ; three bytes per lookup record
04689F ED 5C       0343*  	mlt de ; de = offset to room dat entry
0468A1 19          0344*  	add hl,de ; hl = address of room dat entry
0468A2 ED 17       0345*  	ld de,(hl) ; destination address for room data
0468A4 21 00 E0 B7 0346*  	ld hl,cell_status ; source address for room data
0468A8 01 00 20 00 0347*  	ld bc,8*1024 ; size of room data
0468AC ED B0       0348*  	ldir
0468AE             0349*  ; check room visited flag for target room
0468AE 21 08 69 04 0350*  	ld hl,room_flags
0468B2 3A D2 B6 04 0351*  	ld a,(cur_room)
0468B6 11 00 00 00 0352*  	ld de,0 ; make sure deu and d are zero
0468BA 5F          0353*  	ld e,a
0468BB 19          0354*  	add hl,de ; hl = address of room flags entry
0468BC 3E 01       0355*  	ld a,room_flag_visited
0468BE A6          0356*  	and (hl)
0468BF 20 0A       0357*  	jr nz,@room_visited
0468C1             0358*  ; room not visited so load room data from file
0468C1 CD 9E 67 04 0359*  	call map_load
0468C5 CD CF 67 04 0360*  	call map_init_sprites
0468C9 18 1A       0361*  	jr @get_room_start
0468CB             0362*  @room_visited:
0468CB             0363*  ; fetch new room state from room dat memory location
0468CB 21 12 69 04 0364*  	ld hl,room_dat_lut
0468CF 3A D2 B6 04 0365*  	ld a,(cur_room)
0468D3 57          0366*  	ld d,a
0468D4 1E 03       0367*  	ld e,3 ; three bytes per lookup record
0468D6 ED 5C       0368*  	mlt de ; de = offset to room dat entry
0468D8 19          0369*  	add hl,de ; hl = address of room dat entry
0468D9 ED 27       0370*  	ld hl,(hl) ; source address for room data
0468DB 11 00 E0 B7 0371*  	ld de,cell_status ; destination address for room data
0468DF 01 00 20 00 0372*  	ld bc,8*1024 ; size of room data
0468E3 ED B0       0373*  	ldir
0468E5             0374*  @get_room_start:
0468E5             0375*  ; get player starting position from to_room_obj_lut
0468E5 3A D5 B6 04 0376*  	ld a,(from_room)
0468E9 21 FE 68 04 0377*  	ld hl,to_room_obj_lut
0468ED 11 00 00 00 0378*  	ld de,0 ; make sure deu and d are zero
0468F1 5F          0379*  	ld e,a
0468F2 19          0380*  	add hl,de ; hl = address of to_room_obj_lut entry
0468F3 7E          0381*  	ld a,(hl)
0468F4 CD 51 68 04 0382*  	call get_room_start
0468F8 ED 53 D7 B6 0383*  	ld (cur_x),de
       04          
0468FD C9          0384*  	ret
0468FE             0385*  
0468FE 1E 1F 20 21 0386*  to_room_obj_lut: db 30,31,32,33,34,35,36,37,38,39
       22 23 24 25 
       26 27       
046908             0387*  
046908 00 00 00 00 0388*  room_flags: blkb 10,0
       00 00 00 00 
       00 00       
046912             0389*  room_flag_visited: equ %00000001
046912             0390*  
046912             0391*  room_dat_lut:
046912 00 00 0A    0392*  room_00_dat: dl 0x0A0000
046915 00 20 0A    0393*  room_01_dat: dl 0x0A2000
046918 00 40 0A    0394*  room_02_dat: dl 0x0A4000
04691B 00 60 0A    0395*  room_03_dat: dl 0x0A6000
04691E 00 80 0A    0396*  room_04_dat: dl 0x0A8000
046921 00 A0 0A    0397*  room_05_dat: dl 0x0AA000
046924 00 C0 0A    0398*  room_06_dat: dl 0x0AC000
046927 00 E0 0A    0399*  room_07_dat: dl 0x0AE000
04692A 00 00 0B    0400*  room_08_dat: dl 0x0B0000
04692D 00 20 0B    0401*  room_09_dat: dl 0x0B2000
046930             0402*  
046930             0403*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
046930             0404*  
046930             0405*  start_obj_id: equ 28
046930             0406*  
046930             0407*  floors:
046930 33 69 04    0408*  	dl floor_00
046933             0409*  
046933             0410*  room_files:
046933             0411*  floor_00:
046933 3C 69 04    0412*  	dl room_00_0
046936 4E 69 04    0413*  	dl room_00_1
046939 60 69 04    0414*  	dl room_00_2
04693C             0415*  
04693C 6D 61 70 73 0416*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
04694E 6D 61 70 73 0417*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
046960 6D 61 70 73 0418*  room_00_2: db "maps/map_00_2.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       32 2E 62 69 
       6E 00       
046972             0016   	include "src/asm/render.asm"
046972             0001*  ; #### RENDERING SCRATCH VARIABLES ####
046972             0002*  ; first three bytes of cell_status record in little-endian order
046972             0003*  to_cell_status:
046972             0004*  to_map_type_status: ds 1
046973             0005*  to_img_idx: ds 1
046974             0006*  to_obj_id: ds 1
046975             0007*  ; fourth byte of cell_status record
046975             0008*  to_sprite_id: ds 1
046976             0009*  
046976             0010*  to_poly_id: ds 1
046977             0011*  to_buffer_id: ds 3
04697A             0012*  
04697A             0013*  cur_cell_views: ds 3
04697D             0014*  
04697D             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
04697D             0016*  
04697D 03 20 00    0017*  bj_health_image: dl BUF_UI_BJ_100 ; 100% health default
046980             0018*  
046980             0019*  ; render background as a prelude to rendering panels and sprites
046980             0020*  ; hl is the buffer id, bc and de are plot_x and plot_y
046980             0021*  render_background:
046980             0022*  ; back up everything
046980 C5          0023*      push bc
046981 D5          0024*      push de
046982 E5          0025*      push hl
046983             0026*  ; plot background
046983 AF          0027*      xor a ; color mode
046984 0E 08       0028*      ld c,c_grey_dk ; color
046986 CD F3 AC 04 0029*      call vdu_gcol_fg
04698A 01 00 00 00 0030*      ld bc,0 ; x0
04698E 11 00 00 00 0031*      ld de,0 ; y0
046992 DD 21 3F 01 0032*      ld ix,319
       00          
046997 FD 21 50 00 0033*      ld iy,80
       00          
04699C CD 40 B0 04 0034*      call vdu_plot_rf
0469A0 AF          0035*      xor a ; color mode
0469A1 0E 07       0036*      ld c,c_grey ; color
0469A3 CD F3 AC 04 0037*      call vdu_gcol_fg
0469A7 01 00 00 00 0038*      ld bc,0 ; x0
0469AB 11 50 00 00 0039*      ld de,80 ; y0
0469AF DD 21 3F 01 0040*      ld ix,319
       00          
0469B4 FD 21 9F 00 0041*      ld iy,159
       00          
0469B9 CD 40 B0 04 0042*      call vdu_plot_rf
0469BD             0043*  ; plot the background
0469BD E1          0044*      pop hl ; get back the buffer id
0469BE CD 32 AE 04 0045*      call vdu_buff_select
0469C2 D1          0046*      pop de ; get back plot_y
0469C3 C1          0047*      pop bc ; get back plot_x
0469C4 CD 03 B0 04 0048*      call vdu_plot_bmp
0469C8 C9          0049*      ret
0469C9             0050*  
0469C9             0051*  ; render a 3D panel
0469C9             0052*  ; inputs: to_poly_id set, to_buffer_id set
0469C9             0053*  render_panel:
0469C9             0054*  ; make the bitmap buffer active
0469C9 2A 77 69 04 0055*      ld hl,(to_buffer_id)
0469CD CD 32 AE 04 0056*      call vdu_buff_select
0469D1             0057*  ; get the coordinates of the panel
0469D1 DD 21 01 6C 0058*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
0469D6             0059*  ; get the panel's poly_id
0469D6 3A 76 69 04 0060*      ld a,(to_poly_id)
0469DA             0061*  ; multiply a by 6 to get the offset
0469DA 47          0062*      ld b,a
0469DB 0E 06       0063*      ld c,6
0469DD ED 4C       0064*      mlt bc
0469DF             0065*  ; add the offset to the lookup table
0469DF DD 09       0066*      add ix,bc
0469E1             0067*  ; get the panel coordinates
0469E1 DD 07 00    0068*      ld bc,(ix) ; plot_x
0469E4 DD 17 03    0069*      ld de,(ix+3) ; plot_y
0469E7             0070*  ; plot that mofo and go home
0469E7 CD 03 B0 04 0071*      call vdu_plot_bmp
0469EB C9          0072*      ret
0469EC             0073*  
0469EC             0074*  ; render a 3D sprite
0469EC             0075*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
0469EC             0076*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
0469EC             0077*  render_sprite:
0469EC             0078*  ; look up sprite_obj in sprite table
0469EC FD 21 00 FC 0079*      ld iy,sprite_table_base
       B7          
0469F1 47          0080*      ld b,a ; sprite id
0469F2 0E 10       0081*      ld c,sprite_record_size
0469F4 ED 4C       0082*      mlt bc
0469F6 FD 09       0083*      add iy,bc ; iy points to sprite record
0469F8 FD 22 14 A4 0084*      ld (sprite_table_pointer),iy
       04          
0469FD             0085*  ; get sprite imgs lookup
0469FD FD 7E 01    0086*      ld a,(iy+sprite_obj) ; a is sprite_obj
046A00 FD 21 F2 6E 0087*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
046A05 47          0088*      ld b,a
046A06 0E 03       0089*      ld c,3 ; 3 bytes per record
046A08 ED 4C       0090*      mlt bc
046A0A FD 09       0091*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
046A0C FD 37 00    0092*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
046A0F             0093*  ; convert to_poly_id to sprite_poly
046A0F 21 C5 6E 04 0094*      ld hl,sprite_polys_lookup
046A13 3A 76 69 04 0095*      ld a,(to_poly_id)
046A17 01 00 00 00 0096*      ld bc,0  ; make sure bcu and b are zero
046A1B 4F          0097*      ld c,a
046A1C 09          0098*      add hl,bc ; hl points to the sprite's poly id
046A1D             0099*  ; get the sprites image defs for the particular poly id
046A1D 7E          0100*      ld a,(hl)
046A1E 47          0101*      ld b,a
046A1F 0E 09       0102*      ld c,9  ; 9 bytes per record
046A21 ED 4C       0103*      mlt bc
046A23 FD 09       0104*      add iy,bc ; iy is the offset to the sprite's image def
046A25             0105*  ; select buffer
046A25 FD 27 06    0106*      ld hl,(iy+6)
046A28 CD 32 AE 04 0107*      call vdu_buff_select
046A2C             0108*  ; plot sprite
046A2C FD 07 00    0109*      ld bc,(iy+0) ; plot_x
046A2F FD 17 03    0110*      ld de,(iy+3) ; plot_y
046A32 CD 03 B0 04 0111*      call vdu_plot_bmp
046A36 C9          0112*      ret
046A37             0113*  
046A37             0114*  ; render the object in a given cell and poly_id
046A37             0115*  ; inputs: to_poly_id set, d,e are the cell coords
046A37             0116*  render_cell:
046A37             0117*  ; get the cell to render's cell_status data and store it in scratch
046A37 CD F6 66 04 0118*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
046A3B DD 27 00    0119*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
046A3E 22 72 69 04 0120*      ld (to_cell_status),hl
046A42             0121*  ; get sprite_id from cell_status lut
046A42 DD 7E 03    0122*      ld a,(ix+map_sprite_id)
046A45 FE FF       0123*      cp 255 ; value if no sprite present
046A47 C2 EC 69 04 0124*      jp nz,render_sprite
046A4B             0125*  ; get cell's render_type
046A4B 7D          0126*      ld a,l ; map_type_status
046A4C E6 02       0127*      and 2 ; mask off everything but lowest two bits
046A4E 28 02       0128*      jr z,@cube ; render_type_cube is 0
046A50 18 32       0129*      jr @nodraw ; placeholder for future implementation TODO
046A52             0130*  @cube:
046A52             0131*      ; get map_img_idx from cell_status lut
046A52 3A 73 69 04 0132*      ld a,(to_img_idx)
046A56 FE FF       0133*      cp 255 ; value for cell with nothing to draw
046A58 28 2A       0134*      jr z,@nodraw
046A5A             0135*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
046A5A 21 3C 6D 04 0136*      ld hl,cube_img_idx_lookup
046A5E 47          0137*      ld b,a
046A5F 0E 03       0138*      ld c,3 ; three bytes per record
046A61 ED 4C       0139*      mlt bc
046A63 09          0140*      add hl,bc ; hl points to the cube's base buffer id
046A64 ED 27       0141*      ld hl,(hl) ; hl is the base buffer id
046A66 EB          0142*      ex de,hl ; stash the base buffer id in de for later
046A67 21 0F 6D 04 0143*      ld hl,cube_poly_idx_lookup
046A6B 3A 76 69 04 0144*      ld a,(to_poly_id)
046A6F 01 00 00 00 0145*      ld bc,0 ; make sure bcu is zero
046A73 4F          0146*      ld c,a
046A74 09          0147*      add hl,bc ; hl is the buffer id index address
046A75 7E          0148*      ld a,(hl) ; a is the buffer id index value
046A76 21 00 00 00 0149*      ld hl,0 ; make sure hlu is zero
046A7A 6F          0150*      ld l,a ; hl is the buffer id index value
046A7B 19          0151*      add hl,de ; hl is the buffer id
046A7C 22 77 69 04 0152*      ld (to_buffer_id),hl
046A80 C3 C9 69 04 0153*      jp render_panel
046A84             0154*  @nodraw:
046A84 C9          0155*      ret
046A85             0156*  
046A85             0157*  ; render a full 3d scene
046A85             0158*  ; inputs: cur_x, cur_y, orientation set
046A85             0159*  ; outputs: pretty pictures
046A85             0160*  ; destroys: everything
046A85             0161*  render_scene:
046A85             0162*  ; clear the screen
046A85 CD 80 69 04 0163*      call render_background
046A89             0164*  ; get current map position and camera orientation
046A89 ED 5B D7 B6 0165*      ld de,(cur_x) ; d,e = cur_y,x
       04          
046A8E CD F6 66 04 0166*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
046A92             0167*  ; get cell_views address for this cell and orientation
046A92 3A D6 B6 04 0168*      ld a,(orientation)
046A96 5F          0169*      ld e,a
046A97 16 06       0170*      ld d,6 ; 6 bytes per orientation
046A99 ED 5C       0171*      mlt de ; de = orientation offset
046A9B EB          0172*      ex de,hl ; hl = orientation offset
046A9C 06 18       0173*      ld b,24 ; 24 bytes per cell in cell_views lut
046A9E ED 4C       0174*      mlt bc ; bc = offset from base address of cell_views lut
046AA0 09          0175*      add hl,bc ; hl = total offset from cell_views base address
046AA1 EB          0176*      ex de,hl ; becaue we can't add iy to hl
046AA2 FD 21 00 E4 0177*      ld iy,cell_views ; base address of cell_views lut
       B7          
046AA7 FD 19       0178*      add iy,de ; iy = cell_views address
046AA9 FD 22 7A 69 0179*      ld (cur_cell_views),iy
       04          
046AAE             0180*  ; cycle through the cell views masks and render the appropriate objects
046AAE 01 00 46 28 0181*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
046AB2 AF          0182*      xor a ; poly_id
046AB3 32 76 69 04 0183*      ld (to_poly_id),a
046AB7             0184*  @loop:
046AB7 ED 43 C3 6A 0185*      ld (@bit_iy+2),bc
       04          
046ABC FD 2A 7A 69 0186*      ld iy,(cur_cell_views)
       04          
046AC1             0187*  @bit_iy:
046AC1 FD CB 00 46 0188*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
046AC5 28 21       0189*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
046AC7             0190*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
046AC7 3A 76 69 04 0191*      ld a,(to_poly_id)
046ACB 4F          0192*      ld c,a ; poly_id
046ACC 3A D6 B6 04 0193*      ld a,(orientation)
046AD0 CD CE 6B 04 0194*      call get_polys_deltas ; d,e = y,x deltas
046AD4 3A D7 B6 04 0195*      ld a,(cur_x)
046AD8 83          0196*      add a,e
046AD9 5F          0197*      ld e,a
046ADA 3A D8 B6 04 0198*      ld a,(cur_y)
046ADE 82          0199*      add a,d
046ADF 57          0200*      ld d,a
046AE0 3A 76 69 04 0201*      ld a,(to_poly_id)
046AE4 CD 37 6A 04 0202*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
046AE8             0203*  @next_poly:
046AE8 ED 4B C3 6A 0204*      ld bc,(@bit_iy+2)
       04          
046AED 3A 76 69 04 0205*      ld a,(to_poly_id)
046AF1 3C          0206*      inc a ; a is next poly_id
046AF2 32 76 69 04 0207*      ld (to_poly_id),a
046AF6 FE 2D       0208*      cp num_polys
046AF8 28 0D       0209*      jr z,@end
046AFA 3E 08       0210*      ld a,8
046AFC 80          0211*      add a,b
046AFD 47          0212*      ld b,a ; bit tested codes to 0x46 + b/8
046AFE FE 86       0213*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
046B00 20 B5       0214*      jr nz,@loop
046B02 06 46       0215*      ld b,0x46
046B04 0C          0216*      inc c ; iy address offset
046B05 18 B0       0217*      jr @loop
046B07             0218*  @end:
046B07             0219*  ; draw the graphic portions of the ui
046B07 21 05 20 00 0220*  	ld hl,BUF_UI_LOWER_PANEL
046B0B CD 32 AE 04 0221*      call vdu_buff_select
046B0F 01 00 00 00 0222*  	ld bc,0 ; x
046B13 11 A0 00 00 0223*  	ld de,160 ; y
046B17 CD 03 B0 04 0224*  	call vdu_plot_bmp
046B1B             0225*  
046B1B 2A F2 B6 04 0226*      ld hl,(plyr_wpn_ui_lg)
046B1F ED 5B 04 B7 0227*      ld de,(plyr_wpn_anim_fr)
       04          
046B24 19          0228*      add hl,de
046B25 CD 32 AE 04 0229*      call vdu_buff_select
046B29 01 80 00 00 0230*      ld bc,128 ; x
046B2D 11 60 00 00 0231*      ld de,96 ; y
046B31 CD 03 B0 04 0232*      call vdu_plot_bmp
046B35             0233*  
046B35 2A EF B6 04 0234*      ld hl,(plyr_wpn_ui_sm)
046B39 CD 32 AE 04 0235*      call vdu_buff_select
046B3D 01 0A 01 00 0236*      ld bc,266 ; x
046B41 11 B2 00 00 0237*      ld de,178 ; y
046B45 CD 03 B0 04 0238*      call vdu_plot_bmp
046B49             0239*  
046B49 2A 7D 69 04 0240*      ld hl,(bj_health_image)
046B4D CD 32 AE 04 0241*      call vdu_buff_select
046B51 01 84 00 00 0242*      ld bc,132 ; x
046B55 11 AA 00 00 0243*      ld de,170 ; y
046B59 CD 03 B0 04 0244*      call vdu_plot_bmp
046B5D             0245*  
046B5D             0246*  ; draw the text portions of the ui
046B5D 0E 16       0247*      ld c,22 ; x
046B5F 06 03       0248*      ld b,3 ; y
046B61 CD 06 AE 04 0249*      call vdu_move_cursor
046B65 2A 07 B7 04 0250*      ld hl,(plyr_ammo)
046B69 CD 16 B3 04 0251*      call printDec
046B6D             0252*  
046B6D 0E 11       0253*      ld c,17 ; x
046B6F 06 03       0254*      ld b,3 ; y
046B71 CD 06 AE 04 0255*      call vdu_move_cursor
046B75 2A C8 B6 04 0256*      ld hl,(plyr_health)
046B79 CD 16 B3 04 0257*      call printDec
046B7D             0258*  
046B7D             0259*  ; DEBUG
046B7D 0E 11       0260*      ld c,17 ; x
046B7F 06 04       0261*      ld b,4  ; y
046B81 CD 06 AE 04 0262*      call vdu_move_cursor
046B85 2A 65 B9 04 0263*      ld hl,(last_damage)
046B89 CD 16 B3 04 0264*      call printDec
046B8D             0265*  ; END DEBUG
046B8D             0266*  
046B8D 0E 07       0267*      ld c,7; x
046B8F 06 03       0268*      ld b,3 ; y
046B91 CD 06 AE 04 0269*      call vdu_move_cursor
046B95 2A CE B6 04 0270*      ld hl,(plyr_lives)
046B99 CD 16 B3 04 0271*      call printDec
046B9D             0272*  
046B9D 0E 03       0273*      ld c,3 ; x
046B9F 06 03       0274*      ld b,3 ; y
046BA1 CD 06 AE 04 0275*      call vdu_move_cursor
046BA5 2A C5 B6 04 0276*      ld hl,(plyr_score)
046BA9 CD 16 B3 04 0277*      call printDec
046BAD             0278*  
046BAD 0E 01       0279*      ld c,1 ; x
046BAF 06 03       0280*      ld b,3 ; y
046BB1 CD 06 AE 04 0281*      call vdu_move_cursor
046BB5 3A D1 B6 04 0282*      ld a,(cur_floor)
046BB9 CD F8 B2 04 0283*      call printHex8
046BBD             0284*  
046BBD 0E 01       0285*      ld c,1 ; x
046BBF 06 04       0286*      ld b,4 ; y
046BC1 CD 06 AE 04 0287*      call vdu_move_cursor
046BC5 3A D2 B6 04 0288*      ld a,(cur_room)
046BC9 CD F8 B2 04 0289*      call printHex8
046BCD             0290*  
046BCD             0291*  ; ; DEBUG
046BCD             0292*      ; ld c,1 ; x
046BCD             0293*      ; ld b,5 ; y
046BCD             0294*      ; call vdu_move_cursor
046BCD             0295*      ; ld hl,cur_x
046BCD             0296*      ; ld a,5
046BCD             0297*      ; call dumpMemoryHex
046BCD             0298*  
046BCD             0299*      ; ld c,1 ; x
046BCD             0300*      ; ld b,7 ; y
046BCD             0301*      ; call vdu_move_cursor
046BCD             0302*      ; ld hl,room_flags
046BCD             0303*      ; ld a,10
046BCD             0304*      ; call dumpMemoryHex
046BCD             0305*  
046BCD             0306*  ;     ld c,1 ; x
046BCD             0307*  ;     ld b,7 ; y
046BCD             0308*  ;     call vdu_move_cursor
046BCD             0309*  ;     ld hl,sprite_new_x
046BCD             0310*  ;     ld a,3
046BCD             0311*  ;     call dumpMemoryHex
046BCD             0312*  
046BCD             0313*  ;     ld c,1 ; x
046BCD             0314*  ;     ld b,8 ; y
046BCD             0315*  ;     call vdu_move_cursor
046BCD             0316*  ;     ld hl,cur_x
046BCD             0317*  ;     ld a,3
046BCD             0318*  ;     call dumpMemoryHex
046BCD             0319*  ; ; END DEBUG
046BCD             0320*  
046BCD             0321*  ; all done
046BCD C9          0322*      ret
046BCE             0323*  
046BCE             0324*  ; get the map coordinates deltas for a given orientation and poly_id
046BCE             0325*  ; inputs: a is the orientation, c is the poly_id
046BCE             0326*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
046BCE             0327*  get_polys_deltas:
046BCE             0328*  ; get the base address of the orientation-specific deltas lookup table
046BCE FE 00       0329*      cp 0
046BD0 28 11       0330*      jr z,@orientation_0
046BD2 FE 01       0331*      cp 1
046BD4 28 13       0332*      jr z,@orientation_1
046BD6 FE 02       0333*      cp 2
046BD8 28 15       0334*      jr z,@orientation_2
046BDA FE 03       0335*      cp 3
046BDC 28 17       0336*      jr z,@orientation_3
046BDE             0337*  ; return zeros if not found
046BDE 11 00 00 00 0338*      ld de,0
046BE2 C9          0339*      ret
046BE3             0340*  @orientation_0: ; north
046BE3 21 5D 6D 04 0341*      ld hl,polys_map_deltas_0
046BE7 18 10       0342*      jr @get_deltas
046BE9             0343*  @orientation_1: ; east
046BE9 21 B7 6D 04 0344*      ld hl,polys_map_deltas_1
046BED 18 0A       0345*      jr @get_deltas
046BEF             0346*  @orientation_2: ; south
046BEF 21 11 6E 04 0347*      ld hl,polys_map_deltas_2
046BF3 18 04       0348*      jr @get_deltas
046BF5             0349*  @orientation_3: ; west
046BF5 21 6B 6E 04 0350*      ld hl,polys_map_deltas_3
046BF9             0351*  @get_deltas:
046BF9 06 02       0352*      ld b,2 ; 2 bytes per record
046BFB ED 4C       0353*      mlt bc ; poly_id * 2
046BFD 09          0354*      add hl,bc ; hl points to the deltas
046BFE ED 17       0355*      ld de,(hl) ;d,e = dy,dx
046C00 C9          0356*      ret
046C01             0017   	include "src/asm/polys.asm"
046C01             0001*  num_polys: equ 45
046C01             0002*  
046C01             0003*  polys_lookup_plot:
046C01             0004*  ;	   plot_x,  plot_y:
046C01 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
046C07 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
046C0D 47 00 00 3E 0007*  	dl 0x000047,0x00003E ; poly_id:2 02
       00 00       
046C13 6A 00 00 3E 0008*  	dl 0x00006A,0x00003E ; poly_id:3 03
       00 00       
046C19 8E 00 00 3E 0009*  	dl 0x00008E,0x00003E ; poly_id:4 04
       00 00       
046C1F B1 00 00 3E 0010*  	dl 0x0000B1,0x00003E ; poly_id:5 05
       00 00       
046C25 D5 00 00 3E 0011*  	dl 0x0000D5,0x00003E ; poly_id:6 06
       00 00       
046C2B F8 00 00 3E 0012*  	dl 0x0000F8,0x00003E ; poly_id:7 07
       00 00       
046C31 1C 01 00 3E 0013*  	dl 0x00011C,0x00003E ; poly_id:8 08
       00 00       
046C37 00 00 00 39 0014*  	dl 0x000000,0x000039 ; poly_id:9 09
       00 00       
046C3D 2E 00 00 39 0015*  	dl 0x00002E,0x000039 ; poly_id:10 0A
       00 00       
046C43 5B 00 00 39 0016*  	dl 0x00005B,0x000039 ; poly_id:11 0B
       00 00       
046C49 89 00 00 39 0017*  	dl 0x000089,0x000039 ; poly_id:12 0C
       00 00       
046C4F B1 00 00 39 0018*  	dl 0x0000B1,0x000039 ; poly_id:13 0D
       00 00       
046C55 D5 00 00 39 0019*  	dl 0x0000D5,0x000039 ; poly_id:14 0E
       00 00       
046C5B F8 00 00 39 0020*  	dl 0x0000F8,0x000039 ; poly_id:15 0F
       00 00       
046C61 1C 01 00 39 0021*  	dl 0x00011C,0x000039 ; poly_id:16 10
       00 00       
046C67 00 00 00 39 0022*  	dl 0x000000,0x000039 ; poly_id:17 11
       00 00       
046C6D 2E 00 00 39 0023*  	dl 0x00002E,0x000039 ; poly_id:18 12
       00 00       
046C73 5B 00 00 39 0024*  	dl 0x00005B,0x000039 ; poly_id:19 13
       00 00       
046C79 89 00 00 39 0025*  	dl 0x000089,0x000039 ; poly_id:20 14
       00 00       
046C7F B6 00 00 39 0026*  	dl 0x0000B6,0x000039 ; poly_id:21 15
       00 00       
046C85 E4 00 00 39 0027*  	dl 0x0000E4,0x000039 ; poly_id:22 16
       00 00       
046C8B 11 01 00 39 0028*  	dl 0x000111,0x000039 ; poly_id:23 17
       00 00       
046C91 00 00 00 30 0029*  	dl 0x000000,0x000030 ; poly_id:24 18
       00 00       
046C97 3F 00 00 30 0030*  	dl 0x00003F,0x000030 ; poly_id:25 19
       00 00       
046C9D 80 00 00 30 0031*  	dl 0x000080,0x000030 ; poly_id:26 1A
       00 00       
046CA3 B6 00 00 30 0032*  	dl 0x0000B6,0x000030 ; poly_id:27 1B
       00 00       
046CA9 E4 00 00 30 0033*  	dl 0x0000E4,0x000030 ; poly_id:28 1C
       00 00       
046CAF 11 01 00 30 0034*  	dl 0x000111,0x000030 ; poly_id:29 1D
       00 00       
046CB5 00 00 00 30 0035*  	dl 0x000000,0x000030 ; poly_id:30 1E
       00 00       
046CBB 3F 00 00 30 0036*  	dl 0x00003F,0x000030 ; poly_id:31 1F
       00 00       
046CC1 80 00 00 30 0037*  	dl 0x000080,0x000030 ; poly_id:32 20
       00 00       
046CC7 C0 00 00 30 0038*  	dl 0x0000C0,0x000030 ; poly_id:33 21
       00 00       
046CCD 00 01 00 30 0039*  	dl 0x000100,0x000030 ; poly_id:34 22
       00 00       
046CD3 00 00 00 1A 0040*  	dl 0x000000,0x00001A ; poly_id:35 23
       00 00       
046CD9 6A 00 00 1A 0041*  	dl 0x00006A,0x00001A ; poly_id:36 24
       00 00       
046CDF C0 00 00 1A 0042*  	dl 0x0000C0,0x00001A ; poly_id:37 25
       00 00       
046CE5 00 01 00 1A 0043*  	dl 0x000100,0x00001A ; poly_id:38 26
       00 00       
046CEB 00 00 00 1A 0044*  	dl 0x000000,0x00001A ; poly_id:39 27
       00 00       
046CF1 6A 00 00 1A 0045*  	dl 0x00006A,0x00001A ; poly_id:40 28
       00 00       
046CF7 D5 00 00 1A 0046*  	dl 0x0000D5,0x00001A ; poly_id:41 29
       00 00       
046CFD 00 00 00 00 0047*  	dl 0x000000,0x000000 ; poly_id:42 2A
       00 00       
046D03 D5 00 00 00 0048*  	dl 0x0000D5,0x000000 ; poly_id:43 2B
       00 00       
046D09 00 00 00 00 0049*  	dl 0x000000,0x000000 ; poly_id:44 2C
       00 00       
046D0F             0050*  
046D0F             0051*  cube_poly_idx_lookup:
046D0F             0052*  ;	 img_idx,  poly_id
046D0F 00          0053*  	db 0 ; poly_id:0 0
046D10 00          0054*  	db 0 ; poly_id:1 1
046D11 00          0055*  	db 0 ; poly_id:2 2
046D12 00          0056*  	db 0 ; poly_id:3 3
046D13 00          0057*  	db 0 ; poly_id:4 4
046D14 00          0058*  	db 0 ; poly_id:5 5
046D15 00          0059*  	db 0 ; poly_id:6 6
046D16 00          0060*  	db 0 ; poly_id:7 7
046D17 00          0061*  	db 0 ; poly_id:8 8
046D18 01          0062*  	db 1 ; poly_id:9 9
046D19 02          0063*  	db 2 ; poly_id:10 10
046D1A 03          0064*  	db 3 ; poly_id:11 11
046D1B 04          0065*  	db 4 ; poly_id:12 12
046D1C 05          0066*  	db 5 ; poly_id:13 13
046D1D 06          0067*  	db 6 ; poly_id:14 14
046D1E 07          0068*  	db 7 ; poly_id:15 15
046D1F 08          0069*  	db 8 ; poly_id:16 16
046D20 09          0070*  	db 9 ; poly_id:17 17
046D21 09          0071*  	db 9 ; poly_id:18 18
046D22 09          0072*  	db 9 ; poly_id:19 19
046D23 09          0073*  	db 9 ; poly_id:20 20
046D24 09          0074*  	db 9 ; poly_id:21 21
046D25 09          0075*  	db 9 ; poly_id:22 22
046D26 09          0076*  	db 9 ; poly_id:23 23
046D27 0A          0077*  	db 10 ; poly_id:24 24
046D28 0B          0078*  	db 11 ; poly_id:25 25
046D29 0C          0079*  	db 12 ; poly_id:26 26
046D2A 0D          0080*  	db 13 ; poly_id:27 27
046D2B 0E          0081*  	db 14 ; poly_id:28 28
046D2C 0F          0082*  	db 15 ; poly_id:29 29
046D2D 10          0083*  	db 16 ; poly_id:30 30
046D2E 10          0084*  	db 16 ; poly_id:31 31
046D2F 10          0085*  	db 16 ; poly_id:32 32
046D30 10          0086*  	db 16 ; poly_id:33 33
046D31 10          0087*  	db 16 ; poly_id:34 34
046D32 11          0088*  	db 17 ; poly_id:35 35
046D33 12          0089*  	db 18 ; poly_id:36 36
046D34 13          0090*  	db 19 ; poly_id:37 37
046D35 14          0091*  	db 20 ; poly_id:38 38
046D36 15          0092*  	db 21 ; poly_id:39 39
046D37 15          0093*  	db 21 ; poly_id:40 40
046D38 15          0094*  	db 21 ; poly_id:41 41
046D39 16          0095*  	db 22 ; poly_id:42 42
046D3A 17          0096*  	db 23 ; poly_id:43 43
046D3B 18          0097*  	db 24 ; poly_id:44 44
046D3C             0098*  
046D3C             0099*  cube_img_idx_lookup:
046D3C             0100*  ;	 img_idx,  bank_id,  obj_id,  tile_name
046D3C 00 01 00    0101*  	dl BUF_10_004 ; idx:0 render_obj_id:10 LIGHT GREY WALL
046D3F 19 01 00    0102*  	dl BUF_11_004 ; idx:1 render_obj_id:11 JAIL CELL
046D42 32 01 00    0103*  	dl BUF_12_004 ; idx:2 render_obj_id:12 STONE ARCH BIRD
046D45 4B 01 00    0104*  	dl BUF_13_004 ; idx:3 render_obj_id:13 DARK GREY WALL
046D48 64 01 00    0105*  	dl BUF_14_004 ; idx:4 render_obj_id:14 WOOD WALL
046D4B 7D 01 00    0106*  	dl BUF_15_004 ; idx:5 render_obj_id:15 HANGING FLAG
046D4E 96 01 00    0107*  	dl BUF_16_004 ; idx:6 render_obj_id:16 WOOD EAGLE
046D51 AF 01 00    0108*  	dl BUF_17_004 ; idx:7 render_obj_id:17 BLUE WALL
046D54 C8 01 00    0109*  	dl BUF_57_004 ; idx:8 render_obj_id:57 REGULAR DOOR
046D57 E1 01 00    0110*  	dl BUF_58_004 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
046D5A FA 01 00    0111*  	dl BUF_59_004 ; idx:10 render_obj_id:59 ELEVATOR DOOR
046D5D             0112*  
046D5D             0113*  ; map_delta_x,  map_delta_y
046D5D             0114*  polys_map_deltas_0: ; north orientation
046D5D FC FB       0115*  	db 0xFC,0xFB ; poly_id:0 00
046D5F FD FB       0116*  	db 0xFD,0xFB ; poly_id:1 01
046D61 FE FB       0117*  	db 0xFE,0xFB ; poly_id:2 02
046D63 FF FB       0118*  	db 0xFF,0xFB ; poly_id:3 03
046D65 00 FB       0119*  	db 0x00,0xFB ; poly_id:4 04
046D67 01 FB       0120*  	db 0x01,0xFB ; poly_id:5 05
046D69 02 FB       0121*  	db 0x02,0xFB ; poly_id:6 06
046D6B 03 FB       0122*  	db 0x03,0xFB ; poly_id:7 07
046D6D 04 FB       0123*  	db 0x04,0xFB ; poly_id:8 08
046D6F FC FC       0124*  	db 0xFC,0xFC ; poly_id:9 09
046D71 FD FC       0125*  	db 0xFD,0xFC ; poly_id:10 0A
046D73 FE FC       0126*  	db 0xFE,0xFC ; poly_id:11 0B
046D75 FF FC       0127*  	db 0xFF,0xFC ; poly_id:12 0C
046D77 01 FC       0128*  	db 0x01,0xFC ; poly_id:13 0D
046D79 02 FC       0129*  	db 0x02,0xFC ; poly_id:14 0E
046D7B 03 FC       0130*  	db 0x03,0xFC ; poly_id:15 0F
046D7D 04 FC       0131*  	db 0x04,0xFC ; poly_id:16 10
046D7F FD FC       0132*  	db 0xFD,0xFC ; poly_id:17 11
046D81 FE FC       0133*  	db 0xFE,0xFC ; poly_id:18 12
046D83 FF FC       0134*  	db 0xFF,0xFC ; poly_id:19 13
046D85 00 FC       0135*  	db 0x00,0xFC ; poly_id:20 14
046D87 01 FC       0136*  	db 0x01,0xFC ; poly_id:21 15
046D89 02 FC       0137*  	db 0x02,0xFC ; poly_id:22 16
046D8B 03 FC       0138*  	db 0x03,0xFC ; poly_id:23 17
046D8D FD FD       0139*  	db 0xFD,0xFD ; poly_id:24 18
046D8F FE FD       0140*  	db 0xFE,0xFD ; poly_id:25 19
046D91 FF FD       0141*  	db 0xFF,0xFD ; poly_id:26 1A
046D93 01 FD       0142*  	db 0x01,0xFD ; poly_id:27 1B
046D95 02 FD       0143*  	db 0x02,0xFD ; poly_id:28 1C
046D97 03 FD       0144*  	db 0x03,0xFD ; poly_id:29 1D
046D99 FE FD       0145*  	db 0xFE,0xFD ; poly_id:30 1E
046D9B FF FD       0146*  	db 0xFF,0xFD ; poly_id:31 1F
046D9D 00 FD       0147*  	db 0x00,0xFD ; poly_id:32 20
046D9F 01 FD       0148*  	db 0x01,0xFD ; poly_id:33 21
046DA1 02 FD       0149*  	db 0x02,0xFD ; poly_id:34 22
046DA3 FE FE       0150*  	db 0xFE,0xFE ; poly_id:35 23
046DA5 FF FE       0151*  	db 0xFF,0xFE ; poly_id:36 24
046DA7 01 FE       0152*  	db 0x01,0xFE ; poly_id:37 25
046DA9 02 FE       0153*  	db 0x02,0xFE ; poly_id:38 26
046DAB FF FE       0154*  	db 0xFF,0xFE ; poly_id:39 27
046DAD 00 FE       0155*  	db 0x00,0xFE ; poly_id:40 28
046DAF 01 FE       0156*  	db 0x01,0xFE ; poly_id:41 29
046DB1 FF FF       0157*  	db 0xFF,0xFF ; poly_id:42 2A
046DB3 01 FF       0158*  	db 0x01,0xFF ; poly_id:43 2B
046DB5 00 FF       0159*  	db 0x00,0xFF ; poly_id:44 2C
046DB7             0160*  
046DB7             0161*  polys_map_deltas_1: ; east orientation
046DB7 05 FC       0162*  	db 0x05,0xFC ; poly_id:0 00
046DB9 05 FD       0163*  	db 0x05,0xFD ; poly_id:1 01
046DBB 05 FE       0164*  	db 0x05,0xFE ; poly_id:2 02
046DBD 05 FF       0165*  	db 0x05,0xFF ; poly_id:3 03
046DBF 05 00       0166*  	db 0x05,0x00 ; poly_id:4 04
046DC1 05 01       0167*  	db 0x05,0x01 ; poly_id:5 05
046DC3 05 02       0168*  	db 0x05,0x02 ; poly_id:6 06
046DC5 05 03       0169*  	db 0x05,0x03 ; poly_id:7 07
046DC7 05 04       0170*  	db 0x05,0x04 ; poly_id:8 08
046DC9 04 FC       0171*  	db 0x04,0xFC ; poly_id:9 09
046DCB 04 FD       0172*  	db 0x04,0xFD ; poly_id:10 0A
046DCD 04 FE       0173*  	db 0x04,0xFE ; poly_id:11 0B
046DCF 04 FF       0174*  	db 0x04,0xFF ; poly_id:12 0C
046DD1 04 01       0175*  	db 0x04,0x01 ; poly_id:13 0D
046DD3 04 02       0176*  	db 0x04,0x02 ; poly_id:14 0E
046DD5 04 03       0177*  	db 0x04,0x03 ; poly_id:15 0F
046DD7 04 04       0178*  	db 0x04,0x04 ; poly_id:16 10
046DD9 04 FD       0179*  	db 0x04,0xFD ; poly_id:17 11
046DDB 04 FE       0180*  	db 0x04,0xFE ; poly_id:18 12
046DDD 04 FF       0181*  	db 0x04,0xFF ; poly_id:19 13
046DDF 04 00       0182*  	db 0x04,0x00 ; poly_id:20 14
046DE1 04 01       0183*  	db 0x04,0x01 ; poly_id:21 15
046DE3 04 02       0184*  	db 0x04,0x02 ; poly_id:22 16
046DE5 04 03       0185*  	db 0x04,0x03 ; poly_id:23 17
046DE7 03 FD       0186*  	db 0x03,0xFD ; poly_id:24 18
046DE9 03 FE       0187*  	db 0x03,0xFE ; poly_id:25 19
046DEB 03 FF       0188*  	db 0x03,0xFF ; poly_id:26 1A
046DED 03 01       0189*  	db 0x03,0x01 ; poly_id:27 1B
046DEF 03 02       0190*  	db 0x03,0x02 ; poly_id:28 1C
046DF1 03 03       0191*  	db 0x03,0x03 ; poly_id:29 1D
046DF3 03 FE       0192*  	db 0x03,0xFE ; poly_id:30 1E
046DF5 03 FF       0193*  	db 0x03,0xFF ; poly_id:31 1F
046DF7 03 00       0194*  	db 0x03,0x00 ; poly_id:32 20
046DF9 03 01       0195*  	db 0x03,0x01 ; poly_id:33 21
046DFB 03 02       0196*  	db 0x03,0x02 ; poly_id:34 22
046DFD 02 FE       0197*  	db 0x02,0xFE ; poly_id:35 23
046DFF 02 FF       0198*  	db 0x02,0xFF ; poly_id:36 24
046E01 02 01       0199*  	db 0x02,0x01 ; poly_id:37 25
046E03 02 02       0200*  	db 0x02,0x02 ; poly_id:38 26
046E05 02 FF       0201*  	db 0x02,0xFF ; poly_id:39 27
046E07 02 00       0202*  	db 0x02,0x00 ; poly_id:40 28
046E09 02 01       0203*  	db 0x02,0x01 ; poly_id:41 29
046E0B 01 FF       0204*  	db 0x01,0xFF ; poly_id:42 2A
046E0D 01 01       0205*  	db 0x01,0x01 ; poly_id:43 2B
046E0F 01 00       0206*  	db 0x01,0x00 ; poly_id:44 2C
046E11             0207*  
046E11             0208*  polys_map_deltas_2: ; south orientation
046E11 04 05       0209*  	db 0x04,0x05 ; poly_id:0 00
046E13 03 05       0210*  	db 0x03,0x05 ; poly_id:1 01
046E15 02 05       0211*  	db 0x02,0x05 ; poly_id:2 02
046E17 01 05       0212*  	db 0x01,0x05 ; poly_id:3 03
046E19 00 05       0213*  	db 0x00,0x05 ; poly_id:4 04
046E1B FF 05       0214*  	db 0xFF,0x05 ; poly_id:5 05
046E1D FE 05       0215*  	db 0xFE,0x05 ; poly_id:6 06
046E1F FD 05       0216*  	db 0xFD,0x05 ; poly_id:7 07
046E21 FC 05       0217*  	db 0xFC,0x05 ; poly_id:8 08
046E23 04 04       0218*  	db 0x04,0x04 ; poly_id:9 09
046E25 03 04       0219*  	db 0x03,0x04 ; poly_id:10 0A
046E27 02 04       0220*  	db 0x02,0x04 ; poly_id:11 0B
046E29 01 04       0221*  	db 0x01,0x04 ; poly_id:12 0C
046E2B FF 04       0222*  	db 0xFF,0x04 ; poly_id:13 0D
046E2D FE 04       0223*  	db 0xFE,0x04 ; poly_id:14 0E
046E2F FD 04       0224*  	db 0xFD,0x04 ; poly_id:15 0F
046E31 FC 04       0225*  	db 0xFC,0x04 ; poly_id:16 10
046E33 03 04       0226*  	db 0x03,0x04 ; poly_id:17 11
046E35 02 04       0227*  	db 0x02,0x04 ; poly_id:18 12
046E37 01 04       0228*  	db 0x01,0x04 ; poly_id:19 13
046E39 00 04       0229*  	db 0x00,0x04 ; poly_id:20 14
046E3B FF 04       0230*  	db 0xFF,0x04 ; poly_id:21 15
046E3D FE 04       0231*  	db 0xFE,0x04 ; poly_id:22 16
046E3F FD 04       0232*  	db 0xFD,0x04 ; poly_id:23 17
046E41 03 03       0233*  	db 0x03,0x03 ; poly_id:24 18
046E43 02 03       0234*  	db 0x02,0x03 ; poly_id:25 19
046E45 01 03       0235*  	db 0x01,0x03 ; poly_id:26 1A
046E47 FF 03       0236*  	db 0xFF,0x03 ; poly_id:27 1B
046E49 FE 03       0237*  	db 0xFE,0x03 ; poly_id:28 1C
046E4B FD 03       0238*  	db 0xFD,0x03 ; poly_id:29 1D
046E4D 02 03       0239*  	db 0x02,0x03 ; poly_id:30 1E
046E4F 01 03       0240*  	db 0x01,0x03 ; poly_id:31 1F
046E51 00 03       0241*  	db 0x00,0x03 ; poly_id:32 20
046E53 FF 03       0242*  	db 0xFF,0x03 ; poly_id:33 21
046E55 FE 03       0243*  	db 0xFE,0x03 ; poly_id:34 22
046E57 02 02       0244*  	db 0x02,0x02 ; poly_id:35 23
046E59 01 02       0245*  	db 0x01,0x02 ; poly_id:36 24
046E5B FF 02       0246*  	db 0xFF,0x02 ; poly_id:37 25
046E5D FE 02       0247*  	db 0xFE,0x02 ; poly_id:38 26
046E5F 01 02       0248*  	db 0x01,0x02 ; poly_id:39 27
046E61 00 02       0249*  	db 0x00,0x02 ; poly_id:40 28
046E63 FF 02       0250*  	db 0xFF,0x02 ; poly_id:41 29
046E65 01 01       0251*  	db 0x01,0x01 ; poly_id:42 2A
046E67 FF 01       0252*  	db 0xFF,0x01 ; poly_id:43 2B
046E69 00 01       0253*  	db 0x00,0x01 ; poly_id:44 2C
046E6B             0254*  
046E6B             0255*  polys_map_deltas_3: ; west orientation
046E6B FB 04       0256*  	db 0xFB,0x04 ; poly_id:0 00
046E6D FB 03       0257*  	db 0xFB,0x03 ; poly_id:1 01
046E6F FB 02       0258*  	db 0xFB,0x02 ; poly_id:2 02
046E71 FB 01       0259*  	db 0xFB,0x01 ; poly_id:3 03
046E73 FB 00       0260*  	db 0xFB,0x00 ; poly_id:4 04
046E75 FB FF       0261*  	db 0xFB,0xFF ; poly_id:5 05
046E77 FB FE       0262*  	db 0xFB,0xFE ; poly_id:6 06
046E79 FB FD       0263*  	db 0xFB,0xFD ; poly_id:7 07
046E7B FB FC       0264*  	db 0xFB,0xFC ; poly_id:8 08
046E7D FC 04       0265*  	db 0xFC,0x04 ; poly_id:9 09
046E7F FC 03       0266*  	db 0xFC,0x03 ; poly_id:10 0A
046E81 FC 02       0267*  	db 0xFC,0x02 ; poly_id:11 0B
046E83 FC 01       0268*  	db 0xFC,0x01 ; poly_id:12 0C
046E85 FC FF       0269*  	db 0xFC,0xFF ; poly_id:13 0D
046E87 FC FE       0270*  	db 0xFC,0xFE ; poly_id:14 0E
046E89 FC FD       0271*  	db 0xFC,0xFD ; poly_id:15 0F
046E8B FC FC       0272*  	db 0xFC,0xFC ; poly_id:16 10
046E8D FC 03       0273*  	db 0xFC,0x03 ; poly_id:17 11
046E8F FC 02       0274*  	db 0xFC,0x02 ; poly_id:18 12
046E91 FC 01       0275*  	db 0xFC,0x01 ; poly_id:19 13
046E93 FC 00       0276*  	db 0xFC,0x00 ; poly_id:20 14
046E95 FC FF       0277*  	db 0xFC,0xFF ; poly_id:21 15
046E97 FC FE       0278*  	db 0xFC,0xFE ; poly_id:22 16
046E99 FC FD       0279*  	db 0xFC,0xFD ; poly_id:23 17
046E9B FD 03       0280*  	db 0xFD,0x03 ; poly_id:24 18
046E9D FD 02       0281*  	db 0xFD,0x02 ; poly_id:25 19
046E9F FD 01       0282*  	db 0xFD,0x01 ; poly_id:26 1A
046EA1 FD FF       0283*  	db 0xFD,0xFF ; poly_id:27 1B
046EA3 FD FE       0284*  	db 0xFD,0xFE ; poly_id:28 1C
046EA5 FD FD       0285*  	db 0xFD,0xFD ; poly_id:29 1D
046EA7 FD 02       0286*  	db 0xFD,0x02 ; poly_id:30 1E
046EA9 FD 01       0287*  	db 0xFD,0x01 ; poly_id:31 1F
046EAB FD 00       0288*  	db 0xFD,0x00 ; poly_id:32 20
046EAD FD FF       0289*  	db 0xFD,0xFF ; poly_id:33 21
046EAF FD FE       0290*  	db 0xFD,0xFE ; poly_id:34 22
046EB1 FE 02       0291*  	db 0xFE,0x02 ; poly_id:35 23
046EB3 FE 01       0292*  	db 0xFE,0x01 ; poly_id:36 24
046EB5 FE FF       0293*  	db 0xFE,0xFF ; poly_id:37 25
046EB7 FE FE       0294*  	db 0xFE,0xFE ; poly_id:38 26
046EB9 FE 01       0295*  	db 0xFE,0x01 ; poly_id:39 27
046EBB FE 00       0296*  	db 0xFE,0x00 ; poly_id:40 28
046EBD FE FF       0297*  	db 0xFE,0xFF ; poly_id:41 29
046EBF FF 01       0298*  	db 0xFF,0x01 ; poly_id:42 2A
046EC1 FF FF       0299*  	db 0xFF,0xFF ; poly_id:43 2B
046EC3 FF 00       0300*  	db 0xFF,0x00 ; poly_id:44 2C
046EC5             0301*  
046EC5             0302*  num_sprite_polys: equ 25
046EC5             0303*  
046EC5             0304*  sprite_polys_lookup:
046EC5             0305*  ;south_id 	; poly_id
046EC5 00          0306*  	db 0	; 0
046EC6 01          0307*  	db 1	; 1
046EC7 02          0308*  	db 2	; 2
046EC8 03          0309*  	db 3	; 3
046EC9 04          0310*  	db 4	; 4
046ECA 05          0311*  	db 5	; 5
046ECB 06          0312*  	db 6	; 6
046ECC 07          0313*  	db 7	; 7
046ECD 08          0314*  	db 8	; 8
046ECE FF          0315*  	db 255	; 9
046ECF FF          0316*  	db 255	; 10
046ED0 FF          0317*  	db 255	; 11
046ED1 FF          0318*  	db 255	; 12
046ED2 FF          0319*  	db 255	; 13
046ED3 FF          0320*  	db 255	; 14
046ED4 FF          0321*  	db 255	; 15
046ED5 FF          0322*  	db 255	; 16
046ED6 09          0323*  	db 9	; 17
046ED7 0A          0324*  	db 10	; 18
046ED8 0B          0325*  	db 11	; 19
046ED9 0C          0326*  	db 12	; 20
046EDA 0D          0327*  	db 13	; 21
046EDB 0E          0328*  	db 14	; 22
046EDC 0F          0329*  	db 15	; 23
046EDD FF          0330*  	db 255	; 24
046EDE FF          0331*  	db 255	; 25
046EDF FF          0332*  	db 255	; 26
046EE0 FF          0333*  	db 255	; 27
046EE1 FF          0334*  	db 255	; 28
046EE2 FF          0335*  	db 255	; 29
046EE3 10          0336*  	db 16	; 30
046EE4 11          0337*  	db 17	; 31
046EE5 12          0338*  	db 18	; 32
046EE6 13          0339*  	db 19	; 33
046EE7 14          0340*  	db 20	; 34
046EE8 FF          0341*  	db 255	; 35
046EE9 FF          0342*  	db 255	; 36
046EEA FF          0343*  	db 255	; 37
046EEB FF          0344*  	db 255	; 38
046EEC 15          0345*  	db 21	; 39
046EED 16          0346*  	db 22	; 40
046EEE 17          0347*  	db 23	; 41
046EEF FF          0348*  	db 255	; 42
046EF0 FF          0349*  	db 255	; 43
046EF1 18          0350*  	db 24	; 44
046EF2             0351*  
046EF2             0352*  sprite_imgs_lookup:
046EF2             0353*  ;	 sprite_obj; render_obj_id
046EF2 2B 6F 04    0354*  	dl sprite_obj_000 ; render_obj_id:20
046EF5 0C 70 04    0355*  	dl sprite_obj_001 ; render_obj_id:21
046EF8 ED 70 04    0356*  	dl sprite_obj_002 ; render_obj_id:22
046EFB CE 71 04    0357*  	dl sprite_obj_003 ; render_obj_id:23
046EFE AF 72 04    0358*  	dl sprite_obj_004 ; render_obj_id:24
046F01 90 73 04    0359*  	dl sprite_obj_005 ; render_obj_id:40
046F04 71 74 04    0360*  	dl sprite_obj_006 ; render_obj_id:41
046F07 52 75 04    0361*  	dl sprite_obj_007 ; render_obj_id:42
046F0A 33 76 04    0362*  	dl sprite_obj_008 ; render_obj_id:43
046F0D 14 77 04    0363*  	dl sprite_obj_009 ; render_obj_id:44
046F10 F5 77 04    0364*  	dl sprite_obj_010 ; render_obj_id:45
046F13 D6 78 04    0365*  	dl sprite_obj_011 ; render_obj_id:46
046F16 B7 79 04    0366*  	dl sprite_obj_012 ; render_obj_id:47
046F19 98 7A 04    0367*  	dl sprite_obj_013 ; render_obj_id:48
046F1C 79 7B 04    0368*  	dl sprite_obj_014 ; render_obj_id:49
046F1F 5A 7C 04    0369*  	dl sprite_obj_015 ; render_obj_id:50
046F22 3B 7D 04    0370*  	dl sprite_obj_016 ; render_obj_id:51
046F25 1C 7E 04    0371*  	dl sprite_obj_017 ; render_obj_id:52
046F28 FD 7E 04    0372*  	dl sprite_obj_018 ; render_obj_id:56
046F2B             0373*  ;	 plot_x,  plot_y, buffer_label
046F2B             0374*  
046F2B             0375*  ; render_obj_id:20
046F2B             0376*  sprite_obj_000:
046F2B 09 00 00 4E 0377*  	dl 0x000009,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F34 2C 00 00 4E 0378*  	dl 0x00002C,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F3D 50 00 00 4E 0379*  	dl 0x000050,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F46 73 00 00 4E 0380*  	dl 0x000073,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F4F 97 00 00 4E 0381*  	dl 0x000097,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F58 BA 00 00 4E 0382*  	dl 0x0000BA,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F61 DE 00 00 4E 0383*  	dl 0x0000DE,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F6A 01 01 00 4E 0384*  	dl 0x000101,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F73 25 01 00 4E 0385*  	dl 0x000125,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046F7C 0B 00 00 4E 0386*  	dl 0x00000B,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046F85 39 00 00 4E 0387*  	dl 0x000039,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046F8E 66 00 00 4E 0388*  	dl 0x000066,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046F97 94 00 00 4E 0389*  	dl 0x000094,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046FA0 C1 00 00 4E 0390*  	dl 0x0000C1,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046FA9 EF 00 00 4E 0391*  	dl 0x0000EF,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046FB2 1C 01 00 4E 0392*  	dl 0x00011C,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046FBB 11 00 00 4D 0393*  	dl 0x000011,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046FC4 50 00 00 4D 0394*  	dl 0x000050,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046FCD 91 00 00 4D 0395*  	dl 0x000091,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046FD6 D1 00 00 4D 0396*  	dl 0x0000D1,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046FDF 11 01 00 4D 0397*  	dl 0x000111,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046FE8 1B 00 00 4C 0398*  	dl 0x00001B,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046FF1 85 00 00 4C 0399*  	dl 0x000085,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046FFA F0 00 00 4C 0400*  	dl 0x0000F0,0x00004C,BUF_20_040
       00 00 16 02 
       00          
047003 6B 00 00 44 0401*  	dl 0x00006B,0x000044,BUF_20_044
       00 00 17 02 
       00          
04700C             0402*  
04700C             0403*  ; render_obj_id:21
04700C             0404*  sprite_obj_001:
04700C 0D 00 00 55 0405*  	dl 0x00000D,0x000055,BUF_21_004
       00 00 18 02 
       00          
047015 30 00 00 55 0406*  	dl 0x000030,0x000055,BUF_21_004
       00 00 18 02 
       00          
04701E 54 00 00 55 0407*  	dl 0x000054,0x000055,BUF_21_004
       00 00 18 02 
       00          
047027 77 00 00 55 0408*  	dl 0x000077,0x000055,BUF_21_004
       00 00 18 02 
       00          
047030 9B 00 00 55 0409*  	dl 0x00009B,0x000055,BUF_21_004
       00 00 18 02 
       00          
047039 BE 00 00 55 0410*  	dl 0x0000BE,0x000055,BUF_21_004
       00 00 18 02 
       00          
047042 E2 00 00 55 0411*  	dl 0x0000E2,0x000055,BUF_21_004
       00 00 18 02 
       00          
04704B 05 01 00 55 0412*  	dl 0x000105,0x000055,BUF_21_004
       00 00 18 02 
       00          
047054 29 01 00 55 0413*  	dl 0x000129,0x000055,BUF_21_004
       00 00 18 02 
       00          
04705D 10 00 00 57 0414*  	dl 0x000010,0x000057,BUF_21_020
       00 00 19 02 
       00          
047066 3E 00 00 57 0415*  	dl 0x00003E,0x000057,BUF_21_020
       00 00 19 02 
       00          
04706F 6B 00 00 57 0416*  	dl 0x00006B,0x000057,BUF_21_020
       00 00 19 02 
       00          
047078 99 00 00 57 0417*  	dl 0x000099,0x000057,BUF_21_020
       00 00 19 02 
       00          
047081 C6 00 00 57 0418*  	dl 0x0000C6,0x000057,BUF_21_020
       00 00 19 02 
       00          
04708A F4 00 00 57 0419*  	dl 0x0000F4,0x000057,BUF_21_020
       00 00 19 02 
       00          
047093 21 01 00 57 0420*  	dl 0x000121,0x000057,BUF_21_020
       00 00 19 02 
       00          
04709C 16 00 00 5A 0421*  	dl 0x000016,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0470A5 55 00 00 5A 0422*  	dl 0x000055,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0470AE 96 00 00 5A 0423*  	dl 0x000096,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0470B7 D6 00 00 5A 0424*  	dl 0x0000D6,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0470C0 16 01 00 5A 0425*  	dl 0x000116,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0470C9 26 00 00 60 0426*  	dl 0x000026,0x000060,BUF_21_040
       00 00 1B 02 
       00          
0470D2 90 00 00 60 0427*  	dl 0x000090,0x000060,BUF_21_040
       00 00 1B 02 
       00          
0470DB FB 00 00 60 0428*  	dl 0x0000FB,0x000060,BUF_21_040
       00 00 1B 02 
       00          
0470E4 6E 00 00 82 0429*  	dl 0x00006E,0x000082,BUF_21_044
       00 00 1C 02 
       00          
0470ED             0430*  
0470ED             0431*  ; render_obj_id:22
0470ED             0432*  sprite_obj_002:
0470ED 09 00 00 55 0433*  	dl 0x000009,0x000055,BUF_22_004
       00 00 1D 02 
       00          
0470F6 2C 00 00 55 0434*  	dl 0x00002C,0x000055,BUF_22_004
       00 00 1D 02 
       00          
0470FF 50 00 00 55 0435*  	dl 0x000050,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047108 73 00 00 55 0436*  	dl 0x000073,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047111 97 00 00 55 0437*  	dl 0x000097,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04711A BA 00 00 55 0438*  	dl 0x0000BA,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047123 DE 00 00 55 0439*  	dl 0x0000DE,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04712C 01 01 00 55 0440*  	dl 0x000101,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047135 25 01 00 55 0441*  	dl 0x000125,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04713E 0B 00 00 57 0442*  	dl 0x00000B,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047147 39 00 00 57 0443*  	dl 0x000039,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047150 66 00 00 57 0444*  	dl 0x000066,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047159 94 00 00 57 0445*  	dl 0x000094,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047162 C1 00 00 57 0446*  	dl 0x0000C1,0x000057,BUF_22_020
       00 00 1E 02 
       00          
04716B EF 00 00 57 0447*  	dl 0x0000EF,0x000057,BUF_22_020
       00 00 1E 02 
       00          
047174 1C 01 00 57 0448*  	dl 0x00011C,0x000057,BUF_22_020
       00 00 1E 02 
       00          
04717D 10 00 00 5A 0449*  	dl 0x000010,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
047186 4F 00 00 5A 0450*  	dl 0x00004F,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
04718F 90 00 00 5A 0451*  	dl 0x000090,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
047198 D0 00 00 5A 0452*  	dl 0x0000D0,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
0471A1 10 01 00 5A 0453*  	dl 0x000110,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
0471AA 1B 00 00 60 0454*  	dl 0x00001B,0x000060,BUF_22_040
       00 00 20 02 
       00          
0471B3 85 00 00 60 0455*  	dl 0x000085,0x000060,BUF_22_040
       00 00 20 02 
       00          
0471BC F0 00 00 60 0456*  	dl 0x0000F0,0x000060,BUF_22_040
       00 00 20 02 
       00          
0471C5 50 00 00 82 0457*  	dl 0x000050,0x000082,BUF_22_044
       00 00 21 02 
       00          
0471CE             0458*  
0471CE             0459*  ; render_obj_id:23
0471CE             0460*  sprite_obj_003:
0471CE 0C 00 00 3E 0461*  	dl 0x00000C,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0471D7 2F 00 00 3E 0462*  	dl 0x00002F,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0471E0 53 00 00 3E 0463*  	dl 0x000053,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0471E9 76 00 00 3E 0464*  	dl 0x000076,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0471F2 9A 00 00 3E 0465*  	dl 0x00009A,0x00003E,BUF_23_004
       00 00 22 02 
       00          
0471FB BD 00 00 3E 0466*  	dl 0x0000BD,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047204 E1 00 00 3E 0467*  	dl 0x0000E1,0x00003E,BUF_23_004
       00 00 22 02 
       00          
04720D 04 01 00 3E 0468*  	dl 0x000104,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047216 28 01 00 3E 0469*  	dl 0x000128,0x00003E,BUF_23_004
       00 00 22 02 
       00          
04721F 0F 00 00 39 0470*  	dl 0x00000F,0x000039,BUF_23_020
       00 00 23 02 
       00          
047228 3D 00 00 39 0471*  	dl 0x00003D,0x000039,BUF_23_020
       00 00 23 02 
       00          
047231 6A 00 00 39 0472*  	dl 0x00006A,0x000039,BUF_23_020
       00 00 23 02 
       00          
04723A 98 00 00 39 0473*  	dl 0x000098,0x000039,BUF_23_020
       00 00 23 02 
       00          
047243 C5 00 00 39 0474*  	dl 0x0000C5,0x000039,BUF_23_020
       00 00 23 02 
       00          
04724C F3 00 00 39 0475*  	dl 0x0000F3,0x000039,BUF_23_020
       00 00 23 02 
       00          
047255 20 01 00 39 0476*  	dl 0x000120,0x000039,BUF_23_020
       00 00 23 02 
       00          
04725E 16 00 00 30 0477*  	dl 0x000016,0x000030,BUF_23_032
       00 00 24 02 
       00          
047267 55 00 00 30 0478*  	dl 0x000055,0x000030,BUF_23_032
       00 00 24 02 
       00          
047270 96 00 00 30 0479*  	dl 0x000096,0x000030,BUF_23_032
       00 00 24 02 
       00          
047279 D6 00 00 30 0480*  	dl 0x0000D6,0x000030,BUF_23_032
       00 00 24 02 
       00          
047282 16 01 00 30 0481*  	dl 0x000116,0x000030,BUF_23_032
       00 00 24 02 
       00          
04728B 24 00 00 1A 0482*  	dl 0x000024,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047294 8E 00 00 1A 0483*  	dl 0x00008E,0x00001A,BUF_23_040
       00 00 25 02 
       00          
04729D F9 00 00 1A 0484*  	dl 0x0000F9,0x00001A,BUF_23_040
       00 00 25 02 
       00          
0472A6 09 01 00 83 0485*  	dl 0x000109,0x000083,BUF_23_044
       00 00 26 02 
       00          
0472AF             0486*  
0472AF             0487*  ; render_obj_id:24
0472AF             0488*  sprite_obj_004:
0472AF 0D 00 00 55 0489*  	dl 0x00000D,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472B8 30 00 00 55 0490*  	dl 0x000030,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472C1 54 00 00 55 0491*  	dl 0x000054,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472CA 77 00 00 55 0492*  	dl 0x000077,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472D3 9B 00 00 55 0493*  	dl 0x00009B,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472DC BE 00 00 55 0494*  	dl 0x0000BE,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472E5 E2 00 00 55 0495*  	dl 0x0000E2,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472EE 05 01 00 55 0496*  	dl 0x000105,0x000055,BUF_24_004
       00 00 27 02 
       00          
0472F7 29 01 00 55 0497*  	dl 0x000129,0x000055,BUF_24_004
       00 00 27 02 
       00          
047300 10 00 00 57 0498*  	dl 0x000010,0x000057,BUF_24_020
       00 00 28 02 
       00          
047309 3E 00 00 57 0499*  	dl 0x00003E,0x000057,BUF_24_020
       00 00 28 02 
       00          
047312 6B 00 00 57 0500*  	dl 0x00006B,0x000057,BUF_24_020
       00 00 28 02 
       00          
04731B 99 00 00 57 0501*  	dl 0x000099,0x000057,BUF_24_020
       00 00 28 02 
       00          
047324 C6 00 00 57 0502*  	dl 0x0000C6,0x000057,BUF_24_020
       00 00 28 02 
       00          
04732D F4 00 00 57 0503*  	dl 0x0000F4,0x000057,BUF_24_020
       00 00 28 02 
       00          
047336 21 01 00 57 0504*  	dl 0x000121,0x000057,BUF_24_020
       00 00 28 02 
       00          
04733F 16 00 00 5A 0505*  	dl 0x000016,0x00005A,BUF_24_032
       00 00 29 02 
       00          
047348 55 00 00 5A 0506*  	dl 0x000055,0x00005A,BUF_24_032
       00 00 29 02 
       00          
047351 96 00 00 5A 0507*  	dl 0x000096,0x00005A,BUF_24_032
       00 00 29 02 
       00          
04735A D6 00 00 5A 0508*  	dl 0x0000D6,0x00005A,BUF_24_032
       00 00 29 02 
       00          
047363 16 01 00 5A 0509*  	dl 0x000116,0x00005A,BUF_24_032
       00 00 29 02 
       00          
04736C 26 00 00 60 0510*  	dl 0x000026,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047375 90 00 00 60 0511*  	dl 0x000090,0x000060,BUF_24_040
       00 00 2A 02 
       00          
04737E FB 00 00 60 0512*  	dl 0x0000FB,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047387 6E 00 00 82 0513*  	dl 0x00006E,0x000082,BUF_24_044
       00 00 2B 02 
       00          
047390             0514*  
047390             0515*  ; render_obj_id:40
047390             0516*  sprite_obj_005:
047390 0A 00 00 5A 0517*  	dl 0x00000A,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047399 2D 00 00 5A 0518*  	dl 0x00002D,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473A2 51 00 00 5A 0519*  	dl 0x000051,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473AB 74 00 00 5A 0520*  	dl 0x000074,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473B4 98 00 00 5A 0521*  	dl 0x000098,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473BD BB 00 00 5A 0522*  	dl 0x0000BB,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473C6 DF 00 00 5A 0523*  	dl 0x0000DF,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473CF 02 01 00 5A 0524*  	dl 0x000102,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473D8 26 01 00 5A 0525*  	dl 0x000126,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0473E1 0D 00 00 5C 0526*  	dl 0x00000D,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0473EA 3B 00 00 5C 0527*  	dl 0x00003B,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0473F3 68 00 00 5C 0528*  	dl 0x000068,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0473FC 96 00 00 5C 0529*  	dl 0x000096,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047405 C3 00 00 5C 0530*  	dl 0x0000C3,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04740E F1 00 00 5C 0531*  	dl 0x0000F1,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047417 1E 01 00 5C 0532*  	dl 0x00011E,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047420 13 00 00 62 0533*  	dl 0x000013,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047429 52 00 00 62 0534*  	dl 0x000052,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047432 93 00 00 62 0535*  	dl 0x000093,0x000062,BUF_40_032
       00 00 2E 02 
       00          
04743B D3 00 00 62 0536*  	dl 0x0000D3,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047444 13 01 00 62 0537*  	dl 0x000113,0x000062,BUF_40_032
       00 00 2E 02 
       00          
04744D 20 00 00 6D 0538*  	dl 0x000020,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
047456 8A 00 00 6D 0539*  	dl 0x00008A,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
04745F F5 00 00 6D 0540*  	dl 0x0000F5,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
047468 E0 00 00 A0 0541*  	dl 0x0000E0,0x0000A0,BUF_40_044
       00 00 30 02 
       00          
047471             0542*  
047471             0543*  ; render_obj_id:41
047471             0544*  sprite_obj_006:
047471 0C 00 00 55 0545*  	dl 0x00000C,0x000055,BUF_41_004
       00 00 31 02 
       00          
04747A 2F 00 00 55 0546*  	dl 0x00002F,0x000055,BUF_41_004
       00 00 31 02 
       00          
047483 53 00 00 55 0547*  	dl 0x000053,0x000055,BUF_41_004
       00 00 31 02 
       00          
04748C 76 00 00 55 0548*  	dl 0x000076,0x000055,BUF_41_004
       00 00 31 02 
       00          
047495 9A 00 00 55 0549*  	dl 0x00009A,0x000055,BUF_41_004
       00 00 31 02 
       00          
04749E BD 00 00 55 0550*  	dl 0x0000BD,0x000055,BUF_41_004
       00 00 31 02 
       00          
0474A7 E1 00 00 55 0551*  	dl 0x0000E1,0x000055,BUF_41_004
       00 00 31 02 
       00          
0474B0 04 01 00 55 0552*  	dl 0x000104,0x000055,BUF_41_004
       00 00 31 02 
       00          
0474B9 28 01 00 55 0553*  	dl 0x000128,0x000055,BUF_41_004
       00 00 31 02 
       00          
0474C2 0E 00 00 57 0554*  	dl 0x00000E,0x000057,BUF_41_020
       00 00 32 02 
       00          
0474CB 3C 00 00 57 0555*  	dl 0x00003C,0x000057,BUF_41_020
       00 00 32 02 
       00          
0474D4 69 00 00 57 0556*  	dl 0x000069,0x000057,BUF_41_020
       00 00 32 02 
       00          
0474DD 97 00 00 57 0557*  	dl 0x000097,0x000057,BUF_41_020
       00 00 32 02 
       00          
0474E6 C4 00 00 57 0558*  	dl 0x0000C4,0x000057,BUF_41_020
       00 00 32 02 
       00          
0474EF F2 00 00 57 0559*  	dl 0x0000F2,0x000057,BUF_41_020
       00 00 32 02 
       00          
0474F8 1F 01 00 57 0560*  	dl 0x00011F,0x000057,BUF_41_020
       00 00 32 02 
       00          
047501 15 00 00 5B 0561*  	dl 0x000015,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04750A 54 00 00 5B 0562*  	dl 0x000054,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047513 95 00 00 5B 0563*  	dl 0x000095,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04751C D5 00 00 5B 0564*  	dl 0x0000D5,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047525 15 01 00 5B 0565*  	dl 0x000115,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04752E 23 00 00 62 0566*  	dl 0x000023,0x000062,BUF_41_040
       00 00 34 02 
       00          
047537 8D 00 00 62 0567*  	dl 0x00008D,0x000062,BUF_41_040
       00 00 34 02 
       00          
047540 F8 00 00 62 0568*  	dl 0x0000F8,0x000062,BUF_41_040
       00 00 34 02 
       00          
047549 84 00 00 87 0569*  	dl 0x000084,0x000087,BUF_41_044
       00 00 35 02 
       00          
047552             0570*  
047552             0571*  ; render_obj_id:42
047552             0572*  sprite_obj_007:
047552 0D 00 00 57 0573*  	dl 0x00000D,0x000057,BUF_42_004
       00 00 36 02 
       00          
04755B 30 00 00 57 0574*  	dl 0x000030,0x000057,BUF_42_004
       00 00 36 02 
       00          
047564 54 00 00 57 0575*  	dl 0x000054,0x000057,BUF_42_004
       00 00 36 02 
       00          
04756D 77 00 00 57 0576*  	dl 0x000077,0x000057,BUF_42_004
       00 00 36 02 
       00          
047576 9B 00 00 57 0577*  	dl 0x00009B,0x000057,BUF_42_004
       00 00 36 02 
       00          
04757F BE 00 00 57 0578*  	dl 0x0000BE,0x000057,BUF_42_004
       00 00 36 02 
       00          
047588 E2 00 00 57 0579*  	dl 0x0000E2,0x000057,BUF_42_004
       00 00 36 02 
       00          
047591 05 01 00 57 0580*  	dl 0x000105,0x000057,BUF_42_004
       00 00 36 02 
       00          
04759A 29 01 00 57 0581*  	dl 0x000129,0x000057,BUF_42_004
       00 00 36 02 
       00          
0475A3 10 00 00 5A 0582*  	dl 0x000010,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0475AC 3E 00 00 5A 0583*  	dl 0x00003E,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0475B5 6B 00 00 5A 0584*  	dl 0x00006B,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0475BE 99 00 00 5A 0585*  	dl 0x000099,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0475C7 C6 00 00 5A 0586*  	dl 0x0000C6,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0475D0 F4 00 00 5A 0587*  	dl 0x0000F4,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0475D9 21 01 00 5A 0588*  	dl 0x000121,0x00005A,BUF_42_020
       00 00 37 02 
       00          
0475E2 18 00 00 5F 0589*  	dl 0x000018,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0475EB 57 00 00 5F 0590*  	dl 0x000057,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0475F4 98 00 00 5F 0591*  	dl 0x000098,0x00005F,BUF_42_032
       00 00 38 02 
       00          
0475FD D8 00 00 5F 0592*  	dl 0x0000D8,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047606 18 01 00 5F 0593*  	dl 0x000118,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04760F 28 00 00 69 0594*  	dl 0x000028,0x000069,BUF_42_040
       00 00 39 02 
       00          
047618 92 00 00 69 0595*  	dl 0x000092,0x000069,BUF_42_040
       00 00 39 02 
       00          
047621 FD 00 00 69 0596*  	dl 0x0000FD,0x000069,BUF_42_040
       00 00 39 02 
       00          
04762A 7D 00 00 9C 0597*  	dl 0x00007D,0x00009C,BUF_42_044
       00 00 3A 02 
       00          
047633             0598*  
047633             0599*  ; render_obj_id:43
047633             0600*  sprite_obj_008:
047633 0C 00 00 5C 0601*  	dl 0x00000C,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04763C 2F 00 00 5C 0602*  	dl 0x00002F,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047645 53 00 00 5C 0603*  	dl 0x000053,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04764E 76 00 00 5C 0604*  	dl 0x000076,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047657 9A 00 00 5C 0605*  	dl 0x00009A,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047660 BD 00 00 5C 0606*  	dl 0x0000BD,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047669 E1 00 00 5C 0607*  	dl 0x0000E1,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047672 04 01 00 5C 0608*  	dl 0x000104,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04767B 28 01 00 5C 0609*  	dl 0x000128,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047684 0F 00 00 61 0610*  	dl 0x00000F,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04768D 3D 00 00 61 0611*  	dl 0x00003D,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047696 6A 00 00 61 0612*  	dl 0x00006A,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04769F 98 00 00 61 0613*  	dl 0x000098,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0476A8 C5 00 00 61 0614*  	dl 0x0000C5,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0476B1 F3 00 00 61 0615*  	dl 0x0000F3,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0476BA 20 01 00 61 0616*  	dl 0x000120,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0476C3 15 00 00 68 0617*  	dl 0x000015,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0476CC 54 00 00 68 0618*  	dl 0x000054,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0476D5 95 00 00 68 0619*  	dl 0x000095,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0476DE D5 00 00 68 0620*  	dl 0x0000D5,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0476E7 15 01 00 68 0621*  	dl 0x000115,0x000068,BUF_43_032
       00 00 3D 02 
       00          
0476F0 24 00 00 77 0622*  	dl 0x000024,0x000077,BUF_43_040
       00 00 3E 02 
       00          
0476F9 8E 00 00 77 0623*  	dl 0x00008E,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047702 F9 00 00 77 0624*  	dl 0x0000F9,0x000077,BUF_43_040
       00 00 3E 02 
       00          
04770B D4 00 00 9F 0625*  	dl 0x0000D4,0x00009F,BUF_43_044
       00 00 3F 02 
       00          
047714             0626*  
047714             0627*  ; render_obj_id:44
047714             0628*  sprite_obj_009:
047714 0F 00 00 5C 0629*  	dl 0x00000F,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04771D 32 00 00 5C 0630*  	dl 0x000032,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047726 56 00 00 5C 0631*  	dl 0x000056,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04772F 79 00 00 5C 0632*  	dl 0x000079,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047738 9D 00 00 5C 0633*  	dl 0x00009D,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047741 C0 00 00 5C 0634*  	dl 0x0000C0,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04774A E4 00 00 5C 0635*  	dl 0x0000E4,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047753 07 01 00 5C 0636*  	dl 0x000107,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04775C 2B 01 00 5C 0637*  	dl 0x00012B,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047765 14 00 00 5F 0638*  	dl 0x000014,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04776E 42 00 00 5F 0639*  	dl 0x000042,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047777 6F 00 00 5F 0640*  	dl 0x00006F,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047780 9D 00 00 5F 0641*  	dl 0x00009D,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047789 CA 00 00 5F 0642*  	dl 0x0000CA,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047792 F8 00 00 5F 0643*  	dl 0x0000F8,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04779B 25 01 00 5F 0644*  	dl 0x000125,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0477A4 1B 00 00 66 0645*  	dl 0x00001B,0x000066,BUF_44_032
       00 00 42 02 
       00          
0477AD 5A 00 00 66 0646*  	dl 0x00005A,0x000066,BUF_44_032
       00 00 42 02 
       00          
0477B6 9B 00 00 66 0647*  	dl 0x00009B,0x000066,BUF_44_032
       00 00 42 02 
       00          
0477BF DB 00 00 66 0648*  	dl 0x0000DB,0x000066,BUF_44_032
       00 00 42 02 
       00          
0477C8 1B 01 00 66 0649*  	dl 0x00011B,0x000066,BUF_44_032
       00 00 42 02 
       00          
0477D1 2E 00 00 75 0650*  	dl 0x00002E,0x000075,BUF_44_040
       00 00 43 02 
       00          
0477DA 98 00 00 75 0651*  	dl 0x000098,0x000075,BUF_44_040
       00 00 43 02 
       00          
0477E3 03 01 00 75 0652*  	dl 0x000103,0x000075,BUF_44_040
       00 00 43 02 
       00          
0477EC C8 00 00 A1 0653*  	dl 0x0000C8,0x0000A1,BUF_44_044
       00 00 44 02 
       00          
0477F5             0654*  
0477F5             0655*  ; render_obj_id:45
0477F5             0656*  sprite_obj_010:
0477F5 09 00 00 56 0657*  	dl 0x000009,0x000056,BUF_45_004
       00 00 45 02 
       00          
0477FE 2C 00 00 56 0658*  	dl 0x00002C,0x000056,BUF_45_004
       00 00 45 02 
       00          
047807 50 00 00 56 0659*  	dl 0x000050,0x000056,BUF_45_004
       00 00 45 02 
       00          
047810 73 00 00 56 0660*  	dl 0x000073,0x000056,BUF_45_004
       00 00 45 02 
       00          
047819 97 00 00 56 0661*  	dl 0x000097,0x000056,BUF_45_004
       00 00 45 02 
       00          
047822 BA 00 00 56 0662*  	dl 0x0000BA,0x000056,BUF_45_004
       00 00 45 02 
       00          
04782B DE 00 00 56 0663*  	dl 0x0000DE,0x000056,BUF_45_004
       00 00 45 02 
       00          
047834 01 01 00 56 0664*  	dl 0x000101,0x000056,BUF_45_004
       00 00 45 02 
       00          
04783D 25 01 00 56 0665*  	dl 0x000125,0x000056,BUF_45_004
       00 00 45 02 
       00          
047846 0C 00 00 58 0666*  	dl 0x00000C,0x000058,BUF_45_020
       00 00 46 02 
       00          
04784F 3A 00 00 58 0667*  	dl 0x00003A,0x000058,BUF_45_020
       00 00 46 02 
       00          
047858 67 00 00 58 0668*  	dl 0x000067,0x000058,BUF_45_020
       00 00 46 02 
       00          
047861 95 00 00 58 0669*  	dl 0x000095,0x000058,BUF_45_020
       00 00 46 02 
       00          
04786A C2 00 00 58 0670*  	dl 0x0000C2,0x000058,BUF_45_020
       00 00 46 02 
       00          
047873 F0 00 00 58 0671*  	dl 0x0000F0,0x000058,BUF_45_020
       00 00 46 02 
       00          
04787C 1D 01 00 58 0672*  	dl 0x00011D,0x000058,BUF_45_020
       00 00 46 02 
       00          
047885 11 00 00 5D 0673*  	dl 0x000011,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04788E 50 00 00 5D 0674*  	dl 0x000050,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047897 91 00 00 5D 0675*  	dl 0x000091,0x00005D,BUF_45_032
       00 00 47 02 
       00          
0478A0 D1 00 00 5D 0676*  	dl 0x0000D1,0x00005D,BUF_45_032
       00 00 47 02 
       00          
0478A9 11 01 00 5D 0677*  	dl 0x000111,0x00005D,BUF_45_032
       00 00 47 02 
       00          
0478B2 1D 00 00 63 0678*  	dl 0x00001D,0x000063,BUF_45_040
       00 00 48 02 
       00          
0478BB 87 00 00 63 0679*  	dl 0x000087,0x000063,BUF_45_040
       00 00 48 02 
       00          
0478C4 F2 00 00 63 0680*  	dl 0x0000F2,0x000063,BUF_45_040
       00 00 48 02 
       00          
0478CD 58 00 00 8D 0681*  	dl 0x000058,0x00008D,BUF_45_044
       00 00 49 02 
       00          
0478D6             0682*  
0478D6             0683*  ; render_obj_id:46
0478D6             0684*  sprite_obj_011:
0478D6 09 00 00 58 0685*  	dl 0x000009,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0478DF 2C 00 00 58 0686*  	dl 0x00002C,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0478E8 50 00 00 58 0687*  	dl 0x000050,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0478F1 73 00 00 58 0688*  	dl 0x000073,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0478FA 97 00 00 58 0689*  	dl 0x000097,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047903 BA 00 00 58 0690*  	dl 0x0000BA,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04790C DE 00 00 58 0691*  	dl 0x0000DE,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047915 01 01 00 58 0692*  	dl 0x000101,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04791E 25 01 00 58 0693*  	dl 0x000125,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047927 0C 00 00 5A 0694*  	dl 0x00000C,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047930 3A 00 00 5A 0695*  	dl 0x00003A,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047939 67 00 00 5A 0696*  	dl 0x000067,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047942 95 00 00 5A 0697*  	dl 0x000095,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
04794B C2 00 00 5A 0698*  	dl 0x0000C2,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047954 F0 00 00 5A 0699*  	dl 0x0000F0,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
04795D 1D 01 00 5A 0700*  	dl 0x00011D,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047966 11 00 00 60 0701*  	dl 0x000011,0x000060,BUF_46_032
       00 00 4C 02 
       00          
04796F 50 00 00 60 0702*  	dl 0x000050,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047978 91 00 00 60 0703*  	dl 0x000091,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047981 D1 00 00 60 0704*  	dl 0x0000D1,0x000060,BUF_46_032
       00 00 4C 02 
       00          
04798A 11 01 00 60 0705*  	dl 0x000111,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047993 1D 00 00 69 0706*  	dl 0x00001D,0x000069,BUF_46_040
       00 00 4D 02 
       00          
04799C 87 00 00 69 0707*  	dl 0x000087,0x000069,BUF_46_040
       00 00 4D 02 
       00          
0479A5 F2 00 00 69 0708*  	dl 0x0000F2,0x000069,BUF_46_040
       00 00 4D 02 
       00          
0479AE 8E 00 00 9F 0709*  	dl 0x00008E,0x00009F,BUF_46_044
       00 00 4E 02 
       00          
0479B7             0710*  
0479B7             0711*  ; render_obj_id:47
0479B7             0712*  sprite_obj_012:
0479B7 09 00 00 57 0713*  	dl 0x000009,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479C0 2C 00 00 57 0714*  	dl 0x00002C,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479C9 50 00 00 57 0715*  	dl 0x000050,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479D2 73 00 00 57 0716*  	dl 0x000073,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479DB 97 00 00 57 0717*  	dl 0x000097,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479E4 BA 00 00 57 0718*  	dl 0x0000BA,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479ED DE 00 00 57 0719*  	dl 0x0000DE,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479F6 01 01 00 57 0720*  	dl 0x000101,0x000057,BUF_47_004
       00 00 4F 02 
       00          
0479FF 25 01 00 57 0721*  	dl 0x000125,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047A08 0C 00 00 59 0722*  	dl 0x00000C,0x000059,BUF_47_020
       00 00 50 02 
       00          
047A11 3A 00 00 59 0723*  	dl 0x00003A,0x000059,BUF_47_020
       00 00 50 02 
       00          
047A1A 67 00 00 59 0724*  	dl 0x000067,0x000059,BUF_47_020
       00 00 50 02 
       00          
047A23 95 00 00 59 0725*  	dl 0x000095,0x000059,BUF_47_020
       00 00 50 02 
       00          
047A2C C2 00 00 59 0726*  	dl 0x0000C2,0x000059,BUF_47_020
       00 00 50 02 
       00          
047A35 F0 00 00 59 0727*  	dl 0x0000F0,0x000059,BUF_47_020
       00 00 50 02 
       00          
047A3E 1D 01 00 59 0728*  	dl 0x00011D,0x000059,BUF_47_020
       00 00 50 02 
       00          
047A47 11 00 00 5E 0729*  	dl 0x000011,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047A50 50 00 00 5E 0730*  	dl 0x000050,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047A59 91 00 00 5E 0731*  	dl 0x000091,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047A62 D1 00 00 5E 0732*  	dl 0x0000D1,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047A6B 11 01 00 5E 0733*  	dl 0x000111,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047A74 1D 00 00 66 0734*  	dl 0x00001D,0x000066,BUF_47_040
       00 00 52 02 
       00          
047A7D 87 00 00 66 0735*  	dl 0x000087,0x000066,BUF_47_040
       00 00 52 02 
       00          
047A86 F2 00 00 66 0736*  	dl 0x0000F2,0x000066,BUF_47_040
       00 00 52 02 
       00          
047A8F B2 00 00 96 0737*  	dl 0x0000B2,0x000096,BUF_47_044
       00 00 53 02 
       00          
047A98             0738*  
047A98             0739*  ; render_obj_id:48
047A98             0740*  sprite_obj_013:
047A98 0A 00 00 5A 0741*  	dl 0x00000A,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047AA1 2D 00 00 5A 0742*  	dl 0x00002D,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047AAA 51 00 00 5A 0743*  	dl 0x000051,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047AB3 74 00 00 5A 0744*  	dl 0x000074,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047ABC 98 00 00 5A 0745*  	dl 0x000098,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047AC5 BB 00 00 5A 0746*  	dl 0x0000BB,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047ACE DF 00 00 5A 0747*  	dl 0x0000DF,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047AD7 02 01 00 5A 0748*  	dl 0x000102,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047AE0 26 01 00 5A 0749*  	dl 0x000126,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047AE9 0D 00 00 5C 0750*  	dl 0x00000D,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047AF2 3B 00 00 5C 0751*  	dl 0x00003B,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047AFB 68 00 00 5C 0752*  	dl 0x000068,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047B04 96 00 00 5C 0753*  	dl 0x000096,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047B0D C3 00 00 5C 0754*  	dl 0x0000C3,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047B16 F1 00 00 5C 0755*  	dl 0x0000F1,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047B1F 1E 01 00 5C 0756*  	dl 0x00011E,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047B28 12 00 00 62 0757*  	dl 0x000012,0x000062,BUF_48_032
       00 00 56 02 
       00          
047B31 51 00 00 62 0758*  	dl 0x000051,0x000062,BUF_48_032
       00 00 56 02 
       00          
047B3A 92 00 00 62 0759*  	dl 0x000092,0x000062,BUF_48_032
       00 00 56 02 
       00          
047B43 D2 00 00 62 0760*  	dl 0x0000D2,0x000062,BUF_48_032
       00 00 56 02 
       00          
047B4C 12 01 00 62 0761*  	dl 0x000112,0x000062,BUF_48_032
       00 00 56 02 
       00          
047B55 1D 00 00 6C 0762*  	dl 0x00001D,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047B5E 87 00 00 6C 0763*  	dl 0x000087,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047B67 F2 00 00 6C 0764*  	dl 0x0000F2,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047B70 00 01 00 A0 0765*  	dl 0x000100,0x0000A0,BUF_48_044
       00 00 58 02 
       00          
047B79             0766*  
047B79             0767*  ; render_obj_id:49
047B79             0768*  sprite_obj_014:
047B79 0A 00 00 59 0769*  	dl 0x00000A,0x000059,BUF_49_004
       00 00 59 02 
       00          
047B82 2D 00 00 59 0770*  	dl 0x00002D,0x000059,BUF_49_004
       00 00 59 02 
       00          
047B8B 51 00 00 59 0771*  	dl 0x000051,0x000059,BUF_49_004
       00 00 59 02 
       00          
047B94 74 00 00 59 0772*  	dl 0x000074,0x000059,BUF_49_004
       00 00 59 02 
       00          
047B9D 98 00 00 59 0773*  	dl 0x000098,0x000059,BUF_49_004
       00 00 59 02 
       00          
047BA6 BB 00 00 59 0774*  	dl 0x0000BB,0x000059,BUF_49_004
       00 00 59 02 
       00          
047BAF DF 00 00 59 0775*  	dl 0x0000DF,0x000059,BUF_49_004
       00 00 59 02 
       00          
047BB8 02 01 00 59 0776*  	dl 0x000102,0x000059,BUF_49_004
       00 00 59 02 
       00          
047BC1 26 01 00 59 0777*  	dl 0x000126,0x000059,BUF_49_004
       00 00 59 02 
       00          
047BCA 0E 00 00 5B 0778*  	dl 0x00000E,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047BD3 3C 00 00 5B 0779*  	dl 0x00003C,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047BDC 69 00 00 5B 0780*  	dl 0x000069,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047BE5 97 00 00 5B 0781*  	dl 0x000097,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047BEE C4 00 00 5B 0782*  	dl 0x0000C4,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047BF7 F2 00 00 5B 0783*  	dl 0x0000F2,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047C00 1F 01 00 5B 0784*  	dl 0x00011F,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047C09 13 00 00 62 0785*  	dl 0x000013,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047C12 52 00 00 62 0786*  	dl 0x000052,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047C1B 93 00 00 62 0787*  	dl 0x000093,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047C24 D3 00 00 62 0788*  	dl 0x0000D3,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047C2D 13 01 00 62 0789*  	dl 0x000113,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047C36 20 00 00 6C 0790*  	dl 0x000020,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047C3F 8A 00 00 6C 0791*  	dl 0x00008A,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047C48 F5 00 00 6C 0792*  	dl 0x0000F5,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047C51 E8 00 00 A0 0793*  	dl 0x0000E8,0x0000A0,BUF_49_044
       00 00 5D 02 
       00          
047C5A             0794*  
047C5A             0795*  ; render_obj_id:50
047C5A             0796*  sprite_obj_015:
047C5A 0D 00 00 53 0797*  	dl 0x00000D,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047C63 30 00 00 53 0798*  	dl 0x000030,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047C6C 54 00 00 53 0799*  	dl 0x000054,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047C75 77 00 00 53 0800*  	dl 0x000077,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047C7E 9B 00 00 53 0801*  	dl 0x00009B,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047C87 BE 00 00 53 0802*  	dl 0x0000BE,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047C90 E2 00 00 53 0803*  	dl 0x0000E2,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047C99 05 01 00 53 0804*  	dl 0x000105,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047CA2 29 01 00 53 0805*  	dl 0x000129,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047CAB 10 00 00 54 0806*  	dl 0x000010,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047CB4 3E 00 00 54 0807*  	dl 0x00003E,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047CBD 6B 00 00 54 0808*  	dl 0x00006B,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047CC6 99 00 00 54 0809*  	dl 0x000099,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047CCF C6 00 00 54 0810*  	dl 0x0000C6,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047CD8 F4 00 00 54 0811*  	dl 0x0000F4,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047CE1 21 01 00 54 0812*  	dl 0x000121,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047CEA 16 00 00 56 0813*  	dl 0x000016,0x000056,BUF_50_032
       00 00 60 02 
       00          
047CF3 55 00 00 56 0814*  	dl 0x000055,0x000056,BUF_50_032
       00 00 60 02 
       00          
047CFC 96 00 00 56 0815*  	dl 0x000096,0x000056,BUF_50_032
       00 00 60 02 
       00          
047D05 D6 00 00 56 0816*  	dl 0x0000D6,0x000056,BUF_50_032
       00 00 60 02 
       00          
047D0E 16 01 00 56 0817*  	dl 0x000116,0x000056,BUF_50_032
       00 00 60 02 
       00          
047D17 26 00 00 5A 0818*  	dl 0x000026,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047D20 90 00 00 5A 0819*  	dl 0x000090,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047D29 FB 00 00 5A 0820*  	dl 0x0000FB,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047D32 78 00 00 6E 0821*  	dl 0x000078,0x00006E,BUF_50_044
       00 00 62 02 
       00          
047D3B             0822*  
047D3B             0823*  ; render_obj_id:51
047D3B             0824*  sprite_obj_016:
047D3B 0B 00 00 49 0825*  	dl 0x00000B,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D44 2E 00 00 49 0826*  	dl 0x00002E,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D4D 52 00 00 49 0827*  	dl 0x000052,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D56 75 00 00 49 0828*  	dl 0x000075,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D5F 99 00 00 49 0829*  	dl 0x000099,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D68 BC 00 00 49 0830*  	dl 0x0000BC,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D71 E0 00 00 49 0831*  	dl 0x0000E0,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D7A 03 01 00 49 0832*  	dl 0x000103,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D83 27 01 00 49 0833*  	dl 0x000127,0x000049,BUF_51_004
       00 00 63 02 
       00          
047D8C 0D 00 00 48 0834*  	dl 0x00000D,0x000048,BUF_51_020
       00 00 64 02 
       00          
047D95 3B 00 00 48 0835*  	dl 0x00003B,0x000048,BUF_51_020
       00 00 64 02 
       00          
047D9E 68 00 00 48 0836*  	dl 0x000068,0x000048,BUF_51_020
       00 00 64 02 
       00          
047DA7 96 00 00 48 0837*  	dl 0x000096,0x000048,BUF_51_020
       00 00 64 02 
       00          
047DB0 C3 00 00 48 0838*  	dl 0x0000C3,0x000048,BUF_51_020
       00 00 64 02 
       00          
047DB9 F1 00 00 48 0839*  	dl 0x0000F1,0x000048,BUF_51_020
       00 00 64 02 
       00          
047DC2 1E 01 00 48 0840*  	dl 0x00011E,0x000048,BUF_51_020
       00 00 64 02 
       00          
047DCB 13 00 00 45 0841*  	dl 0x000013,0x000045,BUF_51_032
       00 00 65 02 
       00          
047DD4 52 00 00 45 0842*  	dl 0x000052,0x000045,BUF_51_032
       00 00 65 02 
       00          
047DDD 93 00 00 45 0843*  	dl 0x000093,0x000045,BUF_51_032
       00 00 65 02 
       00          
047DE6 D3 00 00 45 0844*  	dl 0x0000D3,0x000045,BUF_51_032
       00 00 65 02 
       00          
047DEF 13 01 00 45 0845*  	dl 0x000113,0x000045,BUF_51_032
       00 00 65 02 
       00          
047DF8 20 00 00 3E 0846*  	dl 0x000020,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047E01 8A 00 00 3E 0847*  	dl 0x00008A,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047E0A F5 00 00 3E 0848*  	dl 0x0000F5,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047E13 5E 00 00 1C 0849*  	dl 0x00005E,0x00001C,BUF_51_044
       00 00 67 02 
       00          
047E1C             0850*  
047E1C             0851*  ; render_obj_id:52
047E1C             0852*  sprite_obj_017:
047E1C 0C 00 00 49 0853*  	dl 0x00000C,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E25 2F 00 00 49 0854*  	dl 0x00002F,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E2E 53 00 00 49 0855*  	dl 0x000053,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E37 76 00 00 49 0856*  	dl 0x000076,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E40 9A 00 00 49 0857*  	dl 0x00009A,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E49 BD 00 00 49 0858*  	dl 0x0000BD,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E52 E1 00 00 49 0859*  	dl 0x0000E1,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E5B 04 01 00 49 0860*  	dl 0x000104,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E64 28 01 00 49 0861*  	dl 0x000128,0x000049,BUF_52_004
       00 00 68 02 
       00          
047E6D 0F 00 00 48 0862*  	dl 0x00000F,0x000048,BUF_52_020
       00 00 69 02 
       00          
047E76 3D 00 00 48 0863*  	dl 0x00003D,0x000048,BUF_52_020
       00 00 69 02 
       00          
047E7F 6A 00 00 48 0864*  	dl 0x00006A,0x000048,BUF_52_020
       00 00 69 02 
       00          
047E88 98 00 00 48 0865*  	dl 0x000098,0x000048,BUF_52_020
       00 00 69 02 
       00          
047E91 C5 00 00 48 0866*  	dl 0x0000C5,0x000048,BUF_52_020
       00 00 69 02 
       00          
047E9A F3 00 00 48 0867*  	dl 0x0000F3,0x000048,BUF_52_020
       00 00 69 02 
       00          
047EA3 20 01 00 48 0868*  	dl 0x000120,0x000048,BUF_52_020
       00 00 69 02 
       00          
047EAC 16 00 00 45 0869*  	dl 0x000016,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047EB5 55 00 00 45 0870*  	dl 0x000055,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047EBE 96 00 00 45 0871*  	dl 0x000096,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047EC7 D6 00 00 45 0872*  	dl 0x0000D6,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047ED0 16 01 00 45 0873*  	dl 0x000116,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047ED9 24 00 00 3E 0874*  	dl 0x000024,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047EE2 8E 00 00 3E 0875*  	dl 0x00008E,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047EEB F9 00 00 3E 0876*  	dl 0x0000F9,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047EF4 6B 00 00 1C 0877*  	dl 0x00006B,0x00001C,BUF_52_044
       00 00 6C 02 
       00          
047EFD             0878*  
047EFD             0879*  ; render_obj_id:56
047EFD             0880*  sprite_obj_018:
047EFD 08 00 00 56 0881*  	dl 0x000008,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F06 2B 00 00 56 0882*  	dl 0x00002B,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F0F 4F 00 00 56 0883*  	dl 0x00004F,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F18 72 00 00 56 0884*  	dl 0x000072,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F21 96 00 00 56 0885*  	dl 0x000096,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F2A B9 00 00 56 0886*  	dl 0x0000B9,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F33 DD 00 00 56 0887*  	dl 0x0000DD,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F3C 00 01 00 56 0888*  	dl 0x000100,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F45 24 01 00 56 0889*  	dl 0x000124,0x000056,BUF_56_004
       00 00 6D 02 
       00          
047F4E 0B 00 00 59 0890*  	dl 0x00000B,0x000059,BUF_56_020
       00 00 6E 02 
       00          
047F57 39 00 00 59 0891*  	dl 0x000039,0x000059,BUF_56_020
       00 00 6E 02 
       00          
047F60 66 00 00 59 0892*  	dl 0x000066,0x000059,BUF_56_020
       00 00 6E 02 
       00          
047F69 94 00 00 59 0893*  	dl 0x000094,0x000059,BUF_56_020
       00 00 6E 02 
       00          
047F72 C1 00 00 59 0894*  	dl 0x0000C1,0x000059,BUF_56_020
       00 00 6E 02 
       00          
047F7B EF 00 00 59 0895*  	dl 0x0000EF,0x000059,BUF_56_020
       00 00 6E 02 
       00          
047F84 1C 01 00 59 0896*  	dl 0x00011C,0x000059,BUF_56_020
       00 00 6E 02 
       00          
047F8D 0E 00 00 5D 0897*  	dl 0x00000E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
047F96 4D 00 00 5D 0898*  	dl 0x00004D,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
047F9F 8E 00 00 5D 0899*  	dl 0x00008E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
047FA8 CE 00 00 5D 0900*  	dl 0x0000CE,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
047FB1 0E 01 00 5D 0901*  	dl 0x00010E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
047FBA 17 00 00 66 0902*  	dl 0x000017,0x000066,BUF_56_040
       00 00 70 02 
       00          
047FC3 81 00 00 66 0903*  	dl 0x000081,0x000066,BUF_56_040
       00 00 70 02 
       00          
047FCC EC 00 00 66 0904*  	dl 0x0000EC,0x000066,BUF_56_040
       00 00 70 02 
       00          
047FD5 A0 00 00 93 0905*  	dl 0x0000A0,0x000093,BUF_56_044
       00 00 71 02 
       00          
047FDE             0906*  
047FDE             0907*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
047FDE             0908*  
047FDE             0909*  map_type_status_lut:
047FDE             0910*  ; {map_type_status}, {sprite_obj} ; {obj_id} ({render_obj_id}) {tile_name} {render_type_idx} {render_type}
047FDE 50 FF       0911*  	db %01010000, 255 ; 10 (10) LIGHT GREY WALL 0 cube
047FE0 50 FF       0912*  	db %01010000, 255 ; 11 (11) JAIL CELL 0 cube
047FE2 50 FF       0913*  	db %01010000, 255 ; 12 (12) STONE ARCH BIRD 0 cube
047FE4 50 FF       0914*  	db %01010000, 255 ; 13 (13) DARK GREY WALL 0 cube
047FE6 50 FF       0915*  	db %01010000, 255 ; 14 (14) WOOD WALL 0 cube
047FE8 50 FF       0916*  	db %01010000, 255 ; 15 (15) HANGING FLAG 0 cube
047FEA 50 FF       0917*  	db %01010000, 255 ; 16 (16) WOOD EAGLE 0 cube
047FEC 50 FF       0918*  	db %01010000, 255 ; 17 (17) BLUE WALL 0 cube
047FEE 02 FF       0919*  	db %00000010, 255 ; 18 (None) PLACEHOLDER 2 null cell
047FF0 42 FF       0920*  	db %01000010, 255 ; 19 (19) NULL CELL 2 null cell
047FF2 43 00       0921*  	db %01000011, 0 ; 20 (20) LAMP 3 sprite
047FF4 43 01       0922*  	db %01000011, 1 ; 21 (21) BARREL 3 sprite
047FF6 43 02       0923*  	db %01000011, 2 ; 22 (22) TABLE 3 sprite
047FF8 03 03       0924*  	db %00000011, 3 ; 23 (23) OVERHEAD LIGHT 3 sprite
047FFA 43 04       0925*  	db %01000011, 4 ; 24 (24) RADIOACTIVE BARREL 3 sprite
047FFC 00 FF       0926*  	db %00000000, 255 ; 25 (25) BJ 25% 4 ui
047FFE 00 FF       0927*  	db %00000000, 255 ; 26 (26) BJ 50% 4 ui
048000 00 FF       0928*  	db %00000000, 255 ; 27 (27) BJ 75% 4 ui
048002 08 FF       0929*  	db %00001000, 255 ; 28 (28) BJ 100%/ START POSITION 4 ui
048004 01 FF       0930*  	db %00000001, 255 ; 29 (29) GREY FLOOR 1 floor
048006 34 FF       0931*  	db %00110100, 255 ; 30 (57) DOOR TO ROOM 0 0 cube
048008 34 FF       0932*  	db %00110100, 255 ; 31 (57) DOOR TO ROOM 1 0 cube
04800A 34 FF       0933*  	db %00110100, 255 ; 32 (57) DOOR TO ROOM 2 0 cube
04800C 34 FF       0934*  	db %00110100, 255 ; 33 (57) DOOR TO ROOM 3 0 cube
04800E 34 FF       0935*  	db %00110100, 255 ; 34 (57) DOOR TO ROOM 4 0 cube
048010 34 FF       0936*  	db %00110100, 255 ; 35 (57) DOOR TO ROOM 5 0 cube
048012 34 FF       0937*  	db %00110100, 255 ; 36 (57) DOOR TO ROOM 6 0 cube
048014 34 FF       0938*  	db %00110100, 255 ; 37 (57) DOOR TO ROOM 7 0 cube
048016 34 FF       0939*  	db %00110100, 255 ; 38 (57) DOOR TO ROOM 8 0 cube
048018 34 FF       0940*  	db %00110100, 255 ; 39 (57) DOOR TO ROOM 9 0 cube
04801A 03 05       0941*  	db %00000011, 5 ; 40 (40) HEALTH PACK 3 sprite
04801C 03 06       0942*  	db %00000011, 6 ; 41 (41) GOLD CHALISE 3 sprite
04801E 03 07       0943*  	db %00000011, 7 ; 42 (42) GOLD CROSS 3 sprite
048020 03 08       0944*  	db %00000011, 8 ; 43 (43) PLATE OF FOOD 3 sprite
048022 03 09       0945*  	db %00000011, 9 ; 44 (44) KEYCARD 3 sprite
048024 03 0A       0946*  	db %00000011, 10 ; 45 (45) GOLD CHEST 3 sprite
048026 03 0B       0947*  	db %00000011, 11 ; 46 (46) MACHINE GUN 3 sprite
048028 03 0C       0948*  	db %00000011, 12 ; 47 (47) GATLING GUN 3 sprite
04802A 03 0D       0949*  	db %00000011, 13 ; 48 (48) DOG FOOD 3 sprite
04802C 03 0E       0950*  	db %00000011, 14 ; 49 (49) GOLD KEY 3 sprite
04802E 43 0F       0951*  	db %01000011, 15 ; 50 (50) DOG 3 sprite
048030 43 10       0952*  	db %01000011, 16 ; 51 (51) GERMAN TROOPER 3 sprite
048032 43 11       0953*  	db %01000011, 17 ; 52 (52) SS GUARD 3 sprite
048034 02 FF       0954*  	db %00000010, 255 ; 53 (None) PLACEHOLDER 2 null cell
048036 02 FF       0955*  	db %00000010, 255 ; 54 (None) PLACEHOLDER 2 null cell
048038 02 FF       0956*  	db %00000010, 255 ; 55 (None) PLACEHOLDER 2 null cell
04803A 03 12       0957*  	db %00000011, 18 ; 56 (56) DEAD GUARD 3 sprite
04803C 90 FF       0958*  	db %10010000, 255 ; 57 (57) REGULAR DOOR 0 cube
04803E 70 FF       0959*  	db %01110000, 255 ; 58 (58) ELEVATOR SWITCH 0 cube
048040 90 FF       0960*  	db %10010000, 255 ; 59 (59) ELEVATOR DOOR 0 cube
048042 02 FF       0961*  	db %00000010, 255 ; 60 (None) PLACEHOLDER 2 null cell
048044 02 FF       0962*  	db %00000010, 255 ; 61 (None) PLACEHOLDER 2 null cell
048046 02 FF       0963*  	db %00000010, 255 ; 62 (None) PLACEHOLDER 2 null cell
048048 02 FF       0964*  	db %00000010, 255 ; 63 (None) PLACEHOLDER 2 null cell
04804A 02 FF       0965*  	db %00000010, 255 ; 64 (None) PLACEHOLDER 2 null cell
04804C 02 FF       0966*  	db %00000010, 255 ; 65 (None) PLACEHOLDER 2 null cell
04804E 02 FF       0967*  	db %00000010, 255 ; 66 (None) PLACEHOLDER 2 null cell
048050 02 FF       0968*  	db %00000010, 255 ; 67 (None) PLACEHOLDER 2 null cell
048052 02 FF       0969*  	db %00000010, 255 ; 68 (None) PLACEHOLDER 2 null cell
048054 02 FF       0970*  	db %00000010, 255 ; 69 (None) PLACEHOLDER 2 null cell
048056 02 FF       0971*  	db %00000010, 255 ; 70 (None) PLACEHOLDER 2 null cell
048058 02 FF       0972*  	db %00000010, 255 ; 71 (None) PLACEHOLDER 2 null cell
04805A 02 FF       0973*  	db %00000010, 255 ; 72 (None) PLACEHOLDER 2 null cell
04805C 02 FF       0974*  	db %00000010, 255 ; 73 (None) PLACEHOLDER 2 null cell
04805E 02 FF       0975*  	db %00000010, 255 ; 74 (None) PLACEHOLDER 2 null cell
048060 02 FF       0976*  	db %00000010, 255 ; 75 (None) PLACEHOLDER 2 null cell
048062 02 FF       0977*  	db %00000010, 255 ; 76 (None) PLACEHOLDER 2 null cell
048064 02 FF       0978*  	db %00000010, 255 ; 77 (None) PLACEHOLDER 2 null cell
048066 02 FF       0979*  	db %00000010, 255 ; 78 (None) PLACEHOLDER 2 null cell
048068 02 FF       0980*  	db %00000010, 255 ; 79 (None) PLACEHOLDER 2 null cell
04806A 02 FF       0981*  	db %00000010, 255 ; 80 (None) PLACEHOLDER 2 null cell
04806C 02 FF       0982*  	db %00000010, 255 ; 81 (None) PLACEHOLDER 2 null cell
04806E 02 FF       0983*  	db %00000010, 255 ; 82 (None) PLACEHOLDER 2 null cell
048070 02 FF       0984*  	db %00000010, 255 ; 83 (None) PLACEHOLDER 2 null cell
048072 02 FF       0985*  	db %00000010, 255 ; 84 (None) PLACEHOLDER 2 null cell
048074 02 FF       0986*  	db %00000010, 255 ; 85 (None) PLACEHOLDER 2 null cell
048076 02 FF       0987*  	db %00000010, 255 ; 86 (None) PLACEHOLDER 2 null cell
048078 02 FF       0988*  	db %00000010, 255 ; 87 (None) PLACEHOLDER 2 null cell
04807A 02 FF       0989*  	db %00000010, 255 ; 88 (None) PLACEHOLDER 2 null cell
04807C 02 FF       0990*  	db %00000010, 255 ; 89 (None) PLACEHOLDER 2 null cell
04807E 02 FF       0991*  	db %00000010, 255 ; 90 (None) PLACEHOLDER 2 null cell
048080 02 FF       0992*  	db %00000010, 255 ; 91 (None) PLACEHOLDER 2 null cell
048082 02 FF       0993*  	db %00000010, 255 ; 92 (None) PLACEHOLDER 2 null cell
048084 02 FF       0994*  	db %00000010, 255 ; 93 (None) PLACEHOLDER 2 null cell
048086 02 FF       0995*  	db %00000010, 255 ; 94 (None) PLACEHOLDER 2 null cell
048088 02 FF       0996*  	db %00000010, 255 ; 95 (None) PLACEHOLDER 2 null cell
04808A 02 FF       0997*  	db %00000010, 255 ; 96 (None) PLACEHOLDER 2 null cell
04808C 02 FF       0998*  	db %00000010, 255 ; 97 (None) PLACEHOLDER 2 null cell
04808E 02 FF       0999*  	db %00000010, 255 ; 98 (None) PLACEHOLDER 2 null cell
048090 02 FF       1000*  	db %00000010, 255 ; 99 (None) PLACEHOLDER 2 null cell
048092             0018   	include "src/asm/font_itc_honda.asm"
048092             0001*  ; Bitmap indices:
048092             0002*  BUF_4384: equ 0x1120 ; 32
048092             0003*  ; Missing character 33 !
048092             0004*  ; Missing character 34 "
048092             0005*  ; Missing character 35 #
048092             0006*  ; Missing character 36 $
048092             0007*  ; Missing character 37 %
048092             0008*  ; Missing character 38 &
048092             0009*  ; Missing character 39 '
048092             0010*  ; Missing character 40 (
048092             0011*  ; Missing character 41 )
048092             0012*  ; Missing character 42 *
048092             0013*  ; Missing character 43 +
048092             0014*  ; Missing character 44 ,
048092             0015*  ; Missing character 45 -
048092             0016*  BUF_4398: equ 0x112E ; 46 .
048092             0017*  ; Missing character 47 /
048092             0018*  BUF_4400: equ 0x1130 ; 48 0
048092             0019*  BUF_4401: equ 0x1131 ; 49 1
048092             0020*  BUF_4402: equ 0x1132 ; 50 2
048092             0021*  BUF_4403: equ 0x1133 ; 51 3
048092             0022*  BUF_4404: equ 0x1134 ; 52 4
048092             0023*  BUF_4405: equ 0x1135 ; 53 5
048092             0024*  BUF_4406: equ 0x1136 ; 54 6
048092             0025*  BUF_4407: equ 0x1137 ; 55 7
048092             0026*  BUF_4408: equ 0x1138 ; 56 8
048092             0027*  BUF_4409: equ 0x1139 ; 57 9
048092             0028*  ; Missing character 58 :
048092             0029*  ; Missing character 59 ;
048092             0030*  ; Missing character 60 <
048092             0031*  ; Missing character 61 =
048092             0032*  ; Missing character 62 >
048092             0033*  ; Missing character 63 ?
048092             0034*  ; Missing character 64 @
048092             0035*  BUF_4417: equ 0x1141 ; 65 A
048092             0036*  BUF_4418: equ 0x1142 ; 66 B
048092             0037*  BUF_4419: equ 0x1143 ; 67 C
048092             0038*  BUF_4420: equ 0x1144 ; 68 D
048092             0039*  BUF_4421: equ 0x1145 ; 69 E
048092             0040*  BUF_4422: equ 0x1146 ; 70 F
048092             0041*  BUF_4423: equ 0x1147 ; 71 G
048092             0042*  BUF_4424: equ 0x1148 ; 72 H
048092             0043*  BUF_4425: equ 0x1149 ; 73 I
048092             0044*  BUF_4426: equ 0x114A ; 74 J
048092             0045*  BUF_4427: equ 0x114B ; 75 K
048092             0046*  BUF_4428: equ 0x114C ; 76 L
048092             0047*  BUF_4429: equ 0x114D ; 77 M
048092             0048*  BUF_4430: equ 0x114E ; 78 N
048092             0049*  BUF_4431: equ 0x114F ; 79 O
048092             0050*  BUF_4432: equ 0x1150 ; 80 P
048092             0051*  BUF_4433: equ 0x1151 ; 81 Q
048092             0052*  BUF_4434: equ 0x1152 ; 82 R
048092             0053*  BUF_4435: equ 0x1153 ; 83 S
048092             0054*  BUF_4436: equ 0x1154 ; 84 T
048092             0055*  BUF_4437: equ 0x1155 ; 85 U
048092             0056*  BUF_4438: equ 0x1156 ; 86 V
048092             0057*  BUF_4439: equ 0x1157 ; 87 W
048092             0058*  BUF_4440: equ 0x1158 ; 88 X
048092             0059*  BUF_4441: equ 0x1159 ; 89 Y
048092             0060*  BUF_4442: equ 0x115A ; 90 Z
048092             0061*  ; Missing character 91 [
048092             0062*  ; Missing character 92 \
048092             0063*  ; Missing character 93 ]
048092             0064*  ; Missing character 94 ^
048092             0065*  ; Missing character 95 _
048092             0066*  ; Missing character 96 `
048092             0067*  BUF_4449: equ 0x1161 ; 97 a
048092             0068*  BUF_4450: equ 0x1162 ; 98 b
048092             0069*  BUF_4451: equ 0x1163 ; 99 c
048092             0070*  BUF_4452: equ 0x1164 ; 100 d
048092             0071*  BUF_4453: equ 0x1165 ; 101 e
048092             0072*  BUF_4454: equ 0x1166 ; 102 f
048092             0073*  BUF_4455: equ 0x1167 ; 103 g
048092             0074*  BUF_4456: equ 0x1168 ; 104 h
048092             0075*  BUF_4457: equ 0x1169 ; 105 i
048092             0076*  BUF_4458: equ 0x116A ; 106 j
048092             0077*  BUF_4459: equ 0x116B ; 107 k
048092             0078*  BUF_4460: equ 0x116C ; 108 l
048092             0079*  BUF_4461: equ 0x116D ; 109 m
048092             0080*  BUF_4462: equ 0x116E ; 110 n
048092             0081*  BUF_4463: equ 0x116F ; 111 o
048092             0082*  BUF_4464: equ 0x1170 ; 112 p
048092             0083*  BUF_4465: equ 0x1171 ; 113 q
048092             0084*  BUF_4466: equ 0x1172 ; 114 r
048092             0085*  BUF_4467: equ 0x1173 ; 115 s
048092             0086*  BUF_4468: equ 0x1174 ; 116 t
048092             0087*  BUF_4469: equ 0x1175 ; 117 u
048092             0088*  BUF_4470: equ 0x1176 ; 118 v
048092             0089*  BUF_4471: equ 0x1177 ; 119 w
048092             0090*  BUF_4472: equ 0x1178 ; 120 x
048092             0091*  BUF_4473: equ 0x1179 ; 121 y
048092             0092*  BUF_4474: equ 0x117A ; 122 z
048092             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
048092             0094*  font_itc_honda:
048092 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
048098 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
04809E 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
0480A4 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
0480AA 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
0480B0 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
0480B6 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
0480BC 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
0480C2 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
0480C8 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
0480CE 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
0480D4 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
0480DA 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
0480E0 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
0480E6 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
0480EC 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
0480F2 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
0480F8 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
0480FE 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
048104 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
04810A 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
048110 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
048116 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
04811C 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
048122 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
048128 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
04812E 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
048134 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
04813A 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
048140 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
048146 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
04814C 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
048152 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
048158 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
04815E 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
048164 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
04816A 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
048170 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
048176 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
04817C 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
048182 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
048188 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
04818E 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
048194 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
04819A 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
0481A0 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
0481A6 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
0481AC 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
0481B2 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
0481B8 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
0481BE 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
0481C4 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
0481CA 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
0481D0 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
0481D6 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
0481DC 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
0481E2 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
0481E8 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
0481EE 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
0481F4 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
0481FA 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
048200 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
048206 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
04820C 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
048212 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
048218 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
04821E 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
048224 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
04822A 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
048230 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
048236 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
04823C 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
048242 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
048248 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
04824E 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
048254 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
04825A 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
048260 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
048266 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
04826C 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
048272 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
048278 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
04827E 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
048284 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
04828A 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
048290 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
048296 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
04829C 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
0482A2 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
0482A8 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
0482AE 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
0482B4             0186*  
0482B4             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
0482B4             0188*  load_font_itc_honda:
0482B4             0189*  
0482B4 21 F5 8B 04 0190*  	ld hl,Fhonda032
0482B8 11 8F C8 04 0191*  	ld de,filedata
0482BC 01 00 00 01 0192*  	ld bc,65536
0482C0 3E 01       0193*  	ld a,mos_load
0482C2 5B CF       0194*  	RST.LIL 08h
0482C4 21 20 11 00 0195*  	ld hl,BUF_4384
0482C8 01 06 00 00 0196*  	ld bc,6
0482CC 11 01 00 00 0197*  	ld de,1
0482D0 DD 21 06 00 0198*  	ld ix,6
       00          
0482D5 CD DE BD 04 0199*  	call vdu_load_img
0482D9             0200*  ; Missing character 33
0482D9             0201*  ; Missing character 34
0482D9             0202*  ; Missing character 35
0482D9             0203*  ; Missing character 36
0482D9             0204*  ; Missing character 37
0482D9             0205*  ; Missing character 38
0482D9             0206*  ; Missing character 39
0482D9             0207*  ; Missing character 40
0482D9             0208*  ; Missing character 41
0482D9             0209*  ; Missing character 42
0482D9             0210*  ; Missing character 43
0482D9             0211*  ; Missing character 44
0482D9             0212*  ; Missing character 45
0482D9             0213*  
0482D9 21 0B 8C 04 0214*  	ld hl,Fhonda046
0482DD 11 8F C8 04 0215*  	ld de,filedata
0482E1 01 00 00 01 0216*  	ld bc,65536
0482E5 3E 01       0217*  	ld a,mos_load
0482E7 5B CF       0218*  	RST.LIL 08h
0482E9 21 2E 11 00 0219*  	ld hl,BUF_4398
0482ED 01 05 00 00 0220*  	ld bc,5
0482F1 11 05 00 00 0221*  	ld de,5
0482F5 DD 21 19 00 0222*  	ld ix,25
       00          
0482FA CD DE BD 04 0223*  	call vdu_load_img
0482FE             0224*  ; Missing character 47
0482FE             0225*  
0482FE 21 21 8C 04 0226*  	ld hl,Fhonda048
048302 11 8F C8 04 0227*  	ld de,filedata
048306 01 00 00 01 0228*  	ld bc,65536
04830A 3E 01       0229*  	ld a,mos_load
04830C 5B CF       0230*  	RST.LIL 08h
04830E 21 30 11 00 0231*  	ld hl,BUF_4400
048312 01 0A 00 00 0232*  	ld bc,10
048316 11 12 00 00 0233*  	ld de,18
04831A DD 21 B4 00 0234*  	ld ix,180
       00          
04831F CD DE BD 04 0235*  	call vdu_load_img
048323             0236*  
048323 21 37 8C 04 0237*  	ld hl,Fhonda049
048327 11 8F C8 04 0238*  	ld de,filedata
04832B 01 00 00 01 0239*  	ld bc,65536
04832F 3E 01       0240*  	ld a,mos_load
048331 5B CF       0241*  	RST.LIL 08h
048333 21 31 11 00 0242*  	ld hl,BUF_4401
048337 01 04 00 00 0243*  	ld bc,4
04833B 11 12 00 00 0244*  	ld de,18
04833F DD 21 48 00 0245*  	ld ix,72
       00          
048344 CD DE BD 04 0246*  	call vdu_load_img
048348             0247*  
048348 21 4D 8C 04 0248*  	ld hl,Fhonda050
04834C 11 8F C8 04 0249*  	ld de,filedata
048350 01 00 00 01 0250*  	ld bc,65536
048354 3E 01       0251*  	ld a,mos_load
048356 5B CF       0252*  	RST.LIL 08h
048358 21 32 11 00 0253*  	ld hl,BUF_4402
04835C 01 09 00 00 0254*  	ld bc,9
048360 11 12 00 00 0255*  	ld de,18
048364 DD 21 A2 00 0256*  	ld ix,162
       00          
048369 CD DE BD 04 0257*  	call vdu_load_img
04836D             0258*  
04836D 21 63 8C 04 0259*  	ld hl,Fhonda051
048371 11 8F C8 04 0260*  	ld de,filedata
048375 01 00 00 01 0261*  	ld bc,65536
048379 3E 01       0262*  	ld a,mos_load
04837B 5B CF       0263*  	RST.LIL 08h
04837D 21 33 11 00 0264*  	ld hl,BUF_4403
048381 01 0A 00 00 0265*  	ld bc,10
048385 11 12 00 00 0266*  	ld de,18
048389 DD 21 B4 00 0267*  	ld ix,180
       00          
04838E CD DE BD 04 0268*  	call vdu_load_img
048392             0269*  
048392 21 79 8C 04 0270*  	ld hl,Fhonda052
048396 11 8F C8 04 0271*  	ld de,filedata
04839A 01 00 00 01 0272*  	ld bc,65536
04839E 3E 01       0273*  	ld a,mos_load
0483A0 5B CF       0274*  	RST.LIL 08h
0483A2 21 34 11 00 0275*  	ld hl,BUF_4404
0483A6 01 0C 00 00 0276*  	ld bc,12
0483AA 11 12 00 00 0277*  	ld de,18
0483AE DD 21 D8 00 0278*  	ld ix,216
       00          
0483B3 CD DE BD 04 0279*  	call vdu_load_img
0483B7             0280*  
0483B7 21 8F 8C 04 0281*  	ld hl,Fhonda053
0483BB 11 8F C8 04 0282*  	ld de,filedata
0483BF 01 00 00 01 0283*  	ld bc,65536
0483C3 3E 01       0284*  	ld a,mos_load
0483C5 5B CF       0285*  	RST.LIL 08h
0483C7 21 35 11 00 0286*  	ld hl,BUF_4405
0483CB 01 0A 00 00 0287*  	ld bc,10
0483CF 11 12 00 00 0288*  	ld de,18
0483D3 DD 21 B4 00 0289*  	ld ix,180
       00          
0483D8 CD DE BD 04 0290*  	call vdu_load_img
0483DC             0291*  
0483DC 21 A5 8C 04 0292*  	ld hl,Fhonda054
0483E0 11 8F C8 04 0293*  	ld de,filedata
0483E4 01 00 00 01 0294*  	ld bc,65536
0483E8 3E 01       0295*  	ld a,mos_load
0483EA 5B CF       0296*  	RST.LIL 08h
0483EC 21 36 11 00 0297*  	ld hl,BUF_4406
0483F0 01 0A 00 00 0298*  	ld bc,10
0483F4 11 12 00 00 0299*  	ld de,18
0483F8 DD 21 B4 00 0300*  	ld ix,180
       00          
0483FD CD DE BD 04 0301*  	call vdu_load_img
048401             0302*  
048401 21 BB 8C 04 0303*  	ld hl,Fhonda055
048405 11 8F C8 04 0304*  	ld de,filedata
048409 01 00 00 01 0305*  	ld bc,65536
04840D 3E 01       0306*  	ld a,mos_load
04840F 5B CF       0307*  	RST.LIL 08h
048411 21 37 11 00 0308*  	ld hl,BUF_4407
048415 01 08 00 00 0309*  	ld bc,8
048419 11 12 00 00 0310*  	ld de,18
04841D DD 21 90 00 0311*  	ld ix,144
       00          
048422 CD DE BD 04 0312*  	call vdu_load_img
048426             0313*  
048426 21 D1 8C 04 0314*  	ld hl,Fhonda056
04842A 11 8F C8 04 0315*  	ld de,filedata
04842E 01 00 00 01 0316*  	ld bc,65536
048432 3E 01       0317*  	ld a,mos_load
048434 5B CF       0318*  	RST.LIL 08h
048436 21 38 11 00 0319*  	ld hl,BUF_4408
04843A 01 0A 00 00 0320*  	ld bc,10
04843E 11 12 00 00 0321*  	ld de,18
048442 DD 21 B4 00 0322*  	ld ix,180
       00          
048447 CD DE BD 04 0323*  	call vdu_load_img
04844B             0324*  
04844B 21 E7 8C 04 0325*  	ld hl,Fhonda057
04844F 11 8F C8 04 0326*  	ld de,filedata
048453 01 00 00 01 0327*  	ld bc,65536
048457 3E 01       0328*  	ld a,mos_load
048459 5B CF       0329*  	RST.LIL 08h
04845B 21 39 11 00 0330*  	ld hl,BUF_4409
04845F 01 0A 00 00 0331*  	ld bc,10
048463 11 12 00 00 0332*  	ld de,18
048467 DD 21 B4 00 0333*  	ld ix,180
       00          
04846C CD DE BD 04 0334*  	call vdu_load_img
048470             0335*  ; Missing character 58
048470             0336*  ; Missing character 59
048470             0337*  ; Missing character 60
048470             0338*  ; Missing character 61
048470             0339*  ; Missing character 62
048470             0340*  ; Missing character 63
048470             0341*  ; Missing character 64
048470             0342*  
048470 21 FD 8C 04 0343*  	ld hl,Fhonda065
048474 11 8F C8 04 0344*  	ld de,filedata
048478 01 00 00 01 0345*  	ld bc,65536
04847C 3E 01       0346*  	ld a,mos_load
04847E 5B CF       0347*  	RST.LIL 08h
048480 21 41 11 00 0348*  	ld hl,BUF_4417
048484 01 0A 00 00 0349*  	ld bc,10
048488 11 12 00 00 0350*  	ld de,18
04848C DD 21 B4 00 0351*  	ld ix,180
       00          
048491 CD DE BD 04 0352*  	call vdu_load_img
048495             0353*  
048495 21 13 8D 04 0354*  	ld hl,Fhonda066
048499 11 8F C8 04 0355*  	ld de,filedata
04849D 01 00 00 01 0356*  	ld bc,65536
0484A1 3E 01       0357*  	ld a,mos_load
0484A3 5B CF       0358*  	RST.LIL 08h
0484A5 21 42 11 00 0359*  	ld hl,BUF_4418
0484A9 01 0A 00 00 0360*  	ld bc,10
0484AD 11 12 00 00 0361*  	ld de,18
0484B1 DD 21 B4 00 0362*  	ld ix,180
       00          
0484B6 CD DE BD 04 0363*  	call vdu_load_img
0484BA             0364*  
0484BA 21 29 8D 04 0365*  	ld hl,Fhonda067
0484BE 11 8F C8 04 0366*  	ld de,filedata
0484C2 01 00 00 01 0367*  	ld bc,65536
0484C6 3E 01       0368*  	ld a,mos_load
0484C8 5B CF       0369*  	RST.LIL 08h
0484CA 21 43 11 00 0370*  	ld hl,BUF_4419
0484CE 01 08 00 00 0371*  	ld bc,8
0484D2 11 13 00 00 0372*  	ld de,19
0484D6 DD 21 98 00 0373*  	ld ix,152
       00          
0484DB CD DE BD 04 0374*  	call vdu_load_img
0484DF             0375*  
0484DF 21 3F 8D 04 0376*  	ld hl,Fhonda068
0484E3 11 8F C8 04 0377*  	ld de,filedata
0484E7 01 00 00 01 0378*  	ld bc,65536
0484EB 3E 01       0379*  	ld a,mos_load
0484ED 5B CF       0380*  	RST.LIL 08h
0484EF 21 44 11 00 0381*  	ld hl,BUF_4420
0484F3 01 0A 00 00 0382*  	ld bc,10
0484F7 11 12 00 00 0383*  	ld de,18
0484FB DD 21 B4 00 0384*  	ld ix,180
       00          
048500 CD DE BD 04 0385*  	call vdu_load_img
048504             0386*  
048504 21 55 8D 04 0387*  	ld hl,Fhonda069
048508 11 8F C8 04 0388*  	ld de,filedata
04850C 01 00 00 01 0389*  	ld bc,65536
048510 3E 01       0390*  	ld a,mos_load
048512 5B CF       0391*  	RST.LIL 08h
048514 21 45 11 00 0392*  	ld hl,BUF_4421
048518 01 08 00 00 0393*  	ld bc,8
04851C 11 12 00 00 0394*  	ld de,18
048520 DD 21 90 00 0395*  	ld ix,144
       00          
048525 CD DE BD 04 0396*  	call vdu_load_img
048529             0397*  
048529 21 6B 8D 04 0398*  	ld hl,Fhonda070
04852D 11 8F C8 04 0399*  	ld de,filedata
048531 01 00 00 01 0400*  	ld bc,65536
048535 3E 01       0401*  	ld a,mos_load
048537 5B CF       0402*  	RST.LIL 08h
048539 21 46 11 00 0403*  	ld hl,BUF_4422
04853D 01 08 00 00 0404*  	ld bc,8
048541 11 12 00 00 0405*  	ld de,18
048545 DD 21 90 00 0406*  	ld ix,144
       00          
04854A CD DE BD 04 0407*  	call vdu_load_img
04854E             0408*  
04854E 21 81 8D 04 0409*  	ld hl,Fhonda071
048552 11 8F C8 04 0410*  	ld de,filedata
048556 01 00 00 01 0411*  	ld bc,65536
04855A 3E 01       0412*  	ld a,mos_load
04855C 5B CF       0413*  	RST.LIL 08h
04855E 21 47 11 00 0414*  	ld hl,BUF_4423
048562 01 0A 00 00 0415*  	ld bc,10
048566 11 12 00 00 0416*  	ld de,18
04856A DD 21 B4 00 0417*  	ld ix,180
       00          
04856F CD DE BD 04 0418*  	call vdu_load_img
048573             0419*  
048573 21 97 8D 04 0420*  	ld hl,Fhonda072
048577 11 8F C8 04 0421*  	ld de,filedata
04857B 01 00 00 01 0422*  	ld bc,65536
04857F 3E 01       0423*  	ld a,mos_load
048581 5B CF       0424*  	RST.LIL 08h
048583 21 48 11 00 0425*  	ld hl,BUF_4424
048587 01 0A 00 00 0426*  	ld bc,10
04858B 11 12 00 00 0427*  	ld de,18
04858F DD 21 B4 00 0428*  	ld ix,180
       00          
048594 CD DE BD 04 0429*  	call vdu_load_img
048598             0430*  
048598 21 AD 8D 04 0431*  	ld hl,Fhonda073
04859C 11 8F C8 04 0432*  	ld de,filedata
0485A0 01 00 00 01 0433*  	ld bc,65536
0485A4 3E 01       0434*  	ld a,mos_load
0485A6 5B CF       0435*  	RST.LIL 08h
0485A8 21 49 11 00 0436*  	ld hl,BUF_4425
0485AC 01 03 00 00 0437*  	ld bc,3
0485B0 11 12 00 00 0438*  	ld de,18
0485B4 DD 21 36 00 0439*  	ld ix,54
       00          
0485B9 CD DE BD 04 0440*  	call vdu_load_img
0485BD             0441*  
0485BD 21 C3 8D 04 0442*  	ld hl,Fhonda074
0485C1 11 8F C8 04 0443*  	ld de,filedata
0485C5 01 00 00 01 0444*  	ld bc,65536
0485C9 3E 01       0445*  	ld a,mos_load
0485CB 5B CF       0446*  	RST.LIL 08h
0485CD 21 4A 11 00 0447*  	ld hl,BUF_4426
0485D1 01 06 00 00 0448*  	ld bc,6
0485D5 11 12 00 00 0449*  	ld de,18
0485D9 DD 21 6C 00 0450*  	ld ix,108
       00          
0485DE CD DE BD 04 0451*  	call vdu_load_img
0485E2             0452*  
0485E2 21 D9 8D 04 0453*  	ld hl,Fhonda075
0485E6 11 8F C8 04 0454*  	ld de,filedata
0485EA 01 00 00 01 0455*  	ld bc,65536
0485EE 3E 01       0456*  	ld a,mos_load
0485F0 5B CF       0457*  	RST.LIL 08h
0485F2 21 4B 11 00 0458*  	ld hl,BUF_4427
0485F6 01 0A 00 00 0459*  	ld bc,10
0485FA 11 12 00 00 0460*  	ld de,18
0485FE DD 21 B4 00 0461*  	ld ix,180
       00          
048603 CD DE BD 04 0462*  	call vdu_load_img
048607             0463*  
048607 21 EF 8D 04 0464*  	ld hl,Fhonda076
04860B 11 8F C8 04 0465*  	ld de,filedata
04860F 01 00 00 01 0466*  	ld bc,65536
048613 3E 01       0467*  	ld a,mos_load
048615 5B CF       0468*  	RST.LIL 08h
048617 21 4C 11 00 0469*  	ld hl,BUF_4428
04861B 01 08 00 00 0470*  	ld bc,8
04861F 11 12 00 00 0471*  	ld de,18
048623 DD 21 90 00 0472*  	ld ix,144
       00          
048628 CD DE BD 04 0473*  	call vdu_load_img
04862C             0474*  
04862C 21 05 8E 04 0475*  	ld hl,Fhonda077
048630 11 8F C8 04 0476*  	ld de,filedata
048634 01 00 00 01 0477*  	ld bc,65536
048638 3E 01       0478*  	ld a,mos_load
04863A 5B CF       0479*  	RST.LIL 08h
04863C 21 4D 11 00 0480*  	ld hl,BUF_4429
048640 01 0E 00 00 0481*  	ld bc,14
048644 11 12 00 00 0482*  	ld de,18
048648 DD 21 FC 00 0483*  	ld ix,252
       00          
04864D CD DE BD 04 0484*  	call vdu_load_img
048651             0485*  
048651 21 1B 8E 04 0486*  	ld hl,Fhonda078
048655 11 8F C8 04 0487*  	ld de,filedata
048659 01 00 00 01 0488*  	ld bc,65536
04865D 3E 01       0489*  	ld a,mos_load
04865F 5B CF       0490*  	RST.LIL 08h
048661 21 4E 11 00 0491*  	ld hl,BUF_4430
048665 01 0A 00 00 0492*  	ld bc,10
048669 11 12 00 00 0493*  	ld de,18
04866D DD 21 B4 00 0494*  	ld ix,180
       00          
048672 CD DE BD 04 0495*  	call vdu_load_img
048676             0496*  
048676 21 31 8E 04 0497*  	ld hl,Fhonda079
04867A 11 8F C8 04 0498*  	ld de,filedata
04867E 01 00 00 01 0499*  	ld bc,65536
048682 3E 01       0500*  	ld a,mos_load
048684 5B CF       0501*  	RST.LIL 08h
048686 21 4F 11 00 0502*  	ld hl,BUF_4431
04868A 01 0A 00 00 0503*  	ld bc,10
04868E 11 12 00 00 0504*  	ld de,18
048692 DD 21 B4 00 0505*  	ld ix,180
       00          
048697 CD DE BD 04 0506*  	call vdu_load_img
04869B             0507*  
04869B 21 47 8E 04 0508*  	ld hl,Fhonda080
04869F 11 8F C8 04 0509*  	ld de,filedata
0486A3 01 00 00 01 0510*  	ld bc,65536
0486A7 3E 01       0511*  	ld a,mos_load
0486A9 5B CF       0512*  	RST.LIL 08h
0486AB 21 50 11 00 0513*  	ld hl,BUF_4432
0486AF 01 0A 00 00 0514*  	ld bc,10
0486B3 11 12 00 00 0515*  	ld de,18
0486B7 DD 21 B4 00 0516*  	ld ix,180
       00          
0486BC CD DE BD 04 0517*  	call vdu_load_img
0486C0             0518*  
0486C0 21 5D 8E 04 0519*  	ld hl,Fhonda081
0486C4 11 8F C8 04 0520*  	ld de,filedata
0486C8 01 00 00 01 0521*  	ld bc,65536
0486CC 3E 01       0522*  	ld a,mos_load
0486CE 5B CF       0523*  	RST.LIL 08h
0486D0 21 51 11 00 0524*  	ld hl,BUF_4433
0486D4 01 0A 00 00 0525*  	ld bc,10
0486D8 11 15 00 00 0526*  	ld de,21
0486DC DD 21 D2 00 0527*  	ld ix,210
       00          
0486E1 CD DE BD 04 0528*  	call vdu_load_img
0486E5             0529*  
0486E5 21 73 8E 04 0530*  	ld hl,Fhonda082
0486E9 11 8F C8 04 0531*  	ld de,filedata
0486ED 01 00 00 01 0532*  	ld bc,65536
0486F1 3E 01       0533*  	ld a,mos_load
0486F3 5B CF       0534*  	RST.LIL 08h
0486F5 21 52 11 00 0535*  	ld hl,BUF_4434
0486F9 01 0A 00 00 0536*  	ld bc,10
0486FD 11 12 00 00 0537*  	ld de,18
048701 DD 21 B4 00 0538*  	ld ix,180
       00          
048706 CD DE BD 04 0539*  	call vdu_load_img
04870A             0540*  
04870A 21 89 8E 04 0541*  	ld hl,Fhonda083
04870E 11 8F C8 04 0542*  	ld de,filedata
048712 01 00 00 01 0543*  	ld bc,65536
048716 3E 01       0544*  	ld a,mos_load
048718 5B CF       0545*  	RST.LIL 08h
04871A 21 53 11 00 0546*  	ld hl,BUF_4435
04871E 01 09 00 00 0547*  	ld bc,9
048722 11 13 00 00 0548*  	ld de,19
048726 DD 21 AB 00 0549*  	ld ix,171
       00          
04872B CD DE BD 04 0550*  	call vdu_load_img
04872F             0551*  
04872F 21 9F 8E 04 0552*  	ld hl,Fhonda084
048733 11 8F C8 04 0553*  	ld de,filedata
048737 01 00 00 01 0554*  	ld bc,65536
04873B 3E 01       0555*  	ld a,mos_load
04873D 5B CF       0556*  	RST.LIL 08h
04873F 21 54 11 00 0557*  	ld hl,BUF_4436
048743 01 0A 00 00 0558*  	ld bc,10
048747 11 12 00 00 0559*  	ld de,18
04874B DD 21 B4 00 0560*  	ld ix,180
       00          
048750 CD DE BD 04 0561*  	call vdu_load_img
048754             0562*  
048754 21 B5 8E 04 0563*  	ld hl,Fhonda085
048758 11 8F C8 04 0564*  	ld de,filedata
04875C 01 00 00 01 0565*  	ld bc,65536
048760 3E 01       0566*  	ld a,mos_load
048762 5B CF       0567*  	RST.LIL 08h
048764 21 55 11 00 0568*  	ld hl,BUF_4437
048768 01 0A 00 00 0569*  	ld bc,10
04876C 11 12 00 00 0570*  	ld de,18
048770 DD 21 B4 00 0571*  	ld ix,180
       00          
048775 CD DE BD 04 0572*  	call vdu_load_img
048779             0573*  
048779 21 CB 8E 04 0574*  	ld hl,Fhonda086
04877D 11 8F C8 04 0575*  	ld de,filedata
048781 01 00 00 01 0576*  	ld bc,65536
048785 3E 01       0577*  	ld a,mos_load
048787 5B CF       0578*  	RST.LIL 08h
048789 21 56 11 00 0579*  	ld hl,BUF_4438
04878D 01 0A 00 00 0580*  	ld bc,10
048791 11 12 00 00 0581*  	ld de,18
048795 DD 21 B4 00 0582*  	ld ix,180
       00          
04879A CD DE BD 04 0583*  	call vdu_load_img
04879E             0584*  
04879E 21 E1 8E 04 0585*  	ld hl,Fhonda087
0487A2 11 8F C8 04 0586*  	ld de,filedata
0487A6 01 00 00 01 0587*  	ld bc,65536
0487AA 3E 01       0588*  	ld a,mos_load
0487AC 5B CF       0589*  	RST.LIL 08h
0487AE 21 57 11 00 0590*  	ld hl,BUF_4439
0487B2 01 10 00 00 0591*  	ld bc,16
0487B6 11 12 00 00 0592*  	ld de,18
0487BA DD 21 20 01 0593*  	ld ix,288
       00          
0487BF CD DE BD 04 0594*  	call vdu_load_img
0487C3             0595*  
0487C3 21 F7 8E 04 0596*  	ld hl,Fhonda088
0487C7 11 8F C8 04 0597*  	ld de,filedata
0487CB 01 00 00 01 0598*  	ld bc,65536
0487CF 3E 01       0599*  	ld a,mos_load
0487D1 5B CF       0600*  	RST.LIL 08h
0487D3 21 58 11 00 0601*  	ld hl,BUF_4440
0487D7 01 0A 00 00 0602*  	ld bc,10
0487DB 11 12 00 00 0603*  	ld de,18
0487DF DD 21 B4 00 0604*  	ld ix,180
       00          
0487E4 CD DE BD 04 0605*  	call vdu_load_img
0487E8             0606*  
0487E8 21 0D 8F 04 0607*  	ld hl,Fhonda089
0487EC 11 8F C8 04 0608*  	ld de,filedata
0487F0 01 00 00 01 0609*  	ld bc,65536
0487F4 3E 01       0610*  	ld a,mos_load
0487F6 5B CF       0611*  	RST.LIL 08h
0487F8 21 59 11 00 0612*  	ld hl,BUF_4441
0487FC 01 0A 00 00 0613*  	ld bc,10
048800 11 12 00 00 0614*  	ld de,18
048804 DD 21 B4 00 0615*  	ld ix,180
       00          
048809 CD DE BD 04 0616*  	call vdu_load_img
04880D             0617*  
04880D 21 23 8F 04 0618*  	ld hl,Fhonda090
048811 11 8F C8 04 0619*  	ld de,filedata
048815 01 00 00 01 0620*  	ld bc,65536
048819 3E 01       0621*  	ld a,mos_load
04881B 5B CF       0622*  	RST.LIL 08h
04881D 21 5A 11 00 0623*  	ld hl,BUF_4442
048821 01 09 00 00 0624*  	ld bc,9
048825 11 12 00 00 0625*  	ld de,18
048829 DD 21 A2 00 0626*  	ld ix,162
       00          
04882E CD DE BD 04 0627*  	call vdu_load_img
048832             0628*  ; Missing character 91
048832             0629*  ; Missing character 92
048832             0630*  ; Missing character 93
048832             0631*  ; Missing character 94
048832             0632*  ; Missing character 95
048832             0633*  ; Missing character 96
048832             0634*  
048832 21 39 8F 04 0635*  	ld hl,Fhonda097
048836 11 8F C8 04 0636*  	ld de,filedata
04883A 01 00 00 01 0637*  	ld bc,65536
04883E 3E 01       0638*  	ld a,mos_load
048840 5B CF       0639*  	RST.LIL 08h
048842 21 61 11 00 0640*  	ld hl,BUF_4449
048846 01 08 00 00 0641*  	ld bc,8
04884A 11 0C 00 00 0642*  	ld de,12
04884E DD 21 60 00 0643*  	ld ix,96
       00          
048853 CD DE BD 04 0644*  	call vdu_load_img
048857             0645*  
048857 21 4F 8F 04 0646*  	ld hl,Fhonda098
04885B 11 8F C8 04 0647*  	ld de,filedata
04885F 01 00 00 01 0648*  	ld bc,65536
048863 3E 01       0649*  	ld a,mos_load
048865 5B CF       0650*  	RST.LIL 08h
048867 21 62 11 00 0651*  	ld hl,BUF_4450
04886B 01 09 00 00 0652*  	ld bc,9
04886F 11 12 00 00 0653*  	ld de,18
048873 DD 21 A2 00 0654*  	ld ix,162
       00          
048878 CD DE BD 04 0655*  	call vdu_load_img
04887C             0656*  
04887C 21 65 8F 04 0657*  	ld hl,Fhonda099
048880 11 8F C8 04 0658*  	ld de,filedata
048884 01 00 00 01 0659*  	ld bc,65536
048888 3E 01       0660*  	ld a,mos_load
04888A 5B CF       0661*  	RST.LIL 08h
04888C 21 63 11 00 0662*  	ld hl,BUF_4451
048890 01 07 00 00 0663*  	ld bc,7
048894 11 0C 00 00 0664*  	ld de,12
048898 DD 21 54 00 0665*  	ld ix,84
       00          
04889D CD DE BD 04 0666*  	call vdu_load_img
0488A1             0667*  
0488A1 21 7B 8F 04 0668*  	ld hl,Fhonda100
0488A5 11 8F C8 04 0669*  	ld de,filedata
0488A9 01 00 00 01 0670*  	ld bc,65536
0488AD 3E 01       0671*  	ld a,mos_load
0488AF 5B CF       0672*  	RST.LIL 08h
0488B1 21 64 11 00 0673*  	ld hl,BUF_4452
0488B5 01 09 00 00 0674*  	ld bc,9
0488B9 11 12 00 00 0675*  	ld de,18
0488BD DD 21 A2 00 0676*  	ld ix,162
       00          
0488C2 CD DE BD 04 0677*  	call vdu_load_img
0488C6             0678*  
0488C6 21 91 8F 04 0679*  	ld hl,Fhonda101
0488CA 11 8F C8 04 0680*  	ld de,filedata
0488CE 01 00 00 01 0681*  	ld bc,65536
0488D2 3E 01       0682*  	ld a,mos_load
0488D4 5B CF       0683*  	RST.LIL 08h
0488D6 21 65 11 00 0684*  	ld hl,BUF_4453
0488DA 01 08 00 00 0685*  	ld bc,8
0488DE 11 0C 00 00 0686*  	ld de,12
0488E2 DD 21 60 00 0687*  	ld ix,96
       00          
0488E7 CD DE BD 04 0688*  	call vdu_load_img
0488EB             0689*  
0488EB 21 A7 8F 04 0690*  	ld hl,Fhonda102
0488EF 11 8F C8 04 0691*  	ld de,filedata
0488F3 01 00 00 01 0692*  	ld bc,65536
0488F7 3E 01       0693*  	ld a,mos_load
0488F9 5B CF       0694*  	RST.LIL 08h
0488FB 21 66 11 00 0695*  	ld hl,BUF_4454
0488FF 01 09 00 00 0696*  	ld bc,9
048903 11 12 00 00 0697*  	ld de,18
048907 DD 21 A2 00 0698*  	ld ix,162
       00          
04890C CD DE BD 04 0699*  	call vdu_load_img
048910             0700*  
048910 21 BD 8F 04 0701*  	ld hl,Fhonda103
048914 11 8F C8 04 0702*  	ld de,filedata
048918 01 00 00 01 0703*  	ld bc,65536
04891C 3E 01       0704*  	ld a,mos_load
04891E 5B CF       0705*  	RST.LIL 08h
048920 21 67 11 00 0706*  	ld hl,BUF_4455
048924 01 09 00 00 0707*  	ld bc,9
048928 11 12 00 00 0708*  	ld de,18
04892C DD 21 A2 00 0709*  	ld ix,162
       00          
048931 CD DE BD 04 0710*  	call vdu_load_img
048935             0711*  
048935 21 D3 8F 04 0712*  	ld hl,Fhonda104
048939 11 8F C8 04 0713*  	ld de,filedata
04893D 01 00 00 01 0714*  	ld bc,65536
048941 3E 01       0715*  	ld a,mos_load
048943 5B CF       0716*  	RST.LIL 08h
048945 21 68 11 00 0717*  	ld hl,BUF_4456
048949 01 09 00 00 0718*  	ld bc,9
04894D 11 12 00 00 0719*  	ld de,18
048951 DD 21 A2 00 0720*  	ld ix,162
       00          
048956 CD DE BD 04 0721*  	call vdu_load_img
04895A             0722*  
04895A 21 E9 8F 04 0723*  	ld hl,Fhonda105
04895E 11 8F C8 04 0724*  	ld de,filedata
048962 01 00 00 01 0725*  	ld bc,65536
048966 3E 01       0726*  	ld a,mos_load
048968 5B CF       0727*  	RST.LIL 08h
04896A 21 69 11 00 0728*  	ld hl,BUF_4457
04896E 01 04 00 00 0729*  	ld bc,4
048972 11 12 00 00 0730*  	ld de,18
048976 DD 21 48 00 0731*  	ld ix,72
       00          
04897B CD DE BD 04 0732*  	call vdu_load_img
04897F             0733*  
04897F 21 FF 8F 04 0734*  	ld hl,Fhonda106
048983 11 8F C8 04 0735*  	ld de,filedata
048987 01 00 00 01 0736*  	ld bc,65536
04898B 3E 01       0737*  	ld a,mos_load
04898D 5B CF       0738*  	RST.LIL 08h
04898F 21 6A 11 00 0739*  	ld hl,BUF_4458
048993 01 08 00 00 0740*  	ld bc,8
048997 11 18 00 00 0741*  	ld de,24
04899B DD 21 C0 00 0742*  	ld ix,192
       00          
0489A0 CD DE BD 04 0743*  	call vdu_load_img
0489A4             0744*  
0489A4 21 15 90 04 0745*  	ld hl,Fhonda107
0489A8 11 8F C8 04 0746*  	ld de,filedata
0489AC 01 00 00 01 0747*  	ld bc,65536
0489B0 3E 01       0748*  	ld a,mos_load
0489B2 5B CF       0749*  	RST.LIL 08h
0489B4 21 6B 11 00 0750*  	ld hl,BUF_4459
0489B8 01 09 00 00 0751*  	ld bc,9
0489BC 11 12 00 00 0752*  	ld de,18
0489C0 DD 21 A2 00 0753*  	ld ix,162
       00          
0489C5 CD DE BD 04 0754*  	call vdu_load_img
0489C9             0755*  
0489C9 21 2B 90 04 0756*  	ld hl,Fhonda108
0489CD 11 8F C8 04 0757*  	ld de,filedata
0489D1 01 00 00 01 0758*  	ld bc,65536
0489D5 3E 01       0759*  	ld a,mos_load
0489D7 5B CF       0760*  	RST.LIL 08h
0489D9 21 6C 11 00 0761*  	ld hl,BUF_4460
0489DD 01 03 00 00 0762*  	ld bc,3
0489E1 11 12 00 00 0763*  	ld de,18
0489E5 DD 21 36 00 0764*  	ld ix,54
       00          
0489EA CD DE BD 04 0765*  	call vdu_load_img
0489EE             0766*  
0489EE 21 41 90 04 0767*  	ld hl,Fhonda109
0489F2 11 8F C8 04 0768*  	ld de,filedata
0489F6 01 00 00 01 0769*  	ld bc,65536
0489FA 3E 01       0770*  	ld a,mos_load
0489FC 5B CF       0771*  	RST.LIL 08h
0489FE 21 6D 11 00 0772*  	ld hl,BUF_4461
048A02 01 0E 00 00 0773*  	ld bc,14
048A06 11 0D 00 00 0774*  	ld de,13
048A0A DD 21 B6 00 0775*  	ld ix,182
       00          
048A0F CD DE BD 04 0776*  	call vdu_load_img
048A13             0777*  
048A13 21 57 90 04 0778*  	ld hl,Fhonda110
048A17 11 8F C8 04 0779*  	ld de,filedata
048A1B 01 00 00 01 0780*  	ld bc,65536
048A1F 3E 01       0781*  	ld a,mos_load
048A21 5B CF       0782*  	RST.LIL 08h
048A23 21 6E 11 00 0783*  	ld hl,BUF_4462
048A27 01 09 00 00 0784*  	ld bc,9
048A2B 11 0C 00 00 0785*  	ld de,12
048A2F DD 21 6C 00 0786*  	ld ix,108
       00          
048A34 CD DE BD 04 0787*  	call vdu_load_img
048A38             0788*  
048A38 21 6D 90 04 0789*  	ld hl,Fhonda111
048A3C 11 8F C8 04 0790*  	ld de,filedata
048A40 01 00 00 01 0791*  	ld bc,65536
048A44 3E 01       0792*  	ld a,mos_load
048A46 5B CF       0793*  	RST.LIL 08h
048A48 21 6F 11 00 0794*  	ld hl,BUF_4463
048A4C 01 09 00 00 0795*  	ld bc,9
048A50 11 0C 00 00 0796*  	ld de,12
048A54 DD 21 6C 00 0797*  	ld ix,108
       00          
048A59 CD DE BD 04 0798*  	call vdu_load_img
048A5D             0799*  
048A5D 21 83 90 04 0800*  	ld hl,Fhonda112
048A61 11 8F C8 04 0801*  	ld de,filedata
048A65 01 00 00 01 0802*  	ld bc,65536
048A69 3E 01       0803*  	ld a,mos_load
048A6B 5B CF       0804*  	RST.LIL 08h
048A6D 21 70 11 00 0805*  	ld hl,BUF_4464
048A71 01 09 00 00 0806*  	ld bc,9
048A75 11 12 00 00 0807*  	ld de,18
048A79 DD 21 A2 00 0808*  	ld ix,162
       00          
048A7E CD DE BD 04 0809*  	call vdu_load_img
048A82             0810*  
048A82 21 99 90 04 0811*  	ld hl,Fhonda113
048A86 11 8F C8 04 0812*  	ld de,filedata
048A8A 01 00 00 01 0813*  	ld bc,65536
048A8E 3E 01       0814*  	ld a,mos_load
048A90 5B CF       0815*  	RST.LIL 08h
048A92 21 71 11 00 0816*  	ld hl,BUF_4465
048A96 01 09 00 00 0817*  	ld bc,9
048A9A 11 12 00 00 0818*  	ld de,18
048A9E DD 21 A2 00 0819*  	ld ix,162
       00          
048AA3 CD DE BD 04 0820*  	call vdu_load_img
048AA7             0821*  
048AA7 21 AF 90 04 0822*  	ld hl,Fhonda114
048AAB 11 8F C8 04 0823*  	ld de,filedata
048AAF 01 00 00 01 0824*  	ld bc,65536
048AB3 3E 01       0825*  	ld a,mos_load
048AB5 5B CF       0826*  	RST.LIL 08h
048AB7 21 72 11 00 0827*  	ld hl,BUF_4466
048ABB 01 06 00 00 0828*  	ld bc,6
048ABF 11 0D 00 00 0829*  	ld de,13
048AC3 DD 21 4E 00 0830*  	ld ix,78
       00          
048AC8 CD DE BD 04 0831*  	call vdu_load_img
048ACC             0832*  
048ACC 21 C5 90 04 0833*  	ld hl,Fhonda115
048AD0 11 8F C8 04 0834*  	ld de,filedata
048AD4 01 00 00 01 0835*  	ld bc,65536
048AD8 3E 01       0836*  	ld a,mos_load
048ADA 5B CF       0837*  	RST.LIL 08h
048ADC 21 73 11 00 0838*  	ld hl,BUF_4467
048AE0 01 08 00 00 0839*  	ld bc,8
048AE4 11 0D 00 00 0840*  	ld de,13
048AE8 DD 21 68 00 0841*  	ld ix,104
       00          
048AED CD DE BD 04 0842*  	call vdu_load_img
048AF1             0843*  
048AF1 21 DB 90 04 0844*  	ld hl,Fhonda116
048AF5 11 8F C8 04 0845*  	ld de,filedata
048AF9 01 00 00 01 0846*  	ld bc,65536
048AFD 3E 01       0847*  	ld a,mos_load
048AFF 5B CF       0848*  	RST.LIL 08h
048B01 21 74 11 00 0849*  	ld hl,BUF_4468
048B05 01 07 00 00 0850*  	ld bc,7
048B09 11 0F 00 00 0851*  	ld de,15
048B0D DD 21 69 00 0852*  	ld ix,105
       00          
048B12 CD DE BD 04 0853*  	call vdu_load_img
048B16             0854*  
048B16 21 F1 90 04 0855*  	ld hl,Fhonda117
048B1A 11 8F C8 04 0856*  	ld de,filedata
048B1E 01 00 00 01 0857*  	ld bc,65536
048B22 3E 01       0858*  	ld a,mos_load
048B24 5B CF       0859*  	RST.LIL 08h
048B26 21 75 11 00 0860*  	ld hl,BUF_4469
048B2A 01 09 00 00 0861*  	ld bc,9
048B2E 11 0C 00 00 0862*  	ld de,12
048B32 DD 21 6C 00 0863*  	ld ix,108
       00          
048B37 CD DE BD 04 0864*  	call vdu_load_img
048B3B             0865*  
048B3B 21 07 91 04 0866*  	ld hl,Fhonda118
048B3F 11 8F C8 04 0867*  	ld de,filedata
048B43 01 00 00 01 0868*  	ld bc,65536
048B47 3E 01       0869*  	ld a,mos_load
048B49 5B CF       0870*  	RST.LIL 08h
048B4B 21 76 11 00 0871*  	ld hl,BUF_4470
048B4F 01 09 00 00 0872*  	ld bc,9
048B53 11 0C 00 00 0873*  	ld de,12
048B57 DD 21 6C 00 0874*  	ld ix,108
       00          
048B5C CD DE BD 04 0875*  	call vdu_load_img
048B60             0876*  
048B60 21 1D 91 04 0877*  	ld hl,Fhonda119
048B64 11 8F C8 04 0878*  	ld de,filedata
048B68 01 00 00 01 0879*  	ld bc,65536
048B6C 3E 01       0880*  	ld a,mos_load
048B6E 5B CF       0881*  	RST.LIL 08h
048B70 21 77 11 00 0882*  	ld hl,BUF_4471
048B74 01 0E 00 00 0883*  	ld bc,14
048B78 11 0C 00 00 0884*  	ld de,12
048B7C DD 21 A8 00 0885*  	ld ix,168
       00          
048B81 CD DE BD 04 0886*  	call vdu_load_img
048B85             0887*  
048B85 21 33 91 04 0888*  	ld hl,Fhonda120
048B89 11 8F C8 04 0889*  	ld de,filedata
048B8D 01 00 00 01 0890*  	ld bc,65536
048B91 3E 01       0891*  	ld a,mos_load
048B93 5B CF       0892*  	RST.LIL 08h
048B95 21 78 11 00 0893*  	ld hl,BUF_4472
048B99 01 09 00 00 0894*  	ld bc,9
048B9D 11 0C 00 00 0895*  	ld de,12
048BA1 DD 21 6C 00 0896*  	ld ix,108
       00          
048BA6 CD DE BD 04 0897*  	call vdu_load_img
048BAA             0898*  
048BAA 21 49 91 04 0899*  	ld hl,Fhonda121
048BAE 11 8F C8 04 0900*  	ld de,filedata
048BB2 01 00 00 01 0901*  	ld bc,65536
048BB6 3E 01       0902*  	ld a,mos_load
048BB8 5B CF       0903*  	RST.LIL 08h
048BBA 21 79 11 00 0904*  	ld hl,BUF_4473
048BBE 01 09 00 00 0905*  	ld bc,9
048BC2 11 11 00 00 0906*  	ld de,17
048BC6 DD 21 99 00 0907*  	ld ix,153
       00          
048BCB CD DE BD 04 0908*  	call vdu_load_img
048BCF             0909*  
048BCF 21 5F 91 04 0910*  	ld hl,Fhonda122
048BD3 11 8F C8 04 0911*  	ld de,filedata
048BD7 01 00 00 01 0912*  	ld bc,65536
048BDB 3E 01       0913*  	ld a,mos_load
048BDD 5B CF       0914*  	RST.LIL 08h
048BDF 21 7A 11 00 0915*  	ld hl,BUF_4474
048BE3 01 09 00 00 0916*  	ld bc,9
048BE7 11 0C 00 00 0917*  	ld de,12
048BEB DD 21 6C 00 0918*  	ld ix,108
       00          
048BF0 CD DE BD 04 0919*  	call vdu_load_img
048BF4             0920*  
048BF4 C9          0921*  	ret
048BF5             0922*  
048BF5 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
048C0B 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
048C21 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
048C37 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
048C4D 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
048C63 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
048C79 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
048C8F 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
048CA5 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
048CBB 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
048CD1 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
048CE7 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
048CFD 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
048D13 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
048D29 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
048D3F 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
048D55 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
048D6B 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
048D81 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
048D97 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
048DAD 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
048DC3 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
048DD9 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
048DEF 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
048E05 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
048E1B 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
048E31 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
048E47 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
048E5D 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
048E73 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
048E89 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
048E9F 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
048EB5 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
048ECB 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
048EE1 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
048EF7 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
048F0D 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
048F23 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
048F39 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
048F4F 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
048F65 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
048F7B 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
048F91 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
048FA7 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
048FBD 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
048FD3 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
048FE9 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
048FFF 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
049015 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
04902B 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
049041 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
049057 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
04906D 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
049083 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
049099 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
0490AF 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
0490C5 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
0490DB 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
0490F1 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
049107 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
04911D 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
049133 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
049149 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
04915F 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
049175             0019   	include "src/asm/font_retro_computer.asm"
049175             0001*  ; Bitmap indices:
049175             0002*  BUF_4128: equ 0x1020 ; 32
049175             0003*  BUF_4129: equ 0x1021 ; 33 !
049175             0004*  ; Missing character 34 "
049175             0005*  ; Missing character 35 #
049175             0006*  ; Missing character 36 $
049175             0007*  ; Missing character 37 %
049175             0008*  ; Missing character 38 &
049175             0009*  ; Missing character 39 '
049175             0010*  ; Missing character 40 (
049175             0011*  ; Missing character 41 )
049175             0012*  ; Missing character 42 *
049175             0013*  ; Missing character 43 +
049175             0014*  ; Missing character 44 ,
049175             0015*  ; Missing character 45 -
049175             0016*  ; Missing character 46 .
049175             0017*  ; Missing character 47 /
049175             0018*  BUF_4144: equ 0x1030 ; 48 0
049175             0019*  BUF_4145: equ 0x1031 ; 49 1
049175             0020*  BUF_4146: equ 0x1032 ; 50 2
049175             0021*  BUF_4147: equ 0x1033 ; 51 3
049175             0022*  BUF_4148: equ 0x1034 ; 52 4
049175             0023*  BUF_4149: equ 0x1035 ; 53 5
049175             0024*  BUF_4150: equ 0x1036 ; 54 6
049175             0025*  BUF_4151: equ 0x1037 ; 55 7
049175             0026*  BUF_4152: equ 0x1038 ; 56 8
049175             0027*  BUF_4153: equ 0x1039 ; 57 9
049175             0028*  ; Missing character 58 :
049175             0029*  ; Missing character 59 ;
049175             0030*  ; Missing character 60 <
049175             0031*  ; Missing character 61 =
049175             0032*  ; Missing character 62 >
049175             0033*  BUF_4159: equ 0x103F ; 63 ?
049175             0034*  ; Missing character 64 @
049175             0035*  BUF_4161: equ 0x1041 ; 65 A
049175             0036*  BUF_4162: equ 0x1042 ; 66 B
049175             0037*  BUF_4163: equ 0x1043 ; 67 C
049175             0038*  BUF_4164: equ 0x1044 ; 68 D
049175             0039*  BUF_4165: equ 0x1045 ; 69 E
049175             0040*  BUF_4166: equ 0x1046 ; 70 F
049175             0041*  BUF_4167: equ 0x1047 ; 71 G
049175             0042*  BUF_4168: equ 0x1048 ; 72 H
049175             0043*  BUF_4169: equ 0x1049 ; 73 I
049175             0044*  BUF_4170: equ 0x104A ; 74 J
049175             0045*  BUF_4171: equ 0x104B ; 75 K
049175             0046*  BUF_4172: equ 0x104C ; 76 L
049175             0047*  BUF_4173: equ 0x104D ; 77 M
049175             0048*  BUF_4174: equ 0x104E ; 78 N
049175             0049*  BUF_4175: equ 0x104F ; 79 O
049175             0050*  BUF_4176: equ 0x1050 ; 80 P
049175             0051*  BUF_4177: equ 0x1051 ; 81 Q
049175             0052*  BUF_4178: equ 0x1052 ; 82 R
049175             0053*  BUF_4179: equ 0x1053 ; 83 S
049175             0054*  BUF_4180: equ 0x1054 ; 84 T
049175             0055*  BUF_4181: equ 0x1055 ; 85 U
049175             0056*  BUF_4182: equ 0x1056 ; 86 V
049175             0057*  BUF_4183: equ 0x1057 ; 87 W
049175             0058*  BUF_4184: equ 0x1058 ; 88 X
049175             0059*  BUF_4185: equ 0x1059 ; 89 Y
049175             0060*  BUF_4186: equ 0x105A ; 90 Z
049175             0061*  ; Missing character 91 [
049175             0062*  ; Missing character 92 \
049175             0063*  ; Missing character 93 ]
049175             0064*  ; Missing character 94 ^
049175             0065*  ; Missing character 95 _
049175             0066*  ; Missing character 96 `
049175             0067*  ; Missing character 97 a
049175             0068*  ; Missing character 98 b
049175             0069*  ; Missing character 99 c
049175             0070*  ; Missing character 100 d
049175             0071*  ; Missing character 101 e
049175             0072*  ; Missing character 102 f
049175             0073*  ; Missing character 103 g
049175             0074*  ; Missing character 104 h
049175             0075*  ; Missing character 105 i
049175             0076*  ; Missing character 106 j
049175             0077*  ; Missing character 107 k
049175             0078*  ; Missing character 108 l
049175             0079*  ; Missing character 109 m
049175             0080*  ; Missing character 110 n
049175             0081*  ; Missing character 111 o
049175             0082*  ; Missing character 112 p
049175             0083*  ; Missing character 113 q
049175             0084*  ; Missing character 114 r
049175             0085*  ; Missing character 115 s
049175             0086*  ; Missing character 116 t
049175             0087*  ; Missing character 117 u
049175             0088*  ; Missing character 118 v
049175             0089*  ; Missing character 119 w
049175             0090*  ; Missing character 120 x
049175             0091*  ; Missing character 121 y
049175             0092*  ; Missing character 122 z
049175             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
049175             0094*  font_retro_computer:
049175 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
04917B 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
049181 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
049187 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
04918D 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
049193 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
049199 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
04919F 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
0491A5 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
0491AB 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
0491B1 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
0491B7 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
0491BD 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
0491C3 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
0491C9 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
0491CF 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
0491D5 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
0491DB 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
0491E1 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
0491E7 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
0491ED 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
0491F3 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
0491F9 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
0491FF 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
049205 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
04920B 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
049211 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
049217 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
04921D 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
049223 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
049229 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
04922F 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
049235 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
04923B 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
049241 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
049247 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
04924D 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
049253 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
049259 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
04925F 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
049265 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
04926B 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
049271 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
049277 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
04927D 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
049283 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
049289 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
04928F 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
049295 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
04929B 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
0492A1 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
0492A7 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
0492AD 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
0492B3 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
0492B9 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
0492BF 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
0492C5 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
0492CB 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
0492D1 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
0492D7 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
0492DD 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
0492E3 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
0492E9 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
0492EF 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
0492F5 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
0492FB 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
049301 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
049307 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
04930D 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
049313 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
049319 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
04931F 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
049325 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
04932B 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
049331 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
049337 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
04933D 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
049343 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
049349 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
04934F 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
049355 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
04935B 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
049361 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
049367 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
04936D 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
049373 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
049379 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
04937F 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
049385 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
04938B 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
049391 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
049397             0186*  
049397             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
049397             0188*  load_font_retro_computer:
049397             0189*  
049397 21 3B 99 04 0190*  	ld hl,Frc032
04939B 11 8F C8 04 0191*  	ld de,filedata
04939F 01 00 00 01 0192*  	ld bc,65536
0493A3 3E 01       0193*  	ld a,mos_load
0493A5 5B CF       0194*  	RST.LIL 08h
0493A7 21 20 10 00 0195*  	ld hl,BUF_4128
0493AB 01 06 00 00 0196*  	ld bc,6
0493AF 11 01 00 00 0197*  	ld de,1
0493B3 DD 21 06 00 0198*  	ld ix,6
       00          
0493B8 CD DE BD 04 0199*  	call vdu_load_img
0493BC             0200*  
0493BC 21 4E 99 04 0201*  	ld hl,Frc033
0493C0 11 8F C8 04 0202*  	ld de,filedata
0493C4 01 00 00 01 0203*  	ld bc,65536
0493C8 3E 01       0204*  	ld a,mos_load
0493CA 5B CF       0205*  	RST.LIL 08h
0493CC 21 21 10 00 0206*  	ld hl,BUF_4129
0493D0 01 03 00 00 0207*  	ld bc,3
0493D4 11 0E 00 00 0208*  	ld de,14
0493D8 DD 21 2A 00 0209*  	ld ix,42
       00          
0493DD CD DE BD 04 0210*  	call vdu_load_img
0493E1             0211*  ; Missing character 34
0493E1             0212*  ; Missing character 35
0493E1             0213*  ; Missing character 36
0493E1             0214*  ; Missing character 37
0493E1             0215*  ; Missing character 38
0493E1             0216*  ; Missing character 39
0493E1             0217*  ; Missing character 40
0493E1             0218*  ; Missing character 41
0493E1             0219*  ; Missing character 42
0493E1             0220*  ; Missing character 43
0493E1             0221*  ; Missing character 44
0493E1             0222*  ; Missing character 45
0493E1             0223*  ; Missing character 46
0493E1             0224*  ; Missing character 47
0493E1             0225*  
0493E1 21 61 99 04 0226*  	ld hl,Frc048
0493E5 11 8F C8 04 0227*  	ld de,filedata
0493E9 01 00 00 01 0228*  	ld bc,65536
0493ED 3E 01       0229*  	ld a,mos_load
0493EF 5B CF       0230*  	RST.LIL 08h
0493F1 21 30 10 00 0231*  	ld hl,BUF_4144
0493F5 01 08 00 00 0232*  	ld bc,8
0493F9 11 0E 00 00 0233*  	ld de,14
0493FD DD 21 70 00 0234*  	ld ix,112
       00          
049402 CD DE BD 04 0235*  	call vdu_load_img
049406             0236*  
049406 21 74 99 04 0237*  	ld hl,Frc049
04940A 11 8F C8 04 0238*  	ld de,filedata
04940E 01 00 00 01 0239*  	ld bc,65536
049412 3E 01       0240*  	ld a,mos_load
049414 5B CF       0241*  	RST.LIL 08h
049416 21 31 10 00 0242*  	ld hl,BUF_4145
04941A 01 08 00 00 0243*  	ld bc,8
04941E 11 0E 00 00 0244*  	ld de,14
049422 DD 21 70 00 0245*  	ld ix,112
       00          
049427 CD DE BD 04 0246*  	call vdu_load_img
04942B             0247*  
04942B 21 87 99 04 0248*  	ld hl,Frc050
04942F 11 8F C8 04 0249*  	ld de,filedata
049433 01 00 00 01 0250*  	ld bc,65536
049437 3E 01       0251*  	ld a,mos_load
049439 5B CF       0252*  	RST.LIL 08h
04943B 21 32 10 00 0253*  	ld hl,BUF_4146
04943F 01 08 00 00 0254*  	ld bc,8
049443 11 0E 00 00 0255*  	ld de,14
049447 DD 21 70 00 0256*  	ld ix,112
       00          
04944C CD DE BD 04 0257*  	call vdu_load_img
049450             0258*  
049450 21 9A 99 04 0259*  	ld hl,Frc051
049454 11 8F C8 04 0260*  	ld de,filedata
049458 01 00 00 01 0261*  	ld bc,65536
04945C 3E 01       0262*  	ld a,mos_load
04945E 5B CF       0263*  	RST.LIL 08h
049460 21 33 10 00 0264*  	ld hl,BUF_4147
049464 01 08 00 00 0265*  	ld bc,8
049468 11 0E 00 00 0266*  	ld de,14
04946C DD 21 70 00 0267*  	ld ix,112
       00          
049471 CD DE BD 04 0268*  	call vdu_load_img
049475             0269*  
049475 21 AD 99 04 0270*  	ld hl,Frc052
049479 11 8F C8 04 0271*  	ld de,filedata
04947D 01 00 00 01 0272*  	ld bc,65536
049481 3E 01       0273*  	ld a,mos_load
049483 5B CF       0274*  	RST.LIL 08h
049485 21 34 10 00 0275*  	ld hl,BUF_4148
049489 01 08 00 00 0276*  	ld bc,8
04948D 11 0E 00 00 0277*  	ld de,14
049491 DD 21 70 00 0278*  	ld ix,112
       00          
049496 CD DE BD 04 0279*  	call vdu_load_img
04949A             0280*  
04949A 21 C0 99 04 0281*  	ld hl,Frc053
04949E 11 8F C8 04 0282*  	ld de,filedata
0494A2 01 00 00 01 0283*  	ld bc,65536
0494A6 3E 01       0284*  	ld a,mos_load
0494A8 5B CF       0285*  	RST.LIL 08h
0494AA 21 35 10 00 0286*  	ld hl,BUF_4149
0494AE 01 08 00 00 0287*  	ld bc,8
0494B2 11 0E 00 00 0288*  	ld de,14
0494B6 DD 21 70 00 0289*  	ld ix,112
       00          
0494BB CD DE BD 04 0290*  	call vdu_load_img
0494BF             0291*  
0494BF 21 D3 99 04 0292*  	ld hl,Frc054
0494C3 11 8F C8 04 0293*  	ld de,filedata
0494C7 01 00 00 01 0294*  	ld bc,65536
0494CB 3E 01       0295*  	ld a,mos_load
0494CD 5B CF       0296*  	RST.LIL 08h
0494CF 21 36 10 00 0297*  	ld hl,BUF_4150
0494D3 01 08 00 00 0298*  	ld bc,8
0494D7 11 0E 00 00 0299*  	ld de,14
0494DB DD 21 70 00 0300*  	ld ix,112
       00          
0494E0 CD DE BD 04 0301*  	call vdu_load_img
0494E4             0302*  
0494E4 21 E6 99 04 0303*  	ld hl,Frc055
0494E8 11 8F C8 04 0304*  	ld de,filedata
0494EC 01 00 00 01 0305*  	ld bc,65536
0494F0 3E 01       0306*  	ld a,mos_load
0494F2 5B CF       0307*  	RST.LIL 08h
0494F4 21 37 10 00 0308*  	ld hl,BUF_4151
0494F8 01 08 00 00 0309*  	ld bc,8
0494FC 11 0E 00 00 0310*  	ld de,14
049500 DD 21 70 00 0311*  	ld ix,112
       00          
049505 CD DE BD 04 0312*  	call vdu_load_img
049509             0313*  
049509 21 F9 99 04 0314*  	ld hl,Frc056
04950D 11 8F C8 04 0315*  	ld de,filedata
049511 01 00 00 01 0316*  	ld bc,65536
049515 3E 01       0317*  	ld a,mos_load
049517 5B CF       0318*  	RST.LIL 08h
049519 21 38 10 00 0319*  	ld hl,BUF_4152
04951D 01 08 00 00 0320*  	ld bc,8
049521 11 0E 00 00 0321*  	ld de,14
049525 DD 21 70 00 0322*  	ld ix,112
       00          
04952A CD DE BD 04 0323*  	call vdu_load_img
04952E             0324*  
04952E 21 0C 9A 04 0325*  	ld hl,Frc057
049532 11 8F C8 04 0326*  	ld de,filedata
049536 01 00 00 01 0327*  	ld bc,65536
04953A 3E 01       0328*  	ld a,mos_load
04953C 5B CF       0329*  	RST.LIL 08h
04953E 21 39 10 00 0330*  	ld hl,BUF_4153
049542 01 08 00 00 0331*  	ld bc,8
049546 11 0E 00 00 0332*  	ld de,14
04954A DD 21 70 00 0333*  	ld ix,112
       00          
04954F CD DE BD 04 0334*  	call vdu_load_img
049553             0335*  ; Missing character 58
049553             0336*  ; Missing character 59
049553             0337*  ; Missing character 60
049553             0338*  ; Missing character 61
049553             0339*  ; Missing character 62
049553             0340*  
049553 21 1F 9A 04 0341*  	ld hl,Frc063
049557 11 8F C8 04 0342*  	ld de,filedata
04955B 01 00 00 01 0343*  	ld bc,65536
04955F 3E 01       0344*  	ld a,mos_load
049561 5B CF       0345*  	RST.LIL 08h
049563 21 3F 10 00 0346*  	ld hl,BUF_4159
049567 01 08 00 00 0347*  	ld bc,8
04956B 11 0E 00 00 0348*  	ld de,14
04956F DD 21 70 00 0349*  	ld ix,112
       00          
049574 CD DE BD 04 0350*  	call vdu_load_img
049578             0351*  ; Missing character 64
049578             0352*  
049578 21 32 9A 04 0353*  	ld hl,Frc065
04957C 11 8F C8 04 0354*  	ld de,filedata
049580 01 00 00 01 0355*  	ld bc,65536
049584 3E 01       0356*  	ld a,mos_load
049586 5B CF       0357*  	RST.LIL 08h
049588 21 41 10 00 0358*  	ld hl,BUF_4161
04958C 01 07 00 00 0359*  	ld bc,7
049590 11 0E 00 00 0360*  	ld de,14
049594 DD 21 62 00 0361*  	ld ix,98
       00          
049599 CD DE BD 04 0362*  	call vdu_load_img
04959D             0363*  
04959D 21 45 9A 04 0364*  	ld hl,Frc066
0495A1 11 8F C8 04 0365*  	ld de,filedata
0495A5 01 00 00 01 0366*  	ld bc,65536
0495A9 3E 01       0367*  	ld a,mos_load
0495AB 5B CF       0368*  	RST.LIL 08h
0495AD 21 42 10 00 0369*  	ld hl,BUF_4162
0495B1 01 08 00 00 0370*  	ld bc,8
0495B5 11 0E 00 00 0371*  	ld de,14
0495B9 DD 21 70 00 0372*  	ld ix,112
       00          
0495BE CD DE BD 04 0373*  	call vdu_load_img
0495C2             0374*  
0495C2 21 58 9A 04 0375*  	ld hl,Frc067
0495C6 11 8F C8 04 0376*  	ld de,filedata
0495CA 01 00 00 01 0377*  	ld bc,65536
0495CE 3E 01       0378*  	ld a,mos_load
0495D0 5B CF       0379*  	RST.LIL 08h
0495D2 21 43 10 00 0380*  	ld hl,BUF_4163
0495D6 01 07 00 00 0381*  	ld bc,7
0495DA 11 0E 00 00 0382*  	ld de,14
0495DE DD 21 62 00 0383*  	ld ix,98
       00          
0495E3 CD DE BD 04 0384*  	call vdu_load_img
0495E7             0385*  
0495E7 21 6B 9A 04 0386*  	ld hl,Frc068
0495EB 11 8F C8 04 0387*  	ld de,filedata
0495EF 01 00 00 01 0388*  	ld bc,65536
0495F3 3E 01       0389*  	ld a,mos_load
0495F5 5B CF       0390*  	RST.LIL 08h
0495F7 21 44 10 00 0391*  	ld hl,BUF_4164
0495FB 01 08 00 00 0392*  	ld bc,8
0495FF 11 0E 00 00 0393*  	ld de,14
049603 DD 21 70 00 0394*  	ld ix,112
       00          
049608 CD DE BD 04 0395*  	call vdu_load_img
04960C             0396*  
04960C 21 7E 9A 04 0397*  	ld hl,Frc069
049610 11 8F C8 04 0398*  	ld de,filedata
049614 01 00 00 01 0399*  	ld bc,65536
049618 3E 01       0400*  	ld a,mos_load
04961A 5B CF       0401*  	RST.LIL 08h
04961C 21 45 10 00 0402*  	ld hl,BUF_4165
049620 01 08 00 00 0403*  	ld bc,8
049624 11 0E 00 00 0404*  	ld de,14
049628 DD 21 70 00 0405*  	ld ix,112
       00          
04962D CD DE BD 04 0406*  	call vdu_load_img
049631             0407*  
049631 21 91 9A 04 0408*  	ld hl,Frc070
049635 11 8F C8 04 0409*  	ld de,filedata
049639 01 00 00 01 0410*  	ld bc,65536
04963D 3E 01       0411*  	ld a,mos_load
04963F 5B CF       0412*  	RST.LIL 08h
049641 21 46 10 00 0413*  	ld hl,BUF_4166
049645 01 07 00 00 0414*  	ld bc,7
049649 11 0E 00 00 0415*  	ld de,14
04964D DD 21 62 00 0416*  	ld ix,98
       00          
049652 CD DE BD 04 0417*  	call vdu_load_img
049656             0418*  
049656 21 A4 9A 04 0419*  	ld hl,Frc071
04965A 11 8F C8 04 0420*  	ld de,filedata
04965E 01 00 00 01 0421*  	ld bc,65536
049662 3E 01       0422*  	ld a,mos_load
049664 5B CF       0423*  	RST.LIL 08h
049666 21 47 10 00 0424*  	ld hl,BUF_4167
04966A 01 08 00 00 0425*  	ld bc,8
04966E 11 0E 00 00 0426*  	ld de,14
049672 DD 21 70 00 0427*  	ld ix,112
       00          
049677 CD DE BD 04 0428*  	call vdu_load_img
04967B             0429*  
04967B 21 B7 9A 04 0430*  	ld hl,Frc072
04967F 11 8F C8 04 0431*  	ld de,filedata
049683 01 00 00 01 0432*  	ld bc,65536
049687 3E 01       0433*  	ld a,mos_load
049689 5B CF       0434*  	RST.LIL 08h
04968B 21 48 10 00 0435*  	ld hl,BUF_4168
04968F 01 07 00 00 0436*  	ld bc,7
049693 11 0E 00 00 0437*  	ld de,14
049697 DD 21 62 00 0438*  	ld ix,98
       00          
04969C CD DE BD 04 0439*  	call vdu_load_img
0496A0             0440*  
0496A0 21 CA 9A 04 0441*  	ld hl,Frc073
0496A4 11 8F C8 04 0442*  	ld de,filedata
0496A8 01 00 00 01 0443*  	ld bc,65536
0496AC 3E 01       0444*  	ld a,mos_load
0496AE 5B CF       0445*  	RST.LIL 08h
0496B0 21 49 10 00 0446*  	ld hl,BUF_4169
0496B4 01 07 00 00 0447*  	ld bc,7
0496B8 11 0E 00 00 0448*  	ld de,14
0496BC DD 21 62 00 0449*  	ld ix,98
       00          
0496C1 CD DE BD 04 0450*  	call vdu_load_img
0496C5             0451*  
0496C5 21 DD 9A 04 0452*  	ld hl,Frc074
0496C9 11 8F C8 04 0453*  	ld de,filedata
0496CD 01 00 00 01 0454*  	ld bc,65536
0496D1 3E 01       0455*  	ld a,mos_load
0496D3 5B CF       0456*  	RST.LIL 08h
0496D5 21 4A 10 00 0457*  	ld hl,BUF_4170
0496D9 01 08 00 00 0458*  	ld bc,8
0496DD 11 0E 00 00 0459*  	ld de,14
0496E1 DD 21 70 00 0460*  	ld ix,112
       00          
0496E6 CD DE BD 04 0461*  	call vdu_load_img
0496EA             0462*  
0496EA 21 F0 9A 04 0463*  	ld hl,Frc075
0496EE 11 8F C8 04 0464*  	ld de,filedata
0496F2 01 00 00 01 0465*  	ld bc,65536
0496F6 3E 01       0466*  	ld a,mos_load
0496F8 5B CF       0467*  	RST.LIL 08h
0496FA 21 4B 10 00 0468*  	ld hl,BUF_4171
0496FE 01 07 00 00 0469*  	ld bc,7
049702 11 0E 00 00 0470*  	ld de,14
049706 DD 21 62 00 0471*  	ld ix,98
       00          
04970B CD DE BD 04 0472*  	call vdu_load_img
04970F             0473*  
04970F 21 03 9B 04 0474*  	ld hl,Frc076
049713 11 8F C8 04 0475*  	ld de,filedata
049717 01 00 00 01 0476*  	ld bc,65536
04971B 3E 01       0477*  	ld a,mos_load
04971D 5B CF       0478*  	RST.LIL 08h
04971F 21 4C 10 00 0479*  	ld hl,BUF_4172
049723 01 08 00 00 0480*  	ld bc,8
049727 11 0E 00 00 0481*  	ld de,14
04972B DD 21 70 00 0482*  	ld ix,112
       00          
049730 CD DE BD 04 0483*  	call vdu_load_img
049734             0484*  
049734 21 16 9B 04 0485*  	ld hl,Frc077
049738 11 8F C8 04 0486*  	ld de,filedata
04973C 01 00 00 01 0487*  	ld bc,65536
049740 3E 01       0488*  	ld a,mos_load
049742 5B CF       0489*  	RST.LIL 08h
049744 21 4D 10 00 0490*  	ld hl,BUF_4173
049748 01 09 00 00 0491*  	ld bc,9
04974C 11 0E 00 00 0492*  	ld de,14
049750 DD 21 7E 00 0493*  	ld ix,126
       00          
049755 CD DE BD 04 0494*  	call vdu_load_img
049759             0495*  
049759 21 29 9B 04 0496*  	ld hl,Frc078
04975D 11 8F C8 04 0497*  	ld de,filedata
049761 01 00 00 01 0498*  	ld bc,65536
049765 3E 01       0499*  	ld a,mos_load
049767 5B CF       0500*  	RST.LIL 08h
049769 21 4E 10 00 0501*  	ld hl,BUF_4174
04976D 01 07 00 00 0502*  	ld bc,7
049771 11 0E 00 00 0503*  	ld de,14
049775 DD 21 62 00 0504*  	ld ix,98
       00          
04977A CD DE BD 04 0505*  	call vdu_load_img
04977E             0506*  
04977E 21 3C 9B 04 0507*  	ld hl,Frc079
049782 11 8F C8 04 0508*  	ld de,filedata
049786 01 00 00 01 0509*  	ld bc,65536
04978A 3E 01       0510*  	ld a,mos_load
04978C 5B CF       0511*  	RST.LIL 08h
04978E 21 4F 10 00 0512*  	ld hl,BUF_4175
049792 01 08 00 00 0513*  	ld bc,8
049796 11 0E 00 00 0514*  	ld de,14
04979A DD 21 70 00 0515*  	ld ix,112
       00          
04979F CD DE BD 04 0516*  	call vdu_load_img
0497A3             0517*  
0497A3 21 4F 9B 04 0518*  	ld hl,Frc080
0497A7 11 8F C8 04 0519*  	ld de,filedata
0497AB 01 00 00 01 0520*  	ld bc,65536
0497AF 3E 01       0521*  	ld a,mos_load
0497B1 5B CF       0522*  	RST.LIL 08h
0497B3 21 50 10 00 0523*  	ld hl,BUF_4176
0497B7 01 07 00 00 0524*  	ld bc,7
0497BB 11 0E 00 00 0525*  	ld de,14
0497BF DD 21 62 00 0526*  	ld ix,98
       00          
0497C4 CD DE BD 04 0527*  	call vdu_load_img
0497C8             0528*  
0497C8 21 62 9B 04 0529*  	ld hl,Frc081
0497CC 11 8F C8 04 0530*  	ld de,filedata
0497D0 01 00 00 01 0531*  	ld bc,65536
0497D4 3E 01       0532*  	ld a,mos_load
0497D6 5B CF       0533*  	RST.LIL 08h
0497D8 21 51 10 00 0534*  	ld hl,BUF_4177
0497DC 01 08 00 00 0535*  	ld bc,8
0497E0 11 0F 00 00 0536*  	ld de,15
0497E4 DD 21 78 00 0537*  	ld ix,120
       00          
0497E9 CD DE BD 04 0538*  	call vdu_load_img
0497ED             0539*  
0497ED 21 75 9B 04 0540*  	ld hl,Frc082
0497F1 11 8F C8 04 0541*  	ld de,filedata
0497F5 01 00 00 01 0542*  	ld bc,65536
0497F9 3E 01       0543*  	ld a,mos_load
0497FB 5B CF       0544*  	RST.LIL 08h
0497FD 21 52 10 00 0545*  	ld hl,BUF_4178
049801 01 08 00 00 0546*  	ld bc,8
049805 11 0E 00 00 0547*  	ld de,14
049809 DD 21 70 00 0548*  	ld ix,112
       00          
04980E CD DE BD 04 0549*  	call vdu_load_img
049812             0550*  
049812 21 88 9B 04 0551*  	ld hl,Frc083
049816 11 8F C8 04 0552*  	ld de,filedata
04981A 01 00 00 01 0553*  	ld bc,65536
04981E 3E 01       0554*  	ld a,mos_load
049820 5B CF       0555*  	RST.LIL 08h
049822 21 53 10 00 0556*  	ld hl,BUF_4179
049826 01 08 00 00 0557*  	ld bc,8
04982A 11 0E 00 00 0558*  	ld de,14
04982E DD 21 70 00 0559*  	ld ix,112
       00          
049833 CD DE BD 04 0560*  	call vdu_load_img
049837             0561*  
049837 21 9B 9B 04 0562*  	ld hl,Frc084
04983B 11 8F C8 04 0563*  	ld de,filedata
04983F 01 00 00 01 0564*  	ld bc,65536
049843 3E 01       0565*  	ld a,mos_load
049845 5B CF       0566*  	RST.LIL 08h
049847 21 54 10 00 0567*  	ld hl,BUF_4180
04984B 01 07 00 00 0568*  	ld bc,7
04984F 11 0E 00 00 0569*  	ld de,14
049853 DD 21 62 00 0570*  	ld ix,98
       00          
049858 CD DE BD 04 0571*  	call vdu_load_img
04985C             0572*  
04985C 21 AE 9B 04 0573*  	ld hl,Frc085
049860 11 8F C8 04 0574*  	ld de,filedata
049864 01 00 00 01 0575*  	ld bc,65536
049868 3E 01       0576*  	ld a,mos_load
04986A 5B CF       0577*  	RST.LIL 08h
04986C 21 55 10 00 0578*  	ld hl,BUF_4181
049870 01 08 00 00 0579*  	ld bc,8
049874 11 0E 00 00 0580*  	ld de,14
049878 DD 21 70 00 0581*  	ld ix,112
       00          
04987D CD DE BD 04 0582*  	call vdu_load_img
049881             0583*  
049881 21 C1 9B 04 0584*  	ld hl,Frc086
049885 11 8F C8 04 0585*  	ld de,filedata
049889 01 00 00 01 0586*  	ld bc,65536
04988D 3E 01       0587*  	ld a,mos_load
04988F 5B CF       0588*  	RST.LIL 08h
049891 21 56 10 00 0589*  	ld hl,BUF_4182
049895 01 07 00 00 0590*  	ld bc,7
049899 11 0E 00 00 0591*  	ld de,14
04989D DD 21 62 00 0592*  	ld ix,98
       00          
0498A2 CD DE BD 04 0593*  	call vdu_load_img
0498A6             0594*  
0498A6 21 D4 9B 04 0595*  	ld hl,Frc087
0498AA 11 8F C8 04 0596*  	ld de,filedata
0498AE 01 00 00 01 0597*  	ld bc,65536
0498B2 3E 01       0598*  	ld a,mos_load
0498B4 5B CF       0599*  	RST.LIL 08h
0498B6 21 57 10 00 0600*  	ld hl,BUF_4183
0498BA 01 0B 00 00 0601*  	ld bc,11
0498BE 11 0E 00 00 0602*  	ld de,14
0498C2 DD 21 9A 00 0603*  	ld ix,154
       00          
0498C7 CD DE BD 04 0604*  	call vdu_load_img
0498CB             0605*  
0498CB 21 E7 9B 04 0606*  	ld hl,Frc088
0498CF 11 8F C8 04 0607*  	ld de,filedata
0498D3 01 00 00 01 0608*  	ld bc,65536
0498D7 3E 01       0609*  	ld a,mos_load
0498D9 5B CF       0610*  	RST.LIL 08h
0498DB 21 58 10 00 0611*  	ld hl,BUF_4184
0498DF 01 07 00 00 0612*  	ld bc,7
0498E3 11 0E 00 00 0613*  	ld de,14
0498E7 DD 21 62 00 0614*  	ld ix,98
       00          
0498EC CD DE BD 04 0615*  	call vdu_load_img
0498F0             0616*  
0498F0 21 FA 9B 04 0617*  	ld hl,Frc089
0498F4 11 8F C8 04 0618*  	ld de,filedata
0498F8 01 00 00 01 0619*  	ld bc,65536
0498FC 3E 01       0620*  	ld a,mos_load
0498FE 5B CF       0621*  	RST.LIL 08h
049900 21 59 10 00 0622*  	ld hl,BUF_4185
049904 01 08 00 00 0623*  	ld bc,8
049908 11 0E 00 00 0624*  	ld de,14
04990C DD 21 70 00 0625*  	ld ix,112
       00          
049911 CD DE BD 04 0626*  	call vdu_load_img
049915             0627*  
049915 21 0D 9C 04 0628*  	ld hl,Frc090
049919 11 8F C8 04 0629*  	ld de,filedata
04991D 01 00 00 01 0630*  	ld bc,65536
049921 3E 01       0631*  	ld a,mos_load
049923 5B CF       0632*  	RST.LIL 08h
049925 21 5A 10 00 0633*  	ld hl,BUF_4186
049929 01 07 00 00 0634*  	ld bc,7
04992D 11 0E 00 00 0635*  	ld de,14
049931 DD 21 62 00 0636*  	ld ix,98
       00          
049936 CD DE BD 04 0637*  	call vdu_load_img
04993A             0638*  ; Missing character 91
04993A             0639*  ; Missing character 92
04993A             0640*  ; Missing character 93
04993A             0641*  ; Missing character 94
04993A             0642*  ; Missing character 95
04993A             0643*  ; Missing character 96
04993A             0644*  ; Missing character 97
04993A             0645*  ; Missing character 98
04993A             0646*  ; Missing character 99
04993A             0647*  ; Missing character 100
04993A             0648*  ; Missing character 101
04993A             0649*  ; Missing character 102
04993A             0650*  ; Missing character 103
04993A             0651*  ; Missing character 104
04993A             0652*  ; Missing character 105
04993A             0653*  ; Missing character 106
04993A             0654*  ; Missing character 107
04993A             0655*  ; Missing character 108
04993A             0656*  ; Missing character 109
04993A             0657*  ; Missing character 110
04993A             0658*  ; Missing character 111
04993A             0659*  ; Missing character 112
04993A             0660*  ; Missing character 113
04993A             0661*  ; Missing character 114
04993A             0662*  ; Missing character 115
04993A             0663*  ; Missing character 116
04993A             0664*  ; Missing character 117
04993A             0665*  ; Missing character 118
04993A             0666*  ; Missing character 119
04993A             0667*  ; Missing character 120
04993A             0668*  ; Missing character 121
04993A             0669*  ; Missing character 122
04993A             0670*  
04993A C9          0671*  	ret
04993B             0672*  
04993B 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
04994E 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
049961 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
049974 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
049987 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
04999A 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
0499AD 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
0499C0 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
0499D3 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
0499E6 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
0499F9 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
049A0C 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
049A1F 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
049A32 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
049A45 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
049A58 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
049A6B 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
049A7E 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
049A91 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
049AA4 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
049AB7 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
049ACA 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
049ADD 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
049AF0 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
049B03 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
049B16 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
049B29 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
049B3C 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
049B4F 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
049B62 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
049B75 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
049B88 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
049B9B 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
049BAE 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
049BC1 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
049BD4 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
049BE7 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
049BFA 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
049C0D 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
049C20             0020   	include "src/asm/ui.asm"
049C20             0001*  ; ui routines will go here
049C20             0021   	include "src/asm/ui_img.asm"
049C20             0001*  ; Bitmap indices:
049C20             0002*  BUF_UI_BJ_025: equ 0x2000
049C20             0003*  BUF_UI_BJ_050: equ 0x2001
049C20             0004*  BUF_UI_BJ_075: equ 0x2002
049C20             0005*  BUF_UI_BJ_100: equ 0x2003
049C20             0006*  BUF_UI_BJ_120_120: equ 0x2004
049C20             0007*  BUF_UI_LOWER_PANEL: equ 0x2005
049C20             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2006
049C20             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2007
049C20             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2008
049C20             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2009
049C20             0012*  BUF_UI_SPLASH: equ 0x200A
049C20             0013*  
049C20             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
049C20             0015*  load_ui_images:
049C20             0016*  
049C20 21 E4 9D 04 0017*  	ld hl,F_UI_bj_025
049C24 11 8F C8 04 0018*  	ld de,filedata
049C28 01 00 00 01 0019*  	ld bc,65536
049C2C 3E 01       0020*  	ld a,mos_load
049C2E 5B CF       0021*  	RST.LIL 08h
049C30 21 00 20 00 0022*  	ld hl,BUF_UI_BJ_025
049C34 01 20 00 00 0023*  	ld bc,32
049C38 11 20 00 00 0024*  	ld de,32
049C3C DD 21 00 04 0025*  	ld ix,1024
       00          
049C41 CD DE BD 04 0026*  	call vdu_load_img
049C45 3E 2E       0027*  	LD A, '.'
049C47 5B D7       0028*  	RST.LIL 10h
049C49             0029*  
049C49 21 F4 9D 04 0030*  	ld hl,F_UI_bj_050
049C4D 11 8F C8 04 0031*  	ld de,filedata
049C51 01 00 00 01 0032*  	ld bc,65536
049C55 3E 01       0033*  	ld a,mos_load
049C57 5B CF       0034*  	RST.LIL 08h
049C59 21 01 20 00 0035*  	ld hl,BUF_UI_BJ_050
049C5D 01 20 00 00 0036*  	ld bc,32
049C61 11 20 00 00 0037*  	ld de,32
049C65 DD 21 00 04 0038*  	ld ix,1024
       00          
049C6A CD DE BD 04 0039*  	call vdu_load_img
049C6E 3E 2E       0040*  	LD A, '.'
049C70 5B D7       0041*  	RST.LIL 10h
049C72             0042*  
049C72 21 04 9E 04 0043*  	ld hl,F_UI_bj_075
049C76 11 8F C8 04 0044*  	ld de,filedata
049C7A 01 00 00 01 0045*  	ld bc,65536
049C7E 3E 01       0046*  	ld a,mos_load
049C80 5B CF       0047*  	RST.LIL 08h
049C82 21 02 20 00 0048*  	ld hl,BUF_UI_BJ_075
049C86 01 20 00 00 0049*  	ld bc,32
049C8A 11 20 00 00 0050*  	ld de,32
049C8E DD 21 00 04 0051*  	ld ix,1024
       00          
049C93 CD DE BD 04 0052*  	call vdu_load_img
049C97 3E 2E       0053*  	LD A, '.'
049C99 5B D7       0054*  	RST.LIL 10h
049C9B             0055*  
049C9B 21 14 9E 04 0056*  	ld hl,F_UI_bj_100
049C9F 11 8F C8 04 0057*  	ld de,filedata
049CA3 01 00 00 01 0058*  	ld bc,65536
049CA7 3E 01       0059*  	ld a,mos_load
049CA9 5B CF       0060*  	RST.LIL 08h
049CAB 21 03 20 00 0061*  	ld hl,BUF_UI_BJ_100
049CAF 01 20 00 00 0062*  	ld bc,32
049CB3 11 20 00 00 0063*  	ld de,32
049CB7 DD 21 00 04 0064*  	ld ix,1024
       00          
049CBC CD DE BD 04 0065*  	call vdu_load_img
049CC0 3E 2E       0066*  	LD A, '.'
049CC2 5B D7       0067*  	RST.LIL 10h
049CC4             0068*  
049CC4 21 24 9E 04 0069*  	ld hl,F_UI_bj_120_120
049CC8 11 8F C8 04 0070*  	ld de,filedata
049CCC 01 00 00 01 0071*  	ld bc,65536
049CD0 3E 01       0072*  	ld a,mos_load
049CD2 5B CF       0073*  	RST.LIL 08h
049CD4 21 04 20 00 0074*  	ld hl,BUF_UI_BJ_120_120
049CD8 01 78 00 00 0075*  	ld bc,120
049CDC 11 78 00 00 0076*  	ld de,120
049CE0 DD 21 40 38 0077*  	ld ix,14400
       00          
049CE5 CD DE BD 04 0078*  	call vdu_load_img
049CE9 3E 2E       0079*  	LD A, '.'
049CEB 5B D7       0080*  	RST.LIL 10h
049CED             0081*  
049CED 21 38 9E 04 0082*  	ld hl,F_UI_lower_panel
049CF1 11 8F C8 04 0083*  	ld de,filedata
049CF5 01 00 00 01 0084*  	ld bc,65536
049CF9 3E 01       0085*  	ld a,mos_load
049CFB 5B CF       0086*  	RST.LIL 08h
049CFD 21 05 20 00 0087*  	ld hl,BUF_UI_LOWER_PANEL
049D01 01 40 01 00 0088*  	ld bc,320
049D05 11 50 00 00 0089*  	ld de,80
049D09 DD 21 00 64 0090*  	ld ix,25600
       00          
049D0E CD DE BD 04 0091*  	call vdu_load_img
049D12 3E 2E       0092*  	LD A, '.'
049D14 5B D7       0093*  	RST.LIL 10h
049D16             0094*  
049D16 21 4D 9E 04 0095*  	ld hl,F_UI_lower_panel_gatling
049D1A 11 8F C8 04 0096*  	ld de,filedata
049D1E 01 00 00 01 0097*  	ld bc,65536
049D22 3E 01       0098*  	ld a,mos_load
049D24 5B CF       0099*  	RST.LIL 08h
049D26 21 06 20 00 0100*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
049D2A 01 28 00 00 0101*  	ld bc,40
049D2E 11 14 00 00 0102*  	ld de,20
049D32 DD 21 20 03 0103*  	ld ix,800
       00          
049D37 CD DE BD 04 0104*  	call vdu_load_img
049D3B 3E 2E       0105*  	LD A, '.'
049D3D 5B D7       0106*  	RST.LIL 10h
049D3F             0107*  
049D3F 21 6A 9E 04 0108*  	ld hl,F_UI_lower_panel_knife
049D43 11 8F C8 04 0109*  	ld de,filedata
049D47 01 00 00 01 0110*  	ld bc,65536
049D4B 3E 01       0111*  	ld a,mos_load
049D4D 5B CF       0112*  	RST.LIL 08h
049D4F 21 07 20 00 0113*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
049D53 01 28 00 00 0114*  	ld bc,40
049D57 11 14 00 00 0115*  	ld de,20
049D5B DD 21 20 03 0116*  	ld ix,800
       00          
049D60 CD DE BD 04 0117*  	call vdu_load_img
049D64 3E 2E       0118*  	LD A, '.'
049D66 5B D7       0119*  	RST.LIL 10h
049D68             0120*  
049D68 21 85 9E 04 0121*  	ld hl,F_UI_lower_panel_machine_gun
049D6C 11 8F C8 04 0122*  	ld de,filedata
049D70 01 00 00 01 0123*  	ld bc,65536
049D74 3E 01       0124*  	ld a,mos_load
049D76 5B CF       0125*  	RST.LIL 08h
049D78 21 08 20 00 0126*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
049D7C 01 28 00 00 0127*  	ld bc,40
049D80 11 14 00 00 0128*  	ld de,20
049D84 DD 21 20 03 0129*  	ld ix,800
       00          
049D89 CD DE BD 04 0130*  	call vdu_load_img
049D8D 3E 2E       0131*  	LD A, '.'
049D8F 5B D7       0132*  	RST.LIL 10h
049D91             0133*  
049D91 21 A6 9E 04 0134*  	ld hl,F_UI_lower_panel_pistol
049D95 11 8F C8 04 0135*  	ld de,filedata
049D99 01 00 00 01 0136*  	ld bc,65536
049D9D 3E 01       0137*  	ld a,mos_load
049D9F 5B CF       0138*  	RST.LIL 08h
049DA1 21 09 20 00 0139*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
049DA5 01 28 00 00 0140*  	ld bc,40
049DA9 11 14 00 00 0141*  	ld de,20
049DAD DD 21 20 03 0142*  	ld ix,800
       00          
049DB2 CD DE BD 04 0143*  	call vdu_load_img
049DB6 3E 2E       0144*  	LD A, '.'
049DB8 5B D7       0145*  	RST.LIL 10h
049DBA             0146*  
049DBA 21 C2 9E 04 0147*  	ld hl,F_UI_splash
049DBE 11 8F C8 04 0148*  	ld de,filedata
049DC2 01 00 00 01 0149*  	ld bc,65536
049DC6 3E 01       0150*  	ld a,mos_load
049DC8 5B CF       0151*  	RST.LIL 08h
049DCA 21 0A 20 00 0152*  	ld hl,BUF_UI_SPLASH
049DCE 01 40 01 00 0153*  	ld bc,320
049DD2 11 A0 00 00 0154*  	ld de,160
049DD6 DD 21 00 C8 0155*  	ld ix,51200
       00          
049DDB CD DE BD 04 0156*  	call vdu_load_img
049DDF 3E 2E       0157*  	LD A, '.'
049DE1 5B D7       0158*  	RST.LIL 10h
049DE3             0159*  
049DE3 C9          0160*  	ret
049DE4             0161*  
049DE4 75 69 2F 62 0162*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
049DF4 75 69 2F 62 0163*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
049E04 75 69 2F 62 0164*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
049E14 75 69 2F 62 0165*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
049E24 75 69 2F 62 0166*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
049E38 75 69 2F 6C 0167*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
049E4D 75 69 2F 6C 0168*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
049E6A 75 69 2F 6C 0169*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
049E85 75 69 2F 6C 0170*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
049EA6 75 69 2F 6C 0171*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
049EC2 75 69 2F 73 0172*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
049ED2             0022   	include "src/asm/ui_img_bj.asm"
049ED2             0001*  ; Bitmap indices:
049ED2             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
049ED2             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
049ED2             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
049ED2             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
049ED2             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
049ED2             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
049ED2             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
049ED2             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
049ED2             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
049ED2             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
049ED2             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
049ED2             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
049ED2             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
049ED2             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
049ED2             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
049ED2             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
049ED2             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
049ED2             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
049ED2             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
049ED2             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
049ED2             0022*  
049ED2             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
049ED2             0024*  load_ui_images_bj:
049ED2             0025*  
049ED2 21 07 A2 04 0026*  	ld hl,F_UI_bj_gatling_00
049ED6 11 8F C8 04 0027*  	ld de,filedata
049EDA 01 00 00 01 0028*  	ld bc,65536
049EDE 3E 01       0029*  	ld a,mos_load
049EE0 5B CF       0030*  	RST.LIL 08h
049EE2 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
049EE6 01 40 00 00 0032*  	ld bc,64
049EEA 11 40 00 00 0033*  	ld de,64
049EEE DD 21 00 10 0034*  	ld ix,4096
       00          
049EF3 CD DE BD 04 0035*  	call vdu_load_img
049EF7 3E 2E       0036*  	LD A, '.'
049EF9 5B D7       0037*  	RST.LIL 10h
049EFB             0038*  
049EFB 21 21 A2 04 0039*  	ld hl,F_UI_bj_gatling_01
049EFF 11 8F C8 04 0040*  	ld de,filedata
049F03 01 00 00 01 0041*  	ld bc,65536
049F07 3E 01       0042*  	ld a,mos_load
049F09 5B CF       0043*  	RST.LIL 08h
049F0B 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
049F0F 01 40 00 00 0045*  	ld bc,64
049F13 11 40 00 00 0046*  	ld de,64
049F17 DD 21 00 10 0047*  	ld ix,4096
       00          
049F1C CD DE BD 04 0048*  	call vdu_load_img
049F20 3E 2E       0049*  	LD A, '.'
049F22 5B D7       0050*  	RST.LIL 10h
049F24             0051*  
049F24 21 3B A2 04 0052*  	ld hl,F_UI_bj_gatling_02
049F28 11 8F C8 04 0053*  	ld de,filedata
049F2C 01 00 00 01 0054*  	ld bc,65536
049F30 3E 01       0055*  	ld a,mos_load
049F32 5B CF       0056*  	RST.LIL 08h
049F34 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
049F38 01 40 00 00 0058*  	ld bc,64
049F3C 11 40 00 00 0059*  	ld de,64
049F40 DD 21 00 10 0060*  	ld ix,4096
       00          
049F45 CD DE BD 04 0061*  	call vdu_load_img
049F49 3E 2E       0062*  	LD A, '.'
049F4B 5B D7       0063*  	RST.LIL 10h
049F4D             0064*  
049F4D 21 55 A2 04 0065*  	ld hl,F_UI_bj_gatling_03
049F51 11 8F C8 04 0066*  	ld de,filedata
049F55 01 00 00 01 0067*  	ld bc,65536
049F59 3E 01       0068*  	ld a,mos_load
049F5B 5B CF       0069*  	RST.LIL 08h
049F5D 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
049F61 01 40 00 00 0071*  	ld bc,64
049F65 11 40 00 00 0072*  	ld de,64
049F69 DD 21 00 10 0073*  	ld ix,4096
       00          
049F6E CD DE BD 04 0074*  	call vdu_load_img
049F72 3E 2E       0075*  	LD A, '.'
049F74 5B D7       0076*  	RST.LIL 10h
049F76             0077*  
049F76 21 6F A2 04 0078*  	ld hl,F_UI_bj_gatling_04
049F7A 11 8F C8 04 0079*  	ld de,filedata
049F7E 01 00 00 01 0080*  	ld bc,65536
049F82 3E 01       0081*  	ld a,mos_load
049F84 5B CF       0082*  	RST.LIL 08h
049F86 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
049F8A 01 40 00 00 0084*  	ld bc,64
049F8E 11 40 00 00 0085*  	ld de,64
049F92 DD 21 00 10 0086*  	ld ix,4096
       00          
049F97 CD DE BD 04 0087*  	call vdu_load_img
049F9B 3E 2E       0088*  	LD A, '.'
049F9D 5B D7       0089*  	RST.LIL 10h
049F9F             0090*  
049F9F 21 89 A2 04 0091*  	ld hl,F_UI_bj_knife_00
049FA3 11 8F C8 04 0092*  	ld de,filedata
049FA7 01 00 00 01 0093*  	ld bc,65536
049FAB 3E 01       0094*  	ld a,mos_load
049FAD 5B CF       0095*  	RST.LIL 08h
049FAF 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
049FB3 01 40 00 00 0097*  	ld bc,64
049FB7 11 40 00 00 0098*  	ld de,64
049FBB DD 21 00 10 0099*  	ld ix,4096
       00          
049FC0 CD DE BD 04 0100*  	call vdu_load_img
049FC4 3E 2E       0101*  	LD A, '.'
049FC6 5B D7       0102*  	RST.LIL 10h
049FC8             0103*  
049FC8 21 A1 A2 04 0104*  	ld hl,F_UI_bj_knife_01
049FCC 11 8F C8 04 0105*  	ld de,filedata
049FD0 01 00 00 01 0106*  	ld bc,65536
049FD4 3E 01       0107*  	ld a,mos_load
049FD6 5B CF       0108*  	RST.LIL 08h
049FD8 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
049FDC 01 40 00 00 0110*  	ld bc,64
049FE0 11 40 00 00 0111*  	ld de,64
049FE4 DD 21 00 10 0112*  	ld ix,4096
       00          
049FE9 CD DE BD 04 0113*  	call vdu_load_img
049FED 3E 2E       0114*  	LD A, '.'
049FEF 5B D7       0115*  	RST.LIL 10h
049FF1             0116*  
049FF1 21 B9 A2 04 0117*  	ld hl,F_UI_bj_knife_02
049FF5 11 8F C8 04 0118*  	ld de,filedata
049FF9 01 00 00 01 0119*  	ld bc,65536
049FFD 3E 01       0120*  	ld a,mos_load
049FFF 5B CF       0121*  	RST.LIL 08h
04A001 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
04A005 01 40 00 00 0123*  	ld bc,64
04A009 11 40 00 00 0124*  	ld de,64
04A00D DD 21 00 10 0125*  	ld ix,4096
       00          
04A012 CD DE BD 04 0126*  	call vdu_load_img
04A016 3E 2E       0127*  	LD A, '.'
04A018 5B D7       0128*  	RST.LIL 10h
04A01A             0129*  
04A01A 21 D1 A2 04 0130*  	ld hl,F_UI_bj_knife_03
04A01E 11 8F C8 04 0131*  	ld de,filedata
04A022 01 00 00 01 0132*  	ld bc,65536
04A026 3E 01       0133*  	ld a,mos_load
04A028 5B CF       0134*  	RST.LIL 08h
04A02A 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
04A02E 01 40 00 00 0136*  	ld bc,64
04A032 11 40 00 00 0137*  	ld de,64
04A036 DD 21 00 10 0138*  	ld ix,4096
       00          
04A03B CD DE BD 04 0139*  	call vdu_load_img
04A03F 3E 2E       0140*  	LD A, '.'
04A041 5B D7       0141*  	RST.LIL 10h
04A043             0142*  
04A043 21 E9 A2 04 0143*  	ld hl,F_UI_bj_knife_04
04A047 11 8F C8 04 0144*  	ld de,filedata
04A04B 01 00 00 01 0145*  	ld bc,65536
04A04F 3E 01       0146*  	ld a,mos_load
04A051 5B CF       0147*  	RST.LIL 08h
04A053 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
04A057 01 40 00 00 0149*  	ld bc,64
04A05B 11 40 00 00 0150*  	ld de,64
04A05F DD 21 00 10 0151*  	ld ix,4096
       00          
04A064 CD DE BD 04 0152*  	call vdu_load_img
04A068 3E 2E       0153*  	LD A, '.'
04A06A 5B D7       0154*  	RST.LIL 10h
04A06C             0155*  
04A06C 21 01 A3 04 0156*  	ld hl,F_UI_bj_machine_gun_00
04A070 11 8F C8 04 0157*  	ld de,filedata
04A074 01 00 00 01 0158*  	ld bc,65536
04A078 3E 01       0159*  	ld a,mos_load
04A07A 5B CF       0160*  	RST.LIL 08h
04A07C 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
04A080 01 40 00 00 0162*  	ld bc,64
04A084 11 40 00 00 0163*  	ld de,64
04A088 DD 21 00 10 0164*  	ld ix,4096
       00          
04A08D CD DE BD 04 0165*  	call vdu_load_img
04A091 3E 2E       0166*  	LD A, '.'
04A093 5B D7       0167*  	RST.LIL 10h
04A095             0168*  
04A095 21 1F A3 04 0169*  	ld hl,F_UI_bj_machine_gun_01
04A099 11 8F C8 04 0170*  	ld de,filedata
04A09D 01 00 00 01 0171*  	ld bc,65536
04A0A1 3E 01       0172*  	ld a,mos_load
04A0A3 5B CF       0173*  	RST.LIL 08h
04A0A5 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
04A0A9 01 40 00 00 0175*  	ld bc,64
04A0AD 11 40 00 00 0176*  	ld de,64
04A0B1 DD 21 00 10 0177*  	ld ix,4096
       00          
04A0B6 CD DE BD 04 0178*  	call vdu_load_img
04A0BA 3E 2E       0179*  	LD A, '.'
04A0BC 5B D7       0180*  	RST.LIL 10h
04A0BE             0181*  
04A0BE 21 3D A3 04 0182*  	ld hl,F_UI_bj_machine_gun_02
04A0C2 11 8F C8 04 0183*  	ld de,filedata
04A0C6 01 00 00 01 0184*  	ld bc,65536
04A0CA 3E 01       0185*  	ld a,mos_load
04A0CC 5B CF       0186*  	RST.LIL 08h
04A0CE 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
04A0D2 01 40 00 00 0188*  	ld bc,64
04A0D6 11 40 00 00 0189*  	ld de,64
04A0DA DD 21 00 10 0190*  	ld ix,4096
       00          
04A0DF CD DE BD 04 0191*  	call vdu_load_img
04A0E3 3E 2E       0192*  	LD A, '.'
04A0E5 5B D7       0193*  	RST.LIL 10h
04A0E7             0194*  
04A0E7 21 5B A3 04 0195*  	ld hl,F_UI_bj_machine_gun_03
04A0EB 11 8F C8 04 0196*  	ld de,filedata
04A0EF 01 00 00 01 0197*  	ld bc,65536
04A0F3 3E 01       0198*  	ld a,mos_load
04A0F5 5B CF       0199*  	RST.LIL 08h
04A0F7 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
04A0FB 01 40 00 00 0201*  	ld bc,64
04A0FF 11 40 00 00 0202*  	ld de,64
04A103 DD 21 00 10 0203*  	ld ix,4096
       00          
04A108 CD DE BD 04 0204*  	call vdu_load_img
04A10C 3E 2E       0205*  	LD A, '.'
04A10E 5B D7       0206*  	RST.LIL 10h
04A110             0207*  
04A110 21 79 A3 04 0208*  	ld hl,F_UI_bj_machine_gun_04
04A114 11 8F C8 04 0209*  	ld de,filedata
04A118 01 00 00 01 0210*  	ld bc,65536
04A11C 3E 01       0211*  	ld a,mos_load
04A11E 5B CF       0212*  	RST.LIL 08h
04A120 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
04A124 01 40 00 00 0214*  	ld bc,64
04A128 11 40 00 00 0215*  	ld de,64
04A12C DD 21 00 10 0216*  	ld ix,4096
       00          
04A131 CD DE BD 04 0217*  	call vdu_load_img
04A135 3E 2E       0218*  	LD A, '.'
04A137 5B D7       0219*  	RST.LIL 10h
04A139             0220*  
04A139 21 97 A3 04 0221*  	ld hl,F_UI_bj_pistol_00
04A13D 11 8F C8 04 0222*  	ld de,filedata
04A141 01 00 00 01 0223*  	ld bc,65536
04A145 3E 01       0224*  	ld a,mos_load
04A147 5B CF       0225*  	RST.LIL 08h
04A149 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
04A14D 01 40 00 00 0227*  	ld bc,64
04A151 11 40 00 00 0228*  	ld de,64
04A155 DD 21 00 10 0229*  	ld ix,4096
       00          
04A15A CD DE BD 04 0230*  	call vdu_load_img
04A15E 3E 2E       0231*  	LD A, '.'
04A160 5B D7       0232*  	RST.LIL 10h
04A162             0233*  
04A162 21 B0 A3 04 0234*  	ld hl,F_UI_bj_pistol_01
04A166 11 8F C8 04 0235*  	ld de,filedata
04A16A 01 00 00 01 0236*  	ld bc,65536
04A16E 3E 01       0237*  	ld a,mos_load
04A170 5B CF       0238*  	RST.LIL 08h
04A172 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
04A176 01 40 00 00 0240*  	ld bc,64
04A17A 11 40 00 00 0241*  	ld de,64
04A17E DD 21 00 10 0242*  	ld ix,4096
       00          
04A183 CD DE BD 04 0243*  	call vdu_load_img
04A187 3E 2E       0244*  	LD A, '.'
04A189 5B D7       0245*  	RST.LIL 10h
04A18B             0246*  
04A18B 21 C9 A3 04 0247*  	ld hl,F_UI_bj_pistol_02
04A18F 11 8F C8 04 0248*  	ld de,filedata
04A193 01 00 00 01 0249*  	ld bc,65536
04A197 3E 01       0250*  	ld a,mos_load
04A199 5B CF       0251*  	RST.LIL 08h
04A19B 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
04A19F 01 40 00 00 0253*  	ld bc,64
04A1A3 11 40 00 00 0254*  	ld de,64
04A1A7 DD 21 00 10 0255*  	ld ix,4096
       00          
04A1AC CD DE BD 04 0256*  	call vdu_load_img
04A1B0 3E 2E       0257*  	LD A, '.'
04A1B2 5B D7       0258*  	RST.LIL 10h
04A1B4             0259*  
04A1B4 21 E2 A3 04 0260*  	ld hl,F_UI_bj_pistol_03
04A1B8 11 8F C8 04 0261*  	ld de,filedata
04A1BC 01 00 00 01 0262*  	ld bc,65536
04A1C0 3E 01       0263*  	ld a,mos_load
04A1C2 5B CF       0264*  	RST.LIL 08h
04A1C4 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
04A1C8 01 40 00 00 0266*  	ld bc,64
04A1CC 11 40 00 00 0267*  	ld de,64
04A1D0 DD 21 00 10 0268*  	ld ix,4096
       00          
04A1D5 CD DE BD 04 0269*  	call vdu_load_img
04A1D9 3E 2E       0270*  	LD A, '.'
04A1DB 5B D7       0271*  	RST.LIL 10h
04A1DD             0272*  
04A1DD 21 FB A3 04 0273*  	ld hl,F_UI_bj_pistol_04
04A1E1 11 8F C8 04 0274*  	ld de,filedata
04A1E5 01 00 00 01 0275*  	ld bc,65536
04A1E9 3E 01       0276*  	ld a,mos_load
04A1EB 5B CF       0277*  	RST.LIL 08h
04A1ED 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
04A1F1 01 40 00 00 0279*  	ld bc,64
04A1F5 11 40 00 00 0280*  	ld de,64
04A1F9 DD 21 00 10 0281*  	ld ix,4096
       00          
04A1FE CD DE BD 04 0282*  	call vdu_load_img
04A202 3E 2E       0283*  	LD A, '.'
04A204 5B D7       0284*  	RST.LIL 10h
04A206             0285*  
04A206 C9          0286*  	ret
04A207             0287*  
04A207 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04A221 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04A23B 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04A255 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04A26F 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04A289 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
04A2A1 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
04A2B9 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
04A2D1 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
04A2E9 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
04A301 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04A31F 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04A33D 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04A35B 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04A379 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04A397 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
04A3B0 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
04A3C9 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
04A3E2 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
04A3FB 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
04A414             0023   	include "src/asm/sprites.asm"
04A414             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
04A414             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
04A414             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
04A414             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
04A414             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
04A414             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
04A414             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
04A414             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
04A414             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
04A414             0010*  sprite_anim_timer:      equ 08 ; 1 byte  - when hits zero, draw next animation frame
04A414             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
04A414             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
04A414             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, binary
04A414             0014*  sprite_health_modifier: equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
04A414             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
04A414             0016*  sprite_record_size:     equ 16 ; 16 bytes per sprite record
04A414             0017*  
04A414             0018*  ; sprite_triggers_mask defs
04A414             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
04A414             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
04A414             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
04A414             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
04A414             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
04A414             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
04A414             0025*  
04A414             0026*  ; obj_ids for selected sprites
04A414             0027*  ; these are the sprite_obj values for the selected sprites
04A414             0028*  OBJ_ID_DEAD_GUARD:      equ 56
04A414             0029*  
04A414             0030*  ; ###### SPRITE TABLE VARIABLES ######
04A414             0031*  ; maximum number of sprites
04A414             0032*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
04A414             0033*  table_total_bytes:      equ table_max_records*sprite_record_size
04A414             0034*  
04A414             0035*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
04A414             0036*  sprite_table_base:       equ 0xB7FC00
04A414             0037*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
04A414             0038*  
04A414             0039*  ; pointer to top address of current record, initialized to sprite_table_base
04A414 00 FC B7    0040*  sprite_table_pointer: dl sprite_table_base
04A417             0041*  ; how many active sprites
04A417 00          0042*  table_active_sprites: db 0x00
04A418             0043*  ; flag indicating collision with screen edge
04A418             0044*  ; uses orientation codes to specify which edge(s)
04A418 00          0045*  sprite_screen_edge: db #00
04A419             0046*  ; next sprite id to use
04A419 00          0047*  sprite_next_id: db 0
04A41A             0048*  
04A41A             0049*  ; ######### COLLISION SPRITE PARAMETERS ##########
04A41A             0050*  ; integer coordinates are all that are needed for collision calculations
04A41A 00          0051*  collision_x: db 0x00
04A41B 00          0052*  collision_y: db 0x00
04A41C 00          0053*  collision_dim_x: db 0x00
04A41D 00          0054*  collision_dim_y: db 0x00
04A41E             0055*  
04A41E             0056*  ; scratch variables
04A41E 00          0057*  x: db 0x00 ; 8-bit signed integer
04A41F 00          0058*  y: db 0x00 ; 8-bit signed integer
04A420 00 00 00    0059*  x0: dl 0x000000 ; 16.8 signed fixed place
04A423 00 00 00    0060*  y0: dl 0x000000 ; 16.8 signed fixed place
04A426 00 00 00    0061*  incx1: dl 0x000000 ; 16.8 signed fixed place
04A429 00 00 00    0062*  incy1: dl 0x000000 ; 16.8 signed fixed place
04A42C 00 00 00    0063*  incx2: dl 0x000000 ; 16.8 signed fixed place
04A42F 00 00 00    0064*  incy2: dl 0x000000 ; 16.8 signed fixed place
04A432             0065*  
04A432             0066*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
04A432 00 00 00    0067*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
04A435 00 00 00    0068*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
04A438 00 00 00    0069*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04A43B             0070*  
04A43B             0071*  ; gets the next available sprite id
04A43B             0072*  ; inputs; none
04A43B             0073*  ; returns: if new sprite available, a = sprite id,
04A43B             0074*  ;      ix pointing to new sprite vars, carry set
04A43B             0075*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04A43B             0076*  ; destroys: a,b,hl,ix
04A43B             0077*  ; affects: bumps table_active_sprites by one
04A43B             0078*  table_get_next_id:
04A43B DD 21 00 FC 0079*      ld ix,sprite_table_base
       B7          
04A440 11 10 00 00 0080*      ld de,sprite_record_size
04A444 06 40       0081*      ld b,table_max_records
04A446             0082*  @loop:
04A446 DD 7E 01    0083*      ld a,(ix+sprite_obj)
04A449 A7          0084*      and a
04A44A 28 06       0085*      jr z,@found
04A44C DD 19       0086*      add ix,de
04A44E 10 F6       0087*      djnz @loop
04A450             0088*  @notfound:
04A450 AF          0089*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
04A451 C9          0090*      ret
04A452             0091*  @found:
04A452             0092*  ; bump number of active sprites
04A452 21 17 A4 04 0093*      ld hl,table_active_sprites
04A456 34          0094*      inc (hl)
04A457             0095*  ; return sprite id
04A457 3E 40       0096*      ld a,table_max_records
04A459 90          0097*      sub b
04A45A 32 19 A4 04 0098*      ld (sprite_next_id),a
04A45E 37          0099*      scf ; sets carry flag indicating we found a free sprite
04A45F C9          0100*      ret ; done
04A460             0101*  
04A460             0102*  ; deactivate the sprite with the given id
04A460             0103*  ; inputs: a = sprite id
04A460             0104*  ; outputs: nothing
04A460             0105*  ; destroys: a,ix,de
04A460             0106*  ; affects: decrements table_active_sprites by one
04A460             0107*  table_deactivate_sprite:
04A460 F5          0108*      push af ; save sprite id bc we need it later
04A461 CD A4 B0 04 0109*      call vdu_sprite_select
04A465 CD 28 B1 04 0110*      call vdu_sprite_hide
04A469 F1          0111*      pop af ; restore sprite id
04A46A 11 00 00 00 0112*      ld de,0 ; clear deu
04A46E 57          0113*      ld d,a
04A46F 1E 10       0114*      ld e,sprite_record_size
04A471 ED 5C       0115*      mlt de
04A473 DD 21 00 FC 0116*      ld ix,sprite_table_base
       B7          
04A478 DD 19       0117*      add ix,de
04A47A AF          0118*      xor a
04A47B DD 77 01    0119*      ld (ix+sprite_obj),a
04A47E DD 21 17 A4 0120*      ld ix,table_active_sprites
       04          
04A483 DD 35 00    0121*      dec (ix)
04A486 C9          0122*      ret
04A487             0123*  
04A487             0124*  ; sets iy and sprite_table_pointer to the sprite record with the given id
04A487             0125*  ; inputs: a = sprite id
04A487             0126*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
04A487             0127*  ; destroys: bc
04A487             0128*  sprite_set_pointer:
04A487 47          0129*      ld b,a
04A488 0E 10       0130*      ld c,sprite_record_size
04A48A ED 4C       0131*      mlt bc
04A48C FD 21 00 FC 0132*      ld iy,sprite_table_base
       B7          
04A491 FD 09       0133*      add iy,bc
04A493 FD 22 14 A4 0134*      ld (sprite_table_pointer),iy
       04          
04A498 C9          0135*      ret
04A499             0136*  
04A499             0137*  ; points ix at the map address of the sprite's current location
04A499             0138*  ; inputs: iy pointed at sprite record
04A499             0139*  ; outputs: ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A499             0140*  ; destroys: af,de,hl
04A499             0141*  sprite_get_cell:
04A499             0142*  ; point ix at sprite's current map location
04A499 11 00 00 00 0143*      ld de,0 ; make sure deu is zero
04A49D FD 5E 04    0144*      ld e,(iy+sprite_x)
04A4A0 FD 56 05    0145*      ld d,(iy+sprite_y)
04A4A3 CD F6 66 04 0146*      call get_cell_from_coords
04A4A7 C9          0147*      ret
04A4A8             0148*  
04A4A8             0149*  ; set the active sprite record to no sprite and remove it from the map cell it was in
04A4A8             0150*  ; inputs: iy pointed at sprite record to clear
04A4A8             0151*  sprite_kill:
04A4A8             0152*  ; point ix at sprite's current map location
04A4A8 CD 99 A4 04 0153*      call sprite_get_cell
04A4AC             0154*  ; set sprite table record to no sprite
04A4AC 21 FF FF FF 0155*      ld hl,0xFFFFFF ; a string of -1s
04A4B0 FD 2F 00    0156*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
04A4B3             0157*  
04A4B3             0158*  ; set map cell to no sprite and normal floor
04A4B3 21 01 FF 1D 0159*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
04A4B7 DD 2F 00    0160*      ld (ix),hl
04A4BA 3E FF       0161*      ld a,0xFF ; no sprite
04A4BC DD 77 03    0162*      ld (ix+map_sprite_id),a ; now sprite is truly dead
04A4BF C9          0163*      ret
04A4C0             0164*  
04A4C0 00          0165*  sprite_new_x: db 0x00
04A4C1 00          0166*  sprite_new_y: db 0x00
04A4C2 00          0167*                db 0x00 ; padding
04A4C3             0168*  
04A4C3             0169*  ; checks if the sprite can move to the new position
04A4C3             0170*  ; inputs: iy pointed at sprite record, d,e = new y,x position
04A4C3             0171*  ; returns: a = 1 if move legal, 0 if not
04A4C3             0172*  ; modifies: sprite_new_x,y populated by de with new y,x position irrespecitve of legality
04A4C3             0173*  sprite_check_move:
04A4C3 ED 53 C0 A4 0174*      ld (sprite_new_x),de ; save new y,x position
       04          
04A4C8             0175*  ; check whether target cell is occupied by player
04A4C8 2A D7 B6 04 0176*      ld hl,(cur_x) ; h,l = player y,x position
04A4CC AF          0177*      xor a ; clear carry
04A4CD ED 52       0178*      sbc hl,de ; zero if player is at target cell
04A4CF C2 DC A4 04 0179*      jp nz,@not_player
04A4D3 3E 01       0180*      ld a,sp_use ; TODO: add melee attack behavior to sprite routines
04A4D5 CD C1 A5 04 0181*      call do_sprite_behavior
04A4D9 3E 01       0182*      ld a,1 ; signals caller that move was legal
04A4DB C9          0183*      ret
04A4DC             0184*  @not_player:
04A4DC CD F6 66 04 0185*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A4E0             0186*  ; check whether target cell contains a sprite
04A4E0 DD 7E 03    0187*      ld a,(ix+map_sprite_id)
04A4E3 FE FF       0188*      cp 255 ; value if not sprite
04A4E5 CA EB A4 04 0189*      jp z,@not_sprite
04A4E9 AF          0190*      xor a ; signals caller that move was illegal
04A4EA C9          0191*      ret
04A4EB             0192*  @not_sprite:
04A4EB             0193*  ; read map type/status mask from target cell
04A4EB DD 7E 00    0194*      ld a,(ix+map_type_status)
04A4EE E6 01       0195*      and render_type_floor
04A4F0 C8          0196*      ret z ; target cell is not a floor so we can't move there
04A4F1             0197*  ; we are cleared for movement
04A4F1 CD 1B A5 04 0198*      call sprite_move
04A4F5 3E 01       0199*      ld a,1 ; signals caller that move was legal
04A4F7 C9          0200*      ret
04A4F8             0201*  
04A4F8             0202*  ; creates a new sprite at the given map position
04A4F8             0203*  ; inputs: a = obj_id, ix pointing at map address, iy pointing at sprite address
04A4F8             0204*  sprite_spawn:
04A4F8             0205*  ; copy obj_id to map_obj_id
04A4F8 DD 77 02    0206*      ld (ix+map_obj_id),a
04A4FB             0207*  ; lookup map_type_status and sprite_obj from obj_id
04A4FB D6 0A       0208*      sub 10 ; first record in list is 10
04A4FD 21 DE 7F 04 0209*      ld hl,map_type_status_lut
04A501 47          0210*      ld b,a
04A502 0E 02       0211*      ld c,2 ; two bytes per record
04A504 ED 4C       0212*      mlt bc
04A506 09          0213*      add hl,bc ; hl points to lookup record
04A507 ED 27       0214*      ld hl,(hl) ; l = map_type_status, h = sprite_obj
04A509             0215*  ; copy sprite_obj to sprite record
04A509 FD 74 01    0216*      ld (iy+sprite_obj),h
04A50C             0217*  ; copy map_type_status to map cell
04A50C DD 75 00    0218*      ld (ix+map_type_status),l
04A50F             0219*  ; write sprite_id to map cell
04A50F FD 7E 00    0220*      ld a,(iy+sprite_id)
04A512 DD 77 03    0221*      ld (ix+map_sprite_id),a
04A515             0222*  ; write 255 to map_img_idx to indicate type sprite
04A515 3E FF       0223*      ld a,255
04A517 DD 77 01    0224*      ld (ix+map_img_idx),a
04A51A             0225*  ; ; TODO: this will be clunky to do until the sprite table layout is adjusted to better separate definitional from state data
04A51A             0226*  ; ; initialize sprite data
04A51A             0227*  ;     ld a,sp_init
04A51A             0228*  ;     call sprite_init_data
04A51A C9          0229*      ret
04A51B             0230*  
04A51B             0231*  ; moves the sprite to the given map position
04A51B             0232*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
04A51B             0233*  sprite_move:
04A51B             0234*  ; point ix to old map cell
04A51B FD 17 04    0235*      ld de,(iy+sprite_x) ; d,e = sprite old y,x position
04A51E CD F6 66 04 0236*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A522             0237*  ; update sprite record with new position
04A522 ED 5B C0 A4 0238*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
04A527 FD 1F 04    0239*      ld (iy+sprite_x),de
04A52A             0240*  ; point iy to old map cell, ix to new map cell
04A52A DD E5       0241*      push ix ; old map cell
04A52C FD E1       0242*      pop iy ; new map cell
04A52E CD F6 66 04 0243*      call get_cell_from_coords ; d,e already had new y,x
04A532             0244*  ; copy old cell status to new
04A532 FD 27 00    0245*      ld hl,(iy+map_type_status)
04A535 DD 2F 00    0246*      ld (ix+map_type_status),hl
04A538 FD 7E 03    0247*      ld a,(iy+map_sprite_id)
04A53B DD 77 03    0248*      ld (ix+map_sprite_id),a
04A53E             0249*  ; set old map cell to no sprite and normal floor
04A53E 21 01 FF 1D 0250*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dynanmically based on the defs in tiles.txt at some point
04A542 FD 2F 00    0251*      ld (iy+map_type_status),hl
04A545 3E FF       0252*      ld a,0xFF ; no sprite
04A547 FD 77 03    0253*      ld (iy+map_sprite_id),a
04A54A C9          0254*      ret
04A54B             0255*  
04A54B             0256*  ; move a sprite in a random direction
04A54B             0257*  ; inputs: iy pointed at sprite record
04A54B             0258*  ; destroys: potentially everything
04A54B             0259*  sprite_move_random:
04A54B             0260*  ; point iy at sprite record
04A54B FD 2A 14 A4 0261*      ld iy,(sprite_table_pointer)
       04          
04A550             0262*  ; set number of times to try a random direction before giving up
04A550 06 08       0263*      ld b,8
04A552             0264*  @loop:
04A552 C5          0265*      push bc ; save loop counter
04A553             0266*  ; pick a random direction
04A553 CD 4B BC 04 0267*      call rand_8
04A557 E6 03       0268*      and 3 ; direction between 0 and 3
04A559             0269*  ; get dy,dx for moving once cell in the chosen direction
04A559 5F          0270*      ld e,a
04A55A 16 01       0271*      ld d,1 ; distance
04A55C CD 1B 67 04 0272*      call get_dx_dy ; d,e = dy,dx
04A560             0273*  ; calculate new position
04A560 FD 7E 04    0274*      ld a,(iy+sprite_x)
04A563 83          0275*      add a,e
04A564 E6 0F       0276*      and 15 ; modulo 16
04A566 5F          0277*      ld e,a
04A567 FD 7E 05    0278*      ld a,(iy+sprite_y)
04A56A 82          0279*      add a,d
04A56B E6 0F       0280*      and 15 ; modulo 16
04A56D 57          0281*      ld d,a
04A56E CD C3 A4 04 0282*      call sprite_check_move
04A572 C1          0283*      pop bc ; get back loop counter
04A573 A7          0284*      and a
04A574 C0          0285*      ret nz ; move was legal so we're done
04A575 10 DB       0286*      djnz @loop ; try again
04A577 C9          0287*      ret ; no move found in 8 tries, so we're done
04A578             0288*  
04A578             0289*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04A578             0290*  sprite_behavior_lookup:
04A578 DE A5 04    0291*      dl LAMP
04A57B 0E A6 04    0292*      dl BARREL
04A57E 58 A6 04    0293*      dl TABLE
04A581 88 A6 04    0294*      dl OVERHEAD_LIGHT
04A584 B8 A6 04    0295*      dl RADIOACTIVE_BARREL
04A587 02 A7 04    0296*      dl HEALTH_PACK
04A58A 3C A7 04    0297*      dl GOLD_CHALISE
04A58D 7E A7 04    0298*      dl GOLD_CROSS
04A590 C0 A7 04    0299*      dl PLATE_OF_FOOD
04A593 FA A7 04    0300*      dl KEYCARD
04A596 37 A8 04    0301*      dl GOLD_CHEST
04A599 79 A8 04    0302*      dl MACHINE_GUN
04A59C C8 A8 04    0303*      dl GATLING_GUN
04A59F 17 A9 04    0304*      dl DOG_FOOD
04A5A2 51 A9 04    0305*      dl GOLD_KEY
04A5A5 81 A9 04    0306*      dl DOG
04A5A8 0B AA 04    0307*      dl GERMAN_TROOPER
04A5AB AC AA 04    0308*      dl SS_GUARD
04A5AE 4D AB 04    0309*      dl DEAD_GUARD
04A5B1             0310*  
04A5B1             0311*  ; initializes sprite data for a particular sprite type and id
04A5B1             0312*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A5B1             0313*  sprite_init_data:
04A5B1 3E 00       0314*      ld a,sp_init ; index for sprite init routine
04A5B3 CD C1 A5 04 0315*      call do_sprite_behavior ; hl points at address to copy from
04A5B7 ED 13 02    0316*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04A5BA 01 0E 00 00 0317*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04A5BE ED B0       0318*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04A5C0 C9          0319*      ret ; done
04A5C1             0320*  
04A5C1             0321*  ; #### SPRITE BEHAVIOR ROUTINES ####
04A5C1             0322*  ; sprite behavior indices
04A5C1             0323*  sp_init:   equ 0
04A5C1             0324*  sp_use:    equ 1
04A5C1             0325*  sp_hurt:  equ 2
04A5C1             0326*  sp_kill:   equ 3
04A5C1             0327*  sp_see:    equ 4
04A5C1             0328*  sp_move:  equ 5
04A5C1             0329*  sp_shoot:  equ 6
04A5C1             0330*  
04A5C1             0331*  ; calls the sprite behavior routine for the sprite pointed to by iy
04A5C1             0332*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A5C1             0333*  ;         a = type index of routine to call
04A5C1             0334*  do_sprite_behavior:
04A5C1 FD 22 14 A4 0335*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04A5C6 FD 46 01    0336*      ld b,(iy+sprite_obj)
04A5C9 0E 03       0337*      ld c,3 ; three bytes per lookup record
04A5CB ED 4C       0338*      mlt bc ; bc is offset from the base of the lookup table
04A5CD 21 78 A5 04 0339*      ld hl,sprite_behavior_lookup
04A5D1 09          0340*      add hl,bc
04A5D2 ED 27       0341*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04A5D4 47          0342*      ld b,a ; b holds the routine index
04A5D5 0E 03       0343*      ld c,3 ; three bytes per lookup record
04A5D7 ED 4C       0344*      mlt bc ; bc is offset from the base of the lookup table
04A5D9 09          0345*      add hl,bc ; hl points to the label of the routine to call
04A5DA ED 27       0346*      ld hl,(hl) ; hl points to the routine to call
04A5DC E9          0347*      jp (hl) ; call the behavior routine
04A5DD C9          0348*      ret
04A5DE             0349*  
04A5DE             0350*  LAMP:
04A5DE             0351*  ; behavior routine address lookup
04A5DE F3 A5 04    0352*      dl @init
04A5E1 06 A6 04    0353*      dl @use
04A5E4 07 A6 04    0354*      dl @hurt
04A5E7 09 A6 04    0355*      dl @kill
04A5EA 0A A6 04    0356*      dl @see
04A5ED 0C A6 04    0357*      dl @move
04A5F0 0D A6 04    0358*      dl @shoot
04A5F3             0359*  @init:
04A5F3 21 F8 A5 04 0360*      ld hl,@data ; address for LDIR to copy from
04A5F7 C9          0361*      ret
04A5F8             0362*  @data:
04A5F8 64          0363*      db 100 ; sprite_health
04A5F9 00          0364*      db 000 ; sprite_triggers_mask
04A5FA 00          0365*      db 000 ; sprite_x
04A5FB 00          0366*      db 000 ; sprite_y
04A5FC 00          0367*      db 000 ; sprite_orientation
04A5FD 00          0368*      db 000 ; sprite_animation
04A5FE 00          0369*      db 000 ; sprite_anim_timer
04A5FF 01          0370*      db 001 ; sprite_move_timer
04A600 00          0371*      db 000 ; sprite_move_step
04A601 00          0372*      db 000 ; sprite_points
04A602 00          0373*      db 000 ; sprite_health_modifier
04A603 00          0374*      db 000 ; sprite_unassigned_0
04A604 00          0375*      db 000 ; sprite_unassigned_1
04A605 00          0376*      db 000 ; sprite_unassigned_2
04A606             0377*  @use:
04A606 C9          0378*      ret
04A607             0379*  @hurt:
04A607 AF          0380*      xor a
04A608 C9          0381*      ret
04A609             0382*  @kill:
04A609 C9          0383*      ret
04A60A             0384*  @see:
04A60A AF          0385*      xor a
04A60B C9          0386*      ret
04A60C             0387*  @move:
04A60C C9          0388*      ret
04A60D             0389*  @shoot:
04A60D C9          0390*      ret
04A60E             0391*  
04A60E             0392*  BARREL:
04A60E             0393*  ; behavior routine address lookup
04A60E 23 A6 04    0394*      dl @init
04A611 36 A6 04    0395*      dl @use
04A614 37 A6 04    0396*      dl @hurt
04A617 48 A6 04    0397*      dl @kill
04A61A 54 A6 04    0398*      dl @see
04A61D 56 A6 04    0399*      dl @move
04A620 57 A6 04    0400*      dl @shoot
04A623             0401*  @init:
04A623 21 28 A6 04 0402*      ld hl,@data ; address for LDIR to copy from
04A627 C9          0403*      ret
04A628             0404*  @data:
04A628 12          0405*      db 018 ; sprite_health
04A629 00          0406*      db 000 ; sprite_triggers_mask
04A62A 00          0407*      db 000 ; sprite_x
04A62B 00          0408*      db 000 ; sprite_y
04A62C 00          0409*      db 000 ; sprite_orientation
04A62D 00          0410*      db 000 ; sprite_animation
04A62E 00          0411*      db 000 ; sprite_anim_timer
04A62F 01          0412*      db 001 ; sprite_move_timer
04A630 00          0413*      db 000 ; sprite_move_step
04A631 00          0414*      db 000 ; sprite_points
04A632 CE          0415*      db -50 ; sprite_health_modifier
04A633 00          0416*      db 000 ; sprite_unassigned_0
04A634 00          0417*      db 000 ; sprite_unassigned_1
04A635 00          0418*      db 000 ; sprite_unassigned_2
04A636             0419*  @use:
04A636 C9          0420*      ret
04A637             0421*  @hurt:
04A637 3E FF       0422*      ld a,255 ; kill player's shot
04A639 32 E7 B6 04 0423*      ld (plyr_shot_status),a
04A63D 3A EB B6 04 0424*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A641 FD 86 02    0425*      add a,(iy+sprite_health)
04A644 FD 77 02    0426*      ld (iy+sprite_health),a
04A647 F0          0427*      ret p ; if health is positive, return
04A648             0428*      ; otherwise fall through to kill sprite
04A648             0429*  @kill:
04A648 FD E5       0430*      push iy
04A64A CD 8A C3 04 0431*      call sfx_play_explode
04A64E FD E1       0432*      pop iy
04A650 C3 A8 A4 04 0433*      jp sprite_kill
04A654             0434*  @see:
04A654 AF          0435*      xor a
04A655 C9          0436*      ret
04A656             0437*  @move:
04A656 C9          0438*      ret
04A657             0439*  @shoot:
04A657 C9          0440*      ret
04A658             0441*  
04A658             0442*  TABLE:
04A658             0443*  ; behavior routine address lookup
04A658 6D A6 04    0444*      dl @init
04A65B 80 A6 04    0445*      dl @use
04A65E 81 A6 04    0446*      dl @hurt
04A661 83 A6 04    0447*      dl @kill
04A664 84 A6 04    0448*      dl @see
04A667 86 A6 04    0449*      dl @move
04A66A 87 A6 04    0450*      dl @shoot
04A66D             0451*  @init:
04A66D 21 72 A6 04 0452*      ld hl,@data ; address for LDIR to copy from
04A671 C9          0453*      ret
04A672             0454*  @data:
04A672 64          0455*      db 100 ; sprite_health
04A673 00          0456*      db 000 ; sprite_triggers_mask
04A674 00          0457*      db 000 ; sprite_x
04A675 00          0458*      db 000 ; sprite_y
04A676 00          0459*      db 000 ; sprite_orientation
04A677 00          0460*      db 000 ; sprite_animation
04A678 00          0461*      db 000 ; sprite_anim_timer
04A679 01          0462*      db 001 ; sprite_move_timer
04A67A 00          0463*      db 000 ; sprite_move_step
04A67B 00          0464*      db 000 ; sprite_points
04A67C 00          0465*      db 000 ; sprite_health_modifier
04A67D 00          0466*      db 000 ; sprite_unassigned_0
04A67E 00          0467*      db 000 ; sprite_unassigned_1
04A67F 00          0468*      db 000 ; sprite_unassigned_2
04A680             0469*  @use:
04A680 C9          0470*      ret
04A681             0471*  @hurt:
04A681 AF          0472*      xor a
04A682 C9          0473*      ret
04A683             0474*  @kill:
04A683 C9          0475*      ret
04A684             0476*  @see:
04A684 AF          0477*      xor a
04A685 C9          0478*      ret
04A686             0479*  @move:
04A686 C9          0480*      ret
04A687             0481*  @shoot:
04A687 C9          0482*      ret
04A688             0483*  
04A688             0484*  OVERHEAD_LIGHT:
04A688             0485*  ; behavior routine address lookup
04A688 9D A6 04    0486*      dl @init
04A68B B0 A6 04    0487*      dl @use
04A68E B1 A6 04    0488*      dl @hurt
04A691 B3 A6 04    0489*      dl @kill
04A694 B4 A6 04    0490*      dl @see
04A697 B6 A6 04    0491*      dl @move
04A69A B7 A6 04    0492*      dl @shoot
04A69D             0493*  @init:
04A69D 21 A2 A6 04 0494*      ld hl,@data ; address for LDIR to copy from
04A6A1 C9          0495*      ret
04A6A2             0496*  @data:
04A6A2 64          0497*      db 100 ; sprite_health
04A6A3 00          0498*      db 000 ; sprite_triggers_mask
04A6A4 00          0499*      db 000 ; sprite_x
04A6A5 00          0500*      db 000 ; sprite_y
04A6A6 00          0501*      db 000 ; sprite_orientation
04A6A7 00          0502*      db 000 ; sprite_animation
04A6A8 00          0503*      db 000 ; sprite_anim_timer
04A6A9 01          0504*      db 001 ; sprite_move_timer
04A6AA 00          0505*      db 000 ; sprite_move_step
04A6AB 00          0506*      db 000 ; sprite_points
04A6AC 00          0507*      db 000 ; sprite_health_modifier
04A6AD 00          0508*      db 000 ; sprite_unassigned_0
04A6AE 00          0509*      db 000 ; sprite_unassigned_1
04A6AF 00          0510*      db 000 ; sprite_unassigned_2
04A6B0             0511*  @use:
04A6B0 C9          0512*      ret
04A6B1             0513*  @hurt:
04A6B1 AF          0514*      xor a
04A6B2 C9          0515*      ret
04A6B3             0516*  @kill:
04A6B3 C9          0517*      ret
04A6B4             0518*  @see:
04A6B4 AF          0519*      xor a
04A6B5 C9          0520*      ret
04A6B6             0521*  @move:
04A6B6 C9          0522*      ret
04A6B7             0523*  @shoot:
04A6B7 C9          0524*      ret
04A6B8             0525*  
04A6B8             0526*  RADIOACTIVE_BARREL:
04A6B8             0527*  ; behavior routine address lookup
04A6B8 CD A6 04    0528*      dl @init
04A6BB E0 A6 04    0529*      dl @use
04A6BE E1 A6 04    0530*      dl @hurt
04A6C1 F2 A6 04    0531*      dl @kill
04A6C4 FE A6 04    0532*      dl @see
04A6C7 00 A7 04    0533*      dl @move
04A6CA 01 A7 04    0534*      dl @shoot
04A6CD             0535*  @init:
04A6CD 21 D2 A6 04 0536*      ld hl,@data ; address for LDIR to copy from
04A6D1 C9          0537*      ret
04A6D2             0538*  @data:
04A6D2 18          0539*      db 024 ; sprite_health
04A6D3 00          0540*      db 000 ; sprite_triggers_mask
04A6D4 00          0541*      db 000 ; sprite_x
04A6D5 00          0542*      db 000 ; sprite_y
04A6D6 00          0543*      db 000 ; sprite_orientation
04A6D7 00          0544*      db 000 ; sprite_animation
04A6D8 00          0545*      db 000 ; sprite_anim_timer
04A6D9 01          0546*      db 001 ; sprite_move_timer
04A6DA 00          0547*      db 000 ; sprite_move_step
04A6DB 00          0548*      db 000 ; sprite_points
04A6DC B5          0549*      db -75 ; sprite_health_modifier
04A6DD 00          0550*      db 000 ; sprite_unassigned_0
04A6DE 00          0551*      db 000 ; sprite_unassigned_1
04A6DF 00          0552*      db 000 ; sprite_unassigned_2
04A6E0             0553*  @use:
04A6E0 C9          0554*      ret
04A6E1             0555*  @hurt:
04A6E1 3E FF       0556*      ld a,255 ; kill player's shot
04A6E3 32 E7 B6 04 0557*      ld (plyr_shot_status),a
04A6E7 3A EB B6 04 0558*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A6EB FD 86 02    0559*      add a,(iy+sprite_health)
04A6EE FD 77 02    0560*      ld (iy+sprite_health),a
04A6F1 F0          0561*      ret p ; if health is positive, return
04A6F2             0562*      ; otherwise fall through to kill sprite
04A6F2             0563*  @kill:
04A6F2 FD E5       0564*      push iy
04A6F4 CD 8A C3 04 0565*      call sfx_play_explode
04A6F8 FD E1       0566*      pop iy
04A6FA C3 A8 A4 04 0567*      jp sprite_kill
04A6FE             0568*  @see:
04A6FE AF          0569*      xor a
04A6FF C9          0570*      ret
04A700             0571*  @move:
04A700 C9          0572*      ret
04A701             0573*  @shoot:
04A701 C9          0574*      ret
04A702             0575*  
04A702             0576*  HEALTH_PACK:
04A702             0577*  ; behavior routine address lookup
04A702 17 A7 04    0578*      dl @init
04A705 2A A7 04    0579*      dl @use
04A708 35 A7 04    0580*      dl @hurt
04A70B 37 A7 04    0581*      dl @kill
04A70E 38 A7 04    0582*      dl @see
04A711 3A A7 04    0583*      dl @move
04A714 3B A7 04    0584*      dl @shoot
04A717             0585*  @init:
04A717 21 1C A7 04 0586*      ld hl,@data ; address for LDIR to copy from
04A71B C9          0587*      ret
04A71C             0588*  @data:
04A71C 64          0589*      db 100 ; sprite_health
04A71D 00          0590*      db 000 ; sprite_triggers_mask
04A71E 00          0591*      db 000 ; sprite_x
04A71F 00          0592*      db 000 ; sprite_y
04A720 00          0593*      db 000 ; sprite_orientation
04A721 00          0594*      db 000 ; sprite_animation
04A722 00          0595*      db 000 ; sprite_anim_timer
04A723 01          0596*      db 001 ; sprite_move_timer
04A724 00          0597*      db 000 ; sprite_move_step
04A725 00          0598*      db 000 ; sprite_points
04A726 14          0599*      db 020 ; sprite_health_modifier
04A727 00          0600*      db 000 ; sprite_unassigned_0
04A728 00          0601*      db 000 ; sprite_unassigned_1
04A729 00          0602*      db 000 ; sprite_unassigned_2
04A72A             0603*  @use:
04A72A FD 7E 0C    0604*      ld a,(iy+sprite_health_modifier)
04A72D CD 0A B9 04 0605*      call plyr_add_health
04A731 C3 A8 A4 04 0606*      jp sprite_kill
04A735             0607*  @hurt:
04A735 AF          0608*      xor a
04A736 C9          0609*      ret
04A737             0610*  @kill:
04A737 C9          0611*      ret
04A738             0612*  @see:
04A738 AF          0613*      xor a
04A739 C9          0614*      ret
04A73A             0615*  @move:
04A73A C9          0616*      ret
04A73B             0617*  @shoot:
04A73B C9          0618*      ret
04A73C             0619*  
04A73C             0620*  GOLD_CHALISE:
04A73C             0621*  ; behavior routine address lookup
04A73C 51 A7 04    0622*      dl @init
04A73F 64 A7 04    0623*      dl @use
04A742 77 A7 04    0624*      dl @hurt
04A745 79 A7 04    0625*      dl @kill
04A748 7A A7 04    0626*      dl @see
04A74B 7C A7 04    0627*      dl @move
04A74E 7D A7 04    0628*      dl @shoot
04A751             0629*  @init:
04A751 21 56 A7 04 0630*      ld hl,@data ; address for LDIR to copy from
04A755 C9          0631*      ret
04A756             0632*  @data:
04A756 64          0633*      db 100 ; sprite_health
04A757 00          0634*      db 000 ; sprite_triggers_mask
04A758 00          0635*      db 000 ; sprite_x
04A759 00          0636*      db 000 ; sprite_y
04A75A 00          0637*      db 000 ; sprite_orientation
04A75B 00          0638*      db 000 ; sprite_animation
04A75C 00          0639*      db 000 ; sprite_anim_timer
04A75D 01          0640*      db 001 ; sprite_move_timer
04A75E 00          0641*      db 000 ; sprite_move_step
04A75F 64          0642*      db 100 ; sprite_points
04A760 00          0643*      db 000 ; sprite_health_modifier
04A761 00          0644*      db 000 ; sprite_unassigned_0
04A762 00          0645*      db 000 ; sprite_unassigned_1
04A763 00          0646*      db 000 ; sprite_unassigned_2
04A764             0647*  @use:
04A764 FD E5       0648*      push iy
04A766 CD 96 C3 04 0649*      call sfx_play_got_treasure
04A76A FD E1       0650*      pop iy
04A76C FD 7E 0B    0651*      ld a,(iy+sprite_points)
04A76F CD 68 B9 04 0652*      call plyr_mod_score
04A773 C3 A8 A4 04 0653*      jp sprite_kill
04A777             0654*  @hurt:
04A777 AF          0655*      xor a
04A778 C9          0656*      ret
04A779             0657*  @kill:
04A779 C9          0658*      ret
04A77A             0659*  @see:
04A77A AF          0660*      xor a
04A77B C9          0661*      ret
04A77C             0662*  @move:
04A77C C9          0663*      ret
04A77D             0664*  @shoot:
04A77D C9          0665*      ret
04A77E             0666*  
04A77E             0667*  GOLD_CROSS:
04A77E             0668*  ; behavior routine address lookup
04A77E 93 A7 04    0669*      dl @init
04A781 A6 A7 04    0670*      dl @use
04A784 B9 A7 04    0671*      dl @hurt
04A787 BB A7 04    0672*      dl @kill
04A78A BC A7 04    0673*      dl @see
04A78D BE A7 04    0674*      dl @move
04A790 BF A7 04    0675*      dl @shoot
04A793             0676*  @init:
04A793 21 98 A7 04 0677*      ld hl,@data ; address for LDIR to copy from
04A797 C9          0678*      ret
04A798             0679*  @data:
04A798 64          0680*      db 100 ; sprite_health
04A799 00          0681*      db 000 ; sprite_triggers_mask
04A79A 00          0682*      db 000 ; sprite_x
04A79B 00          0683*      db 000 ; sprite_y
04A79C 00          0684*      db 000 ; sprite_orientation
04A79D 00          0685*      db 000 ; sprite_animation
04A79E 00          0686*      db 000 ; sprite_anim_timer
04A79F 01          0687*      db 001 ; sprite_move_timer
04A7A0 00          0688*      db 000 ; sprite_move_step
04A7A1 32          0689*      db 050 ; sprite_points
04A7A2 00          0690*      db 000 ; sprite_health_modifier
04A7A3 00          0691*      db 000 ; sprite_unassigned_0
04A7A4 00          0692*      db 000 ; sprite_unassigned_1
04A7A5 00          0693*      db 000 ; sprite_unassigned_2
04A7A6             0694*  @use:
04A7A6 FD E5       0695*      push iy
04A7A8 CD 96 C3 04 0696*      call sfx_play_got_treasure
04A7AC FD E1       0697*      pop iy
04A7AE FD 7E 0B    0698*      ld a,(iy+sprite_points)
04A7B1 CD 68 B9 04 0699*      call plyr_mod_score
04A7B5 C3 A8 A4 04 0700*      jp sprite_kill
04A7B9             0701*  @hurt:
04A7B9 AF          0702*      xor a
04A7BA C9          0703*      ret
04A7BB             0704*  @kill:
04A7BB C9          0705*      ret
04A7BC             0706*  @see:
04A7BC AF          0707*      xor a
04A7BD C9          0708*      ret
04A7BE             0709*  @move:
04A7BE C9          0710*      ret
04A7BF             0711*  @shoot:
04A7BF C9          0712*      ret
04A7C0             0713*  
04A7C0             0714*  PLATE_OF_FOOD:
04A7C0             0715*  ; behavior routine address lookup
04A7C0 D5 A7 04    0716*      dl @init
04A7C3 E8 A7 04    0717*      dl @use
04A7C6 F3 A7 04    0718*      dl @hurt
04A7C9 F5 A7 04    0719*      dl @kill
04A7CC F6 A7 04    0720*      dl @see
04A7CF F8 A7 04    0721*      dl @move
04A7D2 F9 A7 04    0722*      dl @shoot
04A7D5             0723*  @init:
04A7D5 21 DA A7 04 0724*      ld hl,@data ; address for LDIR to copy from
04A7D9 C9          0725*      ret
04A7DA             0726*  @data:
04A7DA 64          0727*      db 100 ; sprite_health
04A7DB 00          0728*      db 000 ; sprite_triggers_mask
04A7DC 00          0729*      db 000 ; sprite_x
04A7DD 00          0730*      db 000 ; sprite_y
04A7DE 00          0731*      db 000 ; sprite_orientation
04A7DF 00          0732*      db 000 ; sprite_animation
04A7E0 00          0733*      db 000 ; sprite_anim_timer
04A7E1 01          0734*      db 001 ; sprite_move_timer
04A7E2 00          0735*      db 000 ; sprite_move_step
04A7E3 00          0736*      db 000 ; sprite_points
04A7E4 0A          0737*      db 010 ; sprite_health_modifier
04A7E5 00          0738*      db 000 ; sprite_unassigned_0
04A7E6 00          0739*      db 000 ; sprite_unassigned_1
04A7E7 00          0740*      db 000 ; sprite_unassigned_2
04A7E8             0741*  @use:
04A7E8 FD 7E 0C    0742*      ld a,(iy+sprite_health_modifier)
04A7EB CD 0A B9 04 0743*      call plyr_add_health
04A7EF C3 A8 A4 04 0744*      jp sprite_kill
04A7F3             0745*  @hurt:
04A7F3 AF          0746*      xor a
04A7F4 C9          0747*      ret
04A7F5             0748*  @kill:
04A7F5 C9          0749*      ret
04A7F6             0750*  @see:
04A7F6 AF          0751*      xor a
04A7F7 C9          0752*      ret
04A7F8             0753*  @move:
04A7F8 C9          0754*      ret
04A7F9             0755*  @shoot:
04A7F9 C9          0756*      ret
04A7FA             0757*  
04A7FA             0758*  KEYCARD:
04A7FA             0759*  ; behavior routine address lookup
04A7FA 0F A8 04    0760*      dl @init
04A7FD 22 A8 04    0761*      dl @use
04A800 30 A8 04    0762*      dl @hurt
04A803 32 A8 04    0763*      dl @kill
04A806 33 A8 04    0764*      dl @see
04A809 35 A8 04    0765*      dl @move
04A80C 36 A8 04    0766*      dl @shoot
04A80F             0767*  @init:
04A80F 21 14 A8 04 0768*      ld hl,@data ; address for LDIR to copy from
04A813 C9          0769*      ret
04A814             0770*  @data:
04A814 64          0771*      db 100 ; sprite_health
04A815 00          0772*      db 000 ; sprite_triggers_mask
04A816 00          0773*      db 000 ; sprite_x
04A817 00          0774*      db 000 ; sprite_y
04A818 00          0775*      db 000 ; sprite_orientation
04A819 00          0776*      db 000 ; sprite_animation
04A81A 00          0777*      db 000 ; sprite_anim_timer
04A81B 01          0778*      db 001 ; sprite_move_timer
04A81C 00          0779*      db 000 ; sprite_move_step
04A81D 00          0780*      db 000 ; sprite_points
04A81E 00          0781*      db 000 ; sprite_health_modifier
04A81F 00          0782*      db 000 ; sprite_unassigned_0
04A820 00          0783*      db 000 ; sprite_unassigned_1
04A821 00          0784*      db 000 ; sprite_unassigned_2
04A822             0785*  @use:
04A822 3E 08       0786*      ld a,8
04A824 CD 77 B9 04 0787*      call plyr_add_ammo
04A828 CD AE C3 04 0788*      call sfx_play_gun_reload
04A82C C3 A8 A4 04 0789*      jp sprite_kill
04A830             0790*  @hurt:
04A830 AF          0791*      xor a
04A831 C9          0792*      ret
04A832             0793*  @kill:
04A832 C9          0794*      ret
04A833             0795*  @see:
04A833 AF          0796*      xor a
04A834 C9          0797*      ret
04A835             0798*  @move:
04A835 C9          0799*      ret
04A836             0800*  @shoot:
04A836 C9          0801*      ret
04A837             0802*  
04A837             0803*  GOLD_CHEST:
04A837             0804*  ; behavior routine address lookup
04A837 4C A8 04    0805*      dl @init
04A83A 5F A8 04    0806*      dl @use
04A83D 72 A8 04    0807*      dl @hurt
04A840 74 A8 04    0808*      dl @kill
04A843 75 A8 04    0809*      dl @see
04A846 77 A8 04    0810*      dl @move
04A849 78 A8 04    0811*      dl @shoot
04A84C             0812*  @init:
04A84C 21 51 A8 04 0813*      ld hl,@data ; address for LDIR to copy from
04A850 C9          0814*      ret
04A851             0815*  @data:
04A851 64          0816*      db 100 ; sprite_health
04A852 00          0817*      db 000 ; sprite_triggers_mask
04A853 00          0818*      db 000 ; sprite_x
04A854 00          0819*      db 000 ; sprite_y
04A855 00          0820*      db 000 ; sprite_orientation
04A856 00          0821*      db 000 ; sprite_animation
04A857 00          0822*      db 000 ; sprite_anim_timer
04A858 01          0823*      db 001 ; sprite_move_timer
04A859 00          0824*      db 000 ; sprite_move_step
04A85A FA          0825*      db 250 ; sprite_points
04A85B 00          0826*      db 000 ; sprite_health_modifier
04A85C 00          0827*      db 000 ; sprite_unassigned_0
04A85D 00          0828*      db 000 ; sprite_unassigned_1
04A85E 00          0829*      db 000 ; sprite_unassigned_2
04A85F             0830*  @use:
04A85F FD E5       0831*      push iy
04A861 CD 96 C3 04 0832*      call sfx_play_got_treasure
04A865 FD E1       0833*      pop iy
04A867 FD 7E 0B    0834*      ld a,(iy+sprite_points)
04A86A CD 68 B9 04 0835*      call plyr_mod_score
04A86E C3 A8 A4 04 0836*      jp sprite_kill
04A872             0837*  @hurt:
04A872 AF          0838*      xor a
04A873 C9          0839*      ret
04A874             0840*  @kill:
04A874 C9          0841*      ret
04A875             0842*  @see:
04A875 AF          0843*      xor a
04A876 C9          0844*      ret
04A877             0845*  @move:
04A877 C9          0846*      ret
04A878             0847*  @shoot:
04A878 C9          0848*      ret
04A879             0849*  
04A879             0850*  MACHINE_GUN:
04A879             0851*  ; behavior routine address lookup
04A879 8E A8 04    0852*      dl @init
04A87C A1 A8 04    0853*      dl @use
04A87F C1 A8 04    0854*      dl @hurt
04A882 C3 A8 04    0855*      dl @kill
04A885 C4 A8 04    0856*      dl @see
04A888 C6 A8 04    0857*      dl @move
04A88B C7 A8 04    0858*      dl @shoot
04A88E             0859*  @init:
04A88E 21 93 A8 04 0860*      ld hl,@data ; address for LDIR to copy from
04A892 C9          0861*      ret
04A893             0862*  @data:
04A893 64          0863*      db 100 ; sprite_health
04A894 00          0864*      db 000 ; sprite_triggers_mask
04A895 00          0865*      db 000 ; sprite_x
04A896 00          0866*      db 000 ; sprite_y
04A897 00          0867*      db 000 ; sprite_orientation
04A898 00          0868*      db 000 ; sprite_animation
04A899 00          0869*      db 000 ; sprite_anim_timer
04A89A 01          0870*      db 001 ; sprite_move_timer
04A89B 00          0871*      db 000 ; sprite_move_step
04A89C 00          0872*      db 000 ; sprite_points
04A89D 00          0873*      db 000 ; sprite_health_modifier
04A89E 00          0874*      db 000 ; sprite_unassigned_0
04A89F 00          0875*      db 000 ; sprite_unassigned_1
04A8A0 00          0876*      db 000 ; sprite_unassigned_2
04A8A1             0877*  @use:
04A8A1 CD A8 A4 04 0878*      call sprite_kill
04A8A5 3E 10       0879*      ld a,16
04A8A7 CD 77 B9 04 0880*      call plyr_add_ammo
04A8AB CD AE C3 04 0881*      call sfx_play_gun_reload
04A8AF 3E 04       0882*      ld a,plyr_wpn_mg
04A8B1 21 EC B6 04 0883*      ld hl,plyr_wpns
04A8B5 B6          0884*      or (hl)
04A8B6 77          0885*      ld (hl),a
04A8B7 3E 04       0886*      ld a,plyr_wpn_mg
04A8B9 32 ED B6 04 0887*      ld (plyr_wpn_active),a
04A8BD CD 51 B8 04 0888*      call plyr_set_weapon_parameters
04A8C1             0889*  @hurt:
04A8C1 AF          0890*      xor a
04A8C2 C9          0891*      ret
04A8C3             0892*  @kill:
04A8C3 C9          0893*      ret
04A8C4             0894*  @see:
04A8C4 AF          0895*      xor a
04A8C5 C9          0896*      ret
04A8C6             0897*  @move:
04A8C6 C9          0898*      ret
04A8C7             0899*  @shoot:
04A8C7 C9          0900*      ret
04A8C8             0901*  
04A8C8             0902*  GATLING_GUN:
04A8C8             0903*  ; behavior routine address lookup
04A8C8 DD A8 04    0904*      dl @init
04A8CB F0 A8 04    0905*      dl @use
04A8CE 10 A9 04    0906*      dl @hurt
04A8D1 12 A9 04    0907*      dl @kill
04A8D4 13 A9 04    0908*      dl @see
04A8D7 15 A9 04    0909*      dl @move
04A8DA 16 A9 04    0910*      dl @shoot
04A8DD             0911*  @init:
04A8DD 21 E2 A8 04 0912*      ld hl,@data ; address for LDIR to copy from
04A8E1 C9          0913*      ret
04A8E2             0914*  @data:
04A8E2 64          0915*      db 100 ; sprite_health
04A8E3 00          0916*      db 000 ; sprite_triggers_mask
04A8E4 00          0917*      db 000 ; sprite_x
04A8E5 00          0918*      db 000 ; sprite_y
04A8E6 00          0919*      db 000 ; sprite_orientation
04A8E7 00          0920*      db 000 ; sprite_animation
04A8E8 00          0921*      db 000 ; sprite_anim_timer
04A8E9 01          0922*      db 001 ; sprite_move_timer
04A8EA 00          0923*      db 000 ; sprite_move_step
04A8EB 00          0924*      db 000 ; sprite_points
04A8EC 00          0925*      db 000 ; sprite_health_modifier
04A8ED 00          0926*      db 000 ; sprite_unassigned_0
04A8EE 00          0927*      db 000 ; sprite_unassigned_1
04A8EF 00          0928*      db 000 ; sprite_unassigned_2
04A8F0             0929*  @use:
04A8F0 CD A8 A4 04 0930*      call sprite_kill
04A8F4 3E 20       0931*      ld a,32
04A8F6 CD 77 B9 04 0932*      call plyr_add_ammo
04A8FA CD AE C3 04 0933*      call sfx_play_gun_reload
04A8FE 3E 08       0934*      ld a,plyr_wpn_gg
04A900 21 EC B6 04 0935*      ld hl,plyr_wpns
04A904 B6          0936*      or (hl)
04A905 77          0937*      ld (hl),a
04A906 3E 08       0938*      ld a,plyr_wpn_gg
04A908 32 ED B6 04 0939*      ld (plyr_wpn_active),a
04A90C CD 51 B8 04 0940*      call plyr_set_weapon_parameters
04A910             0941*  @hurt:
04A910 AF          0942*      xor a
04A911 C9          0943*      ret
04A912             0944*  @kill:
04A912 C9          0945*      ret
04A913             0946*  @see:
04A913 AF          0947*      xor a
04A914 C9          0948*      ret
04A915             0949*  @move:
04A915 C9          0950*      ret
04A916             0951*  @shoot:
04A916 C9          0952*      ret
04A917             0953*  
04A917             0954*  DOG_FOOD:
04A917             0955*  ; behavior routine address lookup
04A917 2C A9 04    0956*      dl @init
04A91A 3F A9 04    0957*      dl @use
04A91D 4A A9 04    0958*      dl @hurt
04A920 4C A9 04    0959*      dl @kill
04A923 4D A9 04    0960*      dl @see
04A926 4F A9 04    0961*      dl @move
04A929 50 A9 04    0962*      dl @shoot
04A92C             0963*  @init:
04A92C 21 31 A9 04 0964*      ld hl,@data ; address for LDIR to copy from
04A930 C9          0965*      ret
04A931             0966*  @data:
04A931 64          0967*      db 100 ; sprite_health
04A932 00          0968*      db 000 ; sprite_triggers_mask
04A933 00          0969*      db 000 ; sprite_x
04A934 00          0970*      db 000 ; sprite_y
04A935 00          0971*      db 000 ; sprite_orientation
04A936 00          0972*      db 000 ; sprite_animation
04A937 00          0973*      db 000 ; sprite_anim_timer
04A938 01          0974*      db 001 ; sprite_move_timer
04A939 00          0975*      db 000 ; sprite_move_step
04A93A 00          0976*      db 000 ; sprite_points
04A93B 05          0977*      db 005 ; sprite_health_modifier
04A93C 00          0978*      db 000 ; sprite_unassigned_0
04A93D 00          0979*      db 000 ; sprite_unassigned_1
04A93E 00          0980*      db 000 ; sprite_unassigned_2
04A93F             0981*  @use:
04A93F FD 7E 0C    0982*      ld a,(iy+sprite_health_modifier)
04A942 CD 0A B9 04 0983*      call plyr_add_health
04A946 C3 A8 A4 04 0984*      jp sprite_kill
04A94A             0985*  @hurt:
04A94A AF          0986*      xor a
04A94B C9          0987*      ret
04A94C             0988*  @kill:
04A94C C9          0989*      ret
04A94D             0990*  @see:
04A94D AF          0991*      xor a
04A94E C9          0992*      ret
04A94F             0993*  @move:
04A94F C9          0994*      ret
04A950             0995*  @shoot:
04A950 C9          0996*      ret
04A951             0997*  
04A951             0998*  GOLD_KEY:
04A951             0999*  ; behavior routine address lookup
04A951 66 A9 04    1000*      dl @init
04A954 79 A9 04    1001*      dl @use
04A957 7A A9 04    1002*      dl @hurt
04A95A 7C A9 04    1003*      dl @kill
04A95D 7D A9 04    1004*      dl @see
04A960 7F A9 04    1005*      dl @move
04A963 80 A9 04    1006*      dl @shoot
04A966             1007*  @init:
04A966 21 6B A9 04 1008*      ld hl,@data ; address for LDIR to copy from
04A96A C9          1009*      ret
04A96B             1010*  @data:
04A96B 64          1011*      db 100 ; sprite_health
04A96C 00          1012*      db 000 ; sprite_triggers_mask
04A96D 00          1013*      db 000 ; sprite_x
04A96E 00          1014*      db 000 ; sprite_y
04A96F 00          1015*      db 000 ; sprite_orientation
04A970 00          1016*      db 000 ; sprite_animation
04A971 00          1017*      db 000 ; sprite_anim_timer
04A972 01          1018*      db 001 ; sprite_move_timer
04A973 00          1019*      db 000 ; sprite_move_step
04A974 00          1020*      db 000 ; sprite_points
04A975 00          1021*      db 000 ; sprite_health_modifier
04A976 00          1022*      db 000 ; sprite_unassigned_0
04A977 00          1023*      db 000 ; sprite_unassigned_1
04A978 00          1024*      db 000 ; sprite_unassigned_2
04A979             1025*  @use:
04A979 C9          1026*      ret
04A97A             1027*  @hurt:
04A97A AF          1028*      xor a
04A97B C9          1029*      ret
04A97C             1030*  @kill:
04A97C C9          1031*      ret
04A97D             1032*  @see:
04A97D AF          1033*      xor a
04A97E C9          1034*      ret
04A97F             1035*  @move:
04A97F C9          1036*      ret
04A980             1037*  @shoot:
04A980 C9          1038*      ret
04A981             1039*  
04A981             1040*  DOG:
04A981             1041*  ; behavior routine address lookup
04A981 96 A9 04    1042*      dl @init
04A984 A9 A9 04    1043*      dl @use
04A987 B9 A9 04    1044*      dl @hurt
04A98A D5 A9 04    1045*      dl @kill
04A98D E9 A9 04    1046*      dl @see
04A990 EE A9 04    1047*      dl @move
04A993 0A AA 04    1048*      dl @shoot
04A996             1049*  @init:
04A996 21 9B A9 04 1050*      ld hl,@data ; address for LDIR to copy from
04A99A C9          1051*      ret
04A99B             1052*  @data:
04A99B 32          1053*      db 050 ; sprite_health
04A99C 00          1054*      db 000 ; sprite_triggers_mask
04A99D 00          1055*      db 000 ; sprite_x
04A99E 00          1056*      db 000 ; sprite_y
04A99F 00          1057*      db 000 ; sprite_orientation
04A9A0 00          1058*      db 000 ; sprite_animation
04A9A1 00          1059*      db 000 ; sprite_anim_timer
04A9A2 01          1060*      db 001 ; sprite_move_timer
04A9A3 00          1061*      db 000 ; sprite_move_step
04A9A4 0A          1062*      db 010 ; sprite_points
04A9A5 F6          1063*      db -10 ; sprite_health_modifier
04A9A6 00          1064*      db 000 ; sprite_unassigned_0
04A9A7 00          1065*      db 000 ; sprite_unassigned_1
04A9A8 00          1066*      db 000 ; sprite_unassigned_2
04A9A9             1067*  @use:
04A9A9 FD E5       1068*      push iy
04A9AB CD 72 C3 04 1069*      call sfx_play_dog_woof_single
04A9AF FD E1       1070*      pop iy
04A9B1 FD 7E 0C    1071*      ld a,(iy+sprite_health_modifier)
04A9B4 CD 1A B9 04 1072*      call plyr_sub_health
04A9B8 C9          1073*      ret
04A9B9             1074*  @hurt:
04A9B9 FD E5       1075*      push iy
04A9BB CD 7E C3 04 1076*      call sfx_play_dog_yelp
04A9BF FD E1       1077*      pop iy
04A9C1             1078*  @nosound:
04A9C1 3E FF       1079*      ld a,255 ; kill player's shot
04A9C3 32 E7 B6 04 1080*      ld (plyr_shot_status),a
04A9C7 3A EB B6 04 1081*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A9CB FD 86 02    1082*      add a,(iy+sprite_health)
04A9CE FD 77 02    1083*      ld (iy+sprite_health),a
04A9D1             1084*      ; ret p ; if health is positive, return
04A9D1 F2 F5 A9 04 1085*      jp p,@do_move
04A9D5             1086*      ; otherwise fall through to kill sprite
04A9D5             1087*  @kill:
04A9D5 FD E5       1088*      push iy
04A9D7 CD 7E C3 04 1089*      call sfx_play_dog_yelp
04A9DB FD E1       1090*      pop iy
04A9DD FD 7E 0B    1091*      ld a,(iy+sprite_points)
04A9E0 CD 68 B9 04 1092*      call plyr_mod_score
04A9E4 C3 A8 A4 04 1093*      jp sprite_kill
04A9E8 C9          1094*      ret
04A9E9             1095*  @see:
04A9E9 18 03       1096*      jr @move
04A9EB             1097*  @seen:
04A9EB AF          1098*      xor a
04A9EC 3C          1099*      inc a
04A9ED C9          1100*      ret
04A9EE             1101*  @move:
04A9EE FD 35 09    1102*      dec (iy+sprite_move_timer)
04A9F1 28 02       1103*      jr z,@do_move
04A9F3 18 F6       1104*      jr @seen
04A9F5             1105*  @do_move:
04A9F5 CD 4B BC 04 1106*      call rand_8
04A9F9 E6 3F       1107*      and %00111111 ; between 0 and 63
04A9FB             1108*      ; or %00100000  ; at least 32
04A9FB F6 10       1109*      or %00010000  ; at least 16
04A9FD FD 77 09    1110*      ld (iy+sprite_move_timer),a
04AA00 CD 4B A5 04 1111*      call sprite_move_random
04AA04 CD 66 C3 04 1112*      call sfx_play_dog_woof_double
04AA08 18 E1       1113*      jr @seen
04AA0A             1114*  @shoot:
04AA0A C9          1115*      ret
04AA0B             1116*  
04AA0B             1117*  GERMAN_TROOPER:
04AA0B             1118*  ; behavior routine address lookup
04AA0B 20 AA 04    1119*      dl @init
04AA0E 33 AA 04    1120*      dl @use
04AA11 42 AA 04    1121*      dl @hurt
04AA14 5E AA 04    1122*      dl @kill
04AA17 74 AA 04    1123*      dl @see
04AA1A 90 AA 04    1124*      dl @move
04AA1D A3 AA 04    1125*      dl @shoot
04AA20             1126*  @init:
04AA20 21 25 AA 04 1127*      ld hl,@data ; address for LDIR to copy from
04AA24 C9          1128*      ret
04AA25             1129*  @data:
04AA25 4B          1130*      db 075 ; sprite_health
04AA26 00          1131*      db 000 ; sprite_triggers_mask
04AA27 00          1132*      db 000 ; sprite_x
04AA28 00          1133*      db 000 ; sprite_y
04AA29 00          1134*      db 000 ; sprite_orientation
04AA2A 00          1135*      db 000 ; sprite_animation
04AA2B 00          1136*      db 000 ; sprite_anim_timer
04AA2C 01          1137*      db 001 ; sprite_move_timer
04AA2D 00          1138*      db 000 ; sprite_move_step
04AA2E 14          1139*      db 020 ; sprite_points
04AA2F EC          1140*      db -20 ; sprite_health_modifier
04AA30 00          1141*      db 000 ; sprite_unassigned_0
04AA31 00          1142*      db 000 ; sprite_unassigned_1
04AA32 00          1143*      db 000 ; sprite_unassigned_2
04AA33             1144*  @use:
04AA33 FD E5       1145*      push iy
04AA35 CD 2A C3 04 1146*      call sfx_play_achtung
04AA39 FD E1       1147*      pop iy
04AA3B 3E FB       1148*      ld a,-5
04AA3D CD 1A B9 04 1149*      call plyr_sub_health
04AA41 C9          1150*      ret
04AA42             1151*  @hurt:
04AA42 FD E5       1152*      push iy
04AA44 CD 07 B2 04 1153*      call sfx_play_random_hurt
04AA48 FD E1       1154*      pop iy
04AA4A             1155*  @nosound:
04AA4A 3E FF       1156*      ld a,255 ; kill player's shot
04AA4C 32 E7 B6 04 1157*      ld (plyr_shot_status),a
04AA50 3A EB B6 04 1158*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04AA54 FD 86 02    1159*      add a,(iy+sprite_health)
04AA57 FD 77 02    1160*      ld (iy+sprite_health),a
04AA5A             1161*      ; ret p ; if health is positive, return
04AA5A F2 9D AA 04 1162*      jp p,@do_move
04AA5E             1163*      ; otherwise fall through to kill sprite
04AA5E             1164*  @kill:
04AA5E FD E5       1165*      push iy
04AA60 CD 26 C4 04 1166*      call sfx_play_wilhelm
04AA64 FD E1       1167*      pop iy
04AA66 FD 7E 0B    1168*      ld a,(iy+sprite_points)
04AA69 CD 68 B9 04 1169*      call plyr_mod_score
04AA6D 3E 38       1170*      ld a,OBJ_ID_DEAD_GUARD
04AA6F CD F8 A4 04 1171*      call sprite_spawn
04AA73 C9          1172*      ret
04AA74             1173*  @see:
04AA74 FD 7E 03    1174*      ld a,(iy+sprite_triggers_mask)
04AA77 E6 01       1175*      and sprite_trigger_see
04AA79 C2 90 AA 04 1176*      jp nz,@move
04AA7D 3E 01       1177*      ld a,sprite_trigger_see
04AA7F FD B6 03    1178*      or a,(iy+sprite_triggers_mask)
04AA82 FD 77 03    1179*      ld (iy+sprite_triggers_mask),a
04AA85 FD E5       1180*      push iy
04AA87 CD 2A C3 04 1181*      call sfx_play_achtung
04AA8B FD E1       1182*      pop iy
04AA8D             1183*  @seen:
04AA8D AF          1184*      xor a
04AA8E 3C          1185*      inc a
04AA8F C9          1186*      ret
04AA90             1187*  @move:
04AA90 FD 35 09    1188*      dec (iy+sprite_move_timer)
04AA93 CC A3 AA 04 1189*      call z,@shoot
04AA97 CC 9D AA 04 1190*      call z,@do_move
04AA9B 18 F0       1191*      jr @seen
04AA9D             1192*  @do_move:
04AA9D CD 4B A5 04 1193*      call sprite_move_random
04AAA1 18 EA       1194*      jr @seen
04AAA3             1195*  @shoot:
04AAA3 CD 8E AB 04 1196*      call sprite_reset_move_timer
04AAA7 CD 9A AB 04 1197*      call sprite_shoot
04AAAB C9          1198*      ret
04AAAC             1199*  
04AAAC             1200*  SS_GUARD:
04AAAC             1201*  ; behavior routine address lookup
04AAAC C1 AA 04    1202*      dl @init
04AAAF D4 AA 04    1203*      dl @use
04AAB2 E3 AA 04    1204*      dl @hurt
04AAB5 FF AA 04    1205*      dl @kill
04AAB8 15 AB 04    1206*      dl @see
04AABB 31 AB 04    1207*      dl @move
04AABE 44 AB 04    1208*      dl @shoot
04AAC1             1209*  @init:
04AAC1 21 C6 AA 04 1210*      ld hl,@data ; address for LDIR to copy from
04AAC5 C9          1211*      ret
04AAC6             1212*  @data:
04AAC6 64          1213*      db 100 ; sprite_health
04AAC7 00          1214*      db 000 ; sprite_triggers_mask
04AAC8 00          1215*      db 000 ; sprite_x
04AAC9 00          1216*      db 000 ; sprite_y
04AACA 00          1217*      db 000 ; sprite_orientation
04AACB 00          1218*      db 000 ; sprite_animation
04AACC 00          1219*      db 000 ; sprite_anim_timer
04AACD 01          1220*      db 001 ; sprite_move_timer
04AACE 00          1221*      db 000 ; sprite_move_step
04AACF 1E          1222*      db 030 ; sprite_points
04AAD0 E2          1223*      db -30 ; sprite_health_modifier
04AAD1 00          1224*      db 000 ; sprite_unassigned_0
04AAD2 00          1225*      db 000 ; sprite_unassigned_1
04AAD3 00          1226*      db 000 ; sprite_unassigned_2
04AAD4             1227*  @use:
04AAD4 FD E5       1228*      push iy
04AAD6 CD DE C3 04 1229*      call sfx_play_schusstaffel
04AADA FD E1       1230*      pop iy
04AADC 3E F6       1231*      ld a,-10
04AADE CD 1A B9 04 1232*      call plyr_sub_health
04AAE2 C9          1233*      ret
04AAE3             1234*  @hurt:
04AAE3 FD E5       1235*      push iy
04AAE5 CD 07 B2 04 1236*      call sfx_play_random_hurt
04AAE9 FD E1       1237*      pop iy
04AAEB             1238*  @nosound:
04AAEB 3E FF       1239*      ld a,255 ; kill player's shot
04AAED 32 E7 B6 04 1240*      ld (plyr_shot_status),a
04AAF1 3A EB B6 04 1241*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04AAF5 FD 86 02    1242*      add a,(iy+sprite_health)
04AAF8 FD 77 02    1243*      ld (iy+sprite_health),a
04AAFB             1244*      ; ret p ; if health is positive, return
04AAFB F2 3E AB 04 1245*      jp p,@do_move
04AAFF             1246*      ; otherwise fall through to kill sprite
04AAFF             1247*  @kill:
04AAFF FD E5       1248*      push iy
04AB01 CD C6 C3 04 1249*      call sfx_play_mein_leben
04AB05 FD E1       1250*      pop iy
04AB07 FD 7E 0B    1251*      ld a,(iy+sprite_points)
04AB0A CD 68 B9 04 1252*      call plyr_mod_score
04AB0E 3E 38       1253*      ld a,OBJ_ID_DEAD_GUARD
04AB10 CD F8 A4 04 1254*      call sprite_spawn
04AB14 C9          1255*      ret
04AB15             1256*  @see:
04AB15 FD 7E 03    1257*      ld a,(iy+sprite_triggers_mask)
04AB18 E6 01       1258*      and sprite_trigger_see
04AB1A C2 31 AB 04 1259*      jp nz,@move
04AB1E 3E 01       1260*      ld a,sprite_trigger_see
04AB20 FD B6 03    1261*      or a,(iy+sprite_triggers_mask)
04AB23 FD 77 03    1262*      ld (iy+sprite_triggers_mask),a
04AB26 FD E5       1263*      push iy
04AB28 CD DE C3 04 1264*      call sfx_play_schusstaffel
04AB2C FD E1       1265*      pop iy
04AB2E             1266*  @seen:
04AB2E AF          1267*      xor a
04AB2F 3C          1268*      inc a
04AB30 C9          1269*      ret
04AB31             1270*  @move:
04AB31 FD 35 09    1271*      dec (iy+sprite_move_timer)
04AB34 CC 44 AB 04 1272*      call z,@shoot
04AB38 CC 3E AB 04 1273*      call z,@do_move
04AB3C 18 F0       1274*      jr @seen
04AB3E             1275*  @do_move:
04AB3E CD 4B A5 04 1276*      call sprite_move_random
04AB42 18 EA       1277*      jr @seen
04AB44             1278*  @shoot:
04AB44 CD 8E AB 04 1279*      call sprite_reset_move_timer
04AB48 CD 9A AB 04 1280*      call sprite_shoot
04AB4C C9          1281*      ret
04AB4D             1282*  
04AB4D             1283*  DEAD_GUARD:
04AB4D             1284*  ; behavior routine address lookup
04AB4D 62 AB 04    1285*      dl @init
04AB50 75 AB 04    1286*      dl @use
04AB53 87 AB 04    1287*      dl @hurt
04AB56 89 AB 04    1288*      dl @kill
04AB59 8A AB 04    1289*      dl @see
04AB5C 8C AB 04    1290*      dl @move
04AB5F 8D AB 04    1291*      dl @shoot
04AB62             1292*  @init:
04AB62 21 67 AB 04 1293*      ld hl,@data ; address for LDIR to copy from
04AB66 C9          1294*      ret
04AB67             1295*  @data:
04AB67 64          1296*      db 100 ; sprite_health
04AB68 00          1297*      db 000 ; sprite_triggers_mask
04AB69 00          1298*      db 000 ; sprite_x
04AB6A 00          1299*      db 000 ; sprite_y
04AB6B 00          1300*      db 000 ; sprite_orientation
04AB6C 00          1301*      db 000 ; sprite_animation
04AB6D 00          1302*      db 000 ; sprite_anim_timer
04AB6E 01          1303*      db 001 ; sprite_move_timer
04AB6F 00          1304*      db 000 ; sprite_move_step
04AB70 00          1305*      db 000 ; sprite_points
04AB71 00          1306*      db 000 ; sprite_health_modifier
04AB72 00          1307*      db 000 ; sprite_unassigned_0
04AB73 00          1308*      db 000 ; sprite_unassigned_1
04AB74 00          1309*      db 000 ; sprite_unassigned_2
04AB75             1310*  @use:
04AB75 CD 4B BC 04 1311*      call rand_8
04AB79 E6 07       1312*      and %00000111
04AB7B CD 77 B9 04 1313*      call plyr_add_ammo
04AB7F CD AE C3 04 1314*      call sfx_play_gun_reload
04AB83 C3 A8 A4 04 1315*      jp sprite_kill
04AB87             1316*  @hurt:
04AB87 AF          1317*      xor a
04AB88 C9          1318*      ret
04AB89             1319*  @kill:
04AB89 C9          1320*      ret
04AB8A             1321*  @see:
04AB8A AF          1322*      xor a
04AB8B C9          1323*      ret
04AB8C             1324*  @move:
04AB8C C9          1325*      ret
04AB8D             1326*  @shoot:
04AB8D C9          1327*      ret
04AB8E             1328*  
04AB8E             1329*  sprite_reset_move_timer:
04AB8E CD 4B BC 04 1330*      call rand_8
04AB92 E6 3F       1331*      and %00111111 ; between 0 and 63
04AB94 F6 10       1332*      or %00010000  ; at least 16
04AB96 FD 77 09    1333*      ld (iy+sprite_move_timer),a
04AB99 C9          1334*      ret
04AB9A             1335*  
04AB9A             1336*  ; determines whether an enemy sprite can shoot at the player
04AB9A             1337*  ; and handles the shooting mechanics if so
04AB9A             1338*  ; inputs: iy pointed at sprite record
04AB9A             1339*  ; returns: a = 0 if the sprite didn't shoot, 1 if it did
04AB9A             1340*  ; destroys: probably everything
04AB9A             1341*  sprite_shoot:
04AB9A             1342*  ; check whether sprite has the same x or y coordinate as player
04AB9A FD 27 04    1343*      ld hl,(iy+sprite_x) ; h,l = sprite y,x position
04AB9D ED 5B D7 B6 1344*      ld de,(cur_x) ; d,e = player y,x position
       04          
04ABA2 7D          1345*      ld a,l ; compare x
04ABA3 BB          1346*      cp e
04ABA4 28 06       1347*      jr z,@shoot
04ABA6 7C          1348*      ld a,h ; compare y
04ABA7 BA          1349*      cp d
04ABA8 28 02       1350*      jr z,@shoot
04ABAA AF          1351*      xor a ; no shot so return zero
04ABAB C9          1352*      ret
04ABAC             1353*  @shoot:
04ABAC CD 0E C4 04 1354*      call sfx_play_shot_pistol
04ABB0             1355*  ; generate randomized fractional damage multiplier
04ABB0 CD 4B BC 04 1356*      call rand_8 ; a is a random fraction
04ABB4 5F          1357*      ld e,a
04ABB5 FD 7E 0C    1358*      ld a,(iy+sprite_health_modifier)
04ABB8 ED 44       1359*      neg ; setting up an unsigned mlt
04ABBA 57          1360*      ld d,a
04ABBB ED 5C       1361*      mlt de ; d.e is an 8.8 fixed point number
04ABBD 7A          1362*      ld a,d ; ... we only want the integer portion
04ABBE ED 44       1363*      neg ; back to signed
04ABC0 CD 1A B9 04 1364*      call plyr_sub_health
04ABC4 3E 01       1365*      ld a,1
04ABC6 C9          1366*      ret
04ABC7             1367*  
04ABC7 00          1368*  see_orientation: db 0x00
04ABC8             1369*  ; cycle through all cells visible to the player from the current position
04ABC8             1370*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04ABC8             1371*  ; inputs: cur_x, cur_y,
04ABC8             1372*  ; outputs: player-aware enemies
04ABC8             1373*  ; destroys: everything
04ABC8             1374*  sprites_see_plyr:
04ABC8             1375*  ; ; DEBUG: set up loop timer
04ABC8             1376*  ;     call prt_loop_reset
04ABC8             1377*  ; ; END DEBUG
04ABC8             1378*  ; ; DEBUG: start loop timer
04ABC8             1379*  ;     call prt_loop_start
04ABC8             1380*  ; ; END DEBUG
04ABC8             1381*  
04ABC8             1382*  ; intialize orientation
04ABC8 AF          1383*      xor a
04ABC9 32 C7 AB 04 1384*      ld (see_orientation),a
04ABCD             1385*  @loop_orientation:
04ABCD             1386*  ; get current map position and camera orientation
04ABCD ED 5B D7 B6 1387*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04ABD2             1388*      ; 0-1 prt ticks, 4 loops
04ABD2 CD F6 66 04 1389*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04ABD6             1390*  ; get cell_views address for this cell and orientation
04ABD6 3A C7 AB 04 1391*      ld a,(see_orientation)
04ABDA 5F          1392*      ld e,a
04ABDB 16 06       1393*      ld d,6 ; 6 bytes per orientation
04ABDD ED 5C       1394*      mlt de ; de = orientation offset
04ABDF EB          1395*      ex de,hl ; hl = orientation offset
04ABE0 06 18       1396*      ld b,24 ; 24 bytes per cell in cell_views lut
04ABE2 ED 4C       1397*      mlt bc ; bc = offset from base address of cell_views lut
04ABE4 09          1398*      add hl,bc ; hl = total offset from cell_views base address
04ABE5 EB          1399*      ex de,hl ; because we can't add iy to hl
04ABE6 FD 21 00 E4 1400*      ld iy,cell_views ; base address of cell_views lut
       B7          
04ABEB FD 19       1401*      add iy,de ; iy = cell_views address
04ABED FD 22 7A 69 1402*      ld (cur_cell_views),iy
       04          
04ABF2             1403*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04ABF2 01 00 46 28 1404*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04ABF6 AF          1405*      xor a ; poly_id
04ABF7 32 76 69 04 1406*      ld (to_poly_id),a
04ABFB             1407*  @loop:
04ABFB ED 43 07 AC 1408*      ld (@bit_iy+2),bc
       04          
04AC00 FD 2A 7A 69 1409*      ld iy,(cur_cell_views)
       04          
04AC05             1410*  @bit_iy:
04AC05 FD CB 00 46 1411*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04AC09 28 2E       1412*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04AC0B             1413*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04AC0B 3A 76 69 04 1414*      ld a,(to_poly_id)
04AC0F 4F          1415*      ld c,a ; poly_id
04AC10 3A C7 AB 04 1416*      ld a,(see_orientation)
04AC14 CD CE 6B 04 1417*      call get_polys_deltas ; d,e = y,x deltas
04AC18 3A D7 B6 04 1418*      ld a,(cur_x)
04AC1C 83          1419*      add a,e
04AC1D 5F          1420*      ld e,a
04AC1E 3A D8 B6 04 1421*      ld a,(cur_y)
04AC22 82          1422*      add a,d
04AC23 57          1423*      ld d,a
04AC24 CD F6 66 04 1424*      call get_cell_from_coords
04AC28 DD 7E 03    1425*      ld a,(ix+map_sprite_id)
04AC2B FE FF       1426*      cp 0xFF ; no sprite
04AC2D 28 0A       1427*      jr z,@next_poly
04AC2F CD 87 A4 04 1428*      call sprite_set_pointer
04AC33 3E 04       1429*      ld a,sp_see
04AC35 CD C1 A5 04 1430*      call do_sprite_behavior
04AC39             1431*  @next_poly:
04AC39 ED 4B 07 AC 1432*      ld bc,(@bit_iy+2)
       04          
04AC3E 3A 76 69 04 1433*      ld a,(to_poly_id)
04AC42 3C          1434*      inc a ; a is next poly_id
04AC43 32 76 69 04 1435*      ld (to_poly_id),a
04AC47 FE 2D       1436*      cp num_polys
04AC49 28 0F       1437*      jr z,@next_orientation
04AC4B 3E 08       1438*      ld a,8
04AC4D 80          1439*      add a,b
04AC4E 47          1440*      ld b,a ; bit tested codes to 0x46 + b/8
04AC4F FE 86       1441*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04AC51 C2 FB AB 04 1442*      jp nz,@loop
04AC55 06 46       1443*      ld b,0x46
04AC57 0C          1444*      inc c ; iy address offset
04AC58 18 A1       1445*      jr @loop
04AC5A             1446*  @next_orientation:
04AC5A 3A C7 AB 04 1447*      ld a,(see_orientation)
04AC5E 3C          1448*      inc a
04AC5F E6 03       1449*      and 3 ; modulo 4
04AC61 32 C7 AB 04 1450*      ld (see_orientation),a
04AC65 C2 CD AB 04 1451*      jp nz,@loop_orientation
04AC69             1452*  
04AC69             1453*  ; full loop 1-2 prt ticks
04AC69             1454*  ; ; DEBUG: stop loop timer
04AC69             1455*  ;     call prt_loop_stop
04AC69             1456*  ; ; END DEBUG
04AC69 C9          1457*      ret
04AC6A             0024   	include "src/asm/vdu.asm"
04AC6A             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04AC6A             0002*  ; VDU 0: Null (no operation)
04AC6A             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04AC6A             0004*  ; VDU 2: Enable “printer” §§
04AC6A             0005*  ; VDU 3: Disable “printer” §§
04AC6A             0006*  ; VDU 4: Write text at text cursor
04AC6A             0007*  ; VDU 5: Write text at graphics cursor
04AC6A             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04AC6A             0009*  ; VDU 7: Make a short beep (BEL)
04AC6A             0010*  ; VDU 8: Move cursor back one character
04AC6A             0011*  ; VDU 9: Move cursor forward one character
04AC6A             0012*  ; VDU 10: Move cursor down one line
04AC6A             0013*  ; VDU 11: Move cursor up one line
04AC6A             0014*  ; VDU 12: Clear text area (CLS)
04AC6A             0015*  ; VDU 13: Carriage return
04AC6A             0016*  ; VDU 14: Page mode On *
04AC6A             0017*  ; VDU 15: Page mode Off *
04AC6A             0018*  ; VDU 16: Clear graphics area (CLG)
04AC6A             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04AC6A             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04AC6A             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04AC6A             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04AC6A             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04AC6A             0024*  ; VDU 22, n: Select screen mode (MODE n)
04AC6A             0025*  ; VDU 23, n: Re-program display character / System Commands
04AC6A             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04AC6A             0027*  ; VDU 25, mode, x; y;: PLOT command
04AC6A             0028*  ; VDU 26: Reset graphics and text viewports **
04AC6A             0029*  ; VDU 27, char: Output character to screen §
04AC6A             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04AC6A             0031*  ; VDU 29, x; y;: Set graphics origin
04AC6A             0032*  ; VDU 30: Home cursor
04AC6A             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04AC6A             0034*  ; VDU 127: Backspace
04AC6A             0035*  
04AC6A             0036*  ; VDU 0: Null (no operation)
04AC6A             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04AC6A             0038*  ;     This may be useful for padding out a VDU command sequence,
04AC6A             0039*  ;     or for inserting a placeholder for a command that will be added later.
04AC6A             0040*  ; inputs: none
04AC6A             0041*  ; outputs: an empty byte somewhere in VDU
04AC6A             0042*  ; destroys: a
04AC6A             0043*  vdu_null:
04AC6A AF          0044*      xor a
04AC6B 5B D7       0045*  	rst.lil $10
04AC6D C9          0046*  	ret
04AC6E             0047*  
04AC6E             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04AC6E             0049*  ;     Ensures that the next character received by the VDP is sent through to
04AC6E             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04AC6E             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04AC6E             0052*  ;     intended to be displayed on the screen. It allows characters that would
04AC6E             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04AC6E             0054*  ;     If the “printer” has not been enabled then this command will just discard
04AC6E             0055*  ;     the next byte sent to the VDP.
04AC6E             0056*  ; inputs: a is the ascii code of the character to send
04AC6E             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04AC6E             0058*  ; outputs: a character on the serial terminal connected to the USB port
04AC6E             0059*  ;           and the same character on the screen at the current text cursor location
04AC6E             0060*  ; QUESTION: does it also advance the text cursor?
04AC6E             0061*  ; destroys: hl, bc
04AC6E             0062*  vdu_char_to_printer:
04AC6E 32 7E AC 04 0063*  	ld (@arg),a
04AC72 21 7D AC 04 0064*  	ld hl,@cmd
04AC76 01 02 00 00 0065*  	ld bc,@end-@cmd
04AC7A 5B DF       0066*  	rst.lil $18
04AC7C C9          0067*  	ret
04AC7D 01          0068*  @cmd: db 1
04AC7E 00          0069*  @arg: db 0
04AC7F             0070*  @end:
04AC7F             0071*  
04AC7F             0072*  ; VDU 2: Enable “printer” §§
04AC7F             0073*  ;     Enables the “printer”.
04AC7F             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04AC7F             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04AC7F             0076*  ;     this port is used for power, but it can also be used to send and
04AC7F             0077*  ;     receive data to and from the VDP.
04AC7F             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04AC7F             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04AC7F             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04AC7F             0081*  ;     use the VDU 1 command.
04AC7F             0082*  ;     The VDP will not send through other control codes to the printer,
04AC7F             0083*  ;     and will will not send through data it receives as part of other commands.
04AC7F             0084*  vdu_enable_printer:
04AC7F 3E 02       0085*      ld a,2
04AC81 5B D7       0086*  	rst.lil $10
04AC83 C9          0087*  	ret
04AC84             0088*  
04AC84             0089*  ; VDU 3: Disable “printer” §§
04AC84             0090*  ; inputs: none
04AC84             0091*  ; outputs: a USB port bereft of communication with the VDP
04AC84             0092*  ; destroys: a
04AC84             0093*  vdu_disable_printer:
04AC84 3E 03       0094*      ld a,3
04AC86 5B D7       0095*  	rst.lil $10
04AC88 C9          0096*  	ret
04AC89             0097*  
04AC89             0098*  ; VDU 4: Write text at text cursor
04AC89             0099*  ;     This causes text to be written at the current text cursor position.
04AC89             0100*  ;     This is the default mode for text display.
04AC89             0101*  ;     Text is written using the current text foreground and background colours.
04AC89             0102*  ; inputs: a is the character to write to the screen
04AC89             0103*  ; prerequisites: the text cursor at the intended position on screen
04AC89             0104*  ; outputs: prints the character and moves text cursor right one position
04AC89             0105*  ; destroys: a, hl, bc
04AC89             0106*  vdu_char_to_text_cursor:
04AC89 32 99 AC 04 0107*  	ld (@arg),a
04AC8D 21 98 AC 04 0108*  	ld hl,@cmd
04AC91 01 02 00 00 0109*  	ld bc,@end-@cmd
04AC95 5B DF       0110*  	rst.lil $18
04AC97 C9          0111*  	ret
04AC98 04          0112*  @cmd: db 4
04AC99 00          0113*  @arg: db 0
04AC9A             0114*  @end:
04AC9A             0115*  
04AC9A             0116*  ; VDU 5: Write text at graphics cursor
04AC9A             0117*  ;     This causes text to be written at the current graphics cursor position.
04AC9A             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04AC9A             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04AC9A             0120*  ;     or for positioning text at a specific location on the screen.
04AC9A             0121*  ;     Characters are plotted using the current graphics foreground colour,
04AC9A             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04AC9A             0123*  ;     The character background is transparent, and will not overwrite any
04AC9A             0124*  ;     graphics that are already present at the character’s location.
04AC9A             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04AC9A             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04AC9A             0127*  ;     graphics background colour.
04AC9A             0128*  ; inputs: a is the character to write to the screen
04AC9A             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04AC9A             0130*  ; outputs: see the name of the function
04AC9A             0131*  ; destroys: a, hl, bc
04AC9A             0132*  vdu_char_to_gfx_cursor:
04AC9A 32 AA AC 04 0133*  	ld (@arg),a
04AC9E 21 A9 AC 04 0134*  	ld hl,@cmd
04ACA2 01 02 00 00 0135*  	ld bc,@end-@cmd
04ACA6 5B DF       0136*  	rst.lil $18
04ACA8 C9          0137*  	ret
04ACA9 05          0138*  @cmd: db 5
04ACAA 00          0139*  @arg: db 0
04ACAB             0140*  @end:
04ACAB             0141*  
04ACAB             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04ACAB             0143*  ;     This enables the screen, and re-enables VDU command processing,
04ACAB             0144*  ;     reversing the effect of VDU 21.
04ACAB             0145*  ; inputs: none
04ACAB             0146*  ; outputs: a functioning screen and VDU
04ACAB             0147*  ; destroys: a
04ACAB             0148*  vdu_enable_screen:
04ACAB 3E 06       0149*      ld a,6
04ACAD 5B D7       0150*  	rst.lil $10
04ACAF C9          0151*  	ret
04ACB0             0152*  
04ACB0             0153*  ; PASSES
04ACB0             0154*  ; VDU 7: Make a short beep (BEL)
04ACB0             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04ACB0             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04ACB0             0157*  ; inputs: none
04ACB0             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04ACB0             0159*  ; destroys: a
04ACB0             0160*  vdu_beep:
04ACB0 3E 07       0161*      ld a,7
04ACB2 5B D7       0162*  	rst.lil $10
04ACB4 C9          0163*  	ret
04ACB5             0164*  
04ACB5             0165*  ; VDU 8: Move cursor back one character
04ACB5             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04ACB5             0167*  ;     By default, when at the start of a line it will move to the end of
04ACB5             0168*  ;     the previous line (as defined by the current text viewport).
04ACB5             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04ACB5             0170*  ;     The cursor remains constrained to the current text viewport.
04ACB5             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04ACB5             0172*  ;     The cursor is just moved left by one character width.
04ACB5             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04ACB5             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04ACB5             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04ACB5             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04ACB5             0177*  vdu_cursor_back:
04ACB5 3E 08       0178*      ld a,8
04ACB7 5B D7       0179*  	rst.lil $10
04ACB9 C9          0180*  	ret
04ACBA             0181*  
04ACBA             0182*  ; VDU 9: Move cursor forward one character
04ACBA             0183*  vdu_cursor_forward:
04ACBA 3E 09       0184*      ld a,9
04ACBC 5B D7       0185*  	rst.lil $10
04ACBE C9          0186*  	ret
04ACBF             0187*  
04ACBF             0188*  ; VDU 10: Move cursor down one line
04ACBF             0189*  vdu_cursor_down:
04ACBF 3E 0A       0190*      ld a,10
04ACC1 5B D7       0191*  	rst.lil $10
04ACC3 C9          0192*  	ret
04ACC4             0193*  
04ACC4             0194*  ; VDU 11: Move cursor up one line
04ACC4             0195*  vdu_cursor_up:
04ACC4 3E 0B       0196*      ld a,11
04ACC6 5B D7       0197*  	rst.lil $10
04ACC8 C9          0198*  	ret
04ACC9             0199*  
04ACC9             0200*  ; VDU 12: Clear text area (CLS)
04ACC9             0201*  vdu_cls:
04ACC9 3E 0C       0202*      ld a,12
04ACCB 5B D7       0203*  	rst.lil $10
04ACCD C9          0204*  	ret
04ACCE             0205*  
04ACCE             0206*  ; VDU 13: Carriage return
04ACCE             0207*  vdu_cr:
04ACCE 3E 0D       0208*      ld a,13
04ACD0 5B D7       0209*  	rst.lil $10
04ACD2 C9          0210*  	ret
04ACD3             0211*  
04ACD3             0212*  ; VDU 14: Page mode On *
04ACD3             0213*  vdu_page_on:
04ACD3 3E 0E       0214*      ld a,14
04ACD5 5B D7       0215*  	rst.lil $10
04ACD7 C9          0216*  	ret
04ACD8             0217*  
04ACD8             0218*  ; VDU 15: Page mode Off *
04ACD8             0219*  vdu_page_off:
04ACD8 3E 0F       0220*      ld a,15
04ACDA 5B D7       0221*  	rst.lil $10
04ACDC C9          0222*  	ret
04ACDD             0223*  
04ACDD             0224*  ; VDU 16: Clear graphics area (CLG)
04ACDD             0225*  vdu_clg:
04ACDD 3E 10       0226*      ld a,16
04ACDF 5B D7       0227*  	rst.lil $10
04ACE1 C9          0228*  	ret
04ACE2             0229*  
04ACE2             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04ACE2             0231*  vdu_colour_text:
04ACE2 32 F2 AC 04 0232*  	ld (@arg),a
04ACE6 21 F1 AC 04 0233*  	ld hl,@cmd
04ACEA 01 02 00 00 0234*  	ld bc,@end-@cmd
04ACEE 5B DF       0235*  	rst.lil $18
04ACF0 C9          0236*  	ret
04ACF1 11          0237*  @cmd: db 17
04ACF2 00          0238*  @arg: db 0
04ACF3             0239*  @end:
04ACF3             0240*  
04ACF3             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04ACF3             0242*  ; inputs: a is the plotting mode, c is the colour
04ACF3             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04ACF3             0244*  vdu_gcol_fg:
04ACF3             0245*  ; This command will set both the current graphics colour,
04ACF3             0246*  ; and the current graphics plotting mode.
04ACF3             0247*  ; As with VDU 17 the colour number will set the foreground colour
04ACF3             0248*  ; if it is in the range 0-127, or the background colour if it is
04ACF3             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04ACF3             0250*  ; Support for different plotting modes on Agon is currently very limited.
04ACF3             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04ACF3             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04ACF3             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04ACF3             0254*  ; very limited support for mode 4, which will invert the colour of any
04ACF3             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04ACF3             0256*  ; and may not work as expected.
04ACF3             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04ACF3             0258*  ; original VDU system, may be added in the future.
04ACF3             0259*  ; This command is identical to the BASIC GCOL keyword.
04ACF3 32 08 AD 04 0260*  	ld (@mode),a
04ACF7 79          0261*      ld a,c
04ACF8 32 09 AD 04 0262*      ld (@col),a
04ACFC 21 07 AD 04 0263*  	ld hl,@cmd
04AD00 01 03 00 00 0264*  	ld bc,@end-@cmd
04AD04 5B DF       0265*  	rst.lil $18
04AD06 C9          0266*  	ret
04AD07 12          0267*  @cmd: db 18
04AD08 00          0268*  @mode: db 0
04AD09 00          0269*  @col: db 0
04AD0A             0270*  @end:
04AD0A             0271*  
04AD0A             0272*  vdu_gcol_bg:
04AD0A 32 21 AD 04 0273*  	ld (@mode),a
04AD0E 79          0274*      ld a,c
04AD0F C6 80       0275*      add a,128
04AD11 32 22 AD 04 0276*      ld (@col),a
04AD15 21 20 AD 04 0277*  	ld hl,@cmd
04AD19 01 03 00 00 0278*  	ld bc,@end-@cmd
04AD1D 5B DF       0279*  	rst.lil $18
04AD1F C9          0280*  	ret
04AD20 12          0281*  @cmd:  db 18
04AD21 00          0282*  @mode: db 0
04AD22 00          0283*  @col:  db 0
04AD23             0284*  @end:
04AD23             0285*  
04AD23             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04AD23             0287*  ;     This command sets the colour palette, by mapping a logical colour
04AD23             0288*  ;     to a physical colour. This is useful for defining custom colours,
04AD23             0289*  ;     or for redefining the default colours.
04AD23             0290*  ;     If the physical colour number is given as 255 then the colour will
04AD23             0291*  ;     be defined using the red, green, and blue values given. If the physical
04AD23             0292*  ;     colour number is given as any other value then the colour will be defined
04AD23             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04AD23             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04AD23             0295*  ;     must still be provided, but will be ignored.
04AD23             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04AD23             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04AD23             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04AD23             0299*  ;     requested. The nearest colour will be chosen.
04AD23             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04AD23             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04AD23             0302*  vdu_def_log_colour:
04AD23 32 48 AD 04 0303*  	ld (@physical),a
04AD27 47          0304*      ld b,a
04AD28 32 47 AD 04 0305*      ld (@logical),a
04AD2C 79          0306*      ld a,c
04AD2D 32 49 AD 04 0307*      ld (@red),a
04AD31 7C          0308*      ld a,h
04AD32 32 4A AD 04 0309*      ld (@green),a
04AD36 7D          0310*      ld a,l
04AD37 32 4B AD 04 0311*      ld (@blue),a
04AD3B 21 46 AD 04 0312*  	ld hl,@cmd
04AD3F 01 06 00 00 0313*  	ld bc,@end-@cmd
04AD43 5B DF       0314*  	rst.lil $18
04AD45 C9          0315*  	ret
04AD46 13          0316*  @cmd: db 19
04AD47 00          0317*  @logical: db 0
04AD48 00          0318*  @physical: db 0
04AD49 00          0319*  @red: db 0
04AD4A 00          0320*  @green: db 0
04AD4B 00          0321*  @blue: db 0
04AD4C             0322*  @end:
04AD4C             0323*  
04AD4C             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04AD4C             0325*  vdu_reset_gfx:
04AD4C 3E 14       0326*      ld a,20
04AD4E 5B D7       0327*  	rst.lil $10
04AD50 C9          0328*  	ret
04AD51             0329*  
04AD51             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04AD51             0331*  ; except for VDU 1 and VDU 6) §§
04AD51             0332*  vdu_disable_screen:
04AD51 3E 15       0333*      ld a,21
04AD53 5B D7       0334*  	rst.lil $10
04AD55 C9          0335*  	ret
04AD56             0336*  
04AD56             0337*  ; VDU 22, n: Select screen mode (MODE n)
04AD56             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04AD56             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04AD56             0340*  ; Screen modes
04AD56             0341*  ; Modes over 128 are double-buffered
04AD56             0342*  ; From Version 1.04 or greater
04AD56             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04AD56             0344*  ; 0 	640 	480 	16 	    60hz
04AD56             0345*  ; * 1 	640 	480 	4 	    60hz
04AD56             0346*  ; 2 	640 	480 	2 	    60hz
04AD56             0347*  ; 3 	640 	240 	64 	    60hz
04AD56             0348*  ; 4 	640 	240 	16 	    60hz
04AD56             0349*  ; 5 	640 	240 	4 	    60hz
04AD56             0350*  ; 6 	640 	240 	2 	    60hz
04AD56             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04AD56             0352*  ; 8 	320 	240 	64 	    60hz
04AD56             0353*  ; 9 	320 	240 	16 	    60hz
04AD56             0354*  ; 10 	320 	240 	4 	    60hz
04AD56             0355*  ; 11 	320 	240 	2 	    60hz
04AD56             0356*  ; 12 	320 	200 	64 	    70hz
04AD56             0357*  ; 13 	320 	200 	16 	    70hz
04AD56             0358*  ; 14 	320 	200 	4 	    70hz
04AD56             0359*  ; 15 	320 	200 	2 	    70hz
04AD56             0360*  ; 16 	800 	600 	4 	    60hz
04AD56             0361*  ; 17 	800 	600 	2 	    60hz
04AD56             0362*  ; 18 	1024 	768 	2 	    60hz
04AD56             0363*  ; 129 	640 	480 	4 	    60hz
04AD56             0364*  ; 130 	640 	480 	2 	    60hz
04AD56             0365*  ; 132 	640 	240 	16 	    60hz
04AD56             0366*  ; 133 	640 	240 	4 	    60hz
04AD56             0367*  ; 134 	640 	240 	2 	    60hz
04AD56             0368*  ; 136 	320 	240 	64 	    60hz
04AD56             0369*  ; 137 	320 	240 	16 	    60hz
04AD56             0370*  ; 138 	320 	240 	4 	    60hz
04AD56             0371*  ; 139 	320 	240 	2 	    60hz
04AD56             0372*  ; 140 	320 	200 	64 	    70hz
04AD56             0373*  ; 141 	320 	200 	16 	    70hz
04AD56             0374*  ; 142 	320 	200 	4 	    70hz
04AD56             0375*  ; 143 	320 	200 	2 	    70hz
04AD56             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04AD56             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04AD56             0378*  ; change to the requested mode.
04AD56             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04AD56             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04AD56             0381*  vdu_set_screen_mode:
04AD56 32 66 AD 04 0382*  	ld (@arg),a
04AD5A 21 65 AD 04 0383*  	ld hl,@cmd
04AD5E 01 02 00 00 0384*  	ld bc,@end-@cmd
04AD62 5B DF       0385*  	rst.lil $18
04AD64 C9          0386*  	ret
04AD65 16          0387*  @cmd: db 22 ; set screen mode
04AD66 00          0388*  @arg: db 0  ; screen mode parameter
04AD67             0389*  @end:
04AD67             0390*  
04AD67             0391*  ; VDU 23, n: Re-program display character / System Commands
04AD67             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04AD67             0393*  vdu_define_character:
04AD67 32 83 AD 04 0394*  	ld (@ascii),a
04AD6B 11 84 AD 04 0395*  	ld de,@data
04AD6F 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04AD71             0397*  @loop:
04AD71 7E          0398*  	ld a,(hl)
04AD72 12          0399*  	ld (de),a
04AD73 23          0400*  	inc hl
04AD74 13          0401*  	inc de
04AD75 10 FA       0402*  	djnz @loop
04AD77 21 82 AD 04 0403*  	ld hl,@cmd
04AD7B 01 0A 00 00 0404*  	ld bc,@end-@cmd
04AD7F 5B DF       0405*  	rst.lil $18
04AD81 C9          0406*  	ret
04AD82 17          0407*  @cmd:   db 23
04AD83 00          0408*  @ascii: db 0
04AD84             0409*  @data:  ds 8
04AD8C             0410*  @end:
04AD8C             0411*  
04AD8C             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04AD8C             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04AD8C             0414*  ; 	because we have turned off logical screen scaling
04AD8C             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04AD8C             0416*  ; outputs; nothing
04AD8C             0417*  ; destroys: a might make it out alive
04AD8C             0418*  vdu_set_gfx_viewport:
04AD8C ED 43 AC AD 0419*      ld (@x0),bc
       04          
04AD91 FD 22 AE AD 0420*      ld (@y1),iy
       04          
04AD96 DD 22 B0 AD 0421*  	ld (@x1),ix
       04          
04AD9B ED 53 B2 AD 0422*  	ld (@y0),de
       04          
04ADA0 21 AB AD 04 0423*  	ld hl,@cmd
04ADA4 01 09 00 00 0424*  	ld bc,@end-@cmd
04ADA8 5B DF       0425*  	rst.lil $18
04ADAA C9          0426*  	ret
04ADAB 18          0427*  @cmd:   db 24 ; set graphics viewport command
04ADAC 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04ADAE 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04ADB0 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04ADB2 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04ADB4 00          0432*  @end:   db 0x00	  ; padding
04ADB5             0433*  
04ADB5             0434*  ; VDU 25, mode, x; y;: PLOT command
04ADB5             0435*  ; Implemented in vdu_plot.asm
04ADB5             0436*  
04ADB5             0437*  ; VDU 26: Reset graphics and text viewports **
04ADB5             0438*  vdu_reset_txt_gfx_view:
04ADB5 3E 1A       0439*      ld a,26
04ADB7 5B D7       0440*  	rst.lil $10
04ADB9 C9          0441*  	ret
04ADBA             0442*  
04ADBA             0443*  ; PASSES
04ADBA             0444*  ; VDU 27, char: Output character to screen §
04ADBA             0445*  ; inputs: a is the ascii code of the character to draw
04ADBA             0446*  vdu_draw_char:
04ADBA 32 CA AD 04 0447*  	ld (@arg),a
04ADBE 21 C9 AD 04 0448*  	ld hl,@cmd
04ADC2 01 02 00 00 0449*  	ld bc,@end-@cmd
04ADC6 5B DF       0450*  	rst.lil $18
04ADC8 C9          0451*  	ret
04ADC9 1B          0452*  @cmd: db 27
04ADCA 00          0453*  @arg: db 0  ; ascii code of character to draw
04ADCB             0454*  @end:
04ADCB             0455*  
04ADCB             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04ADCB             0457*  ; MIND THE LITTLE-ENDIANESS
04ADCB             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04ADCB             0459*  ; outputs; nothing
04ADCB             0460*  ; destroys: a might make it out alive
04ADCB             0461*  vdu_set_txt_viewport:
04ADCB ED 43 E1 AD 0462*      ld (@lb),bc
       04          
04ADD0 ED 53 E3 AD 0463*  	ld (@rt),de
       04          
04ADD5 21 E0 AD 04 0464*  	ld hl,@cmd
04ADD9 01 05 00 00 0465*  	ld bc,@end-@cmd
04ADDD 5B DF       0466*  	rst.lil $18
04ADDF C9          0467*  	ret
04ADE0 1C          0468*  @cmd:   db 28 ; set text viewport command
04ADE1 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04ADE3 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04ADE5 00          0471*  @end:   db 0x00	  ; padding
04ADE6             0472*  
04ADE6             0473*  ; PASSES
04ADE6             0474*  ; VDU 29, x; y;: Set graphics origin
04ADE6             0475*  ; inputs: bc,de x,y coordinates
04ADE6             0476*  vdu_set_gfx_origin:
04ADE6 ED 43 FC AD 0477*      ld (@x0),bc
       04          
04ADEB ED 53 FE AD 0478*      ld (@y0),de
       04          
04ADF0 21 FB AD 04 0479*  	ld hl,@cmd
04ADF4 01 05 00 00 0480*  	ld bc,@end-@cmd
04ADF8 5B DF       0481*  	rst.lil $18
04ADFA C9          0482*  	ret
04ADFB 1D          0483*  @cmd:	db 29
04ADFC 00 00       0484*  @x0: 	dw 0
04ADFE 00 00       0485*  @y0: 	dw 0
04AE00 00          0486*  @end: 	db 0 ; padding
04AE01             0487*  
04AE01             0488*  ; PASSES
04AE01             0489*  ; VDU 30: Home cursor
04AE01             0490*  vdu_home_cursor:
04AE01 3E 1E       0491*      ld a,30
04AE03 5B D7       0492*  	rst.lil $10
04AE05 C9          0493*  	ret
04AE06             0494*  
04AE06             0495*  ; PASSES
04AE06             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04AE06             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04AE06             0498*  vdu_move_cursor:
04AE06 ED 43 17 AE 0499*      ld (@x0),bc
       04          
04AE0B 21 16 AE 04 0500*  	ld hl,@cmd
04AE0F 01 03 00 00 0501*  	ld bc,@end-@cmd
04AE13 5B DF       0502*  	rst.lil $18
04AE15 C9          0503*  	ret
04AE16 1F          0504*  @cmd: 	db 31
04AE17 00          0505*  @x0:	db 0
04AE18 00          0506*  @y0: 	db 0
04AE19 00          0507*  @end: 	db 0 ; padding
04AE1A             0508*  
04AE1A             0509*  
04AE1A             0510*  ; VDU 127: Backspace
04AE1A             0511*  vdu_bksp:
04AE1A 3E 7F       0512*      ld a,127
04AE1C 5B D7       0513*  	rst.lil $10
04AE1E C9          0514*  	ret
04AE1F             0515*  
04AE1F             0516*  ; activate a bitmap in preparation to draw it
04AE1F             0517*  ; inputs: a holding the bitmap index
04AE1F             0518*  vdu_bmp_select:
04AE1F 32 31 AE 04 0519*  	ld (@bmp),a
04AE23 21 2E AE 04 0520*  	ld hl,@cmd
04AE27 01 04 00 00 0521*  	ld bc,@end-@cmd
04AE2B 5B DF       0522*  	rst.lil $18
04AE2D C9          0523*  	ret
04AE2E 17 1B 00    0524*  @cmd: db 23,27,0
04AE31 00          0525*  @bmp: db 0
04AE32             0526*  @end:
04AE32             0527*  
04AE32             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AE32             0529*  ; inputs: hl=bufferId
04AE32             0530*  vdu_buff_select:
04AE32 22 44 AE 04 0531*  	ld (@bufferId),hl
04AE36 21 41 AE 04 0532*  	ld hl,@cmd
04AE3A 01 05 00 00 0533*  	ld bc,@end-@cmd
04AE3E 5B DF       0534*  	rst.lil $18
04AE40 C9          0535*  	ret
04AE41 17 1B 20    0536*  @cmd: db 23,27,0x20
04AE44 00 00       0537*  @bufferId: dw 0x0000
04AE46 00          0538*  @end: db 0x00 ; padding
04AE47             0539*  
04AE47             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04AE47             0541*  ; inputs: a=format; bc=width; de=height
04AE47             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04AE47             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04AE47             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04AE47             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04AE47             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04AE47             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04AE47             0548*  vdu_bmp_create:
04AE47 ED 43 63 AE 0549*      ld (@width),bc
       04          
04AE4C ED 53 65 AE 0550*      ld (@height),de
       04          
04AE51 32 67 AE 04 0551*      ld (@fmt),a
04AE55 21 60 AE 04 0552*  	ld hl,@cmd
04AE59 01 08 00 00 0553*  	ld bc,@end-@cmd
04AE5D 5B DF       0554*  	rst.lil $18
04AE5F C9          0555*  	ret
04AE60 17 1B 21    0556*  @cmd:       db 23,27,0x21
04AE63 00 00       0557*  @width:     dw 0x0000
04AE65 00 00       0558*  @height:    dw 0x0000
04AE67 00          0559*  @fmt:       db 0x00
04AE68             0560*  @end:
04AE68             0561*  
04AE68             0562*  ; Draw a bitmap on the screen
04AE68             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04AE68             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04AE68             0565*  vdu_bmp_draw:
04AE68 ED 43 80 AE 0566*      ld (@x0),bc
       04          
04AE6D ED 53 82 AE 0567*      ld (@y0),de
       04          
04AE72 21 7D AE 04 0568*  	ld hl,@cmd
04AE76 01 07 00 00 0569*  	ld bc,@end-@cmd
04AE7A 5B DF       0570*  	rst.lil $18
04AE7C C9          0571*  	ret
04AE7D 17 1B 03    0572*  @cmd: db 23,27,3
04AE80 00 00       0573*  @x0:  dw 0x0000
04AE82 00 00       0574*  @y0:  dw 0x0000
04AE84 00          0575*  @end: db 0x00 ; padding
04AE85             0576*  
04AE85             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04AE85             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04AE85             0579*  ; note: default setting on boot is scaling ON
04AE85             0580*  vdu_set_scaling:
04AE85 32 97 AE 04 0581*  	ld (@arg),a
04AE89 21 94 AE 04 0582*  	ld hl,@cmd
04AE8D 01 04 00 00 0583*  	ld bc,@end-@cmd
04AE91 5B DF       0584*  	rst.lil $18
04AE93 C9          0585*  	ret
04AE94 17 00 C0    0586*  @cmd: db 23,0,0xC0
04AE97 00          0587*  @arg: db 0  ; scaling on/off
04AE98             0588*  @end:
04AE98             0589*  
04AE98             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04AE98             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04AE98             0592*  ; 	(all modes).
04AE98             0593*  
04AE98             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04AE98             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04AE98             0596*  ; 	mode is not double-buffered then this command will wait for the next
04AE98             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04AE98             0598*  ; 	screen with the vertical refresh rate of the monitor.
04AE98             0599*  
04AE98             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04AE98             0601*  ; 	as it will prevent tearing of the screen.
04AE98             0602*  ; inputs: none
04AE98             0603*  ; outputs: none
04AE98             0604*  ; destroys: hl, bc
04AE98             0605*  vdu_flip:
04AE98 21 A3 AE 04 0606*  	ld hl,@cmd
04AE9C 01 03 00 00 0607*  	ld bc,@end-@cmd
04AEA0 5B DF       0608*  	rst.lil $18
04AEA2 C9          0609*  	ret
04AEA3 17 00 C3    0610*  @cmd: db 23,0,0xC3
04AEA6             0611*  @end:
04AEA6             0612*  
04AEA6             0613*  ; Command 64: Compress a buffer
04AEA6             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04AEA6             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AEA6             0616*  
04AEA6             0617*  
04AEA6             0618*  ; Command 65: Decompress a buffer
04AEA6             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AEA6             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AEA6             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04AEA6             0622*  vdu_decompress_buffer:
04AEA6 22 C2 AE 04 0623*  	ld (@targetBufferId),hl
04AEAA 22 C5 AE 04 0624*  	ld (@sourceBufferId),hl
04AEAE 3E 41       0625*  	ld a,65
04AEB0 32 C4 AE 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AEB4 21 BF AE 04 0627*  	ld hl,@cmd
04AEB8 01 08 00 00 0628*  	ld bc,@end-@cmd
04AEBC 5B DF       0629*  	rst.lil $18
04AEBE C9          0630*  	ret
04AEBF 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04AEC2 00 00       0632*  @targetBufferId: dw 0x0000
04AEC4 41          0633*  @cmd1:	db 65
04AEC5 00 00       0634*  @sourceBufferId: dw 0x0000
04AEC7 00          0635*  @end: 	db 0x00 ; padding
04AEC8             0636*  
04AEC8             0637*  ; Command 65: Decompress a buffer
04AEC8             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AEC8             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AEC8             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04AEC8             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04AEC8             0642*  vdu_decompress_buffer_different:
04AEC8 22 E8 AE 04 0643*  	ld (@targetBufferId),hl
04AECC 21 FF 7F 00 0644*      ld hl,0x7FFF
04AED0 22 EB AE 04 0645*  	ld (@sourceBufferId),hl
04AED4 3E 41       0646*  	ld a,65
04AED6 32 EA AE 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AEDA 21 E5 AE 04 0648*  	ld hl,@cmd
04AEDE 01 08 00 00 0649*  	ld bc,@end-@cmd
04AEE2 5B DF       0650*  	rst.lil $18
04AEE4 C9          0651*  	ret
04AEE5 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04AEE8 00 00       0653*  @targetBufferId: dw 0x0000
04AEEA 41          0654*  @cmd1:	db 65
04AEEB 00 00       0655*  @sourceBufferId: dw 0x0000
04AEED 00          0656*  @end: 	db 0x00 ; padding
04AEEE             0657*  
04AEEE             0658*  ; #### from vdp.asm ####
04AEEE             0659*  
04AEEE             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04AEEE             0661*  ; VDU 23, 7: Scrolling
04AEEE             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04AEEE             0663*  ; inputs: a, extent; l, direction; h; speed
04AEEE             0664*  vdu_scroll_down:
04AEEE 32 03 AF 04 0665*  	ld (@extent),a
04AEF2 22 04 AF 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04AEF6 21 01 AF 04 0667*  	ld hl,@cmd
04AEFA 01 05 00 00 0668*  	ld bc,@end-@cmd
04AEFE 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04AF00 C9          0670*  	ret
04AF01 17 07       0671*  @cmd:       db 23,7
04AF03 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04AF04 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04AF05 00          0674*  @speed:     db 0x00 ; pixels
04AF06 00          0675*  @end:		db 0x00 ; padding
04AF07             0676*  
04AF07             0677*  cursor_on:
04AF07 21 12 AF 04 0678*  	ld hl,@cmd
04AF0B 01 03 00 00 0679*  	ld bc,@end-@cmd
04AF0F 5B DF       0680*  	rst.lil $18
04AF11 C9          0681*  	ret
04AF12             0682*  @cmd:
04AF12 17 01 01    0683*  	db 23,1,1
04AF15             0684*  @end:
04AF15             0685*  
04AF15             0686*  cursor_off:
04AF15 21 20 AF 04 0687*  	ld hl,@cmd
04AF19 01 03 00 00 0688*  	ld bc,@end-@cmd
04AF1D 5B DF       0689*  	rst.lil $18
04AF1F C9          0690*  	ret
04AF20             0691*  @cmd:
04AF20 17 01 00    0692*  	db 23,1,0
04AF23             0693*  @end:
04AF23             0694*  
04AF23 DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04AF25             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04AF25 3E 08       0001*M 			LD	A, function
04AF27 5B CF       0002*M 			RST.LIL	08h
04AF29 DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04AF2C DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04AF2F 28 FB       0699*  			JR	Z, @wait
04AF31 DD E1       0700*  			POP	IX
04AF33 C9          0701*  			RET
04AF34             0702*  
04AF34             0703*  ; #### from vdu_bmp.asm ####
04AF34             0704*  ; =========================================================================
04AF34             0705*  ; Bitmaps
04AF34             0706*  ; -------------------------------------------------------------------------
04AF34             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04AF34             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04AF34             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04AF34             0710*  
04AF34             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04AF34             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04AF34             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04AF34             0714*  ; typically "move" style plot commands are used to define the rectangle.
04AF34             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04AF34             0716*  ; inputs: hl; target bufferId
04AF34             0717*  ; all the following are in 16.8 fixed point format
04AF34             0718*  ;   ub.c; top-left x coordinate
04AF34             0719*  ;   ud.e; top-left y coordinate
04AF34             0720*  ;   ui.x; width
04AF34             0721*  ;   ui.y; height
04AF34             0722*  vdu_buff_screen_capture168:
04AF34 ED 53 6B AF 0723*          ld (@y0-1),de
       04          
04AF39 ED 43 69 AF 0724*          ld (@x0-1),bc
       04          
04AF3E 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04AF40 32 69 AF 04 0726*          ld (@x0-1),a
04AF44             0727*  
04AF44 DD 22 70 AF 0728*          ld (@x1),ix
       04          
04AF49 FD 22 72 AF 0729*          ld (@y1),iy
       04          
04AF4E 3E 17       0730*          ld a,23
04AF50 32 74 AF 04 0731*          ld (@y1+2),a
04AF54             0732*  
04AF54 22 77 AF 04 0733*          ld (@bufId),hl
04AF58 AF          0734*          xor a
04AF59 32 79 AF 04 0735*          ld (@bufId+2),a
04AF5D             0736*  
04AF5D 21 68 AF 04 0737*          ld hl,@begin
04AF61 01 13 00 00 0738*          ld bc,@end-@begin
04AF65 5B DF       0739*          rst.lil $18
04AF67 C9          0740*          ret
04AF68             0741*  @begin:
04AF68             0742*  ; absolute move gfx cursor to top-left screen coordinate
04AF68             0743*  ; VDU 25, mode, x; y;: PLOT command
04AF68 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04AF6A 40 00       0745*  @x0: 	dw 64
04AF6C 40 00       0746*  @y0: 	dw 64
04AF6E             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04AF6E             0748*  ; VDU 25, mode, x; y;: PLOT command
04AF6E 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04AF70 0F 00       0750*  @x1: 	dw 15
04AF72 0F 00       0751*  @y1: 	dw 15
04AF74             0752*  ; now the main event
04AF74             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04AF74 17 1B 21    0754*          db 23,27,0x21
04AF77 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04AF7B             0756*  @end: ; no padding required
04AF7B             0757*  
04AF7B             0758*  vdu_buff_screen_capture_full:
04AF7B 21 86 AF 04 0759*          ld hl,@begin
04AF7F 01 13 00 00 0760*          ld bc,@end-@begin
04AF83 5B DF       0761*          rst.lil $18
04AF85 C9          0762*          ret
04AF86             0763*  @begin:
04AF86             0764*  ; absolute move gfx cursor to top-left screen coordinate
04AF86             0765*  ; VDU 25, mode, x; y;: PLOT command
04AF86 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04AF88 00 00       0767*  @x0: 	dw 0
04AF8A 00 00       0768*  @y0: 	dw 0
04AF8C             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04AF8C             0770*  ; VDU 25, mode, x; y;: PLOT command
04AF8C 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04AF8E 3F 01       0772*  @x1: 	dw 319
04AF90 EF 00       0773*  @y1: 	dw 239
04AF92             0774*  ; now the main event
04AF92             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04AF92 17 1B 21    0776*          db 23,27,0x21
04AF95 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04AF99             0778*  @end: ; no padding required
04AF99             0779*  
04AF99             0780*  vdu_buff_screen_paste_full:
04AF99 21 A4 AF 04 0781*          ld hl,@begin
04AF9D 01 0B 00 00 0782*          ld bc,@end-@begin
04AFA1 5B DF       0783*          rst.lil $18
04AFA3 C9          0784*          ret
04AFA4             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AFA4 17 1B 20    0786*  @begin:    db 23,27,0x20
04AFA7 00 20       0787*  @bufferId: dw 0x2000
04AFA9             0788*  ; VDU 25, mode, x; y;: PLOT command
04AFA9 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04AFAB 00 00 00 00 0790*             dw 0x0000,0x0000
04AFAF             0791*  @end: ; no padding required
04AFAF             0792*  
04AFAF             0793*  vdu_buff_screen_capture_tiles:
04AFAF 21 BA AF 04 0794*          ld hl,@begin
04AFB3 01 13 00 00 0795*          ld bc,@end-@begin
04AFB7 5B DF       0796*          rst.lil $18
04AFB9 C9          0797*          ret
04AFBA             0798*  @begin:
04AFBA             0799*  ; absolute move gfx cursor to top-left screen coordinate
04AFBA             0800*  ; VDU 25, mode, x; y;: PLOT command
04AFBA 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04AFBC 00 00       0802*  @x0: 	dw 0
04AFBE 00 00       0803*  @y0: 	dw 0
04AFC0             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04AFC0             0805*  ; VDU 25, mode, x; y;: PLOT command
04AFC0 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04AFC2 FF 00       0807*  @x1: 	dw 319-64
04AFC4 EF 00       0808*  @y1: 	dw 239
04AFC6             0809*  ; now the main event
04AFC6             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04AFC6 17 1B 21    0811*          db 23,27,0x21
04AFC9 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04AFCD             0813*  @end: ; no padding required
04AFCD             0814*  
04AFCD             0815*  vdu_buff_screen_paste_tiles:
04AFCD 21 D8 AF 04 0816*          ld hl,@begin
04AFD1 01 0B 00 00 0817*          ld bc,@end-@begin
04AFD5 5B DF       0818*          rst.lil $18
04AFD7 C9          0819*          ret
04AFD8             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AFD8 17 1B 20    0821*  @begin:    db 23,27,0x20
04AFDB 00 20       0822*  @bufferId: dw 0x2000
04AFDD             0823*  ; VDU 25, mode, x; y;: PLOT command
04AFDD 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04AFDF 00 00 01 00 0825*             dw 0x0000,0x0001
04AFE3             0826*  @end: ; no padding required
04AFE3             0827*  
04AFE3             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04AFE3             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04AFE3             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04AFE3             0831*  ; Value	Meaning
04AFE3             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04AFE3             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04AFE3             0834*  ; 2	Mono/Mask (1-bit per pixel)
04AFE3             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04AFE3             0836*  ;     They have some significant limitations, and are not intended for general use.
04AFE3             0837*  
04AFE3             0838*  ; =========================================================================
04AFE3             0839*  ; Sprites
04AFE3             0840*  ; -------------------------------------------------------------------------
04AFE3             0841*  ; VDU 23, 27, 4, n: Select sprite n
04AFE3             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04AFE3             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AFE3             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AFE3             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04AFE3             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04AFE3             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04AFE3             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AFE3             0849*  ; VDU 23, 27, 11: Show current sprite
04AFE3             0850*  ; VDU 23, 27, 12: Hide current sprite
04AFE3             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AFE3             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AFE3             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AFE3             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AFE3             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AFE3             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AFE3             0857*  
04AFE3             0858*  ; =========================================================================
04AFE3             0859*  ; Mouse cursor
04AFE3             0860*  ; -------------------------------------------------------------------------
04AFE3             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04AFE3             0862*  
04AFE3             0863*  ; #### from vdu_plot.asm ####
04AFE3             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04AFE3             0865*  ; PLOT code 	(Decimal) 	Effect
04AFE3             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04AFE3             0867*  plot_sl_both: equ 0x00
04AFE3             0868*  
04AFE3             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04AFE3             0870*  plot_sl_first: equ 0x08
04AFE3             0871*  
04AFE3             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04AFE3             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04AFE3             0874*  
04AFE3             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04AFE3             0876*  plot_sl_last: equ 0x20
04AFE3             0877*  
04AFE3             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04AFE3             0879*  plot_sl_none: equ 0x28
04AFE3             0880*  
04AFE3             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04AFE3             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04AFE3             0883*  
04AFE3             0884*  ; &40-&47 	64-71 	Point plot
04AFE3             0885*  plot_pt: equ 0x40
04AFE3             0886*  
04AFE3             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04AFE3             0888*  plot_lf_lr_non_bg: equ 0x48
04AFE3             0889*  
04AFE3             0890*  ; &50-&57 	80-87 	Triangle fill
04AFE3             0891*  plot_tf: equ 0x50
04AFE3             0892*  
04AFE3             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04AFE3             0894*  plot_lf_r_bg: equ 0x58
04AFE3             0895*  
04AFE3             0896*  ; &60-&67 	96-103 	Rectangle fill
04AFE3             0897*  plot_rf: equ 0x60
04AFE3             0898*  
04AFE3             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04AFE3             0900*  plot_lf_lr_fg: equ 0x60
04AFE3             0901*  
04AFE3             0902*  ; &70-&77 	112-119 	Parallelogram fill
04AFE3             0903*  plot_pf: equ 0x70
04AFE3             0904*  
04AFE3             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04AFE3             0906*  plot_lf_r_non_fg: equ 0x78
04AFE3             0907*  
04AFE3             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04AFE3             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04AFE3             0910*  
04AFE3             0911*  ; &90-&97 	144-151 	Circle outline
04AFE3             0912*  plot_co: equ 0x90
04AFE3             0913*  
04AFE3             0914*  ; &98-&9F 	152-159 	Circle fill
04AFE3             0915*  plot_cf: equ 0x98
04AFE3             0916*  
04AFE3             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04AFE3             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04AFE3             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04AFE3             0920*  
04AFE3             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04AFE3             0922*  plot_rcm: equ 0xB8
04AFE3             0923*  
04AFE3             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04AFE3             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04AFE3             0926*  ; &D0-&D7 	208-215 	Not defined
04AFE3             0927*  ; &D8-&DF 	216-223 	Not defined
04AFE3             0928*  ; &E0-&E7 	224-231 	Not defined
04AFE3             0929*  
04AFE3             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04AFE3             0931*  plot_bmp: equ 0xE8
04AFE3             0932*  
04AFE3             0933*  ; &F0-&F7 	240-247 	Not defined
04AFE3             0934*  ; &F8-&FF 	248-255 	Not defined
04AFE3             0935*  
04AFE3             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04AFE3             0937*  ; Agon Console8 VDP 2.2.0
04AFE3             0938*  
04AFE3             0939*  ; Within each group of eight plot codes, the effects are as follows:
04AFE3             0940*  ; Plot code 	Effect
04AFE3             0941*  ; 0 	Move relative
04AFE3             0942*  mv_rel: equ 0
04AFE3             0943*  
04AFE3             0944*  ; 1 	Plot relative in current foreground colour
04AFE3             0945*  dr_rel_fg: equ 1
04AFE3             0946*  
04AFE3             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04AFE3             0948*  ; 3 	Plot relative in current background colour
04AFE3             0949*  dr_rel_bg: equ 3
04AFE3             0950*  
04AFE3             0951*  ; 4 	Move absolute
04AFE3             0952*  mv_abs: equ 4
04AFE3             0953*  
04AFE3             0954*  ; 5 	Plot absolute in current foreground colour
04AFE3             0955*  dr_abs_fg: equ 5
04AFE3             0956*  
04AFE3             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04AFE3             0958*  ; 7 	Plot absolute in current background colour
04AFE3             0959*  dr_abs_bg: equ 7
04AFE3             0960*  
04AFE3             0961*  ; Codes 0-3 use the position data provided as part of the command
04AFE3             0962*  ; as a relative position, adding the position given to the current
04AFE3             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04AFE3             0964*  ; as part of the command as an absolute position, setting the current
04AFE3             0965*  ; graphical cursor position to the position given.
04AFE3             0966*  
04AFE3             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04AFE3             0968*  ; current pixel colour. These operations cannot currently be supported
04AFE3             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04AFE3             0970*  ; supported. Support for these codes may be added in a future version
04AFE3             0971*  ; of the VDP firmware.
04AFE3             0972*  
04AFE3             0973*  ; 16 colour palette constants
04AFE3             0974*  c_black: equ 0
04AFE3             0975*  c_red_dk: equ 1
04AFE3             0976*  c_green_dk: equ 2
04AFE3             0977*  c_yellow_dk: equ 3
04AFE3             0978*  c_blue_dk: equ 4
04AFE3             0979*  c_magenta_dk: equ 5
04AFE3             0980*  c_cyan_dk: equ 6
04AFE3             0981*  c_grey: equ 7
04AFE3             0982*  c_grey_dk: equ 8
04AFE3             0983*  c_red: equ 9
04AFE3             0984*  c_green: equ 10
04AFE3             0985*  c_yellow: equ 11
04AFE3             0986*  c_blue: equ 12
04AFE3             0987*  c_magenta: equ 13
04AFE3             0988*  c_cyan: equ 14
04AFE3             0989*  c_white: equ 15
04AFE3             0990*  
04AFE3             0991*  ; VDU 25, mode, x; y;: PLOT command
04AFE3             0992*  ; inputs: a=mode, bc=x0, de=y0
04AFE3             0993*  vdu_plot:
04AFE3 32 FD AF 04 0994*      ld (@mode),a
04AFE7 ED 43 FE AF 0995*      ld (@x0),bc
       04          
04AFEC ED 53 00 B0 0996*      ld (@y0),de
       04          
04AFF1 21 FC AF 04 0997*  	ld hl,@cmd
04AFF5 01 06 00 00 0998*  	ld bc,@end-@cmd
04AFF9 5B DF       0999*  	rst.lil $18
04AFFB C9          1000*  	ret
04AFFC 19          1001*  @cmd:   db 25
04AFFD 00          1002*  @mode:  db 0
04AFFE 00 00       1003*  @x0: 	dw 0
04B000 00 00       1004*  @y0: 	dw 0
04B002 00          1005*  @end:   db 0 ; extra byte to soak up deu
04B003             1006*  
04B003             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B003             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04B003             1009*  ; VDU 25, mode, x; y;: PLOT command
04B003             1010*  ; inputs: bc=x0, de=y0
04B003             1011*  ; prerequisites: vdu_buff_select
04B003             1012*  vdu_plot_bmp:
04B003 ED 43 1A B0 1013*      ld (@x0),bc
       04          
04B008 ED 53 1C B0 1014*      ld (@y0),de
       04          
04B00D 21 18 B0 04 1015*  	ld hl,@cmd
04B011 01 06 00 00 1016*  	ld bc,@end-@cmd
04B015 5B DF       1017*  	rst.lil $18
04B017 C9          1018*  	ret
04B018 19          1019*  @cmd:   db 25
04B019 ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04B01A 00 00       1021*  @x0: 	dw 0x0000
04B01C 00 00       1022*  @y0: 	dw 0x0000
04B01E 00          1023*  @end:   db 0x00 ; padding
04B01F             1024*  
04B01F             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B01F             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04B01F             1027*  ; VDU 25, mode, x; y;: PLOT command
04B01F             1028*  ; inputs: bc=x0, de=y0
04B01F             1029*  ; USING 16.8 FIXED POINT COORDINATES
04B01F             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B01F             1031*  ;   the fractional portiion of the inputs are truncated
04B01F             1032*  ;   leaving only the 16-bit integer portion
04B01F             1033*  ; prerequisites: vdu_buff_select
04B01F             1034*  vdu_plot_bmp168:
04B01F             1035*  ; populate in the reverse of normal to keep the
04B01F             1036*  ; inputs from stomping on each other
04B01F ED 53 3D B0 1037*      ld (@y0-1),de
       04          
04B024 ED 43 3B B0 1038*      ld (@x0-1),bc
       04          
04B029 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04B02B 32 3B B0 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04B02F 21 3A B0 04 1041*  	ld hl,@cmd
04B033 01 06 00 00 1042*  	ld bc,@end-@cmd
04B037 5B DF       1043*  	rst.lil $18
04B039 C9          1044*  	ret
04B03A 19          1045*  @cmd:   db 25
04B03B ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04B03C 00 00       1047*  @x0: 	dw 0x0000
04B03E 00 00       1048*  @y0: 	dw 0x0000
04B040             1049*  @end:  ; no padding required b/c we shifted de right
04B040             1050*  
04B040             1051*  ; draw a filled rectangle
04B040             1052*  vdu_plot_rf:
04B040 ED 43 67 B0 1053*      ld (@x0),bc
       04          
04B045 ED 53 69 B0 1054*      ld (@y0),de
       04          
04B04A DD 22 6D B0 1055*      ld (@x1),ix
       04          
04B04F FD 22 6F B0 1056*      ld (@y1),iy
       04          
04B054 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04B056 32 6B B0 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04B05A 21 65 B0 04 1059*  	ld hl,@cmd0
04B05E 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04B062 5B DF       1061*  	rst.lil $18
04B064 C9          1062*      ret
04B065 19          1063*  @cmd0:  db 25 ; plot
04B066 04          1064*  @arg0:  db plot_sl_both+mv_abs
04B067 00 00       1065*  @x0:    dw 0x0000
04B069 00 00       1066*  @y0:    dw 0x0000
04B06B 19          1067*  @cmd1:  db 25 ; plot
04B06C 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04B06D 00 00       1069*  @x1:    dw 0x0000
04B06F 00 00       1070*  @y1:    dw 0x0000
04B071 00          1071*  @end:   db 0x00 ; padding
04B072             1072*  
04B072             1073*  ; draw a filled circle
04B072             1074*  vdu_plot_cf:
04B072 ED 43 99 B0 1075*      ld (@x0),bc
       04          
04B077 ED 53 9B B0 1076*      ld (@y0),de
       04          
04B07C DD 22 9F B0 1077*      ld (@x1),ix
       04          
04B081 FD 22 A1 B0 1078*      ld (@y1),iy
       04          
04B086 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04B088 32 9D B0 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04B08C 21 97 B0 04 1081*  	ld hl,@cmd0
04B090 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04B094 5B DF       1083*  	rst.lil $18
04B096 C9          1084*      ret
04B097 19          1085*  @cmd0:  db 25 ; plot
04B098 04          1086*  @arg0:  db plot_sl_both+mv_abs
04B099 00 00       1087*  @x0:    dw 0x0000
04B09B 00 00       1088*  @y0:    dw 0x0000
04B09D 19          1089*  @cmd1:  db 25 ; plot
04B09E 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04B09F 00 00       1091*  @x1:    dw 0x0000
04B0A1 00 00       1092*  @y1:    dw 0x0000
04B0A3 00          1093*  @end:   db 0x00 ; padding
04B0A4             1094*  
04B0A4             1095*  ; #### from vdu_sprites.asm ####
04B0A4             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04B0A4             1097*  ; the VDP can support up to 256 sprites. They must be defined
04B0A4             1098*  ; contiguously, and so the first sprite is sprite 0.
04B0A4             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04B0A4             1100*  ; Once a selection of sprites have been defined, you can activate
04B0A4             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04B0A4             1102*  ; of sprites to activate. This will activate the first n sprites,
04B0A4             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04B0A4             1104*  
04B0A4             1105*  ; A single sprite can have multiple "frames", referring to
04B0A4             1106*  ; different bitmaps.
04B0A4             1107*  ; (These bitmaps do not need to be the same size.)
04B0A4             1108*  ; This allows a sprite to include an animation sequence,
04B0A4             1109*  ; which can be stepped through one frame at a time, or picked
04B0A4             1110*  ; in any order.
04B0A4             1111*  
04B0A4             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04B0A4             1113*  ; be noted however that "native" format bitmaps are not
04B0A4             1114*  ; recommended for use as sprite frames, as they cannot get
04B0A4             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04B0A4             1116*  ; format is not really intended for general use.) This is part
04B0A4             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04B0A4             1118*  ; screen are now stored in RGBA2222 format.
04B0A4             1119*  
04B0A4             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04B0A4             1121*  ; and then later shown again.
04B0A4             1122*  
04B0A4             1123*  ; Moving sprites around the screen is done by changing the
04B0A4             1124*  ; position of the sprite. This can be done either by setting
04B0A4             1125*  ; the absolute position of the sprite, or by moving the sprite
04B0A4             1126*  ; by a given number of pixels. (Sprites are positioned using
04B0A4             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04B0A4             1128*  ; In the current sprite system, sprites will not update their
04B0A4             1129*  ; position on-screen until either another drawing operation is
04B0A4             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04B0A4             1131*  
04B0A4             1132*  ; Here are the sprite commands:
04B0A4             1133*  ;
04B0A4             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04B0A4             1135*  ; inputs: a is the 8-bit sprite id
04B0A4             1136*  ; vdu_sprite_select:
04B0A4             1137*  
04B0A4             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04B0A4             1139*  ; inputs: none
04B0A4             1140*  ; prerequisites: vdu_sprite_select
04B0A4             1141*  ; vdu_sprite_clear_frames:
04B0A4             1142*  
04B0A4             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B0A4             1144*  ; inputs: a is the 8-bit bitmap number
04B0A4             1145*  ; prerequisites: vdu_sprite_select
04B0A4             1146*  ; vdu_sprite_add_bmp:
04B0A4             1147*  
04B0A4             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04B0A4             1149*  ; inputs: a is the number of sprites to activate
04B0A4             1150*  ; vdu_sprite_activate:
04B0A4             1151*  
04B0A4             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04B0A4             1153*  ; inputs: none
04B0A4             1154*  ; prerequisites: vdu_sprite_select
04B0A4             1155*  ; vdu_sprite_next_frame:
04B0A4             1156*  
04B0A4             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04B0A4             1158*  ; inputs: none
04B0A4             1159*  ; prerequisites: vdu_sprite_select
04B0A4             1160*  ; vdu_sprite_prev_frame:
04B0A4             1161*  
04B0A4             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B0A4             1163*  ; inputs: a is frame number to select
04B0A4             1164*  ; prerequisites: vdu_sprite_select
04B0A4             1165*  ; vdu_sprite_select_frame:
04B0A4             1166*  
04B0A4             1167*  ; VDU 23, 27, 11: Show current sprite
04B0A4             1168*  ; inputs: none
04B0A4             1169*  ; prerequisites: vdu_sprite_select
04B0A4             1170*  ; vdu_sprite_show:
04B0A4             1171*  
04B0A4             1172*  ; VDU 23, 27, 12: Hide current sprite
04B0A4             1173*  ; inputs: none
04B0A4             1174*  ; prerequisites: vdu_sprite_select
04B0A4             1175*  ; vdu_sprite_hide:
04B0A4             1176*  
04B0A4             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B0A4             1178*  ; inputs: bc is x coordinate, de is y coordinate
04B0A4             1179*  ; prerequisites: vdu_sprite_select
04B0A4             1180*  ; vdu_sprite_move_abs:
04B0A4             1181*  ;
04B0A4             1182*  ; USING 16.8 FIXED POINT COORDINATES
04B0A4             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B0A4             1184*  ;   the fractional portiion of the inputs are truncated
04B0A4             1185*  ;   leaving only the 16-bit integer portion
04B0A4             1186*  ; prerequisites: vdu_sprite_select
04B0A4             1187*  ; vdu_sprite_move_abs168:
04B0A4             1188*  
04B0A4             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B0A4             1190*  ; inputs: bc is x coordinate, de is y coordinate
04B0A4             1191*  ; prerequisites: vdu_sprite_select
04B0A4             1192*  ; vdu_sprite_move_rel:
04B0A4             1193*  ;
04B0A4             1194*  ; USING 16.8 FIXED POINT COORDINATES
04B0A4             1195*  ; inputs: ub.c is dx, ud.e is dy
04B0A4             1196*  ;   the fractional portiion of the inputs are truncated
04B0A4             1197*  ;   leaving only the 16-bit integer portion
04B0A4             1198*  ; prerequisites: vdu_sprite_select
04B0A4             1199*  ; vdu_sprite_move_rel168:
04B0A4             1200*  
04B0A4             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B0A4             1202*  ; inputs: none
04B0A4             1203*  ; vdu_sprite_update:
04B0A4             1204*  
04B0A4             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B0A4             1206*  ; inputs: none
04B0A4             1207*  ; vdu_sprite_bmp_reset:
04B0A4             1208*  
04B0A4             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B0A4             1210*  ; inputs: none
04B0A4             1211*  ; vdu_sprite_reset:
04B0A4             1212*  
04B0A4             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B0A4             1214*  ; inputs: a is the GCOL paint mode
04B0A4             1215*  ; prerequisites: vdu_sprite_select
04B0A4             1216*  ; vdu_sprite_set_gcol:
04B0A4             1217*  
04B0A4             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04B0A4             1219*  ; inputs: hl=bufferId
04B0A4             1220*  ; prerequisites: vdu_sprite_select
04B0A4             1221*  ; vdu_sprite_add_buff:
04B0A4             1222*  
04B0A4             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04B0A4             1224*  
04B0A4             1225*  ; VDU 23, 27, 4, n: Select sprite n
04B0A4             1226*  ; inputs: a is the 8-bit sprite id
04B0A4             1227*  vdu_sprite_select:
04B0A4 32 B6 B0 04 1228*      ld (@sprite),a
04B0A8 21 B3 B0 04 1229*      ld hl,@cmd
04B0AC 01 04 00 00 1230*      ld bc,@end-@cmd
04B0B0 5B DF       1231*      rst.lil $18
04B0B2 C9          1232*      ret
04B0B3 17 1B 04    1233*  @cmd:    db 23,27,4
04B0B6 00          1234*  @sprite: db 0x00
04B0B7             1235*  @end:
04B0B7             1236*  
04B0B7             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04B0B7             1238*  ; inputs: none
04B0B7             1239*  ; prerequisites: vdu_sprite_select
04B0B7             1240*  vdu_sprite_clear_frames:
04B0B7 21 C2 B0 04 1241*      ld hl,@cmd
04B0BB 01 03 00 00 1242*      ld bc,@end-@cmd
04B0BF 5B DF       1243*      rst.lil $18
04B0C1 C9          1244*      ret
04B0C2 17 1B 05    1245*  @cmd: db 23,27,5
04B0C5             1246*  @end:
04B0C5             1247*  
04B0C5             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B0C5             1249*  ; inputs: a is the 8-bit bitmap number
04B0C5             1250*  ; prerequisites: vdu_sprite_select
04B0C5             1251*  vdu_sprite_add_bmp:
04B0C5 32 D7 B0 04 1252*      ld (@bmp),a
04B0C9 21 D4 B0 04 1253*      ld hl,@cmd
04B0CD 01 04 00 00 1254*      ld bc,@end-@cmd
04B0D1 5B DF       1255*      rst.lil $18
04B0D3 C9          1256*      ret
04B0D4 17 1B 06    1257*  @cmd: db 23,27,6
04B0D7 00          1258*  @bmp: db 0x00
04B0D8             1259*  @end:
04B0D8             1260*  
04B0D8             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04B0D8             1262*  ; inputs: a is the number of sprites to activate
04B0D8             1263*  vdu_sprite_activate:
04B0D8 32 EA B0 04 1264*      ld (@num),a
04B0DC 21 E7 B0 04 1265*      ld hl,@cmd
04B0E0 01 04 00 00 1266*      ld bc,@end-@cmd
04B0E4 5B DF       1267*      rst.lil $18
04B0E6 C9          1268*      ret
04B0E7 17 1B 07    1269*  @cmd: db 23,27,7
04B0EA 00          1270*  @num: db 0x00
04B0EB             1271*  @end:
04B0EB             1272*  
04B0EB             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04B0EB             1274*  ; inputs: none
04B0EB             1275*  ; prerequisites: vdu_sprite_select
04B0EB             1276*  vdu_sprite_next_frame:
04B0EB 21 F6 B0 04 1277*      ld hl,@cmd
04B0EF 01 03 00 00 1278*      ld bc,@end-@cmd
04B0F3 5B DF       1279*      rst.lil $18
04B0F5 C9          1280*      ret
04B0F6 17 1B 08    1281*  @cmd: db 23,27,8
04B0F9             1282*  @end:
04B0F9             1283*  
04B0F9             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04B0F9             1285*  ; inputs: none
04B0F9             1286*  ; prerequisites: vdu_sprite_select
04B0F9             1287*  vdu_sprite_prev_frame:
04B0F9 21 04 B1 04 1288*      ld hl,@cmd
04B0FD 01 03 00 00 1289*      ld bc,@end-@cmd
04B101 5B DF       1290*      rst.lil $18
04B103 C9          1291*      ret
04B104 17 1B 09    1292*  @cmd: db 23,27,9
04B107             1293*  @end:
04B107             1294*  
04B107             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B107             1296*  ; inputs: a is frame number to select
04B107             1297*  ; prerequisites: vdu_sprite_select
04B107             1298*  vdu_sprite_select_frame:
04B107 32 19 B1 04 1299*      ld (@frame),a
04B10B 21 16 B1 04 1300*      ld hl,@cmd
04B10F 01 04 00 00 1301*      ld bc,@end-@cmd
04B113 5B DF       1302*      rst.lil $18
04B115 C9          1303*      ret
04B116 17 1B 0A    1304*  @cmd:    db 23,27,10
04B119 00          1305*  @frame:  db 0x00
04B11A             1306*  @end:
04B11A             1307*  
04B11A             1308*  ; VDU 23, 27, 11: Show current sprite
04B11A             1309*  ; inputs: none
04B11A             1310*  ; prerequisites: vdu_sprite_select
04B11A             1311*  vdu_sprite_show:
04B11A 21 25 B1 04 1312*      ld hl,@cmd
04B11E 01 03 00 00 1313*      ld bc,@end-@cmd
04B122 5B DF       1314*      rst.lil $18
04B124 C9          1315*      ret
04B125 17 1B 0B    1316*  @cmd: db 23,27,11
04B128             1317*  @end:
04B128             1318*  
04B128             1319*  ; VDU 23, 27, 12: Hide current sprite
04B128             1320*  ; inputs: none
04B128             1321*  ; prerequisites: vdu_sprite_select
04B128             1322*  vdu_sprite_hide:
04B128 21 33 B1 04 1323*      ld hl,@cmd
04B12C 01 03 00 00 1324*      ld bc,@end-@cmd
04B130 5B DF       1325*      rst.lil $18
04B132 C9          1326*      ret
04B133 17 1B 0C    1327*  @cmd: db 23,27,12
04B136             1328*  @end:
04B136             1329*  
04B136             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B136             1331*  ; inputs: bc is x coordinate, de is y coordinate
04B136             1332*  ; prerequisites: vdu_sprite_select
04B136             1333*  vdu_sprite_move_abs:
04B136 ED 43 4E B1 1334*      ld (@xpos),bc
       04          
04B13B ED 53 50 B1 1335*      ld (@ypos),de
       04          
04B140 21 4B B1 04 1336*      ld hl,@cmd
04B144 01 07 00 00 1337*      ld bc,@end-@cmd
04B148 5B DF       1338*      rst.lil $18
04B14A C9          1339*      ret
04B14B 17 1B 0D    1340*  @cmd:  db 23,27,13
04B14E 00 00       1341*  @xpos: dw 0x0000
04B150 00 00       1342*  @ypos: dw 0x0000
04B152 00          1343*  @end:  db 0x00 ; padding
04B153             1344*  
04B153             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B153             1346*  ; inputs: bc is x coordinate, de is y coordinate
04B153             1347*  ; prerequisites: vdu_sprite_select
04B153             1348*  vdu_sprite_move_rel:
04B153 ED 43 6B B1 1349*      ld (@dx),bc
       04          
04B158 ED 53 6D B1 1350*      ld (@dy),de
       04          
04B15D 21 68 B1 04 1351*      ld hl,@cmd
04B161 01 07 00 00 1352*      ld bc,@end-@cmd
04B165 5B DF       1353*      rst.lil $18
04B167 C9          1354*      ret
04B168 17 1B 0E    1355*  @cmd: db 23,27,14
04B16B 00 00       1356*  @dx:  dw 0x0000
04B16D 00 00       1357*  @dy:  dw 0x0000
04B16F 00          1358*  @end: db 0x00 ; padding
04B170             1359*  
04B170             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B170             1361*  ; USING 16.8 FIXED POINT COORDINATES
04B170             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B170             1363*  ;   the fractional portiion of the inputs are truncated
04B170             1364*  ;   leaving only the 16-bit integer portion
04B170             1365*  ; prerequisites: vdu_sprite_select
04B170             1366*  vdu_sprite_move_abs168:
04B170             1367*  ; populate in the reverse of normal to keep the
04B170             1368*  ; inputs from stomping on each other
04B170 ED 53 8F B1 1369*      ld (@ypos-1),de
       04          
04B175 ED 43 8D B1 1370*      ld (@xpos-1),bc
       04          
04B17A 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04B17C 32 8D B1 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04B180 21 8B B1 04 1373*      ld hl,@cmd
04B184 01 07 00 00 1374*      ld bc,@end-@cmd
04B188 5B DF       1375*      rst.lil $18
04B18A C9          1376*      ret
04B18B 17 1B 0D    1377*  @cmd:  db 23,27,13
04B18E 00 00       1378*  @xpos: dw 0x0000
04B190 00 00       1379*  @ypos: dw 0x0000
04B192             1380*  @end:  ; no padding required b/c we shifted de right
04B192             1381*  
04B192             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B192             1383*  ; USING 16.8 FIXED POINT COORDINATES
04B192             1384*  ; inputs: ub.c is dx, ud.e is dy
04B192             1385*  ;   the fractional portiion of the inputs are truncated
04B192             1386*  ;   leaving only the 16-bit integer portion
04B192             1387*  ; prerequisites: vdu_sprite_select
04B192             1388*  vdu_sprite_move_rel168:
04B192             1389*  ; populate in the reverse of normal to keep the
04B192             1390*  ; inputs from stomping on each other
04B192 ED 53 B1 B1 1391*      ld (@dy-1),de
       04          
04B197 ED 43 AF B1 1392*      ld (@dx-1),bc
       04          
04B19C 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04B19E 32 AF B1 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04B1A2 21 AD B1 04 1395*      ld hl,@cmd
04B1A6 01 07 00 00 1396*      ld bc,@end-@cmd
04B1AA 5B DF       1397*      rst.lil $18
04B1AC C9          1398*      ret
04B1AD 17 1B 0E    1399*  @cmd:  db 23,27,14
04B1B0 00 00       1400*  @dx: dw 0x0000
04B1B2 00 00       1401*  @dy: dw 0x0000
04B1B4             1402*  @end:  ; no padding required b/c we shifted de right
04B1B4             1403*  
04B1B4             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B1B4             1405*  ; inputs: none
04B1B4             1406*  vdu_sprite_update:
04B1B4 21 BF B1 04 1407*      ld hl,@cmd
04B1B8 01 03 00 00 1408*      ld bc,@end-@cmd
04B1BC 5B DF       1409*      rst.lil $18
04B1BE C9          1410*      ret
04B1BF 17 1B 0F    1411*  @cmd: db 23,27,15
04B1C2             1412*  @end:
04B1C2             1413*  
04B1C2             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B1C2             1415*  ; inputs: none
04B1C2             1416*  vdu_sprite_bmp_reset:
04B1C2 21 CD B1 04 1417*      ld hl,@cmd
04B1C6 01 03 00 00 1418*      ld bc,@end-@cmd
04B1CA 5B DF       1419*      rst.lil $18
04B1CC C9          1420*      ret
04B1CD 17 1B 10    1421*  @cmd: db 23,27,16
04B1D0             1422*  @end:
04B1D0             1423*  
04B1D0             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B1D0             1425*  ; inputs: none
04B1D0             1426*  vdu_sprite_reset:
04B1D0 21 DB B1 04 1427*      ld hl,@cmd
04B1D4 01 03 00 00 1428*      ld bc,@end-@cmd
04B1D8 5B DF       1429*      rst.lil $18
04B1DA C9          1430*      ret
04B1DB 17 1B 11    1431*  @cmd: db 23,27,17
04B1DE             1432*  @end:
04B1DE             1433*  
04B1DE             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B1DE             1435*  ; inputs: a is the GCOL paint mode
04B1DE             1436*  ; prerequisites: vdu_sprite_select
04B1DE             1437*  vdu_sprite_set_gcol:
04B1DE 32 F0 B1 04 1438*      ld (@mode),a
04B1E2 21 ED B1 04 1439*      ld hl,@cmd
04B1E6 01 04 00 00 1440*      ld bc,@end-@cmd
04B1EA 5B DF       1441*      rst.lil $18
04B1EC C9          1442*      ret
04B1ED 17 1B 12    1443*  @cmd:  db 23,27,18
04B1F0 00          1444*  @mode: db 0x00
04B1F1             1445*  @end:
04B1F1             1446*  
04B1F1             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04B1F1             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04B1F1             1449*  ; inputs: hl=bufferId
04B1F1             1450*  ; prerequisites: vdu_sprite_select
04B1F1             1451*  vdu_sprite_add_buff:
04B1F1 22 03 B2 04 1452*      ld (@bufferId),hl
04B1F5 21 00 B2 04 1453*      ld hl,@cmd
04B1F9 01 05 00 00 1454*      ld bc,@end-@cmd
04B1FD 5B DF       1455*      rst.lil $18
04B1FF C9          1456*      ret
04B200 17 1B 26    1457*  @cmd:      db 23,27,0x26
04B203 00 00       1458*  @bufferId: dw 0x0000
04B205 00          1459*  @end:      db 0x00 ; padding
04B206             1460*  
04B206             1461*  
04B206             1462*  ; #### from sfx.asm ####
04B206 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04B207             1464*  
04B207             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04B207             1466*  ; ; inputs: hl = bufferId
04B207             1467*  ; sfx_play:
04B207             1468*  ; 	ld iy,sfx_last_channel
04B207             1469*  ; 	ld a,(iy+0)
04B207             1470*  ; 	ld (@bufferId),hl
04B207             1471*  ; @find_next_channel:
04B207             1472*  ; 	inc a ; bump to next channel
04B207             1473*  ; 	and 31 ; modulo 32 channel
04B207             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04B207             1475*  ; 	ret z ; so we return to caller without doing anything
04B207             1476*  ; 	push af ; back up channel
04B207             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04B207             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04B207             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04B207             1480*  ; 	pop af ; restore channel
04B207             1481*  ; 	jr @find_next_channel ; try the next channel
04B207             1482*  ; @play_sfx:
04B207             1483*  ; 	pop af ; restore channel
04B207             1484*  ; 	ld (iy+0),a ; store channel
04B207             1485*  ; 	ld hl,(@bufferId)
04B207             1486*  ; 	ld c,a ; channel
04B207             1487*  ; 	ld b,127 ; full volume
04B207             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04B207             1489*  ; 	jp vdu_play_sample
04B207             1490*  ; @bufferId:
04B207             1491*  ; 	dw 0x0000 ; 16-bit value
04B207             1492*  
04B207             1493*  sfx_play_random_hurt:
04B207 CD 4B BC 04 1494*  	call rand_8
04B20B E6 03       1495*  	and 3
04B20D FE 00       1496*  	cp 0
04B20F CA 36 C3 04 1497*  	jp z,sfx_play_ahh
04B213 FE 01       1498*  	cp 1
04B215 CA 42 C3 04 1499*  	jp z,sfx_play_augh
04B219 FE 02       1500*  	cp 2
04B21B CA 4E C3 04 1501*  	jp z,sfx_play_ayee
04B21F C3 1A C4 04 1502*  	jp sfx_play_ugh
04B223             1503*  
04B223             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04B223             1505*  sfx_load_main:
04B223 21 00 00 00 1506*      ld hl,0
04B227 22 60 BC 04 1507*      ld (cur_file_idx),hl
04B22B             1508*  sfx_load_main_loop:
04B22B             1509*  ; back up loop counter
04B22B C5          1510*      push bc
04B22C             1511*  ; load the next sound
04B22C CD 80 B2 04 1512*      call load_next_sound
04B230             1513*  ; draw all the things
04B230 CD C9 BD 04 1514*      call tmp_draw_all_the_things
04B234             1515*  ; move bj
04B234 CD 51 BD 04 1516*  	call move_bj
04B238             1517*  ; print welcome message
04B238 DD 21 92 80 1518*  	ld ix,font_itc_honda
       04          
04B23D 21 33 C6 04 1519*  	ld hl,hello_world
04B241 01 20 00 00 1520*  	ld bc,32
04B245 11 02 00 00 1521*  	ld de,2
04B249 CD D3 66 04 1522*  	call font_bmp_print
04B24D             1523*  ; print current filename
04B24D CD C9 AC 04 1524*  	call vdu_cls
04B251 2A 63 BC 04 1525*  	ld hl,(cur_filename)
04B255 CD C8 B2 04 1526*  	call printString
04B259 CD DD B2 04 1527*  	call printNewLine
04B25D             1528*  
04B25D             1529*  ; print current load stopwatch
04B25D 21 55 C6 04 1530*  	ld hl,loading_time
04B261 CD C8 B2 04 1531*  	call printString
04B265 CD E5 C5 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04B269 CD 16 B3 04 1533*  	call printDec
04B26D             1534*  
04B26D             1535*  ; flip screen
04B26D CD 98 AE 04 1536*      call vdu_flip
04B271             1537*  ; ; delay for a bit so sound can play
04B271             1538*  ;     ld a,%10000000 ; 1 second delay
04B271             1539*  ;     call multiPurposeDelay
04B271             1540*  ; decrement loop counter
04B271 C1          1541*      pop bc
04B272 0B          1542*  	dec bc
04B273             1543*  ; ; DEBUG: DUMP REGISTERS
04B273             1544*  ; 	push bc
04B273             1545*  ; 	call dumpRegistersHex
04B273             1546*  ; 	call vdu_flip
04B273             1547*  ; 	pop bc
04B273             1548*  ; ; END DEBUG
04B273 79          1549*      ld a,c
04B274 B7          1550*      or a
04B275 C2 2B B2 04 1551*      jp nz,sfx_load_main_loop
04B279 78          1552*      ld a,b
04B27A B7          1553*      or a
04B27B C2 2B B2 04 1554*      jp nz,sfx_load_main_loop
04B27F C9          1555*      ret
04B280             1556*  
04B280             1557*  load_next_sound:
04B280             1558*  ; look up the load routine for the current file index
04B280 2A 60 BC 04 1559*  	ld hl,(cur_file_idx)
04B284 29          1560*  	add hl,hl ; multiply current index by 2 ...
04B285 ED 5B 60 BC 1561*  	ld de,(cur_file_idx)
       04          
04B28A 19          1562*  	add hl,de ; ... now by 3
04B28B ED 5B 6C BC 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04B290 19          1564*  	add hl,de
04B291 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04B293 22 98 B2 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04B297             1567*  @jump_addr:
04B297 CD 00 00 00 1568*  	call 0 ; call the sound load routine
04B29B             1569*  ; look up the buffer id for the current file
04B29B 2A 60 BC 04 1570*  	ld hl,(cur_file_idx)
04B29F 29          1571*  	add hl,hl ; multiply current index by 2 ...
04B2A0 ED 5B 60 BC 1572*  	ld de,(cur_file_idx)
       04          
04B2A5 19          1573*  	add hl,de ; ... now by 3
04B2A6 ED 5B 69 BC 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04B2AB 19          1575*  	add hl,de
04B2AC ED 27       1576*  	ld hl,(hl)
04B2AE 22 66 BC 04 1577*  	ld (cur_buffer_id),hl
04B2B2             1578*  ; bump the current file index
04B2B2 2A 60 BC 04 1579*  	ld hl,(cur_file_idx)
04B2B6 23          1580*  	inc hl
04B2B7 22 60 BC 04 1581*  	ld (cur_file_idx),hl
04B2BB C9          1582*  	ret
04B2BC             1583*  
04B2BC             1584*  ; load a sound file to a buffer
04B2BC             1585*  ; inputs: hl = bufferId ; ix = file size
04B2BC             1586*  vdu_load_sfx:
04B2BC             1587*  ; back up input parameters
04B2BC E5          1588*      push hl ; bufferId
04B2BD             1589*  ; load the sound
04B2BD CD 42 C8 04 1590*  	call vdu_load_buffer_from_file
04B2C1             1591*  ; now make the buffer a sound sample
04B2C1 E1          1592*      pop hl ; bufferId
04B2C2 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04B2C3             1594*      ; push hl ; bufferId
04B2C3 CD 2D 01 04 1595*  	call vdu_buffer_to_sound
04B2C7             1596*  ; ; play the loaded sound
04B2C7             1597*  ;     ld c,0 ; channel
04B2C7             1598*  ;     ld b,127 ; full volume
04B2C7             1599*  ;     ld de,1000 ; 1 second duration
04B2C7             1600*  ;     pop hl ; bufferId
04B2C7             1601*  ;     call vdu_play_sample
04B2C7 C9          1602*      ret
04B2C8             0025       include "src/asm/functions.asm"
04B2C8             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04B2C8             0002*  ; Print a zero-terminated string
04B2C8             0003*  ; HL: Pointer to string
04B2C8             0004*  printString:
04B2C8 C5          0005*  	PUSH	BC
04B2C9 01 00 00 00 0006*  	LD		BC,0
04B2CD 3E 00       0007*  	LD 	 	A,0
04B2CF 5B DF       0008*  	RST.LIL 18h
04B2D1 C1          0009*  	POP		BC
04B2D2 C9          0010*  	RET
04B2D3             0011*  ; print a VDU sequence
04B2D3             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04B2D3             0013*  sendVDUsequence:
04B2D3 C5          0014*  	PUSH	BC
04B2D4 01 00 00 00 0015*  	LD		BC, 0
04B2D8 4E          0016*  	LD		C, (HL)
04B2D9 5B DF       0017*  	RST.LIL	18h
04B2DB C1          0018*  	POP		BC
04B2DC C9          0019*  	RET
04B2DD             0020*  ; Print Newline sequence to VDP
04B2DD             0021*  printNewLine:
04B2DD 3E 0D       0022*  	LD	A, '\r'
04B2DF 5B D7       0023*  	RST.LIL 10h
04B2E1 3E 0A       0024*  	LD	A, '\n'
04B2E3 5B D7       0025*  	RST.LIL 10h
04B2E5 C9          0026*  	RET
04B2E6             0027*  ; Print a 24-bit HEX number
04B2E6             0028*  ; HLU: Number to print
04B2E6             0029*  printHex24:
04B2E6 E5          0030*  	PUSH	HL
04B2E7 21 02 00 00 0031*  	LD		HL, 2
04B2EB 39          0032*  	ADD		HL, SP
04B2EC 7E          0033*  	LD		A, (HL)
04B2ED E1          0034*  	POP		HL
04B2EE CD F8 B2 04 0035*  	CALL	printHex8
04B2F2             0036*  ; Print a 16-bit HEX number
04B2F2             0037*  ; HL: Number to print
04B2F2             0038*  printHex16:
04B2F2 7C          0039*  	LD		A,H
04B2F3 CD F8 B2 04 0040*  	CALL	printHex8
04B2F7 7D          0041*  	LD		A,L
04B2F8             0042*  ; Print an 8-bit HEX number
04B2F8             0043*  ; A: Number to print
04B2F8             0044*  printHex8:
04B2F8 4F          0045*  	LD		C,A
04B2F9 1F          0046*  	RRA
04B2FA 1F          0047*  	RRA
04B2FB 1F          0048*  	RRA
04B2FC 1F          0049*  	RRA
04B2FD CD 02 B3 04 0050*  	CALL	@F
04B301 79          0051*  	LD		A,C
04B302             0052*  @@:
04B302 E6 0F       0053*  	AND		0Fh
04B304 C6 90       0054*  	ADD		A,90h
04B306 27          0055*  	DAA
04B307 CE 40       0056*  	ADC		A,40h
04B309 27          0057*  	DAA
04B30A 5B D7       0058*  	RST.LIL	10h
04B30C C9          0059*  	RET
04B30D             0060*  
04B30D             0061*  ; Print a 0x HEX prefix
04B30D             0062*  DisplayHexPrefix:
04B30D 3E 30       0063*  	LD	A, '0'
04B30F 5B D7       0064*  	RST.LIL 10h
04B311 3E 78       0065*  	LD	A, 'x'
04B313 5B D7       0066*  	RST.LIL 10h
04B315 C9          0067*  	RET
04B316             0068*  
04B316             0069*  
04B316             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04B316             0071*  ; HL : Value to print
04B316             0072*  printDec:
04B316 11 3A B3 04 0073*  	LD	 DE, _printDecBuffer
04B31A CD 43 B3 04 0074*  	CALL Num2String
04B31E             0075*  ; BEGIN MY CODE
04B31E             0076*  ; replace leading zeroes with spaces
04B31E 21 3A B3 04 0077*      LD	 HL, _printDecBuffer
04B322 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04B324             0079*  @loop:
04B324 7E          0080*      LD	 A, (HL)
04B325 FE 30       0081*      CP	 '0'
04B327 C2 35 B3 04 0082*      JP	 NZ, @done
04B32B 3E 20       0083*      LD   A, ' '
04B32D 77          0084*      LD	 (HL), A
04B32E 23          0085*      INC	 HL
04B32F CD BA AC 04 0086*      CALL vdu_cursor_forward
04B333 10 EF       0087*      DJNZ @loop
04B335             0088*  @done:
04B335             0089*  ; END MY CODE
04B335             0090*  	; LD	 HL, _printDecBuffer
04B335 CD C8 B2 04 0091*  	CALL printString
04B339 C9          0092*  	RET
04B33A 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04B343             0094*  
04B343             0095*  ; This routine converts the value from HL into it's ASCII representation,
04B343             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04B343             0097*  ; so it will allways be 8 characters length
04B343             0098*  ; HL : Value to convert to string
04B343             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04B343             0100*  Num2String:
04B343 01 80 69 67 0101*  	LD	 BC,-10000000
04B347 CD 7A B3 04 0102*  	CALL OneDigit
04B34B 01 C0 BD F0 0103*  	LD	 BC,-1000000
04B34F CD 7A B3 04 0104*  	CALL OneDigit
04B353 01 60 79 FE 0105*  	LD	 BC,-100000
04B357 CD 7A B3 04 0106*  	CALL OneDigit
04B35B 01 F0 D8 FF 0107*  	LD   BC,-10000
04B35F CD 7A B3 04 0108*  	CALL OneDigit
04B363 01 18 FC FF 0109*  	LD   BC,-1000
04B367 CD 7A B3 04 0110*  	CALL OneDigit
04B36B 01 9C FF FF 0111*  	LD   BC,-100
04B36F CD 7A B3 04 0112*  	CALL OneDigit
04B373 0E F6       0113*  	LD   C,-10
04B375 CD 7A B3 04 0114*  	CALL OneDigit
04B379 48          0115*  	LD   C,B
04B37A             0116*  OneDigit:
04B37A 3E 2F       0117*  	LD   A,'0'-1
04B37C             0118*  DivideMe:
04B37C 3C          0119*  	INC  A
04B37D 09          0120*  	ADD  HL,BC
04B37E 38 FC       0121*  	JR   C,DivideMe
04B380 ED 42       0122*  	SBC  HL,BC
04B382 12          0123*  	LD   (DE),A
04B383 13          0124*  	INC  DE
04B384 C9          0125*  	RET
04B385             0126*  
04B385             0127*  
04B385             0128*  ; #### new functions added by Brandon R. Gates ####
04B385             0129*  
04B385             0130*  ; print the binary representation of the 8-bit value in a
04B385             0131*  ; destroys a, hl, bc
04B385             0132*  printBin8:
04B385 06 08       0133*      ld b,8      ; loop counter for 8 bits
04B387 21 A2 B3 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04B38B             0135*                  ; (which will be the high bit of the value in a)
04B38B             0136*  @loop:
04B38B 07          0137*      rlca ; put the next highest bit into carry
04B38C 38 04       0138*      jr c,@one
04B38E 36 30       0139*      ld (hl),'0'
04B390 18 02       0140*      jr @next_bit
04B392             0141*  @one:
04B392 36 31       0142*      ld (hl),'1'
04B394             0143*  @next_bit:
04B394 23          0144*      inc hl
04B395 10 F4       0145*      djnz @loop
04B397             0146*  ; print it
04B397 21 A2 B3 04 0147*  	ld hl,@cmd
04B39B 01 08 00 00 0148*  	ld bc,@end-@cmd
04B39F 5B DF       0149*  	rst.lil $18
04B3A1 C9          0150*  	ret
04B3A2             0151*  @cmd: ds 8 ; eight bytes for eight bits
04B3AA             0152*  @end:
04B3AA             0153*  
04B3AA             0154*  ; print the binary representation of the 8-bit value in a
04B3AA             0155*  ; in reverse order (lsb first)
04B3AA             0156*  ; destroys a, hl, bc
04B3AA             0157*  printBin8Rev:
04B3AA 06 08       0158*      ld b,8      ; loop counter for 8 bits
04B3AC 21 C7 B3 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
04B3B0             0160*                  ; (which will be the high bit of the value in a)
04B3B0             0161*  @loop:
04B3B0 0F          0162*      rrca ; put the next lowest bit into carry
04B3B1 38 04       0163*      jr c,@one
04B3B3 36 30       0164*      ld (hl),'0'
04B3B5 18 02       0165*      jr @next_bit
04B3B7             0166*  @one:
04B3B7 36 31       0167*      ld (hl),'1'
04B3B9             0168*  @next_bit:
04B3B9 23          0169*      inc hl
04B3BA 10 F4       0170*      djnz @loop
04B3BC             0171*  ; print it
04B3BC 21 C7 B3 04 0172*  	ld hl,@cmd
04B3C0 01 08 00 00 0173*  	ld bc,@end-@cmd
04B3C4 5B DF       0174*  	rst.lil $18
04B3C6 C9          0175*  	ret
04B3C7             0176*  @cmd: ds 8 ; eight bytes for eight bits
04B3CF             0177*  @end:
04B3CF             0178*  
04B3CF             0179*  ; print registers to screen in hexidecimal format
04B3CF             0180*  ; inputs: none
04B3CF             0181*  ; outputs: values of every register printed to screen
04B3CF             0182*  ;    values of each register in global scratch memory
04B3CF             0183*  ; destroys: nothing
04B3CF             0184*  stepRegistersHex:
04B3CF             0185*  ; store everything in scratch
04B3CF 22 D2 B5 04 0186*      ld (uhl),hl
04B3D3 ED 43 D5 B5 0187*      ld (ubc),bc
       04          
04B3D8 ED 53 D8 B5 0188*      ld (ude),de
       04          
04B3DD DD 22 DB B5 0189*      ld (uix),ix
       04          
04B3E2 FD 22 DE B5 0190*      ld (uiy),iy
       04          
04B3E7 F5          0191*      push af ; fml
04B3E8 E1          0192*      pop hl  ; thanks, zilog
04B3E9 22 CF B5 04 0193*      ld (uaf),hl
04B3ED F5          0194*      push af ; dammit
04B3EE             0195*  
04B3EE             0196*  ; home the cursor
04B3EE CD 01 AE 04 0197*      call vdu_home_cursor
04B3F2             0198*  
04B3F2             0199*  ; print each register
04B3F2 21 5B B5 04 0200*      ld hl,str_afu
04B3F6 CD C8 B2 04 0201*      call printString
04B3FA 2A CF B5 04 0202*      ld hl,(uaf)
04B3FE CD E6 B2 04 0203*      call printHex24
04B402 CD DD B2 04 0204*      call printNewLine
04B406             0205*  
04B406 21 5F B5 04 0206*      ld hl,str_hlu
04B40A CD C8 B2 04 0207*      call printString
04B40E 2A D2 B5 04 0208*      ld hl,(uhl)
04B412 CD E6 B2 04 0209*      call printHex24
04B416 CD DD B2 04 0210*      call printNewLine
04B41A             0211*  
04B41A 21 63 B5 04 0212*      ld hl,str_bcu
04B41E CD C8 B2 04 0213*      call printString
04B422 2A D5 B5 04 0214*      ld hl,(ubc)
04B426 CD E6 B2 04 0215*      call printHex24
04B42A CD DD B2 04 0216*      call printNewLine
04B42E             0217*  
04B42E 21 67 B5 04 0218*      ld hl,str_deu
04B432 CD C8 B2 04 0219*      call printString
04B436 2A D8 B5 04 0220*      ld hl,(ude)
04B43A CD E6 B2 04 0221*      call printHex24
04B43E CD DD B2 04 0222*      call printNewLine
04B442             0223*  
04B442 21 6B B5 04 0224*      ld hl,str_ixu
04B446 CD C8 B2 04 0225*      call printString
04B44A 2A DB B5 04 0226*      ld hl,(uix)
04B44E CD E6 B2 04 0227*      call printHex24
04B452 CD DD B2 04 0228*      call printNewLine
04B456             0229*  
04B456 21 6F B5 04 0230*      ld hl,str_iyu
04B45A CD C8 B2 04 0231*      call printString
04B45E 2A DE B5 04 0232*      ld hl,(uiy)
04B462 CD E6 B2 04 0233*      call printHex24
04B466 CD DD B2 04 0234*      call printNewLine
04B46A             0235*  
04B46A             0236*      ; call vsync
04B46A             0237*  
04B46A CD DD B2 04 0238*      call printNewLine
04B46E             0239*  
04B46E             0240*  ; check for right shift key and quit if pressed
04B46E             0241*  	MOSCALL mos_getkbmap
04B46E 3E 1E       0001*M 			LD	A, function
04B470 5B CF       0002*M 			RST.LIL	08h
04B472             0242*  @stayhere:
04B472             0243*  ; 7 RightShift
04B472 DD CB 00 76 0244*      bit 6,(ix+0)
04B476 20 02       0245*      jr nz,@RightShift
04B478 18 F8       0246*      jr @stayhere
04B47A             0247*  @RightShift:
04B47A DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
04B47E 3E 80       0249*      ld a,%10000000
04B480 CD F8 C5 04 0250*      call multiPurposeDelay
04B484             0251*  
04B484             0252*  ; restore everything
04B484 2A D2 B5 04 0253*      ld hl, (uhl)
04B488 ED 4B D5 B5 0254*      ld bc, (ubc)
       04          
04B48D ED 5B D8 B5 0255*      ld de, (ude)
       04          
04B492 DD 2A DB B5 0256*      ld ix, (uix)
       04          
04B497 FD 2A DE B5 0257*      ld iy, (uiy)
       04          
04B49C F1          0258*      pop af
04B49D             0259*  ; all done
04B49D C9          0260*      ret
04B49E             0261*  
04B49E             0262*  ; print registers to screen in hexidecimal format
04B49E             0263*  ; inputs: none
04B49E             0264*  ; outputs: values of every register printed to screen
04B49E             0265*  ;    values of each register in global scratch memory
04B49E             0266*  ; destroys: nothing
04B49E             0267*  dumpRegistersHex:
04B49E             0268*  ; store everything in scratch
04B49E 22 D2 B5 04 0269*      ld (uhl),hl
04B4A2 ED 43 D5 B5 0270*      ld (ubc),bc
       04          
04B4A7 ED 53 D8 B5 0271*      ld (ude),de
       04          
04B4AC DD 22 DB B5 0272*      ld (uix),ix
       04          
04B4B1 FD 22 DE B5 0273*      ld (uiy),iy
       04          
04B4B6 F5          0274*      push af ; fml
04B4B7 E1          0275*      pop hl  ; thanks, zilog
04B4B8 22 CF B5 04 0276*      ld (uaf),hl
04B4BC F5          0277*      push af ; dammit
04B4BD             0278*  
04B4BD             0279*  ; home the cursor
04B4BD CD 01 AE 04 0280*      call vdu_home_cursor
04B4C1             0281*  
04B4C1             0282*  ; print each register
04B4C1 21 5B B5 04 0283*      ld hl,str_afu
04B4C5 CD C8 B2 04 0284*      call printString
04B4C9 2A CF B5 04 0285*      ld hl,(uaf)
04B4CD CD E6 B2 04 0286*      call printHex24
04B4D1 CD DD B2 04 0287*      call printNewLine
04B4D5             0288*  
04B4D5 21 5F B5 04 0289*      ld hl,str_hlu
04B4D9 CD C8 B2 04 0290*      call printString
04B4DD 2A D2 B5 04 0291*      ld hl,(uhl)
04B4E1 CD E6 B2 04 0292*      call printHex24
04B4E5 CD DD B2 04 0293*      call printNewLine
04B4E9             0294*  
04B4E9 21 63 B5 04 0295*      ld hl,str_bcu
04B4ED CD C8 B2 04 0296*      call printString
04B4F1 2A D5 B5 04 0297*      ld hl,(ubc)
04B4F5 CD E6 B2 04 0298*      call printHex24
04B4F9 CD DD B2 04 0299*      call printNewLine
04B4FD             0300*  
04B4FD 21 67 B5 04 0301*      ld hl,str_deu
04B501 CD C8 B2 04 0302*      call printString
04B505 2A D8 B5 04 0303*      ld hl,(ude)
04B509 CD E6 B2 04 0304*      call printHex24
04B50D CD DD B2 04 0305*      call printNewLine
04B511             0306*  
04B511 21 6B B5 04 0307*      ld hl,str_ixu
04B515 CD C8 B2 04 0308*      call printString
04B519 2A DB B5 04 0309*      ld hl,(uix)
04B51D CD E6 B2 04 0310*      call printHex24
04B521 CD DD B2 04 0311*      call printNewLine
04B525             0312*  
04B525 21 6F B5 04 0313*      ld hl,str_iyu
04B529 CD C8 B2 04 0314*      call printString
04B52D 2A DE B5 04 0315*      ld hl,(uiy)
04B531 CD E6 B2 04 0316*      call printHex24
04B535 CD DD B2 04 0317*      call printNewLine
04B539             0318*  
04B539 CD 23 AF 04 0319*      call vdu_vblank
04B53D             0320*  
04B53D CD DD B2 04 0321*      call printNewLine
04B541             0322*  ; restore everything
04B541 2A D2 B5 04 0323*      ld hl, (uhl)
04B545 ED 4B D5 B5 0324*      ld bc, (ubc)
       04          
04B54A ED 5B D8 B5 0325*      ld de, (ude)
       04          
04B54F DD 2A DB B5 0326*      ld ix, (uix)
       04          
04B554 FD 2A DE B5 0327*      ld iy, (uiy)
       04          
04B559 F1          0328*      pop af
04B55A             0329*  ; all done
04B55A C9          0330*      ret
04B55B             0331*  
04B55B 61 66 3D 00 0332*  str_afu: db "af=",0
04B55F 68 6C 3D 00 0333*  str_hlu: db "hl=",0
04B563 62 63 3D 00 0334*  str_bcu: db "bc=",0
04B567 64 65 3D 00 0335*  str_deu: db "de=",0
04B56B 69 78 3D 00 0336*  str_ixu: db "ix=",0
04B56F 69 79 3D 00 0337*  str_iyu: db "iy=",0
04B573             0338*  
04B573             0339*  ; print udeuhl to screen in hexidecimal format
04B573             0340*  ; inputs: none
04B573             0341*  ; outputs: concatenated hexidecimal udeuhl
04B573             0342*  ; destroys: nothing
04B573             0343*  dumpUDEUHLHex:
04B573             0344*  ; store everything in scratch
04B573 22 D2 B5 04 0345*      ld (uhl),hl
04B577 ED 43 D5 B5 0346*      ld (ubc),bc
       04          
04B57C ED 53 D8 B5 0347*      ld (ude),de
       04          
04B581 DD 22 DB B5 0348*      ld (uix),ix
       04          
04B586 FD 22 DE B5 0349*      ld (uiy),iy
       04          
04B58B F5          0350*      push af
04B58C             0351*  
04B58C             0352*  ; print each register
04B58C             0353*  
04B58C 21 C6 B5 04 0354*      ld hl,str_udeuhl
04B590 CD C8 B2 04 0355*      call printString
04B594 2A D8 B5 04 0356*      ld hl,(ude)
04B598 CD E6 B2 04 0357*      call printHex24
04B59C 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
04B59E 5B D7       0359*  	rst.lil 10h
04B5A0 2A D2 B5 04 0360*      ld hl,(uhl)
04B5A4 CD E6 B2 04 0361*      call printHex24
04B5A8 CD DD B2 04 0362*      call printNewLine
04B5AC             0363*  
04B5AC             0364*  ; restore everything
04B5AC 2A D2 B5 04 0365*      ld hl, (uhl)
04B5B0 ED 4B D5 B5 0366*      ld bc, (ubc)
       04          
04B5B5 ED 5B D8 B5 0367*      ld de, (ude)
       04          
04B5BA DD 2A DB B5 0368*      ld ix, (uix)
       04          
04B5BF FD 2A DE B5 0369*      ld iy, (uiy)
       04          
04B5C4 F1          0370*      pop af
04B5C5             0371*  ; all done
04B5C5 C9          0372*      ret
04B5C6             0373*  
04B5C6 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04B5CF             0375*  
04B5CF             0376*  ; global scratch memory for registers
04B5CF 00 00 00    0377*  uaf: dl 0
04B5D2 00 00 00    0378*  uhl: dl 0
04B5D5 00 00 00    0379*  ubc: dl 0
04B5D8 00 00 00    0380*  ude: dl 0
04B5DB 00 00 00    0381*  uix: dl 0
04B5DE 00 00 00    0382*  uiy: dl 0
04B5E1 00 00 00    0383*  usp: dl 0
04B5E4 00 00 00    0384*  upc: dl 0
04B5E7             0385*  
04B5E7             0386*  ; inputs: whatever is in the flags register
04B5E7             0387*  ; outputs: binary representation of flags
04B5E7             0388*  ;          with a header so we know which is what
04B5E7             0389*  ; destroys: nothing
04B5E7             0390*  ; preserves: everything
04B5E7             0391*  dumpFlags:
04B5E7             0392*  ; first we curse zilog for not giving direct access to flags
04B5E7 F5          0393*      push af ; this is so we can send it back unharmed
04B5E8 F5          0394*      push af ; this is so we can pop it to hl
04B5E9             0395*  ; store everything in scratch
04B5E9 22 D2 B5 04 0396*      ld (uhl),hl
04B5ED ED 43 D5 B5 0397*      ld (ubc),bc
       04          
04B5F2 ED 53 D8 B5 0398*      ld (ude),de
       04          
04B5F7 DD 22 DB B5 0399*      ld (uix),ix
       04          
04B5FC FD 22 DE B5 0400*      ld (uiy),iy
       04          
04B601             0401*  ; next we print the header
04B601 21 2D B6 04 0402*      ld hl,@header
04B605 CD C8 B2 04 0403*      call printString
04B609 E1          0404*      pop hl ; flags are now in l
04B60A 7D          0405*      ld a,l ; flags are now in a
04B60B CD 85 B3 04 0406*      call printBin8
04B60F CD DD B2 04 0407*  	call printNewLine
04B613             0408*  ; restore everything
04B613 2A D2 B5 04 0409*      ld hl, (uhl)
04B617 ED 4B D5 B5 0410*      ld bc, (ubc)
       04          
04B61C ED 5B D8 B5 0411*      ld de, (ude)
       04          
04B621 DD 2A DB B5 0412*      ld ix, (uix)
       04          
04B626 FD 2A DE B5 0413*      ld iy, (uiy)
       04          
04B62B F1          0414*      pop af ; send her home the way she came
04B62C C9          0415*      ret
04B62D             0416*  ; Bit 7 (S): Sign flag
04B62D             0417*  ; Bit 6 (Z): Zero flag
04B62D             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04B62D             0419*  ; Bit 4 (H): Half Carry flag
04B62D             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04B62D             0421*  ; Bit 2 (PV): Parity/Overflow flag
04B62D             0422*  ; Bit 1 (N): Subtract flag
04B62D             0423*  ; Bit 0 (C): Carry flag
04B62D 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04B638             0425*  
04B638             0426*  ; set all the bits in the flag register
04B638             0427*  ; more of an academic exercise than anything useful
04B638             0428*  ; inputs; none
04B638             0429*  ; outputs; a=0,f=255
04B638             0430*  ; destroys: flags, hl
04B638             0431*  ; preserves: a, because why not
04B638             0432*  setAllFlags:
04B638 21 FF 00 00 0433*      ld hl,255
04B63C 67          0434*      ld h,a ; four cycles to preserve a is cheap
04B63D E5          0435*      push hl
04B63E F1          0436*      pop af
04B63F C9          0437*      ret
04B640             0438*  
04B640             0439*  ; reset all the bits in the flag register
04B640             0440*  ; unlike its inverse counterpart, this may actually be useful
04B640             0441*  ; inputs; none
04B640             0442*  ; outputs; a=0,f=0
04B640             0443*  ; destroys: flags, hl
04B640             0444*  ; preserves: a, because why not
04B640             0445*  resetAllFlags:
04B640 21 00 00 00 0446*      ld hl,0
04B644 67          0447*      ld h,a ; four cycles to preserve a is cheap
04B645 E5          0448*      push hl
04B646 F1          0449*      pop af
04B647 C9          0450*      ret
04B648             0451*  
04B648             0452*  ; wait until user presses a key
04B648             0453*  ; inputs: none
04B648             0454*  ; outputs: none
04B648             0455*  ; destroys: af,ix
04B648             0456*  waitKeypress:
04B648             0457*      MOSCALL mos_sysvars
04B648 3E 08       0001*M 			LD	A, function
04B64A 5B CF       0002*M 			RST.LIL	08h
04B64C AF          0458*      xor a ; zero out any prior keypresses
04B64D DD 77 05    0459*      ld (ix+sysvar_keyascii),a
04B650             0460*  @loop:
04B650 DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
04B653 A7          0462*      and a
04B654 C0          0463*      ret nz
04B655 18 F9       0464*      jr @loop
04B657             0465*  
04B657             0466*  
04B657             0467*  ; print bytes from an address to the screen in hexidecimal format
04B657             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B657             0469*  ; outputs: values of each byte printed to screen separated by spaces
04B657             0470*  ; destroys: nothing
04B657             0471*  dumpMemoryHex:
04B657             0472*  ; save all registers to the stack
04B657 F5          0473*      push af
04B658 C5          0474*      push bc
04B659 D5          0475*      push de
04B65A E5          0476*      push hl
04B65B DD E5       0477*      push ix
04B65D FD E5       0478*      push iy
04B65F             0479*  
04B65F             0480*  ; set b to be our loop counter
04B65F 47          0481*      ld b,a
04B660             0482*  @loop:
04B660             0483*  ; print the byte
04B660 7E          0484*      ld a,(hl)
04B661 CD F8 B2 04 0485*      call printHex8
04B665             0486*  ; print a space
04B665 3E 20       0487*      ld a,' '
04B667 5B D7       0488*      rst.lil 10h
04B669 23          0489*      inc hl
04B66A 10 F4       0490*      djnz @loop
04B66C CD DD B2 04 0491*      call printNewLine
04B670             0492*  
04B670             0493*  ; restore everything
04B670 FD E1       0494*      pop iy
04B672 DD E1       0495*      pop ix
04B674 E1          0496*      pop hl
04B675 D1          0497*      pop de
04B676 C1          0498*      pop bc
04B677 F1          0499*      pop af
04B678             0500*  ; all done
04B678 C9          0501*      ret
04B679             0502*  
04B679             0503*  
04B679             0504*  ; print bytes from an address to the screen in binary format
04B679             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B679             0506*  ; outputs: values of each byte printed to screen separated by spaces
04B679             0507*  ; destroys: nothing
04B679             0508*  dumpMemoryBin:
04B679             0509*  ; save all registers to the stack
04B679 F5          0510*      push af
04B67A C5          0511*      push bc
04B67B D5          0512*      push de
04B67C E5          0513*      push hl
04B67D DD E5       0514*      push ix
04B67F FD E5       0515*      push iy
04B681             0516*  
04B681             0517*  ; set b to be our loop counter
04B681 47          0518*      ld b,a
04B682             0519*  @loop:
04B682             0520*  ; print the byte
04B682 7E          0521*      ld a,(hl)
04B683 E5          0522*      push hl
04B684 C5          0523*      push bc
04B685 CD 85 B3 04 0524*      call printBin8
04B689 C1          0525*      pop bc
04B68A             0526*  ; print a space
04B68A 3E 20       0527*      ld a,' '
04B68C 5B D7       0528*      rst.lil 10h
04B68E E1          0529*      pop hl
04B68F 23          0530*      inc hl
04B690 10 F0       0531*      djnz @loop
04B692 CD DD B2 04 0532*      call printNewLine
04B696             0533*  
04B696             0534*  ; restore everything
04B696 FD E1       0535*      pop iy
04B698 DD E1       0536*      pop ix
04B69A E1          0537*      pop hl
04B69B D1          0538*      pop de
04B69C C1          0539*      pop bc
04B69D F1          0540*      pop af
04B69E             0541*  ; all done
04B69E C9          0542*      ret
04B69F             0543*  
04B69F             0544*  ; print bytes from an address to the screen in binary format
04B69F             0545*  ; with the bits of each byte in reverse order (lsb first)
04B69F             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B69F             0547*  ; outputs: values of each byte printed to screen separated by spaces
04B69F             0548*  ; destroys: nothing
04B69F             0549*  dumpMemoryBinRev:
04B69F             0550*  ; save all registers to the stack
04B69F F5          0551*      push af
04B6A0 C5          0552*      push bc
04B6A1 D5          0553*      push de
04B6A2 E5          0554*      push hl
04B6A3 DD E5       0555*      push ix
04B6A5 FD E5       0556*      push iy
04B6A7             0557*  
04B6A7             0558*  ; set b to be our loop counter
04B6A7 47          0559*      ld b,a
04B6A8             0560*  @loop:
04B6A8             0561*  ; print the byte
04B6A8 7E          0562*      ld a,(hl)
04B6A9 E5          0563*      push hl
04B6AA C5          0564*      push bc
04B6AB CD AA B3 04 0565*      call printBin8Rev
04B6AF C1          0566*      pop bc
04B6B0             0567*  ; print a space
04B6B0 3E 20       0568*      ld a,' '
04B6B2 5B D7       0569*      rst.lil 10h
04B6B4 E1          0570*      pop hl
04B6B5 23          0571*      inc hl
04B6B6 10 F0       0572*      djnz @loop
04B6B8 CD DD B2 04 0573*      call printNewLine
04B6BC             0574*  
04B6BC             0575*  ; restore everything
04B6BC FD E1       0576*      pop iy
04B6BE DD E1       0577*      pop ix
04B6C0 E1          0578*      pop hl
04B6C1 D1          0579*      pop de
04B6C2 C1          0580*      pop bc
04B6C3 F1          0581*      pop af
04B6C4             0582*  ; all done
04B6C4 C9          0583*      ret
04B6C5             0026   	include "src/asm/player.asm"
04B6C5             0001*  ; ######## GAME STATE VARIABLES #######
04B6C5             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04B6C5 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04B6C8             0004*  ; player current health,binary
04B6C8             0005*  ; when < 0 player splodes
04B6C8             0006*  ; restores to plyr_max_health when new ship spawns
04B6C8 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04B6CB             0008*  ; max player health,binary
04B6CB             0009*  ; can increase with power-ups (todo)
04B6CB 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04B6CE             0011*  ; when reaches zero,game ends
04B6CE             0012*  ; can increase based on TODO
04B6CE 03 00 00    0013*  plyr_lives: dl 3 ; binary
04B6D1             0014*  
04B6D1             0015*  ; ######### Player Variables ##########
04B6D1             0016*  ; player position on the map and orientation
04B6D1 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B6D2 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B6D3 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04B6D4 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B6D5 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B6D6 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04B6D7 00          0023*  cur_x: db 0x00
04B6D8 00          0024*  cur_y: db 0x00
04B6D9 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04B6DA 00          0026*  xvel:  db 0x00
04B6DB 00          0027*  yvel:  db 0x00
04B6DC 00          0028*         db 0x00 ; padding
04B6DD 00          0029*  dy:    db 0x00
04B6DE 00          0030*  dx:    db 0x00
04B6DF 00          0031*         db 0x00 ; padding
04B6E0 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04B6E1             0033*  
04B6E1 00          0034*  plyr_shot_x:      db 0x00
04B6E2 00          0035*  plyr_shot_y:      db 0x00
04B6E3 00          0036*                      db 0x00 ; padding
04B6E4 00          0037*  plyr_shot_xvel:   db 0x00
04B6E5 00          0038*  plyr_shot_yvel:   db 0x00
04B6E6 00          0039*                      db 0x00 ; padding
04B6E7 FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04B6E8 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04B6EB 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04B6EC             0043*  
04B6EC 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04B6ED 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04B6EE             0046*  plyr_wpn_knife: equ %00000001
04B6EE             0047*  plyr_wpn_pistol: equ %00000010
04B6EE             0048*  plyr_wpn_mg: equ %00000100
04B6EE             0049*  plyr_wpn_gg: equ %00001000
04B6EE 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04B6EF 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04B6F2 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04B6F5             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04B6FB             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04B701 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04B704             0056*  
04B704             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04B704 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04B707             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04B707             0060*  
04B707             0061*  
04B707 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04B70A             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04B712 00          0064*                   db 0 ; string terminator
04B713             0065*  
04B713             0066*  ; ######### PLAYER CONSTANTS ##########
04B713             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04B713             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04B719             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04B719             0070*  
04B719             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04B719             0072*  ; uses the same offsets from its table base as the main sprite table:
04B719             0073*  plyr_start_variables: ; label marking beginning of table
04B719 40          0074*  plyr_id:               db table_max_records
04B71A 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04B71B 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04B71E 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04B721 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04B722 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04B723 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04B724 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04B727 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04B72A 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04B72D 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04B730 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04B733 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04B736 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04B739 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04B73A 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04B73B             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04B73B 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04B73C 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04B73D 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04B73E             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04B73E             0095*  
04B73E             0096*  
04B73E             0097*  ; set initial player position
04B73E             0098*  ; inputs: none,everything is hardcoded
04B73E             0099*  ; outputs: player set to the first valid position on the map
04B73E             0100*  ; destroys: a
04B73E             0101*  plyr_init:
04B73E CD 32 68 04 0102*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04B742 32 D3 B6 04 0103*      ld (cur_cell),a
04B746 ED 53 D7 B6 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B74B AF          0105*      xor a ; north is default orientation
04B74C 32 D6 B6 04 0106*      ld (orientation),a
04B750 21 1E 00 00 0107*      ld hl,plyr_move_rate
04B754 FD 21 13 B7 0108*      ld iy,plyr_move_timer
       04          
04B759 CD BC C5 04 0109*      call timestamp_tmr_set
04B75D 3E 03       0110*      ld a,3
04B75F 32 CE B6 04 0111*      ld (plyr_lives),a
04B763 3E 64       0112*      ld a,100
04B765 32 C8 B6 04 0113*      ld (plyr_health),a
04B769 3E 08       0114*      ld a,8
04B76B 32 07 B7 04 0115*      ld (plyr_ammo),a
04B76F 3E 01       0116*      ld a,plyr_wpn_knife
04B771 F6 02       0117*      or plyr_wpn_pistol
04B773 32 EC B6 04 0118*      ld (plyr_wpns),a
04B777 3E 01       0119*      ld a,plyr_wpn_knife
04B779 32 ED B6 04 0120*      ld (plyr_wpn_active),a
04B77D CD 51 B8 04 0121*      call plyr_set_weapon_parameters
04B781 FD 21 F5 B6 0122*      ld iy,plyr_wpn_select_tmr
       04          
04B786 21 00 00 00 0123*      ld hl,0
04B78A CD BC C5 04 0124*      call timestamp_tmr_set
04B78E C9          0125*      ret
04B78F             0126*  
04B78F             0127*  ; restart player after dying
04B78F             0128*  ; inputs: none,everything is hardcoded
04B78F             0129*  ; outputs: player set to the first valid position on the map
04B78F             0130*  ; destroys: a
04B78F             0131*  plyr_restart:
04B78F 3A D2 B6 04 0132*      ld a,(cur_room)
04B793 A7          0133*      and a
04B794 28 3A       0134*      jr z,@no_load
04B796             0135*  ; not in room zero so save state of current room
04B796 21 08 69 04 0136*      ld hl,room_flags
04B79A 11 00 00 00 0137*  	ld de,0 ; make sure deu and d are zero
04B79E 5F          0138*  	ld e,a
04B79F 19          0139*  	add hl,de ; hl = address of room flags entry
04B7A0 3E 01       0140*  	ld a,room_flag_visited
04B7A2 B6          0141*  	or (hl)
04B7A3 77          0142*  	ld (hl),a
04B7A4             0143*  ; update from_room
04B7A4 3A D2 B6 04 0144*  	ld a,(cur_room)
04B7A8 32 D5 B6 04 0145*  	ld (from_room),a
04B7AC             0146*  ; save old room state to room dat memory location
04B7AC 21 12 69 04 0147*  	ld hl,room_dat_lut
04B7B0 57          0148*  	ld d,a
04B7B1 1E 03       0149*  	ld e,3 ; three bytes per lookup record
04B7B3 ED 5C       0150*  	mlt de ; de = offset to room dat entry
04B7B5 19          0151*  	add hl,de ; hl = address of room dat entry
04B7B6 ED 17       0152*  	ld de,(hl) ; destination address for room data
04B7B8 21 00 E0 B7 0153*  	ld hl,cell_status ; source address for room data
04B7BC 01 00 20 00 0154*  	ld bc,8*1024 ; size of room data
04B7C0 ED B0       0155*  	ldir
04B7C2             0156*  ; fetch room zero state from room dat memory location
04B7C2 2A 12 69 04 0157*  	ld hl,(room_00_dat) ; source address for room data
04B7C6 11 00 E0 B7 0158*  	ld de,cell_status ; destination address for room data
04B7CA 01 00 20 00 0159*  	ld bc,8*1024 ; size of room data
04B7CE ED B0       0160*  	ldir
04B7D0             0161*  @no_load:
04B7D0 AF          0162*      xor a
04B7D1 32 D2 B6 04 0163*      ld (cur_room),a
04B7D5 32 D6 B6 04 0164*      ld (orientation),a ; north is default orientation
04B7D9 21 1E 00 00 0165*      ld hl,plyr_move_rate
04B7DD FD 21 13 B7 0166*      ld iy,plyr_move_timer
       04          
04B7E2             0167*  
04B7E2 3A CE B6 04 0168*      ld a,(plyr_lives)
04B7E6 3D          0169*      dec a
04B7E7 32 CE B6 04 0170*      ld (plyr_lives),a
04B7EB 3E 64       0171*      ld a,100
04B7ED 32 C8 B6 04 0172*      ld (plyr_health),a
04B7F1 3E 08       0173*      ld a,8
04B7F3 CD 77 B9 04 0174*      call plyr_add_ammo
04B7F7             0175*  
04B7F7 CD 32 68 04 0176*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04B7FB 32 D3 B6 04 0177*      ld (cur_cell),a
04B7FF ED 53 D7 B6 0178*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B804             0179*  
04B804 C9          0180*      ret
04B805             0181*  
04B805             0182*  plyr_next_weapon:
04B805             0183*  ; check if select weapons timer has expired
04B805 FD 21 F5 B6 0184*      ld iy,plyr_wpn_select_tmr
       04          
04B80A CD C7 C5 04 0185*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B80E F0          0186*      ret p ; time left on timer so no weapon select
04B80F             0187*  ; reset weapon select timer
04B80F 21 14 00 00 0188*      ld hl,120/6 ; 1/6 second
04B813 CD BC C5 04 0189*      call timestamp_tmr_set
04B817             0190*  ; select next weapon
04B817 21 EC B6 04 0191*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B81B ED 07       0192*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B81D             0193*  @loop:
04B81D 3A ED B6 04 0194*      ld a,(plyr_wpn_active)
04B821 07          0195*      rlca ; rotate left
04B822 32 ED B6 04 0196*      ld (plyr_wpn_active),a
04B826 A6          0197*      and (hl) ; check inventory mask
04B827 28 F4       0198*      jr z,@loop
04B829 C3 51 B8 04 0199*      jp plyr_set_weapon_parameters
04B82D             0200*  
04B82D             0201*  plyr_previous_weapon:
04B82D             0202*  ; check if select weapons timer has expired
04B82D FD 21 F5 B6 0203*      ld iy,plyr_wpn_select_tmr
       04          
04B832 CD C7 C5 04 0204*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B836 F0          0205*      ret p ; time left on timer so no weapon select
04B837             0206*  ; reset weapon select timer
04B837 21 14 00 00 0207*      ld hl,120/6 ; 1/6 second
04B83B CD BC C5 04 0208*      call timestamp_tmr_set
04B83F             0209*  ; select next weapon
04B83F 21 EC B6 04 0210*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B843 ED 07       0211*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B845             0212*  @loop:
04B845 3A ED B6 04 0213*      ld a,(plyr_wpn_active)
04B849 0F          0214*      rrca ; rotate right
04B84A 32 ED B6 04 0215*      ld (plyr_wpn_active),a
04B84E A6          0216*      and (hl) ; check inventory mask
04B84F 28 F4       0217*      jr z,@loop
04B851             0218*      ; fall through to plyr_set_weapon_parameters
04B851             0219*  
04B851             0220*  plyr_set_weapon_parameters:
04B851 FE 01       0221*      cp %00000001 ; knife
04B853 CA 6A B8 04 0222*      jp z,@knife
04B857 FE 02       0223*      cp %00000010 ; pistol
04B859 CA 92 B8 04 0224*      jp z,@pistol
04B85D FE 04       0225*      cp %00000100 ; machine gun
04B85F CA BA B8 04 0226*      jp z,@machine_gun
04B863 FE 08       0227*      cp %00001000 ; gatling gun
04B865 CA E2 B8 04 0228*      jp z,@gatling_gun
04B869 C9          0229*      ret ; if none of the above do nothing
04B86A             0230*  @knife:
04B86A 21 05 21 00 0231*      ld hl,BUF_UI_BJ_KNIFE_00
04B86E 22 F2 B6 04 0232*      ld (plyr_wpn_ui_lg),hl
04B872 21 07 20 00 0233*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04B876 22 EF B6 04 0234*      ld (plyr_wpn_ui_sm),hl
04B87A 3E 14       0235*      ld a,20 ; dps = 60
04B87C 32 EE B6 04 0236*      ld (plyr_wpn_damage),a
04B880 21 3C 00 00 0237*      ld hl,120/2 ; 3 times/second
04B884 22 01 B7 04 0238*      ld (plyr_wpn_fire_rate),hl
04B888 FD 21 FB B6 0239*      ld iy,plyr_wpn_fire_tmr
       04          
04B88D CD BC C5 04 0240*      call timestamp_tmr_set
04B891 C9          0241*      ret
04B892             0242*  @pistol:
04B892 21 0F 21 00 0243*      ld hl,BUF_UI_BJ_PISTOL_00
04B896 22 F2 B6 04 0244*      ld (plyr_wpn_ui_lg),hl
04B89A 21 09 20 00 0245*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04B89E 22 EF B6 04 0246*      ld (plyr_wpn_ui_sm),hl
04B8A2             0247*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04B8A2 3E 1E       0248*      ld a,30 ; damage/burst
04B8A4 32 EE B6 04 0249*      ld (plyr_wpn_damage),a
04B8A8 21 28 00 00 0250*      ld hl,120/3 ; 3 bursts/second
04B8AC 22 01 B7 04 0251*      ld (plyr_wpn_fire_rate),hl
04B8B0 FD 21 FB B6 0252*      ld iy,plyr_wpn_fire_tmr
       04          
04B8B5 CD BC C5 04 0253*      call timestamp_tmr_set
04B8B9 C9          0254*      ret
04B8BA             0255*  @machine_gun:
04B8BA 21 0A 21 00 0256*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04B8BE 22 F2 B6 04 0257*      ld (plyr_wpn_ui_lg),hl
04B8C2 21 08 20 00 0258*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04B8C6 22 EF B6 04 0259*      ld (plyr_wpn_ui_sm),hl
04B8CA             0260*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04B8CA 3E 50       0261*      ld a,80 ; damage/burst
04B8CC 32 EE B6 04 0262*      ld (plyr_wpn_damage),a
04B8D0 21 28 00 00 0263*      ld hl,120/3 ; 3 bursts/second
04B8D4 22 01 B7 04 0264*      ld (plyr_wpn_fire_rate),hl
04B8D8 FD 21 FB B6 0265*      ld iy,plyr_wpn_fire_tmr
       04          
04B8DD CD BC C5 04 0266*      call timestamp_tmr_set
04B8E1 C9          0267*      ret
04B8E2             0268*  @gatling_gun:
04B8E2 21 00 21 00 0269*      ld hl,BUF_UI_BJ_GATLING_00
04B8E6 22 F2 B6 04 0270*      ld (plyr_wpn_ui_lg),hl
04B8EA 21 06 20 00 0271*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04B8EE 22 EF B6 04 0272*      ld (plyr_wpn_ui_sm),hl
04B8F2             0273*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04B8F2 3E 78       0274*      ld a,120 ; damage/burst
04B8F4 32 EE B6 04 0275*      ld (plyr_wpn_damage),a
04B8F8 21 28 00 00 0276*      ld hl,120/3 ; 3 bursts/second
04B8FC 22 01 B7 04 0277*      ld (plyr_wpn_fire_rate),hl
04B900 FD 21 FB B6 0278*      ld iy,plyr_wpn_fire_tmr
       04          
04B905 CD BC C5 04 0279*      call timestamp_tmr_set
04B909 C9          0280*      ret
04B90A             0281*  
04B90A             0282*  ; adds to player's health by a set amount
04B90A             0283*  ; inputs: a is the signed amount to modify health
04B90A             0284*  ; outputs: a will contain amount of health remaining
04B90A             0285*  ;          carry will be set if health maxes out to 255
04B90A             0286*  plyr_add_health:
04B90A 21 C8 B6 04 0287*      ld hl,plyr_health
04B90E 86          0288*      add a,(hl)
04B90F D2 15 B9 04 0289*      jp nc,@update ; if we roll over to zero when adding
04B913 3E FF       0290*      ld a,255 ; ... set health remaining to max
04B915             0291*  @update:
04B915 77          0292*      ld (hl),a
04B916 C3 3E B9 04 0293*      jp plyr_health_image
04B91A             0294*  
04B91A             0295*  ; subtracts from player's health by a set amount
04B91A             0296*  ; inputs: a is the signed amount to modify health
04B91A             0297*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04B91A             0298*  ;        a contains remaining health
04B91A             0299*  plyr_sub_health:
04B91A A7          0300*      and a
04B91B C8          0301*      ret z
04B91C             0302*  ; DEBUG
04B91C ED 44       0303*      neg
04B91E 32 65 B9 04 0304*      ld (last_damage),a
04B922 ED 44       0305*      neg
04B924             0306*  ; END DEBUG
04B924 21 C8 B6 04 0307*      ld hl,plyr_health
04B928 86          0308*      add a,(hl)
04B929 CA 31 B9 04 0309*      jp z,@zero
04B92D DA 3D B9 04 0310*      jp c,@update
04B931             0311*  @zero:
04B931 21 03 20 00 0312*      ld hl,BUF_UI_BJ_100
04B935 22 7D 69 04 0313*      ld (bj_health_image),hl
04B939 C3 8F B7 04 0314*      jp plyr_restart ; will go the right place from there
04B93D             0315*  @update:
04B93D 77          0316*      ld (hl),a
04B93E             0317*  ; fall through to plyr_health_image
04B93E             0318*  
04B93E             0319*  plyr_health_image:
04B93E FE 19       0320*      cp 25
04B940 38 0E       0321*      jr c,@less_than_25
04B942 FE 32       0322*      cp 50
04B944 38 10       0323*      jr c,@less_than_50
04B946 FE 4B       0324*      cp 75
04B948 38 12       0325*      jr c,@less_than_75
04B94A 21 03 20 00 0326*      ld hl,BUF_UI_BJ_100
04B94E 18 10       0327*      jr @update
04B950             0328*  @less_than_25:
04B950 21 00 20 00 0329*      ld hl,BUF_UI_BJ_025
04B954 18 0A       0330*      jr @update
04B956             0331*  @less_than_50:
04B956 21 01 20 00 0332*      ld hl,BUF_UI_BJ_050
04B95A 18 04       0333*      jr @update
04B95C             0334*  @less_than_75:
04B95C 21 02 20 00 0335*      ld hl,BUF_UI_BJ_075
04B960             0336*  @update:
04B960 22 7D 69 04 0337*      ld (bj_health_image),hl
04B964 C9          0338*      ret
04B965             0339*  
04B965 00 00 00    0340*  last_damage: dl 0x00 ; last damage dealt to player
04B968             0341*  
04B968             0342*  ; modifies the players score by a set amount
04B968             0343*  ; inputs: a is the signed amount to modify score
04B968             0344*  plyr_mod_score:
04B968 11 00 00 00 0345*      ld de,0 ; make sure deu is zero
04B96C 5F          0346*      ld e,a
04B96D 2A C5 B6 04 0347*      ld hl,(plyr_score)
04B971 19          0348*      add hl,de
04B972 22 C5 B6 04 0349*      ld (plyr_score),hl
04B976 C9          0350*      ret
04B977             0351*  
04B977             0352*  ; adds to player's ammo by a set amount
04B977             0353*  ; inputs: a is the signed amount to modify ammo
04B977             0354*  ; outputs: a will contain amount of ammo remaining
04B977             0355*  ;          carry will be set if ammo maxes out to 255
04B977             0356*  plyr_add_ammo:
04B977 21 07 B7 04 0357*      ld hl,plyr_ammo
04B97B 86          0358*      add a,(hl)
04B97C D2 82 B9 04 0359*      jp nc,@update ; if we roll over to zero when adding
04B980 3E FF       0360*      ld a,255 ; ... set ammo remaining to max
04B982             0361*  @update:
04B982 77          0362*      ld (hl),a
04B983 C9          0363*      ret
04B984             0364*  
04B984             0365*  ; subtracts from player's ammo by a set amount
04B984             0366*  ; inputs: a is the signed amount to modify ammo
04B984             0367*  ; outputs: carry reset if player was out of ammo before firing
04B984             0368*  ;          a will also contain amount of ammo remaining after shot
04B984             0369*  plyr_sub_ammo:
04B984 21 07 B7 04 0370*      ld hl,plyr_ammo
04B988 86          0371*      add a,(hl)
04B989 DA 9C B9 04 0372*      jp c,@update
04B98D 3E 01       0373*      ld a,%00000001 ; knife
04B98F 32 ED B6 04 0374*      ld (plyr_wpn_active),a
04B993 CD 51 B8 04 0375*      call plyr_set_weapon_parameters
04B997 AF          0376*      xor a ; clear carry, set ammo to zero
04B998 21 07 B7 04 0377*      ld hl,plyr_ammo
04B99C             0378*  @update:
04B99C 77          0379*      ld (hl),a
04B99D C9          0380*      ret
04B99E             0381*  
04B99E             0382*  plyr_shoot_knife:
04B99E CD BA C3 04 0383*      call sfx_play_knife
04B9A2             0384*      ; check whether the player hit anything
04B9A2 3A D6 B6 04 0385*      ld a,(orientation) ; direction knife is moving
04B9A6 5F          0386*      ld e,a
04B9A7 16 01       0387*      ld d,1 ; shot "velocity" in map units
04B9A9 CD 1B 67 04 0388*      call get_dx_dy ; d,e = dy,dx
04B9AD ED 53 E4 B6 0389*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B9B2 2A D7 B6 04 0390*      ld hl,(cur_x) ; h,l = player y,x
04B9B6 22 E1 B6 04 0391*      ld (plyr_shot_x),hl ; initial shot position
04B9BA ED 5B E4 B6 0392*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B9BF 2A E1 B6 04 0393*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B9C3             0394*      ; bump bullet position one map unit in direction of travel
04B9C3 7D          0395*      ld a,l ; player shot x
04B9C4 83          0396*      add a,e ; add xvel
04B9C5 6F          0397*      ld l,a ; save new x
04B9C6 7C          0398*      ld a,h ; player shot y
04B9C7 82          0399*      add a,d ; add yvel
04B9C8 67          0400*      ld h,a ; save new y
04B9C9 22 E1 B6 04 0401*      ld (plyr_shot_x),hl ; and save that position
04B9CD EB          0402*      ex de,hl ; d,e = bullet y,x
04B9CE CD F6 66 04 0403*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B9D2             0404*  ; check whether target cell contains a sprite
04B9D2 DD 7E 03    0405*      ld a,(ix+map_sprite_id)
04B9D5 FE FF       0406*      cp 255 ; value if not sprite
04B9D7 C8          0407*      ret z ; if we hit a non-sprite, we're done
04B9D8             0408*  ; is a sprite so run its "hurt" behavior routine
04B9D8 CD 87 A4 04 0409*      call sprite_set_pointer
04B9DC 3E 02       0410*      ld a,sp_hurt
04B9DE CD C1 A5 04 0411*      call do_sprite_behavior ; a = sprite behavior return code
04B9E2 C9          0412*      ret
04B9E3             0413*  
04B9E3             0414*  plyr_shoot_pistol:
04B9E3 3E FF       0415*      ld a,-1
04B9E5 CD 84 B9 04 0416*      call plyr_sub_ammo
04B9E9 DA F2 B9 04 0417*      jp c,@shoot
04B9ED CD A2 C3 04 0418*      call sfx_play_gun_empty
04B9F1 C9          0419*      ret
04B9F2             0420*  @shoot:
04B9F2 CD 0E C4 04 0421*      call sfx_play_shot_pistol
04B9F6 C3 28 BA 04 0422*      jp plyr_move_bullet
04B9FA             0423*  
04B9FA             0424*  plyr_shoot_machine_gun:
04B9FA 3E FC       0425*      ld a,-4
04B9FC CD 84 B9 04 0426*      call plyr_sub_ammo
04BA00 DA 09 BA 04 0427*      jp c,@shoot
04BA04 CD A2 C3 04 0428*      call sfx_play_gun_empty
04BA08 C9          0429*      ret
04BA09             0430*  @shoot:
04BA09 CD 02 C4 04 0431*      call sfx_play_shot_machine_gun_burst
04BA0D C3 28 BA 04 0432*      jp plyr_move_bullet
04BA11             0433*  
04BA11             0434*  plyr_shoot_gatling_gun:
04BA11 3E F8       0435*      ld a,-8
04BA13 CD 84 B9 04 0436*      call plyr_sub_ammo
04BA17 DA 20 BA 04 0437*      jp c,@shoot
04BA1B CD A2 C3 04 0438*      call sfx_play_gun_empty
04BA1F C9          0439*      ret
04BA20             0440*  @shoot:
04BA20 CD F6 C3 04 0441*      call sfx_play_shot_gatling_burst
04BA24 C3 28 BA 04 0442*      jp plyr_move_bullet
04BA28             0443*  
04BA28             0444*  plyr_move_bullet:
04BA28             0445*      ; check whether the player hit anything
04BA28 3A D6 B6 04 0446*      ld a,(orientation) ; direction shot is moving
04BA2C 32 E7 B6 04 0447*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04BA30 5F          0448*      ld e,a
04BA31 16 01       0449*      ld d,1 ; shot "velocity" in map units
04BA33 CD 1B 67 04 0450*      call get_dx_dy ; d,e = dy,dx
04BA37 ED 53 E4 B6 0451*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04BA3C 2A D7 B6 04 0452*      ld hl,(cur_x) ; h,l = player y,x
04BA40 22 E1 B6 04 0453*      ld (plyr_shot_x),hl ; initial shot position
04BA44 06 05       0454*      ld b,view_distance ; loop counter so player can't shoot past view distance
04BA46             0455*  @loop:
04BA46 C5          0456*      push bc ; save loop counter
04BA47 ED 5B E4 B6 0457*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04BA4C 2A E1 B6 04 0458*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04BA50             0459*      ; bump bullet position one map unit in direction of travel
04BA50 7D          0460*      ld a,l ; player shot x
04BA51 83          0461*      add a,e ; add xvel
04BA52 6F          0462*      ld l,a ; save new x
04BA53 7C          0463*      ld a,h ; player shot y
04BA54 82          0464*      add a,d ; add yvel
04BA55 67          0465*      ld h,a ; save new y
04BA56 22 E1 B6 04 0466*      ld (plyr_shot_x),hl ; and save that position
04BA5A EB          0467*      ex de,hl ; d,e = bullet y,x
04BA5B CD F6 66 04 0468*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04BA5F             0469*  ; check whether target cell contains a sprite
04BA5F DD 7E 03    0470*      ld a,(ix+map_sprite_id)
04BA62 FE FF       0471*      cp 255 ; value if not sprite
04BA64 28 14       0472*      jr z,@not_sprite
04BA66             0473*  ; is a sprite so run its "hurt" behavior routine
04BA66 CD 87 A4 04 0474*      call sprite_set_pointer
04BA6A 3E 02       0475*      ld a,sp_hurt
04BA6C CD C1 A5 04 0476*      call do_sprite_behavior ; a = sprite behavior return code
04BA70 3A E7 B6 04 0477*      ld a,(plyr_shot_status)
04BA74 FE FF       0478*      cp 255 ; value if shot hit a shootable sprite
04BA76 28 10       0479*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04BA78 18 16       0480*      jr @move_bullet ; otherwise keep moving bullet
04BA7A             0481*  @not_sprite:
04BA7A ED 5B E4 B6 0482*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04BA7F             0483*  ; read map type/status mask from target cell
04BA7F DD 7E 00    0484*      ld a,(ix+map_type_status)
04BA82 E6 03       0485*      and %00000011 ; mask off everything but the render type mask bits
04BA84             0486*  ; branch on the values in the bitmask
04BA84 FE 01       0487*      cp render_type_floor
04BA86 28 08       0488*      jr z,@move_bullet ; keep going if map cell is a floor
04BA88             0489*  @stop_bullet:
04BA88 C1          0490*      pop bc ; dummy pop to balance stack
04BA89 3E FF       0491*      ld a,255
04BA8B 32 E7 B6 04 0492*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04BA8F C9          0493*      ret ; combat ended
04BA90             0494*  @move_bullet:
04BA90 C1          0495*      pop bc ; restore loop counter
04BA91 10 B3       0496*      djnz @loop ; keep moving bullet if we have more distance to cover
04BA93 3E FF       0497*      ld a,255
04BA95 32 E7 B6 04 0498*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04BA99 C9          0499*      ret ; combat ended
04BA9A             0500*  
04BA9A             0501*  plyr_shoot:
04BA9A             0502*  ; check if fire weapons timer has expired
04BA9A FD 21 FB B6 0503*      ld iy,plyr_wpn_fire_tmr
       04          
04BA9F CD C7 C5 04 0504*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BAA3 CA AC BA 04 0505*      jp z,@time_up ; timer zero so fire weapon
04BAA7 FA AC BA 04 0506*      jp m,@time_up ; timer negative so fire weapon
04BAAB C9          0507*      ret ; timer not expired so don't fire weapon
04BAAC             0508*  @time_up:
04BAAC             0509*  ; reset fire weapon timer
04BAAC FD 21 FB B6 0510*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04BAB1 2A 01 B7 04 0511*      ld hl,(plyr_wpn_fire_rate)
04BAB5 CD BC C5 04 0512*      call timestamp_tmr_set
04BAB9             0513*  ; check animation frame for zero
04BAB9 21 04 B7 04 0514*      ld hl,plyr_wpn_anim_fr
04BABD 7E          0515*      ld a,(hl)
04BABE A7          0516*      and a
04BABF 20 01       0517*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04BAC1 34          0518*      inc (hl) ; is zero so bump to first animation frame
04BAC2             0519*  @shoot:
04BAC2             0520*  ; roll for damage modifier
04BAC2 CD 4B BC 04 0521*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04BAC6 21 EE B6 04 0522*      ld hl,plyr_wpn_damage
04BACA A6          0523*      and a,(hl) ; a contains modified damage value
04BACB ED 44       0524*      neg ; so we can add the negative
04BACD 32 EB B6 04 0525*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04BAD1             0526*  ; determine active weapon and shoot it
04BAD1 3A ED B6 04 0527*      ld a,(plyr_wpn_active)
04BAD5 FE 02       0528*      cp plyr_wpn_pistol
04BAD7 CA E3 B9 04 0529*      jp z,plyr_shoot_pistol
04BADB FE 04       0530*      cp plyr_wpn_mg
04BADD CA FA B9 04 0531*      jp z,plyr_shoot_machine_gun
04BAE1 FE 08       0532*      cp plyr_wpn_gg
04BAE3 CA 11 BA 04 0533*      jp z,plyr_shoot_gatling_gun
04BAE7 FE 01       0534*      cp plyr_wpn_knife
04BAE9 CA 9E B9 04 0535*      jp z,plyr_shoot_knife
04BAED C9          0536*      ret
04BAEE             0537*  
04BAEE             0538*  ; process player keyboard input
04BAEE             0539*  ; Inputs: plyr_x/y set at desired position
04BAEE             0540*  ; Returns: player position updated
04BAEE             0541*  ; Destroys: probably everything
04BAEE             0542*  plyr_input:
04BAEE             0543*  ; check weapon anmation frame for zero
04BAEE 3A 04 B7 04 0544*      ld a,(plyr_wpn_anim_fr)
04BAF2 E6 03       0545*      and 3 ; modulo 4
04BAF4 32 04 B7 04 0546*      ld (plyr_wpn_anim_fr),a
04BAF8 28 05       0547*      jr z,@get_input
04BAFA             0548*  ; ; animation frame is not zero so check animation timer
04BAFA             0549*  ;     ld iy,plyr_wpn_anim_tmr
04BAFA             0550*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BAFA             0551*  ;     jp z,@animate ; timer zero so animate
04BAFA             0552*  ;     jp m,@animate ; timer negative so animate
04BAFA             0553*  ;     jp @get_input ; time left on timer so no animation
04BAFA             0554*  ; bump animation frame
04BAFA             0555*  @animate:
04BAFA 21 04 B7 04 0556*      ld hl,plyr_wpn_anim_fr
04BAFE 34          0557*      inc (hl) ; next frame
04BAFF             0558*  ; ; reset animation timer
04BAFF             0559*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04BAFF             0560*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04BAFF             0561*  ;     call timestamp_tmr_set
04BAFF             0562*  
04BAFF             0563*  @get_input:
04BAFF             0564*  ; reset player component velocities to zero as the default
04BAFF 21 00 00 00 0565*      ld hl,0
04BB03 22 DA B6 04 0566*      ld (xvel),hl ; implicitly sets yvel
04BB07 AF          0567*      xor a ;
04BB08 32 E0 B6 04 0568*      ld (avel),a ; set player angular velocity to zero as default
04BB0C             0569*  
04BB0C             0570*  ; check for keypresses and branch accordingly
04BB0C             0571*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04BB0C 3E 1E       0001*M 			LD	A, function
04BB0E 5B CF       0002*M 			RST.LIL	08h
04BB10             0572*  
04BB10             0573*  ; CHECK WEAPON CONTROL KEYS
04BB10             0574*  ; 58 Up player selects next weapon
04BB10 DD CB 07 4E 0575*      bit 1,(ix+7)
04BB14 28 08       0576*      jr z,@Up
04BB16 DD E5       0577*      push ix ; it gets clobbered by the weapon select routine
04BB18 CD 05 B8 04 0578*      call plyr_next_weapon
04BB1C DD E1       0579*      pop ix
04BB1E             0580*  @Up:
04BB1E             0581*  
04BB1E             0582*  ; 42 Down
04BB1E DD CB 05 4E 0583*      bit 1,(ix+5)
04BB22 28 08       0584*      jr z,@Down
04BB24 DD E5       0585*      push ix ; it gets clobbered by the weapon select routine
04BB26 CD 2D B8 04 0586*      call plyr_previous_weapon
04BB2A DD E1       0587*      pop ix
04BB2C             0588*  @Down:
04BB2C             0589*  
04BB2C             0590*  ; =====================
04BB2C             0591*  ; 99 Space FIRE ZEE MISSILES!!!111
04BB2C DD CB 0C 56 0592*      bit 2,(ix+12)
04BB30 28 08       0593*      jr z,@Space
04BB32 DD E5       0594*      push ix ; it gets clobbered by the weapon firing
04BB34 CD 9A BA 04 0595*      call plyr_shoot
04BB38 DD E1       0596*      pop ix ; restore ix
04BB3A             0597*  @Space:
04BB3A             0598*  
04BB3A             0599*  ; CHECK MOVEMENT KEYS
04BB3A             0600*  ; non-zero means no movement key was pressed
04BB3A 3E FF       0601*      ld a,-1
04BB3C             0602*  
04BB3C             0603*  ; 34 W player moves forward
04BB3C DD CB 04 4E 0604*      bit 1,(ix+4)
04BB40 28 07       0605*      jr z,@W
04BB42 3E 01       0606*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04BB44 32 DB B6 04 0607*      ld (yvel),a
04BB48 AF          0608*      xor a
04BB49             0609*  @W:
04BB49             0610*  
04BB49             0611*  ; 82 S player moves backward
04BB49 DD CB 0A 4E 0612*      bit 1,(ix+10)
04BB4D 28 0C       0613*      jr z,@S
04BB4F 16 FF       0614*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04BB51 3A DB B6 04 0615*      ld a,(yvel)
04BB55 82          0616*      add a,d
04BB56 32 DB B6 04 0617*      ld (yvel),a
04BB5A AF          0618*      xor a
04BB5B             0619*  @S:
04BB5B             0620*  
04BB5B             0621*  ; 66 A plyer moves left
04BB5B DD CB 08 4E 0622*      bit 1,(ix+8)
04BB5F 28 07       0623*      jr z,@A
04BB61 3E FF       0624*      ld a,-speed_plyr ; no funky axis conversion here
04BB63 32 DA B6 04 0625*      ld (xvel),a
04BB67 AF          0626*      xor a
04BB68             0627*  @A:
04BB68             0628*  
04BB68             0629*  ; 51 D player moves right
04BB68 DD CB 06 56 0630*      bit 2,(ix+6)
04BB6C 28 0C       0631*      jr z,@D
04BB6E 16 01       0632*      ld d,speed_plyr ; no funky axis conversion here
04BB70 3A DA B6 04 0633*      ld a,(xvel)
04BB74 82          0634*      add a,d
04BB75 32 DA B6 04 0635*      ld (xvel),a
04BB79 AF          0636*      xor a
04BB7A             0637*  @D:
04BB7A             0638*  
04BB7A             0639*  ; 26 Left player rotates anti-clockwise
04BB7A DD CB 03 4E 0640*      bit 1,(ix+3)
04BB7E 28 06       0641*      jr z,@Left
04BB80 21 E0 B6 04 0642*      ld hl,avel
04BB84 35          0643*      dec (hl)
04BB85 AF          0644*      xor a
04BB86             0645*  @Left:
04BB86             0646*  
04BB86             0647*  ; 122 Right player rotates clockwise
04BB86 DD CB 0F 4E 0648*      bit 1,(ix+15)
04BB8A 28 06       0649*      jr z,@Right
04BB8C 21 E0 B6 04 0650*      ld hl,avel
04BB90 34          0651*      inc (hl)
04BB91 AF          0652*      xor a
04BB92             0653*  @Right:
04BB92             0654*  
04BB92             0655*  ; KEYPRESS DETECTION DONE
04BB92 A7          0656*      and a ; this will zero if player pressed a movement key
04BB93 C0          0657*      ret nz ; non zero so no key pressed
04BB94             0658*  ; check move timer
04BB94 FD 21 13 B7 0659*      ld iy,plyr_move_timer
       04          
04BB99 CD C7 C5 04 0660*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BB9D F0          0661*      ret p ; time left on timer so no movement
04BB9E             0662*  ; reset_move_timer
04BB9E 21 1E 00 00 0663*      ld hl,plyr_move_rate
04BBA2 FD 21 13 B7 0664*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04BBA7 CD BC C5 04 0665*      call timestamp_tmr_set
04BBAB             0666*  ; move player according to velocities set by keypresses
04BBAB ED 5B DA B6 0667*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04BBB0 3A E0 B6 04 0668*      ld a,(avel)
04BBB4 21 D6 B6 04 0669*      ld hl,orientation
04BBB8 86          0670*      add a,(hl)
04BBB9 E6 03       0671*      and 0x03 ; modulo 4
04BBBB 77          0672*      ld (hl),a
04BBBC CD 63 67 04 0673*      call trans_dx_dy ; d = dy, e = dx
04BBC0 ED 53 DE B6 0674*      ld (dx),de
       04          
04BBC5 3A D7 B6 04 0675*      ld a,(cur_x)
04BBC9 83          0676*      add a,e
04BBCA 5F          0677*      ld e,a
04BBCB 3A D8 B6 04 0678*      ld a,(cur_y)
04BBCF 82          0679*      add a,d
04BBD0 57          0680*      ld d,a
04BBD1 ED 53 DA B6 0681*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04BBD6 CD F6 66 04 0682*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04BBDA             0683*  ; check whether target cell contains a sprite
04BBDA DD 7E 03    0684*      ld a,(ix+map_sprite_id)
04BBDD FE FF       0685*      cp 255 ; value if not sprite
04BBDF 28 0A       0686*      jr z,@not_sprite
04BBE1             0687*  ; is a sprite so run its "use" behavior routine
04BBE1 CD 87 A4 04 0688*      call sprite_set_pointer
04BBE5 3E 01       0689*      ld a,sp_use
04BBE7 CD C1 A5 04 0690*      call do_sprite_behavior
04BBEB             0691*  ; fall through because we still need to check out what's going on in the target cell
04BBEB             0692*  @not_sprite:
04BBEB ED 5B DA B6 0693*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04BBF0             0694*  ; read map type/status mask from target cell
04BBF0 DD 7E 00    0695*      ld a,(ix+map_type_status)
04BBF3 47          0696*      ld b,a ; b = target cell type/status
04BBF4             0697*  ; branch on the values in the bitmask
04BBF4 3E 40       0698*      ld a,cell_is_wall
04BBF6 A0          0699*      and b
04BBF7 C0          0700*      ret nz ; can't move thru walls
04BBF8 3E 04       0701*      ld a,cell_is_to_room
04BBFA A0          0702*      and b
04BBFB C2 6E 68 04 0703*      jp nz,change_room
04BBFF             0704*      ; fall through to @move_it
04BBFF             0705*  @move_it:
04BBFF             0706*  ; we are cleared for movement so update player position
04BBFF 11 00 00 00 0707*      ld de,0 ; make sure deu is zero
04BC03 ED 4B DE B6 0708*      ld bc,(dx) ; b = dy, c = dx
       04          
04BC08 3A D7 B6 04 0709*      ld a,(cur_x)
04BC0C 81          0710*      add a,c
04BC0D 5F          0711*      ld e,a
04BC0E 32 D7 B6 04 0712*      ld (cur_x),a
04BC12 3A D8 B6 04 0713*      ld a,(cur_y)
04BC16 80          0714*      add a,b
04BC17 57          0715*      ld d,a
04BC18 32 D8 B6 04 0716*      ld (cur_y),a
04BC1C C9          0717*      ret
04BC1D             0027   	include "src/asm/maths.asm"
04BC1D 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04BC21 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04BC25             0003*  
04BC25             0004*  ; set bcd values in a scratch memory address from registers bcde
04BC25             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04BC25             0006*  ; destroys ; hl
04BC25             0007*  set_bcd:
04BC25 73          0008*      ld (hl),e
04BC26 23          0009*      inc hl
04BC27 72          0010*      ld (hl),d
04BC28 23          0011*      inc hl
04BC29 71          0012*      ld (hl),c
04BC2A 23          0013*      inc hl
04BC2B 70          0014*      ld (hl),b
04BC2C C9          0015*      ret
04BC2D             0016*  
04BC2D             0017*  ; load bcd values from a scratch memory address to bcde
04BC2D             0018*  ; input: hl; scratch address
04BC2D             0019*  ; output: bcde; 8-place bcd number
04BC2D             0020*  ; destroys: hl
04BC2D             0021*  get_bcd:
04BC2D 5E          0022*      ld e,(hl)
04BC2E 23          0023*      inc hl
04BC2F 56          0024*      ld d,(hl)
04BC30 23          0025*      inc hl
04BC31 4E          0026*      ld c,(hl)
04BC32 23          0027*      inc hl
04BC33 46          0028*      ld b,(hl)
04BC34 C9          0029*      ret
04BC35             0030*  
04BC35             0031*  ; BCD addition
04BC35             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04BC35             0033*  ;       a is the number of bytes holding each number (number of places/2)
04BC35             0034*  ; outputs: (hl) + (de) --> (hl)
04BC35             0035*  ; destroys: a,b,de,hl
04BC35             0036*  add_bcd:
04BC35 47          0037*      ld b,a ; loop counter
04BC36 AF          0038*      xor a ; reset a, clear carry flag
04BC37             0039*  adcec:
04BC37 1A          0040*      ld a,(de) ; addend to acc
04BC38 8E          0041*      adc a,(hl) ; add (hl) to acc
04BC39 27          0042*      daa ; adjust result to bcd
04BC3A 77          0043*      ld (hl),a ; store result
04BC3B 23          0044*      inc hl ; advance memory pointers
04BC3C 13          0045*      inc de
04BC3D 10 F8       0046*      djnz adcec ; loop until b == 0
04BC3F C9          0047*      ret
04BC40             0048*  
04BC40             0049*  ; BCD subtraction
04BC40             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04BC40             0051*  ;       a is the number of bytes holding each number (number of places/2)
04BC40             0052*  ; outputs: (hl) - (de) --> (hl)
04BC40             0053*  ; destroys: a,b,de,hl
04BC40             0054*  sub_bcd:
04BC40 47          0055*      ld b,a ; loop counter
04BC41 AF          0056*      xor a ; reset a,clear carry flag
04BC42             0057*  subdec:
04BC42 1A          0058*      ld a,(de) ; subtrahend to acc
04BC43 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04BC44 27          0060*      daa ; adjust result to bcd
04BC45 77          0061*      ld (hl),a ; store result
04BC46 23          0062*      inc hl ; advance memory pointers
04BC47 13          0063*      inc de
04BC48 10 F8       0064*      djnz subdec ; loop until b == 0
04BC4A C9          0065*      ret
04BC4B             0066*  
04BC4B             0067*  ; http://www.z80.info/pseudo-random.txt
04BC4B             0068*  rand_8:
04BC4B C5          0069*      push bc
04BC4C 3A 5F BC 04 0070*      ld a,(r_seed)
04BC50 4F          0071*      ld c,a
04BC51             0072*  
04BC51 0F          0073*      rrca ; multiply by 32
04BC52 0F          0074*      rrca
04BC53 0F          0075*      rrca
04BC54 EE 1F       0076*      xor 0x1f
04BC56             0077*  
04BC56 81          0078*      add a,c
04BC57 DE FF       0079*      sbc a,255 ; carry
04BC59             0080*  
04BC59 32 5F BC 04 0081*      ld (r_seed),a
04BC5D C1          0082*      pop bc
04BC5E C9          0083*      ret
04BC5F 50          0084*  r_seed: defb $50
04BC60             0028   	include "src/asm/img_load.asm"
04BC60 00 00 00    0001*  cur_file_idx: dl 0
04BC63 00 00 00    0002*  cur_filename: dl 0
04BC66 00 00 00    0003*  cur_buffer_id: dl 0
04BC69 00 00 00    0004*  cur_buffer_id_lut: dl 0
04BC6C 00 00 00    0005*  cur_load_jump_table: dl 0
04BC6F             0006*  
04BC6F             0007*  img_load_init:
04BC6F             0008*  ; initialize bj's position parameters
04BC6F 21 00 00 00 0009*  	ld hl,0
04BC73 22 BD BD 04 0010*  	ld (bj_yvel),hl
04BC77             0011*  
04BC77 21 2D 00 00 0012*      ld hl,45
04BC7B 22 C0 BD 04 0013*  	ld (bj_y_cur),hl
04BC7F 22 C3 BD 04 0014*  	ld (bj_y_min),hl
04BC83 22 C6 BD 04 0015*      ld (bj_y_max),hl
04BC87             0016*  
04BC87 21 01 00 00 0017*  	ld hl,1
04BC8B 22 B1 BD 04 0018*  	ld (bj_xvel),hl
04BC8F             0019*  
04BC8F 21 0A 00 00 0020*  	ld hl,10
04BC93 22 B4 BD 04 0021*  	ld (bj_x_cur),hl
04BC97 22 B7 BD 04 0022*  	ld (bj_x_min),hl
04BC9B             0023*  
04BC9B 21 C8 00 00 0024*  	ld hl,320-120
04BC9F 22 BA BD 04 0025*  	ld (bj_x_max),hl
04BCA3             0026*  
04BCA3 C9          0027*      ret
04BCA4             0028*  
04BCA4             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04BCA4             0030*  img_load_main:
04BCA4 21 00 00 00 0031*      ld hl,0
04BCA8 22 60 BC 04 0032*      ld (cur_file_idx),hl
04BCAC             0033*  img_load_main_loop:
04BCAC             0034*  ; back up loop counter
04BCAC C5          0035*      push bc
04BCAD             0036*  ; load the next panel
04BCAD CD 15 BD 04 0037*      call load_next_panel
04BCB1             0038*  ; draw all the things
04BCB1 CD C9 BD 04 0039*      call tmp_draw_all_the_things
04BCB5             0040*  ; draw the most recently loaded panel
04BCB5 2A 66 BC 04 0041*  	ld hl,(cur_buffer_id)
04BCB9 CD 32 AE 04 0042*  	call vdu_buff_select
04BCBD 01 00 00 00 0043*  	ld bc,0
04BCC1 11 00 00 00 0044*  	ld de,0
04BCC5 CD 03 B0 04 0045*  	call vdu_plot_bmp
04BCC9             0046*  ; move bj
04BCC9 CD 51 BD 04 0047*  	call move_bj
04BCCD             0048*  ; print welcome message
04BCCD DD 21 92 80 0049*  	ld ix,font_itc_honda
       04          
04BCD2 21 33 C6 04 0050*  	ld hl,hello_world
04BCD6 01 20 00 00 0051*  	ld bc,32
04BCDA 11 02 00 00 0052*  	ld de,2
04BCDE CD D3 66 04 0053*  	call font_bmp_print
04BCE2             0054*  ; print current filename
04BCE2 CD C9 AC 04 0055*  	call vdu_cls
04BCE6 2A 63 BC 04 0056*  	ld hl,(cur_filename)
04BCEA CD C8 B2 04 0057*  	call printString
04BCEE CD DD B2 04 0058*  	call printNewLine
04BCF2             0059*  
04BCF2             0060*  ; print current load stopwatch
04BCF2 21 55 C6 04 0061*  	ld hl,loading_time
04BCF6 CD C8 B2 04 0062*  	call printString
04BCFA CD E5 C5 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04BCFE CD 16 B3 04 0064*  	call printDec
04BD02             0065*  
04BD02             0066*  ; flip screen
04BD02 CD 98 AE 04 0067*      call vdu_flip
04BD06             0068*  ; decrement loop counter
04BD06 C1          0069*      pop bc
04BD07 0B          0070*  	dec bc
04BD08             0071*  ; ; DEBUG: DUMP REGISTERS
04BD08             0072*  ; 	push bc
04BD08             0073*  ; 	call dumpRegistersHex
04BD08             0074*  ; 	call vdu_flip
04BD08             0075*  ; 	pop bc
04BD08             0076*  ; ; END DEBUG
04BD08 79          0077*      ld a,c
04BD09 B7          0078*      or a
04BD0A C2 AC BC 04 0079*      jp nz,img_load_main_loop
04BD0E 78          0080*      ld a,b
04BD0F B7          0081*      or a
04BD10 C2 AC BC 04 0082*      jp nz,img_load_main_loop
04BD14 C9          0083*      ret
04BD15             0084*  
04BD15             0085*  load_next_panel:
04BD15             0086*  ; look up the load routine for the current file index
04BD15 2A 60 BC 04 0087*  	ld hl,(cur_file_idx)
04BD19 29          0088*  	add hl,hl ; multiply current index by 2 ...
04BD1A ED 5B 60 BC 0089*  	ld de,(cur_file_idx)
       04          
04BD1F 19          0090*  	add hl,de ; ... now by 3
04BD20 ED 5B 6C BC 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04BD25 19          0092*  	add hl,de
04BD26 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04BD28 22 2D BD 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04BD2C             0095*  @jump_addr:
04BD2C CD 00 00 00 0096*  	call 0 ; call the panel load routine
04BD30             0097*  ; look up the buffer id for the current file
04BD30 2A 60 BC 04 0098*  	ld hl,(cur_file_idx)
04BD34 29          0099*  	add hl,hl ; multiply current index by 2 ...
04BD35 ED 5B 60 BC 0100*  	ld de,(cur_file_idx)
       04          
04BD3A 19          0101*  	add hl,de ; ... now by 3
04BD3B ED 5B 69 BC 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04BD40 19          0103*  	add hl,de
04BD41 ED 27       0104*  	ld hl,(hl)
04BD43 22 66 BC 04 0105*  	ld (cur_buffer_id),hl
04BD47             0106*  ; bump the current file index
04BD47 2A 60 BC 04 0107*  	ld hl,(cur_file_idx)
04BD4B 23          0108*  	inc hl
04BD4C 22 60 BC 04 0109*  	ld (cur_file_idx),hl
04BD50 C9          0110*  	ret
04BD51             0111*  
04BD51             0112*  move_bj:
04BD51             0113*  ; activate bj bitmap
04BD51 21 04 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04BD55 CD 32 AE 04 0115*  	call vdu_buff_select
04BD59             0116*  ; update position based on velocity parameters
04BD59 2A B4 BD 04 0117*  	ld hl, (bj_x_cur)
04BD5D ED 5B B1 BD 0118*  	ld de, (bj_xvel)
       04          
04BD62 19          0119*  	add hl, de
04BD63 22 B4 BD 04 0120*  	ld (bj_x_cur), hl
04BD67 EB          0121*  	ex de,hl ; store x_cur in de
04BD68             0122*  ; check if we're < x_min
04BD68 2A B7 BD 04 0123*  	ld hl,(bj_x_min)
04BD6C AF          0124*  	xor a ; clear carry
04BD6D ED 52       0125*  	sbc hl,de ; x_min - x_cur
04BD6F F2 8D BD 04 0126*  	jp p, move_bj_x_min
04BD73             0127*  ; check if we're > x_max
04BD73 2A BA BD 04 0128*  	ld hl,(bj_x_max)
04BD77 AF          0129*  	xor a ; clear carry
04BD78 ED 52       0130*  	sbc hl,de ; x_max - x_cur
04BD7A FA 9F BD 04 0131*  	jp m, move_bj_x_max
04BD7E             0132*  ; if not at either boundary, fall through to draw bj's
04BD7E             0133*  draw_bj:
04BD7E ED 4B B4 BD 0134*  	ld bc,(bj_x_cur)
       04          
04BD83 ED 5B C0 BD 0135*  	ld de,(bj_y_cur)
       04          
04BD88 CD 03 B0 04 0136*  	call vdu_plot_bmp
04BD8C C9          0137*  	ret
04BD8D             0138*  move_bj_x_min:
04BD8D 21 01 00 00 0139*  	ld hl,1
04BD91 22 B1 BD 04 0140*  	ld (bj_xvel),hl
04BD95 2A B7 BD 04 0141*  	ld hl,(bj_x_min)
04BD99 22 B4 BD 04 0142*  	ld (bj_x_cur),hl
04BD9D 18 DF       0143*  	jr draw_bj
04BD9F             0144*  move_bj_x_max:
04BD9F 21 FF FF FF 0145*  	ld hl,-1
04BDA3 22 B1 BD 04 0146*  	ld (bj_xvel),hl
04BDA7 2A BA BD 04 0147*  	ld hl,(bj_x_max)
04BDAB 22 B4 BD 04 0148*  	ld (bj_x_cur),hl
04BDAF 18 CD       0149*  	jr draw_bj
04BDB1 00 00 00    0150*  bj_xvel: dl 0
04BDB4 00 00 00    0151*  bj_x_cur: dl 0
04BDB7 00 00 00    0152*  bj_x_min: dl 0
04BDBA 00 00 00    0153*  bj_x_max: dl 0
04BDBD             0154*  
04BDBD 00 00 00    0155*  bj_yvel: dl 0
04BDC0 00 00 00    0156*  bj_y_cur: dl 0
04BDC3 00 00 00    0157*  bj_y_min: dl 0
04BDC6 00 00 00    0158*  bj_y_max: dl 0
04BDC9             0159*  
04BDC9             0160*  tmp_draw_all_the_things:
04BDC9 21 0A 20 00 0161*      ld hl,BUF_UI_SPLASH
04BDCD CD 32 AE 04 0162*      call vdu_buff_select
04BDD1 01 00 00 00 0163*      ld bc,0
04BDD5 11 00 00 00 0164*      ld de,0
04BDD9 CD 03 B0 04 0165*      call vdu_plot_bmp
04BDDD C9          0166*  	ret
04BDDE             0167*  
04BDDE             0168*  ; load an uncompressed rgba2222 image file to a buffer
04BDDE             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04BDDE             0170*  vdu_load_img:
04BDDE             0171*  ; back up image dimension parameters
04BDDE C5          0172*  	push bc
04BDDF D5          0173*  	push de
04BDE0             0174*  ; load the image
04BDE0 CD 42 C8 04 0175*  	call vdu_load_buffer_from_file
04BDE4             0176*  ; now make it a bitmap
04BDE4 D1          0177*  	pop de
04BDE5 C1          0178*  	pop bc
04BDE6 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04BDE8 C3 47 AE 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04BDEC             0181*  
04BDEC             0182*  ; load a compressed rgba2222 image file to a buffer
04BDEC             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04BDEC             0184*  vdu_load_img_cmp:
04BDEC             0185*  ; back up image dimension parameters
04BDEC C5          0186*  	push bc
04BDED D5          0187*  	push de
04BDEE             0188*  ; back up the buffer id
04BDEE E5          0189*  	push hl
04BDEF             0190*  ; load the image
04BDEF CD 42 C8 04 0191*  	call vdu_load_buffer_from_file
04BDF3             0192*  ; decompress the buffer
04BDF3 E1          0193*  	pop hl ; bufferId
04BDF4 CD A6 AE 04 0194*  	call vdu_decompress_buffer
04BDF8             0195*  ; now make it a bitmap
04BDF8 D1          0196*  	pop de ; image height
04BDF9 C1          0197*  	pop bc ; image width
04BDFA 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04BDFC C3 47 AE 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04BE00             0029   	include "src/asm/sfx.asm"
04BE00             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04BE00             0002*  
04BE00             0003*  SFX_num_buffers: equ 22
04BE00             0004*  ; SFX buffer ids:
04BE00             0005*  BUF_ACHTUNG: equ 0xFB00
04BE00             0006*  BUF_AHH: equ 0xFB01
04BE00             0007*  BUF_AUGH: equ 0xFB02
04BE00             0008*  BUF_AYEE: equ 0xFB03
04BE00             0009*  BUF_AYEE_HIGH: equ 0xFB04
04BE00             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04BE00             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04BE00             0012*  BUF_DOG_YELP: equ 0xFB07
04BE00             0013*  BUF_EXPLODE: equ 0xFB08
04BE00             0014*  BUF_GOT_TREASURE: equ 0xFB09
04BE00             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04BE00             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04BE00             0017*  BUF_KNIFE: equ 0xFB0C
04BE00             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04BE00             0019*  BUF_OOF: equ 0xFB0E
04BE00             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04BE00             0021*  BUF_SCREAM: equ 0xFB10
04BE00             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04BE00             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04BE00             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04BE00             0025*  BUF_UGH: equ 0xFB14
04BE00             0026*  BUF_WILHELM: equ 0xFB15
04BE00             0027*  
04BE00             0028*  ; SFX buffer id reverse lookup:
04BE00             0029*  SFX_buffer_id_lut:
04BE00 00 FB 00    0030*  	dl BUF_ACHTUNG
04BE03 01 FB 00    0031*  	dl BUF_AHH
04BE06 02 FB 00    0032*  	dl BUF_AUGH
04BE09 03 FB 00    0033*  	dl BUF_AYEE
04BE0C 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04BE0F 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04BE12 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04BE15 07 FB 00    0037*  	dl BUF_DOG_YELP
04BE18 08 FB 00    0038*  	dl BUF_EXPLODE
04BE1B 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04BE1E 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04BE21 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04BE24 0C FB 00    0042*  	dl BUF_KNIFE
04BE27 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04BE2A 0E FB 00    0044*  	dl BUF_OOF
04BE2D 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04BE30 10 FB 00    0046*  	dl BUF_SCREAM
04BE33 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04BE36 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04BE39 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04BE3C 14 FB 00    0050*  	dl BUF_UGH
04BE3F 15 FB 00    0051*  	dl BUF_WILHELM
04BE42             0052*  
04BE42             0053*  ; SFX duration lookup:
04BE42             0054*  SFX_duration_lut:
04BE42 58 03       0055*  	dw 856 ; ACHTUNG
04BE44 91 01       0056*  	dw 401 ; AHH
04BE46 FC 02       0057*  	dw 764 ; AUGH
04BE48 E6 01       0058*  	dw 486 ; AYEE
04BE4A 40 04       0059*  	dw 1088 ; AYEE_HIGH
04BE4C 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04BE4E 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04BE50 B0 01       0062*  	dw 432 ; DOG_YELP
04BE52 13 05       0063*  	dw 1299 ; EXPLODE
04BE54 A7 05       0064*  	dw 1447 ; GOT_TREASURE
04BE56 24 01       0065*  	dw 292 ; GUN_EMPTY
04BE58 BA 01       0066*  	dw 442 ; GUN_RELOAD
04BE5A F2 00       0067*  	dw 242 ; KNIFE
04BE5C 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04BE5E CE 03       0069*  	dw 974 ; OOF
04BE60 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04BE62 E0 02       0071*  	dw 736 ; SCREAM
04BE64 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04BE66 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04BE68 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04BE6A 77 01       0075*  	dw 375 ; UGH
04BE6C FD 04       0076*  	dw 1277 ; WILHELM
04BE6E             0077*  
04BE6E             0078*  ; SFX load routines jump table:
04BE6E             0079*  SFX_load_routines_table:
04BE6E B0 BE 04    0080*  	dl load_sfx_ACHTUNG
04BE71 D2 BE 04    0081*  	dl load_sfx_AHH
04BE74 F4 BE 04    0082*  	dl load_sfx_AUGH
04BE77 16 BF 04    0083*  	dl load_sfx_AYEE
04BE7A 38 BF 04    0084*  	dl load_sfx_AYEE_HIGH
04BE7D 5A BF 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04BE80 7C BF 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04BE83 9E BF 04    0087*  	dl load_sfx_DOG_YELP
04BE86 C0 BF 04    0088*  	dl load_sfx_EXPLODE
04BE89 E2 BF 04    0089*  	dl load_sfx_GOT_TREASURE
04BE8C 04 C0 04    0090*  	dl load_sfx_GUN_EMPTY
04BE8F 26 C0 04    0091*  	dl load_sfx_GUN_RELOAD
04BE92 48 C0 04    0092*  	dl load_sfx_KNIFE
04BE95 6A C0 04    0093*  	dl load_sfx_MEIN_LEBEN
04BE98 8C C0 04    0094*  	dl load_sfx_OOF
04BE9B AE C0 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04BE9E D0 C0 04    0096*  	dl load_sfx_SCREAM
04BEA1 F2 C0 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04BEA4 14 C1 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04BEA7 36 C1 04    0099*  	dl load_sfx_SHOT_PISTOL
04BEAA 58 C1 04    0100*  	dl load_sfx_UGH
04BEAD 7A C1 04    0101*  	dl load_sfx_WILHELM
04BEB0             0102*  
04BEB0             0103*  ; Import sfx .raw files and load them into VDP buffers
04BEB0             0104*  
04BEB0             0105*  load_sfx_ACHTUNG:
04BEB0 21 9C C1 04 0106*  	ld hl,FACHTUNG
04BEB4 22 63 BC 04 0107*  	ld (cur_filename),hl
04BEB8 11 8F C8 04 0108*  	ld de,filedata
04BEBC 01 00 00 01 0109*  	ld bc,65536
04BEC0 3E 01       0110*  	ld a,mos_load
04BEC2 5B CF       0111*  	RST.LIL 08h
04BEC4 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04BEC8 DD 21 3A 38 0113*  	ld ix,14394
       00          
04BECD CD BC B2 04 0114*  	call vdu_load_sfx
04BED1 C9          0115*  	ret
04BED2             0116*  
04BED2             0117*  load_sfx_AHH:
04BED2 21 AC C1 04 0118*  	ld hl,FAHH
04BED6 22 63 BC 04 0119*  	ld (cur_filename),hl
04BEDA 11 8F C8 04 0120*  	ld de,filedata
04BEDE 01 00 00 01 0121*  	ld bc,65536
04BEE2 3E 01       0122*  	ld a,mos_load
04BEE4 5B CF       0123*  	RST.LIL 08h
04BEE6 21 01 FB 00 0124*  	ld hl,BUF_AHH
04BEEA DD 21 63 1A 0125*  	ld ix,6755
       00          
04BEEF CD BC B2 04 0126*  	call vdu_load_sfx
04BEF3 C9          0127*  	ret
04BEF4             0128*  
04BEF4             0129*  load_sfx_AUGH:
04BEF4 21 B8 C1 04 0130*  	ld hl,FAUGH
04BEF8 22 63 BC 04 0131*  	ld (cur_filename),hl
04BEFC 11 8F C8 04 0132*  	ld de,filedata
04BF00 01 00 00 01 0133*  	ld bc,65536
04BF04 3E 01       0134*  	ld a,mos_load
04BF06 5B CF       0135*  	RST.LIL 08h
04BF08 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04BF0C DD 21 39 32 0137*  	ld ix,12857
       00          
04BF11 CD BC B2 04 0138*  	call vdu_load_sfx
04BF15 C9          0139*  	ret
04BF16             0140*  
04BF16             0141*  load_sfx_AYEE:
04BF16 21 C5 C1 04 0142*  	ld hl,FAYEE
04BF1A 22 63 BC 04 0143*  	ld (cur_filename),hl
04BF1E 11 8F C8 04 0144*  	ld de,filedata
04BF22 01 00 00 01 0145*  	ld bc,65536
04BF26 3E 01       0146*  	ld a,mos_load
04BF28 5B CF       0147*  	RST.LIL 08h
04BF2A 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04BF2E DD 21 00 20 0149*  	ld ix,8192
       00          
04BF33 CD BC B2 04 0150*  	call vdu_load_sfx
04BF37 C9          0151*  	ret
04BF38             0152*  
04BF38             0153*  load_sfx_AYEE_HIGH:
04BF38 21 D2 C1 04 0154*  	ld hl,FAYEE_HIGH
04BF3C 22 63 BC 04 0155*  	ld (cur_filename),hl
04BF40 11 8F C8 04 0156*  	ld de,filedata
04BF44 01 00 00 01 0157*  	ld bc,65536
04BF48 3E 01       0158*  	ld a,mos_load
04BF4A 5B CF       0159*  	RST.LIL 08h
04BF4C 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04BF50 DD 21 77 47 0161*  	ld ix,18295
       00          
04BF55 CD BC B2 04 0162*  	call vdu_load_sfx
04BF59 C9          0163*  	ret
04BF5A             0164*  
04BF5A             0165*  load_sfx_DOG_WOOF_DOUBLE:
04BF5A 21 E4 C1 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04BF5E 22 63 BC 04 0167*  	ld (cur_filename),hl
04BF62 11 8F C8 04 0168*  	ld de,filedata
04BF66 01 00 00 01 0169*  	ld bc,65536
04BF6A 3E 01       0170*  	ld a,mos_load
04BF6C 5B CF       0171*  	RST.LIL 08h
04BF6E 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BF72 DD 21 24 28 0173*  	ld ix,10276
       00          
04BF77 CD BC B2 04 0174*  	call vdu_load_sfx
04BF7B C9          0175*  	ret
04BF7C             0176*  
04BF7C             0177*  load_sfx_DOG_WOOF_SINGLE:
04BF7C 21 FC C1 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04BF80 22 63 BC 04 0179*  	ld (cur_filename),hl
04BF84 11 8F C8 04 0180*  	ld de,filedata
04BF88 01 00 00 01 0181*  	ld bc,65536
04BF8C 3E 01       0182*  	ld a,mos_load
04BF8E 5B CF       0183*  	RST.LIL 08h
04BF90 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04BF94 DD 21 10 23 0185*  	ld ix,8976
       00          
04BF99 CD BC B2 04 0186*  	call vdu_load_sfx
04BF9D C9          0187*  	ret
04BF9E             0188*  
04BF9E             0189*  load_sfx_DOG_YELP:
04BF9E 21 14 C2 04 0190*  	ld hl,FDOG_YELP
04BFA2 22 63 BC 04 0191*  	ld (cur_filename),hl
04BFA6 11 8F C8 04 0192*  	ld de,filedata
04BFAA 01 00 00 01 0193*  	ld bc,65536
04BFAE 3E 01       0194*  	ld a,mos_load
04BFB0 5B CF       0195*  	RST.LIL 08h
04BFB2 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04BFB6 DD 21 60 1C 0197*  	ld ix,7264
       00          
04BFBB CD BC B2 04 0198*  	call vdu_load_sfx
04BFBF C9          0199*  	ret
04BFC0             0200*  
04BFC0             0201*  load_sfx_EXPLODE:
04BFC0 21 25 C2 04 0202*  	ld hl,FEXPLODE
04BFC4 22 63 BC 04 0203*  	ld (cur_filename),hl
04BFC8 11 8F C8 04 0204*  	ld de,filedata
04BFCC 01 00 00 01 0205*  	ld bc,65536
04BFD0 3E 01       0206*  	ld a,mos_load
04BFD2 5B CF       0207*  	RST.LIL 08h
04BFD4 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04BFD8 DD 21 48 55 0209*  	ld ix,21832
       00          
04BFDD CD BC B2 04 0210*  	call vdu_load_sfx
04BFE1 C9          0211*  	ret
04BFE2             0212*  
04BFE2             0213*  load_sfx_GOT_TREASURE:
04BFE2 21 35 C2 04 0214*  	ld hl,FGOT_TREASURE
04BFE6 22 63 BC 04 0215*  	ld (cur_filename),hl
04BFEA 11 8F C8 04 0216*  	ld de,filedata
04BFEE 01 00 00 01 0217*  	ld bc,65536
04BFF2 3E 01       0218*  	ld a,mos_load
04BFF4 5B CF       0219*  	RST.LIL 08h
04BFF6 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04BFFA DD 21 07 5F 0221*  	ld ix,24327
       00          
04BFFF CD BC B2 04 0222*  	call vdu_load_sfx
04C003 C9          0223*  	ret
04C004             0224*  
04C004             0225*  load_sfx_GUN_EMPTY:
04C004 21 4A C2 04 0226*  	ld hl,FGUN_EMPTY
04C008 22 63 BC 04 0227*  	ld (cur_filename),hl
04C00C 11 8F C8 04 0228*  	ld de,filedata
04C010 01 00 00 01 0229*  	ld bc,65536
04C014 3E 01       0230*  	ld a,mos_load
04C016 5B CF       0231*  	RST.LIL 08h
04C018 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04C01C DD 21 3F 13 0233*  	ld ix,4927
       00          
04C021 CD BC B2 04 0234*  	call vdu_load_sfx
04C025 C9          0235*  	ret
04C026             0236*  
04C026             0237*  load_sfx_GUN_RELOAD:
04C026 21 5C C2 04 0238*  	ld hl,FGUN_RELOAD
04C02A 22 63 BC 04 0239*  	ld (cur_filename),hl
04C02E 11 8F C8 04 0240*  	ld de,filedata
04C032 01 00 00 01 0241*  	ld bc,65536
04C036 3E 01       0242*  	ld a,mos_load
04C038 5B CF       0243*  	RST.LIL 08h
04C03A 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04C03E DD 21 0F 1D 0245*  	ld ix,7439
       00          
04C043 CD BC B2 04 0246*  	call vdu_load_sfx
04C047 C9          0247*  	ret
04C048             0248*  
04C048             0249*  load_sfx_KNIFE:
04C048 21 6F C2 04 0250*  	ld hl,FKNIFE
04C04C 22 63 BC 04 0251*  	ld (cur_filename),hl
04C050 11 8F C8 04 0252*  	ld de,filedata
04C054 01 00 00 01 0253*  	ld bc,65536
04C058 3E 01       0254*  	ld a,mos_load
04C05A 5B CF       0255*  	RST.LIL 08h
04C05C 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04C060 DD 21 F3 0F 0257*  	ld ix,4083
       00          
04C065 CD BC B2 04 0258*  	call vdu_load_sfx
04C069 C9          0259*  	ret
04C06A             0260*  
04C06A             0261*  load_sfx_MEIN_LEBEN:
04C06A 21 7D C2 04 0262*  	ld hl,FMEIN_LEBEN
04C06E 22 63 BC 04 0263*  	ld (cur_filename),hl
04C072 11 8F C8 04 0264*  	ld de,filedata
04C076 01 00 00 01 0265*  	ld bc,65536
04C07A 3E 01       0266*  	ld a,mos_load
04C07C 5B CF       0267*  	RST.LIL 08h
04C07E 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04C082 DD 21 81 35 0269*  	ld ix,13697
       00          
04C087 CD BC B2 04 0270*  	call vdu_load_sfx
04C08B C9          0271*  	ret
04C08C             0272*  
04C08C             0273*  load_sfx_OOF:
04C08C 21 90 C2 04 0274*  	ld hl,FOOF
04C090 22 63 BC 04 0275*  	ld (cur_filename),hl
04C094 11 8F C8 04 0276*  	ld de,filedata
04C098 01 00 00 01 0277*  	ld bc,65536
04C09C 3E 01       0278*  	ld a,mos_load
04C09E 5B CF       0279*  	RST.LIL 08h
04C0A0 21 0E FB 00 0280*  	ld hl,BUF_OOF
04C0A4 DD 21 00 40 0281*  	ld ix,16384
       00          
04C0A9 CD BC B2 04 0282*  	call vdu_load_sfx
04C0AD C9          0283*  	ret
04C0AE             0284*  
04C0AE             0285*  load_sfx_SCHUSSTAFFEL:
04C0AE 21 9C C2 04 0286*  	ld hl,FSCHUSSTAFFEL
04C0B2 22 63 BC 04 0287*  	ld (cur_filename),hl
04C0B6 11 8F C8 04 0288*  	ld de,filedata
04C0BA 01 00 00 01 0289*  	ld bc,65536
04C0BE 3E 01       0290*  	ld a,mos_load
04C0C0 5B CF       0291*  	RST.LIL 08h
04C0C2 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04C0C6 DD 21 63 26 0293*  	ld ix,9827
       00          
04C0CB CD BC B2 04 0294*  	call vdu_load_sfx
04C0CF C9          0295*  	ret
04C0D0             0296*  
04C0D0             0297*  load_sfx_SCREAM:
04C0D0 21 B1 C2 04 0298*  	ld hl,FSCREAM
04C0D4 22 63 BC 04 0299*  	ld (cur_filename),hl
04C0D8 11 8F C8 04 0300*  	ld de,filedata
04C0DC 01 00 00 01 0301*  	ld bc,65536
04C0E0 3E 01       0302*  	ld a,mos_load
04C0E2 5B CF       0303*  	RST.LIL 08h
04C0E4 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04C0E8 DD 21 5E 30 0305*  	ld ix,12382
       00          
04C0ED CD BC B2 04 0306*  	call vdu_load_sfx
04C0F1 C9          0307*  	ret
04C0F2             0308*  
04C0F2             0309*  load_sfx_SHOT_GATLING_BURST:
04C0F2 21 C0 C2 04 0310*  	ld hl,FSHOT_GATLING_BURST
04C0F6 22 63 BC 04 0311*  	ld (cur_filename),hl
04C0FA 11 8F C8 04 0312*  	ld de,filedata
04C0FE 01 00 00 01 0313*  	ld bc,65536
04C102 3E 01       0314*  	ld a,mos_load
04C104 5B CF       0315*  	RST.LIL 08h
04C106 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04C10A DD 21 00 60 0317*  	ld ix,24576
       00          
04C10F CD BC B2 04 0318*  	call vdu_load_sfx
04C113 C9          0319*  	ret
04C114             0320*  
04C114             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04C114 21 DB C2 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04C118 22 63 BC 04 0323*  	ld (cur_filename),hl
04C11C 11 8F C8 04 0324*  	ld de,filedata
04C120 01 00 00 01 0325*  	ld bc,65536
04C124 3E 01       0326*  	ld a,mos_load
04C126 5B CF       0327*  	RST.LIL 08h
04C128 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04C12C DD 21 C4 42 0329*  	ld ix,17092
       00          
04C131 CD BC B2 04 0330*  	call vdu_load_sfx
04C135 C9          0331*  	ret
04C136             0332*  
04C136             0333*  load_sfx_SHOT_PISTOL:
04C136 21 FA C2 04 0334*  	ld hl,FSHOT_PISTOL
04C13A 22 63 BC 04 0335*  	ld (cur_filename),hl
04C13E 11 8F C8 04 0336*  	ld de,filedata
04C142 01 00 00 01 0337*  	ld bc,65536
04C146 3E 01       0338*  	ld a,mos_load
04C148 5B CF       0339*  	RST.LIL 08h
04C14A 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04C14E DD 21 61 4B 0341*  	ld ix,19297
       00          
04C153 CD BC B2 04 0342*  	call vdu_load_sfx
04C157 C9          0343*  	ret
04C158             0344*  
04C158             0345*  load_sfx_UGH:
04C158 21 0E C3 04 0346*  	ld hl,FUGH
04C15C 22 63 BC 04 0347*  	ld (cur_filename),hl
04C160 11 8F C8 04 0348*  	ld de,filedata
04C164 01 00 00 01 0349*  	ld bc,65536
04C168 3E 01       0350*  	ld a,mos_load
04C16A 5B CF       0351*  	RST.LIL 08h
04C16C 21 14 FB 00 0352*  	ld hl,BUF_UGH
04C170 DD 21 A9 18 0353*  	ld ix,6313
       00          
04C175 CD BC B2 04 0354*  	call vdu_load_sfx
04C179 C9          0355*  	ret
04C17A             0356*  
04C17A             0357*  load_sfx_WILHELM:
04C17A 21 1A C3 04 0358*  	ld hl,FWILHELM
04C17E 22 63 BC 04 0359*  	ld (cur_filename),hl
04C182 11 8F C8 04 0360*  	ld de,filedata
04C186 01 00 00 01 0361*  	ld bc,65536
04C18A 3E 01       0362*  	ld a,mos_load
04C18C 5B CF       0363*  	RST.LIL 08h
04C18E 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04C192 DD 21 D7 53 0365*  	ld ix,21463
       00          
04C197 CD BC B2 04 0366*  	call vdu_load_sfx
04C19B C9          0367*  	ret
04C19C             0368*  
04C19C             0369*  ; File name lookups:
04C19C 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04C1AC 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04C1B8 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04C1C5 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04C1D2 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04C1E4 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04C1FC 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04C214 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04C225 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04C235 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04C24A 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04C25C 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04C26F 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04C27D 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04C290 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04C29C 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04C2B1 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04C2C0 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04C2DB 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04C2FA 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04C30E 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04C31A 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04C32A             0392*  
04C32A             0393*  ; Play sfx routines
04C32A             0394*  
04C32A             0395*  sfx_play_achtung:
04C32A 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04C32E 01 58 03 00 0397*  	ld bc,856
04C332 C3 46 00 04 0398*  	jp vdu_play_sfx
04C336             0399*  
04C336             0400*  sfx_play_ahh:
04C336 21 01 FB 00 0401*  	ld hl,BUF_AHH
04C33A 01 91 01 00 0402*  	ld bc,401
04C33E C3 46 00 04 0403*  	jp vdu_play_sfx
04C342             0404*  
04C342             0405*  sfx_play_augh:
04C342 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04C346 01 FC 02 00 0407*  	ld bc,764
04C34A C3 46 00 04 0408*  	jp vdu_play_sfx
04C34E             0409*  
04C34E             0410*  sfx_play_ayee:
04C34E 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04C352 01 E6 01 00 0412*  	ld bc,486
04C356 C3 46 00 04 0413*  	jp vdu_play_sfx
04C35A             0414*  
04C35A             0415*  sfx_play_ayee_high:
04C35A 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04C35E 01 40 04 00 0417*  	ld bc,1088
04C362 C3 46 00 04 0418*  	jp vdu_play_sfx
04C366             0419*  
04C366             0420*  sfx_play_dog_woof_double:
04C366 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04C36A 01 63 02 00 0422*  	ld bc,611
04C36E C3 46 00 04 0423*  	jp vdu_play_sfx
04C372             0424*  
04C372             0425*  sfx_play_dog_woof_single:
04C372 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04C376 01 15 02 00 0427*  	ld bc,533
04C37A C3 46 00 04 0428*  	jp vdu_play_sfx
04C37E             0429*  
04C37E             0430*  sfx_play_dog_yelp:
04C37E 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04C382 01 B0 01 00 0432*  	ld bc,432
04C386 C3 46 00 04 0433*  	jp vdu_play_sfx
04C38A             0434*  
04C38A             0435*  sfx_play_explode:
04C38A 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04C38E 01 13 05 00 0437*  	ld bc,1299
04C392 C3 46 00 04 0438*  	jp vdu_play_sfx
04C396             0439*  
04C396             0440*  sfx_play_got_treasure:
04C396 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04C39A 01 A7 05 00 0442*  	ld bc,1447
04C39E C3 46 00 04 0443*  	jp vdu_play_sfx
04C3A2             0444*  
04C3A2             0445*  sfx_play_gun_empty:
04C3A2 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04C3A6 01 24 01 00 0447*  	ld bc,292
04C3AA C3 46 00 04 0448*  	jp vdu_play_sfx
04C3AE             0449*  
04C3AE             0450*  sfx_play_gun_reload:
04C3AE 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04C3B2 01 BA 01 00 0452*  	ld bc,442
04C3B6 C3 46 00 04 0453*  	jp vdu_play_sfx
04C3BA             0454*  
04C3BA             0455*  sfx_play_knife:
04C3BA 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04C3BE 01 F2 00 00 0457*  	ld bc,242
04C3C2 C3 46 00 04 0458*  	jp vdu_play_sfx
04C3C6             0459*  
04C3C6             0460*  sfx_play_mein_leben:
04C3C6 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04C3CA 01 2E 03 00 0462*  	ld bc,814
04C3CE C3 46 00 04 0463*  	jp vdu_play_sfx
04C3D2             0464*  
04C3D2             0465*  sfx_play_oof:
04C3D2 21 0E FB 00 0466*  	ld hl,BUF_OOF
04C3D6 01 CE 03 00 0467*  	ld bc,974
04C3DA C3 46 00 04 0468*  	jp vdu_play_sfx
04C3DE             0469*  
04C3DE             0470*  sfx_play_schusstaffel:
04C3DE 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04C3E2 01 48 02 00 0472*  	ld bc,584
04C3E6 C3 46 00 04 0473*  	jp vdu_play_sfx
04C3EA             0474*  
04C3EA             0475*  sfx_play_scream:
04C3EA 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04C3EE 01 E0 02 00 0477*  	ld bc,736
04C3F2 C3 46 00 04 0478*  	jp vdu_play_sfx
04C3F6             0479*  
04C3F6             0480*  sfx_play_shot_gatling_burst:
04C3F6 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04C3FA 01 B6 05 00 0482*  	ld bc,1462
04C3FE C3 46 00 04 0483*  	jp vdu_play_sfx
04C402             0484*  
04C402             0485*  sfx_play_shot_machine_gun_burst:
04C402 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04C406 01 F9 03 00 0487*  	ld bc,1017
04C40A C3 46 00 04 0488*  	jp vdu_play_sfx
04C40E             0489*  
04C40E             0490*  sfx_play_shot_pistol:
04C40E 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04C412 01 7C 04 00 0492*  	ld bc,1148
04C416 C3 46 00 04 0493*  	jp vdu_play_sfx
04C41A             0494*  
04C41A             0495*  sfx_play_ugh:
04C41A 21 14 FB 00 0496*  	ld hl,BUF_UGH
04C41E 01 77 01 00 0497*  	ld bc,375
04C422 C3 46 00 04 0498*  	jp vdu_play_sfx
04C426             0499*  
04C426             0500*  sfx_play_wilhelm:
04C426 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04C42A 01 FD 04 00 0502*  	ld bc,1277
04C42E C3 46 00 04 0503*  	jp vdu_play_sfx
04C432             0030   	include "src/asm/timer.asm"
04C432             0001*  ; Table 32. Timer Control Registers
04C432             0002*  ; this constant is the base address of the timer control registers
04C432             0003*  ; each timer takes three bytes:
04C432             0004*  ;   0: control register
04C432             0005*  ;   1: low byte of timer reset value
04C432             0006*  ;   2: high byte of timer reset value
04C432             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04C432             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04C432             0009*  TMR_CTL:     equ 80h
04C432             0010*  
04C432             0011*  ; Timer Control Register Bit Definitions
04C432             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04C432             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04C432             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04C432             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04C432             0016*                              ; the TMRx_CTL register is read.
04C432             0017*  
04C432             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04C432             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04C432             0020*  
04C432             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04C432             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04C432             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04C432             0024*                              ; written to the counter when the end-of-count value is reached.
04C432             0025*  
04C432             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04C432             0027*  CLK_DIV_256:  equ %00001100 ;
04C432             0028*  CLK_DIV_64:   equ %00001000 ;
04C432             0029*  CLK_DIV_16:   equ %00000100 ;
04C432             0030*  CLK_DIV_4:    equ %00000000 ;
04C432             0031*  
04C432             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04C432             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04C432             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04C432             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04C432             0036*                              ; programmer must ensure that this bit is set to 1 each time
04C432             0037*                              ; SINGLE-PASS mode is used.
04C432             0038*  
04C432             0039*  ; disable/enable the programmable reload timer
04C432             0040*  PRT_EN_0:     equ %00000000 ;
04C432             0041*  PRT_EN_1:     equ %00000001 ;
04C432             0042*  
04C432             0043*  ; Table 37. Timer Input Source Select Register
04C432             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04C432             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04C432             0046*  ;   00: System clock / CLK_DIV
04C432             0047*  ;   01: RTC / CLK_DIV
04C432             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04C432             0049*  ;   10: GPIO port B pin 1.
04C432             0050*  ;   11: GPIO port B pin 1.
04C432             0051*  TMR_ISS:   equ 92h ; register address
04C432             0052*  
04C432             0053*  ; Table 51. Real-Time Clock Control Register
04C432             0054*  RTC_CTRL: equ EDh ; register address
04C432             0055*  
04C432             0056*  ; alarm interrupt disable/enable
04C432             0057*  RTC_ALARM_0:    equ %00000000
04C432             0058*  RTC_ALARM_1:    equ %10000000
04C432             0059*  
04C432             0060*  ; interrupt on alarm disable/enable
04C432             0061*  RTC_INT_ENT_0:  equ %00000000
04C432             0062*  RTC_INT_ENT_1:  equ %01000000
04C432             0063*  
04C432             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04C432             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04C432             0066*  
04C432             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04C432             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04C432             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04C432             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04C432             0071*  
04C432             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04C432             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04C432             0074*  
04C432             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04C432             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04C432             0077*  
04C432             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04C432             0079*                                  ; RTC counter is enabled.
04C432             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04C432             0081*                                  ; RTC counter is disabled.
04C432             0082*  
04C432             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04C432             0084*  
04C432             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04C432             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04C432 00 00 00    0087*  prt_reload: dl 0x000000
04C435             0088*  
04C435             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04C435             0090*  ;          de = number PRT interrupts during test interval
04C435             0091*  prt_calibrate:
04C435 CD 23 AF 04 0092*      call vdu_vblank
04C439             0093*  ; set a MOS timer
04C439 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04C43D FD 21 90 C5 0095*      ld iy,tmr_test
       04          
04C442 CD 6E C5 04 0096*      call tmr_set
04C446             0097*  ; set a PRT timer
04C446             0098*      ; ld hl,prt_reload_hardware
04C446             0099*      ; ld hl,prt_reload_emulator
04C446 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04C44A 22 32 C4 04 0101*      ld (prt_reload),hl
04C44E CD A9 C4 04 0102*      call prt_set
04C452             0103*  @loop:
04C452             0104*  ; check time remaining on MOS timer
04C452 CD 7C C5 04 0105*      call tmr_get
04C456 CA 60 C4 04 0106*      jp z,@done ; time expired,so quit
04C45A FA 60 C4 04 0107*      jp m,@done ; time past expiration (negative),so quit
04C45E 18 F2       0108*      jr @loop
04C460             0109*  @done:
04C460 ED 5B F7 C4 0110*      ld de,(prt_irq_counter)
       04          
04C465 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04C469 ED 43 32 C4 0112*      ld (prt_reload),bc
       04          
04C46E 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04C472 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04C473 32 80 C6 04 0115*      ld (is_emulator),a
04C477 ED 52       0116*      sbc hl,de
04C479 21 98 C6 04 0117*      ld hl,on_hardware ; default message for running on hardware
04C47D CA 35 C4 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04C481 F8          0119*      ret m ; negative result means we're on hardware
04C482 3C          0120*      inc a ; we're on emulator
04C483 32 80 C6 04 0121*      ld (is_emulator),a
04C487 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04C48B ED 43 32 C4 0123*      ld (prt_reload),bc
       04          
04C490 21 81 C6 04 0124*      ld hl,on_emulator
04C494 C9          0125*      ret
04C495             0126*  
04C495 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04C4A9             0128*  
04C4A9             0129*  ; set PRT timer
04C4A9             0130*  prt_set:
04C4A9 21 00 00 00 0131*      ld hl,0
04C4AD 22 F7 C4 04 0132*      ld (prt_irq_counter),hl
04C4B1 2A 32 C4 04 0133*      ld hl,(prt_reload)
04C4B5 ED 29 84    0134*      out0 ($84),l
04C4B8 ED 21 85    0135*  	out0 ($85),h
04C4BB             0136*  ; disable timer
04C4BB 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04C4BD ED 39 83    0138*  	out0 ($83),a
04C4C0             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04C4C0 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04C4C2 ED 39 83    0141*  	out0 ($83),a
04C4C5 C9          0142*      ret
04C4C6             0143*  
04C4C6             0144*  ; ===============================================
04C4C6             0145*  ; PRT Timer Interrupt Handling
04C4C6             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04C4C6             0147*  ; -----------------------------------------------
04C4C6             0148*  prt_irq_init:
04C4C6             0149*      ; set up interrupt vector table 2
04C4C6 21 00 00 00 0150*  	ld hl,0
04C4CA 3A 0C 01 00 0151*  	ld a,($10c)
04C4CE 6F          0152*  	ld l,a
04C4CF 3A 0D 01 00 0153*  	ld a,($10d)
04C4D3 67          0154*  	ld h,a
04C4D4             0155*  
04C4D4             0156*  	; skip over CALL ($c3)
04C4D4 23          0157*  	inc hl
04C4D5             0158*  	; load address of jump into vector table 2 (in ram)
04C4D5 ED 27       0159*  	ld hl,(hl)
04C4D7             0160*  
04C4D7             0161*  	; write CALL prt_irq_handler to vector table 2
04C4D7 3E C3       0162*  	ld a,$c3
04C4D9 77          0163*  	ld (hl),a
04C4DA 23          0164*  	inc hl
04C4DB 11 E2 C4 04 0165*  	ld de,prt_irq_handler
04C4DF ED 1F       0166*  	ld (hl),de
04C4E1             0167*  
04C4E1 C9          0168*      ret
04C4E2             0169*  
04C4E2             0170*  prt_irq_handler:
04C4E2 F3          0171*  	di
04C4E3 F5          0172*  	push af
04C4E4 E5          0173*      push hl
04C4E5 ED 38 83    0174*  	in0 a,($83)
04C4E8 2A F7 C4 04 0175*  	ld hl,(prt_irq_counter)
04C4EC 23          0176*  	inc hl
04C4ED 22 F7 C4 04 0177*  	ld (prt_irq_counter),hl
04C4F1 E1          0178*      pop hl
04C4F2 F1          0179*  	pop af
04C4F3 FB          0180*  	ei
04C4F4 5B ED 4D    0181*  	reti.l
04C4F7             0182*  
04C4F7             0183*  prt_irq_counter:
04C4F7 00 00 00    0184*  	.dl 0
04C4FA             0185*  prt_irq_counter_saved:
04C4FA 00 00 00    0186*      .dl 0
04C4FD             0187*  
04C4FD             0188*  prt_loop_reset:
04C4FD E5          0189*      push hl
04C4FE 21 00 00 00 0190*  	ld hl,0
04C502 22 F7 C4 04 0191*  	ld (prt_irq_counter),hl
04C506 22 68 C5 04 0192*      ld (prt_loop_counter),hl
04C50A 22 6B C5 04 0193*      ld (prt_loops),hl
04C50E CD A9 C4 04 0194*      call prt_set
04C512 E1          0195*      pop hl
04C513 C9          0196*      ret
04C514             0197*  
04C514             0198*  prt_loop_start:
04C514 E5          0199*      push hl
04C515 21 00 00 00 0200*  	ld hl,0
04C519 22 F7 C4 04 0201*  	ld (prt_irq_counter),hl
04C51D E1          0202*      pop hl
04C51E C9          0203*      ret
04C51F             0204*  
04C51F             0205*  prt_loop_stop:
04C51F E5          0206*      push hl
04C520 D5          0207*      push de
04C521 2A F7 C4 04 0208*      ld hl,(prt_irq_counter)
04C525 ED 5B 68 C5 0209*      ld de,(prt_loop_counter)
       04          
04C52A 19          0210*      add hl,de
04C52B 22 68 C5 04 0211*      ld (prt_loop_counter),hl
04C52F 21 00 00 00 0212*      ld hl,0
04C533 22 F7 C4 04 0213*      ld (prt_irq_counter),hl
04C537 2A 6B C5 04 0214*      ld hl,(prt_loops)
04C53B 23          0215*      inc hl
04C53C 22 6B C5 04 0216*      ld (prt_loops),hl
04C540 D1          0217*      pop de
04C541 E1          0218*      pop hl
04C542 C9          0219*      ret
04C543             0220*  
04C543             0221*  ; inputs: bc = y,x text coordinates to print
04C543             0222*  prt_loop_print:
04C543 F5          0223*      push af
04C544 E5          0224*      push hl
04C545 C5          0225*      push bc
04C546 D5          0226*      push de
04C547 DD E5       0227*      push ix
04C549 FD E5       0228*      push iy
04C54B CD 06 AE 04 0229*      call vdu_move_cursor
04C54F             0230*  
04C54F 2A 68 C5 04 0231*      ld hl,(prt_loop_counter)
04C553 CD 16 B3 04 0232*      call printDec
04C557             0233*  
04C557 2A 6B C5 04 0234*      ld hl,(prt_loops)
04C55B CD 16 B3 04 0235*      call printDec
04C55F             0236*  
04C55F FD E1       0237*      pop iy
04C561 DD E1       0238*      pop ix
04C563 D1          0239*      pop de
04C564 C1          0240*      pop bc
04C565 E1          0241*      pop hl
04C566 F1          0242*      pop af
04C567 C9          0243*      ret
04C568             0244*  
04C568             0245*  prt_loop_counter:
04C568 00 00 00    0246*      .dl 0
04C56B             0247*  prt_loops:
04C56B 00 00 00    0248*      .dl 0
04C56E             0249*  
04C56E             0250*  ; ===============================================
04C56E             0251*  ; Timer functions
04C56E             0252*  ; -----------------------------------------------
04C56E             0253*  ; set a countdown timer
04C56E             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C56E             0255*  ; returns: hl = current time
04C56E             0256*  tmr_set:
04C56E FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04C571             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04C571 3E 08       0001*M 			LD	A, function
04C573 5B CF       0002*M 			RST.LIL	08h
04C575 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04C578 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04C57B C9          0261*      ret
04C57C             0262*  
04C57C             0263*  ; gets time remaining on a countdown timer
04C57C             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C57C             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C57C             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C57C             0267*  tmr_get:
04C57C             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04C57C 3E 08       0001*M 			LD	A, function
04C57E 5B CF       0002*M 			RST.LIL	08h
04C580 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04C583 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04C586 AF          0271*      xor a                   ; clear carry
04C587 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C589 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04C58C AF          0274*      xor a                   ; clear carry
04C58D ED 5A       0275*      adc hl,de               ; hl = time remaining
04C58F             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C58F C9          0277*      ret
04C590             0278*  
04C590             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04C596             0280*  
04C596 00 00 00    0281*  timestamp_now: dl 0
04C599 00 00 00    0282*  timestamp_old: dl 0
04C59C 00 00 00    0283*  timestamp_chg: dl 0
04C59F             0284*  
04C59F             0285*  ; update the global timestamp from the system clock
04C59F             0286*  ; inputs: none
04C59F             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04C59F             0288*  ;          de = current time
04C59F             0289*  ;          ix = pointer to syvars table
04C59F             0290*  ; destroys: af,hl,de,ix
04C59F             0291*  timestamp_tick:
04C59F ED 5B 96 C5 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04C5A4 ED 53 99 C5 0293*      ld (timestamp_old),de   ; save previous time
       04          
04C5A9             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04C5A9 3E 08       0001*M 			LD	A, function
04C5AB 5B CF       0002*M 			RST.LIL	08h
04C5AD DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04C5B0 22 96 C5 04 0296*      ld (timestamp_now),hl   ; save current time
04C5B4 AF          0297*      xor a                   ; clear carry
04C5B5 ED 52       0298*      sbc hl,de               ; hl = time elapsed
04C5B7 22 9C C5 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04C5BB C9          0300*      ret
04C5BC             0301*  
04C5BC             0302*  ; set a countdown timer
04C5BC             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C5BC             0304*  ; requires: timestamp_tick to be called at least once before this function
04C5BC             0305*  ; returns: hl = current time
04C5BC             0306*  ; destroys: hl
04C5BC             0307*  timestamp_tmr_set:
04C5BC FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04C5BF 2A 96 C5 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04C5C3 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04C5C6 C9          0311*      ret
04C5C7             0312*  
04C5C7             0313*  ; gets time remaining on a countdown timer following the global timestamp
04C5C7             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C5C7             0315*  ; requires: timestamp_tick to be called at least once before this function
04C5C7             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C5C7             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C5C7             0318*  ; destroys: af,hl,de
04C5C7             0319*  timestamp_tmr_get:
04C5C7 ED 5B 96 C5 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04C5CC FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04C5CF AF          0322*      xor a                   ; clear carry
04C5D0 ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C5D2 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04C5D5 AF          0325*      xor a                   ; clear carry
04C5D6 ED 5A       0326*      adc hl,de               ; hl = time remaining
04C5D8             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C5D8 C9          0328*      ret
04C5D9             0329*  
04C5D9             0330*  ; set a stopwatch
04C5D9             0331*  ; returns: hl = start time
04C5D9             0332*  ; destroys: hl,ix
04C5D9             0333*  stopwatch_set:
04C5D9             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04C5D9 3E 08       0001*M 			LD	A, function
04C5DB 5B CF       0002*M 			RST.LIL	08h
04C5DD DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04C5E0 22 F5 C5 04 0336*      ld (stopwatch_started),hl            ; set start time
04C5E4 C9          0337*      ret
04C5E5             0338*  
04C5E5             0339*  ; gets time elapsed on a stopwatch
04C5E5             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04C5E5             0341*  ; destroys: af,hl,de,ix
04C5E5             0342*  stopwatch_get:
04C5E5             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04C5E5 3E 08       0001*M 			LD	A, function
04C5E7 5B CF       0002*M 			RST.LIL	08h
04C5E9 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04C5EC ED 5B F5 C5 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04C5F1 AF          0346*      xor a                   ; clear carry
04C5F2 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04C5F4 C9          0348*      ret
04C5F5             0349*  
04C5F5             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04C5F8             0351*  
04C5F8             0352*  ; ------------------
04C5F8             0353*  ; delay routine
04C5F8             0354*  ; Author: Richard Turrnidge
04C5F8             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04C5F8             0356*  ; routine waits a fixed time,then returns
04C5F8             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04C5F8             0358*  ; eg. ld A,00000100b
04C5F8             0359*  
04C5F8             0360*  multiPurposeDelay:
04C5F8 F5          0361*      push af
04C5F9 C5          0362*      push bc
04C5FA DD E5       0363*      push ix
04C5FC 47          0364*      ld b,a
04C5FD 3E 08       0365*      ld a,$08
04C5FF 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04C601             0367*  
04C601             0368*  waitLoop:
04C601             0369*  
04C601 DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04C604             0371*  
04C604             0372*                                  ;   we check if bit set is same as last time we checked.
04C604             0373*                                  ;   bit 0 - don't use
04C604             0374*                                  ;   bit 1 - changes 64 times per second
04C604             0375*                                  ;   bit 2 - changes 32 times per second
04C604             0376*                                  ;   bit 3 - changes 16 times per second
04C604             0377*  
04C604             0378*                                  ;   bit 4 - changes 8 times per second
04C604             0379*                                  ;   bit 5 - changes 4 times per second
04C604             0380*                                  ;   bit 6 - changes 2 times per second
04C604             0381*                                  ;   bit 7 - changes 1 times per second
04C604 A0          0382*      and b
04C605 4F          0383*      ld c,a
04C606 3A 17 C6 04 0384*      ld a,(oldTimeStamp)
04C60A B9          0385*      cp c                        ; is A same as last value?
04C60B 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04C60D 79          0387*      ld a,c
04C60E 32 17 C6 04 0388*      ld (oldTimeStamp),a        ; set new value
04C612             0389*  
04C612 DD E1       0390*      pop ix
04C614 C1          0391*      pop bc
04C615 F1          0392*      pop af
04C616 C9          0393*      ret
04C617             0394*  
04C617 00          0395*  oldTimeStamp:   .db 00h
04C618             0031   
04C618             0032   
04C618             0033   start:
04C618 F5          0034       push af
04C619 C5          0035       push bc
04C61A D5          0036       push de
04C61B DD E5       0037       push ix
04C61D FD E5       0038       push iy
04C61F             0039   
04C61F CD AF C6 04 0040   	call init ; Initialization code
04C623 CD F2 C7 04 0041       call main ; Call the main function
04C627             0042   
04C627             0043   exit:
04C627             0044   
04C627 FD E1       0045       pop iy
04C629 DD E1       0046       pop ix
04C62B D1          0047       pop de
04C62C C1          0048       pop bc
04C62D F1          0049       pop af
04C62E 21 00 00 00 0050       ld hl,0
04C632             0051   
04C632 C9          0052       ret
04C633             0053   
04C633 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04C64A 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04C655 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04C663 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04C680 00          0058   is_emulator: defb 0
04C681 52 75 6E 6E 0059   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04C698 52 75 6E 6E 0060   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
04C6AF             0061   
04C6AF             0062   init:
04C6AF             0063   ; start generic stopwatch to time setup loop
04C6AF             0064   ; so we can determine if we're running on emulator or hardware
04C6AF CD D9 C5 04 0065   	call stopwatch_set
04C6B3             0066   
04C6B3             0067   ; initialize global timestamp
04C6B3 DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04C6B6 22 96 C5 04 0069       ld (timestamp_now),hl
04C6BA             0070   
04C6BA             0071   ; set the cursor off
04C6BA CD 15 AF 04 0072   	call cursor_off
04C6BE             0073   
04C6BE             0074   ; print loading ui message
04C6BE 21 4A C6 04 0075   	ld hl,loading_ui
04C6C2 CD C8 B2 04 0076   	call printString
04C6C6             0077   
04C6C6             0078   ; load fonts
04C6C6 CD B4 82 04 0079   	call load_font_itc_honda
04C6CA CD 97 93 04 0080   	call load_font_retro_computer
04C6CE             0081   
04C6CE             0082   ; load UI images
04C6CE CD 20 9C 04 0083   	call load_ui_images
04C6D2 CD D2 9E 04 0084   	call load_ui_images_bj
04C6D6             0085   
04C6D6             0086   ; set up the display
04C6D6 3E 88       0087       ld a,8+128 ; 320x240x64 double-buffered
04C6D8 CD 56 AD 04 0088       call vdu_set_screen_mode
04C6DC AF          0089       xor a
04C6DD CD 85 AE 04 0090       call vdu_set_scaling
04C6E1             0091   
04C6E1             0092   ; set text background color
04C6E1 3E 84       0093   	ld a,4 + 128
04C6E3 CD E2 AC 04 0094   	call vdu_colour_text
04C6E7             0095   
04C6E7             0096   ; set text foreground color
04C6E7 3E 2F       0097   	ld a,47 ; aaaaff lavenderish
04C6E9 CD E2 AC 04 0098   	call vdu_colour_text
04C6ED             0099   
04C6ED             0100   ; set gfx bg color
04C6ED AF          0101   	xor a ; plotting mode 0
04C6EE 0E 04       0102   	ld c,4 ; dark blue
04C6F0 CD 0A AD 04 0103   	call vdu_gcol_bg
04C6F4 CD DD AC 04 0104   	call vdu_clg
04C6F8             0105   
04C6F8             0106   ; set the cursor off again since we changed screen modes
04C6F8 CD 15 AF 04 0107   	call cursor_off
04C6FC             0108   
04C6FC             0109   ; VDU 28, left, bottom, right, top: Set text viewport **
04C6FC             0110   ; MIND THE LITTLE-ENDIANESS
04C6FC             0111   ; inputs: c=left,b=bottom,e=right,d=top
04C6FC 0E 00       0112   	ld c,0 ; left
04C6FE 16 14       0113   	ld d,20 ; top
04C700 1E 27       0114   	ld e,39 ; right
04C702 06 1D       0115   	ld b,29; bottom
04C704 CD CB AD 04 0116   	call vdu_set_txt_viewport
04C708             0117   
04C708             0118   ; initialize image load routine
04C708 CD 6F BC 04 0119   	call img_load_init
04C70C             0120   
04C70C             0121   ; load panels
04C70C 01 13 01 00 0122   	ld bc,cube_num_panels
04C710 21 20 02 04 0123   	ld hl,cube_buffer_id_lut
04C714 22 69 BC 04 0124   	ld (cur_buffer_id_lut),hl
04C718 21 59 05 04 0125   	ld hl,cube_load_panels_table
04C71C 22 6C BC 04 0126   	ld (cur_load_jump_table),hl
04C720 CD A4 BC 04 0127   	call img_load_main
04C724             0128   
04C724             0129   ; load sprites
04C724 01 5F 00 00 0130   	ld bc,sprite_num_panels
04C728 21 2C 4B 04 0131   	ld hl,sprite_buffer_id_lut
04C72C 22 69 BC 04 0132   	ld (cur_buffer_id_lut),hl
04C730 21 49 4C 04 0133   	ld hl,sprite_load_panels_table
04C734 22 6C BC 04 0134   	ld (cur_load_jump_table),hl
04C738 CD A4 BC 04 0135   	call img_load_main
04C73C             0136   
04C73C             0137   ; load distance walls
04C73C 01 09 00 00 0138   	ld bc,dws_num_panels
04C740 21 68 64 04 0139   	ld hl,dws_buffer_id_lut
04C744 22 69 BC 04 0140   	ld (cur_buffer_id_lut),hl
04C748 21 83 64 04 0141   	ld hl,dws_load_panels_table
04C74C 22 6C BC 04 0142   	ld (cur_load_jump_table),hl
04C750 CD A4 BC 04 0143   	call img_load_main
04C754             0144   
04C754             0145   ; load sound effects
04C754 01 16 00 00 0146   	ld bc,SFX_num_buffers
04C758 21 00 BE 04 0147   	ld hl,SFX_buffer_id_lut
04C75C 22 69 BC 04 0148   	ld (cur_buffer_id_lut),hl
04C760 21 6E BE 04 0149   	ld hl,SFX_load_routines_table
04C764 22 6C BC 04 0150   	ld (cur_load_jump_table),hl
04C768 CD 23 B2 04 0151   	call sfx_load_main
04C76C             0152   
04C76C             0153   ; self modify vdu_play_sfx to enable sound
04C76C AF          0154   	xor a
04C76D 32 46 00 04 0155   	ld (vdu_play_sfx_disable),a
04C771             0156   
04C771             0157   ; use loading time to determine if we're running on emulator or hardware
04C771 CD E5 C5 04 0158   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C775 11 40 1F 00 0159   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04C779 AF          0160   	xor a ; clear carry, default is running on hardware
04C77A 32 80 C6 04 0161   	ld (is_emulator),a
04C77E ED 52       0162   	sbc hl,de
04C780 FA 94 C7 04 0163   	jp m,@on_emulator
04C784 CD 01 AE 04 0164   	call vdu_home_cursor
04C788 21 98 C6 04 0165   	ld hl,on_hardware
04C78C CD C8 B2 04 0166   	call printString
04C790 C3 A6 C7 04 0167   	jp @test_done
04C794             0168   
04C794             0169   @on_emulator:
04C794             0170   ; print emulator message
04C794 3E 01       0171   	ld a,1
04C796 32 80 C6 04 0172   	ld (is_emulator),a
04C79A CD 01 AE 04 0173   	call vdu_home_cursor
04C79E 21 81 C6 04 0174   	ld hl,on_emulator
04C7A2 CD C8 B2 04 0175   	call printString
04C7A6             0176   
04C7A6             0177   @test_done:
04C7A6             0178   ; print final loading time
04C7A6 21 55 C6 04 0179   	ld hl,loading_time
04C7AA CD C8 B2 04 0180   	call printString
04C7AE CD E5 C5 04 0181   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C7B2 CD 16 B3 04 0182   	call printDec
04C7B6 CD DD B2 04 0183   	call printNewLine
04C7BA             0184   
04C7BA             0185   ; print loading complete message and wait for user keypress
04C7BA 21 63 C6 04 0186   	ld hl,loading_complete
04C7BE CD C8 B2 04 0187   	call printString
04C7C2 CD 98 AE 04 0188   	call vdu_flip
04C7C6 CD 48 B6 04 0189   	call waitKeypress
04C7CA             0190   
04C7CA             0191   ; initialization done
04C7CA C9          0192   	ret
04C7CB             0193   
04C7CB             0194   ; DEBUG: set up a simple countdown timer
04C7CB 01          0195   debug_timer: db 0x01
04C7CC             0196   
04C7CC             0197   main_loop_tmr: ds 6
04C7D2             0198   framerate: equ 30
04C7D2             0199   
04C7D2             0200   new_game:
04C7D2             0201   ; initialize map variables and load map file
04C7D2 21 08 69 04 0202   	ld hl,room_flags
04C7D6 AF          0203   	xor a
04C7D7 06 0A       0204   	ld b,10
04C7D9             0205   @room_flags_loop:
04C7D9 77          0206   	ld (hl),a
04C7DA 23          0207   	inc hl
04C7DB 10 FC       0208   	djnz @room_flags_loop
04C7DD             0209   ; map_init:
04C7DD 32 D1 B6 04 0210   	ld (cur_floor),a
04C7E1 32 D2 B6 04 0211   	ld (cur_room),a
04C7E5             0212   ; load room file
04C7E5 CD 9E 67 04 0213   	call map_load
04C7E9             0214   ; initialize sprite data
04C7E9 CD CF 67 04 0215   	call map_init_sprites
04C7ED             0216   ; initialize player position
04C7ED CD 3E B7 04 0217   	call plyr_init
04C7F1             0218   
04C7F1 C9          0219   	ret
04C7F2             0220   
04C7F2             0221   main:
04C7F2 CD D2 C7 04 0222   	call new_game
04C7F6             0223   
04C7F6             0224   ; main:
04C7F6             0225   ; ; set map variables and load initial map file
04C7F6             0226   ; 	call map_init
04C7F6             0227   ; ; initialize player position
04C7F6             0228   ; 	call plyr_init
04C7F6             0229   
04C7F6             0230   
04C7F6             0231   main_loop:
04C7F6             0232   ; update global timestamp
04C7F6 CD 9F C5 04 0233       call timestamp_tick
04C7FA             0234   
04C7FA             0235   ; move enemies
04C7FA CD C8 AB 04 0236   	call sprites_see_plyr ; 220-285  prt ticks
04C7FE             0237   
04C7FE             0238   ; get player input and update sprite position
04C7FE             0239   	; 0-1 prt ticks
04C7FE CD EE BA 04 0240   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04C802             0241   
04C802             0242   ; render the updated scene
04C802 CD 85 6A 04 0243   	call render_scene ; 6-12 prt ticks
04C806             0244   ; full loop 12-16 prt ticks
04C806             0245   
04C806             0246   ; flip the screen
04C806 CD 98 AE 04 0247   	call vdu_flip
04C80A             0248   
04C80A             0249   @wait:
04C80A FD 21 CC C7 0250   	ld iy,main_loop_tmr
       04          
04C80F CD 7C C5 04 0251   	call tmr_get
04C813 CA 1F C8 04 0252   	jp z,@continue
04C817 FA 1F C8 04 0253   	jp m,@continue
04C81B C3 0A C8 04 0254   	jp @wait
04C81F             0255   @continue:
04C81F             0256   
04C81F             0257   ; reset main loop timer
04C81F FD 21 CC C7 0258   	ld iy,main_loop_tmr
       04          
04C824 21 04 00 00 0259   	ld hl,120/framerate
04C828 CD 6E C5 04 0260   	call tmr_set
04C82C             0261   
04C82C             0262   ; check for escape key and quit if pressed
04C82C             0263   	MOSCALL mos_getkbmap
04C82C 3E 1E       0001M  			LD	A, function
04C82E 5B CF       0002M  			RST.LIL	08h
04C830             0264   ; 113 Escape
04C830 DD CB 0E 46 0265       bit 0,(ix+14)
04C834 20 02       0266   	jr nz,main_end
04C836             0267   @Escape:
04C836 18 BE       0268   	jr main_loop
04C838             0269   
04C838             0270   main_end:
04C838             0271   	; call do_outro
04C838             0272   ; restore screen to something normalish
04C838 AF          0273   	xor a
04C839 CD 56 AD 04 0274   	call vdu_set_screen_mode
04C83D CD 07 AF 04 0275   	call cursor_on
04C841 C9          0276   	ret
04C842             0277   
04C842             0278   ; files.asm must go here so that filedata doesn't stomp on program data
04C842             0279   	include "src/asm/files.asm"
04C842             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04C842             0002*  ; inputs: hl = bufferId, ix = file size
04C842             0003*  vdu_load_buffer_from_file:
04C842             0004*  	; load buffer ids
04C842 22 7F C8 04 0005*  		ld (@id0),hl
04C846 22 85 C8 04 0006*  		ld (@id1),hl
04C84A 22 8A C8 04 0007*  		ld (@id2),hl
04C84E             0008*  	; clean up bytes that got stomped on by the ID loads
04C84E 3E 02       0009*  		ld a,2
04C850 32 81 C8 04 0010*  		ld (@id0+2),a
04C854 3E 17       0011*  		ld a,23
04C856 32 87 C8 04 0012*  		ld (@id1+2),a
04C85A AF          0013*  		xor a
04C85B 32 8C C8 04 0014*  		ld (@id2+2),a
04C85F             0015*  	; read size from ix
04C85F DD 7D       0016*  		ld a,ixl
04C861 32 8D C8 04 0017*  		ld (@size),a
04C865 DD 7C       0018*  		ld a,ixh
04C867 32 8E C8 04 0019*  		ld (@size+1),a
04C86B             0020*  	; get all the ducks in a row for the vdu call
04C86B 01 13 00 00 0021*  		ld bc,filedata-@start
04C86F DD 09       0022*  		add ix,bc
04C871 DD 44       0023*  		ld b,ixh
04C873 DD 4D       0024*  		ld c,ixl
04C875 21 7C C8 04 0025*  		ld hl,@start
04C879             0026*  	; push the button
04C879 5B DF       0027*  		rst.lil $18
04C87B             0028*  	; back to caller
04C87B C9          0029*  		ret
04C87C             0030*  ; vdp command string:
04C87C 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04C87F 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04C881 02          0033*  		db 2
04C882             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04C882 17 1B 20    0035*  		db 23,27,0x20
04C885 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04C887             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04C887 17 00 A0    0038*  		db 23,0,0xA0
04C88A 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04C88C 00          0040*  		db 0
04C88D             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04C88D 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04C88F             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04C88F             0044*  	; ds 65536 ; placeholder for file data	DEBUG
