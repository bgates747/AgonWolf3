PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 A7 C0 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  
040046             0003*  vdu_play_sfx:
040046 C9          0004*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0005*      ld (@bufferId),hl
04004B ED 43 89 00 0006*      ld (@duration),bc
       04          
040050 3E 17       0007*      ld a,23
040052 32 81 00 04 0008*      ld (@bufferId+2),a
040056 3A 45 00 04 0009*      ld a,(last_channel)
04005A 3C          0010*      inc a
04005B             0011*      ; and 31 ; modulo 32
04005B FE 03       0012*      cp 3
04005D C2 62 00 04 0013*      jp nz,@load_channel
040061 AF          0014*      xor a
040062             0015*  @load_channel:
040062 32 45 00 04 0016*      ld (last_channel),a
040066 32 7C 00 04 0017*      ld (@channel0),a
04006A 32 84 00 04 0018*      ld (@channel1),a
04006E 21 79 00 04 0019*      ld hl, @sample
040072 01 12 00 00 0020*      ld bc, @sample_end - @sample
040076 5B DF       0021*      rst.lil $18
040078 C9          0022*      ret
040079             0023*  @sample:
040079             0024*  ; Command 4: Set waveform
040079             0025*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0026*      .db 23,0,$85                        ; do sound
04007C             0027*  @channel0:
04007C 00 04 08    0028*      .db 0,4,8 ; channel, command, waveform
04007F             0029*  @bufferId:
04007F 00 00       0030*      .dw 0x0000
040081             0031*  ; Command 0: Play note
040081             0032*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0033*      .db 23,0,$85                        ; do sound
040084             0034*  @channel1:
040084 00 00 7F    0035*      .db 0,0,127                ; channel, volume
040087 00 00       0036*      .dw 0
040089             0037*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0038*      .dw 0x0000                        ; duration
04008B             0039*  @sample_end:
04008B 00          0040*      .db 0x00 ; padding
04008C             0041*  
04008C             0042*  ; ############################################################
04008C             0043*  ; VDU SOUND API
04008C             0044*  ; ############################################################
04008C             0045*  ; Command 0: Play note
04008C             0046*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04008C             0047*      MACRO PLAY_NOTE channel, volume, frequency, duration
04008C             0048*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
04008C             0049*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
04008C             0050*      rst.lil $18
04008C             0051*      jr @PLAY_NOTE_END
04008C             0052*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
04008C             0053*                   db channel                  ; Channel, 0 (commented out)
04008C             0054*                   db 0                        ; Play note command
04008C             0055*                   db volume                   ; Volume
04008C             0056*                   dw frequency                ; Frequency
04008C             0057*                   dw duration                 ; Duration
04008C             0058*  @PLAY_NOTE_END:
04008C             0059*      ENDMACRO
04008C             0060*  
04008C             0061*      MACRO MUTE_CHANNEL channel
04008C             0062*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
04008C             0063*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
04008C             0064*      rst.lil $18
04008C             0065*      jr @MUTE_CHANNEL_END
04008C             0066*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
04008C             0067*                     db channel                ; Channel, 0 (commented out)
04008C             0068*                     db 2                      ; Set volume command
04008C             0069*                     db 0                      ; Volume (mute)
04008C             0070*  @MUTE_CHANNEL_END:
04008C             0071*      ENDMACRO
04008C             0072*  
04008C             0073*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
04008C             0074*  vdu_play_note:
04008C 79          0075*      ld a,c
04008D 32 AD 00 04 0076*      ld (@channel),a
040091 78          0077*      ld a,b
040092 32 AF 00 04 0078*      ld (@volume),a
040096 22 B0 00 04 0079*      ld (@frequency),hl
04009A ED 53 B2 00 0080*      ld (@duration),de
       04          
04009F 21 AA 00 04 0081*      ld hl,@cmd
0400A3 01 0A 00 00 0082*      ld bc,@end-@cmd
0400A7 5B DF       0083*      rst.lil $18
0400A9 C9          0084*      ret
0400AA 17 00 85    0085*  @cmd:       db 23, 0, 0x85
0400AD 00          0086*  @channel:   db 0x00
0400AE 00          0087*              db 0x00 ; play note command
0400AF 00          0088*  @volume:    db 0x00
0400B0 00 00       0089*  @frequency: dw 0x0000
0400B2 00 00       0090*  @duration:  dw 0x0000
0400B4 00          0091*  @end:       db 0x00 ; padding
0400B5             0092*  
0400B5             0093*  ; Command 1: Status
0400B5             0094*  ; VDU 23, 0, &85, channel, 1
0400B5             0095*  ; inputs: a = channel
0400B5             0096*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400B5             0097*  ; Bit 	Name 	Meaning
0400B5             0098*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400B5             0099*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400B5             0100*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400B5             0101*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400B5             0102*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400B5             0103*  
0400B5             0104*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400B5             0105*  vdu_channel_status:
0400B5 32 C7 00 04 0106*      ld (@channel),a
0400B9 21 C4 00 04 0107*      ld hl,@cmd
0400BD 01 05 00 00 0108*      ld bc,@end-@cmd
0400C1 5B DF       0109*      rst.lil $18
0400C3 C9          0110*      ret
0400C4 17 00 85    0111*  @cmd:       db 23, 0, 0x85
0400C7 00          0112*  @channel:   db 0x00
0400C8 01          0113*              db 0x01 ; get channel status command
0400C9             0114*  @end:
0400C9             0115*  
0400C9             0116*  ; VDU 23, 0, &85, channel, 2, volume
0400C9             0117*  ; inputs: c = channel, b = volume
0400C9             0118*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400C9             0119*  
0400C9             0120*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400C9             0121*  
0400C9             0122*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400C9             0123*  vdu_channel_volume:
0400C9 79          0124*      ld a,c
0400CA 32 E1 00 04 0125*      ld (@channel),a
0400CE 78          0126*      ld a,b
0400CF 32 E3 00 04 0127*      ld (@volume),a
0400D3 21 DE 00 04 0128*      ld hl,@cmd
0400D7 01 06 00 00 0129*      ld bc,@end-@cmd
0400DB 5B DF       0130*      rst.lil $18
0400DD C9          0131*      ret
0400DE 17 00 85    0132*  @cmd:       db 23, 0, 0x85
0400E1 00          0133*  @channel:   db 0x00
0400E2 02          0134*              db 0x02 ; set volume command
0400E3 00          0135*  @volume:    db 0x00
0400E4             0136*  @end:
0400E4             0137*  
0400E4             0138*  ; VDU 23, 0, &85, channel, 3, frequency;
0400E4             0139*  
0400E4             0140*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0400E4             0141*  
0400E4             0142*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0400E4             0143*  
0400E4             0144*  ; Returns 1 on success, 0 for failure.
0400E4             0145*  vdu_channel_frequency:
0400E4 79          0146*      ld a,c
0400E5 32 FC 00 04 0147*      ld (@channel),a
0400E9 ED 53 FE 00 0148*      ld (@frequency),de
       04          
0400EE 21 F9 00 04 0149*      ld hl,@cmd
0400F2 01 07 00 00 0150*      ld bc,@end-@cmd
0400F6 5B DF       0151*      rst.lil $18
0400F8 C9          0152*      ret
0400F9 17 00 85    0153*  @cmd:       db 23, 0, 0x85
0400FC 00          0154*  @channel:   db 0x00
0400FD 03          0155*              db 0x03 ; set frequency command
0400FE 00 00       0156*  @frequency: dw 0x0000
040100 00          0157*  @end:       db 0x00 ; padding
040101             0158*  
040101             0159*  
040101             0160*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040101             0161*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040101             0162*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040101             0163*  
040101             0164*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040101             0165*  
040101             0166*  ; By default a channel is set to use waveform 0 (square wave).
040101             0167*  
040101             0168*  ; Valid waveform values are as follows:
040101             0169*  ; Value 	Waveform
040101             0170*  ; 0 	Square wave
040101             0171*  ; 1 	Triangle wave
040101             0172*  ; 2 	Sawtooth wave
040101             0173*  ; 3 	Sine wave
040101             0174*  ; 4 	Noise (simple white noise with no frequency support)
040101             0175*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040101             0176*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040101             0177*  
040101             0178*  vdu_channel_waveform:
040101 79          0179*      ld a,c
040102 32 27 01 04 0180*      ld (@channel),a
040106 78          0181*      ld a,b
040107 32 29 01 04 0182*      ld (@waveform),a
04010B FE 08       0183*      cp 8 ; check if the waveform is a sample
04010D 28 06       0184*      jr z, @sample
04010F 01 06 00 00 0185*      ld bc,@bufferId-@cmd
040113 18 08       0186*      jr @sendToVdu
040115             0187*  @sample:
040115 22 2A 01 04 0188*      ld (@bufferId),hl
040119 01 08 00 00 0189*      ld bc,@end-@cmd
04011D             0190*  @sendToVdu:
04011D 21 24 01 04 0191*      ld hl,@cmd
040121 5B DF       0192*      rst.lil $18
040123 C9          0193*      ret
040124 17 00 85    0194*  @cmd:       db 23, 0, 0x85
040127 00          0195*  @channel:   db 0x00
040128 04          0196*              db 0x04 ; set waveform command
040129 00          0197*  @waveform:  db 0x00
04012A 00 00       0198*  @bufferId:  dw 0x0000
04012C 00          0199*  @end:       db 0x00 ; padding
04012D             0200*  
04012D             0201*  
04012D             0202*  
04012D             0203*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04012D             0204*  ; inputs: hl = bufferId; a = format
04012D             0205*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04012D             0206*  ; Value 	Description
04012D             0207*  ; 0 	8-bit signed, 16KHz
04012D             0208*  ; 1 	8-bit unsigned, 16KHz
04012D             0209*  vdu_buffer_to_sound:
04012D 22 46 01 04 0210*      ld (@bufferId),hl
040131 32 48 01 04 0211*      ld (@format),a
040135 21 40 01 04 0212*      ld hl,@cmd
040139 01 09 00 00 0213*      ld bc,@end-@cmd
04013D 5B DF       0214*      rst.lil $18
04013F C9          0215*      ret
040140 17 00 85    0216*  @cmd:       db 23, 0, 0x85
040143 00          0217*              db 0x00 ; a magic number that is always 0
040144 05          0218*              db 0x05 ; buffer to sound command
040145 02          0219*              db 0x02 ; a magic number that is always 2
040146 00 00       0220*  @bufferId:  dw 0x0000
040148 00          0221*  @format:    db 0x00
040149             0222*  @end:
040149             0223*  
040149             0224*  
040149             0225*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040149             0226*  vdu_play_sample:
040149             0227*      ; populate input parameters
040149 79          0228*      ld a,c
04014A 32 74 01 04 0229*      ld (@channel0),a
04014E 32 7C 01 04 0230*      ld (@channel1),a
040152 78          0231*      ld a,b
040153 32 7E 01 04 0232*      ld (@volume),a
040157 ED 53 7F 01 0233*      ld (@frequency),de
       04          
04015C 22 77 01 04 0234*      ld (@bufferId),hl
040160             0235*      ; clean up byte that got stomped on by bufferId load from hl
040160 3E 17       0236*      ld a,23
040162 32 79 01 04 0237*      ld (@cmd1),a
040166             0238*      ; prep the vdu command string
040166 21 71 01 04 0239*      ld hl, @cmd0
04016A 01 12 00 00 0240*      ld bc, @end - @cmd0
04016E 5B DF       0241*      rst.lil $18
040170 C9          0242*      ret
040171 17 00 85    0243*  @cmd0:       db 23, 0, 0x85
040174 00          0244*  @channel0:   db 0x00
040175 04          0245*               db 0x04 ; set waveform command
040176 08          0246*  @waveform:   db 0x08 ; sample
040177 00 00       0247*  @bufferId:   dw 0x0000
040179 17 00 85    0248*  @cmd1:       db 23, 0, 0x85
04017C 00          0249*  @channel1:   db 0x00
04017D 00          0250*               db 0x00 ; play note command
04017E 00          0251*  @volume:     db 0x00
04017F 00 00       0252*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040181 00 00       0253*  @duration:   dw 0x0000 ; milliseconds
040183 00          0254*  @end:        db 0x00 ; padding
040184             0255*  
040184             0256*  
040184             0257*  vdu_enable_channels:
040184             0258*  ; enable all the channels
040184 21 8F 01 04 0259*      ld hl, enable_channels_cmd
040188 01 91 00 00 0260*      ld bc, enable_channels_end - enable_channels_cmd
04018C 5B DF       0261*      rst.lil $18
04018E C9          0262*      ret
04018F             0263*  enable_channels_cmd:
04018F 17 00 85 03 0264*      db 23, 0, $85, 3, 8
       08          
040194 17 00 85 04 0265*      db 23, 0, $85, 4, 8
       08          
040199 17 00 85 05 0266*      db 23, 0, $85, 5, 8
       08          
04019E 17 00 85 06 0267*      db 23, 0, $85, 6, 8
       08          
0401A3 17 00 85 07 0268*      db 23, 0, $85, 7, 8
       08          
0401A8 17 00 85 08 0269*      db 23, 0, $85, 8, 8
       08          
0401AD 17 00 85 09 0270*      db 23, 0, $85, 9, 8
       08          
0401B2 17 00 85 0A 0271*      db 23, 0, $85, 10, 8
       08          
0401B7 17 00 85 0B 0272*      db 23, 0, $85, 11, 8
       08          
0401BC 17 00 85 0C 0273*      db 23, 0, $85, 12, 8
       08          
0401C1 17 00 85 0D 0274*      db 23, 0, $85, 13, 8
       08          
0401C6 17 00 85 0E 0275*      db 23, 0, $85, 14, 8
       08          
0401CB 17 00 85 0F 0276*      db 23, 0, $85, 15, 8
       08          
0401D0 17 00 85 10 0277*      db 23, 0, $85, 16, 8
       08          
0401D5 17 00 85 11 0278*      db 23, 0, $85, 17, 8
       08          
0401DA 17 00 85 12 0279*      db 23, 0, $85, 18, 8
       08          
0401DF 17 00 85 13 0280*      db 23, 0, $85, 19, 8
       08          
0401E4 17 00 85 14 0281*      db 23, 0, $85, 20, 8
       08          
0401E9 17 00 85 15 0282*      db 23, 0, $85, 21, 8
       08          
0401EE 17 00 85 16 0283*      db 23, 0, $85, 22, 8
       08          
0401F3 17 00 85 17 0284*      db 23, 0, $85, 23, 8
       08          
0401F8 17 00 85 18 0285*      db 23, 0, $85, 24, 8
       08          
0401FD 17 00 85 19 0286*      db 23, 0, $85, 25, 8
       08          
040202 17 00 85 1A 0287*      db 23, 0, $85, 26, 8
       08          
040207 17 00 85 1B 0288*      db 23, 0, $85, 27, 8
       08          
04020C 17 00 85 1C 0289*      db 23, 0, $85, 28, 8
       08          
040211 17 00 85 1D 0290*      db 23, 0, $85, 29, 8
       08          
040216 17 00 85 1E 0291*      db 23, 0, $85, 30, 8
       08          
04021B 17 00 85 1F 0292*      db 23, 0, $85, 31, 8
       08          
040220             0293*  enable_channels_end:
040220             0013   	include "src/asm/images.asm"
040220             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
040220             0002*  
040220             0003*  ; cube buffer ids:
040220             0004*  BUF_10_004: equ 0x0100
040220             0005*  BUF_10_009: equ 0x0101
040220             0006*  BUF_10_010: equ 0x0102
040220             0007*  BUF_10_011: equ 0x0103
040220             0008*  BUF_10_012: equ 0x0104
040220             0009*  BUF_10_013: equ 0x0105
040220             0010*  BUF_10_014: equ 0x0106
040220             0011*  BUF_10_015: equ 0x0107
040220             0012*  BUF_10_016: equ 0x0108
040220             0013*  BUF_10_020: equ 0x0109
040220             0014*  BUF_10_024: equ 0x010A
040220             0015*  BUF_10_025: equ 0x010B
040220             0016*  BUF_10_026: equ 0x010C
040220             0017*  BUF_10_027: equ 0x010D
040220             0018*  BUF_10_028: equ 0x010E
040220             0019*  BUF_10_029: equ 0x010F
040220             0020*  BUF_10_032: equ 0x0110
040220             0021*  BUF_10_035: equ 0x0111
040220             0022*  BUF_10_036: equ 0x0112
040220             0023*  BUF_10_037: equ 0x0113
040220             0024*  BUF_10_038: equ 0x0114
040220             0025*  BUF_10_040: equ 0x0115
040220             0026*  BUF_10_042: equ 0x0116
040220             0027*  BUF_10_043: equ 0x0117
040220             0028*  BUF_10_044: equ 0x0118
040220             0029*  BUF_11_004: equ 0x0119
040220             0030*  BUF_11_009: equ 0x011A
040220             0031*  BUF_11_010: equ 0x011B
040220             0032*  BUF_11_011: equ 0x011C
040220             0033*  BUF_11_012: equ 0x011D
040220             0034*  BUF_11_013: equ 0x011E
040220             0035*  BUF_11_014: equ 0x011F
040220             0036*  BUF_11_015: equ 0x0120
040220             0037*  BUF_11_016: equ 0x0121
040220             0038*  BUF_11_020: equ 0x0122
040220             0039*  BUF_11_024: equ 0x0123
040220             0040*  BUF_11_025: equ 0x0124
040220             0041*  BUF_11_026: equ 0x0125
040220             0042*  BUF_11_027: equ 0x0126
040220             0043*  BUF_11_028: equ 0x0127
040220             0044*  BUF_11_029: equ 0x0128
040220             0045*  BUF_11_032: equ 0x0129
040220             0046*  BUF_11_035: equ 0x012A
040220             0047*  BUF_11_036: equ 0x012B
040220             0048*  BUF_11_037: equ 0x012C
040220             0049*  BUF_11_038: equ 0x012D
040220             0050*  BUF_11_040: equ 0x012E
040220             0051*  BUF_11_042: equ 0x012F
040220             0052*  BUF_11_043: equ 0x0130
040220             0053*  BUF_11_044: equ 0x0131
040220             0054*  BUF_12_004: equ 0x0132
040220             0055*  BUF_12_009: equ 0x0133
040220             0056*  BUF_12_010: equ 0x0134
040220             0057*  BUF_12_011: equ 0x0135
040220             0058*  BUF_12_012: equ 0x0136
040220             0059*  BUF_12_013: equ 0x0137
040220             0060*  BUF_12_014: equ 0x0138
040220             0061*  BUF_12_015: equ 0x0139
040220             0062*  BUF_12_016: equ 0x013A
040220             0063*  BUF_12_020: equ 0x013B
040220             0064*  BUF_12_024: equ 0x013C
040220             0065*  BUF_12_025: equ 0x013D
040220             0066*  BUF_12_026: equ 0x013E
040220             0067*  BUF_12_027: equ 0x013F
040220             0068*  BUF_12_028: equ 0x0140
040220             0069*  BUF_12_029: equ 0x0141
040220             0070*  BUF_12_032: equ 0x0142
040220             0071*  BUF_12_035: equ 0x0143
040220             0072*  BUF_12_036: equ 0x0144
040220             0073*  BUF_12_037: equ 0x0145
040220             0074*  BUF_12_038: equ 0x0146
040220             0075*  BUF_12_040: equ 0x0147
040220             0076*  BUF_12_042: equ 0x0148
040220             0077*  BUF_12_043: equ 0x0149
040220             0078*  BUF_12_044: equ 0x014A
040220             0079*  BUF_13_004: equ 0x014B
040220             0080*  BUF_13_009: equ 0x014C
040220             0081*  BUF_13_010: equ 0x014D
040220             0082*  BUF_13_011: equ 0x014E
040220             0083*  BUF_13_012: equ 0x014F
040220             0084*  BUF_13_013: equ 0x0150
040220             0085*  BUF_13_014: equ 0x0151
040220             0086*  BUF_13_015: equ 0x0152
040220             0087*  BUF_13_016: equ 0x0153
040220             0088*  BUF_13_020: equ 0x0154
040220             0089*  BUF_13_024: equ 0x0155
040220             0090*  BUF_13_025: equ 0x0156
040220             0091*  BUF_13_026: equ 0x0157
040220             0092*  BUF_13_027: equ 0x0158
040220             0093*  BUF_13_028: equ 0x0159
040220             0094*  BUF_13_029: equ 0x015A
040220             0095*  BUF_13_032: equ 0x015B
040220             0096*  BUF_13_035: equ 0x015C
040220             0097*  BUF_13_036: equ 0x015D
040220             0098*  BUF_13_037: equ 0x015E
040220             0099*  BUF_13_038: equ 0x015F
040220             0100*  BUF_13_040: equ 0x0160
040220             0101*  BUF_13_042: equ 0x0161
040220             0102*  BUF_13_043: equ 0x0162
040220             0103*  BUF_13_044: equ 0x0163
040220             0104*  BUF_14_004: equ 0x0164
040220             0105*  BUF_14_009: equ 0x0165
040220             0106*  BUF_14_010: equ 0x0166
040220             0107*  BUF_14_011: equ 0x0167
040220             0108*  BUF_14_012: equ 0x0168
040220             0109*  BUF_14_013: equ 0x0169
040220             0110*  BUF_14_014: equ 0x016A
040220             0111*  BUF_14_015: equ 0x016B
040220             0112*  BUF_14_016: equ 0x016C
040220             0113*  BUF_14_020: equ 0x016D
040220             0114*  BUF_14_024: equ 0x016E
040220             0115*  BUF_14_025: equ 0x016F
040220             0116*  BUF_14_026: equ 0x0170
040220             0117*  BUF_14_027: equ 0x0171
040220             0118*  BUF_14_028: equ 0x0172
040220             0119*  BUF_14_029: equ 0x0173
040220             0120*  BUF_14_032: equ 0x0174
040220             0121*  BUF_14_035: equ 0x0175
040220             0122*  BUF_14_036: equ 0x0176
040220             0123*  BUF_14_037: equ 0x0177
040220             0124*  BUF_14_038: equ 0x0178
040220             0125*  BUF_14_040: equ 0x0179
040220             0126*  BUF_14_042: equ 0x017A
040220             0127*  BUF_14_043: equ 0x017B
040220             0128*  BUF_14_044: equ 0x017C
040220             0129*  BUF_15_004: equ 0x017D
040220             0130*  BUF_15_009: equ 0x017E
040220             0131*  BUF_15_010: equ 0x017F
040220             0132*  BUF_15_011: equ 0x0180
040220             0133*  BUF_15_012: equ 0x0181
040220             0134*  BUF_15_013: equ 0x0182
040220             0135*  BUF_15_014: equ 0x0183
040220             0136*  BUF_15_015: equ 0x0184
040220             0137*  BUF_15_016: equ 0x0185
040220             0138*  BUF_15_020: equ 0x0186
040220             0139*  BUF_15_024: equ 0x0187
040220             0140*  BUF_15_025: equ 0x0188
040220             0141*  BUF_15_026: equ 0x0189
040220             0142*  BUF_15_027: equ 0x018A
040220             0143*  BUF_15_028: equ 0x018B
040220             0144*  BUF_15_029: equ 0x018C
040220             0145*  BUF_15_032: equ 0x018D
040220             0146*  BUF_15_035: equ 0x018E
040220             0147*  BUF_15_036: equ 0x018F
040220             0148*  BUF_15_037: equ 0x0190
040220             0149*  BUF_15_038: equ 0x0191
040220             0150*  BUF_15_040: equ 0x0192
040220             0151*  BUF_15_042: equ 0x0193
040220             0152*  BUF_15_043: equ 0x0194
040220             0153*  BUF_15_044: equ 0x0195
040220             0154*  BUF_16_004: equ 0x0196
040220             0155*  BUF_16_009: equ 0x0197
040220             0156*  BUF_16_010: equ 0x0198
040220             0157*  BUF_16_011: equ 0x0199
040220             0158*  BUF_16_012: equ 0x019A
040220             0159*  BUF_16_013: equ 0x019B
040220             0160*  BUF_16_014: equ 0x019C
040220             0161*  BUF_16_015: equ 0x019D
040220             0162*  BUF_16_016: equ 0x019E
040220             0163*  BUF_16_020: equ 0x019F
040220             0164*  BUF_16_024: equ 0x01A0
040220             0165*  BUF_16_025: equ 0x01A1
040220             0166*  BUF_16_026: equ 0x01A2
040220             0167*  BUF_16_027: equ 0x01A3
040220             0168*  BUF_16_028: equ 0x01A4
040220             0169*  BUF_16_029: equ 0x01A5
040220             0170*  BUF_16_032: equ 0x01A6
040220             0171*  BUF_16_035: equ 0x01A7
040220             0172*  BUF_16_036: equ 0x01A8
040220             0173*  BUF_16_037: equ 0x01A9
040220             0174*  BUF_16_038: equ 0x01AA
040220             0175*  BUF_16_040: equ 0x01AB
040220             0176*  BUF_16_042: equ 0x01AC
040220             0177*  BUF_16_043: equ 0x01AD
040220             0178*  BUF_16_044: equ 0x01AE
040220             0179*  BUF_17_004: equ 0x01AF
040220             0180*  BUF_17_009: equ 0x01B0
040220             0181*  BUF_17_010: equ 0x01B1
040220             0182*  BUF_17_011: equ 0x01B2
040220             0183*  BUF_17_012: equ 0x01B3
040220             0184*  BUF_17_013: equ 0x01B4
040220             0185*  BUF_17_014: equ 0x01B5
040220             0186*  BUF_17_015: equ 0x01B6
040220             0187*  BUF_17_016: equ 0x01B7
040220             0188*  BUF_17_020: equ 0x01B8
040220             0189*  BUF_17_024: equ 0x01B9
040220             0190*  BUF_17_025: equ 0x01BA
040220             0191*  BUF_17_026: equ 0x01BB
040220             0192*  BUF_17_027: equ 0x01BC
040220             0193*  BUF_17_028: equ 0x01BD
040220             0194*  BUF_17_029: equ 0x01BE
040220             0195*  BUF_17_032: equ 0x01BF
040220             0196*  BUF_17_035: equ 0x01C0
040220             0197*  BUF_17_036: equ 0x01C1
040220             0198*  BUF_17_037: equ 0x01C2
040220             0199*  BUF_17_038: equ 0x01C3
040220             0200*  BUF_17_040: equ 0x01C4
040220             0201*  BUF_17_042: equ 0x01C5
040220             0202*  BUF_17_043: equ 0x01C6
040220             0203*  BUF_17_044: equ 0x01C7
040220             0204*  BUF_57_004: equ 0x01C8
040220             0205*  BUF_57_009: equ 0x01C9
040220             0206*  BUF_57_010: equ 0x01CA
040220             0207*  BUF_57_011: equ 0x01CB
040220             0208*  BUF_57_012: equ 0x01CC
040220             0209*  BUF_57_013: equ 0x01CD
040220             0210*  BUF_57_014: equ 0x01CE
040220             0211*  BUF_57_015: equ 0x01CF
040220             0212*  BUF_57_016: equ 0x01D0
040220             0213*  BUF_57_020: equ 0x01D1
040220             0214*  BUF_57_024: equ 0x01D2
040220             0215*  BUF_57_025: equ 0x01D3
040220             0216*  BUF_57_026: equ 0x01D4
040220             0217*  BUF_57_027: equ 0x01D5
040220             0218*  BUF_57_028: equ 0x01D6
040220             0219*  BUF_57_029: equ 0x01D7
040220             0220*  BUF_57_032: equ 0x01D8
040220             0221*  BUF_57_035: equ 0x01D9
040220             0222*  BUF_57_036: equ 0x01DA
040220             0223*  BUF_57_037: equ 0x01DB
040220             0224*  BUF_57_038: equ 0x01DC
040220             0225*  BUF_57_040: equ 0x01DD
040220             0226*  BUF_57_042: equ 0x01DE
040220             0227*  BUF_57_043: equ 0x01DF
040220             0228*  BUF_57_044: equ 0x01E0
040220             0229*  BUF_58_004: equ 0x01E1
040220             0230*  BUF_58_009: equ 0x01E2
040220             0231*  BUF_58_010: equ 0x01E3
040220             0232*  BUF_58_011: equ 0x01E4
040220             0233*  BUF_58_012: equ 0x01E5
040220             0234*  BUF_58_013: equ 0x01E6
040220             0235*  BUF_58_014: equ 0x01E7
040220             0236*  BUF_58_015: equ 0x01E8
040220             0237*  BUF_58_016: equ 0x01E9
040220             0238*  BUF_58_020: equ 0x01EA
040220             0239*  BUF_58_024: equ 0x01EB
040220             0240*  BUF_58_025: equ 0x01EC
040220             0241*  BUF_58_026: equ 0x01ED
040220             0242*  BUF_58_027: equ 0x01EE
040220             0243*  BUF_58_028: equ 0x01EF
040220             0244*  BUF_58_029: equ 0x01F0
040220             0245*  BUF_58_032: equ 0x01F1
040220             0246*  BUF_58_035: equ 0x01F2
040220             0247*  BUF_58_036: equ 0x01F3
040220             0248*  BUF_58_037: equ 0x01F4
040220             0249*  BUF_58_038: equ 0x01F5
040220             0250*  BUF_58_040: equ 0x01F6
040220             0251*  BUF_58_042: equ 0x01F7
040220             0252*  BUF_58_043: equ 0x01F8
040220             0253*  BUF_58_044: equ 0x01F9
040220             0254*  BUF_59_004: equ 0x01FA
040220             0255*  BUF_59_009: equ 0x01FB
040220             0256*  BUF_59_010: equ 0x01FC
040220             0257*  BUF_59_011: equ 0x01FD
040220             0258*  BUF_59_012: equ 0x01FE
040220             0259*  BUF_59_013: equ 0x01FF
040220             0260*  BUF_59_014: equ 0x0200
040220             0261*  BUF_59_015: equ 0x0201
040220             0262*  BUF_59_016: equ 0x0202
040220             0263*  BUF_59_020: equ 0x0203
040220             0264*  BUF_59_024: equ 0x0204
040220             0265*  BUF_59_025: equ 0x0205
040220             0266*  BUF_59_026: equ 0x0206
040220             0267*  BUF_59_027: equ 0x0207
040220             0268*  BUF_59_028: equ 0x0208
040220             0269*  BUF_59_029: equ 0x0209
040220             0270*  BUF_59_032: equ 0x020A
040220             0271*  BUF_59_035: equ 0x020B
040220             0272*  BUF_59_036: equ 0x020C
040220             0273*  BUF_59_037: equ 0x020D
040220             0274*  BUF_59_038: equ 0x020E
040220             0275*  BUF_59_040: equ 0x020F
040220             0276*  BUF_59_042: equ 0x0210
040220             0277*  BUF_59_043: equ 0x0211
040220             0278*  BUF_59_044: equ 0x0212
040220             0279*  
040220             0280*  cube_num_panels: equ 275
040220             0281*  
040220             0282*  ; cube buffer id reverse lookup:
040220             0283*  cube_buffer_id_lut:
040220 00 01 00    0284*  	dl BUF_10_004
040223 01 01 00    0285*  	dl BUF_10_009
040226 02 01 00    0286*  	dl BUF_10_010
040229 03 01 00    0287*  	dl BUF_10_011
04022C 04 01 00    0288*  	dl BUF_10_012
04022F 05 01 00    0289*  	dl BUF_10_013
040232 06 01 00    0290*  	dl BUF_10_014
040235 07 01 00    0291*  	dl BUF_10_015
040238 08 01 00    0292*  	dl BUF_10_016
04023B 09 01 00    0293*  	dl BUF_10_020
04023E 0A 01 00    0294*  	dl BUF_10_024
040241 0B 01 00    0295*  	dl BUF_10_025
040244 0C 01 00    0296*  	dl BUF_10_026
040247 0D 01 00    0297*  	dl BUF_10_027
04024A 0E 01 00    0298*  	dl BUF_10_028
04024D 0F 01 00    0299*  	dl BUF_10_029
040250 10 01 00    0300*  	dl BUF_10_032
040253 11 01 00    0301*  	dl BUF_10_035
040256 12 01 00    0302*  	dl BUF_10_036
040259 13 01 00    0303*  	dl BUF_10_037
04025C 14 01 00    0304*  	dl BUF_10_038
04025F 15 01 00    0305*  	dl BUF_10_040
040262 16 01 00    0306*  	dl BUF_10_042
040265 17 01 00    0307*  	dl BUF_10_043
040268 18 01 00    0308*  	dl BUF_10_044
04026B 19 01 00    0309*  	dl BUF_11_004
04026E 1A 01 00    0310*  	dl BUF_11_009
040271 1B 01 00    0311*  	dl BUF_11_010
040274 1C 01 00    0312*  	dl BUF_11_011
040277 1D 01 00    0313*  	dl BUF_11_012
04027A 1E 01 00    0314*  	dl BUF_11_013
04027D 1F 01 00    0315*  	dl BUF_11_014
040280 20 01 00    0316*  	dl BUF_11_015
040283 21 01 00    0317*  	dl BUF_11_016
040286 22 01 00    0318*  	dl BUF_11_020
040289 23 01 00    0319*  	dl BUF_11_024
04028C 24 01 00    0320*  	dl BUF_11_025
04028F 25 01 00    0321*  	dl BUF_11_026
040292 26 01 00    0322*  	dl BUF_11_027
040295 27 01 00    0323*  	dl BUF_11_028
040298 28 01 00    0324*  	dl BUF_11_029
04029B 29 01 00    0325*  	dl BUF_11_032
04029E 2A 01 00    0326*  	dl BUF_11_035
0402A1 2B 01 00    0327*  	dl BUF_11_036
0402A4 2C 01 00    0328*  	dl BUF_11_037
0402A7 2D 01 00    0329*  	dl BUF_11_038
0402AA 2E 01 00    0330*  	dl BUF_11_040
0402AD 2F 01 00    0331*  	dl BUF_11_042
0402B0 30 01 00    0332*  	dl BUF_11_043
0402B3 31 01 00    0333*  	dl BUF_11_044
0402B6 32 01 00    0334*  	dl BUF_12_004
0402B9 33 01 00    0335*  	dl BUF_12_009
0402BC 34 01 00    0336*  	dl BUF_12_010
0402BF 35 01 00    0337*  	dl BUF_12_011
0402C2 36 01 00    0338*  	dl BUF_12_012
0402C5 37 01 00    0339*  	dl BUF_12_013
0402C8 38 01 00    0340*  	dl BUF_12_014
0402CB 39 01 00    0341*  	dl BUF_12_015
0402CE 3A 01 00    0342*  	dl BUF_12_016
0402D1 3B 01 00    0343*  	dl BUF_12_020
0402D4 3C 01 00    0344*  	dl BUF_12_024
0402D7 3D 01 00    0345*  	dl BUF_12_025
0402DA 3E 01 00    0346*  	dl BUF_12_026
0402DD 3F 01 00    0347*  	dl BUF_12_027
0402E0 40 01 00    0348*  	dl BUF_12_028
0402E3 41 01 00    0349*  	dl BUF_12_029
0402E6 42 01 00    0350*  	dl BUF_12_032
0402E9 43 01 00    0351*  	dl BUF_12_035
0402EC 44 01 00    0352*  	dl BUF_12_036
0402EF 45 01 00    0353*  	dl BUF_12_037
0402F2 46 01 00    0354*  	dl BUF_12_038
0402F5 47 01 00    0355*  	dl BUF_12_040
0402F8 48 01 00    0356*  	dl BUF_12_042
0402FB 49 01 00    0357*  	dl BUF_12_043
0402FE 4A 01 00    0358*  	dl BUF_12_044
040301 4B 01 00    0359*  	dl BUF_13_004
040304 4C 01 00    0360*  	dl BUF_13_009
040307 4D 01 00    0361*  	dl BUF_13_010
04030A 4E 01 00    0362*  	dl BUF_13_011
04030D 4F 01 00    0363*  	dl BUF_13_012
040310 50 01 00    0364*  	dl BUF_13_013
040313 51 01 00    0365*  	dl BUF_13_014
040316 52 01 00    0366*  	dl BUF_13_015
040319 53 01 00    0367*  	dl BUF_13_016
04031C 54 01 00    0368*  	dl BUF_13_020
04031F 55 01 00    0369*  	dl BUF_13_024
040322 56 01 00    0370*  	dl BUF_13_025
040325 57 01 00    0371*  	dl BUF_13_026
040328 58 01 00    0372*  	dl BUF_13_027
04032B 59 01 00    0373*  	dl BUF_13_028
04032E 5A 01 00    0374*  	dl BUF_13_029
040331 5B 01 00    0375*  	dl BUF_13_032
040334 5C 01 00    0376*  	dl BUF_13_035
040337 5D 01 00    0377*  	dl BUF_13_036
04033A 5E 01 00    0378*  	dl BUF_13_037
04033D 5F 01 00    0379*  	dl BUF_13_038
040340 60 01 00    0380*  	dl BUF_13_040
040343 61 01 00    0381*  	dl BUF_13_042
040346 62 01 00    0382*  	dl BUF_13_043
040349 63 01 00    0383*  	dl BUF_13_044
04034C 64 01 00    0384*  	dl BUF_14_004
04034F 65 01 00    0385*  	dl BUF_14_009
040352 66 01 00    0386*  	dl BUF_14_010
040355 67 01 00    0387*  	dl BUF_14_011
040358 68 01 00    0388*  	dl BUF_14_012
04035B 69 01 00    0389*  	dl BUF_14_013
04035E 6A 01 00    0390*  	dl BUF_14_014
040361 6B 01 00    0391*  	dl BUF_14_015
040364 6C 01 00    0392*  	dl BUF_14_016
040367 6D 01 00    0393*  	dl BUF_14_020
04036A 6E 01 00    0394*  	dl BUF_14_024
04036D 6F 01 00    0395*  	dl BUF_14_025
040370 70 01 00    0396*  	dl BUF_14_026
040373 71 01 00    0397*  	dl BUF_14_027
040376 72 01 00    0398*  	dl BUF_14_028
040379 73 01 00    0399*  	dl BUF_14_029
04037C 74 01 00    0400*  	dl BUF_14_032
04037F 75 01 00    0401*  	dl BUF_14_035
040382 76 01 00    0402*  	dl BUF_14_036
040385 77 01 00    0403*  	dl BUF_14_037
040388 78 01 00    0404*  	dl BUF_14_038
04038B 79 01 00    0405*  	dl BUF_14_040
04038E 7A 01 00    0406*  	dl BUF_14_042
040391 7B 01 00    0407*  	dl BUF_14_043
040394 7C 01 00    0408*  	dl BUF_14_044
040397 7D 01 00    0409*  	dl BUF_15_004
04039A 7E 01 00    0410*  	dl BUF_15_009
04039D 7F 01 00    0411*  	dl BUF_15_010
0403A0 80 01 00    0412*  	dl BUF_15_011
0403A3 81 01 00    0413*  	dl BUF_15_012
0403A6 82 01 00    0414*  	dl BUF_15_013
0403A9 83 01 00    0415*  	dl BUF_15_014
0403AC 84 01 00    0416*  	dl BUF_15_015
0403AF 85 01 00    0417*  	dl BUF_15_016
0403B2 86 01 00    0418*  	dl BUF_15_020
0403B5 87 01 00    0419*  	dl BUF_15_024
0403B8 88 01 00    0420*  	dl BUF_15_025
0403BB 89 01 00    0421*  	dl BUF_15_026
0403BE 8A 01 00    0422*  	dl BUF_15_027
0403C1 8B 01 00    0423*  	dl BUF_15_028
0403C4 8C 01 00    0424*  	dl BUF_15_029
0403C7 8D 01 00    0425*  	dl BUF_15_032
0403CA 8E 01 00    0426*  	dl BUF_15_035
0403CD 8F 01 00    0427*  	dl BUF_15_036
0403D0 90 01 00    0428*  	dl BUF_15_037
0403D3 91 01 00    0429*  	dl BUF_15_038
0403D6 92 01 00    0430*  	dl BUF_15_040
0403D9 93 01 00    0431*  	dl BUF_15_042
0403DC 94 01 00    0432*  	dl BUF_15_043
0403DF 95 01 00    0433*  	dl BUF_15_044
0403E2 96 01 00    0434*  	dl BUF_16_004
0403E5 97 01 00    0435*  	dl BUF_16_009
0403E8 98 01 00    0436*  	dl BUF_16_010
0403EB 99 01 00    0437*  	dl BUF_16_011
0403EE 9A 01 00    0438*  	dl BUF_16_012
0403F1 9B 01 00    0439*  	dl BUF_16_013
0403F4 9C 01 00    0440*  	dl BUF_16_014
0403F7 9D 01 00    0441*  	dl BUF_16_015
0403FA 9E 01 00    0442*  	dl BUF_16_016
0403FD 9F 01 00    0443*  	dl BUF_16_020
040400 A0 01 00    0444*  	dl BUF_16_024
040403 A1 01 00    0445*  	dl BUF_16_025
040406 A2 01 00    0446*  	dl BUF_16_026
040409 A3 01 00    0447*  	dl BUF_16_027
04040C A4 01 00    0448*  	dl BUF_16_028
04040F A5 01 00    0449*  	dl BUF_16_029
040412 A6 01 00    0450*  	dl BUF_16_032
040415 A7 01 00    0451*  	dl BUF_16_035
040418 A8 01 00    0452*  	dl BUF_16_036
04041B A9 01 00    0453*  	dl BUF_16_037
04041E AA 01 00    0454*  	dl BUF_16_038
040421 AB 01 00    0455*  	dl BUF_16_040
040424 AC 01 00    0456*  	dl BUF_16_042
040427 AD 01 00    0457*  	dl BUF_16_043
04042A AE 01 00    0458*  	dl BUF_16_044
04042D AF 01 00    0459*  	dl BUF_17_004
040430 B0 01 00    0460*  	dl BUF_17_009
040433 B1 01 00    0461*  	dl BUF_17_010
040436 B2 01 00    0462*  	dl BUF_17_011
040439 B3 01 00    0463*  	dl BUF_17_012
04043C B4 01 00    0464*  	dl BUF_17_013
04043F B5 01 00    0465*  	dl BUF_17_014
040442 B6 01 00    0466*  	dl BUF_17_015
040445 B7 01 00    0467*  	dl BUF_17_016
040448 B8 01 00    0468*  	dl BUF_17_020
04044B B9 01 00    0469*  	dl BUF_17_024
04044E BA 01 00    0470*  	dl BUF_17_025
040451 BB 01 00    0471*  	dl BUF_17_026
040454 BC 01 00    0472*  	dl BUF_17_027
040457 BD 01 00    0473*  	dl BUF_17_028
04045A BE 01 00    0474*  	dl BUF_17_029
04045D BF 01 00    0475*  	dl BUF_17_032
040460 C0 01 00    0476*  	dl BUF_17_035
040463 C1 01 00    0477*  	dl BUF_17_036
040466 C2 01 00    0478*  	dl BUF_17_037
040469 C3 01 00    0479*  	dl BUF_17_038
04046C C4 01 00    0480*  	dl BUF_17_040
04046F C5 01 00    0481*  	dl BUF_17_042
040472 C6 01 00    0482*  	dl BUF_17_043
040475 C7 01 00    0483*  	dl BUF_17_044
040478 C8 01 00    0484*  	dl BUF_57_004
04047B C9 01 00    0485*  	dl BUF_57_009
04047E CA 01 00    0486*  	dl BUF_57_010
040481 CB 01 00    0487*  	dl BUF_57_011
040484 CC 01 00    0488*  	dl BUF_57_012
040487 CD 01 00    0489*  	dl BUF_57_013
04048A CE 01 00    0490*  	dl BUF_57_014
04048D CF 01 00    0491*  	dl BUF_57_015
040490 D0 01 00    0492*  	dl BUF_57_016
040493 D1 01 00    0493*  	dl BUF_57_020
040496 D2 01 00    0494*  	dl BUF_57_024
040499 D3 01 00    0495*  	dl BUF_57_025
04049C D4 01 00    0496*  	dl BUF_57_026
04049F D5 01 00    0497*  	dl BUF_57_027
0404A2 D6 01 00    0498*  	dl BUF_57_028
0404A5 D7 01 00    0499*  	dl BUF_57_029
0404A8 D8 01 00    0500*  	dl BUF_57_032
0404AB D9 01 00    0501*  	dl BUF_57_035
0404AE DA 01 00    0502*  	dl BUF_57_036
0404B1 DB 01 00    0503*  	dl BUF_57_037
0404B4 DC 01 00    0504*  	dl BUF_57_038
0404B7 DD 01 00    0505*  	dl BUF_57_040
0404BA DE 01 00    0506*  	dl BUF_57_042
0404BD DF 01 00    0507*  	dl BUF_57_043
0404C0 E0 01 00    0508*  	dl BUF_57_044
0404C3 E1 01 00    0509*  	dl BUF_58_004
0404C6 E2 01 00    0510*  	dl BUF_58_009
0404C9 E3 01 00    0511*  	dl BUF_58_010
0404CC E4 01 00    0512*  	dl BUF_58_011
0404CF E5 01 00    0513*  	dl BUF_58_012
0404D2 E6 01 00    0514*  	dl BUF_58_013
0404D5 E7 01 00    0515*  	dl BUF_58_014
0404D8 E8 01 00    0516*  	dl BUF_58_015
0404DB E9 01 00    0517*  	dl BUF_58_016
0404DE EA 01 00    0518*  	dl BUF_58_020
0404E1 EB 01 00    0519*  	dl BUF_58_024
0404E4 EC 01 00    0520*  	dl BUF_58_025
0404E7 ED 01 00    0521*  	dl BUF_58_026
0404EA EE 01 00    0522*  	dl BUF_58_027
0404ED EF 01 00    0523*  	dl BUF_58_028
0404F0 F0 01 00    0524*  	dl BUF_58_029
0404F3 F1 01 00    0525*  	dl BUF_58_032
0404F6 F2 01 00    0526*  	dl BUF_58_035
0404F9 F3 01 00    0527*  	dl BUF_58_036
0404FC F4 01 00    0528*  	dl BUF_58_037
0404FF F5 01 00    0529*  	dl BUF_58_038
040502 F6 01 00    0530*  	dl BUF_58_040
040505 F7 01 00    0531*  	dl BUF_58_042
040508 F8 01 00    0532*  	dl BUF_58_043
04050B F9 01 00    0533*  	dl BUF_58_044
04050E FA 01 00    0534*  	dl BUF_59_004
040511 FB 01 00    0535*  	dl BUF_59_009
040514 FC 01 00    0536*  	dl BUF_59_010
040517 FD 01 00    0537*  	dl BUF_59_011
04051A FE 01 00    0538*  	dl BUF_59_012
04051D FF 01 00    0539*  	dl BUF_59_013
040520 00 02 00    0540*  	dl BUF_59_014
040523 01 02 00    0541*  	dl BUF_59_015
040526 02 02 00    0542*  	dl BUF_59_016
040529 03 02 00    0543*  	dl BUF_59_020
04052C 04 02 00    0544*  	dl BUF_59_024
04052F 05 02 00    0545*  	dl BUF_59_025
040532 06 02 00    0546*  	dl BUF_59_026
040535 07 02 00    0547*  	dl BUF_59_027
040538 08 02 00    0548*  	dl BUF_59_028
04053B 09 02 00    0549*  	dl BUF_59_029
04053E 0A 02 00    0550*  	dl BUF_59_032
040541 0B 02 00    0551*  	dl BUF_59_035
040544 0C 02 00    0552*  	dl BUF_59_036
040547 0D 02 00    0553*  	dl BUF_59_037
04054A 0E 02 00    0554*  	dl BUF_59_038
04054D 0F 02 00    0555*  	dl BUF_59_040
040550 10 02 00    0556*  	dl BUF_59_042
040553 11 02 00    0557*  	dl BUF_59_043
040556 12 02 00    0558*  	dl BUF_59_044
040559             0559*  
040559             0560*  ; cube load routines jump table:
040559             0561*  cube_load_panels_table:
040559 92 08 04    0562*  	dl ld_10_004
04055C BC 08 04    0563*  	dl ld_10_009
04055F E6 08 04    0564*  	dl ld_10_010
040562 10 09 04    0565*  	dl ld_10_011
040565 3A 09 04    0566*  	dl ld_10_012
040568 64 09 04    0567*  	dl ld_10_013
04056B 8E 09 04    0568*  	dl ld_10_014
04056E B8 09 04    0569*  	dl ld_10_015
040571 E2 09 04    0570*  	dl ld_10_016
040574 0C 0A 04    0571*  	dl ld_10_020
040577 36 0A 04    0572*  	dl ld_10_024
04057A 60 0A 04    0573*  	dl ld_10_025
04057D 8A 0A 04    0574*  	dl ld_10_026
040580 B4 0A 04    0575*  	dl ld_10_027
040583 DE 0A 04    0576*  	dl ld_10_028
040586 08 0B 04    0577*  	dl ld_10_029
040589 32 0B 04    0578*  	dl ld_10_032
04058C 5C 0B 04    0579*  	dl ld_10_035
04058F 86 0B 04    0580*  	dl ld_10_036
040592 B0 0B 04    0581*  	dl ld_10_037
040595 DA 0B 04    0582*  	dl ld_10_038
040598 04 0C 04    0583*  	dl ld_10_040
04059B 2E 0C 04    0584*  	dl ld_10_042
04059E 58 0C 04    0585*  	dl ld_10_043
0405A1 82 0C 04    0586*  	dl ld_10_044
0405A4 AC 0C 04    0587*  	dl ld_11_004
0405A7 D6 0C 04    0588*  	dl ld_11_009
0405AA 00 0D 04    0589*  	dl ld_11_010
0405AD 2A 0D 04    0590*  	dl ld_11_011
0405B0 54 0D 04    0591*  	dl ld_11_012
0405B3 7E 0D 04    0592*  	dl ld_11_013
0405B6 A8 0D 04    0593*  	dl ld_11_014
0405B9 D2 0D 04    0594*  	dl ld_11_015
0405BC FC 0D 04    0595*  	dl ld_11_016
0405BF 26 0E 04    0596*  	dl ld_11_020
0405C2 50 0E 04    0597*  	dl ld_11_024
0405C5 7A 0E 04    0598*  	dl ld_11_025
0405C8 A4 0E 04    0599*  	dl ld_11_026
0405CB CE 0E 04    0600*  	dl ld_11_027
0405CE F8 0E 04    0601*  	dl ld_11_028
0405D1 22 0F 04    0602*  	dl ld_11_029
0405D4 4C 0F 04    0603*  	dl ld_11_032
0405D7 76 0F 04    0604*  	dl ld_11_035
0405DA A0 0F 04    0605*  	dl ld_11_036
0405DD CA 0F 04    0606*  	dl ld_11_037
0405E0 F4 0F 04    0607*  	dl ld_11_038
0405E3 1E 10 04    0608*  	dl ld_11_040
0405E6 48 10 04    0609*  	dl ld_11_042
0405E9 72 10 04    0610*  	dl ld_11_043
0405EC 9C 10 04    0611*  	dl ld_11_044
0405EF C6 10 04    0612*  	dl ld_12_004
0405F2 F0 10 04    0613*  	dl ld_12_009
0405F5 1A 11 04    0614*  	dl ld_12_010
0405F8 44 11 04    0615*  	dl ld_12_011
0405FB 6E 11 04    0616*  	dl ld_12_012
0405FE 98 11 04    0617*  	dl ld_12_013
040601 C2 11 04    0618*  	dl ld_12_014
040604 EC 11 04    0619*  	dl ld_12_015
040607 16 12 04    0620*  	dl ld_12_016
04060A 40 12 04    0621*  	dl ld_12_020
04060D 6A 12 04    0622*  	dl ld_12_024
040610 94 12 04    0623*  	dl ld_12_025
040613 BE 12 04    0624*  	dl ld_12_026
040616 E8 12 04    0625*  	dl ld_12_027
040619 12 13 04    0626*  	dl ld_12_028
04061C 3C 13 04    0627*  	dl ld_12_029
04061F 66 13 04    0628*  	dl ld_12_032
040622 90 13 04    0629*  	dl ld_12_035
040625 BA 13 04    0630*  	dl ld_12_036
040628 E4 13 04    0631*  	dl ld_12_037
04062B 0E 14 04    0632*  	dl ld_12_038
04062E 38 14 04    0633*  	dl ld_12_040
040631 62 14 04    0634*  	dl ld_12_042
040634 8C 14 04    0635*  	dl ld_12_043
040637 B6 14 04    0636*  	dl ld_12_044
04063A E0 14 04    0637*  	dl ld_13_004
04063D 0A 15 04    0638*  	dl ld_13_009
040640 34 15 04    0639*  	dl ld_13_010
040643 5E 15 04    0640*  	dl ld_13_011
040646 88 15 04    0641*  	dl ld_13_012
040649 B2 15 04    0642*  	dl ld_13_013
04064C DC 15 04    0643*  	dl ld_13_014
04064F 06 16 04    0644*  	dl ld_13_015
040652 30 16 04    0645*  	dl ld_13_016
040655 5A 16 04    0646*  	dl ld_13_020
040658 84 16 04    0647*  	dl ld_13_024
04065B AE 16 04    0648*  	dl ld_13_025
04065E D8 16 04    0649*  	dl ld_13_026
040661 02 17 04    0650*  	dl ld_13_027
040664 2C 17 04    0651*  	dl ld_13_028
040667 56 17 04    0652*  	dl ld_13_029
04066A 80 17 04    0653*  	dl ld_13_032
04066D AA 17 04    0654*  	dl ld_13_035
040670 D4 17 04    0655*  	dl ld_13_036
040673 FE 17 04    0656*  	dl ld_13_037
040676 28 18 04    0657*  	dl ld_13_038
040679 52 18 04    0658*  	dl ld_13_040
04067C 7C 18 04    0659*  	dl ld_13_042
04067F A6 18 04    0660*  	dl ld_13_043
040682 D0 18 04    0661*  	dl ld_13_044
040685 FA 18 04    0662*  	dl ld_14_004
040688 24 19 04    0663*  	dl ld_14_009
04068B 4E 19 04    0664*  	dl ld_14_010
04068E 78 19 04    0665*  	dl ld_14_011
040691 A2 19 04    0666*  	dl ld_14_012
040694 CC 19 04    0667*  	dl ld_14_013
040697 F6 19 04    0668*  	dl ld_14_014
04069A 20 1A 04    0669*  	dl ld_14_015
04069D 4A 1A 04    0670*  	dl ld_14_016
0406A0 74 1A 04    0671*  	dl ld_14_020
0406A3 9E 1A 04    0672*  	dl ld_14_024
0406A6 C8 1A 04    0673*  	dl ld_14_025
0406A9 F2 1A 04    0674*  	dl ld_14_026
0406AC 1C 1B 04    0675*  	dl ld_14_027
0406AF 46 1B 04    0676*  	dl ld_14_028
0406B2 70 1B 04    0677*  	dl ld_14_029
0406B5 9A 1B 04    0678*  	dl ld_14_032
0406B8 C4 1B 04    0679*  	dl ld_14_035
0406BB EE 1B 04    0680*  	dl ld_14_036
0406BE 18 1C 04    0681*  	dl ld_14_037
0406C1 42 1C 04    0682*  	dl ld_14_038
0406C4 6C 1C 04    0683*  	dl ld_14_040
0406C7 96 1C 04    0684*  	dl ld_14_042
0406CA C0 1C 04    0685*  	dl ld_14_043
0406CD EA 1C 04    0686*  	dl ld_14_044
0406D0 14 1D 04    0687*  	dl ld_15_004
0406D3 3E 1D 04    0688*  	dl ld_15_009
0406D6 68 1D 04    0689*  	dl ld_15_010
0406D9 92 1D 04    0690*  	dl ld_15_011
0406DC BC 1D 04    0691*  	dl ld_15_012
0406DF E6 1D 04    0692*  	dl ld_15_013
0406E2 10 1E 04    0693*  	dl ld_15_014
0406E5 3A 1E 04    0694*  	dl ld_15_015
0406E8 64 1E 04    0695*  	dl ld_15_016
0406EB 8E 1E 04    0696*  	dl ld_15_020
0406EE B8 1E 04    0697*  	dl ld_15_024
0406F1 E2 1E 04    0698*  	dl ld_15_025
0406F4 0C 1F 04    0699*  	dl ld_15_026
0406F7 36 1F 04    0700*  	dl ld_15_027
0406FA 60 1F 04    0701*  	dl ld_15_028
0406FD 8A 1F 04    0702*  	dl ld_15_029
040700 B4 1F 04    0703*  	dl ld_15_032
040703 DE 1F 04    0704*  	dl ld_15_035
040706 08 20 04    0705*  	dl ld_15_036
040709 32 20 04    0706*  	dl ld_15_037
04070C 5C 20 04    0707*  	dl ld_15_038
04070F 86 20 04    0708*  	dl ld_15_040
040712 B0 20 04    0709*  	dl ld_15_042
040715 DA 20 04    0710*  	dl ld_15_043
040718 04 21 04    0711*  	dl ld_15_044
04071B 2E 21 04    0712*  	dl ld_16_004
04071E 58 21 04    0713*  	dl ld_16_009
040721 82 21 04    0714*  	dl ld_16_010
040724 AC 21 04    0715*  	dl ld_16_011
040727 D6 21 04    0716*  	dl ld_16_012
04072A 00 22 04    0717*  	dl ld_16_013
04072D 2A 22 04    0718*  	dl ld_16_014
040730 54 22 04    0719*  	dl ld_16_015
040733 7E 22 04    0720*  	dl ld_16_016
040736 A8 22 04    0721*  	dl ld_16_020
040739 D2 22 04    0722*  	dl ld_16_024
04073C FC 22 04    0723*  	dl ld_16_025
04073F 26 23 04    0724*  	dl ld_16_026
040742 50 23 04    0725*  	dl ld_16_027
040745 7A 23 04    0726*  	dl ld_16_028
040748 A4 23 04    0727*  	dl ld_16_029
04074B CE 23 04    0728*  	dl ld_16_032
04074E F8 23 04    0729*  	dl ld_16_035
040751 22 24 04    0730*  	dl ld_16_036
040754 4C 24 04    0731*  	dl ld_16_037
040757 76 24 04    0732*  	dl ld_16_038
04075A A0 24 04    0733*  	dl ld_16_040
04075D CA 24 04    0734*  	dl ld_16_042
040760 F4 24 04    0735*  	dl ld_16_043
040763 1E 25 04    0736*  	dl ld_16_044
040766 48 25 04    0737*  	dl ld_17_004
040769 72 25 04    0738*  	dl ld_17_009
04076C 9C 25 04    0739*  	dl ld_17_010
04076F C6 25 04    0740*  	dl ld_17_011
040772 F0 25 04    0741*  	dl ld_17_012
040775 1A 26 04    0742*  	dl ld_17_013
040778 44 26 04    0743*  	dl ld_17_014
04077B 6E 26 04    0744*  	dl ld_17_015
04077E 98 26 04    0745*  	dl ld_17_016
040781 C2 26 04    0746*  	dl ld_17_020
040784 EC 26 04    0747*  	dl ld_17_024
040787 16 27 04    0748*  	dl ld_17_025
04078A 40 27 04    0749*  	dl ld_17_026
04078D 6A 27 04    0750*  	dl ld_17_027
040790 94 27 04    0751*  	dl ld_17_028
040793 BE 27 04    0752*  	dl ld_17_029
040796 E8 27 04    0753*  	dl ld_17_032
040799 12 28 04    0754*  	dl ld_17_035
04079C 3C 28 04    0755*  	dl ld_17_036
04079F 66 28 04    0756*  	dl ld_17_037
0407A2 90 28 04    0757*  	dl ld_17_038
0407A5 BA 28 04    0758*  	dl ld_17_040
0407A8 E4 28 04    0759*  	dl ld_17_042
0407AB 0E 29 04    0760*  	dl ld_17_043
0407AE 38 29 04    0761*  	dl ld_17_044
0407B1 62 29 04    0762*  	dl ld_57_004
0407B4 8C 29 04    0763*  	dl ld_57_009
0407B7 B6 29 04    0764*  	dl ld_57_010
0407BA E0 29 04    0765*  	dl ld_57_011
0407BD 0A 2A 04    0766*  	dl ld_57_012
0407C0 34 2A 04    0767*  	dl ld_57_013
0407C3 5E 2A 04    0768*  	dl ld_57_014
0407C6 88 2A 04    0769*  	dl ld_57_015
0407C9 B2 2A 04    0770*  	dl ld_57_016
0407CC DC 2A 04    0771*  	dl ld_57_020
0407CF 06 2B 04    0772*  	dl ld_57_024
0407D2 30 2B 04    0773*  	dl ld_57_025
0407D5 5A 2B 04    0774*  	dl ld_57_026
0407D8 84 2B 04    0775*  	dl ld_57_027
0407DB AE 2B 04    0776*  	dl ld_57_028
0407DE D8 2B 04    0777*  	dl ld_57_029
0407E1 02 2C 04    0778*  	dl ld_57_032
0407E4 2C 2C 04    0779*  	dl ld_57_035
0407E7 56 2C 04    0780*  	dl ld_57_036
0407EA 80 2C 04    0781*  	dl ld_57_037
0407ED AA 2C 04    0782*  	dl ld_57_038
0407F0 D4 2C 04    0783*  	dl ld_57_040
0407F3 FE 2C 04    0784*  	dl ld_57_042
0407F6 28 2D 04    0785*  	dl ld_57_043
0407F9 52 2D 04    0786*  	dl ld_57_044
0407FC 7C 2D 04    0787*  	dl ld_58_004
0407FF A6 2D 04    0788*  	dl ld_58_009
040802 D0 2D 04    0789*  	dl ld_58_010
040805 FA 2D 04    0790*  	dl ld_58_011
040808 24 2E 04    0791*  	dl ld_58_012
04080B 4E 2E 04    0792*  	dl ld_58_013
04080E 78 2E 04    0793*  	dl ld_58_014
040811 A2 2E 04    0794*  	dl ld_58_015
040814 CC 2E 04    0795*  	dl ld_58_016
040817 F6 2E 04    0796*  	dl ld_58_020
04081A 20 2F 04    0797*  	dl ld_58_024
04081D 4A 2F 04    0798*  	dl ld_58_025
040820 74 2F 04    0799*  	dl ld_58_026
040823 9E 2F 04    0800*  	dl ld_58_027
040826 C8 2F 04    0801*  	dl ld_58_028
040829 F2 2F 04    0802*  	dl ld_58_029
04082C 1C 30 04    0803*  	dl ld_58_032
04082F 46 30 04    0804*  	dl ld_58_035
040832 70 30 04    0805*  	dl ld_58_036
040835 9A 30 04    0806*  	dl ld_58_037
040838 C4 30 04    0807*  	dl ld_58_038
04083B EE 30 04    0808*  	dl ld_58_040
04083E 18 31 04    0809*  	dl ld_58_042
040841 42 31 04    0810*  	dl ld_58_043
040844 6C 31 04    0811*  	dl ld_58_044
040847 96 31 04    0812*  	dl ld_59_004
04084A C0 31 04    0813*  	dl ld_59_009
04084D EA 31 04    0814*  	dl ld_59_010
040850 14 32 04    0815*  	dl ld_59_011
040853 3E 32 04    0816*  	dl ld_59_012
040856 68 32 04    0817*  	dl ld_59_013
040859 92 32 04    0818*  	dl ld_59_014
04085C BC 32 04    0819*  	dl ld_59_015
04085F E6 32 04    0820*  	dl ld_59_016
040862 10 33 04    0821*  	dl ld_59_020
040865 3A 33 04    0822*  	dl ld_59_024
040868 64 33 04    0823*  	dl ld_59_025
04086B 8E 33 04    0824*  	dl ld_59_026
04086E B8 33 04    0825*  	dl ld_59_027
040871 E2 33 04    0826*  	dl ld_59_028
040874 0C 34 04    0827*  	dl ld_59_029
040877 36 34 04    0828*  	dl ld_59_032
04087A 60 34 04    0829*  	dl ld_59_035
04087D 8A 34 04    0830*  	dl ld_59_036
040880 B4 34 04    0831*  	dl ld_59_037
040883 DE 34 04    0832*  	dl ld_59_038
040886 08 35 04    0833*  	dl ld_59_040
040889 32 35 04    0834*  	dl ld_59_042
04088C 5C 35 04    0835*  	dl ld_59_043
04088F 86 35 04    0836*  	dl ld_59_044
040892             0837*  
040892             0838*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
040892             0839*  
040892             0840*  ld_10_004:
040892 21 B0 35 04 0841*  	ld hl,F10_004
040896 22 F2 B6 04 0842*  	ld (cur_filename),hl
04089A 11 FC C2 04 0843*  	ld de,filedata
04089E 01 00 00 01 0844*  	ld bc,65536
0408A2 3E 01       0845*  	ld a,mos_load
0408A4 5B CF       0846*  	RST.LIL 08h
0408A6 21 00 01 00 0847*  	ld hl,BUF_10_004
0408AA 01 24 00 00 0848*  	ld bc,36
0408AE 11 23 00 00 0849*  	ld de,35
0408B2 DD 21 EC 04 0850*  	ld ix,1260
       00          
0408B7 CD 6D B8 04 0851*  	call vdu_load_img
0408BB C9          0852*  	ret
0408BC             0853*  
0408BC             0854*  ld_10_009:
0408BC 21 C4 35 04 0855*  	ld hl,F10_009
0408C0 22 F2 B6 04 0856*  	ld (cur_filename),hl
0408C4 11 FC C2 04 0857*  	ld de,filedata
0408C8 01 00 00 01 0858*  	ld bc,65536
0408CC 3E 01       0859*  	ld a,mos_load
0408CE 5B CF       0860*  	RST.LIL 08h
0408D0 21 01 01 00 0861*  	ld hl,BUF_10_009
0408D4 01 23 00 00 0862*  	ld bc,35
0408D8 11 2D 00 00 0863*  	ld de,45
0408DC DD 21 27 06 0864*  	ld ix,1575
       00          
0408E1 CD 6D B8 04 0865*  	call vdu_load_img
0408E5 C9          0866*  	ret
0408E6             0867*  
0408E6             0868*  ld_10_010:
0408E6 21 D8 35 04 0869*  	ld hl,F10_010
0408EA 22 F2 B6 04 0870*  	ld (cur_filename),hl
0408EE 11 FC C2 04 0871*  	ld de,filedata
0408F2 01 00 00 01 0872*  	ld bc,65536
0408F6 3E 01       0873*  	ld a,mos_load
0408F8 5B CF       0874*  	RST.LIL 08h
0408FA 21 02 01 00 0875*  	ld hl,BUF_10_010
0408FE 01 19 00 00 0876*  	ld bc,25
040902 11 2D 00 00 0877*  	ld de,45
040906 DD 21 65 04 0878*  	ld ix,1125
       00          
04090B CD 6D B8 04 0879*  	call vdu_load_img
04090F C9          0880*  	ret
040910             0881*  
040910             0882*  ld_10_011:
040910 21 EC 35 04 0883*  	ld hl,F10_011
040914 22 F2 B6 04 0884*  	ld (cur_filename),hl
040918 11 FC C2 04 0885*  	ld de,filedata
04091C 01 00 00 01 0886*  	ld bc,65536
040920 3E 01       0887*  	ld a,mos_load
040922 5B CF       0888*  	RST.LIL 08h
040924 21 03 01 00 0889*  	ld hl,BUF_10_011
040928 01 0F 00 00 0890*  	ld bc,15
04092C 11 2D 00 00 0891*  	ld de,45
040930 DD 21 A3 02 0892*  	ld ix,675
       00          
040935 CD 6D B8 04 0893*  	call vdu_load_img
040939 C9          0894*  	ret
04093A             0895*  
04093A             0896*  ld_10_012:
04093A 21 00 36 04 0897*  	ld hl,F10_012
04093E 22 F2 B6 04 0898*  	ld (cur_filename),hl
040942 11 FC C2 04 0899*  	ld de,filedata
040946 01 00 00 01 0900*  	ld bc,65536
04094A 3E 01       0901*  	ld a,mos_load
04094C 5B CF       0902*  	RST.LIL 08h
04094E 21 04 01 00 0903*  	ld hl,BUF_10_012
040952 01 05 00 00 0904*  	ld bc,5
040956 11 2D 00 00 0905*  	ld de,45
04095A DD 21 E1 00 0906*  	ld ix,225
       00          
04095F CD 6D B8 04 0907*  	call vdu_load_img
040963 C9          0908*  	ret
040964             0909*  
040964             0910*  ld_10_013:
040964 21 14 36 04 0911*  	ld hl,F10_013
040968 22 F2 B6 04 0912*  	ld (cur_filename),hl
04096C 11 FC C2 04 0913*  	ld de,filedata
040970 01 00 00 01 0914*  	ld bc,65536
040974 3E 01       0915*  	ld a,mos_load
040976 5B CF       0916*  	RST.LIL 08h
040978 21 05 01 00 0917*  	ld hl,BUF_10_013
04097C 01 05 00 00 0918*  	ld bc,5
040980 11 2B 00 00 0919*  	ld de,43
040984 DD 21 D7 00 0920*  	ld ix,215
       00          
040989 CD 6D B8 04 0921*  	call vdu_load_img
04098D C9          0922*  	ret
04098E             0923*  
04098E             0924*  ld_10_014:
04098E 21 28 36 04 0925*  	ld hl,F10_014
040992 22 F2 B6 04 0926*  	ld (cur_filename),hl
040996 11 FC C2 04 0927*  	ld de,filedata
04099A 01 00 00 01 0928*  	ld bc,65536
04099E 3E 01       0929*  	ld a,mos_load
0409A0 5B CF       0930*  	RST.LIL 08h
0409A2 21 06 01 00 0931*  	ld hl,BUF_10_014
0409A6 01 0F 00 00 0932*  	ld bc,15
0409AA 11 2D 00 00 0933*  	ld de,45
0409AE DD 21 A3 02 0934*  	ld ix,675
       00          
0409B3 CD 6D B8 04 0935*  	call vdu_load_img
0409B7 C9          0936*  	ret
0409B8             0937*  
0409B8             0938*  ld_10_015:
0409B8 21 3C 36 04 0939*  	ld hl,F10_015
0409BC 22 F2 B6 04 0940*  	ld (cur_filename),hl
0409C0 11 FC C2 04 0941*  	ld de,filedata
0409C4 01 00 00 01 0942*  	ld bc,65536
0409C8 3E 01       0943*  	ld a,mos_load
0409CA 5B CF       0944*  	RST.LIL 08h
0409CC 21 07 01 00 0945*  	ld hl,BUF_10_015
0409D0 01 19 00 00 0946*  	ld bc,25
0409D4 11 2D 00 00 0947*  	ld de,45
0409D8 DD 21 65 04 0948*  	ld ix,1125
       00          
0409DD CD 6D B8 04 0949*  	call vdu_load_img
0409E1 C9          0950*  	ret
0409E2             0951*  
0409E2             0952*  ld_10_016:
0409E2 21 50 36 04 0953*  	ld hl,F10_016
0409E6 22 F2 B6 04 0954*  	ld (cur_filename),hl
0409EA 11 FC C2 04 0955*  	ld de,filedata
0409EE 01 00 00 01 0956*  	ld bc,65536
0409F2 3E 01       0957*  	ld a,mos_load
0409F4 5B CF       0958*  	RST.LIL 08h
0409F6 21 08 01 00 0959*  	ld hl,BUF_10_016
0409FA 01 23 00 00 0960*  	ld bc,35
0409FE 11 2D 00 00 0961*  	ld de,45
040A02 DD 21 27 06 0962*  	ld ix,1575
       00          
040A07 CD 6D B8 04 0963*  	call vdu_load_img
040A0B C9          0964*  	ret
040A0C             0965*  
040A0C             0966*  ld_10_020:
040A0C 21 64 36 04 0967*  	ld hl,F10_020
040A10 22 F2 B6 04 0968*  	ld (cur_filename),hl
040A14 11 FC C2 04 0969*  	ld de,filedata
040A18 01 00 00 01 0970*  	ld bc,65536
040A1C 3E 01       0971*  	ld a,mos_load
040A1E 5B CF       0972*  	RST.LIL 08h
040A20 21 09 01 00 0973*  	ld hl,BUF_10_020
040A24 01 2E 00 00 0974*  	ld bc,46
040A28 11 2D 00 00 0975*  	ld de,45
040A2C DD 21 16 08 0976*  	ld ix,2070
       00          
040A31 CD 6D B8 04 0977*  	call vdu_load_img
040A35 C9          0978*  	ret
040A36             0979*  
040A36             0980*  ld_10_024:
040A36 21 78 36 04 0981*  	ld hl,F10_024
040A3A 22 F2 B6 04 0982*  	ld (cur_filename),hl
040A3E 11 FC C2 04 0983*  	ld de,filedata
040A42 01 00 00 01 0984*  	ld bc,65536
040A46 3E 01       0985*  	ld a,mos_load
040A48 5B CF       0986*  	RST.LIL 08h
040A4A 21 0A 01 00 0987*  	ld hl,BUF_10_024
040A4E 01 2E 00 00 0988*  	ld bc,46
040A52 11 40 00 00 0989*  	ld de,64
040A56 DD 21 80 0B 0990*  	ld ix,2944
       00          
040A5B CD 6D B8 04 0991*  	call vdu_load_img
040A5F C9          0992*  	ret
040A60             0993*  
040A60             0994*  ld_10_025:
040A60 21 8C 36 04 0995*  	ld hl,F10_025
040A64 22 F2 B6 04 0996*  	ld (cur_filename),hl
040A68 11 FC C2 04 0997*  	ld de,filedata
040A6C 01 00 00 01 0998*  	ld bc,65536
040A70 3E 01       0999*  	ld a,mos_load
040A72 5B CF       1000*  	RST.LIL 08h
040A74 21 0B 01 00 1001*  	ld hl,BUF_10_025
040A78 01 1C 00 00 1002*  	ld bc,28
040A7C 11 40 00 00 1003*  	ld de,64
040A80 DD 21 00 07 1004*  	ld ix,1792
       00          
040A85 CD 6D B8 04 1005*  	call vdu_load_img
040A89 C9          1006*  	ret
040A8A             1007*  
040A8A             1008*  ld_10_026:
040A8A 21 A0 36 04 1009*  	ld hl,F10_026
040A8E 22 F2 B6 04 1010*  	ld (cur_filename),hl
040A92 11 FC C2 04 1011*  	ld de,filedata
040A96 01 00 00 01 1012*  	ld bc,65536
040A9A 3E 01       1013*  	ld a,mos_load
040A9C 5B CF       1014*  	RST.LIL 08h
040A9E 21 0C 01 00 1015*  	ld hl,BUF_10_026
040AA2 01 09 00 00 1016*  	ld bc,9
040AA6 11 40 00 00 1017*  	ld de,64
040AAA DD 21 40 02 1018*  	ld ix,576
       00          
040AAF CD 6D B8 04 1019*  	call vdu_load_img
040AB3 C9          1020*  	ret
040AB4             1021*  
040AB4             1022*  ld_10_027:
040AB4 21 B4 36 04 1023*  	ld hl,F10_027
040AB8 22 F2 B6 04 1024*  	ld (cur_filename),hl
040ABC 11 FC C2 04 1025*  	ld de,filedata
040AC0 01 00 00 01 1026*  	ld bc,65536
040AC4 3E 01       1027*  	ld a,mos_load
040AC6 5B CF       1028*  	RST.LIL 08h
040AC8 21 0D 01 00 1029*  	ld hl,BUF_10_027
040ACC 01 0A 00 00 1030*  	ld bc,10
040AD0 11 3E 00 00 1031*  	ld de,62
040AD4 DD 21 6C 02 1032*  	ld ix,620
       00          
040AD9 CD 6D B8 04 1033*  	call vdu_load_img
040ADD C9          1034*  	ret
040ADE             1035*  
040ADE             1036*  ld_10_028:
040ADE 21 C8 36 04 1037*  	ld hl,F10_028
040AE2 22 F2 B6 04 1038*  	ld (cur_filename),hl
040AE6 11 FC C2 04 1039*  	ld de,filedata
040AEA 01 00 00 01 1040*  	ld bc,65536
040AEE 3E 01       1041*  	ld a,mos_load
040AF0 5B CF       1042*  	RST.LIL 08h
040AF2 21 0E 01 00 1043*  	ld hl,BUF_10_028
040AF6 01 1C 00 00 1044*  	ld bc,28
040AFA 11 40 00 00 1045*  	ld de,64
040AFE DD 21 00 07 1046*  	ld ix,1792
       00          
040B03 CD 6D B8 04 1047*  	call vdu_load_img
040B07 C9          1048*  	ret
040B08             1049*  
040B08             1050*  ld_10_029:
040B08 21 DC 36 04 1051*  	ld hl,F10_029
040B0C 22 F2 B6 04 1052*  	ld (cur_filename),hl
040B10 11 FC C2 04 1053*  	ld de,filedata
040B14 01 00 00 01 1054*  	ld bc,65536
040B18 3E 01       1055*  	ld a,mos_load
040B1A 5B CF       1056*  	RST.LIL 08h
040B1C 21 0F 01 00 1057*  	ld hl,BUF_10_029
040B20 01 2F 00 00 1058*  	ld bc,47
040B24 11 40 00 00 1059*  	ld de,64
040B28 DD 21 C0 0B 1060*  	ld ix,3008
       00          
040B2D CD 6D B8 04 1061*  	call vdu_load_img
040B31 C9          1062*  	ret
040B32             1063*  
040B32             1064*  ld_10_032:
040B32 21 F0 36 04 1065*  	ld hl,F10_032
040B36 22 F2 B6 04 1066*  	ld (cur_filename),hl
040B3A 11 FC C2 04 1067*  	ld de,filedata
040B3E 01 00 00 01 1068*  	ld bc,65536
040B42 3E 01       1069*  	ld a,mos_load
040B44 5B CF       1070*  	RST.LIL 08h
040B46 21 10 01 00 1071*  	ld hl,BUF_10_032
040B4A 01 41 00 00 1072*  	ld bc,65
040B4E 11 40 00 00 1073*  	ld de,64
040B52 DD 21 40 10 1074*  	ld ix,4160
       00          
040B57 CD 6D B8 04 1075*  	call vdu_load_img
040B5B C9          1076*  	ret
040B5C             1077*  
040B5C             1078*  ld_10_035:
040B5C 21 04 37 04 1079*  	ld hl,F10_035
040B60 22 F2 B6 04 1080*  	ld (cur_filename),hl
040B64 11 FC C2 04 1081*  	ld de,filedata
040B68 01 00 00 01 1082*  	ld bc,65536
040B6C 3E 01       1083*  	ld a,mos_load
040B6E 5B CF       1084*  	RST.LIL 08h
040B70 21 11 01 00 1085*  	ld hl,BUF_10_035
040B74 01 3F 00 00 1086*  	ld bc,63
040B78 11 6B 00 00 1087*  	ld de,107
040B7C DD 21 55 1A 1088*  	ld ix,6741
       00          
040B81 CD 6D B8 04 1089*  	call vdu_load_img
040B85 C9          1090*  	ret
040B86             1091*  
040B86             1092*  ld_10_036:
040B86 21 18 37 04 1093*  	ld hl,F10_036
040B8A 22 F2 B6 04 1094*  	ld (cur_filename),hl
040B8E 11 FC C2 04 1095*  	ld de,filedata
040B92 01 00 00 01 1096*  	ld bc,65536
040B96 3E 01       1097*  	ld a,mos_load
040B98 5B CF       1098*  	RST.LIL 08h
040B9A 21 12 01 00 1099*  	ld hl,BUF_10_036
040B9E 01 16 00 00 1100*  	ld bc,22
040BA2 11 6B 00 00 1101*  	ld de,107
040BA6 DD 21 32 09 1102*  	ld ix,2354
       00          
040BAB CD 6D B8 04 1103*  	call vdu_load_img
040BAF C9          1104*  	ret
040BB0             1105*  
040BB0             1106*  ld_10_037:
040BB0 21 2C 37 04 1107*  	ld hl,F10_037
040BB4 22 F2 B6 04 1108*  	ld (cur_filename),hl
040BB8 11 FC C2 04 1109*  	ld de,filedata
040BBC 01 00 00 01 1110*  	ld bc,65536
040BC0 3E 01       1111*  	ld a,mos_load
040BC2 5B CF       1112*  	RST.LIL 08h
040BC4 21 13 01 00 1113*  	ld hl,BUF_10_037
040BC8 01 15 00 00 1114*  	ld bc,21
040BCC 11 69 00 00 1115*  	ld de,105
040BD0 DD 21 9D 08 1116*  	ld ix,2205
       00          
040BD5 CD 6D B8 04 1117*  	call vdu_load_img
040BD9 C9          1118*  	ret
040BDA             1119*  
040BDA             1120*  ld_10_038:
040BDA 21 40 37 04 1121*  	ld hl,F10_038
040BDE 22 F2 B6 04 1122*  	ld (cur_filename),hl
040BE2 11 FC C2 04 1123*  	ld de,filedata
040BE6 01 00 00 01 1124*  	ld bc,65536
040BEA 3E 01       1125*  	ld a,mos_load
040BEC 5B CF       1126*  	RST.LIL 08h
040BEE 21 14 01 00 1127*  	ld hl,BUF_10_038
040BF2 01 3F 00 00 1128*  	ld bc,63
040BF6 11 6B 00 00 1129*  	ld de,107
040BFA DD 21 55 1A 1130*  	ld ix,6741
       00          
040BFF CD 6D B8 04 1131*  	call vdu_load_img
040C03 C9          1132*  	ret
040C04             1133*  
040C04             1134*  ld_10_040:
040C04 21 54 37 04 1135*  	ld hl,F10_040
040C08 22 F2 B6 04 1136*  	ld (cur_filename),hl
040C0C 11 FC C2 04 1137*  	ld de,filedata
040C10 01 00 00 01 1138*  	ld bc,65536
040C14 3E 01       1139*  	ld a,mos_load
040C16 5B CF       1140*  	RST.LIL 08h
040C18 21 15 01 00 1141*  	ld hl,BUF_10_040
040C1C 01 6C 00 00 1142*  	ld bc,108
040C20 11 6B 00 00 1143*  	ld de,107
040C24 DD 21 24 2D 1144*  	ld ix,11556
       00          
040C29 CD 6D B8 04 1145*  	call vdu_load_img
040C2D C9          1146*  	ret
040C2E             1147*  
040C2E             1148*  ld_10_042:
040C2E 21 68 37 04 1149*  	ld hl,F10_042
040C32 22 F2 B6 04 1150*  	ld (cur_filename),hl
040C36 11 FC C2 04 1151*  	ld de,filedata
040C3A 01 00 00 01 1152*  	ld bc,65536
040C3E 3E 01       1153*  	ld a,mos_load
040C40 5B CF       1154*  	RST.LIL 08h
040C42 21 16 01 00 1155*  	ld hl,BUF_10_042
040C46 01 6A 00 00 1156*  	ld bc,106
040C4A 11 A0 00 00 1157*  	ld de,160
040C4E DD 21 40 42 1158*  	ld ix,16960
       00          
040C53 CD 6D B8 04 1159*  	call vdu_load_img
040C57 C9          1160*  	ret
040C58             1161*  
040C58             1162*  ld_10_043:
040C58 21 7C 37 04 1163*  	ld hl,F10_043
040C5C 22 F2 B6 04 1164*  	ld (cur_filename),hl
040C60 11 FC C2 04 1165*  	ld de,filedata
040C64 01 00 00 01 1166*  	ld bc,65536
040C68 3E 01       1167*  	ld a,mos_load
040C6A 5B CF       1168*  	RST.LIL 08h
040C6C 21 17 01 00 1169*  	ld hl,BUF_10_043
040C70 01 6B 00 00 1170*  	ld bc,107
040C74 11 A0 00 00 1171*  	ld de,160
040C78 DD 21 E0 42 1172*  	ld ix,17120
       00          
040C7D CD 6D B8 04 1173*  	call vdu_load_img
040C81 C9          1174*  	ret
040C82             1175*  
040C82             1176*  ld_10_044:
040C82 21 90 37 04 1177*  	ld hl,F10_044
040C86 22 F2 B6 04 1178*  	ld (cur_filename),hl
040C8A 11 FC C2 04 1179*  	ld de,filedata
040C8E 01 00 00 01 1180*  	ld bc,65536
040C92 3E 01       1181*  	ld a,mos_load
040C94 5B CF       1182*  	RST.LIL 08h
040C96 21 18 01 00 1183*  	ld hl,BUF_10_044
040C9A 01 40 01 00 1184*  	ld bc,320
040C9E 11 A0 00 00 1185*  	ld de,160
040CA2 DD 21 00 C8 1186*  	ld ix,51200
       00          
040CA7 CD 6D B8 04 1187*  	call vdu_load_img
040CAB C9          1188*  	ret
040CAC             1189*  
040CAC             1190*  ld_11_004:
040CAC 21 A4 37 04 1191*  	ld hl,F11_004
040CB0 22 F2 B6 04 1192*  	ld (cur_filename),hl
040CB4 11 FC C2 04 1193*  	ld de,filedata
040CB8 01 00 00 01 1194*  	ld bc,65536
040CBC 3E 01       1195*  	ld a,mos_load
040CBE 5B CF       1196*  	RST.LIL 08h
040CC0 21 19 01 00 1197*  	ld hl,BUF_11_004
040CC4 01 24 00 00 1198*  	ld bc,36
040CC8 11 23 00 00 1199*  	ld de,35
040CCC DD 21 EC 04 1200*  	ld ix,1260
       00          
040CD1 CD 6D B8 04 1201*  	call vdu_load_img
040CD5 C9          1202*  	ret
040CD6             1203*  
040CD6             1204*  ld_11_009:
040CD6 21 B8 37 04 1205*  	ld hl,F11_009
040CDA 22 F2 B6 04 1206*  	ld (cur_filename),hl
040CDE 11 FC C2 04 1207*  	ld de,filedata
040CE2 01 00 00 01 1208*  	ld bc,65536
040CE6 3E 01       1209*  	ld a,mos_load
040CE8 5B CF       1210*  	RST.LIL 08h
040CEA 21 1A 01 00 1211*  	ld hl,BUF_11_009
040CEE 01 23 00 00 1212*  	ld bc,35
040CF2 11 2D 00 00 1213*  	ld de,45
040CF6 DD 21 27 06 1214*  	ld ix,1575
       00          
040CFB CD 6D B8 04 1215*  	call vdu_load_img
040CFF C9          1216*  	ret
040D00             1217*  
040D00             1218*  ld_11_010:
040D00 21 CC 37 04 1219*  	ld hl,F11_010
040D04 22 F2 B6 04 1220*  	ld (cur_filename),hl
040D08 11 FC C2 04 1221*  	ld de,filedata
040D0C 01 00 00 01 1222*  	ld bc,65536
040D10 3E 01       1223*  	ld a,mos_load
040D12 5B CF       1224*  	RST.LIL 08h
040D14 21 1B 01 00 1225*  	ld hl,BUF_11_010
040D18 01 19 00 00 1226*  	ld bc,25
040D1C 11 2D 00 00 1227*  	ld de,45
040D20 DD 21 65 04 1228*  	ld ix,1125
       00          
040D25 CD 6D B8 04 1229*  	call vdu_load_img
040D29 C9          1230*  	ret
040D2A             1231*  
040D2A             1232*  ld_11_011:
040D2A 21 E0 37 04 1233*  	ld hl,F11_011
040D2E 22 F2 B6 04 1234*  	ld (cur_filename),hl
040D32 11 FC C2 04 1235*  	ld de,filedata
040D36 01 00 00 01 1236*  	ld bc,65536
040D3A 3E 01       1237*  	ld a,mos_load
040D3C 5B CF       1238*  	RST.LIL 08h
040D3E 21 1C 01 00 1239*  	ld hl,BUF_11_011
040D42 01 0F 00 00 1240*  	ld bc,15
040D46 11 2D 00 00 1241*  	ld de,45
040D4A DD 21 A3 02 1242*  	ld ix,675
       00          
040D4F CD 6D B8 04 1243*  	call vdu_load_img
040D53 C9          1244*  	ret
040D54             1245*  
040D54             1246*  ld_11_012:
040D54 21 F4 37 04 1247*  	ld hl,F11_012
040D58 22 F2 B6 04 1248*  	ld (cur_filename),hl
040D5C 11 FC C2 04 1249*  	ld de,filedata
040D60 01 00 00 01 1250*  	ld bc,65536
040D64 3E 01       1251*  	ld a,mos_load
040D66 5B CF       1252*  	RST.LIL 08h
040D68 21 1D 01 00 1253*  	ld hl,BUF_11_012
040D6C 01 05 00 00 1254*  	ld bc,5
040D70 11 2D 00 00 1255*  	ld de,45
040D74 DD 21 E1 00 1256*  	ld ix,225
       00          
040D79 CD 6D B8 04 1257*  	call vdu_load_img
040D7D C9          1258*  	ret
040D7E             1259*  
040D7E             1260*  ld_11_013:
040D7E 21 08 38 04 1261*  	ld hl,F11_013
040D82 22 F2 B6 04 1262*  	ld (cur_filename),hl
040D86 11 FC C2 04 1263*  	ld de,filedata
040D8A 01 00 00 01 1264*  	ld bc,65536
040D8E 3E 01       1265*  	ld a,mos_load
040D90 5B CF       1266*  	RST.LIL 08h
040D92 21 1E 01 00 1267*  	ld hl,BUF_11_013
040D96 01 05 00 00 1268*  	ld bc,5
040D9A 11 2B 00 00 1269*  	ld de,43
040D9E DD 21 D7 00 1270*  	ld ix,215
       00          
040DA3 CD 6D B8 04 1271*  	call vdu_load_img
040DA7 C9          1272*  	ret
040DA8             1273*  
040DA8             1274*  ld_11_014:
040DA8 21 1C 38 04 1275*  	ld hl,F11_014
040DAC 22 F2 B6 04 1276*  	ld (cur_filename),hl
040DB0 11 FC C2 04 1277*  	ld de,filedata
040DB4 01 00 00 01 1278*  	ld bc,65536
040DB8 3E 01       1279*  	ld a,mos_load
040DBA 5B CF       1280*  	RST.LIL 08h
040DBC 21 1F 01 00 1281*  	ld hl,BUF_11_014
040DC0 01 0F 00 00 1282*  	ld bc,15
040DC4 11 2D 00 00 1283*  	ld de,45
040DC8 DD 21 A3 02 1284*  	ld ix,675
       00          
040DCD CD 6D B8 04 1285*  	call vdu_load_img
040DD1 C9          1286*  	ret
040DD2             1287*  
040DD2             1288*  ld_11_015:
040DD2 21 30 38 04 1289*  	ld hl,F11_015
040DD6 22 F2 B6 04 1290*  	ld (cur_filename),hl
040DDA 11 FC C2 04 1291*  	ld de,filedata
040DDE 01 00 00 01 1292*  	ld bc,65536
040DE2 3E 01       1293*  	ld a,mos_load
040DE4 5B CF       1294*  	RST.LIL 08h
040DE6 21 20 01 00 1295*  	ld hl,BUF_11_015
040DEA 01 19 00 00 1296*  	ld bc,25
040DEE 11 2D 00 00 1297*  	ld de,45
040DF2 DD 21 65 04 1298*  	ld ix,1125
       00          
040DF7 CD 6D B8 04 1299*  	call vdu_load_img
040DFB C9          1300*  	ret
040DFC             1301*  
040DFC             1302*  ld_11_016:
040DFC 21 44 38 04 1303*  	ld hl,F11_016
040E00 22 F2 B6 04 1304*  	ld (cur_filename),hl
040E04 11 FC C2 04 1305*  	ld de,filedata
040E08 01 00 00 01 1306*  	ld bc,65536
040E0C 3E 01       1307*  	ld a,mos_load
040E0E 5B CF       1308*  	RST.LIL 08h
040E10 21 21 01 00 1309*  	ld hl,BUF_11_016
040E14 01 23 00 00 1310*  	ld bc,35
040E18 11 2D 00 00 1311*  	ld de,45
040E1C DD 21 27 06 1312*  	ld ix,1575
       00          
040E21 CD 6D B8 04 1313*  	call vdu_load_img
040E25 C9          1314*  	ret
040E26             1315*  
040E26             1316*  ld_11_020:
040E26 21 58 38 04 1317*  	ld hl,F11_020
040E2A 22 F2 B6 04 1318*  	ld (cur_filename),hl
040E2E 11 FC C2 04 1319*  	ld de,filedata
040E32 01 00 00 01 1320*  	ld bc,65536
040E36 3E 01       1321*  	ld a,mos_load
040E38 5B CF       1322*  	RST.LIL 08h
040E3A 21 22 01 00 1323*  	ld hl,BUF_11_020
040E3E 01 2E 00 00 1324*  	ld bc,46
040E42 11 2D 00 00 1325*  	ld de,45
040E46 DD 21 16 08 1326*  	ld ix,2070
       00          
040E4B CD 6D B8 04 1327*  	call vdu_load_img
040E4F C9          1328*  	ret
040E50             1329*  
040E50             1330*  ld_11_024:
040E50 21 6C 38 04 1331*  	ld hl,F11_024
040E54 22 F2 B6 04 1332*  	ld (cur_filename),hl
040E58 11 FC C2 04 1333*  	ld de,filedata
040E5C 01 00 00 01 1334*  	ld bc,65536
040E60 3E 01       1335*  	ld a,mos_load
040E62 5B CF       1336*  	RST.LIL 08h
040E64 21 23 01 00 1337*  	ld hl,BUF_11_024
040E68 01 2E 00 00 1338*  	ld bc,46
040E6C 11 40 00 00 1339*  	ld de,64
040E70 DD 21 80 0B 1340*  	ld ix,2944
       00          
040E75 CD 6D B8 04 1341*  	call vdu_load_img
040E79 C9          1342*  	ret
040E7A             1343*  
040E7A             1344*  ld_11_025:
040E7A 21 80 38 04 1345*  	ld hl,F11_025
040E7E 22 F2 B6 04 1346*  	ld (cur_filename),hl
040E82 11 FC C2 04 1347*  	ld de,filedata
040E86 01 00 00 01 1348*  	ld bc,65536
040E8A 3E 01       1349*  	ld a,mos_load
040E8C 5B CF       1350*  	RST.LIL 08h
040E8E 21 24 01 00 1351*  	ld hl,BUF_11_025
040E92 01 1C 00 00 1352*  	ld bc,28
040E96 11 40 00 00 1353*  	ld de,64
040E9A DD 21 00 07 1354*  	ld ix,1792
       00          
040E9F CD 6D B8 04 1355*  	call vdu_load_img
040EA3 C9          1356*  	ret
040EA4             1357*  
040EA4             1358*  ld_11_026:
040EA4 21 94 38 04 1359*  	ld hl,F11_026
040EA8 22 F2 B6 04 1360*  	ld (cur_filename),hl
040EAC 11 FC C2 04 1361*  	ld de,filedata
040EB0 01 00 00 01 1362*  	ld bc,65536
040EB4 3E 01       1363*  	ld a,mos_load
040EB6 5B CF       1364*  	RST.LIL 08h
040EB8 21 25 01 00 1365*  	ld hl,BUF_11_026
040EBC 01 09 00 00 1366*  	ld bc,9
040EC0 11 40 00 00 1367*  	ld de,64
040EC4 DD 21 40 02 1368*  	ld ix,576
       00          
040EC9 CD 6D B8 04 1369*  	call vdu_load_img
040ECD C9          1370*  	ret
040ECE             1371*  
040ECE             1372*  ld_11_027:
040ECE 21 A8 38 04 1373*  	ld hl,F11_027
040ED2 22 F2 B6 04 1374*  	ld (cur_filename),hl
040ED6 11 FC C2 04 1375*  	ld de,filedata
040EDA 01 00 00 01 1376*  	ld bc,65536
040EDE 3E 01       1377*  	ld a,mos_load
040EE0 5B CF       1378*  	RST.LIL 08h
040EE2 21 26 01 00 1379*  	ld hl,BUF_11_027
040EE6 01 0A 00 00 1380*  	ld bc,10
040EEA 11 3E 00 00 1381*  	ld de,62
040EEE DD 21 6C 02 1382*  	ld ix,620
       00          
040EF3 CD 6D B8 04 1383*  	call vdu_load_img
040EF7 C9          1384*  	ret
040EF8             1385*  
040EF8             1386*  ld_11_028:
040EF8 21 BC 38 04 1387*  	ld hl,F11_028
040EFC 22 F2 B6 04 1388*  	ld (cur_filename),hl
040F00 11 FC C2 04 1389*  	ld de,filedata
040F04 01 00 00 01 1390*  	ld bc,65536
040F08 3E 01       1391*  	ld a,mos_load
040F0A 5B CF       1392*  	RST.LIL 08h
040F0C 21 27 01 00 1393*  	ld hl,BUF_11_028
040F10 01 1C 00 00 1394*  	ld bc,28
040F14 11 40 00 00 1395*  	ld de,64
040F18 DD 21 00 07 1396*  	ld ix,1792
       00          
040F1D CD 6D B8 04 1397*  	call vdu_load_img
040F21 C9          1398*  	ret
040F22             1399*  
040F22             1400*  ld_11_029:
040F22 21 D0 38 04 1401*  	ld hl,F11_029
040F26 22 F2 B6 04 1402*  	ld (cur_filename),hl
040F2A 11 FC C2 04 1403*  	ld de,filedata
040F2E 01 00 00 01 1404*  	ld bc,65536
040F32 3E 01       1405*  	ld a,mos_load
040F34 5B CF       1406*  	RST.LIL 08h
040F36 21 28 01 00 1407*  	ld hl,BUF_11_029
040F3A 01 2F 00 00 1408*  	ld bc,47
040F3E 11 40 00 00 1409*  	ld de,64
040F42 DD 21 C0 0B 1410*  	ld ix,3008
       00          
040F47 CD 6D B8 04 1411*  	call vdu_load_img
040F4B C9          1412*  	ret
040F4C             1413*  
040F4C             1414*  ld_11_032:
040F4C 21 E4 38 04 1415*  	ld hl,F11_032
040F50 22 F2 B6 04 1416*  	ld (cur_filename),hl
040F54 11 FC C2 04 1417*  	ld de,filedata
040F58 01 00 00 01 1418*  	ld bc,65536
040F5C 3E 01       1419*  	ld a,mos_load
040F5E 5B CF       1420*  	RST.LIL 08h
040F60 21 29 01 00 1421*  	ld hl,BUF_11_032
040F64 01 41 00 00 1422*  	ld bc,65
040F68 11 40 00 00 1423*  	ld de,64
040F6C DD 21 40 10 1424*  	ld ix,4160
       00          
040F71 CD 6D B8 04 1425*  	call vdu_load_img
040F75 C9          1426*  	ret
040F76             1427*  
040F76             1428*  ld_11_035:
040F76 21 F8 38 04 1429*  	ld hl,F11_035
040F7A 22 F2 B6 04 1430*  	ld (cur_filename),hl
040F7E 11 FC C2 04 1431*  	ld de,filedata
040F82 01 00 00 01 1432*  	ld bc,65536
040F86 3E 01       1433*  	ld a,mos_load
040F88 5B CF       1434*  	RST.LIL 08h
040F8A 21 2A 01 00 1435*  	ld hl,BUF_11_035
040F8E 01 3F 00 00 1436*  	ld bc,63
040F92 11 6B 00 00 1437*  	ld de,107
040F96 DD 21 55 1A 1438*  	ld ix,6741
       00          
040F9B CD 6D B8 04 1439*  	call vdu_load_img
040F9F C9          1440*  	ret
040FA0             1441*  
040FA0             1442*  ld_11_036:
040FA0 21 0C 39 04 1443*  	ld hl,F11_036
040FA4 22 F2 B6 04 1444*  	ld (cur_filename),hl
040FA8 11 FC C2 04 1445*  	ld de,filedata
040FAC 01 00 00 01 1446*  	ld bc,65536
040FB0 3E 01       1447*  	ld a,mos_load
040FB2 5B CF       1448*  	RST.LIL 08h
040FB4 21 2B 01 00 1449*  	ld hl,BUF_11_036
040FB8 01 16 00 00 1450*  	ld bc,22
040FBC 11 6B 00 00 1451*  	ld de,107
040FC0 DD 21 32 09 1452*  	ld ix,2354
       00          
040FC5 CD 6D B8 04 1453*  	call vdu_load_img
040FC9 C9          1454*  	ret
040FCA             1455*  
040FCA             1456*  ld_11_037:
040FCA 21 20 39 04 1457*  	ld hl,F11_037
040FCE 22 F2 B6 04 1458*  	ld (cur_filename),hl
040FD2 11 FC C2 04 1459*  	ld de,filedata
040FD6 01 00 00 01 1460*  	ld bc,65536
040FDA 3E 01       1461*  	ld a,mos_load
040FDC 5B CF       1462*  	RST.LIL 08h
040FDE 21 2C 01 00 1463*  	ld hl,BUF_11_037
040FE2 01 15 00 00 1464*  	ld bc,21
040FE6 11 69 00 00 1465*  	ld de,105
040FEA DD 21 9D 08 1466*  	ld ix,2205
       00          
040FEF CD 6D B8 04 1467*  	call vdu_load_img
040FF3 C9          1468*  	ret
040FF4             1469*  
040FF4             1470*  ld_11_038:
040FF4 21 34 39 04 1471*  	ld hl,F11_038
040FF8 22 F2 B6 04 1472*  	ld (cur_filename),hl
040FFC 11 FC C2 04 1473*  	ld de,filedata
041000 01 00 00 01 1474*  	ld bc,65536
041004 3E 01       1475*  	ld a,mos_load
041006 5B CF       1476*  	RST.LIL 08h
041008 21 2D 01 00 1477*  	ld hl,BUF_11_038
04100C 01 3F 00 00 1478*  	ld bc,63
041010 11 6B 00 00 1479*  	ld de,107
041014 DD 21 55 1A 1480*  	ld ix,6741
       00          
041019 CD 6D B8 04 1481*  	call vdu_load_img
04101D C9          1482*  	ret
04101E             1483*  
04101E             1484*  ld_11_040:
04101E 21 48 39 04 1485*  	ld hl,F11_040
041022 22 F2 B6 04 1486*  	ld (cur_filename),hl
041026 11 FC C2 04 1487*  	ld de,filedata
04102A 01 00 00 01 1488*  	ld bc,65536
04102E 3E 01       1489*  	ld a,mos_load
041030 5B CF       1490*  	RST.LIL 08h
041032 21 2E 01 00 1491*  	ld hl,BUF_11_040
041036 01 6C 00 00 1492*  	ld bc,108
04103A 11 6B 00 00 1493*  	ld de,107
04103E DD 21 24 2D 1494*  	ld ix,11556
       00          
041043 CD 6D B8 04 1495*  	call vdu_load_img
041047 C9          1496*  	ret
041048             1497*  
041048             1498*  ld_11_042:
041048 21 5C 39 04 1499*  	ld hl,F11_042
04104C 22 F2 B6 04 1500*  	ld (cur_filename),hl
041050 11 FC C2 04 1501*  	ld de,filedata
041054 01 00 00 01 1502*  	ld bc,65536
041058 3E 01       1503*  	ld a,mos_load
04105A 5B CF       1504*  	RST.LIL 08h
04105C 21 2F 01 00 1505*  	ld hl,BUF_11_042
041060 01 6A 00 00 1506*  	ld bc,106
041064 11 A0 00 00 1507*  	ld de,160
041068 DD 21 40 42 1508*  	ld ix,16960
       00          
04106D CD 6D B8 04 1509*  	call vdu_load_img
041071 C9          1510*  	ret
041072             1511*  
041072             1512*  ld_11_043:
041072 21 70 39 04 1513*  	ld hl,F11_043
041076 22 F2 B6 04 1514*  	ld (cur_filename),hl
04107A 11 FC C2 04 1515*  	ld de,filedata
04107E 01 00 00 01 1516*  	ld bc,65536
041082 3E 01       1517*  	ld a,mos_load
041084 5B CF       1518*  	RST.LIL 08h
041086 21 30 01 00 1519*  	ld hl,BUF_11_043
04108A 01 6B 00 00 1520*  	ld bc,107
04108E 11 A0 00 00 1521*  	ld de,160
041092 DD 21 E0 42 1522*  	ld ix,17120
       00          
041097 CD 6D B8 04 1523*  	call vdu_load_img
04109B C9          1524*  	ret
04109C             1525*  
04109C             1526*  ld_11_044:
04109C 21 84 39 04 1527*  	ld hl,F11_044
0410A0 22 F2 B6 04 1528*  	ld (cur_filename),hl
0410A4 11 FC C2 04 1529*  	ld de,filedata
0410A8 01 00 00 01 1530*  	ld bc,65536
0410AC 3E 01       1531*  	ld a,mos_load
0410AE 5B CF       1532*  	RST.LIL 08h
0410B0 21 31 01 00 1533*  	ld hl,BUF_11_044
0410B4 01 40 01 00 1534*  	ld bc,320
0410B8 11 A0 00 00 1535*  	ld de,160
0410BC DD 21 00 C8 1536*  	ld ix,51200
       00          
0410C1 CD 6D B8 04 1537*  	call vdu_load_img
0410C5 C9          1538*  	ret
0410C6             1539*  
0410C6             1540*  ld_12_004:
0410C6 21 98 39 04 1541*  	ld hl,F12_004
0410CA 22 F2 B6 04 1542*  	ld (cur_filename),hl
0410CE 11 FC C2 04 1543*  	ld de,filedata
0410D2 01 00 00 01 1544*  	ld bc,65536
0410D6 3E 01       1545*  	ld a,mos_load
0410D8 5B CF       1546*  	RST.LIL 08h
0410DA 21 32 01 00 1547*  	ld hl,BUF_12_004
0410DE 01 24 00 00 1548*  	ld bc,36
0410E2 11 23 00 00 1549*  	ld de,35
0410E6 DD 21 EC 04 1550*  	ld ix,1260
       00          
0410EB CD 6D B8 04 1551*  	call vdu_load_img
0410EF C9          1552*  	ret
0410F0             1553*  
0410F0             1554*  ld_12_009:
0410F0 21 AC 39 04 1555*  	ld hl,F12_009
0410F4 22 F2 B6 04 1556*  	ld (cur_filename),hl
0410F8 11 FC C2 04 1557*  	ld de,filedata
0410FC 01 00 00 01 1558*  	ld bc,65536
041100 3E 01       1559*  	ld a,mos_load
041102 5B CF       1560*  	RST.LIL 08h
041104 21 33 01 00 1561*  	ld hl,BUF_12_009
041108 01 23 00 00 1562*  	ld bc,35
04110C 11 2D 00 00 1563*  	ld de,45
041110 DD 21 27 06 1564*  	ld ix,1575
       00          
041115 CD 6D B8 04 1565*  	call vdu_load_img
041119 C9          1566*  	ret
04111A             1567*  
04111A             1568*  ld_12_010:
04111A 21 C0 39 04 1569*  	ld hl,F12_010
04111E 22 F2 B6 04 1570*  	ld (cur_filename),hl
041122 11 FC C2 04 1571*  	ld de,filedata
041126 01 00 00 01 1572*  	ld bc,65536
04112A 3E 01       1573*  	ld a,mos_load
04112C 5B CF       1574*  	RST.LIL 08h
04112E 21 34 01 00 1575*  	ld hl,BUF_12_010
041132 01 19 00 00 1576*  	ld bc,25
041136 11 2D 00 00 1577*  	ld de,45
04113A DD 21 65 04 1578*  	ld ix,1125
       00          
04113F CD 6D B8 04 1579*  	call vdu_load_img
041143 C9          1580*  	ret
041144             1581*  
041144             1582*  ld_12_011:
041144 21 D4 39 04 1583*  	ld hl,F12_011
041148 22 F2 B6 04 1584*  	ld (cur_filename),hl
04114C 11 FC C2 04 1585*  	ld de,filedata
041150 01 00 00 01 1586*  	ld bc,65536
041154 3E 01       1587*  	ld a,mos_load
041156 5B CF       1588*  	RST.LIL 08h
041158 21 35 01 00 1589*  	ld hl,BUF_12_011
04115C 01 0F 00 00 1590*  	ld bc,15
041160 11 2D 00 00 1591*  	ld de,45
041164 DD 21 A3 02 1592*  	ld ix,675
       00          
041169 CD 6D B8 04 1593*  	call vdu_load_img
04116D C9          1594*  	ret
04116E             1595*  
04116E             1596*  ld_12_012:
04116E 21 E8 39 04 1597*  	ld hl,F12_012
041172 22 F2 B6 04 1598*  	ld (cur_filename),hl
041176 11 FC C2 04 1599*  	ld de,filedata
04117A 01 00 00 01 1600*  	ld bc,65536
04117E 3E 01       1601*  	ld a,mos_load
041180 5B CF       1602*  	RST.LIL 08h
041182 21 36 01 00 1603*  	ld hl,BUF_12_012
041186 01 05 00 00 1604*  	ld bc,5
04118A 11 2D 00 00 1605*  	ld de,45
04118E DD 21 E1 00 1606*  	ld ix,225
       00          
041193 CD 6D B8 04 1607*  	call vdu_load_img
041197 C9          1608*  	ret
041198             1609*  
041198             1610*  ld_12_013:
041198 21 FC 39 04 1611*  	ld hl,F12_013
04119C 22 F2 B6 04 1612*  	ld (cur_filename),hl
0411A0 11 FC C2 04 1613*  	ld de,filedata
0411A4 01 00 00 01 1614*  	ld bc,65536
0411A8 3E 01       1615*  	ld a,mos_load
0411AA 5B CF       1616*  	RST.LIL 08h
0411AC 21 37 01 00 1617*  	ld hl,BUF_12_013
0411B0 01 05 00 00 1618*  	ld bc,5
0411B4 11 2B 00 00 1619*  	ld de,43
0411B8 DD 21 D7 00 1620*  	ld ix,215
       00          
0411BD CD 6D B8 04 1621*  	call vdu_load_img
0411C1 C9          1622*  	ret
0411C2             1623*  
0411C2             1624*  ld_12_014:
0411C2 21 10 3A 04 1625*  	ld hl,F12_014
0411C6 22 F2 B6 04 1626*  	ld (cur_filename),hl
0411CA 11 FC C2 04 1627*  	ld de,filedata
0411CE 01 00 00 01 1628*  	ld bc,65536
0411D2 3E 01       1629*  	ld a,mos_load
0411D4 5B CF       1630*  	RST.LIL 08h
0411D6 21 38 01 00 1631*  	ld hl,BUF_12_014
0411DA 01 0F 00 00 1632*  	ld bc,15
0411DE 11 2D 00 00 1633*  	ld de,45
0411E2 DD 21 A3 02 1634*  	ld ix,675
       00          
0411E7 CD 6D B8 04 1635*  	call vdu_load_img
0411EB C9          1636*  	ret
0411EC             1637*  
0411EC             1638*  ld_12_015:
0411EC 21 24 3A 04 1639*  	ld hl,F12_015
0411F0 22 F2 B6 04 1640*  	ld (cur_filename),hl
0411F4 11 FC C2 04 1641*  	ld de,filedata
0411F8 01 00 00 01 1642*  	ld bc,65536
0411FC 3E 01       1643*  	ld a,mos_load
0411FE 5B CF       1644*  	RST.LIL 08h
041200 21 39 01 00 1645*  	ld hl,BUF_12_015
041204 01 19 00 00 1646*  	ld bc,25
041208 11 2D 00 00 1647*  	ld de,45
04120C DD 21 65 04 1648*  	ld ix,1125
       00          
041211 CD 6D B8 04 1649*  	call vdu_load_img
041215 C9          1650*  	ret
041216             1651*  
041216             1652*  ld_12_016:
041216 21 38 3A 04 1653*  	ld hl,F12_016
04121A 22 F2 B6 04 1654*  	ld (cur_filename),hl
04121E 11 FC C2 04 1655*  	ld de,filedata
041222 01 00 00 01 1656*  	ld bc,65536
041226 3E 01       1657*  	ld a,mos_load
041228 5B CF       1658*  	RST.LIL 08h
04122A 21 3A 01 00 1659*  	ld hl,BUF_12_016
04122E 01 23 00 00 1660*  	ld bc,35
041232 11 2D 00 00 1661*  	ld de,45
041236 DD 21 27 06 1662*  	ld ix,1575
       00          
04123B CD 6D B8 04 1663*  	call vdu_load_img
04123F C9          1664*  	ret
041240             1665*  
041240             1666*  ld_12_020:
041240 21 4C 3A 04 1667*  	ld hl,F12_020
041244 22 F2 B6 04 1668*  	ld (cur_filename),hl
041248 11 FC C2 04 1669*  	ld de,filedata
04124C 01 00 00 01 1670*  	ld bc,65536
041250 3E 01       1671*  	ld a,mos_load
041252 5B CF       1672*  	RST.LIL 08h
041254 21 3B 01 00 1673*  	ld hl,BUF_12_020
041258 01 2E 00 00 1674*  	ld bc,46
04125C 11 2D 00 00 1675*  	ld de,45
041260 DD 21 16 08 1676*  	ld ix,2070
       00          
041265 CD 6D B8 04 1677*  	call vdu_load_img
041269 C9          1678*  	ret
04126A             1679*  
04126A             1680*  ld_12_024:
04126A 21 60 3A 04 1681*  	ld hl,F12_024
04126E 22 F2 B6 04 1682*  	ld (cur_filename),hl
041272 11 FC C2 04 1683*  	ld de,filedata
041276 01 00 00 01 1684*  	ld bc,65536
04127A 3E 01       1685*  	ld a,mos_load
04127C 5B CF       1686*  	RST.LIL 08h
04127E 21 3C 01 00 1687*  	ld hl,BUF_12_024
041282 01 2E 00 00 1688*  	ld bc,46
041286 11 40 00 00 1689*  	ld de,64
04128A DD 21 80 0B 1690*  	ld ix,2944
       00          
04128F CD 6D B8 04 1691*  	call vdu_load_img
041293 C9          1692*  	ret
041294             1693*  
041294             1694*  ld_12_025:
041294 21 74 3A 04 1695*  	ld hl,F12_025
041298 22 F2 B6 04 1696*  	ld (cur_filename),hl
04129C 11 FC C2 04 1697*  	ld de,filedata
0412A0 01 00 00 01 1698*  	ld bc,65536
0412A4 3E 01       1699*  	ld a,mos_load
0412A6 5B CF       1700*  	RST.LIL 08h
0412A8 21 3D 01 00 1701*  	ld hl,BUF_12_025
0412AC 01 1C 00 00 1702*  	ld bc,28
0412B0 11 40 00 00 1703*  	ld de,64
0412B4 DD 21 00 07 1704*  	ld ix,1792
       00          
0412B9 CD 6D B8 04 1705*  	call vdu_load_img
0412BD C9          1706*  	ret
0412BE             1707*  
0412BE             1708*  ld_12_026:
0412BE 21 88 3A 04 1709*  	ld hl,F12_026
0412C2 22 F2 B6 04 1710*  	ld (cur_filename),hl
0412C6 11 FC C2 04 1711*  	ld de,filedata
0412CA 01 00 00 01 1712*  	ld bc,65536
0412CE 3E 01       1713*  	ld a,mos_load
0412D0 5B CF       1714*  	RST.LIL 08h
0412D2 21 3E 01 00 1715*  	ld hl,BUF_12_026
0412D6 01 09 00 00 1716*  	ld bc,9
0412DA 11 40 00 00 1717*  	ld de,64
0412DE DD 21 40 02 1718*  	ld ix,576
       00          
0412E3 CD 6D B8 04 1719*  	call vdu_load_img
0412E7 C9          1720*  	ret
0412E8             1721*  
0412E8             1722*  ld_12_027:
0412E8 21 9C 3A 04 1723*  	ld hl,F12_027
0412EC 22 F2 B6 04 1724*  	ld (cur_filename),hl
0412F0 11 FC C2 04 1725*  	ld de,filedata
0412F4 01 00 00 01 1726*  	ld bc,65536
0412F8 3E 01       1727*  	ld a,mos_load
0412FA 5B CF       1728*  	RST.LIL 08h
0412FC 21 3F 01 00 1729*  	ld hl,BUF_12_027
041300 01 0A 00 00 1730*  	ld bc,10
041304 11 3E 00 00 1731*  	ld de,62
041308 DD 21 6C 02 1732*  	ld ix,620
       00          
04130D CD 6D B8 04 1733*  	call vdu_load_img
041311 C9          1734*  	ret
041312             1735*  
041312             1736*  ld_12_028:
041312 21 B0 3A 04 1737*  	ld hl,F12_028
041316 22 F2 B6 04 1738*  	ld (cur_filename),hl
04131A 11 FC C2 04 1739*  	ld de,filedata
04131E 01 00 00 01 1740*  	ld bc,65536
041322 3E 01       1741*  	ld a,mos_load
041324 5B CF       1742*  	RST.LIL 08h
041326 21 40 01 00 1743*  	ld hl,BUF_12_028
04132A 01 1C 00 00 1744*  	ld bc,28
04132E 11 40 00 00 1745*  	ld de,64
041332 DD 21 00 07 1746*  	ld ix,1792
       00          
041337 CD 6D B8 04 1747*  	call vdu_load_img
04133B C9          1748*  	ret
04133C             1749*  
04133C             1750*  ld_12_029:
04133C 21 C4 3A 04 1751*  	ld hl,F12_029
041340 22 F2 B6 04 1752*  	ld (cur_filename),hl
041344 11 FC C2 04 1753*  	ld de,filedata
041348 01 00 00 01 1754*  	ld bc,65536
04134C 3E 01       1755*  	ld a,mos_load
04134E 5B CF       1756*  	RST.LIL 08h
041350 21 41 01 00 1757*  	ld hl,BUF_12_029
041354 01 2F 00 00 1758*  	ld bc,47
041358 11 40 00 00 1759*  	ld de,64
04135C DD 21 C0 0B 1760*  	ld ix,3008
       00          
041361 CD 6D B8 04 1761*  	call vdu_load_img
041365 C9          1762*  	ret
041366             1763*  
041366             1764*  ld_12_032:
041366 21 D8 3A 04 1765*  	ld hl,F12_032
04136A 22 F2 B6 04 1766*  	ld (cur_filename),hl
04136E 11 FC C2 04 1767*  	ld de,filedata
041372 01 00 00 01 1768*  	ld bc,65536
041376 3E 01       1769*  	ld a,mos_load
041378 5B CF       1770*  	RST.LIL 08h
04137A 21 42 01 00 1771*  	ld hl,BUF_12_032
04137E 01 41 00 00 1772*  	ld bc,65
041382 11 40 00 00 1773*  	ld de,64
041386 DD 21 40 10 1774*  	ld ix,4160
       00          
04138B CD 6D B8 04 1775*  	call vdu_load_img
04138F C9          1776*  	ret
041390             1777*  
041390             1778*  ld_12_035:
041390 21 EC 3A 04 1779*  	ld hl,F12_035
041394 22 F2 B6 04 1780*  	ld (cur_filename),hl
041398 11 FC C2 04 1781*  	ld de,filedata
04139C 01 00 00 01 1782*  	ld bc,65536
0413A0 3E 01       1783*  	ld a,mos_load
0413A2 5B CF       1784*  	RST.LIL 08h
0413A4 21 43 01 00 1785*  	ld hl,BUF_12_035
0413A8 01 3F 00 00 1786*  	ld bc,63
0413AC 11 6B 00 00 1787*  	ld de,107
0413B0 DD 21 55 1A 1788*  	ld ix,6741
       00          
0413B5 CD 6D B8 04 1789*  	call vdu_load_img
0413B9 C9          1790*  	ret
0413BA             1791*  
0413BA             1792*  ld_12_036:
0413BA 21 00 3B 04 1793*  	ld hl,F12_036
0413BE 22 F2 B6 04 1794*  	ld (cur_filename),hl
0413C2 11 FC C2 04 1795*  	ld de,filedata
0413C6 01 00 00 01 1796*  	ld bc,65536
0413CA 3E 01       1797*  	ld a,mos_load
0413CC 5B CF       1798*  	RST.LIL 08h
0413CE 21 44 01 00 1799*  	ld hl,BUF_12_036
0413D2 01 16 00 00 1800*  	ld bc,22
0413D6 11 6B 00 00 1801*  	ld de,107
0413DA DD 21 32 09 1802*  	ld ix,2354
       00          
0413DF CD 6D B8 04 1803*  	call vdu_load_img
0413E3 C9          1804*  	ret
0413E4             1805*  
0413E4             1806*  ld_12_037:
0413E4 21 14 3B 04 1807*  	ld hl,F12_037
0413E8 22 F2 B6 04 1808*  	ld (cur_filename),hl
0413EC 11 FC C2 04 1809*  	ld de,filedata
0413F0 01 00 00 01 1810*  	ld bc,65536
0413F4 3E 01       1811*  	ld a,mos_load
0413F6 5B CF       1812*  	RST.LIL 08h
0413F8 21 45 01 00 1813*  	ld hl,BUF_12_037
0413FC 01 15 00 00 1814*  	ld bc,21
041400 11 69 00 00 1815*  	ld de,105
041404 DD 21 9D 08 1816*  	ld ix,2205
       00          
041409 CD 6D B8 04 1817*  	call vdu_load_img
04140D C9          1818*  	ret
04140E             1819*  
04140E             1820*  ld_12_038:
04140E 21 28 3B 04 1821*  	ld hl,F12_038
041412 22 F2 B6 04 1822*  	ld (cur_filename),hl
041416 11 FC C2 04 1823*  	ld de,filedata
04141A 01 00 00 01 1824*  	ld bc,65536
04141E 3E 01       1825*  	ld a,mos_load
041420 5B CF       1826*  	RST.LIL 08h
041422 21 46 01 00 1827*  	ld hl,BUF_12_038
041426 01 3F 00 00 1828*  	ld bc,63
04142A 11 6B 00 00 1829*  	ld de,107
04142E DD 21 55 1A 1830*  	ld ix,6741
       00          
041433 CD 6D B8 04 1831*  	call vdu_load_img
041437 C9          1832*  	ret
041438             1833*  
041438             1834*  ld_12_040:
041438 21 3C 3B 04 1835*  	ld hl,F12_040
04143C 22 F2 B6 04 1836*  	ld (cur_filename),hl
041440 11 FC C2 04 1837*  	ld de,filedata
041444 01 00 00 01 1838*  	ld bc,65536
041448 3E 01       1839*  	ld a,mos_load
04144A 5B CF       1840*  	RST.LIL 08h
04144C 21 47 01 00 1841*  	ld hl,BUF_12_040
041450 01 6C 00 00 1842*  	ld bc,108
041454 11 6B 00 00 1843*  	ld de,107
041458 DD 21 24 2D 1844*  	ld ix,11556
       00          
04145D CD 6D B8 04 1845*  	call vdu_load_img
041461 C9          1846*  	ret
041462             1847*  
041462             1848*  ld_12_042:
041462 21 50 3B 04 1849*  	ld hl,F12_042
041466 22 F2 B6 04 1850*  	ld (cur_filename),hl
04146A 11 FC C2 04 1851*  	ld de,filedata
04146E 01 00 00 01 1852*  	ld bc,65536
041472 3E 01       1853*  	ld a,mos_load
041474 5B CF       1854*  	RST.LIL 08h
041476 21 48 01 00 1855*  	ld hl,BUF_12_042
04147A 01 6A 00 00 1856*  	ld bc,106
04147E 11 A0 00 00 1857*  	ld de,160
041482 DD 21 40 42 1858*  	ld ix,16960
       00          
041487 CD 6D B8 04 1859*  	call vdu_load_img
04148B C9          1860*  	ret
04148C             1861*  
04148C             1862*  ld_12_043:
04148C 21 64 3B 04 1863*  	ld hl,F12_043
041490 22 F2 B6 04 1864*  	ld (cur_filename),hl
041494 11 FC C2 04 1865*  	ld de,filedata
041498 01 00 00 01 1866*  	ld bc,65536
04149C 3E 01       1867*  	ld a,mos_load
04149E 5B CF       1868*  	RST.LIL 08h
0414A0 21 49 01 00 1869*  	ld hl,BUF_12_043
0414A4 01 6B 00 00 1870*  	ld bc,107
0414A8 11 A0 00 00 1871*  	ld de,160
0414AC DD 21 E0 42 1872*  	ld ix,17120
       00          
0414B1 CD 6D B8 04 1873*  	call vdu_load_img
0414B5 C9          1874*  	ret
0414B6             1875*  
0414B6             1876*  ld_12_044:
0414B6 21 78 3B 04 1877*  	ld hl,F12_044
0414BA 22 F2 B6 04 1878*  	ld (cur_filename),hl
0414BE 11 FC C2 04 1879*  	ld de,filedata
0414C2 01 00 00 01 1880*  	ld bc,65536
0414C6 3E 01       1881*  	ld a,mos_load
0414C8 5B CF       1882*  	RST.LIL 08h
0414CA 21 4A 01 00 1883*  	ld hl,BUF_12_044
0414CE 01 40 01 00 1884*  	ld bc,320
0414D2 11 A0 00 00 1885*  	ld de,160
0414D6 DD 21 00 C8 1886*  	ld ix,51200
       00          
0414DB CD 6D B8 04 1887*  	call vdu_load_img
0414DF C9          1888*  	ret
0414E0             1889*  
0414E0             1890*  ld_13_004:
0414E0 21 8C 3B 04 1891*  	ld hl,F13_004
0414E4 22 F2 B6 04 1892*  	ld (cur_filename),hl
0414E8 11 FC C2 04 1893*  	ld de,filedata
0414EC 01 00 00 01 1894*  	ld bc,65536
0414F0 3E 01       1895*  	ld a,mos_load
0414F2 5B CF       1896*  	RST.LIL 08h
0414F4 21 4B 01 00 1897*  	ld hl,BUF_13_004
0414F8 01 24 00 00 1898*  	ld bc,36
0414FC 11 23 00 00 1899*  	ld de,35
041500 DD 21 EC 04 1900*  	ld ix,1260
       00          
041505 CD 6D B8 04 1901*  	call vdu_load_img
041509 C9          1902*  	ret
04150A             1903*  
04150A             1904*  ld_13_009:
04150A 21 A0 3B 04 1905*  	ld hl,F13_009
04150E 22 F2 B6 04 1906*  	ld (cur_filename),hl
041512 11 FC C2 04 1907*  	ld de,filedata
041516 01 00 00 01 1908*  	ld bc,65536
04151A 3E 01       1909*  	ld a,mos_load
04151C 5B CF       1910*  	RST.LIL 08h
04151E 21 4C 01 00 1911*  	ld hl,BUF_13_009
041522 01 23 00 00 1912*  	ld bc,35
041526 11 2D 00 00 1913*  	ld de,45
04152A DD 21 27 06 1914*  	ld ix,1575
       00          
04152F CD 6D B8 04 1915*  	call vdu_load_img
041533 C9          1916*  	ret
041534             1917*  
041534             1918*  ld_13_010:
041534 21 B4 3B 04 1919*  	ld hl,F13_010
041538 22 F2 B6 04 1920*  	ld (cur_filename),hl
04153C 11 FC C2 04 1921*  	ld de,filedata
041540 01 00 00 01 1922*  	ld bc,65536
041544 3E 01       1923*  	ld a,mos_load
041546 5B CF       1924*  	RST.LIL 08h
041548 21 4D 01 00 1925*  	ld hl,BUF_13_010
04154C 01 19 00 00 1926*  	ld bc,25
041550 11 2D 00 00 1927*  	ld de,45
041554 DD 21 65 04 1928*  	ld ix,1125
       00          
041559 CD 6D B8 04 1929*  	call vdu_load_img
04155D C9          1930*  	ret
04155E             1931*  
04155E             1932*  ld_13_011:
04155E 21 C8 3B 04 1933*  	ld hl,F13_011
041562 22 F2 B6 04 1934*  	ld (cur_filename),hl
041566 11 FC C2 04 1935*  	ld de,filedata
04156A 01 00 00 01 1936*  	ld bc,65536
04156E 3E 01       1937*  	ld a,mos_load
041570 5B CF       1938*  	RST.LIL 08h
041572 21 4E 01 00 1939*  	ld hl,BUF_13_011
041576 01 0F 00 00 1940*  	ld bc,15
04157A 11 2D 00 00 1941*  	ld de,45
04157E DD 21 A3 02 1942*  	ld ix,675
       00          
041583 CD 6D B8 04 1943*  	call vdu_load_img
041587 C9          1944*  	ret
041588             1945*  
041588             1946*  ld_13_012:
041588 21 DC 3B 04 1947*  	ld hl,F13_012
04158C 22 F2 B6 04 1948*  	ld (cur_filename),hl
041590 11 FC C2 04 1949*  	ld de,filedata
041594 01 00 00 01 1950*  	ld bc,65536
041598 3E 01       1951*  	ld a,mos_load
04159A 5B CF       1952*  	RST.LIL 08h
04159C 21 4F 01 00 1953*  	ld hl,BUF_13_012
0415A0 01 05 00 00 1954*  	ld bc,5
0415A4 11 2D 00 00 1955*  	ld de,45
0415A8 DD 21 E1 00 1956*  	ld ix,225
       00          
0415AD CD 6D B8 04 1957*  	call vdu_load_img
0415B1 C9          1958*  	ret
0415B2             1959*  
0415B2             1960*  ld_13_013:
0415B2 21 F0 3B 04 1961*  	ld hl,F13_013
0415B6 22 F2 B6 04 1962*  	ld (cur_filename),hl
0415BA 11 FC C2 04 1963*  	ld de,filedata
0415BE 01 00 00 01 1964*  	ld bc,65536
0415C2 3E 01       1965*  	ld a,mos_load
0415C4 5B CF       1966*  	RST.LIL 08h
0415C6 21 50 01 00 1967*  	ld hl,BUF_13_013
0415CA 01 05 00 00 1968*  	ld bc,5
0415CE 11 2B 00 00 1969*  	ld de,43
0415D2 DD 21 D7 00 1970*  	ld ix,215
       00          
0415D7 CD 6D B8 04 1971*  	call vdu_load_img
0415DB C9          1972*  	ret
0415DC             1973*  
0415DC             1974*  ld_13_014:
0415DC 21 04 3C 04 1975*  	ld hl,F13_014
0415E0 22 F2 B6 04 1976*  	ld (cur_filename),hl
0415E4 11 FC C2 04 1977*  	ld de,filedata
0415E8 01 00 00 01 1978*  	ld bc,65536
0415EC 3E 01       1979*  	ld a,mos_load
0415EE 5B CF       1980*  	RST.LIL 08h
0415F0 21 51 01 00 1981*  	ld hl,BUF_13_014
0415F4 01 0F 00 00 1982*  	ld bc,15
0415F8 11 2D 00 00 1983*  	ld de,45
0415FC DD 21 A3 02 1984*  	ld ix,675
       00          
041601 CD 6D B8 04 1985*  	call vdu_load_img
041605 C9          1986*  	ret
041606             1987*  
041606             1988*  ld_13_015:
041606 21 18 3C 04 1989*  	ld hl,F13_015
04160A 22 F2 B6 04 1990*  	ld (cur_filename),hl
04160E 11 FC C2 04 1991*  	ld de,filedata
041612 01 00 00 01 1992*  	ld bc,65536
041616 3E 01       1993*  	ld a,mos_load
041618 5B CF       1994*  	RST.LIL 08h
04161A 21 52 01 00 1995*  	ld hl,BUF_13_015
04161E 01 19 00 00 1996*  	ld bc,25
041622 11 2D 00 00 1997*  	ld de,45
041626 DD 21 65 04 1998*  	ld ix,1125
       00          
04162B CD 6D B8 04 1999*  	call vdu_load_img
04162F C9          2000*  	ret
041630             2001*  
041630             2002*  ld_13_016:
041630 21 2C 3C 04 2003*  	ld hl,F13_016
041634 22 F2 B6 04 2004*  	ld (cur_filename),hl
041638 11 FC C2 04 2005*  	ld de,filedata
04163C 01 00 00 01 2006*  	ld bc,65536
041640 3E 01       2007*  	ld a,mos_load
041642 5B CF       2008*  	RST.LIL 08h
041644 21 53 01 00 2009*  	ld hl,BUF_13_016
041648 01 23 00 00 2010*  	ld bc,35
04164C 11 2D 00 00 2011*  	ld de,45
041650 DD 21 27 06 2012*  	ld ix,1575
       00          
041655 CD 6D B8 04 2013*  	call vdu_load_img
041659 C9          2014*  	ret
04165A             2015*  
04165A             2016*  ld_13_020:
04165A 21 40 3C 04 2017*  	ld hl,F13_020
04165E 22 F2 B6 04 2018*  	ld (cur_filename),hl
041662 11 FC C2 04 2019*  	ld de,filedata
041666 01 00 00 01 2020*  	ld bc,65536
04166A 3E 01       2021*  	ld a,mos_load
04166C 5B CF       2022*  	RST.LIL 08h
04166E 21 54 01 00 2023*  	ld hl,BUF_13_020
041672 01 2E 00 00 2024*  	ld bc,46
041676 11 2D 00 00 2025*  	ld de,45
04167A DD 21 16 08 2026*  	ld ix,2070
       00          
04167F CD 6D B8 04 2027*  	call vdu_load_img
041683 C9          2028*  	ret
041684             2029*  
041684             2030*  ld_13_024:
041684 21 54 3C 04 2031*  	ld hl,F13_024
041688 22 F2 B6 04 2032*  	ld (cur_filename),hl
04168C 11 FC C2 04 2033*  	ld de,filedata
041690 01 00 00 01 2034*  	ld bc,65536
041694 3E 01       2035*  	ld a,mos_load
041696 5B CF       2036*  	RST.LIL 08h
041698 21 55 01 00 2037*  	ld hl,BUF_13_024
04169C 01 2E 00 00 2038*  	ld bc,46
0416A0 11 40 00 00 2039*  	ld de,64
0416A4 DD 21 80 0B 2040*  	ld ix,2944
       00          
0416A9 CD 6D B8 04 2041*  	call vdu_load_img
0416AD C9          2042*  	ret
0416AE             2043*  
0416AE             2044*  ld_13_025:
0416AE 21 68 3C 04 2045*  	ld hl,F13_025
0416B2 22 F2 B6 04 2046*  	ld (cur_filename),hl
0416B6 11 FC C2 04 2047*  	ld de,filedata
0416BA 01 00 00 01 2048*  	ld bc,65536
0416BE 3E 01       2049*  	ld a,mos_load
0416C0 5B CF       2050*  	RST.LIL 08h
0416C2 21 56 01 00 2051*  	ld hl,BUF_13_025
0416C6 01 1C 00 00 2052*  	ld bc,28
0416CA 11 40 00 00 2053*  	ld de,64
0416CE DD 21 00 07 2054*  	ld ix,1792
       00          
0416D3 CD 6D B8 04 2055*  	call vdu_load_img
0416D7 C9          2056*  	ret
0416D8             2057*  
0416D8             2058*  ld_13_026:
0416D8 21 7C 3C 04 2059*  	ld hl,F13_026
0416DC 22 F2 B6 04 2060*  	ld (cur_filename),hl
0416E0 11 FC C2 04 2061*  	ld de,filedata
0416E4 01 00 00 01 2062*  	ld bc,65536
0416E8 3E 01       2063*  	ld a,mos_load
0416EA 5B CF       2064*  	RST.LIL 08h
0416EC 21 57 01 00 2065*  	ld hl,BUF_13_026
0416F0 01 09 00 00 2066*  	ld bc,9
0416F4 11 40 00 00 2067*  	ld de,64
0416F8 DD 21 40 02 2068*  	ld ix,576
       00          
0416FD CD 6D B8 04 2069*  	call vdu_load_img
041701 C9          2070*  	ret
041702             2071*  
041702             2072*  ld_13_027:
041702 21 90 3C 04 2073*  	ld hl,F13_027
041706 22 F2 B6 04 2074*  	ld (cur_filename),hl
04170A 11 FC C2 04 2075*  	ld de,filedata
04170E 01 00 00 01 2076*  	ld bc,65536
041712 3E 01       2077*  	ld a,mos_load
041714 5B CF       2078*  	RST.LIL 08h
041716 21 58 01 00 2079*  	ld hl,BUF_13_027
04171A 01 0A 00 00 2080*  	ld bc,10
04171E 11 3E 00 00 2081*  	ld de,62
041722 DD 21 6C 02 2082*  	ld ix,620
       00          
041727 CD 6D B8 04 2083*  	call vdu_load_img
04172B C9          2084*  	ret
04172C             2085*  
04172C             2086*  ld_13_028:
04172C 21 A4 3C 04 2087*  	ld hl,F13_028
041730 22 F2 B6 04 2088*  	ld (cur_filename),hl
041734 11 FC C2 04 2089*  	ld de,filedata
041738 01 00 00 01 2090*  	ld bc,65536
04173C 3E 01       2091*  	ld a,mos_load
04173E 5B CF       2092*  	RST.LIL 08h
041740 21 59 01 00 2093*  	ld hl,BUF_13_028
041744 01 1C 00 00 2094*  	ld bc,28
041748 11 40 00 00 2095*  	ld de,64
04174C DD 21 00 07 2096*  	ld ix,1792
       00          
041751 CD 6D B8 04 2097*  	call vdu_load_img
041755 C9          2098*  	ret
041756             2099*  
041756             2100*  ld_13_029:
041756 21 B8 3C 04 2101*  	ld hl,F13_029
04175A 22 F2 B6 04 2102*  	ld (cur_filename),hl
04175E 11 FC C2 04 2103*  	ld de,filedata
041762 01 00 00 01 2104*  	ld bc,65536
041766 3E 01       2105*  	ld a,mos_load
041768 5B CF       2106*  	RST.LIL 08h
04176A 21 5A 01 00 2107*  	ld hl,BUF_13_029
04176E 01 2F 00 00 2108*  	ld bc,47
041772 11 40 00 00 2109*  	ld de,64
041776 DD 21 C0 0B 2110*  	ld ix,3008
       00          
04177B CD 6D B8 04 2111*  	call vdu_load_img
04177F C9          2112*  	ret
041780             2113*  
041780             2114*  ld_13_032:
041780 21 CC 3C 04 2115*  	ld hl,F13_032
041784 22 F2 B6 04 2116*  	ld (cur_filename),hl
041788 11 FC C2 04 2117*  	ld de,filedata
04178C 01 00 00 01 2118*  	ld bc,65536
041790 3E 01       2119*  	ld a,mos_load
041792 5B CF       2120*  	RST.LIL 08h
041794 21 5B 01 00 2121*  	ld hl,BUF_13_032
041798 01 41 00 00 2122*  	ld bc,65
04179C 11 40 00 00 2123*  	ld de,64
0417A0 DD 21 40 10 2124*  	ld ix,4160
       00          
0417A5 CD 6D B8 04 2125*  	call vdu_load_img
0417A9 C9          2126*  	ret
0417AA             2127*  
0417AA             2128*  ld_13_035:
0417AA 21 E0 3C 04 2129*  	ld hl,F13_035
0417AE 22 F2 B6 04 2130*  	ld (cur_filename),hl
0417B2 11 FC C2 04 2131*  	ld de,filedata
0417B6 01 00 00 01 2132*  	ld bc,65536
0417BA 3E 01       2133*  	ld a,mos_load
0417BC 5B CF       2134*  	RST.LIL 08h
0417BE 21 5C 01 00 2135*  	ld hl,BUF_13_035
0417C2 01 3F 00 00 2136*  	ld bc,63
0417C6 11 6B 00 00 2137*  	ld de,107
0417CA DD 21 55 1A 2138*  	ld ix,6741
       00          
0417CF CD 6D B8 04 2139*  	call vdu_load_img
0417D3 C9          2140*  	ret
0417D4             2141*  
0417D4             2142*  ld_13_036:
0417D4 21 F4 3C 04 2143*  	ld hl,F13_036
0417D8 22 F2 B6 04 2144*  	ld (cur_filename),hl
0417DC 11 FC C2 04 2145*  	ld de,filedata
0417E0 01 00 00 01 2146*  	ld bc,65536
0417E4 3E 01       2147*  	ld a,mos_load
0417E6 5B CF       2148*  	RST.LIL 08h
0417E8 21 5D 01 00 2149*  	ld hl,BUF_13_036
0417EC 01 16 00 00 2150*  	ld bc,22
0417F0 11 6B 00 00 2151*  	ld de,107
0417F4 DD 21 32 09 2152*  	ld ix,2354
       00          
0417F9 CD 6D B8 04 2153*  	call vdu_load_img
0417FD C9          2154*  	ret
0417FE             2155*  
0417FE             2156*  ld_13_037:
0417FE 21 08 3D 04 2157*  	ld hl,F13_037
041802 22 F2 B6 04 2158*  	ld (cur_filename),hl
041806 11 FC C2 04 2159*  	ld de,filedata
04180A 01 00 00 01 2160*  	ld bc,65536
04180E 3E 01       2161*  	ld a,mos_load
041810 5B CF       2162*  	RST.LIL 08h
041812 21 5E 01 00 2163*  	ld hl,BUF_13_037
041816 01 15 00 00 2164*  	ld bc,21
04181A 11 69 00 00 2165*  	ld de,105
04181E DD 21 9D 08 2166*  	ld ix,2205
       00          
041823 CD 6D B8 04 2167*  	call vdu_load_img
041827 C9          2168*  	ret
041828             2169*  
041828             2170*  ld_13_038:
041828 21 1C 3D 04 2171*  	ld hl,F13_038
04182C 22 F2 B6 04 2172*  	ld (cur_filename),hl
041830 11 FC C2 04 2173*  	ld de,filedata
041834 01 00 00 01 2174*  	ld bc,65536
041838 3E 01       2175*  	ld a,mos_load
04183A 5B CF       2176*  	RST.LIL 08h
04183C 21 5F 01 00 2177*  	ld hl,BUF_13_038
041840 01 3F 00 00 2178*  	ld bc,63
041844 11 6B 00 00 2179*  	ld de,107
041848 DD 21 55 1A 2180*  	ld ix,6741
       00          
04184D CD 6D B8 04 2181*  	call vdu_load_img
041851 C9          2182*  	ret
041852             2183*  
041852             2184*  ld_13_040:
041852 21 30 3D 04 2185*  	ld hl,F13_040
041856 22 F2 B6 04 2186*  	ld (cur_filename),hl
04185A 11 FC C2 04 2187*  	ld de,filedata
04185E 01 00 00 01 2188*  	ld bc,65536
041862 3E 01       2189*  	ld a,mos_load
041864 5B CF       2190*  	RST.LIL 08h
041866 21 60 01 00 2191*  	ld hl,BUF_13_040
04186A 01 6C 00 00 2192*  	ld bc,108
04186E 11 6B 00 00 2193*  	ld de,107
041872 DD 21 24 2D 2194*  	ld ix,11556
       00          
041877 CD 6D B8 04 2195*  	call vdu_load_img
04187B C9          2196*  	ret
04187C             2197*  
04187C             2198*  ld_13_042:
04187C 21 44 3D 04 2199*  	ld hl,F13_042
041880 22 F2 B6 04 2200*  	ld (cur_filename),hl
041884 11 FC C2 04 2201*  	ld de,filedata
041888 01 00 00 01 2202*  	ld bc,65536
04188C 3E 01       2203*  	ld a,mos_load
04188E 5B CF       2204*  	RST.LIL 08h
041890 21 61 01 00 2205*  	ld hl,BUF_13_042
041894 01 6A 00 00 2206*  	ld bc,106
041898 11 A0 00 00 2207*  	ld de,160
04189C DD 21 40 42 2208*  	ld ix,16960
       00          
0418A1 CD 6D B8 04 2209*  	call vdu_load_img
0418A5 C9          2210*  	ret
0418A6             2211*  
0418A6             2212*  ld_13_043:
0418A6 21 58 3D 04 2213*  	ld hl,F13_043
0418AA 22 F2 B6 04 2214*  	ld (cur_filename),hl
0418AE 11 FC C2 04 2215*  	ld de,filedata
0418B2 01 00 00 01 2216*  	ld bc,65536
0418B6 3E 01       2217*  	ld a,mos_load
0418B8 5B CF       2218*  	RST.LIL 08h
0418BA 21 62 01 00 2219*  	ld hl,BUF_13_043
0418BE 01 6B 00 00 2220*  	ld bc,107
0418C2 11 A0 00 00 2221*  	ld de,160
0418C6 DD 21 E0 42 2222*  	ld ix,17120
       00          
0418CB CD 6D B8 04 2223*  	call vdu_load_img
0418CF C9          2224*  	ret
0418D0             2225*  
0418D0             2226*  ld_13_044:
0418D0 21 6C 3D 04 2227*  	ld hl,F13_044
0418D4 22 F2 B6 04 2228*  	ld (cur_filename),hl
0418D8 11 FC C2 04 2229*  	ld de,filedata
0418DC 01 00 00 01 2230*  	ld bc,65536
0418E0 3E 01       2231*  	ld a,mos_load
0418E2 5B CF       2232*  	RST.LIL 08h
0418E4 21 63 01 00 2233*  	ld hl,BUF_13_044
0418E8 01 40 01 00 2234*  	ld bc,320
0418EC 11 A0 00 00 2235*  	ld de,160
0418F0 DD 21 00 C8 2236*  	ld ix,51200
       00          
0418F5 CD 6D B8 04 2237*  	call vdu_load_img
0418F9 C9          2238*  	ret
0418FA             2239*  
0418FA             2240*  ld_14_004:
0418FA 21 80 3D 04 2241*  	ld hl,F14_004
0418FE 22 F2 B6 04 2242*  	ld (cur_filename),hl
041902 11 FC C2 04 2243*  	ld de,filedata
041906 01 00 00 01 2244*  	ld bc,65536
04190A 3E 01       2245*  	ld a,mos_load
04190C 5B CF       2246*  	RST.LIL 08h
04190E 21 64 01 00 2247*  	ld hl,BUF_14_004
041912 01 24 00 00 2248*  	ld bc,36
041916 11 23 00 00 2249*  	ld de,35
04191A DD 21 EC 04 2250*  	ld ix,1260
       00          
04191F CD 6D B8 04 2251*  	call vdu_load_img
041923 C9          2252*  	ret
041924             2253*  
041924             2254*  ld_14_009:
041924 21 94 3D 04 2255*  	ld hl,F14_009
041928 22 F2 B6 04 2256*  	ld (cur_filename),hl
04192C 11 FC C2 04 2257*  	ld de,filedata
041930 01 00 00 01 2258*  	ld bc,65536
041934 3E 01       2259*  	ld a,mos_load
041936 5B CF       2260*  	RST.LIL 08h
041938 21 65 01 00 2261*  	ld hl,BUF_14_009
04193C 01 23 00 00 2262*  	ld bc,35
041940 11 2D 00 00 2263*  	ld de,45
041944 DD 21 27 06 2264*  	ld ix,1575
       00          
041949 CD 6D B8 04 2265*  	call vdu_load_img
04194D C9          2266*  	ret
04194E             2267*  
04194E             2268*  ld_14_010:
04194E 21 A8 3D 04 2269*  	ld hl,F14_010
041952 22 F2 B6 04 2270*  	ld (cur_filename),hl
041956 11 FC C2 04 2271*  	ld de,filedata
04195A 01 00 00 01 2272*  	ld bc,65536
04195E 3E 01       2273*  	ld a,mos_load
041960 5B CF       2274*  	RST.LIL 08h
041962 21 66 01 00 2275*  	ld hl,BUF_14_010
041966 01 19 00 00 2276*  	ld bc,25
04196A 11 2D 00 00 2277*  	ld de,45
04196E DD 21 65 04 2278*  	ld ix,1125
       00          
041973 CD 6D B8 04 2279*  	call vdu_load_img
041977 C9          2280*  	ret
041978             2281*  
041978             2282*  ld_14_011:
041978 21 BC 3D 04 2283*  	ld hl,F14_011
04197C 22 F2 B6 04 2284*  	ld (cur_filename),hl
041980 11 FC C2 04 2285*  	ld de,filedata
041984 01 00 00 01 2286*  	ld bc,65536
041988 3E 01       2287*  	ld a,mos_load
04198A 5B CF       2288*  	RST.LIL 08h
04198C 21 67 01 00 2289*  	ld hl,BUF_14_011
041990 01 0F 00 00 2290*  	ld bc,15
041994 11 2D 00 00 2291*  	ld de,45
041998 DD 21 A3 02 2292*  	ld ix,675
       00          
04199D CD 6D B8 04 2293*  	call vdu_load_img
0419A1 C9          2294*  	ret
0419A2             2295*  
0419A2             2296*  ld_14_012:
0419A2 21 D0 3D 04 2297*  	ld hl,F14_012
0419A6 22 F2 B6 04 2298*  	ld (cur_filename),hl
0419AA 11 FC C2 04 2299*  	ld de,filedata
0419AE 01 00 00 01 2300*  	ld bc,65536
0419B2 3E 01       2301*  	ld a,mos_load
0419B4 5B CF       2302*  	RST.LIL 08h
0419B6 21 68 01 00 2303*  	ld hl,BUF_14_012
0419BA 01 05 00 00 2304*  	ld bc,5
0419BE 11 2D 00 00 2305*  	ld de,45
0419C2 DD 21 E1 00 2306*  	ld ix,225
       00          
0419C7 CD 6D B8 04 2307*  	call vdu_load_img
0419CB C9          2308*  	ret
0419CC             2309*  
0419CC             2310*  ld_14_013:
0419CC 21 E4 3D 04 2311*  	ld hl,F14_013
0419D0 22 F2 B6 04 2312*  	ld (cur_filename),hl
0419D4 11 FC C2 04 2313*  	ld de,filedata
0419D8 01 00 00 01 2314*  	ld bc,65536
0419DC 3E 01       2315*  	ld a,mos_load
0419DE 5B CF       2316*  	RST.LIL 08h
0419E0 21 69 01 00 2317*  	ld hl,BUF_14_013
0419E4 01 05 00 00 2318*  	ld bc,5
0419E8 11 2B 00 00 2319*  	ld de,43
0419EC DD 21 D7 00 2320*  	ld ix,215
       00          
0419F1 CD 6D B8 04 2321*  	call vdu_load_img
0419F5 C9          2322*  	ret
0419F6             2323*  
0419F6             2324*  ld_14_014:
0419F6 21 F8 3D 04 2325*  	ld hl,F14_014
0419FA 22 F2 B6 04 2326*  	ld (cur_filename),hl
0419FE 11 FC C2 04 2327*  	ld de,filedata
041A02 01 00 00 01 2328*  	ld bc,65536
041A06 3E 01       2329*  	ld a,mos_load
041A08 5B CF       2330*  	RST.LIL 08h
041A0A 21 6A 01 00 2331*  	ld hl,BUF_14_014
041A0E 01 0F 00 00 2332*  	ld bc,15
041A12 11 2D 00 00 2333*  	ld de,45
041A16 DD 21 A3 02 2334*  	ld ix,675
       00          
041A1B CD 6D B8 04 2335*  	call vdu_load_img
041A1F C9          2336*  	ret
041A20             2337*  
041A20             2338*  ld_14_015:
041A20 21 0C 3E 04 2339*  	ld hl,F14_015
041A24 22 F2 B6 04 2340*  	ld (cur_filename),hl
041A28 11 FC C2 04 2341*  	ld de,filedata
041A2C 01 00 00 01 2342*  	ld bc,65536
041A30 3E 01       2343*  	ld a,mos_load
041A32 5B CF       2344*  	RST.LIL 08h
041A34 21 6B 01 00 2345*  	ld hl,BUF_14_015
041A38 01 19 00 00 2346*  	ld bc,25
041A3C 11 2D 00 00 2347*  	ld de,45
041A40 DD 21 65 04 2348*  	ld ix,1125
       00          
041A45 CD 6D B8 04 2349*  	call vdu_load_img
041A49 C9          2350*  	ret
041A4A             2351*  
041A4A             2352*  ld_14_016:
041A4A 21 20 3E 04 2353*  	ld hl,F14_016
041A4E 22 F2 B6 04 2354*  	ld (cur_filename),hl
041A52 11 FC C2 04 2355*  	ld de,filedata
041A56 01 00 00 01 2356*  	ld bc,65536
041A5A 3E 01       2357*  	ld a,mos_load
041A5C 5B CF       2358*  	RST.LIL 08h
041A5E 21 6C 01 00 2359*  	ld hl,BUF_14_016
041A62 01 23 00 00 2360*  	ld bc,35
041A66 11 2D 00 00 2361*  	ld de,45
041A6A DD 21 27 06 2362*  	ld ix,1575
       00          
041A6F CD 6D B8 04 2363*  	call vdu_load_img
041A73 C9          2364*  	ret
041A74             2365*  
041A74             2366*  ld_14_020:
041A74 21 34 3E 04 2367*  	ld hl,F14_020
041A78 22 F2 B6 04 2368*  	ld (cur_filename),hl
041A7C 11 FC C2 04 2369*  	ld de,filedata
041A80 01 00 00 01 2370*  	ld bc,65536
041A84 3E 01       2371*  	ld a,mos_load
041A86 5B CF       2372*  	RST.LIL 08h
041A88 21 6D 01 00 2373*  	ld hl,BUF_14_020
041A8C 01 2E 00 00 2374*  	ld bc,46
041A90 11 2D 00 00 2375*  	ld de,45
041A94 DD 21 16 08 2376*  	ld ix,2070
       00          
041A99 CD 6D B8 04 2377*  	call vdu_load_img
041A9D C9          2378*  	ret
041A9E             2379*  
041A9E             2380*  ld_14_024:
041A9E 21 48 3E 04 2381*  	ld hl,F14_024
041AA2 22 F2 B6 04 2382*  	ld (cur_filename),hl
041AA6 11 FC C2 04 2383*  	ld de,filedata
041AAA 01 00 00 01 2384*  	ld bc,65536
041AAE 3E 01       2385*  	ld a,mos_load
041AB0 5B CF       2386*  	RST.LIL 08h
041AB2 21 6E 01 00 2387*  	ld hl,BUF_14_024
041AB6 01 2E 00 00 2388*  	ld bc,46
041ABA 11 40 00 00 2389*  	ld de,64
041ABE DD 21 80 0B 2390*  	ld ix,2944
       00          
041AC3 CD 6D B8 04 2391*  	call vdu_load_img
041AC7 C9          2392*  	ret
041AC8             2393*  
041AC8             2394*  ld_14_025:
041AC8 21 5C 3E 04 2395*  	ld hl,F14_025
041ACC 22 F2 B6 04 2396*  	ld (cur_filename),hl
041AD0 11 FC C2 04 2397*  	ld de,filedata
041AD4 01 00 00 01 2398*  	ld bc,65536
041AD8 3E 01       2399*  	ld a,mos_load
041ADA 5B CF       2400*  	RST.LIL 08h
041ADC 21 6F 01 00 2401*  	ld hl,BUF_14_025
041AE0 01 1C 00 00 2402*  	ld bc,28
041AE4 11 40 00 00 2403*  	ld de,64
041AE8 DD 21 00 07 2404*  	ld ix,1792
       00          
041AED CD 6D B8 04 2405*  	call vdu_load_img
041AF1 C9          2406*  	ret
041AF2             2407*  
041AF2             2408*  ld_14_026:
041AF2 21 70 3E 04 2409*  	ld hl,F14_026
041AF6 22 F2 B6 04 2410*  	ld (cur_filename),hl
041AFA 11 FC C2 04 2411*  	ld de,filedata
041AFE 01 00 00 01 2412*  	ld bc,65536
041B02 3E 01       2413*  	ld a,mos_load
041B04 5B CF       2414*  	RST.LIL 08h
041B06 21 70 01 00 2415*  	ld hl,BUF_14_026
041B0A 01 09 00 00 2416*  	ld bc,9
041B0E 11 40 00 00 2417*  	ld de,64
041B12 DD 21 40 02 2418*  	ld ix,576
       00          
041B17 CD 6D B8 04 2419*  	call vdu_load_img
041B1B C9          2420*  	ret
041B1C             2421*  
041B1C             2422*  ld_14_027:
041B1C 21 84 3E 04 2423*  	ld hl,F14_027
041B20 22 F2 B6 04 2424*  	ld (cur_filename),hl
041B24 11 FC C2 04 2425*  	ld de,filedata
041B28 01 00 00 01 2426*  	ld bc,65536
041B2C 3E 01       2427*  	ld a,mos_load
041B2E 5B CF       2428*  	RST.LIL 08h
041B30 21 71 01 00 2429*  	ld hl,BUF_14_027
041B34 01 0A 00 00 2430*  	ld bc,10
041B38 11 3E 00 00 2431*  	ld de,62
041B3C DD 21 6C 02 2432*  	ld ix,620
       00          
041B41 CD 6D B8 04 2433*  	call vdu_load_img
041B45 C9          2434*  	ret
041B46             2435*  
041B46             2436*  ld_14_028:
041B46 21 98 3E 04 2437*  	ld hl,F14_028
041B4A 22 F2 B6 04 2438*  	ld (cur_filename),hl
041B4E 11 FC C2 04 2439*  	ld de,filedata
041B52 01 00 00 01 2440*  	ld bc,65536
041B56 3E 01       2441*  	ld a,mos_load
041B58 5B CF       2442*  	RST.LIL 08h
041B5A 21 72 01 00 2443*  	ld hl,BUF_14_028
041B5E 01 1C 00 00 2444*  	ld bc,28
041B62 11 40 00 00 2445*  	ld de,64
041B66 DD 21 00 07 2446*  	ld ix,1792
       00          
041B6B CD 6D B8 04 2447*  	call vdu_load_img
041B6F C9          2448*  	ret
041B70             2449*  
041B70             2450*  ld_14_029:
041B70 21 AC 3E 04 2451*  	ld hl,F14_029
041B74 22 F2 B6 04 2452*  	ld (cur_filename),hl
041B78 11 FC C2 04 2453*  	ld de,filedata
041B7C 01 00 00 01 2454*  	ld bc,65536
041B80 3E 01       2455*  	ld a,mos_load
041B82 5B CF       2456*  	RST.LIL 08h
041B84 21 73 01 00 2457*  	ld hl,BUF_14_029
041B88 01 2F 00 00 2458*  	ld bc,47
041B8C 11 40 00 00 2459*  	ld de,64
041B90 DD 21 C0 0B 2460*  	ld ix,3008
       00          
041B95 CD 6D B8 04 2461*  	call vdu_load_img
041B99 C9          2462*  	ret
041B9A             2463*  
041B9A             2464*  ld_14_032:
041B9A 21 C0 3E 04 2465*  	ld hl,F14_032
041B9E 22 F2 B6 04 2466*  	ld (cur_filename),hl
041BA2 11 FC C2 04 2467*  	ld de,filedata
041BA6 01 00 00 01 2468*  	ld bc,65536
041BAA 3E 01       2469*  	ld a,mos_load
041BAC 5B CF       2470*  	RST.LIL 08h
041BAE 21 74 01 00 2471*  	ld hl,BUF_14_032
041BB2 01 41 00 00 2472*  	ld bc,65
041BB6 11 40 00 00 2473*  	ld de,64
041BBA DD 21 40 10 2474*  	ld ix,4160
       00          
041BBF CD 6D B8 04 2475*  	call vdu_load_img
041BC3 C9          2476*  	ret
041BC4             2477*  
041BC4             2478*  ld_14_035:
041BC4 21 D4 3E 04 2479*  	ld hl,F14_035
041BC8 22 F2 B6 04 2480*  	ld (cur_filename),hl
041BCC 11 FC C2 04 2481*  	ld de,filedata
041BD0 01 00 00 01 2482*  	ld bc,65536
041BD4 3E 01       2483*  	ld a,mos_load
041BD6 5B CF       2484*  	RST.LIL 08h
041BD8 21 75 01 00 2485*  	ld hl,BUF_14_035
041BDC 01 3F 00 00 2486*  	ld bc,63
041BE0 11 6B 00 00 2487*  	ld de,107
041BE4 DD 21 55 1A 2488*  	ld ix,6741
       00          
041BE9 CD 6D B8 04 2489*  	call vdu_load_img
041BED C9          2490*  	ret
041BEE             2491*  
041BEE             2492*  ld_14_036:
041BEE 21 E8 3E 04 2493*  	ld hl,F14_036
041BF2 22 F2 B6 04 2494*  	ld (cur_filename),hl
041BF6 11 FC C2 04 2495*  	ld de,filedata
041BFA 01 00 00 01 2496*  	ld bc,65536
041BFE 3E 01       2497*  	ld a,mos_load
041C00 5B CF       2498*  	RST.LIL 08h
041C02 21 76 01 00 2499*  	ld hl,BUF_14_036
041C06 01 16 00 00 2500*  	ld bc,22
041C0A 11 6B 00 00 2501*  	ld de,107
041C0E DD 21 32 09 2502*  	ld ix,2354
       00          
041C13 CD 6D B8 04 2503*  	call vdu_load_img
041C17 C9          2504*  	ret
041C18             2505*  
041C18             2506*  ld_14_037:
041C18 21 FC 3E 04 2507*  	ld hl,F14_037
041C1C 22 F2 B6 04 2508*  	ld (cur_filename),hl
041C20 11 FC C2 04 2509*  	ld de,filedata
041C24 01 00 00 01 2510*  	ld bc,65536
041C28 3E 01       2511*  	ld a,mos_load
041C2A 5B CF       2512*  	RST.LIL 08h
041C2C 21 77 01 00 2513*  	ld hl,BUF_14_037
041C30 01 15 00 00 2514*  	ld bc,21
041C34 11 69 00 00 2515*  	ld de,105
041C38 DD 21 9D 08 2516*  	ld ix,2205
       00          
041C3D CD 6D B8 04 2517*  	call vdu_load_img
041C41 C9          2518*  	ret
041C42             2519*  
041C42             2520*  ld_14_038:
041C42 21 10 3F 04 2521*  	ld hl,F14_038
041C46 22 F2 B6 04 2522*  	ld (cur_filename),hl
041C4A 11 FC C2 04 2523*  	ld de,filedata
041C4E 01 00 00 01 2524*  	ld bc,65536
041C52 3E 01       2525*  	ld a,mos_load
041C54 5B CF       2526*  	RST.LIL 08h
041C56 21 78 01 00 2527*  	ld hl,BUF_14_038
041C5A 01 3F 00 00 2528*  	ld bc,63
041C5E 11 6B 00 00 2529*  	ld de,107
041C62 DD 21 55 1A 2530*  	ld ix,6741
       00          
041C67 CD 6D B8 04 2531*  	call vdu_load_img
041C6B C9          2532*  	ret
041C6C             2533*  
041C6C             2534*  ld_14_040:
041C6C 21 24 3F 04 2535*  	ld hl,F14_040
041C70 22 F2 B6 04 2536*  	ld (cur_filename),hl
041C74 11 FC C2 04 2537*  	ld de,filedata
041C78 01 00 00 01 2538*  	ld bc,65536
041C7C 3E 01       2539*  	ld a,mos_load
041C7E 5B CF       2540*  	RST.LIL 08h
041C80 21 79 01 00 2541*  	ld hl,BUF_14_040
041C84 01 6C 00 00 2542*  	ld bc,108
041C88 11 6B 00 00 2543*  	ld de,107
041C8C DD 21 24 2D 2544*  	ld ix,11556
       00          
041C91 CD 6D B8 04 2545*  	call vdu_load_img
041C95 C9          2546*  	ret
041C96             2547*  
041C96             2548*  ld_14_042:
041C96 21 38 3F 04 2549*  	ld hl,F14_042
041C9A 22 F2 B6 04 2550*  	ld (cur_filename),hl
041C9E 11 FC C2 04 2551*  	ld de,filedata
041CA2 01 00 00 01 2552*  	ld bc,65536
041CA6 3E 01       2553*  	ld a,mos_load
041CA8 5B CF       2554*  	RST.LIL 08h
041CAA 21 7A 01 00 2555*  	ld hl,BUF_14_042
041CAE 01 6A 00 00 2556*  	ld bc,106
041CB2 11 A0 00 00 2557*  	ld de,160
041CB6 DD 21 40 42 2558*  	ld ix,16960
       00          
041CBB CD 6D B8 04 2559*  	call vdu_load_img
041CBF C9          2560*  	ret
041CC0             2561*  
041CC0             2562*  ld_14_043:
041CC0 21 4C 3F 04 2563*  	ld hl,F14_043
041CC4 22 F2 B6 04 2564*  	ld (cur_filename),hl
041CC8 11 FC C2 04 2565*  	ld de,filedata
041CCC 01 00 00 01 2566*  	ld bc,65536
041CD0 3E 01       2567*  	ld a,mos_load
041CD2 5B CF       2568*  	RST.LIL 08h
041CD4 21 7B 01 00 2569*  	ld hl,BUF_14_043
041CD8 01 6B 00 00 2570*  	ld bc,107
041CDC 11 A0 00 00 2571*  	ld de,160
041CE0 DD 21 E0 42 2572*  	ld ix,17120
       00          
041CE5 CD 6D B8 04 2573*  	call vdu_load_img
041CE9 C9          2574*  	ret
041CEA             2575*  
041CEA             2576*  ld_14_044:
041CEA 21 60 3F 04 2577*  	ld hl,F14_044
041CEE 22 F2 B6 04 2578*  	ld (cur_filename),hl
041CF2 11 FC C2 04 2579*  	ld de,filedata
041CF6 01 00 00 01 2580*  	ld bc,65536
041CFA 3E 01       2581*  	ld a,mos_load
041CFC 5B CF       2582*  	RST.LIL 08h
041CFE 21 7C 01 00 2583*  	ld hl,BUF_14_044
041D02 01 40 01 00 2584*  	ld bc,320
041D06 11 A0 00 00 2585*  	ld de,160
041D0A DD 21 00 C8 2586*  	ld ix,51200
       00          
041D0F CD 6D B8 04 2587*  	call vdu_load_img
041D13 C9          2588*  	ret
041D14             2589*  
041D14             2590*  ld_15_004:
041D14 21 74 3F 04 2591*  	ld hl,F15_004
041D18 22 F2 B6 04 2592*  	ld (cur_filename),hl
041D1C 11 FC C2 04 2593*  	ld de,filedata
041D20 01 00 00 01 2594*  	ld bc,65536
041D24 3E 01       2595*  	ld a,mos_load
041D26 5B CF       2596*  	RST.LIL 08h
041D28 21 7D 01 00 2597*  	ld hl,BUF_15_004
041D2C 01 24 00 00 2598*  	ld bc,36
041D30 11 23 00 00 2599*  	ld de,35
041D34 DD 21 EC 04 2600*  	ld ix,1260
       00          
041D39 CD 6D B8 04 2601*  	call vdu_load_img
041D3D C9          2602*  	ret
041D3E             2603*  
041D3E             2604*  ld_15_009:
041D3E 21 88 3F 04 2605*  	ld hl,F15_009
041D42 22 F2 B6 04 2606*  	ld (cur_filename),hl
041D46 11 FC C2 04 2607*  	ld de,filedata
041D4A 01 00 00 01 2608*  	ld bc,65536
041D4E 3E 01       2609*  	ld a,mos_load
041D50 5B CF       2610*  	RST.LIL 08h
041D52 21 7E 01 00 2611*  	ld hl,BUF_15_009
041D56 01 23 00 00 2612*  	ld bc,35
041D5A 11 2D 00 00 2613*  	ld de,45
041D5E DD 21 27 06 2614*  	ld ix,1575
       00          
041D63 CD 6D B8 04 2615*  	call vdu_load_img
041D67 C9          2616*  	ret
041D68             2617*  
041D68             2618*  ld_15_010:
041D68 21 9C 3F 04 2619*  	ld hl,F15_010
041D6C 22 F2 B6 04 2620*  	ld (cur_filename),hl
041D70 11 FC C2 04 2621*  	ld de,filedata
041D74 01 00 00 01 2622*  	ld bc,65536
041D78 3E 01       2623*  	ld a,mos_load
041D7A 5B CF       2624*  	RST.LIL 08h
041D7C 21 7F 01 00 2625*  	ld hl,BUF_15_010
041D80 01 19 00 00 2626*  	ld bc,25
041D84 11 2D 00 00 2627*  	ld de,45
041D88 DD 21 65 04 2628*  	ld ix,1125
       00          
041D8D CD 6D B8 04 2629*  	call vdu_load_img
041D91 C9          2630*  	ret
041D92             2631*  
041D92             2632*  ld_15_011:
041D92 21 B0 3F 04 2633*  	ld hl,F15_011
041D96 22 F2 B6 04 2634*  	ld (cur_filename),hl
041D9A 11 FC C2 04 2635*  	ld de,filedata
041D9E 01 00 00 01 2636*  	ld bc,65536
041DA2 3E 01       2637*  	ld a,mos_load
041DA4 5B CF       2638*  	RST.LIL 08h
041DA6 21 80 01 00 2639*  	ld hl,BUF_15_011
041DAA 01 0F 00 00 2640*  	ld bc,15
041DAE 11 2D 00 00 2641*  	ld de,45
041DB2 DD 21 A3 02 2642*  	ld ix,675
       00          
041DB7 CD 6D B8 04 2643*  	call vdu_load_img
041DBB C9          2644*  	ret
041DBC             2645*  
041DBC             2646*  ld_15_012:
041DBC 21 C4 3F 04 2647*  	ld hl,F15_012
041DC0 22 F2 B6 04 2648*  	ld (cur_filename),hl
041DC4 11 FC C2 04 2649*  	ld de,filedata
041DC8 01 00 00 01 2650*  	ld bc,65536
041DCC 3E 01       2651*  	ld a,mos_load
041DCE 5B CF       2652*  	RST.LIL 08h
041DD0 21 81 01 00 2653*  	ld hl,BUF_15_012
041DD4 01 05 00 00 2654*  	ld bc,5
041DD8 11 2D 00 00 2655*  	ld de,45
041DDC DD 21 E1 00 2656*  	ld ix,225
       00          
041DE1 CD 6D B8 04 2657*  	call vdu_load_img
041DE5 C9          2658*  	ret
041DE6             2659*  
041DE6             2660*  ld_15_013:
041DE6 21 D8 3F 04 2661*  	ld hl,F15_013
041DEA 22 F2 B6 04 2662*  	ld (cur_filename),hl
041DEE 11 FC C2 04 2663*  	ld de,filedata
041DF2 01 00 00 01 2664*  	ld bc,65536
041DF6 3E 01       2665*  	ld a,mos_load
041DF8 5B CF       2666*  	RST.LIL 08h
041DFA 21 82 01 00 2667*  	ld hl,BUF_15_013
041DFE 01 05 00 00 2668*  	ld bc,5
041E02 11 2B 00 00 2669*  	ld de,43
041E06 DD 21 D7 00 2670*  	ld ix,215
       00          
041E0B CD 6D B8 04 2671*  	call vdu_load_img
041E0F C9          2672*  	ret
041E10             2673*  
041E10             2674*  ld_15_014:
041E10 21 EC 3F 04 2675*  	ld hl,F15_014
041E14 22 F2 B6 04 2676*  	ld (cur_filename),hl
041E18 11 FC C2 04 2677*  	ld de,filedata
041E1C 01 00 00 01 2678*  	ld bc,65536
041E20 3E 01       2679*  	ld a,mos_load
041E22 5B CF       2680*  	RST.LIL 08h
041E24 21 83 01 00 2681*  	ld hl,BUF_15_014
041E28 01 0F 00 00 2682*  	ld bc,15
041E2C 11 2D 00 00 2683*  	ld de,45
041E30 DD 21 A3 02 2684*  	ld ix,675
       00          
041E35 CD 6D B8 04 2685*  	call vdu_load_img
041E39 C9          2686*  	ret
041E3A             2687*  
041E3A             2688*  ld_15_015:
041E3A 21 00 40 04 2689*  	ld hl,F15_015
041E3E 22 F2 B6 04 2690*  	ld (cur_filename),hl
041E42 11 FC C2 04 2691*  	ld de,filedata
041E46 01 00 00 01 2692*  	ld bc,65536
041E4A 3E 01       2693*  	ld a,mos_load
041E4C 5B CF       2694*  	RST.LIL 08h
041E4E 21 84 01 00 2695*  	ld hl,BUF_15_015
041E52 01 19 00 00 2696*  	ld bc,25
041E56 11 2D 00 00 2697*  	ld de,45
041E5A DD 21 65 04 2698*  	ld ix,1125
       00          
041E5F CD 6D B8 04 2699*  	call vdu_load_img
041E63 C9          2700*  	ret
041E64             2701*  
041E64             2702*  ld_15_016:
041E64 21 14 40 04 2703*  	ld hl,F15_016
041E68 22 F2 B6 04 2704*  	ld (cur_filename),hl
041E6C 11 FC C2 04 2705*  	ld de,filedata
041E70 01 00 00 01 2706*  	ld bc,65536
041E74 3E 01       2707*  	ld a,mos_load
041E76 5B CF       2708*  	RST.LIL 08h
041E78 21 85 01 00 2709*  	ld hl,BUF_15_016
041E7C 01 23 00 00 2710*  	ld bc,35
041E80 11 2D 00 00 2711*  	ld de,45
041E84 DD 21 27 06 2712*  	ld ix,1575
       00          
041E89 CD 6D B8 04 2713*  	call vdu_load_img
041E8D C9          2714*  	ret
041E8E             2715*  
041E8E             2716*  ld_15_020:
041E8E 21 28 40 04 2717*  	ld hl,F15_020
041E92 22 F2 B6 04 2718*  	ld (cur_filename),hl
041E96 11 FC C2 04 2719*  	ld de,filedata
041E9A 01 00 00 01 2720*  	ld bc,65536
041E9E 3E 01       2721*  	ld a,mos_load
041EA0 5B CF       2722*  	RST.LIL 08h
041EA2 21 86 01 00 2723*  	ld hl,BUF_15_020
041EA6 01 2E 00 00 2724*  	ld bc,46
041EAA 11 2D 00 00 2725*  	ld de,45
041EAE DD 21 16 08 2726*  	ld ix,2070
       00          
041EB3 CD 6D B8 04 2727*  	call vdu_load_img
041EB7 C9          2728*  	ret
041EB8             2729*  
041EB8             2730*  ld_15_024:
041EB8 21 3C 40 04 2731*  	ld hl,F15_024
041EBC 22 F2 B6 04 2732*  	ld (cur_filename),hl
041EC0 11 FC C2 04 2733*  	ld de,filedata
041EC4 01 00 00 01 2734*  	ld bc,65536
041EC8 3E 01       2735*  	ld a,mos_load
041ECA 5B CF       2736*  	RST.LIL 08h
041ECC 21 87 01 00 2737*  	ld hl,BUF_15_024
041ED0 01 2E 00 00 2738*  	ld bc,46
041ED4 11 40 00 00 2739*  	ld de,64
041ED8 DD 21 80 0B 2740*  	ld ix,2944
       00          
041EDD CD 6D B8 04 2741*  	call vdu_load_img
041EE1 C9          2742*  	ret
041EE2             2743*  
041EE2             2744*  ld_15_025:
041EE2 21 50 40 04 2745*  	ld hl,F15_025
041EE6 22 F2 B6 04 2746*  	ld (cur_filename),hl
041EEA 11 FC C2 04 2747*  	ld de,filedata
041EEE 01 00 00 01 2748*  	ld bc,65536
041EF2 3E 01       2749*  	ld a,mos_load
041EF4 5B CF       2750*  	RST.LIL 08h
041EF6 21 88 01 00 2751*  	ld hl,BUF_15_025
041EFA 01 1C 00 00 2752*  	ld bc,28
041EFE 11 40 00 00 2753*  	ld de,64
041F02 DD 21 00 07 2754*  	ld ix,1792
       00          
041F07 CD 6D B8 04 2755*  	call vdu_load_img
041F0B C9          2756*  	ret
041F0C             2757*  
041F0C             2758*  ld_15_026:
041F0C 21 64 40 04 2759*  	ld hl,F15_026
041F10 22 F2 B6 04 2760*  	ld (cur_filename),hl
041F14 11 FC C2 04 2761*  	ld de,filedata
041F18 01 00 00 01 2762*  	ld bc,65536
041F1C 3E 01       2763*  	ld a,mos_load
041F1E 5B CF       2764*  	RST.LIL 08h
041F20 21 89 01 00 2765*  	ld hl,BUF_15_026
041F24 01 09 00 00 2766*  	ld bc,9
041F28 11 40 00 00 2767*  	ld de,64
041F2C DD 21 40 02 2768*  	ld ix,576
       00          
041F31 CD 6D B8 04 2769*  	call vdu_load_img
041F35 C9          2770*  	ret
041F36             2771*  
041F36             2772*  ld_15_027:
041F36 21 78 40 04 2773*  	ld hl,F15_027
041F3A 22 F2 B6 04 2774*  	ld (cur_filename),hl
041F3E 11 FC C2 04 2775*  	ld de,filedata
041F42 01 00 00 01 2776*  	ld bc,65536
041F46 3E 01       2777*  	ld a,mos_load
041F48 5B CF       2778*  	RST.LIL 08h
041F4A 21 8A 01 00 2779*  	ld hl,BUF_15_027
041F4E 01 0A 00 00 2780*  	ld bc,10
041F52 11 3E 00 00 2781*  	ld de,62
041F56 DD 21 6C 02 2782*  	ld ix,620
       00          
041F5B CD 6D B8 04 2783*  	call vdu_load_img
041F5F C9          2784*  	ret
041F60             2785*  
041F60             2786*  ld_15_028:
041F60 21 8C 40 04 2787*  	ld hl,F15_028
041F64 22 F2 B6 04 2788*  	ld (cur_filename),hl
041F68 11 FC C2 04 2789*  	ld de,filedata
041F6C 01 00 00 01 2790*  	ld bc,65536
041F70 3E 01       2791*  	ld a,mos_load
041F72 5B CF       2792*  	RST.LIL 08h
041F74 21 8B 01 00 2793*  	ld hl,BUF_15_028
041F78 01 1C 00 00 2794*  	ld bc,28
041F7C 11 40 00 00 2795*  	ld de,64
041F80 DD 21 00 07 2796*  	ld ix,1792
       00          
041F85 CD 6D B8 04 2797*  	call vdu_load_img
041F89 C9          2798*  	ret
041F8A             2799*  
041F8A             2800*  ld_15_029:
041F8A 21 A0 40 04 2801*  	ld hl,F15_029
041F8E 22 F2 B6 04 2802*  	ld (cur_filename),hl
041F92 11 FC C2 04 2803*  	ld de,filedata
041F96 01 00 00 01 2804*  	ld bc,65536
041F9A 3E 01       2805*  	ld a,mos_load
041F9C 5B CF       2806*  	RST.LIL 08h
041F9E 21 8C 01 00 2807*  	ld hl,BUF_15_029
041FA2 01 2F 00 00 2808*  	ld bc,47
041FA6 11 40 00 00 2809*  	ld de,64
041FAA DD 21 C0 0B 2810*  	ld ix,3008
       00          
041FAF CD 6D B8 04 2811*  	call vdu_load_img
041FB3 C9          2812*  	ret
041FB4             2813*  
041FB4             2814*  ld_15_032:
041FB4 21 B4 40 04 2815*  	ld hl,F15_032
041FB8 22 F2 B6 04 2816*  	ld (cur_filename),hl
041FBC 11 FC C2 04 2817*  	ld de,filedata
041FC0 01 00 00 01 2818*  	ld bc,65536
041FC4 3E 01       2819*  	ld a,mos_load
041FC6 5B CF       2820*  	RST.LIL 08h
041FC8 21 8D 01 00 2821*  	ld hl,BUF_15_032
041FCC 01 41 00 00 2822*  	ld bc,65
041FD0 11 40 00 00 2823*  	ld de,64
041FD4 DD 21 40 10 2824*  	ld ix,4160
       00          
041FD9 CD 6D B8 04 2825*  	call vdu_load_img
041FDD C9          2826*  	ret
041FDE             2827*  
041FDE             2828*  ld_15_035:
041FDE 21 C8 40 04 2829*  	ld hl,F15_035
041FE2 22 F2 B6 04 2830*  	ld (cur_filename),hl
041FE6 11 FC C2 04 2831*  	ld de,filedata
041FEA 01 00 00 01 2832*  	ld bc,65536
041FEE 3E 01       2833*  	ld a,mos_load
041FF0 5B CF       2834*  	RST.LIL 08h
041FF2 21 8E 01 00 2835*  	ld hl,BUF_15_035
041FF6 01 3F 00 00 2836*  	ld bc,63
041FFA 11 6B 00 00 2837*  	ld de,107
041FFE DD 21 55 1A 2838*  	ld ix,6741
       00          
042003 CD 6D B8 04 2839*  	call vdu_load_img
042007 C9          2840*  	ret
042008             2841*  
042008             2842*  ld_15_036:
042008 21 DC 40 04 2843*  	ld hl,F15_036
04200C 22 F2 B6 04 2844*  	ld (cur_filename),hl
042010 11 FC C2 04 2845*  	ld de,filedata
042014 01 00 00 01 2846*  	ld bc,65536
042018 3E 01       2847*  	ld a,mos_load
04201A 5B CF       2848*  	RST.LIL 08h
04201C 21 8F 01 00 2849*  	ld hl,BUF_15_036
042020 01 16 00 00 2850*  	ld bc,22
042024 11 6B 00 00 2851*  	ld de,107
042028 DD 21 32 09 2852*  	ld ix,2354
       00          
04202D CD 6D B8 04 2853*  	call vdu_load_img
042031 C9          2854*  	ret
042032             2855*  
042032             2856*  ld_15_037:
042032 21 F0 40 04 2857*  	ld hl,F15_037
042036 22 F2 B6 04 2858*  	ld (cur_filename),hl
04203A 11 FC C2 04 2859*  	ld de,filedata
04203E 01 00 00 01 2860*  	ld bc,65536
042042 3E 01       2861*  	ld a,mos_load
042044 5B CF       2862*  	RST.LIL 08h
042046 21 90 01 00 2863*  	ld hl,BUF_15_037
04204A 01 15 00 00 2864*  	ld bc,21
04204E 11 69 00 00 2865*  	ld de,105
042052 DD 21 9D 08 2866*  	ld ix,2205
       00          
042057 CD 6D B8 04 2867*  	call vdu_load_img
04205B C9          2868*  	ret
04205C             2869*  
04205C             2870*  ld_15_038:
04205C 21 04 41 04 2871*  	ld hl,F15_038
042060 22 F2 B6 04 2872*  	ld (cur_filename),hl
042064 11 FC C2 04 2873*  	ld de,filedata
042068 01 00 00 01 2874*  	ld bc,65536
04206C 3E 01       2875*  	ld a,mos_load
04206E 5B CF       2876*  	RST.LIL 08h
042070 21 91 01 00 2877*  	ld hl,BUF_15_038
042074 01 3F 00 00 2878*  	ld bc,63
042078 11 6B 00 00 2879*  	ld de,107
04207C DD 21 55 1A 2880*  	ld ix,6741
       00          
042081 CD 6D B8 04 2881*  	call vdu_load_img
042085 C9          2882*  	ret
042086             2883*  
042086             2884*  ld_15_040:
042086 21 18 41 04 2885*  	ld hl,F15_040
04208A 22 F2 B6 04 2886*  	ld (cur_filename),hl
04208E 11 FC C2 04 2887*  	ld de,filedata
042092 01 00 00 01 2888*  	ld bc,65536
042096 3E 01       2889*  	ld a,mos_load
042098 5B CF       2890*  	RST.LIL 08h
04209A 21 92 01 00 2891*  	ld hl,BUF_15_040
04209E 01 6C 00 00 2892*  	ld bc,108
0420A2 11 6B 00 00 2893*  	ld de,107
0420A6 DD 21 24 2D 2894*  	ld ix,11556
       00          
0420AB CD 6D B8 04 2895*  	call vdu_load_img
0420AF C9          2896*  	ret
0420B0             2897*  
0420B0             2898*  ld_15_042:
0420B0 21 2C 41 04 2899*  	ld hl,F15_042
0420B4 22 F2 B6 04 2900*  	ld (cur_filename),hl
0420B8 11 FC C2 04 2901*  	ld de,filedata
0420BC 01 00 00 01 2902*  	ld bc,65536
0420C0 3E 01       2903*  	ld a,mos_load
0420C2 5B CF       2904*  	RST.LIL 08h
0420C4 21 93 01 00 2905*  	ld hl,BUF_15_042
0420C8 01 6A 00 00 2906*  	ld bc,106
0420CC 11 A0 00 00 2907*  	ld de,160
0420D0 DD 21 40 42 2908*  	ld ix,16960
       00          
0420D5 CD 6D B8 04 2909*  	call vdu_load_img
0420D9 C9          2910*  	ret
0420DA             2911*  
0420DA             2912*  ld_15_043:
0420DA 21 40 41 04 2913*  	ld hl,F15_043
0420DE 22 F2 B6 04 2914*  	ld (cur_filename),hl
0420E2 11 FC C2 04 2915*  	ld de,filedata
0420E6 01 00 00 01 2916*  	ld bc,65536
0420EA 3E 01       2917*  	ld a,mos_load
0420EC 5B CF       2918*  	RST.LIL 08h
0420EE 21 94 01 00 2919*  	ld hl,BUF_15_043
0420F2 01 6B 00 00 2920*  	ld bc,107
0420F6 11 A0 00 00 2921*  	ld de,160
0420FA DD 21 E0 42 2922*  	ld ix,17120
       00          
0420FF CD 6D B8 04 2923*  	call vdu_load_img
042103 C9          2924*  	ret
042104             2925*  
042104             2926*  ld_15_044:
042104 21 54 41 04 2927*  	ld hl,F15_044
042108 22 F2 B6 04 2928*  	ld (cur_filename),hl
04210C 11 FC C2 04 2929*  	ld de,filedata
042110 01 00 00 01 2930*  	ld bc,65536
042114 3E 01       2931*  	ld a,mos_load
042116 5B CF       2932*  	RST.LIL 08h
042118 21 95 01 00 2933*  	ld hl,BUF_15_044
04211C 01 40 01 00 2934*  	ld bc,320
042120 11 A0 00 00 2935*  	ld de,160
042124 DD 21 00 C8 2936*  	ld ix,51200
       00          
042129 CD 6D B8 04 2937*  	call vdu_load_img
04212D C9          2938*  	ret
04212E             2939*  
04212E             2940*  ld_16_004:
04212E 21 68 41 04 2941*  	ld hl,F16_004
042132 22 F2 B6 04 2942*  	ld (cur_filename),hl
042136 11 FC C2 04 2943*  	ld de,filedata
04213A 01 00 00 01 2944*  	ld bc,65536
04213E 3E 01       2945*  	ld a,mos_load
042140 5B CF       2946*  	RST.LIL 08h
042142 21 96 01 00 2947*  	ld hl,BUF_16_004
042146 01 24 00 00 2948*  	ld bc,36
04214A 11 23 00 00 2949*  	ld de,35
04214E DD 21 EC 04 2950*  	ld ix,1260
       00          
042153 CD 6D B8 04 2951*  	call vdu_load_img
042157 C9          2952*  	ret
042158             2953*  
042158             2954*  ld_16_009:
042158 21 7C 41 04 2955*  	ld hl,F16_009
04215C 22 F2 B6 04 2956*  	ld (cur_filename),hl
042160 11 FC C2 04 2957*  	ld de,filedata
042164 01 00 00 01 2958*  	ld bc,65536
042168 3E 01       2959*  	ld a,mos_load
04216A 5B CF       2960*  	RST.LIL 08h
04216C 21 97 01 00 2961*  	ld hl,BUF_16_009
042170 01 23 00 00 2962*  	ld bc,35
042174 11 2D 00 00 2963*  	ld de,45
042178 DD 21 27 06 2964*  	ld ix,1575
       00          
04217D CD 6D B8 04 2965*  	call vdu_load_img
042181 C9          2966*  	ret
042182             2967*  
042182             2968*  ld_16_010:
042182 21 90 41 04 2969*  	ld hl,F16_010
042186 22 F2 B6 04 2970*  	ld (cur_filename),hl
04218A 11 FC C2 04 2971*  	ld de,filedata
04218E 01 00 00 01 2972*  	ld bc,65536
042192 3E 01       2973*  	ld a,mos_load
042194 5B CF       2974*  	RST.LIL 08h
042196 21 98 01 00 2975*  	ld hl,BUF_16_010
04219A 01 19 00 00 2976*  	ld bc,25
04219E 11 2D 00 00 2977*  	ld de,45
0421A2 DD 21 65 04 2978*  	ld ix,1125
       00          
0421A7 CD 6D B8 04 2979*  	call vdu_load_img
0421AB C9          2980*  	ret
0421AC             2981*  
0421AC             2982*  ld_16_011:
0421AC 21 A4 41 04 2983*  	ld hl,F16_011
0421B0 22 F2 B6 04 2984*  	ld (cur_filename),hl
0421B4 11 FC C2 04 2985*  	ld de,filedata
0421B8 01 00 00 01 2986*  	ld bc,65536
0421BC 3E 01       2987*  	ld a,mos_load
0421BE 5B CF       2988*  	RST.LIL 08h
0421C0 21 99 01 00 2989*  	ld hl,BUF_16_011
0421C4 01 0F 00 00 2990*  	ld bc,15
0421C8 11 2D 00 00 2991*  	ld de,45
0421CC DD 21 A3 02 2992*  	ld ix,675
       00          
0421D1 CD 6D B8 04 2993*  	call vdu_load_img
0421D5 C9          2994*  	ret
0421D6             2995*  
0421D6             2996*  ld_16_012:
0421D6 21 B8 41 04 2997*  	ld hl,F16_012
0421DA 22 F2 B6 04 2998*  	ld (cur_filename),hl
0421DE 11 FC C2 04 2999*  	ld de,filedata
0421E2 01 00 00 01 3000*  	ld bc,65536
0421E6 3E 01       3001*  	ld a,mos_load
0421E8 5B CF       3002*  	RST.LIL 08h
0421EA 21 9A 01 00 3003*  	ld hl,BUF_16_012
0421EE 01 05 00 00 3004*  	ld bc,5
0421F2 11 2D 00 00 3005*  	ld de,45
0421F6 DD 21 E1 00 3006*  	ld ix,225
       00          
0421FB CD 6D B8 04 3007*  	call vdu_load_img
0421FF C9          3008*  	ret
042200             3009*  
042200             3010*  ld_16_013:
042200 21 CC 41 04 3011*  	ld hl,F16_013
042204 22 F2 B6 04 3012*  	ld (cur_filename),hl
042208 11 FC C2 04 3013*  	ld de,filedata
04220C 01 00 00 01 3014*  	ld bc,65536
042210 3E 01       3015*  	ld a,mos_load
042212 5B CF       3016*  	RST.LIL 08h
042214 21 9B 01 00 3017*  	ld hl,BUF_16_013
042218 01 05 00 00 3018*  	ld bc,5
04221C 11 2B 00 00 3019*  	ld de,43
042220 DD 21 D7 00 3020*  	ld ix,215
       00          
042225 CD 6D B8 04 3021*  	call vdu_load_img
042229 C9          3022*  	ret
04222A             3023*  
04222A             3024*  ld_16_014:
04222A 21 E0 41 04 3025*  	ld hl,F16_014
04222E 22 F2 B6 04 3026*  	ld (cur_filename),hl
042232 11 FC C2 04 3027*  	ld de,filedata
042236 01 00 00 01 3028*  	ld bc,65536
04223A 3E 01       3029*  	ld a,mos_load
04223C 5B CF       3030*  	RST.LIL 08h
04223E 21 9C 01 00 3031*  	ld hl,BUF_16_014
042242 01 0F 00 00 3032*  	ld bc,15
042246 11 2D 00 00 3033*  	ld de,45
04224A DD 21 A3 02 3034*  	ld ix,675
       00          
04224F CD 6D B8 04 3035*  	call vdu_load_img
042253 C9          3036*  	ret
042254             3037*  
042254             3038*  ld_16_015:
042254 21 F4 41 04 3039*  	ld hl,F16_015
042258 22 F2 B6 04 3040*  	ld (cur_filename),hl
04225C 11 FC C2 04 3041*  	ld de,filedata
042260 01 00 00 01 3042*  	ld bc,65536
042264 3E 01       3043*  	ld a,mos_load
042266 5B CF       3044*  	RST.LIL 08h
042268 21 9D 01 00 3045*  	ld hl,BUF_16_015
04226C 01 19 00 00 3046*  	ld bc,25
042270 11 2D 00 00 3047*  	ld de,45
042274 DD 21 65 04 3048*  	ld ix,1125
       00          
042279 CD 6D B8 04 3049*  	call vdu_load_img
04227D C9          3050*  	ret
04227E             3051*  
04227E             3052*  ld_16_016:
04227E 21 08 42 04 3053*  	ld hl,F16_016
042282 22 F2 B6 04 3054*  	ld (cur_filename),hl
042286 11 FC C2 04 3055*  	ld de,filedata
04228A 01 00 00 01 3056*  	ld bc,65536
04228E 3E 01       3057*  	ld a,mos_load
042290 5B CF       3058*  	RST.LIL 08h
042292 21 9E 01 00 3059*  	ld hl,BUF_16_016
042296 01 23 00 00 3060*  	ld bc,35
04229A 11 2D 00 00 3061*  	ld de,45
04229E DD 21 27 06 3062*  	ld ix,1575
       00          
0422A3 CD 6D B8 04 3063*  	call vdu_load_img
0422A7 C9          3064*  	ret
0422A8             3065*  
0422A8             3066*  ld_16_020:
0422A8 21 1C 42 04 3067*  	ld hl,F16_020
0422AC 22 F2 B6 04 3068*  	ld (cur_filename),hl
0422B0 11 FC C2 04 3069*  	ld de,filedata
0422B4 01 00 00 01 3070*  	ld bc,65536
0422B8 3E 01       3071*  	ld a,mos_load
0422BA 5B CF       3072*  	RST.LIL 08h
0422BC 21 9F 01 00 3073*  	ld hl,BUF_16_020
0422C0 01 2E 00 00 3074*  	ld bc,46
0422C4 11 2D 00 00 3075*  	ld de,45
0422C8 DD 21 16 08 3076*  	ld ix,2070
       00          
0422CD CD 6D B8 04 3077*  	call vdu_load_img
0422D1 C9          3078*  	ret
0422D2             3079*  
0422D2             3080*  ld_16_024:
0422D2 21 30 42 04 3081*  	ld hl,F16_024
0422D6 22 F2 B6 04 3082*  	ld (cur_filename),hl
0422DA 11 FC C2 04 3083*  	ld de,filedata
0422DE 01 00 00 01 3084*  	ld bc,65536
0422E2 3E 01       3085*  	ld a,mos_load
0422E4 5B CF       3086*  	RST.LIL 08h
0422E6 21 A0 01 00 3087*  	ld hl,BUF_16_024
0422EA 01 2E 00 00 3088*  	ld bc,46
0422EE 11 40 00 00 3089*  	ld de,64
0422F2 DD 21 80 0B 3090*  	ld ix,2944
       00          
0422F7 CD 6D B8 04 3091*  	call vdu_load_img
0422FB C9          3092*  	ret
0422FC             3093*  
0422FC             3094*  ld_16_025:
0422FC 21 44 42 04 3095*  	ld hl,F16_025
042300 22 F2 B6 04 3096*  	ld (cur_filename),hl
042304 11 FC C2 04 3097*  	ld de,filedata
042308 01 00 00 01 3098*  	ld bc,65536
04230C 3E 01       3099*  	ld a,mos_load
04230E 5B CF       3100*  	RST.LIL 08h
042310 21 A1 01 00 3101*  	ld hl,BUF_16_025
042314 01 1C 00 00 3102*  	ld bc,28
042318 11 40 00 00 3103*  	ld de,64
04231C DD 21 00 07 3104*  	ld ix,1792
       00          
042321 CD 6D B8 04 3105*  	call vdu_load_img
042325 C9          3106*  	ret
042326             3107*  
042326             3108*  ld_16_026:
042326 21 58 42 04 3109*  	ld hl,F16_026
04232A 22 F2 B6 04 3110*  	ld (cur_filename),hl
04232E 11 FC C2 04 3111*  	ld de,filedata
042332 01 00 00 01 3112*  	ld bc,65536
042336 3E 01       3113*  	ld a,mos_load
042338 5B CF       3114*  	RST.LIL 08h
04233A 21 A2 01 00 3115*  	ld hl,BUF_16_026
04233E 01 09 00 00 3116*  	ld bc,9
042342 11 40 00 00 3117*  	ld de,64
042346 DD 21 40 02 3118*  	ld ix,576
       00          
04234B CD 6D B8 04 3119*  	call vdu_load_img
04234F C9          3120*  	ret
042350             3121*  
042350             3122*  ld_16_027:
042350 21 6C 42 04 3123*  	ld hl,F16_027
042354 22 F2 B6 04 3124*  	ld (cur_filename),hl
042358 11 FC C2 04 3125*  	ld de,filedata
04235C 01 00 00 01 3126*  	ld bc,65536
042360 3E 01       3127*  	ld a,mos_load
042362 5B CF       3128*  	RST.LIL 08h
042364 21 A3 01 00 3129*  	ld hl,BUF_16_027
042368 01 0A 00 00 3130*  	ld bc,10
04236C 11 3E 00 00 3131*  	ld de,62
042370 DD 21 6C 02 3132*  	ld ix,620
       00          
042375 CD 6D B8 04 3133*  	call vdu_load_img
042379 C9          3134*  	ret
04237A             3135*  
04237A             3136*  ld_16_028:
04237A 21 80 42 04 3137*  	ld hl,F16_028
04237E 22 F2 B6 04 3138*  	ld (cur_filename),hl
042382 11 FC C2 04 3139*  	ld de,filedata
042386 01 00 00 01 3140*  	ld bc,65536
04238A 3E 01       3141*  	ld a,mos_load
04238C 5B CF       3142*  	RST.LIL 08h
04238E 21 A4 01 00 3143*  	ld hl,BUF_16_028
042392 01 1C 00 00 3144*  	ld bc,28
042396 11 40 00 00 3145*  	ld de,64
04239A DD 21 00 07 3146*  	ld ix,1792
       00          
04239F CD 6D B8 04 3147*  	call vdu_load_img
0423A3 C9          3148*  	ret
0423A4             3149*  
0423A4             3150*  ld_16_029:
0423A4 21 94 42 04 3151*  	ld hl,F16_029
0423A8 22 F2 B6 04 3152*  	ld (cur_filename),hl
0423AC 11 FC C2 04 3153*  	ld de,filedata
0423B0 01 00 00 01 3154*  	ld bc,65536
0423B4 3E 01       3155*  	ld a,mos_load
0423B6 5B CF       3156*  	RST.LIL 08h
0423B8 21 A5 01 00 3157*  	ld hl,BUF_16_029
0423BC 01 2F 00 00 3158*  	ld bc,47
0423C0 11 40 00 00 3159*  	ld de,64
0423C4 DD 21 C0 0B 3160*  	ld ix,3008
       00          
0423C9 CD 6D B8 04 3161*  	call vdu_load_img
0423CD C9          3162*  	ret
0423CE             3163*  
0423CE             3164*  ld_16_032:
0423CE 21 A8 42 04 3165*  	ld hl,F16_032
0423D2 22 F2 B6 04 3166*  	ld (cur_filename),hl
0423D6 11 FC C2 04 3167*  	ld de,filedata
0423DA 01 00 00 01 3168*  	ld bc,65536
0423DE 3E 01       3169*  	ld a,mos_load
0423E0 5B CF       3170*  	RST.LIL 08h
0423E2 21 A6 01 00 3171*  	ld hl,BUF_16_032
0423E6 01 41 00 00 3172*  	ld bc,65
0423EA 11 40 00 00 3173*  	ld de,64
0423EE DD 21 40 10 3174*  	ld ix,4160
       00          
0423F3 CD 6D B8 04 3175*  	call vdu_load_img
0423F7 C9          3176*  	ret
0423F8             3177*  
0423F8             3178*  ld_16_035:
0423F8 21 BC 42 04 3179*  	ld hl,F16_035
0423FC 22 F2 B6 04 3180*  	ld (cur_filename),hl
042400 11 FC C2 04 3181*  	ld de,filedata
042404 01 00 00 01 3182*  	ld bc,65536
042408 3E 01       3183*  	ld a,mos_load
04240A 5B CF       3184*  	RST.LIL 08h
04240C 21 A7 01 00 3185*  	ld hl,BUF_16_035
042410 01 3F 00 00 3186*  	ld bc,63
042414 11 6B 00 00 3187*  	ld de,107
042418 DD 21 55 1A 3188*  	ld ix,6741
       00          
04241D CD 6D B8 04 3189*  	call vdu_load_img
042421 C9          3190*  	ret
042422             3191*  
042422             3192*  ld_16_036:
042422 21 D0 42 04 3193*  	ld hl,F16_036
042426 22 F2 B6 04 3194*  	ld (cur_filename),hl
04242A 11 FC C2 04 3195*  	ld de,filedata
04242E 01 00 00 01 3196*  	ld bc,65536
042432 3E 01       3197*  	ld a,mos_load
042434 5B CF       3198*  	RST.LIL 08h
042436 21 A8 01 00 3199*  	ld hl,BUF_16_036
04243A 01 16 00 00 3200*  	ld bc,22
04243E 11 6B 00 00 3201*  	ld de,107
042442 DD 21 32 09 3202*  	ld ix,2354
       00          
042447 CD 6D B8 04 3203*  	call vdu_load_img
04244B C9          3204*  	ret
04244C             3205*  
04244C             3206*  ld_16_037:
04244C 21 E4 42 04 3207*  	ld hl,F16_037
042450 22 F2 B6 04 3208*  	ld (cur_filename),hl
042454 11 FC C2 04 3209*  	ld de,filedata
042458 01 00 00 01 3210*  	ld bc,65536
04245C 3E 01       3211*  	ld a,mos_load
04245E 5B CF       3212*  	RST.LIL 08h
042460 21 A9 01 00 3213*  	ld hl,BUF_16_037
042464 01 15 00 00 3214*  	ld bc,21
042468 11 69 00 00 3215*  	ld de,105
04246C DD 21 9D 08 3216*  	ld ix,2205
       00          
042471 CD 6D B8 04 3217*  	call vdu_load_img
042475 C9          3218*  	ret
042476             3219*  
042476             3220*  ld_16_038:
042476 21 F8 42 04 3221*  	ld hl,F16_038
04247A 22 F2 B6 04 3222*  	ld (cur_filename),hl
04247E 11 FC C2 04 3223*  	ld de,filedata
042482 01 00 00 01 3224*  	ld bc,65536
042486 3E 01       3225*  	ld a,mos_load
042488 5B CF       3226*  	RST.LIL 08h
04248A 21 AA 01 00 3227*  	ld hl,BUF_16_038
04248E 01 3F 00 00 3228*  	ld bc,63
042492 11 6B 00 00 3229*  	ld de,107
042496 DD 21 55 1A 3230*  	ld ix,6741
       00          
04249B CD 6D B8 04 3231*  	call vdu_load_img
04249F C9          3232*  	ret
0424A0             3233*  
0424A0             3234*  ld_16_040:
0424A0 21 0C 43 04 3235*  	ld hl,F16_040
0424A4 22 F2 B6 04 3236*  	ld (cur_filename),hl
0424A8 11 FC C2 04 3237*  	ld de,filedata
0424AC 01 00 00 01 3238*  	ld bc,65536
0424B0 3E 01       3239*  	ld a,mos_load
0424B2 5B CF       3240*  	RST.LIL 08h
0424B4 21 AB 01 00 3241*  	ld hl,BUF_16_040
0424B8 01 6C 00 00 3242*  	ld bc,108
0424BC 11 6B 00 00 3243*  	ld de,107
0424C0 DD 21 24 2D 3244*  	ld ix,11556
       00          
0424C5 CD 6D B8 04 3245*  	call vdu_load_img
0424C9 C9          3246*  	ret
0424CA             3247*  
0424CA             3248*  ld_16_042:
0424CA 21 20 43 04 3249*  	ld hl,F16_042
0424CE 22 F2 B6 04 3250*  	ld (cur_filename),hl
0424D2 11 FC C2 04 3251*  	ld de,filedata
0424D6 01 00 00 01 3252*  	ld bc,65536
0424DA 3E 01       3253*  	ld a,mos_load
0424DC 5B CF       3254*  	RST.LIL 08h
0424DE 21 AC 01 00 3255*  	ld hl,BUF_16_042
0424E2 01 6A 00 00 3256*  	ld bc,106
0424E6 11 A0 00 00 3257*  	ld de,160
0424EA DD 21 40 42 3258*  	ld ix,16960
       00          
0424EF CD 6D B8 04 3259*  	call vdu_load_img
0424F3 C9          3260*  	ret
0424F4             3261*  
0424F4             3262*  ld_16_043:
0424F4 21 34 43 04 3263*  	ld hl,F16_043
0424F8 22 F2 B6 04 3264*  	ld (cur_filename),hl
0424FC 11 FC C2 04 3265*  	ld de,filedata
042500 01 00 00 01 3266*  	ld bc,65536
042504 3E 01       3267*  	ld a,mos_load
042506 5B CF       3268*  	RST.LIL 08h
042508 21 AD 01 00 3269*  	ld hl,BUF_16_043
04250C 01 6B 00 00 3270*  	ld bc,107
042510 11 A0 00 00 3271*  	ld de,160
042514 DD 21 E0 42 3272*  	ld ix,17120
       00          
042519 CD 6D B8 04 3273*  	call vdu_load_img
04251D C9          3274*  	ret
04251E             3275*  
04251E             3276*  ld_16_044:
04251E 21 48 43 04 3277*  	ld hl,F16_044
042522 22 F2 B6 04 3278*  	ld (cur_filename),hl
042526 11 FC C2 04 3279*  	ld de,filedata
04252A 01 00 00 01 3280*  	ld bc,65536
04252E 3E 01       3281*  	ld a,mos_load
042530 5B CF       3282*  	RST.LIL 08h
042532 21 AE 01 00 3283*  	ld hl,BUF_16_044
042536 01 40 01 00 3284*  	ld bc,320
04253A 11 A0 00 00 3285*  	ld de,160
04253E DD 21 00 C8 3286*  	ld ix,51200
       00          
042543 CD 6D B8 04 3287*  	call vdu_load_img
042547 C9          3288*  	ret
042548             3289*  
042548             3290*  ld_17_004:
042548 21 5C 43 04 3291*  	ld hl,F17_004
04254C 22 F2 B6 04 3292*  	ld (cur_filename),hl
042550 11 FC C2 04 3293*  	ld de,filedata
042554 01 00 00 01 3294*  	ld bc,65536
042558 3E 01       3295*  	ld a,mos_load
04255A 5B CF       3296*  	RST.LIL 08h
04255C 21 AF 01 00 3297*  	ld hl,BUF_17_004
042560 01 24 00 00 3298*  	ld bc,36
042564 11 23 00 00 3299*  	ld de,35
042568 DD 21 EC 04 3300*  	ld ix,1260
       00          
04256D CD 6D B8 04 3301*  	call vdu_load_img
042571 C9          3302*  	ret
042572             3303*  
042572             3304*  ld_17_009:
042572 21 70 43 04 3305*  	ld hl,F17_009
042576 22 F2 B6 04 3306*  	ld (cur_filename),hl
04257A 11 FC C2 04 3307*  	ld de,filedata
04257E 01 00 00 01 3308*  	ld bc,65536
042582 3E 01       3309*  	ld a,mos_load
042584 5B CF       3310*  	RST.LIL 08h
042586 21 B0 01 00 3311*  	ld hl,BUF_17_009
04258A 01 23 00 00 3312*  	ld bc,35
04258E 11 2D 00 00 3313*  	ld de,45
042592 DD 21 27 06 3314*  	ld ix,1575
       00          
042597 CD 6D B8 04 3315*  	call vdu_load_img
04259B C9          3316*  	ret
04259C             3317*  
04259C             3318*  ld_17_010:
04259C 21 84 43 04 3319*  	ld hl,F17_010
0425A0 22 F2 B6 04 3320*  	ld (cur_filename),hl
0425A4 11 FC C2 04 3321*  	ld de,filedata
0425A8 01 00 00 01 3322*  	ld bc,65536
0425AC 3E 01       3323*  	ld a,mos_load
0425AE 5B CF       3324*  	RST.LIL 08h
0425B0 21 B1 01 00 3325*  	ld hl,BUF_17_010
0425B4 01 19 00 00 3326*  	ld bc,25
0425B8 11 2D 00 00 3327*  	ld de,45
0425BC DD 21 65 04 3328*  	ld ix,1125
       00          
0425C1 CD 6D B8 04 3329*  	call vdu_load_img
0425C5 C9          3330*  	ret
0425C6             3331*  
0425C6             3332*  ld_17_011:
0425C6 21 98 43 04 3333*  	ld hl,F17_011
0425CA 22 F2 B6 04 3334*  	ld (cur_filename),hl
0425CE 11 FC C2 04 3335*  	ld de,filedata
0425D2 01 00 00 01 3336*  	ld bc,65536
0425D6 3E 01       3337*  	ld a,mos_load
0425D8 5B CF       3338*  	RST.LIL 08h
0425DA 21 B2 01 00 3339*  	ld hl,BUF_17_011
0425DE 01 0F 00 00 3340*  	ld bc,15
0425E2 11 2D 00 00 3341*  	ld de,45
0425E6 DD 21 A3 02 3342*  	ld ix,675
       00          
0425EB CD 6D B8 04 3343*  	call vdu_load_img
0425EF C9          3344*  	ret
0425F0             3345*  
0425F0             3346*  ld_17_012:
0425F0 21 AC 43 04 3347*  	ld hl,F17_012
0425F4 22 F2 B6 04 3348*  	ld (cur_filename),hl
0425F8 11 FC C2 04 3349*  	ld de,filedata
0425FC 01 00 00 01 3350*  	ld bc,65536
042600 3E 01       3351*  	ld a,mos_load
042602 5B CF       3352*  	RST.LIL 08h
042604 21 B3 01 00 3353*  	ld hl,BUF_17_012
042608 01 05 00 00 3354*  	ld bc,5
04260C 11 2D 00 00 3355*  	ld de,45
042610 DD 21 E1 00 3356*  	ld ix,225
       00          
042615 CD 6D B8 04 3357*  	call vdu_load_img
042619 C9          3358*  	ret
04261A             3359*  
04261A             3360*  ld_17_013:
04261A 21 C0 43 04 3361*  	ld hl,F17_013
04261E 22 F2 B6 04 3362*  	ld (cur_filename),hl
042622 11 FC C2 04 3363*  	ld de,filedata
042626 01 00 00 01 3364*  	ld bc,65536
04262A 3E 01       3365*  	ld a,mos_load
04262C 5B CF       3366*  	RST.LIL 08h
04262E 21 B4 01 00 3367*  	ld hl,BUF_17_013
042632 01 05 00 00 3368*  	ld bc,5
042636 11 2B 00 00 3369*  	ld de,43
04263A DD 21 D7 00 3370*  	ld ix,215
       00          
04263F CD 6D B8 04 3371*  	call vdu_load_img
042643 C9          3372*  	ret
042644             3373*  
042644             3374*  ld_17_014:
042644 21 D4 43 04 3375*  	ld hl,F17_014
042648 22 F2 B6 04 3376*  	ld (cur_filename),hl
04264C 11 FC C2 04 3377*  	ld de,filedata
042650 01 00 00 01 3378*  	ld bc,65536
042654 3E 01       3379*  	ld a,mos_load
042656 5B CF       3380*  	RST.LIL 08h
042658 21 B5 01 00 3381*  	ld hl,BUF_17_014
04265C 01 0F 00 00 3382*  	ld bc,15
042660 11 2D 00 00 3383*  	ld de,45
042664 DD 21 A3 02 3384*  	ld ix,675
       00          
042669 CD 6D B8 04 3385*  	call vdu_load_img
04266D C9          3386*  	ret
04266E             3387*  
04266E             3388*  ld_17_015:
04266E 21 E8 43 04 3389*  	ld hl,F17_015
042672 22 F2 B6 04 3390*  	ld (cur_filename),hl
042676 11 FC C2 04 3391*  	ld de,filedata
04267A 01 00 00 01 3392*  	ld bc,65536
04267E 3E 01       3393*  	ld a,mos_load
042680 5B CF       3394*  	RST.LIL 08h
042682 21 B6 01 00 3395*  	ld hl,BUF_17_015
042686 01 19 00 00 3396*  	ld bc,25
04268A 11 2D 00 00 3397*  	ld de,45
04268E DD 21 65 04 3398*  	ld ix,1125
       00          
042693 CD 6D B8 04 3399*  	call vdu_load_img
042697 C9          3400*  	ret
042698             3401*  
042698             3402*  ld_17_016:
042698 21 FC 43 04 3403*  	ld hl,F17_016
04269C 22 F2 B6 04 3404*  	ld (cur_filename),hl
0426A0 11 FC C2 04 3405*  	ld de,filedata
0426A4 01 00 00 01 3406*  	ld bc,65536
0426A8 3E 01       3407*  	ld a,mos_load
0426AA 5B CF       3408*  	RST.LIL 08h
0426AC 21 B7 01 00 3409*  	ld hl,BUF_17_016
0426B0 01 23 00 00 3410*  	ld bc,35
0426B4 11 2D 00 00 3411*  	ld de,45
0426B8 DD 21 27 06 3412*  	ld ix,1575
       00          
0426BD CD 6D B8 04 3413*  	call vdu_load_img
0426C1 C9          3414*  	ret
0426C2             3415*  
0426C2             3416*  ld_17_020:
0426C2 21 10 44 04 3417*  	ld hl,F17_020
0426C6 22 F2 B6 04 3418*  	ld (cur_filename),hl
0426CA 11 FC C2 04 3419*  	ld de,filedata
0426CE 01 00 00 01 3420*  	ld bc,65536
0426D2 3E 01       3421*  	ld a,mos_load
0426D4 5B CF       3422*  	RST.LIL 08h
0426D6 21 B8 01 00 3423*  	ld hl,BUF_17_020
0426DA 01 2E 00 00 3424*  	ld bc,46
0426DE 11 2D 00 00 3425*  	ld de,45
0426E2 DD 21 16 08 3426*  	ld ix,2070
       00          
0426E7 CD 6D B8 04 3427*  	call vdu_load_img
0426EB C9          3428*  	ret
0426EC             3429*  
0426EC             3430*  ld_17_024:
0426EC 21 24 44 04 3431*  	ld hl,F17_024
0426F0 22 F2 B6 04 3432*  	ld (cur_filename),hl
0426F4 11 FC C2 04 3433*  	ld de,filedata
0426F8 01 00 00 01 3434*  	ld bc,65536
0426FC 3E 01       3435*  	ld a,mos_load
0426FE 5B CF       3436*  	RST.LIL 08h
042700 21 B9 01 00 3437*  	ld hl,BUF_17_024
042704 01 2E 00 00 3438*  	ld bc,46
042708 11 40 00 00 3439*  	ld de,64
04270C DD 21 80 0B 3440*  	ld ix,2944
       00          
042711 CD 6D B8 04 3441*  	call vdu_load_img
042715 C9          3442*  	ret
042716             3443*  
042716             3444*  ld_17_025:
042716 21 38 44 04 3445*  	ld hl,F17_025
04271A 22 F2 B6 04 3446*  	ld (cur_filename),hl
04271E 11 FC C2 04 3447*  	ld de,filedata
042722 01 00 00 01 3448*  	ld bc,65536
042726 3E 01       3449*  	ld a,mos_load
042728 5B CF       3450*  	RST.LIL 08h
04272A 21 BA 01 00 3451*  	ld hl,BUF_17_025
04272E 01 1C 00 00 3452*  	ld bc,28
042732 11 40 00 00 3453*  	ld de,64
042736 DD 21 00 07 3454*  	ld ix,1792
       00          
04273B CD 6D B8 04 3455*  	call vdu_load_img
04273F C9          3456*  	ret
042740             3457*  
042740             3458*  ld_17_026:
042740 21 4C 44 04 3459*  	ld hl,F17_026
042744 22 F2 B6 04 3460*  	ld (cur_filename),hl
042748 11 FC C2 04 3461*  	ld de,filedata
04274C 01 00 00 01 3462*  	ld bc,65536
042750 3E 01       3463*  	ld a,mos_load
042752 5B CF       3464*  	RST.LIL 08h
042754 21 BB 01 00 3465*  	ld hl,BUF_17_026
042758 01 09 00 00 3466*  	ld bc,9
04275C 11 40 00 00 3467*  	ld de,64
042760 DD 21 40 02 3468*  	ld ix,576
       00          
042765 CD 6D B8 04 3469*  	call vdu_load_img
042769 C9          3470*  	ret
04276A             3471*  
04276A             3472*  ld_17_027:
04276A 21 60 44 04 3473*  	ld hl,F17_027
04276E 22 F2 B6 04 3474*  	ld (cur_filename),hl
042772 11 FC C2 04 3475*  	ld de,filedata
042776 01 00 00 01 3476*  	ld bc,65536
04277A 3E 01       3477*  	ld a,mos_load
04277C 5B CF       3478*  	RST.LIL 08h
04277E 21 BC 01 00 3479*  	ld hl,BUF_17_027
042782 01 0A 00 00 3480*  	ld bc,10
042786 11 3E 00 00 3481*  	ld de,62
04278A DD 21 6C 02 3482*  	ld ix,620
       00          
04278F CD 6D B8 04 3483*  	call vdu_load_img
042793 C9          3484*  	ret
042794             3485*  
042794             3486*  ld_17_028:
042794 21 74 44 04 3487*  	ld hl,F17_028
042798 22 F2 B6 04 3488*  	ld (cur_filename),hl
04279C 11 FC C2 04 3489*  	ld de,filedata
0427A0 01 00 00 01 3490*  	ld bc,65536
0427A4 3E 01       3491*  	ld a,mos_load
0427A6 5B CF       3492*  	RST.LIL 08h
0427A8 21 BD 01 00 3493*  	ld hl,BUF_17_028
0427AC 01 1C 00 00 3494*  	ld bc,28
0427B0 11 40 00 00 3495*  	ld de,64
0427B4 DD 21 00 07 3496*  	ld ix,1792
       00          
0427B9 CD 6D B8 04 3497*  	call vdu_load_img
0427BD C9          3498*  	ret
0427BE             3499*  
0427BE             3500*  ld_17_029:
0427BE 21 88 44 04 3501*  	ld hl,F17_029
0427C2 22 F2 B6 04 3502*  	ld (cur_filename),hl
0427C6 11 FC C2 04 3503*  	ld de,filedata
0427CA 01 00 00 01 3504*  	ld bc,65536
0427CE 3E 01       3505*  	ld a,mos_load
0427D0 5B CF       3506*  	RST.LIL 08h
0427D2 21 BE 01 00 3507*  	ld hl,BUF_17_029
0427D6 01 2F 00 00 3508*  	ld bc,47
0427DA 11 40 00 00 3509*  	ld de,64
0427DE DD 21 C0 0B 3510*  	ld ix,3008
       00          
0427E3 CD 6D B8 04 3511*  	call vdu_load_img
0427E7 C9          3512*  	ret
0427E8             3513*  
0427E8             3514*  ld_17_032:
0427E8 21 9C 44 04 3515*  	ld hl,F17_032
0427EC 22 F2 B6 04 3516*  	ld (cur_filename),hl
0427F0 11 FC C2 04 3517*  	ld de,filedata
0427F4 01 00 00 01 3518*  	ld bc,65536
0427F8 3E 01       3519*  	ld a,mos_load
0427FA 5B CF       3520*  	RST.LIL 08h
0427FC 21 BF 01 00 3521*  	ld hl,BUF_17_032
042800 01 41 00 00 3522*  	ld bc,65
042804 11 40 00 00 3523*  	ld de,64
042808 DD 21 40 10 3524*  	ld ix,4160
       00          
04280D CD 6D B8 04 3525*  	call vdu_load_img
042811 C9          3526*  	ret
042812             3527*  
042812             3528*  ld_17_035:
042812 21 B0 44 04 3529*  	ld hl,F17_035
042816 22 F2 B6 04 3530*  	ld (cur_filename),hl
04281A 11 FC C2 04 3531*  	ld de,filedata
04281E 01 00 00 01 3532*  	ld bc,65536
042822 3E 01       3533*  	ld a,mos_load
042824 5B CF       3534*  	RST.LIL 08h
042826 21 C0 01 00 3535*  	ld hl,BUF_17_035
04282A 01 3F 00 00 3536*  	ld bc,63
04282E 11 6B 00 00 3537*  	ld de,107
042832 DD 21 55 1A 3538*  	ld ix,6741
       00          
042837 CD 6D B8 04 3539*  	call vdu_load_img
04283B C9          3540*  	ret
04283C             3541*  
04283C             3542*  ld_17_036:
04283C 21 C4 44 04 3543*  	ld hl,F17_036
042840 22 F2 B6 04 3544*  	ld (cur_filename),hl
042844 11 FC C2 04 3545*  	ld de,filedata
042848 01 00 00 01 3546*  	ld bc,65536
04284C 3E 01       3547*  	ld a,mos_load
04284E 5B CF       3548*  	RST.LIL 08h
042850 21 C1 01 00 3549*  	ld hl,BUF_17_036
042854 01 16 00 00 3550*  	ld bc,22
042858 11 6B 00 00 3551*  	ld de,107
04285C DD 21 32 09 3552*  	ld ix,2354
       00          
042861 CD 6D B8 04 3553*  	call vdu_load_img
042865 C9          3554*  	ret
042866             3555*  
042866             3556*  ld_17_037:
042866 21 D8 44 04 3557*  	ld hl,F17_037
04286A 22 F2 B6 04 3558*  	ld (cur_filename),hl
04286E 11 FC C2 04 3559*  	ld de,filedata
042872 01 00 00 01 3560*  	ld bc,65536
042876 3E 01       3561*  	ld a,mos_load
042878 5B CF       3562*  	RST.LIL 08h
04287A 21 C2 01 00 3563*  	ld hl,BUF_17_037
04287E 01 15 00 00 3564*  	ld bc,21
042882 11 69 00 00 3565*  	ld de,105
042886 DD 21 9D 08 3566*  	ld ix,2205
       00          
04288B CD 6D B8 04 3567*  	call vdu_load_img
04288F C9          3568*  	ret
042890             3569*  
042890             3570*  ld_17_038:
042890 21 EC 44 04 3571*  	ld hl,F17_038
042894 22 F2 B6 04 3572*  	ld (cur_filename),hl
042898 11 FC C2 04 3573*  	ld de,filedata
04289C 01 00 00 01 3574*  	ld bc,65536
0428A0 3E 01       3575*  	ld a,mos_load
0428A2 5B CF       3576*  	RST.LIL 08h
0428A4 21 C3 01 00 3577*  	ld hl,BUF_17_038
0428A8 01 3F 00 00 3578*  	ld bc,63
0428AC 11 6B 00 00 3579*  	ld de,107
0428B0 DD 21 55 1A 3580*  	ld ix,6741
       00          
0428B5 CD 6D B8 04 3581*  	call vdu_load_img
0428B9 C9          3582*  	ret
0428BA             3583*  
0428BA             3584*  ld_17_040:
0428BA 21 00 45 04 3585*  	ld hl,F17_040
0428BE 22 F2 B6 04 3586*  	ld (cur_filename),hl
0428C2 11 FC C2 04 3587*  	ld de,filedata
0428C6 01 00 00 01 3588*  	ld bc,65536
0428CA 3E 01       3589*  	ld a,mos_load
0428CC 5B CF       3590*  	RST.LIL 08h
0428CE 21 C4 01 00 3591*  	ld hl,BUF_17_040
0428D2 01 6C 00 00 3592*  	ld bc,108
0428D6 11 6B 00 00 3593*  	ld de,107
0428DA DD 21 24 2D 3594*  	ld ix,11556
       00          
0428DF CD 6D B8 04 3595*  	call vdu_load_img
0428E3 C9          3596*  	ret
0428E4             3597*  
0428E4             3598*  ld_17_042:
0428E4 21 14 45 04 3599*  	ld hl,F17_042
0428E8 22 F2 B6 04 3600*  	ld (cur_filename),hl
0428EC 11 FC C2 04 3601*  	ld de,filedata
0428F0 01 00 00 01 3602*  	ld bc,65536
0428F4 3E 01       3603*  	ld a,mos_load
0428F6 5B CF       3604*  	RST.LIL 08h
0428F8 21 C5 01 00 3605*  	ld hl,BUF_17_042
0428FC 01 6A 00 00 3606*  	ld bc,106
042900 11 A0 00 00 3607*  	ld de,160
042904 DD 21 40 42 3608*  	ld ix,16960
       00          
042909 CD 6D B8 04 3609*  	call vdu_load_img
04290D C9          3610*  	ret
04290E             3611*  
04290E             3612*  ld_17_043:
04290E 21 28 45 04 3613*  	ld hl,F17_043
042912 22 F2 B6 04 3614*  	ld (cur_filename),hl
042916 11 FC C2 04 3615*  	ld de,filedata
04291A 01 00 00 01 3616*  	ld bc,65536
04291E 3E 01       3617*  	ld a,mos_load
042920 5B CF       3618*  	RST.LIL 08h
042922 21 C6 01 00 3619*  	ld hl,BUF_17_043
042926 01 6B 00 00 3620*  	ld bc,107
04292A 11 A0 00 00 3621*  	ld de,160
04292E DD 21 E0 42 3622*  	ld ix,17120
       00          
042933 CD 6D B8 04 3623*  	call vdu_load_img
042937 C9          3624*  	ret
042938             3625*  
042938             3626*  ld_17_044:
042938 21 3C 45 04 3627*  	ld hl,F17_044
04293C 22 F2 B6 04 3628*  	ld (cur_filename),hl
042940 11 FC C2 04 3629*  	ld de,filedata
042944 01 00 00 01 3630*  	ld bc,65536
042948 3E 01       3631*  	ld a,mos_load
04294A 5B CF       3632*  	RST.LIL 08h
04294C 21 C7 01 00 3633*  	ld hl,BUF_17_044
042950 01 40 01 00 3634*  	ld bc,320
042954 11 A0 00 00 3635*  	ld de,160
042958 DD 21 00 C8 3636*  	ld ix,51200
       00          
04295D CD 6D B8 04 3637*  	call vdu_load_img
042961 C9          3638*  	ret
042962             3639*  
042962             3640*  ld_57_004:
042962 21 50 45 04 3641*  	ld hl,F57_004
042966 22 F2 B6 04 3642*  	ld (cur_filename),hl
04296A 11 FC C2 04 3643*  	ld de,filedata
04296E 01 00 00 01 3644*  	ld bc,65536
042972 3E 01       3645*  	ld a,mos_load
042974 5B CF       3646*  	RST.LIL 08h
042976 21 C8 01 00 3647*  	ld hl,BUF_57_004
04297A 01 24 00 00 3648*  	ld bc,36
04297E 11 23 00 00 3649*  	ld de,35
042982 DD 21 EC 04 3650*  	ld ix,1260
       00          
042987 CD 6D B8 04 3651*  	call vdu_load_img
04298B C9          3652*  	ret
04298C             3653*  
04298C             3654*  ld_57_009:
04298C 21 64 45 04 3655*  	ld hl,F57_009
042990 22 F2 B6 04 3656*  	ld (cur_filename),hl
042994 11 FC C2 04 3657*  	ld de,filedata
042998 01 00 00 01 3658*  	ld bc,65536
04299C 3E 01       3659*  	ld a,mos_load
04299E 5B CF       3660*  	RST.LIL 08h
0429A0 21 C9 01 00 3661*  	ld hl,BUF_57_009
0429A4 01 23 00 00 3662*  	ld bc,35
0429A8 11 2D 00 00 3663*  	ld de,45
0429AC DD 21 27 06 3664*  	ld ix,1575
       00          
0429B1 CD 6D B8 04 3665*  	call vdu_load_img
0429B5 C9          3666*  	ret
0429B6             3667*  
0429B6             3668*  ld_57_010:
0429B6 21 78 45 04 3669*  	ld hl,F57_010
0429BA 22 F2 B6 04 3670*  	ld (cur_filename),hl
0429BE 11 FC C2 04 3671*  	ld de,filedata
0429C2 01 00 00 01 3672*  	ld bc,65536
0429C6 3E 01       3673*  	ld a,mos_load
0429C8 5B CF       3674*  	RST.LIL 08h
0429CA 21 CA 01 00 3675*  	ld hl,BUF_57_010
0429CE 01 19 00 00 3676*  	ld bc,25
0429D2 11 2D 00 00 3677*  	ld de,45
0429D6 DD 21 65 04 3678*  	ld ix,1125
       00          
0429DB CD 6D B8 04 3679*  	call vdu_load_img
0429DF C9          3680*  	ret
0429E0             3681*  
0429E0             3682*  ld_57_011:
0429E0 21 8C 45 04 3683*  	ld hl,F57_011
0429E4 22 F2 B6 04 3684*  	ld (cur_filename),hl
0429E8 11 FC C2 04 3685*  	ld de,filedata
0429EC 01 00 00 01 3686*  	ld bc,65536
0429F0 3E 01       3687*  	ld a,mos_load
0429F2 5B CF       3688*  	RST.LIL 08h
0429F4 21 CB 01 00 3689*  	ld hl,BUF_57_011
0429F8 01 0F 00 00 3690*  	ld bc,15
0429FC 11 2D 00 00 3691*  	ld de,45
042A00 DD 21 A3 02 3692*  	ld ix,675
       00          
042A05 CD 6D B8 04 3693*  	call vdu_load_img
042A09 C9          3694*  	ret
042A0A             3695*  
042A0A             3696*  ld_57_012:
042A0A 21 A0 45 04 3697*  	ld hl,F57_012
042A0E 22 F2 B6 04 3698*  	ld (cur_filename),hl
042A12 11 FC C2 04 3699*  	ld de,filedata
042A16 01 00 00 01 3700*  	ld bc,65536
042A1A 3E 01       3701*  	ld a,mos_load
042A1C 5B CF       3702*  	RST.LIL 08h
042A1E 21 CC 01 00 3703*  	ld hl,BUF_57_012
042A22 01 05 00 00 3704*  	ld bc,5
042A26 11 2D 00 00 3705*  	ld de,45
042A2A DD 21 E1 00 3706*  	ld ix,225
       00          
042A2F CD 6D B8 04 3707*  	call vdu_load_img
042A33 C9          3708*  	ret
042A34             3709*  
042A34             3710*  ld_57_013:
042A34 21 B4 45 04 3711*  	ld hl,F57_013
042A38 22 F2 B6 04 3712*  	ld (cur_filename),hl
042A3C 11 FC C2 04 3713*  	ld de,filedata
042A40 01 00 00 01 3714*  	ld bc,65536
042A44 3E 01       3715*  	ld a,mos_load
042A46 5B CF       3716*  	RST.LIL 08h
042A48 21 CD 01 00 3717*  	ld hl,BUF_57_013
042A4C 01 05 00 00 3718*  	ld bc,5
042A50 11 2B 00 00 3719*  	ld de,43
042A54 DD 21 D7 00 3720*  	ld ix,215
       00          
042A59 CD 6D B8 04 3721*  	call vdu_load_img
042A5D C9          3722*  	ret
042A5E             3723*  
042A5E             3724*  ld_57_014:
042A5E 21 C8 45 04 3725*  	ld hl,F57_014
042A62 22 F2 B6 04 3726*  	ld (cur_filename),hl
042A66 11 FC C2 04 3727*  	ld de,filedata
042A6A 01 00 00 01 3728*  	ld bc,65536
042A6E 3E 01       3729*  	ld a,mos_load
042A70 5B CF       3730*  	RST.LIL 08h
042A72 21 CE 01 00 3731*  	ld hl,BUF_57_014
042A76 01 0F 00 00 3732*  	ld bc,15
042A7A 11 2D 00 00 3733*  	ld de,45
042A7E DD 21 A3 02 3734*  	ld ix,675
       00          
042A83 CD 6D B8 04 3735*  	call vdu_load_img
042A87 C9          3736*  	ret
042A88             3737*  
042A88             3738*  ld_57_015:
042A88 21 DC 45 04 3739*  	ld hl,F57_015
042A8C 22 F2 B6 04 3740*  	ld (cur_filename),hl
042A90 11 FC C2 04 3741*  	ld de,filedata
042A94 01 00 00 01 3742*  	ld bc,65536
042A98 3E 01       3743*  	ld a,mos_load
042A9A 5B CF       3744*  	RST.LIL 08h
042A9C 21 CF 01 00 3745*  	ld hl,BUF_57_015
042AA0 01 19 00 00 3746*  	ld bc,25
042AA4 11 2D 00 00 3747*  	ld de,45
042AA8 DD 21 65 04 3748*  	ld ix,1125
       00          
042AAD CD 6D B8 04 3749*  	call vdu_load_img
042AB1 C9          3750*  	ret
042AB2             3751*  
042AB2             3752*  ld_57_016:
042AB2 21 F0 45 04 3753*  	ld hl,F57_016
042AB6 22 F2 B6 04 3754*  	ld (cur_filename),hl
042ABA 11 FC C2 04 3755*  	ld de,filedata
042ABE 01 00 00 01 3756*  	ld bc,65536
042AC2 3E 01       3757*  	ld a,mos_load
042AC4 5B CF       3758*  	RST.LIL 08h
042AC6 21 D0 01 00 3759*  	ld hl,BUF_57_016
042ACA 01 23 00 00 3760*  	ld bc,35
042ACE 11 2D 00 00 3761*  	ld de,45
042AD2 DD 21 27 06 3762*  	ld ix,1575
       00          
042AD7 CD 6D B8 04 3763*  	call vdu_load_img
042ADB C9          3764*  	ret
042ADC             3765*  
042ADC             3766*  ld_57_020:
042ADC 21 04 46 04 3767*  	ld hl,F57_020
042AE0 22 F2 B6 04 3768*  	ld (cur_filename),hl
042AE4 11 FC C2 04 3769*  	ld de,filedata
042AE8 01 00 00 01 3770*  	ld bc,65536
042AEC 3E 01       3771*  	ld a,mos_load
042AEE 5B CF       3772*  	RST.LIL 08h
042AF0 21 D1 01 00 3773*  	ld hl,BUF_57_020
042AF4 01 2E 00 00 3774*  	ld bc,46
042AF8 11 2D 00 00 3775*  	ld de,45
042AFC DD 21 16 08 3776*  	ld ix,2070
       00          
042B01 CD 6D B8 04 3777*  	call vdu_load_img
042B05 C9          3778*  	ret
042B06             3779*  
042B06             3780*  ld_57_024:
042B06 21 18 46 04 3781*  	ld hl,F57_024
042B0A 22 F2 B6 04 3782*  	ld (cur_filename),hl
042B0E 11 FC C2 04 3783*  	ld de,filedata
042B12 01 00 00 01 3784*  	ld bc,65536
042B16 3E 01       3785*  	ld a,mos_load
042B18 5B CF       3786*  	RST.LIL 08h
042B1A 21 D2 01 00 3787*  	ld hl,BUF_57_024
042B1E 01 2E 00 00 3788*  	ld bc,46
042B22 11 40 00 00 3789*  	ld de,64
042B26 DD 21 80 0B 3790*  	ld ix,2944
       00          
042B2B CD 6D B8 04 3791*  	call vdu_load_img
042B2F C9          3792*  	ret
042B30             3793*  
042B30             3794*  ld_57_025:
042B30 21 2C 46 04 3795*  	ld hl,F57_025
042B34 22 F2 B6 04 3796*  	ld (cur_filename),hl
042B38 11 FC C2 04 3797*  	ld de,filedata
042B3C 01 00 00 01 3798*  	ld bc,65536
042B40 3E 01       3799*  	ld a,mos_load
042B42 5B CF       3800*  	RST.LIL 08h
042B44 21 D3 01 00 3801*  	ld hl,BUF_57_025
042B48 01 1C 00 00 3802*  	ld bc,28
042B4C 11 40 00 00 3803*  	ld de,64
042B50 DD 21 00 07 3804*  	ld ix,1792
       00          
042B55 CD 6D B8 04 3805*  	call vdu_load_img
042B59 C9          3806*  	ret
042B5A             3807*  
042B5A             3808*  ld_57_026:
042B5A 21 40 46 04 3809*  	ld hl,F57_026
042B5E 22 F2 B6 04 3810*  	ld (cur_filename),hl
042B62 11 FC C2 04 3811*  	ld de,filedata
042B66 01 00 00 01 3812*  	ld bc,65536
042B6A 3E 01       3813*  	ld a,mos_load
042B6C 5B CF       3814*  	RST.LIL 08h
042B6E 21 D4 01 00 3815*  	ld hl,BUF_57_026
042B72 01 09 00 00 3816*  	ld bc,9
042B76 11 40 00 00 3817*  	ld de,64
042B7A DD 21 40 02 3818*  	ld ix,576
       00          
042B7F CD 6D B8 04 3819*  	call vdu_load_img
042B83 C9          3820*  	ret
042B84             3821*  
042B84             3822*  ld_57_027:
042B84 21 54 46 04 3823*  	ld hl,F57_027
042B88 22 F2 B6 04 3824*  	ld (cur_filename),hl
042B8C 11 FC C2 04 3825*  	ld de,filedata
042B90 01 00 00 01 3826*  	ld bc,65536
042B94 3E 01       3827*  	ld a,mos_load
042B96 5B CF       3828*  	RST.LIL 08h
042B98 21 D5 01 00 3829*  	ld hl,BUF_57_027
042B9C 01 0A 00 00 3830*  	ld bc,10
042BA0 11 3E 00 00 3831*  	ld de,62
042BA4 DD 21 6C 02 3832*  	ld ix,620
       00          
042BA9 CD 6D B8 04 3833*  	call vdu_load_img
042BAD C9          3834*  	ret
042BAE             3835*  
042BAE             3836*  ld_57_028:
042BAE 21 68 46 04 3837*  	ld hl,F57_028
042BB2 22 F2 B6 04 3838*  	ld (cur_filename),hl
042BB6 11 FC C2 04 3839*  	ld de,filedata
042BBA 01 00 00 01 3840*  	ld bc,65536
042BBE 3E 01       3841*  	ld a,mos_load
042BC0 5B CF       3842*  	RST.LIL 08h
042BC2 21 D6 01 00 3843*  	ld hl,BUF_57_028
042BC6 01 1C 00 00 3844*  	ld bc,28
042BCA 11 40 00 00 3845*  	ld de,64
042BCE DD 21 00 07 3846*  	ld ix,1792
       00          
042BD3 CD 6D B8 04 3847*  	call vdu_load_img
042BD7 C9          3848*  	ret
042BD8             3849*  
042BD8             3850*  ld_57_029:
042BD8 21 7C 46 04 3851*  	ld hl,F57_029
042BDC 22 F2 B6 04 3852*  	ld (cur_filename),hl
042BE0 11 FC C2 04 3853*  	ld de,filedata
042BE4 01 00 00 01 3854*  	ld bc,65536
042BE8 3E 01       3855*  	ld a,mos_load
042BEA 5B CF       3856*  	RST.LIL 08h
042BEC 21 D7 01 00 3857*  	ld hl,BUF_57_029
042BF0 01 2F 00 00 3858*  	ld bc,47
042BF4 11 40 00 00 3859*  	ld de,64
042BF8 DD 21 C0 0B 3860*  	ld ix,3008
       00          
042BFD CD 6D B8 04 3861*  	call vdu_load_img
042C01 C9          3862*  	ret
042C02             3863*  
042C02             3864*  ld_57_032:
042C02 21 90 46 04 3865*  	ld hl,F57_032
042C06 22 F2 B6 04 3866*  	ld (cur_filename),hl
042C0A 11 FC C2 04 3867*  	ld de,filedata
042C0E 01 00 00 01 3868*  	ld bc,65536
042C12 3E 01       3869*  	ld a,mos_load
042C14 5B CF       3870*  	RST.LIL 08h
042C16 21 D8 01 00 3871*  	ld hl,BUF_57_032
042C1A 01 41 00 00 3872*  	ld bc,65
042C1E 11 40 00 00 3873*  	ld de,64
042C22 DD 21 40 10 3874*  	ld ix,4160
       00          
042C27 CD 6D B8 04 3875*  	call vdu_load_img
042C2B C9          3876*  	ret
042C2C             3877*  
042C2C             3878*  ld_57_035:
042C2C 21 A4 46 04 3879*  	ld hl,F57_035
042C30 22 F2 B6 04 3880*  	ld (cur_filename),hl
042C34 11 FC C2 04 3881*  	ld de,filedata
042C38 01 00 00 01 3882*  	ld bc,65536
042C3C 3E 01       3883*  	ld a,mos_load
042C3E 5B CF       3884*  	RST.LIL 08h
042C40 21 D9 01 00 3885*  	ld hl,BUF_57_035
042C44 01 3F 00 00 3886*  	ld bc,63
042C48 11 6B 00 00 3887*  	ld de,107
042C4C DD 21 55 1A 3888*  	ld ix,6741
       00          
042C51 CD 6D B8 04 3889*  	call vdu_load_img
042C55 C9          3890*  	ret
042C56             3891*  
042C56             3892*  ld_57_036:
042C56 21 B8 46 04 3893*  	ld hl,F57_036
042C5A 22 F2 B6 04 3894*  	ld (cur_filename),hl
042C5E 11 FC C2 04 3895*  	ld de,filedata
042C62 01 00 00 01 3896*  	ld bc,65536
042C66 3E 01       3897*  	ld a,mos_load
042C68 5B CF       3898*  	RST.LIL 08h
042C6A 21 DA 01 00 3899*  	ld hl,BUF_57_036
042C6E 01 16 00 00 3900*  	ld bc,22
042C72 11 6B 00 00 3901*  	ld de,107
042C76 DD 21 32 09 3902*  	ld ix,2354
       00          
042C7B CD 6D B8 04 3903*  	call vdu_load_img
042C7F C9          3904*  	ret
042C80             3905*  
042C80             3906*  ld_57_037:
042C80 21 CC 46 04 3907*  	ld hl,F57_037
042C84 22 F2 B6 04 3908*  	ld (cur_filename),hl
042C88 11 FC C2 04 3909*  	ld de,filedata
042C8C 01 00 00 01 3910*  	ld bc,65536
042C90 3E 01       3911*  	ld a,mos_load
042C92 5B CF       3912*  	RST.LIL 08h
042C94 21 DB 01 00 3913*  	ld hl,BUF_57_037
042C98 01 15 00 00 3914*  	ld bc,21
042C9C 11 69 00 00 3915*  	ld de,105
042CA0 DD 21 9D 08 3916*  	ld ix,2205
       00          
042CA5 CD 6D B8 04 3917*  	call vdu_load_img
042CA9 C9          3918*  	ret
042CAA             3919*  
042CAA             3920*  ld_57_038:
042CAA 21 E0 46 04 3921*  	ld hl,F57_038
042CAE 22 F2 B6 04 3922*  	ld (cur_filename),hl
042CB2 11 FC C2 04 3923*  	ld de,filedata
042CB6 01 00 00 01 3924*  	ld bc,65536
042CBA 3E 01       3925*  	ld a,mos_load
042CBC 5B CF       3926*  	RST.LIL 08h
042CBE 21 DC 01 00 3927*  	ld hl,BUF_57_038
042CC2 01 3F 00 00 3928*  	ld bc,63
042CC6 11 6B 00 00 3929*  	ld de,107
042CCA DD 21 55 1A 3930*  	ld ix,6741
       00          
042CCF CD 6D B8 04 3931*  	call vdu_load_img
042CD3 C9          3932*  	ret
042CD4             3933*  
042CD4             3934*  ld_57_040:
042CD4 21 F4 46 04 3935*  	ld hl,F57_040
042CD8 22 F2 B6 04 3936*  	ld (cur_filename),hl
042CDC 11 FC C2 04 3937*  	ld de,filedata
042CE0 01 00 00 01 3938*  	ld bc,65536
042CE4 3E 01       3939*  	ld a,mos_load
042CE6 5B CF       3940*  	RST.LIL 08h
042CE8 21 DD 01 00 3941*  	ld hl,BUF_57_040
042CEC 01 6C 00 00 3942*  	ld bc,108
042CF0 11 6B 00 00 3943*  	ld de,107
042CF4 DD 21 24 2D 3944*  	ld ix,11556
       00          
042CF9 CD 6D B8 04 3945*  	call vdu_load_img
042CFD C9          3946*  	ret
042CFE             3947*  
042CFE             3948*  ld_57_042:
042CFE 21 08 47 04 3949*  	ld hl,F57_042
042D02 22 F2 B6 04 3950*  	ld (cur_filename),hl
042D06 11 FC C2 04 3951*  	ld de,filedata
042D0A 01 00 00 01 3952*  	ld bc,65536
042D0E 3E 01       3953*  	ld a,mos_load
042D10 5B CF       3954*  	RST.LIL 08h
042D12 21 DE 01 00 3955*  	ld hl,BUF_57_042
042D16 01 6A 00 00 3956*  	ld bc,106
042D1A 11 A0 00 00 3957*  	ld de,160
042D1E DD 21 40 42 3958*  	ld ix,16960
       00          
042D23 CD 6D B8 04 3959*  	call vdu_load_img
042D27 C9          3960*  	ret
042D28             3961*  
042D28             3962*  ld_57_043:
042D28 21 1C 47 04 3963*  	ld hl,F57_043
042D2C 22 F2 B6 04 3964*  	ld (cur_filename),hl
042D30 11 FC C2 04 3965*  	ld de,filedata
042D34 01 00 00 01 3966*  	ld bc,65536
042D38 3E 01       3967*  	ld a,mos_load
042D3A 5B CF       3968*  	RST.LIL 08h
042D3C 21 DF 01 00 3969*  	ld hl,BUF_57_043
042D40 01 6B 00 00 3970*  	ld bc,107
042D44 11 A0 00 00 3971*  	ld de,160
042D48 DD 21 E0 42 3972*  	ld ix,17120
       00          
042D4D CD 6D B8 04 3973*  	call vdu_load_img
042D51 C9          3974*  	ret
042D52             3975*  
042D52             3976*  ld_57_044:
042D52 21 30 47 04 3977*  	ld hl,F57_044
042D56 22 F2 B6 04 3978*  	ld (cur_filename),hl
042D5A 11 FC C2 04 3979*  	ld de,filedata
042D5E 01 00 00 01 3980*  	ld bc,65536
042D62 3E 01       3981*  	ld a,mos_load
042D64 5B CF       3982*  	RST.LIL 08h
042D66 21 E0 01 00 3983*  	ld hl,BUF_57_044
042D6A 01 40 01 00 3984*  	ld bc,320
042D6E 11 A0 00 00 3985*  	ld de,160
042D72 DD 21 00 C8 3986*  	ld ix,51200
       00          
042D77 CD 6D B8 04 3987*  	call vdu_load_img
042D7B C9          3988*  	ret
042D7C             3989*  
042D7C             3990*  ld_58_004:
042D7C 21 44 47 04 3991*  	ld hl,F58_004
042D80 22 F2 B6 04 3992*  	ld (cur_filename),hl
042D84 11 FC C2 04 3993*  	ld de,filedata
042D88 01 00 00 01 3994*  	ld bc,65536
042D8C 3E 01       3995*  	ld a,mos_load
042D8E 5B CF       3996*  	RST.LIL 08h
042D90 21 E1 01 00 3997*  	ld hl,BUF_58_004
042D94 01 24 00 00 3998*  	ld bc,36
042D98 11 23 00 00 3999*  	ld de,35
042D9C DD 21 EC 04 4000*  	ld ix,1260
       00          
042DA1 CD 6D B8 04 4001*  	call vdu_load_img
042DA5 C9          4002*  	ret
042DA6             4003*  
042DA6             4004*  ld_58_009:
042DA6 21 58 47 04 4005*  	ld hl,F58_009
042DAA 22 F2 B6 04 4006*  	ld (cur_filename),hl
042DAE 11 FC C2 04 4007*  	ld de,filedata
042DB2 01 00 00 01 4008*  	ld bc,65536
042DB6 3E 01       4009*  	ld a,mos_load
042DB8 5B CF       4010*  	RST.LIL 08h
042DBA 21 E2 01 00 4011*  	ld hl,BUF_58_009
042DBE 01 23 00 00 4012*  	ld bc,35
042DC2 11 2D 00 00 4013*  	ld de,45
042DC6 DD 21 27 06 4014*  	ld ix,1575
       00          
042DCB CD 6D B8 04 4015*  	call vdu_load_img
042DCF C9          4016*  	ret
042DD0             4017*  
042DD0             4018*  ld_58_010:
042DD0 21 6C 47 04 4019*  	ld hl,F58_010
042DD4 22 F2 B6 04 4020*  	ld (cur_filename),hl
042DD8 11 FC C2 04 4021*  	ld de,filedata
042DDC 01 00 00 01 4022*  	ld bc,65536
042DE0 3E 01       4023*  	ld a,mos_load
042DE2 5B CF       4024*  	RST.LIL 08h
042DE4 21 E3 01 00 4025*  	ld hl,BUF_58_010
042DE8 01 19 00 00 4026*  	ld bc,25
042DEC 11 2D 00 00 4027*  	ld de,45
042DF0 DD 21 65 04 4028*  	ld ix,1125
       00          
042DF5 CD 6D B8 04 4029*  	call vdu_load_img
042DF9 C9          4030*  	ret
042DFA             4031*  
042DFA             4032*  ld_58_011:
042DFA 21 80 47 04 4033*  	ld hl,F58_011
042DFE 22 F2 B6 04 4034*  	ld (cur_filename),hl
042E02 11 FC C2 04 4035*  	ld de,filedata
042E06 01 00 00 01 4036*  	ld bc,65536
042E0A 3E 01       4037*  	ld a,mos_load
042E0C 5B CF       4038*  	RST.LIL 08h
042E0E 21 E4 01 00 4039*  	ld hl,BUF_58_011
042E12 01 0F 00 00 4040*  	ld bc,15
042E16 11 2D 00 00 4041*  	ld de,45
042E1A DD 21 A3 02 4042*  	ld ix,675
       00          
042E1F CD 6D B8 04 4043*  	call vdu_load_img
042E23 C9          4044*  	ret
042E24             4045*  
042E24             4046*  ld_58_012:
042E24 21 94 47 04 4047*  	ld hl,F58_012
042E28 22 F2 B6 04 4048*  	ld (cur_filename),hl
042E2C 11 FC C2 04 4049*  	ld de,filedata
042E30 01 00 00 01 4050*  	ld bc,65536
042E34 3E 01       4051*  	ld a,mos_load
042E36 5B CF       4052*  	RST.LIL 08h
042E38 21 E5 01 00 4053*  	ld hl,BUF_58_012
042E3C 01 05 00 00 4054*  	ld bc,5
042E40 11 2D 00 00 4055*  	ld de,45
042E44 DD 21 E1 00 4056*  	ld ix,225
       00          
042E49 CD 6D B8 04 4057*  	call vdu_load_img
042E4D C9          4058*  	ret
042E4E             4059*  
042E4E             4060*  ld_58_013:
042E4E 21 A8 47 04 4061*  	ld hl,F58_013
042E52 22 F2 B6 04 4062*  	ld (cur_filename),hl
042E56 11 FC C2 04 4063*  	ld de,filedata
042E5A 01 00 00 01 4064*  	ld bc,65536
042E5E 3E 01       4065*  	ld a,mos_load
042E60 5B CF       4066*  	RST.LIL 08h
042E62 21 E6 01 00 4067*  	ld hl,BUF_58_013
042E66 01 05 00 00 4068*  	ld bc,5
042E6A 11 2B 00 00 4069*  	ld de,43
042E6E DD 21 D7 00 4070*  	ld ix,215
       00          
042E73 CD 6D B8 04 4071*  	call vdu_load_img
042E77 C9          4072*  	ret
042E78             4073*  
042E78             4074*  ld_58_014:
042E78 21 BC 47 04 4075*  	ld hl,F58_014
042E7C 22 F2 B6 04 4076*  	ld (cur_filename),hl
042E80 11 FC C2 04 4077*  	ld de,filedata
042E84 01 00 00 01 4078*  	ld bc,65536
042E88 3E 01       4079*  	ld a,mos_load
042E8A 5B CF       4080*  	RST.LIL 08h
042E8C 21 E7 01 00 4081*  	ld hl,BUF_58_014
042E90 01 0F 00 00 4082*  	ld bc,15
042E94 11 2D 00 00 4083*  	ld de,45
042E98 DD 21 A3 02 4084*  	ld ix,675
       00          
042E9D CD 6D B8 04 4085*  	call vdu_load_img
042EA1 C9          4086*  	ret
042EA2             4087*  
042EA2             4088*  ld_58_015:
042EA2 21 D0 47 04 4089*  	ld hl,F58_015
042EA6 22 F2 B6 04 4090*  	ld (cur_filename),hl
042EAA 11 FC C2 04 4091*  	ld de,filedata
042EAE 01 00 00 01 4092*  	ld bc,65536
042EB2 3E 01       4093*  	ld a,mos_load
042EB4 5B CF       4094*  	RST.LIL 08h
042EB6 21 E8 01 00 4095*  	ld hl,BUF_58_015
042EBA 01 19 00 00 4096*  	ld bc,25
042EBE 11 2D 00 00 4097*  	ld de,45
042EC2 DD 21 65 04 4098*  	ld ix,1125
       00          
042EC7 CD 6D B8 04 4099*  	call vdu_load_img
042ECB C9          4100*  	ret
042ECC             4101*  
042ECC             4102*  ld_58_016:
042ECC 21 E4 47 04 4103*  	ld hl,F58_016
042ED0 22 F2 B6 04 4104*  	ld (cur_filename),hl
042ED4 11 FC C2 04 4105*  	ld de,filedata
042ED8 01 00 00 01 4106*  	ld bc,65536
042EDC 3E 01       4107*  	ld a,mos_load
042EDE 5B CF       4108*  	RST.LIL 08h
042EE0 21 E9 01 00 4109*  	ld hl,BUF_58_016
042EE4 01 23 00 00 4110*  	ld bc,35
042EE8 11 2D 00 00 4111*  	ld de,45
042EEC DD 21 27 06 4112*  	ld ix,1575
       00          
042EF1 CD 6D B8 04 4113*  	call vdu_load_img
042EF5 C9          4114*  	ret
042EF6             4115*  
042EF6             4116*  ld_58_020:
042EF6 21 F8 47 04 4117*  	ld hl,F58_020
042EFA 22 F2 B6 04 4118*  	ld (cur_filename),hl
042EFE 11 FC C2 04 4119*  	ld de,filedata
042F02 01 00 00 01 4120*  	ld bc,65536
042F06 3E 01       4121*  	ld a,mos_load
042F08 5B CF       4122*  	RST.LIL 08h
042F0A 21 EA 01 00 4123*  	ld hl,BUF_58_020
042F0E 01 2E 00 00 4124*  	ld bc,46
042F12 11 2D 00 00 4125*  	ld de,45
042F16 DD 21 16 08 4126*  	ld ix,2070
       00          
042F1B CD 6D B8 04 4127*  	call vdu_load_img
042F1F C9          4128*  	ret
042F20             4129*  
042F20             4130*  ld_58_024:
042F20 21 0C 48 04 4131*  	ld hl,F58_024
042F24 22 F2 B6 04 4132*  	ld (cur_filename),hl
042F28 11 FC C2 04 4133*  	ld de,filedata
042F2C 01 00 00 01 4134*  	ld bc,65536
042F30 3E 01       4135*  	ld a,mos_load
042F32 5B CF       4136*  	RST.LIL 08h
042F34 21 EB 01 00 4137*  	ld hl,BUF_58_024
042F38 01 2E 00 00 4138*  	ld bc,46
042F3C 11 40 00 00 4139*  	ld de,64
042F40 DD 21 80 0B 4140*  	ld ix,2944
       00          
042F45 CD 6D B8 04 4141*  	call vdu_load_img
042F49 C9          4142*  	ret
042F4A             4143*  
042F4A             4144*  ld_58_025:
042F4A 21 20 48 04 4145*  	ld hl,F58_025
042F4E 22 F2 B6 04 4146*  	ld (cur_filename),hl
042F52 11 FC C2 04 4147*  	ld de,filedata
042F56 01 00 00 01 4148*  	ld bc,65536
042F5A 3E 01       4149*  	ld a,mos_load
042F5C 5B CF       4150*  	RST.LIL 08h
042F5E 21 EC 01 00 4151*  	ld hl,BUF_58_025
042F62 01 1C 00 00 4152*  	ld bc,28
042F66 11 40 00 00 4153*  	ld de,64
042F6A DD 21 00 07 4154*  	ld ix,1792
       00          
042F6F CD 6D B8 04 4155*  	call vdu_load_img
042F73 C9          4156*  	ret
042F74             4157*  
042F74             4158*  ld_58_026:
042F74 21 34 48 04 4159*  	ld hl,F58_026
042F78 22 F2 B6 04 4160*  	ld (cur_filename),hl
042F7C 11 FC C2 04 4161*  	ld de,filedata
042F80 01 00 00 01 4162*  	ld bc,65536
042F84 3E 01       4163*  	ld a,mos_load
042F86 5B CF       4164*  	RST.LIL 08h
042F88 21 ED 01 00 4165*  	ld hl,BUF_58_026
042F8C 01 09 00 00 4166*  	ld bc,9
042F90 11 40 00 00 4167*  	ld de,64
042F94 DD 21 40 02 4168*  	ld ix,576
       00          
042F99 CD 6D B8 04 4169*  	call vdu_load_img
042F9D C9          4170*  	ret
042F9E             4171*  
042F9E             4172*  ld_58_027:
042F9E 21 48 48 04 4173*  	ld hl,F58_027
042FA2 22 F2 B6 04 4174*  	ld (cur_filename),hl
042FA6 11 FC C2 04 4175*  	ld de,filedata
042FAA 01 00 00 01 4176*  	ld bc,65536
042FAE 3E 01       4177*  	ld a,mos_load
042FB0 5B CF       4178*  	RST.LIL 08h
042FB2 21 EE 01 00 4179*  	ld hl,BUF_58_027
042FB6 01 0A 00 00 4180*  	ld bc,10
042FBA 11 3E 00 00 4181*  	ld de,62
042FBE DD 21 6C 02 4182*  	ld ix,620
       00          
042FC3 CD 6D B8 04 4183*  	call vdu_load_img
042FC7 C9          4184*  	ret
042FC8             4185*  
042FC8             4186*  ld_58_028:
042FC8 21 5C 48 04 4187*  	ld hl,F58_028
042FCC 22 F2 B6 04 4188*  	ld (cur_filename),hl
042FD0 11 FC C2 04 4189*  	ld de,filedata
042FD4 01 00 00 01 4190*  	ld bc,65536
042FD8 3E 01       4191*  	ld a,mos_load
042FDA 5B CF       4192*  	RST.LIL 08h
042FDC 21 EF 01 00 4193*  	ld hl,BUF_58_028
042FE0 01 1C 00 00 4194*  	ld bc,28
042FE4 11 40 00 00 4195*  	ld de,64
042FE8 DD 21 00 07 4196*  	ld ix,1792
       00          
042FED CD 6D B8 04 4197*  	call vdu_load_img
042FF1 C9          4198*  	ret
042FF2             4199*  
042FF2             4200*  ld_58_029:
042FF2 21 70 48 04 4201*  	ld hl,F58_029
042FF6 22 F2 B6 04 4202*  	ld (cur_filename),hl
042FFA 11 FC C2 04 4203*  	ld de,filedata
042FFE 01 00 00 01 4204*  	ld bc,65536
043002 3E 01       4205*  	ld a,mos_load
043004 5B CF       4206*  	RST.LIL 08h
043006 21 F0 01 00 4207*  	ld hl,BUF_58_029
04300A 01 2F 00 00 4208*  	ld bc,47
04300E 11 40 00 00 4209*  	ld de,64
043012 DD 21 C0 0B 4210*  	ld ix,3008
       00          
043017 CD 6D B8 04 4211*  	call vdu_load_img
04301B C9          4212*  	ret
04301C             4213*  
04301C             4214*  ld_58_032:
04301C 21 84 48 04 4215*  	ld hl,F58_032
043020 22 F2 B6 04 4216*  	ld (cur_filename),hl
043024 11 FC C2 04 4217*  	ld de,filedata
043028 01 00 00 01 4218*  	ld bc,65536
04302C 3E 01       4219*  	ld a,mos_load
04302E 5B CF       4220*  	RST.LIL 08h
043030 21 F1 01 00 4221*  	ld hl,BUF_58_032
043034 01 41 00 00 4222*  	ld bc,65
043038 11 40 00 00 4223*  	ld de,64
04303C DD 21 40 10 4224*  	ld ix,4160
       00          
043041 CD 6D B8 04 4225*  	call vdu_load_img
043045 C9          4226*  	ret
043046             4227*  
043046             4228*  ld_58_035:
043046 21 98 48 04 4229*  	ld hl,F58_035
04304A 22 F2 B6 04 4230*  	ld (cur_filename),hl
04304E 11 FC C2 04 4231*  	ld de,filedata
043052 01 00 00 01 4232*  	ld bc,65536
043056 3E 01       4233*  	ld a,mos_load
043058 5B CF       4234*  	RST.LIL 08h
04305A 21 F2 01 00 4235*  	ld hl,BUF_58_035
04305E 01 3F 00 00 4236*  	ld bc,63
043062 11 6B 00 00 4237*  	ld de,107
043066 DD 21 55 1A 4238*  	ld ix,6741
       00          
04306B CD 6D B8 04 4239*  	call vdu_load_img
04306F C9          4240*  	ret
043070             4241*  
043070             4242*  ld_58_036:
043070 21 AC 48 04 4243*  	ld hl,F58_036
043074 22 F2 B6 04 4244*  	ld (cur_filename),hl
043078 11 FC C2 04 4245*  	ld de,filedata
04307C 01 00 00 01 4246*  	ld bc,65536
043080 3E 01       4247*  	ld a,mos_load
043082 5B CF       4248*  	RST.LIL 08h
043084 21 F3 01 00 4249*  	ld hl,BUF_58_036
043088 01 16 00 00 4250*  	ld bc,22
04308C 11 6B 00 00 4251*  	ld de,107
043090 DD 21 32 09 4252*  	ld ix,2354
       00          
043095 CD 6D B8 04 4253*  	call vdu_load_img
043099 C9          4254*  	ret
04309A             4255*  
04309A             4256*  ld_58_037:
04309A 21 C0 48 04 4257*  	ld hl,F58_037
04309E 22 F2 B6 04 4258*  	ld (cur_filename),hl
0430A2 11 FC C2 04 4259*  	ld de,filedata
0430A6 01 00 00 01 4260*  	ld bc,65536
0430AA 3E 01       4261*  	ld a,mos_load
0430AC 5B CF       4262*  	RST.LIL 08h
0430AE 21 F4 01 00 4263*  	ld hl,BUF_58_037
0430B2 01 15 00 00 4264*  	ld bc,21
0430B6 11 69 00 00 4265*  	ld de,105
0430BA DD 21 9D 08 4266*  	ld ix,2205
       00          
0430BF CD 6D B8 04 4267*  	call vdu_load_img
0430C3 C9          4268*  	ret
0430C4             4269*  
0430C4             4270*  ld_58_038:
0430C4 21 D4 48 04 4271*  	ld hl,F58_038
0430C8 22 F2 B6 04 4272*  	ld (cur_filename),hl
0430CC 11 FC C2 04 4273*  	ld de,filedata
0430D0 01 00 00 01 4274*  	ld bc,65536
0430D4 3E 01       4275*  	ld a,mos_load
0430D6 5B CF       4276*  	RST.LIL 08h
0430D8 21 F5 01 00 4277*  	ld hl,BUF_58_038
0430DC 01 3F 00 00 4278*  	ld bc,63
0430E0 11 6B 00 00 4279*  	ld de,107
0430E4 DD 21 55 1A 4280*  	ld ix,6741
       00          
0430E9 CD 6D B8 04 4281*  	call vdu_load_img
0430ED C9          4282*  	ret
0430EE             4283*  
0430EE             4284*  ld_58_040:
0430EE 21 E8 48 04 4285*  	ld hl,F58_040
0430F2 22 F2 B6 04 4286*  	ld (cur_filename),hl
0430F6 11 FC C2 04 4287*  	ld de,filedata
0430FA 01 00 00 01 4288*  	ld bc,65536
0430FE 3E 01       4289*  	ld a,mos_load
043100 5B CF       4290*  	RST.LIL 08h
043102 21 F6 01 00 4291*  	ld hl,BUF_58_040
043106 01 6C 00 00 4292*  	ld bc,108
04310A 11 6B 00 00 4293*  	ld de,107
04310E DD 21 24 2D 4294*  	ld ix,11556
       00          
043113 CD 6D B8 04 4295*  	call vdu_load_img
043117 C9          4296*  	ret
043118             4297*  
043118             4298*  ld_58_042:
043118 21 FC 48 04 4299*  	ld hl,F58_042
04311C 22 F2 B6 04 4300*  	ld (cur_filename),hl
043120 11 FC C2 04 4301*  	ld de,filedata
043124 01 00 00 01 4302*  	ld bc,65536
043128 3E 01       4303*  	ld a,mos_load
04312A 5B CF       4304*  	RST.LIL 08h
04312C 21 F7 01 00 4305*  	ld hl,BUF_58_042
043130 01 6A 00 00 4306*  	ld bc,106
043134 11 A0 00 00 4307*  	ld de,160
043138 DD 21 40 42 4308*  	ld ix,16960
       00          
04313D CD 6D B8 04 4309*  	call vdu_load_img
043141 C9          4310*  	ret
043142             4311*  
043142             4312*  ld_58_043:
043142 21 10 49 04 4313*  	ld hl,F58_043
043146 22 F2 B6 04 4314*  	ld (cur_filename),hl
04314A 11 FC C2 04 4315*  	ld de,filedata
04314E 01 00 00 01 4316*  	ld bc,65536
043152 3E 01       4317*  	ld a,mos_load
043154 5B CF       4318*  	RST.LIL 08h
043156 21 F8 01 00 4319*  	ld hl,BUF_58_043
04315A 01 6B 00 00 4320*  	ld bc,107
04315E 11 A0 00 00 4321*  	ld de,160
043162 DD 21 E0 42 4322*  	ld ix,17120
       00          
043167 CD 6D B8 04 4323*  	call vdu_load_img
04316B C9          4324*  	ret
04316C             4325*  
04316C             4326*  ld_58_044:
04316C 21 24 49 04 4327*  	ld hl,F58_044
043170 22 F2 B6 04 4328*  	ld (cur_filename),hl
043174 11 FC C2 04 4329*  	ld de,filedata
043178 01 00 00 01 4330*  	ld bc,65536
04317C 3E 01       4331*  	ld a,mos_load
04317E 5B CF       4332*  	RST.LIL 08h
043180 21 F9 01 00 4333*  	ld hl,BUF_58_044
043184 01 40 01 00 4334*  	ld bc,320
043188 11 A0 00 00 4335*  	ld de,160
04318C DD 21 00 C8 4336*  	ld ix,51200
       00          
043191 CD 6D B8 04 4337*  	call vdu_load_img
043195 C9          4338*  	ret
043196             4339*  
043196             4340*  ld_59_004:
043196 21 38 49 04 4341*  	ld hl,F59_004
04319A 22 F2 B6 04 4342*  	ld (cur_filename),hl
04319E 11 FC C2 04 4343*  	ld de,filedata
0431A2 01 00 00 01 4344*  	ld bc,65536
0431A6 3E 01       4345*  	ld a,mos_load
0431A8 5B CF       4346*  	RST.LIL 08h
0431AA 21 FA 01 00 4347*  	ld hl,BUF_59_004
0431AE 01 24 00 00 4348*  	ld bc,36
0431B2 11 23 00 00 4349*  	ld de,35
0431B6 DD 21 EC 04 4350*  	ld ix,1260
       00          
0431BB CD 6D B8 04 4351*  	call vdu_load_img
0431BF C9          4352*  	ret
0431C0             4353*  
0431C0             4354*  ld_59_009:
0431C0 21 4C 49 04 4355*  	ld hl,F59_009
0431C4 22 F2 B6 04 4356*  	ld (cur_filename),hl
0431C8 11 FC C2 04 4357*  	ld de,filedata
0431CC 01 00 00 01 4358*  	ld bc,65536
0431D0 3E 01       4359*  	ld a,mos_load
0431D2 5B CF       4360*  	RST.LIL 08h
0431D4 21 FB 01 00 4361*  	ld hl,BUF_59_009
0431D8 01 23 00 00 4362*  	ld bc,35
0431DC 11 2D 00 00 4363*  	ld de,45
0431E0 DD 21 27 06 4364*  	ld ix,1575
       00          
0431E5 CD 6D B8 04 4365*  	call vdu_load_img
0431E9 C9          4366*  	ret
0431EA             4367*  
0431EA             4368*  ld_59_010:
0431EA 21 60 49 04 4369*  	ld hl,F59_010
0431EE 22 F2 B6 04 4370*  	ld (cur_filename),hl
0431F2 11 FC C2 04 4371*  	ld de,filedata
0431F6 01 00 00 01 4372*  	ld bc,65536
0431FA 3E 01       4373*  	ld a,mos_load
0431FC 5B CF       4374*  	RST.LIL 08h
0431FE 21 FC 01 00 4375*  	ld hl,BUF_59_010
043202 01 19 00 00 4376*  	ld bc,25
043206 11 2D 00 00 4377*  	ld de,45
04320A DD 21 65 04 4378*  	ld ix,1125
       00          
04320F CD 6D B8 04 4379*  	call vdu_load_img
043213 C9          4380*  	ret
043214             4381*  
043214             4382*  ld_59_011:
043214 21 74 49 04 4383*  	ld hl,F59_011
043218 22 F2 B6 04 4384*  	ld (cur_filename),hl
04321C 11 FC C2 04 4385*  	ld de,filedata
043220 01 00 00 01 4386*  	ld bc,65536
043224 3E 01       4387*  	ld a,mos_load
043226 5B CF       4388*  	RST.LIL 08h
043228 21 FD 01 00 4389*  	ld hl,BUF_59_011
04322C 01 0F 00 00 4390*  	ld bc,15
043230 11 2D 00 00 4391*  	ld de,45
043234 DD 21 A3 02 4392*  	ld ix,675
       00          
043239 CD 6D B8 04 4393*  	call vdu_load_img
04323D C9          4394*  	ret
04323E             4395*  
04323E             4396*  ld_59_012:
04323E 21 88 49 04 4397*  	ld hl,F59_012
043242 22 F2 B6 04 4398*  	ld (cur_filename),hl
043246 11 FC C2 04 4399*  	ld de,filedata
04324A 01 00 00 01 4400*  	ld bc,65536
04324E 3E 01       4401*  	ld a,mos_load
043250 5B CF       4402*  	RST.LIL 08h
043252 21 FE 01 00 4403*  	ld hl,BUF_59_012
043256 01 05 00 00 4404*  	ld bc,5
04325A 11 2D 00 00 4405*  	ld de,45
04325E DD 21 E1 00 4406*  	ld ix,225
       00          
043263 CD 6D B8 04 4407*  	call vdu_load_img
043267 C9          4408*  	ret
043268             4409*  
043268             4410*  ld_59_013:
043268 21 9C 49 04 4411*  	ld hl,F59_013
04326C 22 F2 B6 04 4412*  	ld (cur_filename),hl
043270 11 FC C2 04 4413*  	ld de,filedata
043274 01 00 00 01 4414*  	ld bc,65536
043278 3E 01       4415*  	ld a,mos_load
04327A 5B CF       4416*  	RST.LIL 08h
04327C 21 FF 01 00 4417*  	ld hl,BUF_59_013
043280 01 05 00 00 4418*  	ld bc,5
043284 11 2B 00 00 4419*  	ld de,43
043288 DD 21 D7 00 4420*  	ld ix,215
       00          
04328D CD 6D B8 04 4421*  	call vdu_load_img
043291 C9          4422*  	ret
043292             4423*  
043292             4424*  ld_59_014:
043292 21 B0 49 04 4425*  	ld hl,F59_014
043296 22 F2 B6 04 4426*  	ld (cur_filename),hl
04329A 11 FC C2 04 4427*  	ld de,filedata
04329E 01 00 00 01 4428*  	ld bc,65536
0432A2 3E 01       4429*  	ld a,mos_load
0432A4 5B CF       4430*  	RST.LIL 08h
0432A6 21 00 02 00 4431*  	ld hl,BUF_59_014
0432AA 01 0F 00 00 4432*  	ld bc,15
0432AE 11 2D 00 00 4433*  	ld de,45
0432B2 DD 21 A3 02 4434*  	ld ix,675
       00          
0432B7 CD 6D B8 04 4435*  	call vdu_load_img
0432BB C9          4436*  	ret
0432BC             4437*  
0432BC             4438*  ld_59_015:
0432BC 21 C4 49 04 4439*  	ld hl,F59_015
0432C0 22 F2 B6 04 4440*  	ld (cur_filename),hl
0432C4 11 FC C2 04 4441*  	ld de,filedata
0432C8 01 00 00 01 4442*  	ld bc,65536
0432CC 3E 01       4443*  	ld a,mos_load
0432CE 5B CF       4444*  	RST.LIL 08h
0432D0 21 01 02 00 4445*  	ld hl,BUF_59_015
0432D4 01 19 00 00 4446*  	ld bc,25
0432D8 11 2D 00 00 4447*  	ld de,45
0432DC DD 21 65 04 4448*  	ld ix,1125
       00          
0432E1 CD 6D B8 04 4449*  	call vdu_load_img
0432E5 C9          4450*  	ret
0432E6             4451*  
0432E6             4452*  ld_59_016:
0432E6 21 D8 49 04 4453*  	ld hl,F59_016
0432EA 22 F2 B6 04 4454*  	ld (cur_filename),hl
0432EE 11 FC C2 04 4455*  	ld de,filedata
0432F2 01 00 00 01 4456*  	ld bc,65536
0432F6 3E 01       4457*  	ld a,mos_load
0432F8 5B CF       4458*  	RST.LIL 08h
0432FA 21 02 02 00 4459*  	ld hl,BUF_59_016
0432FE 01 23 00 00 4460*  	ld bc,35
043302 11 2D 00 00 4461*  	ld de,45
043306 DD 21 27 06 4462*  	ld ix,1575
       00          
04330B CD 6D B8 04 4463*  	call vdu_load_img
04330F C9          4464*  	ret
043310             4465*  
043310             4466*  ld_59_020:
043310 21 EC 49 04 4467*  	ld hl,F59_020
043314 22 F2 B6 04 4468*  	ld (cur_filename),hl
043318 11 FC C2 04 4469*  	ld de,filedata
04331C 01 00 00 01 4470*  	ld bc,65536
043320 3E 01       4471*  	ld a,mos_load
043322 5B CF       4472*  	RST.LIL 08h
043324 21 03 02 00 4473*  	ld hl,BUF_59_020
043328 01 2E 00 00 4474*  	ld bc,46
04332C 11 2D 00 00 4475*  	ld de,45
043330 DD 21 16 08 4476*  	ld ix,2070
       00          
043335 CD 6D B8 04 4477*  	call vdu_load_img
043339 C9          4478*  	ret
04333A             4479*  
04333A             4480*  ld_59_024:
04333A 21 00 4A 04 4481*  	ld hl,F59_024
04333E 22 F2 B6 04 4482*  	ld (cur_filename),hl
043342 11 FC C2 04 4483*  	ld de,filedata
043346 01 00 00 01 4484*  	ld bc,65536
04334A 3E 01       4485*  	ld a,mos_load
04334C 5B CF       4486*  	RST.LIL 08h
04334E 21 04 02 00 4487*  	ld hl,BUF_59_024
043352 01 2E 00 00 4488*  	ld bc,46
043356 11 40 00 00 4489*  	ld de,64
04335A DD 21 80 0B 4490*  	ld ix,2944
       00          
04335F CD 6D B8 04 4491*  	call vdu_load_img
043363 C9          4492*  	ret
043364             4493*  
043364             4494*  ld_59_025:
043364 21 14 4A 04 4495*  	ld hl,F59_025
043368 22 F2 B6 04 4496*  	ld (cur_filename),hl
04336C 11 FC C2 04 4497*  	ld de,filedata
043370 01 00 00 01 4498*  	ld bc,65536
043374 3E 01       4499*  	ld a,mos_load
043376 5B CF       4500*  	RST.LIL 08h
043378 21 05 02 00 4501*  	ld hl,BUF_59_025
04337C 01 1C 00 00 4502*  	ld bc,28
043380 11 40 00 00 4503*  	ld de,64
043384 DD 21 00 07 4504*  	ld ix,1792
       00          
043389 CD 6D B8 04 4505*  	call vdu_load_img
04338D C9          4506*  	ret
04338E             4507*  
04338E             4508*  ld_59_026:
04338E 21 28 4A 04 4509*  	ld hl,F59_026
043392 22 F2 B6 04 4510*  	ld (cur_filename),hl
043396 11 FC C2 04 4511*  	ld de,filedata
04339A 01 00 00 01 4512*  	ld bc,65536
04339E 3E 01       4513*  	ld a,mos_load
0433A0 5B CF       4514*  	RST.LIL 08h
0433A2 21 06 02 00 4515*  	ld hl,BUF_59_026
0433A6 01 09 00 00 4516*  	ld bc,9
0433AA 11 40 00 00 4517*  	ld de,64
0433AE DD 21 40 02 4518*  	ld ix,576
       00          
0433B3 CD 6D B8 04 4519*  	call vdu_load_img
0433B7 C9          4520*  	ret
0433B8             4521*  
0433B8             4522*  ld_59_027:
0433B8 21 3C 4A 04 4523*  	ld hl,F59_027
0433BC 22 F2 B6 04 4524*  	ld (cur_filename),hl
0433C0 11 FC C2 04 4525*  	ld de,filedata
0433C4 01 00 00 01 4526*  	ld bc,65536
0433C8 3E 01       4527*  	ld a,mos_load
0433CA 5B CF       4528*  	RST.LIL 08h
0433CC 21 07 02 00 4529*  	ld hl,BUF_59_027
0433D0 01 0A 00 00 4530*  	ld bc,10
0433D4 11 3E 00 00 4531*  	ld de,62
0433D8 DD 21 6C 02 4532*  	ld ix,620
       00          
0433DD CD 6D B8 04 4533*  	call vdu_load_img
0433E1 C9          4534*  	ret
0433E2             4535*  
0433E2             4536*  ld_59_028:
0433E2 21 50 4A 04 4537*  	ld hl,F59_028
0433E6 22 F2 B6 04 4538*  	ld (cur_filename),hl
0433EA 11 FC C2 04 4539*  	ld de,filedata
0433EE 01 00 00 01 4540*  	ld bc,65536
0433F2 3E 01       4541*  	ld a,mos_load
0433F4 5B CF       4542*  	RST.LIL 08h
0433F6 21 08 02 00 4543*  	ld hl,BUF_59_028
0433FA 01 1C 00 00 4544*  	ld bc,28
0433FE 11 40 00 00 4545*  	ld de,64
043402 DD 21 00 07 4546*  	ld ix,1792
       00          
043407 CD 6D B8 04 4547*  	call vdu_load_img
04340B C9          4548*  	ret
04340C             4549*  
04340C             4550*  ld_59_029:
04340C 21 64 4A 04 4551*  	ld hl,F59_029
043410 22 F2 B6 04 4552*  	ld (cur_filename),hl
043414 11 FC C2 04 4553*  	ld de,filedata
043418 01 00 00 01 4554*  	ld bc,65536
04341C 3E 01       4555*  	ld a,mos_load
04341E 5B CF       4556*  	RST.LIL 08h
043420 21 09 02 00 4557*  	ld hl,BUF_59_029
043424 01 2F 00 00 4558*  	ld bc,47
043428 11 40 00 00 4559*  	ld de,64
04342C DD 21 C0 0B 4560*  	ld ix,3008
       00          
043431 CD 6D B8 04 4561*  	call vdu_load_img
043435 C9          4562*  	ret
043436             4563*  
043436             4564*  ld_59_032:
043436 21 78 4A 04 4565*  	ld hl,F59_032
04343A 22 F2 B6 04 4566*  	ld (cur_filename),hl
04343E 11 FC C2 04 4567*  	ld de,filedata
043442 01 00 00 01 4568*  	ld bc,65536
043446 3E 01       4569*  	ld a,mos_load
043448 5B CF       4570*  	RST.LIL 08h
04344A 21 0A 02 00 4571*  	ld hl,BUF_59_032
04344E 01 41 00 00 4572*  	ld bc,65
043452 11 40 00 00 4573*  	ld de,64
043456 DD 21 40 10 4574*  	ld ix,4160
       00          
04345B CD 6D B8 04 4575*  	call vdu_load_img
04345F C9          4576*  	ret
043460             4577*  
043460             4578*  ld_59_035:
043460 21 8C 4A 04 4579*  	ld hl,F59_035
043464 22 F2 B6 04 4580*  	ld (cur_filename),hl
043468 11 FC C2 04 4581*  	ld de,filedata
04346C 01 00 00 01 4582*  	ld bc,65536
043470 3E 01       4583*  	ld a,mos_load
043472 5B CF       4584*  	RST.LIL 08h
043474 21 0B 02 00 4585*  	ld hl,BUF_59_035
043478 01 3F 00 00 4586*  	ld bc,63
04347C 11 6B 00 00 4587*  	ld de,107
043480 DD 21 55 1A 4588*  	ld ix,6741
       00          
043485 CD 6D B8 04 4589*  	call vdu_load_img
043489 C9          4590*  	ret
04348A             4591*  
04348A             4592*  ld_59_036:
04348A 21 A0 4A 04 4593*  	ld hl,F59_036
04348E 22 F2 B6 04 4594*  	ld (cur_filename),hl
043492 11 FC C2 04 4595*  	ld de,filedata
043496 01 00 00 01 4596*  	ld bc,65536
04349A 3E 01       4597*  	ld a,mos_load
04349C 5B CF       4598*  	RST.LIL 08h
04349E 21 0C 02 00 4599*  	ld hl,BUF_59_036
0434A2 01 16 00 00 4600*  	ld bc,22
0434A6 11 6B 00 00 4601*  	ld de,107
0434AA DD 21 32 09 4602*  	ld ix,2354
       00          
0434AF CD 6D B8 04 4603*  	call vdu_load_img
0434B3 C9          4604*  	ret
0434B4             4605*  
0434B4             4606*  ld_59_037:
0434B4 21 B4 4A 04 4607*  	ld hl,F59_037
0434B8 22 F2 B6 04 4608*  	ld (cur_filename),hl
0434BC 11 FC C2 04 4609*  	ld de,filedata
0434C0 01 00 00 01 4610*  	ld bc,65536
0434C4 3E 01       4611*  	ld a,mos_load
0434C6 5B CF       4612*  	RST.LIL 08h
0434C8 21 0D 02 00 4613*  	ld hl,BUF_59_037
0434CC 01 15 00 00 4614*  	ld bc,21
0434D0 11 69 00 00 4615*  	ld de,105
0434D4 DD 21 9D 08 4616*  	ld ix,2205
       00          
0434D9 CD 6D B8 04 4617*  	call vdu_load_img
0434DD C9          4618*  	ret
0434DE             4619*  
0434DE             4620*  ld_59_038:
0434DE 21 C8 4A 04 4621*  	ld hl,F59_038
0434E2 22 F2 B6 04 4622*  	ld (cur_filename),hl
0434E6 11 FC C2 04 4623*  	ld de,filedata
0434EA 01 00 00 01 4624*  	ld bc,65536
0434EE 3E 01       4625*  	ld a,mos_load
0434F0 5B CF       4626*  	RST.LIL 08h
0434F2 21 0E 02 00 4627*  	ld hl,BUF_59_038
0434F6 01 3F 00 00 4628*  	ld bc,63
0434FA 11 6B 00 00 4629*  	ld de,107
0434FE DD 21 55 1A 4630*  	ld ix,6741
       00          
043503 CD 6D B8 04 4631*  	call vdu_load_img
043507 C9          4632*  	ret
043508             4633*  
043508             4634*  ld_59_040:
043508 21 DC 4A 04 4635*  	ld hl,F59_040
04350C 22 F2 B6 04 4636*  	ld (cur_filename),hl
043510 11 FC C2 04 4637*  	ld de,filedata
043514 01 00 00 01 4638*  	ld bc,65536
043518 3E 01       4639*  	ld a,mos_load
04351A 5B CF       4640*  	RST.LIL 08h
04351C 21 0F 02 00 4641*  	ld hl,BUF_59_040
043520 01 6C 00 00 4642*  	ld bc,108
043524 11 6B 00 00 4643*  	ld de,107
043528 DD 21 24 2D 4644*  	ld ix,11556
       00          
04352D CD 6D B8 04 4645*  	call vdu_load_img
043531 C9          4646*  	ret
043532             4647*  
043532             4648*  ld_59_042:
043532 21 F0 4A 04 4649*  	ld hl,F59_042
043536 22 F2 B6 04 4650*  	ld (cur_filename),hl
04353A 11 FC C2 04 4651*  	ld de,filedata
04353E 01 00 00 01 4652*  	ld bc,65536
043542 3E 01       4653*  	ld a,mos_load
043544 5B CF       4654*  	RST.LIL 08h
043546 21 10 02 00 4655*  	ld hl,BUF_59_042
04354A 01 6A 00 00 4656*  	ld bc,106
04354E 11 A0 00 00 4657*  	ld de,160
043552 DD 21 40 42 4658*  	ld ix,16960
       00          
043557 CD 6D B8 04 4659*  	call vdu_load_img
04355B C9          4660*  	ret
04355C             4661*  
04355C             4662*  ld_59_043:
04355C 21 04 4B 04 4663*  	ld hl,F59_043
043560 22 F2 B6 04 4664*  	ld (cur_filename),hl
043564 11 FC C2 04 4665*  	ld de,filedata
043568 01 00 00 01 4666*  	ld bc,65536
04356C 3E 01       4667*  	ld a,mos_load
04356E 5B CF       4668*  	RST.LIL 08h
043570 21 11 02 00 4669*  	ld hl,BUF_59_043
043574 01 6B 00 00 4670*  	ld bc,107
043578 11 A0 00 00 4671*  	ld de,160
04357C DD 21 E0 42 4672*  	ld ix,17120
       00          
043581 CD 6D B8 04 4673*  	call vdu_load_img
043585 C9          4674*  	ret
043586             4675*  
043586             4676*  ld_59_044:
043586 21 18 4B 04 4677*  	ld hl,F59_044
04358A 22 F2 B6 04 4678*  	ld (cur_filename),hl
04358E 11 FC C2 04 4679*  	ld de,filedata
043592 01 00 00 01 4680*  	ld bc,65536
043596 3E 01       4681*  	ld a,mos_load
043598 5B CF       4682*  	RST.LIL 08h
04359A 21 12 02 00 4683*  	ld hl,BUF_59_044
04359E 01 40 01 00 4684*  	ld bc,320
0435A2 11 A0 00 00 4685*  	ld de,160
0435A6 DD 21 00 C8 4686*  	ld ix,51200
       00          
0435AB CD 6D B8 04 4687*  	call vdu_load_img
0435AF C9          4688*  	ret
0435B0             4689*  
0435B0             4690*  ; File name lookups:
0435B0 70 61 6E 65 4691*  F10_004: db "panels/10_004.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0435C4 70 61 6E 65 4692*  F10_009: db "panels/10_009.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0435D8 70 61 6E 65 4693*  F10_010: db "panels/10_010.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0435EC 70 61 6E 65 4694*  F10_011: db "panels/10_011.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043600 70 61 6E 65 4695*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043614 70 61 6E 65 4696*  F10_013: db "panels/10_013.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043628 70 61 6E 65 4697*  F10_014: db "panels/10_014.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
04363C 70 61 6E 65 4698*  F10_015: db "panels/10_015.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043650 70 61 6E 65 4699*  F10_016: db "panels/10_016.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043664 70 61 6E 65 4700*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043678 70 61 6E 65 4701*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04368C 70 61 6E 65 4702*  F10_025: db "panels/10_025.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0436A0 70 61 6E 65 4703*  F10_026: db "panels/10_026.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0436B4 70 61 6E 65 4704*  F10_027: db "panels/10_027.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0436C8 70 61 6E 65 4705*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0436DC 70 61 6E 65 4706*  F10_029: db "panels/10_029.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0436F0 70 61 6E 65 4707*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043704 70 61 6E 65 4708*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043718 70 61 6E 65 4709*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04372C 70 61 6E 65 4710*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043740 70 61 6E 65 4711*  F10_038: db "panels/10_038.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043754 70 61 6E 65 4712*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043768 70 61 6E 65 4713*  F10_042: db "panels/10_042.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04377C 70 61 6E 65 4714*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043790 70 61 6E 65 4715*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0437A4 70 61 6E 65 4716*  F11_004: db "panels/11_004.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0437B8 70 61 6E 65 4717*  F11_009: db "panels/11_009.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0437CC 70 61 6E 65 4718*  F11_010: db "panels/11_010.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0437E0 70 61 6E 65 4719*  F11_011: db "panels/11_011.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0437F4 70 61 6E 65 4720*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043808 70 61 6E 65 4721*  F11_013: db "panels/11_013.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04381C 70 61 6E 65 4722*  F11_014: db "panels/11_014.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043830 70 61 6E 65 4723*  F11_015: db "panels/11_015.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043844 70 61 6E 65 4724*  F11_016: db "panels/11_016.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043858 70 61 6E 65 4725*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04386C 70 61 6E 65 4726*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043880 70 61 6E 65 4727*  F11_025: db "panels/11_025.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043894 70 61 6E 65 4728*  F11_026: db "panels/11_026.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0438A8 70 61 6E 65 4729*  F11_027: db "panels/11_027.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0438BC 70 61 6E 65 4730*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0438D0 70 61 6E 65 4731*  F11_029: db "panels/11_029.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0438E4 70 61 6E 65 4732*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0438F8 70 61 6E 65 4733*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
04390C 70 61 6E 65 4734*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043920 70 61 6E 65 4735*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043934 70 61 6E 65 4736*  F11_038: db "panels/11_038.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043948 70 61 6E 65 4737*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04395C 70 61 6E 65 4738*  F11_042: db "panels/11_042.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043970 70 61 6E 65 4739*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043984 70 61 6E 65 4740*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043998 70 61 6E 65 4741*  F12_004: db "panels/12_004.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0439AC 70 61 6E 65 4742*  F12_009: db "panels/12_009.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0439C0 70 61 6E 65 4743*  F12_010: db "panels/12_010.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0439D4 70 61 6E 65 4744*  F12_011: db "panels/12_011.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0439E8 70 61 6E 65 4745*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0439FC 70 61 6E 65 4746*  F12_013: db "panels/12_013.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043A10 70 61 6E 65 4747*  F12_014: db "panels/12_014.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043A24 70 61 6E 65 4748*  F12_015: db "panels/12_015.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043A38 70 61 6E 65 4749*  F12_016: db "panels/12_016.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043A4C 70 61 6E 65 4750*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043A60 70 61 6E 65 4751*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043A74 70 61 6E 65 4752*  F12_025: db "panels/12_025.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043A88 70 61 6E 65 4753*  F12_026: db "panels/12_026.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043A9C 70 61 6E 65 4754*  F12_027: db "panels/12_027.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043AB0 70 61 6E 65 4755*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043AC4 70 61 6E 65 4756*  F12_029: db "panels/12_029.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043AD8 70 61 6E 65 4757*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043AEC 70 61 6E 65 4758*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043B00 70 61 6E 65 4759*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043B14 70 61 6E 65 4760*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043B28 70 61 6E 65 4761*  F12_038: db "panels/12_038.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043B3C 70 61 6E 65 4762*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043B50 70 61 6E 65 4763*  F12_042: db "panels/12_042.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043B64 70 61 6E 65 4764*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043B78 70 61 6E 65 4765*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043B8C 70 61 6E 65 4766*  F13_004: db "panels/13_004.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043BA0 70 61 6E 65 4767*  F13_009: db "panels/13_009.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043BB4 70 61 6E 65 4768*  F13_010: db "panels/13_010.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043BC8 70 61 6E 65 4769*  F13_011: db "panels/13_011.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043BDC 70 61 6E 65 4770*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043BF0 70 61 6E 65 4771*  F13_013: db "panels/13_013.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043C04 70 61 6E 65 4772*  F13_014: db "panels/13_014.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043C18 70 61 6E 65 4773*  F13_015: db "panels/13_015.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043C2C 70 61 6E 65 4774*  F13_016: db "panels/13_016.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043C40 70 61 6E 65 4775*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043C54 70 61 6E 65 4776*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043C68 70 61 6E 65 4777*  F13_025: db "panels/13_025.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043C7C 70 61 6E 65 4778*  F13_026: db "panels/13_026.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043C90 70 61 6E 65 4779*  F13_027: db "panels/13_027.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043CA4 70 61 6E 65 4780*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043CB8 70 61 6E 65 4781*  F13_029: db "panels/13_029.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043CCC 70 61 6E 65 4782*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043CE0 70 61 6E 65 4783*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043CF4 70 61 6E 65 4784*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043D08 70 61 6E 65 4785*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043D1C 70 61 6E 65 4786*  F13_038: db "panels/13_038.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043D30 70 61 6E 65 4787*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043D44 70 61 6E 65 4788*  F13_042: db "panels/13_042.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043D58 70 61 6E 65 4789*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043D6C 70 61 6E 65 4790*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D80 70 61 6E 65 4791*  F14_004: db "panels/14_004.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043D94 70 61 6E 65 4792*  F14_009: db "panels/14_009.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043DA8 70 61 6E 65 4793*  F14_010: db "panels/14_010.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043DBC 70 61 6E 65 4794*  F14_011: db "panels/14_011.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043DD0 70 61 6E 65 4795*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043DE4 70 61 6E 65 4796*  F14_013: db "panels/14_013.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043DF8 70 61 6E 65 4797*  F14_014: db "panels/14_014.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043E0C 70 61 6E 65 4798*  F14_015: db "panels/14_015.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043E20 70 61 6E 65 4799*  F14_016: db "panels/14_016.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043E34 70 61 6E 65 4800*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043E48 70 61 6E 65 4801*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043E5C 70 61 6E 65 4802*  F14_025: db "panels/14_025.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043E70 70 61 6E 65 4803*  F14_026: db "panels/14_026.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043E84 70 61 6E 65 4804*  F14_027: db "panels/14_027.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043E98 70 61 6E 65 4805*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043EAC 70 61 6E 65 4806*  F14_029: db "panels/14_029.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043EC0 70 61 6E 65 4807*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043ED4 70 61 6E 65 4808*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043EE8 70 61 6E 65 4809*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043EFC 70 61 6E 65 4810*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043F10 70 61 6E 65 4811*  F14_038: db "panels/14_038.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043F24 70 61 6E 65 4812*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043F38 70 61 6E 65 4813*  F14_042: db "panels/14_042.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043F4C 70 61 6E 65 4814*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043F60 70 61 6E 65 4815*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043F74 70 61 6E 65 4816*  F15_004: db "panels/15_004.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043F88 70 61 6E 65 4817*  F15_009: db "panels/15_009.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043F9C 70 61 6E 65 4818*  F15_010: db "panels/15_010.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043FB0 70 61 6E 65 4819*  F15_011: db "panels/15_011.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043FC4 70 61 6E 65 4820*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043FD8 70 61 6E 65 4821*  F15_013: db "panels/15_013.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043FEC 70 61 6E 65 4822*  F15_014: db "panels/15_014.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044000 70 61 6E 65 4823*  F15_015: db "panels/15_015.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044014 70 61 6E 65 4824*  F15_016: db "panels/15_016.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044028 70 61 6E 65 4825*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04403C 70 61 6E 65 4826*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044050 70 61 6E 65 4827*  F15_025: db "panels/15_025.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044064 70 61 6E 65 4828*  F15_026: db "panels/15_026.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044078 70 61 6E 65 4829*  F15_027: db "panels/15_027.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04408C 70 61 6E 65 4830*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0440A0 70 61 6E 65 4831*  F15_029: db "panels/15_029.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0440B4 70 61 6E 65 4832*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0440C8 70 61 6E 65 4833*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0440DC 70 61 6E 65 4834*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0440F0 70 61 6E 65 4835*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044104 70 61 6E 65 4836*  F15_038: db "panels/15_038.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044118 70 61 6E 65 4837*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04412C 70 61 6E 65 4838*  F15_042: db "panels/15_042.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044140 70 61 6E 65 4839*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044154 70 61 6E 65 4840*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044168 70 61 6E 65 4841*  F16_004: db "panels/16_004.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04417C 70 61 6E 65 4842*  F16_009: db "panels/16_009.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044190 70 61 6E 65 4843*  F16_010: db "panels/16_010.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0441A4 70 61 6E 65 4844*  F16_011: db "panels/16_011.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0441B8 70 61 6E 65 4845*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0441CC 70 61 6E 65 4846*  F16_013: db "panels/16_013.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0441E0 70 61 6E 65 4847*  F16_014: db "panels/16_014.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0441F4 70 61 6E 65 4848*  F16_015: db "panels/16_015.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044208 70 61 6E 65 4849*  F16_016: db "panels/16_016.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04421C 70 61 6E 65 4850*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044230 70 61 6E 65 4851*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044244 70 61 6E 65 4852*  F16_025: db "panels/16_025.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044258 70 61 6E 65 4853*  F16_026: db "panels/16_026.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
04426C 70 61 6E 65 4854*  F16_027: db "panels/16_027.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044280 70 61 6E 65 4855*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044294 70 61 6E 65 4856*  F16_029: db "panels/16_029.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0442A8 70 61 6E 65 4857*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0442BC 70 61 6E 65 4858*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0442D0 70 61 6E 65 4859*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0442E4 70 61 6E 65 4860*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0442F8 70 61 6E 65 4861*  F16_038: db "panels/16_038.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
04430C 70 61 6E 65 4862*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044320 70 61 6E 65 4863*  F16_042: db "panels/16_042.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044334 70 61 6E 65 4864*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044348 70 61 6E 65 4865*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04435C 70 61 6E 65 4866*  F17_004: db "panels/17_004.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044370 70 61 6E 65 4867*  F17_009: db "panels/17_009.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044384 70 61 6E 65 4868*  F17_010: db "panels/17_010.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044398 70 61 6E 65 4869*  F17_011: db "panels/17_011.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0443AC 70 61 6E 65 4870*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0443C0 70 61 6E 65 4871*  F17_013: db "panels/17_013.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0443D4 70 61 6E 65 4872*  F17_014: db "panels/17_014.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0443E8 70 61 6E 65 4873*  F17_015: db "panels/17_015.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0443FC 70 61 6E 65 4874*  F17_016: db "panels/17_016.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044410 70 61 6E 65 4875*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044424 70 61 6E 65 4876*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044438 70 61 6E 65 4877*  F17_025: db "panels/17_025.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04444C 70 61 6E 65 4878*  F17_026: db "panels/17_026.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044460 70 61 6E 65 4879*  F17_027: db "panels/17_027.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044474 70 61 6E 65 4880*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044488 70 61 6E 65 4881*  F17_029: db "panels/17_029.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04449C 70 61 6E 65 4882*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0444B0 70 61 6E 65 4883*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0444C4 70 61 6E 65 4884*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0444D8 70 61 6E 65 4885*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0444EC 70 61 6E 65 4886*  F17_038: db "panels/17_038.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044500 70 61 6E 65 4887*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044514 70 61 6E 65 4888*  F17_042: db "panels/17_042.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044528 70 61 6E 65 4889*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04453C 70 61 6E 65 4890*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044550 70 61 6E 65 4891*  F57_004: db "panels/57_004.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044564 70 61 6E 65 4892*  F57_009: db "panels/57_009.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044578 70 61 6E 65 4893*  F57_010: db "panels/57_010.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04458C 70 61 6E 65 4894*  F57_011: db "panels/57_011.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0445A0 70 61 6E 65 4895*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0445B4 70 61 6E 65 4896*  F57_013: db "panels/57_013.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0445C8 70 61 6E 65 4897*  F57_014: db "panels/57_014.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0445DC 70 61 6E 65 4898*  F57_015: db "panels/57_015.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0445F0 70 61 6E 65 4899*  F57_016: db "panels/57_016.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044604 70 61 6E 65 4900*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044618 70 61 6E 65 4901*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04462C 70 61 6E 65 4902*  F57_025: db "panels/57_025.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044640 70 61 6E 65 4903*  F57_026: db "panels/57_026.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044654 70 61 6E 65 4904*  F57_027: db "panels/57_027.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044668 70 61 6E 65 4905*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04467C 70 61 6E 65 4906*  F57_029: db "panels/57_029.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044690 70 61 6E 65 4907*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0446A4 70 61 6E 65 4908*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0446B8 70 61 6E 65 4909*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0446CC 70 61 6E 65 4910*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0446E0 70 61 6E 65 4911*  F57_038: db "panels/57_038.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0446F4 70 61 6E 65 4912*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044708 70 61 6E 65 4913*  F57_042: db "panels/57_042.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04471C 70 61 6E 65 4914*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044730 70 61 6E 65 4915*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044744 70 61 6E 65 4916*  F58_004: db "panels/58_004.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044758 70 61 6E 65 4917*  F58_009: db "panels/58_009.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04476C 70 61 6E 65 4918*  F58_010: db "panels/58_010.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044780 70 61 6E 65 4919*  F58_011: db "panels/58_011.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044794 70 61 6E 65 4920*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0447A8 70 61 6E 65 4921*  F58_013: db "panels/58_013.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0447BC 70 61 6E 65 4922*  F58_014: db "panels/58_014.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0447D0 70 61 6E 65 4923*  F58_015: db "panels/58_015.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0447E4 70 61 6E 65 4924*  F58_016: db "panels/58_016.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0447F8 70 61 6E 65 4925*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04480C 70 61 6E 65 4926*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044820 70 61 6E 65 4927*  F58_025: db "panels/58_025.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044834 70 61 6E 65 4928*  F58_026: db "panels/58_026.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044848 70 61 6E 65 4929*  F58_027: db "panels/58_027.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04485C 70 61 6E 65 4930*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044870 70 61 6E 65 4931*  F58_029: db "panels/58_029.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044884 70 61 6E 65 4932*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044898 70 61 6E 65 4933*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0448AC 70 61 6E 65 4934*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0448C0 70 61 6E 65 4935*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0448D4 70 61 6E 65 4936*  F58_038: db "panels/58_038.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0448E8 70 61 6E 65 4937*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0448FC 70 61 6E 65 4938*  F58_042: db "panels/58_042.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044910 70 61 6E 65 4939*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044924 70 61 6E 65 4940*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044938 70 61 6E 65 4941*  F59_004: db "panels/59_004.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04494C 70 61 6E 65 4942*  F59_009: db "panels/59_009.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044960 70 61 6E 65 4943*  F59_010: db "panels/59_010.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044974 70 61 6E 65 4944*  F59_011: db "panels/59_011.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044988 70 61 6E 65 4945*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04499C 70 61 6E 65 4946*  F59_013: db "panels/59_013.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0449B0 70 61 6E 65 4947*  F59_014: db "panels/59_014.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0449C4 70 61 6E 65 4948*  F59_015: db "panels/59_015.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0449D8 70 61 6E 65 4949*  F59_016: db "panels/59_016.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0449EC 70 61 6E 65 4950*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044A00 70 61 6E 65 4951*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044A14 70 61 6E 65 4952*  F59_025: db "panels/59_025.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044A28 70 61 6E 65 4953*  F59_026: db "panels/59_026.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044A3C 70 61 6E 65 4954*  F59_027: db "panels/59_027.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044A50 70 61 6E 65 4955*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044A64 70 61 6E 65 4956*  F59_029: db "panels/59_029.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044A78 70 61 6E 65 4957*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A8C 70 61 6E 65 4958*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044AA0 70 61 6E 65 4959*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044AB4 70 61 6E 65 4960*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044AC8 70 61 6E 65 4961*  F59_038: db "panels/59_038.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044ADC 70 61 6E 65 4962*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044AF0 70 61 6E 65 4963*  F59_042: db "panels/59_042.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044B04 70 61 6E 65 4964*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044B18 70 61 6E 65 4965*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044B2C             4966*  
044B2C             4967*  ; sprite buffer ids:
044B2C             4968*  BUF_20_004: equ 0x0213
044B2C             4969*  BUF_20_020: equ 0x0214
044B2C             4970*  BUF_20_032: equ 0x0215
044B2C             4971*  BUF_20_040: equ 0x0216
044B2C             4972*  BUF_20_044: equ 0x0217
044B2C             4973*  BUF_21_004: equ 0x0218
044B2C             4974*  BUF_21_020: equ 0x0219
044B2C             4975*  BUF_21_032: equ 0x021A
044B2C             4976*  BUF_21_040: equ 0x021B
044B2C             4977*  BUF_21_044: equ 0x021C
044B2C             4978*  BUF_22_004: equ 0x021D
044B2C             4979*  BUF_22_020: equ 0x021E
044B2C             4980*  BUF_22_032: equ 0x021F
044B2C             4981*  BUF_22_040: equ 0x0220
044B2C             4982*  BUF_22_044: equ 0x0221
044B2C             4983*  BUF_23_004: equ 0x0222
044B2C             4984*  BUF_23_020: equ 0x0223
044B2C             4985*  BUF_23_032: equ 0x0224
044B2C             4986*  BUF_23_040: equ 0x0225
044B2C             4987*  BUF_23_044: equ 0x0226
044B2C             4988*  BUF_24_004: equ 0x0227
044B2C             4989*  BUF_24_020: equ 0x0228
044B2C             4990*  BUF_24_032: equ 0x0229
044B2C             4991*  BUF_24_040: equ 0x022A
044B2C             4992*  BUF_24_044: equ 0x022B
044B2C             4993*  BUF_40_004: equ 0x022C
044B2C             4994*  BUF_40_020: equ 0x022D
044B2C             4995*  BUF_40_032: equ 0x022E
044B2C             4996*  BUF_40_040: equ 0x022F
044B2C             4997*  BUF_40_044: equ 0x0230
044B2C             4998*  BUF_41_004: equ 0x0231
044B2C             4999*  BUF_41_020: equ 0x0232
044B2C             5000*  BUF_41_032: equ 0x0233
044B2C             5001*  BUF_41_040: equ 0x0234
044B2C             5002*  BUF_41_044: equ 0x0235
044B2C             5003*  BUF_42_004: equ 0x0236
044B2C             5004*  BUF_42_020: equ 0x0237
044B2C             5005*  BUF_42_032: equ 0x0238
044B2C             5006*  BUF_42_040: equ 0x0239
044B2C             5007*  BUF_42_044: equ 0x023A
044B2C             5008*  BUF_43_004: equ 0x023B
044B2C             5009*  BUF_43_020: equ 0x023C
044B2C             5010*  BUF_43_032: equ 0x023D
044B2C             5011*  BUF_43_040: equ 0x023E
044B2C             5012*  BUF_43_044: equ 0x023F
044B2C             5013*  BUF_44_004: equ 0x0240
044B2C             5014*  BUF_44_020: equ 0x0241
044B2C             5015*  BUF_44_032: equ 0x0242
044B2C             5016*  BUF_44_040: equ 0x0243
044B2C             5017*  BUF_44_044: equ 0x0244
044B2C             5018*  BUF_45_004: equ 0x0245
044B2C             5019*  BUF_45_020: equ 0x0246
044B2C             5020*  BUF_45_032: equ 0x0247
044B2C             5021*  BUF_45_040: equ 0x0248
044B2C             5022*  BUF_45_044: equ 0x0249
044B2C             5023*  BUF_46_004: equ 0x024A
044B2C             5024*  BUF_46_020: equ 0x024B
044B2C             5025*  BUF_46_032: equ 0x024C
044B2C             5026*  BUF_46_040: equ 0x024D
044B2C             5027*  BUF_46_044: equ 0x024E
044B2C             5028*  BUF_47_004: equ 0x024F
044B2C             5029*  BUF_47_020: equ 0x0250
044B2C             5030*  BUF_47_032: equ 0x0251
044B2C             5031*  BUF_47_040: equ 0x0252
044B2C             5032*  BUF_47_044: equ 0x0253
044B2C             5033*  BUF_48_004: equ 0x0254
044B2C             5034*  BUF_48_020: equ 0x0255
044B2C             5035*  BUF_48_032: equ 0x0256
044B2C             5036*  BUF_48_040: equ 0x0257
044B2C             5037*  BUF_48_044: equ 0x0258
044B2C             5038*  BUF_49_004: equ 0x0259
044B2C             5039*  BUF_49_020: equ 0x025A
044B2C             5040*  BUF_49_032: equ 0x025B
044B2C             5041*  BUF_49_040: equ 0x025C
044B2C             5042*  BUF_49_044: equ 0x025D
044B2C             5043*  BUF_50_004: equ 0x025E
044B2C             5044*  BUF_50_020: equ 0x025F
044B2C             5045*  BUF_50_032: equ 0x0260
044B2C             5046*  BUF_50_040: equ 0x0261
044B2C             5047*  BUF_50_044: equ 0x0262
044B2C             5048*  BUF_51_004: equ 0x0263
044B2C             5049*  BUF_51_020: equ 0x0264
044B2C             5050*  BUF_51_032: equ 0x0265
044B2C             5051*  BUF_51_040: equ 0x0266
044B2C             5052*  BUF_51_044: equ 0x0267
044B2C             5053*  BUF_52_004: equ 0x0268
044B2C             5054*  BUF_52_020: equ 0x0269
044B2C             5055*  BUF_52_032: equ 0x026A
044B2C             5056*  BUF_52_040: equ 0x026B
044B2C             5057*  BUF_52_044: equ 0x026C
044B2C             5058*  
044B2C             5059*  sprite_num_panels: equ 90
044B2C             5060*  
044B2C             5061*  ; sprite buffer id reverse lookup:
044B2C             5062*  sprite_buffer_id_lut:
044B2C 13 02 00    5063*  	dl BUF_20_004
044B2F 14 02 00    5064*  	dl BUF_20_020
044B32 15 02 00    5065*  	dl BUF_20_032
044B35 16 02 00    5066*  	dl BUF_20_040
044B38 17 02 00    5067*  	dl BUF_20_044
044B3B 18 02 00    5068*  	dl BUF_21_004
044B3E 19 02 00    5069*  	dl BUF_21_020
044B41 1A 02 00    5070*  	dl BUF_21_032
044B44 1B 02 00    5071*  	dl BUF_21_040
044B47 1C 02 00    5072*  	dl BUF_21_044
044B4A 1D 02 00    5073*  	dl BUF_22_004
044B4D 1E 02 00    5074*  	dl BUF_22_020
044B50 1F 02 00    5075*  	dl BUF_22_032
044B53 20 02 00    5076*  	dl BUF_22_040
044B56 21 02 00    5077*  	dl BUF_22_044
044B59 22 02 00    5078*  	dl BUF_23_004
044B5C 23 02 00    5079*  	dl BUF_23_020
044B5F 24 02 00    5080*  	dl BUF_23_032
044B62 25 02 00    5081*  	dl BUF_23_040
044B65 26 02 00    5082*  	dl BUF_23_044
044B68 27 02 00    5083*  	dl BUF_24_004
044B6B 28 02 00    5084*  	dl BUF_24_020
044B6E 29 02 00    5085*  	dl BUF_24_032
044B71 2A 02 00    5086*  	dl BUF_24_040
044B74 2B 02 00    5087*  	dl BUF_24_044
044B77 2C 02 00    5088*  	dl BUF_40_004
044B7A 2D 02 00    5089*  	dl BUF_40_020
044B7D 2E 02 00    5090*  	dl BUF_40_032
044B80 2F 02 00    5091*  	dl BUF_40_040
044B83 30 02 00    5092*  	dl BUF_40_044
044B86 31 02 00    5093*  	dl BUF_41_004
044B89 32 02 00    5094*  	dl BUF_41_020
044B8C 33 02 00    5095*  	dl BUF_41_032
044B8F 34 02 00    5096*  	dl BUF_41_040
044B92 35 02 00    5097*  	dl BUF_41_044
044B95 36 02 00    5098*  	dl BUF_42_004
044B98 37 02 00    5099*  	dl BUF_42_020
044B9B 38 02 00    5100*  	dl BUF_42_032
044B9E 39 02 00    5101*  	dl BUF_42_040
044BA1 3A 02 00    5102*  	dl BUF_42_044
044BA4 3B 02 00    5103*  	dl BUF_43_004
044BA7 3C 02 00    5104*  	dl BUF_43_020
044BAA 3D 02 00    5105*  	dl BUF_43_032
044BAD 3E 02 00    5106*  	dl BUF_43_040
044BB0 3F 02 00    5107*  	dl BUF_43_044
044BB3 40 02 00    5108*  	dl BUF_44_004
044BB6 41 02 00    5109*  	dl BUF_44_020
044BB9 42 02 00    5110*  	dl BUF_44_032
044BBC 43 02 00    5111*  	dl BUF_44_040
044BBF 44 02 00    5112*  	dl BUF_44_044
044BC2 45 02 00    5113*  	dl BUF_45_004
044BC5 46 02 00    5114*  	dl BUF_45_020
044BC8 47 02 00    5115*  	dl BUF_45_032
044BCB 48 02 00    5116*  	dl BUF_45_040
044BCE 49 02 00    5117*  	dl BUF_45_044
044BD1 4A 02 00    5118*  	dl BUF_46_004
044BD4 4B 02 00    5119*  	dl BUF_46_020
044BD7 4C 02 00    5120*  	dl BUF_46_032
044BDA 4D 02 00    5121*  	dl BUF_46_040
044BDD 4E 02 00    5122*  	dl BUF_46_044
044BE0 4F 02 00    5123*  	dl BUF_47_004
044BE3 50 02 00    5124*  	dl BUF_47_020
044BE6 51 02 00    5125*  	dl BUF_47_032
044BE9 52 02 00    5126*  	dl BUF_47_040
044BEC 53 02 00    5127*  	dl BUF_47_044
044BEF 54 02 00    5128*  	dl BUF_48_004
044BF2 55 02 00    5129*  	dl BUF_48_020
044BF5 56 02 00    5130*  	dl BUF_48_032
044BF8 57 02 00    5131*  	dl BUF_48_040
044BFB 58 02 00    5132*  	dl BUF_48_044
044BFE 59 02 00    5133*  	dl BUF_49_004
044C01 5A 02 00    5134*  	dl BUF_49_020
044C04 5B 02 00    5135*  	dl BUF_49_032
044C07 5C 02 00    5136*  	dl BUF_49_040
044C0A 5D 02 00    5137*  	dl BUF_49_044
044C0D 5E 02 00    5138*  	dl BUF_50_004
044C10 5F 02 00    5139*  	dl BUF_50_020
044C13 60 02 00    5140*  	dl BUF_50_032
044C16 61 02 00    5141*  	dl BUF_50_040
044C19 62 02 00    5142*  	dl BUF_50_044
044C1C 63 02 00    5143*  	dl BUF_51_004
044C1F 64 02 00    5144*  	dl BUF_51_020
044C22 65 02 00    5145*  	dl BUF_51_032
044C25 66 02 00    5146*  	dl BUF_51_040
044C28 67 02 00    5147*  	dl BUF_51_044
044C2B 68 02 00    5148*  	dl BUF_52_004
044C2E 69 02 00    5149*  	dl BUF_52_020
044C31 6A 02 00    5150*  	dl BUF_52_032
044C34 6B 02 00    5151*  	dl BUF_52_040
044C37 6C 02 00    5152*  	dl BUF_52_044
044C3A             5153*  
044C3A             5154*  ; sprite load routines jump table:
044C3A             5155*  sprite_load_panels_table:
044C3A 48 4D 04    5156*  	dl ld_20_004
044C3D 72 4D 04    5157*  	dl ld_20_020
044C40 9C 4D 04    5158*  	dl ld_20_032
044C43 C6 4D 04    5159*  	dl ld_20_040
044C46 F0 4D 04    5160*  	dl ld_20_044
044C49 1A 4E 04    5161*  	dl ld_21_004
044C4C 44 4E 04    5162*  	dl ld_21_020
044C4F 6E 4E 04    5163*  	dl ld_21_032
044C52 98 4E 04    5164*  	dl ld_21_040
044C55 C2 4E 04    5165*  	dl ld_21_044
044C58 EC 4E 04    5166*  	dl ld_22_004
044C5B 16 4F 04    5167*  	dl ld_22_020
044C5E 40 4F 04    5168*  	dl ld_22_032
044C61 6A 4F 04    5169*  	dl ld_22_040
044C64 94 4F 04    5170*  	dl ld_22_044
044C67 BE 4F 04    5171*  	dl ld_23_004
044C6A E8 4F 04    5172*  	dl ld_23_020
044C6D 12 50 04    5173*  	dl ld_23_032
044C70 3C 50 04    5174*  	dl ld_23_040
044C73 66 50 04    5175*  	dl ld_23_044
044C76 90 50 04    5176*  	dl ld_24_004
044C79 BA 50 04    5177*  	dl ld_24_020
044C7C E4 50 04    5178*  	dl ld_24_032
044C7F 0E 51 04    5179*  	dl ld_24_040
044C82 38 51 04    5180*  	dl ld_24_044
044C85 62 51 04    5181*  	dl ld_40_004
044C88 8C 51 04    5182*  	dl ld_40_020
044C8B B6 51 04    5183*  	dl ld_40_032
044C8E E0 51 04    5184*  	dl ld_40_040
044C91 0A 52 04    5185*  	dl ld_40_044
044C94 34 52 04    5186*  	dl ld_41_004
044C97 5E 52 04    5187*  	dl ld_41_020
044C9A 88 52 04    5188*  	dl ld_41_032
044C9D B2 52 04    5189*  	dl ld_41_040
044CA0 DC 52 04    5190*  	dl ld_41_044
044CA3 06 53 04    5191*  	dl ld_42_004
044CA6 30 53 04    5192*  	dl ld_42_020
044CA9 5A 53 04    5193*  	dl ld_42_032
044CAC 84 53 04    5194*  	dl ld_42_040
044CAF AE 53 04    5195*  	dl ld_42_044
044CB2 D8 53 04    5196*  	dl ld_43_004
044CB5 02 54 04    5197*  	dl ld_43_020
044CB8 2C 54 04    5198*  	dl ld_43_032
044CBB 56 54 04    5199*  	dl ld_43_040
044CBE 80 54 04    5200*  	dl ld_43_044
044CC1 AA 54 04    5201*  	dl ld_44_004
044CC4 D4 54 04    5202*  	dl ld_44_020
044CC7 FE 54 04    5203*  	dl ld_44_032
044CCA 28 55 04    5204*  	dl ld_44_040
044CCD 52 55 04    5205*  	dl ld_44_044
044CD0 7C 55 04    5206*  	dl ld_45_004
044CD3 A6 55 04    5207*  	dl ld_45_020
044CD6 D0 55 04    5208*  	dl ld_45_032
044CD9 FA 55 04    5209*  	dl ld_45_040
044CDC 24 56 04    5210*  	dl ld_45_044
044CDF 4E 56 04    5211*  	dl ld_46_004
044CE2 78 56 04    5212*  	dl ld_46_020
044CE5 A2 56 04    5213*  	dl ld_46_032
044CE8 CC 56 04    5214*  	dl ld_46_040
044CEB F6 56 04    5215*  	dl ld_46_044
044CEE 20 57 04    5216*  	dl ld_47_004
044CF1 4A 57 04    5217*  	dl ld_47_020
044CF4 74 57 04    5218*  	dl ld_47_032
044CF7 9E 57 04    5219*  	dl ld_47_040
044CFA C8 57 04    5220*  	dl ld_47_044
044CFD F2 57 04    5221*  	dl ld_48_004
044D00 1C 58 04    5222*  	dl ld_48_020
044D03 46 58 04    5223*  	dl ld_48_032
044D06 70 58 04    5224*  	dl ld_48_040
044D09 9A 58 04    5225*  	dl ld_48_044
044D0C C4 58 04    5226*  	dl ld_49_004
044D0F EE 58 04    5227*  	dl ld_49_020
044D12 18 59 04    5228*  	dl ld_49_032
044D15 42 59 04    5229*  	dl ld_49_040
044D18 6C 59 04    5230*  	dl ld_49_044
044D1B 96 59 04    5231*  	dl ld_50_004
044D1E C0 59 04    5232*  	dl ld_50_020
044D21 EA 59 04    5233*  	dl ld_50_032
044D24 14 5A 04    5234*  	dl ld_50_040
044D27 3E 5A 04    5235*  	dl ld_50_044
044D2A 68 5A 04    5236*  	dl ld_51_004
044D2D 92 5A 04    5237*  	dl ld_51_020
044D30 BC 5A 04    5238*  	dl ld_51_032
044D33 E6 5A 04    5239*  	dl ld_51_040
044D36 10 5B 04    5240*  	dl ld_51_044
044D39 3A 5B 04    5241*  	dl ld_52_004
044D3C 64 5B 04    5242*  	dl ld_52_020
044D3F 8E 5B 04    5243*  	dl ld_52_032
044D42 B8 5B 04    5244*  	dl ld_52_040
044D45 E2 5B 04    5245*  	dl ld_52_044
044D48             5246*  
044D48             5247*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
044D48             5248*  
044D48             5249*  ld_20_004:
044D48 21 0C 5C 04 5250*  	ld hl,F20_004
044D4C 22 F2 B6 04 5251*  	ld (cur_filename),hl
044D50 11 FC C2 04 5252*  	ld de,filedata
044D54 01 00 00 01 5253*  	ld bc,65536
044D58 3E 01       5254*  	ld a,mos_load
044D5A 5B CF       5255*  	RST.LIL 08h
044D5C 21 13 02 00 5256*  	ld hl,BUF_20_004
044D60 01 13 00 00 5257*  	ld bc,19
044D64 11 12 00 00 5258*  	ld de,18
044D68 DD 21 56 01 5259*  	ld ix,342
       00          
044D6D CD 6D B8 04 5260*  	call vdu_load_img
044D71 C9          5261*  	ret
044D72             5262*  
044D72             5263*  ld_20_020:
044D72 21 20 5C 04 5264*  	ld hl,F20_020
044D76 22 F2 B6 04 5265*  	ld (cur_filename),hl
044D7A 11 FC C2 04 5266*  	ld de,filedata
044D7E 01 00 00 01 5267*  	ld bc,65536
044D82 3E 01       5268*  	ld a,mos_load
044D84 5B CF       5269*  	RST.LIL 08h
044D86 21 14 02 00 5270*  	ld hl,BUF_20_020
044D8A 01 17 00 00 5271*  	ld bc,23
044D8E 11 17 00 00 5272*  	ld de,23
044D92 DD 21 11 02 5273*  	ld ix,529
       00          
044D97 CD 6D B8 04 5274*  	call vdu_load_img
044D9B C9          5275*  	ret
044D9C             5276*  
044D9C             5277*  ld_20_032:
044D9C 21 34 5C 04 5278*  	ld hl,F20_032
044DA0 22 F2 B6 04 5279*  	ld (cur_filename),hl
044DA4 11 FC C2 04 5280*  	ld de,filedata
044DA8 01 00 00 01 5281*  	ld bc,65536
044DAC 3E 01       5282*  	ld a,mos_load
044DAE 5B CF       5283*  	RST.LIL 08h
044DB0 21 15 02 00 5284*  	ld hl,BUF_20_032
044DB4 01 20 00 00 5285*  	ld bc,32
044DB8 11 22 00 00 5286*  	ld de,34
044DBC DD 21 40 04 5287*  	ld ix,1088
       00          
044DC1 CD 6D B8 04 5288*  	call vdu_load_img
044DC5 C9          5289*  	ret
044DC6             5290*  
044DC6             5291*  ld_20_040:
044DC6 21 48 5C 04 5292*  	ld hl,F20_040
044DCA 22 F2 B6 04 5293*  	ld (cur_filename),hl
044DCE 11 FC C2 04 5294*  	ld de,filedata
044DD2 01 00 00 01 5295*  	ld bc,65536
044DD6 3E 01       5296*  	ld a,mos_load
044DD8 5B CF       5297*  	RST.LIL 08h
044DDA 21 16 02 00 5298*  	ld hl,BUF_20_040
044DDE 01 36 00 00 5299*  	ld bc,54
044DE2 11 38 00 00 5300*  	ld de,56
044DE6 DD 21 D0 0B 5301*  	ld ix,3024
       00          
044DEB CD 6D B8 04 5302*  	call vdu_load_img
044DEF C9          5303*  	ret
044DF0             5304*  
044DF0             5305*  ld_20_044:
044DF0 21 5C 5C 04 5306*  	ld hl,F20_044
044DF4 22 F2 B6 04 5307*  	ld (cur_filename),hl
044DF8 11 FC C2 04 5308*  	ld de,filedata
044DFC 01 00 00 01 5309*  	ld bc,65536
044E00 3E 01       5310*  	ld a,mos_load
044E02 5B CF       5311*  	RST.LIL 08h
044E04 21 17 02 00 5312*  	ld hl,BUF_20_044
044E08 01 6B 00 00 5313*  	ld bc,107
044E0C 11 5B 00 00 5314*  	ld de,91
044E10 DD 21 09 26 5315*  	ld ix,9737
       00          
044E15 CD 6D B8 04 5316*  	call vdu_load_img
044E19 C9          5317*  	ret
044E1A             5318*  
044E1A             5319*  ld_21_004:
044E1A 21 70 5C 04 5320*  	ld hl,F21_004
044E1E 22 F2 B6 04 5321*  	ld (cur_filename),hl
044E22 11 FC C2 04 5322*  	ld de,filedata
044E26 01 00 00 01 5323*  	ld bc,65536
044E2A 3E 01       5324*  	ld a,mos_load
044E2C 5B CF       5325*  	RST.LIL 08h
044E2E 21 18 02 00 5326*  	ld hl,BUF_21_004
044E32 01 0B 00 00 5327*  	ld bc,11
044E36 11 0B 00 00 5328*  	ld de,11
044E3A DD 21 79 00 5329*  	ld ix,121
       00          
044E3F CD 6D B8 04 5330*  	call vdu_load_img
044E43 C9          5331*  	ret
044E44             5332*  
044E44             5333*  ld_21_020:
044E44 21 84 5C 04 5334*  	ld hl,F21_020
044E48 22 F2 B6 04 5335*  	ld (cur_filename),hl
044E4C 11 FC C2 04 5336*  	ld de,filedata
044E50 01 00 00 01 5337*  	ld bc,65536
044E54 3E 01       5338*  	ld a,mos_load
044E56 5B CF       5339*  	RST.LIL 08h
044E58 21 19 02 00 5340*  	ld hl,BUF_21_020
044E5C 01 0E 00 00 5341*  	ld bc,14
044E60 11 0E 00 00 5342*  	ld de,14
044E64 DD 21 C4 00 5343*  	ld ix,196
       00          
044E69 CD 6D B8 04 5344*  	call vdu_load_img
044E6D C9          5345*  	ret
044E6E             5346*  
044E6E             5347*  ld_21_032:
044E6E 21 98 5C 04 5348*  	ld hl,F21_032
044E72 22 F2 B6 04 5349*  	ld (cur_filename),hl
044E76 11 FC C2 04 5350*  	ld de,filedata
044E7A 01 00 00 01 5351*  	ld bc,65536
044E7E 3E 01       5352*  	ld a,mos_load
044E80 5B CF       5353*  	RST.LIL 08h
044E82 21 1A 02 00 5354*  	ld hl,BUF_21_032
044E86 01 14 00 00 5355*  	ld bc,20
044E8A 11 16 00 00 5356*  	ld de,22
044E8E DD 21 B8 01 5357*  	ld ix,440
       00          
044E93 CD 6D B8 04 5358*  	call vdu_load_img
044E97 C9          5359*  	ret
044E98             5360*  
044E98             5361*  ld_21_040:
044E98 21 AC 5C 04 5362*  	ld hl,F21_040
044E9C 22 F2 B6 04 5363*  	ld (cur_filename),hl
044EA0 11 FC C2 04 5364*  	ld de,filedata
044EA4 01 00 00 01 5365*  	ld bc,65536
044EA8 3E 01       5366*  	ld a,mos_load
044EAA 5B CF       5367*  	RST.LIL 08h
044EAC 21 1B 02 00 5368*  	ld hl,BUF_21_040
044EB0 01 21 00 00 5369*  	ld bc,33
044EB4 11 24 00 00 5370*  	ld de,36
044EB8 DD 21 A4 04 5371*  	ld ix,1188
       00          
044EBD CD 6D B8 04 5372*  	call vdu_load_img
044EC1 C9          5373*  	ret
044EC2             5374*  
044EC2             5375*  ld_21_044:
044EC2 21 C0 5C 04 5376*  	ld hl,F21_044
044EC6 22 F2 B6 04 5377*  	ld (cur_filename),hl
044ECA 11 FC C2 04 5378*  	ld de,filedata
044ECE 01 00 00 01 5379*  	ld bc,65536
044ED2 3E 01       5380*  	ld a,mos_load
044ED4 5B CF       5381*  	RST.LIL 08h
044ED6 21 1C 02 00 5382*  	ld hl,BUF_21_044
044EDA 01 64 00 00 5383*  	ld bc,100
044EDE 11 1E 00 00 5384*  	ld de,30
044EE2 DD 21 B8 0B 5385*  	ld ix,3000
       00          
044EE7 CD 6D B8 04 5386*  	call vdu_load_img
044EEB C9          5387*  	ret
044EEC             5388*  
044EEC             5389*  ld_22_004:
044EEC 21 D4 5C 04 5390*  	ld hl,F22_004
044EF0 22 F2 B6 04 5391*  	ld (cur_filename),hl
044EF4 11 FC C2 04 5392*  	ld de,filedata
044EF8 01 00 00 01 5393*  	ld bc,65536
044EFC 3E 01       5394*  	ld a,mos_load
044EFE 5B CF       5395*  	RST.LIL 08h
044F00 21 1D 02 00 5396*  	ld hl,BUF_22_004
044F04 01 11 00 00 5397*  	ld bc,17
044F08 11 0B 00 00 5398*  	ld de,11
044F0C DD 21 BB 00 5399*  	ld ix,187
       00          
044F11 CD 6D B8 04 5400*  	call vdu_load_img
044F15 C9          5401*  	ret
044F16             5402*  
044F16             5403*  ld_22_020:
044F16 21 E8 5C 04 5404*  	ld hl,F22_020
044F1A 22 F2 B6 04 5405*  	ld (cur_filename),hl
044F1E 11 FC C2 04 5406*  	ld de,filedata
044F22 01 00 00 01 5407*  	ld bc,65536
044F26 3E 01       5408*  	ld a,mos_load
044F28 5B CF       5409*  	RST.LIL 08h
044F2A 21 1E 02 00 5410*  	ld hl,BUF_22_020
044F2E 01 16 00 00 5411*  	ld bc,22
044F32 11 0E 00 00 5412*  	ld de,14
044F36 DD 21 34 01 5413*  	ld ix,308
       00          
044F3B CD 6D B8 04 5414*  	call vdu_load_img
044F3F C9          5415*  	ret
044F40             5416*  
044F40             5417*  ld_22_032:
044F40 21 FC 5C 04 5418*  	ld hl,F22_032
044F44 22 F2 B6 04 5419*  	ld (cur_filename),hl
044F48 11 FC C2 04 5420*  	ld de,filedata
044F4C 01 00 00 01 5421*  	ld bc,65536
044F50 3E 01       5422*  	ld a,mos_load
044F52 5B CF       5423*  	RST.LIL 08h
044F54 21 1F 02 00 5424*  	ld hl,BUF_22_032
044F58 01 1E 00 00 5425*  	ld bc,30
044F5C 11 16 00 00 5426*  	ld de,22
044F60 DD 21 94 02 5427*  	ld ix,660
       00          
044F65 CD 6D B8 04 5428*  	call vdu_load_img
044F69 C9          5429*  	ret
044F6A             5430*  
044F6A             5431*  ld_22_040:
044F6A 21 10 5D 04 5432*  	ld hl,F22_040
044F6E 22 F2 B6 04 5433*  	ld (cur_filename),hl
044F72 11 FC C2 04 5434*  	ld de,filedata
044F76 01 00 00 01 5435*  	ld bc,65536
044F7A 3E 01       5436*  	ld a,mos_load
044F7C 5B CF       5437*  	RST.LIL 08h
044F7E 21 20 02 00 5438*  	ld hl,BUF_22_040
044F82 01 33 00 00 5439*  	ld bc,51
044F86 11 24 00 00 5440*  	ld de,36
044F8A DD 21 2C 07 5441*  	ld ix,1836
       00          
044F8F CD 6D B8 04 5442*  	call vdu_load_img
044F93 C9          5443*  	ret
044F94             5444*  
044F94             5445*  ld_22_044:
044F94 21 24 5D 04 5446*  	ld hl,F22_044
044F98 22 F2 B6 04 5447*  	ld (cur_filename),hl
044F9C 11 FC C2 04 5448*  	ld de,filedata
044FA0 01 00 00 01 5449*  	ld bc,65536
044FA4 3E 01       5450*  	ld a,mos_load
044FA6 5B CF       5451*  	RST.LIL 08h
044FA8 21 21 02 00 5452*  	ld hl,BUF_22_044
044FAC 01 96 00 00 5453*  	ld bc,150
044FB0 11 1E 00 00 5454*  	ld de,30
044FB4 DD 21 94 11 5455*  	ld ix,4500
       00          
044FB9 CD 6D B8 04 5456*  	call vdu_load_img
044FBD C9          5457*  	ret
044FBE             5458*  
044FBE             5459*  ld_23_004:
044FBE 21 38 5D 04 5460*  	ld hl,F23_004
044FC2 22 F2 B6 04 5461*  	ld (cur_filename),hl
044FC6 11 FC C2 04 5462*  	ld de,filedata
044FCA 01 00 00 01 5463*  	ld bc,65536
044FCE 3E 01       5464*  	ld a,mos_load
044FD0 5B CF       5465*  	RST.LIL 08h
044FD2 21 22 02 00 5466*  	ld hl,BUF_23_004
044FD6 01 0E 00 00 5467*  	ld bc,14
044FDA 11 06 00 00 5468*  	ld de,6
044FDE DD 21 54 00 5469*  	ld ix,84
       00          
044FE3 CD 6D B8 04 5470*  	call vdu_load_img
044FE7 C9          5471*  	ret
044FE8             5472*  
044FE8             5473*  ld_23_020:
044FE8 21 4C 5D 04 5474*  	ld hl,F23_020
044FEC 22 F2 B6 04 5475*  	ld (cur_filename),hl
044FF0 11 FC C2 04 5476*  	ld de,filedata
044FF4 01 00 00 01 5477*  	ld bc,65536
044FF8 3E 01       5478*  	ld a,mos_load
044FFA 5B CF       5479*  	RST.LIL 08h
044FFC 21 23 02 00 5480*  	ld hl,BUF_23_020
045000 01 11 00 00 5481*  	ld bc,17
045004 11 08 00 00 5482*  	ld de,8
045008 DD 21 88 00 5483*  	ld ix,136
       00          
04500D CD 6D B8 04 5484*  	call vdu_load_img
045011 C9          5485*  	ret
045012             5486*  
045012             5487*  ld_23_032:
045012 21 60 5D 04 5488*  	ld hl,F23_032
045016 22 F2 B6 04 5489*  	ld (cur_filename),hl
04501A 11 FC C2 04 5490*  	ld de,filedata
04501E 01 00 00 01 5491*  	ld bc,65536
045022 3E 01       5492*  	ld a,mos_load
045024 5B CF       5493*  	RST.LIL 08h
045026 21 24 02 00 5494*  	ld hl,BUF_23_032
04502A 01 19 00 00 5495*  	ld bc,25
04502E 11 0B 00 00 5496*  	ld de,11
045032 DD 21 13 01 5497*  	ld ix,275
       00          
045037 CD 6D B8 04 5498*  	call vdu_load_img
04503B C9          5499*  	ret
04503C             5500*  
04503C             5501*  ld_23_040:
04503C 21 74 5D 04 5502*  	ld hl,F23_040
045040 22 F2 B6 04 5503*  	ld (cur_filename),hl
045044 11 FC C2 04 5504*  	ld de,filedata
045048 01 00 00 01 5505*  	ld bc,65536
04504C 3E 01       5506*  	ld a,mos_load
04504E 5B CF       5507*  	RST.LIL 08h
045050 21 25 02 00 5508*  	ld hl,BUF_23_040
045054 01 28 00 00 5509*  	ld bc,40
045058 11 12 00 00 5510*  	ld de,18
04505C DD 21 D0 02 5511*  	ld ix,720
       00          
045061 CD 6D B8 04 5512*  	call vdu_load_img
045065 C9          5513*  	ret
045066             5514*  
045066             5515*  ld_23_044:
045066 21 88 5D 04 5516*  	ld hl,F23_044
04506A 22 F2 B6 04 5517*  	ld (cur_filename),hl
04506E 11 FC C2 04 5518*  	ld de,filedata
045072 01 00 00 01 5519*  	ld bc,65536
045076 3E 01       5520*  	ld a,mos_load
045078 5B CF       5521*  	RST.LIL 08h
04507A 21 26 02 00 5522*  	ld hl,BUF_23_044
04507E 01 01 00 00 5523*  	ld bc,1
045082 11 01 00 00 5524*  	ld de,1
045086 DD 21 01 00 5525*  	ld ix,1
       00          
04508B CD 6D B8 04 5526*  	call vdu_load_img
04508F C9          5527*  	ret
045090             5528*  
045090             5529*  ld_24_004:
045090 21 9C 5D 04 5530*  	ld hl,F24_004
045094 22 F2 B6 04 5531*  	ld (cur_filename),hl
045098 11 FC C2 04 5532*  	ld de,filedata
04509C 01 00 00 01 5533*  	ld bc,65536
0450A0 3E 01       5534*  	ld a,mos_load
0450A2 5B CF       5535*  	RST.LIL 08h
0450A4 21 27 02 00 5536*  	ld hl,BUF_24_004
0450A8 01 0B 00 00 5537*  	ld bc,11
0450AC 11 0B 00 00 5538*  	ld de,11
0450B0 DD 21 79 00 5539*  	ld ix,121
       00          
0450B5 CD 6D B8 04 5540*  	call vdu_load_img
0450B9 C9          5541*  	ret
0450BA             5542*  
0450BA             5543*  ld_24_020:
0450BA 21 B0 5D 04 5544*  	ld hl,F24_020
0450BE 22 F2 B6 04 5545*  	ld (cur_filename),hl
0450C2 11 FC C2 04 5546*  	ld de,filedata
0450C6 01 00 00 01 5547*  	ld bc,65536
0450CA 3E 01       5548*  	ld a,mos_load
0450CC 5B CF       5549*  	RST.LIL 08h
0450CE 21 28 02 00 5550*  	ld hl,BUF_24_020
0450D2 01 0E 00 00 5551*  	ld bc,14
0450D6 11 0E 00 00 5552*  	ld de,14
0450DA DD 21 C4 00 5553*  	ld ix,196
       00          
0450DF CD 6D B8 04 5554*  	call vdu_load_img
0450E3 C9          5555*  	ret
0450E4             5556*  
0450E4             5557*  ld_24_032:
0450E4 21 C4 5D 04 5558*  	ld hl,F24_032
0450E8 22 F2 B6 04 5559*  	ld (cur_filename),hl
0450EC 11 FC C2 04 5560*  	ld de,filedata
0450F0 01 00 00 01 5561*  	ld bc,65536
0450F4 3E 01       5562*  	ld a,mos_load
0450F6 5B CF       5563*  	RST.LIL 08h
0450F8 21 29 02 00 5564*  	ld hl,BUF_24_032
0450FC 01 14 00 00 5565*  	ld bc,20
045100 11 16 00 00 5566*  	ld de,22
045104 DD 21 B8 01 5567*  	ld ix,440
       00          
045109 CD 6D B8 04 5568*  	call vdu_load_img
04510D C9          5569*  	ret
04510E             5570*  
04510E             5571*  ld_24_040:
04510E 21 D8 5D 04 5572*  	ld hl,F24_040
045112 22 F2 B6 04 5573*  	ld (cur_filename),hl
045116 11 FC C2 04 5574*  	ld de,filedata
04511A 01 00 00 01 5575*  	ld bc,65536
04511E 3E 01       5576*  	ld a,mos_load
045120 5B CF       5577*  	RST.LIL 08h
045122 21 2A 02 00 5578*  	ld hl,BUF_24_040
045126 01 21 00 00 5579*  	ld bc,33
04512A 11 24 00 00 5580*  	ld de,36
04512E DD 21 A4 04 5581*  	ld ix,1188
       00          
045133 CD 6D B8 04 5582*  	call vdu_load_img
045137 C9          5583*  	ret
045138             5584*  
045138             5585*  ld_24_044:
045138 21 EC 5D 04 5586*  	ld hl,F24_044
04513C 22 F2 B6 04 5587*  	ld (cur_filename),hl
045140 11 FC C2 04 5588*  	ld de,filedata
045144 01 00 00 01 5589*  	ld bc,65536
045148 3E 01       5590*  	ld a,mos_load
04514A 5B CF       5591*  	RST.LIL 08h
04514C 21 2B 02 00 5592*  	ld hl,BUF_24_044
045150 01 64 00 00 5593*  	ld bc,100
045154 11 1E 00 00 5594*  	ld de,30
045158 DD 21 B8 0B 5595*  	ld ix,3000
       00          
04515D CD 6D B8 04 5596*  	call vdu_load_img
045161 C9          5597*  	ret
045162             5598*  
045162             5599*  ld_40_004:
045162 21 00 5E 04 5600*  	ld hl,F40_004
045166 22 F2 B6 04 5601*  	ld (cur_filename),hl
04516A 11 FC C2 04 5602*  	ld de,filedata
04516E 01 00 00 01 5603*  	ld bc,65536
045172 3E 01       5604*  	ld a,mos_load
045174 5B CF       5605*  	RST.LIL 08h
045176 21 2C 02 00 5606*  	ld hl,BUF_40_004
04517A 01 0E 00 00 5607*  	ld bc,14
04517E 11 07 00 00 5608*  	ld de,7
045182 DD 21 62 00 5609*  	ld ix,98
       00          
045187 CD 6D B8 04 5610*  	call vdu_load_img
04518B C9          5611*  	ret
04518C             5612*  
04518C             5613*  ld_40_020:
04518C 21 14 5E 04 5614*  	ld hl,F40_020
045190 22 F2 B6 04 5615*  	ld (cur_filename),hl
045194 11 FC C2 04 5616*  	ld de,filedata
045198 01 00 00 01 5617*  	ld bc,65536
04519C 3E 01       5618*  	ld a,mos_load
04519E 5B CF       5619*  	RST.LIL 08h
0451A0 21 2D 02 00 5620*  	ld hl,BUF_40_020
0451A4 01 12 00 00 5621*  	ld bc,18
0451A8 11 0A 00 00 5622*  	ld de,10
0451AC DD 21 B4 00 5623*  	ld ix,180
       00          
0451B1 CD 6D B8 04 5624*  	call vdu_load_img
0451B5 C9          5625*  	ret
0451B6             5626*  
0451B6             5627*  ld_40_032:
0451B6 21 28 5E 04 5628*  	ld hl,F40_032
0451BA 22 F2 B6 04 5629*  	ld (cur_filename),hl
0451BE 11 FC C2 04 5630*  	ld de,filedata
0451C2 01 00 00 01 5631*  	ld bc,65536
0451C6 3E 01       5632*  	ld a,mos_load
0451C8 5B CF       5633*  	RST.LIL 08h
0451CA 21 2E 02 00 5634*  	ld hl,BUF_40_032
0451CE 01 1A 00 00 5635*  	ld bc,26
0451D2 11 0D 00 00 5636*  	ld de,13
0451D6 DD 21 52 01 5637*  	ld ix,338
       00          
0451DB CD 6D B8 04 5638*  	call vdu_load_img
0451DF C9          5639*  	ret
0451E0             5640*  
0451E0             5641*  ld_40_040:
0451E0 21 3C 5E 04 5642*  	ld hl,F40_040
0451E4 22 F2 B6 04 5643*  	ld (cur_filename),hl
0451E8 11 FC C2 04 5644*  	ld de,filedata
0451EC 01 00 00 01 5645*  	ld bc,65536
0451F0 3E 01       5646*  	ld a,mos_load
0451F2 5B CF       5647*  	RST.LIL 08h
0451F4 21 2F 02 00 5648*  	ld hl,BUF_40_040
0451F8 01 2B 00 00 5649*  	ld bc,43
0451FC 11 17 00 00 5650*  	ld de,23
045200 DD 21 DD 03 5651*  	ld ix,989
       00          
045205 CD 6D B8 04 5652*  	call vdu_load_img
045209 C9          5653*  	ret
04520A             5654*  
04520A             5655*  ld_40_044:
04520A 21 50 5E 04 5656*  	ld hl,F40_044
04520E 22 F2 B6 04 5657*  	ld (cur_filename),hl
045212 11 FC C2 04 5658*  	ld de,filedata
045216 01 00 00 01 5659*  	ld bc,65536
04521A 3E 01       5660*  	ld a,mos_load
04521C 5B CF       5661*  	RST.LIL 08h
04521E 21 30 02 00 5662*  	ld hl,BUF_40_044
045222 01 01 00 00 5663*  	ld bc,1
045226 11 01 00 00 5664*  	ld de,1
04522A DD 21 01 00 5665*  	ld ix,1
       00          
04522F CD 6D B8 04 5666*  	call vdu_load_img
045233 C9          5667*  	ret
045234             5668*  
045234             5669*  ld_41_004:
045234 21 64 5E 04 5670*  	ld hl,F41_004
045238 22 F2 B6 04 5671*  	ld (cur_filename),hl
04523C 11 FC C2 04 5672*  	ld de,filedata
045240 01 00 00 01 5673*  	ld bc,65536
045244 3E 01       5674*  	ld a,mos_load
045246 5B CF       5675*  	RST.LIL 08h
045248 21 31 02 00 5676*  	ld hl,BUF_41_004
04524C 01 0B 00 00 5677*  	ld bc,11
045250 11 0B 00 00 5678*  	ld de,11
045254 DD 21 79 00 5679*  	ld ix,121
       00          
045259 CD 6D B8 04 5680*  	call vdu_load_img
04525D C9          5681*  	ret
04525E             5682*  
04525E             5683*  ld_41_020:
04525E 21 78 5E 04 5684*  	ld hl,F41_020
045262 22 F2 B6 04 5685*  	ld (cur_filename),hl
045266 11 FC C2 04 5686*  	ld de,filedata
04526A 01 00 00 01 5687*  	ld bc,65536
04526E 3E 01       5688*  	ld a,mos_load
045270 5B CF       5689*  	RST.LIL 08h
045272 21 32 02 00 5690*  	ld hl,BUF_41_020
045276 01 10 00 00 5691*  	ld bc,16
04527A 11 0E 00 00 5692*  	ld de,14
04527E DD 21 E0 00 5693*  	ld ix,224
       00          
045283 CD 6D B8 04 5694*  	call vdu_load_img
045287 C9          5695*  	ret
045288             5696*  
045288             5697*  ld_41_032:
045288 21 8C 5E 04 5698*  	ld hl,F41_032
04528C 22 F2 B6 04 5699*  	ld (cur_filename),hl
045290 11 FC C2 04 5700*  	ld de,filedata
045294 01 00 00 01 5701*  	ld bc,65536
045298 3E 01       5702*  	ld a,mos_load
04529A 5B CF       5703*  	RST.LIL 08h
04529C 21 33 02 00 5704*  	ld hl,BUF_41_032
0452A0 01 16 00 00 5705*  	ld bc,22
0452A4 11 14 00 00 5706*  	ld de,20
0452A8 DD 21 B8 01 5707*  	ld ix,440
       00          
0452AD CD 6D B8 04 5708*  	call vdu_load_img
0452B1 C9          5709*  	ret
0452B2             5710*  
0452B2             5711*  ld_41_040:
0452B2 21 A0 5E 04 5712*  	ld hl,F41_040
0452B6 22 F2 B6 04 5713*  	ld (cur_filename),hl
0452BA 11 FC C2 04 5714*  	ld de,filedata
0452BE 01 00 00 01 5715*  	ld bc,65536
0452C2 3E 01       5716*  	ld a,mos_load
0452C4 5B CF       5717*  	RST.LIL 08h
0452C6 21 34 02 00 5718*  	ld hl,BUF_41_040
0452CA 01 25 00 00 5719*  	ld bc,37
0452CE 11 22 00 00 5720*  	ld de,34
0452D2 DD 21 EA 04 5721*  	ld ix,1258
       00          
0452D7 CD 6D B8 04 5722*  	call vdu_load_img
0452DB C9          5723*  	ret
0452DC             5724*  
0452DC             5725*  ld_41_044:
0452DC 21 B4 5E 04 5726*  	ld hl,F41_044
0452E0 22 F2 B6 04 5727*  	ld (cur_filename),hl
0452E4 11 FC C2 04 5728*  	ld de,filedata
0452E8 01 00 00 01 5729*  	ld bc,65536
0452EC 3E 01       5730*  	ld a,mos_load
0452EE 5B CF       5731*  	RST.LIL 08h
0452F0 21 35 02 00 5732*  	ld hl,BUF_41_044
0452F4 01 23 00 00 5733*  	ld bc,35
0452F8 11 19 00 00 5734*  	ld de,25
0452FC DD 21 6B 03 5735*  	ld ix,875
       00          
045301 CD 6D B8 04 5736*  	call vdu_load_img
045305 C9          5737*  	ret
045306             5738*  
045306             5739*  ld_42_004:
045306 21 C8 5E 04 5740*  	ld hl,F42_004
04530A 22 F2 B6 04 5741*  	ld (cur_filename),hl
04530E 11 FC C2 04 5742*  	ld de,filedata
045312 01 00 00 01 5743*  	ld bc,65536
045316 3E 01       5744*  	ld a,mos_load
045318 5B CF       5745*  	RST.LIL 08h
04531A 21 36 02 00 5746*  	ld hl,BUF_42_004
04531E 01 0A 00 00 5747*  	ld bc,10
045322 11 09 00 00 5748*  	ld de,9
045326 DD 21 5A 00 5749*  	ld ix,90
       00          
04532B CD 6D B8 04 5750*  	call vdu_load_img
04532F C9          5751*  	ret
045330             5752*  
045330             5753*  ld_42_020:
045330 21 DC 5E 04 5754*  	ld hl,F42_020
045334 22 F2 B6 04 5755*  	ld (cur_filename),hl
045338 11 FC C2 04 5756*  	ld de,filedata
04533C 01 00 00 01 5757*  	ld bc,65536
045340 3E 01       5758*  	ld a,mos_load
045342 5B CF       5759*  	RST.LIL 08h
045344 21 37 02 00 5760*  	ld hl,BUF_42_020
045348 01 0E 00 00 5761*  	ld bc,14
04534C 11 0B 00 00 5762*  	ld de,11
045350 DD 21 9A 00 5763*  	ld ix,154
       00          
045355 CD 6D B8 04 5764*  	call vdu_load_img
045359 C9          5765*  	ret
04535A             5766*  
04535A             5767*  ld_42_032:
04535A 21 F0 5E 04 5768*  	ld hl,F42_032
04535E 22 F2 B6 04 5769*  	ld (cur_filename),hl
045362 11 FC C2 04 5770*  	ld de,filedata
045366 01 00 00 01 5771*  	ld bc,65536
04536A 3E 01       5772*  	ld a,mos_load
04536C 5B CF       5773*  	RST.LIL 08h
04536E 21 38 02 00 5774*  	ld hl,BUF_42_032
045372 01 13 00 00 5775*  	ld bc,19
045376 11 10 00 00 5776*  	ld de,16
04537A DD 21 30 01 5777*  	ld ix,304
       00          
04537F CD 6D B8 04 5778*  	call vdu_load_img
045383 C9          5779*  	ret
045384             5780*  
045384             5781*  ld_42_040:
045384 21 04 5F 04 5782*  	ld hl,F42_040
045388 22 F2 B6 04 5783*  	ld (cur_filename),hl
04538C 11 FC C2 04 5784*  	ld de,filedata
045390 01 00 00 01 5785*  	ld bc,65536
045394 3E 01       5786*  	ld a,mos_load
045396 5B CF       5787*  	RST.LIL 08h
045398 21 39 02 00 5788*  	ld hl,BUF_42_040
04539C 01 20 00 00 5789*  	ld bc,32
0453A0 11 1B 00 00 5790*  	ld de,27
0453A4 DD 21 60 03 5791*  	ld ix,864
       00          
0453A9 CD 6D B8 04 5792*  	call vdu_load_img
0453AD C9          5793*  	ret
0453AE             5794*  
0453AE             5795*  ld_42_044:
0453AE 21 18 5F 04 5796*  	ld hl,F42_044
0453B2 22 F2 B6 04 5797*  	ld (cur_filename),hl
0453B6 11 FC C2 04 5798*  	ld de,filedata
0453BA 01 00 00 01 5799*  	ld bc,65536
0453BE 3E 01       5800*  	ld a,mos_load
0453C0 5B CF       5801*  	RST.LIL 08h
0453C2 21 3A 02 00 5802*  	ld hl,BUF_42_044
0453C6 01 3F 00 00 5803*  	ld bc,63
0453CA 11 04 00 00 5804*  	ld de,4
0453CE DD 21 FC 00 5805*  	ld ix,252
       00          
0453D3 CD 6D B8 04 5806*  	call vdu_load_img
0453D7 C9          5807*  	ret
0453D8             5808*  
0453D8             5809*  ld_43_004:
0453D8 21 2C 5F 04 5810*  	ld hl,F43_004
0453DC 22 F2 B6 04 5811*  	ld (cur_filename),hl
0453E0 11 FC C2 04 5812*  	ld de,filedata
0453E4 01 00 00 01 5813*  	ld bc,65536
0453E8 3E 01       5814*  	ld a,mos_load
0453EA 5B CF       5815*  	RST.LIL 08h
0453EC 21 3B 02 00 5816*  	ld hl,BUF_43_004
0453F0 01 0B 00 00 5817*  	ld bc,11
0453F4 11 04 00 00 5818*  	ld de,4
0453F8 DD 21 2C 00 5819*  	ld ix,44
       00          
0453FD CD 6D B8 04 5820*  	call vdu_load_img
045401 C9          5821*  	ret
045402             5822*  
045402             5823*  ld_43_020:
045402 21 40 5F 04 5824*  	ld hl,F43_020
045406 22 F2 B6 04 5825*  	ld (cur_filename),hl
04540A 11 FC C2 04 5826*  	ld de,filedata
04540E 01 00 00 01 5827*  	ld bc,65536
045412 3E 01       5828*  	ld a,mos_load
045414 5B CF       5829*  	RST.LIL 08h
045416 21 3C 02 00 5830*  	ld hl,BUF_43_020
04541A 01 0F 00 00 5831*  	ld bc,15
04541E 11 04 00 00 5832*  	ld de,4
045422 DD 21 3C 00 5833*  	ld ix,60
       00          
045427 CD 6D B8 04 5834*  	call vdu_load_img
04542B C9          5835*  	ret
04542C             5836*  
04542C             5837*  ld_43_032:
04542C 21 54 5F 04 5838*  	ld hl,F43_032
045430 22 F2 B6 04 5839*  	ld (cur_filename),hl
045434 11 FC C2 04 5840*  	ld de,filedata
045438 01 00 00 01 5841*  	ld bc,65536
04543C 3E 01       5842*  	ld a,mos_load
04543E 5B CF       5843*  	RST.LIL 08h
045440 21 3D 02 00 5844*  	ld hl,BUF_43_032
045444 01 15 00 00 5845*  	ld bc,21
045448 11 07 00 00 5846*  	ld de,7
04544C DD 21 93 00 5847*  	ld ix,147
       00          
045451 CD 6D B8 04 5848*  	call vdu_load_img
045455 C9          5849*  	ret
045456             5850*  
045456             5851*  ld_43_040:
045456 21 68 5F 04 5852*  	ld hl,F43_040
04545A 22 F2 B6 04 5853*  	ld (cur_filename),hl
04545E 11 FC C2 04 5854*  	ld de,filedata
045462 01 00 00 01 5855*  	ld bc,65536
045466 3E 01       5856*  	ld a,mos_load
045468 5B CF       5857*  	RST.LIL 08h
04546A 21 3E 02 00 5858*  	ld hl,BUF_43_040
04546E 01 23 00 00 5859*  	ld bc,35
045472 11 0D 00 00 5860*  	ld de,13
045476 DD 21 C7 01 5861*  	ld ix,455
       00          
04547B CD 6D B8 04 5862*  	call vdu_load_img
04547F C9          5863*  	ret
045480             5864*  
045480             5865*  ld_43_044:
045480 21 7C 5F 04 5866*  	ld hl,F43_044
045484 22 F2 B6 04 5867*  	ld (cur_filename),hl
045488 11 FC C2 04 5868*  	ld de,filedata
04548C 01 00 00 01 5869*  	ld bc,65536
045490 3E 01       5870*  	ld a,mos_load
045492 5B CF       5871*  	RST.LIL 08h
045494 21 3F 02 00 5872*  	ld hl,BUF_43_044
045498 01 01 00 00 5873*  	ld bc,1
04549C 11 01 00 00 5874*  	ld de,1
0454A0 DD 21 01 00 5875*  	ld ix,1
       00          
0454A5 CD 6D B8 04 5876*  	call vdu_load_img
0454A9 C9          5877*  	ret
0454AA             5878*  
0454AA             5879*  ld_44_004:
0454AA 21 90 5F 04 5880*  	ld hl,F44_004
0454AE 22 F2 B6 04 5881*  	ld (cur_filename),hl
0454B2 11 FC C2 04 5882*  	ld de,filedata
0454B6 01 00 00 01 5883*  	ld bc,65536
0454BA 3E 01       5884*  	ld a,mos_load
0454BC 5B CF       5885*  	RST.LIL 08h
0454BE 21 40 02 00 5886*  	ld hl,BUF_44_004
0454C2 01 05 00 00 5887*  	ld bc,5
0454C6 11 04 00 00 5888*  	ld de,4
0454CA DD 21 14 00 5889*  	ld ix,20
       00          
0454CF CD 6D B8 04 5890*  	call vdu_load_img
0454D3 C9          5891*  	ret
0454D4             5892*  
0454D4             5893*  ld_44_020:
0454D4 21 A4 5F 04 5894*  	ld hl,F44_020
0454D8 22 F2 B6 04 5895*  	ld (cur_filename),hl
0454DC 11 FC C2 04 5896*  	ld de,filedata
0454E0 01 00 00 01 5897*  	ld bc,65536
0454E4 3E 01       5898*  	ld a,mos_load
0454E6 5B CF       5899*  	RST.LIL 08h
0454E8 21 41 02 00 5900*  	ld hl,BUF_44_020
0454EC 01 08 00 00 5901*  	ld bc,8
0454F0 11 06 00 00 5902*  	ld de,6
0454F4 DD 21 30 00 5903*  	ld ix,48
       00          
0454F9 CD 6D B8 04 5904*  	call vdu_load_img
0454FD C9          5905*  	ret
0454FE             5906*  
0454FE             5907*  ld_44_032:
0454FE 21 B8 5F 04 5908*  	ld hl,F44_032
045502 22 F2 B6 04 5909*  	ld (cur_filename),hl
045506 11 FC C2 04 5910*  	ld de,filedata
04550A 01 00 00 01 5911*  	ld bc,65536
04550E 3E 01       5912*  	ld a,mos_load
045510 5B CF       5913*  	RST.LIL 08h
045512 21 42 02 00 5914*  	ld hl,BUF_44_032
045516 01 0D 00 00 5915*  	ld bc,13
04551A 11 0A 00 00 5916*  	ld de,10
04551E DD 21 82 00 5917*  	ld ix,130
       00          
045523 CD 6D B8 04 5918*  	call vdu_load_img
045527 C9          5919*  	ret
045528             5920*  
045528             5921*  ld_44_040:
045528 21 CC 5F 04 5922*  	ld hl,F44_040
04552C 22 F2 B6 04 5923*  	ld (cur_filename),hl
045530 11 FC C2 04 5924*  	ld de,filedata
045534 01 00 00 01 5925*  	ld bc,65536
045538 3E 01       5926*  	ld a,mos_load
04553A 5B CF       5927*  	RST.LIL 08h
04553C 21 43 02 00 5928*  	ld hl,BUF_44_040
045540 01 14 00 00 5929*  	ld bc,20
045544 11 0F 00 00 5930*  	ld de,15
045548 DD 21 2C 01 5931*  	ld ix,300
       00          
04554D CD 6D B8 04 5932*  	call vdu_load_img
045551 C9          5933*  	ret
045552             5934*  
045552             5935*  ld_44_044:
045552 21 E0 5F 04 5936*  	ld hl,F44_044
045556 22 F2 B6 04 5937*  	ld (cur_filename),hl
04555A 11 FC C2 04 5938*  	ld de,filedata
04555E 01 00 00 01 5939*  	ld bc,65536
045562 3E 01       5940*  	ld a,mos_load
045564 5B CF       5941*  	RST.LIL 08h
045566 21 44 02 00 5942*  	ld hl,BUF_44_044
04556A 01 01 00 00 5943*  	ld bc,1
04556E 11 01 00 00 5944*  	ld de,1
045572 DD 21 01 00 5945*  	ld ix,1
       00          
045577 CD 6D B8 04 5946*  	call vdu_load_img
04557B C9          5947*  	ret
04557C             5948*  
04557C             5949*  ld_45_004:
04557C 21 F4 5F 04 5950*  	ld hl,F45_004
045580 22 F2 B6 04 5951*  	ld (cur_filename),hl
045584 11 FC C2 04 5952*  	ld de,filedata
045588 01 00 00 01 5953*  	ld bc,65536
04558C 3E 01       5954*  	ld a,mos_load
04558E 5B CF       5955*  	RST.LIL 08h
045590 21 45 02 00 5956*  	ld hl,BUF_45_004
045594 01 10 00 00 5957*  	ld bc,16
045598 11 0A 00 00 5958*  	ld de,10
04559C DD 21 A0 00 5959*  	ld ix,160
       00          
0455A1 CD 6D B8 04 5960*  	call vdu_load_img
0455A5 C9          5961*  	ret
0455A6             5962*  
0455A6             5963*  ld_45_020:
0455A6 21 08 60 04 5964*  	ld hl,F45_020
0455AA 22 F2 B6 04 5965*  	ld (cur_filename),hl
0455AE 11 FC C2 04 5966*  	ld de,filedata
0455B2 01 00 00 01 5967*  	ld bc,65536
0455B6 3E 01       5968*  	ld a,mos_load
0455B8 5B CF       5969*  	RST.LIL 08h
0455BA 21 46 02 00 5970*  	ld hl,BUF_45_020
0455BE 01 14 00 00 5971*  	ld bc,20
0455C2 11 0D 00 00 5972*  	ld de,13
0455C6 DD 21 04 01 5973*  	ld ix,260
       00          
0455CB CD 6D B8 04 5974*  	call vdu_load_img
0455CF C9          5975*  	ret
0455D0             5976*  
0455D0             5977*  ld_45_032:
0455D0 21 1C 60 04 5978*  	ld hl,F45_032
0455D4 22 F2 B6 04 5979*  	ld (cur_filename),hl
0455D8 11 FC C2 04 5980*  	ld de,filedata
0455DC 01 00 00 01 5981*  	ld bc,65536
0455E0 3E 01       5982*  	ld a,mos_load
0455E2 5B CF       5983*  	RST.LIL 08h
0455E4 21 47 02 00 5984*  	ld hl,BUF_45_032
0455E8 01 1D 00 00 5985*  	ld bc,29
0455EC 11 12 00 00 5986*  	ld de,18
0455F0 DD 21 0A 02 5987*  	ld ix,522
       00          
0455F5 CD 6D B8 04 5988*  	call vdu_load_img
0455F9 C9          5989*  	ret
0455FA             5990*  
0455FA             5991*  ld_45_040:
0455FA 21 30 60 04 5992*  	ld hl,F45_040
0455FE 22 F2 B6 04 5993*  	ld (cur_filename),hl
045602 11 FC C2 04 5994*  	ld de,filedata
045606 01 00 00 01 5995*  	ld bc,65536
04560A 3E 01       5996*  	ld a,mos_load
04560C 5B CF       5997*  	RST.LIL 08h
04560E 21 48 02 00 5998*  	ld hl,BUF_45_040
045612 01 30 00 00 5999*  	ld bc,48
045616 11 21 00 00 6000*  	ld de,33
04561A DD 21 30 06 6001*  	ld ix,1584
       00          
04561F CD 6D B8 04 6002*  	call vdu_load_img
045623 C9          6003*  	ret
045624             6004*  
045624             6005*  ld_45_044:
045624 21 44 60 04 6006*  	ld hl,F45_044
045628 22 F2 B6 04 6007*  	ld (cur_filename),hl
04562C 11 FC C2 04 6008*  	ld de,filedata
045630 01 00 00 01 6009*  	ld bc,65536
045634 3E 01       6010*  	ld a,mos_load
045636 5B CF       6011*  	RST.LIL 08h
045638 21 49 02 00 6012*  	ld hl,BUF_45_044
04563C 01 75 00 00 6013*  	ld bc,117
045640 11 13 00 00 6014*  	ld de,19
045644 DD 21 AF 08 6015*  	ld ix,2223
       00          
045649 CD 6D B8 04 6016*  	call vdu_load_img
04564D C9          6017*  	ret
04564E             6018*  
04564E             6019*  ld_46_004:
04564E 21 58 60 04 6020*  	ld hl,F46_004
045652 22 F2 B6 04 6021*  	ld (cur_filename),hl
045656 11 FC C2 04 6022*  	ld de,filedata
04565A 01 00 00 01 6023*  	ld bc,65536
04565E 3E 01       6024*  	ld a,mos_load
045660 5B CF       6025*  	RST.LIL 08h
045662 21 4A 02 00 6026*  	ld hl,BUF_46_004
045666 01 10 00 00 6027*  	ld bc,16
04566A 11 08 00 00 6028*  	ld de,8
04566E DD 21 80 00 6029*  	ld ix,128
       00          
045673 CD 6D B8 04 6030*  	call vdu_load_img
045677 C9          6031*  	ret
045678             6032*  
045678             6033*  ld_46_020:
045678 21 6C 60 04 6034*  	ld hl,F46_020
04567C 22 F2 B6 04 6035*  	ld (cur_filename),hl
045680 11 FC C2 04 6036*  	ld de,filedata
045684 01 00 00 01 6037*  	ld bc,65536
045688 3E 01       6038*  	ld a,mos_load
04568A 5B CF       6039*  	RST.LIL 08h
04568C 21 4B 02 00 6040*  	ld hl,BUF_46_020
045690 01 14 00 00 6041*  	ld bc,20
045694 11 0B 00 00 6042*  	ld de,11
045698 DD 21 DC 00 6043*  	ld ix,220
       00          
04569D CD 6D B8 04 6044*  	call vdu_load_img
0456A1 C9          6045*  	ret
0456A2             6046*  
0456A2             6047*  ld_46_032:
0456A2 21 80 60 04 6048*  	ld hl,F46_032
0456A6 22 F2 B6 04 6049*  	ld (cur_filename),hl
0456AA 11 FC C2 04 6050*  	ld de,filedata
0456AE 01 00 00 01 6051*  	ld bc,65536
0456B2 3E 01       6052*  	ld a,mos_load
0456B4 5B CF       6053*  	RST.LIL 08h
0456B6 21 4C 02 00 6054*  	ld hl,BUF_46_032
0456BA 01 1D 00 00 6055*  	ld bc,29
0456BE 11 0F 00 00 6056*  	ld de,15
0456C2 DD 21 B3 01 6057*  	ld ix,435
       00          
0456C7 CD 6D B8 04 6058*  	call vdu_load_img
0456CB C9          6059*  	ret
0456CC             6060*  
0456CC             6061*  ld_46_040:
0456CC 21 94 60 04 6062*  	ld hl,F46_040
0456D0 22 F2 B6 04 6063*  	ld (cur_filename),hl
0456D4 11 FC C2 04 6064*  	ld de,filedata
0456D8 01 00 00 01 6065*  	ld bc,65536
0456DC 3E 01       6066*  	ld a,mos_load
0456DE 5B CF       6067*  	RST.LIL 08h
0456E0 21 4D 02 00 6068*  	ld hl,BUF_46_040
0456E4 01 30 00 00 6069*  	ld bc,48
0456E8 11 1B 00 00 6070*  	ld de,27
0456EC DD 21 10 05 6071*  	ld ix,1296
       00          
0456F1 CD 6D B8 04 6072*  	call vdu_load_img
0456F5 C9          6073*  	ret
0456F6             6074*  
0456F6             6075*  ld_46_044:
0456F6 21 A8 60 04 6076*  	ld hl,F46_044
0456FA 22 F2 B6 04 6077*  	ld (cur_filename),hl
0456FE 11 FC C2 04 6078*  	ld de,filedata
045702 01 00 00 01 6079*  	ld bc,65536
045706 3E 01       6080*  	ld a,mos_load
045708 5B CF       6081*  	RST.LIL 08h
04570A 21 4E 02 00 6082*  	ld hl,BUF_46_044
04570E 01 51 00 00 6083*  	ld bc,81
045712 11 01 00 00 6084*  	ld de,1
045716 DD 21 51 00 6085*  	ld ix,81
       00          
04571B CD 6D B8 04 6086*  	call vdu_load_img
04571F C9          6087*  	ret
045720             6088*  
045720             6089*  ld_47_004:
045720 21 BC 60 04 6090*  	ld hl,F47_004
045724 22 F2 B6 04 6091*  	ld (cur_filename),hl
045728 11 FC C2 04 6092*  	ld de,filedata
04572C 01 00 00 01 6093*  	ld bc,65536
045730 3E 01       6094*  	ld a,mos_load
045732 5B CF       6095*  	RST.LIL 08h
045734 21 4F 02 00 6096*  	ld hl,BUF_47_004
045738 01 10 00 00 6097*  	ld bc,16
04573C 11 09 00 00 6098*  	ld de,9
045740 DD 21 90 00 6099*  	ld ix,144
       00          
045745 CD 6D B8 04 6100*  	call vdu_load_img
045749 C9          6101*  	ret
04574A             6102*  
04574A             6103*  ld_47_020:
04574A 21 D0 60 04 6104*  	ld hl,F47_020
04574E 22 F2 B6 04 6105*  	ld (cur_filename),hl
045752 11 FC C2 04 6106*  	ld de,filedata
045756 01 00 00 01 6107*  	ld bc,65536
04575A 3E 01       6108*  	ld a,mos_load
04575C 5B CF       6109*  	RST.LIL 08h
04575E 21 50 02 00 6110*  	ld hl,BUF_47_020
045762 01 14 00 00 6111*  	ld bc,20
045766 11 0B 00 00 6112*  	ld de,11
04576A DD 21 DC 00 6113*  	ld ix,220
       00          
04576F CD 6D B8 04 6114*  	call vdu_load_img
045773 C9          6115*  	ret
045774             6116*  
045774             6117*  ld_47_032:
045774 21 E4 60 04 6118*  	ld hl,F47_032
045778 22 F2 B6 04 6119*  	ld (cur_filename),hl
04577C 11 FC C2 04 6120*  	ld de,filedata
045780 01 00 00 01 6121*  	ld bc,65536
045784 3E 01       6122*  	ld a,mos_load
045786 5B CF       6123*  	RST.LIL 08h
045788 21 51 02 00 6124*  	ld hl,BUF_47_032
04578C 01 1D 00 00 6125*  	ld bc,29
045790 11 11 00 00 6126*  	ld de,17
045794 DD 21 ED 01 6127*  	ld ix,493
       00          
045799 CD 6D B8 04 6128*  	call vdu_load_img
04579D C9          6129*  	ret
04579E             6130*  
04579E             6131*  ld_47_040:
04579E 21 F8 60 04 6132*  	ld hl,F47_040
0457A2 22 F2 B6 04 6133*  	ld (cur_filename),hl
0457A6 11 FC C2 04 6134*  	ld de,filedata
0457AA 01 00 00 01 6135*  	ld bc,65536
0457AE 3E 01       6136*  	ld a,mos_load
0457B0 5B CF       6137*  	RST.LIL 08h
0457B2 21 52 02 00 6138*  	ld hl,BUF_47_040
0457B6 01 30 00 00 6139*  	ld bc,48
0457BA 11 1B 00 00 6140*  	ld de,27
0457BE DD 21 10 05 6141*  	ld ix,1296
       00          
0457C3 CD 6D B8 04 6142*  	call vdu_load_img
0457C7 C9          6143*  	ret
0457C8             6144*  
0457C8             6145*  ld_47_044:
0457C8 21 0C 61 04 6146*  	ld hl,F47_044
0457CC 22 F2 B6 04 6147*  	ld (cur_filename),hl
0457D0 11 FC C2 04 6148*  	ld de,filedata
0457D4 01 00 00 01 6149*  	ld bc,65536
0457D8 3E 01       6150*  	ld a,mos_load
0457DA 5B CF       6151*  	RST.LIL 08h
0457DC 21 53 02 00 6152*  	ld hl,BUF_47_044
0457E0 01 1B 00 00 6153*  	ld bc,27
0457E4 11 0A 00 00 6154*  	ld de,10
0457E8 DD 21 0E 01 6155*  	ld ix,270
       00          
0457ED CD 6D B8 04 6156*  	call vdu_load_img
0457F1 C9          6157*  	ret
0457F2             6158*  
0457F2             6159*  ld_48_004:
0457F2 21 20 61 04 6160*  	ld hl,F48_004
0457F6 22 F2 B6 04 6161*  	ld (cur_filename),hl
0457FA 11 FC C2 04 6162*  	ld de,filedata
0457FE 01 00 00 01 6163*  	ld bc,65536
045802 3E 01       6164*  	ld a,mos_load
045804 5B CF       6165*  	RST.LIL 08h
045806 21 54 02 00 6166*  	ld hl,BUF_48_004
04580A 01 12 00 00 6167*  	ld bc,18
04580E 11 07 00 00 6168*  	ld de,7
045812 DD 21 7E 00 6169*  	ld ix,126
       00          
045817 CD 6D B8 04 6170*  	call vdu_load_img
04581B C9          6171*  	ret
04581C             6172*  
04581C             6173*  ld_48_020:
04581C 21 34 61 04 6174*  	ld hl,F48_020
045820 22 F2 B6 04 6175*  	ld (cur_filename),hl
045824 11 FC C2 04 6176*  	ld de,filedata
045828 01 00 00 01 6177*  	ld bc,65536
04582C 3E 01       6178*  	ld a,mos_load
04582E 5B CF       6179*  	RST.LIL 08h
045830 21 55 02 00 6180*  	ld hl,BUF_48_020
045834 01 17 00 00 6181*  	ld bc,23
045838 11 0A 00 00 6182*  	ld de,10
04583C DD 21 E6 00 6183*  	ld ix,230
       00          
045841 CD 6D B8 04 6184*  	call vdu_load_img
045845 C9          6185*  	ret
045846             6186*  
045846             6187*  ld_48_032:
045846 21 48 61 04 6188*  	ld hl,F48_032
04584A 22 F2 B6 04 6189*  	ld (cur_filename),hl
04584E 11 FC C2 04 6190*  	ld de,filedata
045852 01 00 00 01 6191*  	ld bc,65536
045856 3E 01       6192*  	ld a,mos_load
045858 5B CF       6193*  	RST.LIL 08h
04585A 21 56 02 00 6194*  	ld hl,BUF_48_032
04585E 01 20 00 00 6195*  	ld bc,32
045862 11 0D 00 00 6196*  	ld de,13
045866 DD 21 A0 01 6197*  	ld ix,416
       00          
04586B CD 6D B8 04 6198*  	call vdu_load_img
04586F C9          6199*  	ret
045870             6200*  
045870             6201*  ld_48_040:
045870 21 5C 61 04 6202*  	ld hl,F48_040
045874 22 F2 B6 04 6203*  	ld (cur_filename),hl
045878 11 FC C2 04 6204*  	ld de,filedata
04587C 01 00 00 01 6205*  	ld bc,65536
045880 3E 01       6206*  	ld a,mos_load
045882 5B CF       6207*  	RST.LIL 08h
045884 21 57 02 00 6208*  	ld hl,BUF_48_040
045888 01 35 00 00 6209*  	ld bc,53
04588C 11 18 00 00 6210*  	ld de,24
045890 DD 21 F8 04 6211*  	ld ix,1272
       00          
045895 CD 6D B8 04 6212*  	call vdu_load_img
045899 C9          6213*  	ret
04589A             6214*  
04589A             6215*  ld_48_044:
04589A 21 70 61 04 6216*  	ld hl,F48_044
04589E 22 F2 B6 04 6217*  	ld (cur_filename),hl
0458A2 11 FC C2 04 6218*  	ld de,filedata
0458A6 01 00 00 01 6219*  	ld bc,65536
0458AA 3E 01       6220*  	ld a,mos_load
0458AC 5B CF       6221*  	RST.LIL 08h
0458AE 21 58 02 00 6222*  	ld hl,BUF_48_044
0458B2 01 01 00 00 6223*  	ld bc,1
0458B6 11 01 00 00 6224*  	ld de,1
0458BA DD 21 01 00 6225*  	ld ix,1
       00          
0458BF CD 6D B8 04 6226*  	call vdu_load_img
0458C3 C9          6227*  	ret
0458C4             6228*  
0458C4             6229*  ld_49_004:
0458C4 21 84 61 04 6230*  	ld hl,F49_004
0458C8 22 F2 B6 04 6231*  	ld (cur_filename),hl
0458CC 11 FC C2 04 6232*  	ld de,filedata
0458D0 01 00 00 01 6233*  	ld bc,65536
0458D4 3E 01       6234*  	ld a,mos_load
0458D6 5B CF       6235*  	RST.LIL 08h
0458D8 21 59 02 00 6236*  	ld hl,BUF_49_004
0458DC 01 0E 00 00 6237*  	ld bc,14
0458E0 11 06 00 00 6238*  	ld de,6
0458E4 DD 21 54 00 6239*  	ld ix,84
       00          
0458E9 CD 6D B8 04 6240*  	call vdu_load_img
0458ED C9          6241*  	ret
0458EE             6242*  
0458EE             6243*  ld_49_020:
0458EE 21 98 61 04 6244*  	ld hl,F49_020
0458F2 22 F2 B6 04 6245*  	ld (cur_filename),hl
0458F6 11 FC C2 04 6246*  	ld de,filedata
0458FA 01 00 00 01 6247*  	ld bc,65536
0458FE 3E 01       6248*  	ld a,mos_load
045900 5B CF       6249*  	RST.LIL 08h
045902 21 5A 02 00 6250*  	ld hl,BUF_49_020
045906 01 12 00 00 6251*  	ld bc,18
04590A 11 08 00 00 6252*  	ld de,8
04590E DD 21 90 00 6253*  	ld ix,144
       00          
045913 CD 6D B8 04 6254*  	call vdu_load_img
045917 C9          6255*  	ret
045918             6256*  
045918             6257*  ld_49_032:
045918 21 AC 61 04 6258*  	ld hl,F49_032
04591C 22 F2 B6 04 6259*  	ld (cur_filename),hl
045920 11 FC C2 04 6260*  	ld de,filedata
045924 01 00 00 01 6261*  	ld bc,65536
045928 3E 01       6262*  	ld a,mos_load
04592A 5B CF       6263*  	RST.LIL 08h
04592C 21 5B 02 00 6264*  	ld hl,BUF_49_032
045930 01 1A 00 00 6265*  	ld bc,26
045934 11 0B 00 00 6266*  	ld de,11
045938 DD 21 1E 01 6267*  	ld ix,286
       00          
04593D CD 6D B8 04 6268*  	call vdu_load_img
045941 C9          6269*  	ret
045942             6270*  
045942             6271*  ld_49_040:
045942 21 C0 61 04 6272*  	ld hl,F49_040
045946 22 F2 B6 04 6273*  	ld (cur_filename),hl
04594A 11 FC C2 04 6274*  	ld de,filedata
04594E 01 00 00 01 6275*  	ld bc,65536
045952 3E 01       6276*  	ld a,mos_load
045954 5B CF       6277*  	RST.LIL 08h
045956 21 5C 02 00 6278*  	ld hl,BUF_49_040
04595A 01 2B 00 00 6279*  	ld bc,43
04595E 11 12 00 00 6280*  	ld de,18
045962 DD 21 06 03 6281*  	ld ix,774
       00          
045967 CD 6D B8 04 6282*  	call vdu_load_img
04596B C9          6283*  	ret
04596C             6284*  
04596C             6285*  ld_49_044:
04596C 21 D4 61 04 6286*  	ld hl,F49_044
045970 22 F2 B6 04 6287*  	ld (cur_filename),hl
045974 11 FC C2 04 6288*  	ld de,filedata
045978 01 00 00 01 6289*  	ld bc,65536
04597C 3E 01       6290*  	ld a,mos_load
04597E 5B CF       6291*  	RST.LIL 08h
045980 21 5D 02 00 6292*  	ld hl,BUF_49_044
045984 01 01 00 00 6293*  	ld bc,1
045988 11 01 00 00 6294*  	ld de,1
04598C DD 21 01 00 6295*  	ld ix,1
       00          
045991 CD 6D B8 04 6296*  	call vdu_load_img
045995 C9          6297*  	ret
045996             6298*  
045996             6299*  ld_50_004:
045996 21 E8 61 04 6300*  	ld hl,F50_004
04599A 22 F2 B6 04 6301*  	ld (cur_filename),hl
04599E 11 FC C2 04 6302*  	ld de,filedata
0459A2 01 00 00 01 6303*  	ld bc,65536
0459A6 3E 01       6304*  	ld a,mos_load
0459A8 5B CF       6305*  	RST.LIL 08h
0459AA 21 5E 02 00 6306*  	ld hl,BUF_50_004
0459AE 01 0A 00 00 6307*  	ld bc,10
0459B2 11 0D 00 00 6308*  	ld de,13
0459B6 DD 21 82 00 6309*  	ld ix,130
       00          
0459BB CD 6D B8 04 6310*  	call vdu_load_img
0459BF C9          6311*  	ret
0459C0             6312*  
0459C0             6313*  ld_50_020:
0459C0 21 FC 61 04 6314*  	ld hl,F50_020
0459C4 22 F2 B6 04 6315*  	ld (cur_filename),hl
0459C8 11 FC C2 04 6316*  	ld de,filedata
0459CC 01 00 00 01 6317*  	ld bc,65536
0459D0 3E 01       6318*  	ld a,mos_load
0459D2 5B CF       6319*  	RST.LIL 08h
0459D4 21 5F 02 00 6320*  	ld hl,BUF_50_020
0459D8 01 0D 00 00 6321*  	ld bc,13
0459DC 11 11 00 00 6322*  	ld de,17
0459E0 DD 21 DD 00 6323*  	ld ix,221
       00          
0459E5 CD 6D B8 04 6324*  	call vdu_load_img
0459E9 C9          6325*  	ret
0459EA             6326*  
0459EA             6327*  ld_50_032:
0459EA 21 10 62 04 6328*  	ld hl,F50_032
0459EE 22 F2 B6 04 6329*  	ld (cur_filename),hl
0459F2 11 FC C2 04 6330*  	ld de,filedata
0459F6 01 00 00 01 6331*  	ld bc,65536
0459FA 3E 01       6332*  	ld a,mos_load
0459FC 5B CF       6333*  	RST.LIL 08h
0459FE 21 60 02 00 6334*  	ld hl,BUF_50_032
045A02 01 12 00 00 6335*  	ld bc,18
045A06 11 1A 00 00 6336*  	ld de,26
045A0A DD 21 D4 01 6337*  	ld ix,468
       00          
045A0F CD 6D B8 04 6338*  	call vdu_load_img
045A13 C9          6339*  	ret
045A14             6340*  
045A14             6341*  ld_50_040:
045A14 21 24 62 04 6342*  	ld hl,F50_040
045A18 22 F2 B6 04 6343*  	ld (cur_filename),hl
045A1C 11 FC C2 04 6344*  	ld de,filedata
045A20 01 00 00 01 6345*  	ld bc,65536
045A24 3E 01       6346*  	ld a,mos_load
045A26 5B CF       6347*  	RST.LIL 08h
045A28 21 61 02 00 6348*  	ld hl,BUF_50_040
045A2C 01 1E 00 00 6349*  	ld bc,30
045A30 11 2A 00 00 6350*  	ld de,42
045A34 DD 21 EC 04 6351*  	ld ix,1260
       00          
045A39 CD 6D B8 04 6352*  	call vdu_load_img
045A3D C9          6353*  	ret
045A3E             6354*  
045A3E             6355*  ld_50_044:
045A3E 21 38 62 04 6356*  	ld hl,F50_044
045A42 22 F2 B6 04 6357*  	ld (cur_filename),hl
045A46 11 FC C2 04 6358*  	ld de,filedata
045A4A 01 00 00 01 6359*  	ld bc,65536
045A4E 3E 01       6360*  	ld a,mos_load
045A50 5B CF       6361*  	RST.LIL 08h
045A52 21 62 02 00 6362*  	ld hl,BUF_50_044
045A56 01 46 00 00 6363*  	ld bc,70
045A5A 11 32 00 00 6364*  	ld de,50
045A5E DD 21 AC 0D 6365*  	ld ix,3500
       00          
045A63 CD 6D B8 04 6366*  	call vdu_load_img
045A67 C9          6367*  	ret
045A68             6368*  
045A68             6369*  ld_51_004:
045A68 21 4C 62 04 6370*  	ld hl,F51_004
045A6C 22 F2 B6 04 6371*  	ld (cur_filename),hl
045A70 11 FC C2 04 6372*  	ld de,filedata
045A74 01 00 00 01 6373*  	ld bc,65536
045A78 3E 01       6374*  	ld a,mos_load
045A7A 5B CF       6375*  	RST.LIL 08h
045A7C 21 63 02 00 6376*  	ld hl,BUF_51_004
045A80 01 11 00 00 6377*  	ld bc,17
045A84 11 17 00 00 6378*  	ld de,23
045A88 DD 21 87 01 6379*  	ld ix,391
       00          
045A8D CD 6D B8 04 6380*  	call vdu_load_img
045A91 C9          6381*  	ret
045A92             6382*  
045A92             6383*  ld_51_020:
045A92 21 60 62 04 6384*  	ld hl,F51_020
045A96 22 F2 B6 04 6385*  	ld (cur_filename),hl
045A9A 11 FC C2 04 6386*  	ld de,filedata
045A9E 01 00 00 01 6387*  	ld bc,65536
045AA2 3E 01       6388*  	ld a,mos_load
045AA4 5B CF       6389*  	RST.LIL 08h
045AA6 21 64 02 00 6390*  	ld hl,BUF_51_020
045AAA 01 15 00 00 6391*  	ld bc,21
045AAE 11 1D 00 00 6392*  	ld de,29
045AB2 DD 21 61 02 6393*  	ld ix,609
       00          
045AB7 CD 6D B8 04 6394*  	call vdu_load_img
045ABB C9          6395*  	ret
045ABC             6396*  
045ABC             6397*  ld_51_032:
045ABC 21 74 62 04 6398*  	ld hl,F51_032
045AC0 22 F2 B6 04 6399*  	ld (cur_filename),hl
045AC4 11 FC C2 04 6400*  	ld de,filedata
045AC8 01 00 00 01 6401*  	ld bc,65536
045ACC 3E 01       6402*  	ld a,mos_load
045ACE 5B CF       6403*  	RST.LIL 08h
045AD0 21 65 02 00 6404*  	ld hl,BUF_51_032
045AD4 01 1E 00 00 6405*  	ld bc,30
045AD8 11 2A 00 00 6406*  	ld de,42
045ADC DD 21 EC 04 6407*  	ld ix,1260
       00          
045AE1 CD 6D B8 04 6408*  	call vdu_load_img
045AE5 C9          6409*  	ret
045AE6             6410*  
045AE6             6411*  ld_51_040:
045AE6 21 88 62 04 6412*  	ld hl,F51_040
045AEA 22 F2 B6 04 6413*  	ld (cur_filename),hl
045AEE 11 FC C2 04 6414*  	ld de,filedata
045AF2 01 00 00 01 6415*  	ld bc,65536
045AF6 3E 01       6416*  	ld a,mos_load
045AF8 5B CF       6417*  	RST.LIL 08h
045AFA 21 66 02 00 6418*  	ld hl,BUF_51_040
045AFE 01 31 00 00 6419*  	ld bc,49
045B02 11 46 00 00 6420*  	ld de,70
045B06 DD 21 66 0D 6421*  	ld ix,3430
       00          
045B0B CD 6D B8 04 6422*  	call vdu_load_img
045B0F C9          6423*  	ret
045B10             6424*  
045B10             6425*  ld_51_044:
045B10 21 9C 62 04 6426*  	ld hl,F51_044
045B14 22 F2 B6 04 6427*  	ld (cur_filename),hl
045B18 11 FC C2 04 6428*  	ld de,filedata
045B1C 01 00 00 01 6429*  	ld bc,65536
045B20 3E 01       6430*  	ld a,mos_load
045B22 5B CF       6431*  	RST.LIL 08h
045B24 21 67 02 00 6432*  	ld hl,BUF_51_044
045B28 01 92 00 00 6433*  	ld bc,146
045B2C 11 83 00 00 6434*  	ld de,131
045B30 DD 21 B6 4A 6435*  	ld ix,19126
       00          
045B35 CD 6D B8 04 6436*  	call vdu_load_img
045B39 C9          6437*  	ret
045B3A             6438*  
045B3A             6439*  ld_52_004:
045B3A 21 B0 62 04 6440*  	ld hl,F52_004
045B3E 22 F2 B6 04 6441*  	ld (cur_filename),hl
045B42 11 FC C2 04 6442*  	ld de,filedata
045B46 01 00 00 01 6443*  	ld bc,65536
045B4A 3E 01       6444*  	ld a,mos_load
045B4C 5B CF       6445*  	RST.LIL 08h
045B4E 21 68 02 00 6446*  	ld hl,BUF_52_004
045B52 01 0E 00 00 6447*  	ld bc,14
045B56 11 17 00 00 6448*  	ld de,23
045B5A DD 21 42 01 6449*  	ld ix,322
       00          
045B5F CD 6D B8 04 6450*  	call vdu_load_img
045B63 C9          6451*  	ret
045B64             6452*  
045B64             6453*  ld_52_020:
045B64 21 C4 62 04 6454*  	ld hl,F52_020
045B68 22 F2 B6 04 6455*  	ld (cur_filename),hl
045B6C 11 FC C2 04 6456*  	ld de,filedata
045B70 01 00 00 01 6457*  	ld bc,65536
045B74 3E 01       6458*  	ld a,mos_load
045B76 5B CF       6459*  	RST.LIL 08h
045B78 21 69 02 00 6460*  	ld hl,BUF_52_020
045B7C 01 11 00 00 6461*  	ld bc,17
045B80 11 1D 00 00 6462*  	ld de,29
045B84 DD 21 ED 01 6463*  	ld ix,493
       00          
045B89 CD 6D B8 04 6464*  	call vdu_load_img
045B8D C9          6465*  	ret
045B8E             6466*  
045B8E             6467*  ld_52_032:
045B8E 21 D8 62 04 6468*  	ld hl,F52_032
045B92 22 F2 B6 04 6469*  	ld (cur_filename),hl
045B96 11 FC C2 04 6470*  	ld de,filedata
045B9A 01 00 00 01 6471*  	ld bc,65536
045B9E 3E 01       6472*  	ld a,mos_load
045BA0 5B CF       6473*  	RST.LIL 08h
045BA2 21 6A 02 00 6474*  	ld hl,BUF_52_032
045BA6 01 19 00 00 6475*  	ld bc,25
045BAA 11 2A 00 00 6476*  	ld de,42
045BAE DD 21 1A 04 6477*  	ld ix,1050
       00          
045BB3 CD 6D B8 04 6478*  	call vdu_load_img
045BB7 C9          6479*  	ret
045BB8             6480*  
045BB8             6481*  ld_52_040:
045BB8 21 EC 62 04 6482*  	ld hl,F52_040
045BBC 22 F2 B6 04 6483*  	ld (cur_filename),hl
045BC0 11 FC C2 04 6484*  	ld de,filedata
045BC4 01 00 00 01 6485*  	ld bc,65536
045BC8 3E 01       6486*  	ld a,mos_load
045BCA 5B CF       6487*  	RST.LIL 08h
045BCC 21 6B 02 00 6488*  	ld hl,BUF_52_040
045BD0 01 28 00 00 6489*  	ld bc,40
045BD4 11 46 00 00 6490*  	ld de,70
045BD8 DD 21 F0 0A 6491*  	ld ix,2800
       00          
045BDD CD 6D B8 04 6492*  	call vdu_load_img
045BE1 C9          6493*  	ret
045BE2             6494*  
045BE2             6495*  ld_52_044:
045BE2 21 00 63 04 6496*  	ld hl,F52_044
045BE6 22 F2 B6 04 6497*  	ld (cur_filename),hl
045BEA 11 FC C2 04 6498*  	ld de,filedata
045BEE 01 00 00 01 6499*  	ld bc,65536
045BF2 3E 01       6500*  	ld a,mos_load
045BF4 5B CF       6501*  	RST.LIL 08h
045BF6 21 6C 02 00 6502*  	ld hl,BUF_52_044
045BFA 01 78 00 00 6503*  	ld bc,120
045BFE 11 83 00 00 6504*  	ld de,131
045C02 DD 21 68 3D 6505*  	ld ix,15720
       00          
045C07 CD 6D B8 04 6506*  	call vdu_load_img
045C0B C9          6507*  	ret
045C0C             6508*  
045C0C             6509*  ; File name lookups:
045C0C 70 61 6E 65 6510*  F20_004: db "panels/20_004.rgba2",0
       6C 73 2F 32 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C20 70 61 6E 65 6511*  F20_020: db "panels/20_020.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C34 70 61 6E 65 6512*  F20_032: db "panels/20_032.rgba2",0
       6C 73 2F 32 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045C48 70 61 6E 65 6513*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045C5C 70 61 6E 65 6514*  F20_044: db "panels/20_044.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045C70 70 61 6E 65 6515*  F21_004: db "panels/21_004.rgba2",0
       6C 73 2F 32 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C84 70 61 6E 65 6516*  F21_020: db "panels/21_020.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C98 70 61 6E 65 6517*  F21_032: db "panels/21_032.rgba2",0
       6C 73 2F 32 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045CAC 70 61 6E 65 6518*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045CC0 70 61 6E 65 6519*  F21_044: db "panels/21_044.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045CD4 70 61 6E 65 6520*  F22_004: db "panels/22_004.rgba2",0
       6C 73 2F 32 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045CE8 70 61 6E 65 6521*  F22_020: db "panels/22_020.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045CFC 70 61 6E 65 6522*  F22_032: db "panels/22_032.rgba2",0
       6C 73 2F 32 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D10 70 61 6E 65 6523*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D24 70 61 6E 65 6524*  F22_044: db "panels/22_044.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D38 70 61 6E 65 6525*  F23_004: db "panels/23_004.rgba2",0
       6C 73 2F 32 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045D4C 70 61 6E 65 6526*  F23_020: db "panels/23_020.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045D60 70 61 6E 65 6527*  F23_032: db "panels/23_032.rgba2",0
       6C 73 2F 32 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D74 70 61 6E 65 6528*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D88 70 61 6E 65 6529*  F23_044: db "panels/23_044.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D9C 70 61 6E 65 6530*  F24_004: db "panels/24_004.rgba2",0
       6C 73 2F 32 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045DB0 70 61 6E 65 6531*  F24_020: db "panels/24_020.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045DC4 70 61 6E 65 6532*  F24_032: db "panels/24_032.rgba2",0
       6C 73 2F 32 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045DD8 70 61 6E 65 6533*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045DEC 70 61 6E 65 6534*  F24_044: db "panels/24_044.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E00 70 61 6E 65 6535*  F40_004: db "panels/40_004.rgba2",0
       6C 73 2F 34 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E14 70 61 6E 65 6536*  F40_020: db "panels/40_020.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E28 70 61 6E 65 6537*  F40_032: db "panels/40_032.rgba2",0
       6C 73 2F 34 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E3C 70 61 6E 65 6538*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E50 70 61 6E 65 6539*  F40_044: db "panels/40_044.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E64 70 61 6E 65 6540*  F41_004: db "panels/41_004.rgba2",0
       6C 73 2F 34 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E78 70 61 6E 65 6541*  F41_020: db "panels/41_020.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E8C 70 61 6E 65 6542*  F41_032: db "panels/41_032.rgba2",0
       6C 73 2F 34 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045EA0 70 61 6E 65 6543*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045EB4 70 61 6E 65 6544*  F41_044: db "panels/41_044.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045EC8 70 61 6E 65 6545*  F42_004: db "panels/42_004.rgba2",0
       6C 73 2F 34 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045EDC 70 61 6E 65 6546*  F42_020: db "panels/42_020.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045EF0 70 61 6E 65 6547*  F42_032: db "panels/42_032.rgba2",0
       6C 73 2F 34 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F04 70 61 6E 65 6548*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F18 70 61 6E 65 6549*  F42_044: db "panels/42_044.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F2C 70 61 6E 65 6550*  F43_004: db "panels/43_004.rgba2",0
       6C 73 2F 34 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F40 70 61 6E 65 6551*  F43_020: db "panels/43_020.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F54 70 61 6E 65 6552*  F43_032: db "panels/43_032.rgba2",0
       6C 73 2F 34 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F68 70 61 6E 65 6553*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F7C 70 61 6E 65 6554*  F43_044: db "panels/43_044.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F90 70 61 6E 65 6555*  F44_004: db "panels/44_004.rgba2",0
       6C 73 2F 34 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045FA4 70 61 6E 65 6556*  F44_020: db "panels/44_020.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045FB8 70 61 6E 65 6557*  F44_032: db "panels/44_032.rgba2",0
       6C 73 2F 34 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045FCC 70 61 6E 65 6558*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045FE0 70 61 6E 65 6559*  F44_044: db "panels/44_044.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045FF4 70 61 6E 65 6560*  F45_004: db "panels/45_004.rgba2",0
       6C 73 2F 34 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046008 70 61 6E 65 6561*  F45_020: db "panels/45_020.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04601C 70 61 6E 65 6562*  F45_032: db "panels/45_032.rgba2",0
       6C 73 2F 34 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046030 70 61 6E 65 6563*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046044 70 61 6E 65 6564*  F45_044: db "panels/45_044.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046058 70 61 6E 65 6565*  F46_004: db "panels/46_004.rgba2",0
       6C 73 2F 34 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04606C 70 61 6E 65 6566*  F46_020: db "panels/46_020.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046080 70 61 6E 65 6567*  F46_032: db "panels/46_032.rgba2",0
       6C 73 2F 34 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046094 70 61 6E 65 6568*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0460A8 70 61 6E 65 6569*  F46_044: db "panels/46_044.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0460BC 70 61 6E 65 6570*  F47_004: db "panels/47_004.rgba2",0
       6C 73 2F 34 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0460D0 70 61 6E 65 6571*  F47_020: db "panels/47_020.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0460E4 70 61 6E 65 6572*  F47_032: db "panels/47_032.rgba2",0
       6C 73 2F 34 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0460F8 70 61 6E 65 6573*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04610C 70 61 6E 65 6574*  F47_044: db "panels/47_044.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046120 70 61 6E 65 6575*  F48_004: db "panels/48_004.rgba2",0
       6C 73 2F 34 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046134 70 61 6E 65 6576*  F48_020: db "panels/48_020.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046148 70 61 6E 65 6577*  F48_032: db "panels/48_032.rgba2",0
       6C 73 2F 34 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04615C 70 61 6E 65 6578*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046170 70 61 6E 65 6579*  F48_044: db "panels/48_044.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046184 70 61 6E 65 6580*  F49_004: db "panels/49_004.rgba2",0
       6C 73 2F 34 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046198 70 61 6E 65 6581*  F49_020: db "panels/49_020.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0461AC 70 61 6E 65 6582*  F49_032: db "panels/49_032.rgba2",0
       6C 73 2F 34 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0461C0 70 61 6E 65 6583*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0461D4 70 61 6E 65 6584*  F49_044: db "panels/49_044.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0461E8 70 61 6E 65 6585*  F50_004: db "panels/50_004.rgba2",0
       6C 73 2F 35 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0461FC 70 61 6E 65 6586*  F50_020: db "panels/50_020.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046210 70 61 6E 65 6587*  F50_032: db "panels/50_032.rgba2",0
       6C 73 2F 35 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046224 70 61 6E 65 6588*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046238 70 61 6E 65 6589*  F50_044: db "panels/50_044.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04624C 70 61 6E 65 6590*  F51_004: db "panels/51_004.rgba2",0
       6C 73 2F 35 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046260 70 61 6E 65 6591*  F51_020: db "panels/51_020.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046274 70 61 6E 65 6592*  F51_032: db "panels/51_032.rgba2",0
       6C 73 2F 35 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046288 70 61 6E 65 6593*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04629C 70 61 6E 65 6594*  F51_044: db "panels/51_044.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0462B0 70 61 6E 65 6595*  F52_004: db "panels/52_004.rgba2",0
       6C 73 2F 35 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0462C4 70 61 6E 65 6596*  F52_020: db "panels/52_020.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0462D8 70 61 6E 65 6597*  F52_032: db "panels/52_032.rgba2",0
       6C 73 2F 35 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0462EC 70 61 6E 65 6598*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046300 70 61 6E 65 6599*  F52_044: db "panels/52_044.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046314             6600*  
046314             6601*  ; dws buffer ids:
046314             6602*  BUF_DW_6: equ 0x026D
046314             6603*  BUF_DW_7: equ 0x026E
046314             6604*  BUF_DW_8: equ 0x026F
046314             6605*  BUF_DW_9: equ 0x0270
046314             6606*  BUF_DW_10: equ 0x0271
046314             6607*  BUF_DW_11: equ 0x0272
046314             6608*  BUF_DW_12: equ 0x0273
046314             6609*  BUF_DW_13: equ 0x0274
046314             6610*  BUF_DW_14: equ 0x0275
046314             6611*  
046314             6612*  dws_num_panels: equ 9
046314             6613*  
046314             6614*  ; dws buffer id reverse lookup:
046314             6615*  dws_buffer_id_lut:
046314 6D 02 00    6616*  	dl BUF_DW_6
046317 6E 02 00    6617*  	dl BUF_DW_7
04631A 6F 02 00    6618*  	dl BUF_DW_8
04631D 70 02 00    6619*  	dl BUF_DW_9
046320 71 02 00    6620*  	dl BUF_DW_10
046323 72 02 00    6621*  	dl BUF_DW_11
046326 73 02 00    6622*  	dl BUF_DW_12
046329 74 02 00    6623*  	dl BUF_DW_13
04632C 75 02 00    6624*  	dl BUF_DW_14
04632F             6625*  
04632F             6626*  ; dws load routines jump table:
04632F             6627*  dws_load_panels_table:
04632F 4A 63 04    6628*  	dl ld_dw_6
046332 74 63 04    6629*  	dl ld_dw_7
046335 9E 63 04    6630*  	dl ld_dw_8
046338 C8 63 04    6631*  	dl ld_dw_9
04633B F2 63 04    6632*  	dl ld_dw_10
04633E 1C 64 04    6633*  	dl ld_dw_11
046341 46 64 04    6634*  	dl ld_dw_12
046344 70 64 04    6635*  	dl ld_dw_13
046347 9A 64 04    6636*  	dl ld_dw_14
04634A             6637*  
04634A             6638*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
04634A             6639*  
04634A             6640*  ld_dw_6:
04634A 21 C4 64 04 6641*  	ld hl,Fdw_6
04634E 22 F2 B6 04 6642*  	ld (cur_filename),hl
046352 11 FC C2 04 6643*  	ld de,filedata
046356 01 00 00 01 6644*  	ld bc,65536
04635A 3E 01       6645*  	ld a,mos_load
04635C 5B CF       6646*  	RST.LIL 08h
04635E 21 6D 02 00 6647*  	ld hl,BUF_DW_6
046362 01 40 01 00 6648*  	ld bc,320
046366 11 1E 00 00 6649*  	ld de,30
04636A DD 21 80 25 6650*  	ld ix,9600
       00          
04636F CD 6D B8 04 6651*  	call vdu_load_img
046373 C9          6652*  	ret
046374             6653*  
046374             6654*  ld_dw_7:
046374 21 D3 64 04 6655*  	ld hl,Fdw_7
046378 22 F2 B6 04 6656*  	ld (cur_filename),hl
04637C 11 FC C2 04 6657*  	ld de,filedata
046380 01 00 00 01 6658*  	ld bc,65536
046384 3E 01       6659*  	ld a,mos_load
046386 5B CF       6660*  	RST.LIL 08h
046388 21 6E 02 00 6661*  	ld hl,BUF_DW_7
04638C 01 40 01 00 6662*  	ld bc,320
046390 11 18 00 00 6663*  	ld de,24
046394 DD 21 00 1E 6664*  	ld ix,7680
       00          
046399 CD 6D B8 04 6665*  	call vdu_load_img
04639D C9          6666*  	ret
04639E             6667*  
04639E             6668*  ld_dw_8:
04639E 21 E2 64 04 6669*  	ld hl,Fdw_8
0463A2 22 F2 B6 04 6670*  	ld (cur_filename),hl
0463A6 11 FC C2 04 6671*  	ld de,filedata
0463AA 01 00 00 01 6672*  	ld bc,65536
0463AE 3E 01       6673*  	ld a,mos_load
0463B0 5B CF       6674*  	RST.LIL 08h
0463B2 21 6F 02 00 6675*  	ld hl,BUF_DW_8
0463B6 01 40 01 00 6676*  	ld bc,320
0463BA 11 12 00 00 6677*  	ld de,18
0463BE DD 21 80 16 6678*  	ld ix,5760
       00          
0463C3 CD 6D B8 04 6679*  	call vdu_load_img
0463C7 C9          6680*  	ret
0463C8             6681*  
0463C8             6682*  ld_dw_9:
0463C8 21 F1 64 04 6683*  	ld hl,Fdw_9
0463CC 22 F2 B6 04 6684*  	ld (cur_filename),hl
0463D0 11 FC C2 04 6685*  	ld de,filedata
0463D4 01 00 00 01 6686*  	ld bc,65536
0463D8 3E 01       6687*  	ld a,mos_load
0463DA 5B CF       6688*  	RST.LIL 08h
0463DC 21 70 02 00 6689*  	ld hl,BUF_DW_9
0463E0 01 40 01 00 6690*  	ld bc,320
0463E4 11 10 00 00 6691*  	ld de,16
0463E8 DD 21 00 14 6692*  	ld ix,5120
       00          
0463ED CD 6D B8 04 6693*  	call vdu_load_img
0463F1 C9          6694*  	ret
0463F2             6695*  
0463F2             6696*  ld_dw_10:
0463F2 21 00 65 04 6697*  	ld hl,Fdw_10
0463F6 22 F2 B6 04 6698*  	ld (cur_filename),hl
0463FA 11 FC C2 04 6699*  	ld de,filedata
0463FE 01 00 00 01 6700*  	ld bc,65536
046402 3E 01       6701*  	ld a,mos_load
046404 5B CF       6702*  	RST.LIL 08h
046406 21 71 02 00 6703*  	ld hl,BUF_DW_10
04640A 01 40 01 00 6704*  	ld bc,320
04640E 11 10 00 00 6705*  	ld de,16
046412 DD 21 00 14 6706*  	ld ix,5120
       00          
046417 CD 6D B8 04 6707*  	call vdu_load_img
04641B C9          6708*  	ret
04641C             6709*  
04641C             6710*  ld_dw_11:
04641C 21 10 65 04 6711*  	ld hl,Fdw_11
046420 22 F2 B6 04 6712*  	ld (cur_filename),hl
046424 11 FC C2 04 6713*  	ld de,filedata
046428 01 00 00 01 6714*  	ld bc,65536
04642C 3E 01       6715*  	ld a,mos_load
04642E 5B CF       6716*  	RST.LIL 08h
046430 21 72 02 00 6717*  	ld hl,BUF_DW_11
046434 01 40 01 00 6718*  	ld bc,320
046438 11 0E 00 00 6719*  	ld de,14
04643C DD 21 80 11 6720*  	ld ix,4480
       00          
046441 CD 6D B8 04 6721*  	call vdu_load_img
046445 C9          6722*  	ret
046446             6723*  
046446             6724*  ld_dw_12:
046446 21 20 65 04 6725*  	ld hl,Fdw_12
04644A 22 F2 B6 04 6726*  	ld (cur_filename),hl
04644E 11 FC C2 04 6727*  	ld de,filedata
046452 01 00 00 01 6728*  	ld bc,65536
046456 3E 01       6729*  	ld a,mos_load
046458 5B CF       6730*  	RST.LIL 08h
04645A 21 73 02 00 6731*  	ld hl,BUF_DW_12
04645E 01 40 01 00 6732*  	ld bc,320
046462 11 0C 00 00 6733*  	ld de,12
046466 DD 21 00 0F 6734*  	ld ix,3840
       00          
04646B CD 6D B8 04 6735*  	call vdu_load_img
04646F C9          6736*  	ret
046470             6737*  
046470             6738*  ld_dw_13:
046470 21 30 65 04 6739*  	ld hl,Fdw_13
046474 22 F2 B6 04 6740*  	ld (cur_filename),hl
046478 11 FC C2 04 6741*  	ld de,filedata
04647C 01 00 00 01 6742*  	ld bc,65536
046480 3E 01       6743*  	ld a,mos_load
046482 5B CF       6744*  	RST.LIL 08h
046484 21 74 02 00 6745*  	ld hl,BUF_DW_13
046488 01 40 01 00 6746*  	ld bc,320
04648C 11 0C 00 00 6747*  	ld de,12
046490 DD 21 00 0F 6748*  	ld ix,3840
       00          
046495 CD 6D B8 04 6749*  	call vdu_load_img
046499 C9          6750*  	ret
04649A             6751*  
04649A             6752*  ld_dw_14:
04649A 21 40 65 04 6753*  	ld hl,Fdw_14
04649E 22 F2 B6 04 6754*  	ld (cur_filename),hl
0464A2 11 FC C2 04 6755*  	ld de,filedata
0464A6 01 00 00 01 6756*  	ld bc,65536
0464AA 3E 01       6757*  	ld a,mos_load
0464AC 5B CF       6758*  	RST.LIL 08h
0464AE 21 75 02 00 6759*  	ld hl,BUF_DW_14
0464B2 01 40 01 00 6760*  	ld bc,320
0464B6 11 0C 00 00 6761*  	ld de,12
0464BA DD 21 00 0F 6762*  	ld ix,3840
       00          
0464BF CD 6D B8 04 6763*  	call vdu_load_img
0464C3 C9          6764*  	ret
0464C4             6765*  
0464C4             6766*  ; File name lookups:
0464C4 64 77 73 2F 6767*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
0464D3 64 77 73 2F 6768*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
0464E2 64 77 73 2F 6769*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
0464F1 64 77 73 2F 6770*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
046500 64 77 73 2F 6771*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
046510 64 77 73 2F 6772*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
046520 64 77 73 2F 6773*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
046530 64 77 73 2F 6774*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
046540 64 77 73 2F 6775*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
046550             0014   	include "src/asm/fonts_bmp.asm"
046550             0001*  ; plots a bitmap character to the screen
046550             0002*  ; inputs: a; ascii character to plot
046550             0003*  ;      bc,de = x,y screen coordinates in pixels
046550             0004*  ;      ix pointed at the font definition lut
046550             0005*  ; returns: bc as the next x coordinate to plot
046550             0006*  ;          pretty pixels which hopefully resemble readable text
046550             0007*  ; destroys: lotsa stuff
046550             0008*  font_bmp_plot:
046550             0009*  ; back up bc,de
046550 C5          0010*      push bc
046551 D5          0011*      push de
046552             0012*  ; get the buffer id of the character
046552 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
046554 06 06       0014*      ld b,6 ; six bytes per lookup record
046556 4F          0015*      ld c,a
046557 ED 4C       0016*      mlt bc
046559 DD 09       0017*      add ix,bc ; now ix points to the character definition
04655B DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
04655E CD DC A9 04 0019*      call vdu_buff_select
046562             0020*  ; plot the character
046562 D1          0021*      pop de
046563 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
046566 83          0023*      add a,e ; add the y-coordinate
046567 5F          0024*      ld e,a
046568 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04656A 8A          0026*      adc a,d
04656B 57          0027*      ld d,a ; plot_y now correct for the character
04656C C1          0028*      pop bc ; plot_x
04656D C5          0029*      push bc ; we want it back after the plot
04656E CD AD AB 04 0030*      call vdu_plot_bmp
046572             0031*  ; now set bc to the next x coordinate
046572 C1          0032*      pop bc
046573 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
046576 C6 02       0034*      add a,2 ; add a little padding between characters
046578 81          0035*      add a,c ; bump the original x-coordinate
046579 4F          0036*      ld c,a
04657A 3E 00       0037*      ld a,0 ; can't xor it because we need carry
04657C 88          0038*      adc a,b
04657D 47          0039*      ld b,a ; plot_x now correct for the next character
04657E C9          0040*      ret
04657F             0041*  
04657F             0042*  ; plots a zero-terminated string of bitmap characters to the screen
04657F             0043*  ; inputs: hl; pointer to the string
04657F             0044*  ;       bc,de = x,y screen coordinates in pixels
04657F             0045*  ;       ix pointed at the font definition lut
04657F             0046*  ; returns: bc as the next x coordinate to plot
04657F             0047*  ;          de as the next y coordinate to plot
04657F             0048*  ;          pretty pixels which hopefully resemble readable text
04657F             0049*  font_bmp_print:
04657F             0050*  @next_char:
04657F             0051*  ; fetch the next character in the string
04657F 7E          0052*      ld a,(hl) ; a has the ascii value of the character
046580 FE 00       0053*      cp 0 ; is it zero?
046582 C8          0054*      ret z ; if so, we're done
046583 23          0055*      inc hl ; point to the next character
046584 E5          0056*      push hl ; save the pointer
046585 D5          0057*      push de ; save our y-coordinate
046586 DD E5       0058*      push ix ; save the font lut pointer
046588 CD 50 65 04 0059*      call font_bmp_plot ; plot the character
04658C DD E1       0060*      pop ix ; restore the font lut pointer
04658E D1          0061*      pop de ; restore our y-coordinate
04658F E1          0062*      pop hl ; restore the pointer
046590 C3 7F 65 04 0063*      jp @next_char ; loop
046594             0015   	include "src/asm/maps.asm"
046594             0001*  ; ############# MAP CONSTANTS #############
046594             0002*  ; map tables addresses
046594             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
046594             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
046594             0005*  
046594             0006*  ; map status/type flags
046594             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
046594             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
046594             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
046594             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
046594             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
046594             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
046594             0013*  ; bits 1 and 0 are the render_type mask
046594             0014*  render_type_cube:   equ %00000000  ; 0
046594             0015*  render_type_floor:  equ %00000001  ; 1
046594             0016*  render_type_null:   equ %00000010  ; 2
046594             0017*  render_type_sprite: equ %00000011  ; 3
046594             0018*  
046594             0019*  ; HOW THE MAP TABLE IS LAID OUT
046594             0020*  ; map table field offset constants
046594             0021*  ; (mind the little-endianess)
046594             0022*  map_type_status: 	equ 0
046594             0023*  map_img_idx: 		equ 1
046594             0024*  map_obj_id: 		equ 2
046594             0025*  map_sprite_id: 		equ 3
046594             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
046594             0027*  
046594             0028*  ; gets cell info from a directional displacement from a given map location
046594             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
046594             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
046594             0031*  ; calls: get_dx_dy, get_cell_from_coords
046594             0032*  get_neighbor:
046594             0033*  ; modulo 4 on orientation
046594 7B          0034*      ld a,e
046595 E6 03       0035*      and 0x03
046597 5F          0036*      ld e,a
046598 CD C7 65 04 0037*  	call get_dx_dy ; d,e = dy,dx
04659C             0038*  ; add add b,c to the deltas in d,e
04659C 79          0039*  	ld a,c
04659D 83          0040*  	add a,e
04659E 5F          0041*  	ld e,a
04659F 78          0042*  	ld a,b
0465A0 82          0043*  	add a,d
0465A1 57          0044*  	ld d,a
0465A2             0045*  ; fall through to get_cell_from_coords
0465A2             0046*  
0465A2             0047*  ; gets cell info from a given x,y map coordinate
0465A2             0048*  ; inputs: ; d,e = map_y,map_x
0465A2             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
0465A2             0050*  get_cell_from_coords:
0465A2             0051*  ; modulo 16 on input coords
0465A2 7B          0052*  	ld a,e
0465A3 E6 0F       0053*  	and 0x0F
0465A5 5F          0054*  	ld e,a
0465A6 7A          0055*  	ld a,d
0465A7 E6 0F       0056*  	and 0x0F
0465A9 57          0057*  	ld d,a
0465AA             0058*  ; get cell_id from x,y
0465AA 42          0059*  	ld b,d ; y
0465AB 0E 10       0060*  	ld c,16 ; number of cells in a column
0465AD ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
0465AF 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0465B3 6B          0063*  	ld l,e ; x
0465B4 09          0064*  	add hl,bc ; hl = cell_id of x,y
0465B5 E5          0065*  	push hl ; so we can return cell_id
0465B6 4D          0066*  	ld c,l ; c = cell_id
0465B7             0067*  ; get address of cell record in cell_status table
0465B7 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0465B9 ED 4C       0069*  	mlt bc ; bc = offset to cell record
0465BB DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0465C0 DD 09       0071*  	add ix,bc ; ix = address of cell record
0465C2 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0465C5 C1          0073*  	pop bc ; bc = cell_id
0465C6 C9          0074*  	ret
0465C7             0075*  
0465C7             0076*  ; gets dx,dy from orientation and distance
0465C7             0077*  ; d = distance ; e = orientation
0465C7             0078*  ; returns: d,e = dy,dx
0465C7             0079*  get_dx_dy:
0465C7             0080*  ; modulo 4 on orientation
0465C7 7B          0081*  	ld a,e
0465C8 E6 03       0082*  	and 0x03
0465CA FE 00       0083*  	cp 0
0465CC 28 11       0084*  	jr z,@north
0465CE FE 01       0085*  	cp 1
0465D0 28 14       0086*  	jr z,@east
0465D2 FE 02       0087*  	cp 2
0465D4 28 14       0088*  	jr z,@south
0465D6 FE 03       0089*  	cp 3
0465D8 28 13       0090*  	jr z,@west
0465DA             0091*  ; if none of those, return zeroes
0465DA 11 00 00 00 0092*  	ld de,0
0465DE C9          0093*  	ret
0465DF             0094*  @north:
0465DF             0095*  ; x = 0, y = -d
0465DF 1E 00       0096*  	ld e,0
0465E1 7A          0097*  	ld a,d
0465E2 ED 44       0098*  	neg
0465E4 57          0099*  	ld d,a
0465E5 C9          0100*  	ret
0465E6             0101*  @east:
0465E6             0102*  ; x = d, y = 0
0465E6 5A          0103*  	ld e,d
0465E7 16 00       0104*  	ld d,0
0465E9 C9          0105*  	ret
0465EA             0106*  @south:
0465EA             0107*  ; x = 0, y = d
0465EA 1E 00       0108*  	ld e,0
0465EC C9          0109*  	ret
0465ED             0110*  @west:
0465ED             0111*  ; x = -d, y = 0
0465ED 7A          0112*  	ld a,d
0465EE ED 44       0113*  	neg
0465F0 5F          0114*  	ld e,a
0465F1 16 00       0115*  	ld d,0
0465F3 C9          0116*  	ret
0465F4             0117*  
0465F4             0118*  ; gets the direction from a dy,dx pair
0465F4             0119*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
0465F4             0120*  ; inputs: ; d = dy ; e = dx
0465F4             0121*  ; returns: a = orientation
0465F4             0122*  get_dir_from_dy_dx:
0465F4 AF          0123*  	xor a
0465F5 93          0124*  	sub e
0465F6 28 06       0125*  	jr z,@not_x
0465F8 3E 01       0126*  	ld a,1
0465FA F8          0127*  	ret m
0465FB 3E 03       0128*  	ld a,3
0465FD C9          0129*  	ret
0465FE             0130*  @not_x:
0465FE AF          0131*  	xor a
0465FF 92          0132*  	sub d
046600 C8          0133*  	ret z
046601 3E 02       0134*  	ld a,2
046603 F8          0135*  	ret m
046604 AF          0136*  	xor a
046605 C9          0137*  	ret
046606             0138*  
046606             0139*  
046606             0140*  ; translate camera relative x,y deltas to map x,y deltas
046606             0141*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
046606             0142*  ; returns:	d = map_dy ; e = map_dx
046606             0143*  trans_dx_dy:
046606             0144*  ; modulo 4 on orientation
046606 E6 03       0145*  	and 0x03
046608 28 11       0146*  	jr z,@north
04660A FE 01       0147*  	cp 1 ; east
04660C 28 12       0148*  	jr z,@east
04660E FE 02       0149*  	cp 2 ; south
046610 28 12       0150*  	jr z,@south
046612 FE 03       0151*  	cp 3 ; west
046614 28 13       0152*  	jr z,@west
046616             0153*  ; if none of those, return zeroes
046616 11 00 00 00 0154*  	ld de,0
04661A C9          0155*  	ret
04661B             0156*  @north: ; invert y axis, x unnchanged
04661B 7A          0157*  	ld a,d
04661C ED 44       0158*  	neg
04661E 57          0159*  	ld d,a
04661F C9          0160*  	ret
046620             0161*  @east: ; +x = +y, +y = +x
046620 7A          0162*  	ld a,d
046621 53          0163*  	ld d,e
046622 5F          0164*  	ld e,a
046623 C9          0165*  	ret
046624             0166*  @south: ; invert x axis, y unchanged
046624 7B          0167*  	ld a,e
046625 ED 44       0168*  	neg
046627 5F          0169*  	ld e,a
046628 C9          0170*  	ret
046629             0171*  @west: ; +x = -y, +y = -x
046629 7A          0172*  	ld a,d ; y
04662A ED 44       0173*  	neg ; -y
04662C 53          0174*  	ld d,e ; x
04662D 5F          0175*  	ld e,a ; -y
04662E 7A          0176*  	ld a,d ; x
04662F ED 44       0177*  	neg ; -x
046631 57          0178*  	ld d,a ; -x
046632 C9          0179*  	ret
046633             0180*  
046633             0181*  ; initialize map variables and load map file
046633             0182*  ; inputs: none
046633             0183*  map_init:
046633 AF          0184*  	xor a
046634 32 E8 B1 04 0185*  	ld (cur_floor),a
046638 32 E9 B1 04 0186*  	ld (cur_room),a
04663C             0187*  ; load room file
04663C CD 41 66 04 0188*  	call map_load
046640             0189*  ; set player initial position
046640 C9          0190*  	ret
046641             0191*  
046641             0192*  ; load map file
046641             0193*  ; inputs: cur_floor, cur_room set
046641             0194*  map_load:
046641 21 F9 66 04 0195*  	ld hl,floors ; address of floors lut
046645 3A E8 B1 04 0196*  	ld a,(cur_floor)
046649 5F          0197*  	ld e,a
04664A 16 03       0198*  	ld d,3 ; three bytes per lookup record
04664C ED 5C       0199*  	mlt de ; de = offset to floor lut entry
04664E 19          0200*  	add hl,de ; hl = address of floor lut entry
04664F ED 27       0201*  	ld hl,(hl) ; hl = base address of rooms for given floor
046651 3A E9 B1 04 0202*  	ld a,(cur_room)
046655 5F          0203*  	ld e,a
046656 16 03       0204*  	ld d,3 ; three bytes per lookup record
046658 ED 5C       0205*  	mlt de ; de = offset to room lut entry
04665A 19          0206*  	add hl,de ; hl = address of room lut entry
04665B ED 27       0207*  	ld hl,(hl) ; hl = address of room file name
04665D 22 F2 B6 04 0208*  	ld (cur_filename),hl ; DEBUG
046661 11 00 E0 B7 0209*  	ld de,cell_status ; address to load map data
046665 01 00 20 00 0210*  	ld bc,8*1024 ; size of map data in bytes
046669 3E 01       0211*  	ld a,mos_load
04666B 5B CF       0212*  	RST.LIL 08h
04666D             0213*  ; DEBUG: print filename
04666D 2A F2 B6 04 0214*  	ld hl,(cur_filename)
046671 CD 72 AE 04 0215*  	call printString
046675             0216*  ; load sprite data
046675 CD 7A 66 04 0217*  	call map_init_sprites
046679 C9          0218*  	ret
04667A             0219*  
04667A             0220*  ; initialize sprite data for the current room into sprite table
04667A             0221*  ; inputs: map data loaded
04667A             0222*  map_init_sprites:
04667A             0223*  ; initialize pointers
04667A DD 21 00 E0 0224*  	ld ix,cell_status
       B7          
04667F FD 21 00 FC 0225*  	ld iy,sprite_table_base
       B7          
046684 AF          0226*  	xor a
046685 32 C9 66 04 0227*  	ld (@cell_id),a
046689             0228*  @loop:
046689 FD 22 15 9F 0229*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
04668E DD 7E 03    0230*  	ld a,(ix+map_sprite_id)
046691 FE FF       0231*  	cp 255 ; check for no sprite
046693 28 1B       0232*  	jr z,@next_cell
046695 FD 77 00    0233*  	ld (iy+sprite_id),a
046698 DD 7E 01    0234*  	ld a,(ix+map_img_idx)
04669B FD 77 01    0235*  	ld (iy+sprite_obj),a
04669E CD 46 A0 04 0236*  	call sprite_init_data
0466A2 3A C9 66 04 0237*  	ld a,(@cell_id)
0466A6 CD CA 66 04 0238*  	call cell_id_to_coords ; d = map_y, e = map_x
0466AA FD 1F 04    0239*  	ld (iy+sprite_x),de ; set sprite x,y
0466AD ED 33 10    0240*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
0466B0             0241*  @next_cell:
0466B0 ED 32 04    0242*  	lea ix,ix+map_record_size ; advance pointer to next cell
0466B3             0243*  ; check if we've reached the end of the map data
0466B3 3A C9 66 04 0244*  	ld a,(@cell_id)
0466B7 3C          0245*  	inc a
0466B8 32 C9 66 04 0246*  	ld (@cell_id),a
0466BC 20 CB       0247*  	jr nz,@loop ; still more to do
0466BE             0248*  ; cleanup and return
0466BE FD 21 00 FC 0249*  	ld iy,sprite_table_base ; reset pointer
       B7          
0466C3 FD 22 15 9F 0250*  	ld (sprite_table_pointer),iy
       04          
0466C8 C9          0251*  	ret
0466C9 00          0252*  @cell_id: db 0
0466CA             0253*  
0466CA             0254*  ; get the x,y map coordinates from a cell_id
0466CA             0255*  ; inputs: a = cell_id
0466CA             0256*  ; returns: a = cell_id, d = map_y, e = map_x
0466CA             0257*  cell_id_to_coords:
0466CA F5          0258*  	push af	; Save the cell id
0466CB             0259*  ; Calculate the y coordinate by dividing the index by 16
0466CB 57          0260*  	ld d,a      ; Move index into d
0466CC CB 2A       0261*  	sra d        ; Shift right once (d = d / 2)
0466CE CB 2A       0262*  	sra d        ; Shift right again (d = d / 4)
0466D0 CB 2A       0263*  	sra d        ; Shift right again (d = d / 8)
0466D2 CB 2A       0264*  	sra d        ; Shift right again (d = d / 16)
0466D4             0265*  ; Calculate the x coordinate by taking the index modulo 16
0466D4 E6 0F       0266*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
0466D6 5F          0267*  	ld e,a      ; e is now the x coordinate
0466D7 F1          0268*  	pop af	; a is cell id
0466D8 C9          0269*  	ret
0466D9             0270*  
0466D9             0271*  ; get starting position based on the start flag
0466D9             0272*  ; inputs: none
0466D9             0273*  ; returns: a = cell_id, d = map_y, e = map_x
0466D9             0274*  get_start_pos:
0466D9 11 00 00 00 0275*  	ld de,0 ; initialize to 0,0 as a default
0466DD DD 21 00 E0 0276*  	ld ix,cell_status ; ix points to the start of the map data
       B7          
0466E2 AF          0277*  	xor a ; start at cell 0
0466E3             0278*  @loop:
0466E3 F5          0279*  	push af ; save cell_id
0466E4 DD 7E 00    0280*  	ld a,(ix+map_type_status) ; a is the cell status bitmmask
0466E7 E6 08       0281*  	and cell_is_start ; testing whether the cell start bit is lit
0466E9 28 06       0282*  	jr z,@not_start ; go to the next cell if not
0466EB F1          0283*  	pop	af ; a is cell_id
0466EC CD CA 66 04 0284*  	call cell_id_to_coords ; d = map_y, e = map_x
0466F0 C9          0285*  	ret
0466F1             0286*  @not_start:
0466F1 F1          0287*  	pop	af ; a is cell_id
0466F2 3C          0288*  	inc a ; bump cell id
0466F3 C8          0289*  	ret z ; if zero we've wrapped around so we return 0,0 in de and 0 in a as cell_id
0466F4 ED 32 04    0290*  	lea ix,ix+map_record_size ; otherwise bump pointer to next map record
0466F7 18 EA       0291*  	jr @loop
0466F9             0292*  
0466F9             0293*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
0466F9             0294*  
0466F9             0295*  floors:
0466F9 FC 66 04    0296*  	dl floor_00
0466FC             0297*  
0466FC             0298*  ; map room filename labels
0466FC             0299*  room_files:
0466FC             0300*  floor_00:
0466FC 02 67 04    0301*  	dl room_00_0
0466FF 14 67 04    0302*  	dl room_00_1
046702             0303*  
046702             0304*  ; map data filenames
046702 6D 61 70 73 0305*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
046714 6D 61 70 73 0306*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
046726             0016   	include "src/asm/render.asm"
046726             0001*  ; #### RENDERING SCRATCH VARIABLES ####
046726             0002*  ; first three bytes of cell_status record in little-endian order
046726             0003*  to_cell_status:
046726             0004*  to_map_type_status: ds 1
046727             0005*  to_img_idx: ds 1
046728             0006*  to_obj_id: ds 1
046729             0007*  ; fourth byte of cell_status record
046729             0008*  to_sprite_id: ds 1
04672A             0009*  
04672A             0010*  to_poly_id: ds 1
04672B             0011*  to_buffer_id: ds 3
04672E             0012*  
04672E             0013*  cur_cell_views: ds 3
046731             0014*  
046731             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
046731             0016*  
046731             0017*  ; render background as a prelude to rendering panels and sprites
046731             0018*  ; hl is the buffer id, bc and de are plot_x and plot_y
046731             0019*  render_background:
046731             0020*  ; back up everything
046731 C5          0021*      push bc
046732 D5          0022*      push de
046733 E5          0023*      push hl
046734             0024*  ; plot background
046734 AF          0025*      xor a ; color mode
046735 0E 08       0026*      ld c,c_grey_dk ; color
046737 CD 9D A8 04 0027*      call vdu_gcol_fg
04673B 01 00 00 00 0028*      ld bc,0 ; x0
04673F 11 00 00 00 0029*      ld de,0 ; y0
046743 DD 21 3F 01 0030*      ld ix,319
       00          
046748 FD 21 50 00 0031*      ld iy,80
       00          
04674D CD EA AB 04 0032*      call vdu_plot_rf
046751 AF          0033*      xor a ; color mode
046752 0E 07       0034*      ld c,c_grey ; color
046754 CD 9D A8 04 0035*      call vdu_gcol_fg
046758 01 00 00 00 0036*      ld bc,0 ; x0
04675C 11 50 00 00 0037*      ld de,80 ; y0
046760 DD 21 3F 01 0038*      ld ix,319
       00          
046765 FD 21 9F 00 0039*      ld iy,159
       00          
04676A CD EA AB 04 0040*      call vdu_plot_rf
04676E             0041*  ; plot the background
04676E E1          0042*      pop hl ; get back the buffer id
04676F CD DC A9 04 0043*      call vdu_buff_select
046773 D1          0044*      pop de ; get back plot_y
046774 C1          0045*      pop bc ; get back plot_x
046775 CD AD AB 04 0046*      call vdu_plot_bmp
046779 C9          0047*      ret
04677A             0048*  
04677A             0049*  ; render a 3D panel
04677A             0050*  ; inputs: to_poly_id set, to_buffer_id set
04677A             0051*  render_panel:
04677A             0052*  ; make the bitmap buffer active
04677A 2A 2B 67 04 0053*      ld hl,(to_buffer_id)
04677E CD DC A9 04 0054*      call vdu_buff_select
046782             0055*  ; get the coordinates of the panel
046782 DD 21 7E 69 0056*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
046787             0057*  ; get the panel's poly_id
046787 3A 2A 67 04 0058*      ld a,(to_poly_id)
04678B             0059*  ; multiply a by 6 to get the offset
04678B 47          0060*      ld b,a
04678C 0E 06       0061*      ld c,6
04678E ED 4C       0062*      mlt bc
046790             0063*  ; add the offset to the lookup table
046790 DD 09       0064*      add ix,bc
046792             0065*  ; get the panel coordinates
046792 DD 07 00    0066*      ld bc,(ix) ; plot_x
046795 DD 17 03    0067*      ld de,(ix+3) ; plot_y
046798             0068*  ; plot that mofo and go home
046798 CD AD AB 04 0069*      call vdu_plot_bmp
04679C C9          0070*      ret
04679D             0071*  
04679D             0072*  ; render a 3D sprite
04679D             0073*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
04679D             0074*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
04679D             0075*  render_sprite:
04679D             0076*  ; look up sprite_obj in sprite table
04679D FD 21 00 FC 0077*      ld iy,sprite_table_base
       B7          
0467A2 47          0078*      ld b,a ; sprite id
0467A3 0E 10       0079*      ld c,sprite_record_size
0467A5 ED 4C       0080*      mlt bc
0467A7 FD 09       0081*      add iy,bc ; iy points to sprite record
0467A9 FD 22 15 9F 0082*      ld (sprite_table_pointer),iy
       04          
0467AE             0083*  ; get sprite imgs lookup
0467AE FD 7E 01    0084*      ld a,(iy+sprite_obj) ; a is sprite_obj
0467B1 FD 21 6F 6C 0085*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
0467B6 47          0086*      ld b,a
0467B7 0E 03       0087*      ld c,3 ; 3 bytes per record
0467B9 ED 4C       0088*      mlt bc
0467BB FD 09       0089*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
0467BD FD 37 00    0090*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
0467C0             0091*  ; convert to_poly_id to sprite_poly
0467C0 21 42 6C 04 0092*      ld hl,sprite_polys_lookup
0467C4 3A 2A 67 04 0093*      ld a,(to_poly_id)
0467C8 01 00 00 00 0094*      ld bc,0  ; make sure bcu and b are zero
0467CC 4F          0095*      ld c,a
0467CD 09          0096*      add hl,bc ; hl points to the sprite's poly id
0467CE             0097*  ; get the sprites image defs for the particular poly id
0467CE 7E          0098*      ld a,(hl)
0467CF 47          0099*      ld b,a
0467D0 0E 09       0100*      ld c,9  ; 9 bytes per record
0467D2 ED 4C       0101*      mlt bc
0467D4 FD 09       0102*      add iy,bc ; iy is the offset to the sprite's image def
0467D6             0103*  ; select buffer
0467D6 FD 27 06    0104*      ld hl,(iy+6)
0467D9 CD DC A9 04 0105*      call vdu_buff_select
0467DD             0106*  ; plot sprite
0467DD FD 07 00    0107*      ld bc,(iy+0) ; plot_x
0467E0 FD 17 03    0108*      ld de,(iy+3) ; plot_y
0467E3 CD AD AB 04 0109*      call vdu_plot_bmp
0467E7 C9          0110*      ret
0467E8             0111*  
0467E8             0112*  ; render the object in a given cell and poly_id
0467E8             0113*  ; inputs: to_poly_id set, d,e are the cell coords
0467E8             0114*  render_cell:
0467E8             0115*  ; get the cell to render's cell_status data and store it in scratch
0467E8 CD A2 65 04 0116*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
0467EC DD 27 00    0117*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
0467EF 22 26 67 04 0118*      ld (to_cell_status),hl
0467F3             0119*  ; get sprite_id from cell_status lut
0467F3 DD 7E 03    0120*      ld a,(ix+map_sprite_id)
0467F6 FE FF       0121*      cp 255 ; value if no sprite present
0467F8 C2 9D 67 04 0122*      jp nz,render_sprite
0467FC             0123*  ; get cell's render_type
0467FC 7D          0124*      ld a,l ; map_type_status
0467FD E6 02       0125*      and 2 ; mask off everything but lowest two bits
0467FF 28 02       0126*      jr z,@cube ; render_type_cube is 0
046801 18 32       0127*      jr @nodraw ; placeholder for future implementation TODO
046803             0128*  @cube:
046803             0129*      ; get map_img_idx from cell_status lut
046803 3A 27 67 04 0130*      ld a,(to_img_idx)
046807 FE FF       0131*      cp 255 ; value for cell with nothing to draw
046809 28 2A       0132*      jr z,@nodraw
04680B             0133*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
04680B 21 B9 6A 04 0134*      ld hl,cube_img_idx_lookup
04680F 47          0135*      ld b,a
046810 0E 03       0136*      ld c,3 ; three bytes per record
046812 ED 4C       0137*      mlt bc
046814 09          0138*      add hl,bc ; hl points to the cube's base buffer id
046815 ED 27       0139*      ld hl,(hl) ; hl is the base buffer id
046817 EB          0140*      ex de,hl ; stash the base buffer id in de for later
046818 21 8C 6A 04 0141*      ld hl,cube_poly_idx_lookup
04681C 3A 2A 67 04 0142*      ld a,(to_poly_id)
046820 01 00 00 00 0143*      ld bc,0 ; make sure bcu is zero
046824 4F          0144*      ld c,a
046825 09          0145*      add hl,bc ; hl is the buffer id index address
046826 7E          0146*      ld a,(hl) ; a is the buffer id index value
046827 21 00 00 00 0147*      ld hl,0 ; make sure hlu is zero
04682B 6F          0148*      ld l,a ; hl is the buffer id index value
04682C 19          0149*      add hl,de ; hl is the buffer id
04682D 22 2B 67 04 0150*      ld (to_buffer_id),hl
046831 C3 7A 67 04 0151*      jp render_panel
046835             0152*  @nodraw:
046835 C9          0153*      ret
046836             0154*  
046836             0155*  ; render a full 3d scene
046836             0156*  ; inputs: cur_x, cur_y, orientation set
046836             0157*  ; outputs: pretty pictures
046836             0158*  ; destroys: everything
046836             0159*  render_scene:
046836             0160*  ; clear the screen
046836 CD 31 67 04 0161*      call render_background
04683A             0162*  ; get current map position and camera orientation
04683A ED 5B EE B1 0163*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04683F CD A2 65 04 0164*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
046843             0165*  ; get cell_views address for this cell and orientation
046843 3A ED B1 04 0166*      ld a,(orientation)
046847 5F          0167*      ld e,a
046848 16 06       0168*      ld d,6 ; 6 bytes per orientation
04684A ED 5C       0169*      mlt de ; de = orientation offset
04684C EB          0170*      ex de,hl ; hl = orientation offset
04684D 06 18       0171*      ld b,24 ; 24 bytes per cell in cell_views lut
04684F ED 4C       0172*      mlt bc ; bc = offset from base address of cell_views lut
046851 09          0173*      add hl,bc ; hl = total offset from cell_views base address
046852 EB          0174*      ex de,hl ; becaue we can't add iy to hl
046853 FD 21 00 E4 0175*      ld iy,cell_views ; base address of cell_views lut
       B7          
046858 FD 19       0176*      add iy,de ; iy = cell_views address
04685A FD 22 2E 67 0177*      ld (cur_cell_views),iy
       04          
04685F             0178*  ; cycle through the cell views masks and render the appropriate objects
04685F 01 00 46 28 0179*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
046863 AF          0180*      xor a ; poly_id
046864 32 2A 67 04 0181*      ld (to_poly_id),a
046868             0182*  @loop:
046868 ED 43 74 68 0183*      ld (@bit_iy+2),bc
       04          
04686D FD 2A 2E 67 0184*      ld iy,(cur_cell_views)
       04          
046872             0185*  @bit_iy:
046872 FD CB 00 46 0186*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
046876 28 21       0187*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
046878             0188*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
046878 3A 2A 67 04 0189*      ld a,(to_poly_id)
04687C 4F          0190*      ld c,a ; poly_id
04687D 3A ED B1 04 0191*      ld a,(orientation)
046881 CD 4B 69 04 0192*      call get_polys_deltas ; d,e = y,x deltas
046885 3A EE B1 04 0193*      ld a,(cur_x)
046889 83          0194*      add a,e
04688A 5F          0195*      ld e,a
04688B 3A EF B1 04 0196*      ld a,(cur_y)
04688F 82          0197*      add a,d
046890 57          0198*      ld d,a
046891 3A 2A 67 04 0199*      ld a,(to_poly_id)
046895 CD E8 67 04 0200*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
046899             0201*  @next_poly:
046899 ED 4B 74 68 0202*      ld bc,(@bit_iy+2)
       04          
04689E 3A 2A 67 04 0203*      ld a,(to_poly_id)
0468A2 3C          0204*      inc a ; a is next poly_id
0468A3 32 2A 67 04 0205*      ld (to_poly_id),a
0468A7 FE 2D       0206*      cp num_polys
0468A9 28 0D       0207*      jr z,@end
0468AB 3E 08       0208*      ld a,8
0468AD 80          0209*      add a,b
0468AE 47          0210*      ld b,a ; bit tested codes to 0x46 + b/8
0468AF FE 86       0211*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
0468B1 20 B5       0212*      jr nz,@loop
0468B3 06 46       0213*      ld b,0x46
0468B5 0C          0214*      inc c ; iy address offset
0468B6 18 B0       0215*      jr @loop
0468B8             0216*  @end:
0468B8             0217*  ; draw the graphic portions of the ui
0468B8 21 01 20 00 0218*  	ld hl,BUF_UI_LOWER_PANEL
0468BC CD DC A9 04 0219*      call vdu_buff_select
0468C0 01 00 00 00 0220*  	ld bc,0 ; x
0468C4 11 A0 00 00 0221*  	ld de,160 ; y
0468C8 CD AD AB 04 0222*  	call vdu_plot_bmp
0468CC             0223*  
0468CC 2A 09 B2 04 0224*      ld hl,(plyr_wpn_ui_lg)
0468D0 ED 5B 1B B2 0225*      ld de,(plyr_wpn_anim_fr)
       04          
0468D5 19          0226*      add hl,de
0468D6 CD DC A9 04 0227*      call vdu_buff_select
0468DA 01 80 00 00 0228*      ld bc,128 ; x
0468DE 11 60 00 00 0229*      ld de,96 ; y
0468E2 CD AD AB 04 0230*      call vdu_plot_bmp
0468E6             0231*  
0468E6 2A 06 B2 04 0232*      ld hl,(plyr_wpn_ui_sm)
0468EA CD DC A9 04 0233*      call vdu_buff_select
0468EE 01 0A 01 00 0234*      ld bc,266 ; x
0468F2 11 B2 00 00 0235*      ld de,178 ; y
0468F6 CD AD AB 04 0236*      call vdu_plot_bmp
0468FA             0237*  
0468FA             0238*  ; draw the text portions of the ui
0468FA 0E 16       0239*      ld c,22 ; x
0468FC 06 03       0240*      ld b,3 ; y
0468FE CD B0 A9 04 0241*      call vdu_move_cursor
046902 2A 1E B2 04 0242*      ld hl,(plyr_ammo)
046906 CD C0 AE 04 0243*      call printDec
04690A             0244*  
04690A 0E 11       0245*      ld c,17 ; x
04690C 06 03       0246*      ld b,3 ; y
04690E CD B0 A9 04 0247*      call vdu_move_cursor
046912 2A DF B1 04 0248*      ld hl,(plyr_health)
046916 CD C0 AE 04 0249*      call printDec
04691A             0250*  
04691A 0E 07       0251*      ld c,7; x
04691C 06 03       0252*      ld b,3 ; y
04691E CD B0 A9 04 0253*      call vdu_move_cursor
046922 2A E5 B1 04 0254*      ld hl,(plyr_lives)
046926 CD C0 AE 04 0255*      call printDec
04692A             0256*  
04692A 0E 03       0257*      ld c,3 ; x
04692C 06 03       0258*      ld b,3 ; y
04692E CD B0 A9 04 0259*      call vdu_move_cursor
046932 2A DC B1 04 0260*      ld hl,(plyr_score)
046936 CD C0 AE 04 0261*      call printDec
04693A             0262*  
04693A 0E 01       0263*      ld c,1 ; x
04693C 06 03       0264*      ld b,3 ; y
04693E CD B0 A9 04 0265*      call vdu_move_cursor
046942 3A E8 B1 04 0266*      ld a,(cur_floor)
046946 CD A2 AE 04 0267*      call printHex8
04694A             0268*  
04694A             0269*  ; all done
04694A C9          0270*      ret
04694B             0271*  
04694B             0272*  ; get the map coordinates deltas for a given orientation and poly_id
04694B             0273*  ; inputs: a is the orientation, c is the poly_id
04694B             0274*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
04694B             0275*  get_polys_deltas:
04694B             0276*  ; get the base address of the orientation-specific deltas lookup table
04694B FE 00       0277*      cp 0
04694D 28 11       0278*      jr z,@orientation_0
04694F FE 01       0279*      cp 1
046951 28 13       0280*      jr z,@orientation_1
046953 FE 02       0281*      cp 2
046955 28 15       0282*      jr z,@orientation_2
046957 FE 03       0283*      cp 3
046959 28 17       0284*      jr z,@orientation_3
04695B             0285*  ; return zeros if not found
04695B 11 00 00 00 0286*      ld de,0
04695F C9          0287*      ret
046960             0288*  @orientation_0: ; north
046960 21 DA 6A 04 0289*      ld hl,polys_map_deltas_0
046964 18 10       0290*      jr @get_deltas
046966             0291*  @orientation_1: ; east
046966 21 34 6B 04 0292*      ld hl,polys_map_deltas_1
04696A 18 0A       0293*      jr @get_deltas
04696C             0294*  @orientation_2: ; south
04696C 21 8E 6B 04 0295*      ld hl,polys_map_deltas_2
046970 18 04       0296*      jr @get_deltas
046972             0297*  @orientation_3: ; west
046972 21 E8 6B 04 0298*      ld hl,polys_map_deltas_3
046976             0299*  @get_deltas:
046976 06 02       0300*      ld b,2 ; 2 bytes per record
046978 ED 4C       0301*      mlt bc ; poly_id * 2
04697A 09          0302*      add hl,bc ; hl points to the deltas
04697B ED 17       0303*      ld de,(hl) ;d,e = dy,dx
04697D C9          0304*      ret
04697E             0017   	include "src/asm/polys.asm"
04697E             0001*  num_polys: equ 45
04697E             0002*  
04697E             0003*  polys_lookup_plot:
04697E             0004*  ;	   plot_x,  plot_y:
04697E 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
046984 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
04698A 47 00 00 3E 0007*  	dl 0x000047,0x00003E ; poly_id:2 02
       00 00       
046990 6A 00 00 3E 0008*  	dl 0x00006A,0x00003E ; poly_id:3 03
       00 00       
046996 8E 00 00 3E 0009*  	dl 0x00008E,0x00003E ; poly_id:4 04
       00 00       
04699C B1 00 00 3E 0010*  	dl 0x0000B1,0x00003E ; poly_id:5 05
       00 00       
0469A2 D5 00 00 3E 0011*  	dl 0x0000D5,0x00003E ; poly_id:6 06
       00 00       
0469A8 F8 00 00 3E 0012*  	dl 0x0000F8,0x00003E ; poly_id:7 07
       00 00       
0469AE 1C 01 00 3E 0013*  	dl 0x00011C,0x00003E ; poly_id:8 08
       00 00       
0469B4 00 00 00 39 0014*  	dl 0x000000,0x000039 ; poly_id:9 09
       00 00       
0469BA 2E 00 00 39 0015*  	dl 0x00002E,0x000039 ; poly_id:10 0A
       00 00       
0469C0 5B 00 00 39 0016*  	dl 0x00005B,0x000039 ; poly_id:11 0B
       00 00       
0469C6 89 00 00 39 0017*  	dl 0x000089,0x000039 ; poly_id:12 0C
       00 00       
0469CC B1 00 00 39 0018*  	dl 0x0000B1,0x000039 ; poly_id:13 0D
       00 00       
0469D2 D5 00 00 39 0019*  	dl 0x0000D5,0x000039 ; poly_id:14 0E
       00 00       
0469D8 F8 00 00 39 0020*  	dl 0x0000F8,0x000039 ; poly_id:15 0F
       00 00       
0469DE 1C 01 00 39 0021*  	dl 0x00011C,0x000039 ; poly_id:16 10
       00 00       
0469E4 00 00 00 39 0022*  	dl 0x000000,0x000039 ; poly_id:17 11
       00 00       
0469EA 2E 00 00 39 0023*  	dl 0x00002E,0x000039 ; poly_id:18 12
       00 00       
0469F0 5B 00 00 39 0024*  	dl 0x00005B,0x000039 ; poly_id:19 13
       00 00       
0469F6 89 00 00 39 0025*  	dl 0x000089,0x000039 ; poly_id:20 14
       00 00       
0469FC B6 00 00 39 0026*  	dl 0x0000B6,0x000039 ; poly_id:21 15
       00 00       
046A02 E4 00 00 39 0027*  	dl 0x0000E4,0x000039 ; poly_id:22 16
       00 00       
046A08 11 01 00 39 0028*  	dl 0x000111,0x000039 ; poly_id:23 17
       00 00       
046A0E 00 00 00 30 0029*  	dl 0x000000,0x000030 ; poly_id:24 18
       00 00       
046A14 3F 00 00 30 0030*  	dl 0x00003F,0x000030 ; poly_id:25 19
       00 00       
046A1A 80 00 00 30 0031*  	dl 0x000080,0x000030 ; poly_id:26 1A
       00 00       
046A20 B6 00 00 30 0032*  	dl 0x0000B6,0x000030 ; poly_id:27 1B
       00 00       
046A26 E4 00 00 30 0033*  	dl 0x0000E4,0x000030 ; poly_id:28 1C
       00 00       
046A2C 11 01 00 30 0034*  	dl 0x000111,0x000030 ; poly_id:29 1D
       00 00       
046A32 00 00 00 30 0035*  	dl 0x000000,0x000030 ; poly_id:30 1E
       00 00       
046A38 3F 00 00 30 0036*  	dl 0x00003F,0x000030 ; poly_id:31 1F
       00 00       
046A3E 80 00 00 30 0037*  	dl 0x000080,0x000030 ; poly_id:32 20
       00 00       
046A44 C0 00 00 30 0038*  	dl 0x0000C0,0x000030 ; poly_id:33 21
       00 00       
046A4A 00 01 00 30 0039*  	dl 0x000100,0x000030 ; poly_id:34 22
       00 00       
046A50 00 00 00 1A 0040*  	dl 0x000000,0x00001A ; poly_id:35 23
       00 00       
046A56 6A 00 00 1A 0041*  	dl 0x00006A,0x00001A ; poly_id:36 24
       00 00       
046A5C C0 00 00 1A 0042*  	dl 0x0000C0,0x00001A ; poly_id:37 25
       00 00       
046A62 00 01 00 1A 0043*  	dl 0x000100,0x00001A ; poly_id:38 26
       00 00       
046A68 00 00 00 1A 0044*  	dl 0x000000,0x00001A ; poly_id:39 27
       00 00       
046A6E 6A 00 00 1A 0045*  	dl 0x00006A,0x00001A ; poly_id:40 28
       00 00       
046A74 D5 00 00 1A 0046*  	dl 0x0000D5,0x00001A ; poly_id:41 29
       00 00       
046A7A 00 00 00 00 0047*  	dl 0x000000,0x000000 ; poly_id:42 2A
       00 00       
046A80 D5 00 00 00 0048*  	dl 0x0000D5,0x000000 ; poly_id:43 2B
       00 00       
046A86 00 00 00 00 0049*  	dl 0x000000,0x000000 ; poly_id:44 2C
       00 00       
046A8C             0050*  
046A8C             0051*  cube_poly_idx_lookup:
046A8C             0052*  ;	 img_idx,  poly_id
046A8C 00          0053*  	db 0 ; poly_id:0 0
046A8D 00          0054*  	db 0 ; poly_id:1 1
046A8E 00          0055*  	db 0 ; poly_id:2 2
046A8F 00          0056*  	db 0 ; poly_id:3 3
046A90 00          0057*  	db 0 ; poly_id:4 4
046A91 00          0058*  	db 0 ; poly_id:5 5
046A92 00          0059*  	db 0 ; poly_id:6 6
046A93 00          0060*  	db 0 ; poly_id:7 7
046A94 00          0061*  	db 0 ; poly_id:8 8
046A95 01          0062*  	db 1 ; poly_id:9 9
046A96 02          0063*  	db 2 ; poly_id:10 10
046A97 03          0064*  	db 3 ; poly_id:11 11
046A98 04          0065*  	db 4 ; poly_id:12 12
046A99 05          0066*  	db 5 ; poly_id:13 13
046A9A 06          0067*  	db 6 ; poly_id:14 14
046A9B 07          0068*  	db 7 ; poly_id:15 15
046A9C 08          0069*  	db 8 ; poly_id:16 16
046A9D 09          0070*  	db 9 ; poly_id:17 17
046A9E 09          0071*  	db 9 ; poly_id:18 18
046A9F 09          0072*  	db 9 ; poly_id:19 19
046AA0 09          0073*  	db 9 ; poly_id:20 20
046AA1 09          0074*  	db 9 ; poly_id:21 21
046AA2 09          0075*  	db 9 ; poly_id:22 22
046AA3 09          0076*  	db 9 ; poly_id:23 23
046AA4 0A          0077*  	db 10 ; poly_id:24 24
046AA5 0B          0078*  	db 11 ; poly_id:25 25
046AA6 0C          0079*  	db 12 ; poly_id:26 26
046AA7 0D          0080*  	db 13 ; poly_id:27 27
046AA8 0E          0081*  	db 14 ; poly_id:28 28
046AA9 0F          0082*  	db 15 ; poly_id:29 29
046AAA 10          0083*  	db 16 ; poly_id:30 30
046AAB 10          0084*  	db 16 ; poly_id:31 31
046AAC 10          0085*  	db 16 ; poly_id:32 32
046AAD 10          0086*  	db 16 ; poly_id:33 33
046AAE 10          0087*  	db 16 ; poly_id:34 34
046AAF 11          0088*  	db 17 ; poly_id:35 35
046AB0 12          0089*  	db 18 ; poly_id:36 36
046AB1 13          0090*  	db 19 ; poly_id:37 37
046AB2 14          0091*  	db 20 ; poly_id:38 38
046AB3 15          0092*  	db 21 ; poly_id:39 39
046AB4 15          0093*  	db 21 ; poly_id:40 40
046AB5 15          0094*  	db 21 ; poly_id:41 41
046AB6 16          0095*  	db 22 ; poly_id:42 42
046AB7 17          0096*  	db 23 ; poly_id:43 43
046AB8 18          0097*  	db 24 ; poly_id:44 44
046AB9             0098*  
046AB9             0099*  cube_img_idx_lookup:
046AB9             0100*  ;	 img_idx,  bank_id,  obj_id,  tile_name
046AB9 00 01 00    0101*  	dl BUF_10_004 ; idx:0 render_obj_id:10 LIGHT GREY WALL
046ABC 19 01 00    0102*  	dl BUF_11_004 ; idx:1 render_obj_id:11 JAIL CELL
046ABF 32 01 00    0103*  	dl BUF_12_004 ; idx:2 render_obj_id:12 STONE ARCH BIRD
046AC2 4B 01 00    0104*  	dl BUF_13_004 ; idx:3 render_obj_id:13 DARK GREY WALL
046AC5 64 01 00    0105*  	dl BUF_14_004 ; idx:4 render_obj_id:14 WOOD WALL
046AC8 7D 01 00    0106*  	dl BUF_15_004 ; idx:5 render_obj_id:15 HANGING FLAG
046ACB 96 01 00    0107*  	dl BUF_16_004 ; idx:6 render_obj_id:16 WOOD EAGLE
046ACE AF 01 00    0108*  	dl BUF_17_004 ; idx:7 render_obj_id:17 BLUE WALL
046AD1 C8 01 00    0109*  	dl BUF_57_004 ; idx:8 render_obj_id:57 REGULAR DOOR
046AD4 E1 01 00    0110*  	dl BUF_58_004 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
046AD7 FA 01 00    0111*  	dl BUF_59_004 ; idx:10 render_obj_id:59 ELEVATOR DOOR
046ADA             0112*  
046ADA             0113*  ; map_delta_x,  map_delta_y
046ADA             0114*  polys_map_deltas_0: ; north orientation
046ADA FC FB       0115*  	db 0xFC,0xFB ; poly_id:0 00
046ADC FD FB       0116*  	db 0xFD,0xFB ; poly_id:1 01
046ADE FE FB       0117*  	db 0xFE,0xFB ; poly_id:2 02
046AE0 FF FB       0118*  	db 0xFF,0xFB ; poly_id:3 03
046AE2 00 FB       0119*  	db 0x00,0xFB ; poly_id:4 04
046AE4 01 FB       0120*  	db 0x01,0xFB ; poly_id:5 05
046AE6 02 FB       0121*  	db 0x02,0xFB ; poly_id:6 06
046AE8 03 FB       0122*  	db 0x03,0xFB ; poly_id:7 07
046AEA 04 FB       0123*  	db 0x04,0xFB ; poly_id:8 08
046AEC FC FC       0124*  	db 0xFC,0xFC ; poly_id:9 09
046AEE FD FC       0125*  	db 0xFD,0xFC ; poly_id:10 0A
046AF0 FE FC       0126*  	db 0xFE,0xFC ; poly_id:11 0B
046AF2 FF FC       0127*  	db 0xFF,0xFC ; poly_id:12 0C
046AF4 01 FC       0128*  	db 0x01,0xFC ; poly_id:13 0D
046AF6 02 FC       0129*  	db 0x02,0xFC ; poly_id:14 0E
046AF8 03 FC       0130*  	db 0x03,0xFC ; poly_id:15 0F
046AFA 04 FC       0131*  	db 0x04,0xFC ; poly_id:16 10
046AFC FD FC       0132*  	db 0xFD,0xFC ; poly_id:17 11
046AFE FE FC       0133*  	db 0xFE,0xFC ; poly_id:18 12
046B00 FF FC       0134*  	db 0xFF,0xFC ; poly_id:19 13
046B02 00 FC       0135*  	db 0x00,0xFC ; poly_id:20 14
046B04 01 FC       0136*  	db 0x01,0xFC ; poly_id:21 15
046B06 02 FC       0137*  	db 0x02,0xFC ; poly_id:22 16
046B08 03 FC       0138*  	db 0x03,0xFC ; poly_id:23 17
046B0A FD FD       0139*  	db 0xFD,0xFD ; poly_id:24 18
046B0C FE FD       0140*  	db 0xFE,0xFD ; poly_id:25 19
046B0E FF FD       0141*  	db 0xFF,0xFD ; poly_id:26 1A
046B10 01 FD       0142*  	db 0x01,0xFD ; poly_id:27 1B
046B12 02 FD       0143*  	db 0x02,0xFD ; poly_id:28 1C
046B14 03 FD       0144*  	db 0x03,0xFD ; poly_id:29 1D
046B16 FE FD       0145*  	db 0xFE,0xFD ; poly_id:30 1E
046B18 FF FD       0146*  	db 0xFF,0xFD ; poly_id:31 1F
046B1A 00 FD       0147*  	db 0x00,0xFD ; poly_id:32 20
046B1C 01 FD       0148*  	db 0x01,0xFD ; poly_id:33 21
046B1E 02 FD       0149*  	db 0x02,0xFD ; poly_id:34 22
046B20 FE FE       0150*  	db 0xFE,0xFE ; poly_id:35 23
046B22 FF FE       0151*  	db 0xFF,0xFE ; poly_id:36 24
046B24 01 FE       0152*  	db 0x01,0xFE ; poly_id:37 25
046B26 02 FE       0153*  	db 0x02,0xFE ; poly_id:38 26
046B28 FF FE       0154*  	db 0xFF,0xFE ; poly_id:39 27
046B2A 00 FE       0155*  	db 0x00,0xFE ; poly_id:40 28
046B2C 01 FE       0156*  	db 0x01,0xFE ; poly_id:41 29
046B2E FF FF       0157*  	db 0xFF,0xFF ; poly_id:42 2A
046B30 01 FF       0158*  	db 0x01,0xFF ; poly_id:43 2B
046B32 00 FF       0159*  	db 0x00,0xFF ; poly_id:44 2C
046B34             0160*  
046B34             0161*  polys_map_deltas_1: ; east orientation
046B34 05 FC       0162*  	db 0x05,0xFC ; poly_id:0 00
046B36 05 FD       0163*  	db 0x05,0xFD ; poly_id:1 01
046B38 05 FE       0164*  	db 0x05,0xFE ; poly_id:2 02
046B3A 05 FF       0165*  	db 0x05,0xFF ; poly_id:3 03
046B3C 05 00       0166*  	db 0x05,0x00 ; poly_id:4 04
046B3E 05 01       0167*  	db 0x05,0x01 ; poly_id:5 05
046B40 05 02       0168*  	db 0x05,0x02 ; poly_id:6 06
046B42 05 03       0169*  	db 0x05,0x03 ; poly_id:7 07
046B44 05 04       0170*  	db 0x05,0x04 ; poly_id:8 08
046B46 04 FC       0171*  	db 0x04,0xFC ; poly_id:9 09
046B48 04 FD       0172*  	db 0x04,0xFD ; poly_id:10 0A
046B4A 04 FE       0173*  	db 0x04,0xFE ; poly_id:11 0B
046B4C 04 FF       0174*  	db 0x04,0xFF ; poly_id:12 0C
046B4E 04 01       0175*  	db 0x04,0x01 ; poly_id:13 0D
046B50 04 02       0176*  	db 0x04,0x02 ; poly_id:14 0E
046B52 04 03       0177*  	db 0x04,0x03 ; poly_id:15 0F
046B54 04 04       0178*  	db 0x04,0x04 ; poly_id:16 10
046B56 04 FD       0179*  	db 0x04,0xFD ; poly_id:17 11
046B58 04 FE       0180*  	db 0x04,0xFE ; poly_id:18 12
046B5A 04 FF       0181*  	db 0x04,0xFF ; poly_id:19 13
046B5C 04 00       0182*  	db 0x04,0x00 ; poly_id:20 14
046B5E 04 01       0183*  	db 0x04,0x01 ; poly_id:21 15
046B60 04 02       0184*  	db 0x04,0x02 ; poly_id:22 16
046B62 04 03       0185*  	db 0x04,0x03 ; poly_id:23 17
046B64 03 FD       0186*  	db 0x03,0xFD ; poly_id:24 18
046B66 03 FE       0187*  	db 0x03,0xFE ; poly_id:25 19
046B68 03 FF       0188*  	db 0x03,0xFF ; poly_id:26 1A
046B6A 03 01       0189*  	db 0x03,0x01 ; poly_id:27 1B
046B6C 03 02       0190*  	db 0x03,0x02 ; poly_id:28 1C
046B6E 03 03       0191*  	db 0x03,0x03 ; poly_id:29 1D
046B70 03 FE       0192*  	db 0x03,0xFE ; poly_id:30 1E
046B72 03 FF       0193*  	db 0x03,0xFF ; poly_id:31 1F
046B74 03 00       0194*  	db 0x03,0x00 ; poly_id:32 20
046B76 03 01       0195*  	db 0x03,0x01 ; poly_id:33 21
046B78 03 02       0196*  	db 0x03,0x02 ; poly_id:34 22
046B7A 02 FE       0197*  	db 0x02,0xFE ; poly_id:35 23
046B7C 02 FF       0198*  	db 0x02,0xFF ; poly_id:36 24
046B7E 02 01       0199*  	db 0x02,0x01 ; poly_id:37 25
046B80 02 02       0200*  	db 0x02,0x02 ; poly_id:38 26
046B82 02 FF       0201*  	db 0x02,0xFF ; poly_id:39 27
046B84 02 00       0202*  	db 0x02,0x00 ; poly_id:40 28
046B86 02 01       0203*  	db 0x02,0x01 ; poly_id:41 29
046B88 01 FF       0204*  	db 0x01,0xFF ; poly_id:42 2A
046B8A 01 01       0205*  	db 0x01,0x01 ; poly_id:43 2B
046B8C 01 00       0206*  	db 0x01,0x00 ; poly_id:44 2C
046B8E             0207*  
046B8E             0208*  polys_map_deltas_2: ; south orientation
046B8E 04 05       0209*  	db 0x04,0x05 ; poly_id:0 00
046B90 03 05       0210*  	db 0x03,0x05 ; poly_id:1 01
046B92 02 05       0211*  	db 0x02,0x05 ; poly_id:2 02
046B94 01 05       0212*  	db 0x01,0x05 ; poly_id:3 03
046B96 00 05       0213*  	db 0x00,0x05 ; poly_id:4 04
046B98 FF 05       0214*  	db 0xFF,0x05 ; poly_id:5 05
046B9A FE 05       0215*  	db 0xFE,0x05 ; poly_id:6 06
046B9C FD 05       0216*  	db 0xFD,0x05 ; poly_id:7 07
046B9E FC 05       0217*  	db 0xFC,0x05 ; poly_id:8 08
046BA0 04 04       0218*  	db 0x04,0x04 ; poly_id:9 09
046BA2 03 04       0219*  	db 0x03,0x04 ; poly_id:10 0A
046BA4 02 04       0220*  	db 0x02,0x04 ; poly_id:11 0B
046BA6 01 04       0221*  	db 0x01,0x04 ; poly_id:12 0C
046BA8 FF 04       0222*  	db 0xFF,0x04 ; poly_id:13 0D
046BAA FE 04       0223*  	db 0xFE,0x04 ; poly_id:14 0E
046BAC FD 04       0224*  	db 0xFD,0x04 ; poly_id:15 0F
046BAE FC 04       0225*  	db 0xFC,0x04 ; poly_id:16 10
046BB0 03 04       0226*  	db 0x03,0x04 ; poly_id:17 11
046BB2 02 04       0227*  	db 0x02,0x04 ; poly_id:18 12
046BB4 01 04       0228*  	db 0x01,0x04 ; poly_id:19 13
046BB6 00 04       0229*  	db 0x00,0x04 ; poly_id:20 14
046BB8 FF 04       0230*  	db 0xFF,0x04 ; poly_id:21 15
046BBA FE 04       0231*  	db 0xFE,0x04 ; poly_id:22 16
046BBC FD 04       0232*  	db 0xFD,0x04 ; poly_id:23 17
046BBE 03 03       0233*  	db 0x03,0x03 ; poly_id:24 18
046BC0 02 03       0234*  	db 0x02,0x03 ; poly_id:25 19
046BC2 01 03       0235*  	db 0x01,0x03 ; poly_id:26 1A
046BC4 FF 03       0236*  	db 0xFF,0x03 ; poly_id:27 1B
046BC6 FE 03       0237*  	db 0xFE,0x03 ; poly_id:28 1C
046BC8 FD 03       0238*  	db 0xFD,0x03 ; poly_id:29 1D
046BCA 02 03       0239*  	db 0x02,0x03 ; poly_id:30 1E
046BCC 01 03       0240*  	db 0x01,0x03 ; poly_id:31 1F
046BCE 00 03       0241*  	db 0x00,0x03 ; poly_id:32 20
046BD0 FF 03       0242*  	db 0xFF,0x03 ; poly_id:33 21
046BD2 FE 03       0243*  	db 0xFE,0x03 ; poly_id:34 22
046BD4 02 02       0244*  	db 0x02,0x02 ; poly_id:35 23
046BD6 01 02       0245*  	db 0x01,0x02 ; poly_id:36 24
046BD8 FF 02       0246*  	db 0xFF,0x02 ; poly_id:37 25
046BDA FE 02       0247*  	db 0xFE,0x02 ; poly_id:38 26
046BDC 01 02       0248*  	db 0x01,0x02 ; poly_id:39 27
046BDE 00 02       0249*  	db 0x00,0x02 ; poly_id:40 28
046BE0 FF 02       0250*  	db 0xFF,0x02 ; poly_id:41 29
046BE2 01 01       0251*  	db 0x01,0x01 ; poly_id:42 2A
046BE4 FF 01       0252*  	db 0xFF,0x01 ; poly_id:43 2B
046BE6 00 01       0253*  	db 0x00,0x01 ; poly_id:44 2C
046BE8             0254*  
046BE8             0255*  polys_map_deltas_3: ; west orientation
046BE8 FB 04       0256*  	db 0xFB,0x04 ; poly_id:0 00
046BEA FB 03       0257*  	db 0xFB,0x03 ; poly_id:1 01
046BEC FB 02       0258*  	db 0xFB,0x02 ; poly_id:2 02
046BEE FB 01       0259*  	db 0xFB,0x01 ; poly_id:3 03
046BF0 FB 00       0260*  	db 0xFB,0x00 ; poly_id:4 04
046BF2 FB FF       0261*  	db 0xFB,0xFF ; poly_id:5 05
046BF4 FB FE       0262*  	db 0xFB,0xFE ; poly_id:6 06
046BF6 FB FD       0263*  	db 0xFB,0xFD ; poly_id:7 07
046BF8 FB FC       0264*  	db 0xFB,0xFC ; poly_id:8 08
046BFA FC 04       0265*  	db 0xFC,0x04 ; poly_id:9 09
046BFC FC 03       0266*  	db 0xFC,0x03 ; poly_id:10 0A
046BFE FC 02       0267*  	db 0xFC,0x02 ; poly_id:11 0B
046C00 FC 01       0268*  	db 0xFC,0x01 ; poly_id:12 0C
046C02 FC FF       0269*  	db 0xFC,0xFF ; poly_id:13 0D
046C04 FC FE       0270*  	db 0xFC,0xFE ; poly_id:14 0E
046C06 FC FD       0271*  	db 0xFC,0xFD ; poly_id:15 0F
046C08 FC FC       0272*  	db 0xFC,0xFC ; poly_id:16 10
046C0A FC 03       0273*  	db 0xFC,0x03 ; poly_id:17 11
046C0C FC 02       0274*  	db 0xFC,0x02 ; poly_id:18 12
046C0E FC 01       0275*  	db 0xFC,0x01 ; poly_id:19 13
046C10 FC 00       0276*  	db 0xFC,0x00 ; poly_id:20 14
046C12 FC FF       0277*  	db 0xFC,0xFF ; poly_id:21 15
046C14 FC FE       0278*  	db 0xFC,0xFE ; poly_id:22 16
046C16 FC FD       0279*  	db 0xFC,0xFD ; poly_id:23 17
046C18 FD 03       0280*  	db 0xFD,0x03 ; poly_id:24 18
046C1A FD 02       0281*  	db 0xFD,0x02 ; poly_id:25 19
046C1C FD 01       0282*  	db 0xFD,0x01 ; poly_id:26 1A
046C1E FD FF       0283*  	db 0xFD,0xFF ; poly_id:27 1B
046C20 FD FE       0284*  	db 0xFD,0xFE ; poly_id:28 1C
046C22 FD FD       0285*  	db 0xFD,0xFD ; poly_id:29 1D
046C24 FD 02       0286*  	db 0xFD,0x02 ; poly_id:30 1E
046C26 FD 01       0287*  	db 0xFD,0x01 ; poly_id:31 1F
046C28 FD 00       0288*  	db 0xFD,0x00 ; poly_id:32 20
046C2A FD FF       0289*  	db 0xFD,0xFF ; poly_id:33 21
046C2C FD FE       0290*  	db 0xFD,0xFE ; poly_id:34 22
046C2E FE 02       0291*  	db 0xFE,0x02 ; poly_id:35 23
046C30 FE 01       0292*  	db 0xFE,0x01 ; poly_id:36 24
046C32 FE FF       0293*  	db 0xFE,0xFF ; poly_id:37 25
046C34 FE FE       0294*  	db 0xFE,0xFE ; poly_id:38 26
046C36 FE 01       0295*  	db 0xFE,0x01 ; poly_id:39 27
046C38 FE 00       0296*  	db 0xFE,0x00 ; poly_id:40 28
046C3A FE FF       0297*  	db 0xFE,0xFF ; poly_id:41 29
046C3C FF 01       0298*  	db 0xFF,0x01 ; poly_id:42 2A
046C3E FF FF       0299*  	db 0xFF,0xFF ; poly_id:43 2B
046C40 FF 00       0300*  	db 0xFF,0x00 ; poly_id:44 2C
046C42             0301*  
046C42             0302*  num_sprite_polys: equ 25
046C42             0303*  
046C42             0304*  sprite_polys_lookup:
046C42             0305*  ;south_id 	; poly_id
046C42 00          0306*  	db 0	; 0
046C43 01          0307*  	db 1	; 1
046C44 02          0308*  	db 2	; 2
046C45 03          0309*  	db 3	; 3
046C46 04          0310*  	db 4	; 4
046C47 05          0311*  	db 5	; 5
046C48 06          0312*  	db 6	; 6
046C49 07          0313*  	db 7	; 7
046C4A 08          0314*  	db 8	; 8
046C4B FF          0315*  	db 255	; 9
046C4C FF          0316*  	db 255	; 10
046C4D FF          0317*  	db 255	; 11
046C4E FF          0318*  	db 255	; 12
046C4F FF          0319*  	db 255	; 13
046C50 FF          0320*  	db 255	; 14
046C51 FF          0321*  	db 255	; 15
046C52 FF          0322*  	db 255	; 16
046C53 09          0323*  	db 9	; 17
046C54 0A          0324*  	db 10	; 18
046C55 0B          0325*  	db 11	; 19
046C56 0C          0326*  	db 12	; 20
046C57 0D          0327*  	db 13	; 21
046C58 0E          0328*  	db 14	; 22
046C59 0F          0329*  	db 15	; 23
046C5A FF          0330*  	db 255	; 24
046C5B FF          0331*  	db 255	; 25
046C5C FF          0332*  	db 255	; 26
046C5D FF          0333*  	db 255	; 27
046C5E FF          0334*  	db 255	; 28
046C5F FF          0335*  	db 255	; 29
046C60 10          0336*  	db 16	; 30
046C61 11          0337*  	db 17	; 31
046C62 12          0338*  	db 18	; 32
046C63 13          0339*  	db 19	; 33
046C64 14          0340*  	db 20	; 34
046C65 FF          0341*  	db 255	; 35
046C66 FF          0342*  	db 255	; 36
046C67 FF          0343*  	db 255	; 37
046C68 FF          0344*  	db 255	; 38
046C69 15          0345*  	db 21	; 39
046C6A 16          0346*  	db 22	; 40
046C6B 17          0347*  	db 23	; 41
046C6C FF          0348*  	db 255	; 42
046C6D FF          0349*  	db 255	; 43
046C6E 18          0350*  	db 24	; 44
046C6F             0351*  
046C6F             0352*  sprite_imgs_lookup:
046C6F             0353*  ;	 sprite_obj; render_obj_id
046C6F A5 6C 04    0354*  	dl sprite_obj_000 ; render_obj_id:20
046C72 86 6D 04    0355*  	dl sprite_obj_001 ; render_obj_id:21
046C75 67 6E 04    0356*  	dl sprite_obj_002 ; render_obj_id:22
046C78 48 6F 04    0357*  	dl sprite_obj_003 ; render_obj_id:23
046C7B 29 70 04    0358*  	dl sprite_obj_004 ; render_obj_id:24
046C7E 0A 71 04    0359*  	dl sprite_obj_005 ; render_obj_id:40
046C81 EB 71 04    0360*  	dl sprite_obj_006 ; render_obj_id:41
046C84 CC 72 04    0361*  	dl sprite_obj_007 ; render_obj_id:42
046C87 AD 73 04    0362*  	dl sprite_obj_008 ; render_obj_id:43
046C8A 8E 74 04    0363*  	dl sprite_obj_009 ; render_obj_id:44
046C8D 6F 75 04    0364*  	dl sprite_obj_010 ; render_obj_id:45
046C90 50 76 04    0365*  	dl sprite_obj_011 ; render_obj_id:46
046C93 31 77 04    0366*  	dl sprite_obj_012 ; render_obj_id:47
046C96 12 78 04    0367*  	dl sprite_obj_013 ; render_obj_id:48
046C99 F3 78 04    0368*  	dl sprite_obj_014 ; render_obj_id:49
046C9C D4 79 04    0369*  	dl sprite_obj_015 ; render_obj_id:50
046C9F B5 7A 04    0370*  	dl sprite_obj_016 ; render_obj_id:51
046CA2 96 7B 04    0371*  	dl sprite_obj_017 ; render_obj_id:52
046CA5             0372*  ;	 plot_x,  plot_y, buffer_label
046CA5             0373*  
046CA5             0374*  ; render_obj_id:20
046CA5             0375*  sprite_obj_000:
046CA5 09 00 00 4E 0376*  	dl 0x000009,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CAE 2C 00 00 4E 0377*  	dl 0x00002C,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CB7 50 00 00 4E 0378*  	dl 0x000050,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CC0 73 00 00 4E 0379*  	dl 0x000073,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CC9 97 00 00 4E 0380*  	dl 0x000097,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CD2 BA 00 00 4E 0381*  	dl 0x0000BA,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CDB DE 00 00 4E 0382*  	dl 0x0000DE,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CE4 01 01 00 4E 0383*  	dl 0x000101,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CED 25 01 00 4E 0384*  	dl 0x000125,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CF6 0B 00 00 4E 0385*  	dl 0x00000B,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046CFF 39 00 00 4E 0386*  	dl 0x000039,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D08 66 00 00 4E 0387*  	dl 0x000066,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D11 94 00 00 4E 0388*  	dl 0x000094,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D1A C1 00 00 4E 0389*  	dl 0x0000C1,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D23 EF 00 00 4E 0390*  	dl 0x0000EF,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D2C 1C 01 00 4E 0391*  	dl 0x00011C,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D35 11 00 00 4D 0392*  	dl 0x000011,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D3E 50 00 00 4D 0393*  	dl 0x000050,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D47 91 00 00 4D 0394*  	dl 0x000091,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D50 D1 00 00 4D 0395*  	dl 0x0000D1,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D59 11 01 00 4D 0396*  	dl 0x000111,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D62 1B 00 00 4C 0397*  	dl 0x00001B,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D6B 85 00 00 4C 0398*  	dl 0x000085,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D74 F0 00 00 4C 0399*  	dl 0x0000F0,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D7D 6B 00 00 44 0400*  	dl 0x00006B,0x000044,BUF_20_044
       00 00 17 02 
       00          
046D86             0401*  
046D86             0402*  ; render_obj_id:21
046D86             0403*  sprite_obj_001:
046D86 0D 00 00 55 0404*  	dl 0x00000D,0x000055,BUF_21_004
       00 00 18 02 
       00          
046D8F 30 00 00 55 0405*  	dl 0x000030,0x000055,BUF_21_004
       00 00 18 02 
       00          
046D98 54 00 00 55 0406*  	dl 0x000054,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DA1 77 00 00 55 0407*  	dl 0x000077,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DAA 9B 00 00 55 0408*  	dl 0x00009B,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DB3 BE 00 00 55 0409*  	dl 0x0000BE,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DBC E2 00 00 55 0410*  	dl 0x0000E2,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DC5 05 01 00 55 0411*  	dl 0x000105,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DCE 29 01 00 55 0412*  	dl 0x000129,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DD7 10 00 00 57 0413*  	dl 0x000010,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DE0 3E 00 00 57 0414*  	dl 0x00003E,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DE9 6B 00 00 57 0415*  	dl 0x00006B,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DF2 99 00 00 57 0416*  	dl 0x000099,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DFB C6 00 00 57 0417*  	dl 0x0000C6,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E04 F4 00 00 57 0418*  	dl 0x0000F4,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E0D 21 01 00 57 0419*  	dl 0x000121,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E16 16 00 00 5A 0420*  	dl 0x000016,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E1F 55 00 00 5A 0421*  	dl 0x000055,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E28 96 00 00 5A 0422*  	dl 0x000096,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E31 D6 00 00 5A 0423*  	dl 0x0000D6,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E3A 16 01 00 5A 0424*  	dl 0x000116,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E43 26 00 00 60 0425*  	dl 0x000026,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E4C 90 00 00 60 0426*  	dl 0x000090,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E55 FB 00 00 60 0427*  	dl 0x0000FB,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E5E 6E 00 00 82 0428*  	dl 0x00006E,0x000082,BUF_21_044
       00 00 1C 02 
       00          
046E67             0429*  
046E67             0430*  ; render_obj_id:22
046E67             0431*  sprite_obj_002:
046E67 09 00 00 55 0432*  	dl 0x000009,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E70 2C 00 00 55 0433*  	dl 0x00002C,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E79 50 00 00 55 0434*  	dl 0x000050,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E82 73 00 00 55 0435*  	dl 0x000073,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E8B 97 00 00 55 0436*  	dl 0x000097,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E94 BA 00 00 55 0437*  	dl 0x0000BA,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E9D DE 00 00 55 0438*  	dl 0x0000DE,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EA6 01 01 00 55 0439*  	dl 0x000101,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EAF 25 01 00 55 0440*  	dl 0x000125,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EB8 0B 00 00 57 0441*  	dl 0x00000B,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EC1 39 00 00 57 0442*  	dl 0x000039,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046ECA 66 00 00 57 0443*  	dl 0x000066,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046ED3 94 00 00 57 0444*  	dl 0x000094,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EDC C1 00 00 57 0445*  	dl 0x0000C1,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EE5 EF 00 00 57 0446*  	dl 0x0000EF,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EEE 1C 01 00 57 0447*  	dl 0x00011C,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EF7 10 00 00 5A 0448*  	dl 0x000010,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F00 4F 00 00 5A 0449*  	dl 0x00004F,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F09 90 00 00 5A 0450*  	dl 0x000090,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F12 D0 00 00 5A 0451*  	dl 0x0000D0,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F1B 10 01 00 5A 0452*  	dl 0x000110,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F24 1B 00 00 60 0453*  	dl 0x00001B,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F2D 85 00 00 60 0454*  	dl 0x000085,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F36 F0 00 00 60 0455*  	dl 0x0000F0,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F3F 50 00 00 82 0456*  	dl 0x000050,0x000082,BUF_22_044
       00 00 21 02 
       00          
046F48             0457*  
046F48             0458*  ; render_obj_id:23
046F48             0459*  sprite_obj_003:
046F48 0C 00 00 3E 0460*  	dl 0x00000C,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F51 2F 00 00 3E 0461*  	dl 0x00002F,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F5A 53 00 00 3E 0462*  	dl 0x000053,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F63 76 00 00 3E 0463*  	dl 0x000076,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F6C 9A 00 00 3E 0464*  	dl 0x00009A,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F75 BD 00 00 3E 0465*  	dl 0x0000BD,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F7E E1 00 00 3E 0466*  	dl 0x0000E1,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F87 04 01 00 3E 0467*  	dl 0x000104,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F90 28 01 00 3E 0468*  	dl 0x000128,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F99 0F 00 00 39 0469*  	dl 0x00000F,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FA2 3D 00 00 39 0470*  	dl 0x00003D,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FAB 6A 00 00 39 0471*  	dl 0x00006A,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FB4 98 00 00 39 0472*  	dl 0x000098,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FBD C5 00 00 39 0473*  	dl 0x0000C5,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FC6 F3 00 00 39 0474*  	dl 0x0000F3,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FCF 20 01 00 39 0475*  	dl 0x000120,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FD8 16 00 00 30 0476*  	dl 0x000016,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FE1 55 00 00 30 0477*  	dl 0x000055,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FEA 96 00 00 30 0478*  	dl 0x000096,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FF3 D6 00 00 30 0479*  	dl 0x0000D6,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FFC 16 01 00 30 0480*  	dl 0x000116,0x000030,BUF_23_032
       00 00 24 02 
       00          
047005 24 00 00 1A 0481*  	dl 0x000024,0x00001A,BUF_23_040
       00 00 25 02 
       00          
04700E 8E 00 00 1A 0482*  	dl 0x00008E,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047017 F9 00 00 1A 0483*  	dl 0x0000F9,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047020 09 01 00 83 0484*  	dl 0x000109,0x000083,BUF_23_044
       00 00 26 02 
       00          
047029             0485*  
047029             0486*  ; render_obj_id:24
047029             0487*  sprite_obj_004:
047029 0D 00 00 55 0488*  	dl 0x00000D,0x000055,BUF_24_004
       00 00 27 02 
       00          
047032 30 00 00 55 0489*  	dl 0x000030,0x000055,BUF_24_004
       00 00 27 02 
       00          
04703B 54 00 00 55 0490*  	dl 0x000054,0x000055,BUF_24_004
       00 00 27 02 
       00          
047044 77 00 00 55 0491*  	dl 0x000077,0x000055,BUF_24_004
       00 00 27 02 
       00          
04704D 9B 00 00 55 0492*  	dl 0x00009B,0x000055,BUF_24_004
       00 00 27 02 
       00          
047056 BE 00 00 55 0493*  	dl 0x0000BE,0x000055,BUF_24_004
       00 00 27 02 
       00          
04705F E2 00 00 55 0494*  	dl 0x0000E2,0x000055,BUF_24_004
       00 00 27 02 
       00          
047068 05 01 00 55 0495*  	dl 0x000105,0x000055,BUF_24_004
       00 00 27 02 
       00          
047071 29 01 00 55 0496*  	dl 0x000129,0x000055,BUF_24_004
       00 00 27 02 
       00          
04707A 10 00 00 57 0497*  	dl 0x000010,0x000057,BUF_24_020
       00 00 28 02 
       00          
047083 3E 00 00 57 0498*  	dl 0x00003E,0x000057,BUF_24_020
       00 00 28 02 
       00          
04708C 6B 00 00 57 0499*  	dl 0x00006B,0x000057,BUF_24_020
       00 00 28 02 
       00          
047095 99 00 00 57 0500*  	dl 0x000099,0x000057,BUF_24_020
       00 00 28 02 
       00          
04709E C6 00 00 57 0501*  	dl 0x0000C6,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470A7 F4 00 00 57 0502*  	dl 0x0000F4,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470B0 21 01 00 57 0503*  	dl 0x000121,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470B9 16 00 00 5A 0504*  	dl 0x000016,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470C2 55 00 00 5A 0505*  	dl 0x000055,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470CB 96 00 00 5A 0506*  	dl 0x000096,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470D4 D6 00 00 5A 0507*  	dl 0x0000D6,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470DD 16 01 00 5A 0508*  	dl 0x000116,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470E6 26 00 00 60 0509*  	dl 0x000026,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0470EF 90 00 00 60 0510*  	dl 0x000090,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0470F8 FB 00 00 60 0511*  	dl 0x0000FB,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047101 6E 00 00 82 0512*  	dl 0x00006E,0x000082,BUF_24_044
       00 00 2B 02 
       00          
04710A             0513*  
04710A             0514*  ; render_obj_id:40
04710A             0515*  sprite_obj_005:
04710A 0A 00 00 5A 0516*  	dl 0x00000A,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047113 2D 00 00 5A 0517*  	dl 0x00002D,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04711C 51 00 00 5A 0518*  	dl 0x000051,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047125 74 00 00 5A 0519*  	dl 0x000074,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04712E 98 00 00 5A 0520*  	dl 0x000098,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047137 BB 00 00 5A 0521*  	dl 0x0000BB,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047140 DF 00 00 5A 0522*  	dl 0x0000DF,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047149 02 01 00 5A 0523*  	dl 0x000102,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047152 26 01 00 5A 0524*  	dl 0x000126,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04715B 0D 00 00 5C 0525*  	dl 0x00000D,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047164 3B 00 00 5C 0526*  	dl 0x00003B,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04716D 68 00 00 5C 0527*  	dl 0x000068,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047176 96 00 00 5C 0528*  	dl 0x000096,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04717F C3 00 00 5C 0529*  	dl 0x0000C3,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047188 F1 00 00 5C 0530*  	dl 0x0000F1,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047191 1E 01 00 5C 0531*  	dl 0x00011E,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04719A 13 00 00 62 0532*  	dl 0x000013,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471A3 52 00 00 62 0533*  	dl 0x000052,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471AC 93 00 00 62 0534*  	dl 0x000093,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471B5 D3 00 00 62 0535*  	dl 0x0000D3,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471BE 13 01 00 62 0536*  	dl 0x000113,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471C7 20 00 00 6D 0537*  	dl 0x000020,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471D0 8A 00 00 6D 0538*  	dl 0x00008A,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471D9 F5 00 00 6D 0539*  	dl 0x0000F5,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471E2 E0 00 00 A0 0540*  	dl 0x0000E0,0x0000A0,BUF_40_044
       00 00 30 02 
       00          
0471EB             0541*  
0471EB             0542*  ; render_obj_id:41
0471EB             0543*  sprite_obj_006:
0471EB 0C 00 00 55 0544*  	dl 0x00000C,0x000055,BUF_41_004
       00 00 31 02 
       00          
0471F4 2F 00 00 55 0545*  	dl 0x00002F,0x000055,BUF_41_004
       00 00 31 02 
       00          
0471FD 53 00 00 55 0546*  	dl 0x000053,0x000055,BUF_41_004
       00 00 31 02 
       00          
047206 76 00 00 55 0547*  	dl 0x000076,0x000055,BUF_41_004
       00 00 31 02 
       00          
04720F 9A 00 00 55 0548*  	dl 0x00009A,0x000055,BUF_41_004
       00 00 31 02 
       00          
047218 BD 00 00 55 0549*  	dl 0x0000BD,0x000055,BUF_41_004
       00 00 31 02 
       00          
047221 E1 00 00 55 0550*  	dl 0x0000E1,0x000055,BUF_41_004
       00 00 31 02 
       00          
04722A 04 01 00 55 0551*  	dl 0x000104,0x000055,BUF_41_004
       00 00 31 02 
       00          
047233 28 01 00 55 0552*  	dl 0x000128,0x000055,BUF_41_004
       00 00 31 02 
       00          
04723C 0E 00 00 57 0553*  	dl 0x00000E,0x000057,BUF_41_020
       00 00 32 02 
       00          
047245 3C 00 00 57 0554*  	dl 0x00003C,0x000057,BUF_41_020
       00 00 32 02 
       00          
04724E 69 00 00 57 0555*  	dl 0x000069,0x000057,BUF_41_020
       00 00 32 02 
       00          
047257 97 00 00 57 0556*  	dl 0x000097,0x000057,BUF_41_020
       00 00 32 02 
       00          
047260 C4 00 00 57 0557*  	dl 0x0000C4,0x000057,BUF_41_020
       00 00 32 02 
       00          
047269 F2 00 00 57 0558*  	dl 0x0000F2,0x000057,BUF_41_020
       00 00 32 02 
       00          
047272 1F 01 00 57 0559*  	dl 0x00011F,0x000057,BUF_41_020
       00 00 32 02 
       00          
04727B 15 00 00 5B 0560*  	dl 0x000015,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047284 54 00 00 5B 0561*  	dl 0x000054,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04728D 95 00 00 5B 0562*  	dl 0x000095,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047296 D5 00 00 5B 0563*  	dl 0x0000D5,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04729F 15 01 00 5B 0564*  	dl 0x000115,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0472A8 23 00 00 62 0565*  	dl 0x000023,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472B1 8D 00 00 62 0566*  	dl 0x00008D,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472BA F8 00 00 62 0567*  	dl 0x0000F8,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472C3 84 00 00 87 0568*  	dl 0x000084,0x000087,BUF_41_044
       00 00 35 02 
       00          
0472CC             0569*  
0472CC             0570*  ; render_obj_id:42
0472CC             0571*  sprite_obj_007:
0472CC 0D 00 00 57 0572*  	dl 0x00000D,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472D5 30 00 00 57 0573*  	dl 0x000030,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472DE 54 00 00 57 0574*  	dl 0x000054,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472E7 77 00 00 57 0575*  	dl 0x000077,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472F0 9B 00 00 57 0576*  	dl 0x00009B,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472F9 BE 00 00 57 0577*  	dl 0x0000BE,0x000057,BUF_42_004
       00 00 36 02 
       00          
047302 E2 00 00 57 0578*  	dl 0x0000E2,0x000057,BUF_42_004
       00 00 36 02 
       00          
04730B 05 01 00 57 0579*  	dl 0x000105,0x000057,BUF_42_004
       00 00 36 02 
       00          
047314 29 01 00 57 0580*  	dl 0x000129,0x000057,BUF_42_004
       00 00 36 02 
       00          
04731D 10 00 00 5A 0581*  	dl 0x000010,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047326 3E 00 00 5A 0582*  	dl 0x00003E,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04732F 6B 00 00 5A 0583*  	dl 0x00006B,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047338 99 00 00 5A 0584*  	dl 0x000099,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047341 C6 00 00 5A 0585*  	dl 0x0000C6,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04734A F4 00 00 5A 0586*  	dl 0x0000F4,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047353 21 01 00 5A 0587*  	dl 0x000121,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04735C 18 00 00 5F 0588*  	dl 0x000018,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047365 57 00 00 5F 0589*  	dl 0x000057,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04736E 98 00 00 5F 0590*  	dl 0x000098,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047377 D8 00 00 5F 0591*  	dl 0x0000D8,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047380 18 01 00 5F 0592*  	dl 0x000118,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047389 28 00 00 69 0593*  	dl 0x000028,0x000069,BUF_42_040
       00 00 39 02 
       00          
047392 92 00 00 69 0594*  	dl 0x000092,0x000069,BUF_42_040
       00 00 39 02 
       00          
04739B FD 00 00 69 0595*  	dl 0x0000FD,0x000069,BUF_42_040
       00 00 39 02 
       00          
0473A4 7D 00 00 9C 0596*  	dl 0x00007D,0x00009C,BUF_42_044
       00 00 3A 02 
       00          
0473AD             0597*  
0473AD             0598*  ; render_obj_id:43
0473AD             0599*  sprite_obj_008:
0473AD 0C 00 00 5C 0600*  	dl 0x00000C,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473B6 2F 00 00 5C 0601*  	dl 0x00002F,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473BF 53 00 00 5C 0602*  	dl 0x000053,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473C8 76 00 00 5C 0603*  	dl 0x000076,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473D1 9A 00 00 5C 0604*  	dl 0x00009A,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473DA BD 00 00 5C 0605*  	dl 0x0000BD,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473E3 E1 00 00 5C 0606*  	dl 0x0000E1,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473EC 04 01 00 5C 0607*  	dl 0x000104,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473F5 28 01 00 5C 0608*  	dl 0x000128,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473FE 0F 00 00 61 0609*  	dl 0x00000F,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047407 3D 00 00 61 0610*  	dl 0x00003D,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047410 6A 00 00 61 0611*  	dl 0x00006A,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047419 98 00 00 61 0612*  	dl 0x000098,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047422 C5 00 00 61 0613*  	dl 0x0000C5,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04742B F3 00 00 61 0614*  	dl 0x0000F3,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047434 20 01 00 61 0615*  	dl 0x000120,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04743D 15 00 00 68 0616*  	dl 0x000015,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047446 54 00 00 68 0617*  	dl 0x000054,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04744F 95 00 00 68 0618*  	dl 0x000095,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047458 D5 00 00 68 0619*  	dl 0x0000D5,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047461 15 01 00 68 0620*  	dl 0x000115,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04746A 24 00 00 77 0621*  	dl 0x000024,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047473 8E 00 00 77 0622*  	dl 0x00008E,0x000077,BUF_43_040
       00 00 3E 02 
       00          
04747C F9 00 00 77 0623*  	dl 0x0000F9,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047485 D4 00 00 9F 0624*  	dl 0x0000D4,0x00009F,BUF_43_044
       00 00 3F 02 
       00          
04748E             0625*  
04748E             0626*  ; render_obj_id:44
04748E             0627*  sprite_obj_009:
04748E 0F 00 00 5C 0628*  	dl 0x00000F,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047497 32 00 00 5C 0629*  	dl 0x000032,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474A0 56 00 00 5C 0630*  	dl 0x000056,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474A9 79 00 00 5C 0631*  	dl 0x000079,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474B2 9D 00 00 5C 0632*  	dl 0x00009D,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474BB C0 00 00 5C 0633*  	dl 0x0000C0,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474C4 E4 00 00 5C 0634*  	dl 0x0000E4,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474CD 07 01 00 5C 0635*  	dl 0x000107,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474D6 2B 01 00 5C 0636*  	dl 0x00012B,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474DF 14 00 00 5F 0637*  	dl 0x000014,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474E8 42 00 00 5F 0638*  	dl 0x000042,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474F1 6F 00 00 5F 0639*  	dl 0x00006F,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474FA 9D 00 00 5F 0640*  	dl 0x00009D,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047503 CA 00 00 5F 0641*  	dl 0x0000CA,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04750C F8 00 00 5F 0642*  	dl 0x0000F8,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047515 25 01 00 5F 0643*  	dl 0x000125,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04751E 1B 00 00 66 0644*  	dl 0x00001B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047527 5A 00 00 66 0645*  	dl 0x00005A,0x000066,BUF_44_032
       00 00 42 02 
       00          
047530 9B 00 00 66 0646*  	dl 0x00009B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047539 DB 00 00 66 0647*  	dl 0x0000DB,0x000066,BUF_44_032
       00 00 42 02 
       00          
047542 1B 01 00 66 0648*  	dl 0x00011B,0x000066,BUF_44_032
       00 00 42 02 
       00          
04754B 2E 00 00 75 0649*  	dl 0x00002E,0x000075,BUF_44_040
       00 00 43 02 
       00          
047554 98 00 00 75 0650*  	dl 0x000098,0x000075,BUF_44_040
       00 00 43 02 
       00          
04755D 03 01 00 75 0651*  	dl 0x000103,0x000075,BUF_44_040
       00 00 43 02 
       00          
047566 C8 00 00 A1 0652*  	dl 0x0000C8,0x0000A1,BUF_44_044
       00 00 44 02 
       00          
04756F             0653*  
04756F             0654*  ; render_obj_id:45
04756F             0655*  sprite_obj_010:
04756F 09 00 00 56 0656*  	dl 0x000009,0x000056,BUF_45_004
       00 00 45 02 
       00          
047578 2C 00 00 56 0657*  	dl 0x00002C,0x000056,BUF_45_004
       00 00 45 02 
       00          
047581 50 00 00 56 0658*  	dl 0x000050,0x000056,BUF_45_004
       00 00 45 02 
       00          
04758A 73 00 00 56 0659*  	dl 0x000073,0x000056,BUF_45_004
       00 00 45 02 
       00          
047593 97 00 00 56 0660*  	dl 0x000097,0x000056,BUF_45_004
       00 00 45 02 
       00          
04759C BA 00 00 56 0661*  	dl 0x0000BA,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475A5 DE 00 00 56 0662*  	dl 0x0000DE,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475AE 01 01 00 56 0663*  	dl 0x000101,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475B7 25 01 00 56 0664*  	dl 0x000125,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475C0 0C 00 00 58 0665*  	dl 0x00000C,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475C9 3A 00 00 58 0666*  	dl 0x00003A,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475D2 67 00 00 58 0667*  	dl 0x000067,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475DB 95 00 00 58 0668*  	dl 0x000095,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475E4 C2 00 00 58 0669*  	dl 0x0000C2,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475ED F0 00 00 58 0670*  	dl 0x0000F0,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475F6 1D 01 00 58 0671*  	dl 0x00011D,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475FF 11 00 00 5D 0672*  	dl 0x000011,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047608 50 00 00 5D 0673*  	dl 0x000050,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047611 91 00 00 5D 0674*  	dl 0x000091,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04761A D1 00 00 5D 0675*  	dl 0x0000D1,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047623 11 01 00 5D 0676*  	dl 0x000111,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04762C 1D 00 00 63 0677*  	dl 0x00001D,0x000063,BUF_45_040
       00 00 48 02 
       00          
047635 87 00 00 63 0678*  	dl 0x000087,0x000063,BUF_45_040
       00 00 48 02 
       00          
04763E F2 00 00 63 0679*  	dl 0x0000F2,0x000063,BUF_45_040
       00 00 48 02 
       00          
047647 58 00 00 8D 0680*  	dl 0x000058,0x00008D,BUF_45_044
       00 00 49 02 
       00          
047650             0681*  
047650             0682*  ; render_obj_id:46
047650             0683*  sprite_obj_011:
047650 09 00 00 58 0684*  	dl 0x000009,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047659 2C 00 00 58 0685*  	dl 0x00002C,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047662 50 00 00 58 0686*  	dl 0x000050,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04766B 73 00 00 58 0687*  	dl 0x000073,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047674 97 00 00 58 0688*  	dl 0x000097,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04767D BA 00 00 58 0689*  	dl 0x0000BA,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047686 DE 00 00 58 0690*  	dl 0x0000DE,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04768F 01 01 00 58 0691*  	dl 0x000101,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047698 25 01 00 58 0692*  	dl 0x000125,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0476A1 0C 00 00 5A 0693*  	dl 0x00000C,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476AA 3A 00 00 5A 0694*  	dl 0x00003A,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476B3 67 00 00 5A 0695*  	dl 0x000067,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476BC 95 00 00 5A 0696*  	dl 0x000095,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476C5 C2 00 00 5A 0697*  	dl 0x0000C2,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476CE F0 00 00 5A 0698*  	dl 0x0000F0,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476D7 1D 01 00 5A 0699*  	dl 0x00011D,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476E0 11 00 00 60 0700*  	dl 0x000011,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476E9 50 00 00 60 0701*  	dl 0x000050,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476F2 91 00 00 60 0702*  	dl 0x000091,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476FB D1 00 00 60 0703*  	dl 0x0000D1,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047704 11 01 00 60 0704*  	dl 0x000111,0x000060,BUF_46_032
       00 00 4C 02 
       00          
04770D 1D 00 00 69 0705*  	dl 0x00001D,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047716 87 00 00 69 0706*  	dl 0x000087,0x000069,BUF_46_040
       00 00 4D 02 
       00          
04771F F2 00 00 69 0707*  	dl 0x0000F2,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047728 8E 00 00 9F 0708*  	dl 0x00008E,0x00009F,BUF_46_044
       00 00 4E 02 
       00          
047731             0709*  
047731             0710*  ; render_obj_id:47
047731             0711*  sprite_obj_012:
047731 09 00 00 57 0712*  	dl 0x000009,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04773A 2C 00 00 57 0713*  	dl 0x00002C,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047743 50 00 00 57 0714*  	dl 0x000050,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04774C 73 00 00 57 0715*  	dl 0x000073,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047755 97 00 00 57 0716*  	dl 0x000097,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04775E BA 00 00 57 0717*  	dl 0x0000BA,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047767 DE 00 00 57 0718*  	dl 0x0000DE,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047770 01 01 00 57 0719*  	dl 0x000101,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047779 25 01 00 57 0720*  	dl 0x000125,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047782 0C 00 00 59 0721*  	dl 0x00000C,0x000059,BUF_47_020
       00 00 50 02 
       00          
04778B 3A 00 00 59 0722*  	dl 0x00003A,0x000059,BUF_47_020
       00 00 50 02 
       00          
047794 67 00 00 59 0723*  	dl 0x000067,0x000059,BUF_47_020
       00 00 50 02 
       00          
04779D 95 00 00 59 0724*  	dl 0x000095,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477A6 C2 00 00 59 0725*  	dl 0x0000C2,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477AF F0 00 00 59 0726*  	dl 0x0000F0,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477B8 1D 01 00 59 0727*  	dl 0x00011D,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477C1 11 00 00 5E 0728*  	dl 0x000011,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477CA 50 00 00 5E 0729*  	dl 0x000050,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477D3 91 00 00 5E 0730*  	dl 0x000091,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477DC D1 00 00 5E 0731*  	dl 0x0000D1,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477E5 11 01 00 5E 0732*  	dl 0x000111,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477EE 1D 00 00 66 0733*  	dl 0x00001D,0x000066,BUF_47_040
       00 00 52 02 
       00          
0477F7 87 00 00 66 0734*  	dl 0x000087,0x000066,BUF_47_040
       00 00 52 02 
       00          
047800 F2 00 00 66 0735*  	dl 0x0000F2,0x000066,BUF_47_040
       00 00 52 02 
       00          
047809 B2 00 00 96 0736*  	dl 0x0000B2,0x000096,BUF_47_044
       00 00 53 02 
       00          
047812             0737*  
047812             0738*  ; render_obj_id:48
047812             0739*  sprite_obj_013:
047812 0A 00 00 5A 0740*  	dl 0x00000A,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04781B 2D 00 00 5A 0741*  	dl 0x00002D,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047824 51 00 00 5A 0742*  	dl 0x000051,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04782D 74 00 00 5A 0743*  	dl 0x000074,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047836 98 00 00 5A 0744*  	dl 0x000098,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04783F BB 00 00 5A 0745*  	dl 0x0000BB,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047848 DF 00 00 5A 0746*  	dl 0x0000DF,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047851 02 01 00 5A 0747*  	dl 0x000102,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04785A 26 01 00 5A 0748*  	dl 0x000126,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047863 0D 00 00 5C 0749*  	dl 0x00000D,0x00005C,BUF_48_020
       00 00 55 02 
       00          
04786C 3B 00 00 5C 0750*  	dl 0x00003B,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047875 68 00 00 5C 0751*  	dl 0x000068,0x00005C,BUF_48_020
       00 00 55 02 
       00          
04787E 96 00 00 5C 0752*  	dl 0x000096,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047887 C3 00 00 5C 0753*  	dl 0x0000C3,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047890 F1 00 00 5C 0754*  	dl 0x0000F1,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047899 1E 01 00 5C 0755*  	dl 0x00011E,0x00005C,BUF_48_020
       00 00 55 02 
       00          
0478A2 12 00 00 62 0756*  	dl 0x000012,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478AB 51 00 00 62 0757*  	dl 0x000051,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478B4 92 00 00 62 0758*  	dl 0x000092,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478BD D2 00 00 62 0759*  	dl 0x0000D2,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478C6 12 01 00 62 0760*  	dl 0x000112,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478CF 1D 00 00 6C 0761*  	dl 0x00001D,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478D8 87 00 00 6C 0762*  	dl 0x000087,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478E1 F2 00 00 6C 0763*  	dl 0x0000F2,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478EA 00 01 00 A0 0764*  	dl 0x000100,0x0000A0,BUF_48_044
       00 00 58 02 
       00          
0478F3             0765*  
0478F3             0766*  ; render_obj_id:49
0478F3             0767*  sprite_obj_014:
0478F3 0A 00 00 59 0768*  	dl 0x00000A,0x000059,BUF_49_004
       00 00 59 02 
       00          
0478FC 2D 00 00 59 0769*  	dl 0x00002D,0x000059,BUF_49_004
       00 00 59 02 
       00          
047905 51 00 00 59 0770*  	dl 0x000051,0x000059,BUF_49_004
       00 00 59 02 
       00          
04790E 74 00 00 59 0771*  	dl 0x000074,0x000059,BUF_49_004
       00 00 59 02 
       00          
047917 98 00 00 59 0772*  	dl 0x000098,0x000059,BUF_49_004
       00 00 59 02 
       00          
047920 BB 00 00 59 0773*  	dl 0x0000BB,0x000059,BUF_49_004
       00 00 59 02 
       00          
047929 DF 00 00 59 0774*  	dl 0x0000DF,0x000059,BUF_49_004
       00 00 59 02 
       00          
047932 02 01 00 59 0775*  	dl 0x000102,0x000059,BUF_49_004
       00 00 59 02 
       00          
04793B 26 01 00 59 0776*  	dl 0x000126,0x000059,BUF_49_004
       00 00 59 02 
       00          
047944 0E 00 00 5B 0777*  	dl 0x00000E,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04794D 3C 00 00 5B 0778*  	dl 0x00003C,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047956 69 00 00 5B 0779*  	dl 0x000069,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04795F 97 00 00 5B 0780*  	dl 0x000097,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047968 C4 00 00 5B 0781*  	dl 0x0000C4,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047971 F2 00 00 5B 0782*  	dl 0x0000F2,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04797A 1F 01 00 5B 0783*  	dl 0x00011F,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047983 13 00 00 62 0784*  	dl 0x000013,0x000062,BUF_49_032
       00 00 5B 02 
       00          
04798C 52 00 00 62 0785*  	dl 0x000052,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047995 93 00 00 62 0786*  	dl 0x000093,0x000062,BUF_49_032
       00 00 5B 02 
       00          
04799E D3 00 00 62 0787*  	dl 0x0000D3,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479A7 13 01 00 62 0788*  	dl 0x000113,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479B0 20 00 00 6C 0789*  	dl 0x000020,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479B9 8A 00 00 6C 0790*  	dl 0x00008A,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479C2 F5 00 00 6C 0791*  	dl 0x0000F5,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479CB E8 00 00 A0 0792*  	dl 0x0000E8,0x0000A0,BUF_49_044
       00 00 5D 02 
       00          
0479D4             0793*  
0479D4             0794*  ; render_obj_id:50
0479D4             0795*  sprite_obj_015:
0479D4 0D 00 00 53 0796*  	dl 0x00000D,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479DD 30 00 00 53 0797*  	dl 0x000030,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479E6 54 00 00 53 0798*  	dl 0x000054,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479EF 77 00 00 53 0799*  	dl 0x000077,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479F8 9B 00 00 53 0800*  	dl 0x00009B,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A01 BE 00 00 53 0801*  	dl 0x0000BE,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A0A E2 00 00 53 0802*  	dl 0x0000E2,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A13 05 01 00 53 0803*  	dl 0x000105,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A1C 29 01 00 53 0804*  	dl 0x000129,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A25 10 00 00 54 0805*  	dl 0x000010,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A2E 3E 00 00 54 0806*  	dl 0x00003E,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A37 6B 00 00 54 0807*  	dl 0x00006B,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A40 99 00 00 54 0808*  	dl 0x000099,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A49 C6 00 00 54 0809*  	dl 0x0000C6,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A52 F4 00 00 54 0810*  	dl 0x0000F4,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A5B 21 01 00 54 0811*  	dl 0x000121,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A64 16 00 00 56 0812*  	dl 0x000016,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A6D 55 00 00 56 0813*  	dl 0x000055,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A76 96 00 00 56 0814*  	dl 0x000096,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A7F D6 00 00 56 0815*  	dl 0x0000D6,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A88 16 01 00 56 0816*  	dl 0x000116,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A91 26 00 00 5A 0817*  	dl 0x000026,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047A9A 90 00 00 5A 0818*  	dl 0x000090,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AA3 FB 00 00 5A 0819*  	dl 0x0000FB,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AAC 78 00 00 6E 0820*  	dl 0x000078,0x00006E,BUF_50_044
       00 00 62 02 
       00          
047AB5             0821*  
047AB5             0822*  ; render_obj_id:51
047AB5             0823*  sprite_obj_016:
047AB5 0B 00 00 49 0824*  	dl 0x00000B,0x000049,BUF_51_004
       00 00 63 02 
       00          
047ABE 2E 00 00 49 0825*  	dl 0x00002E,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AC7 52 00 00 49 0826*  	dl 0x000052,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AD0 75 00 00 49 0827*  	dl 0x000075,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AD9 99 00 00 49 0828*  	dl 0x000099,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AE2 BC 00 00 49 0829*  	dl 0x0000BC,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AEB E0 00 00 49 0830*  	dl 0x0000E0,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AF4 03 01 00 49 0831*  	dl 0x000103,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AFD 27 01 00 49 0832*  	dl 0x000127,0x000049,BUF_51_004
       00 00 63 02 
       00          
047B06 0D 00 00 48 0833*  	dl 0x00000D,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B0F 3B 00 00 48 0834*  	dl 0x00003B,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B18 68 00 00 48 0835*  	dl 0x000068,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B21 96 00 00 48 0836*  	dl 0x000096,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B2A C3 00 00 48 0837*  	dl 0x0000C3,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B33 F1 00 00 48 0838*  	dl 0x0000F1,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B3C 1E 01 00 48 0839*  	dl 0x00011E,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B45 13 00 00 45 0840*  	dl 0x000013,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B4E 52 00 00 45 0841*  	dl 0x000052,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B57 93 00 00 45 0842*  	dl 0x000093,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B60 D3 00 00 45 0843*  	dl 0x0000D3,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B69 13 01 00 45 0844*  	dl 0x000113,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B72 20 00 00 3E 0845*  	dl 0x000020,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B7B 8A 00 00 3E 0846*  	dl 0x00008A,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B84 F5 00 00 3E 0847*  	dl 0x0000F5,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B8D 5E 00 00 1C 0848*  	dl 0x00005E,0x00001C,BUF_51_044
       00 00 67 02 
       00          
047B96             0849*  
047B96             0850*  ; render_obj_id:52
047B96             0851*  sprite_obj_017:
047B96 0C 00 00 49 0852*  	dl 0x00000C,0x000049,BUF_52_004
       00 00 68 02 
       00          
047B9F 2F 00 00 49 0853*  	dl 0x00002F,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BA8 53 00 00 49 0854*  	dl 0x000053,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BB1 76 00 00 49 0855*  	dl 0x000076,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BBA 9A 00 00 49 0856*  	dl 0x00009A,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BC3 BD 00 00 49 0857*  	dl 0x0000BD,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BCC E1 00 00 49 0858*  	dl 0x0000E1,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BD5 04 01 00 49 0859*  	dl 0x000104,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BDE 28 01 00 49 0860*  	dl 0x000128,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BE7 0F 00 00 48 0861*  	dl 0x00000F,0x000048,BUF_52_020
       00 00 69 02 
       00          
047BF0 3D 00 00 48 0862*  	dl 0x00003D,0x000048,BUF_52_020
       00 00 69 02 
       00          
047BF9 6A 00 00 48 0863*  	dl 0x00006A,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C02 98 00 00 48 0864*  	dl 0x000098,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C0B C5 00 00 48 0865*  	dl 0x0000C5,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C14 F3 00 00 48 0866*  	dl 0x0000F3,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C1D 20 01 00 48 0867*  	dl 0x000120,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C26 16 00 00 45 0868*  	dl 0x000016,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C2F 55 00 00 45 0869*  	dl 0x000055,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C38 96 00 00 45 0870*  	dl 0x000096,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C41 D6 00 00 45 0871*  	dl 0x0000D6,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C4A 16 01 00 45 0872*  	dl 0x000116,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C53 24 00 00 3E 0873*  	dl 0x000024,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C5C 8E 00 00 3E 0874*  	dl 0x00008E,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C65 F9 00 00 3E 0875*  	dl 0x0000F9,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C6E 6B 00 00 1C 0876*  	dl 0x00006B,0x00001C,BUF_52_044
       00 00 6C 02 
       00          
047C77             0877*  
047C77             0878*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
047C77             0018   	include "src/asm/font_itc_honda.asm"
047C77             0001*  ; Bitmap indices:
047C77             0002*  BUF_4384: equ 0x1120 ; 32
047C77             0003*  ; Missing character 33 !
047C77             0004*  ; Missing character 34 "
047C77             0005*  ; Missing character 35 #
047C77             0006*  ; Missing character 36 $
047C77             0007*  ; Missing character 37 %
047C77             0008*  ; Missing character 38 &
047C77             0009*  ; Missing character 39 '
047C77             0010*  ; Missing character 40 (
047C77             0011*  ; Missing character 41 )
047C77             0012*  ; Missing character 42 *
047C77             0013*  ; Missing character 43 +
047C77             0014*  ; Missing character 44 ,
047C77             0015*  ; Missing character 45 -
047C77             0016*  BUF_4398: equ 0x112E ; 46 .
047C77             0017*  ; Missing character 47 /
047C77             0018*  BUF_4400: equ 0x1130 ; 48 0
047C77             0019*  BUF_4401: equ 0x1131 ; 49 1
047C77             0020*  BUF_4402: equ 0x1132 ; 50 2
047C77             0021*  BUF_4403: equ 0x1133 ; 51 3
047C77             0022*  BUF_4404: equ 0x1134 ; 52 4
047C77             0023*  BUF_4405: equ 0x1135 ; 53 5
047C77             0024*  BUF_4406: equ 0x1136 ; 54 6
047C77             0025*  BUF_4407: equ 0x1137 ; 55 7
047C77             0026*  BUF_4408: equ 0x1138 ; 56 8
047C77             0027*  BUF_4409: equ 0x1139 ; 57 9
047C77             0028*  ; Missing character 58 :
047C77             0029*  ; Missing character 59 ;
047C77             0030*  ; Missing character 60 <
047C77             0031*  ; Missing character 61 =
047C77             0032*  ; Missing character 62 >
047C77             0033*  ; Missing character 63 ?
047C77             0034*  ; Missing character 64 @
047C77             0035*  BUF_4417: equ 0x1141 ; 65 A
047C77             0036*  BUF_4418: equ 0x1142 ; 66 B
047C77             0037*  BUF_4419: equ 0x1143 ; 67 C
047C77             0038*  BUF_4420: equ 0x1144 ; 68 D
047C77             0039*  BUF_4421: equ 0x1145 ; 69 E
047C77             0040*  BUF_4422: equ 0x1146 ; 70 F
047C77             0041*  BUF_4423: equ 0x1147 ; 71 G
047C77             0042*  BUF_4424: equ 0x1148 ; 72 H
047C77             0043*  BUF_4425: equ 0x1149 ; 73 I
047C77             0044*  BUF_4426: equ 0x114A ; 74 J
047C77             0045*  BUF_4427: equ 0x114B ; 75 K
047C77             0046*  BUF_4428: equ 0x114C ; 76 L
047C77             0047*  BUF_4429: equ 0x114D ; 77 M
047C77             0048*  BUF_4430: equ 0x114E ; 78 N
047C77             0049*  BUF_4431: equ 0x114F ; 79 O
047C77             0050*  BUF_4432: equ 0x1150 ; 80 P
047C77             0051*  BUF_4433: equ 0x1151 ; 81 Q
047C77             0052*  BUF_4434: equ 0x1152 ; 82 R
047C77             0053*  BUF_4435: equ 0x1153 ; 83 S
047C77             0054*  BUF_4436: equ 0x1154 ; 84 T
047C77             0055*  BUF_4437: equ 0x1155 ; 85 U
047C77             0056*  BUF_4438: equ 0x1156 ; 86 V
047C77             0057*  BUF_4439: equ 0x1157 ; 87 W
047C77             0058*  BUF_4440: equ 0x1158 ; 88 X
047C77             0059*  BUF_4441: equ 0x1159 ; 89 Y
047C77             0060*  BUF_4442: equ 0x115A ; 90 Z
047C77             0061*  ; Missing character 91 [
047C77             0062*  ; Missing character 92 \
047C77             0063*  ; Missing character 93 ]
047C77             0064*  ; Missing character 94 ^
047C77             0065*  ; Missing character 95 _
047C77             0066*  ; Missing character 96 `
047C77             0067*  BUF_4449: equ 0x1161 ; 97 a
047C77             0068*  BUF_4450: equ 0x1162 ; 98 b
047C77             0069*  BUF_4451: equ 0x1163 ; 99 c
047C77             0070*  BUF_4452: equ 0x1164 ; 100 d
047C77             0071*  BUF_4453: equ 0x1165 ; 101 e
047C77             0072*  BUF_4454: equ 0x1166 ; 102 f
047C77             0073*  BUF_4455: equ 0x1167 ; 103 g
047C77             0074*  BUF_4456: equ 0x1168 ; 104 h
047C77             0075*  BUF_4457: equ 0x1169 ; 105 i
047C77             0076*  BUF_4458: equ 0x116A ; 106 j
047C77             0077*  BUF_4459: equ 0x116B ; 107 k
047C77             0078*  BUF_4460: equ 0x116C ; 108 l
047C77             0079*  BUF_4461: equ 0x116D ; 109 m
047C77             0080*  BUF_4462: equ 0x116E ; 110 n
047C77             0081*  BUF_4463: equ 0x116F ; 111 o
047C77             0082*  BUF_4464: equ 0x1170 ; 112 p
047C77             0083*  BUF_4465: equ 0x1171 ; 113 q
047C77             0084*  BUF_4466: equ 0x1172 ; 114 r
047C77             0085*  BUF_4467: equ 0x1173 ; 115 s
047C77             0086*  BUF_4468: equ 0x1174 ; 116 t
047C77             0087*  BUF_4469: equ 0x1175 ; 117 u
047C77             0088*  BUF_4470: equ 0x1176 ; 118 v
047C77             0089*  BUF_4471: equ 0x1177 ; 119 w
047C77             0090*  BUF_4472: equ 0x1178 ; 120 x
047C77             0091*  BUF_4473: equ 0x1179 ; 121 y
047C77             0092*  BUF_4474: equ 0x117A ; 122 z
047C77             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
047C77             0094*  font_itc_honda:
047C77 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
047C7D 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
047C83 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
047C89 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
047C8F 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
047C95 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
047C9B 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
047CA1 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
047CA7 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
047CAD 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
047CB3 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
047CB9 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
047CBF 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
047CC5 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
047CCB 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
047CD1 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
047CD7 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
047CDD 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
047CE3 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
047CE9 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
047CEF 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
047CF5 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
047CFB 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
047D01 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
047D07 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
047D0D 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
047D13 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
047D19 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
047D1F 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
047D25 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
047D2B 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
047D31 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
047D37 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
047D3D 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
047D43 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
047D49 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
047D4F 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
047D55 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
047D5B 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
047D61 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
047D67 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
047D6D 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
047D73 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
047D79 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
047D7F 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
047D85 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
047D8B 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
047D91 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
047D97 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
047D9D 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
047DA3 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
047DA9 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
047DAF 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
047DB5 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
047DBB 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
047DC1 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
047DC7 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
047DCD 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
047DD3 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
047DD9 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
047DDF 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
047DE5 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
047DEB 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
047DF1 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
047DF7 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
047DFD 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
047E03 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
047E09 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
047E0F 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
047E15 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
047E1B 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
047E21 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
047E27 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
047E2D 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
047E33 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
047E39 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
047E3F 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
047E45 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
047E4B 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
047E51 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
047E57 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
047E5D 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
047E63 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
047E69 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
047E6F 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
047E75 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
047E7B 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
047E81 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
047E87 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
047E8D 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
047E93 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
047E99             0186*  
047E99             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
047E99             0188*  load_font_itc_honda:
047E99             0189*  
047E99 21 DA 87 04 0190*  	ld hl,Fhonda032
047E9D 11 FC C2 04 0191*  	ld de,filedata
047EA1 01 00 00 01 0192*  	ld bc,65536
047EA5 3E 01       0193*  	ld a,mos_load
047EA7 5B CF       0194*  	RST.LIL 08h
047EA9 21 20 11 00 0195*  	ld hl,BUF_4384
047EAD 01 06 00 00 0196*  	ld bc,6
047EB1 11 01 00 00 0197*  	ld de,1
047EB5 DD 21 06 00 0198*  	ld ix,6
       00          
047EBA CD 6D B8 04 0199*  	call vdu_load_img
047EBE             0200*  ; Missing character 33
047EBE             0201*  ; Missing character 34
047EBE             0202*  ; Missing character 35
047EBE             0203*  ; Missing character 36
047EBE             0204*  ; Missing character 37
047EBE             0205*  ; Missing character 38
047EBE             0206*  ; Missing character 39
047EBE             0207*  ; Missing character 40
047EBE             0208*  ; Missing character 41
047EBE             0209*  ; Missing character 42
047EBE             0210*  ; Missing character 43
047EBE             0211*  ; Missing character 44
047EBE             0212*  ; Missing character 45
047EBE             0213*  
047EBE 21 F0 87 04 0214*  	ld hl,Fhonda046
047EC2 11 FC C2 04 0215*  	ld de,filedata
047EC6 01 00 00 01 0216*  	ld bc,65536
047ECA 3E 01       0217*  	ld a,mos_load
047ECC 5B CF       0218*  	RST.LIL 08h
047ECE 21 2E 11 00 0219*  	ld hl,BUF_4398
047ED2 01 05 00 00 0220*  	ld bc,5
047ED6 11 05 00 00 0221*  	ld de,5
047EDA DD 21 19 00 0222*  	ld ix,25
       00          
047EDF CD 6D B8 04 0223*  	call vdu_load_img
047EE3             0224*  ; Missing character 47
047EE3             0225*  
047EE3 21 06 88 04 0226*  	ld hl,Fhonda048
047EE7 11 FC C2 04 0227*  	ld de,filedata
047EEB 01 00 00 01 0228*  	ld bc,65536
047EEF 3E 01       0229*  	ld a,mos_load
047EF1 5B CF       0230*  	RST.LIL 08h
047EF3 21 30 11 00 0231*  	ld hl,BUF_4400
047EF7 01 0A 00 00 0232*  	ld bc,10
047EFB 11 12 00 00 0233*  	ld de,18
047EFF DD 21 B4 00 0234*  	ld ix,180
       00          
047F04 CD 6D B8 04 0235*  	call vdu_load_img
047F08             0236*  
047F08 21 1C 88 04 0237*  	ld hl,Fhonda049
047F0C 11 FC C2 04 0238*  	ld de,filedata
047F10 01 00 00 01 0239*  	ld bc,65536
047F14 3E 01       0240*  	ld a,mos_load
047F16 5B CF       0241*  	RST.LIL 08h
047F18 21 31 11 00 0242*  	ld hl,BUF_4401
047F1C 01 04 00 00 0243*  	ld bc,4
047F20 11 12 00 00 0244*  	ld de,18
047F24 DD 21 48 00 0245*  	ld ix,72
       00          
047F29 CD 6D B8 04 0246*  	call vdu_load_img
047F2D             0247*  
047F2D 21 32 88 04 0248*  	ld hl,Fhonda050
047F31 11 FC C2 04 0249*  	ld de,filedata
047F35 01 00 00 01 0250*  	ld bc,65536
047F39 3E 01       0251*  	ld a,mos_load
047F3B 5B CF       0252*  	RST.LIL 08h
047F3D 21 32 11 00 0253*  	ld hl,BUF_4402
047F41 01 09 00 00 0254*  	ld bc,9
047F45 11 12 00 00 0255*  	ld de,18
047F49 DD 21 A2 00 0256*  	ld ix,162
       00          
047F4E CD 6D B8 04 0257*  	call vdu_load_img
047F52             0258*  
047F52 21 48 88 04 0259*  	ld hl,Fhonda051
047F56 11 FC C2 04 0260*  	ld de,filedata
047F5A 01 00 00 01 0261*  	ld bc,65536
047F5E 3E 01       0262*  	ld a,mos_load
047F60 5B CF       0263*  	RST.LIL 08h
047F62 21 33 11 00 0264*  	ld hl,BUF_4403
047F66 01 0A 00 00 0265*  	ld bc,10
047F6A 11 12 00 00 0266*  	ld de,18
047F6E DD 21 B4 00 0267*  	ld ix,180
       00          
047F73 CD 6D B8 04 0268*  	call vdu_load_img
047F77             0269*  
047F77 21 5E 88 04 0270*  	ld hl,Fhonda052
047F7B 11 FC C2 04 0271*  	ld de,filedata
047F7F 01 00 00 01 0272*  	ld bc,65536
047F83 3E 01       0273*  	ld a,mos_load
047F85 5B CF       0274*  	RST.LIL 08h
047F87 21 34 11 00 0275*  	ld hl,BUF_4404
047F8B 01 0C 00 00 0276*  	ld bc,12
047F8F 11 12 00 00 0277*  	ld de,18
047F93 DD 21 D8 00 0278*  	ld ix,216
       00          
047F98 CD 6D B8 04 0279*  	call vdu_load_img
047F9C             0280*  
047F9C 21 74 88 04 0281*  	ld hl,Fhonda053
047FA0 11 FC C2 04 0282*  	ld de,filedata
047FA4 01 00 00 01 0283*  	ld bc,65536
047FA8 3E 01       0284*  	ld a,mos_load
047FAA 5B CF       0285*  	RST.LIL 08h
047FAC 21 35 11 00 0286*  	ld hl,BUF_4405
047FB0 01 0A 00 00 0287*  	ld bc,10
047FB4 11 12 00 00 0288*  	ld de,18
047FB8 DD 21 B4 00 0289*  	ld ix,180
       00          
047FBD CD 6D B8 04 0290*  	call vdu_load_img
047FC1             0291*  
047FC1 21 8A 88 04 0292*  	ld hl,Fhonda054
047FC5 11 FC C2 04 0293*  	ld de,filedata
047FC9 01 00 00 01 0294*  	ld bc,65536
047FCD 3E 01       0295*  	ld a,mos_load
047FCF 5B CF       0296*  	RST.LIL 08h
047FD1 21 36 11 00 0297*  	ld hl,BUF_4406
047FD5 01 0A 00 00 0298*  	ld bc,10
047FD9 11 12 00 00 0299*  	ld de,18
047FDD DD 21 B4 00 0300*  	ld ix,180
       00          
047FE2 CD 6D B8 04 0301*  	call vdu_load_img
047FE6             0302*  
047FE6 21 A0 88 04 0303*  	ld hl,Fhonda055
047FEA 11 FC C2 04 0304*  	ld de,filedata
047FEE 01 00 00 01 0305*  	ld bc,65536
047FF2 3E 01       0306*  	ld a,mos_load
047FF4 5B CF       0307*  	RST.LIL 08h
047FF6 21 37 11 00 0308*  	ld hl,BUF_4407
047FFA 01 08 00 00 0309*  	ld bc,8
047FFE 11 12 00 00 0310*  	ld de,18
048002 DD 21 90 00 0311*  	ld ix,144
       00          
048007 CD 6D B8 04 0312*  	call vdu_load_img
04800B             0313*  
04800B 21 B6 88 04 0314*  	ld hl,Fhonda056
04800F 11 FC C2 04 0315*  	ld de,filedata
048013 01 00 00 01 0316*  	ld bc,65536
048017 3E 01       0317*  	ld a,mos_load
048019 5B CF       0318*  	RST.LIL 08h
04801B 21 38 11 00 0319*  	ld hl,BUF_4408
04801F 01 0A 00 00 0320*  	ld bc,10
048023 11 12 00 00 0321*  	ld de,18
048027 DD 21 B4 00 0322*  	ld ix,180
       00          
04802C CD 6D B8 04 0323*  	call vdu_load_img
048030             0324*  
048030 21 CC 88 04 0325*  	ld hl,Fhonda057
048034 11 FC C2 04 0326*  	ld de,filedata
048038 01 00 00 01 0327*  	ld bc,65536
04803C 3E 01       0328*  	ld a,mos_load
04803E 5B CF       0329*  	RST.LIL 08h
048040 21 39 11 00 0330*  	ld hl,BUF_4409
048044 01 0A 00 00 0331*  	ld bc,10
048048 11 12 00 00 0332*  	ld de,18
04804C DD 21 B4 00 0333*  	ld ix,180
       00          
048051 CD 6D B8 04 0334*  	call vdu_load_img
048055             0335*  ; Missing character 58
048055             0336*  ; Missing character 59
048055             0337*  ; Missing character 60
048055             0338*  ; Missing character 61
048055             0339*  ; Missing character 62
048055             0340*  ; Missing character 63
048055             0341*  ; Missing character 64
048055             0342*  
048055 21 E2 88 04 0343*  	ld hl,Fhonda065
048059 11 FC C2 04 0344*  	ld de,filedata
04805D 01 00 00 01 0345*  	ld bc,65536
048061 3E 01       0346*  	ld a,mos_load
048063 5B CF       0347*  	RST.LIL 08h
048065 21 41 11 00 0348*  	ld hl,BUF_4417
048069 01 0A 00 00 0349*  	ld bc,10
04806D 11 12 00 00 0350*  	ld de,18
048071 DD 21 B4 00 0351*  	ld ix,180
       00          
048076 CD 6D B8 04 0352*  	call vdu_load_img
04807A             0353*  
04807A 21 F8 88 04 0354*  	ld hl,Fhonda066
04807E 11 FC C2 04 0355*  	ld de,filedata
048082 01 00 00 01 0356*  	ld bc,65536
048086 3E 01       0357*  	ld a,mos_load
048088 5B CF       0358*  	RST.LIL 08h
04808A 21 42 11 00 0359*  	ld hl,BUF_4418
04808E 01 0A 00 00 0360*  	ld bc,10
048092 11 12 00 00 0361*  	ld de,18
048096 DD 21 B4 00 0362*  	ld ix,180
       00          
04809B CD 6D B8 04 0363*  	call vdu_load_img
04809F             0364*  
04809F 21 0E 89 04 0365*  	ld hl,Fhonda067
0480A3 11 FC C2 04 0366*  	ld de,filedata
0480A7 01 00 00 01 0367*  	ld bc,65536
0480AB 3E 01       0368*  	ld a,mos_load
0480AD 5B CF       0369*  	RST.LIL 08h
0480AF 21 43 11 00 0370*  	ld hl,BUF_4419
0480B3 01 08 00 00 0371*  	ld bc,8
0480B7 11 13 00 00 0372*  	ld de,19
0480BB DD 21 98 00 0373*  	ld ix,152
       00          
0480C0 CD 6D B8 04 0374*  	call vdu_load_img
0480C4             0375*  
0480C4 21 24 89 04 0376*  	ld hl,Fhonda068
0480C8 11 FC C2 04 0377*  	ld de,filedata
0480CC 01 00 00 01 0378*  	ld bc,65536
0480D0 3E 01       0379*  	ld a,mos_load
0480D2 5B CF       0380*  	RST.LIL 08h
0480D4 21 44 11 00 0381*  	ld hl,BUF_4420
0480D8 01 0A 00 00 0382*  	ld bc,10
0480DC 11 12 00 00 0383*  	ld de,18
0480E0 DD 21 B4 00 0384*  	ld ix,180
       00          
0480E5 CD 6D B8 04 0385*  	call vdu_load_img
0480E9             0386*  
0480E9 21 3A 89 04 0387*  	ld hl,Fhonda069
0480ED 11 FC C2 04 0388*  	ld de,filedata
0480F1 01 00 00 01 0389*  	ld bc,65536
0480F5 3E 01       0390*  	ld a,mos_load
0480F7 5B CF       0391*  	RST.LIL 08h
0480F9 21 45 11 00 0392*  	ld hl,BUF_4421
0480FD 01 08 00 00 0393*  	ld bc,8
048101 11 12 00 00 0394*  	ld de,18
048105 DD 21 90 00 0395*  	ld ix,144
       00          
04810A CD 6D B8 04 0396*  	call vdu_load_img
04810E             0397*  
04810E 21 50 89 04 0398*  	ld hl,Fhonda070
048112 11 FC C2 04 0399*  	ld de,filedata
048116 01 00 00 01 0400*  	ld bc,65536
04811A 3E 01       0401*  	ld a,mos_load
04811C 5B CF       0402*  	RST.LIL 08h
04811E 21 46 11 00 0403*  	ld hl,BUF_4422
048122 01 08 00 00 0404*  	ld bc,8
048126 11 12 00 00 0405*  	ld de,18
04812A DD 21 90 00 0406*  	ld ix,144
       00          
04812F CD 6D B8 04 0407*  	call vdu_load_img
048133             0408*  
048133 21 66 89 04 0409*  	ld hl,Fhonda071
048137 11 FC C2 04 0410*  	ld de,filedata
04813B 01 00 00 01 0411*  	ld bc,65536
04813F 3E 01       0412*  	ld a,mos_load
048141 5B CF       0413*  	RST.LIL 08h
048143 21 47 11 00 0414*  	ld hl,BUF_4423
048147 01 0A 00 00 0415*  	ld bc,10
04814B 11 12 00 00 0416*  	ld de,18
04814F DD 21 B4 00 0417*  	ld ix,180
       00          
048154 CD 6D B8 04 0418*  	call vdu_load_img
048158             0419*  
048158 21 7C 89 04 0420*  	ld hl,Fhonda072
04815C 11 FC C2 04 0421*  	ld de,filedata
048160 01 00 00 01 0422*  	ld bc,65536
048164 3E 01       0423*  	ld a,mos_load
048166 5B CF       0424*  	RST.LIL 08h
048168 21 48 11 00 0425*  	ld hl,BUF_4424
04816C 01 0A 00 00 0426*  	ld bc,10
048170 11 12 00 00 0427*  	ld de,18
048174 DD 21 B4 00 0428*  	ld ix,180
       00          
048179 CD 6D B8 04 0429*  	call vdu_load_img
04817D             0430*  
04817D 21 92 89 04 0431*  	ld hl,Fhonda073
048181 11 FC C2 04 0432*  	ld de,filedata
048185 01 00 00 01 0433*  	ld bc,65536
048189 3E 01       0434*  	ld a,mos_load
04818B 5B CF       0435*  	RST.LIL 08h
04818D 21 49 11 00 0436*  	ld hl,BUF_4425
048191 01 03 00 00 0437*  	ld bc,3
048195 11 12 00 00 0438*  	ld de,18
048199 DD 21 36 00 0439*  	ld ix,54
       00          
04819E CD 6D B8 04 0440*  	call vdu_load_img
0481A2             0441*  
0481A2 21 A8 89 04 0442*  	ld hl,Fhonda074
0481A6 11 FC C2 04 0443*  	ld de,filedata
0481AA 01 00 00 01 0444*  	ld bc,65536
0481AE 3E 01       0445*  	ld a,mos_load
0481B0 5B CF       0446*  	RST.LIL 08h
0481B2 21 4A 11 00 0447*  	ld hl,BUF_4426
0481B6 01 06 00 00 0448*  	ld bc,6
0481BA 11 12 00 00 0449*  	ld de,18
0481BE DD 21 6C 00 0450*  	ld ix,108
       00          
0481C3 CD 6D B8 04 0451*  	call vdu_load_img
0481C7             0452*  
0481C7 21 BE 89 04 0453*  	ld hl,Fhonda075
0481CB 11 FC C2 04 0454*  	ld de,filedata
0481CF 01 00 00 01 0455*  	ld bc,65536
0481D3 3E 01       0456*  	ld a,mos_load
0481D5 5B CF       0457*  	RST.LIL 08h
0481D7 21 4B 11 00 0458*  	ld hl,BUF_4427
0481DB 01 0A 00 00 0459*  	ld bc,10
0481DF 11 12 00 00 0460*  	ld de,18
0481E3 DD 21 B4 00 0461*  	ld ix,180
       00          
0481E8 CD 6D B8 04 0462*  	call vdu_load_img
0481EC             0463*  
0481EC 21 D4 89 04 0464*  	ld hl,Fhonda076
0481F0 11 FC C2 04 0465*  	ld de,filedata
0481F4 01 00 00 01 0466*  	ld bc,65536
0481F8 3E 01       0467*  	ld a,mos_load
0481FA 5B CF       0468*  	RST.LIL 08h
0481FC 21 4C 11 00 0469*  	ld hl,BUF_4428
048200 01 08 00 00 0470*  	ld bc,8
048204 11 12 00 00 0471*  	ld de,18
048208 DD 21 90 00 0472*  	ld ix,144
       00          
04820D CD 6D B8 04 0473*  	call vdu_load_img
048211             0474*  
048211 21 EA 89 04 0475*  	ld hl,Fhonda077
048215 11 FC C2 04 0476*  	ld de,filedata
048219 01 00 00 01 0477*  	ld bc,65536
04821D 3E 01       0478*  	ld a,mos_load
04821F 5B CF       0479*  	RST.LIL 08h
048221 21 4D 11 00 0480*  	ld hl,BUF_4429
048225 01 0E 00 00 0481*  	ld bc,14
048229 11 12 00 00 0482*  	ld de,18
04822D DD 21 FC 00 0483*  	ld ix,252
       00          
048232 CD 6D B8 04 0484*  	call vdu_load_img
048236             0485*  
048236 21 00 8A 04 0486*  	ld hl,Fhonda078
04823A 11 FC C2 04 0487*  	ld de,filedata
04823E 01 00 00 01 0488*  	ld bc,65536
048242 3E 01       0489*  	ld a,mos_load
048244 5B CF       0490*  	RST.LIL 08h
048246 21 4E 11 00 0491*  	ld hl,BUF_4430
04824A 01 0A 00 00 0492*  	ld bc,10
04824E 11 12 00 00 0493*  	ld de,18
048252 DD 21 B4 00 0494*  	ld ix,180
       00          
048257 CD 6D B8 04 0495*  	call vdu_load_img
04825B             0496*  
04825B 21 16 8A 04 0497*  	ld hl,Fhonda079
04825F 11 FC C2 04 0498*  	ld de,filedata
048263 01 00 00 01 0499*  	ld bc,65536
048267 3E 01       0500*  	ld a,mos_load
048269 5B CF       0501*  	RST.LIL 08h
04826B 21 4F 11 00 0502*  	ld hl,BUF_4431
04826F 01 0A 00 00 0503*  	ld bc,10
048273 11 12 00 00 0504*  	ld de,18
048277 DD 21 B4 00 0505*  	ld ix,180
       00          
04827C CD 6D B8 04 0506*  	call vdu_load_img
048280             0507*  
048280 21 2C 8A 04 0508*  	ld hl,Fhonda080
048284 11 FC C2 04 0509*  	ld de,filedata
048288 01 00 00 01 0510*  	ld bc,65536
04828C 3E 01       0511*  	ld a,mos_load
04828E 5B CF       0512*  	RST.LIL 08h
048290 21 50 11 00 0513*  	ld hl,BUF_4432
048294 01 0A 00 00 0514*  	ld bc,10
048298 11 12 00 00 0515*  	ld de,18
04829C DD 21 B4 00 0516*  	ld ix,180
       00          
0482A1 CD 6D B8 04 0517*  	call vdu_load_img
0482A5             0518*  
0482A5 21 42 8A 04 0519*  	ld hl,Fhonda081
0482A9 11 FC C2 04 0520*  	ld de,filedata
0482AD 01 00 00 01 0521*  	ld bc,65536
0482B1 3E 01       0522*  	ld a,mos_load
0482B3 5B CF       0523*  	RST.LIL 08h
0482B5 21 51 11 00 0524*  	ld hl,BUF_4433
0482B9 01 0A 00 00 0525*  	ld bc,10
0482BD 11 15 00 00 0526*  	ld de,21
0482C1 DD 21 D2 00 0527*  	ld ix,210
       00          
0482C6 CD 6D B8 04 0528*  	call vdu_load_img
0482CA             0529*  
0482CA 21 58 8A 04 0530*  	ld hl,Fhonda082
0482CE 11 FC C2 04 0531*  	ld de,filedata
0482D2 01 00 00 01 0532*  	ld bc,65536
0482D6 3E 01       0533*  	ld a,mos_load
0482D8 5B CF       0534*  	RST.LIL 08h
0482DA 21 52 11 00 0535*  	ld hl,BUF_4434
0482DE 01 0A 00 00 0536*  	ld bc,10
0482E2 11 12 00 00 0537*  	ld de,18
0482E6 DD 21 B4 00 0538*  	ld ix,180
       00          
0482EB CD 6D B8 04 0539*  	call vdu_load_img
0482EF             0540*  
0482EF 21 6E 8A 04 0541*  	ld hl,Fhonda083
0482F3 11 FC C2 04 0542*  	ld de,filedata
0482F7 01 00 00 01 0543*  	ld bc,65536
0482FB 3E 01       0544*  	ld a,mos_load
0482FD 5B CF       0545*  	RST.LIL 08h
0482FF 21 53 11 00 0546*  	ld hl,BUF_4435
048303 01 09 00 00 0547*  	ld bc,9
048307 11 13 00 00 0548*  	ld de,19
04830B DD 21 AB 00 0549*  	ld ix,171
       00          
048310 CD 6D B8 04 0550*  	call vdu_load_img
048314             0551*  
048314 21 84 8A 04 0552*  	ld hl,Fhonda084
048318 11 FC C2 04 0553*  	ld de,filedata
04831C 01 00 00 01 0554*  	ld bc,65536
048320 3E 01       0555*  	ld a,mos_load
048322 5B CF       0556*  	RST.LIL 08h
048324 21 54 11 00 0557*  	ld hl,BUF_4436
048328 01 0A 00 00 0558*  	ld bc,10
04832C 11 12 00 00 0559*  	ld de,18
048330 DD 21 B4 00 0560*  	ld ix,180
       00          
048335 CD 6D B8 04 0561*  	call vdu_load_img
048339             0562*  
048339 21 9A 8A 04 0563*  	ld hl,Fhonda085
04833D 11 FC C2 04 0564*  	ld de,filedata
048341 01 00 00 01 0565*  	ld bc,65536
048345 3E 01       0566*  	ld a,mos_load
048347 5B CF       0567*  	RST.LIL 08h
048349 21 55 11 00 0568*  	ld hl,BUF_4437
04834D 01 0A 00 00 0569*  	ld bc,10
048351 11 12 00 00 0570*  	ld de,18
048355 DD 21 B4 00 0571*  	ld ix,180
       00          
04835A CD 6D B8 04 0572*  	call vdu_load_img
04835E             0573*  
04835E 21 B0 8A 04 0574*  	ld hl,Fhonda086
048362 11 FC C2 04 0575*  	ld de,filedata
048366 01 00 00 01 0576*  	ld bc,65536
04836A 3E 01       0577*  	ld a,mos_load
04836C 5B CF       0578*  	RST.LIL 08h
04836E 21 56 11 00 0579*  	ld hl,BUF_4438
048372 01 0A 00 00 0580*  	ld bc,10
048376 11 12 00 00 0581*  	ld de,18
04837A DD 21 B4 00 0582*  	ld ix,180
       00          
04837F CD 6D B8 04 0583*  	call vdu_load_img
048383             0584*  
048383 21 C6 8A 04 0585*  	ld hl,Fhonda087
048387 11 FC C2 04 0586*  	ld de,filedata
04838B 01 00 00 01 0587*  	ld bc,65536
04838F 3E 01       0588*  	ld a,mos_load
048391 5B CF       0589*  	RST.LIL 08h
048393 21 57 11 00 0590*  	ld hl,BUF_4439
048397 01 10 00 00 0591*  	ld bc,16
04839B 11 12 00 00 0592*  	ld de,18
04839F DD 21 20 01 0593*  	ld ix,288
       00          
0483A4 CD 6D B8 04 0594*  	call vdu_load_img
0483A8             0595*  
0483A8 21 DC 8A 04 0596*  	ld hl,Fhonda088
0483AC 11 FC C2 04 0597*  	ld de,filedata
0483B0 01 00 00 01 0598*  	ld bc,65536
0483B4 3E 01       0599*  	ld a,mos_load
0483B6 5B CF       0600*  	RST.LIL 08h
0483B8 21 58 11 00 0601*  	ld hl,BUF_4440
0483BC 01 0A 00 00 0602*  	ld bc,10
0483C0 11 12 00 00 0603*  	ld de,18
0483C4 DD 21 B4 00 0604*  	ld ix,180
       00          
0483C9 CD 6D B8 04 0605*  	call vdu_load_img
0483CD             0606*  
0483CD 21 F2 8A 04 0607*  	ld hl,Fhonda089
0483D1 11 FC C2 04 0608*  	ld de,filedata
0483D5 01 00 00 01 0609*  	ld bc,65536
0483D9 3E 01       0610*  	ld a,mos_load
0483DB 5B CF       0611*  	RST.LIL 08h
0483DD 21 59 11 00 0612*  	ld hl,BUF_4441
0483E1 01 0A 00 00 0613*  	ld bc,10
0483E5 11 12 00 00 0614*  	ld de,18
0483E9 DD 21 B4 00 0615*  	ld ix,180
       00          
0483EE CD 6D B8 04 0616*  	call vdu_load_img
0483F2             0617*  
0483F2 21 08 8B 04 0618*  	ld hl,Fhonda090
0483F6 11 FC C2 04 0619*  	ld de,filedata
0483FA 01 00 00 01 0620*  	ld bc,65536
0483FE 3E 01       0621*  	ld a,mos_load
048400 5B CF       0622*  	RST.LIL 08h
048402 21 5A 11 00 0623*  	ld hl,BUF_4442
048406 01 09 00 00 0624*  	ld bc,9
04840A 11 12 00 00 0625*  	ld de,18
04840E DD 21 A2 00 0626*  	ld ix,162
       00          
048413 CD 6D B8 04 0627*  	call vdu_load_img
048417             0628*  ; Missing character 91
048417             0629*  ; Missing character 92
048417             0630*  ; Missing character 93
048417             0631*  ; Missing character 94
048417             0632*  ; Missing character 95
048417             0633*  ; Missing character 96
048417             0634*  
048417 21 1E 8B 04 0635*  	ld hl,Fhonda097
04841B 11 FC C2 04 0636*  	ld de,filedata
04841F 01 00 00 01 0637*  	ld bc,65536
048423 3E 01       0638*  	ld a,mos_load
048425 5B CF       0639*  	RST.LIL 08h
048427 21 61 11 00 0640*  	ld hl,BUF_4449
04842B 01 08 00 00 0641*  	ld bc,8
04842F 11 0C 00 00 0642*  	ld de,12
048433 DD 21 60 00 0643*  	ld ix,96
       00          
048438 CD 6D B8 04 0644*  	call vdu_load_img
04843C             0645*  
04843C 21 34 8B 04 0646*  	ld hl,Fhonda098
048440 11 FC C2 04 0647*  	ld de,filedata
048444 01 00 00 01 0648*  	ld bc,65536
048448 3E 01       0649*  	ld a,mos_load
04844A 5B CF       0650*  	RST.LIL 08h
04844C 21 62 11 00 0651*  	ld hl,BUF_4450
048450 01 09 00 00 0652*  	ld bc,9
048454 11 12 00 00 0653*  	ld de,18
048458 DD 21 A2 00 0654*  	ld ix,162
       00          
04845D CD 6D B8 04 0655*  	call vdu_load_img
048461             0656*  
048461 21 4A 8B 04 0657*  	ld hl,Fhonda099
048465 11 FC C2 04 0658*  	ld de,filedata
048469 01 00 00 01 0659*  	ld bc,65536
04846D 3E 01       0660*  	ld a,mos_load
04846F 5B CF       0661*  	RST.LIL 08h
048471 21 63 11 00 0662*  	ld hl,BUF_4451
048475 01 07 00 00 0663*  	ld bc,7
048479 11 0C 00 00 0664*  	ld de,12
04847D DD 21 54 00 0665*  	ld ix,84
       00          
048482 CD 6D B8 04 0666*  	call vdu_load_img
048486             0667*  
048486 21 60 8B 04 0668*  	ld hl,Fhonda100
04848A 11 FC C2 04 0669*  	ld de,filedata
04848E 01 00 00 01 0670*  	ld bc,65536
048492 3E 01       0671*  	ld a,mos_load
048494 5B CF       0672*  	RST.LIL 08h
048496 21 64 11 00 0673*  	ld hl,BUF_4452
04849A 01 09 00 00 0674*  	ld bc,9
04849E 11 12 00 00 0675*  	ld de,18
0484A2 DD 21 A2 00 0676*  	ld ix,162
       00          
0484A7 CD 6D B8 04 0677*  	call vdu_load_img
0484AB             0678*  
0484AB 21 76 8B 04 0679*  	ld hl,Fhonda101
0484AF 11 FC C2 04 0680*  	ld de,filedata
0484B3 01 00 00 01 0681*  	ld bc,65536
0484B7 3E 01       0682*  	ld a,mos_load
0484B9 5B CF       0683*  	RST.LIL 08h
0484BB 21 65 11 00 0684*  	ld hl,BUF_4453
0484BF 01 08 00 00 0685*  	ld bc,8
0484C3 11 0C 00 00 0686*  	ld de,12
0484C7 DD 21 60 00 0687*  	ld ix,96
       00          
0484CC CD 6D B8 04 0688*  	call vdu_load_img
0484D0             0689*  
0484D0 21 8C 8B 04 0690*  	ld hl,Fhonda102
0484D4 11 FC C2 04 0691*  	ld de,filedata
0484D8 01 00 00 01 0692*  	ld bc,65536
0484DC 3E 01       0693*  	ld a,mos_load
0484DE 5B CF       0694*  	RST.LIL 08h
0484E0 21 66 11 00 0695*  	ld hl,BUF_4454
0484E4 01 09 00 00 0696*  	ld bc,9
0484E8 11 12 00 00 0697*  	ld de,18
0484EC DD 21 A2 00 0698*  	ld ix,162
       00          
0484F1 CD 6D B8 04 0699*  	call vdu_load_img
0484F5             0700*  
0484F5 21 A2 8B 04 0701*  	ld hl,Fhonda103
0484F9 11 FC C2 04 0702*  	ld de,filedata
0484FD 01 00 00 01 0703*  	ld bc,65536
048501 3E 01       0704*  	ld a,mos_load
048503 5B CF       0705*  	RST.LIL 08h
048505 21 67 11 00 0706*  	ld hl,BUF_4455
048509 01 09 00 00 0707*  	ld bc,9
04850D 11 12 00 00 0708*  	ld de,18
048511 DD 21 A2 00 0709*  	ld ix,162
       00          
048516 CD 6D B8 04 0710*  	call vdu_load_img
04851A             0711*  
04851A 21 B8 8B 04 0712*  	ld hl,Fhonda104
04851E 11 FC C2 04 0713*  	ld de,filedata
048522 01 00 00 01 0714*  	ld bc,65536
048526 3E 01       0715*  	ld a,mos_load
048528 5B CF       0716*  	RST.LIL 08h
04852A 21 68 11 00 0717*  	ld hl,BUF_4456
04852E 01 09 00 00 0718*  	ld bc,9
048532 11 12 00 00 0719*  	ld de,18
048536 DD 21 A2 00 0720*  	ld ix,162
       00          
04853B CD 6D B8 04 0721*  	call vdu_load_img
04853F             0722*  
04853F 21 CE 8B 04 0723*  	ld hl,Fhonda105
048543 11 FC C2 04 0724*  	ld de,filedata
048547 01 00 00 01 0725*  	ld bc,65536
04854B 3E 01       0726*  	ld a,mos_load
04854D 5B CF       0727*  	RST.LIL 08h
04854F 21 69 11 00 0728*  	ld hl,BUF_4457
048553 01 04 00 00 0729*  	ld bc,4
048557 11 12 00 00 0730*  	ld de,18
04855B DD 21 48 00 0731*  	ld ix,72
       00          
048560 CD 6D B8 04 0732*  	call vdu_load_img
048564             0733*  
048564 21 E4 8B 04 0734*  	ld hl,Fhonda106
048568 11 FC C2 04 0735*  	ld de,filedata
04856C 01 00 00 01 0736*  	ld bc,65536
048570 3E 01       0737*  	ld a,mos_load
048572 5B CF       0738*  	RST.LIL 08h
048574 21 6A 11 00 0739*  	ld hl,BUF_4458
048578 01 08 00 00 0740*  	ld bc,8
04857C 11 18 00 00 0741*  	ld de,24
048580 DD 21 C0 00 0742*  	ld ix,192
       00          
048585 CD 6D B8 04 0743*  	call vdu_load_img
048589             0744*  
048589 21 FA 8B 04 0745*  	ld hl,Fhonda107
04858D 11 FC C2 04 0746*  	ld de,filedata
048591 01 00 00 01 0747*  	ld bc,65536
048595 3E 01       0748*  	ld a,mos_load
048597 5B CF       0749*  	RST.LIL 08h
048599 21 6B 11 00 0750*  	ld hl,BUF_4459
04859D 01 09 00 00 0751*  	ld bc,9
0485A1 11 12 00 00 0752*  	ld de,18
0485A5 DD 21 A2 00 0753*  	ld ix,162
       00          
0485AA CD 6D B8 04 0754*  	call vdu_load_img
0485AE             0755*  
0485AE 21 10 8C 04 0756*  	ld hl,Fhonda108
0485B2 11 FC C2 04 0757*  	ld de,filedata
0485B6 01 00 00 01 0758*  	ld bc,65536
0485BA 3E 01       0759*  	ld a,mos_load
0485BC 5B CF       0760*  	RST.LIL 08h
0485BE 21 6C 11 00 0761*  	ld hl,BUF_4460
0485C2 01 03 00 00 0762*  	ld bc,3
0485C6 11 12 00 00 0763*  	ld de,18
0485CA DD 21 36 00 0764*  	ld ix,54
       00          
0485CF CD 6D B8 04 0765*  	call vdu_load_img
0485D3             0766*  
0485D3 21 26 8C 04 0767*  	ld hl,Fhonda109
0485D7 11 FC C2 04 0768*  	ld de,filedata
0485DB 01 00 00 01 0769*  	ld bc,65536
0485DF 3E 01       0770*  	ld a,mos_load
0485E1 5B CF       0771*  	RST.LIL 08h
0485E3 21 6D 11 00 0772*  	ld hl,BUF_4461
0485E7 01 0E 00 00 0773*  	ld bc,14
0485EB 11 0D 00 00 0774*  	ld de,13
0485EF DD 21 B6 00 0775*  	ld ix,182
       00          
0485F4 CD 6D B8 04 0776*  	call vdu_load_img
0485F8             0777*  
0485F8 21 3C 8C 04 0778*  	ld hl,Fhonda110
0485FC 11 FC C2 04 0779*  	ld de,filedata
048600 01 00 00 01 0780*  	ld bc,65536
048604 3E 01       0781*  	ld a,mos_load
048606 5B CF       0782*  	RST.LIL 08h
048608 21 6E 11 00 0783*  	ld hl,BUF_4462
04860C 01 09 00 00 0784*  	ld bc,9
048610 11 0C 00 00 0785*  	ld de,12
048614 DD 21 6C 00 0786*  	ld ix,108
       00          
048619 CD 6D B8 04 0787*  	call vdu_load_img
04861D             0788*  
04861D 21 52 8C 04 0789*  	ld hl,Fhonda111
048621 11 FC C2 04 0790*  	ld de,filedata
048625 01 00 00 01 0791*  	ld bc,65536
048629 3E 01       0792*  	ld a,mos_load
04862B 5B CF       0793*  	RST.LIL 08h
04862D 21 6F 11 00 0794*  	ld hl,BUF_4463
048631 01 09 00 00 0795*  	ld bc,9
048635 11 0C 00 00 0796*  	ld de,12
048639 DD 21 6C 00 0797*  	ld ix,108
       00          
04863E CD 6D B8 04 0798*  	call vdu_load_img
048642             0799*  
048642 21 68 8C 04 0800*  	ld hl,Fhonda112
048646 11 FC C2 04 0801*  	ld de,filedata
04864A 01 00 00 01 0802*  	ld bc,65536
04864E 3E 01       0803*  	ld a,mos_load
048650 5B CF       0804*  	RST.LIL 08h
048652 21 70 11 00 0805*  	ld hl,BUF_4464
048656 01 09 00 00 0806*  	ld bc,9
04865A 11 12 00 00 0807*  	ld de,18
04865E DD 21 A2 00 0808*  	ld ix,162
       00          
048663 CD 6D B8 04 0809*  	call vdu_load_img
048667             0810*  
048667 21 7E 8C 04 0811*  	ld hl,Fhonda113
04866B 11 FC C2 04 0812*  	ld de,filedata
04866F 01 00 00 01 0813*  	ld bc,65536
048673 3E 01       0814*  	ld a,mos_load
048675 5B CF       0815*  	RST.LIL 08h
048677 21 71 11 00 0816*  	ld hl,BUF_4465
04867B 01 09 00 00 0817*  	ld bc,9
04867F 11 12 00 00 0818*  	ld de,18
048683 DD 21 A2 00 0819*  	ld ix,162
       00          
048688 CD 6D B8 04 0820*  	call vdu_load_img
04868C             0821*  
04868C 21 94 8C 04 0822*  	ld hl,Fhonda114
048690 11 FC C2 04 0823*  	ld de,filedata
048694 01 00 00 01 0824*  	ld bc,65536
048698 3E 01       0825*  	ld a,mos_load
04869A 5B CF       0826*  	RST.LIL 08h
04869C 21 72 11 00 0827*  	ld hl,BUF_4466
0486A0 01 06 00 00 0828*  	ld bc,6
0486A4 11 0D 00 00 0829*  	ld de,13
0486A8 DD 21 4E 00 0830*  	ld ix,78
       00          
0486AD CD 6D B8 04 0831*  	call vdu_load_img
0486B1             0832*  
0486B1 21 AA 8C 04 0833*  	ld hl,Fhonda115
0486B5 11 FC C2 04 0834*  	ld de,filedata
0486B9 01 00 00 01 0835*  	ld bc,65536
0486BD 3E 01       0836*  	ld a,mos_load
0486BF 5B CF       0837*  	RST.LIL 08h
0486C1 21 73 11 00 0838*  	ld hl,BUF_4467
0486C5 01 08 00 00 0839*  	ld bc,8
0486C9 11 0D 00 00 0840*  	ld de,13
0486CD DD 21 68 00 0841*  	ld ix,104
       00          
0486D2 CD 6D B8 04 0842*  	call vdu_load_img
0486D6             0843*  
0486D6 21 C0 8C 04 0844*  	ld hl,Fhonda116
0486DA 11 FC C2 04 0845*  	ld de,filedata
0486DE 01 00 00 01 0846*  	ld bc,65536
0486E2 3E 01       0847*  	ld a,mos_load
0486E4 5B CF       0848*  	RST.LIL 08h
0486E6 21 74 11 00 0849*  	ld hl,BUF_4468
0486EA 01 07 00 00 0850*  	ld bc,7
0486EE 11 0F 00 00 0851*  	ld de,15
0486F2 DD 21 69 00 0852*  	ld ix,105
       00          
0486F7 CD 6D B8 04 0853*  	call vdu_load_img
0486FB             0854*  
0486FB 21 D6 8C 04 0855*  	ld hl,Fhonda117
0486FF 11 FC C2 04 0856*  	ld de,filedata
048703 01 00 00 01 0857*  	ld bc,65536
048707 3E 01       0858*  	ld a,mos_load
048709 5B CF       0859*  	RST.LIL 08h
04870B 21 75 11 00 0860*  	ld hl,BUF_4469
04870F 01 09 00 00 0861*  	ld bc,9
048713 11 0C 00 00 0862*  	ld de,12
048717 DD 21 6C 00 0863*  	ld ix,108
       00          
04871C CD 6D B8 04 0864*  	call vdu_load_img
048720             0865*  
048720 21 EC 8C 04 0866*  	ld hl,Fhonda118
048724 11 FC C2 04 0867*  	ld de,filedata
048728 01 00 00 01 0868*  	ld bc,65536
04872C 3E 01       0869*  	ld a,mos_load
04872E 5B CF       0870*  	RST.LIL 08h
048730 21 76 11 00 0871*  	ld hl,BUF_4470
048734 01 09 00 00 0872*  	ld bc,9
048738 11 0C 00 00 0873*  	ld de,12
04873C DD 21 6C 00 0874*  	ld ix,108
       00          
048741 CD 6D B8 04 0875*  	call vdu_load_img
048745             0876*  
048745 21 02 8D 04 0877*  	ld hl,Fhonda119
048749 11 FC C2 04 0878*  	ld de,filedata
04874D 01 00 00 01 0879*  	ld bc,65536
048751 3E 01       0880*  	ld a,mos_load
048753 5B CF       0881*  	RST.LIL 08h
048755 21 77 11 00 0882*  	ld hl,BUF_4471
048759 01 0E 00 00 0883*  	ld bc,14
04875D 11 0C 00 00 0884*  	ld de,12
048761 DD 21 A8 00 0885*  	ld ix,168
       00          
048766 CD 6D B8 04 0886*  	call vdu_load_img
04876A             0887*  
04876A 21 18 8D 04 0888*  	ld hl,Fhonda120
04876E 11 FC C2 04 0889*  	ld de,filedata
048772 01 00 00 01 0890*  	ld bc,65536
048776 3E 01       0891*  	ld a,mos_load
048778 5B CF       0892*  	RST.LIL 08h
04877A 21 78 11 00 0893*  	ld hl,BUF_4472
04877E 01 09 00 00 0894*  	ld bc,9
048782 11 0C 00 00 0895*  	ld de,12
048786 DD 21 6C 00 0896*  	ld ix,108
       00          
04878B CD 6D B8 04 0897*  	call vdu_load_img
04878F             0898*  
04878F 21 2E 8D 04 0899*  	ld hl,Fhonda121
048793 11 FC C2 04 0900*  	ld de,filedata
048797 01 00 00 01 0901*  	ld bc,65536
04879B 3E 01       0902*  	ld a,mos_load
04879D 5B CF       0903*  	RST.LIL 08h
04879F 21 79 11 00 0904*  	ld hl,BUF_4473
0487A3 01 09 00 00 0905*  	ld bc,9
0487A7 11 11 00 00 0906*  	ld de,17
0487AB DD 21 99 00 0907*  	ld ix,153
       00          
0487B0 CD 6D B8 04 0908*  	call vdu_load_img
0487B4             0909*  
0487B4 21 44 8D 04 0910*  	ld hl,Fhonda122
0487B8 11 FC C2 04 0911*  	ld de,filedata
0487BC 01 00 00 01 0912*  	ld bc,65536
0487C0 3E 01       0913*  	ld a,mos_load
0487C2 5B CF       0914*  	RST.LIL 08h
0487C4 21 7A 11 00 0915*  	ld hl,BUF_4474
0487C8 01 09 00 00 0916*  	ld bc,9
0487CC 11 0C 00 00 0917*  	ld de,12
0487D0 DD 21 6C 00 0918*  	ld ix,108
       00          
0487D5 CD 6D B8 04 0919*  	call vdu_load_img
0487D9             0920*  
0487D9 C9          0921*  	ret
0487DA             0922*  
0487DA 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
0487F0 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
048806 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
04881C 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
048832 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
048848 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
04885E 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
048874 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
04888A 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
0488A0 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0488B6 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
0488CC 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
0488E2 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
0488F8 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
04890E 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
048924 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
04893A 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
048950 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
048966 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
04897C 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
048992 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0489A8 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
0489BE 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
0489D4 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
0489EA 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
048A00 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
048A16 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
048A2C 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
048A42 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
048A58 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
048A6E 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
048A84 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
048A9A 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
048AB0 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
048AC6 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
048ADC 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
048AF2 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
048B08 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
048B1E 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
048B34 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
048B4A 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
048B60 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
048B76 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
048B8C 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
048BA2 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
048BB8 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
048BCE 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
048BE4 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
048BFA 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
048C10 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
048C26 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
048C3C 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
048C52 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
048C68 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
048C7E 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
048C94 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
048CAA 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
048CC0 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
048CD6 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
048CEC 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
048D02 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
048D18 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
048D2E 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
048D44 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
048D5A             0019   	include "src/asm/font_retro_computer.asm"
048D5A             0001*  ; Bitmap indices:
048D5A             0002*  BUF_4128: equ 0x1020 ; 32
048D5A             0003*  BUF_4129: equ 0x1021 ; 33 !
048D5A             0004*  ; Missing character 34 "
048D5A             0005*  ; Missing character 35 #
048D5A             0006*  ; Missing character 36 $
048D5A             0007*  ; Missing character 37 %
048D5A             0008*  ; Missing character 38 &
048D5A             0009*  ; Missing character 39 '
048D5A             0010*  ; Missing character 40 (
048D5A             0011*  ; Missing character 41 )
048D5A             0012*  ; Missing character 42 *
048D5A             0013*  ; Missing character 43 +
048D5A             0014*  ; Missing character 44 ,
048D5A             0015*  ; Missing character 45 -
048D5A             0016*  ; Missing character 46 .
048D5A             0017*  ; Missing character 47 /
048D5A             0018*  BUF_4144: equ 0x1030 ; 48 0
048D5A             0019*  BUF_4145: equ 0x1031 ; 49 1
048D5A             0020*  BUF_4146: equ 0x1032 ; 50 2
048D5A             0021*  BUF_4147: equ 0x1033 ; 51 3
048D5A             0022*  BUF_4148: equ 0x1034 ; 52 4
048D5A             0023*  BUF_4149: equ 0x1035 ; 53 5
048D5A             0024*  BUF_4150: equ 0x1036 ; 54 6
048D5A             0025*  BUF_4151: equ 0x1037 ; 55 7
048D5A             0026*  BUF_4152: equ 0x1038 ; 56 8
048D5A             0027*  BUF_4153: equ 0x1039 ; 57 9
048D5A             0028*  ; Missing character 58 :
048D5A             0029*  ; Missing character 59 ;
048D5A             0030*  ; Missing character 60 <
048D5A             0031*  ; Missing character 61 =
048D5A             0032*  ; Missing character 62 >
048D5A             0033*  BUF_4159: equ 0x103F ; 63 ?
048D5A             0034*  ; Missing character 64 @
048D5A             0035*  BUF_4161: equ 0x1041 ; 65 A
048D5A             0036*  BUF_4162: equ 0x1042 ; 66 B
048D5A             0037*  BUF_4163: equ 0x1043 ; 67 C
048D5A             0038*  BUF_4164: equ 0x1044 ; 68 D
048D5A             0039*  BUF_4165: equ 0x1045 ; 69 E
048D5A             0040*  BUF_4166: equ 0x1046 ; 70 F
048D5A             0041*  BUF_4167: equ 0x1047 ; 71 G
048D5A             0042*  BUF_4168: equ 0x1048 ; 72 H
048D5A             0043*  BUF_4169: equ 0x1049 ; 73 I
048D5A             0044*  BUF_4170: equ 0x104A ; 74 J
048D5A             0045*  BUF_4171: equ 0x104B ; 75 K
048D5A             0046*  BUF_4172: equ 0x104C ; 76 L
048D5A             0047*  BUF_4173: equ 0x104D ; 77 M
048D5A             0048*  BUF_4174: equ 0x104E ; 78 N
048D5A             0049*  BUF_4175: equ 0x104F ; 79 O
048D5A             0050*  BUF_4176: equ 0x1050 ; 80 P
048D5A             0051*  BUF_4177: equ 0x1051 ; 81 Q
048D5A             0052*  BUF_4178: equ 0x1052 ; 82 R
048D5A             0053*  BUF_4179: equ 0x1053 ; 83 S
048D5A             0054*  BUF_4180: equ 0x1054 ; 84 T
048D5A             0055*  BUF_4181: equ 0x1055 ; 85 U
048D5A             0056*  BUF_4182: equ 0x1056 ; 86 V
048D5A             0057*  BUF_4183: equ 0x1057 ; 87 W
048D5A             0058*  BUF_4184: equ 0x1058 ; 88 X
048D5A             0059*  BUF_4185: equ 0x1059 ; 89 Y
048D5A             0060*  BUF_4186: equ 0x105A ; 90 Z
048D5A             0061*  ; Missing character 91 [
048D5A             0062*  ; Missing character 92 \
048D5A             0063*  ; Missing character 93 ]
048D5A             0064*  ; Missing character 94 ^
048D5A             0065*  ; Missing character 95 _
048D5A             0066*  ; Missing character 96 `
048D5A             0067*  ; Missing character 97 a
048D5A             0068*  ; Missing character 98 b
048D5A             0069*  ; Missing character 99 c
048D5A             0070*  ; Missing character 100 d
048D5A             0071*  ; Missing character 101 e
048D5A             0072*  ; Missing character 102 f
048D5A             0073*  ; Missing character 103 g
048D5A             0074*  ; Missing character 104 h
048D5A             0075*  ; Missing character 105 i
048D5A             0076*  ; Missing character 106 j
048D5A             0077*  ; Missing character 107 k
048D5A             0078*  ; Missing character 108 l
048D5A             0079*  ; Missing character 109 m
048D5A             0080*  ; Missing character 110 n
048D5A             0081*  ; Missing character 111 o
048D5A             0082*  ; Missing character 112 p
048D5A             0083*  ; Missing character 113 q
048D5A             0084*  ; Missing character 114 r
048D5A             0085*  ; Missing character 115 s
048D5A             0086*  ; Missing character 116 t
048D5A             0087*  ; Missing character 117 u
048D5A             0088*  ; Missing character 118 v
048D5A             0089*  ; Missing character 119 w
048D5A             0090*  ; Missing character 120 x
048D5A             0091*  ; Missing character 121 y
048D5A             0092*  ; Missing character 122 z
048D5A             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
048D5A             0094*  font_retro_computer:
048D5A 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
048D60 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
048D66 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
048D6C 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
048D72 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
048D78 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
048D7E 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
048D84 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
048D8A 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
048D90 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
048D96 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
048D9C 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
048DA2 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
048DA8 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
048DAE 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
048DB4 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
048DBA 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
048DC0 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
048DC6 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
048DCC 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
048DD2 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
048DD8 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
048DDE 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
048DE4 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
048DEA 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
048DF0 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
048DF6 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
048DFC 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
048E02 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
048E08 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
048E0E 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
048E14 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
048E1A 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
048E20 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
048E26 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
048E2C 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
048E32 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
048E38 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
048E3E 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
048E44 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
048E4A 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
048E50 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
048E56 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
048E5C 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
048E62 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
048E68 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
048E6E 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
048E74 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
048E7A 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
048E80 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
048E86 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
048E8C 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
048E92 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
048E98 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
048E9E 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
048EA4 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
048EAA 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
048EB0 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
048EB6 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
048EBC 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
048EC2 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
048EC8 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
048ECE 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
048ED4 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
048EDA 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
048EE0 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
048EE6 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
048EEC 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
048EF2 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
048EF8 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
048EFE 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
048F04 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
048F0A 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
048F10 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
048F16 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
048F1C 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
048F22 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
048F28 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
048F2E 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
048F34 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
048F3A 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
048F40 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
048F46 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
048F4C 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
048F52 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
048F58 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
048F5E 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
048F64 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
048F6A 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
048F70 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
048F76 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
048F7C             0186*  
048F7C             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
048F7C             0188*  load_font_retro_computer:
048F7C             0189*  
048F7C 21 20 95 04 0190*  	ld hl,Frc032
048F80 11 FC C2 04 0191*  	ld de,filedata
048F84 01 00 00 01 0192*  	ld bc,65536
048F88 3E 01       0193*  	ld a,mos_load
048F8A 5B CF       0194*  	RST.LIL 08h
048F8C 21 20 10 00 0195*  	ld hl,BUF_4128
048F90 01 06 00 00 0196*  	ld bc,6
048F94 11 01 00 00 0197*  	ld de,1
048F98 DD 21 06 00 0198*  	ld ix,6
       00          
048F9D CD 6D B8 04 0199*  	call vdu_load_img
048FA1             0200*  
048FA1 21 33 95 04 0201*  	ld hl,Frc033
048FA5 11 FC C2 04 0202*  	ld de,filedata
048FA9 01 00 00 01 0203*  	ld bc,65536
048FAD 3E 01       0204*  	ld a,mos_load
048FAF 5B CF       0205*  	RST.LIL 08h
048FB1 21 21 10 00 0206*  	ld hl,BUF_4129
048FB5 01 03 00 00 0207*  	ld bc,3
048FB9 11 0E 00 00 0208*  	ld de,14
048FBD DD 21 2A 00 0209*  	ld ix,42
       00          
048FC2 CD 6D B8 04 0210*  	call vdu_load_img
048FC6             0211*  ; Missing character 34
048FC6             0212*  ; Missing character 35
048FC6             0213*  ; Missing character 36
048FC6             0214*  ; Missing character 37
048FC6             0215*  ; Missing character 38
048FC6             0216*  ; Missing character 39
048FC6             0217*  ; Missing character 40
048FC6             0218*  ; Missing character 41
048FC6             0219*  ; Missing character 42
048FC6             0220*  ; Missing character 43
048FC6             0221*  ; Missing character 44
048FC6             0222*  ; Missing character 45
048FC6             0223*  ; Missing character 46
048FC6             0224*  ; Missing character 47
048FC6             0225*  
048FC6 21 46 95 04 0226*  	ld hl,Frc048
048FCA 11 FC C2 04 0227*  	ld de,filedata
048FCE 01 00 00 01 0228*  	ld bc,65536
048FD2 3E 01       0229*  	ld a,mos_load
048FD4 5B CF       0230*  	RST.LIL 08h
048FD6 21 30 10 00 0231*  	ld hl,BUF_4144
048FDA 01 08 00 00 0232*  	ld bc,8
048FDE 11 0E 00 00 0233*  	ld de,14
048FE2 DD 21 70 00 0234*  	ld ix,112
       00          
048FE7 CD 6D B8 04 0235*  	call vdu_load_img
048FEB             0236*  
048FEB 21 59 95 04 0237*  	ld hl,Frc049
048FEF 11 FC C2 04 0238*  	ld de,filedata
048FF3 01 00 00 01 0239*  	ld bc,65536
048FF7 3E 01       0240*  	ld a,mos_load
048FF9 5B CF       0241*  	RST.LIL 08h
048FFB 21 31 10 00 0242*  	ld hl,BUF_4145
048FFF 01 08 00 00 0243*  	ld bc,8
049003 11 0E 00 00 0244*  	ld de,14
049007 DD 21 70 00 0245*  	ld ix,112
       00          
04900C CD 6D B8 04 0246*  	call vdu_load_img
049010             0247*  
049010 21 6C 95 04 0248*  	ld hl,Frc050
049014 11 FC C2 04 0249*  	ld de,filedata
049018 01 00 00 01 0250*  	ld bc,65536
04901C 3E 01       0251*  	ld a,mos_load
04901E 5B CF       0252*  	RST.LIL 08h
049020 21 32 10 00 0253*  	ld hl,BUF_4146
049024 01 08 00 00 0254*  	ld bc,8
049028 11 0E 00 00 0255*  	ld de,14
04902C DD 21 70 00 0256*  	ld ix,112
       00          
049031 CD 6D B8 04 0257*  	call vdu_load_img
049035             0258*  
049035 21 7F 95 04 0259*  	ld hl,Frc051
049039 11 FC C2 04 0260*  	ld de,filedata
04903D 01 00 00 01 0261*  	ld bc,65536
049041 3E 01       0262*  	ld a,mos_load
049043 5B CF       0263*  	RST.LIL 08h
049045 21 33 10 00 0264*  	ld hl,BUF_4147
049049 01 08 00 00 0265*  	ld bc,8
04904D 11 0E 00 00 0266*  	ld de,14
049051 DD 21 70 00 0267*  	ld ix,112
       00          
049056 CD 6D B8 04 0268*  	call vdu_load_img
04905A             0269*  
04905A 21 92 95 04 0270*  	ld hl,Frc052
04905E 11 FC C2 04 0271*  	ld de,filedata
049062 01 00 00 01 0272*  	ld bc,65536
049066 3E 01       0273*  	ld a,mos_load
049068 5B CF       0274*  	RST.LIL 08h
04906A 21 34 10 00 0275*  	ld hl,BUF_4148
04906E 01 08 00 00 0276*  	ld bc,8
049072 11 0E 00 00 0277*  	ld de,14
049076 DD 21 70 00 0278*  	ld ix,112
       00          
04907B CD 6D B8 04 0279*  	call vdu_load_img
04907F             0280*  
04907F 21 A5 95 04 0281*  	ld hl,Frc053
049083 11 FC C2 04 0282*  	ld de,filedata
049087 01 00 00 01 0283*  	ld bc,65536
04908B 3E 01       0284*  	ld a,mos_load
04908D 5B CF       0285*  	RST.LIL 08h
04908F 21 35 10 00 0286*  	ld hl,BUF_4149
049093 01 08 00 00 0287*  	ld bc,8
049097 11 0E 00 00 0288*  	ld de,14
04909B DD 21 70 00 0289*  	ld ix,112
       00          
0490A0 CD 6D B8 04 0290*  	call vdu_load_img
0490A4             0291*  
0490A4 21 B8 95 04 0292*  	ld hl,Frc054
0490A8 11 FC C2 04 0293*  	ld de,filedata
0490AC 01 00 00 01 0294*  	ld bc,65536
0490B0 3E 01       0295*  	ld a,mos_load
0490B2 5B CF       0296*  	RST.LIL 08h
0490B4 21 36 10 00 0297*  	ld hl,BUF_4150
0490B8 01 08 00 00 0298*  	ld bc,8
0490BC 11 0E 00 00 0299*  	ld de,14
0490C0 DD 21 70 00 0300*  	ld ix,112
       00          
0490C5 CD 6D B8 04 0301*  	call vdu_load_img
0490C9             0302*  
0490C9 21 CB 95 04 0303*  	ld hl,Frc055
0490CD 11 FC C2 04 0304*  	ld de,filedata
0490D1 01 00 00 01 0305*  	ld bc,65536
0490D5 3E 01       0306*  	ld a,mos_load
0490D7 5B CF       0307*  	RST.LIL 08h
0490D9 21 37 10 00 0308*  	ld hl,BUF_4151
0490DD 01 08 00 00 0309*  	ld bc,8
0490E1 11 0E 00 00 0310*  	ld de,14
0490E5 DD 21 70 00 0311*  	ld ix,112
       00          
0490EA CD 6D B8 04 0312*  	call vdu_load_img
0490EE             0313*  
0490EE 21 DE 95 04 0314*  	ld hl,Frc056
0490F2 11 FC C2 04 0315*  	ld de,filedata
0490F6 01 00 00 01 0316*  	ld bc,65536
0490FA 3E 01       0317*  	ld a,mos_load
0490FC 5B CF       0318*  	RST.LIL 08h
0490FE 21 38 10 00 0319*  	ld hl,BUF_4152
049102 01 08 00 00 0320*  	ld bc,8
049106 11 0E 00 00 0321*  	ld de,14
04910A DD 21 70 00 0322*  	ld ix,112
       00          
04910F CD 6D B8 04 0323*  	call vdu_load_img
049113             0324*  
049113 21 F1 95 04 0325*  	ld hl,Frc057
049117 11 FC C2 04 0326*  	ld de,filedata
04911B 01 00 00 01 0327*  	ld bc,65536
04911F 3E 01       0328*  	ld a,mos_load
049121 5B CF       0329*  	RST.LIL 08h
049123 21 39 10 00 0330*  	ld hl,BUF_4153
049127 01 08 00 00 0331*  	ld bc,8
04912B 11 0E 00 00 0332*  	ld de,14
04912F DD 21 70 00 0333*  	ld ix,112
       00          
049134 CD 6D B8 04 0334*  	call vdu_load_img
049138             0335*  ; Missing character 58
049138             0336*  ; Missing character 59
049138             0337*  ; Missing character 60
049138             0338*  ; Missing character 61
049138             0339*  ; Missing character 62
049138             0340*  
049138 21 04 96 04 0341*  	ld hl,Frc063
04913C 11 FC C2 04 0342*  	ld de,filedata
049140 01 00 00 01 0343*  	ld bc,65536
049144 3E 01       0344*  	ld a,mos_load
049146 5B CF       0345*  	RST.LIL 08h
049148 21 3F 10 00 0346*  	ld hl,BUF_4159
04914C 01 08 00 00 0347*  	ld bc,8
049150 11 0E 00 00 0348*  	ld de,14
049154 DD 21 70 00 0349*  	ld ix,112
       00          
049159 CD 6D B8 04 0350*  	call vdu_load_img
04915D             0351*  ; Missing character 64
04915D             0352*  
04915D 21 17 96 04 0353*  	ld hl,Frc065
049161 11 FC C2 04 0354*  	ld de,filedata
049165 01 00 00 01 0355*  	ld bc,65536
049169 3E 01       0356*  	ld a,mos_load
04916B 5B CF       0357*  	RST.LIL 08h
04916D 21 41 10 00 0358*  	ld hl,BUF_4161
049171 01 07 00 00 0359*  	ld bc,7
049175 11 0E 00 00 0360*  	ld de,14
049179 DD 21 62 00 0361*  	ld ix,98
       00          
04917E CD 6D B8 04 0362*  	call vdu_load_img
049182             0363*  
049182 21 2A 96 04 0364*  	ld hl,Frc066
049186 11 FC C2 04 0365*  	ld de,filedata
04918A 01 00 00 01 0366*  	ld bc,65536
04918E 3E 01       0367*  	ld a,mos_load
049190 5B CF       0368*  	RST.LIL 08h
049192 21 42 10 00 0369*  	ld hl,BUF_4162
049196 01 08 00 00 0370*  	ld bc,8
04919A 11 0E 00 00 0371*  	ld de,14
04919E DD 21 70 00 0372*  	ld ix,112
       00          
0491A3 CD 6D B8 04 0373*  	call vdu_load_img
0491A7             0374*  
0491A7 21 3D 96 04 0375*  	ld hl,Frc067
0491AB 11 FC C2 04 0376*  	ld de,filedata
0491AF 01 00 00 01 0377*  	ld bc,65536
0491B3 3E 01       0378*  	ld a,mos_load
0491B5 5B CF       0379*  	RST.LIL 08h
0491B7 21 43 10 00 0380*  	ld hl,BUF_4163
0491BB 01 07 00 00 0381*  	ld bc,7
0491BF 11 0E 00 00 0382*  	ld de,14
0491C3 DD 21 62 00 0383*  	ld ix,98
       00          
0491C8 CD 6D B8 04 0384*  	call vdu_load_img
0491CC             0385*  
0491CC 21 50 96 04 0386*  	ld hl,Frc068
0491D0 11 FC C2 04 0387*  	ld de,filedata
0491D4 01 00 00 01 0388*  	ld bc,65536
0491D8 3E 01       0389*  	ld a,mos_load
0491DA 5B CF       0390*  	RST.LIL 08h
0491DC 21 44 10 00 0391*  	ld hl,BUF_4164
0491E0 01 08 00 00 0392*  	ld bc,8
0491E4 11 0E 00 00 0393*  	ld de,14
0491E8 DD 21 70 00 0394*  	ld ix,112
       00          
0491ED CD 6D B8 04 0395*  	call vdu_load_img
0491F1             0396*  
0491F1 21 63 96 04 0397*  	ld hl,Frc069
0491F5 11 FC C2 04 0398*  	ld de,filedata
0491F9 01 00 00 01 0399*  	ld bc,65536
0491FD 3E 01       0400*  	ld a,mos_load
0491FF 5B CF       0401*  	RST.LIL 08h
049201 21 45 10 00 0402*  	ld hl,BUF_4165
049205 01 08 00 00 0403*  	ld bc,8
049209 11 0E 00 00 0404*  	ld de,14
04920D DD 21 70 00 0405*  	ld ix,112
       00          
049212 CD 6D B8 04 0406*  	call vdu_load_img
049216             0407*  
049216 21 76 96 04 0408*  	ld hl,Frc070
04921A 11 FC C2 04 0409*  	ld de,filedata
04921E 01 00 00 01 0410*  	ld bc,65536
049222 3E 01       0411*  	ld a,mos_load
049224 5B CF       0412*  	RST.LIL 08h
049226 21 46 10 00 0413*  	ld hl,BUF_4166
04922A 01 07 00 00 0414*  	ld bc,7
04922E 11 0E 00 00 0415*  	ld de,14
049232 DD 21 62 00 0416*  	ld ix,98
       00          
049237 CD 6D B8 04 0417*  	call vdu_load_img
04923B             0418*  
04923B 21 89 96 04 0419*  	ld hl,Frc071
04923F 11 FC C2 04 0420*  	ld de,filedata
049243 01 00 00 01 0421*  	ld bc,65536
049247 3E 01       0422*  	ld a,mos_load
049249 5B CF       0423*  	RST.LIL 08h
04924B 21 47 10 00 0424*  	ld hl,BUF_4167
04924F 01 08 00 00 0425*  	ld bc,8
049253 11 0E 00 00 0426*  	ld de,14
049257 DD 21 70 00 0427*  	ld ix,112
       00          
04925C CD 6D B8 04 0428*  	call vdu_load_img
049260             0429*  
049260 21 9C 96 04 0430*  	ld hl,Frc072
049264 11 FC C2 04 0431*  	ld de,filedata
049268 01 00 00 01 0432*  	ld bc,65536
04926C 3E 01       0433*  	ld a,mos_load
04926E 5B CF       0434*  	RST.LIL 08h
049270 21 48 10 00 0435*  	ld hl,BUF_4168
049274 01 07 00 00 0436*  	ld bc,7
049278 11 0E 00 00 0437*  	ld de,14
04927C DD 21 62 00 0438*  	ld ix,98
       00          
049281 CD 6D B8 04 0439*  	call vdu_load_img
049285             0440*  
049285 21 AF 96 04 0441*  	ld hl,Frc073
049289 11 FC C2 04 0442*  	ld de,filedata
04928D 01 00 00 01 0443*  	ld bc,65536
049291 3E 01       0444*  	ld a,mos_load
049293 5B CF       0445*  	RST.LIL 08h
049295 21 49 10 00 0446*  	ld hl,BUF_4169
049299 01 07 00 00 0447*  	ld bc,7
04929D 11 0E 00 00 0448*  	ld de,14
0492A1 DD 21 62 00 0449*  	ld ix,98
       00          
0492A6 CD 6D B8 04 0450*  	call vdu_load_img
0492AA             0451*  
0492AA 21 C2 96 04 0452*  	ld hl,Frc074
0492AE 11 FC C2 04 0453*  	ld de,filedata
0492B2 01 00 00 01 0454*  	ld bc,65536
0492B6 3E 01       0455*  	ld a,mos_load
0492B8 5B CF       0456*  	RST.LIL 08h
0492BA 21 4A 10 00 0457*  	ld hl,BUF_4170
0492BE 01 08 00 00 0458*  	ld bc,8
0492C2 11 0E 00 00 0459*  	ld de,14
0492C6 DD 21 70 00 0460*  	ld ix,112
       00          
0492CB CD 6D B8 04 0461*  	call vdu_load_img
0492CF             0462*  
0492CF 21 D5 96 04 0463*  	ld hl,Frc075
0492D3 11 FC C2 04 0464*  	ld de,filedata
0492D7 01 00 00 01 0465*  	ld bc,65536
0492DB 3E 01       0466*  	ld a,mos_load
0492DD 5B CF       0467*  	RST.LIL 08h
0492DF 21 4B 10 00 0468*  	ld hl,BUF_4171
0492E3 01 07 00 00 0469*  	ld bc,7
0492E7 11 0E 00 00 0470*  	ld de,14
0492EB DD 21 62 00 0471*  	ld ix,98
       00          
0492F0 CD 6D B8 04 0472*  	call vdu_load_img
0492F4             0473*  
0492F4 21 E8 96 04 0474*  	ld hl,Frc076
0492F8 11 FC C2 04 0475*  	ld de,filedata
0492FC 01 00 00 01 0476*  	ld bc,65536
049300 3E 01       0477*  	ld a,mos_load
049302 5B CF       0478*  	RST.LIL 08h
049304 21 4C 10 00 0479*  	ld hl,BUF_4172
049308 01 08 00 00 0480*  	ld bc,8
04930C 11 0E 00 00 0481*  	ld de,14
049310 DD 21 70 00 0482*  	ld ix,112
       00          
049315 CD 6D B8 04 0483*  	call vdu_load_img
049319             0484*  
049319 21 FB 96 04 0485*  	ld hl,Frc077
04931D 11 FC C2 04 0486*  	ld de,filedata
049321 01 00 00 01 0487*  	ld bc,65536
049325 3E 01       0488*  	ld a,mos_load
049327 5B CF       0489*  	RST.LIL 08h
049329 21 4D 10 00 0490*  	ld hl,BUF_4173
04932D 01 09 00 00 0491*  	ld bc,9
049331 11 0E 00 00 0492*  	ld de,14
049335 DD 21 7E 00 0493*  	ld ix,126
       00          
04933A CD 6D B8 04 0494*  	call vdu_load_img
04933E             0495*  
04933E 21 0E 97 04 0496*  	ld hl,Frc078
049342 11 FC C2 04 0497*  	ld de,filedata
049346 01 00 00 01 0498*  	ld bc,65536
04934A 3E 01       0499*  	ld a,mos_load
04934C 5B CF       0500*  	RST.LIL 08h
04934E 21 4E 10 00 0501*  	ld hl,BUF_4174
049352 01 07 00 00 0502*  	ld bc,7
049356 11 0E 00 00 0503*  	ld de,14
04935A DD 21 62 00 0504*  	ld ix,98
       00          
04935F CD 6D B8 04 0505*  	call vdu_load_img
049363             0506*  
049363 21 21 97 04 0507*  	ld hl,Frc079
049367 11 FC C2 04 0508*  	ld de,filedata
04936B 01 00 00 01 0509*  	ld bc,65536
04936F 3E 01       0510*  	ld a,mos_load
049371 5B CF       0511*  	RST.LIL 08h
049373 21 4F 10 00 0512*  	ld hl,BUF_4175
049377 01 08 00 00 0513*  	ld bc,8
04937B 11 0E 00 00 0514*  	ld de,14
04937F DD 21 70 00 0515*  	ld ix,112
       00          
049384 CD 6D B8 04 0516*  	call vdu_load_img
049388             0517*  
049388 21 34 97 04 0518*  	ld hl,Frc080
04938C 11 FC C2 04 0519*  	ld de,filedata
049390 01 00 00 01 0520*  	ld bc,65536
049394 3E 01       0521*  	ld a,mos_load
049396 5B CF       0522*  	RST.LIL 08h
049398 21 50 10 00 0523*  	ld hl,BUF_4176
04939C 01 07 00 00 0524*  	ld bc,7
0493A0 11 0E 00 00 0525*  	ld de,14
0493A4 DD 21 62 00 0526*  	ld ix,98
       00          
0493A9 CD 6D B8 04 0527*  	call vdu_load_img
0493AD             0528*  
0493AD 21 47 97 04 0529*  	ld hl,Frc081
0493B1 11 FC C2 04 0530*  	ld de,filedata
0493B5 01 00 00 01 0531*  	ld bc,65536
0493B9 3E 01       0532*  	ld a,mos_load
0493BB 5B CF       0533*  	RST.LIL 08h
0493BD 21 51 10 00 0534*  	ld hl,BUF_4177
0493C1 01 08 00 00 0535*  	ld bc,8
0493C5 11 0F 00 00 0536*  	ld de,15
0493C9 DD 21 78 00 0537*  	ld ix,120
       00          
0493CE CD 6D B8 04 0538*  	call vdu_load_img
0493D2             0539*  
0493D2 21 5A 97 04 0540*  	ld hl,Frc082
0493D6 11 FC C2 04 0541*  	ld de,filedata
0493DA 01 00 00 01 0542*  	ld bc,65536
0493DE 3E 01       0543*  	ld a,mos_load
0493E0 5B CF       0544*  	RST.LIL 08h
0493E2 21 52 10 00 0545*  	ld hl,BUF_4178
0493E6 01 08 00 00 0546*  	ld bc,8
0493EA 11 0E 00 00 0547*  	ld de,14
0493EE DD 21 70 00 0548*  	ld ix,112
       00          
0493F3 CD 6D B8 04 0549*  	call vdu_load_img
0493F7             0550*  
0493F7 21 6D 97 04 0551*  	ld hl,Frc083
0493FB 11 FC C2 04 0552*  	ld de,filedata
0493FF 01 00 00 01 0553*  	ld bc,65536
049403 3E 01       0554*  	ld a,mos_load
049405 5B CF       0555*  	RST.LIL 08h
049407 21 53 10 00 0556*  	ld hl,BUF_4179
04940B 01 08 00 00 0557*  	ld bc,8
04940F 11 0E 00 00 0558*  	ld de,14
049413 DD 21 70 00 0559*  	ld ix,112
       00          
049418 CD 6D B8 04 0560*  	call vdu_load_img
04941C             0561*  
04941C 21 80 97 04 0562*  	ld hl,Frc084
049420 11 FC C2 04 0563*  	ld de,filedata
049424 01 00 00 01 0564*  	ld bc,65536
049428 3E 01       0565*  	ld a,mos_load
04942A 5B CF       0566*  	RST.LIL 08h
04942C 21 54 10 00 0567*  	ld hl,BUF_4180
049430 01 07 00 00 0568*  	ld bc,7
049434 11 0E 00 00 0569*  	ld de,14
049438 DD 21 62 00 0570*  	ld ix,98
       00          
04943D CD 6D B8 04 0571*  	call vdu_load_img
049441             0572*  
049441 21 93 97 04 0573*  	ld hl,Frc085
049445 11 FC C2 04 0574*  	ld de,filedata
049449 01 00 00 01 0575*  	ld bc,65536
04944D 3E 01       0576*  	ld a,mos_load
04944F 5B CF       0577*  	RST.LIL 08h
049451 21 55 10 00 0578*  	ld hl,BUF_4181
049455 01 08 00 00 0579*  	ld bc,8
049459 11 0E 00 00 0580*  	ld de,14
04945D DD 21 70 00 0581*  	ld ix,112
       00          
049462 CD 6D B8 04 0582*  	call vdu_load_img
049466             0583*  
049466 21 A6 97 04 0584*  	ld hl,Frc086
04946A 11 FC C2 04 0585*  	ld de,filedata
04946E 01 00 00 01 0586*  	ld bc,65536
049472 3E 01       0587*  	ld a,mos_load
049474 5B CF       0588*  	RST.LIL 08h
049476 21 56 10 00 0589*  	ld hl,BUF_4182
04947A 01 07 00 00 0590*  	ld bc,7
04947E 11 0E 00 00 0591*  	ld de,14
049482 DD 21 62 00 0592*  	ld ix,98
       00          
049487 CD 6D B8 04 0593*  	call vdu_load_img
04948B             0594*  
04948B 21 B9 97 04 0595*  	ld hl,Frc087
04948F 11 FC C2 04 0596*  	ld de,filedata
049493 01 00 00 01 0597*  	ld bc,65536
049497 3E 01       0598*  	ld a,mos_load
049499 5B CF       0599*  	RST.LIL 08h
04949B 21 57 10 00 0600*  	ld hl,BUF_4183
04949F 01 0B 00 00 0601*  	ld bc,11
0494A3 11 0E 00 00 0602*  	ld de,14
0494A7 DD 21 9A 00 0603*  	ld ix,154
       00          
0494AC CD 6D B8 04 0604*  	call vdu_load_img
0494B0             0605*  
0494B0 21 CC 97 04 0606*  	ld hl,Frc088
0494B4 11 FC C2 04 0607*  	ld de,filedata
0494B8 01 00 00 01 0608*  	ld bc,65536
0494BC 3E 01       0609*  	ld a,mos_load
0494BE 5B CF       0610*  	RST.LIL 08h
0494C0 21 58 10 00 0611*  	ld hl,BUF_4184
0494C4 01 07 00 00 0612*  	ld bc,7
0494C8 11 0E 00 00 0613*  	ld de,14
0494CC DD 21 62 00 0614*  	ld ix,98
       00          
0494D1 CD 6D B8 04 0615*  	call vdu_load_img
0494D5             0616*  
0494D5 21 DF 97 04 0617*  	ld hl,Frc089
0494D9 11 FC C2 04 0618*  	ld de,filedata
0494DD 01 00 00 01 0619*  	ld bc,65536
0494E1 3E 01       0620*  	ld a,mos_load
0494E3 5B CF       0621*  	RST.LIL 08h
0494E5 21 59 10 00 0622*  	ld hl,BUF_4185
0494E9 01 08 00 00 0623*  	ld bc,8
0494ED 11 0E 00 00 0624*  	ld de,14
0494F1 DD 21 70 00 0625*  	ld ix,112
       00          
0494F6 CD 6D B8 04 0626*  	call vdu_load_img
0494FA             0627*  
0494FA 21 F2 97 04 0628*  	ld hl,Frc090
0494FE 11 FC C2 04 0629*  	ld de,filedata
049502 01 00 00 01 0630*  	ld bc,65536
049506 3E 01       0631*  	ld a,mos_load
049508 5B CF       0632*  	RST.LIL 08h
04950A 21 5A 10 00 0633*  	ld hl,BUF_4186
04950E 01 07 00 00 0634*  	ld bc,7
049512 11 0E 00 00 0635*  	ld de,14
049516 DD 21 62 00 0636*  	ld ix,98
       00          
04951B CD 6D B8 04 0637*  	call vdu_load_img
04951F             0638*  ; Missing character 91
04951F             0639*  ; Missing character 92
04951F             0640*  ; Missing character 93
04951F             0641*  ; Missing character 94
04951F             0642*  ; Missing character 95
04951F             0643*  ; Missing character 96
04951F             0644*  ; Missing character 97
04951F             0645*  ; Missing character 98
04951F             0646*  ; Missing character 99
04951F             0647*  ; Missing character 100
04951F             0648*  ; Missing character 101
04951F             0649*  ; Missing character 102
04951F             0650*  ; Missing character 103
04951F             0651*  ; Missing character 104
04951F             0652*  ; Missing character 105
04951F             0653*  ; Missing character 106
04951F             0654*  ; Missing character 107
04951F             0655*  ; Missing character 108
04951F             0656*  ; Missing character 109
04951F             0657*  ; Missing character 110
04951F             0658*  ; Missing character 111
04951F             0659*  ; Missing character 112
04951F             0660*  ; Missing character 113
04951F             0661*  ; Missing character 114
04951F             0662*  ; Missing character 115
04951F             0663*  ; Missing character 116
04951F             0664*  ; Missing character 117
04951F             0665*  ; Missing character 118
04951F             0666*  ; Missing character 119
04951F             0667*  ; Missing character 120
04951F             0668*  ; Missing character 121
04951F             0669*  ; Missing character 122
04951F             0670*  
04951F C9          0671*  	ret
049520             0672*  
049520 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
049533 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
049546 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
049559 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
04956C 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
04957F 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
049592 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
0495A5 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
0495B8 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
0495CB 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
0495DE 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
0495F1 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
049604 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
049617 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
04962A 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
04963D 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
049650 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
049663 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
049676 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
049689 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
04969C 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
0496AF 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
0496C2 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
0496D5 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
0496E8 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
0496FB 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
04970E 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
049721 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
049734 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
049747 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
04975A 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
04976D 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
049780 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
049793 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
0497A6 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
0497B9 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
0497CC 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
0497DF 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
0497F2 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
049805             0020   	include "src/asm/ui.asm"
049805             0001*  ; ui routines will go here
049805             0021   	include "src/asm/ui_img.asm"
049805             0001*  ; Bitmap indices:
049805             0002*  BUF_UI_BJ_120_120: equ 0x2000
049805             0003*  BUF_UI_LOWER_PANEL: equ 0x2001
049805             0004*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2002
049805             0005*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2003
049805             0006*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2004
049805             0007*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2005
049805             0008*  BUF_UI_SPLASH: equ 0x2006
049805             0009*  
049805             0010*  ; Import .rgba2 bitmap files and load them into VDP buffers
049805             0011*  load_ui_images:
049805             0012*  
049805 21 25 99 04 0013*  	ld hl,F_UI_bj_120_120
049809 11 FC C2 04 0014*  	ld de,filedata
04980D 01 00 00 01 0015*  	ld bc,65536
049811 3E 01       0016*  	ld a,mos_load
049813 5B CF       0017*  	RST.LIL 08h
049815 21 00 20 00 0018*  	ld hl,BUF_UI_BJ_120_120
049819 01 78 00 00 0019*  	ld bc,120
04981D 11 78 00 00 0020*  	ld de,120
049821 DD 21 40 38 0021*  	ld ix,14400
       00          
049826 CD 6D B8 04 0022*  	call vdu_load_img
04982A 3E 2E       0023*  	LD A, '.'
04982C 5B D7       0024*  	RST.LIL 10h
04982E             0025*  
04982E 21 39 99 04 0026*  	ld hl,F_UI_lower_panel
049832 11 FC C2 04 0027*  	ld de,filedata
049836 01 00 00 01 0028*  	ld bc,65536
04983A 3E 01       0029*  	ld a,mos_load
04983C 5B CF       0030*  	RST.LIL 08h
04983E 21 01 20 00 0031*  	ld hl,BUF_UI_LOWER_PANEL
049842 01 40 01 00 0032*  	ld bc,320
049846 11 50 00 00 0033*  	ld de,80
04984A DD 21 00 64 0034*  	ld ix,25600
       00          
04984F CD 6D B8 04 0035*  	call vdu_load_img
049853 3E 2E       0036*  	LD A, '.'
049855 5B D7       0037*  	RST.LIL 10h
049857             0038*  
049857 21 4E 99 04 0039*  	ld hl,F_UI_lower_panel_gatling
04985B 11 FC C2 04 0040*  	ld de,filedata
04985F 01 00 00 01 0041*  	ld bc,65536
049863 3E 01       0042*  	ld a,mos_load
049865 5B CF       0043*  	RST.LIL 08h
049867 21 02 20 00 0044*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
04986B 01 28 00 00 0045*  	ld bc,40
04986F 11 14 00 00 0046*  	ld de,20
049873 DD 21 20 03 0047*  	ld ix,800
       00          
049878 CD 6D B8 04 0048*  	call vdu_load_img
04987C 3E 2E       0049*  	LD A, '.'
04987E 5B D7       0050*  	RST.LIL 10h
049880             0051*  
049880 21 6B 99 04 0052*  	ld hl,F_UI_lower_panel_knife
049884 11 FC C2 04 0053*  	ld de,filedata
049888 01 00 00 01 0054*  	ld bc,65536
04988C 3E 01       0055*  	ld a,mos_load
04988E 5B CF       0056*  	RST.LIL 08h
049890 21 03 20 00 0057*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
049894 01 28 00 00 0058*  	ld bc,40
049898 11 14 00 00 0059*  	ld de,20
04989C DD 21 20 03 0060*  	ld ix,800
       00          
0498A1 CD 6D B8 04 0061*  	call vdu_load_img
0498A5 3E 2E       0062*  	LD A, '.'
0498A7 5B D7       0063*  	RST.LIL 10h
0498A9             0064*  
0498A9 21 86 99 04 0065*  	ld hl,F_UI_lower_panel_machine_gun
0498AD 11 FC C2 04 0066*  	ld de,filedata
0498B1 01 00 00 01 0067*  	ld bc,65536
0498B5 3E 01       0068*  	ld a,mos_load
0498B7 5B CF       0069*  	RST.LIL 08h
0498B9 21 04 20 00 0070*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
0498BD 01 28 00 00 0071*  	ld bc,40
0498C1 11 14 00 00 0072*  	ld de,20
0498C5 DD 21 20 03 0073*  	ld ix,800
       00          
0498CA CD 6D B8 04 0074*  	call vdu_load_img
0498CE 3E 2E       0075*  	LD A, '.'
0498D0 5B D7       0076*  	RST.LIL 10h
0498D2             0077*  
0498D2 21 A7 99 04 0078*  	ld hl,F_UI_lower_panel_pistol
0498D6 11 FC C2 04 0079*  	ld de,filedata
0498DA 01 00 00 01 0080*  	ld bc,65536
0498DE 3E 01       0081*  	ld a,mos_load
0498E0 5B CF       0082*  	RST.LIL 08h
0498E2 21 05 20 00 0083*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
0498E6 01 28 00 00 0084*  	ld bc,40
0498EA 11 14 00 00 0085*  	ld de,20
0498EE DD 21 20 03 0086*  	ld ix,800
       00          
0498F3 CD 6D B8 04 0087*  	call vdu_load_img
0498F7 3E 2E       0088*  	LD A, '.'
0498F9 5B D7       0089*  	RST.LIL 10h
0498FB             0090*  
0498FB 21 C3 99 04 0091*  	ld hl,F_UI_splash
0498FF 11 FC C2 04 0092*  	ld de,filedata
049903 01 00 00 01 0093*  	ld bc,65536
049907 3E 01       0094*  	ld a,mos_load
049909 5B CF       0095*  	RST.LIL 08h
04990B 21 06 20 00 0096*  	ld hl,BUF_UI_SPLASH
04990F 01 40 01 00 0097*  	ld bc,320
049913 11 A0 00 00 0098*  	ld de,160
049917 DD 21 00 C8 0099*  	ld ix,51200
       00          
04991C CD 6D B8 04 0100*  	call vdu_load_img
049920 3E 2E       0101*  	LD A, '.'
049922 5B D7       0102*  	RST.LIL 10h
049924             0103*  
049924 C9          0104*  	ret
049925             0105*  
049925 75 69 2F 62 0106*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
049939 75 69 2F 6C 0107*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
04994E 75 69 2F 6C 0108*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
04996B 75 69 2F 6C 0109*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
049986 75 69 2F 6C 0110*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
0499A7 75 69 2F 6C 0111*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
0499C3 75 69 2F 73 0112*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
0499D3             0022   	include "src/asm/ui_img_bj.asm"
0499D3             0001*  ; Bitmap indices:
0499D3             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
0499D3             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
0499D3             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
0499D3             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
0499D3             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
0499D3             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
0499D3             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
0499D3             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
0499D3             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
0499D3             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
0499D3             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
0499D3             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
0499D3             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
0499D3             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
0499D3             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
0499D3             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
0499D3             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
0499D3             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
0499D3             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
0499D3             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
0499D3             0022*  
0499D3             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
0499D3             0024*  load_ui_images_bj:
0499D3             0025*  
0499D3 21 08 9D 04 0026*  	ld hl,F_UI_bj_gatling_00
0499D7 11 FC C2 04 0027*  	ld de,filedata
0499DB 01 00 00 01 0028*  	ld bc,65536
0499DF 3E 01       0029*  	ld a,mos_load
0499E1 5B CF       0030*  	RST.LIL 08h
0499E3 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
0499E7 01 40 00 00 0032*  	ld bc,64
0499EB 11 40 00 00 0033*  	ld de,64
0499EF DD 21 00 10 0034*  	ld ix,4096
       00          
0499F4 CD 6D B8 04 0035*  	call vdu_load_img
0499F8 3E 2E       0036*  	LD A, '.'
0499FA 5B D7       0037*  	RST.LIL 10h
0499FC             0038*  
0499FC 21 22 9D 04 0039*  	ld hl,F_UI_bj_gatling_01
049A00 11 FC C2 04 0040*  	ld de,filedata
049A04 01 00 00 01 0041*  	ld bc,65536
049A08 3E 01       0042*  	ld a,mos_load
049A0A 5B CF       0043*  	RST.LIL 08h
049A0C 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
049A10 01 40 00 00 0045*  	ld bc,64
049A14 11 40 00 00 0046*  	ld de,64
049A18 DD 21 00 10 0047*  	ld ix,4096
       00          
049A1D CD 6D B8 04 0048*  	call vdu_load_img
049A21 3E 2E       0049*  	LD A, '.'
049A23 5B D7       0050*  	RST.LIL 10h
049A25             0051*  
049A25 21 3C 9D 04 0052*  	ld hl,F_UI_bj_gatling_02
049A29 11 FC C2 04 0053*  	ld de,filedata
049A2D 01 00 00 01 0054*  	ld bc,65536
049A31 3E 01       0055*  	ld a,mos_load
049A33 5B CF       0056*  	RST.LIL 08h
049A35 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
049A39 01 40 00 00 0058*  	ld bc,64
049A3D 11 40 00 00 0059*  	ld de,64
049A41 DD 21 00 10 0060*  	ld ix,4096
       00          
049A46 CD 6D B8 04 0061*  	call vdu_load_img
049A4A 3E 2E       0062*  	LD A, '.'
049A4C 5B D7       0063*  	RST.LIL 10h
049A4E             0064*  
049A4E 21 56 9D 04 0065*  	ld hl,F_UI_bj_gatling_03
049A52 11 FC C2 04 0066*  	ld de,filedata
049A56 01 00 00 01 0067*  	ld bc,65536
049A5A 3E 01       0068*  	ld a,mos_load
049A5C 5B CF       0069*  	RST.LIL 08h
049A5E 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
049A62 01 40 00 00 0071*  	ld bc,64
049A66 11 40 00 00 0072*  	ld de,64
049A6A DD 21 00 10 0073*  	ld ix,4096
       00          
049A6F CD 6D B8 04 0074*  	call vdu_load_img
049A73 3E 2E       0075*  	LD A, '.'
049A75 5B D7       0076*  	RST.LIL 10h
049A77             0077*  
049A77 21 70 9D 04 0078*  	ld hl,F_UI_bj_gatling_04
049A7B 11 FC C2 04 0079*  	ld de,filedata
049A7F 01 00 00 01 0080*  	ld bc,65536
049A83 3E 01       0081*  	ld a,mos_load
049A85 5B CF       0082*  	RST.LIL 08h
049A87 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
049A8B 01 40 00 00 0084*  	ld bc,64
049A8F 11 40 00 00 0085*  	ld de,64
049A93 DD 21 00 10 0086*  	ld ix,4096
       00          
049A98 CD 6D B8 04 0087*  	call vdu_load_img
049A9C 3E 2E       0088*  	LD A, '.'
049A9E 5B D7       0089*  	RST.LIL 10h
049AA0             0090*  
049AA0 21 8A 9D 04 0091*  	ld hl,F_UI_bj_knife_00
049AA4 11 FC C2 04 0092*  	ld de,filedata
049AA8 01 00 00 01 0093*  	ld bc,65536
049AAC 3E 01       0094*  	ld a,mos_load
049AAE 5B CF       0095*  	RST.LIL 08h
049AB0 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
049AB4 01 40 00 00 0097*  	ld bc,64
049AB8 11 40 00 00 0098*  	ld de,64
049ABC DD 21 00 10 0099*  	ld ix,4096
       00          
049AC1 CD 6D B8 04 0100*  	call vdu_load_img
049AC5 3E 2E       0101*  	LD A, '.'
049AC7 5B D7       0102*  	RST.LIL 10h
049AC9             0103*  
049AC9 21 A2 9D 04 0104*  	ld hl,F_UI_bj_knife_01
049ACD 11 FC C2 04 0105*  	ld de,filedata
049AD1 01 00 00 01 0106*  	ld bc,65536
049AD5 3E 01       0107*  	ld a,mos_load
049AD7 5B CF       0108*  	RST.LIL 08h
049AD9 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
049ADD 01 40 00 00 0110*  	ld bc,64
049AE1 11 40 00 00 0111*  	ld de,64
049AE5 DD 21 00 10 0112*  	ld ix,4096
       00          
049AEA CD 6D B8 04 0113*  	call vdu_load_img
049AEE 3E 2E       0114*  	LD A, '.'
049AF0 5B D7       0115*  	RST.LIL 10h
049AF2             0116*  
049AF2 21 BA 9D 04 0117*  	ld hl,F_UI_bj_knife_02
049AF6 11 FC C2 04 0118*  	ld de,filedata
049AFA 01 00 00 01 0119*  	ld bc,65536
049AFE 3E 01       0120*  	ld a,mos_load
049B00 5B CF       0121*  	RST.LIL 08h
049B02 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
049B06 01 40 00 00 0123*  	ld bc,64
049B0A 11 40 00 00 0124*  	ld de,64
049B0E DD 21 00 10 0125*  	ld ix,4096
       00          
049B13 CD 6D B8 04 0126*  	call vdu_load_img
049B17 3E 2E       0127*  	LD A, '.'
049B19 5B D7       0128*  	RST.LIL 10h
049B1B             0129*  
049B1B 21 D2 9D 04 0130*  	ld hl,F_UI_bj_knife_03
049B1F 11 FC C2 04 0131*  	ld de,filedata
049B23 01 00 00 01 0132*  	ld bc,65536
049B27 3E 01       0133*  	ld a,mos_load
049B29 5B CF       0134*  	RST.LIL 08h
049B2B 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
049B2F 01 40 00 00 0136*  	ld bc,64
049B33 11 40 00 00 0137*  	ld de,64
049B37 DD 21 00 10 0138*  	ld ix,4096
       00          
049B3C CD 6D B8 04 0139*  	call vdu_load_img
049B40 3E 2E       0140*  	LD A, '.'
049B42 5B D7       0141*  	RST.LIL 10h
049B44             0142*  
049B44 21 EA 9D 04 0143*  	ld hl,F_UI_bj_knife_04
049B48 11 FC C2 04 0144*  	ld de,filedata
049B4C 01 00 00 01 0145*  	ld bc,65536
049B50 3E 01       0146*  	ld a,mos_load
049B52 5B CF       0147*  	RST.LIL 08h
049B54 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
049B58 01 40 00 00 0149*  	ld bc,64
049B5C 11 40 00 00 0150*  	ld de,64
049B60 DD 21 00 10 0151*  	ld ix,4096
       00          
049B65 CD 6D B8 04 0152*  	call vdu_load_img
049B69 3E 2E       0153*  	LD A, '.'
049B6B 5B D7       0154*  	RST.LIL 10h
049B6D             0155*  
049B6D 21 02 9E 04 0156*  	ld hl,F_UI_bj_machine_gun_00
049B71 11 FC C2 04 0157*  	ld de,filedata
049B75 01 00 00 01 0158*  	ld bc,65536
049B79 3E 01       0159*  	ld a,mos_load
049B7B 5B CF       0160*  	RST.LIL 08h
049B7D 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
049B81 01 40 00 00 0162*  	ld bc,64
049B85 11 40 00 00 0163*  	ld de,64
049B89 DD 21 00 10 0164*  	ld ix,4096
       00          
049B8E CD 6D B8 04 0165*  	call vdu_load_img
049B92 3E 2E       0166*  	LD A, '.'
049B94 5B D7       0167*  	RST.LIL 10h
049B96             0168*  
049B96 21 20 9E 04 0169*  	ld hl,F_UI_bj_machine_gun_01
049B9A 11 FC C2 04 0170*  	ld de,filedata
049B9E 01 00 00 01 0171*  	ld bc,65536
049BA2 3E 01       0172*  	ld a,mos_load
049BA4 5B CF       0173*  	RST.LIL 08h
049BA6 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
049BAA 01 40 00 00 0175*  	ld bc,64
049BAE 11 40 00 00 0176*  	ld de,64
049BB2 DD 21 00 10 0177*  	ld ix,4096
       00          
049BB7 CD 6D B8 04 0178*  	call vdu_load_img
049BBB 3E 2E       0179*  	LD A, '.'
049BBD 5B D7       0180*  	RST.LIL 10h
049BBF             0181*  
049BBF 21 3E 9E 04 0182*  	ld hl,F_UI_bj_machine_gun_02
049BC3 11 FC C2 04 0183*  	ld de,filedata
049BC7 01 00 00 01 0184*  	ld bc,65536
049BCB 3E 01       0185*  	ld a,mos_load
049BCD 5B CF       0186*  	RST.LIL 08h
049BCF 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
049BD3 01 40 00 00 0188*  	ld bc,64
049BD7 11 40 00 00 0189*  	ld de,64
049BDB DD 21 00 10 0190*  	ld ix,4096
       00          
049BE0 CD 6D B8 04 0191*  	call vdu_load_img
049BE4 3E 2E       0192*  	LD A, '.'
049BE6 5B D7       0193*  	RST.LIL 10h
049BE8             0194*  
049BE8 21 5C 9E 04 0195*  	ld hl,F_UI_bj_machine_gun_03
049BEC 11 FC C2 04 0196*  	ld de,filedata
049BF0 01 00 00 01 0197*  	ld bc,65536
049BF4 3E 01       0198*  	ld a,mos_load
049BF6 5B CF       0199*  	RST.LIL 08h
049BF8 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
049BFC 01 40 00 00 0201*  	ld bc,64
049C00 11 40 00 00 0202*  	ld de,64
049C04 DD 21 00 10 0203*  	ld ix,4096
       00          
049C09 CD 6D B8 04 0204*  	call vdu_load_img
049C0D 3E 2E       0205*  	LD A, '.'
049C0F 5B D7       0206*  	RST.LIL 10h
049C11             0207*  
049C11 21 7A 9E 04 0208*  	ld hl,F_UI_bj_machine_gun_04
049C15 11 FC C2 04 0209*  	ld de,filedata
049C19 01 00 00 01 0210*  	ld bc,65536
049C1D 3E 01       0211*  	ld a,mos_load
049C1F 5B CF       0212*  	RST.LIL 08h
049C21 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
049C25 01 40 00 00 0214*  	ld bc,64
049C29 11 40 00 00 0215*  	ld de,64
049C2D DD 21 00 10 0216*  	ld ix,4096
       00          
049C32 CD 6D B8 04 0217*  	call vdu_load_img
049C36 3E 2E       0218*  	LD A, '.'
049C38 5B D7       0219*  	RST.LIL 10h
049C3A             0220*  
049C3A 21 98 9E 04 0221*  	ld hl,F_UI_bj_pistol_00
049C3E 11 FC C2 04 0222*  	ld de,filedata
049C42 01 00 00 01 0223*  	ld bc,65536
049C46 3E 01       0224*  	ld a,mos_load
049C48 5B CF       0225*  	RST.LIL 08h
049C4A 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
049C4E 01 40 00 00 0227*  	ld bc,64
049C52 11 40 00 00 0228*  	ld de,64
049C56 DD 21 00 10 0229*  	ld ix,4096
       00          
049C5B CD 6D B8 04 0230*  	call vdu_load_img
049C5F 3E 2E       0231*  	LD A, '.'
049C61 5B D7       0232*  	RST.LIL 10h
049C63             0233*  
049C63 21 B1 9E 04 0234*  	ld hl,F_UI_bj_pistol_01
049C67 11 FC C2 04 0235*  	ld de,filedata
049C6B 01 00 00 01 0236*  	ld bc,65536
049C6F 3E 01       0237*  	ld a,mos_load
049C71 5B CF       0238*  	RST.LIL 08h
049C73 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
049C77 01 40 00 00 0240*  	ld bc,64
049C7B 11 40 00 00 0241*  	ld de,64
049C7F DD 21 00 10 0242*  	ld ix,4096
       00          
049C84 CD 6D B8 04 0243*  	call vdu_load_img
049C88 3E 2E       0244*  	LD A, '.'
049C8A 5B D7       0245*  	RST.LIL 10h
049C8C             0246*  
049C8C 21 CA 9E 04 0247*  	ld hl,F_UI_bj_pistol_02
049C90 11 FC C2 04 0248*  	ld de,filedata
049C94 01 00 00 01 0249*  	ld bc,65536
049C98 3E 01       0250*  	ld a,mos_load
049C9A 5B CF       0251*  	RST.LIL 08h
049C9C 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
049CA0 01 40 00 00 0253*  	ld bc,64
049CA4 11 40 00 00 0254*  	ld de,64
049CA8 DD 21 00 10 0255*  	ld ix,4096
       00          
049CAD CD 6D B8 04 0256*  	call vdu_load_img
049CB1 3E 2E       0257*  	LD A, '.'
049CB3 5B D7       0258*  	RST.LIL 10h
049CB5             0259*  
049CB5 21 E3 9E 04 0260*  	ld hl,F_UI_bj_pistol_03
049CB9 11 FC C2 04 0261*  	ld de,filedata
049CBD 01 00 00 01 0262*  	ld bc,65536
049CC1 3E 01       0263*  	ld a,mos_load
049CC3 5B CF       0264*  	RST.LIL 08h
049CC5 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
049CC9 01 40 00 00 0266*  	ld bc,64
049CCD 11 40 00 00 0267*  	ld de,64
049CD1 DD 21 00 10 0268*  	ld ix,4096
       00          
049CD6 CD 6D B8 04 0269*  	call vdu_load_img
049CDA 3E 2E       0270*  	LD A, '.'
049CDC 5B D7       0271*  	RST.LIL 10h
049CDE             0272*  
049CDE 21 FC 9E 04 0273*  	ld hl,F_UI_bj_pistol_04
049CE2 11 FC C2 04 0274*  	ld de,filedata
049CE6 01 00 00 01 0275*  	ld bc,65536
049CEA 3E 01       0276*  	ld a,mos_load
049CEC 5B CF       0277*  	RST.LIL 08h
049CEE 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
049CF2 01 40 00 00 0279*  	ld bc,64
049CF6 11 40 00 00 0280*  	ld de,64
049CFA DD 21 00 10 0281*  	ld ix,4096
       00          
049CFF CD 6D B8 04 0282*  	call vdu_load_img
049D03 3E 2E       0283*  	LD A, '.'
049D05 5B D7       0284*  	RST.LIL 10h
049D07             0285*  
049D07 C9          0286*  	ret
049D08             0287*  
049D08 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049D22 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049D3C 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049D56 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049D70 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049D8A 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
049DA2 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
049DBA 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
049DD2 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
049DEA 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
049E02 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049E20 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049E3E 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049E5C 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049E7A 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049E98 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
049EB1 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
049ECA 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
049EE3 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
049EFC 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
049F15             0023   	include "src/asm/sprites.asm"
049F15             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
049F15             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
049F15             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
049F15             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
049F15             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
049F15             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
049F15             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
049F15             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
049F15             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
049F15             0010*  sprite_anim_tmr: equ 08 ; 1 byte  - when hits zero, draw next animation frame
049F15             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
049F15             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
049F15             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, BCD
049F15             0014*  sprite_health_modifier:   equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
049F15             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
049F15             0016*  sprite_record_size: equ 16 ; 16 bytes per sprite record
049F15             0017*  
049F15             0018*  ; sprite_triggers_mask defs
049F15             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
049F15             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
049F15             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
049F15             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
049F15             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
049F15             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
049F15             0025*  
049F15             0026*  ; ###### SPRITE TABLE VARIABLES ######
049F15             0027*  ; maximum number of sprites
049F15             0028*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
049F15             0029*  table_total_bytes:      equ table_max_records*sprite_record_size
049F15             0030*  
049F15             0031*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
049F15             0032*  sprite_table_base:       equ 0xB7FC00
049F15             0033*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
049F15             0034*  
049F15             0035*  ; pointer to top address of current record, initialized to sprite_table_base
049F15 00 FC B7    0036*  sprite_table_pointer: dl sprite_table_base
049F18             0037*  ; how many active sprites
049F18 00          0038*  table_active_sprites: db 0x00
049F19             0039*  ; flag indicating collision with screen edge
049F19             0040*  ; uses orientation codes to specify which edge(s)
049F19 00          0041*  sprite_screen_edge: db #00
049F1A             0042*  ; next sprite id to use
049F1A 00          0043*  sprite_next_id: db 0
049F1B             0044*  
049F1B             0045*  ; ######### COLLISION SPRITE PARAMETERS ##########
049F1B             0046*  ; integer coordinates are all that are needed for collision calculations
049F1B 00          0047*  collision_x: db 0x00
049F1C 00          0048*  collision_y: db 0x00
049F1D 00          0049*  collision_dim_x: db 0x00
049F1E 00          0050*  collision_dim_y: db 0x00
049F1F             0051*  
049F1F             0052*  ; scratch variables
049F1F 00          0053*  x: db 0x00 ; 8-bit signed integer
049F20 00          0054*  y: db 0x00 ; 8-bit signed integer
049F21 00 00 00    0055*  x0: dl 0x000000 ; 16.8 signed fixed place
049F24 00 00 00    0056*  y0: dl 0x000000 ; 16.8 signed fixed place
049F27 00 00 00    0057*  incx1: dl 0x000000 ; 16.8 signed fixed place
049F2A 00 00 00    0058*  incy1: dl 0x000000 ; 16.8 signed fixed place
049F2D 00 00 00    0059*  incx2: dl 0x000000 ; 16.8 signed fixed place
049F30 00 00 00    0060*  incy2: dl 0x000000 ; 16.8 signed fixed place
049F33             0061*  
049F33             0062*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
049F33 00 00 00    0063*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
049F36 00 00 00    0064*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F39 00 00 00    0065*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F3C             0066*  
049F3C             0067*  ; gets the next available sprite id
049F3C             0068*  ; inputs; none
049F3C             0069*  ; returns: if new sprite available, a = sprite id,
049F3C             0070*  ;      ix pointing to new sprite vars, carry set
049F3C             0071*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
049F3C             0072*  ; destroys: a,b,hl,ix
049F3C             0073*  ; affects: bumps table_active_sprites by one
049F3C             0074*  table_get_next_id:
049F3C DD 21 00 FC 0075*      ld ix,sprite_table_base
       B7          
049F41 11 10 00 00 0076*      ld de,sprite_record_size
049F45 06 40       0077*      ld b,table_max_records
049F47             0078*  @loop:
049F47 DD 7E 01    0079*      ld a,(ix+sprite_obj)
049F4A A7          0080*      and a
049F4B 28 06       0081*      jr z,@found
049F4D DD 19       0082*      add ix,de
049F4F 10 F6       0083*      djnz @loop
049F51             0084*  @notfound:
049F51 AF          0085*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
049F52 C9          0086*      ret
049F53             0087*  @found:
049F53             0088*  ; bump number of active sprites
049F53 21 18 9F 04 0089*      ld hl,table_active_sprites
049F57 34          0090*      inc (hl)
049F58             0091*  ; return sprite id
049F58 3E 40       0092*      ld a,table_max_records
049F5A 90          0093*      sub b
049F5B 32 1A 9F 04 0094*      ld (sprite_next_id),a
049F5F 37          0095*      scf ; sets carry flag indicating we found a free sprite
049F60 C9          0096*      ret ; done
049F61             0097*  
049F61             0098*  ; deactivate the sprite with the given id
049F61             0099*  ; inputs: a = sprite id
049F61             0100*  ; outputs: nothing
049F61             0101*  ; destroys: a,ix,de
049F61             0102*  ; affects: decrements table_active_sprites by one
049F61             0103*  table_deactivate_sprite:
049F61 F5          0104*      push af ; save sprite id bc we need it later
049F62 CD 4E AC 04 0105*      call vdu_sprite_select
049F66 CD D2 AC 04 0106*      call vdu_sprite_hide
049F6A F1          0107*      pop af ; restore sprite id
049F6B 11 00 00 00 0108*      ld de,0 ; clear deu
049F6F 57          0109*      ld d,a
049F70 1E 10       0110*      ld e,sprite_record_size
049F72 ED 5C       0111*      mlt de
049F74 DD 21 00 FC 0112*      ld ix,sprite_table_base
       B7          
049F79 DD 19       0113*      add ix,de
049F7B AF          0114*      xor a
049F7C DD 77 01    0115*      ld (ix+sprite_obj),a
049F7F DD 21 18 9F 0116*      ld ix,table_active_sprites
       04          
049F84 DD 35 00    0117*      dec (ix)
049F87 C9          0118*      ret
049F88             0119*  
049F88             0120*  ; sets iy and sprite_table_pointer to the sprite record with the given id
049F88             0121*  ; inputs: a = sprite id
049F88             0122*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
049F88             0123*  ; destroys: bc
049F88             0124*  sprite_set_pointer:
049F88 47          0125*      ld b,a
049F89 0E 10       0126*      ld c,sprite_record_size
049F8B ED 4C       0127*      mlt bc
049F8D FD 21 00 FC 0128*      ld iy,sprite_table_base
       B7          
049F92 FD 09       0129*      add iy,bc
049F94 FD 22 15 9F 0130*      ld (sprite_table_pointer),iy
       04          
049F99 C9          0131*      ret
049F9A             0132*  
049F9A             0133*  ; set the active sprite record to no sprite and remove it from the map cell it was in
049F9A             0134*  ; inputs: iy pointed at sprite record to clear
049F9A             0135*  sprite_kill:
049F9A             0136*  ; set sprite table record to no sprite
049F9A 21 FF FF FF 0137*      ld hl,0xFFFFFF ; a string of -1s
049F9E FD 2F 00    0138*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
049FA1             0139*  
049FA1             0140*  ; set map cell to no sprite and normal floor
049FA1 21 01 FF 1D 0141*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
049FA5 DD 2F 00    0142*      ld (ix),hl
049FA8 3E FF       0143*      ld a,0xFF ; no sprite
049FAA DD 77 03    0144*      ld (ix+map_sprite_id),a ; now sprite is truly dead
049FAD C9          0145*      ret
049FAE             0146*  
049FAE 00          0147*  sprite_new_x: db 0x00
049FAF 00          0148*  sprite_new_y: db 0x00
049FB0 00          0149*                db 0x00 ; padding
049FB1             0150*  
049FB1             0151*  ; checks if the sprite can move to the new position
049FB1             0152*  ; inputs: iy pointed at sprite record, d,e = new y,x position
049FB1             0153*  sprite_check_move:
049FB1 ED 53 AE 9F 0154*      ld (sprite_new_x),de ; save new y,x position
       04          
049FB6 CD A2 65 04 0155*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FBA             0156*  ; check whether target cell contains a sprite
049FBA DD 7E 03    0157*      ld a,(ix+map_sprite_id)
049FBD FE FF       0158*      cp 255 ; value if not sprite
049FBF C0          0159*      ret nz ; already occupied by another sprite so we can't move there
049FC0             0160*  ; read map type/status mask from target cell
049FC0 DD 7E 00    0161*      ld a,(ix+map_type_status)
049FC3 E6 01       0162*      and render_type_floor
049FC5 C8          0163*      ret z ; target cell is not a floor so we can't move there
049FC6             0164*  ; we are cleared for movement so fall through to sprite_move
049FC6             0165*  
049FC6             0166*  ; moves the sprite to the given map position
049FC6             0167*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
049FC6             0168*  sprite_move:
049FC6             0169*  ; update old sprite position to no sprite
049FC6 FD 17 04    0170*      ld de,(iy+sprite_x) ; d,e = sprite current y,x position
049FC9 CD A2 65 04 0171*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FCD             0172*  ; set map cell to no sprite and normal floor
049FCD 21 01 FF 1D 0173*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
049FD1 DD 2F 00    0174*      ld (ix),hl
049FD4 3E FF       0175*      ld a,0xFF ; no sprite
049FD6 DD 77 03    0176*      ld (ix+map_sprite_id),a
049FD9             0177*  ; update sprite record with new position
049FD9 ED 5B AE 9F 0178*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
049FDE FD 1F 04    0179*      ld (iy+sprite_x),de
049FE1             0180*  ; update new map cell with sprite id
049FE1 CD A2 65 04 0181*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FE5 FD 7E 00    0182*      ld a,(iy+sprite_id)
049FE8 DD 77 03    0183*      ld (ix+map_sprite_id),a
049FEB C9          0184*      ret
049FEC             0185*  
049FEC             0186*  ; move a sprite in a random direction
049FEC             0187*  ; inputs: iy pointed at sprite record
049FEC             0188*  sprite_move_random:
049FEC             0189*  ; point iy at sprite record
049FEC FD 2A 15 9F 0190*      ld iy,(sprite_table_pointer)
       04          
049FF1             0191*  ; DEBUG:
049FF1             0192*      ; ld bc,(iy+sprite_x)
049FF1             0193*      ; push bc
049FF1             0194*  ; pick a random direction
049FF1 CD DA B6 04 0195*      call rand_8
049FF5 E6 03       0196*      and 3 ; direction between 0 and 3
049FF7             0197*  ; get dy,dx for moving once cell in the chosen direction
049FF7 5F          0198*      ld e,a
049FF8 16 01       0199*      ld d,1 ; distance
049FFA CD C7 65 04 0200*      call get_dx_dy ; d,e = dy,dx
049FFE             0201*  ; calculate new position
049FFE FD 7E 04    0202*      ld a,(iy+sprite_x)
04A001 83          0203*      add a,e
04A002 E6 0F       0204*      and 15 ; modulo 16
04A004 5F          0205*      ld e,a
04A005 FD 7E 05    0206*      ld a,(iy+sprite_y)
04A008 82          0207*      add a,d
04A009 E6 0F       0208*      and 15 ; modulo 16
04A00B 57          0209*      ld d,a
04A00C             0210*  
04A00C             0211*      ; pop bc
04A00C             0212*      ; call stepRegistersHex
04A00C C3 B1 9F 04 0213*      jp sprite_check_move
04A010             0214*  
04A010             0215*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04A010             0216*  sprite_behavior_lookup:
04A010 73 A0 04    0217*      dl LAMP
04A013 BC A0 04    0218*      dl BARREL
04A016 1C A1 04    0219*      dl TABLE
04A019 65 A1 04    0220*      dl OVERHEAD_LIGHT
04A01C AE A1 04    0221*      dl RADIOACTIVE_BARREL
04A01F 0E A2 04    0222*      dl HEALTH_PACK
04A022 5C A2 04    0223*      dl GOLD_CHALISE
04A025 B2 A2 04    0224*      dl GOLD_CROSS
04A028 08 A3 04    0225*      dl PLATE_OF_FOOD
04A02B 56 A3 04    0226*      dl KEYCARD
04A02E AD A3 04    0227*      dl GOLD_CHEST
04A031 03 A4 04    0228*      dl MACHINE_GUN
04A034 6C A4 04    0229*      dl GATLING_GUN
04A037 D5 A4 04    0230*      dl DOG_FOOD
04A03A 23 A5 04    0231*      dl GOLD_KEY
04A03D 6C A5 04    0232*      dl DOG
04A040 0D A6 04    0233*      dl GERMAN_TROOPER
04A043 C0 A6 04    0234*      dl SS_GUARD
04A046             0235*  
04A046             0236*  ; initializes sprite data for a particular sprite type and id
04A046             0237*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A046             0238*  sprite_init_data:
04A046 3E 00       0239*      ld a,sp_init ; index for sprite init routine
04A048 CD 56 A0 04 0240*      call do_sprite_behavior ; hl points at address to copy from
04A04C ED 13 02    0241*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04A04F 01 0E 00 00 0242*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04A053 ED B0       0243*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04A055 C9          0244*      ret ; done
04A056             0245*  
04A056             0246*  ; #### SPRITE BEHAVIOR ROUTINES ####
04A056             0247*  ; sprite behavior indices
04A056             0248*  sp_init:   equ 0
04A056             0249*  sp_use:    equ 1
04A056             0250*  sp_hurt:  equ 2
04A056             0251*  sp_kill:   equ 3
04A056             0252*  sp_see:    equ 4
04A056             0253*  sp_move:  equ 5
04A056             0254*  sp_shoot:  equ 6
04A056             0255*  
04A056             0256*  ; calls the sprite behavior routine for the sprite pointed to by iy
04A056             0257*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A056             0258*  ;         a = type index of routine to call
04A056             0259*  do_sprite_behavior:
04A056 FD 22 15 9F 0260*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04A05B FD 46 01    0261*      ld b,(iy+sprite_obj)
04A05E 0E 03       0262*      ld c,3 ; three bytes per lookup record
04A060 ED 4C       0263*      mlt bc ; bc is offset from the base of the lookup table
04A062 21 10 A0 04 0264*      ld hl,sprite_behavior_lookup
04A066 09          0265*      add hl,bc
04A067 ED 27       0266*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04A069 47          0267*      ld b,a ; b holds the routine index
04A06A 0E 03       0268*      ld c,3 ; three bytes per lookup record
04A06C ED 4C       0269*      mlt bc ; bc is offset from the base of the lookup table
04A06E 09          0270*      add hl,bc ; hl points to the label of the routine to call
04A06F ED 27       0271*      ld hl,(hl) ; hl points to the routine to call
04A071 E9          0272*      jp (hl) ; call the behavior routine
04A072             0273*  sprite_behavior_return: ; we always return here from a sprite behavior call
04A072 C9          0274*      ret
04A073             0275*  
04A073             0276*  LAMP:
04A073             0277*  ; behavior routine address lookup
04A073 88 A0 04    0278*      dl @init
04A076 9E A0 04    0279*      dl @use
04A079 A2 A0 04    0280*      dl @hurt
04A07C A7 A0 04    0281*      dl @kill
04A07F AF A0 04    0282*      dl @see
04A082 B4 A0 04    0283*      dl @move
04A085 B8 A0 04    0284*      dl @shoot
04A088             0285*  @init:
04A088 21 90 A0 04 0286*      ld hl,@data ; address for LDIR to copy from
04A08C C3 72 A0 04 0287*      jp sprite_behavior_return
04A090             0288*  @data:
04A090 64          0289*      db 100 ;sprite_health
04A091 00          0290*      db 000 ;sprite_triggers_mask
04A092 00          0291*      db 000 ;sprite_x
04A093 00          0292*      db 000 ;sprite_y
04A094 00          0293*      db 000 ;sprite_orientation
04A095 00          0294*      db 000 ;sprite_animation
04A096 00          0295*      db 000 ;sprite_anim_tmr
04A097 01          0296*      db 001 ;sprite_move_timer
04A098 00          0297*      db 000 ;sprite_move_step
04A099 00          0298*      db 000 ;sprite_points
04A09A 00          0299*      db 000 ;sprite_health_modifier
04A09B 00          0300*      db 000 ;sprite_unassigned_0
04A09C 00          0301*      db 000 ;sprite_unassigned_1
04A09D 00          0302*      db 000 ;sprite_unassigned_2
04A09E             0303*  @use:
04A09E C3 72 A0 04 0304*      jp sprite_behavior_return
04A0A2             0305*  @hurt:
04A0A2 AF          0306*      xor a
04A0A3 C3 72 A0 04 0307*      jp sprite_behavior_return
04A0A7             0308*  @kill:
04A0A7 CD 9A 9F 04 0309*      call sprite_kill
04A0AB C3 72 A0 04 0310*      jp sprite_behavior_return
04A0AF             0311*  @see:
04A0AF AF          0312*      xor a
04A0B0 C3 72 A0 04 0313*      jp sprite_behavior_return
04A0B4             0314*  @move:
04A0B4 C3 72 A0 04 0315*      jp sprite_behavior_return
04A0B8             0316*  @shoot:
04A0B8 C3 72 A0 04 0317*      jp sprite_behavior_return
04A0BC             0318*  
04A0BC             0319*  BARREL:
04A0BC             0320*  ; behavior routine address lookup
04A0BC D1 A0 04    0321*      dl @init
04A0BF E7 A0 04    0322*      dl @use
04A0C2 EB A0 04    0323*      dl @hurt
04A0C5 FF A0 04    0324*      dl @kill
04A0C8 0F A1 04    0325*      dl @see
04A0CB 14 A1 04    0326*      dl @move
04A0CE 18 A1 04    0327*      dl @shoot
04A0D1             0328*  @init:
04A0D1 21 D9 A0 04 0329*      ld hl,@data ; address for LDIR to copy from
04A0D5 C3 72 A0 04 0330*      jp sprite_behavior_return
04A0D9             0331*  @data:
04A0D9 12          0332*      db 018 ;sprite_health
04A0DA 00          0333*      db 000 ;sprite_triggers_mask
04A0DB 00          0334*      db 000 ;sprite_x
04A0DC 00          0335*      db 000 ;sprite_y
04A0DD 00          0336*      db 000 ;sprite_orientation
04A0DE 00          0337*      db 000 ;sprite_animation
04A0DF 00          0338*      db 000 ;sprite_anim_tmr
04A0E0 01          0339*      db 001 ;sprite_move_timer
04A0E1 00          0340*      db 000 ;sprite_move_step
04A0E2 00          0341*      db 000 ;sprite_points
04A0E3 CE          0342*      db -50 ;sprite_health_modifier
04A0E4 00          0343*      db 000 ;sprite_unassigned_0
04A0E5 00          0344*      db 000 ;sprite_unassigned_1
04A0E6 00          0345*      db 000 ;sprite_unassigned_2
04A0E7             0346*  @use:
04A0E7 C3 72 A0 04 0347*      jp sprite_behavior_return
04A0EB             0348*  @hurt:
04A0EB 3E FF       0349*      ld a,255 ; kill player's shot
04A0ED 32 FE B1 04 0350*      ld (plyr_shot_status),a
04A0F1 3A 02 B2 04 0351*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A0F5 FD 86 02    0352*      add a,(iy+sprite_health)
04A0F8 FD 77 02    0353*      ld (iy+sprite_health),a
04A0FB F2 72 A0 04 0354*      jp p,sprite_behavior_return ; if health is positive, return
04A0FF             0355*      ; otherwise fall through to kill sprite
04A0FF             0356*  @kill:
04A0FF FD E5       0357*      push iy
04A101 CD 19 BE 04 0358*      call sfx_play_explode
04A105 FD E1       0359*      pop iy
04A107 CD 9A 9F 04 0360*      call sprite_kill
04A10B C3 72 A0 04 0361*      jp sprite_behavior_return
04A10F             0362*  @see:
04A10F AF          0363*      xor a
04A110 C3 72 A0 04 0364*      jp sprite_behavior_return
04A114             0365*  @move:
04A114 C3 72 A0 04 0366*      jp sprite_behavior_return
04A118             0367*  @shoot:
04A118 C3 72 A0 04 0368*      jp sprite_behavior_return
04A11C             0369*  
04A11C             0370*  TABLE:
04A11C             0371*  ; behavior routine address lookup
04A11C 31 A1 04    0372*      dl @init
04A11F 47 A1 04    0373*      dl @use
04A122 4B A1 04    0374*      dl @hurt
04A125 50 A1 04    0375*      dl @kill
04A128 58 A1 04    0376*      dl @see
04A12B 5D A1 04    0377*      dl @move
04A12E 61 A1 04    0378*      dl @shoot
04A131             0379*  @init:
04A131 21 39 A1 04 0380*      ld hl,@data ; address for LDIR to copy from
04A135 C3 72 A0 04 0381*      jp sprite_behavior_return
04A139             0382*  @data:
04A139 64          0383*      db 100 ;sprite_health
04A13A 00          0384*      db 000 ;sprite_triggers_mask
04A13B 00          0385*      db 000 ;sprite_x
04A13C 00          0386*      db 000 ;sprite_y
04A13D 00          0387*      db 000 ;sprite_orientation
04A13E 00          0388*      db 000 ;sprite_animation
04A13F 00          0389*      db 000 ;sprite_anim_tmr
04A140 01          0390*      db 001 ;sprite_move_timer
04A141 00          0391*      db 000 ;sprite_move_step
04A142 00          0392*      db 000 ;sprite_points
04A143 00          0393*      db 000 ;sprite_health_modifier
04A144 00          0394*      db 000 ;sprite_unassigned_0
04A145 00          0395*      db 000 ;sprite_unassigned_1
04A146 00          0396*      db 000 ;sprite_unassigned_2
04A147             0397*  @use:
04A147 C3 72 A0 04 0398*      jp sprite_behavior_return
04A14B             0399*  @hurt:
04A14B AF          0400*      xor a
04A14C C3 72 A0 04 0401*      jp sprite_behavior_return
04A150             0402*  @kill:
04A150 CD 9A 9F 04 0403*      call sprite_kill
04A154 C3 72 A0 04 0404*      jp sprite_behavior_return
04A158             0405*  @see:
04A158 AF          0406*      xor a
04A159 C3 72 A0 04 0407*      jp sprite_behavior_return
04A15D             0408*  @move:
04A15D C3 72 A0 04 0409*      jp sprite_behavior_return
04A161             0410*  @shoot:
04A161 C3 72 A0 04 0411*      jp sprite_behavior_return
04A165             0412*  
04A165             0413*  OVERHEAD_LIGHT:
04A165             0414*  ; behavior routine address lookup
04A165 7A A1 04    0415*      dl @init
04A168 90 A1 04    0416*      dl @use
04A16B 94 A1 04    0417*      dl @hurt
04A16E 99 A1 04    0418*      dl @kill
04A171 A1 A1 04    0419*      dl @see
04A174 A6 A1 04    0420*      dl @move
04A177 AA A1 04    0421*      dl @shoot
04A17A             0422*  @init:
04A17A 21 82 A1 04 0423*      ld hl,@data ; address for LDIR to copy from
04A17E C3 72 A0 04 0424*      jp sprite_behavior_return
04A182             0425*  @data:
04A182 64          0426*      db 100 ;sprite_health
04A183 00          0427*      db 000 ;sprite_triggers_mask
04A184 00          0428*      db 000 ;sprite_x
04A185 00          0429*      db 000 ;sprite_y
04A186 00          0430*      db 000 ;sprite_orientation
04A187 00          0431*      db 000 ;sprite_animation
04A188 00          0432*      db 000 ;sprite_anim_tmr
04A189 01          0433*      db 001 ;sprite_move_timer
04A18A 00          0434*      db 000 ;sprite_move_step
04A18B 00          0435*      db 000 ;sprite_points
04A18C 00          0436*      db 000 ;sprite_health_modifier
04A18D 00          0437*      db 000 ;sprite_unassigned_0
04A18E 00          0438*      db 000 ;sprite_unassigned_1
04A18F 00          0439*      db 000 ;sprite_unassigned_2
04A190             0440*  @use:
04A190 C3 72 A0 04 0441*      jp sprite_behavior_return
04A194             0442*  @hurt:
04A194 AF          0443*      xor a
04A195 C3 72 A0 04 0444*      jp sprite_behavior_return
04A199             0445*  @kill:
04A199 CD 9A 9F 04 0446*      call sprite_kill
04A19D C3 72 A0 04 0447*      jp sprite_behavior_return
04A1A1             0448*  @see:
04A1A1 AF          0449*      xor a
04A1A2 C3 72 A0 04 0450*      jp sprite_behavior_return
04A1A6             0451*  @move:
04A1A6 C3 72 A0 04 0452*      jp sprite_behavior_return
04A1AA             0453*  @shoot:
04A1AA C3 72 A0 04 0454*      jp sprite_behavior_return
04A1AE             0455*  
04A1AE             0456*  RADIOACTIVE_BARREL:
04A1AE             0457*  ; behavior routine address lookup
04A1AE C3 A1 04    0458*      dl @init
04A1B1 D9 A1 04    0459*      dl @use
04A1B4 DD A1 04    0460*      dl @hurt
04A1B7 F1 A1 04    0461*      dl @kill
04A1BA 01 A2 04    0462*      dl @see
04A1BD 06 A2 04    0463*      dl @move
04A1C0 0A A2 04    0464*      dl @shoot
04A1C3             0465*  @init:
04A1C3 21 CB A1 04 0466*      ld hl,@data ; address for LDIR to copy from
04A1C7 C3 72 A0 04 0467*      jp sprite_behavior_return
04A1CB             0468*  @data:
04A1CB 18          0469*      db 024 ;sprite_health
04A1CC 00          0470*      db 000 ;sprite_triggers_mask
04A1CD 00          0471*      db 000 ;sprite_x
04A1CE 00          0472*      db 000 ;sprite_y
04A1CF 00          0473*      db 000 ;sprite_orientation
04A1D0 00          0474*      db 000 ;sprite_animation
04A1D1 00          0475*      db 000 ;sprite_anim_tmr
04A1D2 01          0476*      db 001 ;sprite_move_timer
04A1D3 00          0477*      db 000 ;sprite_move_step
04A1D4 00          0478*      db 000 ;sprite_points
04A1D5 B5          0479*      db -75 ;sprite_health_modifier
04A1D6 00          0480*      db 000 ;sprite_unassigned_0
04A1D7 00          0481*      db 000 ;sprite_unassigned_1
04A1D8 00          0482*      db 000 ;sprite_unassigned_2
04A1D9             0483*  @use:
04A1D9 C3 72 A0 04 0484*      jp sprite_behavior_return
04A1DD             0485*  @hurt:
04A1DD 3E FF       0486*      ld a,255 ; kill player's shot
04A1DF 32 FE B1 04 0487*      ld (plyr_shot_status),a
04A1E3 3A 02 B2 04 0488*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A1E7 FD 86 02    0489*      add a,(iy+sprite_health)
04A1EA FD 77 02    0490*      ld (iy+sprite_health),a
04A1ED F2 72 A0 04 0491*      jp p,sprite_behavior_return ; if health is positive, return
04A1F1             0492*      ; otherwise fall through to kill sprite
04A1F1             0493*  @kill:
04A1F1 FD E5       0494*      push iy
04A1F3 CD 19 BE 04 0495*      call sfx_play_explode
04A1F7 FD E1       0496*      pop iy
04A1F9 CD 9A 9F 04 0497*      call sprite_kill
04A1FD C3 72 A0 04 0498*      jp sprite_behavior_return
04A201             0499*  @see:
04A201 AF          0500*      xor a
04A202 C3 72 A0 04 0501*      jp sprite_behavior_return
04A206             0502*  @move:
04A206 C3 72 A0 04 0503*      jp sprite_behavior_return
04A20A             0504*  @shoot:
04A20A C3 72 A0 04 0505*      jp sprite_behavior_return
04A20E             0506*  
04A20E             0507*  HEALTH_PACK:
04A20E             0508*  ; behavior routine address lookup
04A20E 23 A2 04    0509*      dl @init
04A211 39 A2 04    0510*      dl @use
04A214 42 A2 04    0511*      dl @hurt
04A217 47 A2 04    0512*      dl @kill
04A21A 4F A2 04    0513*      dl @see
04A21D 54 A2 04    0514*      dl @move
04A220 58 A2 04    0515*      dl @shoot
04A223             0516*  @init:
04A223 21 2B A2 04 0517*      ld hl,@data ; address for LDIR to copy from
04A227 C3 72 A0 04 0518*      jp sprite_behavior_return
04A22B             0519*  @data:
04A22B 64          0520*      db 100 ;sprite_health
04A22C 00          0521*      db 000 ;sprite_triggers_mask
04A22D 00          0522*      db 000 ;sprite_x
04A22E 00          0523*      db 000 ;sprite_y
04A22F 00          0524*      db 000 ;sprite_orientation
04A230 00          0525*      db 000 ;sprite_animation
04A231 00          0526*      db 000 ;sprite_anim_tmr
04A232 01          0527*      db 001 ;sprite_move_timer
04A233 00          0528*      db 000 ;sprite_move_step
04A234 00          0529*      db 000 ;sprite_points
04A235 14          0530*      db 020 ;sprite_health_modifier
04A236 00          0531*      db 000 ;sprite_unassigned_0
04A237 00          0532*      db 000 ;sprite_unassigned_1
04A238 00          0533*      db 000 ;sprite_unassigned_2
04A239             0534*  @use:
04A239 FD 7E 0C    0535*      ld a,(iy+sprite_health_modifier)
04A23C CD AB B3 04 0536*      call plyr_add_health
04A240 18 05       0537*      jr @kill
04A242             0538*  @hurt:
04A242 AF          0539*      xor a
04A243 C3 72 A0 04 0540*      jp sprite_behavior_return
04A247             0541*  @kill:
04A247 CD 9A 9F 04 0542*      call sprite_kill
04A24B C3 72 A0 04 0543*      jp sprite_behavior_return
04A24F             0544*  @see:
04A24F AF          0545*      xor a
04A250 C3 72 A0 04 0546*      jp sprite_behavior_return
04A254             0547*  @move:
04A254 C3 72 A0 04 0548*      jp sprite_behavior_return
04A258             0549*  @shoot:
04A258 C3 72 A0 04 0550*      jp sprite_behavior_return
04A25C             0551*  
04A25C             0552*  GOLD_CHALISE:
04A25C             0553*  ; behavior routine address lookup
04A25C 71 A2 04    0554*      dl @init
04A25F 87 A2 04    0555*      dl @use
04A262 98 A2 04    0556*      dl @hurt
04A265 9D A2 04    0557*      dl @kill
04A268 A5 A2 04    0558*      dl @see
04A26B AA A2 04    0559*      dl @move
04A26E AE A2 04    0560*      dl @shoot
04A271             0561*  @init:
04A271 21 79 A2 04 0562*      ld hl,@data ; address for LDIR to copy from
04A275 C3 72 A0 04 0563*      jp sprite_behavior_return
04A279             0564*  @data:
04A279 64          0565*      db 100 ;sprite_health
04A27A 00          0566*      db 000 ;sprite_triggers_mask
04A27B 00          0567*      db 000 ;sprite_x
04A27C 00          0568*      db 000 ;sprite_y
04A27D 00          0569*      db 000 ;sprite_orientation
04A27E 00          0570*      db 000 ;sprite_animation
04A27F 00          0571*      db 000 ;sprite_anim_tmr
04A280 01          0572*      db 001 ;sprite_move_timer
04A281 00          0573*      db 000 ;sprite_move_step
04A282 64          0574*      db 100 ;sprite_points
04A283 00          0575*      db 000 ;sprite_health_modifier
04A284 00          0576*      db 000 ;sprite_unassigned_0
04A285 00          0577*      db 000 ;sprite_unassigned_1
04A286 00          0578*      db 000 ;sprite_unassigned_2
04A287             0579*  @use:
04A287 FD E5       0580*      push iy
04A289 CD 25 BE 04 0581*      call sfx_play_got_treasure
04A28D FD E1       0582*      pop iy
04A28F FD 7E 0B    0583*      ld a,(iy+sprite_points)
04A292 CD CC B3 04 0584*      call plyr_mod_score
04A296 18 05       0585*      jr @kill
04A298             0586*  @hurt:
04A298 AF          0587*      xor a
04A299 C3 72 A0 04 0588*      jp sprite_behavior_return
04A29D             0589*  @kill:
04A29D CD 9A 9F 04 0590*      call sprite_kill
04A2A1 C3 72 A0 04 0591*      jp sprite_behavior_return
04A2A5             0592*  @see:
04A2A5 AF          0593*      xor a
04A2A6 C3 72 A0 04 0594*      jp sprite_behavior_return
04A2AA             0595*  @move:
04A2AA C3 72 A0 04 0596*      jp sprite_behavior_return
04A2AE             0597*  @shoot:
04A2AE C3 72 A0 04 0598*      jp sprite_behavior_return
04A2B2             0599*  
04A2B2             0600*  GOLD_CROSS:
04A2B2             0601*  ; behavior routine address lookup
04A2B2 C7 A2 04    0602*      dl @init
04A2B5 DD A2 04    0603*      dl @use
04A2B8 EE A2 04    0604*      dl @hurt
04A2BB F3 A2 04    0605*      dl @kill
04A2BE FB A2 04    0606*      dl @see
04A2C1 00 A3 04    0607*      dl @move
04A2C4 04 A3 04    0608*      dl @shoot
04A2C7             0609*  @init:
04A2C7 21 CF A2 04 0610*      ld hl,@data ; address for LDIR to copy from
04A2CB C3 72 A0 04 0611*      jp sprite_behavior_return
04A2CF             0612*  @data:
04A2CF 64          0613*      db 100 ;sprite_health
04A2D0 00          0614*      db 000 ;sprite_triggers_mask
04A2D1 00          0615*      db 000 ;sprite_x
04A2D2 00          0616*      db 000 ;sprite_y
04A2D3 00          0617*      db 000 ;sprite_orientation
04A2D4 00          0618*      db 000 ;sprite_animation
04A2D5 00          0619*      db 000 ;sprite_anim_tmr
04A2D6 01          0620*      db 001 ;sprite_move_timer
04A2D7 00          0621*      db 000 ;sprite_move_step
04A2D8 32          0622*      db 050 ;sprite_points
04A2D9 00          0623*      db 000 ;sprite_health_modifier
04A2DA 00          0624*      db 000 ;sprite_unassigned_0
04A2DB 00          0625*      db 000 ;sprite_unassigned_1
04A2DC 00          0626*      db 000 ;sprite_unassigned_2
04A2DD             0627*  @use:
04A2DD FD E5       0628*      push iy
04A2DF CD 25 BE 04 0629*      call sfx_play_got_treasure
04A2E3 FD E1       0630*      pop iy
04A2E5 FD 7E 0B    0631*      ld a,(iy+sprite_points)
04A2E8 CD CC B3 04 0632*      call plyr_mod_score
04A2EC 18 05       0633*      jr @kill
04A2EE             0634*  @hurt:
04A2EE AF          0635*      xor a
04A2EF C3 72 A0 04 0636*      jp sprite_behavior_return
04A2F3             0637*  @kill:
04A2F3 CD 9A 9F 04 0638*      call sprite_kill
04A2F7 C3 72 A0 04 0639*      jp sprite_behavior_return
04A2FB             0640*  @see:
04A2FB AF          0641*      xor a
04A2FC C3 72 A0 04 0642*      jp sprite_behavior_return
04A300             0643*  @move:
04A300 C3 72 A0 04 0644*      jp sprite_behavior_return
04A304             0645*  @shoot:
04A304 C3 72 A0 04 0646*      jp sprite_behavior_return
04A308             0647*  
04A308             0648*  PLATE_OF_FOOD:
04A308             0649*  ; behavior routine address lookup
04A308 1D A3 04    0650*      dl @init
04A30B 33 A3 04    0651*      dl @use
04A30E 3C A3 04    0652*      dl @hurt
04A311 41 A3 04    0653*      dl @kill
04A314 49 A3 04    0654*      dl @see
04A317 4E A3 04    0655*      dl @move
04A31A 52 A3 04    0656*      dl @shoot
04A31D             0657*  @init:
04A31D 21 25 A3 04 0658*      ld hl,@data ; address for LDIR to copy from
04A321 C3 72 A0 04 0659*      jp sprite_behavior_return
04A325             0660*  @data:
04A325 64          0661*      db 100 ;sprite_health
04A326 00          0662*      db 000 ;sprite_triggers_mask
04A327 00          0663*      db 000 ;sprite_x
04A328 00          0664*      db 000 ;sprite_y
04A329 00          0665*      db 000 ;sprite_orientation
04A32A 00          0666*      db 000 ;sprite_animation
04A32B 00          0667*      db 000 ;sprite_anim_tmr
04A32C 01          0668*      db 001 ;sprite_move_timer
04A32D 00          0669*      db 000 ;sprite_move_step
04A32E 00          0670*      db 000 ;sprite_points
04A32F 0A          0671*      db 010 ;sprite_health_modifier
04A330 00          0672*      db 000 ;sprite_unassigned_0
04A331 00          0673*      db 000 ;sprite_unassigned_1
04A332 00          0674*      db 000 ;sprite_unassigned_2
04A333             0675*  @use:
04A333 FD 7E 0C    0676*      ld a,(iy+sprite_health_modifier)
04A336 CD AB B3 04 0677*      call plyr_add_health
04A33A 18 05       0678*      jr @kill
04A33C             0679*  @hurt:
04A33C AF          0680*      xor a
04A33D C3 72 A0 04 0681*      jp sprite_behavior_return
04A341             0682*  @kill:
04A341 CD 9A 9F 04 0683*      call sprite_kill
04A345 C3 72 A0 04 0684*      jp sprite_behavior_return
04A349             0685*  @see:
04A349 AF          0686*      xor a
04A34A C3 72 A0 04 0687*      jp sprite_behavior_return
04A34E             0688*  @move:
04A34E C3 72 A0 04 0689*      jp sprite_behavior_return
04A352             0690*  @shoot:
04A352 C3 72 A0 04 0691*      jp sprite_behavior_return
04A356             0692*  
04A356             0693*  KEYCARD:
04A356             0694*  ; behavior routine address lookup
04A356 6B A3 04    0695*      dl @init
04A359 81 A3 04    0696*      dl @use
04A35C 93 A3 04    0697*      dl @hurt
04A35F 98 A3 04    0698*      dl @kill
04A362 A0 A3 04    0699*      dl @see
04A365 A5 A3 04    0700*      dl @move
04A368 A9 A3 04    0701*      dl @shoot
04A36B             0702*  @init:
04A36B 21 73 A3 04 0703*      ld hl,@data ; address for LDIR to copy from
04A36F C3 72 A0 04 0704*      jp sprite_behavior_return
04A373             0705*  @data:
04A373 64          0706*      db 100 ;sprite_health
04A374 00          0707*      db 000 ;sprite_triggers_mask
04A375 00          0708*      db 000 ;sprite_x
04A376 00          0709*      db 000 ;sprite_y
04A377 00          0710*      db 000 ;sprite_orientation
04A378 00          0711*      db 000 ;sprite_animation
04A379 00          0712*      db 000 ;sprite_anim_tmr
04A37A 01          0713*      db 001 ;sprite_move_timer
04A37B 00          0714*      db 000 ;sprite_move_step
04A37C 00          0715*      db 000 ;sprite_points
04A37D 00          0716*      db 000 ;sprite_health_modifier
04A37E 00          0717*      db 000 ;sprite_unassigned_0
04A37F 00          0718*      db 000 ;sprite_unassigned_1
04A380 00          0719*      db 000 ;sprite_unassigned_2
04A381             0720*  @use:
04A381 3E 08       0721*      ld a,8
04A383 CD DB B3 04 0722*      call plyr_add_ammo
04A387 CD 3D BE 04 0723*      call sfx_play_gun_reload
04A38B CD 9A 9F 04 0724*      call sprite_kill
04A38F C3 72 A0 04 0725*      jp sprite_behavior_return
04A393             0726*  @hurt:
04A393 AF          0727*      xor a
04A394 C3 72 A0 04 0728*      jp sprite_behavior_return
04A398             0729*  @kill:
04A398 CD 9A 9F 04 0730*      call sprite_kill
04A39C C3 72 A0 04 0731*      jp sprite_behavior_return
04A3A0             0732*  @see:
04A3A0 AF          0733*      xor a
04A3A1 C3 72 A0 04 0734*      jp sprite_behavior_return
04A3A5             0735*  @move:
04A3A5 C3 72 A0 04 0736*      jp sprite_behavior_return
04A3A9             0737*  @shoot:
04A3A9 C3 72 A0 04 0738*      jp sprite_behavior_return
04A3AD             0739*  
04A3AD             0740*  GOLD_CHEST:
04A3AD             0741*  ; behavior routine address lookup
04A3AD C2 A3 04    0742*      dl @init
04A3B0 D8 A3 04    0743*      dl @use
04A3B3 E9 A3 04    0744*      dl @hurt
04A3B6 EE A3 04    0745*      dl @kill
04A3B9 F6 A3 04    0746*      dl @see
04A3BC FB A3 04    0747*      dl @move
04A3BF FF A3 04    0748*      dl @shoot
04A3C2             0749*  @init:
04A3C2 21 CA A3 04 0750*      ld hl,@data ; address for LDIR to copy from
04A3C6 C3 72 A0 04 0751*      jp sprite_behavior_return
04A3CA             0752*  @data:
04A3CA 64          0753*      db 100 ;sprite_health
04A3CB 00          0754*      db 000 ;sprite_triggers_mask
04A3CC 00          0755*      db 000 ;sprite_x
04A3CD 00          0756*      db 000 ;sprite_y
04A3CE 00          0757*      db 000 ;sprite_orientation
04A3CF 00          0758*      db 000 ;sprite_animation
04A3D0 00          0759*      db 000 ;sprite_anim_tmr
04A3D1 01          0760*      db 001 ;sprite_move_timer
04A3D2 00          0761*      db 000 ;sprite_move_step
04A3D3 FA          0762*      db 250 ;sprite_points
04A3D4 00          0763*      db 000 ;sprite_health_modifier
04A3D5 00          0764*      db 000 ;sprite_unassigned_0
04A3D6 00          0765*      db 000 ;sprite_unassigned_1
04A3D7 00          0766*      db 000 ;sprite_unassigned_2
04A3D8             0767*  @use:
04A3D8 FD E5       0768*      push iy
04A3DA CD 25 BE 04 0769*      call sfx_play_got_treasure
04A3DE FD E1       0770*      pop iy
04A3E0 FD 7E 0B    0771*      ld a,(iy+sprite_points)
04A3E3 CD CC B3 04 0772*      call plyr_mod_score
04A3E7 18 05       0773*      jr @kill
04A3E9             0774*  @hurt:
04A3E9 AF          0775*      xor a
04A3EA C3 72 A0 04 0776*      jp sprite_behavior_return
04A3EE             0777*  @kill:
04A3EE CD 9A 9F 04 0778*      call sprite_kill
04A3F2 C3 72 A0 04 0779*      jp sprite_behavior_return
04A3F6             0780*  @see:
04A3F6 AF          0781*      xor a
04A3F7 C3 72 A0 04 0782*      jp sprite_behavior_return
04A3FB             0783*  @move:
04A3FB C3 72 A0 04 0784*      jp sprite_behavior_return
04A3FF             0785*  @shoot:
04A3FF C3 72 A0 04 0786*      jp sprite_behavior_return
04A403             0787*  
04A403             0788*  MACHINE_GUN:
04A403             0789*  ; behavior routine address lookup
04A403 18 A4 04    0790*      dl @init
04A406 2E A4 04    0791*      dl @use
04A409 52 A4 04    0792*      dl @hurt
04A40C 57 A4 04    0793*      dl @kill
04A40F 5F A4 04    0794*      dl @see
04A412 64 A4 04    0795*      dl @move
04A415 68 A4 04    0796*      dl @shoot
04A418             0797*  @init:
04A418 21 20 A4 04 0798*      ld hl,@data ; address for LDIR to copy from
04A41C C3 72 A0 04 0799*      jp sprite_behavior_return
04A420             0800*  @data:
04A420 64          0801*      db 100 ;sprite_health
04A421 00          0802*      db 000 ;sprite_triggers_mask
04A422 00          0803*      db 000 ;sprite_x
04A423 00          0804*      db 000 ;sprite_y
04A424 00          0805*      db 000 ;sprite_orientation
04A425 00          0806*      db 000 ;sprite_animation
04A426 00          0807*      db 000 ;sprite_anim_tmr
04A427 01          0808*      db 001 ;sprite_move_timer
04A428 00          0809*      db 000 ;sprite_move_step
04A429 00          0810*      db 000 ;sprite_points
04A42A 00          0811*      db 000 ;sprite_health_modifier
04A42B 00          0812*      db 000 ;sprite_unassigned_0
04A42C 00          0813*      db 000 ;sprite_unassigned_1
04A42D 00          0814*      db 000 ;sprite_unassigned_2
04A42E             0815*  @use:
04A42E 3E 10       0816*      ld a,16
04A430 CD DB B3 04 0817*      call plyr_add_ammo
04A434 CD 3D BE 04 0818*      call sfx_play_gun_reload
04A438 3E 04       0819*      ld a,plyr_wpn_mg
04A43A 21 03 B2 04 0820*      ld hl,plyr_wpns
04A43E B6          0821*      or (hl)
04A43F 77          0822*      ld (hl),a
04A440 3E 04       0823*      ld a,plyr_wpn_mg
04A442 32 04 B2 04 0824*      ld (plyr_wpn_active),a
04A446 CD F2 B2 04 0825*      call plyr_set_weapon_parameters
04A44A CD 9A 9F 04 0826*      call sprite_kill
04A44E C3 72 A0 04 0827*      jp sprite_behavior_return
04A452             0828*  @hurt:
04A452 AF          0829*      xor a
04A453 C3 72 A0 04 0830*      jp sprite_behavior_return
04A457             0831*  @kill:
04A457 CD 9A 9F 04 0832*      call sprite_kill
04A45B C3 72 A0 04 0833*      jp sprite_behavior_return
04A45F             0834*  @see:
04A45F AF          0835*      xor a
04A460 C3 72 A0 04 0836*      jp sprite_behavior_return
04A464             0837*  @move:
04A464 C3 72 A0 04 0838*      jp sprite_behavior_return
04A468             0839*  @shoot:
04A468 C3 72 A0 04 0840*      jp sprite_behavior_return
04A46C             0841*  
04A46C             0842*  GATLING_GUN:
04A46C             0843*  ; behavior routine address lookup
04A46C 81 A4 04    0844*      dl @init
04A46F 97 A4 04    0845*      dl @use
04A472 BB A4 04    0846*      dl @hurt
04A475 C0 A4 04    0847*      dl @kill
04A478 C8 A4 04    0848*      dl @see
04A47B CD A4 04    0849*      dl @move
04A47E D1 A4 04    0850*      dl @shoot
04A481             0851*  @init:
04A481 21 89 A4 04 0852*      ld hl,@data ; address for LDIR to copy from
04A485 C3 72 A0 04 0853*      jp sprite_behavior_return
04A489             0854*  @data:
04A489 64          0855*      db 100 ;sprite_health
04A48A 00          0856*      db 000 ;sprite_triggers_mask
04A48B 00          0857*      db 000 ;sprite_x
04A48C 00          0858*      db 000 ;sprite_y
04A48D 00          0859*      db 000 ;sprite_orientation
04A48E 00          0860*      db 000 ;sprite_animation
04A48F 00          0861*      db 000 ;sprite_anim_tmr
04A490 01          0862*      db 001 ;sprite_move_timer
04A491 00          0863*      db 000 ;sprite_move_step
04A492 00          0864*      db 000 ;sprite_points
04A493 00          0865*      db 000 ;sprite_health_modifier
04A494 00          0866*      db 000 ;sprite_unassigned_0
04A495 00          0867*      db 000 ;sprite_unassigned_1
04A496 00          0868*      db 000 ;sprite_unassigned_2
04A497             0869*  @use:
04A497 3E 20       0870*      ld a,32
04A499 CD DB B3 04 0871*      call plyr_add_ammo
04A49D CD 3D BE 04 0872*      call sfx_play_gun_reload
04A4A1 3E 08       0873*      ld a,plyr_wpn_gg
04A4A3 21 03 B2 04 0874*      ld hl,plyr_wpns
04A4A7 B6          0875*      or (hl)
04A4A8 77          0876*      ld (hl),a
04A4A9 3E 08       0877*      ld a,plyr_wpn_gg
04A4AB 32 04 B2 04 0878*      ld (plyr_wpn_active),a
04A4AF CD F2 B2 04 0879*      call plyr_set_weapon_parameters
04A4B3 CD 9A 9F 04 0880*      call sprite_kill
04A4B7 C3 72 A0 04 0881*      jp sprite_behavior_return
04A4BB             0882*  @hurt:
04A4BB AF          0883*      xor a
04A4BC C3 72 A0 04 0884*      jp sprite_behavior_return
04A4C0             0885*  @kill:
04A4C0 CD 9A 9F 04 0886*      call sprite_kill
04A4C4 C3 72 A0 04 0887*      jp sprite_behavior_return
04A4C8             0888*  @see:
04A4C8 AF          0889*      xor a
04A4C9 C3 72 A0 04 0890*      jp sprite_behavior_return
04A4CD             0891*  @move:
04A4CD C3 72 A0 04 0892*      jp sprite_behavior_return
04A4D1             0893*  @shoot:
04A4D1 C3 72 A0 04 0894*      jp sprite_behavior_return
04A4D5             0895*  
04A4D5             0896*  DOG_FOOD:
04A4D5             0897*  ; behavior routine address lookup
04A4D5 EA A4 04    0898*      dl @init
04A4D8 00 A5 04    0899*      dl @use
04A4DB 09 A5 04    0900*      dl @hurt
04A4DE 0E A5 04    0901*      dl @kill
04A4E1 16 A5 04    0902*      dl @see
04A4E4 1B A5 04    0903*      dl @move
04A4E7 1F A5 04    0904*      dl @shoot
04A4EA             0905*  @init:
04A4EA 21 F2 A4 04 0906*      ld hl,@data ; address for LDIR to copy from
04A4EE C3 72 A0 04 0907*      jp sprite_behavior_return
04A4F2             0908*  @data:
04A4F2 64          0909*      db 100 ;sprite_health
04A4F3 00          0910*      db 000 ;sprite_triggers_mask
04A4F4 00          0911*      db 000 ;sprite_x
04A4F5 00          0912*      db 000 ;sprite_y
04A4F6 00          0913*      db 000 ;sprite_orientation
04A4F7 00          0914*      db 000 ;sprite_animation
04A4F8 00          0915*      db 000 ;sprite_anim_tmr
04A4F9 01          0916*      db 001 ;sprite_move_timer
04A4FA 00          0917*      db 000 ;sprite_move_step
04A4FB 00          0918*      db 000 ;sprite_points
04A4FC 05          0919*      db 005 ;sprite_health_modifier
04A4FD 00          0920*      db 000 ;sprite_unassigned_0
04A4FE 00          0921*      db 000 ;sprite_unassigned_1
04A4FF 00          0922*      db 000 ;sprite_unassigned_2
04A500             0923*  @use:
04A500 FD 7E 0C    0924*      ld a,(iy+sprite_health_modifier)
04A503 CD AB B3 04 0925*      call plyr_add_health
04A507 18 05       0926*      jr @kill
04A509             0927*  @hurt:
04A509 AF          0928*      xor a
04A50A C3 72 A0 04 0929*      jp sprite_behavior_return
04A50E             0930*  @kill:
04A50E CD 9A 9F 04 0931*      call sprite_kill
04A512 C3 72 A0 04 0932*      jp sprite_behavior_return
04A516             0933*  @see:
04A516 AF          0934*      xor a
04A517 C3 72 A0 04 0935*      jp sprite_behavior_return
04A51B             0936*  @move:
04A51B C3 72 A0 04 0937*      jp sprite_behavior_return
04A51F             0938*  @shoot:
04A51F C3 72 A0 04 0939*      jp sprite_behavior_return
04A523             0940*  
04A523             0941*  GOLD_KEY:
04A523             0942*  ; behavior routine address lookup
04A523 38 A5 04    0943*      dl @init
04A526 4E A5 04    0944*      dl @use
04A529 52 A5 04    0945*      dl @hurt
04A52C 57 A5 04    0946*      dl @kill
04A52F 5F A5 04    0947*      dl @see
04A532 64 A5 04    0948*      dl @move
04A535 68 A5 04    0949*      dl @shoot
04A538             0950*  @init:
04A538 21 40 A5 04 0951*      ld hl,@data ; address for LDIR to copy from
04A53C C3 72 A0 04 0952*      jp sprite_behavior_return
04A540             0953*  @data:
04A540 64          0954*      db 100 ;sprite_health
04A541 00          0955*      db 000 ;sprite_triggers_mask
04A542 00          0956*      db 000 ;sprite_x
04A543 00          0957*      db 000 ;sprite_y
04A544 00          0958*      db 000 ;sprite_orientation
04A545 00          0959*      db 000 ;sprite_animation
04A546 00          0960*      db 000 ;sprite_anim_tmr
04A547 01          0961*      db 001 ;sprite_move_timer
04A548 00          0962*      db 000 ;sprite_move_step
04A549 00          0963*      db 000 ;sprite_points
04A54A 00          0964*      db 000 ;sprite_health_modifier
04A54B 00          0965*      db 000 ;sprite_unassigned_0
04A54C 00          0966*      db 000 ;sprite_unassigned_1
04A54D 00          0967*      db 000 ;sprite_unassigned_2
04A54E             0968*  @use:
04A54E C3 72 A0 04 0969*      jp sprite_behavior_return
04A552             0970*  @hurt:
04A552 AF          0971*      xor a
04A553 C3 72 A0 04 0972*      jp sprite_behavior_return
04A557             0973*  @kill:
04A557 CD 9A 9F 04 0974*      call sprite_kill
04A55B C3 72 A0 04 0975*      jp sprite_behavior_return
04A55F             0976*  @see:
04A55F AF          0977*      xor a
04A560 C3 72 A0 04 0978*      jp sprite_behavior_return
04A564             0979*  @move:
04A564 C3 72 A0 04 0980*      jp sprite_behavior_return
04A568             0981*  @shoot:
04A568 C3 72 A0 04 0982*      jp sprite_behavior_return
04A56C             0983*  
04A56C             0984*  DOG:
04A56C             0985*  ; behavior routine address lookup
04A56C 81 A5 04    0986*      dl @init
04A56F 97 A5 04    0987*      dl @use
04A572 AA A5 04    0988*      dl @hurt
04A575 CE A5 04    0989*      dl @kill
04A578 E5 A5 04    0990*      dl @see
04A57B ED A5 04    0991*      dl @move
04A57E 09 A6 04    0992*      dl @shoot
04A581             0993*  @init:
04A581 21 89 A5 04 0994*      ld hl,@data ; address for LDIR to copy from
04A585 C3 72 A0 04 0995*      jp sprite_behavior_return
04A589             0996*  @data:
04A589 32          0997*      db 050 ;sprite_health
04A58A 00          0998*      db 000 ;sprite_triggers_mask
04A58B 00          0999*      db 000 ;sprite_x
04A58C 00          1000*      db 000 ;sprite_y
04A58D 00          1001*      db 000 ;sprite_orientation
04A58E 00          1002*      db 000 ;sprite_animation
04A58F 00          1003*      db 000 ;sprite_anim_tmr
04A590 01          1004*      db 001 ;sprite_move_timer
04A591 00          1005*      db 000 ;sprite_move_step
04A592 0A          1006*      db 010 ;sprite_points
04A593 F6          1007*      db -10 ;sprite_health_modifier
04A594 00          1008*      db 000 ;sprite_unassigned_0
04A595 00          1009*      db 000 ;sprite_unassigned_1
04A596 00          1010*      db 000 ;sprite_unassigned_2
04A597             1011*  @use:
04A597 FD E5       1012*      push iy
04A599 CD 01 BE 04 1013*      call sfx_play_dog_woof_single
04A59D FD E1       1014*      pop iy
04A59F FD 7E 0C    1015*      ld a,(iy+sprite_health_modifier)
04A5A2 CD B8 B3 04 1016*      call plyr_sub_health
04A5A6 C3 72 A0 04 1017*      jp sprite_behavior_return
04A5AA             1018*  @hurt:
04A5AA CD DA B6 04 1019*      call rand_8
04A5AE E6 01       1020*      and %00000001
04A5B0 20 08       1021*      jr nz,@nosound
04A5B2 FD E5       1022*      push iy
04A5B4 CD 0D BE 04 1023*      call sfx_play_dog_yelp
04A5B8 FD E1       1024*      pop iy
04A5BA             1025*  @nosound:
04A5BA 3E FF       1026*      ld a,255 ; kill player's shot
04A5BC 32 FE B1 04 1027*      ld (plyr_shot_status),a
04A5C0 3A 02 B2 04 1028*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A5C4 FD 86 02    1029*      add a,(iy+sprite_health)
04A5C7 FD 77 02    1030*      ld (iy+sprite_health),a
04A5CA             1031*      ; jp p,sprite_behavior_return ; if health is positive, return
04A5CA F2 F4 A5 04 1032*      jp p,@do_move
04A5CE             1033*      ; otherwise fall through to kill sprite
04A5CE             1034*  @kill:
04A5CE FD E5       1035*      push iy
04A5D0 CD 0D BE 04 1036*      call sfx_play_dog_yelp
04A5D4 FD E1       1037*      pop iy
04A5D6 FD 7E 0B    1038*      ld a,(iy+sprite_points)
04A5D9 CD CC B3 04 1039*      call plyr_mod_score
04A5DD CD 9A 9F 04 1040*      call sprite_kill
04A5E1 C3 72 A0 04 1041*      jp sprite_behavior_return
04A5E5             1042*  @see:
04A5E5 18 06       1043*      jr @move
04A5E7             1044*  @seen:
04A5E7 AF          1045*      xor a
04A5E8 3C          1046*      inc a
04A5E9 C3 72 A0 04 1047*      jp sprite_behavior_return
04A5ED             1048*  @move:
04A5ED FD 35 09    1049*      dec (iy+sprite_move_timer)
04A5F0 28 02       1050*      jr z,@do_move
04A5F2 18 F3       1051*      jr @seen
04A5F4             1052*  @do_move:
04A5F4 CD DA B6 04 1053*      call rand_8
04A5F8 E6 3F       1054*      and %00111111 ; between 0 and 63
04A5FA             1055*      ; or %00100000  ; at least 32
04A5FA F6 10       1056*      or %00010000  ; at least 16
04A5FC FD 77 09    1057*      ld (iy+sprite_move_timer),a
04A5FF CD EC 9F 04 1058*      call sprite_move_random
04A603 CD F5 BD 04 1059*      call sfx_play_dog_woof_double
04A607 18 DE       1060*      jr @seen
04A609             1061*  @shoot:
04A609 C3 72 A0 04 1062*      jp sprite_behavior_return
04A60D             1063*  
04A60D             1064*  GERMAN_TROOPER:
04A60D             1065*  ; behavior routine address lookup
04A60D 22 A6 04    1066*      dl @init
04A610 38 A6 04    1067*      dl @use
04A613 4A A6 04    1068*      dl @hurt
04A616 6E A6 04    1069*      dl @kill
04A619 85 A6 04    1070*      dl @see
04A61C A4 A6 04    1071*      dl @move
04A61F BC A6 04    1072*      dl @shoot
04A622             1073*  @init:
04A622 21 2A A6 04 1074*      ld hl,@data ; address for LDIR to copy from
04A626 C3 72 A0 04 1075*      jp sprite_behavior_return
04A62A             1076*  @data:
04A62A 4B          1077*      db 075 ;sprite_health
04A62B 00          1078*      db 000 ;sprite_triggers_mask
04A62C 00          1079*      db 000 ;sprite_x
04A62D 00          1080*      db 000 ;sprite_y
04A62E 00          1081*      db 000 ;sprite_orientation
04A62F 00          1082*      db 000 ;sprite_animation
04A630 00          1083*      db 000 ;sprite_anim_tmr
04A631 01          1084*      db 001 ;sprite_move_timer
04A632 00          1085*      db 000 ;sprite_move_step
04A633 14          1086*      db 020 ;sprite_points
04A634 EC          1087*      db -20 ;sprite_health_modifier
04A635 00          1088*      db 000 ;sprite_unassigned_0
04A636 00          1089*      db 000 ;sprite_unassigned_1
04A637 00          1090*      db 000 ;sprite_unassigned_2
04A638             1091*  @use:
04A638 FD E5       1092*      push iy
04A63A CD B9 BD 04 1093*      call sfx_play_achtung
04A63E FD E1       1094*      pop iy
04A640 3E FB       1095*      ld a,-5
04A642 CD B8 B3 04 1096*      call plyr_sub_health
04A646 C3 72 A0 04 1097*      jp sprite_behavior_return
04A64A             1098*  @hurt:
04A64A CD DA B6 04 1099*      call rand_8
04A64E E6 01       1100*      and %00000001
04A650 20 08       1101*      jr nz,@nosound
04A652 FD E5       1102*      push iy
04A654 CD B1 AD 04 1103*      call sfx_play_random_hurt
04A658 FD E1       1104*      pop iy
04A65A             1105*  @nosound:
04A65A 3E FF       1106*      ld a,255 ; kill player's shot
04A65C 32 FE B1 04 1107*      ld (plyr_shot_status),a
04A660 3A 02 B2 04 1108*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A664 FD 86 02    1109*      add a,(iy+sprite_health)
04A667 FD 77 02    1110*      ld (iy+sprite_health),a
04A66A             1111*      ; jp p,sprite_behavior_return ; if health is positive, return
04A66A F2 AB A6 04 1112*      jp p,@do_move
04A66E             1113*      ; otherwise fall through to kill sprite
04A66E             1114*  @kill:
04A66E FD E5       1115*      push iy
04A670 CD B5 BE 04 1116*      call sfx_play_wilhelm
04A674 FD E1       1117*      pop iy
04A676 FD 7E 0B    1118*      ld a,(iy+sprite_points)
04A679 CD CC B3 04 1119*      call plyr_mod_score
04A67D CD 9A 9F 04 1120*      call sprite_kill
04A681 C3 72 A0 04 1121*      jp sprite_behavior_return
04A685             1122*  @see:
04A685 FD 7E 03    1123*      ld a,(iy+sprite_triggers_mask)
04A688 E6 01       1124*      and sprite_trigger_see
04A68A C2 A4 A6 04 1125*      jp nz,@move
04A68E 3E 01       1126*      ld a,sprite_trigger_see
04A690 FD B6 03    1127*      or a,(iy+sprite_triggers_mask)
04A693 FD 77 03    1128*      ld (iy+sprite_triggers_mask),a
04A696 FD E5       1129*      push iy
04A698 CD B9 BD 04 1130*      call sfx_play_achtung
04A69C FD E1       1131*      pop iy
04A69E             1132*  @seen:
04A69E AF          1133*      xor a
04A69F 3C          1134*      inc a
04A6A0 C3 72 A0 04 1135*      jp sprite_behavior_return
04A6A4             1136*  @move:
04A6A4 FD 35 09    1137*      dec (iy+sprite_move_timer)
04A6A7 28 02       1138*      jr z,@do_move
04A6A9 18 F3       1139*      jr @seen
04A6AB             1140*  @do_move:
04A6AB CD DA B6 04 1141*      call rand_8
04A6AF E6 3F       1142*      and %00111111 ; between 0 and 63
04A6B1             1143*      ; or %00100000  ; at least 32
04A6B1 F6 10       1144*      or %00010000  ; at least 16
04A6B3 FD 77 09    1145*      ld (iy+sprite_move_timer),a
04A6B6 CD EC 9F 04 1146*      call sprite_move_random
04A6BA 18 E2       1147*      jr @seen
04A6BC             1148*  @shoot:
04A6BC C3 72 A0 04 1149*      jp sprite_behavior_return
04A6C0             1150*  
04A6C0             1151*  SS_GUARD:
04A6C0             1152*  ; behavior routine address lookup
04A6C0 D5 A6 04    1153*      dl @init
04A6C3 EB A6 04    1154*      dl @use
04A6C6 FD A6 04    1155*      dl @hurt
04A6C9 21 A7 04    1156*      dl @kill
04A6CC 38 A7 04    1157*      dl @see
04A6CF 57 A7 04    1158*      dl @move
04A6D2 6F A7 04    1159*      dl @shoot
04A6D5             1160*  @init:
04A6D5 21 DD A6 04 1161*      ld hl,@data ; address for LDIR to copy from
04A6D9 C3 72 A0 04 1162*      jp sprite_behavior_return
04A6DD             1163*  @data:
04A6DD 64          1164*      db 100 ;sprite_health
04A6DE 00          1165*      db 000 ;sprite_triggers_mask
04A6DF 00          1166*      db 000 ;sprite_x
04A6E0 00          1167*      db 000 ;sprite_y
04A6E1 00          1168*      db 000 ;sprite_orientation
04A6E2 00          1169*      db 000 ;sprite_animation
04A6E3 00          1170*      db 000 ;sprite_anim_tmr
04A6E4 01          1171*      db 001 ;sprite_move_timer
04A6E5 00          1172*      db 000 ;sprite_move_step
04A6E6 1E          1173*      db 030 ;sprite_points
04A6E7 E2          1174*      db -30 ;sprite_health_modifier
04A6E8 00          1175*      db 000 ;sprite_unassigned_0
04A6E9 00          1176*      db 000 ;sprite_unassigned_1
04A6EA 00          1177*      db 000 ;sprite_unassigned_2
04A6EB             1178*  @use:
04A6EB FD E5       1179*      push iy
04A6ED CD 6D BE 04 1180*      call sfx_play_schusstaffel
04A6F1 FD E1       1181*      pop iy
04A6F3 3E F6       1182*      ld a,-10
04A6F5 CD B8 B3 04 1183*      call plyr_sub_health
04A6F9 C3 72 A0 04 1184*      jp sprite_behavior_return
04A6FD             1185*  @hurt:
04A6FD CD DA B6 04 1186*      call rand_8
04A701 E6 01       1187*      and %00000001
04A703 20 08       1188*      jr nz,@nosound
04A705 FD E5       1189*      push iy
04A707 CD B1 AD 04 1190*      call sfx_play_random_hurt
04A70B FD E1       1191*      pop iy
04A70D             1192*  @nosound:
04A70D 3E FF       1193*      ld a,255 ; kill player's shot
04A70F 32 FE B1 04 1194*      ld (plyr_shot_status),a
04A713 3A 02 B2 04 1195*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A717 FD 86 02    1196*      add a,(iy+sprite_health)
04A71A FD 77 02    1197*      ld (iy+sprite_health),a
04A71D             1198*      ; jp p,sprite_behavior_return ; if health is positive, return
04A71D F2 5E A7 04 1199*      jp p,@do_move
04A721             1200*      ; otherwise fall through to kill sprite
04A721             1201*  @kill:
04A721 FD E5       1202*      push iy
04A723 CD 55 BE 04 1203*      call sfx_play_mein_leben
04A727 FD E1       1204*      pop iy
04A729 FD 7E 0B    1205*      ld a,(iy+sprite_points)
04A72C CD CC B3 04 1206*      call plyr_mod_score
04A730 CD 9A 9F 04 1207*      call sprite_kill
04A734 C3 72 A0 04 1208*      jp sprite_behavior_return
04A738             1209*  @see:
04A738 FD 7E 03    1210*      ld a,(iy+sprite_triggers_mask)
04A73B E6 01       1211*      and sprite_trigger_see
04A73D C2 57 A7 04 1212*      jp nz,@move
04A741 3E 01       1213*      ld a,sprite_trigger_see
04A743 FD B6 03    1214*      or a,(iy+sprite_triggers_mask)
04A746 FD 77 03    1215*      ld (iy+sprite_triggers_mask),a
04A749 FD E5       1216*      push iy
04A74B CD 6D BE 04 1217*      call sfx_play_schusstaffel
04A74F FD E1       1218*      pop iy
04A751             1219*  @seen:
04A751 AF          1220*      xor a
04A752 3C          1221*      inc a
04A753 C3 72 A0 04 1222*      jp sprite_behavior_return
04A757             1223*  @move:
04A757 FD 35 09    1224*      dec (iy+sprite_move_timer)
04A75A 28 02       1225*      jr z,@do_move
04A75C 18 F3       1226*      jr @seen
04A75E             1227*  @do_move:
04A75E CD DA B6 04 1228*      call rand_8
04A762 E6 3F       1229*      and %00111111 ; between 0 and 63
04A764             1230*      ; or %00100000  ; at least 32
04A764 F6 10       1231*      or %00010000  ; at least 16
04A766 FD 77 09    1232*      ld (iy+sprite_move_timer),a
04A769 CD EC 9F 04 1233*      call sprite_move_random
04A76D 18 E2       1234*      jr @seen
04A76F             1235*  @shoot:
04A76F C3 72 A0 04 1236*      jp sprite_behavior_return
04A773             1237*  
04A773 00          1238*  see_orientation: db 0x00
04A774             1239*  ; cycle through all cells visible to the player from the current position
04A774             1240*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04A774             1241*  ; inputs: cur_x, cur_y,
04A774             1242*  ; outputs: player-aware enemies
04A774             1243*  ; destroys: everything
04A774             1244*  sprites_see_plyr:
04A774             1245*  ; ; DEBUG: set up loop timer
04A774             1246*  ;     call prt_loop_reset
04A774             1247*  ; ; END DEBUG
04A774             1248*  ; ; DEBUG: start loop timer
04A774             1249*  ;     call prt_loop_start
04A774             1250*  ; ; END DEBUG
04A774             1251*  
04A774             1252*  ; intialize orientation
04A774 AF          1253*      xor a
04A775 32 73 A7 04 1254*      ld (see_orientation),a
04A779             1255*  @loop_orientation:
04A779             1256*  ; get current map position and camera orientation
04A779 ED 5B EE B1 1257*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04A77E             1258*      ; 0-1 prt ticks, 4 loops
04A77E CD A2 65 04 1259*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04A782             1260*  ; get cell_views address for this cell and orientation
04A782 3A 73 A7 04 1261*      ld a,(see_orientation)
04A786 5F          1262*      ld e,a
04A787 16 06       1263*      ld d,6 ; 6 bytes per orientation
04A789 ED 5C       1264*      mlt de ; de = orientation offset
04A78B EB          1265*      ex de,hl ; hl = orientation offset
04A78C 06 18       1266*      ld b,24 ; 24 bytes per cell in cell_views lut
04A78E ED 4C       1267*      mlt bc ; bc = offset from base address of cell_views lut
04A790 09          1268*      add hl,bc ; hl = total offset from cell_views base address
04A791 EB          1269*      ex de,hl ; because we can't add iy to hl
04A792 FD 21 00 E4 1270*      ld iy,cell_views ; base address of cell_views lut
       B7          
04A797 FD 19       1271*      add iy,de ; iy = cell_views address
04A799 FD 22 2E 67 1272*      ld (cur_cell_views),iy
       04          
04A79E             1273*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04A79E 01 00 46 28 1274*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04A7A2 AF          1275*      xor a ; poly_id
04A7A3 32 2A 67 04 1276*      ld (to_poly_id),a
04A7A7             1277*  @loop:
04A7A7 ED 43 B3 A7 1278*      ld (@bit_iy+2),bc
       04          
04A7AC FD 2A 2E 67 1279*      ld iy,(cur_cell_views)
       04          
04A7B1             1280*  @bit_iy:
04A7B1 FD CB 00 46 1281*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04A7B5 28 2E       1282*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04A7B7             1283*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04A7B7 3A 2A 67 04 1284*      ld a,(to_poly_id)
04A7BB 4F          1285*      ld c,a ; poly_id
04A7BC 3A 73 A7 04 1286*      ld a,(see_orientation)
04A7C0 CD 4B 69 04 1287*      call get_polys_deltas ; d,e = y,x deltas
04A7C4 3A EE B1 04 1288*      ld a,(cur_x)
04A7C8 83          1289*      add a,e
04A7C9 5F          1290*      ld e,a
04A7CA 3A EF B1 04 1291*      ld a,(cur_y)
04A7CE 82          1292*      add a,d
04A7CF 57          1293*      ld d,a
04A7D0 CD A2 65 04 1294*      call get_cell_from_coords
04A7D4 DD 7E 03    1295*      ld a,(ix+map_sprite_id)
04A7D7 FE FF       1296*      cp 0xFF ; no sprite
04A7D9 28 0A       1297*      jr z,@next_poly
04A7DB CD 88 9F 04 1298*      call sprite_set_pointer
04A7DF 3E 04       1299*      ld a,sp_see
04A7E1 CD 56 A0 04 1300*      call do_sprite_behavior
04A7E5             1301*  @next_poly:
04A7E5 ED 4B B3 A7 1302*      ld bc,(@bit_iy+2)
       04          
04A7EA 3A 2A 67 04 1303*      ld a,(to_poly_id)
04A7EE 3C          1304*      inc a ; a is next poly_id
04A7EF 32 2A 67 04 1305*      ld (to_poly_id),a
04A7F3 FE 2D       1306*      cp num_polys
04A7F5 28 0D       1307*      jr z,@next_orientation
04A7F7 3E 08       1308*      ld a,8
04A7F9 80          1309*      add a,b
04A7FA 47          1310*      ld b,a ; bit tested codes to 0x46 + b/8
04A7FB FE 86       1311*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04A7FD 20 A8       1312*      jr nz,@loop
04A7FF 06 46       1313*      ld b,0x46
04A801 0C          1314*      inc c ; iy address offset
04A802 18 A3       1315*      jr @loop
04A804             1316*  @next_orientation:
04A804 3A 73 A7 04 1317*      ld a,(see_orientation)
04A808 3C          1318*      inc a
04A809 E6 03       1319*      and 3 ; modulo 4
04A80B 32 73 A7 04 1320*      ld (see_orientation),a
04A80F C2 79 A7 04 1321*      jp nz,@loop_orientation
04A813             1322*  
04A813             1323*  ; full loop 1-2 prt ticks
04A813             1324*  ; ; DEBUG: stop loop timer
04A813             1325*  ;     call prt_loop_stop
04A813             1326*  ; ; END DEBUG
04A813 C9          1327*      ret
04A814             0024   	include "src/asm/vdu.asm"
04A814             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04A814             0002*  ; VDU 0: Null (no operation)
04A814             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A814             0004*  ; VDU 2: Enable “printer” §§
04A814             0005*  ; VDU 3: Disable “printer” §§
04A814             0006*  ; VDU 4: Write text at text cursor
04A814             0007*  ; VDU 5: Write text at graphics cursor
04A814             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A814             0009*  ; VDU 7: Make a short beep (BEL)
04A814             0010*  ; VDU 8: Move cursor back one character
04A814             0011*  ; VDU 9: Move cursor forward one character
04A814             0012*  ; VDU 10: Move cursor down one line
04A814             0013*  ; VDU 11: Move cursor up one line
04A814             0014*  ; VDU 12: Clear text area (CLS)
04A814             0015*  ; VDU 13: Carriage return
04A814             0016*  ; VDU 14: Page mode On *
04A814             0017*  ; VDU 15: Page mode Off *
04A814             0018*  ; VDU 16: Clear graphics area (CLG)
04A814             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04A814             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04A814             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A814             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A814             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04A814             0024*  ; VDU 22, n: Select screen mode (MODE n)
04A814             0025*  ; VDU 23, n: Re-program display character / System Commands
04A814             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04A814             0027*  ; VDU 25, mode, x; y;: PLOT command
04A814             0028*  ; VDU 26: Reset graphics and text viewports **
04A814             0029*  ; VDU 27, char: Output character to screen §
04A814             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A814             0031*  ; VDU 29, x; y;: Set graphics origin
04A814             0032*  ; VDU 30: Home cursor
04A814             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A814             0034*  ; VDU 127: Backspace
04A814             0035*  
04A814             0036*  ; VDU 0: Null (no operation)
04A814             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04A814             0038*  ;     This may be useful for padding out a VDU command sequence,
04A814             0039*  ;     or for inserting a placeholder for a command that will be added later.
04A814             0040*  ; inputs: none
04A814             0041*  ; outputs: an empty byte somewhere in VDU
04A814             0042*  ; destroys: a
04A814             0043*  vdu_null:
04A814 AF          0044*      xor a
04A815 5B D7       0045*  	rst.lil $10
04A817 C9          0046*  	ret
04A818             0047*  
04A818             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A818             0049*  ;     Ensures that the next character received by the VDP is sent through to
04A818             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04A818             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04A818             0052*  ;     intended to be displayed on the screen. It allows characters that would
04A818             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04A818             0054*  ;     If the “printer” has not been enabled then this command will just discard
04A818             0055*  ;     the next byte sent to the VDP.
04A818             0056*  ; inputs: a is the ascii code of the character to send
04A818             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04A818             0058*  ; outputs: a character on the serial terminal connected to the USB port
04A818             0059*  ;           and the same character on the screen at the current text cursor location
04A818             0060*  ; QUESTION: does it also advance the text cursor?
04A818             0061*  ; destroys: hl, bc
04A818             0062*  vdu_char_to_printer:
04A818 32 28 A8 04 0063*  	ld (@arg),a
04A81C 21 27 A8 04 0064*  	ld hl,@cmd
04A820 01 02 00 00 0065*  	ld bc,@end-@cmd
04A824 5B DF       0066*  	rst.lil $18
04A826 C9          0067*  	ret
04A827 01          0068*  @cmd: db 1
04A828 00          0069*  @arg: db 0
04A829             0070*  @end:
04A829             0071*  
04A829             0072*  ; VDU 2: Enable “printer” §§
04A829             0073*  ;     Enables the “printer”.
04A829             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04A829             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04A829             0076*  ;     this port is used for power, but it can also be used to send and
04A829             0077*  ;     receive data to and from the VDP.
04A829             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04A829             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04A829             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04A829             0081*  ;     use the VDU 1 command.
04A829             0082*  ;     The VDP will not send through other control codes to the printer,
04A829             0083*  ;     and will will not send through data it receives as part of other commands.
04A829             0084*  vdu_enable_printer:
04A829 3E 02       0085*      ld a,2
04A82B 5B D7       0086*  	rst.lil $10
04A82D C9          0087*  	ret
04A82E             0088*  
04A82E             0089*  ; VDU 3: Disable “printer” §§
04A82E             0090*  ; inputs: none
04A82E             0091*  ; outputs: a USB port bereft of communication with the VDP
04A82E             0092*  ; destroys: a
04A82E             0093*  vdu_disable_printer:
04A82E 3E 03       0094*      ld a,3
04A830 5B D7       0095*  	rst.lil $10
04A832 C9          0096*  	ret
04A833             0097*  
04A833             0098*  ; VDU 4: Write text at text cursor
04A833             0099*  ;     This causes text to be written at the current text cursor position.
04A833             0100*  ;     This is the default mode for text display.
04A833             0101*  ;     Text is written using the current text foreground and background colours.
04A833             0102*  ; inputs: a is the character to write to the screen
04A833             0103*  ; prerequisites: the text cursor at the intended position on screen
04A833             0104*  ; outputs: prints the character and moves text cursor right one position
04A833             0105*  ; destroys: a, hl, bc
04A833             0106*  vdu_char_to_text_cursor:
04A833 32 43 A8 04 0107*  	ld (@arg),a
04A837 21 42 A8 04 0108*  	ld hl,@cmd
04A83B 01 02 00 00 0109*  	ld bc,@end-@cmd
04A83F 5B DF       0110*  	rst.lil $18
04A841 C9          0111*  	ret
04A842 04          0112*  @cmd: db 4
04A843 00          0113*  @arg: db 0
04A844             0114*  @end:
04A844             0115*  
04A844             0116*  ; VDU 5: Write text at graphics cursor
04A844             0117*  ;     This causes text to be written at the current graphics cursor position.
04A844             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04A844             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04A844             0120*  ;     or for positioning text at a specific location on the screen.
04A844             0121*  ;     Characters are plotted using the current graphics foreground colour,
04A844             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04A844             0123*  ;     The character background is transparent, and will not overwrite any
04A844             0124*  ;     graphics that are already present at the character’s location.
04A844             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04A844             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04A844             0127*  ;     graphics background colour.
04A844             0128*  ; inputs: a is the character to write to the screen
04A844             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04A844             0130*  ; outputs: see the name of the function
04A844             0131*  ; destroys: a, hl, bc
04A844             0132*  vdu_char_to_gfx_cursor:
04A844 32 54 A8 04 0133*  	ld (@arg),a
04A848 21 53 A8 04 0134*  	ld hl,@cmd
04A84C 01 02 00 00 0135*  	ld bc,@end-@cmd
04A850 5B DF       0136*  	rst.lil $18
04A852 C9          0137*  	ret
04A853 05          0138*  @cmd: db 5
04A854 00          0139*  @arg: db 0
04A855             0140*  @end:
04A855             0141*  
04A855             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A855             0143*  ;     This enables the screen, and re-enables VDU command processing,
04A855             0144*  ;     reversing the effect of VDU 21.
04A855             0145*  ; inputs: none
04A855             0146*  ; outputs: a functioning screen and VDU
04A855             0147*  ; destroys: a
04A855             0148*  vdu_enable_screen:
04A855 3E 06       0149*      ld a,6
04A857 5B D7       0150*  	rst.lil $10
04A859 C9          0151*  	ret
04A85A             0152*  
04A85A             0153*  ; PASSES
04A85A             0154*  ; VDU 7: Make a short beep (BEL)
04A85A             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04A85A             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04A85A             0157*  ; inputs: none
04A85A             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04A85A             0159*  ; destroys: a
04A85A             0160*  vdu_beep:
04A85A 3E 07       0161*      ld a,7
04A85C 5B D7       0162*  	rst.lil $10
04A85E C9          0163*  	ret
04A85F             0164*  
04A85F             0165*  ; VDU 8: Move cursor back one character
04A85F             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04A85F             0167*  ;     By default, when at the start of a line it will move to the end of
04A85F             0168*  ;     the previous line (as defined by the current text viewport).
04A85F             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04A85F             0170*  ;     The cursor remains constrained to the current text viewport.
04A85F             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04A85F             0172*  ;     The cursor is just moved left by one character width.
04A85F             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04A85F             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04A85F             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04A85F             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04A85F             0177*  vdu_cursor_back:
04A85F 3E 08       0178*      ld a,8
04A861 5B D7       0179*  	rst.lil $10
04A863 C9          0180*  	ret
04A864             0181*  
04A864             0182*  ; VDU 9: Move cursor forward one character
04A864             0183*  vdu_cursor_forward:
04A864 3E 09       0184*      ld a,9
04A866 5B D7       0185*  	rst.lil $10
04A868 C9          0186*  	ret
04A869             0187*  
04A869             0188*  ; VDU 10: Move cursor down one line
04A869             0189*  vdu_cursor_down:
04A869 3E 0A       0190*      ld a,10
04A86B 5B D7       0191*  	rst.lil $10
04A86D C9          0192*  	ret
04A86E             0193*  
04A86E             0194*  ; VDU 11: Move cursor up one line
04A86E             0195*  vdu_cursor_up:
04A86E 3E 0B       0196*      ld a,11
04A870 5B D7       0197*  	rst.lil $10
04A872 C9          0198*  	ret
04A873             0199*  
04A873             0200*  ; VDU 12: Clear text area (CLS)
04A873             0201*  vdu_cls:
04A873 3E 0C       0202*      ld a,12
04A875 5B D7       0203*  	rst.lil $10
04A877 C9          0204*  	ret
04A878             0205*  
04A878             0206*  ; VDU 13: Carriage return
04A878             0207*  vdu_cr:
04A878 3E 0D       0208*      ld a,13
04A87A 5B D7       0209*  	rst.lil $10
04A87C C9          0210*  	ret
04A87D             0211*  
04A87D             0212*  ; VDU 14: Page mode On *
04A87D             0213*  vdu_page_on:
04A87D 3E 0E       0214*      ld a,14
04A87F 5B D7       0215*  	rst.lil $10
04A881 C9          0216*  	ret
04A882             0217*  
04A882             0218*  ; VDU 15: Page mode Off *
04A882             0219*  vdu_page_off:
04A882 3E 0F       0220*      ld a,15
04A884 5B D7       0221*  	rst.lil $10
04A886 C9          0222*  	ret
04A887             0223*  
04A887             0224*  ; VDU 16: Clear graphics area (CLG)
04A887             0225*  vdu_clg:
04A887 3E 10       0226*      ld a,16
04A889 5B D7       0227*  	rst.lil $10
04A88B C9          0228*  	ret
04A88C             0229*  
04A88C             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04A88C             0231*  vdu_colour_text:
04A88C 32 9C A8 04 0232*  	ld (@arg),a
04A890 21 9B A8 04 0233*  	ld hl,@cmd
04A894 01 02 00 00 0234*  	ld bc,@end-@cmd
04A898 5B DF       0235*  	rst.lil $18
04A89A C9          0236*  	ret
04A89B 11          0237*  @cmd: db 17
04A89C 00          0238*  @arg: db 0
04A89D             0239*  @end:
04A89D             0240*  
04A89D             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04A89D             0242*  ; inputs: a is the plotting mode, c is the colour
04A89D             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04A89D             0244*  vdu_gcol_fg:
04A89D             0245*  ; This command will set both the current graphics colour,
04A89D             0246*  ; and the current graphics plotting mode.
04A89D             0247*  ; As with VDU 17 the colour number will set the foreground colour
04A89D             0248*  ; if it is in the range 0-127, or the background colour if it is
04A89D             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04A89D             0250*  ; Support for different plotting modes on Agon is currently very limited.
04A89D             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04A89D             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04A89D             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04A89D             0254*  ; very limited support for mode 4, which will invert the colour of any
04A89D             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04A89D             0256*  ; and may not work as expected.
04A89D             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04A89D             0258*  ; original VDU system, may be added in the future.
04A89D             0259*  ; This command is identical to the BASIC GCOL keyword.
04A89D 32 B2 A8 04 0260*  	ld (@mode),a
04A8A1 79          0261*      ld a,c
04A8A2 32 B3 A8 04 0262*      ld (@col),a
04A8A6 21 B1 A8 04 0263*  	ld hl,@cmd
04A8AA 01 03 00 00 0264*  	ld bc,@end-@cmd
04A8AE 5B DF       0265*  	rst.lil $18
04A8B0 C9          0266*  	ret
04A8B1 12          0267*  @cmd: db 18
04A8B2 00          0268*  @mode: db 0
04A8B3 00          0269*  @col: db 0
04A8B4             0270*  @end:
04A8B4             0271*  
04A8B4             0272*  vdu_gcol_bg:
04A8B4 32 CB A8 04 0273*  	ld (@mode),a
04A8B8 79          0274*      ld a,c
04A8B9 C6 80       0275*      add a,128
04A8BB 32 CC A8 04 0276*      ld (@col),a
04A8BF 21 CA A8 04 0277*  	ld hl,@cmd
04A8C3 01 03 00 00 0278*  	ld bc,@end-@cmd
04A8C7 5B DF       0279*  	rst.lil $18
04A8C9 C9          0280*  	ret
04A8CA 12          0281*  @cmd:  db 18
04A8CB 00          0282*  @mode: db 0
04A8CC 00          0283*  @col:  db 0
04A8CD             0284*  @end:
04A8CD             0285*  
04A8CD             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A8CD             0287*  ;     This command sets the colour palette, by mapping a logical colour
04A8CD             0288*  ;     to a physical colour. This is useful for defining custom colours,
04A8CD             0289*  ;     or for redefining the default colours.
04A8CD             0290*  ;     If the physical colour number is given as 255 then the colour will
04A8CD             0291*  ;     be defined using the red, green, and blue values given. If the physical
04A8CD             0292*  ;     colour number is given as any other value then the colour will be defined
04A8CD             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04A8CD             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04A8CD             0295*  ;     must still be provided, but will be ignored.
04A8CD             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04A8CD             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04A8CD             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04A8CD             0299*  ;     requested. The nearest colour will be chosen.
04A8CD             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04A8CD             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04A8CD             0302*  vdu_def_log_colour:
04A8CD 32 F2 A8 04 0303*  	ld (@physical),a
04A8D1 47          0304*      ld b,a
04A8D2 32 F1 A8 04 0305*      ld (@logical),a
04A8D6 79          0306*      ld a,c
04A8D7 32 F3 A8 04 0307*      ld (@red),a
04A8DB 7C          0308*      ld a,h
04A8DC 32 F4 A8 04 0309*      ld (@green),a
04A8E0 7D          0310*      ld a,l
04A8E1 32 F5 A8 04 0311*      ld (@blue),a
04A8E5 21 F0 A8 04 0312*  	ld hl,@cmd
04A8E9 01 06 00 00 0313*  	ld bc,@end-@cmd
04A8ED 5B DF       0314*  	rst.lil $18
04A8EF C9          0315*  	ret
04A8F0 13          0316*  @cmd: db 19
04A8F1 00          0317*  @logical: db 0
04A8F2 00          0318*  @physical: db 0
04A8F3 00          0319*  @red: db 0
04A8F4 00          0320*  @green: db 0
04A8F5 00          0321*  @blue: db 0
04A8F6             0322*  @end:
04A8F6             0323*  
04A8F6             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A8F6             0325*  vdu_reset_gfx:
04A8F6 3E 14       0326*      ld a,20
04A8F8 5B D7       0327*  	rst.lil $10
04A8FA C9          0328*  	ret
04A8FB             0329*  
04A8FB             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04A8FB             0331*  ; except for VDU 1 and VDU 6) §§
04A8FB             0332*  vdu_disable_screen:
04A8FB 3E 15       0333*      ld a,21
04A8FD 5B D7       0334*  	rst.lil $10
04A8FF C9          0335*  	ret
04A900             0336*  
04A900             0337*  ; VDU 22, n: Select screen mode (MODE n)
04A900             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04A900             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04A900             0340*  ; Screen modes
04A900             0341*  ; Modes over 128 are double-buffered
04A900             0342*  ; From Version 1.04 or greater
04A900             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04A900             0344*  ; 0 	640 	480 	16 	    60hz
04A900             0345*  ; * 1 	640 	480 	4 	    60hz
04A900             0346*  ; 2 	640 	480 	2 	    60hz
04A900             0347*  ; 3 	640 	240 	64 	    60hz
04A900             0348*  ; 4 	640 	240 	16 	    60hz
04A900             0349*  ; 5 	640 	240 	4 	    60hz
04A900             0350*  ; 6 	640 	240 	2 	    60hz
04A900             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04A900             0352*  ; 8 	320 	240 	64 	    60hz
04A900             0353*  ; 9 	320 	240 	16 	    60hz
04A900             0354*  ; 10 	320 	240 	4 	    60hz
04A900             0355*  ; 11 	320 	240 	2 	    60hz
04A900             0356*  ; 12 	320 	200 	64 	    70hz
04A900             0357*  ; 13 	320 	200 	16 	    70hz
04A900             0358*  ; 14 	320 	200 	4 	    70hz
04A900             0359*  ; 15 	320 	200 	2 	    70hz
04A900             0360*  ; 16 	800 	600 	4 	    60hz
04A900             0361*  ; 17 	800 	600 	2 	    60hz
04A900             0362*  ; 18 	1024 	768 	2 	    60hz
04A900             0363*  ; 129 	640 	480 	4 	    60hz
04A900             0364*  ; 130 	640 	480 	2 	    60hz
04A900             0365*  ; 132 	640 	240 	16 	    60hz
04A900             0366*  ; 133 	640 	240 	4 	    60hz
04A900             0367*  ; 134 	640 	240 	2 	    60hz
04A900             0368*  ; 136 	320 	240 	64 	    60hz
04A900             0369*  ; 137 	320 	240 	16 	    60hz
04A900             0370*  ; 138 	320 	240 	4 	    60hz
04A900             0371*  ; 139 	320 	240 	2 	    60hz
04A900             0372*  ; 140 	320 	200 	64 	    70hz
04A900             0373*  ; 141 	320 	200 	16 	    70hz
04A900             0374*  ; 142 	320 	200 	4 	    70hz
04A900             0375*  ; 143 	320 	200 	2 	    70hz
04A900             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04A900             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04A900             0378*  ; change to the requested mode.
04A900             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04A900             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04A900             0381*  vdu_set_screen_mode:
04A900 32 10 A9 04 0382*  	ld (@arg),a
04A904 21 0F A9 04 0383*  	ld hl,@cmd
04A908 01 02 00 00 0384*  	ld bc,@end-@cmd
04A90C 5B DF       0385*  	rst.lil $18
04A90E C9          0386*  	ret
04A90F 16          0387*  @cmd: db 22 ; set screen mode
04A910 00          0388*  @arg: db 0  ; screen mode parameter
04A911             0389*  @end:
04A911             0390*  
04A911             0391*  ; VDU 23, n: Re-program display character / System Commands
04A911             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04A911             0393*  vdu_define_character:
04A911 32 2D A9 04 0394*  	ld (@ascii),a
04A915 11 2E A9 04 0395*  	ld de,@data
04A919 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04A91B             0397*  @loop:
04A91B 7E          0398*  	ld a,(hl)
04A91C 12          0399*  	ld (de),a
04A91D 23          0400*  	inc hl
04A91E 13          0401*  	inc de
04A91F 10 FA       0402*  	djnz @loop
04A921 21 2C A9 04 0403*  	ld hl,@cmd
04A925 01 0A 00 00 0404*  	ld bc,@end-@cmd
04A929 5B DF       0405*  	rst.lil $18
04A92B C9          0406*  	ret
04A92C 17          0407*  @cmd:   db 23
04A92D 00          0408*  @ascii: db 0
04A92E             0409*  @data:  ds 8
04A936             0410*  @end:
04A936             0411*  
04A936             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04A936             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04A936             0414*  ; 	because we have turned off logical screen scaling
04A936             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04A936             0416*  ; outputs; nothing
04A936             0417*  ; destroys: a might make it out alive
04A936             0418*  vdu_set_gfx_viewport:
04A936 ED 43 56 A9 0419*      ld (@x0),bc
       04          
04A93B FD 22 58 A9 0420*      ld (@y1),iy
       04          
04A940 DD 22 5A A9 0421*  	ld (@x1),ix
       04          
04A945 ED 53 5C A9 0422*  	ld (@y0),de
       04          
04A94A 21 55 A9 04 0423*  	ld hl,@cmd
04A94E 01 09 00 00 0424*  	ld bc,@end-@cmd
04A952 5B DF       0425*  	rst.lil $18
04A954 C9          0426*  	ret
04A955 18          0427*  @cmd:   db 24 ; set graphics viewport command
04A956 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04A958 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04A95A 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04A95C 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04A95E 00          0432*  @end:   db 0x00	  ; padding
04A95F             0433*  
04A95F             0434*  ; VDU 25, mode, x; y;: PLOT command
04A95F             0435*  ; Implemented in vdu_plot.asm
04A95F             0436*  
04A95F             0437*  ; VDU 26: Reset graphics and text viewports **
04A95F             0438*  vdu_reset_txt_gfx_view:
04A95F 3E 1A       0439*      ld a,26
04A961 5B D7       0440*  	rst.lil $10
04A963 C9          0441*  	ret
04A964             0442*  
04A964             0443*  ; PASSES
04A964             0444*  ; VDU 27, char: Output character to screen §
04A964             0445*  ; inputs: a is the ascii code of the character to draw
04A964             0446*  vdu_draw_char:
04A964 32 74 A9 04 0447*  	ld (@arg),a
04A968 21 73 A9 04 0448*  	ld hl,@cmd
04A96C 01 02 00 00 0449*  	ld bc,@end-@cmd
04A970 5B DF       0450*  	rst.lil $18
04A972 C9          0451*  	ret
04A973 1B          0452*  @cmd: db 27
04A974 00          0453*  @arg: db 0  ; ascii code of character to draw
04A975             0454*  @end:
04A975             0455*  
04A975             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A975             0457*  ; MIND THE LITTLE-ENDIANESS
04A975             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04A975             0459*  ; outputs; nothing
04A975             0460*  ; destroys: a might make it out alive
04A975             0461*  vdu_set_txt_viewport:
04A975 ED 43 8B A9 0462*      ld (@lb),bc
       04          
04A97A ED 53 8D A9 0463*  	ld (@rt),de
       04          
04A97F 21 8A A9 04 0464*  	ld hl,@cmd
04A983 01 05 00 00 0465*  	ld bc,@end-@cmd
04A987 5B DF       0466*  	rst.lil $18
04A989 C9          0467*  	ret
04A98A 1C          0468*  @cmd:   db 28 ; set text viewport command
04A98B 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04A98D 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04A98F 00          0471*  @end:   db 0x00	  ; padding
04A990             0472*  
04A990             0473*  ; PASSES
04A990             0474*  ; VDU 29, x; y;: Set graphics origin
04A990             0475*  ; inputs: bc,de x,y coordinates
04A990             0476*  vdu_set_gfx_origin:
04A990 ED 43 A6 A9 0477*      ld (@x0),bc
       04          
04A995 ED 53 A8 A9 0478*      ld (@y0),de
       04          
04A99A 21 A5 A9 04 0479*  	ld hl,@cmd
04A99E 01 05 00 00 0480*  	ld bc,@end-@cmd
04A9A2 5B DF       0481*  	rst.lil $18
04A9A4 C9          0482*  	ret
04A9A5 1D          0483*  @cmd:	db 29
04A9A6 00 00       0484*  @x0: 	dw 0
04A9A8 00 00       0485*  @y0: 	dw 0
04A9AA 00          0486*  @end: 	db 0 ; padding
04A9AB             0487*  
04A9AB             0488*  ; PASSES
04A9AB             0489*  ; VDU 30: Home cursor
04A9AB             0490*  vdu_home_cursor:
04A9AB 3E 1E       0491*      ld a,30
04A9AD 5B D7       0492*  	rst.lil $10
04A9AF C9          0493*  	ret
04A9B0             0494*  
04A9B0             0495*  ; PASSES
04A9B0             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A9B0             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04A9B0             0498*  vdu_move_cursor:
04A9B0 ED 43 C1 A9 0499*      ld (@x0),bc
       04          
04A9B5 21 C0 A9 04 0500*  	ld hl,@cmd
04A9B9 01 03 00 00 0501*  	ld bc,@end-@cmd
04A9BD 5B DF       0502*  	rst.lil $18
04A9BF C9          0503*  	ret
04A9C0 1F          0504*  @cmd: 	db 31
04A9C1 00          0505*  @x0:	db 0
04A9C2 00          0506*  @y0: 	db 0
04A9C3 00          0507*  @end: 	db 0 ; padding
04A9C4             0508*  
04A9C4             0509*  
04A9C4             0510*  ; VDU 127: Backspace
04A9C4             0511*  vdu_bksp:
04A9C4 3E 7F       0512*      ld a,127
04A9C6 5B D7       0513*  	rst.lil $10
04A9C8 C9          0514*  	ret
04A9C9             0515*  
04A9C9             0516*  ; activate a bitmap in preparation to draw it
04A9C9             0517*  ; inputs: a holding the bitmap index
04A9C9             0518*  vdu_bmp_select:
04A9C9 32 DB A9 04 0519*  	ld (@bmp),a
04A9CD 21 D8 A9 04 0520*  	ld hl,@cmd
04A9D1 01 04 00 00 0521*  	ld bc,@end-@cmd
04A9D5 5B DF       0522*  	rst.lil $18
04A9D7 C9          0523*  	ret
04A9D8 17 1B 00    0524*  @cmd: db 23,27,0
04A9DB 00          0525*  @bmp: db 0
04A9DC             0526*  @end:
04A9DC             0527*  
04A9DC             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04A9DC             0529*  ; inputs: hl=bufferId
04A9DC             0530*  vdu_buff_select:
04A9DC 22 EE A9 04 0531*  	ld (@bufferId),hl
04A9E0 21 EB A9 04 0532*  	ld hl,@cmd
04A9E4 01 05 00 00 0533*  	ld bc,@end-@cmd
04A9E8 5B DF       0534*  	rst.lil $18
04A9EA C9          0535*  	ret
04A9EB 17 1B 20    0536*  @cmd: db 23,27,0x20
04A9EE 00 00       0537*  @bufferId: dw 0x0000
04A9F0 00          0538*  @end: db 0x00 ; padding
04A9F1             0539*  
04A9F1             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04A9F1             0541*  ; inputs: a=format; bc=width; de=height
04A9F1             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04A9F1             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04A9F1             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04A9F1             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04A9F1             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04A9F1             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04A9F1             0548*  vdu_bmp_create:
04A9F1 ED 43 0D AA 0549*      ld (@width),bc
       04          
04A9F6 ED 53 0F AA 0550*      ld (@height),de
       04          
04A9FB 32 11 AA 04 0551*      ld (@fmt),a
04A9FF 21 0A AA 04 0552*  	ld hl,@cmd
04AA03 01 08 00 00 0553*  	ld bc,@end-@cmd
04AA07 5B DF       0554*  	rst.lil $18
04AA09 C9          0555*  	ret
04AA0A 17 1B 21    0556*  @cmd:       db 23,27,0x21
04AA0D 00 00       0557*  @width:     dw 0x0000
04AA0F 00 00       0558*  @height:    dw 0x0000
04AA11 00          0559*  @fmt:       db 0x00
04AA12             0560*  @end:
04AA12             0561*  
04AA12             0562*  ; Draw a bitmap on the screen
04AA12             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04AA12             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04AA12             0565*  vdu_bmp_draw:
04AA12 ED 43 2A AA 0566*      ld (@x0),bc
       04          
04AA17 ED 53 2C AA 0567*      ld (@y0),de
       04          
04AA1C 21 27 AA 04 0568*  	ld hl,@cmd
04AA20 01 07 00 00 0569*  	ld bc,@end-@cmd
04AA24 5B DF       0570*  	rst.lil $18
04AA26 C9          0571*  	ret
04AA27 17 1B 03    0572*  @cmd: db 23,27,3
04AA2A 00 00       0573*  @x0:  dw 0x0000
04AA2C 00 00       0574*  @y0:  dw 0x0000
04AA2E 00          0575*  @end: db 0x00 ; padding
04AA2F             0576*  
04AA2F             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04AA2F             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04AA2F             0579*  ; note: default setting on boot is scaling ON
04AA2F             0580*  vdu_set_scaling:
04AA2F 32 41 AA 04 0581*  	ld (@arg),a
04AA33 21 3E AA 04 0582*  	ld hl,@cmd
04AA37 01 04 00 00 0583*  	ld bc,@end-@cmd
04AA3B 5B DF       0584*  	rst.lil $18
04AA3D C9          0585*  	ret
04AA3E 17 00 C0    0586*  @cmd: db 23,0,0xC0
04AA41 00          0587*  @arg: db 0  ; scaling on/off
04AA42             0588*  @end:
04AA42             0589*  
04AA42             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04AA42             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04AA42             0592*  ; 	(all modes).
04AA42             0593*  
04AA42             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04AA42             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04AA42             0596*  ; 	mode is not double-buffered then this command will wait for the next
04AA42             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04AA42             0598*  ; 	screen with the vertical refresh rate of the monitor.
04AA42             0599*  
04AA42             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04AA42             0601*  ; 	as it will prevent tearing of the screen.
04AA42             0602*  ; inputs: none
04AA42             0603*  ; outputs: none
04AA42             0604*  ; destroys: hl, bc
04AA42             0605*  vdu_flip:
04AA42 21 4D AA 04 0606*  	ld hl,@cmd
04AA46 01 03 00 00 0607*  	ld bc,@end-@cmd
04AA4A 5B DF       0608*  	rst.lil $18
04AA4C C9          0609*  	ret
04AA4D 17 00 C3    0610*  @cmd: db 23,0,0xC3
04AA50             0611*  @end:
04AA50             0612*  
04AA50             0613*  ; Command 64: Compress a buffer
04AA50             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04AA50             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA50             0616*  
04AA50             0617*  
04AA50             0618*  ; Command 65: Decompress a buffer
04AA50             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AA50             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA50             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04AA50             0622*  vdu_decompress_buffer:
04AA50 22 6C AA 04 0623*  	ld (@targetBufferId),hl
04AA54 22 6F AA 04 0624*  	ld (@sourceBufferId),hl
04AA58 3E 41       0625*  	ld a,65
04AA5A 32 6E AA 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AA5E 21 69 AA 04 0627*  	ld hl,@cmd
04AA62 01 08 00 00 0628*  	ld bc,@end-@cmd
04AA66 5B DF       0629*  	rst.lil $18
04AA68 C9          0630*  	ret
04AA69 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04AA6C 00 00       0632*  @targetBufferId: dw 0x0000
04AA6E 41          0633*  @cmd1:	db 65
04AA6F 00 00       0634*  @sourceBufferId: dw 0x0000
04AA71 00          0635*  @end: 	db 0x00 ; padding
04AA72             0636*  
04AA72             0637*  ; Command 65: Decompress a buffer
04AA72             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AA72             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA72             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04AA72             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04AA72             0642*  vdu_decompress_buffer_different:
04AA72 22 92 AA 04 0643*  	ld (@targetBufferId),hl
04AA76 21 FF 7F 00 0644*      ld hl,0x7FFF
04AA7A 22 95 AA 04 0645*  	ld (@sourceBufferId),hl
04AA7E 3E 41       0646*  	ld a,65
04AA80 32 94 AA 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AA84 21 8F AA 04 0648*  	ld hl,@cmd
04AA88 01 08 00 00 0649*  	ld bc,@end-@cmd
04AA8C 5B DF       0650*  	rst.lil $18
04AA8E C9          0651*  	ret
04AA8F 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04AA92 00 00       0653*  @targetBufferId: dw 0x0000
04AA94 41          0654*  @cmd1:	db 65
04AA95 00 00       0655*  @sourceBufferId: dw 0x0000
04AA97 00          0656*  @end: 	db 0x00 ; padding
04AA98             0657*  
04AA98             0658*  ; #### from vdp.asm ####
04AA98             0659*  
04AA98             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04AA98             0661*  ; VDU 23, 7: Scrolling
04AA98             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04AA98             0663*  ; inputs: a, extent; l, direction; h; speed
04AA98             0664*  vdu_scroll_down:
04AA98 32 AD AA 04 0665*  	ld (@extent),a
04AA9C 22 AE AA 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04AAA0 21 AB AA 04 0667*  	ld hl,@cmd
04AAA4 01 05 00 00 0668*  	ld bc,@end-@cmd
04AAA8 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04AAAA C9          0670*  	ret
04AAAB 17 07       0671*  @cmd:       db 23,7
04AAAD 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04AAAE 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04AAAF 00          0674*  @speed:     db 0x00 ; pixels
04AAB0 00          0675*  @end:		db 0x00 ; padding
04AAB1             0676*  
04AAB1             0677*  cursor_on:
04AAB1 21 BC AA 04 0678*  	ld hl,@cmd
04AAB5 01 03 00 00 0679*  	ld bc,@end-@cmd
04AAB9 5B DF       0680*  	rst.lil $18
04AABB C9          0681*  	ret
04AABC             0682*  @cmd:
04AABC 17 01 01    0683*  	db 23,1,1
04AABF             0684*  @end:
04AABF             0685*  
04AABF             0686*  cursor_off:
04AABF 21 CA AA 04 0687*  	ld hl,@cmd
04AAC3 01 03 00 00 0688*  	ld bc,@end-@cmd
04AAC7 5B DF       0689*  	rst.lil $18
04AAC9 C9          0690*  	ret
04AACA             0691*  @cmd:
04AACA 17 01 00    0692*  	db 23,1,0
04AACD             0693*  @end:
04AACD             0694*  
04AACD DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04AACF             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04AACF 3E 08       0001*M 			LD	A, function
04AAD1 5B CF       0002*M 			RST.LIL	08h
04AAD3 DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04AAD6 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04AAD9 28 FB       0699*  			JR	Z, @wait
04AADB DD E1       0700*  			POP	IX
04AADD C9          0701*  			RET
04AADE             0702*  
04AADE             0703*  ; #### from vdu_bmp.asm ####
04AADE             0704*  ; =========================================================================
04AADE             0705*  ; Bitmaps
04AADE             0706*  ; -------------------------------------------------------------------------
04AADE             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04AADE             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04AADE             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04AADE             0710*  
04AADE             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04AADE             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04AADE             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04AADE             0714*  ; typically "move" style plot commands are used to define the rectangle.
04AADE             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04AADE             0716*  ; inputs: hl; target bufferId
04AADE             0717*  ; all the following are in 16.8 fixed point format
04AADE             0718*  ;   ub.c; top-left x coordinate
04AADE             0719*  ;   ud.e; top-left y coordinate
04AADE             0720*  ;   ui.x; width
04AADE             0721*  ;   ui.y; height
04AADE             0722*  vdu_buff_screen_capture168:
04AADE ED 53 15 AB 0723*          ld (@y0-1),de
       04          
04AAE3 ED 43 13 AB 0724*          ld (@x0-1),bc
       04          
04AAE8 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04AAEA 32 13 AB 04 0726*          ld (@x0-1),a
04AAEE             0727*  
04AAEE DD 22 1A AB 0728*          ld (@x1),ix
       04          
04AAF3 FD 22 1C AB 0729*          ld (@y1),iy
       04          
04AAF8 3E 17       0730*          ld a,23
04AAFA 32 1E AB 04 0731*          ld (@y1+2),a
04AAFE             0732*  
04AAFE 22 21 AB 04 0733*          ld (@bufId),hl
04AB02 AF          0734*          xor a
04AB03 32 23 AB 04 0735*          ld (@bufId+2),a
04AB07             0736*  
04AB07 21 12 AB 04 0737*          ld hl,@begin
04AB0B 01 13 00 00 0738*          ld bc,@end-@begin
04AB0F 5B DF       0739*          rst.lil $18
04AB11 C9          0740*          ret
04AB12             0741*  @begin:
04AB12             0742*  ; absolute move gfx cursor to top-left screen coordinate
04AB12             0743*  ; VDU 25, mode, x; y;: PLOT command
04AB12 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04AB14 40 00       0745*  @x0: 	dw 64
04AB16 40 00       0746*  @y0: 	dw 64
04AB18             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04AB18             0748*  ; VDU 25, mode, x; y;: PLOT command
04AB18 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04AB1A 0F 00       0750*  @x1: 	dw 15
04AB1C 0F 00       0751*  @y1: 	dw 15
04AB1E             0752*  ; now the main event
04AB1E             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04AB1E 17 1B 21    0754*          db 23,27,0x21
04AB21 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04AB25             0756*  @end: ; no padding required
04AB25             0757*  
04AB25             0758*  vdu_buff_screen_capture_full:
04AB25 21 30 AB 04 0759*          ld hl,@begin
04AB29 01 13 00 00 0760*          ld bc,@end-@begin
04AB2D 5B DF       0761*          rst.lil $18
04AB2F C9          0762*          ret
04AB30             0763*  @begin:
04AB30             0764*  ; absolute move gfx cursor to top-left screen coordinate
04AB30             0765*  ; VDU 25, mode, x; y;: PLOT command
04AB30 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04AB32 00 00       0767*  @x0: 	dw 0
04AB34 00 00       0768*  @y0: 	dw 0
04AB36             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04AB36             0770*  ; VDU 25, mode, x; y;: PLOT command
04AB36 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04AB38 3F 01       0772*  @x1: 	dw 319
04AB3A EF 00       0773*  @y1: 	dw 239
04AB3C             0774*  ; now the main event
04AB3C             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04AB3C 17 1B 21    0776*          db 23,27,0x21
04AB3F 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04AB43             0778*  @end: ; no padding required
04AB43             0779*  
04AB43             0780*  vdu_buff_screen_paste_full:
04AB43 21 4E AB 04 0781*          ld hl,@begin
04AB47 01 0B 00 00 0782*          ld bc,@end-@begin
04AB4B 5B DF       0783*          rst.lil $18
04AB4D C9          0784*          ret
04AB4E             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AB4E 17 1B 20    0786*  @begin:    db 23,27,0x20
04AB51 00 20       0787*  @bufferId: dw 0x2000
04AB53             0788*  ; VDU 25, mode, x; y;: PLOT command
04AB53 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04AB55 00 00 00 00 0790*             dw 0x0000,0x0000
04AB59             0791*  @end: ; no padding required
04AB59             0792*  
04AB59             0793*  vdu_buff_screen_capture_tiles:
04AB59 21 64 AB 04 0794*          ld hl,@begin
04AB5D 01 13 00 00 0795*          ld bc,@end-@begin
04AB61 5B DF       0796*          rst.lil $18
04AB63 C9          0797*          ret
04AB64             0798*  @begin:
04AB64             0799*  ; absolute move gfx cursor to top-left screen coordinate
04AB64             0800*  ; VDU 25, mode, x; y;: PLOT command
04AB64 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04AB66 00 00       0802*  @x0: 	dw 0
04AB68 00 00       0803*  @y0: 	dw 0
04AB6A             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04AB6A             0805*  ; VDU 25, mode, x; y;: PLOT command
04AB6A 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04AB6C FF 00       0807*  @x1: 	dw 319-64
04AB6E EF 00       0808*  @y1: 	dw 239
04AB70             0809*  ; now the main event
04AB70             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04AB70 17 1B 21    0811*          db 23,27,0x21
04AB73 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04AB77             0813*  @end: ; no padding required
04AB77             0814*  
04AB77             0815*  vdu_buff_screen_paste_tiles:
04AB77 21 82 AB 04 0816*          ld hl,@begin
04AB7B 01 0B 00 00 0817*          ld bc,@end-@begin
04AB7F 5B DF       0818*          rst.lil $18
04AB81 C9          0819*          ret
04AB82             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AB82 17 1B 20    0821*  @begin:    db 23,27,0x20
04AB85 00 20       0822*  @bufferId: dw 0x2000
04AB87             0823*  ; VDU 25, mode, x; y;: PLOT command
04AB87 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04AB89 00 00 01 00 0825*             dw 0x0000,0x0001
04AB8D             0826*  @end: ; no padding required
04AB8D             0827*  
04AB8D             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04AB8D             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04AB8D             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04AB8D             0831*  ; Value	Meaning
04AB8D             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04AB8D             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04AB8D             0834*  ; 2	Mono/Mask (1-bit per pixel)
04AB8D             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04AB8D             0836*  ;     They have some significant limitations, and are not intended for general use.
04AB8D             0837*  
04AB8D             0838*  ; =========================================================================
04AB8D             0839*  ; Sprites
04AB8D             0840*  ; -------------------------------------------------------------------------
04AB8D             0841*  ; VDU 23, 27, 4, n: Select sprite n
04AB8D             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04AB8D             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AB8D             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AB8D             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04AB8D             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04AB8D             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04AB8D             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AB8D             0849*  ; VDU 23, 27, 11: Show current sprite
04AB8D             0850*  ; VDU 23, 27, 12: Hide current sprite
04AB8D             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AB8D             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AB8D             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AB8D             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AB8D             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AB8D             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AB8D             0857*  
04AB8D             0858*  ; =========================================================================
04AB8D             0859*  ; Mouse cursor
04AB8D             0860*  ; -------------------------------------------------------------------------
04AB8D             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04AB8D             0862*  
04AB8D             0863*  ; #### from vdu_plot.asm ####
04AB8D             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04AB8D             0865*  ; PLOT code 	(Decimal) 	Effect
04AB8D             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04AB8D             0867*  plot_sl_both: equ 0x00
04AB8D             0868*  
04AB8D             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04AB8D             0870*  plot_sl_first: equ 0x08
04AB8D             0871*  
04AB8D             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04AB8D             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04AB8D             0874*  
04AB8D             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04AB8D             0876*  plot_sl_last: equ 0x20
04AB8D             0877*  
04AB8D             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04AB8D             0879*  plot_sl_none: equ 0x28
04AB8D             0880*  
04AB8D             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04AB8D             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04AB8D             0883*  
04AB8D             0884*  ; &40-&47 	64-71 	Point plot
04AB8D             0885*  plot_pt: equ 0x40
04AB8D             0886*  
04AB8D             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04AB8D             0888*  plot_lf_lr_non_bg: equ 0x48
04AB8D             0889*  
04AB8D             0890*  ; &50-&57 	80-87 	Triangle fill
04AB8D             0891*  plot_tf: equ 0x50
04AB8D             0892*  
04AB8D             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04AB8D             0894*  plot_lf_r_bg: equ 0x58
04AB8D             0895*  
04AB8D             0896*  ; &60-&67 	96-103 	Rectangle fill
04AB8D             0897*  plot_rf: equ 0x60
04AB8D             0898*  
04AB8D             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04AB8D             0900*  plot_lf_lr_fg: equ 0x60
04AB8D             0901*  
04AB8D             0902*  ; &70-&77 	112-119 	Parallelogram fill
04AB8D             0903*  plot_pf: equ 0x70
04AB8D             0904*  
04AB8D             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04AB8D             0906*  plot_lf_r_non_fg: equ 0x78
04AB8D             0907*  
04AB8D             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04AB8D             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04AB8D             0910*  
04AB8D             0911*  ; &90-&97 	144-151 	Circle outline
04AB8D             0912*  plot_co: equ 0x90
04AB8D             0913*  
04AB8D             0914*  ; &98-&9F 	152-159 	Circle fill
04AB8D             0915*  plot_cf: equ 0x98
04AB8D             0916*  
04AB8D             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04AB8D             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04AB8D             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04AB8D             0920*  
04AB8D             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04AB8D             0922*  plot_rcm: equ 0xB8
04AB8D             0923*  
04AB8D             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04AB8D             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04AB8D             0926*  ; &D0-&D7 	208-215 	Not defined
04AB8D             0927*  ; &D8-&DF 	216-223 	Not defined
04AB8D             0928*  ; &E0-&E7 	224-231 	Not defined
04AB8D             0929*  
04AB8D             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04AB8D             0931*  plot_bmp: equ 0xE8
04AB8D             0932*  
04AB8D             0933*  ; &F0-&F7 	240-247 	Not defined
04AB8D             0934*  ; &F8-&FF 	248-255 	Not defined
04AB8D             0935*  
04AB8D             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04AB8D             0937*  ; Agon Console8 VDP 2.2.0
04AB8D             0938*  
04AB8D             0939*  ; Within each group of eight plot codes, the effects are as follows:
04AB8D             0940*  ; Plot code 	Effect
04AB8D             0941*  ; 0 	Move relative
04AB8D             0942*  mv_rel: equ 0
04AB8D             0943*  
04AB8D             0944*  ; 1 	Plot relative in current foreground colour
04AB8D             0945*  dr_rel_fg: equ 1
04AB8D             0946*  
04AB8D             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04AB8D             0948*  ; 3 	Plot relative in current background colour
04AB8D             0949*  dr_rel_bg: equ 3
04AB8D             0950*  
04AB8D             0951*  ; 4 	Move absolute
04AB8D             0952*  mv_abs: equ 4
04AB8D             0953*  
04AB8D             0954*  ; 5 	Plot absolute in current foreground colour
04AB8D             0955*  dr_abs_fg: equ 5
04AB8D             0956*  
04AB8D             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04AB8D             0958*  ; 7 	Plot absolute in current background colour
04AB8D             0959*  dr_abs_bg: equ 7
04AB8D             0960*  
04AB8D             0961*  ; Codes 0-3 use the position data provided as part of the command
04AB8D             0962*  ; as a relative position, adding the position given to the current
04AB8D             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04AB8D             0964*  ; as part of the command as an absolute position, setting the current
04AB8D             0965*  ; graphical cursor position to the position given.
04AB8D             0966*  
04AB8D             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04AB8D             0968*  ; current pixel colour. These operations cannot currently be supported
04AB8D             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04AB8D             0970*  ; supported. Support for these codes may be added in a future version
04AB8D             0971*  ; of the VDP firmware.
04AB8D             0972*  
04AB8D             0973*  ; 16 colour palette constants
04AB8D             0974*  c_black: equ 0
04AB8D             0975*  c_red_dk: equ 1
04AB8D             0976*  c_green_dk: equ 2
04AB8D             0977*  c_yellow_dk: equ 3
04AB8D             0978*  c_blue_dk: equ 4
04AB8D             0979*  c_magenta_dk: equ 5
04AB8D             0980*  c_cyan_dk: equ 6
04AB8D             0981*  c_grey: equ 7
04AB8D             0982*  c_grey_dk: equ 8
04AB8D             0983*  c_red: equ 9
04AB8D             0984*  c_green: equ 10
04AB8D             0985*  c_yellow: equ 11
04AB8D             0986*  c_blue: equ 12
04AB8D             0987*  c_magenta: equ 13
04AB8D             0988*  c_cyan: equ 14
04AB8D             0989*  c_white: equ 15
04AB8D             0990*  
04AB8D             0991*  ; VDU 25, mode, x; y;: PLOT command
04AB8D             0992*  ; inputs: a=mode, bc=x0, de=y0
04AB8D             0993*  vdu_plot:
04AB8D 32 A7 AB 04 0994*      ld (@mode),a
04AB91 ED 43 A8 AB 0995*      ld (@x0),bc
       04          
04AB96 ED 53 AA AB 0996*      ld (@y0),de
       04          
04AB9B 21 A6 AB 04 0997*  	ld hl,@cmd
04AB9F 01 06 00 00 0998*  	ld bc,@end-@cmd
04ABA3 5B DF       0999*  	rst.lil $18
04ABA5 C9          1000*  	ret
04ABA6 19          1001*  @cmd:   db 25
04ABA7 00          1002*  @mode:  db 0
04ABA8 00 00       1003*  @x0: 	dw 0
04ABAA 00 00       1004*  @y0: 	dw 0
04ABAC 00          1005*  @end:   db 0 ; extra byte to soak up deu
04ABAD             1006*  
04ABAD             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABAD             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABAD             1009*  ; VDU 25, mode, x; y;: PLOT command
04ABAD             1010*  ; inputs: bc=x0, de=y0
04ABAD             1011*  ; prerequisites: vdu_buff_select
04ABAD             1012*  vdu_plot_bmp:
04ABAD ED 43 C4 AB 1013*      ld (@x0),bc
       04          
04ABB2 ED 53 C6 AB 1014*      ld (@y0),de
       04          
04ABB7 21 C2 AB 04 1015*  	ld hl,@cmd
04ABBB 01 06 00 00 1016*  	ld bc,@end-@cmd
04ABBF 5B DF       1017*  	rst.lil $18
04ABC1 C9          1018*  	ret
04ABC2 19          1019*  @cmd:   db 25
04ABC3 ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04ABC4 00 00       1021*  @x0: 	dw 0x0000
04ABC6 00 00       1022*  @y0: 	dw 0x0000
04ABC8 00          1023*  @end:   db 0x00 ; padding
04ABC9             1024*  
04ABC9             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABC9             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABC9             1027*  ; VDU 25, mode, x; y;: PLOT command
04ABC9             1028*  ; inputs: bc=x0, de=y0
04ABC9             1029*  ; USING 16.8 FIXED POINT COORDINATES
04ABC9             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04ABC9             1031*  ;   the fractional portiion of the inputs are truncated
04ABC9             1032*  ;   leaving only the 16-bit integer portion
04ABC9             1033*  ; prerequisites: vdu_buff_select
04ABC9             1034*  vdu_plot_bmp168:
04ABC9             1035*  ; populate in the reverse of normal to keep the
04ABC9             1036*  ; inputs from stomping on each other
04ABC9 ED 53 E7 AB 1037*      ld (@y0-1),de
       04          
04ABCE ED 43 E5 AB 1038*      ld (@x0-1),bc
       04          
04ABD3 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04ABD5 32 E5 AB 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04ABD9 21 E4 AB 04 1041*  	ld hl,@cmd
04ABDD 01 06 00 00 1042*  	ld bc,@end-@cmd
04ABE1 5B DF       1043*  	rst.lil $18
04ABE3 C9          1044*  	ret
04ABE4 19          1045*  @cmd:   db 25
04ABE5 ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04ABE6 00 00       1047*  @x0: 	dw 0x0000
04ABE8 00 00       1048*  @y0: 	dw 0x0000
04ABEA             1049*  @end:  ; no padding required b/c we shifted de right
04ABEA             1050*  
04ABEA             1051*  ; draw a filled rectangle
04ABEA             1052*  vdu_plot_rf:
04ABEA ED 43 11 AC 1053*      ld (@x0),bc
       04          
04ABEF ED 53 13 AC 1054*      ld (@y0),de
       04          
04ABF4 DD 22 17 AC 1055*      ld (@x1),ix
       04          
04ABF9 FD 22 19 AC 1056*      ld (@y1),iy
       04          
04ABFE 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04AC00 32 15 AC 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AC04 21 0F AC 04 1059*  	ld hl,@cmd0
04AC08 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04AC0C 5B DF       1061*  	rst.lil $18
04AC0E C9          1062*      ret
04AC0F 19          1063*  @cmd0:  db 25 ; plot
04AC10 04          1064*  @arg0:  db plot_sl_both+mv_abs
04AC11 00 00       1065*  @x0:    dw 0x0000
04AC13 00 00       1066*  @y0:    dw 0x0000
04AC15 19          1067*  @cmd1:  db 25 ; plot
04AC16 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04AC17 00 00       1069*  @x1:    dw 0x0000
04AC19 00 00       1070*  @y1:    dw 0x0000
04AC1B 00          1071*  @end:   db 0x00 ; padding
04AC1C             1072*  
04AC1C             1073*  ; draw a filled circle
04AC1C             1074*  vdu_plot_cf:
04AC1C ED 43 43 AC 1075*      ld (@x0),bc
       04          
04AC21 ED 53 45 AC 1076*      ld (@y0),de
       04          
04AC26 DD 22 49 AC 1077*      ld (@x1),ix
       04          
04AC2B FD 22 4B AC 1078*      ld (@y1),iy
       04          
04AC30 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04AC32 32 47 AC 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AC36 21 41 AC 04 1081*  	ld hl,@cmd0
04AC3A 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04AC3E 5B DF       1083*  	rst.lil $18
04AC40 C9          1084*      ret
04AC41 19          1085*  @cmd0:  db 25 ; plot
04AC42 04          1086*  @arg0:  db plot_sl_both+mv_abs
04AC43 00 00       1087*  @x0:    dw 0x0000
04AC45 00 00       1088*  @y0:    dw 0x0000
04AC47 19          1089*  @cmd1:  db 25 ; plot
04AC48 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04AC49 00 00       1091*  @x1:    dw 0x0000
04AC4B 00 00       1092*  @y1:    dw 0x0000
04AC4D 00          1093*  @end:   db 0x00 ; padding
04AC4E             1094*  
04AC4E             1095*  ; #### from vdu_sprites.asm ####
04AC4E             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04AC4E             1097*  ; the VDP can support up to 256 sprites. They must be defined
04AC4E             1098*  ; contiguously, and so the first sprite is sprite 0.
04AC4E             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04AC4E             1100*  ; Once a selection of sprites have been defined, you can activate
04AC4E             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04AC4E             1102*  ; of sprites to activate. This will activate the first n sprites,
04AC4E             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04AC4E             1104*  
04AC4E             1105*  ; A single sprite can have multiple "frames", referring to
04AC4E             1106*  ; different bitmaps.
04AC4E             1107*  ; (These bitmaps do not need to be the same size.)
04AC4E             1108*  ; This allows a sprite to include an animation sequence,
04AC4E             1109*  ; which can be stepped through one frame at a time, or picked
04AC4E             1110*  ; in any order.
04AC4E             1111*  
04AC4E             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04AC4E             1113*  ; be noted however that "native" format bitmaps are not
04AC4E             1114*  ; recommended for use as sprite frames, as they cannot get
04AC4E             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04AC4E             1116*  ; format is not really intended for general use.) This is part
04AC4E             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04AC4E             1118*  ; screen are now stored in RGBA2222 format.
04AC4E             1119*  
04AC4E             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04AC4E             1121*  ; and then later shown again.
04AC4E             1122*  
04AC4E             1123*  ; Moving sprites around the screen is done by changing the
04AC4E             1124*  ; position of the sprite. This can be done either by setting
04AC4E             1125*  ; the absolute position of the sprite, or by moving the sprite
04AC4E             1126*  ; by a given number of pixels. (Sprites are positioned using
04AC4E             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04AC4E             1128*  ; In the current sprite system, sprites will not update their
04AC4E             1129*  ; position on-screen until either another drawing operation is
04AC4E             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04AC4E             1131*  
04AC4E             1132*  ; Here are the sprite commands:
04AC4E             1133*  ;
04AC4E             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04AC4E             1135*  ; inputs: a is the 8-bit sprite id
04AC4E             1136*  ; vdu_sprite_select:
04AC4E             1137*  
04AC4E             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04AC4E             1139*  ; inputs: none
04AC4E             1140*  ; prerequisites: vdu_sprite_select
04AC4E             1141*  ; vdu_sprite_clear_frames:
04AC4E             1142*  
04AC4E             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AC4E             1144*  ; inputs: a is the 8-bit bitmap number
04AC4E             1145*  ; prerequisites: vdu_sprite_select
04AC4E             1146*  ; vdu_sprite_add_bmp:
04AC4E             1147*  
04AC4E             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04AC4E             1149*  ; inputs: a is the number of sprites to activate
04AC4E             1150*  ; vdu_sprite_activate:
04AC4E             1151*  
04AC4E             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04AC4E             1153*  ; inputs: none
04AC4E             1154*  ; prerequisites: vdu_sprite_select
04AC4E             1155*  ; vdu_sprite_next_frame:
04AC4E             1156*  
04AC4E             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04AC4E             1158*  ; inputs: none
04AC4E             1159*  ; prerequisites: vdu_sprite_select
04AC4E             1160*  ; vdu_sprite_prev_frame:
04AC4E             1161*  
04AC4E             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AC4E             1163*  ; inputs: a is frame number to select
04AC4E             1164*  ; prerequisites: vdu_sprite_select
04AC4E             1165*  ; vdu_sprite_select_frame:
04AC4E             1166*  
04AC4E             1167*  ; VDU 23, 27, 11: Show current sprite
04AC4E             1168*  ; inputs: none
04AC4E             1169*  ; prerequisites: vdu_sprite_select
04AC4E             1170*  ; vdu_sprite_show:
04AC4E             1171*  
04AC4E             1172*  ; VDU 23, 27, 12: Hide current sprite
04AC4E             1173*  ; inputs: none
04AC4E             1174*  ; prerequisites: vdu_sprite_select
04AC4E             1175*  ; vdu_sprite_hide:
04AC4E             1176*  
04AC4E             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AC4E             1178*  ; inputs: bc is x coordinate, de is y coordinate
04AC4E             1179*  ; prerequisites: vdu_sprite_select
04AC4E             1180*  ; vdu_sprite_move_abs:
04AC4E             1181*  ;
04AC4E             1182*  ; USING 16.8 FIXED POINT COORDINATES
04AC4E             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AC4E             1184*  ;   the fractional portiion of the inputs are truncated
04AC4E             1185*  ;   leaving only the 16-bit integer portion
04AC4E             1186*  ; prerequisites: vdu_sprite_select
04AC4E             1187*  ; vdu_sprite_move_abs168:
04AC4E             1188*  
04AC4E             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AC4E             1190*  ; inputs: bc is x coordinate, de is y coordinate
04AC4E             1191*  ; prerequisites: vdu_sprite_select
04AC4E             1192*  ; vdu_sprite_move_rel:
04AC4E             1193*  ;
04AC4E             1194*  ; USING 16.8 FIXED POINT COORDINATES
04AC4E             1195*  ; inputs: ub.c is dx, ud.e is dy
04AC4E             1196*  ;   the fractional portiion of the inputs are truncated
04AC4E             1197*  ;   leaving only the 16-bit integer portion
04AC4E             1198*  ; prerequisites: vdu_sprite_select
04AC4E             1199*  ; vdu_sprite_move_rel168:
04AC4E             1200*  
04AC4E             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AC4E             1202*  ; inputs: none
04AC4E             1203*  ; vdu_sprite_update:
04AC4E             1204*  
04AC4E             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AC4E             1206*  ; inputs: none
04AC4E             1207*  ; vdu_sprite_bmp_reset:
04AC4E             1208*  
04AC4E             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AC4E             1210*  ; inputs: none
04AC4E             1211*  ; vdu_sprite_reset:
04AC4E             1212*  
04AC4E             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AC4E             1214*  ; inputs: a is the GCOL paint mode
04AC4E             1215*  ; prerequisites: vdu_sprite_select
04AC4E             1216*  ; vdu_sprite_set_gcol:
04AC4E             1217*  
04AC4E             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AC4E             1219*  ; inputs: hl=bufferId
04AC4E             1220*  ; prerequisites: vdu_sprite_select
04AC4E             1221*  ; vdu_sprite_add_buff:
04AC4E             1222*  
04AC4E             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04AC4E             1224*  
04AC4E             1225*  ; VDU 23, 27, 4, n: Select sprite n
04AC4E             1226*  ; inputs: a is the 8-bit sprite id
04AC4E             1227*  vdu_sprite_select:
04AC4E 32 60 AC 04 1228*      ld (@sprite),a
04AC52 21 5D AC 04 1229*      ld hl,@cmd
04AC56 01 04 00 00 1230*      ld bc,@end-@cmd
04AC5A 5B DF       1231*      rst.lil $18
04AC5C C9          1232*      ret
04AC5D 17 1B 04    1233*  @cmd:    db 23,27,4
04AC60 00          1234*  @sprite: db 0x00
04AC61             1235*  @end:
04AC61             1236*  
04AC61             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04AC61             1238*  ; inputs: none
04AC61             1239*  ; prerequisites: vdu_sprite_select
04AC61             1240*  vdu_sprite_clear_frames:
04AC61 21 6C AC 04 1241*      ld hl,@cmd
04AC65 01 03 00 00 1242*      ld bc,@end-@cmd
04AC69 5B DF       1243*      rst.lil $18
04AC6B C9          1244*      ret
04AC6C 17 1B 05    1245*  @cmd: db 23,27,5
04AC6F             1246*  @end:
04AC6F             1247*  
04AC6F             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AC6F             1249*  ; inputs: a is the 8-bit bitmap number
04AC6F             1250*  ; prerequisites: vdu_sprite_select
04AC6F             1251*  vdu_sprite_add_bmp:
04AC6F 32 81 AC 04 1252*      ld (@bmp),a
04AC73 21 7E AC 04 1253*      ld hl,@cmd
04AC77 01 04 00 00 1254*      ld bc,@end-@cmd
04AC7B 5B DF       1255*      rst.lil $18
04AC7D C9          1256*      ret
04AC7E 17 1B 06    1257*  @cmd: db 23,27,6
04AC81 00          1258*  @bmp: db 0x00
04AC82             1259*  @end:
04AC82             1260*  
04AC82             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04AC82             1262*  ; inputs: a is the number of sprites to activate
04AC82             1263*  vdu_sprite_activate:
04AC82 32 94 AC 04 1264*      ld (@num),a
04AC86 21 91 AC 04 1265*      ld hl,@cmd
04AC8A 01 04 00 00 1266*      ld bc,@end-@cmd
04AC8E 5B DF       1267*      rst.lil $18
04AC90 C9          1268*      ret
04AC91 17 1B 07    1269*  @cmd: db 23,27,7
04AC94 00          1270*  @num: db 0x00
04AC95             1271*  @end:
04AC95             1272*  
04AC95             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04AC95             1274*  ; inputs: none
04AC95             1275*  ; prerequisites: vdu_sprite_select
04AC95             1276*  vdu_sprite_next_frame:
04AC95 21 A0 AC 04 1277*      ld hl,@cmd
04AC99 01 03 00 00 1278*      ld bc,@end-@cmd
04AC9D 5B DF       1279*      rst.lil $18
04AC9F C9          1280*      ret
04ACA0 17 1B 08    1281*  @cmd: db 23,27,8
04ACA3             1282*  @end:
04ACA3             1283*  
04ACA3             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04ACA3             1285*  ; inputs: none
04ACA3             1286*  ; prerequisites: vdu_sprite_select
04ACA3             1287*  vdu_sprite_prev_frame:
04ACA3 21 AE AC 04 1288*      ld hl,@cmd
04ACA7 01 03 00 00 1289*      ld bc,@end-@cmd
04ACAB 5B DF       1290*      rst.lil $18
04ACAD C9          1291*      ret
04ACAE 17 1B 09    1292*  @cmd: db 23,27,9
04ACB1             1293*  @end:
04ACB1             1294*  
04ACB1             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04ACB1             1296*  ; inputs: a is frame number to select
04ACB1             1297*  ; prerequisites: vdu_sprite_select
04ACB1             1298*  vdu_sprite_select_frame:
04ACB1 32 C3 AC 04 1299*      ld (@frame),a
04ACB5 21 C0 AC 04 1300*      ld hl,@cmd
04ACB9 01 04 00 00 1301*      ld bc,@end-@cmd
04ACBD 5B DF       1302*      rst.lil $18
04ACBF C9          1303*      ret
04ACC0 17 1B 0A    1304*  @cmd:    db 23,27,10
04ACC3 00          1305*  @frame:  db 0x00
04ACC4             1306*  @end:
04ACC4             1307*  
04ACC4             1308*  ; VDU 23, 27, 11: Show current sprite
04ACC4             1309*  ; inputs: none
04ACC4             1310*  ; prerequisites: vdu_sprite_select
04ACC4             1311*  vdu_sprite_show:
04ACC4 21 CF AC 04 1312*      ld hl,@cmd
04ACC8 01 03 00 00 1313*      ld bc,@end-@cmd
04ACCC 5B DF       1314*      rst.lil $18
04ACCE C9          1315*      ret
04ACCF 17 1B 0B    1316*  @cmd: db 23,27,11
04ACD2             1317*  @end:
04ACD2             1318*  
04ACD2             1319*  ; VDU 23, 27, 12: Hide current sprite
04ACD2             1320*  ; inputs: none
04ACD2             1321*  ; prerequisites: vdu_sprite_select
04ACD2             1322*  vdu_sprite_hide:
04ACD2 21 DD AC 04 1323*      ld hl,@cmd
04ACD6 01 03 00 00 1324*      ld bc,@end-@cmd
04ACDA 5B DF       1325*      rst.lil $18
04ACDC C9          1326*      ret
04ACDD 17 1B 0C    1327*  @cmd: db 23,27,12
04ACE0             1328*  @end:
04ACE0             1329*  
04ACE0             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04ACE0             1331*  ; inputs: bc is x coordinate, de is y coordinate
04ACE0             1332*  ; prerequisites: vdu_sprite_select
04ACE0             1333*  vdu_sprite_move_abs:
04ACE0 ED 43 F8 AC 1334*      ld (@xpos),bc
       04          
04ACE5 ED 53 FA AC 1335*      ld (@ypos),de
       04          
04ACEA 21 F5 AC 04 1336*      ld hl,@cmd
04ACEE 01 07 00 00 1337*      ld bc,@end-@cmd
04ACF2 5B DF       1338*      rst.lil $18
04ACF4 C9          1339*      ret
04ACF5 17 1B 0D    1340*  @cmd:  db 23,27,13
04ACF8 00 00       1341*  @xpos: dw 0x0000
04ACFA 00 00       1342*  @ypos: dw 0x0000
04ACFC 00          1343*  @end:  db 0x00 ; padding
04ACFD             1344*  
04ACFD             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04ACFD             1346*  ; inputs: bc is x coordinate, de is y coordinate
04ACFD             1347*  ; prerequisites: vdu_sprite_select
04ACFD             1348*  vdu_sprite_move_rel:
04ACFD ED 43 15 AD 1349*      ld (@dx),bc
       04          
04AD02 ED 53 17 AD 1350*      ld (@dy),de
       04          
04AD07 21 12 AD 04 1351*      ld hl,@cmd
04AD0B 01 07 00 00 1352*      ld bc,@end-@cmd
04AD0F 5B DF       1353*      rst.lil $18
04AD11 C9          1354*      ret
04AD12 17 1B 0E    1355*  @cmd: db 23,27,14
04AD15 00 00       1356*  @dx:  dw 0x0000
04AD17 00 00       1357*  @dy:  dw 0x0000
04AD19 00          1358*  @end: db 0x00 ; padding
04AD1A             1359*  
04AD1A             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AD1A             1361*  ; USING 16.8 FIXED POINT COORDINATES
04AD1A             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AD1A             1363*  ;   the fractional portiion of the inputs are truncated
04AD1A             1364*  ;   leaving only the 16-bit integer portion
04AD1A             1365*  ; prerequisites: vdu_sprite_select
04AD1A             1366*  vdu_sprite_move_abs168:
04AD1A             1367*  ; populate in the reverse of normal to keep the
04AD1A             1368*  ; inputs from stomping on each other
04AD1A ED 53 39 AD 1369*      ld (@ypos-1),de
       04          
04AD1F ED 43 37 AD 1370*      ld (@xpos-1),bc
       04          
04AD24 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04AD26 32 37 AD 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD2A 21 35 AD 04 1373*      ld hl,@cmd
04AD2E 01 07 00 00 1374*      ld bc,@end-@cmd
04AD32 5B DF       1375*      rst.lil $18
04AD34 C9          1376*      ret
04AD35 17 1B 0D    1377*  @cmd:  db 23,27,13
04AD38 00 00       1378*  @xpos: dw 0x0000
04AD3A 00 00       1379*  @ypos: dw 0x0000
04AD3C             1380*  @end:  ; no padding required b/c we shifted de right
04AD3C             1381*  
04AD3C             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AD3C             1383*  ; USING 16.8 FIXED POINT COORDINATES
04AD3C             1384*  ; inputs: ub.c is dx, ud.e is dy
04AD3C             1385*  ;   the fractional portiion of the inputs are truncated
04AD3C             1386*  ;   leaving only the 16-bit integer portion
04AD3C             1387*  ; prerequisites: vdu_sprite_select
04AD3C             1388*  vdu_sprite_move_rel168:
04AD3C             1389*  ; populate in the reverse of normal to keep the
04AD3C             1390*  ; inputs from stomping on each other
04AD3C ED 53 5B AD 1391*      ld (@dy-1),de
       04          
04AD41 ED 43 59 AD 1392*      ld (@dx-1),bc
       04          
04AD46 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04AD48 32 59 AD 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD4C 21 57 AD 04 1395*      ld hl,@cmd
04AD50 01 07 00 00 1396*      ld bc,@end-@cmd
04AD54 5B DF       1397*      rst.lil $18
04AD56 C9          1398*      ret
04AD57 17 1B 0E    1399*  @cmd:  db 23,27,14
04AD5A 00 00       1400*  @dx: dw 0x0000
04AD5C 00 00       1401*  @dy: dw 0x0000
04AD5E             1402*  @end:  ; no padding required b/c we shifted de right
04AD5E             1403*  
04AD5E             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AD5E             1405*  ; inputs: none
04AD5E             1406*  vdu_sprite_update:
04AD5E 21 69 AD 04 1407*      ld hl,@cmd
04AD62 01 03 00 00 1408*      ld bc,@end-@cmd
04AD66 5B DF       1409*      rst.lil $18
04AD68 C9          1410*      ret
04AD69 17 1B 0F    1411*  @cmd: db 23,27,15
04AD6C             1412*  @end:
04AD6C             1413*  
04AD6C             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AD6C             1415*  ; inputs: none
04AD6C             1416*  vdu_sprite_bmp_reset:
04AD6C 21 77 AD 04 1417*      ld hl,@cmd
04AD70 01 03 00 00 1418*      ld bc,@end-@cmd
04AD74 5B DF       1419*      rst.lil $18
04AD76 C9          1420*      ret
04AD77 17 1B 10    1421*  @cmd: db 23,27,16
04AD7A             1422*  @end:
04AD7A             1423*  
04AD7A             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AD7A             1425*  ; inputs: none
04AD7A             1426*  vdu_sprite_reset:
04AD7A 21 85 AD 04 1427*      ld hl,@cmd
04AD7E 01 03 00 00 1428*      ld bc,@end-@cmd
04AD82 5B DF       1429*      rst.lil $18
04AD84 C9          1430*      ret
04AD85 17 1B 11    1431*  @cmd: db 23,27,17
04AD88             1432*  @end:
04AD88             1433*  
04AD88             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AD88             1435*  ; inputs: a is the GCOL paint mode
04AD88             1436*  ; prerequisites: vdu_sprite_select
04AD88             1437*  vdu_sprite_set_gcol:
04AD88 32 9A AD 04 1438*      ld (@mode),a
04AD8C 21 97 AD 04 1439*      ld hl,@cmd
04AD90 01 04 00 00 1440*      ld bc,@end-@cmd
04AD94 5B DF       1441*      rst.lil $18
04AD96 C9          1442*      ret
04AD97 17 1B 12    1443*  @cmd:  db 23,27,18
04AD9A 00          1444*  @mode: db 0x00
04AD9B             1445*  @end:
04AD9B             1446*  
04AD9B             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04AD9B             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04AD9B             1449*  ; inputs: hl=bufferId
04AD9B             1450*  ; prerequisites: vdu_sprite_select
04AD9B             1451*  vdu_sprite_add_buff:
04AD9B 22 AD AD 04 1452*      ld (@bufferId),hl
04AD9F 21 AA AD 04 1453*      ld hl,@cmd
04ADA3 01 05 00 00 1454*      ld bc,@end-@cmd
04ADA7 5B DF       1455*      rst.lil $18
04ADA9 C9          1456*      ret
04ADAA 17 1B 26    1457*  @cmd:      db 23,27,0x26
04ADAD 00 00       1458*  @bufferId: dw 0x0000
04ADAF 00          1459*  @end:      db 0x00 ; padding
04ADB0             1460*  
04ADB0             1461*  
04ADB0             1462*  ; #### from sfx.asm ####
04ADB0 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04ADB1             1464*  
04ADB1             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04ADB1             1466*  ; ; inputs: hl = bufferId
04ADB1             1467*  ; sfx_play:
04ADB1             1468*  ; 	ld iy,sfx_last_channel
04ADB1             1469*  ; 	ld a,(iy+0)
04ADB1             1470*  ; 	ld (@bufferId),hl
04ADB1             1471*  ; @find_next_channel:
04ADB1             1472*  ; 	inc a ; bump to next channel
04ADB1             1473*  ; 	and 31 ; modulo 32 channel
04ADB1             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04ADB1             1475*  ; 	ret z ; so we return to caller without doing anything
04ADB1             1476*  ; 	push af ; back up channel
04ADB1             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04ADB1             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04ADB1             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04ADB1             1480*  ; 	pop af ; restore channel
04ADB1             1481*  ; 	jr @find_next_channel ; try the next channel
04ADB1             1482*  ; @play_sfx:
04ADB1             1483*  ; 	pop af ; restore channel
04ADB1             1484*  ; 	ld (iy+0),a ; store channel
04ADB1             1485*  ; 	ld hl,(@bufferId)
04ADB1             1486*  ; 	ld c,a ; channel
04ADB1             1487*  ; 	ld b,127 ; full volume
04ADB1             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04ADB1             1489*  ; 	jp vdu_play_sample
04ADB1             1490*  ; @bufferId:
04ADB1             1491*  ; 	dw 0x0000 ; 16-bit value
04ADB1             1492*  
04ADB1             1493*  sfx_play_random_hurt:
04ADB1 CD DA B6 04 1494*  	call rand_8
04ADB5 E6 03       1495*  	and 3
04ADB7 FE 00       1496*  	cp 0
04ADB9 CA C5 BD 04 1497*  	jp z,sfx_play_ahh
04ADBD FE 01       1498*  	cp 1
04ADBF CA D1 BD 04 1499*  	jp z,sfx_play_augh
04ADC3 FE 02       1500*  	cp 2
04ADC5 CA DD BD 04 1501*  	jp z,sfx_play_ayee
04ADC9 C3 A9 BE 04 1502*  	jp sfx_play_ugh
04ADCD             1503*  
04ADCD             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04ADCD             1505*  sfx_load_main:
04ADCD 21 00 00 00 1506*      ld hl,0
04ADD1 22 EF B6 04 1507*      ld (cur_file_idx),hl
04ADD5             1508*  sfx_load_main_loop:
04ADD5             1509*  ; back up loop counter
04ADD5 C5          1510*      push bc
04ADD6             1511*  ; load the next sound
04ADD6 CD 2A AE 04 1512*      call load_next_sound
04ADDA             1513*  ; draw all the things
04ADDA CD 58 B8 04 1514*      call tmp_draw_all_the_things
04ADDE             1515*  ; move bj
04ADDE CD E0 B7 04 1516*  	call move_bj
04ADE2             1517*  ; print welcome message
04ADE2 DD 21 77 7C 1518*  	ld ix,font_itc_honda
       04          
04ADE7 21 C2 C0 04 1519*  	ld hl,hello_world
04ADEB 01 20 00 00 1520*  	ld bc,32
04ADEF 11 02 00 00 1521*  	ld de,2
04ADF3 CD 7F 65 04 1522*  	call font_bmp_print
04ADF7             1523*  ; print current filename
04ADF7 CD 73 A8 04 1524*  	call vdu_cls
04ADFB 2A F2 B6 04 1525*  	ld hl,(cur_filename)
04ADFF CD 72 AE 04 1526*  	call printString
04AE03 CD 87 AE 04 1527*  	call printNewLine
04AE07             1528*  
04AE07             1529*  ; print current load stopwatch
04AE07 21 E4 C0 04 1530*  	ld hl,loading_time
04AE0B CD 72 AE 04 1531*  	call printString
04AE0F CD 74 C0 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04AE13 CD C0 AE 04 1533*  	call printDec
04AE17             1534*  
04AE17             1535*  ; flip screen
04AE17 CD 42 AA 04 1536*      call vdu_flip
04AE1B             1537*  ; ; delay for a bit so sound can play
04AE1B             1538*  ;     ld a,%10000000 ; 1 second delay
04AE1B             1539*  ;     call multiPurposeDelay
04AE1B             1540*  ; decrement loop counter
04AE1B C1          1541*      pop bc
04AE1C 0B          1542*  	dec bc
04AE1D             1543*  ; ; DEBUG: DUMP REGISTERS
04AE1D             1544*  ; 	push bc
04AE1D             1545*  ; 	call dumpRegistersHex
04AE1D             1546*  ; 	call vdu_flip
04AE1D             1547*  ; 	pop bc
04AE1D             1548*  ; ; END DEBUG
04AE1D 79          1549*      ld a,c
04AE1E B7          1550*      or a
04AE1F C2 D5 AD 04 1551*      jp nz,sfx_load_main_loop
04AE23 78          1552*      ld a,b
04AE24 B7          1553*      or a
04AE25 C2 D5 AD 04 1554*      jp nz,sfx_load_main_loop
04AE29 C9          1555*      ret
04AE2A             1556*  
04AE2A             1557*  load_next_sound:
04AE2A             1558*  ; look up the load routine for the current file index
04AE2A 2A EF B6 04 1559*  	ld hl,(cur_file_idx)
04AE2E 29          1560*  	add hl,hl ; multiply current index by 2 ...
04AE2F ED 5B EF B6 1561*  	ld de,(cur_file_idx)
       04          
04AE34 19          1562*  	add hl,de ; ... now by 3
04AE35 ED 5B FB B6 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04AE3A 19          1564*  	add hl,de
04AE3B ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04AE3D 22 42 AE 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04AE41             1567*  @jump_addr:
04AE41 CD 00 00 00 1568*  	call 0 ; call the sound load routine
04AE45             1569*  ; look up the buffer id for the current file
04AE45 2A EF B6 04 1570*  	ld hl,(cur_file_idx)
04AE49 29          1571*  	add hl,hl ; multiply current index by 2 ...
04AE4A ED 5B EF B6 1572*  	ld de,(cur_file_idx)
       04          
04AE4F 19          1573*  	add hl,de ; ... now by 3
04AE50 ED 5B F8 B6 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04AE55 19          1575*  	add hl,de
04AE56 ED 27       1576*  	ld hl,(hl)
04AE58 22 F5 B6 04 1577*  	ld (cur_buffer_id),hl
04AE5C             1578*  ; bump the current file index
04AE5C 2A EF B6 04 1579*  	ld hl,(cur_file_idx)
04AE60 23          1580*  	inc hl
04AE61 22 EF B6 04 1581*  	ld (cur_file_idx),hl
04AE65 C9          1582*  	ret
04AE66             1583*  
04AE66             1584*  ; load a sound file to a buffer
04AE66             1585*  ; inputs: hl = bufferId ; ix = file size
04AE66             1586*  vdu_load_sfx:
04AE66             1587*  ; back up input parameters
04AE66 E5          1588*      push hl ; bufferId
04AE67             1589*  ; load the sound
04AE67 CD AF C2 04 1590*  	call vdu_load_buffer_from_file
04AE6B             1591*  ; now make the buffer a sound sample
04AE6B E1          1592*      pop hl ; bufferId
04AE6C AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04AE6D             1594*      ; push hl ; bufferId
04AE6D CD 2D 01 04 1595*  	call vdu_buffer_to_sound
04AE71             1596*  ; ; play the loaded sound
04AE71             1597*  ;     ld c,0 ; channel
04AE71             1598*  ;     ld b,127 ; full volume
04AE71             1599*  ;     ld de,1000 ; 1 second duration
04AE71             1600*  ;     pop hl ; bufferId
04AE71             1601*  ;     call vdu_play_sample
04AE71 C9          1602*      ret
04AE72             0025       include "src/asm/functions.asm"
04AE72             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04AE72             0002*  ; Print a zero-terminated string
04AE72             0003*  ; HL: Pointer to string
04AE72             0004*  printString:
04AE72 C5          0005*  	PUSH	BC
04AE73 01 00 00 00 0006*  	LD		BC,0
04AE77 3E 00       0007*  	LD 	 	A,0
04AE79 5B DF       0008*  	RST.LIL 18h
04AE7B C1          0009*  	POP		BC
04AE7C C9          0010*  	RET
04AE7D             0011*  ; print a VDU sequence
04AE7D             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04AE7D             0013*  sendVDUsequence:
04AE7D C5          0014*  	PUSH	BC
04AE7E 01 00 00 00 0015*  	LD		BC, 0
04AE82 4E          0016*  	LD		C, (HL)
04AE83 5B DF       0017*  	RST.LIL	18h
04AE85 C1          0018*  	POP		BC
04AE86 C9          0019*  	RET
04AE87             0020*  ; Print Newline sequence to VDP
04AE87             0021*  printNewLine:
04AE87 3E 0D       0022*  	LD	A, '\r'
04AE89 5B D7       0023*  	RST.LIL 10h
04AE8B 3E 0A       0024*  	LD	A, '\n'
04AE8D 5B D7       0025*  	RST.LIL 10h
04AE8F C9          0026*  	RET
04AE90             0027*  ; Print a 24-bit HEX number
04AE90             0028*  ; HLU: Number to print
04AE90             0029*  printHex24:
04AE90 E5          0030*  	PUSH	HL
04AE91 21 02 00 00 0031*  	LD		HL, 2
04AE95 39          0032*  	ADD		HL, SP
04AE96 7E          0033*  	LD		A, (HL)
04AE97 E1          0034*  	POP		HL
04AE98 CD A2 AE 04 0035*  	CALL	printHex8
04AE9C             0036*  ; Print a 16-bit HEX number
04AE9C             0037*  ; HL: Number to print
04AE9C             0038*  printHex16:
04AE9C 7C          0039*  	LD		A,H
04AE9D CD A2 AE 04 0040*  	CALL	printHex8
04AEA1 7D          0041*  	LD		A,L
04AEA2             0042*  ; Print an 8-bit HEX number
04AEA2             0043*  ; A: Number to print
04AEA2             0044*  printHex8:
04AEA2 4F          0045*  	LD		C,A
04AEA3 1F          0046*  	RRA
04AEA4 1F          0047*  	RRA
04AEA5 1F          0048*  	RRA
04AEA6 1F          0049*  	RRA
04AEA7 CD AC AE 04 0050*  	CALL	@F
04AEAB 79          0051*  	LD		A,C
04AEAC             0052*  @@:
04AEAC E6 0F       0053*  	AND		0Fh
04AEAE C6 90       0054*  	ADD		A,90h
04AEB0 27          0055*  	DAA
04AEB1 CE 40       0056*  	ADC		A,40h
04AEB3 27          0057*  	DAA
04AEB4 5B D7       0058*  	RST.LIL	10h
04AEB6 C9          0059*  	RET
04AEB7             0060*  
04AEB7             0061*  ; Print a 0x HEX prefix
04AEB7             0062*  DisplayHexPrefix:
04AEB7 3E 30       0063*  	LD	A, '0'
04AEB9 5B D7       0064*  	RST.LIL 10h
04AEBB 3E 78       0065*  	LD	A, 'x'
04AEBD 5B D7       0066*  	RST.LIL 10h
04AEBF C9          0067*  	RET
04AEC0             0068*  
04AEC0             0069*  
04AEC0             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04AEC0             0071*  ; HL : Value to print
04AEC0             0072*  printDec:
04AEC0 11 E4 AE 04 0073*  	LD	 DE, _printDecBuffer
04AEC4 CD ED AE 04 0074*  	CALL Num2String
04AEC8             0075*  ; BEGIN MY CODE
04AEC8             0076*  ; replace leading zeroes with spaces
04AEC8 21 E4 AE 04 0077*      LD	 HL, _printDecBuffer
04AECC 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04AECE             0079*  @loop:
04AECE 7E          0080*      LD	 A, (HL)
04AECF FE 30       0081*      CP	 '0'
04AED1 C2 DF AE 04 0082*      JP	 NZ, @done
04AED5 3E 20       0083*      LD   A, ' '
04AED7 77          0084*      LD	 (HL), A
04AED8 23          0085*      INC	 HL
04AED9 CD 64 A8 04 0086*      CALL vdu_cursor_forward
04AEDD 10 EF       0087*      DJNZ @loop
04AEDF             0088*  @done:
04AEDF             0089*  ; END MY CODE
04AEDF             0090*  	; LD	 HL, _printDecBuffer
04AEDF CD 72 AE 04 0091*  	CALL printString
04AEE3 C9          0092*  	RET
04AEE4 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04AEED             0094*  
04AEED             0095*  ; This routine converts the value from HL into it's ASCII representation,
04AEED             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04AEED             0097*  ; so it will allways be 8 characters length
04AEED             0098*  ; HL : Value to convert to string
04AEED             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04AEED             0100*  Num2String:
04AEED 01 80 69 67 0101*  	LD	 BC,-10000000
04AEF1 CD 24 AF 04 0102*  	CALL OneDigit
04AEF5 01 C0 BD F0 0103*  	LD	 BC,-1000000
04AEF9 CD 24 AF 04 0104*  	CALL OneDigit
04AEFD 01 60 79 FE 0105*  	LD	 BC,-100000
04AF01 CD 24 AF 04 0106*  	CALL OneDigit
04AF05 01 F0 D8 FF 0107*  	LD   BC,-10000
04AF09 CD 24 AF 04 0108*  	CALL OneDigit
04AF0D 01 18 FC FF 0109*  	LD   BC,-1000
04AF11 CD 24 AF 04 0110*  	CALL OneDigit
04AF15 01 9C FF FF 0111*  	LD   BC,-100
04AF19 CD 24 AF 04 0112*  	CALL OneDigit
04AF1D 0E F6       0113*  	LD   C,-10
04AF1F CD 24 AF 04 0114*  	CALL OneDigit
04AF23 48          0115*  	LD   C,B
04AF24             0116*  OneDigit:
04AF24 3E 2F       0117*  	LD   A,'0'-1
04AF26             0118*  DivideMe:
04AF26 3C          0119*  	INC  A
04AF27 09          0120*  	ADD  HL,BC
04AF28 38 FC       0121*  	JR   C,DivideMe
04AF2A ED 42       0122*  	SBC  HL,BC
04AF2C 12          0123*  	LD   (DE),A
04AF2D 13          0124*  	INC  DE
04AF2E C9          0125*  	RET
04AF2F             0126*  
04AF2F             0127*  
04AF2F             0128*  ; #### new functions added by Brandon R. Gates ####
04AF2F             0129*  
04AF2F             0130*  ; print the binary representation of the 8-bit value in a
04AF2F             0131*  ; destroys a, hl, bc
04AF2F             0132*  printBin8:
04AF2F 06 08       0133*      ld b,8      ; loop counter for 8 bits
04AF31 21 4C AF 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04AF35             0135*                  ; (which will be the high bit of the value in a)
04AF35             0136*  @loop:
04AF35 07          0137*      rlca ; put the next highest bit into carry
04AF36 38 04       0138*      jr c,@one
04AF38 36 30       0139*      ld (hl),'0'
04AF3A 18 02       0140*      jr @next_bit
04AF3C             0141*  @one:
04AF3C 36 31       0142*      ld (hl),'1'
04AF3E             0143*  @next_bit:
04AF3E 23          0144*      inc hl
04AF3F 10 F4       0145*      djnz @loop
04AF41             0146*  ; print it
04AF41 21 4C AF 04 0147*  	ld hl,@cmd
04AF45 01 08 00 00 0148*  	ld bc,@end-@cmd
04AF49 5B DF       0149*  	rst.lil $18
04AF4B C9          0150*  	ret
04AF4C             0151*  @cmd: ds 8 ; eight bytes for eight bits
04AF54             0152*  @end:
04AF54             0153*  
04AF54             0154*  ; print registers to screen in hexidecimal format
04AF54             0155*  ; inputs: none
04AF54             0156*  ; outputs: values of every register printed to screen
04AF54             0157*  ;    values of each register in global scratch memory
04AF54             0158*  ; destroys: nothing
04AF54             0159*  stepRegistersHex:
04AF54             0160*  ; store everything in scratch
04AF54 22 57 B1 04 0161*      ld (uhl),hl
04AF58 ED 43 5A B1 0162*      ld (ubc),bc
       04          
04AF5D ED 53 5D B1 0163*      ld (ude),de
       04          
04AF62 DD 22 60 B1 0164*      ld (uix),ix
       04          
04AF67 FD 22 63 B1 0165*      ld (uiy),iy
       04          
04AF6C F5          0166*      push af ; fml
04AF6D E1          0167*      pop hl  ; thanks, zilog
04AF6E 22 54 B1 04 0168*      ld (uaf),hl
04AF72 F5          0169*      push af ; dammit
04AF73             0170*  
04AF73             0171*  ; home the cursor
04AF73 CD AB A9 04 0172*      call vdu_home_cursor
04AF77             0173*  
04AF77             0174*  ; print each register
04AF77 21 E0 B0 04 0175*      ld hl,str_afu
04AF7B CD 72 AE 04 0176*      call printString
04AF7F 2A 54 B1 04 0177*      ld hl,(uaf)
04AF83 CD 90 AE 04 0178*      call printHex24
04AF87 CD 87 AE 04 0179*      call printNewLine
04AF8B             0180*  
04AF8B 21 E4 B0 04 0181*      ld hl,str_hlu
04AF8F CD 72 AE 04 0182*      call printString
04AF93 2A 57 B1 04 0183*      ld hl,(uhl)
04AF97 CD 90 AE 04 0184*      call printHex24
04AF9B CD 87 AE 04 0185*      call printNewLine
04AF9F             0186*  
04AF9F 21 E8 B0 04 0187*      ld hl,str_bcu
04AFA3 CD 72 AE 04 0188*      call printString
04AFA7 2A 5A B1 04 0189*      ld hl,(ubc)
04AFAB CD 90 AE 04 0190*      call printHex24
04AFAF CD 87 AE 04 0191*      call printNewLine
04AFB3             0192*  
04AFB3 21 EC B0 04 0193*      ld hl,str_deu
04AFB7 CD 72 AE 04 0194*      call printString
04AFBB 2A 5D B1 04 0195*      ld hl,(ude)
04AFBF CD 90 AE 04 0196*      call printHex24
04AFC3 CD 87 AE 04 0197*      call printNewLine
04AFC7             0198*  
04AFC7 21 F0 B0 04 0199*      ld hl,str_ixu
04AFCB CD 72 AE 04 0200*      call printString
04AFCF 2A 60 B1 04 0201*      ld hl,(uix)
04AFD3 CD 90 AE 04 0202*      call printHex24
04AFD7 CD 87 AE 04 0203*      call printNewLine
04AFDB             0204*  
04AFDB 21 F4 B0 04 0205*      ld hl,str_iyu
04AFDF CD 72 AE 04 0206*      call printString
04AFE3 2A 63 B1 04 0207*      ld hl,(uiy)
04AFE7 CD 90 AE 04 0208*      call printHex24
04AFEB CD 87 AE 04 0209*      call printNewLine
04AFEF             0210*  
04AFEF             0211*      ; call vsync
04AFEF             0212*  
04AFEF CD 87 AE 04 0213*      call printNewLine
04AFF3             0214*  
04AFF3             0215*  ; check for escape key and quit if pressed
04AFF3             0216*  	MOSCALL mos_getkbmap
04AFF3 3E 1E       0001*M 			LD	A, function
04AFF5 5B CF       0002*M 			RST.LIL	08h
04AFF7             0217*  @stayhere:
04AFF7             0218*  ; 113 Escape
04AFF7 DD CB 0E 46 0219*      bit 0,(ix+14)
04AFFB 20 02       0220*      jr nz,@Escape
04AFFD 18 F8       0221*  	jr @stayhere
04AFFF             0222*  @Escape:
04AFFF DD CB 0E 86 0223*      res 0,(ix+14) ; debounce the key (hopefully)
04B003 3E 80       0224*      ld a,%10000000
04B005 CD 87 C0 04 0225*      call multiPurposeDelay
04B009             0226*  
04B009             0227*  ; restore everything
04B009 2A 57 B1 04 0228*      ld hl, (uhl)
04B00D ED 4B 5A B1 0229*      ld bc, (ubc)
       04          
04B012 ED 5B 5D B1 0230*      ld de, (ude)
       04          
04B017 DD 2A 60 B1 0231*      ld ix, (uix)
       04          
04B01C FD 2A 63 B1 0232*      ld iy, (uiy)
       04          
04B021 F1          0233*      pop af
04B022             0234*  ; all done
04B022 C9          0235*      ret
04B023             0236*  
04B023             0237*  ; print registers to screen in hexidecimal format
04B023             0238*  ; inputs: none
04B023             0239*  ; outputs: values of every register printed to screen
04B023             0240*  ;    values of each register in global scratch memory
04B023             0241*  ; destroys: nothing
04B023             0242*  dumpRegistersHex:
04B023             0243*  ; store everything in scratch
04B023 22 57 B1 04 0244*      ld (uhl),hl
04B027 ED 43 5A B1 0245*      ld (ubc),bc
       04          
04B02C ED 53 5D B1 0246*      ld (ude),de
       04          
04B031 DD 22 60 B1 0247*      ld (uix),ix
       04          
04B036 FD 22 63 B1 0248*      ld (uiy),iy
       04          
04B03B F5          0249*      push af ; fml
04B03C E1          0250*      pop hl  ; thanks, zilog
04B03D 22 54 B1 04 0251*      ld (uaf),hl
04B041 F5          0252*      push af ; dammit
04B042             0253*  
04B042             0254*  ; home the cursor
04B042 CD AB A9 04 0255*      call vdu_home_cursor
04B046             0256*  
04B046             0257*  ; print each register
04B046 21 E0 B0 04 0258*      ld hl,str_afu
04B04A CD 72 AE 04 0259*      call printString
04B04E 2A 54 B1 04 0260*      ld hl,(uaf)
04B052 CD 90 AE 04 0261*      call printHex24
04B056 CD 87 AE 04 0262*      call printNewLine
04B05A             0263*  
04B05A 21 E4 B0 04 0264*      ld hl,str_hlu
04B05E CD 72 AE 04 0265*      call printString
04B062 2A 57 B1 04 0266*      ld hl,(uhl)
04B066 CD 90 AE 04 0267*      call printHex24
04B06A CD 87 AE 04 0268*      call printNewLine
04B06E             0269*  
04B06E 21 E8 B0 04 0270*      ld hl,str_bcu
04B072 CD 72 AE 04 0271*      call printString
04B076 2A 5A B1 04 0272*      ld hl,(ubc)
04B07A CD 90 AE 04 0273*      call printHex24
04B07E CD 87 AE 04 0274*      call printNewLine
04B082             0275*  
04B082 21 EC B0 04 0276*      ld hl,str_deu
04B086 CD 72 AE 04 0277*      call printString
04B08A 2A 5D B1 04 0278*      ld hl,(ude)
04B08E CD 90 AE 04 0279*      call printHex24
04B092 CD 87 AE 04 0280*      call printNewLine
04B096             0281*  
04B096 21 F0 B0 04 0282*      ld hl,str_ixu
04B09A CD 72 AE 04 0283*      call printString
04B09E 2A 60 B1 04 0284*      ld hl,(uix)
04B0A2 CD 90 AE 04 0285*      call printHex24
04B0A6 CD 87 AE 04 0286*      call printNewLine
04B0AA             0287*  
04B0AA 21 F4 B0 04 0288*      ld hl,str_iyu
04B0AE CD 72 AE 04 0289*      call printString
04B0B2 2A 63 B1 04 0290*      ld hl,(uiy)
04B0B6 CD 90 AE 04 0291*      call printHex24
04B0BA CD 87 AE 04 0292*      call printNewLine
04B0BE             0293*  
04B0BE CD CD AA 04 0294*      call vdu_vblank
04B0C2             0295*  
04B0C2 CD 87 AE 04 0296*      call printNewLine
04B0C6             0297*  ; restore everything
04B0C6 2A 57 B1 04 0298*      ld hl, (uhl)
04B0CA ED 4B 5A B1 0299*      ld bc, (ubc)
       04          
04B0CF ED 5B 5D B1 0300*      ld de, (ude)
       04          
04B0D4 DD 2A 60 B1 0301*      ld ix, (uix)
       04          
04B0D9 FD 2A 63 B1 0302*      ld iy, (uiy)
       04          
04B0DE F1          0303*      pop af
04B0DF             0304*  ; all done
04B0DF C9          0305*      ret
04B0E0             0306*  
04B0E0 61 66 3D 00 0307*  str_afu: db "af=",0
04B0E4 68 6C 3D 00 0308*  str_hlu: db "hl=",0
04B0E8 62 63 3D 00 0309*  str_bcu: db "bc=",0
04B0EC 64 65 3D 00 0310*  str_deu: db "de=",0
04B0F0 69 78 3D 00 0311*  str_ixu: db "ix=",0
04B0F4 69 79 3D 00 0312*  str_iyu: db "iy=",0
04B0F8             0313*  
04B0F8             0314*  ; print udeuhl to screen in hexidecimal format
04B0F8             0315*  ; inputs: none
04B0F8             0316*  ; outputs: concatenated hexidecimal udeuhl
04B0F8             0317*  ; destroys: nothing
04B0F8             0318*  dumpUDEUHLHex:
04B0F8             0319*  ; store everything in scratch
04B0F8 22 57 B1 04 0320*      ld (uhl),hl
04B0FC ED 43 5A B1 0321*      ld (ubc),bc
       04          
04B101 ED 53 5D B1 0322*      ld (ude),de
       04          
04B106 DD 22 60 B1 0323*      ld (uix),ix
       04          
04B10B FD 22 63 B1 0324*      ld (uiy),iy
       04          
04B110 F5          0325*      push af
04B111             0326*  
04B111             0327*  ; print each register
04B111             0328*  
04B111 21 4B B1 04 0329*      ld hl,str_udeuhl
04B115 CD 72 AE 04 0330*      call printString
04B119 2A 5D B1 04 0331*      ld hl,(ude)
04B11D CD 90 AE 04 0332*      call printHex24
04B121 3E 2E       0333*  	ld a,'.'	; print a dot to separate the values
04B123 5B D7       0334*  	rst.lil 10h
04B125 2A 57 B1 04 0335*      ld hl,(uhl)
04B129 CD 90 AE 04 0336*      call printHex24
04B12D CD 87 AE 04 0337*      call printNewLine
04B131             0338*  
04B131             0339*  ; restore everything
04B131 2A 57 B1 04 0340*      ld hl, (uhl)
04B135 ED 4B 5A B1 0341*      ld bc, (ubc)
       04          
04B13A ED 5B 5D B1 0342*      ld de, (ude)
       04          
04B13F DD 2A 60 B1 0343*      ld ix, (uix)
       04          
04B144 FD 2A 63 B1 0344*      ld iy, (uiy)
       04          
04B149 F1          0345*      pop af
04B14A             0346*  ; all done
04B14A C9          0347*      ret
04B14B             0348*  
04B14B 75 64 65 2E 0349*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04B154             0350*  
04B154             0351*  ; global scratch memory for registers
04B154 00 00 00    0352*  uaf: dl 0
04B157 00 00 00    0353*  uhl: dl 0
04B15A 00 00 00    0354*  ubc: dl 0
04B15D 00 00 00    0355*  ude: dl 0
04B160 00 00 00    0356*  uix: dl 0
04B163 00 00 00    0357*  uiy: dl 0
04B166 00 00 00    0358*  usp: dl 0
04B169 00 00 00    0359*  upc: dl 0
04B16C             0360*  
04B16C             0361*  ; inputs: whatever is in the flags register
04B16C             0362*  ; outputs: binary representation of flags
04B16C             0363*  ;          with a header so we know which is what
04B16C             0364*  ; destroys: nothing
04B16C             0365*  ; preserves: everything
04B16C             0366*  dumpFlags:
04B16C             0367*  ; first we curse zilog for not giving direct access to flags
04B16C F5          0368*      push af ; this is so we can send it back unharmed
04B16D F5          0369*      push af ; this is so we can pop it to hl
04B16E             0370*  ; store everything in scratch
04B16E 22 57 B1 04 0371*      ld (uhl),hl
04B172 ED 43 5A B1 0372*      ld (ubc),bc
       04          
04B177 ED 53 5D B1 0373*      ld (ude),de
       04          
04B17C DD 22 60 B1 0374*      ld (uix),ix
       04          
04B181 FD 22 63 B1 0375*      ld (uiy),iy
       04          
04B186             0376*  ; next we print the header
04B186 21 B2 B1 04 0377*      ld hl,@header
04B18A CD 72 AE 04 0378*      call printString
04B18E E1          0379*      pop hl ; flags are now in l
04B18F 7D          0380*      ld a,l ; flags are now in a
04B190 CD 2F AF 04 0381*      call printBin8
04B194 CD 87 AE 04 0382*  	call printNewLine
04B198             0383*  ; restore everything
04B198 2A 57 B1 04 0384*      ld hl, (uhl)
04B19C ED 4B 5A B1 0385*      ld bc, (ubc)
       04          
04B1A1 ED 5B 5D B1 0386*      ld de, (ude)
       04          
04B1A6 DD 2A 60 B1 0387*      ld ix, (uix)
       04          
04B1AB FD 2A 63 B1 0388*      ld iy, (uiy)
       04          
04B1B0 F1          0389*      pop af ; send her home the way she came
04B1B1 C9          0390*      ret
04B1B2             0391*  ; Bit 7 (S): Sign flag
04B1B2             0392*  ; Bit 6 (Z): Zero flag
04B1B2             0393*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04B1B2             0394*  ; Bit 4 (H): Half Carry flag
04B1B2             0395*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04B1B2             0396*  ; Bit 2 (PV): Parity/Overflow flag
04B1B2             0397*  ; Bit 1 (N): Subtract flag
04B1B2             0398*  ; Bit 0 (C): Carry flag
04B1B2 53 5A 78 48 0399*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04B1BD             0400*  
04B1BD             0401*  ; set all the bits in the flag register
04B1BD             0402*  ; more of an academic exercise than anything useful
04B1BD             0403*  ; inputs; none
04B1BD             0404*  ; outputs; a=0,f=255
04B1BD             0405*  ; destroys: flags, hl
04B1BD             0406*  ; preserves: a, because why not
04B1BD             0407*  setAllFlags:
04B1BD 21 FF 00 00 0408*      ld hl,255
04B1C1 67          0409*      ld h,a ; four cycles to preserve a is cheap
04B1C2 E5          0410*      push hl
04B1C3 F1          0411*      pop af
04B1C4 C9          0412*      ret
04B1C5             0413*  
04B1C5             0414*  ; reset all the bits in the flag register
04B1C5             0415*  ; unlike its inverse counterpart, this may actually be useful
04B1C5             0416*  ; inputs; none
04B1C5             0417*  ; outputs; a=0,f=0
04B1C5             0418*  ; destroys: flags, hl
04B1C5             0419*  ; preserves: a, because why not
04B1C5             0420*  resetAllFlags:
04B1C5 21 00 00 00 0421*      ld hl,0
04B1C9 67          0422*      ld h,a ; four cycles to preserve a is cheap
04B1CA E5          0423*      push hl
04B1CB F1          0424*      pop af
04B1CC C9          0425*      ret
04B1CD             0426*  
04B1CD             0427*  ; wait until user presses a key
04B1CD             0428*  ; inputs: none
04B1CD             0429*  ; outputs: none
04B1CD             0430*  ; destroys: af,ix
04B1CD             0431*  waitKeypress:
04B1CD             0432*      MOSCALL mos_sysvars
04B1CD 3E 08       0001*M 			LD	A, function
04B1CF 5B CF       0002*M 			RST.LIL	08h
04B1D1 AF          0433*      xor a ; zero out any prior keypresses
04B1D2 DD 77 05    0434*      ld (ix+sysvar_keyascii),a
04B1D5             0435*  @loop:
04B1D5 DD 7E 05    0436*      ld a,(ix+sysvar_keyascii)
04B1D8 A7          0437*      and a
04B1D9 C0          0438*      ret nz
04B1DA 18 F9       0439*      jr @loop
04B1DC             0026   	include "src/asm/player.asm"
04B1DC             0001*  ; ######## GAME STATE VARIABLES #######
04B1DC             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04B1DC 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04B1DF             0004*  ; player current health,binary
04B1DF             0005*  ; when < 0 player splodes
04B1DF             0006*  ; restores to plyr_max_health when new ship spawns
04B1DF 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04B1E2             0008*  ; max player health,binary
04B1E2             0009*  ; can increase with power-ups (todo)
04B1E2 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04B1E5             0011*  ; when reaches zero,game ends
04B1E5             0012*  ; can increase based on TODO
04B1E5 03 00 00    0013*  plyr_lives: dl 3 ; binary
04B1E8             0014*  
04B1E8             0015*  ; ######### Player Variables ##########
04B1E8             0016*  ; player position on the map and orientation
04B1E8 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B1E9 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B1EA 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04B1EB 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B1EC 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B1ED 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04B1EE 00          0023*  cur_x: db 0x00
04B1EF 00          0024*  cur_y: db 0x00
04B1F0 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04B1F1 00          0026*  xvel:  db 0x00
04B1F2 00          0027*  yvel:  db 0x00
04B1F3 00          0028*         db 0x00 ; padding
04B1F4 00          0029*  dy:    db 0x00
04B1F5 00          0030*  dx:    db 0x00
04B1F6 00          0031*         db 0x00 ; padding
04B1F7 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04B1F8             0033*  
04B1F8 00          0034*  plyr_shot_x:      db 0x00
04B1F9 00          0035*  plyr_shot_y:      db 0x00
04B1FA 00          0036*                      db 0x00 ; padding
04B1FB 00          0037*  plyr_shot_xvel:   db 0x00
04B1FC 00          0038*  plyr_shot_yvel:   db 0x00
04B1FD 00          0039*                      db 0x00 ; padding
04B1FE FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04B1FF 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04B202 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04B203             0043*  
04B203 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04B204 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04B205             0046*  plyr_wpn_knife: equ %00000001
04B205             0047*  plyr_wpn_pistol: equ %00000010
04B205             0048*  plyr_wpn_mg: equ %00000100
04B205             0049*  plyr_wpn_gg: equ %00001000
04B205 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04B206 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04B209 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04B20C             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04B212             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04B218 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04B21B             0056*  
04B21B             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04B21B 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04B21E             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04B21E             0060*  
04B21E             0061*  
04B21E 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04B221             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04B229 00          0064*                   db 0 ; string terminator
04B22A             0065*  
04B22A             0066*  ; ######### PLAYER CONSTANTS ##########
04B22A             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04B22A             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04B230             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04B230             0070*  
04B230             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04B230             0072*  ; uses the same offsets from its table base as the main sprite table:
04B230             0073*  plyr_start_variables: ; label marking beginning of table
04B230 40          0074*  plyr_id:               db table_max_records
04B231 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04B232 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04B235 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04B238 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04B239 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04B23A 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04B23B 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04B23E 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04B241 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04B244 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04B247 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04B24A 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04B24D 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04B250 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04B251 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04B252             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04B252 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04B253 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04B254 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04B255             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04B255             0095*  
04B255             0096*  
04B255             0097*  ; set initial player position
04B255             0098*  ; inputs: none,everything is hardcoded
04B255             0099*  ; outputs: player set to the first valid position on the map
04B255             0100*  ; destroys: a
04B255             0101*  plyr_init:
04B255 CD D9 66 04 0102*      call get_start_pos ; a = cell_id, d = map_y, e = map_x
04B259 32 EA B1 04 0103*      ld (cur_cell),a
04B25D ED 53 EE B1 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B262 AF          0105*      xor a ; north is default orientation
04B263 32 ED B1 04 0106*      ld (orientation),a
04B267 21 1E 00 00 0107*      ld hl,plyr_move_rate
04B26B FD 21 2A B2 0108*      ld iy,plyr_move_timer
       04          
04B270 CD 4B C0 04 0109*      call timestamp_tmr_set
04B274 3E 03       0110*      ld a,3
04B276 32 E5 B1 04 0111*      ld (plyr_lives),a
04B27A 3E 64       0112*      ld a,100
04B27C 32 DF B1 04 0113*      ld (plyr_health),a
04B280 3E 08       0114*      ld a,8
04B282 32 1E B2 04 0115*      ld (plyr_ammo),a
04B286 3E 01       0116*      ld a,plyr_wpn_knife
04B288 F6 02       0117*      or plyr_wpn_pistol
04B28A 32 03 B2 04 0118*      ld (plyr_wpns),a
04B28E 3E 01       0119*      ld a,plyr_wpn_knife
04B290 32 04 B2 04 0120*      ld (plyr_wpn_active),a
04B294 CD F2 B2 04 0121*      call plyr_set_weapon_parameters
04B298 FD 21 0C B2 0122*      ld iy,plyr_wpn_select_tmr
       04          
04B29D 21 00 00 00 0123*      ld hl,0
04B2A1 CD 4B C0 04 0124*      call timestamp_tmr_set
04B2A5 C9          0125*      ret
04B2A6             0126*  
04B2A6             0127*  plyr_next_weapon:
04B2A6             0128*  ; check if select weapons timer has expired
04B2A6 FD 21 0C B2 0129*      ld iy,plyr_wpn_select_tmr
       04          
04B2AB CD 56 C0 04 0130*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B2AF F0          0131*      ret p ; time left on timer so no weapon select
04B2B0             0132*  ; reset weapon select timer
04B2B0 21 14 00 00 0133*      ld hl,120/6 ; 1/6 second
04B2B4 CD 4B C0 04 0134*      call timestamp_tmr_set
04B2B8             0135*  ; select next weapon
04B2B8 21 03 B2 04 0136*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B2BC ED 07       0137*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B2BE             0138*  @loop:
04B2BE 3A 04 B2 04 0139*      ld a,(plyr_wpn_active)
04B2C2 07          0140*      rlca ; rotate left
04B2C3 32 04 B2 04 0141*      ld (plyr_wpn_active),a
04B2C7 A6          0142*      and (hl) ; check inventory mask
04B2C8 28 F4       0143*      jr z,@loop
04B2CA C3 F2 B2 04 0144*      jp plyr_set_weapon_parameters
04B2CE             0145*  
04B2CE             0146*  plyr_previous_weapon:
04B2CE             0147*  ; check if select weapons timer has expired
04B2CE FD 21 0C B2 0148*      ld iy,plyr_wpn_select_tmr
       04          
04B2D3 CD 56 C0 04 0149*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B2D7 F0          0150*      ret p ; time left on timer so no weapon select
04B2D8             0151*  ; reset weapon select timer
04B2D8 21 14 00 00 0152*      ld hl,120/6 ; 1/6 second
04B2DC CD 4B C0 04 0153*      call timestamp_tmr_set
04B2E0             0154*  ; select next weapon
04B2E0 21 03 B2 04 0155*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B2E4 ED 07       0156*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B2E6             0157*  @loop:
04B2E6 3A 04 B2 04 0158*      ld a,(plyr_wpn_active)
04B2EA 0F          0159*      rrca ; rotate right
04B2EB 32 04 B2 04 0160*      ld (plyr_wpn_active),a
04B2EF A6          0161*      and (hl) ; check inventory mask
04B2F0 28 F4       0162*      jr z,@loop
04B2F2             0163*      ; fall through to plyr_set_weapon_parameters
04B2F2             0164*  
04B2F2             0165*  plyr_set_weapon_parameters:
04B2F2 FE 01       0166*      cp %00000001 ; knife
04B2F4 CA 0B B3 04 0167*      jp z,@knife
04B2F8 FE 02       0168*      cp %00000010 ; pistol
04B2FA CA 33 B3 04 0169*      jp z,@pistol
04B2FE FE 04       0170*      cp %00000100 ; machine gun
04B300 CA 5B B3 04 0171*      jp z,@machine_gun
04B304 FE 08       0172*      cp %00001000 ; gatling gun
04B306 CA 83 B3 04 0173*      jp z,@gatling_gun
04B30A C9          0174*      ret ; if none of the above do nothing
04B30B             0175*  @knife:
04B30B 21 05 21 00 0176*      ld hl,BUF_UI_BJ_KNIFE_00
04B30F 22 09 B2 04 0177*      ld (plyr_wpn_ui_lg),hl
04B313 21 03 20 00 0178*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04B317 22 06 B2 04 0179*      ld (plyr_wpn_ui_sm),hl
04B31B 3E 14       0180*      ld a,20 ; dps = 60
04B31D 32 05 B2 04 0181*      ld (plyr_wpn_damage),a
04B321 21 3C 00 00 0182*      ld hl,120/2 ; 3 times/second
04B325 22 18 B2 04 0183*      ld (plyr_wpn_fire_rate),hl
04B329 FD 21 12 B2 0184*      ld iy,plyr_wpn_fire_tmr
       04          
04B32E CD 4B C0 04 0185*      call timestamp_tmr_set
04B332 C9          0186*      ret
04B333             0187*  @pistol:
04B333 21 0F 21 00 0188*      ld hl,BUF_UI_BJ_PISTOL_00
04B337 22 09 B2 04 0189*      ld (plyr_wpn_ui_lg),hl
04B33B 21 05 20 00 0190*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04B33F 22 06 B2 04 0191*      ld (plyr_wpn_ui_sm),hl
04B343             0192*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04B343 3E 1E       0193*      ld a,30 ; damage/burst
04B345 32 05 B2 04 0194*      ld (plyr_wpn_damage),a
04B349 21 28 00 00 0195*      ld hl,120/3 ; 3 bursts/second
04B34D 22 18 B2 04 0196*      ld (plyr_wpn_fire_rate),hl
04B351 FD 21 12 B2 0197*      ld iy,plyr_wpn_fire_tmr
       04          
04B356 CD 4B C0 04 0198*      call timestamp_tmr_set
04B35A C9          0199*      ret
04B35B             0200*  @machine_gun:
04B35B 21 0A 21 00 0201*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04B35F 22 09 B2 04 0202*      ld (plyr_wpn_ui_lg),hl
04B363 21 04 20 00 0203*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04B367 22 06 B2 04 0204*      ld (plyr_wpn_ui_sm),hl
04B36B             0205*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04B36B 3E 50       0206*      ld a,80 ; damage/burst
04B36D 32 05 B2 04 0207*      ld (plyr_wpn_damage),a
04B371 21 28 00 00 0208*      ld hl,120/3 ; 3 bursts/second
04B375 22 18 B2 04 0209*      ld (plyr_wpn_fire_rate),hl
04B379 FD 21 12 B2 0210*      ld iy,plyr_wpn_fire_tmr
       04          
04B37E CD 4B C0 04 0211*      call timestamp_tmr_set
04B382 C9          0212*      ret
04B383             0213*  @gatling_gun:
04B383 21 00 21 00 0214*      ld hl,BUF_UI_BJ_GATLING_00
04B387 22 09 B2 04 0215*      ld (plyr_wpn_ui_lg),hl
04B38B 21 02 20 00 0216*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04B38F 22 06 B2 04 0217*      ld (plyr_wpn_ui_sm),hl
04B393             0218*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04B393 3E 78       0219*      ld a,120 ; damage/burst
04B395 32 05 B2 04 0220*      ld (plyr_wpn_damage),a
04B399 21 28 00 00 0221*      ld hl,120/3 ; 3 bursts/second
04B39D 22 18 B2 04 0222*      ld (plyr_wpn_fire_rate),hl
04B3A1 FD 21 12 B2 0223*      ld iy,plyr_wpn_fire_tmr
       04          
04B3A6 CD 4B C0 04 0224*      call timestamp_tmr_set
04B3AA C9          0225*      ret
04B3AB             0226*  
04B3AB             0227*  ; adds to player's health by a set amount
04B3AB             0228*  ; inputs: a is the signed amount to modify health
04B3AB             0229*  ; outputs: a will contain amount of health remaining
04B3AB             0230*  ;          carry will be set if health maxes out to 255
04B3AB             0231*  plyr_add_health:
04B3AB 21 DF B1 04 0232*      ld hl,plyr_health
04B3AF 86          0233*      add a,(hl)
04B3B0 D2 B6 B3 04 0234*      jp nc,@update ; if we roll over to zero when adding
04B3B4 3E FF       0235*      ld a,255 ; ... set health remaining to max
04B3B6             0236*  @update:
04B3B6 77          0237*      ld (hl),a
04B3B7 C9          0238*      ret
04B3B8             0239*  
04B3B8             0240*  ; subtracts from player's health by a set amount
04B3B8             0241*  ; inputs: a is the signed amount to modify health
04B3B8             0242*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04B3B8             0243*  ;        a contains remaining health
04B3B8             0244*  plyr_sub_health:
04B3B8 21 DF B1 04 0245*      ld hl,plyr_health
04B3BC 86          0246*      add a,(hl)
04B3BD CA C5 B3 04 0247*      jp z,@zero
04B3C1 DA CA B3 04 0248*      jp c,@update
04B3C5             0249*  @zero:
04B3C5 AF          0250*      xor a ; clear carry, set health to zero
04B3C6 21 DF B1 04 0251*      ld hl,plyr_health
04B3CA             0252*  @update:
04B3CA 77          0253*      ld (hl),a
04B3CB C9          0254*      ret
04B3CC             0255*  
04B3CC             0256*  ; modifies the players score by a set amount
04B3CC             0257*  ; inputs: a is the signed amount to modify score
04B3CC             0258*  plyr_mod_score:
04B3CC 11 00 00 00 0259*      ld de,0 ; make sure deu is zero
04B3D0 5F          0260*      ld e,a
04B3D1 2A DC B1 04 0261*      ld hl,(plyr_score)
04B3D5 19          0262*      add hl,de
04B3D6 22 DC B1 04 0263*      ld (plyr_score),hl
04B3DA C9          0264*      ret
04B3DB             0265*  
04B3DB             0266*  ; adds to player's ammo by a set amount
04B3DB             0267*  ; inputs: a is the signed amount to modify ammo
04B3DB             0268*  ; outputs: a will contain amount of ammo remaining
04B3DB             0269*  ;          carry will be set if ammo maxes out to 255
04B3DB             0270*  plyr_add_ammo:
04B3DB 21 1E B2 04 0271*      ld hl,plyr_ammo
04B3DF 86          0272*      add a,(hl)
04B3E0 D2 E6 B3 04 0273*      jp nc,@update ; if we roll over to zero when adding
04B3E4 3E FF       0274*      ld a,255 ; ... set ammo remaining to max
04B3E6             0275*  @update:
04B3E6 77          0276*      ld (hl),a
04B3E7 C9          0277*      ret
04B3E8             0278*  
04B3E8             0279*  ; subtracts from player's ammo by a set amount
04B3E8             0280*  ; inputs: a is the signed amount to modify ammo
04B3E8             0281*  ; outputs: carry reset if player was out of ammo before firing
04B3E8             0282*  ;          a will also contain amount of ammo remaining after shot
04B3E8             0283*  plyr_sub_ammo:
04B3E8 21 1E B2 04 0284*      ld hl,plyr_ammo
04B3EC 86          0285*      add a,(hl)
04B3ED DA 00 B4 04 0286*      jp c,@update
04B3F1 3E 01       0287*      ld a,%00000001 ; knife
04B3F3 32 04 B2 04 0288*      ld (plyr_wpn_active),a
04B3F7 CD F2 B2 04 0289*      call plyr_set_weapon_parameters
04B3FB AF          0290*      xor a ; clear carry, set ammo to zero
04B3FC 21 1E B2 04 0291*      ld hl,plyr_ammo
04B400             0292*  @update:
04B400 77          0293*      ld (hl),a
04B401 C9          0294*      ret
04B402             0295*  
04B402             0296*  plyr_shoot_knife:
04B402 CD 49 BE 04 0297*      call sfx_play_knife
04B406             0298*      ; check whether the player hit anything
04B406 3A ED B1 04 0299*      ld a,(orientation) ; direction knife is moving
04B40A 5F          0300*      ld e,a
04B40B 16 01       0301*      ld d,1 ; shot "velocity" in map units
04B40D CD C7 65 04 0302*      call get_dx_dy ; d,e = dy,dx
04B411 ED 53 FB B1 0303*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B416 2A EE B1 04 0304*      ld hl,(cur_x) ; h,l = player y,x
04B41A 22 F8 B1 04 0305*      ld (plyr_shot_x),hl ; initial shot position
04B41E ED 5B FB B1 0306*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B423 2A F8 B1 04 0307*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B427             0308*      ; bump bullet position one map unit in direction of travel
04B427 7D          0309*      ld a,l ; player shot x
04B428 83          0310*      add a,e ; add xvel
04B429 6F          0311*      ld l,a ; save new x
04B42A 7C          0312*      ld a,h ; player shot y
04B42B 82          0313*      add a,d ; add yvel
04B42C 67          0314*      ld h,a ; save new y
04B42D 22 F8 B1 04 0315*      ld (plyr_shot_x),hl ; and save that position
04B431 EB          0316*      ex de,hl ; d,e = bullet y,x
04B432 CD A2 65 04 0317*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B436             0318*  ; check whether target cell contains a sprite
04B436 DD 7E 03    0319*      ld a,(ix+map_sprite_id)
04B439 FE FF       0320*      cp 255 ; value if not sprite
04B43B C8          0321*      ret z ; if we hit a non-sprite, we're done
04B43C             0322*  ; is a sprite so run its "hurt" behavior routine
04B43C CD 88 9F 04 0323*      call sprite_set_pointer
04B440 3E 02       0324*      ld a,sp_hurt
04B442 CD 56 A0 04 0325*      call do_sprite_behavior ; a = sprite behavior return code
04B446 C9          0326*      ret
04B447             0327*  
04B447             0328*  plyr_shoot_pistol:
04B447 3E FF       0329*      ld a,-1
04B449 CD E8 B3 04 0330*      call plyr_sub_ammo
04B44D DA 56 B4 04 0331*      jp c,@shoot
04B451 CD 31 BE 04 0332*      call sfx_play_gun_empty
04B455 C9          0333*      ret
04B456             0334*  @shoot:
04B456 CD 9D BE 04 0335*      call sfx_play_shot_pistol
04B45A C3 8C B4 04 0336*      jp plyr_move_bullet
04B45E             0337*  
04B45E             0338*  plyr_shoot_machine_gun:
04B45E 3E FC       0339*      ld a,-4
04B460 CD E8 B3 04 0340*      call plyr_sub_ammo
04B464 DA 6D B4 04 0341*      jp c,@shoot
04B468 CD 31 BE 04 0342*      call sfx_play_gun_empty
04B46C C9          0343*      ret
04B46D             0344*  @shoot:
04B46D CD 91 BE 04 0345*      call sfx_play_shot_machine_gun_burst
04B471 C3 8C B4 04 0346*      jp plyr_move_bullet
04B475             0347*  
04B475             0348*  plyr_shoot_gatling_gun:
04B475 3E F8       0349*      ld a,-8
04B477 CD E8 B3 04 0350*      call plyr_sub_ammo
04B47B DA 84 B4 04 0351*      jp c,@shoot
04B47F CD 31 BE 04 0352*      call sfx_play_gun_empty
04B483 C9          0353*      ret
04B484             0354*  @shoot:
04B484 CD 85 BE 04 0355*      call sfx_play_shot_gatling_burst
04B488 C3 8C B4 04 0356*      jp plyr_move_bullet
04B48C             0357*  
04B48C             0358*  plyr_move_bullet:
04B48C             0359*      ; check whether the player hit anything
04B48C 3A ED B1 04 0360*      ld a,(orientation) ; direction shot is moving
04B490 32 FE B1 04 0361*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04B494 5F          0362*      ld e,a
04B495 16 01       0363*      ld d,1 ; shot "velocity" in map units
04B497 CD C7 65 04 0364*      call get_dx_dy ; d,e = dy,dx
04B49B ED 53 FB B1 0365*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B4A0 2A EE B1 04 0366*      ld hl,(cur_x) ; h,l = player y,x
04B4A4 22 F8 B1 04 0367*      ld (plyr_shot_x),hl ; initial shot position
04B4A8 06 05       0368*      ld b,view_distance ; loop counter so player can't shoot past view distance
04B4AA             0369*  @loop:
04B4AA C5          0370*      push bc ; save loop counter
04B4AB ED 5B FB B1 0371*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B4B0 2A F8 B1 04 0372*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B4B4             0373*      ; bump bullet position one map unit in direction of travel
04B4B4 7D          0374*      ld a,l ; player shot x
04B4B5 83          0375*      add a,e ; add xvel
04B4B6 6F          0376*      ld l,a ; save new x
04B4B7 7C          0377*      ld a,h ; player shot y
04B4B8 82          0378*      add a,d ; add yvel
04B4B9 67          0379*      ld h,a ; save new y
04B4BA 22 F8 B1 04 0380*      ld (plyr_shot_x),hl ; and save that position
04B4BE EB          0381*      ex de,hl ; d,e = bullet y,x
04B4BF CD A2 65 04 0382*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B4C3             0383*  ; check whether target cell contains a sprite
04B4C3 DD 7E 03    0384*      ld a,(ix+map_sprite_id)
04B4C6 FE FF       0385*      cp 255 ; value if not sprite
04B4C8 28 14       0386*      jr z,@not_sprite
04B4CA             0387*  ; is a sprite so run its "hurt" behavior routine
04B4CA CD 88 9F 04 0388*      call sprite_set_pointer
04B4CE 3E 02       0389*      ld a,sp_hurt
04B4D0 CD 56 A0 04 0390*      call do_sprite_behavior ; a = sprite behavior return code
04B4D4 3A FE B1 04 0391*      ld a,(plyr_shot_status)
04B4D8 FE FF       0392*      cp 255 ; value if shot hit a shootable sprite
04B4DA 28 10       0393*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04B4DC 18 16       0394*      jr @move_bullet ; otherwise keep moving bullet
04B4DE             0395*  @not_sprite:
04B4DE ED 5B FB B1 0396*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04B4E3             0397*  ; read map type/status mask from target cell
04B4E3 DD 7E 00    0398*      ld a,(ix+map_type_status)
04B4E6 E6 03       0399*      and %00000011 ; mask off everything but the render type mask bits
04B4E8             0400*  ; branch on the values in the bitmask
04B4E8 FE 01       0401*      cp render_type_floor
04B4EA 28 08       0402*      jr z,@move_bullet ; keep going if map cell is a floor
04B4EC             0403*  @stop_bullet:
04B4EC C1          0404*      pop bc ; dummy pop to balance stack
04B4ED 3E FF       0405*      ld a,255
04B4EF 32 FE B1 04 0406*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B4F3 C9          0407*      ret ; combat ended
04B4F4             0408*  @move_bullet:
04B4F4 C1          0409*      pop bc ; restore loop counter
04B4F5 10 B3       0410*      djnz @loop ; keep moving bullet if we have more distance to cover
04B4F7 3E FF       0411*      ld a,255
04B4F9 32 FE B1 04 0412*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B4FD C9          0413*      ret ; combat ended
04B4FE             0414*  
04B4FE             0415*  plyr_shoot:
04B4FE             0416*  ; check if fire weapons timer has expired
04B4FE FD 21 12 B2 0417*      ld iy,plyr_wpn_fire_tmr
       04          
04B503 CD 56 C0 04 0418*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B507 CA 10 B5 04 0419*      jp z,@time_up ; timer zero so fire weapon
04B50B FA 10 B5 04 0420*      jp m,@time_up ; timer negative so fire weapon
04B50F C9          0421*      ret ; timer not expired so don't fire weapon
04B510             0422*  @time_up:
04B510             0423*  ; reset fire weapon timer
04B510 FD 21 12 B2 0424*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04B515 2A 18 B2 04 0425*      ld hl,(plyr_wpn_fire_rate)
04B519 CD 4B C0 04 0426*      call timestamp_tmr_set
04B51D             0427*  ; check animation frame for zero
04B51D 21 1B B2 04 0428*      ld hl,plyr_wpn_anim_fr
04B521 7E          0429*      ld a,(hl)
04B522 A7          0430*      and a
04B523 20 01       0431*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04B525 34          0432*      inc (hl) ; is zero so bump to first animation frame
04B526             0433*  @shoot:
04B526             0434*  ; roll for damage modifier
04B526 CD DA B6 04 0435*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04B52A 21 05 B2 04 0436*      ld hl,plyr_wpn_damage
04B52E A6          0437*      and a,(hl) ; a contains modified damage value
04B52F ED 44       0438*      neg ; so we can add the negative
04B531 32 02 B2 04 0439*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04B535             0440*  ; determine active weapon and shoot it
04B535 3A 04 B2 04 0441*      ld a,(plyr_wpn_active)
04B539 FE 02       0442*      cp plyr_wpn_pistol
04B53B CA 47 B4 04 0443*      jp z,plyr_shoot_pistol
04B53F FE 04       0444*      cp plyr_wpn_mg
04B541 CA 5E B4 04 0445*      jp z,plyr_shoot_machine_gun
04B545 FE 08       0446*      cp plyr_wpn_gg
04B547 CA 75 B4 04 0447*      jp z,plyr_shoot_gatling_gun
04B54B FE 01       0448*      cp plyr_wpn_knife
04B54D CA 02 B4 04 0449*      jp z,plyr_shoot_knife
04B551 C9          0450*      ret
04B552             0451*  
04B552             0452*  ; process player keyboard input
04B552             0453*  ; Inputs: plyr_x/y set at desired position
04B552             0454*  ; Returns: player position updated
04B552             0455*  ; Destroys: probably everything
04B552             0456*  plyr_input:
04B552             0457*  ; check weapon anmation frame for zero
04B552 3A 1B B2 04 0458*      ld a,(plyr_wpn_anim_fr)
04B556 E6 03       0459*      and 3 ; modulo 4
04B558 32 1B B2 04 0460*      ld (plyr_wpn_anim_fr),a
04B55C 28 05       0461*      jr z,@get_input
04B55E             0462*  ; ; animation frame is not zero so check animation timer
04B55E             0463*  ;     ld iy,plyr_wpn_anim_tmr
04B55E             0464*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B55E             0465*  ;     jp z,@animate ; timer zero so animate
04B55E             0466*  ;     jp m,@animate ; timer negative so animate
04B55E             0467*  ;     jp @get_input ; time left on timer so no animation
04B55E             0468*  ; bump animation frame
04B55E             0469*  @animate:
04B55E 21 1B B2 04 0470*      ld hl,plyr_wpn_anim_fr
04B562 34          0471*      inc (hl) ; next frame
04B563             0472*  ; ; reset animation timer
04B563             0473*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04B563             0474*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04B563             0475*  ;     call timestamp_tmr_set
04B563             0476*  
04B563             0477*  @get_input:
04B563             0478*  ; reset player component velocities to zero as the default
04B563 21 00 00 00 0479*      ld hl,0
04B567 22 F1 B1 04 0480*      ld (xvel),hl ; implicitly sets yvel
04B56B AF          0481*      xor a ;
04B56C 32 F7 B1 04 0482*      ld (avel),a ; set player angular velocity to zero as default
04B570             0483*  
04B570             0484*  ; check for keypresses and branch accordingly
04B570             0485*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04B570 3E 1E       0001*M 			LD	A, function
04B572 5B CF       0002*M 			RST.LIL	08h
04B574             0486*  
04B574             0487*  ; CHECK WEAPON CONTROL KEYS
04B574             0488*  ; 58 Up player selects next weapon
04B574 DD CB 07 4E 0489*      bit 1,(ix+7)
04B578 28 08       0490*      jr z,@Up
04B57A DD E5       0491*      push ix ; it gets clobbered by the weapon select routine
04B57C CD A6 B2 04 0492*      call plyr_next_weapon
04B580 DD E1       0493*      pop ix
04B582             0494*  @Up:
04B582             0495*  
04B582             0496*  ; 42 Down
04B582 DD CB 05 4E 0497*      bit 1,(ix+5)
04B586 28 08       0498*      jr z,@Down
04B588 DD E5       0499*      push ix ; it gets clobbered by the weapon select routine
04B58A CD CE B2 04 0500*      call plyr_previous_weapon
04B58E DD E1       0501*      pop ix
04B590             0502*  @Down:
04B590             0503*  
04B590             0504*  ; =====================
04B590             0505*  ; 99 Space FIRE ZEE MISSILES!!!111
04B590 DD CB 0C 56 0506*      bit 2,(ix+12)
04B594 28 08       0507*      jr z,@Space
04B596 DD E5       0508*      push ix ; it gets clobbered by the weapon firing
04B598 CD FE B4 04 0509*      call plyr_shoot
04B59C DD E1       0510*      pop ix ; restore ix
04B59E             0511*  @Space:
04B59E             0512*  
04B59E             0513*  ; CHECK MOVEMENT KEYS
04B59E             0514*  ; non-zero means no movement key was pressed
04B59E 3E FF       0515*      ld a,-1
04B5A0             0516*  
04B5A0             0517*  ; 34 W player moves forward
04B5A0 DD CB 04 4E 0518*      bit 1,(ix+4)
04B5A4 28 07       0519*      jr z,@W
04B5A6 3E 01       0520*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B5A8 32 F2 B1 04 0521*      ld (yvel),a
04B5AC AF          0522*      xor a
04B5AD             0523*  @W:
04B5AD             0524*  
04B5AD             0525*  ; 82 S player moves backward
04B5AD DD CB 0A 4E 0526*      bit 1,(ix+10)
04B5B1 28 0C       0527*      jr z,@S
04B5B3 16 FF       0528*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B5B5 3A F2 B1 04 0529*      ld a,(yvel)
04B5B9 82          0530*      add a,d
04B5BA 32 F2 B1 04 0531*      ld (yvel),a
04B5BE AF          0532*      xor a
04B5BF             0533*  @S:
04B5BF             0534*  
04B5BF             0535*  ; 66 A plyer moves left
04B5BF DD CB 08 4E 0536*      bit 1,(ix+8)
04B5C3 28 07       0537*      jr z,@A
04B5C5 3E FF       0538*      ld a,-speed_plyr ; no funky axis conversion here
04B5C7 32 F1 B1 04 0539*      ld (xvel),a
04B5CB AF          0540*      xor a
04B5CC             0541*  @A:
04B5CC             0542*  
04B5CC             0543*  ; 51 D player moves right
04B5CC DD CB 06 56 0544*      bit 2,(ix+6)
04B5D0 28 0C       0545*      jr z,@D
04B5D2 16 01       0546*      ld d,speed_plyr ; no funky axis conversion here
04B5D4 3A F1 B1 04 0547*      ld a,(xvel)
04B5D8 82          0548*      add a,d
04B5D9 32 F1 B1 04 0549*      ld (xvel),a
04B5DD AF          0550*      xor a
04B5DE             0551*  @D:
04B5DE             0552*  
04B5DE             0553*  ; 26 Left player rotates anti-clockwise
04B5DE DD CB 03 4E 0554*      bit 1,(ix+3)
04B5E2 28 06       0555*      jr z,@Left
04B5E4 21 F7 B1 04 0556*      ld hl,avel
04B5E8 35          0557*      dec (hl)
04B5E9 AF          0558*      xor a
04B5EA             0559*  @Left:
04B5EA             0560*  
04B5EA             0561*  ; 122 Right player rotates clockwise
04B5EA DD CB 0F 4E 0562*      bit 1,(ix+15)
04B5EE 28 06       0563*      jr z,@Right
04B5F0 21 F7 B1 04 0564*      ld hl,avel
04B5F4 34          0565*      inc (hl)
04B5F5 AF          0566*      xor a
04B5F6             0567*  @Right:
04B5F6             0568*  
04B5F6             0569*  ; KEYPRESS DETECTION DONE
04B5F6 A7          0570*      and a ; this will zero if player pressed a movement key
04B5F7 C0          0571*      ret nz ; non zero so no key pressed
04B5F8             0572*  ; check move timer
04B5F8 FD 21 2A B2 0573*      ld iy,plyr_move_timer
       04          
04B5FD CD 56 C0 04 0574*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B601 F0          0575*      ret p ; time left on timer so no movement
04B602             0576*  ; reset_move_timer
04B602 21 1E 00 00 0577*      ld hl,plyr_move_rate
04B606 FD 21 2A B2 0578*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04B60B CD 4B C0 04 0579*      call timestamp_tmr_set
04B60F             0580*  ; move player according to velocities set by keypresses
04B60F ED 5B F1 B1 0581*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04B614 3A F7 B1 04 0582*      ld a,(avel)
04B618 21 ED B1 04 0583*      ld hl,orientation
04B61C 86          0584*      add a,(hl)
04B61D E6 03       0585*      and 0x03 ; modulo 4
04B61F 77          0586*      ld (hl),a
04B620 CD 06 66 04 0587*      call trans_dx_dy ; d = dy, e = dx
04B624 ED 53 F5 B1 0588*      ld (dx),de
       04          
04B629 3A EE B1 04 0589*      ld a,(cur_x)
04B62D 83          0590*      add a,e
04B62E 5F          0591*      ld e,a
04B62F 3A EF B1 04 0592*      ld a,(cur_y)
04B633 82          0593*      add a,d
04B634 57          0594*      ld d,a
04B635 ED 53 F1 B1 0595*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04B63A CD A2 65 04 0596*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04B63E             0597*  ; check whether target cell contains a sprite
04B63E DD 7E 03    0598*      ld a,(ix+map_sprite_id)
04B641 FE FF       0599*      cp 255 ; value if not sprite
04B643 28 0A       0600*      jr z,@not_sprite
04B645             0601*  ; is a sprite so run its "use" behavior routine
04B645 CD 88 9F 04 0602*      call sprite_set_pointer
04B649 3E 01       0603*      ld a,sp_use
04B64B CD 56 A0 04 0604*      call do_sprite_behavior
04B64F             0605*  ; fall through because we still need to check out what's going on in the target cell
04B64F             0606*  @not_sprite:
04B64F ED 5B F1 B1 0607*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04B654             0608*  ; read map type/status mask from target cell
04B654 DD 7E 00    0609*      ld a,(ix+map_type_status)
04B657 47          0610*      ld b,a ; b = target cell type/status
04B658             0611*  ; branch on the values in the bitmask
04B658 3E 80       0612*      ld a,cell_is_door
04B65A A0          0613*      and b
04B65B 20 06       0614*      jr nz,@door
04B65D 3E 40       0615*      ld a,cell_is_wall
04B65F A0          0616*      and b
04B660 C0          0617*      ret nz ; can't move thru walls
04B661 18 2B       0618*      jr @move_it ; if it wasn't a wall or door, move as normal
04B663             0619*  @door:
04B663 ED 5B F5 B1 0620*      ld de,(dx) ; d = dy, e = dx
       04          
04B668 CD F4 65 04 0621*      call get_dir_from_dy_dx ; a is direction of attempted movement
04B66C F5          0622*      push af
04B66D 16 02       0623*      ld d,2 ; 1 past the door in the movement direction
04B66F 5F          0624*      ld e,a
04B670 CD C7 65 04 0625*      call get_dx_dy
04B674 ED 53 F5 B1 0626*      ld (dx),de
       04          
04B679 F1          0627*      pop af
04B67A 5F          0628*      ld e,a
04B67B 16 02       0629*      ld d,2
04B67D ED 4B EE B1 0630*      ld bc,(cur_x)
       04          
04B682 CD 94 65 04 0631*      call get_neighbor ; ix points to cell defs/status, a is target cell current obj_id
04B686 DD 7E 00    0632*      ld a,(ix+map_type_status)
04B689 47          0633*      ld b,a ; b = target cell type/status
04B68A 3E 40       0634*      ld a,cell_is_wall
04B68C A0          0635*      and b
04B68D C0          0636*      ret nz ; can't move thru walls
04B68E             0637*      ; fall through to @move_it
04B68E             0638*  @move_it:
04B68E             0639*  ; we are cleared for movement so update player position
04B68E 11 00 00 00 0640*      ld de,0 ; make sure deu is zero
04B692 ED 4B F5 B1 0641*      ld bc,(dx) ; b = dy, c = dx
       04          
04B697 3A EE B1 04 0642*      ld a,(cur_x)
04B69B 81          0643*      add a,c
04B69C 5F          0644*      ld e,a
04B69D 32 EE B1 04 0645*      ld (cur_x),a
04B6A1 3A EF B1 04 0646*      ld a,(cur_y)
04B6A5 80          0647*      add a,b
04B6A6 57          0648*      ld d,a
04B6A7 32 EF B1 04 0649*      ld (cur_y),a
04B6AB C9          0650*      ret
04B6AC             0027   	include "src/asm/maths.asm"
04B6AC 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04B6B0 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04B6B4             0003*  
04B6B4             0004*  ; set bcd values in a scratch memory address from registers bcde
04B6B4             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04B6B4             0006*  ; destroys ; hl
04B6B4             0007*  set_bcd:
04B6B4 73          0008*      ld (hl),e
04B6B5 23          0009*      inc hl
04B6B6 72          0010*      ld (hl),d
04B6B7 23          0011*      inc hl
04B6B8 71          0012*      ld (hl),c
04B6B9 23          0013*      inc hl
04B6BA 70          0014*      ld (hl),b
04B6BB C9          0015*      ret
04B6BC             0016*  
04B6BC             0017*  ; load bcd values from a scratch memory address to bcde
04B6BC             0018*  ; input: hl; scratch address
04B6BC             0019*  ; output: bcde; 8-place bcd number
04B6BC             0020*  ; destroys: hl
04B6BC             0021*  get_bcd:
04B6BC 5E          0022*      ld e,(hl)
04B6BD 23          0023*      inc hl
04B6BE 56          0024*      ld d,(hl)
04B6BF 23          0025*      inc hl
04B6C0 4E          0026*      ld c,(hl)
04B6C1 23          0027*      inc hl
04B6C2 46          0028*      ld b,(hl)
04B6C3 C9          0029*      ret
04B6C4             0030*  
04B6C4             0031*  ; BCD addition
04B6C4             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B6C4             0033*  ;       a is the number of bytes holding each number (number of places/2)
04B6C4             0034*  ; outputs: (hl) + (de) --> (hl)
04B6C4             0035*  ; destroys: a,b,de,hl
04B6C4             0036*  add_bcd:
04B6C4 47          0037*      ld b,a ; loop counter
04B6C5 AF          0038*      xor a ; reset a, clear carry flag
04B6C6             0039*  adcec:
04B6C6 1A          0040*      ld a,(de) ; addend to acc
04B6C7 8E          0041*      adc a,(hl) ; add (hl) to acc
04B6C8 27          0042*      daa ; adjust result to bcd
04B6C9 77          0043*      ld (hl),a ; store result
04B6CA 23          0044*      inc hl ; advance memory pointers
04B6CB 13          0045*      inc de
04B6CC 10 F8       0046*      djnz adcec ; loop until b == 0
04B6CE C9          0047*      ret
04B6CF             0048*  
04B6CF             0049*  ; BCD subtraction
04B6CF             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B6CF             0051*  ;       a is the number of bytes holding each number (number of places/2)
04B6CF             0052*  ; outputs: (hl) - (de) --> (hl)
04B6CF             0053*  ; destroys: a,b,de,hl
04B6CF             0054*  sub_bcd:
04B6CF 47          0055*      ld b,a ; loop counter
04B6D0 AF          0056*      xor a ; reset a,clear carry flag
04B6D1             0057*  subdec:
04B6D1 1A          0058*      ld a,(de) ; subtrahend to acc
04B6D2 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04B6D3 27          0060*      daa ; adjust result to bcd
04B6D4 77          0061*      ld (hl),a ; store result
04B6D5 23          0062*      inc hl ; advance memory pointers
04B6D6 13          0063*      inc de
04B6D7 10 F8       0064*      djnz subdec ; loop until b == 0
04B6D9 C9          0065*      ret
04B6DA             0066*  
04B6DA             0067*  ; http://www.z80.info/pseudo-random.txt
04B6DA             0068*  rand_8:
04B6DA C5          0069*      push bc
04B6DB 3A EE B6 04 0070*      ld a,(r_seed)
04B6DF 4F          0071*      ld c,a
04B6E0             0072*  
04B6E0 0F          0073*      rrca ; multiply by 32
04B6E1 0F          0074*      rrca
04B6E2 0F          0075*      rrca
04B6E3 EE 1F       0076*      xor 0x1f
04B6E5             0077*  
04B6E5 81          0078*      add a,c
04B6E6 DE FF       0079*      sbc a,255 ; carry
04B6E8             0080*  
04B6E8 32 EE B6 04 0081*      ld (r_seed),a
04B6EC C1          0082*      pop bc
04B6ED C9          0083*      ret
04B6EE 50          0084*  r_seed: defb $50
04B6EF             0028   	include "src/asm/img_load.asm"
04B6EF 00 00 00    0001*  cur_file_idx: dl 0
04B6F2 00 00 00    0002*  cur_filename: dl 0
04B6F5 00 00 00    0003*  cur_buffer_id: dl 0
04B6F8 00 00 00    0004*  cur_buffer_id_lut: dl 0
04B6FB 00 00 00    0005*  cur_load_jump_table: dl 0
04B6FE             0006*  
04B6FE             0007*  img_load_init:
04B6FE             0008*  ; initialize bj's position parameters
04B6FE 21 00 00 00 0009*  	ld hl,0
04B702 22 4C B8 04 0010*  	ld (bj_yvel),hl
04B706             0011*  
04B706 21 2D 00 00 0012*      ld hl,45
04B70A 22 4F B8 04 0013*  	ld (bj_y_cur),hl
04B70E 22 52 B8 04 0014*  	ld (bj_y_min),hl
04B712 22 55 B8 04 0015*      ld (bj_y_max),hl
04B716             0016*  
04B716 21 01 00 00 0017*  	ld hl,1
04B71A 22 40 B8 04 0018*  	ld (bj_xvel),hl
04B71E             0019*  
04B71E 21 0A 00 00 0020*  	ld hl,10
04B722 22 43 B8 04 0021*  	ld (bj_x_cur),hl
04B726 22 46 B8 04 0022*  	ld (bj_x_min),hl
04B72A             0023*  
04B72A 21 C8 00 00 0024*  	ld hl,320-120
04B72E 22 49 B8 04 0025*  	ld (bj_x_max),hl
04B732             0026*  
04B732 C9          0027*      ret
04B733             0028*  
04B733             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04B733             0030*  img_load_main:
04B733 21 00 00 00 0031*      ld hl,0
04B737 22 EF B6 04 0032*      ld (cur_file_idx),hl
04B73B             0033*  img_load_main_loop:
04B73B             0034*  ; back up loop counter
04B73B C5          0035*      push bc
04B73C             0036*  ; load the next panel
04B73C CD A4 B7 04 0037*      call load_next_panel
04B740             0038*  ; draw all the things
04B740 CD 58 B8 04 0039*      call tmp_draw_all_the_things
04B744             0040*  ; draw the most recently loaded panel
04B744 2A F5 B6 04 0041*  	ld hl,(cur_buffer_id)
04B748 CD DC A9 04 0042*  	call vdu_buff_select
04B74C 01 00 00 00 0043*  	ld bc,0
04B750 11 00 00 00 0044*  	ld de,0
04B754 CD AD AB 04 0045*  	call vdu_plot_bmp
04B758             0046*  ; move bj
04B758 CD E0 B7 04 0047*  	call move_bj
04B75C             0048*  ; print welcome message
04B75C DD 21 77 7C 0049*  	ld ix,font_itc_honda
       04          
04B761 21 C2 C0 04 0050*  	ld hl,hello_world
04B765 01 20 00 00 0051*  	ld bc,32
04B769 11 02 00 00 0052*  	ld de,2
04B76D CD 7F 65 04 0053*  	call font_bmp_print
04B771             0054*  ; print current filename
04B771 CD 73 A8 04 0055*  	call vdu_cls
04B775 2A F2 B6 04 0056*  	ld hl,(cur_filename)
04B779 CD 72 AE 04 0057*  	call printString
04B77D CD 87 AE 04 0058*  	call printNewLine
04B781             0059*  
04B781             0060*  ; print current load stopwatch
04B781 21 E4 C0 04 0061*  	ld hl,loading_time
04B785 CD 72 AE 04 0062*  	call printString
04B789 CD 74 C0 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04B78D CD C0 AE 04 0064*  	call printDec
04B791             0065*  
04B791             0066*  ; flip screen
04B791 CD 42 AA 04 0067*      call vdu_flip
04B795             0068*  ; decrement loop counter
04B795 C1          0069*      pop bc
04B796 0B          0070*  	dec bc
04B797             0071*  ; ; DEBUG: DUMP REGISTERS
04B797             0072*  ; 	push bc
04B797             0073*  ; 	call dumpRegistersHex
04B797             0074*  ; 	call vdu_flip
04B797             0075*  ; 	pop bc
04B797             0076*  ; ; END DEBUG
04B797 79          0077*      ld a,c
04B798 B7          0078*      or a
04B799 C2 3B B7 04 0079*      jp nz,img_load_main_loop
04B79D 78          0080*      ld a,b
04B79E B7          0081*      or a
04B79F C2 3B B7 04 0082*      jp nz,img_load_main_loop
04B7A3 C9          0083*      ret
04B7A4             0084*  
04B7A4             0085*  load_next_panel:
04B7A4             0086*  ; look up the load routine for the current file index
04B7A4 2A EF B6 04 0087*  	ld hl,(cur_file_idx)
04B7A8 29          0088*  	add hl,hl ; multiply current index by 2 ...
04B7A9 ED 5B EF B6 0089*  	ld de,(cur_file_idx)
       04          
04B7AE 19          0090*  	add hl,de ; ... now by 3
04B7AF ED 5B FB B6 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04B7B4 19          0092*  	add hl,de
04B7B5 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04B7B7 22 BC B7 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04B7BB             0095*  @jump_addr:
04B7BB CD 00 00 00 0096*  	call 0 ; call the panel load routine
04B7BF             0097*  ; look up the buffer id for the current file
04B7BF 2A EF B6 04 0098*  	ld hl,(cur_file_idx)
04B7C3 29          0099*  	add hl,hl ; multiply current index by 2 ...
04B7C4 ED 5B EF B6 0100*  	ld de,(cur_file_idx)
       04          
04B7C9 19          0101*  	add hl,de ; ... now by 3
04B7CA ED 5B F8 B6 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04B7CF 19          0103*  	add hl,de
04B7D0 ED 27       0104*  	ld hl,(hl)
04B7D2 22 F5 B6 04 0105*  	ld (cur_buffer_id),hl
04B7D6             0106*  ; bump the current file index
04B7D6 2A EF B6 04 0107*  	ld hl,(cur_file_idx)
04B7DA 23          0108*  	inc hl
04B7DB 22 EF B6 04 0109*  	ld (cur_file_idx),hl
04B7DF C9          0110*  	ret
04B7E0             0111*  
04B7E0             0112*  move_bj:
04B7E0             0113*  ; activate bj bitmap
04B7E0 21 00 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04B7E4 CD DC A9 04 0115*  	call vdu_buff_select
04B7E8             0116*  ; update position based on velocity parameters
04B7E8 2A 43 B8 04 0117*  	ld hl, (bj_x_cur)
04B7EC ED 5B 40 B8 0118*  	ld de, (bj_xvel)
       04          
04B7F1 19          0119*  	add hl, de
04B7F2 22 43 B8 04 0120*  	ld (bj_x_cur), hl
04B7F6 EB          0121*  	ex de,hl ; store x_cur in de
04B7F7             0122*  ; check if we're < x_min
04B7F7 2A 46 B8 04 0123*  	ld hl,(bj_x_min)
04B7FB AF          0124*  	xor a ; clear carry
04B7FC ED 52       0125*  	sbc hl,de ; x_min - x_cur
04B7FE F2 1C B8 04 0126*  	jp p, move_bj_x_min
04B802             0127*  ; check if we're > x_max
04B802 2A 49 B8 04 0128*  	ld hl,(bj_x_max)
04B806 AF          0129*  	xor a ; clear carry
04B807 ED 52       0130*  	sbc hl,de ; x_max - x_cur
04B809 FA 2E B8 04 0131*  	jp m, move_bj_x_max
04B80D             0132*  ; if not at either boundary, fall through to draw bj's
04B80D             0133*  draw_bj:
04B80D ED 4B 43 B8 0134*  	ld bc,(bj_x_cur)
       04          
04B812 ED 5B 4F B8 0135*  	ld de,(bj_y_cur)
       04          
04B817 CD AD AB 04 0136*  	call vdu_plot_bmp
04B81B C9          0137*  	ret
04B81C             0138*  move_bj_x_min:
04B81C 21 01 00 00 0139*  	ld hl,1
04B820 22 40 B8 04 0140*  	ld (bj_xvel),hl
04B824 2A 46 B8 04 0141*  	ld hl,(bj_x_min)
04B828 22 43 B8 04 0142*  	ld (bj_x_cur),hl
04B82C 18 DF       0143*  	jr draw_bj
04B82E             0144*  move_bj_x_max:
04B82E 21 FF FF FF 0145*  	ld hl,-1
04B832 22 40 B8 04 0146*  	ld (bj_xvel),hl
04B836 2A 49 B8 04 0147*  	ld hl,(bj_x_max)
04B83A 22 43 B8 04 0148*  	ld (bj_x_cur),hl
04B83E 18 CD       0149*  	jr draw_bj
04B840 00 00 00    0150*  bj_xvel: dl 0
04B843 00 00 00    0151*  bj_x_cur: dl 0
04B846 00 00 00    0152*  bj_x_min: dl 0
04B849 00 00 00    0153*  bj_x_max: dl 0
04B84C             0154*  
04B84C 00 00 00    0155*  bj_yvel: dl 0
04B84F 00 00 00    0156*  bj_y_cur: dl 0
04B852 00 00 00    0157*  bj_y_min: dl 0
04B855 00 00 00    0158*  bj_y_max: dl 0
04B858             0159*  
04B858             0160*  tmp_draw_all_the_things:
04B858 21 06 20 00 0161*      ld hl,BUF_UI_SPLASH
04B85C CD DC A9 04 0162*      call vdu_buff_select
04B860 01 00 00 00 0163*      ld bc,0
04B864 11 00 00 00 0164*      ld de,0
04B868 CD AD AB 04 0165*      call vdu_plot_bmp
04B86C C9          0166*  	ret
04B86D             0167*  
04B86D             0168*  ; load an uncompressed rgba2222 image file to a buffer
04B86D             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B86D             0170*  vdu_load_img:
04B86D             0171*  ; back up image dimension parameters
04B86D C5          0172*  	push bc
04B86E D5          0173*  	push de
04B86F             0174*  ; load the image
04B86F CD AF C2 04 0175*  	call vdu_load_buffer_from_file
04B873             0176*  ; now make it a bitmap
04B873 D1          0177*  	pop de
04B874 C1          0178*  	pop bc
04B875 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04B877 C3 F1 A9 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04B87B             0181*  
04B87B             0182*  ; load a compressed rgba2222 image file to a buffer
04B87B             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B87B             0184*  vdu_load_img_cmp:
04B87B             0185*  ; back up image dimension parameters
04B87B C5          0186*  	push bc
04B87C D5          0187*  	push de
04B87D             0188*  ; back up the buffer id
04B87D E5          0189*  	push hl
04B87E             0190*  ; load the image
04B87E CD AF C2 04 0191*  	call vdu_load_buffer_from_file
04B882             0192*  ; decompress the buffer
04B882 E1          0193*  	pop hl ; bufferId
04B883 CD 50 AA 04 0194*  	call vdu_decompress_buffer
04B887             0195*  ; now make it a bitmap
04B887 D1          0196*  	pop de ; image height
04B888 C1          0197*  	pop bc ; image width
04B889 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04B88B C3 F1 A9 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04B88F             0029   	include "src/asm/sfx.asm"
04B88F             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04B88F             0002*  
04B88F             0003*  SFX_num_buffers: equ 22
04B88F             0004*  ; SFX buffer ids:
04B88F             0005*  BUF_ACHTUNG: equ 0xFB00
04B88F             0006*  BUF_AHH: equ 0xFB01
04B88F             0007*  BUF_AUGH: equ 0xFB02
04B88F             0008*  BUF_AYEE: equ 0xFB03
04B88F             0009*  BUF_AYEE_HIGH: equ 0xFB04
04B88F             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04B88F             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04B88F             0012*  BUF_DOG_YELP: equ 0xFB07
04B88F             0013*  BUF_EXPLODE: equ 0xFB08
04B88F             0014*  BUF_GOT_TREASURE: equ 0xFB09
04B88F             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04B88F             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04B88F             0017*  BUF_KNIFE: equ 0xFB0C
04B88F             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04B88F             0019*  BUF_OOF: equ 0xFB0E
04B88F             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04B88F             0021*  BUF_SCREAM: equ 0xFB10
04B88F             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04B88F             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04B88F             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04B88F             0025*  BUF_UGH: equ 0xFB14
04B88F             0026*  BUF_WILHELM: equ 0xFB15
04B88F             0027*  
04B88F             0028*  ; SFX buffer id reverse lookup:
04B88F             0029*  SFX_buffer_id_lut:
04B88F 00 FB 00    0030*  	dl BUF_ACHTUNG
04B892 01 FB 00    0031*  	dl BUF_AHH
04B895 02 FB 00    0032*  	dl BUF_AUGH
04B898 03 FB 00    0033*  	dl BUF_AYEE
04B89B 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04B89E 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04B8A1 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04B8A4 07 FB 00    0037*  	dl BUF_DOG_YELP
04B8A7 08 FB 00    0038*  	dl BUF_EXPLODE
04B8AA 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04B8AD 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04B8B0 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04B8B3 0C FB 00    0042*  	dl BUF_KNIFE
04B8B6 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04B8B9 0E FB 00    0044*  	dl BUF_OOF
04B8BC 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04B8BF 10 FB 00    0046*  	dl BUF_SCREAM
04B8C2 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04B8C5 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04B8C8 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04B8CB 14 FB 00    0050*  	dl BUF_UGH
04B8CE 15 FB 00    0051*  	dl BUF_WILHELM
04B8D1             0052*  
04B8D1             0053*  ; SFX duration lookup:
04B8D1             0054*  SFX_duration_lut:
04B8D1 58 03       0055*  	dw 856 ; ACHTUNG
04B8D3 91 01       0056*  	dw 401 ; AHH
04B8D5 FC 02       0057*  	dw 764 ; AUGH
04B8D7 E6 01       0058*  	dw 486 ; AYEE
04B8D9 40 04       0059*  	dw 1088 ; AYEE_HIGH
04B8DB 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04B8DD 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04B8DF B0 01       0062*  	dw 432 ; DOG_YELP
04B8E1 13 05       0063*  	dw 1299 ; EXPLODE
04B8E3 A7 05       0064*  	dw 1447 ; GOT_TREASURE
04B8E5 24 01       0065*  	dw 292 ; GUN_EMPTY
04B8E7 BA 01       0066*  	dw 442 ; GUN_RELOAD
04B8E9 F2 00       0067*  	dw 242 ; KNIFE
04B8EB 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04B8ED CE 03       0069*  	dw 974 ; OOF
04B8EF 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04B8F1 E0 02       0071*  	dw 736 ; SCREAM
04B8F3 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04B8F5 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04B8F7 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04B8F9 77 01       0075*  	dw 375 ; UGH
04B8FB FD 04       0076*  	dw 1277 ; WILHELM
04B8FD             0077*  
04B8FD             0078*  ; SFX load routines jump table:
04B8FD             0079*  SFX_load_routines_table:
04B8FD 3F B9 04    0080*  	dl load_sfx_ACHTUNG
04B900 61 B9 04    0081*  	dl load_sfx_AHH
04B903 83 B9 04    0082*  	dl load_sfx_AUGH
04B906 A5 B9 04    0083*  	dl load_sfx_AYEE
04B909 C7 B9 04    0084*  	dl load_sfx_AYEE_HIGH
04B90C E9 B9 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04B90F 0B BA 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04B912 2D BA 04    0087*  	dl load_sfx_DOG_YELP
04B915 4F BA 04    0088*  	dl load_sfx_EXPLODE
04B918 71 BA 04    0089*  	dl load_sfx_GOT_TREASURE
04B91B 93 BA 04    0090*  	dl load_sfx_GUN_EMPTY
04B91E B5 BA 04    0091*  	dl load_sfx_GUN_RELOAD
04B921 D7 BA 04    0092*  	dl load_sfx_KNIFE
04B924 F9 BA 04    0093*  	dl load_sfx_MEIN_LEBEN
04B927 1B BB 04    0094*  	dl load_sfx_OOF
04B92A 3D BB 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04B92D 5F BB 04    0096*  	dl load_sfx_SCREAM
04B930 81 BB 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04B933 A3 BB 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04B936 C5 BB 04    0099*  	dl load_sfx_SHOT_PISTOL
04B939 E7 BB 04    0100*  	dl load_sfx_UGH
04B93C 09 BC 04    0101*  	dl load_sfx_WILHELM
04B93F             0102*  
04B93F             0103*  ; Import sfx .raw files and load them into VDP buffers
04B93F             0104*  
04B93F             0105*  load_sfx_ACHTUNG:
04B93F 21 2B BC 04 0106*  	ld hl,FACHTUNG
04B943 22 F2 B6 04 0107*  	ld (cur_filename),hl
04B947 11 FC C2 04 0108*  	ld de,filedata
04B94B 01 00 00 01 0109*  	ld bc,65536
04B94F 3E 01       0110*  	ld a,mos_load
04B951 5B CF       0111*  	RST.LIL 08h
04B953 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04B957 DD 21 3A 38 0113*  	ld ix,14394
       00          
04B95C CD 66 AE 04 0114*  	call vdu_load_sfx
04B960 C9          0115*  	ret
04B961             0116*  
04B961             0117*  load_sfx_AHH:
04B961 21 3B BC 04 0118*  	ld hl,FAHH
04B965 22 F2 B6 04 0119*  	ld (cur_filename),hl
04B969 11 FC C2 04 0120*  	ld de,filedata
04B96D 01 00 00 01 0121*  	ld bc,65536
04B971 3E 01       0122*  	ld a,mos_load
04B973 5B CF       0123*  	RST.LIL 08h
04B975 21 01 FB 00 0124*  	ld hl,BUF_AHH
04B979 DD 21 63 1A 0125*  	ld ix,6755
       00          
04B97E CD 66 AE 04 0126*  	call vdu_load_sfx
04B982 C9          0127*  	ret
04B983             0128*  
04B983             0129*  load_sfx_AUGH:
04B983 21 47 BC 04 0130*  	ld hl,FAUGH
04B987 22 F2 B6 04 0131*  	ld (cur_filename),hl
04B98B 11 FC C2 04 0132*  	ld de,filedata
04B98F 01 00 00 01 0133*  	ld bc,65536
04B993 3E 01       0134*  	ld a,mos_load
04B995 5B CF       0135*  	RST.LIL 08h
04B997 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04B99B DD 21 39 32 0137*  	ld ix,12857
       00          
04B9A0 CD 66 AE 04 0138*  	call vdu_load_sfx
04B9A4 C9          0139*  	ret
04B9A5             0140*  
04B9A5             0141*  load_sfx_AYEE:
04B9A5 21 54 BC 04 0142*  	ld hl,FAYEE
04B9A9 22 F2 B6 04 0143*  	ld (cur_filename),hl
04B9AD 11 FC C2 04 0144*  	ld de,filedata
04B9B1 01 00 00 01 0145*  	ld bc,65536
04B9B5 3E 01       0146*  	ld a,mos_load
04B9B7 5B CF       0147*  	RST.LIL 08h
04B9B9 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04B9BD DD 21 00 20 0149*  	ld ix,8192
       00          
04B9C2 CD 66 AE 04 0150*  	call vdu_load_sfx
04B9C6 C9          0151*  	ret
04B9C7             0152*  
04B9C7             0153*  load_sfx_AYEE_HIGH:
04B9C7 21 61 BC 04 0154*  	ld hl,FAYEE_HIGH
04B9CB 22 F2 B6 04 0155*  	ld (cur_filename),hl
04B9CF 11 FC C2 04 0156*  	ld de,filedata
04B9D3 01 00 00 01 0157*  	ld bc,65536
04B9D7 3E 01       0158*  	ld a,mos_load
04B9D9 5B CF       0159*  	RST.LIL 08h
04B9DB 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04B9DF DD 21 77 47 0161*  	ld ix,18295
       00          
04B9E4 CD 66 AE 04 0162*  	call vdu_load_sfx
04B9E8 C9          0163*  	ret
04B9E9             0164*  
04B9E9             0165*  load_sfx_DOG_WOOF_DOUBLE:
04B9E9 21 73 BC 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04B9ED 22 F2 B6 04 0167*  	ld (cur_filename),hl
04B9F1 11 FC C2 04 0168*  	ld de,filedata
04B9F5 01 00 00 01 0169*  	ld bc,65536
04B9F9 3E 01       0170*  	ld a,mos_load
04B9FB 5B CF       0171*  	RST.LIL 08h
04B9FD 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BA01 DD 21 24 28 0173*  	ld ix,10276
       00          
04BA06 CD 66 AE 04 0174*  	call vdu_load_sfx
04BA0A C9          0175*  	ret
04BA0B             0176*  
04BA0B             0177*  load_sfx_DOG_WOOF_SINGLE:
04BA0B 21 8B BC 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04BA0F 22 F2 B6 04 0179*  	ld (cur_filename),hl
04BA13 11 FC C2 04 0180*  	ld de,filedata
04BA17 01 00 00 01 0181*  	ld bc,65536
04BA1B 3E 01       0182*  	ld a,mos_load
04BA1D 5B CF       0183*  	RST.LIL 08h
04BA1F 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04BA23 DD 21 10 23 0185*  	ld ix,8976
       00          
04BA28 CD 66 AE 04 0186*  	call vdu_load_sfx
04BA2C C9          0187*  	ret
04BA2D             0188*  
04BA2D             0189*  load_sfx_DOG_YELP:
04BA2D 21 A3 BC 04 0190*  	ld hl,FDOG_YELP
04BA31 22 F2 B6 04 0191*  	ld (cur_filename),hl
04BA35 11 FC C2 04 0192*  	ld de,filedata
04BA39 01 00 00 01 0193*  	ld bc,65536
04BA3D 3E 01       0194*  	ld a,mos_load
04BA3F 5B CF       0195*  	RST.LIL 08h
04BA41 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04BA45 DD 21 60 1C 0197*  	ld ix,7264
       00          
04BA4A CD 66 AE 04 0198*  	call vdu_load_sfx
04BA4E C9          0199*  	ret
04BA4F             0200*  
04BA4F             0201*  load_sfx_EXPLODE:
04BA4F 21 B4 BC 04 0202*  	ld hl,FEXPLODE
04BA53 22 F2 B6 04 0203*  	ld (cur_filename),hl
04BA57 11 FC C2 04 0204*  	ld de,filedata
04BA5B 01 00 00 01 0205*  	ld bc,65536
04BA5F 3E 01       0206*  	ld a,mos_load
04BA61 5B CF       0207*  	RST.LIL 08h
04BA63 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04BA67 DD 21 48 55 0209*  	ld ix,21832
       00          
04BA6C CD 66 AE 04 0210*  	call vdu_load_sfx
04BA70 C9          0211*  	ret
04BA71             0212*  
04BA71             0213*  load_sfx_GOT_TREASURE:
04BA71 21 C4 BC 04 0214*  	ld hl,FGOT_TREASURE
04BA75 22 F2 B6 04 0215*  	ld (cur_filename),hl
04BA79 11 FC C2 04 0216*  	ld de,filedata
04BA7D 01 00 00 01 0217*  	ld bc,65536
04BA81 3E 01       0218*  	ld a,mos_load
04BA83 5B CF       0219*  	RST.LIL 08h
04BA85 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04BA89 DD 21 07 5F 0221*  	ld ix,24327
       00          
04BA8E CD 66 AE 04 0222*  	call vdu_load_sfx
04BA92 C9          0223*  	ret
04BA93             0224*  
04BA93             0225*  load_sfx_GUN_EMPTY:
04BA93 21 D9 BC 04 0226*  	ld hl,FGUN_EMPTY
04BA97 22 F2 B6 04 0227*  	ld (cur_filename),hl
04BA9B 11 FC C2 04 0228*  	ld de,filedata
04BA9F 01 00 00 01 0229*  	ld bc,65536
04BAA3 3E 01       0230*  	ld a,mos_load
04BAA5 5B CF       0231*  	RST.LIL 08h
04BAA7 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04BAAB DD 21 3F 13 0233*  	ld ix,4927
       00          
04BAB0 CD 66 AE 04 0234*  	call vdu_load_sfx
04BAB4 C9          0235*  	ret
04BAB5             0236*  
04BAB5             0237*  load_sfx_GUN_RELOAD:
04BAB5 21 EB BC 04 0238*  	ld hl,FGUN_RELOAD
04BAB9 22 F2 B6 04 0239*  	ld (cur_filename),hl
04BABD 11 FC C2 04 0240*  	ld de,filedata
04BAC1 01 00 00 01 0241*  	ld bc,65536
04BAC5 3E 01       0242*  	ld a,mos_load
04BAC7 5B CF       0243*  	RST.LIL 08h
04BAC9 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04BACD DD 21 0F 1D 0245*  	ld ix,7439
       00          
04BAD2 CD 66 AE 04 0246*  	call vdu_load_sfx
04BAD6 C9          0247*  	ret
04BAD7             0248*  
04BAD7             0249*  load_sfx_KNIFE:
04BAD7 21 FE BC 04 0250*  	ld hl,FKNIFE
04BADB 22 F2 B6 04 0251*  	ld (cur_filename),hl
04BADF 11 FC C2 04 0252*  	ld de,filedata
04BAE3 01 00 00 01 0253*  	ld bc,65536
04BAE7 3E 01       0254*  	ld a,mos_load
04BAE9 5B CF       0255*  	RST.LIL 08h
04BAEB 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04BAEF DD 21 F3 0F 0257*  	ld ix,4083
       00          
04BAF4 CD 66 AE 04 0258*  	call vdu_load_sfx
04BAF8 C9          0259*  	ret
04BAF9             0260*  
04BAF9             0261*  load_sfx_MEIN_LEBEN:
04BAF9 21 0C BD 04 0262*  	ld hl,FMEIN_LEBEN
04BAFD 22 F2 B6 04 0263*  	ld (cur_filename),hl
04BB01 11 FC C2 04 0264*  	ld de,filedata
04BB05 01 00 00 01 0265*  	ld bc,65536
04BB09 3E 01       0266*  	ld a,mos_load
04BB0B 5B CF       0267*  	RST.LIL 08h
04BB0D 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04BB11 DD 21 81 35 0269*  	ld ix,13697
       00          
04BB16 CD 66 AE 04 0270*  	call vdu_load_sfx
04BB1A C9          0271*  	ret
04BB1B             0272*  
04BB1B             0273*  load_sfx_OOF:
04BB1B 21 1F BD 04 0274*  	ld hl,FOOF
04BB1F 22 F2 B6 04 0275*  	ld (cur_filename),hl
04BB23 11 FC C2 04 0276*  	ld de,filedata
04BB27 01 00 00 01 0277*  	ld bc,65536
04BB2B 3E 01       0278*  	ld a,mos_load
04BB2D 5B CF       0279*  	RST.LIL 08h
04BB2F 21 0E FB 00 0280*  	ld hl,BUF_OOF
04BB33 DD 21 00 40 0281*  	ld ix,16384
       00          
04BB38 CD 66 AE 04 0282*  	call vdu_load_sfx
04BB3C C9          0283*  	ret
04BB3D             0284*  
04BB3D             0285*  load_sfx_SCHUSSTAFFEL:
04BB3D 21 2B BD 04 0286*  	ld hl,FSCHUSSTAFFEL
04BB41 22 F2 B6 04 0287*  	ld (cur_filename),hl
04BB45 11 FC C2 04 0288*  	ld de,filedata
04BB49 01 00 00 01 0289*  	ld bc,65536
04BB4D 3E 01       0290*  	ld a,mos_load
04BB4F 5B CF       0291*  	RST.LIL 08h
04BB51 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04BB55 DD 21 63 26 0293*  	ld ix,9827
       00          
04BB5A CD 66 AE 04 0294*  	call vdu_load_sfx
04BB5E C9          0295*  	ret
04BB5F             0296*  
04BB5F             0297*  load_sfx_SCREAM:
04BB5F 21 40 BD 04 0298*  	ld hl,FSCREAM
04BB63 22 F2 B6 04 0299*  	ld (cur_filename),hl
04BB67 11 FC C2 04 0300*  	ld de,filedata
04BB6B 01 00 00 01 0301*  	ld bc,65536
04BB6F 3E 01       0302*  	ld a,mos_load
04BB71 5B CF       0303*  	RST.LIL 08h
04BB73 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04BB77 DD 21 5E 30 0305*  	ld ix,12382
       00          
04BB7C CD 66 AE 04 0306*  	call vdu_load_sfx
04BB80 C9          0307*  	ret
04BB81             0308*  
04BB81             0309*  load_sfx_SHOT_GATLING_BURST:
04BB81 21 4F BD 04 0310*  	ld hl,FSHOT_GATLING_BURST
04BB85 22 F2 B6 04 0311*  	ld (cur_filename),hl
04BB89 11 FC C2 04 0312*  	ld de,filedata
04BB8D 01 00 00 01 0313*  	ld bc,65536
04BB91 3E 01       0314*  	ld a,mos_load
04BB93 5B CF       0315*  	RST.LIL 08h
04BB95 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04BB99 DD 21 00 60 0317*  	ld ix,24576
       00          
04BB9E CD 66 AE 04 0318*  	call vdu_load_sfx
04BBA2 C9          0319*  	ret
04BBA3             0320*  
04BBA3             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04BBA3 21 6A BD 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04BBA7 22 F2 B6 04 0323*  	ld (cur_filename),hl
04BBAB 11 FC C2 04 0324*  	ld de,filedata
04BBAF 01 00 00 01 0325*  	ld bc,65536
04BBB3 3E 01       0326*  	ld a,mos_load
04BBB5 5B CF       0327*  	RST.LIL 08h
04BBB7 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BBBB DD 21 C4 42 0329*  	ld ix,17092
       00          
04BBC0 CD 66 AE 04 0330*  	call vdu_load_sfx
04BBC4 C9          0331*  	ret
04BBC5             0332*  
04BBC5             0333*  load_sfx_SHOT_PISTOL:
04BBC5 21 89 BD 04 0334*  	ld hl,FSHOT_PISTOL
04BBC9 22 F2 B6 04 0335*  	ld (cur_filename),hl
04BBCD 11 FC C2 04 0336*  	ld de,filedata
04BBD1 01 00 00 01 0337*  	ld bc,65536
04BBD5 3E 01       0338*  	ld a,mos_load
04BBD7 5B CF       0339*  	RST.LIL 08h
04BBD9 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04BBDD DD 21 61 4B 0341*  	ld ix,19297
       00          
04BBE2 CD 66 AE 04 0342*  	call vdu_load_sfx
04BBE6 C9          0343*  	ret
04BBE7             0344*  
04BBE7             0345*  load_sfx_UGH:
04BBE7 21 9D BD 04 0346*  	ld hl,FUGH
04BBEB 22 F2 B6 04 0347*  	ld (cur_filename),hl
04BBEF 11 FC C2 04 0348*  	ld de,filedata
04BBF3 01 00 00 01 0349*  	ld bc,65536
04BBF7 3E 01       0350*  	ld a,mos_load
04BBF9 5B CF       0351*  	RST.LIL 08h
04BBFB 21 14 FB 00 0352*  	ld hl,BUF_UGH
04BBFF DD 21 A9 18 0353*  	ld ix,6313
       00          
04BC04 CD 66 AE 04 0354*  	call vdu_load_sfx
04BC08 C9          0355*  	ret
04BC09             0356*  
04BC09             0357*  load_sfx_WILHELM:
04BC09 21 A9 BD 04 0358*  	ld hl,FWILHELM
04BC0D 22 F2 B6 04 0359*  	ld (cur_filename),hl
04BC11 11 FC C2 04 0360*  	ld de,filedata
04BC15 01 00 00 01 0361*  	ld bc,65536
04BC19 3E 01       0362*  	ld a,mos_load
04BC1B 5B CF       0363*  	RST.LIL 08h
04BC1D 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04BC21 DD 21 D7 53 0365*  	ld ix,21463
       00          
04BC26 CD 66 AE 04 0366*  	call vdu_load_sfx
04BC2A C9          0367*  	ret
04BC2B             0368*  
04BC2B             0369*  ; File name lookups:
04BC2B 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04BC3B 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04BC47 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04BC54 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04BC61 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04BC73 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04BC8B 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04BCA3 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04BCB4 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04BCC4 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04BCD9 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04BCEB 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04BCFE 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04BD0C 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04BD1F 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04BD2B 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04BD40 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04BD4F 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BD6A 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BD89 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04BD9D 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04BDA9 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04BDB9             0392*  
04BDB9             0393*  ; Play sfx routines
04BDB9             0394*  
04BDB9             0395*  sfx_play_achtung:
04BDB9 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04BDBD 01 58 03 00 0397*  	ld bc,856
04BDC1 C3 46 00 04 0398*  	jp vdu_play_sfx
04BDC5             0399*  
04BDC5             0400*  sfx_play_ahh:
04BDC5 21 01 FB 00 0401*  	ld hl,BUF_AHH
04BDC9 01 91 01 00 0402*  	ld bc,401
04BDCD C3 46 00 04 0403*  	jp vdu_play_sfx
04BDD1             0404*  
04BDD1             0405*  sfx_play_augh:
04BDD1 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04BDD5 01 FC 02 00 0407*  	ld bc,764
04BDD9 C3 46 00 04 0408*  	jp vdu_play_sfx
04BDDD             0409*  
04BDDD             0410*  sfx_play_ayee:
04BDDD 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04BDE1 01 E6 01 00 0412*  	ld bc,486
04BDE5 C3 46 00 04 0413*  	jp vdu_play_sfx
04BDE9             0414*  
04BDE9             0415*  sfx_play_ayee_high:
04BDE9 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04BDED 01 40 04 00 0417*  	ld bc,1088
04BDF1 C3 46 00 04 0418*  	jp vdu_play_sfx
04BDF5             0419*  
04BDF5             0420*  sfx_play_dog_woof_double:
04BDF5 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BDF9 01 63 02 00 0422*  	ld bc,611
04BDFD C3 46 00 04 0423*  	jp vdu_play_sfx
04BE01             0424*  
04BE01             0425*  sfx_play_dog_woof_single:
04BE01 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04BE05 01 15 02 00 0427*  	ld bc,533
04BE09 C3 46 00 04 0428*  	jp vdu_play_sfx
04BE0D             0429*  
04BE0D             0430*  sfx_play_dog_yelp:
04BE0D 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04BE11 01 B0 01 00 0432*  	ld bc,432
04BE15 C3 46 00 04 0433*  	jp vdu_play_sfx
04BE19             0434*  
04BE19             0435*  sfx_play_explode:
04BE19 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04BE1D 01 13 05 00 0437*  	ld bc,1299
04BE21 C3 46 00 04 0438*  	jp vdu_play_sfx
04BE25             0439*  
04BE25             0440*  sfx_play_got_treasure:
04BE25 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04BE29 01 A7 05 00 0442*  	ld bc,1447
04BE2D C3 46 00 04 0443*  	jp vdu_play_sfx
04BE31             0444*  
04BE31             0445*  sfx_play_gun_empty:
04BE31 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04BE35 01 24 01 00 0447*  	ld bc,292
04BE39 C3 46 00 04 0448*  	jp vdu_play_sfx
04BE3D             0449*  
04BE3D             0450*  sfx_play_gun_reload:
04BE3D 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04BE41 01 BA 01 00 0452*  	ld bc,442
04BE45 C3 46 00 04 0453*  	jp vdu_play_sfx
04BE49             0454*  
04BE49             0455*  sfx_play_knife:
04BE49 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04BE4D 01 F2 00 00 0457*  	ld bc,242
04BE51 C3 46 00 04 0458*  	jp vdu_play_sfx
04BE55             0459*  
04BE55             0460*  sfx_play_mein_leben:
04BE55 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04BE59 01 2E 03 00 0462*  	ld bc,814
04BE5D C3 46 00 04 0463*  	jp vdu_play_sfx
04BE61             0464*  
04BE61             0465*  sfx_play_oof:
04BE61 21 0E FB 00 0466*  	ld hl,BUF_OOF
04BE65 01 CE 03 00 0467*  	ld bc,974
04BE69 C3 46 00 04 0468*  	jp vdu_play_sfx
04BE6D             0469*  
04BE6D             0470*  sfx_play_schusstaffel:
04BE6D 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04BE71 01 48 02 00 0472*  	ld bc,584
04BE75 C3 46 00 04 0473*  	jp vdu_play_sfx
04BE79             0474*  
04BE79             0475*  sfx_play_scream:
04BE79 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04BE7D 01 E0 02 00 0477*  	ld bc,736
04BE81 C3 46 00 04 0478*  	jp vdu_play_sfx
04BE85             0479*  
04BE85             0480*  sfx_play_shot_gatling_burst:
04BE85 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04BE89 01 B6 05 00 0482*  	ld bc,1462
04BE8D C3 46 00 04 0483*  	jp vdu_play_sfx
04BE91             0484*  
04BE91             0485*  sfx_play_shot_machine_gun_burst:
04BE91 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BE95 01 F9 03 00 0487*  	ld bc,1017
04BE99 C3 46 00 04 0488*  	jp vdu_play_sfx
04BE9D             0489*  
04BE9D             0490*  sfx_play_shot_pistol:
04BE9D 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04BEA1 01 7C 04 00 0492*  	ld bc,1148
04BEA5 C3 46 00 04 0493*  	jp vdu_play_sfx
04BEA9             0494*  
04BEA9             0495*  sfx_play_ugh:
04BEA9 21 14 FB 00 0496*  	ld hl,BUF_UGH
04BEAD 01 77 01 00 0497*  	ld bc,375
04BEB1 C3 46 00 04 0498*  	jp vdu_play_sfx
04BEB5             0499*  
04BEB5             0500*  sfx_play_wilhelm:
04BEB5 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04BEB9 01 FD 04 00 0502*  	ld bc,1277
04BEBD C3 46 00 04 0503*  	jp vdu_play_sfx
04BEC1             0030   	include "src/asm/timer.asm"
04BEC1             0001*  ; Table 32. Timer Control Registers
04BEC1             0002*  ; this constant is the base address of the timer control registers
04BEC1             0003*  ; each timer takes three bytes:
04BEC1             0004*  ;   0: control register
04BEC1             0005*  ;   1: low byte of timer reset value
04BEC1             0006*  ;   2: high byte of timer reset value
04BEC1             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04BEC1             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04BEC1             0009*  TMR_CTL:     equ 80h
04BEC1             0010*  
04BEC1             0011*  ; Timer Control Register Bit Definitions
04BEC1             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04BEC1             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04BEC1             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04BEC1             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04BEC1             0016*                              ; the TMRx_CTL register is read.
04BEC1             0017*  
04BEC1             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04BEC1             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04BEC1             0020*  
04BEC1             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04BEC1             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04BEC1             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04BEC1             0024*                              ; written to the counter when the end-of-count value is reached.
04BEC1             0025*  
04BEC1             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04BEC1             0027*  CLK_DIV_256:  equ %00001100 ;
04BEC1             0028*  CLK_DIV_64:   equ %00001000 ;
04BEC1             0029*  CLK_DIV_16:   equ %00000100 ;
04BEC1             0030*  CLK_DIV_4:    equ %00000000 ;
04BEC1             0031*  
04BEC1             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04BEC1             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04BEC1             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04BEC1             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04BEC1             0036*                              ; programmer must ensure that this bit is set to 1 each time
04BEC1             0037*                              ; SINGLE-PASS mode is used.
04BEC1             0038*  
04BEC1             0039*  ; disable/enable the programmable reload timer
04BEC1             0040*  PRT_EN_0:     equ %00000000 ;
04BEC1             0041*  PRT_EN_1:     equ %00000001 ;
04BEC1             0042*  
04BEC1             0043*  ; Table 37. Timer Input Source Select Register
04BEC1             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04BEC1             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04BEC1             0046*  ;   00: System clock / CLK_DIV
04BEC1             0047*  ;   01: RTC / CLK_DIV
04BEC1             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04BEC1             0049*  ;   10: GPIO port B pin 1.
04BEC1             0050*  ;   11: GPIO port B pin 1.
04BEC1             0051*  TMR_ISS:   equ 92h ; register address
04BEC1             0052*  
04BEC1             0053*  ; Table 51. Real-Time Clock Control Register
04BEC1             0054*  RTC_CTRL: equ EDh ; register address
04BEC1             0055*  
04BEC1             0056*  ; alarm interrupt disable/enable
04BEC1             0057*  RTC_ALARM_0:    equ %00000000
04BEC1             0058*  RTC_ALARM_1:    equ %10000000
04BEC1             0059*  
04BEC1             0060*  ; interrupt on alarm disable/enable
04BEC1             0061*  RTC_INT_ENT_0:  equ %00000000
04BEC1             0062*  RTC_INT_ENT_1:  equ %01000000
04BEC1             0063*  
04BEC1             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04BEC1             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04BEC1             0066*  
04BEC1             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04BEC1             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04BEC1             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04BEC1             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04BEC1             0071*  
04BEC1             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04BEC1             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04BEC1             0074*  
04BEC1             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04BEC1             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04BEC1             0077*  
04BEC1             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04BEC1             0079*                                  ; RTC counter is enabled.
04BEC1             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04BEC1             0081*                                  ; RTC counter is disabled.
04BEC1             0082*  
04BEC1             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04BEC1             0084*  
04BEC1             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04BEC1             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04BEC1 00 00 00    0087*  prt_reload: dl 0x000000
04BEC4             0088*  
04BEC4             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04BEC4             0090*  ;          de = number PRT interrupts during test interval
04BEC4             0091*  prt_calibrate:
04BEC4 CD CD AA 04 0092*      call vdu_vblank
04BEC8             0093*  ; set a MOS timer
04BEC8 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04BECC FD 21 1F C0 0095*      ld iy,tmr_test
       04          
04BED1 CD FD BF 04 0096*      call tmr_set
04BED5             0097*  ; set a PRT timer
04BED5             0098*      ; ld hl,prt_reload_hardware
04BED5             0099*      ; ld hl,prt_reload_emulator
04BED5 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04BED9 22 C1 BE 04 0101*      ld (prt_reload),hl
04BEDD CD 38 BF 04 0102*      call prt_set
04BEE1             0103*  @loop:
04BEE1             0104*  ; check time remaining on MOS timer
04BEE1 CD 0B C0 04 0105*      call tmr_get
04BEE5 CA EF BE 04 0106*      jp z,@done ; time expired,so quit
04BEE9 FA EF BE 04 0107*      jp m,@done ; time past expiration (negative),so quit
04BEED 18 F2       0108*      jr @loop
04BEEF             0109*  @done:
04BEEF ED 5B 86 BF 0110*      ld de,(prt_irq_counter)
       04          
04BEF4 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04BEF8 ED 43 C1 BE 0112*      ld (prt_reload),bc
       04          
04BEFD 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04BF01 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04BF02 32 0F C1 04 0115*      ld (is_emulator),a
04BF06 ED 52       0116*      sbc hl,de
04BF08 21 27 C1 04 0117*      ld hl,on_hardware ; default message for running on hardware
04BF0C CA C4 BE 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04BF10 F8          0119*      ret m ; negative result means we're on hardware
04BF11 3C          0120*      inc a ; we're on emulator
04BF12 32 0F C1 04 0121*      ld (is_emulator),a
04BF16 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04BF1A ED 43 C1 BE 0123*      ld (prt_reload),bc
       04          
04BF1F 21 10 C1 04 0124*      ld hl,on_emulator
04BF23 C9          0125*      ret
04BF24             0126*  
04BF24 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04BF38             0128*  
04BF38             0129*  ; set PRT timer
04BF38             0130*  prt_set:
04BF38 21 00 00 00 0131*      ld hl,0
04BF3C 22 86 BF 04 0132*      ld (prt_irq_counter),hl
04BF40 2A C1 BE 04 0133*      ld hl,(prt_reload)
04BF44 ED 29 84    0134*      out0 ($84),l
04BF47 ED 21 85    0135*  	out0 ($85),h
04BF4A             0136*  ; disable timer
04BF4A 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04BF4C ED 39 83    0138*  	out0 ($83),a
04BF4F             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04BF4F 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04BF51 ED 39 83    0141*  	out0 ($83),a
04BF54 C9          0142*      ret
04BF55             0143*  
04BF55             0144*  ; ===============================================
04BF55             0145*  ; PRT Timer Interrupt Handling
04BF55             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04BF55             0147*  ; -----------------------------------------------
04BF55             0148*  prt_irq_init:
04BF55             0149*      ; set up interrupt vector table 2
04BF55 21 00 00 00 0150*  	ld hl,0
04BF59 3A 0C 01 00 0151*  	ld a,($10c)
04BF5D 6F          0152*  	ld l,a
04BF5E 3A 0D 01 00 0153*  	ld a,($10d)
04BF62 67          0154*  	ld h,a
04BF63             0155*  
04BF63             0156*  	; skip over CALL ($c3)
04BF63 23          0157*  	inc hl
04BF64             0158*  	; load address of jump into vector table 2 (in ram)
04BF64 ED 27       0159*  	ld hl,(hl)
04BF66             0160*  
04BF66             0161*  	; write CALL prt_irq_handler to vector table 2
04BF66 3E C3       0162*  	ld a,$c3
04BF68 77          0163*  	ld (hl),a
04BF69 23          0164*  	inc hl
04BF6A 11 71 BF 04 0165*  	ld de,prt_irq_handler
04BF6E ED 1F       0166*  	ld (hl),de
04BF70             0167*  
04BF70 C9          0168*      ret
04BF71             0169*  
04BF71             0170*  prt_irq_handler:
04BF71 F3          0171*  	di
04BF72 F5          0172*  	push af
04BF73 E5          0173*      push hl
04BF74 ED 38 83    0174*  	in0 a,($83)
04BF77 2A 86 BF 04 0175*  	ld hl,(prt_irq_counter)
04BF7B 23          0176*  	inc hl
04BF7C 22 86 BF 04 0177*  	ld (prt_irq_counter),hl
04BF80 E1          0178*      pop hl
04BF81 F1          0179*  	pop af
04BF82 FB          0180*  	ei
04BF83 5B ED 4D    0181*  	reti.l
04BF86             0182*  
04BF86             0183*  prt_irq_counter:
04BF86 00 00 00    0184*  	.dl 0
04BF89             0185*  prt_irq_counter_saved:
04BF89 00 00 00    0186*      .dl 0
04BF8C             0187*  
04BF8C             0188*  prt_loop_reset:
04BF8C E5          0189*      push hl
04BF8D 21 00 00 00 0190*  	ld hl,0
04BF91 22 86 BF 04 0191*  	ld (prt_irq_counter),hl
04BF95 22 F7 BF 04 0192*      ld (prt_loop_counter),hl
04BF99 22 FA BF 04 0193*      ld (prt_loops),hl
04BF9D CD 38 BF 04 0194*      call prt_set
04BFA1 E1          0195*      pop hl
04BFA2 C9          0196*      ret
04BFA3             0197*  
04BFA3             0198*  prt_loop_start:
04BFA3 E5          0199*      push hl
04BFA4 21 00 00 00 0200*  	ld hl,0
04BFA8 22 86 BF 04 0201*  	ld (prt_irq_counter),hl
04BFAC E1          0202*      pop hl
04BFAD C9          0203*      ret
04BFAE             0204*  
04BFAE             0205*  prt_loop_stop:
04BFAE E5          0206*      push hl
04BFAF D5          0207*      push de
04BFB0 2A 86 BF 04 0208*      ld hl,(prt_irq_counter)
04BFB4 ED 5B F7 BF 0209*      ld de,(prt_loop_counter)
       04          
04BFB9 19          0210*      add hl,de
04BFBA 22 F7 BF 04 0211*      ld (prt_loop_counter),hl
04BFBE 21 00 00 00 0212*      ld hl,0
04BFC2 22 86 BF 04 0213*      ld (prt_irq_counter),hl
04BFC6 2A FA BF 04 0214*      ld hl,(prt_loops)
04BFCA 23          0215*      inc hl
04BFCB 22 FA BF 04 0216*      ld (prt_loops),hl
04BFCF D1          0217*      pop de
04BFD0 E1          0218*      pop hl
04BFD1 C9          0219*      ret
04BFD2             0220*  
04BFD2             0221*  ; inputs: bc = y,x text coordinates to print
04BFD2             0222*  prt_loop_print:
04BFD2 F5          0223*      push af
04BFD3 E5          0224*      push hl
04BFD4 C5          0225*      push bc
04BFD5 D5          0226*      push de
04BFD6 DD E5       0227*      push ix
04BFD8 FD E5       0228*      push iy
04BFDA CD B0 A9 04 0229*      call vdu_move_cursor
04BFDE             0230*  
04BFDE 2A F7 BF 04 0231*      ld hl,(prt_loop_counter)
04BFE2 CD C0 AE 04 0232*      call printDec
04BFE6             0233*  
04BFE6 2A FA BF 04 0234*      ld hl,(prt_loops)
04BFEA CD C0 AE 04 0235*      call printDec
04BFEE             0236*  
04BFEE FD E1       0237*      pop iy
04BFF0 DD E1       0238*      pop ix
04BFF2 D1          0239*      pop de
04BFF3 C1          0240*      pop bc
04BFF4 E1          0241*      pop hl
04BFF5 F1          0242*      pop af
04BFF6 C9          0243*      ret
04BFF7             0244*  
04BFF7             0245*  prt_loop_counter:
04BFF7 00 00 00    0246*      .dl 0
04BFFA             0247*  prt_loops:
04BFFA 00 00 00    0248*      .dl 0
04BFFD             0249*  
04BFFD             0250*  ; ===============================================
04BFFD             0251*  ; Timer functions
04BFFD             0252*  ; -----------------------------------------------
04BFFD             0253*  ; set a countdown timer
04BFFD             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04BFFD             0255*  ; returns: hl = current time
04BFFD             0256*  tmr_set:
04BFFD FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04C000             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04C000 3E 08       0001*M 			LD	A, function
04C002 5B CF       0002*M 			RST.LIL	08h
04C004 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04C007 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04C00A C9          0261*      ret
04C00B             0262*  
04C00B             0263*  ; gets time remaining on a countdown timer
04C00B             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C00B             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C00B             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C00B             0267*  tmr_get:
04C00B             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04C00B 3E 08       0001*M 			LD	A, function
04C00D 5B CF       0002*M 			RST.LIL	08h
04C00F DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04C012 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04C015 AF          0271*      xor a                   ; clear carry
04C016 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C018 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04C01B AF          0274*      xor a                   ; clear carry
04C01C ED 5A       0275*      adc hl,de               ; hl = time remaining
04C01E             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C01E C9          0277*      ret
04C01F             0278*  
04C01F             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04C025             0280*  
04C025 00 00 00    0281*  timestamp_now: dl 0
04C028 00 00 00    0282*  timestamp_old: dl 0
04C02B 00 00 00    0283*  timestamp_chg: dl 0
04C02E             0284*  
04C02E             0285*  ; update the global timestamp from the system clock
04C02E             0286*  ; inputs: none
04C02E             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04C02E             0288*  ;          de = current time
04C02E             0289*  ;          ix = pointer to syvars table
04C02E             0290*  ; destroys: af,hl,de,ix
04C02E             0291*  timestamp_tick:
04C02E ED 5B 25 C0 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04C033 ED 53 28 C0 0293*      ld (timestamp_old),de   ; save previous time
       04          
04C038             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04C038 3E 08       0001*M 			LD	A, function
04C03A 5B CF       0002*M 			RST.LIL	08h
04C03C DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04C03F 22 25 C0 04 0296*      ld (timestamp_now),hl   ; save current time
04C043 AF          0297*      xor a                   ; clear carry
04C044 ED 52       0298*      sbc hl,de               ; hl = time elapsed
04C046 22 2B C0 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04C04A C9          0300*      ret
04C04B             0301*  
04C04B             0302*  ; set a countdown timer
04C04B             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C04B             0304*  ; requires: timestamp_tick to be called at least once before this function
04C04B             0305*  ; returns: hl = current time
04C04B             0306*  ; destroys: hl
04C04B             0307*  timestamp_tmr_set:
04C04B FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04C04E 2A 25 C0 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04C052 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04C055 C9          0311*      ret
04C056             0312*  
04C056             0313*  ; gets time remaining on a countdown timer following the global timestamp
04C056             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C056             0315*  ; requires: timestamp_tick to be called at least once before this function
04C056             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C056             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C056             0318*  ; destroys: af,hl,de
04C056             0319*  timestamp_tmr_get:
04C056 ED 5B 25 C0 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04C05B FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04C05E AF          0322*      xor a                   ; clear carry
04C05F ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C061 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04C064 AF          0325*      xor a                   ; clear carry
04C065 ED 5A       0326*      adc hl,de               ; hl = time remaining
04C067             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C067 C9          0328*      ret
04C068             0329*  
04C068             0330*  ; set a stopwatch
04C068             0331*  ; returns: hl = start time
04C068             0332*  ; destroys: hl,ix
04C068             0333*  stopwatch_set:
04C068             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04C068 3E 08       0001*M 			LD	A, function
04C06A 5B CF       0002*M 			RST.LIL	08h
04C06C DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04C06F 22 84 C0 04 0336*      ld (stopwatch_started),hl            ; set start time
04C073 C9          0337*      ret
04C074             0338*  
04C074             0339*  ; gets time elapsed on a stopwatch
04C074             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04C074             0341*  ; destroys: af,hl,de,ix
04C074             0342*  stopwatch_get:
04C074             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04C074 3E 08       0001*M 			LD	A, function
04C076 5B CF       0002*M 			RST.LIL	08h
04C078 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04C07B ED 5B 84 C0 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04C080 AF          0346*      xor a                   ; clear carry
04C081 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04C083 C9          0348*      ret
04C084             0349*  
04C084             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04C087             0351*  
04C087             0352*  ; ------------------
04C087             0353*  ; delay routine
04C087             0354*  ; Author: Richard Turrnidge
04C087             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04C087             0356*  ; routine waits a fixed time,then returns
04C087             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04C087             0358*  ; eg. ld A,00000100b
04C087             0359*  
04C087             0360*  multiPurposeDelay:
04C087 F5          0361*      push af
04C088 C5          0362*      push bc
04C089 DD E5       0363*      push ix
04C08B 47          0364*      ld b,a
04C08C 3E 08       0365*      ld a,$08
04C08E 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04C090             0367*  
04C090             0368*  waitLoop:
04C090             0369*  
04C090 DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04C093             0371*  
04C093             0372*                                  ;   we check if bit set is same as last time we checked.
04C093             0373*                                  ;   bit 0 - don't use
04C093             0374*                                  ;   bit 1 - changes 64 times per second
04C093             0375*                                  ;   bit 2 - changes 32 times per second
04C093             0376*                                  ;   bit 3 - changes 16 times per second
04C093             0377*  
04C093             0378*                                  ;   bit 4 - changes 8 times per second
04C093             0379*                                  ;   bit 5 - changes 4 times per second
04C093             0380*                                  ;   bit 6 - changes 2 times per second
04C093             0381*                                  ;   bit 7 - changes 1 times per second
04C093 A0          0382*      and b
04C094 4F          0383*      ld c,a
04C095 3A A6 C0 04 0384*      ld a,(oldTimeStamp)
04C099 B9          0385*      cp c                        ; is A same as last value?
04C09A 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04C09C 79          0387*      ld a,c
04C09D 32 A6 C0 04 0388*      ld (oldTimeStamp),a        ; set new value
04C0A1             0389*  
04C0A1 DD E1       0390*      pop ix
04C0A3 C1          0391*      pop bc
04C0A4 F1          0392*      pop af
04C0A5 C9          0393*      ret
04C0A6             0394*  
04C0A6 00          0395*  oldTimeStamp:   .db 00h
04C0A7             0031   
04C0A7             0032   
04C0A7             0033   start:
04C0A7 F5          0034       push af
04C0A8 C5          0035       push bc
04C0A9 D5          0036       push de
04C0AA DD E5       0037       push ix
04C0AC FD E5       0038       push iy
04C0AE             0039   
04C0AE CD 3E C1 04 0040   	call init ; Initialization code
04C0B2 CD 5B C2 04 0041       call main ; Call the main function
04C0B6             0042   
04C0B6             0043   exit:
04C0B6             0044   
04C0B6 FD E1       0045       pop iy
04C0B8 DD E1       0046       pop ix
04C0BA D1          0047       pop de
04C0BB C1          0048       pop bc
04C0BC F1          0049       pop af
04C0BD 21 00 00 00 0050       ld hl,0
04C0C1             0051   
04C0C1 C9          0052       ret
04C0C2             0053   
04C0C2 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04C0D9 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04C0E4 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04C0F2 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04C10F 00          0058   is_emulator: defb 0
04C110 52 75 6E 6E 0059   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04C127 52 75 6E 6E 0060   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
04C13E             0061   
04C13E             0062   init:
04C13E             0063   ; start generic stopwatch to time setup loop
04C13E             0064   ; so we can determine if we're running on emulator or hardware
04C13E CD 68 C0 04 0065   	call stopwatch_set
04C142             0066   
04C142             0067   ; initialize global timestamp
04C142 DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04C145 22 25 C0 04 0069       ld (timestamp_now),hl
04C149             0070   
04C149             0071   ; set the cursor off
04C149 CD BF AA 04 0072   	call cursor_off
04C14D             0073   
04C14D             0074   ; print loading ui message
04C14D 21 D9 C0 04 0075   	ld hl,loading_ui
04C151 CD 72 AE 04 0076   	call printString
04C155             0077   
04C155             0078   ; load fonts
04C155 CD 99 7E 04 0079   	call load_font_itc_honda
04C159 CD 7C 8F 04 0080   	call load_font_retro_computer
04C15D             0081   
04C15D             0082   ; load UI images
04C15D CD 05 98 04 0083   	call load_ui_images
04C161 CD D3 99 04 0084   	call load_ui_images_bj
04C165             0085   
04C165             0086   ; set up the display
04C165 3E 88       0087       ld a,8+128 ; 320x240x64 double-buffered
04C167 CD 00 A9 04 0088       call vdu_set_screen_mode
04C16B AF          0089       xor a
04C16C CD 2F AA 04 0090       call vdu_set_scaling
04C170             0091   
04C170             0092   ; set text background color
04C170 3E 84       0093   	ld a,4 + 128
04C172 CD 8C A8 04 0094   	call vdu_colour_text
04C176             0095   
04C176             0096   ; set gfx bg color
04C176 AF          0097   	xor a ; plotting mode 0
04C177 0E 04       0098   	ld c,4 ; dark blue
04C179 CD B4 A8 04 0099   	call vdu_gcol_bg
04C17D CD 87 A8 04 0100   	call vdu_clg
04C181             0101   
04C181             0102   ; set the cursor off again since we changed screen modes
04C181 CD BF AA 04 0103   	call cursor_off
04C185             0104   
04C185             0105   ; VDU 28, left, bottom, right, top: Set text viewport **
04C185             0106   ; MIND THE LITTLE-ENDIANESS
04C185             0107   ; inputs: c=left,b=bottom,e=right,d=top
04C185 0E 00       0108   	ld c,0 ; left
04C187 16 14       0109   	ld d,20 ; top
04C189 1E 27       0110   	ld e,39 ; right
04C18B 06 1D       0111   	ld b,29; bottom
04C18D CD 75 A9 04 0112   	call vdu_set_txt_viewport
04C191             0113   
04C191             0114   ; initialize image load routine
04C191 CD FE B6 04 0115   	call img_load_init
04C195             0116   
04C195             0117   ; load panels
04C195 01 13 01 00 0118   	ld bc,cube_num_panels
04C199 21 20 02 04 0119   	ld hl,cube_buffer_id_lut
04C19D 22 F8 B6 04 0120   	ld (cur_buffer_id_lut),hl
04C1A1 21 59 05 04 0121   	ld hl,cube_load_panels_table
04C1A5 22 FB B6 04 0122   	ld (cur_load_jump_table),hl
04C1A9 CD 33 B7 04 0123   	call img_load_main
04C1AD             0124   
04C1AD             0125   ; load sprites
04C1AD 01 5A 00 00 0126   	ld bc,sprite_num_panels
04C1B1 21 2C 4B 04 0127   	ld hl,sprite_buffer_id_lut
04C1B5 22 F8 B6 04 0128   	ld (cur_buffer_id_lut),hl
04C1B9 21 3A 4C 04 0129   	ld hl,sprite_load_panels_table
04C1BD 22 FB B6 04 0130   	ld (cur_load_jump_table),hl
04C1C1 CD 33 B7 04 0131   	call img_load_main
04C1C5             0132   
04C1C5             0133   ; load distance walls
04C1C5 01 09 00 00 0134   	ld bc,dws_num_panels
04C1C9 21 14 63 04 0135   	ld hl,dws_buffer_id_lut
04C1CD 22 F8 B6 04 0136   	ld (cur_buffer_id_lut),hl
04C1D1 21 2F 63 04 0137   	ld hl,dws_load_panels_table
04C1D5 22 FB B6 04 0138   	ld (cur_load_jump_table),hl
04C1D9 CD 33 B7 04 0139   	call img_load_main
04C1DD             0140   
04C1DD             0141   ; load sound effects
04C1DD 01 16 00 00 0142   	ld bc,SFX_num_buffers
04C1E1 21 8F B8 04 0143   	ld hl,SFX_buffer_id_lut
04C1E5 22 F8 B6 04 0144   	ld (cur_buffer_id_lut),hl
04C1E9 21 FD B8 04 0145   	ld hl,SFX_load_routines_table
04C1ED 22 FB B6 04 0146   	ld (cur_load_jump_table),hl
04C1F1 CD CD AD 04 0147   	call sfx_load_main
04C1F5             0148   
04C1F5             0149   ; self modify vdu_play_sfx to enable sound
04C1F5 AF          0150   	xor a
04C1F6 32 46 00 04 0151   	ld (vdu_play_sfx_disable),a
04C1FA             0152   
04C1FA             0153   ; use loading time to determine if we're running on emulator or hardware
04C1FA CD 74 C0 04 0154   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C1FE 11 40 1F 00 0155   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04C202 AF          0156   	xor a ; clear carry, default is running on hardware
04C203 32 0F C1 04 0157   	ld (is_emulator),a
04C207 ED 52       0158   	sbc hl,de
04C209 FA 1D C2 04 0159   	jp m,@on_emulator
04C20D CD AB A9 04 0160   	call vdu_home_cursor
04C211 21 27 C1 04 0161   	ld hl,on_hardware
04C215 CD 72 AE 04 0162   	call printString
04C219 C3 2F C2 04 0163   	jp @test_done
04C21D             0164   
04C21D             0165   @on_emulator:
04C21D             0166   ; print emulator message
04C21D 3E 01       0167   	ld a,1
04C21F 32 0F C1 04 0168   	ld (is_emulator),a
04C223 CD AB A9 04 0169   	call vdu_home_cursor
04C227 21 10 C1 04 0170   	ld hl,on_emulator
04C22B CD 72 AE 04 0171   	call printString
04C22F             0172   
04C22F             0173   @test_done:
04C22F             0174   ; print final loading time
04C22F 21 E4 C0 04 0175   	ld hl,loading_time
04C233 CD 72 AE 04 0176   	call printString
04C237 CD 74 C0 04 0177   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C23B CD C0 AE 04 0178   	call printDec
04C23F CD 87 AE 04 0179   	call printNewLine
04C243             0180   
04C243             0181   ; print loading complete message and wait for user keypress
04C243 21 F2 C0 04 0182   	ld hl,loading_complete
04C247 CD 72 AE 04 0183   	call printString
04C24B CD 42 AA 04 0184   	call vdu_flip
04C24F CD CD B1 04 0185   	call waitKeypress
04C253             0186   
04C253             0187   ; initialization done
04C253 C9          0188   	ret
04C254             0189   
04C254             0190   ; DEBUG: set up a simple countdown timer
04C254 01          0191   debug_timer: db 0x01
04C255             0192   
04C255             0193   main_loop_tmr: ds 6
04C25B             0194   framerate: equ 30
04C25B             0195   
04C25B             0196   main:
04C25B             0197   ; set map variables and load initial map file
04C25B CD 33 66 04 0198   	call map_init
04C25F             0199   ; initialize player position
04C25F CD 55 B2 04 0200   	call plyr_init
04C263             0201   
04C263             0202   main_loop:
04C263             0203   ; update global timestamp
04C263 CD 2E C0 04 0204       call timestamp_tick
04C267             0205   
04C267             0206   ; move enemies
04C267 CD 74 A7 04 0207   	call sprites_see_plyr ; 220-285  prt ticks
04C26B             0208   
04C26B             0209   ; get player input and update sprite position
04C26B             0210   	; 0-1 prt ticks
04C26B CD 52 B5 04 0211   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04C26F             0212   
04C26F             0213   ; render the updated scene
04C26F CD 36 68 04 0214   	call render_scene ; 6-12 prt ticks
04C273             0215   ; full loop 12-16 prt ticks
04C273             0216   
04C273             0217   ; flip the screen
04C273 CD 42 AA 04 0218   	call vdu_flip
04C277             0219   
04C277             0220   @wait:
04C277 FD 21 55 C2 0221   	ld iy,main_loop_tmr
       04          
04C27C CD 0B C0 04 0222   	call tmr_get
04C280 CA 8C C2 04 0223   	jp z,@continue
04C284 FA 8C C2 04 0224   	jp m,@continue
04C288 C3 77 C2 04 0225   	jp @wait
04C28C             0226   @continue:
04C28C             0227   
04C28C             0228   ; reset main loop timer
04C28C FD 21 55 C2 0229   	ld iy,main_loop_tmr
       04          
04C291 21 04 00 00 0230   	ld hl,120/framerate
04C295 CD FD BF 04 0231   	call tmr_set
04C299             0232   
04C299             0233   ; check for escape key and quit if pressed
04C299             0234   	MOSCALL mos_getkbmap
04C299 3E 1E       0001M  			LD	A, function
04C29B 5B CF       0002M  			RST.LIL	08h
04C29D             0235   ; 113 Escape
04C29D DD CB 0E 46 0236       bit 0,(ix+14)
04C2A1 20 02       0237   	jr nz,main_end
04C2A3             0238   @Escape:
04C2A3 18 BE       0239   	jr main_loop
04C2A5             0240   
04C2A5             0241   main_end:
04C2A5             0242   	; call do_outro
04C2A5             0243   ; restore screen to something normalish
04C2A5 AF          0244   	xor a
04C2A6 CD 00 A9 04 0245   	call vdu_set_screen_mode
04C2AA CD B1 AA 04 0246   	call cursor_on
04C2AE C9          0247   	ret
04C2AF             0248   
04C2AF             0249   ; files.asm must go here so that filedata doesn't stomp on program data
04C2AF             0250   	include "src/asm/files.asm"
04C2AF             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04C2AF             0002*  ; inputs: hl = bufferId, ix = file size
04C2AF             0003*  vdu_load_buffer_from_file:
04C2AF             0004*  	; load buffer ids
04C2AF 22 EC C2 04 0005*  		ld (@id0),hl
04C2B3 22 F2 C2 04 0006*  		ld (@id1),hl
04C2B7 22 F7 C2 04 0007*  		ld (@id2),hl
04C2BB             0008*  	; clean up bytes that got stomped on by the ID loads
04C2BB 3E 02       0009*  		ld a,2
04C2BD 32 EE C2 04 0010*  		ld (@id0+2),a
04C2C1 3E 17       0011*  		ld a,23
04C2C3 32 F4 C2 04 0012*  		ld (@id1+2),a
04C2C7 AF          0013*  		xor a
04C2C8 32 F9 C2 04 0014*  		ld (@id2+2),a
04C2CC             0015*  	; read size from ix
04C2CC DD 7D       0016*  		ld a,ixl
04C2CE 32 FA C2 04 0017*  		ld (@size),a
04C2D2 DD 7C       0018*  		ld a,ixh
04C2D4 32 FB C2 04 0019*  		ld (@size+1),a
04C2D8             0020*  	; get all the ducks in a row for the vdu call
04C2D8 01 13 00 00 0021*  		ld bc,filedata-@start
04C2DC DD 09       0022*  		add ix,bc
04C2DE DD 44       0023*  		ld b,ixh
04C2E0 DD 4D       0024*  		ld c,ixl
04C2E2 21 E9 C2 04 0025*  		ld hl,@start
04C2E6             0026*  	; push the button
04C2E6 5B DF       0027*  		rst.lil $18
04C2E8             0028*  	; back to caller
04C2E8 C9          0029*  		ret
04C2E9             0030*  ; vdp command string:
04C2E9 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04C2EC 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04C2EE 02          0033*  		db 2
04C2EF             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04C2EF 17 1B 20    0035*  		db 23,27,0x20
04C2F2 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04C2F4             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04C2F4 17 00 A0    0038*  		db 23,0,0xA0
04C2F7 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04C2F9 00          0040*  		db 0
04C2FA             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04C2FA 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04C2FC             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04C2FC             0044*  	; ds 65536 ; placeholder for file data	DEBUG
