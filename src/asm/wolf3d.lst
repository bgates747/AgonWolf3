PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 A2 C0 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  
040046             0003*  vdu_play_sfx:
040046 C9          0004*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7A 00 04 0005*      ld (@bufferId),hl
04004B ED 43 84 00 0006*      ld (@duration),bc
       04          
040050 3E 17       0007*      ld a,23
040052 32 7C 00 04 0008*      ld (@bufferId+2),a
040056 3A 45 00 04 0009*      ld a,(last_channel)
04005A 3C          0010*      inc a
04005B E6 1F       0011*      and 31 ; modulo 32
04005D 32 45 00 04 0012*      ld (last_channel),a
040061 32 77 00 04 0013*      ld (@channel0),a
040065 32 7F 00 04 0014*      ld (@channel1),a
040069 21 74 00 04 0015*      ld hl, @sample
04006D 01 12 00 00 0016*      ld bc, @sample_end - @sample
040071 5B DF       0017*      rst.lil $18
040073 C9          0018*      ret
040074             0019*  @sample:
040074             0020*  ; Command 4: Set waveform
040074             0021*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040074 17 00 85    0022*      .db 23,0,$85                        ; do sound
040077             0023*  @channel0:
040077 00 04 08    0024*      .db 0,4,8 ; channel, command, waveform
04007A             0025*  @bufferId:
04007A 00 00       0026*      .dw 0x0000
04007C             0027*  ; Command 0: Play note
04007C             0028*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04007C 17 00 85    0029*      .db 23,0,$85                        ; do sound
04007F             0030*  @channel1:
04007F 00 00 7F    0031*      .db 0,0,127                ; channel, volume
040082 00 00       0032*      .dw 0
040084             0033*  @duration:                              ; freq (tuneable samples only)
040084 00 00       0034*      .dw 0x0000                        ; duration
040086             0035*  @sample_end:
040086 00          0036*      .db 0x00 ; padding
040087             0037*  
040087             0038*  ; ############################################################
040087             0039*  ; VDU SOUND API
040087             0040*  ; ############################################################
040087             0041*  ; Command 0: Play note
040087             0042*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040087             0043*      MACRO PLAY_NOTE channel, volume, frequency, duration
040087             0044*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
040087             0045*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
040087             0046*      rst.lil $18
040087             0047*      jr @PLAY_NOTE_END
040087             0048*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
040087             0049*                   db channel                  ; Channel, 0 (commented out)
040087             0050*                   db 0                        ; Play note command
040087             0051*                   db volume                   ; Volume
040087             0052*                   dw frequency                ; Frequency
040087             0053*                   dw duration                 ; Duration
040087             0054*  @PLAY_NOTE_END:
040087             0055*      ENDMACRO
040087             0056*  
040087             0057*      MACRO MUTE_CHANNEL channel
040087             0058*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
040087             0059*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
040087             0060*      rst.lil $18
040087             0061*      jr @MUTE_CHANNEL_END
040087             0062*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
040087             0063*                     db channel                ; Channel, 0 (commented out)
040087             0064*                     db 2                      ; Set volume command
040087             0065*                     db 0                      ; Volume (mute)
040087             0066*  @MUTE_CHANNEL_END:
040087             0067*      ENDMACRO
040087             0068*  
040087             0069*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
040087             0070*  vdu_play_note:
040087 79          0071*      ld a,c
040088 32 A8 00 04 0072*      ld (@channel),a
04008C 78          0073*      ld a,b
04008D 32 AA 00 04 0074*      ld (@volume),a
040091 22 AB 00 04 0075*      ld (@frequency),hl
040095 ED 53 AD 00 0076*      ld (@duration),de
       04          
04009A 21 A5 00 04 0077*      ld hl,@cmd
04009E 01 0A 00 00 0078*      ld bc,@end-@cmd
0400A2 5B DF       0079*      rst.lil $18
0400A4 C9          0080*      ret
0400A5 17 00 85    0081*  @cmd:       db 23, 0, 0x85
0400A8 00          0082*  @channel:   db 0x00
0400A9 00          0083*              db 0x00 ; play note command
0400AA 00          0084*  @volume:    db 0x00
0400AB 00 00       0085*  @frequency: dw 0x0000
0400AD 00 00       0086*  @duration:  dw 0x0000
0400AF 00          0087*  @end:       db 0x00 ; padding
0400B0             0088*  
0400B0             0089*  ; Command 1: Status
0400B0             0090*  ; VDU 23, 0, &85, channel, 1
0400B0             0091*  ; inputs: a = channel
0400B0             0092*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400B0             0093*  ; Bit 	Name 	Meaning
0400B0             0094*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400B0             0095*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400B0             0096*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400B0             0097*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400B0             0098*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400B0             0099*  
0400B0             0100*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400B0             0101*  vdu_channel_status:
0400B0 32 C2 00 04 0102*      ld (@channel),a
0400B4 21 BF 00 04 0103*      ld hl,@cmd
0400B8 01 05 00 00 0104*      ld bc,@end-@cmd
0400BC 5B DF       0105*      rst.lil $18
0400BE C9          0106*      ret
0400BF 17 00 85    0107*  @cmd:       db 23, 0, 0x85
0400C2 00          0108*  @channel:   db 0x00
0400C3 01          0109*              db 0x01 ; get channel status command
0400C4             0110*  @end:
0400C4             0111*  
0400C4             0112*  ; VDU 23, 0, &85, channel, 2, volume
0400C4             0113*  ; inputs: c = channel, b = volume
0400C4             0114*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400C4             0115*  
0400C4             0116*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400C4             0117*  
0400C4             0118*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400C4             0119*  vdu_channel_volume:
0400C4 79          0120*      ld a,c
0400C5 32 DC 00 04 0121*      ld (@channel),a
0400C9 78          0122*      ld a,b
0400CA 32 DE 00 04 0123*      ld (@volume),a
0400CE 21 D9 00 04 0124*      ld hl,@cmd
0400D2 01 06 00 00 0125*      ld bc,@end-@cmd
0400D6 5B DF       0126*      rst.lil $18
0400D8 C9          0127*      ret
0400D9 17 00 85    0128*  @cmd:       db 23, 0, 0x85
0400DC 00          0129*  @channel:   db 0x00
0400DD 02          0130*              db 0x02 ; set volume command
0400DE 00          0131*  @volume:    db 0x00
0400DF             0132*  @end:
0400DF             0133*  
0400DF             0134*  ; VDU 23, 0, &85, channel, 3, frequency;
0400DF             0135*  
0400DF             0136*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0400DF             0137*  
0400DF             0138*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0400DF             0139*  
0400DF             0140*  ; Returns 1 on success, 0 for failure.
0400DF             0141*  vdu_channel_frequency:
0400DF 79          0142*      ld a,c
0400E0 32 F7 00 04 0143*      ld (@channel),a
0400E4 ED 53 F9 00 0144*      ld (@frequency),de
       04          
0400E9 21 F4 00 04 0145*      ld hl,@cmd
0400ED 01 07 00 00 0146*      ld bc,@end-@cmd
0400F1 5B DF       0147*      rst.lil $18
0400F3 C9          0148*      ret
0400F4 17 00 85    0149*  @cmd:       db 23, 0, 0x85
0400F7 00          0150*  @channel:   db 0x00
0400F8 03          0151*              db 0x03 ; set frequency command
0400F9 00 00       0152*  @frequency: dw 0x0000
0400FB 00          0153*  @end:       db 0x00 ; padding
0400FC             0154*  
0400FC             0155*  
0400FC             0156*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
0400FC             0157*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
0400FC             0158*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
0400FC             0159*  
0400FC             0160*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
0400FC             0161*  
0400FC             0162*  ; By default a channel is set to use waveform 0 (square wave).
0400FC             0163*  
0400FC             0164*  ; Valid waveform values are as follows:
0400FC             0165*  ; Value 	Waveform
0400FC             0166*  ; 0 	Square wave
0400FC             0167*  ; 1 	Triangle wave
0400FC             0168*  ; 2 	Sawtooth wave
0400FC             0169*  ; 3 	Sine wave
0400FC             0170*  ; 4 	Noise (simple white noise with no frequency support)
0400FC             0171*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
0400FC             0172*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
0400FC             0173*  
0400FC             0174*  vdu_channel_waveform:
0400FC 79          0175*      ld a,c
0400FD 32 22 01 04 0176*      ld (@channel),a
040101 78          0177*      ld a,b
040102 32 24 01 04 0178*      ld (@waveform),a
040106 FE 08       0179*      cp 8 ; check if the waveform is a sample
040108 28 06       0180*      jr z, @sample
04010A 01 06 00 00 0181*      ld bc,@bufferId-@cmd
04010E 18 08       0182*      jr @sendToVdu
040110             0183*  @sample:
040110 22 25 01 04 0184*      ld (@bufferId),hl
040114 01 08 00 00 0185*      ld bc,@end-@cmd
040118             0186*  @sendToVdu:
040118 21 1F 01 04 0187*      ld hl,@cmd
04011C 5B DF       0188*      rst.lil $18
04011E C9          0189*      ret
04011F 17 00 85    0190*  @cmd:       db 23, 0, 0x85
040122 00          0191*  @channel:   db 0x00
040123 04          0192*              db 0x04 ; set waveform command
040124 00          0193*  @waveform:  db 0x00
040125 00 00       0194*  @bufferId:  dw 0x0000
040127 00          0195*  @end:       db 0x00 ; padding
040128             0196*  
040128             0197*  
040128             0198*  
040128             0199*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
040128             0200*  ; inputs: hl = bufferId; a = format
040128             0201*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
040128             0202*  ; Value 	Description
040128             0203*  ; 0 	8-bit signed, 16KHz
040128             0204*  ; 1 	8-bit unsigned, 16KHz
040128             0205*  vdu_buffer_to_sound:
040128 22 41 01 04 0206*      ld (@bufferId),hl
04012C 32 43 01 04 0207*      ld (@format),a
040130 21 3B 01 04 0208*      ld hl,@cmd
040134 01 09 00 00 0209*      ld bc,@end-@cmd
040138 5B DF       0210*      rst.lil $18
04013A C9          0211*      ret
04013B 17 00 85    0212*  @cmd:       db 23, 0, 0x85
04013E 00          0213*              db 0x00 ; a magic number that is always 0
04013F 05          0214*              db 0x05 ; buffer to sound command
040140 02          0215*              db 0x02 ; a magic number that is always 2
040141 00 00       0216*  @bufferId:  dw 0x0000
040143 00          0217*  @format:    db 0x00
040144             0218*  @end:
040144             0219*  
040144             0220*  
040144             0221*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040144             0222*  vdu_play_sample:
040144             0223*      ; populate input parameters
040144 79          0224*      ld a,c
040145 32 6F 01 04 0225*      ld (@channel0),a
040149 32 77 01 04 0226*      ld (@channel1),a
04014D 78          0227*      ld a,b
04014E 32 79 01 04 0228*      ld (@volume),a
040152 ED 53 7A 01 0229*      ld (@frequency),de
       04          
040157 22 72 01 04 0230*      ld (@bufferId),hl
04015B             0231*      ; clean up byte that got stomped on by bufferId load from hl
04015B 3E 17       0232*      ld a,23
04015D 32 74 01 04 0233*      ld (@cmd1),a
040161             0234*      ; prep the vdu command string
040161 21 6C 01 04 0235*      ld hl, @cmd0
040165 01 12 00 00 0236*      ld bc, @end - @cmd0
040169 5B DF       0237*      rst.lil $18
04016B C9          0238*      ret
04016C 17 00 85    0239*  @cmd0:       db 23, 0, 0x85
04016F 00          0240*  @channel0:   db 0x00
040170 04          0241*               db 0x04 ; set waveform command
040171 08          0242*  @waveform:   db 0x08 ; sample
040172 00 00       0243*  @bufferId:   dw 0x0000
040174 17 00 85    0244*  @cmd1:       db 23, 0, 0x85
040177 00          0245*  @channel1:   db 0x00
040178 00          0246*               db 0x00 ; play note command
040179 00          0247*  @volume:     db 0x00
04017A 00 00       0248*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
04017C 00 00       0249*  @duration:   dw 0x0000 ; milliseconds
04017E 00          0250*  @end:        db 0x00 ; padding
04017F             0251*  
04017F             0252*  
04017F             0253*  vdu_enable_channels:
04017F             0254*  ; enable all the channels
04017F 21 8A 01 04 0255*      ld hl, enable_channels_cmd
040183 01 91 00 00 0256*      ld bc, enable_channels_end - enable_channels_cmd
040187 5B DF       0257*      rst.lil $18
040189 C9          0258*      ret
04018A             0259*  enable_channels_cmd:
04018A 17 00 85 03 0260*      db 23, 0, $85, 3, 8
       08          
04018F 17 00 85 04 0261*      db 23, 0, $85, 4, 8
       08          
040194 17 00 85 05 0262*      db 23, 0, $85, 5, 8
       08          
040199 17 00 85 06 0263*      db 23, 0, $85, 6, 8
       08          
04019E 17 00 85 07 0264*      db 23, 0, $85, 7, 8
       08          
0401A3 17 00 85 08 0265*      db 23, 0, $85, 8, 8
       08          
0401A8 17 00 85 09 0266*      db 23, 0, $85, 9, 8
       08          
0401AD 17 00 85 0A 0267*      db 23, 0, $85, 10, 8
       08          
0401B2 17 00 85 0B 0268*      db 23, 0, $85, 11, 8
       08          
0401B7 17 00 85 0C 0269*      db 23, 0, $85, 12, 8
       08          
0401BC 17 00 85 0D 0270*      db 23, 0, $85, 13, 8
       08          
0401C1 17 00 85 0E 0271*      db 23, 0, $85, 14, 8
       08          
0401C6 17 00 85 0F 0272*      db 23, 0, $85, 15, 8
       08          
0401CB 17 00 85 10 0273*      db 23, 0, $85, 16, 8
       08          
0401D0 17 00 85 11 0274*      db 23, 0, $85, 17, 8
       08          
0401D5 17 00 85 12 0275*      db 23, 0, $85, 18, 8
       08          
0401DA 17 00 85 13 0276*      db 23, 0, $85, 19, 8
       08          
0401DF 17 00 85 14 0277*      db 23, 0, $85, 20, 8
       08          
0401E4 17 00 85 15 0278*      db 23, 0, $85, 21, 8
       08          
0401E9 17 00 85 16 0279*      db 23, 0, $85, 22, 8
       08          
0401EE 17 00 85 17 0280*      db 23, 0, $85, 23, 8
       08          
0401F3 17 00 85 18 0281*      db 23, 0, $85, 24, 8
       08          
0401F8 17 00 85 19 0282*      db 23, 0, $85, 25, 8
       08          
0401FD 17 00 85 1A 0283*      db 23, 0, $85, 26, 8
       08          
040202 17 00 85 1B 0284*      db 23, 0, $85, 27, 8
       08          
040207 17 00 85 1C 0285*      db 23, 0, $85, 28, 8
       08          
04020C 17 00 85 1D 0286*      db 23, 0, $85, 29, 8
       08          
040211 17 00 85 1E 0287*      db 23, 0, $85, 30, 8
       08          
040216 17 00 85 1F 0288*      db 23, 0, $85, 31, 8
       08          
04021B             0289*  enable_channels_end:
04021B             0013   	include "src/asm/images.asm"
04021B             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
04021B             0002*  
04021B             0003*  ; cube buffer ids:
04021B             0004*  BUF_10_004: equ 0x0100
04021B             0005*  BUF_10_009: equ 0x0101
04021B             0006*  BUF_10_010: equ 0x0102
04021B             0007*  BUF_10_011: equ 0x0103
04021B             0008*  BUF_10_012: equ 0x0104
04021B             0009*  BUF_10_013: equ 0x0105
04021B             0010*  BUF_10_014: equ 0x0106
04021B             0011*  BUF_10_015: equ 0x0107
04021B             0012*  BUF_10_016: equ 0x0108
04021B             0013*  BUF_10_020: equ 0x0109
04021B             0014*  BUF_10_024: equ 0x010A
04021B             0015*  BUF_10_025: equ 0x010B
04021B             0016*  BUF_10_026: equ 0x010C
04021B             0017*  BUF_10_027: equ 0x010D
04021B             0018*  BUF_10_028: equ 0x010E
04021B             0019*  BUF_10_029: equ 0x010F
04021B             0020*  BUF_10_032: equ 0x0110
04021B             0021*  BUF_10_035: equ 0x0111
04021B             0022*  BUF_10_036: equ 0x0112
04021B             0023*  BUF_10_037: equ 0x0113
04021B             0024*  BUF_10_038: equ 0x0114
04021B             0025*  BUF_10_040: equ 0x0115
04021B             0026*  BUF_10_042: equ 0x0116
04021B             0027*  BUF_10_043: equ 0x0117
04021B             0028*  BUF_10_044: equ 0x0118
04021B             0029*  BUF_11_004: equ 0x0119
04021B             0030*  BUF_11_009: equ 0x011A
04021B             0031*  BUF_11_010: equ 0x011B
04021B             0032*  BUF_11_011: equ 0x011C
04021B             0033*  BUF_11_012: equ 0x011D
04021B             0034*  BUF_11_013: equ 0x011E
04021B             0035*  BUF_11_014: equ 0x011F
04021B             0036*  BUF_11_015: equ 0x0120
04021B             0037*  BUF_11_016: equ 0x0121
04021B             0038*  BUF_11_020: equ 0x0122
04021B             0039*  BUF_11_024: equ 0x0123
04021B             0040*  BUF_11_025: equ 0x0124
04021B             0041*  BUF_11_026: equ 0x0125
04021B             0042*  BUF_11_027: equ 0x0126
04021B             0043*  BUF_11_028: equ 0x0127
04021B             0044*  BUF_11_029: equ 0x0128
04021B             0045*  BUF_11_032: equ 0x0129
04021B             0046*  BUF_11_035: equ 0x012A
04021B             0047*  BUF_11_036: equ 0x012B
04021B             0048*  BUF_11_037: equ 0x012C
04021B             0049*  BUF_11_038: equ 0x012D
04021B             0050*  BUF_11_040: equ 0x012E
04021B             0051*  BUF_11_042: equ 0x012F
04021B             0052*  BUF_11_043: equ 0x0130
04021B             0053*  BUF_11_044: equ 0x0131
04021B             0054*  BUF_12_004: equ 0x0132
04021B             0055*  BUF_12_009: equ 0x0133
04021B             0056*  BUF_12_010: equ 0x0134
04021B             0057*  BUF_12_011: equ 0x0135
04021B             0058*  BUF_12_012: equ 0x0136
04021B             0059*  BUF_12_013: equ 0x0137
04021B             0060*  BUF_12_014: equ 0x0138
04021B             0061*  BUF_12_015: equ 0x0139
04021B             0062*  BUF_12_016: equ 0x013A
04021B             0063*  BUF_12_020: equ 0x013B
04021B             0064*  BUF_12_024: equ 0x013C
04021B             0065*  BUF_12_025: equ 0x013D
04021B             0066*  BUF_12_026: equ 0x013E
04021B             0067*  BUF_12_027: equ 0x013F
04021B             0068*  BUF_12_028: equ 0x0140
04021B             0069*  BUF_12_029: equ 0x0141
04021B             0070*  BUF_12_032: equ 0x0142
04021B             0071*  BUF_12_035: equ 0x0143
04021B             0072*  BUF_12_036: equ 0x0144
04021B             0073*  BUF_12_037: equ 0x0145
04021B             0074*  BUF_12_038: equ 0x0146
04021B             0075*  BUF_12_040: equ 0x0147
04021B             0076*  BUF_12_042: equ 0x0148
04021B             0077*  BUF_12_043: equ 0x0149
04021B             0078*  BUF_12_044: equ 0x014A
04021B             0079*  BUF_13_004: equ 0x014B
04021B             0080*  BUF_13_009: equ 0x014C
04021B             0081*  BUF_13_010: equ 0x014D
04021B             0082*  BUF_13_011: equ 0x014E
04021B             0083*  BUF_13_012: equ 0x014F
04021B             0084*  BUF_13_013: equ 0x0150
04021B             0085*  BUF_13_014: equ 0x0151
04021B             0086*  BUF_13_015: equ 0x0152
04021B             0087*  BUF_13_016: equ 0x0153
04021B             0088*  BUF_13_020: equ 0x0154
04021B             0089*  BUF_13_024: equ 0x0155
04021B             0090*  BUF_13_025: equ 0x0156
04021B             0091*  BUF_13_026: equ 0x0157
04021B             0092*  BUF_13_027: equ 0x0158
04021B             0093*  BUF_13_028: equ 0x0159
04021B             0094*  BUF_13_029: equ 0x015A
04021B             0095*  BUF_13_032: equ 0x015B
04021B             0096*  BUF_13_035: equ 0x015C
04021B             0097*  BUF_13_036: equ 0x015D
04021B             0098*  BUF_13_037: equ 0x015E
04021B             0099*  BUF_13_038: equ 0x015F
04021B             0100*  BUF_13_040: equ 0x0160
04021B             0101*  BUF_13_042: equ 0x0161
04021B             0102*  BUF_13_043: equ 0x0162
04021B             0103*  BUF_13_044: equ 0x0163
04021B             0104*  BUF_14_004: equ 0x0164
04021B             0105*  BUF_14_009: equ 0x0165
04021B             0106*  BUF_14_010: equ 0x0166
04021B             0107*  BUF_14_011: equ 0x0167
04021B             0108*  BUF_14_012: equ 0x0168
04021B             0109*  BUF_14_013: equ 0x0169
04021B             0110*  BUF_14_014: equ 0x016A
04021B             0111*  BUF_14_015: equ 0x016B
04021B             0112*  BUF_14_016: equ 0x016C
04021B             0113*  BUF_14_020: equ 0x016D
04021B             0114*  BUF_14_024: equ 0x016E
04021B             0115*  BUF_14_025: equ 0x016F
04021B             0116*  BUF_14_026: equ 0x0170
04021B             0117*  BUF_14_027: equ 0x0171
04021B             0118*  BUF_14_028: equ 0x0172
04021B             0119*  BUF_14_029: equ 0x0173
04021B             0120*  BUF_14_032: equ 0x0174
04021B             0121*  BUF_14_035: equ 0x0175
04021B             0122*  BUF_14_036: equ 0x0176
04021B             0123*  BUF_14_037: equ 0x0177
04021B             0124*  BUF_14_038: equ 0x0178
04021B             0125*  BUF_14_040: equ 0x0179
04021B             0126*  BUF_14_042: equ 0x017A
04021B             0127*  BUF_14_043: equ 0x017B
04021B             0128*  BUF_14_044: equ 0x017C
04021B             0129*  BUF_15_004: equ 0x017D
04021B             0130*  BUF_15_009: equ 0x017E
04021B             0131*  BUF_15_010: equ 0x017F
04021B             0132*  BUF_15_011: equ 0x0180
04021B             0133*  BUF_15_012: equ 0x0181
04021B             0134*  BUF_15_013: equ 0x0182
04021B             0135*  BUF_15_014: equ 0x0183
04021B             0136*  BUF_15_015: equ 0x0184
04021B             0137*  BUF_15_016: equ 0x0185
04021B             0138*  BUF_15_020: equ 0x0186
04021B             0139*  BUF_15_024: equ 0x0187
04021B             0140*  BUF_15_025: equ 0x0188
04021B             0141*  BUF_15_026: equ 0x0189
04021B             0142*  BUF_15_027: equ 0x018A
04021B             0143*  BUF_15_028: equ 0x018B
04021B             0144*  BUF_15_029: equ 0x018C
04021B             0145*  BUF_15_032: equ 0x018D
04021B             0146*  BUF_15_035: equ 0x018E
04021B             0147*  BUF_15_036: equ 0x018F
04021B             0148*  BUF_15_037: equ 0x0190
04021B             0149*  BUF_15_038: equ 0x0191
04021B             0150*  BUF_15_040: equ 0x0192
04021B             0151*  BUF_15_042: equ 0x0193
04021B             0152*  BUF_15_043: equ 0x0194
04021B             0153*  BUF_15_044: equ 0x0195
04021B             0154*  BUF_16_004: equ 0x0196
04021B             0155*  BUF_16_009: equ 0x0197
04021B             0156*  BUF_16_010: equ 0x0198
04021B             0157*  BUF_16_011: equ 0x0199
04021B             0158*  BUF_16_012: equ 0x019A
04021B             0159*  BUF_16_013: equ 0x019B
04021B             0160*  BUF_16_014: equ 0x019C
04021B             0161*  BUF_16_015: equ 0x019D
04021B             0162*  BUF_16_016: equ 0x019E
04021B             0163*  BUF_16_020: equ 0x019F
04021B             0164*  BUF_16_024: equ 0x01A0
04021B             0165*  BUF_16_025: equ 0x01A1
04021B             0166*  BUF_16_026: equ 0x01A2
04021B             0167*  BUF_16_027: equ 0x01A3
04021B             0168*  BUF_16_028: equ 0x01A4
04021B             0169*  BUF_16_029: equ 0x01A5
04021B             0170*  BUF_16_032: equ 0x01A6
04021B             0171*  BUF_16_035: equ 0x01A7
04021B             0172*  BUF_16_036: equ 0x01A8
04021B             0173*  BUF_16_037: equ 0x01A9
04021B             0174*  BUF_16_038: equ 0x01AA
04021B             0175*  BUF_16_040: equ 0x01AB
04021B             0176*  BUF_16_042: equ 0x01AC
04021B             0177*  BUF_16_043: equ 0x01AD
04021B             0178*  BUF_16_044: equ 0x01AE
04021B             0179*  BUF_17_004: equ 0x01AF
04021B             0180*  BUF_17_009: equ 0x01B0
04021B             0181*  BUF_17_010: equ 0x01B1
04021B             0182*  BUF_17_011: equ 0x01B2
04021B             0183*  BUF_17_012: equ 0x01B3
04021B             0184*  BUF_17_013: equ 0x01B4
04021B             0185*  BUF_17_014: equ 0x01B5
04021B             0186*  BUF_17_015: equ 0x01B6
04021B             0187*  BUF_17_016: equ 0x01B7
04021B             0188*  BUF_17_020: equ 0x01B8
04021B             0189*  BUF_17_024: equ 0x01B9
04021B             0190*  BUF_17_025: equ 0x01BA
04021B             0191*  BUF_17_026: equ 0x01BB
04021B             0192*  BUF_17_027: equ 0x01BC
04021B             0193*  BUF_17_028: equ 0x01BD
04021B             0194*  BUF_17_029: equ 0x01BE
04021B             0195*  BUF_17_032: equ 0x01BF
04021B             0196*  BUF_17_035: equ 0x01C0
04021B             0197*  BUF_17_036: equ 0x01C1
04021B             0198*  BUF_17_037: equ 0x01C2
04021B             0199*  BUF_17_038: equ 0x01C3
04021B             0200*  BUF_17_040: equ 0x01C4
04021B             0201*  BUF_17_042: equ 0x01C5
04021B             0202*  BUF_17_043: equ 0x01C6
04021B             0203*  BUF_17_044: equ 0x01C7
04021B             0204*  BUF_57_004: equ 0x01C8
04021B             0205*  BUF_57_009: equ 0x01C9
04021B             0206*  BUF_57_010: equ 0x01CA
04021B             0207*  BUF_57_011: equ 0x01CB
04021B             0208*  BUF_57_012: equ 0x01CC
04021B             0209*  BUF_57_013: equ 0x01CD
04021B             0210*  BUF_57_014: equ 0x01CE
04021B             0211*  BUF_57_015: equ 0x01CF
04021B             0212*  BUF_57_016: equ 0x01D0
04021B             0213*  BUF_57_020: equ 0x01D1
04021B             0214*  BUF_57_024: equ 0x01D2
04021B             0215*  BUF_57_025: equ 0x01D3
04021B             0216*  BUF_57_026: equ 0x01D4
04021B             0217*  BUF_57_027: equ 0x01D5
04021B             0218*  BUF_57_028: equ 0x01D6
04021B             0219*  BUF_57_029: equ 0x01D7
04021B             0220*  BUF_57_032: equ 0x01D8
04021B             0221*  BUF_57_035: equ 0x01D9
04021B             0222*  BUF_57_036: equ 0x01DA
04021B             0223*  BUF_57_037: equ 0x01DB
04021B             0224*  BUF_57_038: equ 0x01DC
04021B             0225*  BUF_57_040: equ 0x01DD
04021B             0226*  BUF_57_042: equ 0x01DE
04021B             0227*  BUF_57_043: equ 0x01DF
04021B             0228*  BUF_57_044: equ 0x01E0
04021B             0229*  BUF_58_004: equ 0x01E1
04021B             0230*  BUF_58_009: equ 0x01E2
04021B             0231*  BUF_58_010: equ 0x01E3
04021B             0232*  BUF_58_011: equ 0x01E4
04021B             0233*  BUF_58_012: equ 0x01E5
04021B             0234*  BUF_58_013: equ 0x01E6
04021B             0235*  BUF_58_014: equ 0x01E7
04021B             0236*  BUF_58_015: equ 0x01E8
04021B             0237*  BUF_58_016: equ 0x01E9
04021B             0238*  BUF_58_020: equ 0x01EA
04021B             0239*  BUF_58_024: equ 0x01EB
04021B             0240*  BUF_58_025: equ 0x01EC
04021B             0241*  BUF_58_026: equ 0x01ED
04021B             0242*  BUF_58_027: equ 0x01EE
04021B             0243*  BUF_58_028: equ 0x01EF
04021B             0244*  BUF_58_029: equ 0x01F0
04021B             0245*  BUF_58_032: equ 0x01F1
04021B             0246*  BUF_58_035: equ 0x01F2
04021B             0247*  BUF_58_036: equ 0x01F3
04021B             0248*  BUF_58_037: equ 0x01F4
04021B             0249*  BUF_58_038: equ 0x01F5
04021B             0250*  BUF_58_040: equ 0x01F6
04021B             0251*  BUF_58_042: equ 0x01F7
04021B             0252*  BUF_58_043: equ 0x01F8
04021B             0253*  BUF_58_044: equ 0x01F9
04021B             0254*  BUF_59_004: equ 0x01FA
04021B             0255*  BUF_59_009: equ 0x01FB
04021B             0256*  BUF_59_010: equ 0x01FC
04021B             0257*  BUF_59_011: equ 0x01FD
04021B             0258*  BUF_59_012: equ 0x01FE
04021B             0259*  BUF_59_013: equ 0x01FF
04021B             0260*  BUF_59_014: equ 0x0200
04021B             0261*  BUF_59_015: equ 0x0201
04021B             0262*  BUF_59_016: equ 0x0202
04021B             0263*  BUF_59_020: equ 0x0203
04021B             0264*  BUF_59_024: equ 0x0204
04021B             0265*  BUF_59_025: equ 0x0205
04021B             0266*  BUF_59_026: equ 0x0206
04021B             0267*  BUF_59_027: equ 0x0207
04021B             0268*  BUF_59_028: equ 0x0208
04021B             0269*  BUF_59_029: equ 0x0209
04021B             0270*  BUF_59_032: equ 0x020A
04021B             0271*  BUF_59_035: equ 0x020B
04021B             0272*  BUF_59_036: equ 0x020C
04021B             0273*  BUF_59_037: equ 0x020D
04021B             0274*  BUF_59_038: equ 0x020E
04021B             0275*  BUF_59_040: equ 0x020F
04021B             0276*  BUF_59_042: equ 0x0210
04021B             0277*  BUF_59_043: equ 0x0211
04021B             0278*  BUF_59_044: equ 0x0212
04021B             0279*  
04021B             0280*  cube_num_panels: equ 275
04021B             0281*  
04021B             0282*  ; cube buffer id reverse lookup:
04021B             0283*  cube_buffer_id_lut:
04021B 00 01 00    0284*  	dl BUF_10_004
04021E 01 01 00    0285*  	dl BUF_10_009
040221 02 01 00    0286*  	dl BUF_10_010
040224 03 01 00    0287*  	dl BUF_10_011
040227 04 01 00    0288*  	dl BUF_10_012
04022A 05 01 00    0289*  	dl BUF_10_013
04022D 06 01 00    0290*  	dl BUF_10_014
040230 07 01 00    0291*  	dl BUF_10_015
040233 08 01 00    0292*  	dl BUF_10_016
040236 09 01 00    0293*  	dl BUF_10_020
040239 0A 01 00    0294*  	dl BUF_10_024
04023C 0B 01 00    0295*  	dl BUF_10_025
04023F 0C 01 00    0296*  	dl BUF_10_026
040242 0D 01 00    0297*  	dl BUF_10_027
040245 0E 01 00    0298*  	dl BUF_10_028
040248 0F 01 00    0299*  	dl BUF_10_029
04024B 10 01 00    0300*  	dl BUF_10_032
04024E 11 01 00    0301*  	dl BUF_10_035
040251 12 01 00    0302*  	dl BUF_10_036
040254 13 01 00    0303*  	dl BUF_10_037
040257 14 01 00    0304*  	dl BUF_10_038
04025A 15 01 00    0305*  	dl BUF_10_040
04025D 16 01 00    0306*  	dl BUF_10_042
040260 17 01 00    0307*  	dl BUF_10_043
040263 18 01 00    0308*  	dl BUF_10_044
040266 19 01 00    0309*  	dl BUF_11_004
040269 1A 01 00    0310*  	dl BUF_11_009
04026C 1B 01 00    0311*  	dl BUF_11_010
04026F 1C 01 00    0312*  	dl BUF_11_011
040272 1D 01 00    0313*  	dl BUF_11_012
040275 1E 01 00    0314*  	dl BUF_11_013
040278 1F 01 00    0315*  	dl BUF_11_014
04027B 20 01 00    0316*  	dl BUF_11_015
04027E 21 01 00    0317*  	dl BUF_11_016
040281 22 01 00    0318*  	dl BUF_11_020
040284 23 01 00    0319*  	dl BUF_11_024
040287 24 01 00    0320*  	dl BUF_11_025
04028A 25 01 00    0321*  	dl BUF_11_026
04028D 26 01 00    0322*  	dl BUF_11_027
040290 27 01 00    0323*  	dl BUF_11_028
040293 28 01 00    0324*  	dl BUF_11_029
040296 29 01 00    0325*  	dl BUF_11_032
040299 2A 01 00    0326*  	dl BUF_11_035
04029C 2B 01 00    0327*  	dl BUF_11_036
04029F 2C 01 00    0328*  	dl BUF_11_037
0402A2 2D 01 00    0329*  	dl BUF_11_038
0402A5 2E 01 00    0330*  	dl BUF_11_040
0402A8 2F 01 00    0331*  	dl BUF_11_042
0402AB 30 01 00    0332*  	dl BUF_11_043
0402AE 31 01 00    0333*  	dl BUF_11_044
0402B1 32 01 00    0334*  	dl BUF_12_004
0402B4 33 01 00    0335*  	dl BUF_12_009
0402B7 34 01 00    0336*  	dl BUF_12_010
0402BA 35 01 00    0337*  	dl BUF_12_011
0402BD 36 01 00    0338*  	dl BUF_12_012
0402C0 37 01 00    0339*  	dl BUF_12_013
0402C3 38 01 00    0340*  	dl BUF_12_014
0402C6 39 01 00    0341*  	dl BUF_12_015
0402C9 3A 01 00    0342*  	dl BUF_12_016
0402CC 3B 01 00    0343*  	dl BUF_12_020
0402CF 3C 01 00    0344*  	dl BUF_12_024
0402D2 3D 01 00    0345*  	dl BUF_12_025
0402D5 3E 01 00    0346*  	dl BUF_12_026
0402D8 3F 01 00    0347*  	dl BUF_12_027
0402DB 40 01 00    0348*  	dl BUF_12_028
0402DE 41 01 00    0349*  	dl BUF_12_029
0402E1 42 01 00    0350*  	dl BUF_12_032
0402E4 43 01 00    0351*  	dl BUF_12_035
0402E7 44 01 00    0352*  	dl BUF_12_036
0402EA 45 01 00    0353*  	dl BUF_12_037
0402ED 46 01 00    0354*  	dl BUF_12_038
0402F0 47 01 00    0355*  	dl BUF_12_040
0402F3 48 01 00    0356*  	dl BUF_12_042
0402F6 49 01 00    0357*  	dl BUF_12_043
0402F9 4A 01 00    0358*  	dl BUF_12_044
0402FC 4B 01 00    0359*  	dl BUF_13_004
0402FF 4C 01 00    0360*  	dl BUF_13_009
040302 4D 01 00    0361*  	dl BUF_13_010
040305 4E 01 00    0362*  	dl BUF_13_011
040308 4F 01 00    0363*  	dl BUF_13_012
04030B 50 01 00    0364*  	dl BUF_13_013
04030E 51 01 00    0365*  	dl BUF_13_014
040311 52 01 00    0366*  	dl BUF_13_015
040314 53 01 00    0367*  	dl BUF_13_016
040317 54 01 00    0368*  	dl BUF_13_020
04031A 55 01 00    0369*  	dl BUF_13_024
04031D 56 01 00    0370*  	dl BUF_13_025
040320 57 01 00    0371*  	dl BUF_13_026
040323 58 01 00    0372*  	dl BUF_13_027
040326 59 01 00    0373*  	dl BUF_13_028
040329 5A 01 00    0374*  	dl BUF_13_029
04032C 5B 01 00    0375*  	dl BUF_13_032
04032F 5C 01 00    0376*  	dl BUF_13_035
040332 5D 01 00    0377*  	dl BUF_13_036
040335 5E 01 00    0378*  	dl BUF_13_037
040338 5F 01 00    0379*  	dl BUF_13_038
04033B 60 01 00    0380*  	dl BUF_13_040
04033E 61 01 00    0381*  	dl BUF_13_042
040341 62 01 00    0382*  	dl BUF_13_043
040344 63 01 00    0383*  	dl BUF_13_044
040347 64 01 00    0384*  	dl BUF_14_004
04034A 65 01 00    0385*  	dl BUF_14_009
04034D 66 01 00    0386*  	dl BUF_14_010
040350 67 01 00    0387*  	dl BUF_14_011
040353 68 01 00    0388*  	dl BUF_14_012
040356 69 01 00    0389*  	dl BUF_14_013
040359 6A 01 00    0390*  	dl BUF_14_014
04035C 6B 01 00    0391*  	dl BUF_14_015
04035F 6C 01 00    0392*  	dl BUF_14_016
040362 6D 01 00    0393*  	dl BUF_14_020
040365 6E 01 00    0394*  	dl BUF_14_024
040368 6F 01 00    0395*  	dl BUF_14_025
04036B 70 01 00    0396*  	dl BUF_14_026
04036E 71 01 00    0397*  	dl BUF_14_027
040371 72 01 00    0398*  	dl BUF_14_028
040374 73 01 00    0399*  	dl BUF_14_029
040377 74 01 00    0400*  	dl BUF_14_032
04037A 75 01 00    0401*  	dl BUF_14_035
04037D 76 01 00    0402*  	dl BUF_14_036
040380 77 01 00    0403*  	dl BUF_14_037
040383 78 01 00    0404*  	dl BUF_14_038
040386 79 01 00    0405*  	dl BUF_14_040
040389 7A 01 00    0406*  	dl BUF_14_042
04038C 7B 01 00    0407*  	dl BUF_14_043
04038F 7C 01 00    0408*  	dl BUF_14_044
040392 7D 01 00    0409*  	dl BUF_15_004
040395 7E 01 00    0410*  	dl BUF_15_009
040398 7F 01 00    0411*  	dl BUF_15_010
04039B 80 01 00    0412*  	dl BUF_15_011
04039E 81 01 00    0413*  	dl BUF_15_012
0403A1 82 01 00    0414*  	dl BUF_15_013
0403A4 83 01 00    0415*  	dl BUF_15_014
0403A7 84 01 00    0416*  	dl BUF_15_015
0403AA 85 01 00    0417*  	dl BUF_15_016
0403AD 86 01 00    0418*  	dl BUF_15_020
0403B0 87 01 00    0419*  	dl BUF_15_024
0403B3 88 01 00    0420*  	dl BUF_15_025
0403B6 89 01 00    0421*  	dl BUF_15_026
0403B9 8A 01 00    0422*  	dl BUF_15_027
0403BC 8B 01 00    0423*  	dl BUF_15_028
0403BF 8C 01 00    0424*  	dl BUF_15_029
0403C2 8D 01 00    0425*  	dl BUF_15_032
0403C5 8E 01 00    0426*  	dl BUF_15_035
0403C8 8F 01 00    0427*  	dl BUF_15_036
0403CB 90 01 00    0428*  	dl BUF_15_037
0403CE 91 01 00    0429*  	dl BUF_15_038
0403D1 92 01 00    0430*  	dl BUF_15_040
0403D4 93 01 00    0431*  	dl BUF_15_042
0403D7 94 01 00    0432*  	dl BUF_15_043
0403DA 95 01 00    0433*  	dl BUF_15_044
0403DD 96 01 00    0434*  	dl BUF_16_004
0403E0 97 01 00    0435*  	dl BUF_16_009
0403E3 98 01 00    0436*  	dl BUF_16_010
0403E6 99 01 00    0437*  	dl BUF_16_011
0403E9 9A 01 00    0438*  	dl BUF_16_012
0403EC 9B 01 00    0439*  	dl BUF_16_013
0403EF 9C 01 00    0440*  	dl BUF_16_014
0403F2 9D 01 00    0441*  	dl BUF_16_015
0403F5 9E 01 00    0442*  	dl BUF_16_016
0403F8 9F 01 00    0443*  	dl BUF_16_020
0403FB A0 01 00    0444*  	dl BUF_16_024
0403FE A1 01 00    0445*  	dl BUF_16_025
040401 A2 01 00    0446*  	dl BUF_16_026
040404 A3 01 00    0447*  	dl BUF_16_027
040407 A4 01 00    0448*  	dl BUF_16_028
04040A A5 01 00    0449*  	dl BUF_16_029
04040D A6 01 00    0450*  	dl BUF_16_032
040410 A7 01 00    0451*  	dl BUF_16_035
040413 A8 01 00    0452*  	dl BUF_16_036
040416 A9 01 00    0453*  	dl BUF_16_037
040419 AA 01 00    0454*  	dl BUF_16_038
04041C AB 01 00    0455*  	dl BUF_16_040
04041F AC 01 00    0456*  	dl BUF_16_042
040422 AD 01 00    0457*  	dl BUF_16_043
040425 AE 01 00    0458*  	dl BUF_16_044
040428 AF 01 00    0459*  	dl BUF_17_004
04042B B0 01 00    0460*  	dl BUF_17_009
04042E B1 01 00    0461*  	dl BUF_17_010
040431 B2 01 00    0462*  	dl BUF_17_011
040434 B3 01 00    0463*  	dl BUF_17_012
040437 B4 01 00    0464*  	dl BUF_17_013
04043A B5 01 00    0465*  	dl BUF_17_014
04043D B6 01 00    0466*  	dl BUF_17_015
040440 B7 01 00    0467*  	dl BUF_17_016
040443 B8 01 00    0468*  	dl BUF_17_020
040446 B9 01 00    0469*  	dl BUF_17_024
040449 BA 01 00    0470*  	dl BUF_17_025
04044C BB 01 00    0471*  	dl BUF_17_026
04044F BC 01 00    0472*  	dl BUF_17_027
040452 BD 01 00    0473*  	dl BUF_17_028
040455 BE 01 00    0474*  	dl BUF_17_029
040458 BF 01 00    0475*  	dl BUF_17_032
04045B C0 01 00    0476*  	dl BUF_17_035
04045E C1 01 00    0477*  	dl BUF_17_036
040461 C2 01 00    0478*  	dl BUF_17_037
040464 C3 01 00    0479*  	dl BUF_17_038
040467 C4 01 00    0480*  	dl BUF_17_040
04046A C5 01 00    0481*  	dl BUF_17_042
04046D C6 01 00    0482*  	dl BUF_17_043
040470 C7 01 00    0483*  	dl BUF_17_044
040473 C8 01 00    0484*  	dl BUF_57_004
040476 C9 01 00    0485*  	dl BUF_57_009
040479 CA 01 00    0486*  	dl BUF_57_010
04047C CB 01 00    0487*  	dl BUF_57_011
04047F CC 01 00    0488*  	dl BUF_57_012
040482 CD 01 00    0489*  	dl BUF_57_013
040485 CE 01 00    0490*  	dl BUF_57_014
040488 CF 01 00    0491*  	dl BUF_57_015
04048B D0 01 00    0492*  	dl BUF_57_016
04048E D1 01 00    0493*  	dl BUF_57_020
040491 D2 01 00    0494*  	dl BUF_57_024
040494 D3 01 00    0495*  	dl BUF_57_025
040497 D4 01 00    0496*  	dl BUF_57_026
04049A D5 01 00    0497*  	dl BUF_57_027
04049D D6 01 00    0498*  	dl BUF_57_028
0404A0 D7 01 00    0499*  	dl BUF_57_029
0404A3 D8 01 00    0500*  	dl BUF_57_032
0404A6 D9 01 00    0501*  	dl BUF_57_035
0404A9 DA 01 00    0502*  	dl BUF_57_036
0404AC DB 01 00    0503*  	dl BUF_57_037
0404AF DC 01 00    0504*  	dl BUF_57_038
0404B2 DD 01 00    0505*  	dl BUF_57_040
0404B5 DE 01 00    0506*  	dl BUF_57_042
0404B8 DF 01 00    0507*  	dl BUF_57_043
0404BB E0 01 00    0508*  	dl BUF_57_044
0404BE E1 01 00    0509*  	dl BUF_58_004
0404C1 E2 01 00    0510*  	dl BUF_58_009
0404C4 E3 01 00    0511*  	dl BUF_58_010
0404C7 E4 01 00    0512*  	dl BUF_58_011
0404CA E5 01 00    0513*  	dl BUF_58_012
0404CD E6 01 00    0514*  	dl BUF_58_013
0404D0 E7 01 00    0515*  	dl BUF_58_014
0404D3 E8 01 00    0516*  	dl BUF_58_015
0404D6 E9 01 00    0517*  	dl BUF_58_016
0404D9 EA 01 00    0518*  	dl BUF_58_020
0404DC EB 01 00    0519*  	dl BUF_58_024
0404DF EC 01 00    0520*  	dl BUF_58_025
0404E2 ED 01 00    0521*  	dl BUF_58_026
0404E5 EE 01 00    0522*  	dl BUF_58_027
0404E8 EF 01 00    0523*  	dl BUF_58_028
0404EB F0 01 00    0524*  	dl BUF_58_029
0404EE F1 01 00    0525*  	dl BUF_58_032
0404F1 F2 01 00    0526*  	dl BUF_58_035
0404F4 F3 01 00    0527*  	dl BUF_58_036
0404F7 F4 01 00    0528*  	dl BUF_58_037
0404FA F5 01 00    0529*  	dl BUF_58_038
0404FD F6 01 00    0530*  	dl BUF_58_040
040500 F7 01 00    0531*  	dl BUF_58_042
040503 F8 01 00    0532*  	dl BUF_58_043
040506 F9 01 00    0533*  	dl BUF_58_044
040509 FA 01 00    0534*  	dl BUF_59_004
04050C FB 01 00    0535*  	dl BUF_59_009
04050F FC 01 00    0536*  	dl BUF_59_010
040512 FD 01 00    0537*  	dl BUF_59_011
040515 FE 01 00    0538*  	dl BUF_59_012
040518 FF 01 00    0539*  	dl BUF_59_013
04051B 00 02 00    0540*  	dl BUF_59_014
04051E 01 02 00    0541*  	dl BUF_59_015
040521 02 02 00    0542*  	dl BUF_59_016
040524 03 02 00    0543*  	dl BUF_59_020
040527 04 02 00    0544*  	dl BUF_59_024
04052A 05 02 00    0545*  	dl BUF_59_025
04052D 06 02 00    0546*  	dl BUF_59_026
040530 07 02 00    0547*  	dl BUF_59_027
040533 08 02 00    0548*  	dl BUF_59_028
040536 09 02 00    0549*  	dl BUF_59_029
040539 0A 02 00    0550*  	dl BUF_59_032
04053C 0B 02 00    0551*  	dl BUF_59_035
04053F 0C 02 00    0552*  	dl BUF_59_036
040542 0D 02 00    0553*  	dl BUF_59_037
040545 0E 02 00    0554*  	dl BUF_59_038
040548 0F 02 00    0555*  	dl BUF_59_040
04054B 10 02 00    0556*  	dl BUF_59_042
04054E 11 02 00    0557*  	dl BUF_59_043
040551 12 02 00    0558*  	dl BUF_59_044
040554             0559*  
040554             0560*  ; cube load routines jump table:
040554             0561*  cube_load_panels_table:
040554 8D 08 04    0562*  	dl ld_10_004
040557 B7 08 04    0563*  	dl ld_10_009
04055A E1 08 04    0564*  	dl ld_10_010
04055D 0B 09 04    0565*  	dl ld_10_011
040560 35 09 04    0566*  	dl ld_10_012
040563 5F 09 04    0567*  	dl ld_10_013
040566 89 09 04    0568*  	dl ld_10_014
040569 B3 09 04    0569*  	dl ld_10_015
04056C DD 09 04    0570*  	dl ld_10_016
04056F 07 0A 04    0571*  	dl ld_10_020
040572 31 0A 04    0572*  	dl ld_10_024
040575 5B 0A 04    0573*  	dl ld_10_025
040578 85 0A 04    0574*  	dl ld_10_026
04057B AF 0A 04    0575*  	dl ld_10_027
04057E D9 0A 04    0576*  	dl ld_10_028
040581 03 0B 04    0577*  	dl ld_10_029
040584 2D 0B 04    0578*  	dl ld_10_032
040587 57 0B 04    0579*  	dl ld_10_035
04058A 81 0B 04    0580*  	dl ld_10_036
04058D AB 0B 04    0581*  	dl ld_10_037
040590 D5 0B 04    0582*  	dl ld_10_038
040593 FF 0B 04    0583*  	dl ld_10_040
040596 29 0C 04    0584*  	dl ld_10_042
040599 53 0C 04    0585*  	dl ld_10_043
04059C 7D 0C 04    0586*  	dl ld_10_044
04059F A7 0C 04    0587*  	dl ld_11_004
0405A2 D1 0C 04    0588*  	dl ld_11_009
0405A5 FB 0C 04    0589*  	dl ld_11_010
0405A8 25 0D 04    0590*  	dl ld_11_011
0405AB 4F 0D 04    0591*  	dl ld_11_012
0405AE 79 0D 04    0592*  	dl ld_11_013
0405B1 A3 0D 04    0593*  	dl ld_11_014
0405B4 CD 0D 04    0594*  	dl ld_11_015
0405B7 F7 0D 04    0595*  	dl ld_11_016
0405BA 21 0E 04    0596*  	dl ld_11_020
0405BD 4B 0E 04    0597*  	dl ld_11_024
0405C0 75 0E 04    0598*  	dl ld_11_025
0405C3 9F 0E 04    0599*  	dl ld_11_026
0405C6 C9 0E 04    0600*  	dl ld_11_027
0405C9 F3 0E 04    0601*  	dl ld_11_028
0405CC 1D 0F 04    0602*  	dl ld_11_029
0405CF 47 0F 04    0603*  	dl ld_11_032
0405D2 71 0F 04    0604*  	dl ld_11_035
0405D5 9B 0F 04    0605*  	dl ld_11_036
0405D8 C5 0F 04    0606*  	dl ld_11_037
0405DB EF 0F 04    0607*  	dl ld_11_038
0405DE 19 10 04    0608*  	dl ld_11_040
0405E1 43 10 04    0609*  	dl ld_11_042
0405E4 6D 10 04    0610*  	dl ld_11_043
0405E7 97 10 04    0611*  	dl ld_11_044
0405EA C1 10 04    0612*  	dl ld_12_004
0405ED EB 10 04    0613*  	dl ld_12_009
0405F0 15 11 04    0614*  	dl ld_12_010
0405F3 3F 11 04    0615*  	dl ld_12_011
0405F6 69 11 04    0616*  	dl ld_12_012
0405F9 93 11 04    0617*  	dl ld_12_013
0405FC BD 11 04    0618*  	dl ld_12_014
0405FF E7 11 04    0619*  	dl ld_12_015
040602 11 12 04    0620*  	dl ld_12_016
040605 3B 12 04    0621*  	dl ld_12_020
040608 65 12 04    0622*  	dl ld_12_024
04060B 8F 12 04    0623*  	dl ld_12_025
04060E B9 12 04    0624*  	dl ld_12_026
040611 E3 12 04    0625*  	dl ld_12_027
040614 0D 13 04    0626*  	dl ld_12_028
040617 37 13 04    0627*  	dl ld_12_029
04061A 61 13 04    0628*  	dl ld_12_032
04061D 8B 13 04    0629*  	dl ld_12_035
040620 B5 13 04    0630*  	dl ld_12_036
040623 DF 13 04    0631*  	dl ld_12_037
040626 09 14 04    0632*  	dl ld_12_038
040629 33 14 04    0633*  	dl ld_12_040
04062C 5D 14 04    0634*  	dl ld_12_042
04062F 87 14 04    0635*  	dl ld_12_043
040632 B1 14 04    0636*  	dl ld_12_044
040635 DB 14 04    0637*  	dl ld_13_004
040638 05 15 04    0638*  	dl ld_13_009
04063B 2F 15 04    0639*  	dl ld_13_010
04063E 59 15 04    0640*  	dl ld_13_011
040641 83 15 04    0641*  	dl ld_13_012
040644 AD 15 04    0642*  	dl ld_13_013
040647 D7 15 04    0643*  	dl ld_13_014
04064A 01 16 04    0644*  	dl ld_13_015
04064D 2B 16 04    0645*  	dl ld_13_016
040650 55 16 04    0646*  	dl ld_13_020
040653 7F 16 04    0647*  	dl ld_13_024
040656 A9 16 04    0648*  	dl ld_13_025
040659 D3 16 04    0649*  	dl ld_13_026
04065C FD 16 04    0650*  	dl ld_13_027
04065F 27 17 04    0651*  	dl ld_13_028
040662 51 17 04    0652*  	dl ld_13_029
040665 7B 17 04    0653*  	dl ld_13_032
040668 A5 17 04    0654*  	dl ld_13_035
04066B CF 17 04    0655*  	dl ld_13_036
04066E F9 17 04    0656*  	dl ld_13_037
040671 23 18 04    0657*  	dl ld_13_038
040674 4D 18 04    0658*  	dl ld_13_040
040677 77 18 04    0659*  	dl ld_13_042
04067A A1 18 04    0660*  	dl ld_13_043
04067D CB 18 04    0661*  	dl ld_13_044
040680 F5 18 04    0662*  	dl ld_14_004
040683 1F 19 04    0663*  	dl ld_14_009
040686 49 19 04    0664*  	dl ld_14_010
040689 73 19 04    0665*  	dl ld_14_011
04068C 9D 19 04    0666*  	dl ld_14_012
04068F C7 19 04    0667*  	dl ld_14_013
040692 F1 19 04    0668*  	dl ld_14_014
040695 1B 1A 04    0669*  	dl ld_14_015
040698 45 1A 04    0670*  	dl ld_14_016
04069B 6F 1A 04    0671*  	dl ld_14_020
04069E 99 1A 04    0672*  	dl ld_14_024
0406A1 C3 1A 04    0673*  	dl ld_14_025
0406A4 ED 1A 04    0674*  	dl ld_14_026
0406A7 17 1B 04    0675*  	dl ld_14_027
0406AA 41 1B 04    0676*  	dl ld_14_028
0406AD 6B 1B 04    0677*  	dl ld_14_029
0406B0 95 1B 04    0678*  	dl ld_14_032
0406B3 BF 1B 04    0679*  	dl ld_14_035
0406B6 E9 1B 04    0680*  	dl ld_14_036
0406B9 13 1C 04    0681*  	dl ld_14_037
0406BC 3D 1C 04    0682*  	dl ld_14_038
0406BF 67 1C 04    0683*  	dl ld_14_040
0406C2 91 1C 04    0684*  	dl ld_14_042
0406C5 BB 1C 04    0685*  	dl ld_14_043
0406C8 E5 1C 04    0686*  	dl ld_14_044
0406CB 0F 1D 04    0687*  	dl ld_15_004
0406CE 39 1D 04    0688*  	dl ld_15_009
0406D1 63 1D 04    0689*  	dl ld_15_010
0406D4 8D 1D 04    0690*  	dl ld_15_011
0406D7 B7 1D 04    0691*  	dl ld_15_012
0406DA E1 1D 04    0692*  	dl ld_15_013
0406DD 0B 1E 04    0693*  	dl ld_15_014
0406E0 35 1E 04    0694*  	dl ld_15_015
0406E3 5F 1E 04    0695*  	dl ld_15_016
0406E6 89 1E 04    0696*  	dl ld_15_020
0406E9 B3 1E 04    0697*  	dl ld_15_024
0406EC DD 1E 04    0698*  	dl ld_15_025
0406EF 07 1F 04    0699*  	dl ld_15_026
0406F2 31 1F 04    0700*  	dl ld_15_027
0406F5 5B 1F 04    0701*  	dl ld_15_028
0406F8 85 1F 04    0702*  	dl ld_15_029
0406FB AF 1F 04    0703*  	dl ld_15_032
0406FE D9 1F 04    0704*  	dl ld_15_035
040701 03 20 04    0705*  	dl ld_15_036
040704 2D 20 04    0706*  	dl ld_15_037
040707 57 20 04    0707*  	dl ld_15_038
04070A 81 20 04    0708*  	dl ld_15_040
04070D AB 20 04    0709*  	dl ld_15_042
040710 D5 20 04    0710*  	dl ld_15_043
040713 FF 20 04    0711*  	dl ld_15_044
040716 29 21 04    0712*  	dl ld_16_004
040719 53 21 04    0713*  	dl ld_16_009
04071C 7D 21 04    0714*  	dl ld_16_010
04071F A7 21 04    0715*  	dl ld_16_011
040722 D1 21 04    0716*  	dl ld_16_012
040725 FB 21 04    0717*  	dl ld_16_013
040728 25 22 04    0718*  	dl ld_16_014
04072B 4F 22 04    0719*  	dl ld_16_015
04072E 79 22 04    0720*  	dl ld_16_016
040731 A3 22 04    0721*  	dl ld_16_020
040734 CD 22 04    0722*  	dl ld_16_024
040737 F7 22 04    0723*  	dl ld_16_025
04073A 21 23 04    0724*  	dl ld_16_026
04073D 4B 23 04    0725*  	dl ld_16_027
040740 75 23 04    0726*  	dl ld_16_028
040743 9F 23 04    0727*  	dl ld_16_029
040746 C9 23 04    0728*  	dl ld_16_032
040749 F3 23 04    0729*  	dl ld_16_035
04074C 1D 24 04    0730*  	dl ld_16_036
04074F 47 24 04    0731*  	dl ld_16_037
040752 71 24 04    0732*  	dl ld_16_038
040755 9B 24 04    0733*  	dl ld_16_040
040758 C5 24 04    0734*  	dl ld_16_042
04075B EF 24 04    0735*  	dl ld_16_043
04075E 19 25 04    0736*  	dl ld_16_044
040761 43 25 04    0737*  	dl ld_17_004
040764 6D 25 04    0738*  	dl ld_17_009
040767 97 25 04    0739*  	dl ld_17_010
04076A C1 25 04    0740*  	dl ld_17_011
04076D EB 25 04    0741*  	dl ld_17_012
040770 15 26 04    0742*  	dl ld_17_013
040773 3F 26 04    0743*  	dl ld_17_014
040776 69 26 04    0744*  	dl ld_17_015
040779 93 26 04    0745*  	dl ld_17_016
04077C BD 26 04    0746*  	dl ld_17_020
04077F E7 26 04    0747*  	dl ld_17_024
040782 11 27 04    0748*  	dl ld_17_025
040785 3B 27 04    0749*  	dl ld_17_026
040788 65 27 04    0750*  	dl ld_17_027
04078B 8F 27 04    0751*  	dl ld_17_028
04078E B9 27 04    0752*  	dl ld_17_029
040791 E3 27 04    0753*  	dl ld_17_032
040794 0D 28 04    0754*  	dl ld_17_035
040797 37 28 04    0755*  	dl ld_17_036
04079A 61 28 04    0756*  	dl ld_17_037
04079D 8B 28 04    0757*  	dl ld_17_038
0407A0 B5 28 04    0758*  	dl ld_17_040
0407A3 DF 28 04    0759*  	dl ld_17_042
0407A6 09 29 04    0760*  	dl ld_17_043
0407A9 33 29 04    0761*  	dl ld_17_044
0407AC 5D 29 04    0762*  	dl ld_57_004
0407AF 87 29 04    0763*  	dl ld_57_009
0407B2 B1 29 04    0764*  	dl ld_57_010
0407B5 DB 29 04    0765*  	dl ld_57_011
0407B8 05 2A 04    0766*  	dl ld_57_012
0407BB 2F 2A 04    0767*  	dl ld_57_013
0407BE 59 2A 04    0768*  	dl ld_57_014
0407C1 83 2A 04    0769*  	dl ld_57_015
0407C4 AD 2A 04    0770*  	dl ld_57_016
0407C7 D7 2A 04    0771*  	dl ld_57_020
0407CA 01 2B 04    0772*  	dl ld_57_024
0407CD 2B 2B 04    0773*  	dl ld_57_025
0407D0 55 2B 04    0774*  	dl ld_57_026
0407D3 7F 2B 04    0775*  	dl ld_57_027
0407D6 A9 2B 04    0776*  	dl ld_57_028
0407D9 D3 2B 04    0777*  	dl ld_57_029
0407DC FD 2B 04    0778*  	dl ld_57_032
0407DF 27 2C 04    0779*  	dl ld_57_035
0407E2 51 2C 04    0780*  	dl ld_57_036
0407E5 7B 2C 04    0781*  	dl ld_57_037
0407E8 A5 2C 04    0782*  	dl ld_57_038
0407EB CF 2C 04    0783*  	dl ld_57_040
0407EE F9 2C 04    0784*  	dl ld_57_042
0407F1 23 2D 04    0785*  	dl ld_57_043
0407F4 4D 2D 04    0786*  	dl ld_57_044
0407F7 77 2D 04    0787*  	dl ld_58_004
0407FA A1 2D 04    0788*  	dl ld_58_009
0407FD CB 2D 04    0789*  	dl ld_58_010
040800 F5 2D 04    0790*  	dl ld_58_011
040803 1F 2E 04    0791*  	dl ld_58_012
040806 49 2E 04    0792*  	dl ld_58_013
040809 73 2E 04    0793*  	dl ld_58_014
04080C 9D 2E 04    0794*  	dl ld_58_015
04080F C7 2E 04    0795*  	dl ld_58_016
040812 F1 2E 04    0796*  	dl ld_58_020
040815 1B 2F 04    0797*  	dl ld_58_024
040818 45 2F 04    0798*  	dl ld_58_025
04081B 6F 2F 04    0799*  	dl ld_58_026
04081E 99 2F 04    0800*  	dl ld_58_027
040821 C3 2F 04    0801*  	dl ld_58_028
040824 ED 2F 04    0802*  	dl ld_58_029
040827 17 30 04    0803*  	dl ld_58_032
04082A 41 30 04    0804*  	dl ld_58_035
04082D 6B 30 04    0805*  	dl ld_58_036
040830 95 30 04    0806*  	dl ld_58_037
040833 BF 30 04    0807*  	dl ld_58_038
040836 E9 30 04    0808*  	dl ld_58_040
040839 13 31 04    0809*  	dl ld_58_042
04083C 3D 31 04    0810*  	dl ld_58_043
04083F 67 31 04    0811*  	dl ld_58_044
040842 91 31 04    0812*  	dl ld_59_004
040845 BB 31 04    0813*  	dl ld_59_009
040848 E5 31 04    0814*  	dl ld_59_010
04084B 0F 32 04    0815*  	dl ld_59_011
04084E 39 32 04    0816*  	dl ld_59_012
040851 63 32 04    0817*  	dl ld_59_013
040854 8D 32 04    0818*  	dl ld_59_014
040857 B7 32 04    0819*  	dl ld_59_015
04085A E1 32 04    0820*  	dl ld_59_016
04085D 0B 33 04    0821*  	dl ld_59_020
040860 35 33 04    0822*  	dl ld_59_024
040863 5F 33 04    0823*  	dl ld_59_025
040866 89 33 04    0824*  	dl ld_59_026
040869 B3 33 04    0825*  	dl ld_59_027
04086C DD 33 04    0826*  	dl ld_59_028
04086F 07 34 04    0827*  	dl ld_59_029
040872 31 34 04    0828*  	dl ld_59_032
040875 5B 34 04    0829*  	dl ld_59_035
040878 85 34 04    0830*  	dl ld_59_036
04087B AF 34 04    0831*  	dl ld_59_037
04087E D9 34 04    0832*  	dl ld_59_038
040881 03 35 04    0833*  	dl ld_59_040
040884 2D 35 04    0834*  	dl ld_59_042
040887 57 35 04    0835*  	dl ld_59_043
04088A 81 35 04    0836*  	dl ld_59_044
04088D             0837*  
04088D             0838*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
04088D             0839*  
04088D             0840*  ld_10_004:
04088D 21 AB 35 04 0841*  	ld hl,F10_004
040891 22 ED B6 04 0842*  	ld (cur_filename),hl
040895 11 1A C3 04 0843*  	ld de,filedata
040899 01 00 00 01 0844*  	ld bc,65536
04089D 3E 01       0845*  	ld a,mos_load
04089F 5B CF       0846*  	RST.LIL 08h
0408A1 21 00 01 00 0847*  	ld hl,BUF_10_004
0408A5 01 24 00 00 0848*  	ld bc,36
0408A9 11 23 00 00 0849*  	ld de,35
0408AD DD 21 EC 04 0850*  	ld ix,1260
       00          
0408B2 CD 68 B8 04 0851*  	call vdu_load_img
0408B6 C9          0852*  	ret
0408B7             0853*  
0408B7             0854*  ld_10_009:
0408B7 21 BF 35 04 0855*  	ld hl,F10_009
0408BB 22 ED B6 04 0856*  	ld (cur_filename),hl
0408BF 11 1A C3 04 0857*  	ld de,filedata
0408C3 01 00 00 01 0858*  	ld bc,65536
0408C7 3E 01       0859*  	ld a,mos_load
0408C9 5B CF       0860*  	RST.LIL 08h
0408CB 21 01 01 00 0861*  	ld hl,BUF_10_009
0408CF 01 23 00 00 0862*  	ld bc,35
0408D3 11 2D 00 00 0863*  	ld de,45
0408D7 DD 21 27 06 0864*  	ld ix,1575
       00          
0408DC CD 68 B8 04 0865*  	call vdu_load_img
0408E0 C9          0866*  	ret
0408E1             0867*  
0408E1             0868*  ld_10_010:
0408E1 21 D3 35 04 0869*  	ld hl,F10_010
0408E5 22 ED B6 04 0870*  	ld (cur_filename),hl
0408E9 11 1A C3 04 0871*  	ld de,filedata
0408ED 01 00 00 01 0872*  	ld bc,65536
0408F1 3E 01       0873*  	ld a,mos_load
0408F3 5B CF       0874*  	RST.LIL 08h
0408F5 21 02 01 00 0875*  	ld hl,BUF_10_010
0408F9 01 19 00 00 0876*  	ld bc,25
0408FD 11 2D 00 00 0877*  	ld de,45
040901 DD 21 65 04 0878*  	ld ix,1125
       00          
040906 CD 68 B8 04 0879*  	call vdu_load_img
04090A C9          0880*  	ret
04090B             0881*  
04090B             0882*  ld_10_011:
04090B 21 E7 35 04 0883*  	ld hl,F10_011
04090F 22 ED B6 04 0884*  	ld (cur_filename),hl
040913 11 1A C3 04 0885*  	ld de,filedata
040917 01 00 00 01 0886*  	ld bc,65536
04091B 3E 01       0887*  	ld a,mos_load
04091D 5B CF       0888*  	RST.LIL 08h
04091F 21 03 01 00 0889*  	ld hl,BUF_10_011
040923 01 0F 00 00 0890*  	ld bc,15
040927 11 2D 00 00 0891*  	ld de,45
04092B DD 21 A3 02 0892*  	ld ix,675
       00          
040930 CD 68 B8 04 0893*  	call vdu_load_img
040934 C9          0894*  	ret
040935             0895*  
040935             0896*  ld_10_012:
040935 21 FB 35 04 0897*  	ld hl,F10_012
040939 22 ED B6 04 0898*  	ld (cur_filename),hl
04093D 11 1A C3 04 0899*  	ld de,filedata
040941 01 00 00 01 0900*  	ld bc,65536
040945 3E 01       0901*  	ld a,mos_load
040947 5B CF       0902*  	RST.LIL 08h
040949 21 04 01 00 0903*  	ld hl,BUF_10_012
04094D 01 05 00 00 0904*  	ld bc,5
040951 11 2D 00 00 0905*  	ld de,45
040955 DD 21 E1 00 0906*  	ld ix,225
       00          
04095A CD 68 B8 04 0907*  	call vdu_load_img
04095E C9          0908*  	ret
04095F             0909*  
04095F             0910*  ld_10_013:
04095F 21 0F 36 04 0911*  	ld hl,F10_013
040963 22 ED B6 04 0912*  	ld (cur_filename),hl
040967 11 1A C3 04 0913*  	ld de,filedata
04096B 01 00 00 01 0914*  	ld bc,65536
04096F 3E 01       0915*  	ld a,mos_load
040971 5B CF       0916*  	RST.LIL 08h
040973 21 05 01 00 0917*  	ld hl,BUF_10_013
040977 01 05 00 00 0918*  	ld bc,5
04097B 11 2B 00 00 0919*  	ld de,43
04097F DD 21 D7 00 0920*  	ld ix,215
       00          
040984 CD 68 B8 04 0921*  	call vdu_load_img
040988 C9          0922*  	ret
040989             0923*  
040989             0924*  ld_10_014:
040989 21 23 36 04 0925*  	ld hl,F10_014
04098D 22 ED B6 04 0926*  	ld (cur_filename),hl
040991 11 1A C3 04 0927*  	ld de,filedata
040995 01 00 00 01 0928*  	ld bc,65536
040999 3E 01       0929*  	ld a,mos_load
04099B 5B CF       0930*  	RST.LIL 08h
04099D 21 06 01 00 0931*  	ld hl,BUF_10_014
0409A1 01 0F 00 00 0932*  	ld bc,15
0409A5 11 2D 00 00 0933*  	ld de,45
0409A9 DD 21 A3 02 0934*  	ld ix,675
       00          
0409AE CD 68 B8 04 0935*  	call vdu_load_img
0409B2 C9          0936*  	ret
0409B3             0937*  
0409B3             0938*  ld_10_015:
0409B3 21 37 36 04 0939*  	ld hl,F10_015
0409B7 22 ED B6 04 0940*  	ld (cur_filename),hl
0409BB 11 1A C3 04 0941*  	ld de,filedata
0409BF 01 00 00 01 0942*  	ld bc,65536
0409C3 3E 01       0943*  	ld a,mos_load
0409C5 5B CF       0944*  	RST.LIL 08h
0409C7 21 07 01 00 0945*  	ld hl,BUF_10_015
0409CB 01 19 00 00 0946*  	ld bc,25
0409CF 11 2D 00 00 0947*  	ld de,45
0409D3 DD 21 65 04 0948*  	ld ix,1125
       00          
0409D8 CD 68 B8 04 0949*  	call vdu_load_img
0409DC C9          0950*  	ret
0409DD             0951*  
0409DD             0952*  ld_10_016:
0409DD 21 4B 36 04 0953*  	ld hl,F10_016
0409E1 22 ED B6 04 0954*  	ld (cur_filename),hl
0409E5 11 1A C3 04 0955*  	ld de,filedata
0409E9 01 00 00 01 0956*  	ld bc,65536
0409ED 3E 01       0957*  	ld a,mos_load
0409EF 5B CF       0958*  	RST.LIL 08h
0409F1 21 08 01 00 0959*  	ld hl,BUF_10_016
0409F5 01 23 00 00 0960*  	ld bc,35
0409F9 11 2D 00 00 0961*  	ld de,45
0409FD DD 21 27 06 0962*  	ld ix,1575
       00          
040A02 CD 68 B8 04 0963*  	call vdu_load_img
040A06 C9          0964*  	ret
040A07             0965*  
040A07             0966*  ld_10_020:
040A07 21 5F 36 04 0967*  	ld hl,F10_020
040A0B 22 ED B6 04 0968*  	ld (cur_filename),hl
040A0F 11 1A C3 04 0969*  	ld de,filedata
040A13 01 00 00 01 0970*  	ld bc,65536
040A17 3E 01       0971*  	ld a,mos_load
040A19 5B CF       0972*  	RST.LIL 08h
040A1B 21 09 01 00 0973*  	ld hl,BUF_10_020
040A1F 01 2E 00 00 0974*  	ld bc,46
040A23 11 2D 00 00 0975*  	ld de,45
040A27 DD 21 16 08 0976*  	ld ix,2070
       00          
040A2C CD 68 B8 04 0977*  	call vdu_load_img
040A30 C9          0978*  	ret
040A31             0979*  
040A31             0980*  ld_10_024:
040A31 21 73 36 04 0981*  	ld hl,F10_024
040A35 22 ED B6 04 0982*  	ld (cur_filename),hl
040A39 11 1A C3 04 0983*  	ld de,filedata
040A3D 01 00 00 01 0984*  	ld bc,65536
040A41 3E 01       0985*  	ld a,mos_load
040A43 5B CF       0986*  	RST.LIL 08h
040A45 21 0A 01 00 0987*  	ld hl,BUF_10_024
040A49 01 2E 00 00 0988*  	ld bc,46
040A4D 11 40 00 00 0989*  	ld de,64
040A51 DD 21 80 0B 0990*  	ld ix,2944
       00          
040A56 CD 68 B8 04 0991*  	call vdu_load_img
040A5A C9          0992*  	ret
040A5B             0993*  
040A5B             0994*  ld_10_025:
040A5B 21 87 36 04 0995*  	ld hl,F10_025
040A5F 22 ED B6 04 0996*  	ld (cur_filename),hl
040A63 11 1A C3 04 0997*  	ld de,filedata
040A67 01 00 00 01 0998*  	ld bc,65536
040A6B 3E 01       0999*  	ld a,mos_load
040A6D 5B CF       1000*  	RST.LIL 08h
040A6F 21 0B 01 00 1001*  	ld hl,BUF_10_025
040A73 01 1C 00 00 1002*  	ld bc,28
040A77 11 40 00 00 1003*  	ld de,64
040A7B DD 21 00 07 1004*  	ld ix,1792
       00          
040A80 CD 68 B8 04 1005*  	call vdu_load_img
040A84 C9          1006*  	ret
040A85             1007*  
040A85             1008*  ld_10_026:
040A85 21 9B 36 04 1009*  	ld hl,F10_026
040A89 22 ED B6 04 1010*  	ld (cur_filename),hl
040A8D 11 1A C3 04 1011*  	ld de,filedata
040A91 01 00 00 01 1012*  	ld bc,65536
040A95 3E 01       1013*  	ld a,mos_load
040A97 5B CF       1014*  	RST.LIL 08h
040A99 21 0C 01 00 1015*  	ld hl,BUF_10_026
040A9D 01 09 00 00 1016*  	ld bc,9
040AA1 11 40 00 00 1017*  	ld de,64
040AA5 DD 21 40 02 1018*  	ld ix,576
       00          
040AAA CD 68 B8 04 1019*  	call vdu_load_img
040AAE C9          1020*  	ret
040AAF             1021*  
040AAF             1022*  ld_10_027:
040AAF 21 AF 36 04 1023*  	ld hl,F10_027
040AB3 22 ED B6 04 1024*  	ld (cur_filename),hl
040AB7 11 1A C3 04 1025*  	ld de,filedata
040ABB 01 00 00 01 1026*  	ld bc,65536
040ABF 3E 01       1027*  	ld a,mos_load
040AC1 5B CF       1028*  	RST.LIL 08h
040AC3 21 0D 01 00 1029*  	ld hl,BUF_10_027
040AC7 01 0A 00 00 1030*  	ld bc,10
040ACB 11 3E 00 00 1031*  	ld de,62
040ACF DD 21 6C 02 1032*  	ld ix,620
       00          
040AD4 CD 68 B8 04 1033*  	call vdu_load_img
040AD8 C9          1034*  	ret
040AD9             1035*  
040AD9             1036*  ld_10_028:
040AD9 21 C3 36 04 1037*  	ld hl,F10_028
040ADD 22 ED B6 04 1038*  	ld (cur_filename),hl
040AE1 11 1A C3 04 1039*  	ld de,filedata
040AE5 01 00 00 01 1040*  	ld bc,65536
040AE9 3E 01       1041*  	ld a,mos_load
040AEB 5B CF       1042*  	RST.LIL 08h
040AED 21 0E 01 00 1043*  	ld hl,BUF_10_028
040AF1 01 1C 00 00 1044*  	ld bc,28
040AF5 11 40 00 00 1045*  	ld de,64
040AF9 DD 21 00 07 1046*  	ld ix,1792
       00          
040AFE CD 68 B8 04 1047*  	call vdu_load_img
040B02 C9          1048*  	ret
040B03             1049*  
040B03             1050*  ld_10_029:
040B03 21 D7 36 04 1051*  	ld hl,F10_029
040B07 22 ED B6 04 1052*  	ld (cur_filename),hl
040B0B 11 1A C3 04 1053*  	ld de,filedata
040B0F 01 00 00 01 1054*  	ld bc,65536
040B13 3E 01       1055*  	ld a,mos_load
040B15 5B CF       1056*  	RST.LIL 08h
040B17 21 0F 01 00 1057*  	ld hl,BUF_10_029
040B1B 01 2F 00 00 1058*  	ld bc,47
040B1F 11 40 00 00 1059*  	ld de,64
040B23 DD 21 C0 0B 1060*  	ld ix,3008
       00          
040B28 CD 68 B8 04 1061*  	call vdu_load_img
040B2C C9          1062*  	ret
040B2D             1063*  
040B2D             1064*  ld_10_032:
040B2D 21 EB 36 04 1065*  	ld hl,F10_032
040B31 22 ED B6 04 1066*  	ld (cur_filename),hl
040B35 11 1A C3 04 1067*  	ld de,filedata
040B39 01 00 00 01 1068*  	ld bc,65536
040B3D 3E 01       1069*  	ld a,mos_load
040B3F 5B CF       1070*  	RST.LIL 08h
040B41 21 10 01 00 1071*  	ld hl,BUF_10_032
040B45 01 41 00 00 1072*  	ld bc,65
040B49 11 40 00 00 1073*  	ld de,64
040B4D DD 21 40 10 1074*  	ld ix,4160
       00          
040B52 CD 68 B8 04 1075*  	call vdu_load_img
040B56 C9          1076*  	ret
040B57             1077*  
040B57             1078*  ld_10_035:
040B57 21 FF 36 04 1079*  	ld hl,F10_035
040B5B 22 ED B6 04 1080*  	ld (cur_filename),hl
040B5F 11 1A C3 04 1081*  	ld de,filedata
040B63 01 00 00 01 1082*  	ld bc,65536
040B67 3E 01       1083*  	ld a,mos_load
040B69 5B CF       1084*  	RST.LIL 08h
040B6B 21 11 01 00 1085*  	ld hl,BUF_10_035
040B6F 01 3F 00 00 1086*  	ld bc,63
040B73 11 6B 00 00 1087*  	ld de,107
040B77 DD 21 55 1A 1088*  	ld ix,6741
       00          
040B7C CD 68 B8 04 1089*  	call vdu_load_img
040B80 C9          1090*  	ret
040B81             1091*  
040B81             1092*  ld_10_036:
040B81 21 13 37 04 1093*  	ld hl,F10_036
040B85 22 ED B6 04 1094*  	ld (cur_filename),hl
040B89 11 1A C3 04 1095*  	ld de,filedata
040B8D 01 00 00 01 1096*  	ld bc,65536
040B91 3E 01       1097*  	ld a,mos_load
040B93 5B CF       1098*  	RST.LIL 08h
040B95 21 12 01 00 1099*  	ld hl,BUF_10_036
040B99 01 16 00 00 1100*  	ld bc,22
040B9D 11 6B 00 00 1101*  	ld de,107
040BA1 DD 21 32 09 1102*  	ld ix,2354
       00          
040BA6 CD 68 B8 04 1103*  	call vdu_load_img
040BAA C9          1104*  	ret
040BAB             1105*  
040BAB             1106*  ld_10_037:
040BAB 21 27 37 04 1107*  	ld hl,F10_037
040BAF 22 ED B6 04 1108*  	ld (cur_filename),hl
040BB3 11 1A C3 04 1109*  	ld de,filedata
040BB7 01 00 00 01 1110*  	ld bc,65536
040BBB 3E 01       1111*  	ld a,mos_load
040BBD 5B CF       1112*  	RST.LIL 08h
040BBF 21 13 01 00 1113*  	ld hl,BUF_10_037
040BC3 01 15 00 00 1114*  	ld bc,21
040BC7 11 69 00 00 1115*  	ld de,105
040BCB DD 21 9D 08 1116*  	ld ix,2205
       00          
040BD0 CD 68 B8 04 1117*  	call vdu_load_img
040BD4 C9          1118*  	ret
040BD5             1119*  
040BD5             1120*  ld_10_038:
040BD5 21 3B 37 04 1121*  	ld hl,F10_038
040BD9 22 ED B6 04 1122*  	ld (cur_filename),hl
040BDD 11 1A C3 04 1123*  	ld de,filedata
040BE1 01 00 00 01 1124*  	ld bc,65536
040BE5 3E 01       1125*  	ld a,mos_load
040BE7 5B CF       1126*  	RST.LIL 08h
040BE9 21 14 01 00 1127*  	ld hl,BUF_10_038
040BED 01 3F 00 00 1128*  	ld bc,63
040BF1 11 6B 00 00 1129*  	ld de,107
040BF5 DD 21 55 1A 1130*  	ld ix,6741
       00          
040BFA CD 68 B8 04 1131*  	call vdu_load_img
040BFE C9          1132*  	ret
040BFF             1133*  
040BFF             1134*  ld_10_040:
040BFF 21 4F 37 04 1135*  	ld hl,F10_040
040C03 22 ED B6 04 1136*  	ld (cur_filename),hl
040C07 11 1A C3 04 1137*  	ld de,filedata
040C0B 01 00 00 01 1138*  	ld bc,65536
040C0F 3E 01       1139*  	ld a,mos_load
040C11 5B CF       1140*  	RST.LIL 08h
040C13 21 15 01 00 1141*  	ld hl,BUF_10_040
040C17 01 6C 00 00 1142*  	ld bc,108
040C1B 11 6B 00 00 1143*  	ld de,107
040C1F DD 21 24 2D 1144*  	ld ix,11556
       00          
040C24 CD 68 B8 04 1145*  	call vdu_load_img
040C28 C9          1146*  	ret
040C29             1147*  
040C29             1148*  ld_10_042:
040C29 21 63 37 04 1149*  	ld hl,F10_042
040C2D 22 ED B6 04 1150*  	ld (cur_filename),hl
040C31 11 1A C3 04 1151*  	ld de,filedata
040C35 01 00 00 01 1152*  	ld bc,65536
040C39 3E 01       1153*  	ld a,mos_load
040C3B 5B CF       1154*  	RST.LIL 08h
040C3D 21 16 01 00 1155*  	ld hl,BUF_10_042
040C41 01 6A 00 00 1156*  	ld bc,106
040C45 11 A0 00 00 1157*  	ld de,160
040C49 DD 21 40 42 1158*  	ld ix,16960
       00          
040C4E CD 68 B8 04 1159*  	call vdu_load_img
040C52 C9          1160*  	ret
040C53             1161*  
040C53             1162*  ld_10_043:
040C53 21 77 37 04 1163*  	ld hl,F10_043
040C57 22 ED B6 04 1164*  	ld (cur_filename),hl
040C5B 11 1A C3 04 1165*  	ld de,filedata
040C5F 01 00 00 01 1166*  	ld bc,65536
040C63 3E 01       1167*  	ld a,mos_load
040C65 5B CF       1168*  	RST.LIL 08h
040C67 21 17 01 00 1169*  	ld hl,BUF_10_043
040C6B 01 6B 00 00 1170*  	ld bc,107
040C6F 11 A0 00 00 1171*  	ld de,160
040C73 DD 21 E0 42 1172*  	ld ix,17120
       00          
040C78 CD 68 B8 04 1173*  	call vdu_load_img
040C7C C9          1174*  	ret
040C7D             1175*  
040C7D             1176*  ld_10_044:
040C7D 21 8B 37 04 1177*  	ld hl,F10_044
040C81 22 ED B6 04 1178*  	ld (cur_filename),hl
040C85 11 1A C3 04 1179*  	ld de,filedata
040C89 01 00 00 01 1180*  	ld bc,65536
040C8D 3E 01       1181*  	ld a,mos_load
040C8F 5B CF       1182*  	RST.LIL 08h
040C91 21 18 01 00 1183*  	ld hl,BUF_10_044
040C95 01 40 01 00 1184*  	ld bc,320
040C99 11 A0 00 00 1185*  	ld de,160
040C9D DD 21 00 C8 1186*  	ld ix,51200
       00          
040CA2 CD 68 B8 04 1187*  	call vdu_load_img
040CA6 C9          1188*  	ret
040CA7             1189*  
040CA7             1190*  ld_11_004:
040CA7 21 9F 37 04 1191*  	ld hl,F11_004
040CAB 22 ED B6 04 1192*  	ld (cur_filename),hl
040CAF 11 1A C3 04 1193*  	ld de,filedata
040CB3 01 00 00 01 1194*  	ld bc,65536
040CB7 3E 01       1195*  	ld a,mos_load
040CB9 5B CF       1196*  	RST.LIL 08h
040CBB 21 19 01 00 1197*  	ld hl,BUF_11_004
040CBF 01 24 00 00 1198*  	ld bc,36
040CC3 11 23 00 00 1199*  	ld de,35
040CC7 DD 21 EC 04 1200*  	ld ix,1260
       00          
040CCC CD 68 B8 04 1201*  	call vdu_load_img
040CD0 C9          1202*  	ret
040CD1             1203*  
040CD1             1204*  ld_11_009:
040CD1 21 B3 37 04 1205*  	ld hl,F11_009
040CD5 22 ED B6 04 1206*  	ld (cur_filename),hl
040CD9 11 1A C3 04 1207*  	ld de,filedata
040CDD 01 00 00 01 1208*  	ld bc,65536
040CE1 3E 01       1209*  	ld a,mos_load
040CE3 5B CF       1210*  	RST.LIL 08h
040CE5 21 1A 01 00 1211*  	ld hl,BUF_11_009
040CE9 01 23 00 00 1212*  	ld bc,35
040CED 11 2D 00 00 1213*  	ld de,45
040CF1 DD 21 27 06 1214*  	ld ix,1575
       00          
040CF6 CD 68 B8 04 1215*  	call vdu_load_img
040CFA C9          1216*  	ret
040CFB             1217*  
040CFB             1218*  ld_11_010:
040CFB 21 C7 37 04 1219*  	ld hl,F11_010
040CFF 22 ED B6 04 1220*  	ld (cur_filename),hl
040D03 11 1A C3 04 1221*  	ld de,filedata
040D07 01 00 00 01 1222*  	ld bc,65536
040D0B 3E 01       1223*  	ld a,mos_load
040D0D 5B CF       1224*  	RST.LIL 08h
040D0F 21 1B 01 00 1225*  	ld hl,BUF_11_010
040D13 01 19 00 00 1226*  	ld bc,25
040D17 11 2D 00 00 1227*  	ld de,45
040D1B DD 21 65 04 1228*  	ld ix,1125
       00          
040D20 CD 68 B8 04 1229*  	call vdu_load_img
040D24 C9          1230*  	ret
040D25             1231*  
040D25             1232*  ld_11_011:
040D25 21 DB 37 04 1233*  	ld hl,F11_011
040D29 22 ED B6 04 1234*  	ld (cur_filename),hl
040D2D 11 1A C3 04 1235*  	ld de,filedata
040D31 01 00 00 01 1236*  	ld bc,65536
040D35 3E 01       1237*  	ld a,mos_load
040D37 5B CF       1238*  	RST.LIL 08h
040D39 21 1C 01 00 1239*  	ld hl,BUF_11_011
040D3D 01 0F 00 00 1240*  	ld bc,15
040D41 11 2D 00 00 1241*  	ld de,45
040D45 DD 21 A3 02 1242*  	ld ix,675
       00          
040D4A CD 68 B8 04 1243*  	call vdu_load_img
040D4E C9          1244*  	ret
040D4F             1245*  
040D4F             1246*  ld_11_012:
040D4F 21 EF 37 04 1247*  	ld hl,F11_012
040D53 22 ED B6 04 1248*  	ld (cur_filename),hl
040D57 11 1A C3 04 1249*  	ld de,filedata
040D5B 01 00 00 01 1250*  	ld bc,65536
040D5F 3E 01       1251*  	ld a,mos_load
040D61 5B CF       1252*  	RST.LIL 08h
040D63 21 1D 01 00 1253*  	ld hl,BUF_11_012
040D67 01 05 00 00 1254*  	ld bc,5
040D6B 11 2D 00 00 1255*  	ld de,45
040D6F DD 21 E1 00 1256*  	ld ix,225
       00          
040D74 CD 68 B8 04 1257*  	call vdu_load_img
040D78 C9          1258*  	ret
040D79             1259*  
040D79             1260*  ld_11_013:
040D79 21 03 38 04 1261*  	ld hl,F11_013
040D7D 22 ED B6 04 1262*  	ld (cur_filename),hl
040D81 11 1A C3 04 1263*  	ld de,filedata
040D85 01 00 00 01 1264*  	ld bc,65536
040D89 3E 01       1265*  	ld a,mos_load
040D8B 5B CF       1266*  	RST.LIL 08h
040D8D 21 1E 01 00 1267*  	ld hl,BUF_11_013
040D91 01 05 00 00 1268*  	ld bc,5
040D95 11 2B 00 00 1269*  	ld de,43
040D99 DD 21 D7 00 1270*  	ld ix,215
       00          
040D9E CD 68 B8 04 1271*  	call vdu_load_img
040DA2 C9          1272*  	ret
040DA3             1273*  
040DA3             1274*  ld_11_014:
040DA3 21 17 38 04 1275*  	ld hl,F11_014
040DA7 22 ED B6 04 1276*  	ld (cur_filename),hl
040DAB 11 1A C3 04 1277*  	ld de,filedata
040DAF 01 00 00 01 1278*  	ld bc,65536
040DB3 3E 01       1279*  	ld a,mos_load
040DB5 5B CF       1280*  	RST.LIL 08h
040DB7 21 1F 01 00 1281*  	ld hl,BUF_11_014
040DBB 01 0F 00 00 1282*  	ld bc,15
040DBF 11 2D 00 00 1283*  	ld de,45
040DC3 DD 21 A3 02 1284*  	ld ix,675
       00          
040DC8 CD 68 B8 04 1285*  	call vdu_load_img
040DCC C9          1286*  	ret
040DCD             1287*  
040DCD             1288*  ld_11_015:
040DCD 21 2B 38 04 1289*  	ld hl,F11_015
040DD1 22 ED B6 04 1290*  	ld (cur_filename),hl
040DD5 11 1A C3 04 1291*  	ld de,filedata
040DD9 01 00 00 01 1292*  	ld bc,65536
040DDD 3E 01       1293*  	ld a,mos_load
040DDF 5B CF       1294*  	RST.LIL 08h
040DE1 21 20 01 00 1295*  	ld hl,BUF_11_015
040DE5 01 19 00 00 1296*  	ld bc,25
040DE9 11 2D 00 00 1297*  	ld de,45
040DED DD 21 65 04 1298*  	ld ix,1125
       00          
040DF2 CD 68 B8 04 1299*  	call vdu_load_img
040DF6 C9          1300*  	ret
040DF7             1301*  
040DF7             1302*  ld_11_016:
040DF7 21 3F 38 04 1303*  	ld hl,F11_016
040DFB 22 ED B6 04 1304*  	ld (cur_filename),hl
040DFF 11 1A C3 04 1305*  	ld de,filedata
040E03 01 00 00 01 1306*  	ld bc,65536
040E07 3E 01       1307*  	ld a,mos_load
040E09 5B CF       1308*  	RST.LIL 08h
040E0B 21 21 01 00 1309*  	ld hl,BUF_11_016
040E0F 01 23 00 00 1310*  	ld bc,35
040E13 11 2D 00 00 1311*  	ld de,45
040E17 DD 21 27 06 1312*  	ld ix,1575
       00          
040E1C CD 68 B8 04 1313*  	call vdu_load_img
040E20 C9          1314*  	ret
040E21             1315*  
040E21             1316*  ld_11_020:
040E21 21 53 38 04 1317*  	ld hl,F11_020
040E25 22 ED B6 04 1318*  	ld (cur_filename),hl
040E29 11 1A C3 04 1319*  	ld de,filedata
040E2D 01 00 00 01 1320*  	ld bc,65536
040E31 3E 01       1321*  	ld a,mos_load
040E33 5B CF       1322*  	RST.LIL 08h
040E35 21 22 01 00 1323*  	ld hl,BUF_11_020
040E39 01 2E 00 00 1324*  	ld bc,46
040E3D 11 2D 00 00 1325*  	ld de,45
040E41 DD 21 16 08 1326*  	ld ix,2070
       00          
040E46 CD 68 B8 04 1327*  	call vdu_load_img
040E4A C9          1328*  	ret
040E4B             1329*  
040E4B             1330*  ld_11_024:
040E4B 21 67 38 04 1331*  	ld hl,F11_024
040E4F 22 ED B6 04 1332*  	ld (cur_filename),hl
040E53 11 1A C3 04 1333*  	ld de,filedata
040E57 01 00 00 01 1334*  	ld bc,65536
040E5B 3E 01       1335*  	ld a,mos_load
040E5D 5B CF       1336*  	RST.LIL 08h
040E5F 21 23 01 00 1337*  	ld hl,BUF_11_024
040E63 01 2E 00 00 1338*  	ld bc,46
040E67 11 40 00 00 1339*  	ld de,64
040E6B DD 21 80 0B 1340*  	ld ix,2944
       00          
040E70 CD 68 B8 04 1341*  	call vdu_load_img
040E74 C9          1342*  	ret
040E75             1343*  
040E75             1344*  ld_11_025:
040E75 21 7B 38 04 1345*  	ld hl,F11_025
040E79 22 ED B6 04 1346*  	ld (cur_filename),hl
040E7D 11 1A C3 04 1347*  	ld de,filedata
040E81 01 00 00 01 1348*  	ld bc,65536
040E85 3E 01       1349*  	ld a,mos_load
040E87 5B CF       1350*  	RST.LIL 08h
040E89 21 24 01 00 1351*  	ld hl,BUF_11_025
040E8D 01 1C 00 00 1352*  	ld bc,28
040E91 11 40 00 00 1353*  	ld de,64
040E95 DD 21 00 07 1354*  	ld ix,1792
       00          
040E9A CD 68 B8 04 1355*  	call vdu_load_img
040E9E C9          1356*  	ret
040E9F             1357*  
040E9F             1358*  ld_11_026:
040E9F 21 8F 38 04 1359*  	ld hl,F11_026
040EA3 22 ED B6 04 1360*  	ld (cur_filename),hl
040EA7 11 1A C3 04 1361*  	ld de,filedata
040EAB 01 00 00 01 1362*  	ld bc,65536
040EAF 3E 01       1363*  	ld a,mos_load
040EB1 5B CF       1364*  	RST.LIL 08h
040EB3 21 25 01 00 1365*  	ld hl,BUF_11_026
040EB7 01 09 00 00 1366*  	ld bc,9
040EBB 11 40 00 00 1367*  	ld de,64
040EBF DD 21 40 02 1368*  	ld ix,576
       00          
040EC4 CD 68 B8 04 1369*  	call vdu_load_img
040EC8 C9          1370*  	ret
040EC9             1371*  
040EC9             1372*  ld_11_027:
040EC9 21 A3 38 04 1373*  	ld hl,F11_027
040ECD 22 ED B6 04 1374*  	ld (cur_filename),hl
040ED1 11 1A C3 04 1375*  	ld de,filedata
040ED5 01 00 00 01 1376*  	ld bc,65536
040ED9 3E 01       1377*  	ld a,mos_load
040EDB 5B CF       1378*  	RST.LIL 08h
040EDD 21 26 01 00 1379*  	ld hl,BUF_11_027
040EE1 01 0A 00 00 1380*  	ld bc,10
040EE5 11 3E 00 00 1381*  	ld de,62
040EE9 DD 21 6C 02 1382*  	ld ix,620
       00          
040EEE CD 68 B8 04 1383*  	call vdu_load_img
040EF2 C9          1384*  	ret
040EF3             1385*  
040EF3             1386*  ld_11_028:
040EF3 21 B7 38 04 1387*  	ld hl,F11_028
040EF7 22 ED B6 04 1388*  	ld (cur_filename),hl
040EFB 11 1A C3 04 1389*  	ld de,filedata
040EFF 01 00 00 01 1390*  	ld bc,65536
040F03 3E 01       1391*  	ld a,mos_load
040F05 5B CF       1392*  	RST.LIL 08h
040F07 21 27 01 00 1393*  	ld hl,BUF_11_028
040F0B 01 1C 00 00 1394*  	ld bc,28
040F0F 11 40 00 00 1395*  	ld de,64
040F13 DD 21 00 07 1396*  	ld ix,1792
       00          
040F18 CD 68 B8 04 1397*  	call vdu_load_img
040F1C C9          1398*  	ret
040F1D             1399*  
040F1D             1400*  ld_11_029:
040F1D 21 CB 38 04 1401*  	ld hl,F11_029
040F21 22 ED B6 04 1402*  	ld (cur_filename),hl
040F25 11 1A C3 04 1403*  	ld de,filedata
040F29 01 00 00 01 1404*  	ld bc,65536
040F2D 3E 01       1405*  	ld a,mos_load
040F2F 5B CF       1406*  	RST.LIL 08h
040F31 21 28 01 00 1407*  	ld hl,BUF_11_029
040F35 01 2F 00 00 1408*  	ld bc,47
040F39 11 40 00 00 1409*  	ld de,64
040F3D DD 21 C0 0B 1410*  	ld ix,3008
       00          
040F42 CD 68 B8 04 1411*  	call vdu_load_img
040F46 C9          1412*  	ret
040F47             1413*  
040F47             1414*  ld_11_032:
040F47 21 DF 38 04 1415*  	ld hl,F11_032
040F4B 22 ED B6 04 1416*  	ld (cur_filename),hl
040F4F 11 1A C3 04 1417*  	ld de,filedata
040F53 01 00 00 01 1418*  	ld bc,65536
040F57 3E 01       1419*  	ld a,mos_load
040F59 5B CF       1420*  	RST.LIL 08h
040F5B 21 29 01 00 1421*  	ld hl,BUF_11_032
040F5F 01 41 00 00 1422*  	ld bc,65
040F63 11 40 00 00 1423*  	ld de,64
040F67 DD 21 40 10 1424*  	ld ix,4160
       00          
040F6C CD 68 B8 04 1425*  	call vdu_load_img
040F70 C9          1426*  	ret
040F71             1427*  
040F71             1428*  ld_11_035:
040F71 21 F3 38 04 1429*  	ld hl,F11_035
040F75 22 ED B6 04 1430*  	ld (cur_filename),hl
040F79 11 1A C3 04 1431*  	ld de,filedata
040F7D 01 00 00 01 1432*  	ld bc,65536
040F81 3E 01       1433*  	ld a,mos_load
040F83 5B CF       1434*  	RST.LIL 08h
040F85 21 2A 01 00 1435*  	ld hl,BUF_11_035
040F89 01 3F 00 00 1436*  	ld bc,63
040F8D 11 6B 00 00 1437*  	ld de,107
040F91 DD 21 55 1A 1438*  	ld ix,6741
       00          
040F96 CD 68 B8 04 1439*  	call vdu_load_img
040F9A C9          1440*  	ret
040F9B             1441*  
040F9B             1442*  ld_11_036:
040F9B 21 07 39 04 1443*  	ld hl,F11_036
040F9F 22 ED B6 04 1444*  	ld (cur_filename),hl
040FA3 11 1A C3 04 1445*  	ld de,filedata
040FA7 01 00 00 01 1446*  	ld bc,65536
040FAB 3E 01       1447*  	ld a,mos_load
040FAD 5B CF       1448*  	RST.LIL 08h
040FAF 21 2B 01 00 1449*  	ld hl,BUF_11_036
040FB3 01 16 00 00 1450*  	ld bc,22
040FB7 11 6B 00 00 1451*  	ld de,107
040FBB DD 21 32 09 1452*  	ld ix,2354
       00          
040FC0 CD 68 B8 04 1453*  	call vdu_load_img
040FC4 C9          1454*  	ret
040FC5             1455*  
040FC5             1456*  ld_11_037:
040FC5 21 1B 39 04 1457*  	ld hl,F11_037
040FC9 22 ED B6 04 1458*  	ld (cur_filename),hl
040FCD 11 1A C3 04 1459*  	ld de,filedata
040FD1 01 00 00 01 1460*  	ld bc,65536
040FD5 3E 01       1461*  	ld a,mos_load
040FD7 5B CF       1462*  	RST.LIL 08h
040FD9 21 2C 01 00 1463*  	ld hl,BUF_11_037
040FDD 01 15 00 00 1464*  	ld bc,21
040FE1 11 69 00 00 1465*  	ld de,105
040FE5 DD 21 9D 08 1466*  	ld ix,2205
       00          
040FEA CD 68 B8 04 1467*  	call vdu_load_img
040FEE C9          1468*  	ret
040FEF             1469*  
040FEF             1470*  ld_11_038:
040FEF 21 2F 39 04 1471*  	ld hl,F11_038
040FF3 22 ED B6 04 1472*  	ld (cur_filename),hl
040FF7 11 1A C3 04 1473*  	ld de,filedata
040FFB 01 00 00 01 1474*  	ld bc,65536
040FFF 3E 01       1475*  	ld a,mos_load
041001 5B CF       1476*  	RST.LIL 08h
041003 21 2D 01 00 1477*  	ld hl,BUF_11_038
041007 01 3F 00 00 1478*  	ld bc,63
04100B 11 6B 00 00 1479*  	ld de,107
04100F DD 21 55 1A 1480*  	ld ix,6741
       00          
041014 CD 68 B8 04 1481*  	call vdu_load_img
041018 C9          1482*  	ret
041019             1483*  
041019             1484*  ld_11_040:
041019 21 43 39 04 1485*  	ld hl,F11_040
04101D 22 ED B6 04 1486*  	ld (cur_filename),hl
041021 11 1A C3 04 1487*  	ld de,filedata
041025 01 00 00 01 1488*  	ld bc,65536
041029 3E 01       1489*  	ld a,mos_load
04102B 5B CF       1490*  	RST.LIL 08h
04102D 21 2E 01 00 1491*  	ld hl,BUF_11_040
041031 01 6C 00 00 1492*  	ld bc,108
041035 11 6B 00 00 1493*  	ld de,107
041039 DD 21 24 2D 1494*  	ld ix,11556
       00          
04103E CD 68 B8 04 1495*  	call vdu_load_img
041042 C9          1496*  	ret
041043             1497*  
041043             1498*  ld_11_042:
041043 21 57 39 04 1499*  	ld hl,F11_042
041047 22 ED B6 04 1500*  	ld (cur_filename),hl
04104B 11 1A C3 04 1501*  	ld de,filedata
04104F 01 00 00 01 1502*  	ld bc,65536
041053 3E 01       1503*  	ld a,mos_load
041055 5B CF       1504*  	RST.LIL 08h
041057 21 2F 01 00 1505*  	ld hl,BUF_11_042
04105B 01 6A 00 00 1506*  	ld bc,106
04105F 11 A0 00 00 1507*  	ld de,160
041063 DD 21 40 42 1508*  	ld ix,16960
       00          
041068 CD 68 B8 04 1509*  	call vdu_load_img
04106C C9          1510*  	ret
04106D             1511*  
04106D             1512*  ld_11_043:
04106D 21 6B 39 04 1513*  	ld hl,F11_043
041071 22 ED B6 04 1514*  	ld (cur_filename),hl
041075 11 1A C3 04 1515*  	ld de,filedata
041079 01 00 00 01 1516*  	ld bc,65536
04107D 3E 01       1517*  	ld a,mos_load
04107F 5B CF       1518*  	RST.LIL 08h
041081 21 30 01 00 1519*  	ld hl,BUF_11_043
041085 01 6B 00 00 1520*  	ld bc,107
041089 11 A0 00 00 1521*  	ld de,160
04108D DD 21 E0 42 1522*  	ld ix,17120
       00          
041092 CD 68 B8 04 1523*  	call vdu_load_img
041096 C9          1524*  	ret
041097             1525*  
041097             1526*  ld_11_044:
041097 21 7F 39 04 1527*  	ld hl,F11_044
04109B 22 ED B6 04 1528*  	ld (cur_filename),hl
04109F 11 1A C3 04 1529*  	ld de,filedata
0410A3 01 00 00 01 1530*  	ld bc,65536
0410A7 3E 01       1531*  	ld a,mos_load
0410A9 5B CF       1532*  	RST.LIL 08h
0410AB 21 31 01 00 1533*  	ld hl,BUF_11_044
0410AF 01 40 01 00 1534*  	ld bc,320
0410B3 11 A0 00 00 1535*  	ld de,160
0410B7 DD 21 00 C8 1536*  	ld ix,51200
       00          
0410BC CD 68 B8 04 1537*  	call vdu_load_img
0410C0 C9          1538*  	ret
0410C1             1539*  
0410C1             1540*  ld_12_004:
0410C1 21 93 39 04 1541*  	ld hl,F12_004
0410C5 22 ED B6 04 1542*  	ld (cur_filename),hl
0410C9 11 1A C3 04 1543*  	ld de,filedata
0410CD 01 00 00 01 1544*  	ld bc,65536
0410D1 3E 01       1545*  	ld a,mos_load
0410D3 5B CF       1546*  	RST.LIL 08h
0410D5 21 32 01 00 1547*  	ld hl,BUF_12_004
0410D9 01 24 00 00 1548*  	ld bc,36
0410DD 11 23 00 00 1549*  	ld de,35
0410E1 DD 21 EC 04 1550*  	ld ix,1260
       00          
0410E6 CD 68 B8 04 1551*  	call vdu_load_img
0410EA C9          1552*  	ret
0410EB             1553*  
0410EB             1554*  ld_12_009:
0410EB 21 A7 39 04 1555*  	ld hl,F12_009
0410EF 22 ED B6 04 1556*  	ld (cur_filename),hl
0410F3 11 1A C3 04 1557*  	ld de,filedata
0410F7 01 00 00 01 1558*  	ld bc,65536
0410FB 3E 01       1559*  	ld a,mos_load
0410FD 5B CF       1560*  	RST.LIL 08h
0410FF 21 33 01 00 1561*  	ld hl,BUF_12_009
041103 01 23 00 00 1562*  	ld bc,35
041107 11 2D 00 00 1563*  	ld de,45
04110B DD 21 27 06 1564*  	ld ix,1575
       00          
041110 CD 68 B8 04 1565*  	call vdu_load_img
041114 C9          1566*  	ret
041115             1567*  
041115             1568*  ld_12_010:
041115 21 BB 39 04 1569*  	ld hl,F12_010
041119 22 ED B6 04 1570*  	ld (cur_filename),hl
04111D 11 1A C3 04 1571*  	ld de,filedata
041121 01 00 00 01 1572*  	ld bc,65536
041125 3E 01       1573*  	ld a,mos_load
041127 5B CF       1574*  	RST.LIL 08h
041129 21 34 01 00 1575*  	ld hl,BUF_12_010
04112D 01 19 00 00 1576*  	ld bc,25
041131 11 2D 00 00 1577*  	ld de,45
041135 DD 21 65 04 1578*  	ld ix,1125
       00          
04113A CD 68 B8 04 1579*  	call vdu_load_img
04113E C9          1580*  	ret
04113F             1581*  
04113F             1582*  ld_12_011:
04113F 21 CF 39 04 1583*  	ld hl,F12_011
041143 22 ED B6 04 1584*  	ld (cur_filename),hl
041147 11 1A C3 04 1585*  	ld de,filedata
04114B 01 00 00 01 1586*  	ld bc,65536
04114F 3E 01       1587*  	ld a,mos_load
041151 5B CF       1588*  	RST.LIL 08h
041153 21 35 01 00 1589*  	ld hl,BUF_12_011
041157 01 0F 00 00 1590*  	ld bc,15
04115B 11 2D 00 00 1591*  	ld de,45
04115F DD 21 A3 02 1592*  	ld ix,675
       00          
041164 CD 68 B8 04 1593*  	call vdu_load_img
041168 C9          1594*  	ret
041169             1595*  
041169             1596*  ld_12_012:
041169 21 E3 39 04 1597*  	ld hl,F12_012
04116D 22 ED B6 04 1598*  	ld (cur_filename),hl
041171 11 1A C3 04 1599*  	ld de,filedata
041175 01 00 00 01 1600*  	ld bc,65536
041179 3E 01       1601*  	ld a,mos_load
04117B 5B CF       1602*  	RST.LIL 08h
04117D 21 36 01 00 1603*  	ld hl,BUF_12_012
041181 01 05 00 00 1604*  	ld bc,5
041185 11 2D 00 00 1605*  	ld de,45
041189 DD 21 E1 00 1606*  	ld ix,225
       00          
04118E CD 68 B8 04 1607*  	call vdu_load_img
041192 C9          1608*  	ret
041193             1609*  
041193             1610*  ld_12_013:
041193 21 F7 39 04 1611*  	ld hl,F12_013
041197 22 ED B6 04 1612*  	ld (cur_filename),hl
04119B 11 1A C3 04 1613*  	ld de,filedata
04119F 01 00 00 01 1614*  	ld bc,65536
0411A3 3E 01       1615*  	ld a,mos_load
0411A5 5B CF       1616*  	RST.LIL 08h
0411A7 21 37 01 00 1617*  	ld hl,BUF_12_013
0411AB 01 05 00 00 1618*  	ld bc,5
0411AF 11 2B 00 00 1619*  	ld de,43
0411B3 DD 21 D7 00 1620*  	ld ix,215
       00          
0411B8 CD 68 B8 04 1621*  	call vdu_load_img
0411BC C9          1622*  	ret
0411BD             1623*  
0411BD             1624*  ld_12_014:
0411BD 21 0B 3A 04 1625*  	ld hl,F12_014
0411C1 22 ED B6 04 1626*  	ld (cur_filename),hl
0411C5 11 1A C3 04 1627*  	ld de,filedata
0411C9 01 00 00 01 1628*  	ld bc,65536
0411CD 3E 01       1629*  	ld a,mos_load
0411CF 5B CF       1630*  	RST.LIL 08h
0411D1 21 38 01 00 1631*  	ld hl,BUF_12_014
0411D5 01 0F 00 00 1632*  	ld bc,15
0411D9 11 2D 00 00 1633*  	ld de,45
0411DD DD 21 A3 02 1634*  	ld ix,675
       00          
0411E2 CD 68 B8 04 1635*  	call vdu_load_img
0411E6 C9          1636*  	ret
0411E7             1637*  
0411E7             1638*  ld_12_015:
0411E7 21 1F 3A 04 1639*  	ld hl,F12_015
0411EB 22 ED B6 04 1640*  	ld (cur_filename),hl
0411EF 11 1A C3 04 1641*  	ld de,filedata
0411F3 01 00 00 01 1642*  	ld bc,65536
0411F7 3E 01       1643*  	ld a,mos_load
0411F9 5B CF       1644*  	RST.LIL 08h
0411FB 21 39 01 00 1645*  	ld hl,BUF_12_015
0411FF 01 19 00 00 1646*  	ld bc,25
041203 11 2D 00 00 1647*  	ld de,45
041207 DD 21 65 04 1648*  	ld ix,1125
       00          
04120C CD 68 B8 04 1649*  	call vdu_load_img
041210 C9          1650*  	ret
041211             1651*  
041211             1652*  ld_12_016:
041211 21 33 3A 04 1653*  	ld hl,F12_016
041215 22 ED B6 04 1654*  	ld (cur_filename),hl
041219 11 1A C3 04 1655*  	ld de,filedata
04121D 01 00 00 01 1656*  	ld bc,65536
041221 3E 01       1657*  	ld a,mos_load
041223 5B CF       1658*  	RST.LIL 08h
041225 21 3A 01 00 1659*  	ld hl,BUF_12_016
041229 01 23 00 00 1660*  	ld bc,35
04122D 11 2D 00 00 1661*  	ld de,45
041231 DD 21 27 06 1662*  	ld ix,1575
       00          
041236 CD 68 B8 04 1663*  	call vdu_load_img
04123A C9          1664*  	ret
04123B             1665*  
04123B             1666*  ld_12_020:
04123B 21 47 3A 04 1667*  	ld hl,F12_020
04123F 22 ED B6 04 1668*  	ld (cur_filename),hl
041243 11 1A C3 04 1669*  	ld de,filedata
041247 01 00 00 01 1670*  	ld bc,65536
04124B 3E 01       1671*  	ld a,mos_load
04124D 5B CF       1672*  	RST.LIL 08h
04124F 21 3B 01 00 1673*  	ld hl,BUF_12_020
041253 01 2E 00 00 1674*  	ld bc,46
041257 11 2D 00 00 1675*  	ld de,45
04125B DD 21 16 08 1676*  	ld ix,2070
       00          
041260 CD 68 B8 04 1677*  	call vdu_load_img
041264 C9          1678*  	ret
041265             1679*  
041265             1680*  ld_12_024:
041265 21 5B 3A 04 1681*  	ld hl,F12_024
041269 22 ED B6 04 1682*  	ld (cur_filename),hl
04126D 11 1A C3 04 1683*  	ld de,filedata
041271 01 00 00 01 1684*  	ld bc,65536
041275 3E 01       1685*  	ld a,mos_load
041277 5B CF       1686*  	RST.LIL 08h
041279 21 3C 01 00 1687*  	ld hl,BUF_12_024
04127D 01 2E 00 00 1688*  	ld bc,46
041281 11 40 00 00 1689*  	ld de,64
041285 DD 21 80 0B 1690*  	ld ix,2944
       00          
04128A CD 68 B8 04 1691*  	call vdu_load_img
04128E C9          1692*  	ret
04128F             1693*  
04128F             1694*  ld_12_025:
04128F 21 6F 3A 04 1695*  	ld hl,F12_025
041293 22 ED B6 04 1696*  	ld (cur_filename),hl
041297 11 1A C3 04 1697*  	ld de,filedata
04129B 01 00 00 01 1698*  	ld bc,65536
04129F 3E 01       1699*  	ld a,mos_load
0412A1 5B CF       1700*  	RST.LIL 08h
0412A3 21 3D 01 00 1701*  	ld hl,BUF_12_025
0412A7 01 1C 00 00 1702*  	ld bc,28
0412AB 11 40 00 00 1703*  	ld de,64
0412AF DD 21 00 07 1704*  	ld ix,1792
       00          
0412B4 CD 68 B8 04 1705*  	call vdu_load_img
0412B8 C9          1706*  	ret
0412B9             1707*  
0412B9             1708*  ld_12_026:
0412B9 21 83 3A 04 1709*  	ld hl,F12_026
0412BD 22 ED B6 04 1710*  	ld (cur_filename),hl
0412C1 11 1A C3 04 1711*  	ld de,filedata
0412C5 01 00 00 01 1712*  	ld bc,65536
0412C9 3E 01       1713*  	ld a,mos_load
0412CB 5B CF       1714*  	RST.LIL 08h
0412CD 21 3E 01 00 1715*  	ld hl,BUF_12_026
0412D1 01 09 00 00 1716*  	ld bc,9
0412D5 11 40 00 00 1717*  	ld de,64
0412D9 DD 21 40 02 1718*  	ld ix,576
       00          
0412DE CD 68 B8 04 1719*  	call vdu_load_img
0412E2 C9          1720*  	ret
0412E3             1721*  
0412E3             1722*  ld_12_027:
0412E3 21 97 3A 04 1723*  	ld hl,F12_027
0412E7 22 ED B6 04 1724*  	ld (cur_filename),hl
0412EB 11 1A C3 04 1725*  	ld de,filedata
0412EF 01 00 00 01 1726*  	ld bc,65536
0412F3 3E 01       1727*  	ld a,mos_load
0412F5 5B CF       1728*  	RST.LIL 08h
0412F7 21 3F 01 00 1729*  	ld hl,BUF_12_027
0412FB 01 0A 00 00 1730*  	ld bc,10
0412FF 11 3E 00 00 1731*  	ld de,62
041303 DD 21 6C 02 1732*  	ld ix,620
       00          
041308 CD 68 B8 04 1733*  	call vdu_load_img
04130C C9          1734*  	ret
04130D             1735*  
04130D             1736*  ld_12_028:
04130D 21 AB 3A 04 1737*  	ld hl,F12_028
041311 22 ED B6 04 1738*  	ld (cur_filename),hl
041315 11 1A C3 04 1739*  	ld de,filedata
041319 01 00 00 01 1740*  	ld bc,65536
04131D 3E 01       1741*  	ld a,mos_load
04131F 5B CF       1742*  	RST.LIL 08h
041321 21 40 01 00 1743*  	ld hl,BUF_12_028
041325 01 1C 00 00 1744*  	ld bc,28
041329 11 40 00 00 1745*  	ld de,64
04132D DD 21 00 07 1746*  	ld ix,1792
       00          
041332 CD 68 B8 04 1747*  	call vdu_load_img
041336 C9          1748*  	ret
041337             1749*  
041337             1750*  ld_12_029:
041337 21 BF 3A 04 1751*  	ld hl,F12_029
04133B 22 ED B6 04 1752*  	ld (cur_filename),hl
04133F 11 1A C3 04 1753*  	ld de,filedata
041343 01 00 00 01 1754*  	ld bc,65536
041347 3E 01       1755*  	ld a,mos_load
041349 5B CF       1756*  	RST.LIL 08h
04134B 21 41 01 00 1757*  	ld hl,BUF_12_029
04134F 01 2F 00 00 1758*  	ld bc,47
041353 11 40 00 00 1759*  	ld de,64
041357 DD 21 C0 0B 1760*  	ld ix,3008
       00          
04135C CD 68 B8 04 1761*  	call vdu_load_img
041360 C9          1762*  	ret
041361             1763*  
041361             1764*  ld_12_032:
041361 21 D3 3A 04 1765*  	ld hl,F12_032
041365 22 ED B6 04 1766*  	ld (cur_filename),hl
041369 11 1A C3 04 1767*  	ld de,filedata
04136D 01 00 00 01 1768*  	ld bc,65536
041371 3E 01       1769*  	ld a,mos_load
041373 5B CF       1770*  	RST.LIL 08h
041375 21 42 01 00 1771*  	ld hl,BUF_12_032
041379 01 41 00 00 1772*  	ld bc,65
04137D 11 40 00 00 1773*  	ld de,64
041381 DD 21 40 10 1774*  	ld ix,4160
       00          
041386 CD 68 B8 04 1775*  	call vdu_load_img
04138A C9          1776*  	ret
04138B             1777*  
04138B             1778*  ld_12_035:
04138B 21 E7 3A 04 1779*  	ld hl,F12_035
04138F 22 ED B6 04 1780*  	ld (cur_filename),hl
041393 11 1A C3 04 1781*  	ld de,filedata
041397 01 00 00 01 1782*  	ld bc,65536
04139B 3E 01       1783*  	ld a,mos_load
04139D 5B CF       1784*  	RST.LIL 08h
04139F 21 43 01 00 1785*  	ld hl,BUF_12_035
0413A3 01 3F 00 00 1786*  	ld bc,63
0413A7 11 6B 00 00 1787*  	ld de,107
0413AB DD 21 55 1A 1788*  	ld ix,6741
       00          
0413B0 CD 68 B8 04 1789*  	call vdu_load_img
0413B4 C9          1790*  	ret
0413B5             1791*  
0413B5             1792*  ld_12_036:
0413B5 21 FB 3A 04 1793*  	ld hl,F12_036
0413B9 22 ED B6 04 1794*  	ld (cur_filename),hl
0413BD 11 1A C3 04 1795*  	ld de,filedata
0413C1 01 00 00 01 1796*  	ld bc,65536
0413C5 3E 01       1797*  	ld a,mos_load
0413C7 5B CF       1798*  	RST.LIL 08h
0413C9 21 44 01 00 1799*  	ld hl,BUF_12_036
0413CD 01 16 00 00 1800*  	ld bc,22
0413D1 11 6B 00 00 1801*  	ld de,107
0413D5 DD 21 32 09 1802*  	ld ix,2354
       00          
0413DA CD 68 B8 04 1803*  	call vdu_load_img
0413DE C9          1804*  	ret
0413DF             1805*  
0413DF             1806*  ld_12_037:
0413DF 21 0F 3B 04 1807*  	ld hl,F12_037
0413E3 22 ED B6 04 1808*  	ld (cur_filename),hl
0413E7 11 1A C3 04 1809*  	ld de,filedata
0413EB 01 00 00 01 1810*  	ld bc,65536
0413EF 3E 01       1811*  	ld a,mos_load
0413F1 5B CF       1812*  	RST.LIL 08h
0413F3 21 45 01 00 1813*  	ld hl,BUF_12_037
0413F7 01 15 00 00 1814*  	ld bc,21
0413FB 11 69 00 00 1815*  	ld de,105
0413FF DD 21 9D 08 1816*  	ld ix,2205
       00          
041404 CD 68 B8 04 1817*  	call vdu_load_img
041408 C9          1818*  	ret
041409             1819*  
041409             1820*  ld_12_038:
041409 21 23 3B 04 1821*  	ld hl,F12_038
04140D 22 ED B6 04 1822*  	ld (cur_filename),hl
041411 11 1A C3 04 1823*  	ld de,filedata
041415 01 00 00 01 1824*  	ld bc,65536
041419 3E 01       1825*  	ld a,mos_load
04141B 5B CF       1826*  	RST.LIL 08h
04141D 21 46 01 00 1827*  	ld hl,BUF_12_038
041421 01 3F 00 00 1828*  	ld bc,63
041425 11 6B 00 00 1829*  	ld de,107
041429 DD 21 55 1A 1830*  	ld ix,6741
       00          
04142E CD 68 B8 04 1831*  	call vdu_load_img
041432 C9          1832*  	ret
041433             1833*  
041433             1834*  ld_12_040:
041433 21 37 3B 04 1835*  	ld hl,F12_040
041437 22 ED B6 04 1836*  	ld (cur_filename),hl
04143B 11 1A C3 04 1837*  	ld de,filedata
04143F 01 00 00 01 1838*  	ld bc,65536
041443 3E 01       1839*  	ld a,mos_load
041445 5B CF       1840*  	RST.LIL 08h
041447 21 47 01 00 1841*  	ld hl,BUF_12_040
04144B 01 6C 00 00 1842*  	ld bc,108
04144F 11 6B 00 00 1843*  	ld de,107
041453 DD 21 24 2D 1844*  	ld ix,11556
       00          
041458 CD 68 B8 04 1845*  	call vdu_load_img
04145C C9          1846*  	ret
04145D             1847*  
04145D             1848*  ld_12_042:
04145D 21 4B 3B 04 1849*  	ld hl,F12_042
041461 22 ED B6 04 1850*  	ld (cur_filename),hl
041465 11 1A C3 04 1851*  	ld de,filedata
041469 01 00 00 01 1852*  	ld bc,65536
04146D 3E 01       1853*  	ld a,mos_load
04146F 5B CF       1854*  	RST.LIL 08h
041471 21 48 01 00 1855*  	ld hl,BUF_12_042
041475 01 6A 00 00 1856*  	ld bc,106
041479 11 A0 00 00 1857*  	ld de,160
04147D DD 21 40 42 1858*  	ld ix,16960
       00          
041482 CD 68 B8 04 1859*  	call vdu_load_img
041486 C9          1860*  	ret
041487             1861*  
041487             1862*  ld_12_043:
041487 21 5F 3B 04 1863*  	ld hl,F12_043
04148B 22 ED B6 04 1864*  	ld (cur_filename),hl
04148F 11 1A C3 04 1865*  	ld de,filedata
041493 01 00 00 01 1866*  	ld bc,65536
041497 3E 01       1867*  	ld a,mos_load
041499 5B CF       1868*  	RST.LIL 08h
04149B 21 49 01 00 1869*  	ld hl,BUF_12_043
04149F 01 6B 00 00 1870*  	ld bc,107
0414A3 11 A0 00 00 1871*  	ld de,160
0414A7 DD 21 E0 42 1872*  	ld ix,17120
       00          
0414AC CD 68 B8 04 1873*  	call vdu_load_img
0414B0 C9          1874*  	ret
0414B1             1875*  
0414B1             1876*  ld_12_044:
0414B1 21 73 3B 04 1877*  	ld hl,F12_044
0414B5 22 ED B6 04 1878*  	ld (cur_filename),hl
0414B9 11 1A C3 04 1879*  	ld de,filedata
0414BD 01 00 00 01 1880*  	ld bc,65536
0414C1 3E 01       1881*  	ld a,mos_load
0414C3 5B CF       1882*  	RST.LIL 08h
0414C5 21 4A 01 00 1883*  	ld hl,BUF_12_044
0414C9 01 40 01 00 1884*  	ld bc,320
0414CD 11 A0 00 00 1885*  	ld de,160
0414D1 DD 21 00 C8 1886*  	ld ix,51200
       00          
0414D6 CD 68 B8 04 1887*  	call vdu_load_img
0414DA C9          1888*  	ret
0414DB             1889*  
0414DB             1890*  ld_13_004:
0414DB 21 87 3B 04 1891*  	ld hl,F13_004
0414DF 22 ED B6 04 1892*  	ld (cur_filename),hl
0414E3 11 1A C3 04 1893*  	ld de,filedata
0414E7 01 00 00 01 1894*  	ld bc,65536
0414EB 3E 01       1895*  	ld a,mos_load
0414ED 5B CF       1896*  	RST.LIL 08h
0414EF 21 4B 01 00 1897*  	ld hl,BUF_13_004
0414F3 01 24 00 00 1898*  	ld bc,36
0414F7 11 23 00 00 1899*  	ld de,35
0414FB DD 21 EC 04 1900*  	ld ix,1260
       00          
041500 CD 68 B8 04 1901*  	call vdu_load_img
041504 C9          1902*  	ret
041505             1903*  
041505             1904*  ld_13_009:
041505 21 9B 3B 04 1905*  	ld hl,F13_009
041509 22 ED B6 04 1906*  	ld (cur_filename),hl
04150D 11 1A C3 04 1907*  	ld de,filedata
041511 01 00 00 01 1908*  	ld bc,65536
041515 3E 01       1909*  	ld a,mos_load
041517 5B CF       1910*  	RST.LIL 08h
041519 21 4C 01 00 1911*  	ld hl,BUF_13_009
04151D 01 23 00 00 1912*  	ld bc,35
041521 11 2D 00 00 1913*  	ld de,45
041525 DD 21 27 06 1914*  	ld ix,1575
       00          
04152A CD 68 B8 04 1915*  	call vdu_load_img
04152E C9          1916*  	ret
04152F             1917*  
04152F             1918*  ld_13_010:
04152F 21 AF 3B 04 1919*  	ld hl,F13_010
041533 22 ED B6 04 1920*  	ld (cur_filename),hl
041537 11 1A C3 04 1921*  	ld de,filedata
04153B 01 00 00 01 1922*  	ld bc,65536
04153F 3E 01       1923*  	ld a,mos_load
041541 5B CF       1924*  	RST.LIL 08h
041543 21 4D 01 00 1925*  	ld hl,BUF_13_010
041547 01 19 00 00 1926*  	ld bc,25
04154B 11 2D 00 00 1927*  	ld de,45
04154F DD 21 65 04 1928*  	ld ix,1125
       00          
041554 CD 68 B8 04 1929*  	call vdu_load_img
041558 C9          1930*  	ret
041559             1931*  
041559             1932*  ld_13_011:
041559 21 C3 3B 04 1933*  	ld hl,F13_011
04155D 22 ED B6 04 1934*  	ld (cur_filename),hl
041561 11 1A C3 04 1935*  	ld de,filedata
041565 01 00 00 01 1936*  	ld bc,65536
041569 3E 01       1937*  	ld a,mos_load
04156B 5B CF       1938*  	RST.LIL 08h
04156D 21 4E 01 00 1939*  	ld hl,BUF_13_011
041571 01 0F 00 00 1940*  	ld bc,15
041575 11 2D 00 00 1941*  	ld de,45
041579 DD 21 A3 02 1942*  	ld ix,675
       00          
04157E CD 68 B8 04 1943*  	call vdu_load_img
041582 C9          1944*  	ret
041583             1945*  
041583             1946*  ld_13_012:
041583 21 D7 3B 04 1947*  	ld hl,F13_012
041587 22 ED B6 04 1948*  	ld (cur_filename),hl
04158B 11 1A C3 04 1949*  	ld de,filedata
04158F 01 00 00 01 1950*  	ld bc,65536
041593 3E 01       1951*  	ld a,mos_load
041595 5B CF       1952*  	RST.LIL 08h
041597 21 4F 01 00 1953*  	ld hl,BUF_13_012
04159B 01 05 00 00 1954*  	ld bc,5
04159F 11 2D 00 00 1955*  	ld de,45
0415A3 DD 21 E1 00 1956*  	ld ix,225
       00          
0415A8 CD 68 B8 04 1957*  	call vdu_load_img
0415AC C9          1958*  	ret
0415AD             1959*  
0415AD             1960*  ld_13_013:
0415AD 21 EB 3B 04 1961*  	ld hl,F13_013
0415B1 22 ED B6 04 1962*  	ld (cur_filename),hl
0415B5 11 1A C3 04 1963*  	ld de,filedata
0415B9 01 00 00 01 1964*  	ld bc,65536
0415BD 3E 01       1965*  	ld a,mos_load
0415BF 5B CF       1966*  	RST.LIL 08h
0415C1 21 50 01 00 1967*  	ld hl,BUF_13_013
0415C5 01 05 00 00 1968*  	ld bc,5
0415C9 11 2B 00 00 1969*  	ld de,43
0415CD DD 21 D7 00 1970*  	ld ix,215
       00          
0415D2 CD 68 B8 04 1971*  	call vdu_load_img
0415D6 C9          1972*  	ret
0415D7             1973*  
0415D7             1974*  ld_13_014:
0415D7 21 FF 3B 04 1975*  	ld hl,F13_014
0415DB 22 ED B6 04 1976*  	ld (cur_filename),hl
0415DF 11 1A C3 04 1977*  	ld de,filedata
0415E3 01 00 00 01 1978*  	ld bc,65536
0415E7 3E 01       1979*  	ld a,mos_load
0415E9 5B CF       1980*  	RST.LIL 08h
0415EB 21 51 01 00 1981*  	ld hl,BUF_13_014
0415EF 01 0F 00 00 1982*  	ld bc,15
0415F3 11 2D 00 00 1983*  	ld de,45
0415F7 DD 21 A3 02 1984*  	ld ix,675
       00          
0415FC CD 68 B8 04 1985*  	call vdu_load_img
041600 C9          1986*  	ret
041601             1987*  
041601             1988*  ld_13_015:
041601 21 13 3C 04 1989*  	ld hl,F13_015
041605 22 ED B6 04 1990*  	ld (cur_filename),hl
041609 11 1A C3 04 1991*  	ld de,filedata
04160D 01 00 00 01 1992*  	ld bc,65536
041611 3E 01       1993*  	ld a,mos_load
041613 5B CF       1994*  	RST.LIL 08h
041615 21 52 01 00 1995*  	ld hl,BUF_13_015
041619 01 19 00 00 1996*  	ld bc,25
04161D 11 2D 00 00 1997*  	ld de,45
041621 DD 21 65 04 1998*  	ld ix,1125
       00          
041626 CD 68 B8 04 1999*  	call vdu_load_img
04162A C9          2000*  	ret
04162B             2001*  
04162B             2002*  ld_13_016:
04162B 21 27 3C 04 2003*  	ld hl,F13_016
04162F 22 ED B6 04 2004*  	ld (cur_filename),hl
041633 11 1A C3 04 2005*  	ld de,filedata
041637 01 00 00 01 2006*  	ld bc,65536
04163B 3E 01       2007*  	ld a,mos_load
04163D 5B CF       2008*  	RST.LIL 08h
04163F 21 53 01 00 2009*  	ld hl,BUF_13_016
041643 01 23 00 00 2010*  	ld bc,35
041647 11 2D 00 00 2011*  	ld de,45
04164B DD 21 27 06 2012*  	ld ix,1575
       00          
041650 CD 68 B8 04 2013*  	call vdu_load_img
041654 C9          2014*  	ret
041655             2015*  
041655             2016*  ld_13_020:
041655 21 3B 3C 04 2017*  	ld hl,F13_020
041659 22 ED B6 04 2018*  	ld (cur_filename),hl
04165D 11 1A C3 04 2019*  	ld de,filedata
041661 01 00 00 01 2020*  	ld bc,65536
041665 3E 01       2021*  	ld a,mos_load
041667 5B CF       2022*  	RST.LIL 08h
041669 21 54 01 00 2023*  	ld hl,BUF_13_020
04166D 01 2E 00 00 2024*  	ld bc,46
041671 11 2D 00 00 2025*  	ld de,45
041675 DD 21 16 08 2026*  	ld ix,2070
       00          
04167A CD 68 B8 04 2027*  	call vdu_load_img
04167E C9          2028*  	ret
04167F             2029*  
04167F             2030*  ld_13_024:
04167F 21 4F 3C 04 2031*  	ld hl,F13_024
041683 22 ED B6 04 2032*  	ld (cur_filename),hl
041687 11 1A C3 04 2033*  	ld de,filedata
04168B 01 00 00 01 2034*  	ld bc,65536
04168F 3E 01       2035*  	ld a,mos_load
041691 5B CF       2036*  	RST.LIL 08h
041693 21 55 01 00 2037*  	ld hl,BUF_13_024
041697 01 2E 00 00 2038*  	ld bc,46
04169B 11 40 00 00 2039*  	ld de,64
04169F DD 21 80 0B 2040*  	ld ix,2944
       00          
0416A4 CD 68 B8 04 2041*  	call vdu_load_img
0416A8 C9          2042*  	ret
0416A9             2043*  
0416A9             2044*  ld_13_025:
0416A9 21 63 3C 04 2045*  	ld hl,F13_025
0416AD 22 ED B6 04 2046*  	ld (cur_filename),hl
0416B1 11 1A C3 04 2047*  	ld de,filedata
0416B5 01 00 00 01 2048*  	ld bc,65536
0416B9 3E 01       2049*  	ld a,mos_load
0416BB 5B CF       2050*  	RST.LIL 08h
0416BD 21 56 01 00 2051*  	ld hl,BUF_13_025
0416C1 01 1C 00 00 2052*  	ld bc,28
0416C5 11 40 00 00 2053*  	ld de,64
0416C9 DD 21 00 07 2054*  	ld ix,1792
       00          
0416CE CD 68 B8 04 2055*  	call vdu_load_img
0416D2 C9          2056*  	ret
0416D3             2057*  
0416D3             2058*  ld_13_026:
0416D3 21 77 3C 04 2059*  	ld hl,F13_026
0416D7 22 ED B6 04 2060*  	ld (cur_filename),hl
0416DB 11 1A C3 04 2061*  	ld de,filedata
0416DF 01 00 00 01 2062*  	ld bc,65536
0416E3 3E 01       2063*  	ld a,mos_load
0416E5 5B CF       2064*  	RST.LIL 08h
0416E7 21 57 01 00 2065*  	ld hl,BUF_13_026
0416EB 01 09 00 00 2066*  	ld bc,9
0416EF 11 40 00 00 2067*  	ld de,64
0416F3 DD 21 40 02 2068*  	ld ix,576
       00          
0416F8 CD 68 B8 04 2069*  	call vdu_load_img
0416FC C9          2070*  	ret
0416FD             2071*  
0416FD             2072*  ld_13_027:
0416FD 21 8B 3C 04 2073*  	ld hl,F13_027
041701 22 ED B6 04 2074*  	ld (cur_filename),hl
041705 11 1A C3 04 2075*  	ld de,filedata
041709 01 00 00 01 2076*  	ld bc,65536
04170D 3E 01       2077*  	ld a,mos_load
04170F 5B CF       2078*  	RST.LIL 08h
041711 21 58 01 00 2079*  	ld hl,BUF_13_027
041715 01 0A 00 00 2080*  	ld bc,10
041719 11 3E 00 00 2081*  	ld de,62
04171D DD 21 6C 02 2082*  	ld ix,620
       00          
041722 CD 68 B8 04 2083*  	call vdu_load_img
041726 C9          2084*  	ret
041727             2085*  
041727             2086*  ld_13_028:
041727 21 9F 3C 04 2087*  	ld hl,F13_028
04172B 22 ED B6 04 2088*  	ld (cur_filename),hl
04172F 11 1A C3 04 2089*  	ld de,filedata
041733 01 00 00 01 2090*  	ld bc,65536
041737 3E 01       2091*  	ld a,mos_load
041739 5B CF       2092*  	RST.LIL 08h
04173B 21 59 01 00 2093*  	ld hl,BUF_13_028
04173F 01 1C 00 00 2094*  	ld bc,28
041743 11 40 00 00 2095*  	ld de,64
041747 DD 21 00 07 2096*  	ld ix,1792
       00          
04174C CD 68 B8 04 2097*  	call vdu_load_img
041750 C9          2098*  	ret
041751             2099*  
041751             2100*  ld_13_029:
041751 21 B3 3C 04 2101*  	ld hl,F13_029
041755 22 ED B6 04 2102*  	ld (cur_filename),hl
041759 11 1A C3 04 2103*  	ld de,filedata
04175D 01 00 00 01 2104*  	ld bc,65536
041761 3E 01       2105*  	ld a,mos_load
041763 5B CF       2106*  	RST.LIL 08h
041765 21 5A 01 00 2107*  	ld hl,BUF_13_029
041769 01 2F 00 00 2108*  	ld bc,47
04176D 11 40 00 00 2109*  	ld de,64
041771 DD 21 C0 0B 2110*  	ld ix,3008
       00          
041776 CD 68 B8 04 2111*  	call vdu_load_img
04177A C9          2112*  	ret
04177B             2113*  
04177B             2114*  ld_13_032:
04177B 21 C7 3C 04 2115*  	ld hl,F13_032
04177F 22 ED B6 04 2116*  	ld (cur_filename),hl
041783 11 1A C3 04 2117*  	ld de,filedata
041787 01 00 00 01 2118*  	ld bc,65536
04178B 3E 01       2119*  	ld a,mos_load
04178D 5B CF       2120*  	RST.LIL 08h
04178F 21 5B 01 00 2121*  	ld hl,BUF_13_032
041793 01 41 00 00 2122*  	ld bc,65
041797 11 40 00 00 2123*  	ld de,64
04179B DD 21 40 10 2124*  	ld ix,4160
       00          
0417A0 CD 68 B8 04 2125*  	call vdu_load_img
0417A4 C9          2126*  	ret
0417A5             2127*  
0417A5             2128*  ld_13_035:
0417A5 21 DB 3C 04 2129*  	ld hl,F13_035
0417A9 22 ED B6 04 2130*  	ld (cur_filename),hl
0417AD 11 1A C3 04 2131*  	ld de,filedata
0417B1 01 00 00 01 2132*  	ld bc,65536
0417B5 3E 01       2133*  	ld a,mos_load
0417B7 5B CF       2134*  	RST.LIL 08h
0417B9 21 5C 01 00 2135*  	ld hl,BUF_13_035
0417BD 01 3F 00 00 2136*  	ld bc,63
0417C1 11 6B 00 00 2137*  	ld de,107
0417C5 DD 21 55 1A 2138*  	ld ix,6741
       00          
0417CA CD 68 B8 04 2139*  	call vdu_load_img
0417CE C9          2140*  	ret
0417CF             2141*  
0417CF             2142*  ld_13_036:
0417CF 21 EF 3C 04 2143*  	ld hl,F13_036
0417D3 22 ED B6 04 2144*  	ld (cur_filename),hl
0417D7 11 1A C3 04 2145*  	ld de,filedata
0417DB 01 00 00 01 2146*  	ld bc,65536
0417DF 3E 01       2147*  	ld a,mos_load
0417E1 5B CF       2148*  	RST.LIL 08h
0417E3 21 5D 01 00 2149*  	ld hl,BUF_13_036
0417E7 01 16 00 00 2150*  	ld bc,22
0417EB 11 6B 00 00 2151*  	ld de,107
0417EF DD 21 32 09 2152*  	ld ix,2354
       00          
0417F4 CD 68 B8 04 2153*  	call vdu_load_img
0417F8 C9          2154*  	ret
0417F9             2155*  
0417F9             2156*  ld_13_037:
0417F9 21 03 3D 04 2157*  	ld hl,F13_037
0417FD 22 ED B6 04 2158*  	ld (cur_filename),hl
041801 11 1A C3 04 2159*  	ld de,filedata
041805 01 00 00 01 2160*  	ld bc,65536
041809 3E 01       2161*  	ld a,mos_load
04180B 5B CF       2162*  	RST.LIL 08h
04180D 21 5E 01 00 2163*  	ld hl,BUF_13_037
041811 01 15 00 00 2164*  	ld bc,21
041815 11 69 00 00 2165*  	ld de,105
041819 DD 21 9D 08 2166*  	ld ix,2205
       00          
04181E CD 68 B8 04 2167*  	call vdu_load_img
041822 C9          2168*  	ret
041823             2169*  
041823             2170*  ld_13_038:
041823 21 17 3D 04 2171*  	ld hl,F13_038
041827 22 ED B6 04 2172*  	ld (cur_filename),hl
04182B 11 1A C3 04 2173*  	ld de,filedata
04182F 01 00 00 01 2174*  	ld bc,65536
041833 3E 01       2175*  	ld a,mos_load
041835 5B CF       2176*  	RST.LIL 08h
041837 21 5F 01 00 2177*  	ld hl,BUF_13_038
04183B 01 3F 00 00 2178*  	ld bc,63
04183F 11 6B 00 00 2179*  	ld de,107
041843 DD 21 55 1A 2180*  	ld ix,6741
       00          
041848 CD 68 B8 04 2181*  	call vdu_load_img
04184C C9          2182*  	ret
04184D             2183*  
04184D             2184*  ld_13_040:
04184D 21 2B 3D 04 2185*  	ld hl,F13_040
041851 22 ED B6 04 2186*  	ld (cur_filename),hl
041855 11 1A C3 04 2187*  	ld de,filedata
041859 01 00 00 01 2188*  	ld bc,65536
04185D 3E 01       2189*  	ld a,mos_load
04185F 5B CF       2190*  	RST.LIL 08h
041861 21 60 01 00 2191*  	ld hl,BUF_13_040
041865 01 6C 00 00 2192*  	ld bc,108
041869 11 6B 00 00 2193*  	ld de,107
04186D DD 21 24 2D 2194*  	ld ix,11556
       00          
041872 CD 68 B8 04 2195*  	call vdu_load_img
041876 C9          2196*  	ret
041877             2197*  
041877             2198*  ld_13_042:
041877 21 3F 3D 04 2199*  	ld hl,F13_042
04187B 22 ED B6 04 2200*  	ld (cur_filename),hl
04187F 11 1A C3 04 2201*  	ld de,filedata
041883 01 00 00 01 2202*  	ld bc,65536
041887 3E 01       2203*  	ld a,mos_load
041889 5B CF       2204*  	RST.LIL 08h
04188B 21 61 01 00 2205*  	ld hl,BUF_13_042
04188F 01 6A 00 00 2206*  	ld bc,106
041893 11 A0 00 00 2207*  	ld de,160
041897 DD 21 40 42 2208*  	ld ix,16960
       00          
04189C CD 68 B8 04 2209*  	call vdu_load_img
0418A0 C9          2210*  	ret
0418A1             2211*  
0418A1             2212*  ld_13_043:
0418A1 21 53 3D 04 2213*  	ld hl,F13_043
0418A5 22 ED B6 04 2214*  	ld (cur_filename),hl
0418A9 11 1A C3 04 2215*  	ld de,filedata
0418AD 01 00 00 01 2216*  	ld bc,65536
0418B1 3E 01       2217*  	ld a,mos_load
0418B3 5B CF       2218*  	RST.LIL 08h
0418B5 21 62 01 00 2219*  	ld hl,BUF_13_043
0418B9 01 6B 00 00 2220*  	ld bc,107
0418BD 11 A0 00 00 2221*  	ld de,160
0418C1 DD 21 E0 42 2222*  	ld ix,17120
       00          
0418C6 CD 68 B8 04 2223*  	call vdu_load_img
0418CA C9          2224*  	ret
0418CB             2225*  
0418CB             2226*  ld_13_044:
0418CB 21 67 3D 04 2227*  	ld hl,F13_044
0418CF 22 ED B6 04 2228*  	ld (cur_filename),hl
0418D3 11 1A C3 04 2229*  	ld de,filedata
0418D7 01 00 00 01 2230*  	ld bc,65536
0418DB 3E 01       2231*  	ld a,mos_load
0418DD 5B CF       2232*  	RST.LIL 08h
0418DF 21 63 01 00 2233*  	ld hl,BUF_13_044
0418E3 01 40 01 00 2234*  	ld bc,320
0418E7 11 A0 00 00 2235*  	ld de,160
0418EB DD 21 00 C8 2236*  	ld ix,51200
       00          
0418F0 CD 68 B8 04 2237*  	call vdu_load_img
0418F4 C9          2238*  	ret
0418F5             2239*  
0418F5             2240*  ld_14_004:
0418F5 21 7B 3D 04 2241*  	ld hl,F14_004
0418F9 22 ED B6 04 2242*  	ld (cur_filename),hl
0418FD 11 1A C3 04 2243*  	ld de,filedata
041901 01 00 00 01 2244*  	ld bc,65536
041905 3E 01       2245*  	ld a,mos_load
041907 5B CF       2246*  	RST.LIL 08h
041909 21 64 01 00 2247*  	ld hl,BUF_14_004
04190D 01 24 00 00 2248*  	ld bc,36
041911 11 23 00 00 2249*  	ld de,35
041915 DD 21 EC 04 2250*  	ld ix,1260
       00          
04191A CD 68 B8 04 2251*  	call vdu_load_img
04191E C9          2252*  	ret
04191F             2253*  
04191F             2254*  ld_14_009:
04191F 21 8F 3D 04 2255*  	ld hl,F14_009
041923 22 ED B6 04 2256*  	ld (cur_filename),hl
041927 11 1A C3 04 2257*  	ld de,filedata
04192B 01 00 00 01 2258*  	ld bc,65536
04192F 3E 01       2259*  	ld a,mos_load
041931 5B CF       2260*  	RST.LIL 08h
041933 21 65 01 00 2261*  	ld hl,BUF_14_009
041937 01 23 00 00 2262*  	ld bc,35
04193B 11 2D 00 00 2263*  	ld de,45
04193F DD 21 27 06 2264*  	ld ix,1575
       00          
041944 CD 68 B8 04 2265*  	call vdu_load_img
041948 C9          2266*  	ret
041949             2267*  
041949             2268*  ld_14_010:
041949 21 A3 3D 04 2269*  	ld hl,F14_010
04194D 22 ED B6 04 2270*  	ld (cur_filename),hl
041951 11 1A C3 04 2271*  	ld de,filedata
041955 01 00 00 01 2272*  	ld bc,65536
041959 3E 01       2273*  	ld a,mos_load
04195B 5B CF       2274*  	RST.LIL 08h
04195D 21 66 01 00 2275*  	ld hl,BUF_14_010
041961 01 19 00 00 2276*  	ld bc,25
041965 11 2D 00 00 2277*  	ld de,45
041969 DD 21 65 04 2278*  	ld ix,1125
       00          
04196E CD 68 B8 04 2279*  	call vdu_load_img
041972 C9          2280*  	ret
041973             2281*  
041973             2282*  ld_14_011:
041973 21 B7 3D 04 2283*  	ld hl,F14_011
041977 22 ED B6 04 2284*  	ld (cur_filename),hl
04197B 11 1A C3 04 2285*  	ld de,filedata
04197F 01 00 00 01 2286*  	ld bc,65536
041983 3E 01       2287*  	ld a,mos_load
041985 5B CF       2288*  	RST.LIL 08h
041987 21 67 01 00 2289*  	ld hl,BUF_14_011
04198B 01 0F 00 00 2290*  	ld bc,15
04198F 11 2D 00 00 2291*  	ld de,45
041993 DD 21 A3 02 2292*  	ld ix,675
       00          
041998 CD 68 B8 04 2293*  	call vdu_load_img
04199C C9          2294*  	ret
04199D             2295*  
04199D             2296*  ld_14_012:
04199D 21 CB 3D 04 2297*  	ld hl,F14_012
0419A1 22 ED B6 04 2298*  	ld (cur_filename),hl
0419A5 11 1A C3 04 2299*  	ld de,filedata
0419A9 01 00 00 01 2300*  	ld bc,65536
0419AD 3E 01       2301*  	ld a,mos_load
0419AF 5B CF       2302*  	RST.LIL 08h
0419B1 21 68 01 00 2303*  	ld hl,BUF_14_012
0419B5 01 05 00 00 2304*  	ld bc,5
0419B9 11 2D 00 00 2305*  	ld de,45
0419BD DD 21 E1 00 2306*  	ld ix,225
       00          
0419C2 CD 68 B8 04 2307*  	call vdu_load_img
0419C6 C9          2308*  	ret
0419C7             2309*  
0419C7             2310*  ld_14_013:
0419C7 21 DF 3D 04 2311*  	ld hl,F14_013
0419CB 22 ED B6 04 2312*  	ld (cur_filename),hl
0419CF 11 1A C3 04 2313*  	ld de,filedata
0419D3 01 00 00 01 2314*  	ld bc,65536
0419D7 3E 01       2315*  	ld a,mos_load
0419D9 5B CF       2316*  	RST.LIL 08h
0419DB 21 69 01 00 2317*  	ld hl,BUF_14_013
0419DF 01 05 00 00 2318*  	ld bc,5
0419E3 11 2B 00 00 2319*  	ld de,43
0419E7 DD 21 D7 00 2320*  	ld ix,215
       00          
0419EC CD 68 B8 04 2321*  	call vdu_load_img
0419F0 C9          2322*  	ret
0419F1             2323*  
0419F1             2324*  ld_14_014:
0419F1 21 F3 3D 04 2325*  	ld hl,F14_014
0419F5 22 ED B6 04 2326*  	ld (cur_filename),hl
0419F9 11 1A C3 04 2327*  	ld de,filedata
0419FD 01 00 00 01 2328*  	ld bc,65536
041A01 3E 01       2329*  	ld a,mos_load
041A03 5B CF       2330*  	RST.LIL 08h
041A05 21 6A 01 00 2331*  	ld hl,BUF_14_014
041A09 01 0F 00 00 2332*  	ld bc,15
041A0D 11 2D 00 00 2333*  	ld de,45
041A11 DD 21 A3 02 2334*  	ld ix,675
       00          
041A16 CD 68 B8 04 2335*  	call vdu_load_img
041A1A C9          2336*  	ret
041A1B             2337*  
041A1B             2338*  ld_14_015:
041A1B 21 07 3E 04 2339*  	ld hl,F14_015
041A1F 22 ED B6 04 2340*  	ld (cur_filename),hl
041A23 11 1A C3 04 2341*  	ld de,filedata
041A27 01 00 00 01 2342*  	ld bc,65536
041A2B 3E 01       2343*  	ld a,mos_load
041A2D 5B CF       2344*  	RST.LIL 08h
041A2F 21 6B 01 00 2345*  	ld hl,BUF_14_015
041A33 01 19 00 00 2346*  	ld bc,25
041A37 11 2D 00 00 2347*  	ld de,45
041A3B DD 21 65 04 2348*  	ld ix,1125
       00          
041A40 CD 68 B8 04 2349*  	call vdu_load_img
041A44 C9          2350*  	ret
041A45             2351*  
041A45             2352*  ld_14_016:
041A45 21 1B 3E 04 2353*  	ld hl,F14_016
041A49 22 ED B6 04 2354*  	ld (cur_filename),hl
041A4D 11 1A C3 04 2355*  	ld de,filedata
041A51 01 00 00 01 2356*  	ld bc,65536
041A55 3E 01       2357*  	ld a,mos_load
041A57 5B CF       2358*  	RST.LIL 08h
041A59 21 6C 01 00 2359*  	ld hl,BUF_14_016
041A5D 01 23 00 00 2360*  	ld bc,35
041A61 11 2D 00 00 2361*  	ld de,45
041A65 DD 21 27 06 2362*  	ld ix,1575
       00          
041A6A CD 68 B8 04 2363*  	call vdu_load_img
041A6E C9          2364*  	ret
041A6F             2365*  
041A6F             2366*  ld_14_020:
041A6F 21 2F 3E 04 2367*  	ld hl,F14_020
041A73 22 ED B6 04 2368*  	ld (cur_filename),hl
041A77 11 1A C3 04 2369*  	ld de,filedata
041A7B 01 00 00 01 2370*  	ld bc,65536
041A7F 3E 01       2371*  	ld a,mos_load
041A81 5B CF       2372*  	RST.LIL 08h
041A83 21 6D 01 00 2373*  	ld hl,BUF_14_020
041A87 01 2E 00 00 2374*  	ld bc,46
041A8B 11 2D 00 00 2375*  	ld de,45
041A8F DD 21 16 08 2376*  	ld ix,2070
       00          
041A94 CD 68 B8 04 2377*  	call vdu_load_img
041A98 C9          2378*  	ret
041A99             2379*  
041A99             2380*  ld_14_024:
041A99 21 43 3E 04 2381*  	ld hl,F14_024
041A9D 22 ED B6 04 2382*  	ld (cur_filename),hl
041AA1 11 1A C3 04 2383*  	ld de,filedata
041AA5 01 00 00 01 2384*  	ld bc,65536
041AA9 3E 01       2385*  	ld a,mos_load
041AAB 5B CF       2386*  	RST.LIL 08h
041AAD 21 6E 01 00 2387*  	ld hl,BUF_14_024
041AB1 01 2E 00 00 2388*  	ld bc,46
041AB5 11 40 00 00 2389*  	ld de,64
041AB9 DD 21 80 0B 2390*  	ld ix,2944
       00          
041ABE CD 68 B8 04 2391*  	call vdu_load_img
041AC2 C9          2392*  	ret
041AC3             2393*  
041AC3             2394*  ld_14_025:
041AC3 21 57 3E 04 2395*  	ld hl,F14_025
041AC7 22 ED B6 04 2396*  	ld (cur_filename),hl
041ACB 11 1A C3 04 2397*  	ld de,filedata
041ACF 01 00 00 01 2398*  	ld bc,65536
041AD3 3E 01       2399*  	ld a,mos_load
041AD5 5B CF       2400*  	RST.LIL 08h
041AD7 21 6F 01 00 2401*  	ld hl,BUF_14_025
041ADB 01 1C 00 00 2402*  	ld bc,28
041ADF 11 40 00 00 2403*  	ld de,64
041AE3 DD 21 00 07 2404*  	ld ix,1792
       00          
041AE8 CD 68 B8 04 2405*  	call vdu_load_img
041AEC C9          2406*  	ret
041AED             2407*  
041AED             2408*  ld_14_026:
041AED 21 6B 3E 04 2409*  	ld hl,F14_026
041AF1 22 ED B6 04 2410*  	ld (cur_filename),hl
041AF5 11 1A C3 04 2411*  	ld de,filedata
041AF9 01 00 00 01 2412*  	ld bc,65536
041AFD 3E 01       2413*  	ld a,mos_load
041AFF 5B CF       2414*  	RST.LIL 08h
041B01 21 70 01 00 2415*  	ld hl,BUF_14_026
041B05 01 09 00 00 2416*  	ld bc,9
041B09 11 40 00 00 2417*  	ld de,64
041B0D DD 21 40 02 2418*  	ld ix,576
       00          
041B12 CD 68 B8 04 2419*  	call vdu_load_img
041B16 C9          2420*  	ret
041B17             2421*  
041B17             2422*  ld_14_027:
041B17 21 7F 3E 04 2423*  	ld hl,F14_027
041B1B 22 ED B6 04 2424*  	ld (cur_filename),hl
041B1F 11 1A C3 04 2425*  	ld de,filedata
041B23 01 00 00 01 2426*  	ld bc,65536
041B27 3E 01       2427*  	ld a,mos_load
041B29 5B CF       2428*  	RST.LIL 08h
041B2B 21 71 01 00 2429*  	ld hl,BUF_14_027
041B2F 01 0A 00 00 2430*  	ld bc,10
041B33 11 3E 00 00 2431*  	ld de,62
041B37 DD 21 6C 02 2432*  	ld ix,620
       00          
041B3C CD 68 B8 04 2433*  	call vdu_load_img
041B40 C9          2434*  	ret
041B41             2435*  
041B41             2436*  ld_14_028:
041B41 21 93 3E 04 2437*  	ld hl,F14_028
041B45 22 ED B6 04 2438*  	ld (cur_filename),hl
041B49 11 1A C3 04 2439*  	ld de,filedata
041B4D 01 00 00 01 2440*  	ld bc,65536
041B51 3E 01       2441*  	ld a,mos_load
041B53 5B CF       2442*  	RST.LIL 08h
041B55 21 72 01 00 2443*  	ld hl,BUF_14_028
041B59 01 1C 00 00 2444*  	ld bc,28
041B5D 11 40 00 00 2445*  	ld de,64
041B61 DD 21 00 07 2446*  	ld ix,1792
       00          
041B66 CD 68 B8 04 2447*  	call vdu_load_img
041B6A C9          2448*  	ret
041B6B             2449*  
041B6B             2450*  ld_14_029:
041B6B 21 A7 3E 04 2451*  	ld hl,F14_029
041B6F 22 ED B6 04 2452*  	ld (cur_filename),hl
041B73 11 1A C3 04 2453*  	ld de,filedata
041B77 01 00 00 01 2454*  	ld bc,65536
041B7B 3E 01       2455*  	ld a,mos_load
041B7D 5B CF       2456*  	RST.LIL 08h
041B7F 21 73 01 00 2457*  	ld hl,BUF_14_029
041B83 01 2F 00 00 2458*  	ld bc,47
041B87 11 40 00 00 2459*  	ld de,64
041B8B DD 21 C0 0B 2460*  	ld ix,3008
       00          
041B90 CD 68 B8 04 2461*  	call vdu_load_img
041B94 C9          2462*  	ret
041B95             2463*  
041B95             2464*  ld_14_032:
041B95 21 BB 3E 04 2465*  	ld hl,F14_032
041B99 22 ED B6 04 2466*  	ld (cur_filename),hl
041B9D 11 1A C3 04 2467*  	ld de,filedata
041BA1 01 00 00 01 2468*  	ld bc,65536
041BA5 3E 01       2469*  	ld a,mos_load
041BA7 5B CF       2470*  	RST.LIL 08h
041BA9 21 74 01 00 2471*  	ld hl,BUF_14_032
041BAD 01 41 00 00 2472*  	ld bc,65
041BB1 11 40 00 00 2473*  	ld de,64
041BB5 DD 21 40 10 2474*  	ld ix,4160
       00          
041BBA CD 68 B8 04 2475*  	call vdu_load_img
041BBE C9          2476*  	ret
041BBF             2477*  
041BBF             2478*  ld_14_035:
041BBF 21 CF 3E 04 2479*  	ld hl,F14_035
041BC3 22 ED B6 04 2480*  	ld (cur_filename),hl
041BC7 11 1A C3 04 2481*  	ld de,filedata
041BCB 01 00 00 01 2482*  	ld bc,65536
041BCF 3E 01       2483*  	ld a,mos_load
041BD1 5B CF       2484*  	RST.LIL 08h
041BD3 21 75 01 00 2485*  	ld hl,BUF_14_035
041BD7 01 3F 00 00 2486*  	ld bc,63
041BDB 11 6B 00 00 2487*  	ld de,107
041BDF DD 21 55 1A 2488*  	ld ix,6741
       00          
041BE4 CD 68 B8 04 2489*  	call vdu_load_img
041BE8 C9          2490*  	ret
041BE9             2491*  
041BE9             2492*  ld_14_036:
041BE9 21 E3 3E 04 2493*  	ld hl,F14_036
041BED 22 ED B6 04 2494*  	ld (cur_filename),hl
041BF1 11 1A C3 04 2495*  	ld de,filedata
041BF5 01 00 00 01 2496*  	ld bc,65536
041BF9 3E 01       2497*  	ld a,mos_load
041BFB 5B CF       2498*  	RST.LIL 08h
041BFD 21 76 01 00 2499*  	ld hl,BUF_14_036
041C01 01 16 00 00 2500*  	ld bc,22
041C05 11 6B 00 00 2501*  	ld de,107
041C09 DD 21 32 09 2502*  	ld ix,2354
       00          
041C0E CD 68 B8 04 2503*  	call vdu_load_img
041C12 C9          2504*  	ret
041C13             2505*  
041C13             2506*  ld_14_037:
041C13 21 F7 3E 04 2507*  	ld hl,F14_037
041C17 22 ED B6 04 2508*  	ld (cur_filename),hl
041C1B 11 1A C3 04 2509*  	ld de,filedata
041C1F 01 00 00 01 2510*  	ld bc,65536
041C23 3E 01       2511*  	ld a,mos_load
041C25 5B CF       2512*  	RST.LIL 08h
041C27 21 77 01 00 2513*  	ld hl,BUF_14_037
041C2B 01 15 00 00 2514*  	ld bc,21
041C2F 11 69 00 00 2515*  	ld de,105
041C33 DD 21 9D 08 2516*  	ld ix,2205
       00          
041C38 CD 68 B8 04 2517*  	call vdu_load_img
041C3C C9          2518*  	ret
041C3D             2519*  
041C3D             2520*  ld_14_038:
041C3D 21 0B 3F 04 2521*  	ld hl,F14_038
041C41 22 ED B6 04 2522*  	ld (cur_filename),hl
041C45 11 1A C3 04 2523*  	ld de,filedata
041C49 01 00 00 01 2524*  	ld bc,65536
041C4D 3E 01       2525*  	ld a,mos_load
041C4F 5B CF       2526*  	RST.LIL 08h
041C51 21 78 01 00 2527*  	ld hl,BUF_14_038
041C55 01 3F 00 00 2528*  	ld bc,63
041C59 11 6B 00 00 2529*  	ld de,107
041C5D DD 21 55 1A 2530*  	ld ix,6741
       00          
041C62 CD 68 B8 04 2531*  	call vdu_load_img
041C66 C9          2532*  	ret
041C67             2533*  
041C67             2534*  ld_14_040:
041C67 21 1F 3F 04 2535*  	ld hl,F14_040
041C6B 22 ED B6 04 2536*  	ld (cur_filename),hl
041C6F 11 1A C3 04 2537*  	ld de,filedata
041C73 01 00 00 01 2538*  	ld bc,65536
041C77 3E 01       2539*  	ld a,mos_load
041C79 5B CF       2540*  	RST.LIL 08h
041C7B 21 79 01 00 2541*  	ld hl,BUF_14_040
041C7F 01 6C 00 00 2542*  	ld bc,108
041C83 11 6B 00 00 2543*  	ld de,107
041C87 DD 21 24 2D 2544*  	ld ix,11556
       00          
041C8C CD 68 B8 04 2545*  	call vdu_load_img
041C90 C9          2546*  	ret
041C91             2547*  
041C91             2548*  ld_14_042:
041C91 21 33 3F 04 2549*  	ld hl,F14_042
041C95 22 ED B6 04 2550*  	ld (cur_filename),hl
041C99 11 1A C3 04 2551*  	ld de,filedata
041C9D 01 00 00 01 2552*  	ld bc,65536
041CA1 3E 01       2553*  	ld a,mos_load
041CA3 5B CF       2554*  	RST.LIL 08h
041CA5 21 7A 01 00 2555*  	ld hl,BUF_14_042
041CA9 01 6A 00 00 2556*  	ld bc,106
041CAD 11 A0 00 00 2557*  	ld de,160
041CB1 DD 21 40 42 2558*  	ld ix,16960
       00          
041CB6 CD 68 B8 04 2559*  	call vdu_load_img
041CBA C9          2560*  	ret
041CBB             2561*  
041CBB             2562*  ld_14_043:
041CBB 21 47 3F 04 2563*  	ld hl,F14_043
041CBF 22 ED B6 04 2564*  	ld (cur_filename),hl
041CC3 11 1A C3 04 2565*  	ld de,filedata
041CC7 01 00 00 01 2566*  	ld bc,65536
041CCB 3E 01       2567*  	ld a,mos_load
041CCD 5B CF       2568*  	RST.LIL 08h
041CCF 21 7B 01 00 2569*  	ld hl,BUF_14_043
041CD3 01 6B 00 00 2570*  	ld bc,107
041CD7 11 A0 00 00 2571*  	ld de,160
041CDB DD 21 E0 42 2572*  	ld ix,17120
       00          
041CE0 CD 68 B8 04 2573*  	call vdu_load_img
041CE4 C9          2574*  	ret
041CE5             2575*  
041CE5             2576*  ld_14_044:
041CE5 21 5B 3F 04 2577*  	ld hl,F14_044
041CE9 22 ED B6 04 2578*  	ld (cur_filename),hl
041CED 11 1A C3 04 2579*  	ld de,filedata
041CF1 01 00 00 01 2580*  	ld bc,65536
041CF5 3E 01       2581*  	ld a,mos_load
041CF7 5B CF       2582*  	RST.LIL 08h
041CF9 21 7C 01 00 2583*  	ld hl,BUF_14_044
041CFD 01 40 01 00 2584*  	ld bc,320
041D01 11 A0 00 00 2585*  	ld de,160
041D05 DD 21 00 C8 2586*  	ld ix,51200
       00          
041D0A CD 68 B8 04 2587*  	call vdu_load_img
041D0E C9          2588*  	ret
041D0F             2589*  
041D0F             2590*  ld_15_004:
041D0F 21 6F 3F 04 2591*  	ld hl,F15_004
041D13 22 ED B6 04 2592*  	ld (cur_filename),hl
041D17 11 1A C3 04 2593*  	ld de,filedata
041D1B 01 00 00 01 2594*  	ld bc,65536
041D1F 3E 01       2595*  	ld a,mos_load
041D21 5B CF       2596*  	RST.LIL 08h
041D23 21 7D 01 00 2597*  	ld hl,BUF_15_004
041D27 01 24 00 00 2598*  	ld bc,36
041D2B 11 23 00 00 2599*  	ld de,35
041D2F DD 21 EC 04 2600*  	ld ix,1260
       00          
041D34 CD 68 B8 04 2601*  	call vdu_load_img
041D38 C9          2602*  	ret
041D39             2603*  
041D39             2604*  ld_15_009:
041D39 21 83 3F 04 2605*  	ld hl,F15_009
041D3D 22 ED B6 04 2606*  	ld (cur_filename),hl
041D41 11 1A C3 04 2607*  	ld de,filedata
041D45 01 00 00 01 2608*  	ld bc,65536
041D49 3E 01       2609*  	ld a,mos_load
041D4B 5B CF       2610*  	RST.LIL 08h
041D4D 21 7E 01 00 2611*  	ld hl,BUF_15_009
041D51 01 23 00 00 2612*  	ld bc,35
041D55 11 2D 00 00 2613*  	ld de,45
041D59 DD 21 27 06 2614*  	ld ix,1575
       00          
041D5E CD 68 B8 04 2615*  	call vdu_load_img
041D62 C9          2616*  	ret
041D63             2617*  
041D63             2618*  ld_15_010:
041D63 21 97 3F 04 2619*  	ld hl,F15_010
041D67 22 ED B6 04 2620*  	ld (cur_filename),hl
041D6B 11 1A C3 04 2621*  	ld de,filedata
041D6F 01 00 00 01 2622*  	ld bc,65536
041D73 3E 01       2623*  	ld a,mos_load
041D75 5B CF       2624*  	RST.LIL 08h
041D77 21 7F 01 00 2625*  	ld hl,BUF_15_010
041D7B 01 19 00 00 2626*  	ld bc,25
041D7F 11 2D 00 00 2627*  	ld de,45
041D83 DD 21 65 04 2628*  	ld ix,1125
       00          
041D88 CD 68 B8 04 2629*  	call vdu_load_img
041D8C C9          2630*  	ret
041D8D             2631*  
041D8D             2632*  ld_15_011:
041D8D 21 AB 3F 04 2633*  	ld hl,F15_011
041D91 22 ED B6 04 2634*  	ld (cur_filename),hl
041D95 11 1A C3 04 2635*  	ld de,filedata
041D99 01 00 00 01 2636*  	ld bc,65536
041D9D 3E 01       2637*  	ld a,mos_load
041D9F 5B CF       2638*  	RST.LIL 08h
041DA1 21 80 01 00 2639*  	ld hl,BUF_15_011
041DA5 01 0F 00 00 2640*  	ld bc,15
041DA9 11 2D 00 00 2641*  	ld de,45
041DAD DD 21 A3 02 2642*  	ld ix,675
       00          
041DB2 CD 68 B8 04 2643*  	call vdu_load_img
041DB6 C9          2644*  	ret
041DB7             2645*  
041DB7             2646*  ld_15_012:
041DB7 21 BF 3F 04 2647*  	ld hl,F15_012
041DBB 22 ED B6 04 2648*  	ld (cur_filename),hl
041DBF 11 1A C3 04 2649*  	ld de,filedata
041DC3 01 00 00 01 2650*  	ld bc,65536
041DC7 3E 01       2651*  	ld a,mos_load
041DC9 5B CF       2652*  	RST.LIL 08h
041DCB 21 81 01 00 2653*  	ld hl,BUF_15_012
041DCF 01 05 00 00 2654*  	ld bc,5
041DD3 11 2D 00 00 2655*  	ld de,45
041DD7 DD 21 E1 00 2656*  	ld ix,225
       00          
041DDC CD 68 B8 04 2657*  	call vdu_load_img
041DE0 C9          2658*  	ret
041DE1             2659*  
041DE1             2660*  ld_15_013:
041DE1 21 D3 3F 04 2661*  	ld hl,F15_013
041DE5 22 ED B6 04 2662*  	ld (cur_filename),hl
041DE9 11 1A C3 04 2663*  	ld de,filedata
041DED 01 00 00 01 2664*  	ld bc,65536
041DF1 3E 01       2665*  	ld a,mos_load
041DF3 5B CF       2666*  	RST.LIL 08h
041DF5 21 82 01 00 2667*  	ld hl,BUF_15_013
041DF9 01 05 00 00 2668*  	ld bc,5
041DFD 11 2B 00 00 2669*  	ld de,43
041E01 DD 21 D7 00 2670*  	ld ix,215
       00          
041E06 CD 68 B8 04 2671*  	call vdu_load_img
041E0A C9          2672*  	ret
041E0B             2673*  
041E0B             2674*  ld_15_014:
041E0B 21 E7 3F 04 2675*  	ld hl,F15_014
041E0F 22 ED B6 04 2676*  	ld (cur_filename),hl
041E13 11 1A C3 04 2677*  	ld de,filedata
041E17 01 00 00 01 2678*  	ld bc,65536
041E1B 3E 01       2679*  	ld a,mos_load
041E1D 5B CF       2680*  	RST.LIL 08h
041E1F 21 83 01 00 2681*  	ld hl,BUF_15_014
041E23 01 0F 00 00 2682*  	ld bc,15
041E27 11 2D 00 00 2683*  	ld de,45
041E2B DD 21 A3 02 2684*  	ld ix,675
       00          
041E30 CD 68 B8 04 2685*  	call vdu_load_img
041E34 C9          2686*  	ret
041E35             2687*  
041E35             2688*  ld_15_015:
041E35 21 FB 3F 04 2689*  	ld hl,F15_015
041E39 22 ED B6 04 2690*  	ld (cur_filename),hl
041E3D 11 1A C3 04 2691*  	ld de,filedata
041E41 01 00 00 01 2692*  	ld bc,65536
041E45 3E 01       2693*  	ld a,mos_load
041E47 5B CF       2694*  	RST.LIL 08h
041E49 21 84 01 00 2695*  	ld hl,BUF_15_015
041E4D 01 19 00 00 2696*  	ld bc,25
041E51 11 2D 00 00 2697*  	ld de,45
041E55 DD 21 65 04 2698*  	ld ix,1125
       00          
041E5A CD 68 B8 04 2699*  	call vdu_load_img
041E5E C9          2700*  	ret
041E5F             2701*  
041E5F             2702*  ld_15_016:
041E5F 21 0F 40 04 2703*  	ld hl,F15_016
041E63 22 ED B6 04 2704*  	ld (cur_filename),hl
041E67 11 1A C3 04 2705*  	ld de,filedata
041E6B 01 00 00 01 2706*  	ld bc,65536
041E6F 3E 01       2707*  	ld a,mos_load
041E71 5B CF       2708*  	RST.LIL 08h
041E73 21 85 01 00 2709*  	ld hl,BUF_15_016
041E77 01 23 00 00 2710*  	ld bc,35
041E7B 11 2D 00 00 2711*  	ld de,45
041E7F DD 21 27 06 2712*  	ld ix,1575
       00          
041E84 CD 68 B8 04 2713*  	call vdu_load_img
041E88 C9          2714*  	ret
041E89             2715*  
041E89             2716*  ld_15_020:
041E89 21 23 40 04 2717*  	ld hl,F15_020
041E8D 22 ED B6 04 2718*  	ld (cur_filename),hl
041E91 11 1A C3 04 2719*  	ld de,filedata
041E95 01 00 00 01 2720*  	ld bc,65536
041E99 3E 01       2721*  	ld a,mos_load
041E9B 5B CF       2722*  	RST.LIL 08h
041E9D 21 86 01 00 2723*  	ld hl,BUF_15_020
041EA1 01 2E 00 00 2724*  	ld bc,46
041EA5 11 2D 00 00 2725*  	ld de,45
041EA9 DD 21 16 08 2726*  	ld ix,2070
       00          
041EAE CD 68 B8 04 2727*  	call vdu_load_img
041EB2 C9          2728*  	ret
041EB3             2729*  
041EB3             2730*  ld_15_024:
041EB3 21 37 40 04 2731*  	ld hl,F15_024
041EB7 22 ED B6 04 2732*  	ld (cur_filename),hl
041EBB 11 1A C3 04 2733*  	ld de,filedata
041EBF 01 00 00 01 2734*  	ld bc,65536
041EC3 3E 01       2735*  	ld a,mos_load
041EC5 5B CF       2736*  	RST.LIL 08h
041EC7 21 87 01 00 2737*  	ld hl,BUF_15_024
041ECB 01 2E 00 00 2738*  	ld bc,46
041ECF 11 40 00 00 2739*  	ld de,64
041ED3 DD 21 80 0B 2740*  	ld ix,2944
       00          
041ED8 CD 68 B8 04 2741*  	call vdu_load_img
041EDC C9          2742*  	ret
041EDD             2743*  
041EDD             2744*  ld_15_025:
041EDD 21 4B 40 04 2745*  	ld hl,F15_025
041EE1 22 ED B6 04 2746*  	ld (cur_filename),hl
041EE5 11 1A C3 04 2747*  	ld de,filedata
041EE9 01 00 00 01 2748*  	ld bc,65536
041EED 3E 01       2749*  	ld a,mos_load
041EEF 5B CF       2750*  	RST.LIL 08h
041EF1 21 88 01 00 2751*  	ld hl,BUF_15_025
041EF5 01 1C 00 00 2752*  	ld bc,28
041EF9 11 40 00 00 2753*  	ld de,64
041EFD DD 21 00 07 2754*  	ld ix,1792
       00          
041F02 CD 68 B8 04 2755*  	call vdu_load_img
041F06 C9          2756*  	ret
041F07             2757*  
041F07             2758*  ld_15_026:
041F07 21 5F 40 04 2759*  	ld hl,F15_026
041F0B 22 ED B6 04 2760*  	ld (cur_filename),hl
041F0F 11 1A C3 04 2761*  	ld de,filedata
041F13 01 00 00 01 2762*  	ld bc,65536
041F17 3E 01       2763*  	ld a,mos_load
041F19 5B CF       2764*  	RST.LIL 08h
041F1B 21 89 01 00 2765*  	ld hl,BUF_15_026
041F1F 01 09 00 00 2766*  	ld bc,9
041F23 11 40 00 00 2767*  	ld de,64
041F27 DD 21 40 02 2768*  	ld ix,576
       00          
041F2C CD 68 B8 04 2769*  	call vdu_load_img
041F30 C9          2770*  	ret
041F31             2771*  
041F31             2772*  ld_15_027:
041F31 21 73 40 04 2773*  	ld hl,F15_027
041F35 22 ED B6 04 2774*  	ld (cur_filename),hl
041F39 11 1A C3 04 2775*  	ld de,filedata
041F3D 01 00 00 01 2776*  	ld bc,65536
041F41 3E 01       2777*  	ld a,mos_load
041F43 5B CF       2778*  	RST.LIL 08h
041F45 21 8A 01 00 2779*  	ld hl,BUF_15_027
041F49 01 0A 00 00 2780*  	ld bc,10
041F4D 11 3E 00 00 2781*  	ld de,62
041F51 DD 21 6C 02 2782*  	ld ix,620
       00          
041F56 CD 68 B8 04 2783*  	call vdu_load_img
041F5A C9          2784*  	ret
041F5B             2785*  
041F5B             2786*  ld_15_028:
041F5B 21 87 40 04 2787*  	ld hl,F15_028
041F5F 22 ED B6 04 2788*  	ld (cur_filename),hl
041F63 11 1A C3 04 2789*  	ld de,filedata
041F67 01 00 00 01 2790*  	ld bc,65536
041F6B 3E 01       2791*  	ld a,mos_load
041F6D 5B CF       2792*  	RST.LIL 08h
041F6F 21 8B 01 00 2793*  	ld hl,BUF_15_028
041F73 01 1C 00 00 2794*  	ld bc,28
041F77 11 40 00 00 2795*  	ld de,64
041F7B DD 21 00 07 2796*  	ld ix,1792
       00          
041F80 CD 68 B8 04 2797*  	call vdu_load_img
041F84 C9          2798*  	ret
041F85             2799*  
041F85             2800*  ld_15_029:
041F85 21 9B 40 04 2801*  	ld hl,F15_029
041F89 22 ED B6 04 2802*  	ld (cur_filename),hl
041F8D 11 1A C3 04 2803*  	ld de,filedata
041F91 01 00 00 01 2804*  	ld bc,65536
041F95 3E 01       2805*  	ld a,mos_load
041F97 5B CF       2806*  	RST.LIL 08h
041F99 21 8C 01 00 2807*  	ld hl,BUF_15_029
041F9D 01 2F 00 00 2808*  	ld bc,47
041FA1 11 40 00 00 2809*  	ld de,64
041FA5 DD 21 C0 0B 2810*  	ld ix,3008
       00          
041FAA CD 68 B8 04 2811*  	call vdu_load_img
041FAE C9          2812*  	ret
041FAF             2813*  
041FAF             2814*  ld_15_032:
041FAF 21 AF 40 04 2815*  	ld hl,F15_032
041FB3 22 ED B6 04 2816*  	ld (cur_filename),hl
041FB7 11 1A C3 04 2817*  	ld de,filedata
041FBB 01 00 00 01 2818*  	ld bc,65536
041FBF 3E 01       2819*  	ld a,mos_load
041FC1 5B CF       2820*  	RST.LIL 08h
041FC3 21 8D 01 00 2821*  	ld hl,BUF_15_032
041FC7 01 41 00 00 2822*  	ld bc,65
041FCB 11 40 00 00 2823*  	ld de,64
041FCF DD 21 40 10 2824*  	ld ix,4160
       00          
041FD4 CD 68 B8 04 2825*  	call vdu_load_img
041FD8 C9          2826*  	ret
041FD9             2827*  
041FD9             2828*  ld_15_035:
041FD9 21 C3 40 04 2829*  	ld hl,F15_035
041FDD 22 ED B6 04 2830*  	ld (cur_filename),hl
041FE1 11 1A C3 04 2831*  	ld de,filedata
041FE5 01 00 00 01 2832*  	ld bc,65536
041FE9 3E 01       2833*  	ld a,mos_load
041FEB 5B CF       2834*  	RST.LIL 08h
041FED 21 8E 01 00 2835*  	ld hl,BUF_15_035
041FF1 01 3F 00 00 2836*  	ld bc,63
041FF5 11 6B 00 00 2837*  	ld de,107
041FF9 DD 21 55 1A 2838*  	ld ix,6741
       00          
041FFE CD 68 B8 04 2839*  	call vdu_load_img
042002 C9          2840*  	ret
042003             2841*  
042003             2842*  ld_15_036:
042003 21 D7 40 04 2843*  	ld hl,F15_036
042007 22 ED B6 04 2844*  	ld (cur_filename),hl
04200B 11 1A C3 04 2845*  	ld de,filedata
04200F 01 00 00 01 2846*  	ld bc,65536
042013 3E 01       2847*  	ld a,mos_load
042015 5B CF       2848*  	RST.LIL 08h
042017 21 8F 01 00 2849*  	ld hl,BUF_15_036
04201B 01 16 00 00 2850*  	ld bc,22
04201F 11 6B 00 00 2851*  	ld de,107
042023 DD 21 32 09 2852*  	ld ix,2354
       00          
042028 CD 68 B8 04 2853*  	call vdu_load_img
04202C C9          2854*  	ret
04202D             2855*  
04202D             2856*  ld_15_037:
04202D 21 EB 40 04 2857*  	ld hl,F15_037
042031 22 ED B6 04 2858*  	ld (cur_filename),hl
042035 11 1A C3 04 2859*  	ld de,filedata
042039 01 00 00 01 2860*  	ld bc,65536
04203D 3E 01       2861*  	ld a,mos_load
04203F 5B CF       2862*  	RST.LIL 08h
042041 21 90 01 00 2863*  	ld hl,BUF_15_037
042045 01 15 00 00 2864*  	ld bc,21
042049 11 69 00 00 2865*  	ld de,105
04204D DD 21 9D 08 2866*  	ld ix,2205
       00          
042052 CD 68 B8 04 2867*  	call vdu_load_img
042056 C9          2868*  	ret
042057             2869*  
042057             2870*  ld_15_038:
042057 21 FF 40 04 2871*  	ld hl,F15_038
04205B 22 ED B6 04 2872*  	ld (cur_filename),hl
04205F 11 1A C3 04 2873*  	ld de,filedata
042063 01 00 00 01 2874*  	ld bc,65536
042067 3E 01       2875*  	ld a,mos_load
042069 5B CF       2876*  	RST.LIL 08h
04206B 21 91 01 00 2877*  	ld hl,BUF_15_038
04206F 01 3F 00 00 2878*  	ld bc,63
042073 11 6B 00 00 2879*  	ld de,107
042077 DD 21 55 1A 2880*  	ld ix,6741
       00          
04207C CD 68 B8 04 2881*  	call vdu_load_img
042080 C9          2882*  	ret
042081             2883*  
042081             2884*  ld_15_040:
042081 21 13 41 04 2885*  	ld hl,F15_040
042085 22 ED B6 04 2886*  	ld (cur_filename),hl
042089 11 1A C3 04 2887*  	ld de,filedata
04208D 01 00 00 01 2888*  	ld bc,65536
042091 3E 01       2889*  	ld a,mos_load
042093 5B CF       2890*  	RST.LIL 08h
042095 21 92 01 00 2891*  	ld hl,BUF_15_040
042099 01 6C 00 00 2892*  	ld bc,108
04209D 11 6B 00 00 2893*  	ld de,107
0420A1 DD 21 24 2D 2894*  	ld ix,11556
       00          
0420A6 CD 68 B8 04 2895*  	call vdu_load_img
0420AA C9          2896*  	ret
0420AB             2897*  
0420AB             2898*  ld_15_042:
0420AB 21 27 41 04 2899*  	ld hl,F15_042
0420AF 22 ED B6 04 2900*  	ld (cur_filename),hl
0420B3 11 1A C3 04 2901*  	ld de,filedata
0420B7 01 00 00 01 2902*  	ld bc,65536
0420BB 3E 01       2903*  	ld a,mos_load
0420BD 5B CF       2904*  	RST.LIL 08h
0420BF 21 93 01 00 2905*  	ld hl,BUF_15_042
0420C3 01 6A 00 00 2906*  	ld bc,106
0420C7 11 A0 00 00 2907*  	ld de,160
0420CB DD 21 40 42 2908*  	ld ix,16960
       00          
0420D0 CD 68 B8 04 2909*  	call vdu_load_img
0420D4 C9          2910*  	ret
0420D5             2911*  
0420D5             2912*  ld_15_043:
0420D5 21 3B 41 04 2913*  	ld hl,F15_043
0420D9 22 ED B6 04 2914*  	ld (cur_filename),hl
0420DD 11 1A C3 04 2915*  	ld de,filedata
0420E1 01 00 00 01 2916*  	ld bc,65536
0420E5 3E 01       2917*  	ld a,mos_load
0420E7 5B CF       2918*  	RST.LIL 08h
0420E9 21 94 01 00 2919*  	ld hl,BUF_15_043
0420ED 01 6B 00 00 2920*  	ld bc,107
0420F1 11 A0 00 00 2921*  	ld de,160
0420F5 DD 21 E0 42 2922*  	ld ix,17120
       00          
0420FA CD 68 B8 04 2923*  	call vdu_load_img
0420FE C9          2924*  	ret
0420FF             2925*  
0420FF             2926*  ld_15_044:
0420FF 21 4F 41 04 2927*  	ld hl,F15_044
042103 22 ED B6 04 2928*  	ld (cur_filename),hl
042107 11 1A C3 04 2929*  	ld de,filedata
04210B 01 00 00 01 2930*  	ld bc,65536
04210F 3E 01       2931*  	ld a,mos_load
042111 5B CF       2932*  	RST.LIL 08h
042113 21 95 01 00 2933*  	ld hl,BUF_15_044
042117 01 40 01 00 2934*  	ld bc,320
04211B 11 A0 00 00 2935*  	ld de,160
04211F DD 21 00 C8 2936*  	ld ix,51200
       00          
042124 CD 68 B8 04 2937*  	call vdu_load_img
042128 C9          2938*  	ret
042129             2939*  
042129             2940*  ld_16_004:
042129 21 63 41 04 2941*  	ld hl,F16_004
04212D 22 ED B6 04 2942*  	ld (cur_filename),hl
042131 11 1A C3 04 2943*  	ld de,filedata
042135 01 00 00 01 2944*  	ld bc,65536
042139 3E 01       2945*  	ld a,mos_load
04213B 5B CF       2946*  	RST.LIL 08h
04213D 21 96 01 00 2947*  	ld hl,BUF_16_004
042141 01 24 00 00 2948*  	ld bc,36
042145 11 23 00 00 2949*  	ld de,35
042149 DD 21 EC 04 2950*  	ld ix,1260
       00          
04214E CD 68 B8 04 2951*  	call vdu_load_img
042152 C9          2952*  	ret
042153             2953*  
042153             2954*  ld_16_009:
042153 21 77 41 04 2955*  	ld hl,F16_009
042157 22 ED B6 04 2956*  	ld (cur_filename),hl
04215B 11 1A C3 04 2957*  	ld de,filedata
04215F 01 00 00 01 2958*  	ld bc,65536
042163 3E 01       2959*  	ld a,mos_load
042165 5B CF       2960*  	RST.LIL 08h
042167 21 97 01 00 2961*  	ld hl,BUF_16_009
04216B 01 23 00 00 2962*  	ld bc,35
04216F 11 2D 00 00 2963*  	ld de,45
042173 DD 21 27 06 2964*  	ld ix,1575
       00          
042178 CD 68 B8 04 2965*  	call vdu_load_img
04217C C9          2966*  	ret
04217D             2967*  
04217D             2968*  ld_16_010:
04217D 21 8B 41 04 2969*  	ld hl,F16_010
042181 22 ED B6 04 2970*  	ld (cur_filename),hl
042185 11 1A C3 04 2971*  	ld de,filedata
042189 01 00 00 01 2972*  	ld bc,65536
04218D 3E 01       2973*  	ld a,mos_load
04218F 5B CF       2974*  	RST.LIL 08h
042191 21 98 01 00 2975*  	ld hl,BUF_16_010
042195 01 19 00 00 2976*  	ld bc,25
042199 11 2D 00 00 2977*  	ld de,45
04219D DD 21 65 04 2978*  	ld ix,1125
       00          
0421A2 CD 68 B8 04 2979*  	call vdu_load_img
0421A6 C9          2980*  	ret
0421A7             2981*  
0421A7             2982*  ld_16_011:
0421A7 21 9F 41 04 2983*  	ld hl,F16_011
0421AB 22 ED B6 04 2984*  	ld (cur_filename),hl
0421AF 11 1A C3 04 2985*  	ld de,filedata
0421B3 01 00 00 01 2986*  	ld bc,65536
0421B7 3E 01       2987*  	ld a,mos_load
0421B9 5B CF       2988*  	RST.LIL 08h
0421BB 21 99 01 00 2989*  	ld hl,BUF_16_011
0421BF 01 0F 00 00 2990*  	ld bc,15
0421C3 11 2D 00 00 2991*  	ld de,45
0421C7 DD 21 A3 02 2992*  	ld ix,675
       00          
0421CC CD 68 B8 04 2993*  	call vdu_load_img
0421D0 C9          2994*  	ret
0421D1             2995*  
0421D1             2996*  ld_16_012:
0421D1 21 B3 41 04 2997*  	ld hl,F16_012
0421D5 22 ED B6 04 2998*  	ld (cur_filename),hl
0421D9 11 1A C3 04 2999*  	ld de,filedata
0421DD 01 00 00 01 3000*  	ld bc,65536
0421E1 3E 01       3001*  	ld a,mos_load
0421E3 5B CF       3002*  	RST.LIL 08h
0421E5 21 9A 01 00 3003*  	ld hl,BUF_16_012
0421E9 01 05 00 00 3004*  	ld bc,5
0421ED 11 2D 00 00 3005*  	ld de,45
0421F1 DD 21 E1 00 3006*  	ld ix,225
       00          
0421F6 CD 68 B8 04 3007*  	call vdu_load_img
0421FA C9          3008*  	ret
0421FB             3009*  
0421FB             3010*  ld_16_013:
0421FB 21 C7 41 04 3011*  	ld hl,F16_013
0421FF 22 ED B6 04 3012*  	ld (cur_filename),hl
042203 11 1A C3 04 3013*  	ld de,filedata
042207 01 00 00 01 3014*  	ld bc,65536
04220B 3E 01       3015*  	ld a,mos_load
04220D 5B CF       3016*  	RST.LIL 08h
04220F 21 9B 01 00 3017*  	ld hl,BUF_16_013
042213 01 05 00 00 3018*  	ld bc,5
042217 11 2B 00 00 3019*  	ld de,43
04221B DD 21 D7 00 3020*  	ld ix,215
       00          
042220 CD 68 B8 04 3021*  	call vdu_load_img
042224 C9          3022*  	ret
042225             3023*  
042225             3024*  ld_16_014:
042225 21 DB 41 04 3025*  	ld hl,F16_014
042229 22 ED B6 04 3026*  	ld (cur_filename),hl
04222D 11 1A C3 04 3027*  	ld de,filedata
042231 01 00 00 01 3028*  	ld bc,65536
042235 3E 01       3029*  	ld a,mos_load
042237 5B CF       3030*  	RST.LIL 08h
042239 21 9C 01 00 3031*  	ld hl,BUF_16_014
04223D 01 0F 00 00 3032*  	ld bc,15
042241 11 2D 00 00 3033*  	ld de,45
042245 DD 21 A3 02 3034*  	ld ix,675
       00          
04224A CD 68 B8 04 3035*  	call vdu_load_img
04224E C9          3036*  	ret
04224F             3037*  
04224F             3038*  ld_16_015:
04224F 21 EF 41 04 3039*  	ld hl,F16_015
042253 22 ED B6 04 3040*  	ld (cur_filename),hl
042257 11 1A C3 04 3041*  	ld de,filedata
04225B 01 00 00 01 3042*  	ld bc,65536
04225F 3E 01       3043*  	ld a,mos_load
042261 5B CF       3044*  	RST.LIL 08h
042263 21 9D 01 00 3045*  	ld hl,BUF_16_015
042267 01 19 00 00 3046*  	ld bc,25
04226B 11 2D 00 00 3047*  	ld de,45
04226F DD 21 65 04 3048*  	ld ix,1125
       00          
042274 CD 68 B8 04 3049*  	call vdu_load_img
042278 C9          3050*  	ret
042279             3051*  
042279             3052*  ld_16_016:
042279 21 03 42 04 3053*  	ld hl,F16_016
04227D 22 ED B6 04 3054*  	ld (cur_filename),hl
042281 11 1A C3 04 3055*  	ld de,filedata
042285 01 00 00 01 3056*  	ld bc,65536
042289 3E 01       3057*  	ld a,mos_load
04228B 5B CF       3058*  	RST.LIL 08h
04228D 21 9E 01 00 3059*  	ld hl,BUF_16_016
042291 01 23 00 00 3060*  	ld bc,35
042295 11 2D 00 00 3061*  	ld de,45
042299 DD 21 27 06 3062*  	ld ix,1575
       00          
04229E CD 68 B8 04 3063*  	call vdu_load_img
0422A2 C9          3064*  	ret
0422A3             3065*  
0422A3             3066*  ld_16_020:
0422A3 21 17 42 04 3067*  	ld hl,F16_020
0422A7 22 ED B6 04 3068*  	ld (cur_filename),hl
0422AB 11 1A C3 04 3069*  	ld de,filedata
0422AF 01 00 00 01 3070*  	ld bc,65536
0422B3 3E 01       3071*  	ld a,mos_load
0422B5 5B CF       3072*  	RST.LIL 08h
0422B7 21 9F 01 00 3073*  	ld hl,BUF_16_020
0422BB 01 2E 00 00 3074*  	ld bc,46
0422BF 11 2D 00 00 3075*  	ld de,45
0422C3 DD 21 16 08 3076*  	ld ix,2070
       00          
0422C8 CD 68 B8 04 3077*  	call vdu_load_img
0422CC C9          3078*  	ret
0422CD             3079*  
0422CD             3080*  ld_16_024:
0422CD 21 2B 42 04 3081*  	ld hl,F16_024
0422D1 22 ED B6 04 3082*  	ld (cur_filename),hl
0422D5 11 1A C3 04 3083*  	ld de,filedata
0422D9 01 00 00 01 3084*  	ld bc,65536
0422DD 3E 01       3085*  	ld a,mos_load
0422DF 5B CF       3086*  	RST.LIL 08h
0422E1 21 A0 01 00 3087*  	ld hl,BUF_16_024
0422E5 01 2E 00 00 3088*  	ld bc,46
0422E9 11 40 00 00 3089*  	ld de,64
0422ED DD 21 80 0B 3090*  	ld ix,2944
       00          
0422F2 CD 68 B8 04 3091*  	call vdu_load_img
0422F6 C9          3092*  	ret
0422F7             3093*  
0422F7             3094*  ld_16_025:
0422F7 21 3F 42 04 3095*  	ld hl,F16_025
0422FB 22 ED B6 04 3096*  	ld (cur_filename),hl
0422FF 11 1A C3 04 3097*  	ld de,filedata
042303 01 00 00 01 3098*  	ld bc,65536
042307 3E 01       3099*  	ld a,mos_load
042309 5B CF       3100*  	RST.LIL 08h
04230B 21 A1 01 00 3101*  	ld hl,BUF_16_025
04230F 01 1C 00 00 3102*  	ld bc,28
042313 11 40 00 00 3103*  	ld de,64
042317 DD 21 00 07 3104*  	ld ix,1792
       00          
04231C CD 68 B8 04 3105*  	call vdu_load_img
042320 C9          3106*  	ret
042321             3107*  
042321             3108*  ld_16_026:
042321 21 53 42 04 3109*  	ld hl,F16_026
042325 22 ED B6 04 3110*  	ld (cur_filename),hl
042329 11 1A C3 04 3111*  	ld de,filedata
04232D 01 00 00 01 3112*  	ld bc,65536
042331 3E 01       3113*  	ld a,mos_load
042333 5B CF       3114*  	RST.LIL 08h
042335 21 A2 01 00 3115*  	ld hl,BUF_16_026
042339 01 09 00 00 3116*  	ld bc,9
04233D 11 40 00 00 3117*  	ld de,64
042341 DD 21 40 02 3118*  	ld ix,576
       00          
042346 CD 68 B8 04 3119*  	call vdu_load_img
04234A C9          3120*  	ret
04234B             3121*  
04234B             3122*  ld_16_027:
04234B 21 67 42 04 3123*  	ld hl,F16_027
04234F 22 ED B6 04 3124*  	ld (cur_filename),hl
042353 11 1A C3 04 3125*  	ld de,filedata
042357 01 00 00 01 3126*  	ld bc,65536
04235B 3E 01       3127*  	ld a,mos_load
04235D 5B CF       3128*  	RST.LIL 08h
04235F 21 A3 01 00 3129*  	ld hl,BUF_16_027
042363 01 0A 00 00 3130*  	ld bc,10
042367 11 3E 00 00 3131*  	ld de,62
04236B DD 21 6C 02 3132*  	ld ix,620
       00          
042370 CD 68 B8 04 3133*  	call vdu_load_img
042374 C9          3134*  	ret
042375             3135*  
042375             3136*  ld_16_028:
042375 21 7B 42 04 3137*  	ld hl,F16_028
042379 22 ED B6 04 3138*  	ld (cur_filename),hl
04237D 11 1A C3 04 3139*  	ld de,filedata
042381 01 00 00 01 3140*  	ld bc,65536
042385 3E 01       3141*  	ld a,mos_load
042387 5B CF       3142*  	RST.LIL 08h
042389 21 A4 01 00 3143*  	ld hl,BUF_16_028
04238D 01 1C 00 00 3144*  	ld bc,28
042391 11 40 00 00 3145*  	ld de,64
042395 DD 21 00 07 3146*  	ld ix,1792
       00          
04239A CD 68 B8 04 3147*  	call vdu_load_img
04239E C9          3148*  	ret
04239F             3149*  
04239F             3150*  ld_16_029:
04239F 21 8F 42 04 3151*  	ld hl,F16_029
0423A3 22 ED B6 04 3152*  	ld (cur_filename),hl
0423A7 11 1A C3 04 3153*  	ld de,filedata
0423AB 01 00 00 01 3154*  	ld bc,65536
0423AF 3E 01       3155*  	ld a,mos_load
0423B1 5B CF       3156*  	RST.LIL 08h
0423B3 21 A5 01 00 3157*  	ld hl,BUF_16_029
0423B7 01 2F 00 00 3158*  	ld bc,47
0423BB 11 40 00 00 3159*  	ld de,64
0423BF DD 21 C0 0B 3160*  	ld ix,3008
       00          
0423C4 CD 68 B8 04 3161*  	call vdu_load_img
0423C8 C9          3162*  	ret
0423C9             3163*  
0423C9             3164*  ld_16_032:
0423C9 21 A3 42 04 3165*  	ld hl,F16_032
0423CD 22 ED B6 04 3166*  	ld (cur_filename),hl
0423D1 11 1A C3 04 3167*  	ld de,filedata
0423D5 01 00 00 01 3168*  	ld bc,65536
0423D9 3E 01       3169*  	ld a,mos_load
0423DB 5B CF       3170*  	RST.LIL 08h
0423DD 21 A6 01 00 3171*  	ld hl,BUF_16_032
0423E1 01 41 00 00 3172*  	ld bc,65
0423E5 11 40 00 00 3173*  	ld de,64
0423E9 DD 21 40 10 3174*  	ld ix,4160
       00          
0423EE CD 68 B8 04 3175*  	call vdu_load_img
0423F2 C9          3176*  	ret
0423F3             3177*  
0423F3             3178*  ld_16_035:
0423F3 21 B7 42 04 3179*  	ld hl,F16_035
0423F7 22 ED B6 04 3180*  	ld (cur_filename),hl
0423FB 11 1A C3 04 3181*  	ld de,filedata
0423FF 01 00 00 01 3182*  	ld bc,65536
042403 3E 01       3183*  	ld a,mos_load
042405 5B CF       3184*  	RST.LIL 08h
042407 21 A7 01 00 3185*  	ld hl,BUF_16_035
04240B 01 3F 00 00 3186*  	ld bc,63
04240F 11 6B 00 00 3187*  	ld de,107
042413 DD 21 55 1A 3188*  	ld ix,6741
       00          
042418 CD 68 B8 04 3189*  	call vdu_load_img
04241C C9          3190*  	ret
04241D             3191*  
04241D             3192*  ld_16_036:
04241D 21 CB 42 04 3193*  	ld hl,F16_036
042421 22 ED B6 04 3194*  	ld (cur_filename),hl
042425 11 1A C3 04 3195*  	ld de,filedata
042429 01 00 00 01 3196*  	ld bc,65536
04242D 3E 01       3197*  	ld a,mos_load
04242F 5B CF       3198*  	RST.LIL 08h
042431 21 A8 01 00 3199*  	ld hl,BUF_16_036
042435 01 16 00 00 3200*  	ld bc,22
042439 11 6B 00 00 3201*  	ld de,107
04243D DD 21 32 09 3202*  	ld ix,2354
       00          
042442 CD 68 B8 04 3203*  	call vdu_load_img
042446 C9          3204*  	ret
042447             3205*  
042447             3206*  ld_16_037:
042447 21 DF 42 04 3207*  	ld hl,F16_037
04244B 22 ED B6 04 3208*  	ld (cur_filename),hl
04244F 11 1A C3 04 3209*  	ld de,filedata
042453 01 00 00 01 3210*  	ld bc,65536
042457 3E 01       3211*  	ld a,mos_load
042459 5B CF       3212*  	RST.LIL 08h
04245B 21 A9 01 00 3213*  	ld hl,BUF_16_037
04245F 01 15 00 00 3214*  	ld bc,21
042463 11 69 00 00 3215*  	ld de,105
042467 DD 21 9D 08 3216*  	ld ix,2205
       00          
04246C CD 68 B8 04 3217*  	call vdu_load_img
042470 C9          3218*  	ret
042471             3219*  
042471             3220*  ld_16_038:
042471 21 F3 42 04 3221*  	ld hl,F16_038
042475 22 ED B6 04 3222*  	ld (cur_filename),hl
042479 11 1A C3 04 3223*  	ld de,filedata
04247D 01 00 00 01 3224*  	ld bc,65536
042481 3E 01       3225*  	ld a,mos_load
042483 5B CF       3226*  	RST.LIL 08h
042485 21 AA 01 00 3227*  	ld hl,BUF_16_038
042489 01 3F 00 00 3228*  	ld bc,63
04248D 11 6B 00 00 3229*  	ld de,107
042491 DD 21 55 1A 3230*  	ld ix,6741
       00          
042496 CD 68 B8 04 3231*  	call vdu_load_img
04249A C9          3232*  	ret
04249B             3233*  
04249B             3234*  ld_16_040:
04249B 21 07 43 04 3235*  	ld hl,F16_040
04249F 22 ED B6 04 3236*  	ld (cur_filename),hl
0424A3 11 1A C3 04 3237*  	ld de,filedata
0424A7 01 00 00 01 3238*  	ld bc,65536
0424AB 3E 01       3239*  	ld a,mos_load
0424AD 5B CF       3240*  	RST.LIL 08h
0424AF 21 AB 01 00 3241*  	ld hl,BUF_16_040
0424B3 01 6C 00 00 3242*  	ld bc,108
0424B7 11 6B 00 00 3243*  	ld de,107
0424BB DD 21 24 2D 3244*  	ld ix,11556
       00          
0424C0 CD 68 B8 04 3245*  	call vdu_load_img
0424C4 C9          3246*  	ret
0424C5             3247*  
0424C5             3248*  ld_16_042:
0424C5 21 1B 43 04 3249*  	ld hl,F16_042
0424C9 22 ED B6 04 3250*  	ld (cur_filename),hl
0424CD 11 1A C3 04 3251*  	ld de,filedata
0424D1 01 00 00 01 3252*  	ld bc,65536
0424D5 3E 01       3253*  	ld a,mos_load
0424D7 5B CF       3254*  	RST.LIL 08h
0424D9 21 AC 01 00 3255*  	ld hl,BUF_16_042
0424DD 01 6A 00 00 3256*  	ld bc,106
0424E1 11 A0 00 00 3257*  	ld de,160
0424E5 DD 21 40 42 3258*  	ld ix,16960
       00          
0424EA CD 68 B8 04 3259*  	call vdu_load_img
0424EE C9          3260*  	ret
0424EF             3261*  
0424EF             3262*  ld_16_043:
0424EF 21 2F 43 04 3263*  	ld hl,F16_043
0424F3 22 ED B6 04 3264*  	ld (cur_filename),hl
0424F7 11 1A C3 04 3265*  	ld de,filedata
0424FB 01 00 00 01 3266*  	ld bc,65536
0424FF 3E 01       3267*  	ld a,mos_load
042501 5B CF       3268*  	RST.LIL 08h
042503 21 AD 01 00 3269*  	ld hl,BUF_16_043
042507 01 6B 00 00 3270*  	ld bc,107
04250B 11 A0 00 00 3271*  	ld de,160
04250F DD 21 E0 42 3272*  	ld ix,17120
       00          
042514 CD 68 B8 04 3273*  	call vdu_load_img
042518 C9          3274*  	ret
042519             3275*  
042519             3276*  ld_16_044:
042519 21 43 43 04 3277*  	ld hl,F16_044
04251D 22 ED B6 04 3278*  	ld (cur_filename),hl
042521 11 1A C3 04 3279*  	ld de,filedata
042525 01 00 00 01 3280*  	ld bc,65536
042529 3E 01       3281*  	ld a,mos_load
04252B 5B CF       3282*  	RST.LIL 08h
04252D 21 AE 01 00 3283*  	ld hl,BUF_16_044
042531 01 40 01 00 3284*  	ld bc,320
042535 11 A0 00 00 3285*  	ld de,160
042539 DD 21 00 C8 3286*  	ld ix,51200
       00          
04253E CD 68 B8 04 3287*  	call vdu_load_img
042542 C9          3288*  	ret
042543             3289*  
042543             3290*  ld_17_004:
042543 21 57 43 04 3291*  	ld hl,F17_004
042547 22 ED B6 04 3292*  	ld (cur_filename),hl
04254B 11 1A C3 04 3293*  	ld de,filedata
04254F 01 00 00 01 3294*  	ld bc,65536
042553 3E 01       3295*  	ld a,mos_load
042555 5B CF       3296*  	RST.LIL 08h
042557 21 AF 01 00 3297*  	ld hl,BUF_17_004
04255B 01 24 00 00 3298*  	ld bc,36
04255F 11 23 00 00 3299*  	ld de,35
042563 DD 21 EC 04 3300*  	ld ix,1260
       00          
042568 CD 68 B8 04 3301*  	call vdu_load_img
04256C C9          3302*  	ret
04256D             3303*  
04256D             3304*  ld_17_009:
04256D 21 6B 43 04 3305*  	ld hl,F17_009
042571 22 ED B6 04 3306*  	ld (cur_filename),hl
042575 11 1A C3 04 3307*  	ld de,filedata
042579 01 00 00 01 3308*  	ld bc,65536
04257D 3E 01       3309*  	ld a,mos_load
04257F 5B CF       3310*  	RST.LIL 08h
042581 21 B0 01 00 3311*  	ld hl,BUF_17_009
042585 01 23 00 00 3312*  	ld bc,35
042589 11 2D 00 00 3313*  	ld de,45
04258D DD 21 27 06 3314*  	ld ix,1575
       00          
042592 CD 68 B8 04 3315*  	call vdu_load_img
042596 C9          3316*  	ret
042597             3317*  
042597             3318*  ld_17_010:
042597 21 7F 43 04 3319*  	ld hl,F17_010
04259B 22 ED B6 04 3320*  	ld (cur_filename),hl
04259F 11 1A C3 04 3321*  	ld de,filedata
0425A3 01 00 00 01 3322*  	ld bc,65536
0425A7 3E 01       3323*  	ld a,mos_load
0425A9 5B CF       3324*  	RST.LIL 08h
0425AB 21 B1 01 00 3325*  	ld hl,BUF_17_010
0425AF 01 19 00 00 3326*  	ld bc,25
0425B3 11 2D 00 00 3327*  	ld de,45
0425B7 DD 21 65 04 3328*  	ld ix,1125
       00          
0425BC CD 68 B8 04 3329*  	call vdu_load_img
0425C0 C9          3330*  	ret
0425C1             3331*  
0425C1             3332*  ld_17_011:
0425C1 21 93 43 04 3333*  	ld hl,F17_011
0425C5 22 ED B6 04 3334*  	ld (cur_filename),hl
0425C9 11 1A C3 04 3335*  	ld de,filedata
0425CD 01 00 00 01 3336*  	ld bc,65536
0425D1 3E 01       3337*  	ld a,mos_load
0425D3 5B CF       3338*  	RST.LIL 08h
0425D5 21 B2 01 00 3339*  	ld hl,BUF_17_011
0425D9 01 0F 00 00 3340*  	ld bc,15
0425DD 11 2D 00 00 3341*  	ld de,45
0425E1 DD 21 A3 02 3342*  	ld ix,675
       00          
0425E6 CD 68 B8 04 3343*  	call vdu_load_img
0425EA C9          3344*  	ret
0425EB             3345*  
0425EB             3346*  ld_17_012:
0425EB 21 A7 43 04 3347*  	ld hl,F17_012
0425EF 22 ED B6 04 3348*  	ld (cur_filename),hl
0425F3 11 1A C3 04 3349*  	ld de,filedata
0425F7 01 00 00 01 3350*  	ld bc,65536
0425FB 3E 01       3351*  	ld a,mos_load
0425FD 5B CF       3352*  	RST.LIL 08h
0425FF 21 B3 01 00 3353*  	ld hl,BUF_17_012
042603 01 05 00 00 3354*  	ld bc,5
042607 11 2D 00 00 3355*  	ld de,45
04260B DD 21 E1 00 3356*  	ld ix,225
       00          
042610 CD 68 B8 04 3357*  	call vdu_load_img
042614 C9          3358*  	ret
042615             3359*  
042615             3360*  ld_17_013:
042615 21 BB 43 04 3361*  	ld hl,F17_013
042619 22 ED B6 04 3362*  	ld (cur_filename),hl
04261D 11 1A C3 04 3363*  	ld de,filedata
042621 01 00 00 01 3364*  	ld bc,65536
042625 3E 01       3365*  	ld a,mos_load
042627 5B CF       3366*  	RST.LIL 08h
042629 21 B4 01 00 3367*  	ld hl,BUF_17_013
04262D 01 05 00 00 3368*  	ld bc,5
042631 11 2B 00 00 3369*  	ld de,43
042635 DD 21 D7 00 3370*  	ld ix,215
       00          
04263A CD 68 B8 04 3371*  	call vdu_load_img
04263E C9          3372*  	ret
04263F             3373*  
04263F             3374*  ld_17_014:
04263F 21 CF 43 04 3375*  	ld hl,F17_014
042643 22 ED B6 04 3376*  	ld (cur_filename),hl
042647 11 1A C3 04 3377*  	ld de,filedata
04264B 01 00 00 01 3378*  	ld bc,65536
04264F 3E 01       3379*  	ld a,mos_load
042651 5B CF       3380*  	RST.LIL 08h
042653 21 B5 01 00 3381*  	ld hl,BUF_17_014
042657 01 0F 00 00 3382*  	ld bc,15
04265B 11 2D 00 00 3383*  	ld de,45
04265F DD 21 A3 02 3384*  	ld ix,675
       00          
042664 CD 68 B8 04 3385*  	call vdu_load_img
042668 C9          3386*  	ret
042669             3387*  
042669             3388*  ld_17_015:
042669 21 E3 43 04 3389*  	ld hl,F17_015
04266D 22 ED B6 04 3390*  	ld (cur_filename),hl
042671 11 1A C3 04 3391*  	ld de,filedata
042675 01 00 00 01 3392*  	ld bc,65536
042679 3E 01       3393*  	ld a,mos_load
04267B 5B CF       3394*  	RST.LIL 08h
04267D 21 B6 01 00 3395*  	ld hl,BUF_17_015
042681 01 19 00 00 3396*  	ld bc,25
042685 11 2D 00 00 3397*  	ld de,45
042689 DD 21 65 04 3398*  	ld ix,1125
       00          
04268E CD 68 B8 04 3399*  	call vdu_load_img
042692 C9          3400*  	ret
042693             3401*  
042693             3402*  ld_17_016:
042693 21 F7 43 04 3403*  	ld hl,F17_016
042697 22 ED B6 04 3404*  	ld (cur_filename),hl
04269B 11 1A C3 04 3405*  	ld de,filedata
04269F 01 00 00 01 3406*  	ld bc,65536
0426A3 3E 01       3407*  	ld a,mos_load
0426A5 5B CF       3408*  	RST.LIL 08h
0426A7 21 B7 01 00 3409*  	ld hl,BUF_17_016
0426AB 01 23 00 00 3410*  	ld bc,35
0426AF 11 2D 00 00 3411*  	ld de,45
0426B3 DD 21 27 06 3412*  	ld ix,1575
       00          
0426B8 CD 68 B8 04 3413*  	call vdu_load_img
0426BC C9          3414*  	ret
0426BD             3415*  
0426BD             3416*  ld_17_020:
0426BD 21 0B 44 04 3417*  	ld hl,F17_020
0426C1 22 ED B6 04 3418*  	ld (cur_filename),hl
0426C5 11 1A C3 04 3419*  	ld de,filedata
0426C9 01 00 00 01 3420*  	ld bc,65536
0426CD 3E 01       3421*  	ld a,mos_load
0426CF 5B CF       3422*  	RST.LIL 08h
0426D1 21 B8 01 00 3423*  	ld hl,BUF_17_020
0426D5 01 2E 00 00 3424*  	ld bc,46
0426D9 11 2D 00 00 3425*  	ld de,45
0426DD DD 21 16 08 3426*  	ld ix,2070
       00          
0426E2 CD 68 B8 04 3427*  	call vdu_load_img
0426E6 C9          3428*  	ret
0426E7             3429*  
0426E7             3430*  ld_17_024:
0426E7 21 1F 44 04 3431*  	ld hl,F17_024
0426EB 22 ED B6 04 3432*  	ld (cur_filename),hl
0426EF 11 1A C3 04 3433*  	ld de,filedata
0426F3 01 00 00 01 3434*  	ld bc,65536
0426F7 3E 01       3435*  	ld a,mos_load
0426F9 5B CF       3436*  	RST.LIL 08h
0426FB 21 B9 01 00 3437*  	ld hl,BUF_17_024
0426FF 01 2E 00 00 3438*  	ld bc,46
042703 11 40 00 00 3439*  	ld de,64
042707 DD 21 80 0B 3440*  	ld ix,2944
       00          
04270C CD 68 B8 04 3441*  	call vdu_load_img
042710 C9          3442*  	ret
042711             3443*  
042711             3444*  ld_17_025:
042711 21 33 44 04 3445*  	ld hl,F17_025
042715 22 ED B6 04 3446*  	ld (cur_filename),hl
042719 11 1A C3 04 3447*  	ld de,filedata
04271D 01 00 00 01 3448*  	ld bc,65536
042721 3E 01       3449*  	ld a,mos_load
042723 5B CF       3450*  	RST.LIL 08h
042725 21 BA 01 00 3451*  	ld hl,BUF_17_025
042729 01 1C 00 00 3452*  	ld bc,28
04272D 11 40 00 00 3453*  	ld de,64
042731 DD 21 00 07 3454*  	ld ix,1792
       00          
042736 CD 68 B8 04 3455*  	call vdu_load_img
04273A C9          3456*  	ret
04273B             3457*  
04273B             3458*  ld_17_026:
04273B 21 47 44 04 3459*  	ld hl,F17_026
04273F 22 ED B6 04 3460*  	ld (cur_filename),hl
042743 11 1A C3 04 3461*  	ld de,filedata
042747 01 00 00 01 3462*  	ld bc,65536
04274B 3E 01       3463*  	ld a,mos_load
04274D 5B CF       3464*  	RST.LIL 08h
04274F 21 BB 01 00 3465*  	ld hl,BUF_17_026
042753 01 09 00 00 3466*  	ld bc,9
042757 11 40 00 00 3467*  	ld de,64
04275B DD 21 40 02 3468*  	ld ix,576
       00          
042760 CD 68 B8 04 3469*  	call vdu_load_img
042764 C9          3470*  	ret
042765             3471*  
042765             3472*  ld_17_027:
042765 21 5B 44 04 3473*  	ld hl,F17_027
042769 22 ED B6 04 3474*  	ld (cur_filename),hl
04276D 11 1A C3 04 3475*  	ld de,filedata
042771 01 00 00 01 3476*  	ld bc,65536
042775 3E 01       3477*  	ld a,mos_load
042777 5B CF       3478*  	RST.LIL 08h
042779 21 BC 01 00 3479*  	ld hl,BUF_17_027
04277D 01 0A 00 00 3480*  	ld bc,10
042781 11 3E 00 00 3481*  	ld de,62
042785 DD 21 6C 02 3482*  	ld ix,620
       00          
04278A CD 68 B8 04 3483*  	call vdu_load_img
04278E C9          3484*  	ret
04278F             3485*  
04278F             3486*  ld_17_028:
04278F 21 6F 44 04 3487*  	ld hl,F17_028
042793 22 ED B6 04 3488*  	ld (cur_filename),hl
042797 11 1A C3 04 3489*  	ld de,filedata
04279B 01 00 00 01 3490*  	ld bc,65536
04279F 3E 01       3491*  	ld a,mos_load
0427A1 5B CF       3492*  	RST.LIL 08h
0427A3 21 BD 01 00 3493*  	ld hl,BUF_17_028
0427A7 01 1C 00 00 3494*  	ld bc,28
0427AB 11 40 00 00 3495*  	ld de,64
0427AF DD 21 00 07 3496*  	ld ix,1792
       00          
0427B4 CD 68 B8 04 3497*  	call vdu_load_img
0427B8 C9          3498*  	ret
0427B9             3499*  
0427B9             3500*  ld_17_029:
0427B9 21 83 44 04 3501*  	ld hl,F17_029
0427BD 22 ED B6 04 3502*  	ld (cur_filename),hl
0427C1 11 1A C3 04 3503*  	ld de,filedata
0427C5 01 00 00 01 3504*  	ld bc,65536
0427C9 3E 01       3505*  	ld a,mos_load
0427CB 5B CF       3506*  	RST.LIL 08h
0427CD 21 BE 01 00 3507*  	ld hl,BUF_17_029
0427D1 01 2F 00 00 3508*  	ld bc,47
0427D5 11 40 00 00 3509*  	ld de,64
0427D9 DD 21 C0 0B 3510*  	ld ix,3008
       00          
0427DE CD 68 B8 04 3511*  	call vdu_load_img
0427E2 C9          3512*  	ret
0427E3             3513*  
0427E3             3514*  ld_17_032:
0427E3 21 97 44 04 3515*  	ld hl,F17_032
0427E7 22 ED B6 04 3516*  	ld (cur_filename),hl
0427EB 11 1A C3 04 3517*  	ld de,filedata
0427EF 01 00 00 01 3518*  	ld bc,65536
0427F3 3E 01       3519*  	ld a,mos_load
0427F5 5B CF       3520*  	RST.LIL 08h
0427F7 21 BF 01 00 3521*  	ld hl,BUF_17_032
0427FB 01 41 00 00 3522*  	ld bc,65
0427FF 11 40 00 00 3523*  	ld de,64
042803 DD 21 40 10 3524*  	ld ix,4160
       00          
042808 CD 68 B8 04 3525*  	call vdu_load_img
04280C C9          3526*  	ret
04280D             3527*  
04280D             3528*  ld_17_035:
04280D 21 AB 44 04 3529*  	ld hl,F17_035
042811 22 ED B6 04 3530*  	ld (cur_filename),hl
042815 11 1A C3 04 3531*  	ld de,filedata
042819 01 00 00 01 3532*  	ld bc,65536
04281D 3E 01       3533*  	ld a,mos_load
04281F 5B CF       3534*  	RST.LIL 08h
042821 21 C0 01 00 3535*  	ld hl,BUF_17_035
042825 01 3F 00 00 3536*  	ld bc,63
042829 11 6B 00 00 3537*  	ld de,107
04282D DD 21 55 1A 3538*  	ld ix,6741
       00          
042832 CD 68 B8 04 3539*  	call vdu_load_img
042836 C9          3540*  	ret
042837             3541*  
042837             3542*  ld_17_036:
042837 21 BF 44 04 3543*  	ld hl,F17_036
04283B 22 ED B6 04 3544*  	ld (cur_filename),hl
04283F 11 1A C3 04 3545*  	ld de,filedata
042843 01 00 00 01 3546*  	ld bc,65536
042847 3E 01       3547*  	ld a,mos_load
042849 5B CF       3548*  	RST.LIL 08h
04284B 21 C1 01 00 3549*  	ld hl,BUF_17_036
04284F 01 16 00 00 3550*  	ld bc,22
042853 11 6B 00 00 3551*  	ld de,107
042857 DD 21 32 09 3552*  	ld ix,2354
       00          
04285C CD 68 B8 04 3553*  	call vdu_load_img
042860 C9          3554*  	ret
042861             3555*  
042861             3556*  ld_17_037:
042861 21 D3 44 04 3557*  	ld hl,F17_037
042865 22 ED B6 04 3558*  	ld (cur_filename),hl
042869 11 1A C3 04 3559*  	ld de,filedata
04286D 01 00 00 01 3560*  	ld bc,65536
042871 3E 01       3561*  	ld a,mos_load
042873 5B CF       3562*  	RST.LIL 08h
042875 21 C2 01 00 3563*  	ld hl,BUF_17_037
042879 01 15 00 00 3564*  	ld bc,21
04287D 11 69 00 00 3565*  	ld de,105
042881 DD 21 9D 08 3566*  	ld ix,2205
       00          
042886 CD 68 B8 04 3567*  	call vdu_load_img
04288A C9          3568*  	ret
04288B             3569*  
04288B             3570*  ld_17_038:
04288B 21 E7 44 04 3571*  	ld hl,F17_038
04288F 22 ED B6 04 3572*  	ld (cur_filename),hl
042893 11 1A C3 04 3573*  	ld de,filedata
042897 01 00 00 01 3574*  	ld bc,65536
04289B 3E 01       3575*  	ld a,mos_load
04289D 5B CF       3576*  	RST.LIL 08h
04289F 21 C3 01 00 3577*  	ld hl,BUF_17_038
0428A3 01 3F 00 00 3578*  	ld bc,63
0428A7 11 6B 00 00 3579*  	ld de,107
0428AB DD 21 55 1A 3580*  	ld ix,6741
       00          
0428B0 CD 68 B8 04 3581*  	call vdu_load_img
0428B4 C9          3582*  	ret
0428B5             3583*  
0428B5             3584*  ld_17_040:
0428B5 21 FB 44 04 3585*  	ld hl,F17_040
0428B9 22 ED B6 04 3586*  	ld (cur_filename),hl
0428BD 11 1A C3 04 3587*  	ld de,filedata
0428C1 01 00 00 01 3588*  	ld bc,65536
0428C5 3E 01       3589*  	ld a,mos_load
0428C7 5B CF       3590*  	RST.LIL 08h
0428C9 21 C4 01 00 3591*  	ld hl,BUF_17_040
0428CD 01 6C 00 00 3592*  	ld bc,108
0428D1 11 6B 00 00 3593*  	ld de,107
0428D5 DD 21 24 2D 3594*  	ld ix,11556
       00          
0428DA CD 68 B8 04 3595*  	call vdu_load_img
0428DE C9          3596*  	ret
0428DF             3597*  
0428DF             3598*  ld_17_042:
0428DF 21 0F 45 04 3599*  	ld hl,F17_042
0428E3 22 ED B6 04 3600*  	ld (cur_filename),hl
0428E7 11 1A C3 04 3601*  	ld de,filedata
0428EB 01 00 00 01 3602*  	ld bc,65536
0428EF 3E 01       3603*  	ld a,mos_load
0428F1 5B CF       3604*  	RST.LIL 08h
0428F3 21 C5 01 00 3605*  	ld hl,BUF_17_042
0428F7 01 6A 00 00 3606*  	ld bc,106
0428FB 11 A0 00 00 3607*  	ld de,160
0428FF DD 21 40 42 3608*  	ld ix,16960
       00          
042904 CD 68 B8 04 3609*  	call vdu_load_img
042908 C9          3610*  	ret
042909             3611*  
042909             3612*  ld_17_043:
042909 21 23 45 04 3613*  	ld hl,F17_043
04290D 22 ED B6 04 3614*  	ld (cur_filename),hl
042911 11 1A C3 04 3615*  	ld de,filedata
042915 01 00 00 01 3616*  	ld bc,65536
042919 3E 01       3617*  	ld a,mos_load
04291B 5B CF       3618*  	RST.LIL 08h
04291D 21 C6 01 00 3619*  	ld hl,BUF_17_043
042921 01 6B 00 00 3620*  	ld bc,107
042925 11 A0 00 00 3621*  	ld de,160
042929 DD 21 E0 42 3622*  	ld ix,17120
       00          
04292E CD 68 B8 04 3623*  	call vdu_load_img
042932 C9          3624*  	ret
042933             3625*  
042933             3626*  ld_17_044:
042933 21 37 45 04 3627*  	ld hl,F17_044
042937 22 ED B6 04 3628*  	ld (cur_filename),hl
04293B 11 1A C3 04 3629*  	ld de,filedata
04293F 01 00 00 01 3630*  	ld bc,65536
042943 3E 01       3631*  	ld a,mos_load
042945 5B CF       3632*  	RST.LIL 08h
042947 21 C7 01 00 3633*  	ld hl,BUF_17_044
04294B 01 40 01 00 3634*  	ld bc,320
04294F 11 A0 00 00 3635*  	ld de,160
042953 DD 21 00 C8 3636*  	ld ix,51200
       00          
042958 CD 68 B8 04 3637*  	call vdu_load_img
04295C C9          3638*  	ret
04295D             3639*  
04295D             3640*  ld_57_004:
04295D 21 4B 45 04 3641*  	ld hl,F57_004
042961 22 ED B6 04 3642*  	ld (cur_filename),hl
042965 11 1A C3 04 3643*  	ld de,filedata
042969 01 00 00 01 3644*  	ld bc,65536
04296D 3E 01       3645*  	ld a,mos_load
04296F 5B CF       3646*  	RST.LIL 08h
042971 21 C8 01 00 3647*  	ld hl,BUF_57_004
042975 01 24 00 00 3648*  	ld bc,36
042979 11 23 00 00 3649*  	ld de,35
04297D DD 21 EC 04 3650*  	ld ix,1260
       00          
042982 CD 68 B8 04 3651*  	call vdu_load_img
042986 C9          3652*  	ret
042987             3653*  
042987             3654*  ld_57_009:
042987 21 5F 45 04 3655*  	ld hl,F57_009
04298B 22 ED B6 04 3656*  	ld (cur_filename),hl
04298F 11 1A C3 04 3657*  	ld de,filedata
042993 01 00 00 01 3658*  	ld bc,65536
042997 3E 01       3659*  	ld a,mos_load
042999 5B CF       3660*  	RST.LIL 08h
04299B 21 C9 01 00 3661*  	ld hl,BUF_57_009
04299F 01 23 00 00 3662*  	ld bc,35
0429A3 11 2D 00 00 3663*  	ld de,45
0429A7 DD 21 27 06 3664*  	ld ix,1575
       00          
0429AC CD 68 B8 04 3665*  	call vdu_load_img
0429B0 C9          3666*  	ret
0429B1             3667*  
0429B1             3668*  ld_57_010:
0429B1 21 73 45 04 3669*  	ld hl,F57_010
0429B5 22 ED B6 04 3670*  	ld (cur_filename),hl
0429B9 11 1A C3 04 3671*  	ld de,filedata
0429BD 01 00 00 01 3672*  	ld bc,65536
0429C1 3E 01       3673*  	ld a,mos_load
0429C3 5B CF       3674*  	RST.LIL 08h
0429C5 21 CA 01 00 3675*  	ld hl,BUF_57_010
0429C9 01 19 00 00 3676*  	ld bc,25
0429CD 11 2D 00 00 3677*  	ld de,45
0429D1 DD 21 65 04 3678*  	ld ix,1125
       00          
0429D6 CD 68 B8 04 3679*  	call vdu_load_img
0429DA C9          3680*  	ret
0429DB             3681*  
0429DB             3682*  ld_57_011:
0429DB 21 87 45 04 3683*  	ld hl,F57_011
0429DF 22 ED B6 04 3684*  	ld (cur_filename),hl
0429E3 11 1A C3 04 3685*  	ld de,filedata
0429E7 01 00 00 01 3686*  	ld bc,65536
0429EB 3E 01       3687*  	ld a,mos_load
0429ED 5B CF       3688*  	RST.LIL 08h
0429EF 21 CB 01 00 3689*  	ld hl,BUF_57_011
0429F3 01 0F 00 00 3690*  	ld bc,15
0429F7 11 2D 00 00 3691*  	ld de,45
0429FB DD 21 A3 02 3692*  	ld ix,675
       00          
042A00 CD 68 B8 04 3693*  	call vdu_load_img
042A04 C9          3694*  	ret
042A05             3695*  
042A05             3696*  ld_57_012:
042A05 21 9B 45 04 3697*  	ld hl,F57_012
042A09 22 ED B6 04 3698*  	ld (cur_filename),hl
042A0D 11 1A C3 04 3699*  	ld de,filedata
042A11 01 00 00 01 3700*  	ld bc,65536
042A15 3E 01       3701*  	ld a,mos_load
042A17 5B CF       3702*  	RST.LIL 08h
042A19 21 CC 01 00 3703*  	ld hl,BUF_57_012
042A1D 01 05 00 00 3704*  	ld bc,5
042A21 11 2D 00 00 3705*  	ld de,45
042A25 DD 21 E1 00 3706*  	ld ix,225
       00          
042A2A CD 68 B8 04 3707*  	call vdu_load_img
042A2E C9          3708*  	ret
042A2F             3709*  
042A2F             3710*  ld_57_013:
042A2F 21 AF 45 04 3711*  	ld hl,F57_013
042A33 22 ED B6 04 3712*  	ld (cur_filename),hl
042A37 11 1A C3 04 3713*  	ld de,filedata
042A3B 01 00 00 01 3714*  	ld bc,65536
042A3F 3E 01       3715*  	ld a,mos_load
042A41 5B CF       3716*  	RST.LIL 08h
042A43 21 CD 01 00 3717*  	ld hl,BUF_57_013
042A47 01 05 00 00 3718*  	ld bc,5
042A4B 11 2B 00 00 3719*  	ld de,43
042A4F DD 21 D7 00 3720*  	ld ix,215
       00          
042A54 CD 68 B8 04 3721*  	call vdu_load_img
042A58 C9          3722*  	ret
042A59             3723*  
042A59             3724*  ld_57_014:
042A59 21 C3 45 04 3725*  	ld hl,F57_014
042A5D 22 ED B6 04 3726*  	ld (cur_filename),hl
042A61 11 1A C3 04 3727*  	ld de,filedata
042A65 01 00 00 01 3728*  	ld bc,65536
042A69 3E 01       3729*  	ld a,mos_load
042A6B 5B CF       3730*  	RST.LIL 08h
042A6D 21 CE 01 00 3731*  	ld hl,BUF_57_014
042A71 01 0F 00 00 3732*  	ld bc,15
042A75 11 2D 00 00 3733*  	ld de,45
042A79 DD 21 A3 02 3734*  	ld ix,675
       00          
042A7E CD 68 B8 04 3735*  	call vdu_load_img
042A82 C9          3736*  	ret
042A83             3737*  
042A83             3738*  ld_57_015:
042A83 21 D7 45 04 3739*  	ld hl,F57_015
042A87 22 ED B6 04 3740*  	ld (cur_filename),hl
042A8B 11 1A C3 04 3741*  	ld de,filedata
042A8F 01 00 00 01 3742*  	ld bc,65536
042A93 3E 01       3743*  	ld a,mos_load
042A95 5B CF       3744*  	RST.LIL 08h
042A97 21 CF 01 00 3745*  	ld hl,BUF_57_015
042A9B 01 19 00 00 3746*  	ld bc,25
042A9F 11 2D 00 00 3747*  	ld de,45
042AA3 DD 21 65 04 3748*  	ld ix,1125
       00          
042AA8 CD 68 B8 04 3749*  	call vdu_load_img
042AAC C9          3750*  	ret
042AAD             3751*  
042AAD             3752*  ld_57_016:
042AAD 21 EB 45 04 3753*  	ld hl,F57_016
042AB1 22 ED B6 04 3754*  	ld (cur_filename),hl
042AB5 11 1A C3 04 3755*  	ld de,filedata
042AB9 01 00 00 01 3756*  	ld bc,65536
042ABD 3E 01       3757*  	ld a,mos_load
042ABF 5B CF       3758*  	RST.LIL 08h
042AC1 21 D0 01 00 3759*  	ld hl,BUF_57_016
042AC5 01 23 00 00 3760*  	ld bc,35
042AC9 11 2D 00 00 3761*  	ld de,45
042ACD DD 21 27 06 3762*  	ld ix,1575
       00          
042AD2 CD 68 B8 04 3763*  	call vdu_load_img
042AD6 C9          3764*  	ret
042AD7             3765*  
042AD7             3766*  ld_57_020:
042AD7 21 FF 45 04 3767*  	ld hl,F57_020
042ADB 22 ED B6 04 3768*  	ld (cur_filename),hl
042ADF 11 1A C3 04 3769*  	ld de,filedata
042AE3 01 00 00 01 3770*  	ld bc,65536
042AE7 3E 01       3771*  	ld a,mos_load
042AE9 5B CF       3772*  	RST.LIL 08h
042AEB 21 D1 01 00 3773*  	ld hl,BUF_57_020
042AEF 01 2E 00 00 3774*  	ld bc,46
042AF3 11 2D 00 00 3775*  	ld de,45
042AF7 DD 21 16 08 3776*  	ld ix,2070
       00          
042AFC CD 68 B8 04 3777*  	call vdu_load_img
042B00 C9          3778*  	ret
042B01             3779*  
042B01             3780*  ld_57_024:
042B01 21 13 46 04 3781*  	ld hl,F57_024
042B05 22 ED B6 04 3782*  	ld (cur_filename),hl
042B09 11 1A C3 04 3783*  	ld de,filedata
042B0D 01 00 00 01 3784*  	ld bc,65536
042B11 3E 01       3785*  	ld a,mos_load
042B13 5B CF       3786*  	RST.LIL 08h
042B15 21 D2 01 00 3787*  	ld hl,BUF_57_024
042B19 01 2E 00 00 3788*  	ld bc,46
042B1D 11 40 00 00 3789*  	ld de,64
042B21 DD 21 80 0B 3790*  	ld ix,2944
       00          
042B26 CD 68 B8 04 3791*  	call vdu_load_img
042B2A C9          3792*  	ret
042B2B             3793*  
042B2B             3794*  ld_57_025:
042B2B 21 27 46 04 3795*  	ld hl,F57_025
042B2F 22 ED B6 04 3796*  	ld (cur_filename),hl
042B33 11 1A C3 04 3797*  	ld de,filedata
042B37 01 00 00 01 3798*  	ld bc,65536
042B3B 3E 01       3799*  	ld a,mos_load
042B3D 5B CF       3800*  	RST.LIL 08h
042B3F 21 D3 01 00 3801*  	ld hl,BUF_57_025
042B43 01 1C 00 00 3802*  	ld bc,28
042B47 11 40 00 00 3803*  	ld de,64
042B4B DD 21 00 07 3804*  	ld ix,1792
       00          
042B50 CD 68 B8 04 3805*  	call vdu_load_img
042B54 C9          3806*  	ret
042B55             3807*  
042B55             3808*  ld_57_026:
042B55 21 3B 46 04 3809*  	ld hl,F57_026
042B59 22 ED B6 04 3810*  	ld (cur_filename),hl
042B5D 11 1A C3 04 3811*  	ld de,filedata
042B61 01 00 00 01 3812*  	ld bc,65536
042B65 3E 01       3813*  	ld a,mos_load
042B67 5B CF       3814*  	RST.LIL 08h
042B69 21 D4 01 00 3815*  	ld hl,BUF_57_026
042B6D 01 09 00 00 3816*  	ld bc,9
042B71 11 40 00 00 3817*  	ld de,64
042B75 DD 21 40 02 3818*  	ld ix,576
       00          
042B7A CD 68 B8 04 3819*  	call vdu_load_img
042B7E C9          3820*  	ret
042B7F             3821*  
042B7F             3822*  ld_57_027:
042B7F 21 4F 46 04 3823*  	ld hl,F57_027
042B83 22 ED B6 04 3824*  	ld (cur_filename),hl
042B87 11 1A C3 04 3825*  	ld de,filedata
042B8B 01 00 00 01 3826*  	ld bc,65536
042B8F 3E 01       3827*  	ld a,mos_load
042B91 5B CF       3828*  	RST.LIL 08h
042B93 21 D5 01 00 3829*  	ld hl,BUF_57_027
042B97 01 0A 00 00 3830*  	ld bc,10
042B9B 11 3E 00 00 3831*  	ld de,62
042B9F DD 21 6C 02 3832*  	ld ix,620
       00          
042BA4 CD 68 B8 04 3833*  	call vdu_load_img
042BA8 C9          3834*  	ret
042BA9             3835*  
042BA9             3836*  ld_57_028:
042BA9 21 63 46 04 3837*  	ld hl,F57_028
042BAD 22 ED B6 04 3838*  	ld (cur_filename),hl
042BB1 11 1A C3 04 3839*  	ld de,filedata
042BB5 01 00 00 01 3840*  	ld bc,65536
042BB9 3E 01       3841*  	ld a,mos_load
042BBB 5B CF       3842*  	RST.LIL 08h
042BBD 21 D6 01 00 3843*  	ld hl,BUF_57_028
042BC1 01 1C 00 00 3844*  	ld bc,28
042BC5 11 40 00 00 3845*  	ld de,64
042BC9 DD 21 00 07 3846*  	ld ix,1792
       00          
042BCE CD 68 B8 04 3847*  	call vdu_load_img
042BD2 C9          3848*  	ret
042BD3             3849*  
042BD3             3850*  ld_57_029:
042BD3 21 77 46 04 3851*  	ld hl,F57_029
042BD7 22 ED B6 04 3852*  	ld (cur_filename),hl
042BDB 11 1A C3 04 3853*  	ld de,filedata
042BDF 01 00 00 01 3854*  	ld bc,65536
042BE3 3E 01       3855*  	ld a,mos_load
042BE5 5B CF       3856*  	RST.LIL 08h
042BE7 21 D7 01 00 3857*  	ld hl,BUF_57_029
042BEB 01 2F 00 00 3858*  	ld bc,47
042BEF 11 40 00 00 3859*  	ld de,64
042BF3 DD 21 C0 0B 3860*  	ld ix,3008
       00          
042BF8 CD 68 B8 04 3861*  	call vdu_load_img
042BFC C9          3862*  	ret
042BFD             3863*  
042BFD             3864*  ld_57_032:
042BFD 21 8B 46 04 3865*  	ld hl,F57_032
042C01 22 ED B6 04 3866*  	ld (cur_filename),hl
042C05 11 1A C3 04 3867*  	ld de,filedata
042C09 01 00 00 01 3868*  	ld bc,65536
042C0D 3E 01       3869*  	ld a,mos_load
042C0F 5B CF       3870*  	RST.LIL 08h
042C11 21 D8 01 00 3871*  	ld hl,BUF_57_032
042C15 01 41 00 00 3872*  	ld bc,65
042C19 11 40 00 00 3873*  	ld de,64
042C1D DD 21 40 10 3874*  	ld ix,4160
       00          
042C22 CD 68 B8 04 3875*  	call vdu_load_img
042C26 C9          3876*  	ret
042C27             3877*  
042C27             3878*  ld_57_035:
042C27 21 9F 46 04 3879*  	ld hl,F57_035
042C2B 22 ED B6 04 3880*  	ld (cur_filename),hl
042C2F 11 1A C3 04 3881*  	ld de,filedata
042C33 01 00 00 01 3882*  	ld bc,65536
042C37 3E 01       3883*  	ld a,mos_load
042C39 5B CF       3884*  	RST.LIL 08h
042C3B 21 D9 01 00 3885*  	ld hl,BUF_57_035
042C3F 01 3F 00 00 3886*  	ld bc,63
042C43 11 6B 00 00 3887*  	ld de,107
042C47 DD 21 55 1A 3888*  	ld ix,6741
       00          
042C4C CD 68 B8 04 3889*  	call vdu_load_img
042C50 C9          3890*  	ret
042C51             3891*  
042C51             3892*  ld_57_036:
042C51 21 B3 46 04 3893*  	ld hl,F57_036
042C55 22 ED B6 04 3894*  	ld (cur_filename),hl
042C59 11 1A C3 04 3895*  	ld de,filedata
042C5D 01 00 00 01 3896*  	ld bc,65536
042C61 3E 01       3897*  	ld a,mos_load
042C63 5B CF       3898*  	RST.LIL 08h
042C65 21 DA 01 00 3899*  	ld hl,BUF_57_036
042C69 01 16 00 00 3900*  	ld bc,22
042C6D 11 6B 00 00 3901*  	ld de,107
042C71 DD 21 32 09 3902*  	ld ix,2354
       00          
042C76 CD 68 B8 04 3903*  	call vdu_load_img
042C7A C9          3904*  	ret
042C7B             3905*  
042C7B             3906*  ld_57_037:
042C7B 21 C7 46 04 3907*  	ld hl,F57_037
042C7F 22 ED B6 04 3908*  	ld (cur_filename),hl
042C83 11 1A C3 04 3909*  	ld de,filedata
042C87 01 00 00 01 3910*  	ld bc,65536
042C8B 3E 01       3911*  	ld a,mos_load
042C8D 5B CF       3912*  	RST.LIL 08h
042C8F 21 DB 01 00 3913*  	ld hl,BUF_57_037
042C93 01 15 00 00 3914*  	ld bc,21
042C97 11 69 00 00 3915*  	ld de,105
042C9B DD 21 9D 08 3916*  	ld ix,2205
       00          
042CA0 CD 68 B8 04 3917*  	call vdu_load_img
042CA4 C9          3918*  	ret
042CA5             3919*  
042CA5             3920*  ld_57_038:
042CA5 21 DB 46 04 3921*  	ld hl,F57_038
042CA9 22 ED B6 04 3922*  	ld (cur_filename),hl
042CAD 11 1A C3 04 3923*  	ld de,filedata
042CB1 01 00 00 01 3924*  	ld bc,65536
042CB5 3E 01       3925*  	ld a,mos_load
042CB7 5B CF       3926*  	RST.LIL 08h
042CB9 21 DC 01 00 3927*  	ld hl,BUF_57_038
042CBD 01 3F 00 00 3928*  	ld bc,63
042CC1 11 6B 00 00 3929*  	ld de,107
042CC5 DD 21 55 1A 3930*  	ld ix,6741
       00          
042CCA CD 68 B8 04 3931*  	call vdu_load_img
042CCE C9          3932*  	ret
042CCF             3933*  
042CCF             3934*  ld_57_040:
042CCF 21 EF 46 04 3935*  	ld hl,F57_040
042CD3 22 ED B6 04 3936*  	ld (cur_filename),hl
042CD7 11 1A C3 04 3937*  	ld de,filedata
042CDB 01 00 00 01 3938*  	ld bc,65536
042CDF 3E 01       3939*  	ld a,mos_load
042CE1 5B CF       3940*  	RST.LIL 08h
042CE3 21 DD 01 00 3941*  	ld hl,BUF_57_040
042CE7 01 6C 00 00 3942*  	ld bc,108
042CEB 11 6B 00 00 3943*  	ld de,107
042CEF DD 21 24 2D 3944*  	ld ix,11556
       00          
042CF4 CD 68 B8 04 3945*  	call vdu_load_img
042CF8 C9          3946*  	ret
042CF9             3947*  
042CF9             3948*  ld_57_042:
042CF9 21 03 47 04 3949*  	ld hl,F57_042
042CFD 22 ED B6 04 3950*  	ld (cur_filename),hl
042D01 11 1A C3 04 3951*  	ld de,filedata
042D05 01 00 00 01 3952*  	ld bc,65536
042D09 3E 01       3953*  	ld a,mos_load
042D0B 5B CF       3954*  	RST.LIL 08h
042D0D 21 DE 01 00 3955*  	ld hl,BUF_57_042
042D11 01 6A 00 00 3956*  	ld bc,106
042D15 11 A0 00 00 3957*  	ld de,160
042D19 DD 21 40 42 3958*  	ld ix,16960
       00          
042D1E CD 68 B8 04 3959*  	call vdu_load_img
042D22 C9          3960*  	ret
042D23             3961*  
042D23             3962*  ld_57_043:
042D23 21 17 47 04 3963*  	ld hl,F57_043
042D27 22 ED B6 04 3964*  	ld (cur_filename),hl
042D2B 11 1A C3 04 3965*  	ld de,filedata
042D2F 01 00 00 01 3966*  	ld bc,65536
042D33 3E 01       3967*  	ld a,mos_load
042D35 5B CF       3968*  	RST.LIL 08h
042D37 21 DF 01 00 3969*  	ld hl,BUF_57_043
042D3B 01 6B 00 00 3970*  	ld bc,107
042D3F 11 A0 00 00 3971*  	ld de,160
042D43 DD 21 E0 42 3972*  	ld ix,17120
       00          
042D48 CD 68 B8 04 3973*  	call vdu_load_img
042D4C C9          3974*  	ret
042D4D             3975*  
042D4D             3976*  ld_57_044:
042D4D 21 2B 47 04 3977*  	ld hl,F57_044
042D51 22 ED B6 04 3978*  	ld (cur_filename),hl
042D55 11 1A C3 04 3979*  	ld de,filedata
042D59 01 00 00 01 3980*  	ld bc,65536
042D5D 3E 01       3981*  	ld a,mos_load
042D5F 5B CF       3982*  	RST.LIL 08h
042D61 21 E0 01 00 3983*  	ld hl,BUF_57_044
042D65 01 40 01 00 3984*  	ld bc,320
042D69 11 A0 00 00 3985*  	ld de,160
042D6D DD 21 00 C8 3986*  	ld ix,51200
       00          
042D72 CD 68 B8 04 3987*  	call vdu_load_img
042D76 C9          3988*  	ret
042D77             3989*  
042D77             3990*  ld_58_004:
042D77 21 3F 47 04 3991*  	ld hl,F58_004
042D7B 22 ED B6 04 3992*  	ld (cur_filename),hl
042D7F 11 1A C3 04 3993*  	ld de,filedata
042D83 01 00 00 01 3994*  	ld bc,65536
042D87 3E 01       3995*  	ld a,mos_load
042D89 5B CF       3996*  	RST.LIL 08h
042D8B 21 E1 01 00 3997*  	ld hl,BUF_58_004
042D8F 01 24 00 00 3998*  	ld bc,36
042D93 11 23 00 00 3999*  	ld de,35
042D97 DD 21 EC 04 4000*  	ld ix,1260
       00          
042D9C CD 68 B8 04 4001*  	call vdu_load_img
042DA0 C9          4002*  	ret
042DA1             4003*  
042DA1             4004*  ld_58_009:
042DA1 21 53 47 04 4005*  	ld hl,F58_009
042DA5 22 ED B6 04 4006*  	ld (cur_filename),hl
042DA9 11 1A C3 04 4007*  	ld de,filedata
042DAD 01 00 00 01 4008*  	ld bc,65536
042DB1 3E 01       4009*  	ld a,mos_load
042DB3 5B CF       4010*  	RST.LIL 08h
042DB5 21 E2 01 00 4011*  	ld hl,BUF_58_009
042DB9 01 23 00 00 4012*  	ld bc,35
042DBD 11 2D 00 00 4013*  	ld de,45
042DC1 DD 21 27 06 4014*  	ld ix,1575
       00          
042DC6 CD 68 B8 04 4015*  	call vdu_load_img
042DCA C9          4016*  	ret
042DCB             4017*  
042DCB             4018*  ld_58_010:
042DCB 21 67 47 04 4019*  	ld hl,F58_010
042DCF 22 ED B6 04 4020*  	ld (cur_filename),hl
042DD3 11 1A C3 04 4021*  	ld de,filedata
042DD7 01 00 00 01 4022*  	ld bc,65536
042DDB 3E 01       4023*  	ld a,mos_load
042DDD 5B CF       4024*  	RST.LIL 08h
042DDF 21 E3 01 00 4025*  	ld hl,BUF_58_010
042DE3 01 19 00 00 4026*  	ld bc,25
042DE7 11 2D 00 00 4027*  	ld de,45
042DEB DD 21 65 04 4028*  	ld ix,1125
       00          
042DF0 CD 68 B8 04 4029*  	call vdu_load_img
042DF4 C9          4030*  	ret
042DF5             4031*  
042DF5             4032*  ld_58_011:
042DF5 21 7B 47 04 4033*  	ld hl,F58_011
042DF9 22 ED B6 04 4034*  	ld (cur_filename),hl
042DFD 11 1A C3 04 4035*  	ld de,filedata
042E01 01 00 00 01 4036*  	ld bc,65536
042E05 3E 01       4037*  	ld a,mos_load
042E07 5B CF       4038*  	RST.LIL 08h
042E09 21 E4 01 00 4039*  	ld hl,BUF_58_011
042E0D 01 0F 00 00 4040*  	ld bc,15
042E11 11 2D 00 00 4041*  	ld de,45
042E15 DD 21 A3 02 4042*  	ld ix,675
       00          
042E1A CD 68 B8 04 4043*  	call vdu_load_img
042E1E C9          4044*  	ret
042E1F             4045*  
042E1F             4046*  ld_58_012:
042E1F 21 8F 47 04 4047*  	ld hl,F58_012
042E23 22 ED B6 04 4048*  	ld (cur_filename),hl
042E27 11 1A C3 04 4049*  	ld de,filedata
042E2B 01 00 00 01 4050*  	ld bc,65536
042E2F 3E 01       4051*  	ld a,mos_load
042E31 5B CF       4052*  	RST.LIL 08h
042E33 21 E5 01 00 4053*  	ld hl,BUF_58_012
042E37 01 05 00 00 4054*  	ld bc,5
042E3B 11 2D 00 00 4055*  	ld de,45
042E3F DD 21 E1 00 4056*  	ld ix,225
       00          
042E44 CD 68 B8 04 4057*  	call vdu_load_img
042E48 C9          4058*  	ret
042E49             4059*  
042E49             4060*  ld_58_013:
042E49 21 A3 47 04 4061*  	ld hl,F58_013
042E4D 22 ED B6 04 4062*  	ld (cur_filename),hl
042E51 11 1A C3 04 4063*  	ld de,filedata
042E55 01 00 00 01 4064*  	ld bc,65536
042E59 3E 01       4065*  	ld a,mos_load
042E5B 5B CF       4066*  	RST.LIL 08h
042E5D 21 E6 01 00 4067*  	ld hl,BUF_58_013
042E61 01 05 00 00 4068*  	ld bc,5
042E65 11 2B 00 00 4069*  	ld de,43
042E69 DD 21 D7 00 4070*  	ld ix,215
       00          
042E6E CD 68 B8 04 4071*  	call vdu_load_img
042E72 C9          4072*  	ret
042E73             4073*  
042E73             4074*  ld_58_014:
042E73 21 B7 47 04 4075*  	ld hl,F58_014
042E77 22 ED B6 04 4076*  	ld (cur_filename),hl
042E7B 11 1A C3 04 4077*  	ld de,filedata
042E7F 01 00 00 01 4078*  	ld bc,65536
042E83 3E 01       4079*  	ld a,mos_load
042E85 5B CF       4080*  	RST.LIL 08h
042E87 21 E7 01 00 4081*  	ld hl,BUF_58_014
042E8B 01 0F 00 00 4082*  	ld bc,15
042E8F 11 2D 00 00 4083*  	ld de,45
042E93 DD 21 A3 02 4084*  	ld ix,675
       00          
042E98 CD 68 B8 04 4085*  	call vdu_load_img
042E9C C9          4086*  	ret
042E9D             4087*  
042E9D             4088*  ld_58_015:
042E9D 21 CB 47 04 4089*  	ld hl,F58_015
042EA1 22 ED B6 04 4090*  	ld (cur_filename),hl
042EA5 11 1A C3 04 4091*  	ld de,filedata
042EA9 01 00 00 01 4092*  	ld bc,65536
042EAD 3E 01       4093*  	ld a,mos_load
042EAF 5B CF       4094*  	RST.LIL 08h
042EB1 21 E8 01 00 4095*  	ld hl,BUF_58_015
042EB5 01 19 00 00 4096*  	ld bc,25
042EB9 11 2D 00 00 4097*  	ld de,45
042EBD DD 21 65 04 4098*  	ld ix,1125
       00          
042EC2 CD 68 B8 04 4099*  	call vdu_load_img
042EC6 C9          4100*  	ret
042EC7             4101*  
042EC7             4102*  ld_58_016:
042EC7 21 DF 47 04 4103*  	ld hl,F58_016
042ECB 22 ED B6 04 4104*  	ld (cur_filename),hl
042ECF 11 1A C3 04 4105*  	ld de,filedata
042ED3 01 00 00 01 4106*  	ld bc,65536
042ED7 3E 01       4107*  	ld a,mos_load
042ED9 5B CF       4108*  	RST.LIL 08h
042EDB 21 E9 01 00 4109*  	ld hl,BUF_58_016
042EDF 01 23 00 00 4110*  	ld bc,35
042EE3 11 2D 00 00 4111*  	ld de,45
042EE7 DD 21 27 06 4112*  	ld ix,1575
       00          
042EEC CD 68 B8 04 4113*  	call vdu_load_img
042EF0 C9          4114*  	ret
042EF1             4115*  
042EF1             4116*  ld_58_020:
042EF1 21 F3 47 04 4117*  	ld hl,F58_020
042EF5 22 ED B6 04 4118*  	ld (cur_filename),hl
042EF9 11 1A C3 04 4119*  	ld de,filedata
042EFD 01 00 00 01 4120*  	ld bc,65536
042F01 3E 01       4121*  	ld a,mos_load
042F03 5B CF       4122*  	RST.LIL 08h
042F05 21 EA 01 00 4123*  	ld hl,BUF_58_020
042F09 01 2E 00 00 4124*  	ld bc,46
042F0D 11 2D 00 00 4125*  	ld de,45
042F11 DD 21 16 08 4126*  	ld ix,2070
       00          
042F16 CD 68 B8 04 4127*  	call vdu_load_img
042F1A C9          4128*  	ret
042F1B             4129*  
042F1B             4130*  ld_58_024:
042F1B 21 07 48 04 4131*  	ld hl,F58_024
042F1F 22 ED B6 04 4132*  	ld (cur_filename),hl
042F23 11 1A C3 04 4133*  	ld de,filedata
042F27 01 00 00 01 4134*  	ld bc,65536
042F2B 3E 01       4135*  	ld a,mos_load
042F2D 5B CF       4136*  	RST.LIL 08h
042F2F 21 EB 01 00 4137*  	ld hl,BUF_58_024
042F33 01 2E 00 00 4138*  	ld bc,46
042F37 11 40 00 00 4139*  	ld de,64
042F3B DD 21 80 0B 4140*  	ld ix,2944
       00          
042F40 CD 68 B8 04 4141*  	call vdu_load_img
042F44 C9          4142*  	ret
042F45             4143*  
042F45             4144*  ld_58_025:
042F45 21 1B 48 04 4145*  	ld hl,F58_025
042F49 22 ED B6 04 4146*  	ld (cur_filename),hl
042F4D 11 1A C3 04 4147*  	ld de,filedata
042F51 01 00 00 01 4148*  	ld bc,65536
042F55 3E 01       4149*  	ld a,mos_load
042F57 5B CF       4150*  	RST.LIL 08h
042F59 21 EC 01 00 4151*  	ld hl,BUF_58_025
042F5D 01 1C 00 00 4152*  	ld bc,28
042F61 11 40 00 00 4153*  	ld de,64
042F65 DD 21 00 07 4154*  	ld ix,1792
       00          
042F6A CD 68 B8 04 4155*  	call vdu_load_img
042F6E C9          4156*  	ret
042F6F             4157*  
042F6F             4158*  ld_58_026:
042F6F 21 2F 48 04 4159*  	ld hl,F58_026
042F73 22 ED B6 04 4160*  	ld (cur_filename),hl
042F77 11 1A C3 04 4161*  	ld de,filedata
042F7B 01 00 00 01 4162*  	ld bc,65536
042F7F 3E 01       4163*  	ld a,mos_load
042F81 5B CF       4164*  	RST.LIL 08h
042F83 21 ED 01 00 4165*  	ld hl,BUF_58_026
042F87 01 09 00 00 4166*  	ld bc,9
042F8B 11 40 00 00 4167*  	ld de,64
042F8F DD 21 40 02 4168*  	ld ix,576
       00          
042F94 CD 68 B8 04 4169*  	call vdu_load_img
042F98 C9          4170*  	ret
042F99             4171*  
042F99             4172*  ld_58_027:
042F99 21 43 48 04 4173*  	ld hl,F58_027
042F9D 22 ED B6 04 4174*  	ld (cur_filename),hl
042FA1 11 1A C3 04 4175*  	ld de,filedata
042FA5 01 00 00 01 4176*  	ld bc,65536
042FA9 3E 01       4177*  	ld a,mos_load
042FAB 5B CF       4178*  	RST.LIL 08h
042FAD 21 EE 01 00 4179*  	ld hl,BUF_58_027
042FB1 01 0A 00 00 4180*  	ld bc,10
042FB5 11 3E 00 00 4181*  	ld de,62
042FB9 DD 21 6C 02 4182*  	ld ix,620
       00          
042FBE CD 68 B8 04 4183*  	call vdu_load_img
042FC2 C9          4184*  	ret
042FC3             4185*  
042FC3             4186*  ld_58_028:
042FC3 21 57 48 04 4187*  	ld hl,F58_028
042FC7 22 ED B6 04 4188*  	ld (cur_filename),hl
042FCB 11 1A C3 04 4189*  	ld de,filedata
042FCF 01 00 00 01 4190*  	ld bc,65536
042FD3 3E 01       4191*  	ld a,mos_load
042FD5 5B CF       4192*  	RST.LIL 08h
042FD7 21 EF 01 00 4193*  	ld hl,BUF_58_028
042FDB 01 1C 00 00 4194*  	ld bc,28
042FDF 11 40 00 00 4195*  	ld de,64
042FE3 DD 21 00 07 4196*  	ld ix,1792
       00          
042FE8 CD 68 B8 04 4197*  	call vdu_load_img
042FEC C9          4198*  	ret
042FED             4199*  
042FED             4200*  ld_58_029:
042FED 21 6B 48 04 4201*  	ld hl,F58_029
042FF1 22 ED B6 04 4202*  	ld (cur_filename),hl
042FF5 11 1A C3 04 4203*  	ld de,filedata
042FF9 01 00 00 01 4204*  	ld bc,65536
042FFD 3E 01       4205*  	ld a,mos_load
042FFF 5B CF       4206*  	RST.LIL 08h
043001 21 F0 01 00 4207*  	ld hl,BUF_58_029
043005 01 2F 00 00 4208*  	ld bc,47
043009 11 40 00 00 4209*  	ld de,64
04300D DD 21 C0 0B 4210*  	ld ix,3008
       00          
043012 CD 68 B8 04 4211*  	call vdu_load_img
043016 C9          4212*  	ret
043017             4213*  
043017             4214*  ld_58_032:
043017 21 7F 48 04 4215*  	ld hl,F58_032
04301B 22 ED B6 04 4216*  	ld (cur_filename),hl
04301F 11 1A C3 04 4217*  	ld de,filedata
043023 01 00 00 01 4218*  	ld bc,65536
043027 3E 01       4219*  	ld a,mos_load
043029 5B CF       4220*  	RST.LIL 08h
04302B 21 F1 01 00 4221*  	ld hl,BUF_58_032
04302F 01 41 00 00 4222*  	ld bc,65
043033 11 40 00 00 4223*  	ld de,64
043037 DD 21 40 10 4224*  	ld ix,4160
       00          
04303C CD 68 B8 04 4225*  	call vdu_load_img
043040 C9          4226*  	ret
043041             4227*  
043041             4228*  ld_58_035:
043041 21 93 48 04 4229*  	ld hl,F58_035
043045 22 ED B6 04 4230*  	ld (cur_filename),hl
043049 11 1A C3 04 4231*  	ld de,filedata
04304D 01 00 00 01 4232*  	ld bc,65536
043051 3E 01       4233*  	ld a,mos_load
043053 5B CF       4234*  	RST.LIL 08h
043055 21 F2 01 00 4235*  	ld hl,BUF_58_035
043059 01 3F 00 00 4236*  	ld bc,63
04305D 11 6B 00 00 4237*  	ld de,107
043061 DD 21 55 1A 4238*  	ld ix,6741
       00          
043066 CD 68 B8 04 4239*  	call vdu_load_img
04306A C9          4240*  	ret
04306B             4241*  
04306B             4242*  ld_58_036:
04306B 21 A7 48 04 4243*  	ld hl,F58_036
04306F 22 ED B6 04 4244*  	ld (cur_filename),hl
043073 11 1A C3 04 4245*  	ld de,filedata
043077 01 00 00 01 4246*  	ld bc,65536
04307B 3E 01       4247*  	ld a,mos_load
04307D 5B CF       4248*  	RST.LIL 08h
04307F 21 F3 01 00 4249*  	ld hl,BUF_58_036
043083 01 16 00 00 4250*  	ld bc,22
043087 11 6B 00 00 4251*  	ld de,107
04308B DD 21 32 09 4252*  	ld ix,2354
       00          
043090 CD 68 B8 04 4253*  	call vdu_load_img
043094 C9          4254*  	ret
043095             4255*  
043095             4256*  ld_58_037:
043095 21 BB 48 04 4257*  	ld hl,F58_037
043099 22 ED B6 04 4258*  	ld (cur_filename),hl
04309D 11 1A C3 04 4259*  	ld de,filedata
0430A1 01 00 00 01 4260*  	ld bc,65536
0430A5 3E 01       4261*  	ld a,mos_load
0430A7 5B CF       4262*  	RST.LIL 08h
0430A9 21 F4 01 00 4263*  	ld hl,BUF_58_037
0430AD 01 15 00 00 4264*  	ld bc,21
0430B1 11 69 00 00 4265*  	ld de,105
0430B5 DD 21 9D 08 4266*  	ld ix,2205
       00          
0430BA CD 68 B8 04 4267*  	call vdu_load_img
0430BE C9          4268*  	ret
0430BF             4269*  
0430BF             4270*  ld_58_038:
0430BF 21 CF 48 04 4271*  	ld hl,F58_038
0430C3 22 ED B6 04 4272*  	ld (cur_filename),hl
0430C7 11 1A C3 04 4273*  	ld de,filedata
0430CB 01 00 00 01 4274*  	ld bc,65536
0430CF 3E 01       4275*  	ld a,mos_load
0430D1 5B CF       4276*  	RST.LIL 08h
0430D3 21 F5 01 00 4277*  	ld hl,BUF_58_038
0430D7 01 3F 00 00 4278*  	ld bc,63
0430DB 11 6B 00 00 4279*  	ld de,107
0430DF DD 21 55 1A 4280*  	ld ix,6741
       00          
0430E4 CD 68 B8 04 4281*  	call vdu_load_img
0430E8 C9          4282*  	ret
0430E9             4283*  
0430E9             4284*  ld_58_040:
0430E9 21 E3 48 04 4285*  	ld hl,F58_040
0430ED 22 ED B6 04 4286*  	ld (cur_filename),hl
0430F1 11 1A C3 04 4287*  	ld de,filedata
0430F5 01 00 00 01 4288*  	ld bc,65536
0430F9 3E 01       4289*  	ld a,mos_load
0430FB 5B CF       4290*  	RST.LIL 08h
0430FD 21 F6 01 00 4291*  	ld hl,BUF_58_040
043101 01 6C 00 00 4292*  	ld bc,108
043105 11 6B 00 00 4293*  	ld de,107
043109 DD 21 24 2D 4294*  	ld ix,11556
       00          
04310E CD 68 B8 04 4295*  	call vdu_load_img
043112 C9          4296*  	ret
043113             4297*  
043113             4298*  ld_58_042:
043113 21 F7 48 04 4299*  	ld hl,F58_042
043117 22 ED B6 04 4300*  	ld (cur_filename),hl
04311B 11 1A C3 04 4301*  	ld de,filedata
04311F 01 00 00 01 4302*  	ld bc,65536
043123 3E 01       4303*  	ld a,mos_load
043125 5B CF       4304*  	RST.LIL 08h
043127 21 F7 01 00 4305*  	ld hl,BUF_58_042
04312B 01 6A 00 00 4306*  	ld bc,106
04312F 11 A0 00 00 4307*  	ld de,160
043133 DD 21 40 42 4308*  	ld ix,16960
       00          
043138 CD 68 B8 04 4309*  	call vdu_load_img
04313C C9          4310*  	ret
04313D             4311*  
04313D             4312*  ld_58_043:
04313D 21 0B 49 04 4313*  	ld hl,F58_043
043141 22 ED B6 04 4314*  	ld (cur_filename),hl
043145 11 1A C3 04 4315*  	ld de,filedata
043149 01 00 00 01 4316*  	ld bc,65536
04314D 3E 01       4317*  	ld a,mos_load
04314F 5B CF       4318*  	RST.LIL 08h
043151 21 F8 01 00 4319*  	ld hl,BUF_58_043
043155 01 6B 00 00 4320*  	ld bc,107
043159 11 A0 00 00 4321*  	ld de,160
04315D DD 21 E0 42 4322*  	ld ix,17120
       00          
043162 CD 68 B8 04 4323*  	call vdu_load_img
043166 C9          4324*  	ret
043167             4325*  
043167             4326*  ld_58_044:
043167 21 1F 49 04 4327*  	ld hl,F58_044
04316B 22 ED B6 04 4328*  	ld (cur_filename),hl
04316F 11 1A C3 04 4329*  	ld de,filedata
043173 01 00 00 01 4330*  	ld bc,65536
043177 3E 01       4331*  	ld a,mos_load
043179 5B CF       4332*  	RST.LIL 08h
04317B 21 F9 01 00 4333*  	ld hl,BUF_58_044
04317F 01 40 01 00 4334*  	ld bc,320
043183 11 A0 00 00 4335*  	ld de,160
043187 DD 21 00 C8 4336*  	ld ix,51200
       00          
04318C CD 68 B8 04 4337*  	call vdu_load_img
043190 C9          4338*  	ret
043191             4339*  
043191             4340*  ld_59_004:
043191 21 33 49 04 4341*  	ld hl,F59_004
043195 22 ED B6 04 4342*  	ld (cur_filename),hl
043199 11 1A C3 04 4343*  	ld de,filedata
04319D 01 00 00 01 4344*  	ld bc,65536
0431A1 3E 01       4345*  	ld a,mos_load
0431A3 5B CF       4346*  	RST.LIL 08h
0431A5 21 FA 01 00 4347*  	ld hl,BUF_59_004
0431A9 01 24 00 00 4348*  	ld bc,36
0431AD 11 23 00 00 4349*  	ld de,35
0431B1 DD 21 EC 04 4350*  	ld ix,1260
       00          
0431B6 CD 68 B8 04 4351*  	call vdu_load_img
0431BA C9          4352*  	ret
0431BB             4353*  
0431BB             4354*  ld_59_009:
0431BB 21 47 49 04 4355*  	ld hl,F59_009
0431BF 22 ED B6 04 4356*  	ld (cur_filename),hl
0431C3 11 1A C3 04 4357*  	ld de,filedata
0431C7 01 00 00 01 4358*  	ld bc,65536
0431CB 3E 01       4359*  	ld a,mos_load
0431CD 5B CF       4360*  	RST.LIL 08h
0431CF 21 FB 01 00 4361*  	ld hl,BUF_59_009
0431D3 01 23 00 00 4362*  	ld bc,35
0431D7 11 2D 00 00 4363*  	ld de,45
0431DB DD 21 27 06 4364*  	ld ix,1575
       00          
0431E0 CD 68 B8 04 4365*  	call vdu_load_img
0431E4 C9          4366*  	ret
0431E5             4367*  
0431E5             4368*  ld_59_010:
0431E5 21 5B 49 04 4369*  	ld hl,F59_010
0431E9 22 ED B6 04 4370*  	ld (cur_filename),hl
0431ED 11 1A C3 04 4371*  	ld de,filedata
0431F1 01 00 00 01 4372*  	ld bc,65536
0431F5 3E 01       4373*  	ld a,mos_load
0431F7 5B CF       4374*  	RST.LIL 08h
0431F9 21 FC 01 00 4375*  	ld hl,BUF_59_010
0431FD 01 19 00 00 4376*  	ld bc,25
043201 11 2D 00 00 4377*  	ld de,45
043205 DD 21 65 04 4378*  	ld ix,1125
       00          
04320A CD 68 B8 04 4379*  	call vdu_load_img
04320E C9          4380*  	ret
04320F             4381*  
04320F             4382*  ld_59_011:
04320F 21 6F 49 04 4383*  	ld hl,F59_011
043213 22 ED B6 04 4384*  	ld (cur_filename),hl
043217 11 1A C3 04 4385*  	ld de,filedata
04321B 01 00 00 01 4386*  	ld bc,65536
04321F 3E 01       4387*  	ld a,mos_load
043221 5B CF       4388*  	RST.LIL 08h
043223 21 FD 01 00 4389*  	ld hl,BUF_59_011
043227 01 0F 00 00 4390*  	ld bc,15
04322B 11 2D 00 00 4391*  	ld de,45
04322F DD 21 A3 02 4392*  	ld ix,675
       00          
043234 CD 68 B8 04 4393*  	call vdu_load_img
043238 C9          4394*  	ret
043239             4395*  
043239             4396*  ld_59_012:
043239 21 83 49 04 4397*  	ld hl,F59_012
04323D 22 ED B6 04 4398*  	ld (cur_filename),hl
043241 11 1A C3 04 4399*  	ld de,filedata
043245 01 00 00 01 4400*  	ld bc,65536
043249 3E 01       4401*  	ld a,mos_load
04324B 5B CF       4402*  	RST.LIL 08h
04324D 21 FE 01 00 4403*  	ld hl,BUF_59_012
043251 01 05 00 00 4404*  	ld bc,5
043255 11 2D 00 00 4405*  	ld de,45
043259 DD 21 E1 00 4406*  	ld ix,225
       00          
04325E CD 68 B8 04 4407*  	call vdu_load_img
043262 C9          4408*  	ret
043263             4409*  
043263             4410*  ld_59_013:
043263 21 97 49 04 4411*  	ld hl,F59_013
043267 22 ED B6 04 4412*  	ld (cur_filename),hl
04326B 11 1A C3 04 4413*  	ld de,filedata
04326F 01 00 00 01 4414*  	ld bc,65536
043273 3E 01       4415*  	ld a,mos_load
043275 5B CF       4416*  	RST.LIL 08h
043277 21 FF 01 00 4417*  	ld hl,BUF_59_013
04327B 01 05 00 00 4418*  	ld bc,5
04327F 11 2B 00 00 4419*  	ld de,43
043283 DD 21 D7 00 4420*  	ld ix,215
       00          
043288 CD 68 B8 04 4421*  	call vdu_load_img
04328C C9          4422*  	ret
04328D             4423*  
04328D             4424*  ld_59_014:
04328D 21 AB 49 04 4425*  	ld hl,F59_014
043291 22 ED B6 04 4426*  	ld (cur_filename),hl
043295 11 1A C3 04 4427*  	ld de,filedata
043299 01 00 00 01 4428*  	ld bc,65536
04329D 3E 01       4429*  	ld a,mos_load
04329F 5B CF       4430*  	RST.LIL 08h
0432A1 21 00 02 00 4431*  	ld hl,BUF_59_014
0432A5 01 0F 00 00 4432*  	ld bc,15
0432A9 11 2D 00 00 4433*  	ld de,45
0432AD DD 21 A3 02 4434*  	ld ix,675
       00          
0432B2 CD 68 B8 04 4435*  	call vdu_load_img
0432B6 C9          4436*  	ret
0432B7             4437*  
0432B7             4438*  ld_59_015:
0432B7 21 BF 49 04 4439*  	ld hl,F59_015
0432BB 22 ED B6 04 4440*  	ld (cur_filename),hl
0432BF 11 1A C3 04 4441*  	ld de,filedata
0432C3 01 00 00 01 4442*  	ld bc,65536
0432C7 3E 01       4443*  	ld a,mos_load
0432C9 5B CF       4444*  	RST.LIL 08h
0432CB 21 01 02 00 4445*  	ld hl,BUF_59_015
0432CF 01 19 00 00 4446*  	ld bc,25
0432D3 11 2D 00 00 4447*  	ld de,45
0432D7 DD 21 65 04 4448*  	ld ix,1125
       00          
0432DC CD 68 B8 04 4449*  	call vdu_load_img
0432E0 C9          4450*  	ret
0432E1             4451*  
0432E1             4452*  ld_59_016:
0432E1 21 D3 49 04 4453*  	ld hl,F59_016
0432E5 22 ED B6 04 4454*  	ld (cur_filename),hl
0432E9 11 1A C3 04 4455*  	ld de,filedata
0432ED 01 00 00 01 4456*  	ld bc,65536
0432F1 3E 01       4457*  	ld a,mos_load
0432F3 5B CF       4458*  	RST.LIL 08h
0432F5 21 02 02 00 4459*  	ld hl,BUF_59_016
0432F9 01 23 00 00 4460*  	ld bc,35
0432FD 11 2D 00 00 4461*  	ld de,45
043301 DD 21 27 06 4462*  	ld ix,1575
       00          
043306 CD 68 B8 04 4463*  	call vdu_load_img
04330A C9          4464*  	ret
04330B             4465*  
04330B             4466*  ld_59_020:
04330B 21 E7 49 04 4467*  	ld hl,F59_020
04330F 22 ED B6 04 4468*  	ld (cur_filename),hl
043313 11 1A C3 04 4469*  	ld de,filedata
043317 01 00 00 01 4470*  	ld bc,65536
04331B 3E 01       4471*  	ld a,mos_load
04331D 5B CF       4472*  	RST.LIL 08h
04331F 21 03 02 00 4473*  	ld hl,BUF_59_020
043323 01 2E 00 00 4474*  	ld bc,46
043327 11 2D 00 00 4475*  	ld de,45
04332B DD 21 16 08 4476*  	ld ix,2070
       00          
043330 CD 68 B8 04 4477*  	call vdu_load_img
043334 C9          4478*  	ret
043335             4479*  
043335             4480*  ld_59_024:
043335 21 FB 49 04 4481*  	ld hl,F59_024
043339 22 ED B6 04 4482*  	ld (cur_filename),hl
04333D 11 1A C3 04 4483*  	ld de,filedata
043341 01 00 00 01 4484*  	ld bc,65536
043345 3E 01       4485*  	ld a,mos_load
043347 5B CF       4486*  	RST.LIL 08h
043349 21 04 02 00 4487*  	ld hl,BUF_59_024
04334D 01 2E 00 00 4488*  	ld bc,46
043351 11 40 00 00 4489*  	ld de,64
043355 DD 21 80 0B 4490*  	ld ix,2944
       00          
04335A CD 68 B8 04 4491*  	call vdu_load_img
04335E C9          4492*  	ret
04335F             4493*  
04335F             4494*  ld_59_025:
04335F 21 0F 4A 04 4495*  	ld hl,F59_025
043363 22 ED B6 04 4496*  	ld (cur_filename),hl
043367 11 1A C3 04 4497*  	ld de,filedata
04336B 01 00 00 01 4498*  	ld bc,65536
04336F 3E 01       4499*  	ld a,mos_load
043371 5B CF       4500*  	RST.LIL 08h
043373 21 05 02 00 4501*  	ld hl,BUF_59_025
043377 01 1C 00 00 4502*  	ld bc,28
04337B 11 40 00 00 4503*  	ld de,64
04337F DD 21 00 07 4504*  	ld ix,1792
       00          
043384 CD 68 B8 04 4505*  	call vdu_load_img
043388 C9          4506*  	ret
043389             4507*  
043389             4508*  ld_59_026:
043389 21 23 4A 04 4509*  	ld hl,F59_026
04338D 22 ED B6 04 4510*  	ld (cur_filename),hl
043391 11 1A C3 04 4511*  	ld de,filedata
043395 01 00 00 01 4512*  	ld bc,65536
043399 3E 01       4513*  	ld a,mos_load
04339B 5B CF       4514*  	RST.LIL 08h
04339D 21 06 02 00 4515*  	ld hl,BUF_59_026
0433A1 01 09 00 00 4516*  	ld bc,9
0433A5 11 40 00 00 4517*  	ld de,64
0433A9 DD 21 40 02 4518*  	ld ix,576
       00          
0433AE CD 68 B8 04 4519*  	call vdu_load_img
0433B2 C9          4520*  	ret
0433B3             4521*  
0433B3             4522*  ld_59_027:
0433B3 21 37 4A 04 4523*  	ld hl,F59_027
0433B7 22 ED B6 04 4524*  	ld (cur_filename),hl
0433BB 11 1A C3 04 4525*  	ld de,filedata
0433BF 01 00 00 01 4526*  	ld bc,65536
0433C3 3E 01       4527*  	ld a,mos_load
0433C5 5B CF       4528*  	RST.LIL 08h
0433C7 21 07 02 00 4529*  	ld hl,BUF_59_027
0433CB 01 0A 00 00 4530*  	ld bc,10
0433CF 11 3E 00 00 4531*  	ld de,62
0433D3 DD 21 6C 02 4532*  	ld ix,620
       00          
0433D8 CD 68 B8 04 4533*  	call vdu_load_img
0433DC C9          4534*  	ret
0433DD             4535*  
0433DD             4536*  ld_59_028:
0433DD 21 4B 4A 04 4537*  	ld hl,F59_028
0433E1 22 ED B6 04 4538*  	ld (cur_filename),hl
0433E5 11 1A C3 04 4539*  	ld de,filedata
0433E9 01 00 00 01 4540*  	ld bc,65536
0433ED 3E 01       4541*  	ld a,mos_load
0433EF 5B CF       4542*  	RST.LIL 08h
0433F1 21 08 02 00 4543*  	ld hl,BUF_59_028
0433F5 01 1C 00 00 4544*  	ld bc,28
0433F9 11 40 00 00 4545*  	ld de,64
0433FD DD 21 00 07 4546*  	ld ix,1792
       00          
043402 CD 68 B8 04 4547*  	call vdu_load_img
043406 C9          4548*  	ret
043407             4549*  
043407             4550*  ld_59_029:
043407 21 5F 4A 04 4551*  	ld hl,F59_029
04340B 22 ED B6 04 4552*  	ld (cur_filename),hl
04340F 11 1A C3 04 4553*  	ld de,filedata
043413 01 00 00 01 4554*  	ld bc,65536
043417 3E 01       4555*  	ld a,mos_load
043419 5B CF       4556*  	RST.LIL 08h
04341B 21 09 02 00 4557*  	ld hl,BUF_59_029
04341F 01 2F 00 00 4558*  	ld bc,47
043423 11 40 00 00 4559*  	ld de,64
043427 DD 21 C0 0B 4560*  	ld ix,3008
       00          
04342C CD 68 B8 04 4561*  	call vdu_load_img
043430 C9          4562*  	ret
043431             4563*  
043431             4564*  ld_59_032:
043431 21 73 4A 04 4565*  	ld hl,F59_032
043435 22 ED B6 04 4566*  	ld (cur_filename),hl
043439 11 1A C3 04 4567*  	ld de,filedata
04343D 01 00 00 01 4568*  	ld bc,65536
043441 3E 01       4569*  	ld a,mos_load
043443 5B CF       4570*  	RST.LIL 08h
043445 21 0A 02 00 4571*  	ld hl,BUF_59_032
043449 01 41 00 00 4572*  	ld bc,65
04344D 11 40 00 00 4573*  	ld de,64
043451 DD 21 40 10 4574*  	ld ix,4160
       00          
043456 CD 68 B8 04 4575*  	call vdu_load_img
04345A C9          4576*  	ret
04345B             4577*  
04345B             4578*  ld_59_035:
04345B 21 87 4A 04 4579*  	ld hl,F59_035
04345F 22 ED B6 04 4580*  	ld (cur_filename),hl
043463 11 1A C3 04 4581*  	ld de,filedata
043467 01 00 00 01 4582*  	ld bc,65536
04346B 3E 01       4583*  	ld a,mos_load
04346D 5B CF       4584*  	RST.LIL 08h
04346F 21 0B 02 00 4585*  	ld hl,BUF_59_035
043473 01 3F 00 00 4586*  	ld bc,63
043477 11 6B 00 00 4587*  	ld de,107
04347B DD 21 55 1A 4588*  	ld ix,6741
       00          
043480 CD 68 B8 04 4589*  	call vdu_load_img
043484 C9          4590*  	ret
043485             4591*  
043485             4592*  ld_59_036:
043485 21 9B 4A 04 4593*  	ld hl,F59_036
043489 22 ED B6 04 4594*  	ld (cur_filename),hl
04348D 11 1A C3 04 4595*  	ld de,filedata
043491 01 00 00 01 4596*  	ld bc,65536
043495 3E 01       4597*  	ld a,mos_load
043497 5B CF       4598*  	RST.LIL 08h
043499 21 0C 02 00 4599*  	ld hl,BUF_59_036
04349D 01 16 00 00 4600*  	ld bc,22
0434A1 11 6B 00 00 4601*  	ld de,107
0434A5 DD 21 32 09 4602*  	ld ix,2354
       00          
0434AA CD 68 B8 04 4603*  	call vdu_load_img
0434AE C9          4604*  	ret
0434AF             4605*  
0434AF             4606*  ld_59_037:
0434AF 21 AF 4A 04 4607*  	ld hl,F59_037
0434B3 22 ED B6 04 4608*  	ld (cur_filename),hl
0434B7 11 1A C3 04 4609*  	ld de,filedata
0434BB 01 00 00 01 4610*  	ld bc,65536
0434BF 3E 01       4611*  	ld a,mos_load
0434C1 5B CF       4612*  	RST.LIL 08h
0434C3 21 0D 02 00 4613*  	ld hl,BUF_59_037
0434C7 01 15 00 00 4614*  	ld bc,21
0434CB 11 69 00 00 4615*  	ld de,105
0434CF DD 21 9D 08 4616*  	ld ix,2205
       00          
0434D4 CD 68 B8 04 4617*  	call vdu_load_img
0434D8 C9          4618*  	ret
0434D9             4619*  
0434D9             4620*  ld_59_038:
0434D9 21 C3 4A 04 4621*  	ld hl,F59_038
0434DD 22 ED B6 04 4622*  	ld (cur_filename),hl
0434E1 11 1A C3 04 4623*  	ld de,filedata
0434E5 01 00 00 01 4624*  	ld bc,65536
0434E9 3E 01       4625*  	ld a,mos_load
0434EB 5B CF       4626*  	RST.LIL 08h
0434ED 21 0E 02 00 4627*  	ld hl,BUF_59_038
0434F1 01 3F 00 00 4628*  	ld bc,63
0434F5 11 6B 00 00 4629*  	ld de,107
0434F9 DD 21 55 1A 4630*  	ld ix,6741
       00          
0434FE CD 68 B8 04 4631*  	call vdu_load_img
043502 C9          4632*  	ret
043503             4633*  
043503             4634*  ld_59_040:
043503 21 D7 4A 04 4635*  	ld hl,F59_040
043507 22 ED B6 04 4636*  	ld (cur_filename),hl
04350B 11 1A C3 04 4637*  	ld de,filedata
04350F 01 00 00 01 4638*  	ld bc,65536
043513 3E 01       4639*  	ld a,mos_load
043515 5B CF       4640*  	RST.LIL 08h
043517 21 0F 02 00 4641*  	ld hl,BUF_59_040
04351B 01 6C 00 00 4642*  	ld bc,108
04351F 11 6B 00 00 4643*  	ld de,107
043523 DD 21 24 2D 4644*  	ld ix,11556
       00          
043528 CD 68 B8 04 4645*  	call vdu_load_img
04352C C9          4646*  	ret
04352D             4647*  
04352D             4648*  ld_59_042:
04352D 21 EB 4A 04 4649*  	ld hl,F59_042
043531 22 ED B6 04 4650*  	ld (cur_filename),hl
043535 11 1A C3 04 4651*  	ld de,filedata
043539 01 00 00 01 4652*  	ld bc,65536
04353D 3E 01       4653*  	ld a,mos_load
04353F 5B CF       4654*  	RST.LIL 08h
043541 21 10 02 00 4655*  	ld hl,BUF_59_042
043545 01 6A 00 00 4656*  	ld bc,106
043549 11 A0 00 00 4657*  	ld de,160
04354D DD 21 40 42 4658*  	ld ix,16960
       00          
043552 CD 68 B8 04 4659*  	call vdu_load_img
043556 C9          4660*  	ret
043557             4661*  
043557             4662*  ld_59_043:
043557 21 FF 4A 04 4663*  	ld hl,F59_043
04355B 22 ED B6 04 4664*  	ld (cur_filename),hl
04355F 11 1A C3 04 4665*  	ld de,filedata
043563 01 00 00 01 4666*  	ld bc,65536
043567 3E 01       4667*  	ld a,mos_load
043569 5B CF       4668*  	RST.LIL 08h
04356B 21 11 02 00 4669*  	ld hl,BUF_59_043
04356F 01 6B 00 00 4670*  	ld bc,107
043573 11 A0 00 00 4671*  	ld de,160
043577 DD 21 E0 42 4672*  	ld ix,17120
       00          
04357C CD 68 B8 04 4673*  	call vdu_load_img
043580 C9          4674*  	ret
043581             4675*  
043581             4676*  ld_59_044:
043581 21 13 4B 04 4677*  	ld hl,F59_044
043585 22 ED B6 04 4678*  	ld (cur_filename),hl
043589 11 1A C3 04 4679*  	ld de,filedata
04358D 01 00 00 01 4680*  	ld bc,65536
043591 3E 01       4681*  	ld a,mos_load
043593 5B CF       4682*  	RST.LIL 08h
043595 21 12 02 00 4683*  	ld hl,BUF_59_044
043599 01 40 01 00 4684*  	ld bc,320
04359D 11 A0 00 00 4685*  	ld de,160
0435A1 DD 21 00 C8 4686*  	ld ix,51200
       00          
0435A6 CD 68 B8 04 4687*  	call vdu_load_img
0435AA C9          4688*  	ret
0435AB             4689*  
0435AB             4690*  ; File name lookups:
0435AB 70 61 6E 65 4691*  F10_004: db "panels/10_004.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0435BF 70 61 6E 65 4692*  F10_009: db "panels/10_009.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0435D3 70 61 6E 65 4693*  F10_010: db "panels/10_010.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0435E7 70 61 6E 65 4694*  F10_011: db "panels/10_011.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0435FB 70 61 6E 65 4695*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04360F 70 61 6E 65 4696*  F10_013: db "panels/10_013.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043623 70 61 6E 65 4697*  F10_014: db "panels/10_014.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043637 70 61 6E 65 4698*  F10_015: db "panels/10_015.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
04364B 70 61 6E 65 4699*  F10_016: db "panels/10_016.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04365F 70 61 6E 65 4700*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043673 70 61 6E 65 4701*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043687 70 61 6E 65 4702*  F10_025: db "panels/10_025.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04369B 70 61 6E 65 4703*  F10_026: db "panels/10_026.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0436AF 70 61 6E 65 4704*  F10_027: db "panels/10_027.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0436C3 70 61 6E 65 4705*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0436D7 70 61 6E 65 4706*  F10_029: db "panels/10_029.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0436EB 70 61 6E 65 4707*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0436FF 70 61 6E 65 4708*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043713 70 61 6E 65 4709*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043727 70 61 6E 65 4710*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
04373B 70 61 6E 65 4711*  F10_038: db "panels/10_038.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
04374F 70 61 6E 65 4712*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043763 70 61 6E 65 4713*  F10_042: db "panels/10_042.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043777 70 61 6E 65 4714*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04378B 70 61 6E 65 4715*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04379F 70 61 6E 65 4716*  F11_004: db "panels/11_004.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0437B3 70 61 6E 65 4717*  F11_009: db "panels/11_009.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0437C7 70 61 6E 65 4718*  F11_010: db "panels/11_010.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0437DB 70 61 6E 65 4719*  F11_011: db "panels/11_011.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0437EF 70 61 6E 65 4720*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043803 70 61 6E 65 4721*  F11_013: db "panels/11_013.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043817 70 61 6E 65 4722*  F11_014: db "panels/11_014.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
04382B 70 61 6E 65 4723*  F11_015: db "panels/11_015.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
04383F 70 61 6E 65 4724*  F11_016: db "panels/11_016.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043853 70 61 6E 65 4725*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043867 70 61 6E 65 4726*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04387B 70 61 6E 65 4727*  F11_025: db "panels/11_025.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04388F 70 61 6E 65 4728*  F11_026: db "panels/11_026.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0438A3 70 61 6E 65 4729*  F11_027: db "panels/11_027.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0438B7 70 61 6E 65 4730*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0438CB 70 61 6E 65 4731*  F11_029: db "panels/11_029.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0438DF 70 61 6E 65 4732*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0438F3 70 61 6E 65 4733*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043907 70 61 6E 65 4734*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04391B 70 61 6E 65 4735*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
04392F 70 61 6E 65 4736*  F11_038: db "panels/11_038.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043943 70 61 6E 65 4737*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043957 70 61 6E 65 4738*  F11_042: db "panels/11_042.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04396B 70 61 6E 65 4739*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04397F 70 61 6E 65 4740*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043993 70 61 6E 65 4741*  F12_004: db "panels/12_004.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0439A7 70 61 6E 65 4742*  F12_009: db "panels/12_009.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0439BB 70 61 6E 65 4743*  F12_010: db "panels/12_010.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0439CF 70 61 6E 65 4744*  F12_011: db "panels/12_011.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0439E3 70 61 6E 65 4745*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0439F7 70 61 6E 65 4746*  F12_013: db "panels/12_013.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043A0B 70 61 6E 65 4747*  F12_014: db "panels/12_014.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043A1F 70 61 6E 65 4748*  F12_015: db "panels/12_015.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043A33 70 61 6E 65 4749*  F12_016: db "panels/12_016.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043A47 70 61 6E 65 4750*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043A5B 70 61 6E 65 4751*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043A6F 70 61 6E 65 4752*  F12_025: db "panels/12_025.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043A83 70 61 6E 65 4753*  F12_026: db "panels/12_026.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043A97 70 61 6E 65 4754*  F12_027: db "panels/12_027.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043AAB 70 61 6E 65 4755*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043ABF 70 61 6E 65 4756*  F12_029: db "panels/12_029.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043AD3 70 61 6E 65 4757*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043AE7 70 61 6E 65 4758*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043AFB 70 61 6E 65 4759*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043B0F 70 61 6E 65 4760*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043B23 70 61 6E 65 4761*  F12_038: db "panels/12_038.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043B37 70 61 6E 65 4762*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043B4B 70 61 6E 65 4763*  F12_042: db "panels/12_042.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043B5F 70 61 6E 65 4764*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043B73 70 61 6E 65 4765*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043B87 70 61 6E 65 4766*  F13_004: db "panels/13_004.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043B9B 70 61 6E 65 4767*  F13_009: db "panels/13_009.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043BAF 70 61 6E 65 4768*  F13_010: db "panels/13_010.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043BC3 70 61 6E 65 4769*  F13_011: db "panels/13_011.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043BD7 70 61 6E 65 4770*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043BEB 70 61 6E 65 4771*  F13_013: db "panels/13_013.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043BFF 70 61 6E 65 4772*  F13_014: db "panels/13_014.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043C13 70 61 6E 65 4773*  F13_015: db "panels/13_015.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043C27 70 61 6E 65 4774*  F13_016: db "panels/13_016.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043C3B 70 61 6E 65 4775*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043C4F 70 61 6E 65 4776*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043C63 70 61 6E 65 4777*  F13_025: db "panels/13_025.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043C77 70 61 6E 65 4778*  F13_026: db "panels/13_026.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043C8B 70 61 6E 65 4779*  F13_027: db "panels/13_027.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043C9F 70 61 6E 65 4780*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043CB3 70 61 6E 65 4781*  F13_029: db "panels/13_029.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043CC7 70 61 6E 65 4782*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043CDB 70 61 6E 65 4783*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043CEF 70 61 6E 65 4784*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043D03 70 61 6E 65 4785*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043D17 70 61 6E 65 4786*  F13_038: db "panels/13_038.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043D2B 70 61 6E 65 4787*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043D3F 70 61 6E 65 4788*  F13_042: db "panels/13_042.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043D53 70 61 6E 65 4789*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043D67 70 61 6E 65 4790*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D7B 70 61 6E 65 4791*  F14_004: db "panels/14_004.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043D8F 70 61 6E 65 4792*  F14_009: db "panels/14_009.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043DA3 70 61 6E 65 4793*  F14_010: db "panels/14_010.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043DB7 70 61 6E 65 4794*  F14_011: db "panels/14_011.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043DCB 70 61 6E 65 4795*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043DDF 70 61 6E 65 4796*  F14_013: db "panels/14_013.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043DF3 70 61 6E 65 4797*  F14_014: db "panels/14_014.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043E07 70 61 6E 65 4798*  F14_015: db "panels/14_015.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043E1B 70 61 6E 65 4799*  F14_016: db "panels/14_016.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043E2F 70 61 6E 65 4800*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043E43 70 61 6E 65 4801*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043E57 70 61 6E 65 4802*  F14_025: db "panels/14_025.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043E6B 70 61 6E 65 4803*  F14_026: db "panels/14_026.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043E7F 70 61 6E 65 4804*  F14_027: db "panels/14_027.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043E93 70 61 6E 65 4805*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043EA7 70 61 6E 65 4806*  F14_029: db "panels/14_029.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043EBB 70 61 6E 65 4807*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043ECF 70 61 6E 65 4808*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043EE3 70 61 6E 65 4809*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043EF7 70 61 6E 65 4810*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043F0B 70 61 6E 65 4811*  F14_038: db "panels/14_038.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043F1F 70 61 6E 65 4812*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043F33 70 61 6E 65 4813*  F14_042: db "panels/14_042.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043F47 70 61 6E 65 4814*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043F5B 70 61 6E 65 4815*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043F6F 70 61 6E 65 4816*  F15_004: db "panels/15_004.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043F83 70 61 6E 65 4817*  F15_009: db "panels/15_009.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043F97 70 61 6E 65 4818*  F15_010: db "panels/15_010.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043FAB 70 61 6E 65 4819*  F15_011: db "panels/15_011.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043FBF 70 61 6E 65 4820*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043FD3 70 61 6E 65 4821*  F15_013: db "panels/15_013.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043FE7 70 61 6E 65 4822*  F15_014: db "panels/15_014.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043FFB 70 61 6E 65 4823*  F15_015: db "panels/15_015.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
04400F 70 61 6E 65 4824*  F15_016: db "panels/15_016.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044023 70 61 6E 65 4825*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044037 70 61 6E 65 4826*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04404B 70 61 6E 65 4827*  F15_025: db "panels/15_025.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04405F 70 61 6E 65 4828*  F15_026: db "panels/15_026.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044073 70 61 6E 65 4829*  F15_027: db "panels/15_027.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044087 70 61 6E 65 4830*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04409B 70 61 6E 65 4831*  F15_029: db "panels/15_029.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0440AF 70 61 6E 65 4832*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0440C3 70 61 6E 65 4833*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0440D7 70 61 6E 65 4834*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0440EB 70 61 6E 65 4835*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0440FF 70 61 6E 65 4836*  F15_038: db "panels/15_038.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044113 70 61 6E 65 4837*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044127 70 61 6E 65 4838*  F15_042: db "panels/15_042.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04413B 70 61 6E 65 4839*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04414F 70 61 6E 65 4840*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044163 70 61 6E 65 4841*  F16_004: db "panels/16_004.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044177 70 61 6E 65 4842*  F16_009: db "panels/16_009.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04418B 70 61 6E 65 4843*  F16_010: db "panels/16_010.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04419F 70 61 6E 65 4844*  F16_011: db "panels/16_011.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0441B3 70 61 6E 65 4845*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0441C7 70 61 6E 65 4846*  F16_013: db "panels/16_013.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0441DB 70 61 6E 65 4847*  F16_014: db "panels/16_014.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0441EF 70 61 6E 65 4848*  F16_015: db "panels/16_015.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044203 70 61 6E 65 4849*  F16_016: db "panels/16_016.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044217 70 61 6E 65 4850*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04422B 70 61 6E 65 4851*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04423F 70 61 6E 65 4852*  F16_025: db "panels/16_025.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044253 70 61 6E 65 4853*  F16_026: db "panels/16_026.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044267 70 61 6E 65 4854*  F16_027: db "panels/16_027.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04427B 70 61 6E 65 4855*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04428F 70 61 6E 65 4856*  F16_029: db "panels/16_029.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0442A3 70 61 6E 65 4857*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0442B7 70 61 6E 65 4858*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0442CB 70 61 6E 65 4859*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0442DF 70 61 6E 65 4860*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0442F3 70 61 6E 65 4861*  F16_038: db "panels/16_038.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044307 70 61 6E 65 4862*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04431B 70 61 6E 65 4863*  F16_042: db "panels/16_042.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04432F 70 61 6E 65 4864*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044343 70 61 6E 65 4865*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044357 70 61 6E 65 4866*  F17_004: db "panels/17_004.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04436B 70 61 6E 65 4867*  F17_009: db "panels/17_009.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04437F 70 61 6E 65 4868*  F17_010: db "panels/17_010.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044393 70 61 6E 65 4869*  F17_011: db "panels/17_011.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0443A7 70 61 6E 65 4870*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0443BB 70 61 6E 65 4871*  F17_013: db "panels/17_013.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0443CF 70 61 6E 65 4872*  F17_014: db "panels/17_014.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0443E3 70 61 6E 65 4873*  F17_015: db "panels/17_015.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0443F7 70 61 6E 65 4874*  F17_016: db "panels/17_016.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04440B 70 61 6E 65 4875*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04441F 70 61 6E 65 4876*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044433 70 61 6E 65 4877*  F17_025: db "panels/17_025.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044447 70 61 6E 65 4878*  F17_026: db "panels/17_026.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
04445B 70 61 6E 65 4879*  F17_027: db "panels/17_027.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04446F 70 61 6E 65 4880*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044483 70 61 6E 65 4881*  F17_029: db "panels/17_029.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044497 70 61 6E 65 4882*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0444AB 70 61 6E 65 4883*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0444BF 70 61 6E 65 4884*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0444D3 70 61 6E 65 4885*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0444E7 70 61 6E 65 4886*  F17_038: db "panels/17_038.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0444FB 70 61 6E 65 4887*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04450F 70 61 6E 65 4888*  F17_042: db "panels/17_042.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044523 70 61 6E 65 4889*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044537 70 61 6E 65 4890*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04454B 70 61 6E 65 4891*  F57_004: db "panels/57_004.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04455F 70 61 6E 65 4892*  F57_009: db "panels/57_009.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044573 70 61 6E 65 4893*  F57_010: db "panels/57_010.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044587 70 61 6E 65 4894*  F57_011: db "panels/57_011.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
04459B 70 61 6E 65 4895*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0445AF 70 61 6E 65 4896*  F57_013: db "panels/57_013.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0445C3 70 61 6E 65 4897*  F57_014: db "panels/57_014.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0445D7 70 61 6E 65 4898*  F57_015: db "panels/57_015.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0445EB 70 61 6E 65 4899*  F57_016: db "panels/57_016.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0445FF 70 61 6E 65 4900*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044613 70 61 6E 65 4901*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044627 70 61 6E 65 4902*  F57_025: db "panels/57_025.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04463B 70 61 6E 65 4903*  F57_026: db "panels/57_026.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
04464F 70 61 6E 65 4904*  F57_027: db "panels/57_027.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044663 70 61 6E 65 4905*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044677 70 61 6E 65 4906*  F57_029: db "panels/57_029.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04468B 70 61 6E 65 4907*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04469F 70 61 6E 65 4908*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0446B3 70 61 6E 65 4909*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0446C7 70 61 6E 65 4910*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0446DB 70 61 6E 65 4911*  F57_038: db "panels/57_038.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0446EF 70 61 6E 65 4912*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044703 70 61 6E 65 4913*  F57_042: db "panels/57_042.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044717 70 61 6E 65 4914*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04472B 70 61 6E 65 4915*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04473F 70 61 6E 65 4916*  F58_004: db "panels/58_004.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044753 70 61 6E 65 4917*  F58_009: db "panels/58_009.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044767 70 61 6E 65 4918*  F58_010: db "panels/58_010.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04477B 70 61 6E 65 4919*  F58_011: db "panels/58_011.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
04478F 70 61 6E 65 4920*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0447A3 70 61 6E 65 4921*  F58_013: db "panels/58_013.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0447B7 70 61 6E 65 4922*  F58_014: db "panels/58_014.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0447CB 70 61 6E 65 4923*  F58_015: db "panels/58_015.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0447DF 70 61 6E 65 4924*  F58_016: db "panels/58_016.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0447F3 70 61 6E 65 4925*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044807 70 61 6E 65 4926*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04481B 70 61 6E 65 4927*  F58_025: db "panels/58_025.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04482F 70 61 6E 65 4928*  F58_026: db "panels/58_026.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044843 70 61 6E 65 4929*  F58_027: db "panels/58_027.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044857 70 61 6E 65 4930*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04486B 70 61 6E 65 4931*  F58_029: db "panels/58_029.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04487F 70 61 6E 65 4932*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044893 70 61 6E 65 4933*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0448A7 70 61 6E 65 4934*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0448BB 70 61 6E 65 4935*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0448CF 70 61 6E 65 4936*  F58_038: db "panels/58_038.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0448E3 70 61 6E 65 4937*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0448F7 70 61 6E 65 4938*  F58_042: db "panels/58_042.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04490B 70 61 6E 65 4939*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04491F 70 61 6E 65 4940*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044933 70 61 6E 65 4941*  F59_004: db "panels/59_004.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044947 70 61 6E 65 4942*  F59_009: db "panels/59_009.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04495B 70 61 6E 65 4943*  F59_010: db "panels/59_010.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04496F 70 61 6E 65 4944*  F59_011: db "panels/59_011.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044983 70 61 6E 65 4945*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
044997 70 61 6E 65 4946*  F59_013: db "panels/59_013.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0449AB 70 61 6E 65 4947*  F59_014: db "panels/59_014.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0449BF 70 61 6E 65 4948*  F59_015: db "panels/59_015.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0449D3 70 61 6E 65 4949*  F59_016: db "panels/59_016.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0449E7 70 61 6E 65 4950*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0449FB 70 61 6E 65 4951*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044A0F 70 61 6E 65 4952*  F59_025: db "panels/59_025.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044A23 70 61 6E 65 4953*  F59_026: db "panels/59_026.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044A37 70 61 6E 65 4954*  F59_027: db "panels/59_027.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044A4B 70 61 6E 65 4955*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044A5F 70 61 6E 65 4956*  F59_029: db "panels/59_029.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044A73 70 61 6E 65 4957*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A87 70 61 6E 65 4958*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044A9B 70 61 6E 65 4959*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044AAF 70 61 6E 65 4960*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044AC3 70 61 6E 65 4961*  F59_038: db "panels/59_038.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044AD7 70 61 6E 65 4962*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044AEB 70 61 6E 65 4963*  F59_042: db "panels/59_042.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044AFF 70 61 6E 65 4964*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044B13 70 61 6E 65 4965*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044B27             4966*  
044B27             4967*  ; sprite buffer ids:
044B27             4968*  BUF_20_004: equ 0x0213
044B27             4969*  BUF_20_020: equ 0x0214
044B27             4970*  BUF_20_032: equ 0x0215
044B27             4971*  BUF_20_040: equ 0x0216
044B27             4972*  BUF_20_044: equ 0x0217
044B27             4973*  BUF_21_004: equ 0x0218
044B27             4974*  BUF_21_020: equ 0x0219
044B27             4975*  BUF_21_032: equ 0x021A
044B27             4976*  BUF_21_040: equ 0x021B
044B27             4977*  BUF_21_044: equ 0x021C
044B27             4978*  BUF_22_004: equ 0x021D
044B27             4979*  BUF_22_020: equ 0x021E
044B27             4980*  BUF_22_032: equ 0x021F
044B27             4981*  BUF_22_040: equ 0x0220
044B27             4982*  BUF_22_044: equ 0x0221
044B27             4983*  BUF_23_004: equ 0x0222
044B27             4984*  BUF_23_020: equ 0x0223
044B27             4985*  BUF_23_032: equ 0x0224
044B27             4986*  BUF_23_040: equ 0x0225
044B27             4987*  BUF_23_044: equ 0x0226
044B27             4988*  BUF_24_004: equ 0x0227
044B27             4989*  BUF_24_020: equ 0x0228
044B27             4990*  BUF_24_032: equ 0x0229
044B27             4991*  BUF_24_040: equ 0x022A
044B27             4992*  BUF_24_044: equ 0x022B
044B27             4993*  BUF_40_004: equ 0x022C
044B27             4994*  BUF_40_020: equ 0x022D
044B27             4995*  BUF_40_032: equ 0x022E
044B27             4996*  BUF_40_040: equ 0x022F
044B27             4997*  BUF_40_044: equ 0x0230
044B27             4998*  BUF_41_004: equ 0x0231
044B27             4999*  BUF_41_020: equ 0x0232
044B27             5000*  BUF_41_032: equ 0x0233
044B27             5001*  BUF_41_040: equ 0x0234
044B27             5002*  BUF_41_044: equ 0x0235
044B27             5003*  BUF_42_004: equ 0x0236
044B27             5004*  BUF_42_020: equ 0x0237
044B27             5005*  BUF_42_032: equ 0x0238
044B27             5006*  BUF_42_040: equ 0x0239
044B27             5007*  BUF_42_044: equ 0x023A
044B27             5008*  BUF_43_004: equ 0x023B
044B27             5009*  BUF_43_020: equ 0x023C
044B27             5010*  BUF_43_032: equ 0x023D
044B27             5011*  BUF_43_040: equ 0x023E
044B27             5012*  BUF_43_044: equ 0x023F
044B27             5013*  BUF_44_004: equ 0x0240
044B27             5014*  BUF_44_020: equ 0x0241
044B27             5015*  BUF_44_032: equ 0x0242
044B27             5016*  BUF_44_040: equ 0x0243
044B27             5017*  BUF_44_044: equ 0x0244
044B27             5018*  BUF_45_004: equ 0x0245
044B27             5019*  BUF_45_020: equ 0x0246
044B27             5020*  BUF_45_032: equ 0x0247
044B27             5021*  BUF_45_040: equ 0x0248
044B27             5022*  BUF_45_044: equ 0x0249
044B27             5023*  BUF_46_004: equ 0x024A
044B27             5024*  BUF_46_020: equ 0x024B
044B27             5025*  BUF_46_032: equ 0x024C
044B27             5026*  BUF_46_040: equ 0x024D
044B27             5027*  BUF_46_044: equ 0x024E
044B27             5028*  BUF_47_004: equ 0x024F
044B27             5029*  BUF_47_020: equ 0x0250
044B27             5030*  BUF_47_032: equ 0x0251
044B27             5031*  BUF_47_040: equ 0x0252
044B27             5032*  BUF_47_044: equ 0x0253
044B27             5033*  BUF_48_004: equ 0x0254
044B27             5034*  BUF_48_020: equ 0x0255
044B27             5035*  BUF_48_032: equ 0x0256
044B27             5036*  BUF_48_040: equ 0x0257
044B27             5037*  BUF_48_044: equ 0x0258
044B27             5038*  BUF_49_004: equ 0x0259
044B27             5039*  BUF_49_020: equ 0x025A
044B27             5040*  BUF_49_032: equ 0x025B
044B27             5041*  BUF_49_040: equ 0x025C
044B27             5042*  BUF_49_044: equ 0x025D
044B27             5043*  BUF_50_004: equ 0x025E
044B27             5044*  BUF_50_020: equ 0x025F
044B27             5045*  BUF_50_032: equ 0x0260
044B27             5046*  BUF_50_040: equ 0x0261
044B27             5047*  BUF_50_044: equ 0x0262
044B27             5048*  BUF_51_004: equ 0x0263
044B27             5049*  BUF_51_020: equ 0x0264
044B27             5050*  BUF_51_032: equ 0x0265
044B27             5051*  BUF_51_040: equ 0x0266
044B27             5052*  BUF_51_044: equ 0x0267
044B27             5053*  BUF_52_004: equ 0x0268
044B27             5054*  BUF_52_020: equ 0x0269
044B27             5055*  BUF_52_032: equ 0x026A
044B27             5056*  BUF_52_040: equ 0x026B
044B27             5057*  BUF_52_044: equ 0x026C
044B27             5058*  
044B27             5059*  sprite_num_panels: equ 90
044B27             5060*  
044B27             5061*  ; sprite buffer id reverse lookup:
044B27             5062*  sprite_buffer_id_lut:
044B27 13 02 00    5063*  	dl BUF_20_004
044B2A 14 02 00    5064*  	dl BUF_20_020
044B2D 15 02 00    5065*  	dl BUF_20_032
044B30 16 02 00    5066*  	dl BUF_20_040
044B33 17 02 00    5067*  	dl BUF_20_044
044B36 18 02 00    5068*  	dl BUF_21_004
044B39 19 02 00    5069*  	dl BUF_21_020
044B3C 1A 02 00    5070*  	dl BUF_21_032
044B3F 1B 02 00    5071*  	dl BUF_21_040
044B42 1C 02 00    5072*  	dl BUF_21_044
044B45 1D 02 00    5073*  	dl BUF_22_004
044B48 1E 02 00    5074*  	dl BUF_22_020
044B4B 1F 02 00    5075*  	dl BUF_22_032
044B4E 20 02 00    5076*  	dl BUF_22_040
044B51 21 02 00    5077*  	dl BUF_22_044
044B54 22 02 00    5078*  	dl BUF_23_004
044B57 23 02 00    5079*  	dl BUF_23_020
044B5A 24 02 00    5080*  	dl BUF_23_032
044B5D 25 02 00    5081*  	dl BUF_23_040
044B60 26 02 00    5082*  	dl BUF_23_044
044B63 27 02 00    5083*  	dl BUF_24_004
044B66 28 02 00    5084*  	dl BUF_24_020
044B69 29 02 00    5085*  	dl BUF_24_032
044B6C 2A 02 00    5086*  	dl BUF_24_040
044B6F 2B 02 00    5087*  	dl BUF_24_044
044B72 2C 02 00    5088*  	dl BUF_40_004
044B75 2D 02 00    5089*  	dl BUF_40_020
044B78 2E 02 00    5090*  	dl BUF_40_032
044B7B 2F 02 00    5091*  	dl BUF_40_040
044B7E 30 02 00    5092*  	dl BUF_40_044
044B81 31 02 00    5093*  	dl BUF_41_004
044B84 32 02 00    5094*  	dl BUF_41_020
044B87 33 02 00    5095*  	dl BUF_41_032
044B8A 34 02 00    5096*  	dl BUF_41_040
044B8D 35 02 00    5097*  	dl BUF_41_044
044B90 36 02 00    5098*  	dl BUF_42_004
044B93 37 02 00    5099*  	dl BUF_42_020
044B96 38 02 00    5100*  	dl BUF_42_032
044B99 39 02 00    5101*  	dl BUF_42_040
044B9C 3A 02 00    5102*  	dl BUF_42_044
044B9F 3B 02 00    5103*  	dl BUF_43_004
044BA2 3C 02 00    5104*  	dl BUF_43_020
044BA5 3D 02 00    5105*  	dl BUF_43_032
044BA8 3E 02 00    5106*  	dl BUF_43_040
044BAB 3F 02 00    5107*  	dl BUF_43_044
044BAE 40 02 00    5108*  	dl BUF_44_004
044BB1 41 02 00    5109*  	dl BUF_44_020
044BB4 42 02 00    5110*  	dl BUF_44_032
044BB7 43 02 00    5111*  	dl BUF_44_040
044BBA 44 02 00    5112*  	dl BUF_44_044
044BBD 45 02 00    5113*  	dl BUF_45_004
044BC0 46 02 00    5114*  	dl BUF_45_020
044BC3 47 02 00    5115*  	dl BUF_45_032
044BC6 48 02 00    5116*  	dl BUF_45_040
044BC9 49 02 00    5117*  	dl BUF_45_044
044BCC 4A 02 00    5118*  	dl BUF_46_004
044BCF 4B 02 00    5119*  	dl BUF_46_020
044BD2 4C 02 00    5120*  	dl BUF_46_032
044BD5 4D 02 00    5121*  	dl BUF_46_040
044BD8 4E 02 00    5122*  	dl BUF_46_044
044BDB 4F 02 00    5123*  	dl BUF_47_004
044BDE 50 02 00    5124*  	dl BUF_47_020
044BE1 51 02 00    5125*  	dl BUF_47_032
044BE4 52 02 00    5126*  	dl BUF_47_040
044BE7 53 02 00    5127*  	dl BUF_47_044
044BEA 54 02 00    5128*  	dl BUF_48_004
044BED 55 02 00    5129*  	dl BUF_48_020
044BF0 56 02 00    5130*  	dl BUF_48_032
044BF3 57 02 00    5131*  	dl BUF_48_040
044BF6 58 02 00    5132*  	dl BUF_48_044
044BF9 59 02 00    5133*  	dl BUF_49_004
044BFC 5A 02 00    5134*  	dl BUF_49_020
044BFF 5B 02 00    5135*  	dl BUF_49_032
044C02 5C 02 00    5136*  	dl BUF_49_040
044C05 5D 02 00    5137*  	dl BUF_49_044
044C08 5E 02 00    5138*  	dl BUF_50_004
044C0B 5F 02 00    5139*  	dl BUF_50_020
044C0E 60 02 00    5140*  	dl BUF_50_032
044C11 61 02 00    5141*  	dl BUF_50_040
044C14 62 02 00    5142*  	dl BUF_50_044
044C17 63 02 00    5143*  	dl BUF_51_004
044C1A 64 02 00    5144*  	dl BUF_51_020
044C1D 65 02 00    5145*  	dl BUF_51_032
044C20 66 02 00    5146*  	dl BUF_51_040
044C23 67 02 00    5147*  	dl BUF_51_044
044C26 68 02 00    5148*  	dl BUF_52_004
044C29 69 02 00    5149*  	dl BUF_52_020
044C2C 6A 02 00    5150*  	dl BUF_52_032
044C2F 6B 02 00    5151*  	dl BUF_52_040
044C32 6C 02 00    5152*  	dl BUF_52_044
044C35             5153*  
044C35             5154*  ; sprite load routines jump table:
044C35             5155*  sprite_load_panels_table:
044C35 43 4D 04    5156*  	dl ld_20_004
044C38 6D 4D 04    5157*  	dl ld_20_020
044C3B 97 4D 04    5158*  	dl ld_20_032
044C3E C1 4D 04    5159*  	dl ld_20_040
044C41 EB 4D 04    5160*  	dl ld_20_044
044C44 15 4E 04    5161*  	dl ld_21_004
044C47 3F 4E 04    5162*  	dl ld_21_020
044C4A 69 4E 04    5163*  	dl ld_21_032
044C4D 93 4E 04    5164*  	dl ld_21_040
044C50 BD 4E 04    5165*  	dl ld_21_044
044C53 E7 4E 04    5166*  	dl ld_22_004
044C56 11 4F 04    5167*  	dl ld_22_020
044C59 3B 4F 04    5168*  	dl ld_22_032
044C5C 65 4F 04    5169*  	dl ld_22_040
044C5F 8F 4F 04    5170*  	dl ld_22_044
044C62 B9 4F 04    5171*  	dl ld_23_004
044C65 E3 4F 04    5172*  	dl ld_23_020
044C68 0D 50 04    5173*  	dl ld_23_032
044C6B 37 50 04    5174*  	dl ld_23_040
044C6E 61 50 04    5175*  	dl ld_23_044
044C71 8B 50 04    5176*  	dl ld_24_004
044C74 B5 50 04    5177*  	dl ld_24_020
044C77 DF 50 04    5178*  	dl ld_24_032
044C7A 09 51 04    5179*  	dl ld_24_040
044C7D 33 51 04    5180*  	dl ld_24_044
044C80 5D 51 04    5181*  	dl ld_40_004
044C83 87 51 04    5182*  	dl ld_40_020
044C86 B1 51 04    5183*  	dl ld_40_032
044C89 DB 51 04    5184*  	dl ld_40_040
044C8C 05 52 04    5185*  	dl ld_40_044
044C8F 2F 52 04    5186*  	dl ld_41_004
044C92 59 52 04    5187*  	dl ld_41_020
044C95 83 52 04    5188*  	dl ld_41_032
044C98 AD 52 04    5189*  	dl ld_41_040
044C9B D7 52 04    5190*  	dl ld_41_044
044C9E 01 53 04    5191*  	dl ld_42_004
044CA1 2B 53 04    5192*  	dl ld_42_020
044CA4 55 53 04    5193*  	dl ld_42_032
044CA7 7F 53 04    5194*  	dl ld_42_040
044CAA A9 53 04    5195*  	dl ld_42_044
044CAD D3 53 04    5196*  	dl ld_43_004
044CB0 FD 53 04    5197*  	dl ld_43_020
044CB3 27 54 04    5198*  	dl ld_43_032
044CB6 51 54 04    5199*  	dl ld_43_040
044CB9 7B 54 04    5200*  	dl ld_43_044
044CBC A5 54 04    5201*  	dl ld_44_004
044CBF CF 54 04    5202*  	dl ld_44_020
044CC2 F9 54 04    5203*  	dl ld_44_032
044CC5 23 55 04    5204*  	dl ld_44_040
044CC8 4D 55 04    5205*  	dl ld_44_044
044CCB 77 55 04    5206*  	dl ld_45_004
044CCE A1 55 04    5207*  	dl ld_45_020
044CD1 CB 55 04    5208*  	dl ld_45_032
044CD4 F5 55 04    5209*  	dl ld_45_040
044CD7 1F 56 04    5210*  	dl ld_45_044
044CDA 49 56 04    5211*  	dl ld_46_004
044CDD 73 56 04    5212*  	dl ld_46_020
044CE0 9D 56 04    5213*  	dl ld_46_032
044CE3 C7 56 04    5214*  	dl ld_46_040
044CE6 F1 56 04    5215*  	dl ld_46_044
044CE9 1B 57 04    5216*  	dl ld_47_004
044CEC 45 57 04    5217*  	dl ld_47_020
044CEF 6F 57 04    5218*  	dl ld_47_032
044CF2 99 57 04    5219*  	dl ld_47_040
044CF5 C3 57 04    5220*  	dl ld_47_044
044CF8 ED 57 04    5221*  	dl ld_48_004
044CFB 17 58 04    5222*  	dl ld_48_020
044CFE 41 58 04    5223*  	dl ld_48_032
044D01 6B 58 04    5224*  	dl ld_48_040
044D04 95 58 04    5225*  	dl ld_48_044
044D07 BF 58 04    5226*  	dl ld_49_004
044D0A E9 58 04    5227*  	dl ld_49_020
044D0D 13 59 04    5228*  	dl ld_49_032
044D10 3D 59 04    5229*  	dl ld_49_040
044D13 67 59 04    5230*  	dl ld_49_044
044D16 91 59 04    5231*  	dl ld_50_004
044D19 BB 59 04    5232*  	dl ld_50_020
044D1C E5 59 04    5233*  	dl ld_50_032
044D1F 0F 5A 04    5234*  	dl ld_50_040
044D22 39 5A 04    5235*  	dl ld_50_044
044D25 63 5A 04    5236*  	dl ld_51_004
044D28 8D 5A 04    5237*  	dl ld_51_020
044D2B B7 5A 04    5238*  	dl ld_51_032
044D2E E1 5A 04    5239*  	dl ld_51_040
044D31 0B 5B 04    5240*  	dl ld_51_044
044D34 35 5B 04    5241*  	dl ld_52_004
044D37 5F 5B 04    5242*  	dl ld_52_020
044D3A 89 5B 04    5243*  	dl ld_52_032
044D3D B3 5B 04    5244*  	dl ld_52_040
044D40 DD 5B 04    5245*  	dl ld_52_044
044D43             5246*  
044D43             5247*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
044D43             5248*  
044D43             5249*  ld_20_004:
044D43 21 07 5C 04 5250*  	ld hl,F20_004
044D47 22 ED B6 04 5251*  	ld (cur_filename),hl
044D4B 11 1A C3 04 5252*  	ld de,filedata
044D4F 01 00 00 01 5253*  	ld bc,65536
044D53 3E 01       5254*  	ld a,mos_load
044D55 5B CF       5255*  	RST.LIL 08h
044D57 21 13 02 00 5256*  	ld hl,BUF_20_004
044D5B 01 13 00 00 5257*  	ld bc,19
044D5F 11 12 00 00 5258*  	ld de,18
044D63 DD 21 56 01 5259*  	ld ix,342
       00          
044D68 CD 68 B8 04 5260*  	call vdu_load_img
044D6C C9          5261*  	ret
044D6D             5262*  
044D6D             5263*  ld_20_020:
044D6D 21 1B 5C 04 5264*  	ld hl,F20_020
044D71 22 ED B6 04 5265*  	ld (cur_filename),hl
044D75 11 1A C3 04 5266*  	ld de,filedata
044D79 01 00 00 01 5267*  	ld bc,65536
044D7D 3E 01       5268*  	ld a,mos_load
044D7F 5B CF       5269*  	RST.LIL 08h
044D81 21 14 02 00 5270*  	ld hl,BUF_20_020
044D85 01 17 00 00 5271*  	ld bc,23
044D89 11 17 00 00 5272*  	ld de,23
044D8D DD 21 11 02 5273*  	ld ix,529
       00          
044D92 CD 68 B8 04 5274*  	call vdu_load_img
044D96 C9          5275*  	ret
044D97             5276*  
044D97             5277*  ld_20_032:
044D97 21 2F 5C 04 5278*  	ld hl,F20_032
044D9B 22 ED B6 04 5279*  	ld (cur_filename),hl
044D9F 11 1A C3 04 5280*  	ld de,filedata
044DA3 01 00 00 01 5281*  	ld bc,65536
044DA7 3E 01       5282*  	ld a,mos_load
044DA9 5B CF       5283*  	RST.LIL 08h
044DAB 21 15 02 00 5284*  	ld hl,BUF_20_032
044DAF 01 20 00 00 5285*  	ld bc,32
044DB3 11 22 00 00 5286*  	ld de,34
044DB7 DD 21 40 04 5287*  	ld ix,1088
       00          
044DBC CD 68 B8 04 5288*  	call vdu_load_img
044DC0 C9          5289*  	ret
044DC1             5290*  
044DC1             5291*  ld_20_040:
044DC1 21 43 5C 04 5292*  	ld hl,F20_040
044DC5 22 ED B6 04 5293*  	ld (cur_filename),hl
044DC9 11 1A C3 04 5294*  	ld de,filedata
044DCD 01 00 00 01 5295*  	ld bc,65536
044DD1 3E 01       5296*  	ld a,mos_load
044DD3 5B CF       5297*  	RST.LIL 08h
044DD5 21 16 02 00 5298*  	ld hl,BUF_20_040
044DD9 01 36 00 00 5299*  	ld bc,54
044DDD 11 38 00 00 5300*  	ld de,56
044DE1 DD 21 D0 0B 5301*  	ld ix,3024
       00          
044DE6 CD 68 B8 04 5302*  	call vdu_load_img
044DEA C9          5303*  	ret
044DEB             5304*  
044DEB             5305*  ld_20_044:
044DEB 21 57 5C 04 5306*  	ld hl,F20_044
044DEF 22 ED B6 04 5307*  	ld (cur_filename),hl
044DF3 11 1A C3 04 5308*  	ld de,filedata
044DF7 01 00 00 01 5309*  	ld bc,65536
044DFB 3E 01       5310*  	ld a,mos_load
044DFD 5B CF       5311*  	RST.LIL 08h
044DFF 21 17 02 00 5312*  	ld hl,BUF_20_044
044E03 01 6B 00 00 5313*  	ld bc,107
044E07 11 5B 00 00 5314*  	ld de,91
044E0B DD 21 09 26 5315*  	ld ix,9737
       00          
044E10 CD 68 B8 04 5316*  	call vdu_load_img
044E14 C9          5317*  	ret
044E15             5318*  
044E15             5319*  ld_21_004:
044E15 21 6B 5C 04 5320*  	ld hl,F21_004
044E19 22 ED B6 04 5321*  	ld (cur_filename),hl
044E1D 11 1A C3 04 5322*  	ld de,filedata
044E21 01 00 00 01 5323*  	ld bc,65536
044E25 3E 01       5324*  	ld a,mos_load
044E27 5B CF       5325*  	RST.LIL 08h
044E29 21 18 02 00 5326*  	ld hl,BUF_21_004
044E2D 01 0B 00 00 5327*  	ld bc,11
044E31 11 0B 00 00 5328*  	ld de,11
044E35 DD 21 79 00 5329*  	ld ix,121
       00          
044E3A CD 68 B8 04 5330*  	call vdu_load_img
044E3E C9          5331*  	ret
044E3F             5332*  
044E3F             5333*  ld_21_020:
044E3F 21 7F 5C 04 5334*  	ld hl,F21_020
044E43 22 ED B6 04 5335*  	ld (cur_filename),hl
044E47 11 1A C3 04 5336*  	ld de,filedata
044E4B 01 00 00 01 5337*  	ld bc,65536
044E4F 3E 01       5338*  	ld a,mos_load
044E51 5B CF       5339*  	RST.LIL 08h
044E53 21 19 02 00 5340*  	ld hl,BUF_21_020
044E57 01 0E 00 00 5341*  	ld bc,14
044E5B 11 0E 00 00 5342*  	ld de,14
044E5F DD 21 C4 00 5343*  	ld ix,196
       00          
044E64 CD 68 B8 04 5344*  	call vdu_load_img
044E68 C9          5345*  	ret
044E69             5346*  
044E69             5347*  ld_21_032:
044E69 21 93 5C 04 5348*  	ld hl,F21_032
044E6D 22 ED B6 04 5349*  	ld (cur_filename),hl
044E71 11 1A C3 04 5350*  	ld de,filedata
044E75 01 00 00 01 5351*  	ld bc,65536
044E79 3E 01       5352*  	ld a,mos_load
044E7B 5B CF       5353*  	RST.LIL 08h
044E7D 21 1A 02 00 5354*  	ld hl,BUF_21_032
044E81 01 14 00 00 5355*  	ld bc,20
044E85 11 16 00 00 5356*  	ld de,22
044E89 DD 21 B8 01 5357*  	ld ix,440
       00          
044E8E CD 68 B8 04 5358*  	call vdu_load_img
044E92 C9          5359*  	ret
044E93             5360*  
044E93             5361*  ld_21_040:
044E93 21 A7 5C 04 5362*  	ld hl,F21_040
044E97 22 ED B6 04 5363*  	ld (cur_filename),hl
044E9B 11 1A C3 04 5364*  	ld de,filedata
044E9F 01 00 00 01 5365*  	ld bc,65536
044EA3 3E 01       5366*  	ld a,mos_load
044EA5 5B CF       5367*  	RST.LIL 08h
044EA7 21 1B 02 00 5368*  	ld hl,BUF_21_040
044EAB 01 21 00 00 5369*  	ld bc,33
044EAF 11 24 00 00 5370*  	ld de,36
044EB3 DD 21 A4 04 5371*  	ld ix,1188
       00          
044EB8 CD 68 B8 04 5372*  	call vdu_load_img
044EBC C9          5373*  	ret
044EBD             5374*  
044EBD             5375*  ld_21_044:
044EBD 21 BB 5C 04 5376*  	ld hl,F21_044
044EC1 22 ED B6 04 5377*  	ld (cur_filename),hl
044EC5 11 1A C3 04 5378*  	ld de,filedata
044EC9 01 00 00 01 5379*  	ld bc,65536
044ECD 3E 01       5380*  	ld a,mos_load
044ECF 5B CF       5381*  	RST.LIL 08h
044ED1 21 1C 02 00 5382*  	ld hl,BUF_21_044
044ED5 01 64 00 00 5383*  	ld bc,100
044ED9 11 1E 00 00 5384*  	ld de,30
044EDD DD 21 B8 0B 5385*  	ld ix,3000
       00          
044EE2 CD 68 B8 04 5386*  	call vdu_load_img
044EE6 C9          5387*  	ret
044EE7             5388*  
044EE7             5389*  ld_22_004:
044EE7 21 CF 5C 04 5390*  	ld hl,F22_004
044EEB 22 ED B6 04 5391*  	ld (cur_filename),hl
044EEF 11 1A C3 04 5392*  	ld de,filedata
044EF3 01 00 00 01 5393*  	ld bc,65536
044EF7 3E 01       5394*  	ld a,mos_load
044EF9 5B CF       5395*  	RST.LIL 08h
044EFB 21 1D 02 00 5396*  	ld hl,BUF_22_004
044EFF 01 11 00 00 5397*  	ld bc,17
044F03 11 0B 00 00 5398*  	ld de,11
044F07 DD 21 BB 00 5399*  	ld ix,187
       00          
044F0C CD 68 B8 04 5400*  	call vdu_load_img
044F10 C9          5401*  	ret
044F11             5402*  
044F11             5403*  ld_22_020:
044F11 21 E3 5C 04 5404*  	ld hl,F22_020
044F15 22 ED B6 04 5405*  	ld (cur_filename),hl
044F19 11 1A C3 04 5406*  	ld de,filedata
044F1D 01 00 00 01 5407*  	ld bc,65536
044F21 3E 01       5408*  	ld a,mos_load
044F23 5B CF       5409*  	RST.LIL 08h
044F25 21 1E 02 00 5410*  	ld hl,BUF_22_020
044F29 01 16 00 00 5411*  	ld bc,22
044F2D 11 0E 00 00 5412*  	ld de,14
044F31 DD 21 34 01 5413*  	ld ix,308
       00          
044F36 CD 68 B8 04 5414*  	call vdu_load_img
044F3A C9          5415*  	ret
044F3B             5416*  
044F3B             5417*  ld_22_032:
044F3B 21 F7 5C 04 5418*  	ld hl,F22_032
044F3F 22 ED B6 04 5419*  	ld (cur_filename),hl
044F43 11 1A C3 04 5420*  	ld de,filedata
044F47 01 00 00 01 5421*  	ld bc,65536
044F4B 3E 01       5422*  	ld a,mos_load
044F4D 5B CF       5423*  	RST.LIL 08h
044F4F 21 1F 02 00 5424*  	ld hl,BUF_22_032
044F53 01 1E 00 00 5425*  	ld bc,30
044F57 11 16 00 00 5426*  	ld de,22
044F5B DD 21 94 02 5427*  	ld ix,660
       00          
044F60 CD 68 B8 04 5428*  	call vdu_load_img
044F64 C9          5429*  	ret
044F65             5430*  
044F65             5431*  ld_22_040:
044F65 21 0B 5D 04 5432*  	ld hl,F22_040
044F69 22 ED B6 04 5433*  	ld (cur_filename),hl
044F6D 11 1A C3 04 5434*  	ld de,filedata
044F71 01 00 00 01 5435*  	ld bc,65536
044F75 3E 01       5436*  	ld a,mos_load
044F77 5B CF       5437*  	RST.LIL 08h
044F79 21 20 02 00 5438*  	ld hl,BUF_22_040
044F7D 01 33 00 00 5439*  	ld bc,51
044F81 11 24 00 00 5440*  	ld de,36
044F85 DD 21 2C 07 5441*  	ld ix,1836
       00          
044F8A CD 68 B8 04 5442*  	call vdu_load_img
044F8E C9          5443*  	ret
044F8F             5444*  
044F8F             5445*  ld_22_044:
044F8F 21 1F 5D 04 5446*  	ld hl,F22_044
044F93 22 ED B6 04 5447*  	ld (cur_filename),hl
044F97 11 1A C3 04 5448*  	ld de,filedata
044F9B 01 00 00 01 5449*  	ld bc,65536
044F9F 3E 01       5450*  	ld a,mos_load
044FA1 5B CF       5451*  	RST.LIL 08h
044FA3 21 21 02 00 5452*  	ld hl,BUF_22_044
044FA7 01 96 00 00 5453*  	ld bc,150
044FAB 11 1E 00 00 5454*  	ld de,30
044FAF DD 21 94 11 5455*  	ld ix,4500
       00          
044FB4 CD 68 B8 04 5456*  	call vdu_load_img
044FB8 C9          5457*  	ret
044FB9             5458*  
044FB9             5459*  ld_23_004:
044FB9 21 33 5D 04 5460*  	ld hl,F23_004
044FBD 22 ED B6 04 5461*  	ld (cur_filename),hl
044FC1 11 1A C3 04 5462*  	ld de,filedata
044FC5 01 00 00 01 5463*  	ld bc,65536
044FC9 3E 01       5464*  	ld a,mos_load
044FCB 5B CF       5465*  	RST.LIL 08h
044FCD 21 22 02 00 5466*  	ld hl,BUF_23_004
044FD1 01 0E 00 00 5467*  	ld bc,14
044FD5 11 06 00 00 5468*  	ld de,6
044FD9 DD 21 54 00 5469*  	ld ix,84
       00          
044FDE CD 68 B8 04 5470*  	call vdu_load_img
044FE2 C9          5471*  	ret
044FE3             5472*  
044FE3             5473*  ld_23_020:
044FE3 21 47 5D 04 5474*  	ld hl,F23_020
044FE7 22 ED B6 04 5475*  	ld (cur_filename),hl
044FEB 11 1A C3 04 5476*  	ld de,filedata
044FEF 01 00 00 01 5477*  	ld bc,65536
044FF3 3E 01       5478*  	ld a,mos_load
044FF5 5B CF       5479*  	RST.LIL 08h
044FF7 21 23 02 00 5480*  	ld hl,BUF_23_020
044FFB 01 11 00 00 5481*  	ld bc,17
044FFF 11 08 00 00 5482*  	ld de,8
045003 DD 21 88 00 5483*  	ld ix,136
       00          
045008 CD 68 B8 04 5484*  	call vdu_load_img
04500C C9          5485*  	ret
04500D             5486*  
04500D             5487*  ld_23_032:
04500D 21 5B 5D 04 5488*  	ld hl,F23_032
045011 22 ED B6 04 5489*  	ld (cur_filename),hl
045015 11 1A C3 04 5490*  	ld de,filedata
045019 01 00 00 01 5491*  	ld bc,65536
04501D 3E 01       5492*  	ld a,mos_load
04501F 5B CF       5493*  	RST.LIL 08h
045021 21 24 02 00 5494*  	ld hl,BUF_23_032
045025 01 19 00 00 5495*  	ld bc,25
045029 11 0B 00 00 5496*  	ld de,11
04502D DD 21 13 01 5497*  	ld ix,275
       00          
045032 CD 68 B8 04 5498*  	call vdu_load_img
045036 C9          5499*  	ret
045037             5500*  
045037             5501*  ld_23_040:
045037 21 6F 5D 04 5502*  	ld hl,F23_040
04503B 22 ED B6 04 5503*  	ld (cur_filename),hl
04503F 11 1A C3 04 5504*  	ld de,filedata
045043 01 00 00 01 5505*  	ld bc,65536
045047 3E 01       5506*  	ld a,mos_load
045049 5B CF       5507*  	RST.LIL 08h
04504B 21 25 02 00 5508*  	ld hl,BUF_23_040
04504F 01 28 00 00 5509*  	ld bc,40
045053 11 12 00 00 5510*  	ld de,18
045057 DD 21 D0 02 5511*  	ld ix,720
       00          
04505C CD 68 B8 04 5512*  	call vdu_load_img
045060 C9          5513*  	ret
045061             5514*  
045061             5515*  ld_23_044:
045061 21 83 5D 04 5516*  	ld hl,F23_044
045065 22 ED B6 04 5517*  	ld (cur_filename),hl
045069 11 1A C3 04 5518*  	ld de,filedata
04506D 01 00 00 01 5519*  	ld bc,65536
045071 3E 01       5520*  	ld a,mos_load
045073 5B CF       5521*  	RST.LIL 08h
045075 21 26 02 00 5522*  	ld hl,BUF_23_044
045079 01 01 00 00 5523*  	ld bc,1
04507D 11 01 00 00 5524*  	ld de,1
045081 DD 21 01 00 5525*  	ld ix,1
       00          
045086 CD 68 B8 04 5526*  	call vdu_load_img
04508A C9          5527*  	ret
04508B             5528*  
04508B             5529*  ld_24_004:
04508B 21 97 5D 04 5530*  	ld hl,F24_004
04508F 22 ED B6 04 5531*  	ld (cur_filename),hl
045093 11 1A C3 04 5532*  	ld de,filedata
045097 01 00 00 01 5533*  	ld bc,65536
04509B 3E 01       5534*  	ld a,mos_load
04509D 5B CF       5535*  	RST.LIL 08h
04509F 21 27 02 00 5536*  	ld hl,BUF_24_004
0450A3 01 0B 00 00 5537*  	ld bc,11
0450A7 11 0B 00 00 5538*  	ld de,11
0450AB DD 21 79 00 5539*  	ld ix,121
       00          
0450B0 CD 68 B8 04 5540*  	call vdu_load_img
0450B4 C9          5541*  	ret
0450B5             5542*  
0450B5             5543*  ld_24_020:
0450B5 21 AB 5D 04 5544*  	ld hl,F24_020
0450B9 22 ED B6 04 5545*  	ld (cur_filename),hl
0450BD 11 1A C3 04 5546*  	ld de,filedata
0450C1 01 00 00 01 5547*  	ld bc,65536
0450C5 3E 01       5548*  	ld a,mos_load
0450C7 5B CF       5549*  	RST.LIL 08h
0450C9 21 28 02 00 5550*  	ld hl,BUF_24_020
0450CD 01 0E 00 00 5551*  	ld bc,14
0450D1 11 0E 00 00 5552*  	ld de,14
0450D5 DD 21 C4 00 5553*  	ld ix,196
       00          
0450DA CD 68 B8 04 5554*  	call vdu_load_img
0450DE C9          5555*  	ret
0450DF             5556*  
0450DF             5557*  ld_24_032:
0450DF 21 BF 5D 04 5558*  	ld hl,F24_032
0450E3 22 ED B6 04 5559*  	ld (cur_filename),hl
0450E7 11 1A C3 04 5560*  	ld de,filedata
0450EB 01 00 00 01 5561*  	ld bc,65536
0450EF 3E 01       5562*  	ld a,mos_load
0450F1 5B CF       5563*  	RST.LIL 08h
0450F3 21 29 02 00 5564*  	ld hl,BUF_24_032
0450F7 01 14 00 00 5565*  	ld bc,20
0450FB 11 16 00 00 5566*  	ld de,22
0450FF DD 21 B8 01 5567*  	ld ix,440
       00          
045104 CD 68 B8 04 5568*  	call vdu_load_img
045108 C9          5569*  	ret
045109             5570*  
045109             5571*  ld_24_040:
045109 21 D3 5D 04 5572*  	ld hl,F24_040
04510D 22 ED B6 04 5573*  	ld (cur_filename),hl
045111 11 1A C3 04 5574*  	ld de,filedata
045115 01 00 00 01 5575*  	ld bc,65536
045119 3E 01       5576*  	ld a,mos_load
04511B 5B CF       5577*  	RST.LIL 08h
04511D 21 2A 02 00 5578*  	ld hl,BUF_24_040
045121 01 21 00 00 5579*  	ld bc,33
045125 11 24 00 00 5580*  	ld de,36
045129 DD 21 A4 04 5581*  	ld ix,1188
       00          
04512E CD 68 B8 04 5582*  	call vdu_load_img
045132 C9          5583*  	ret
045133             5584*  
045133             5585*  ld_24_044:
045133 21 E7 5D 04 5586*  	ld hl,F24_044
045137 22 ED B6 04 5587*  	ld (cur_filename),hl
04513B 11 1A C3 04 5588*  	ld de,filedata
04513F 01 00 00 01 5589*  	ld bc,65536
045143 3E 01       5590*  	ld a,mos_load
045145 5B CF       5591*  	RST.LIL 08h
045147 21 2B 02 00 5592*  	ld hl,BUF_24_044
04514B 01 64 00 00 5593*  	ld bc,100
04514F 11 1E 00 00 5594*  	ld de,30
045153 DD 21 B8 0B 5595*  	ld ix,3000
       00          
045158 CD 68 B8 04 5596*  	call vdu_load_img
04515C C9          5597*  	ret
04515D             5598*  
04515D             5599*  ld_40_004:
04515D 21 FB 5D 04 5600*  	ld hl,F40_004
045161 22 ED B6 04 5601*  	ld (cur_filename),hl
045165 11 1A C3 04 5602*  	ld de,filedata
045169 01 00 00 01 5603*  	ld bc,65536
04516D 3E 01       5604*  	ld a,mos_load
04516F 5B CF       5605*  	RST.LIL 08h
045171 21 2C 02 00 5606*  	ld hl,BUF_40_004
045175 01 0E 00 00 5607*  	ld bc,14
045179 11 07 00 00 5608*  	ld de,7
04517D DD 21 62 00 5609*  	ld ix,98
       00          
045182 CD 68 B8 04 5610*  	call vdu_load_img
045186 C9          5611*  	ret
045187             5612*  
045187             5613*  ld_40_020:
045187 21 0F 5E 04 5614*  	ld hl,F40_020
04518B 22 ED B6 04 5615*  	ld (cur_filename),hl
04518F 11 1A C3 04 5616*  	ld de,filedata
045193 01 00 00 01 5617*  	ld bc,65536
045197 3E 01       5618*  	ld a,mos_load
045199 5B CF       5619*  	RST.LIL 08h
04519B 21 2D 02 00 5620*  	ld hl,BUF_40_020
04519F 01 12 00 00 5621*  	ld bc,18
0451A3 11 0A 00 00 5622*  	ld de,10
0451A7 DD 21 B4 00 5623*  	ld ix,180
       00          
0451AC CD 68 B8 04 5624*  	call vdu_load_img
0451B0 C9          5625*  	ret
0451B1             5626*  
0451B1             5627*  ld_40_032:
0451B1 21 23 5E 04 5628*  	ld hl,F40_032
0451B5 22 ED B6 04 5629*  	ld (cur_filename),hl
0451B9 11 1A C3 04 5630*  	ld de,filedata
0451BD 01 00 00 01 5631*  	ld bc,65536
0451C1 3E 01       5632*  	ld a,mos_load
0451C3 5B CF       5633*  	RST.LIL 08h
0451C5 21 2E 02 00 5634*  	ld hl,BUF_40_032
0451C9 01 1A 00 00 5635*  	ld bc,26
0451CD 11 0D 00 00 5636*  	ld de,13
0451D1 DD 21 52 01 5637*  	ld ix,338
       00          
0451D6 CD 68 B8 04 5638*  	call vdu_load_img
0451DA C9          5639*  	ret
0451DB             5640*  
0451DB             5641*  ld_40_040:
0451DB 21 37 5E 04 5642*  	ld hl,F40_040
0451DF 22 ED B6 04 5643*  	ld (cur_filename),hl
0451E3 11 1A C3 04 5644*  	ld de,filedata
0451E7 01 00 00 01 5645*  	ld bc,65536
0451EB 3E 01       5646*  	ld a,mos_load
0451ED 5B CF       5647*  	RST.LIL 08h
0451EF 21 2F 02 00 5648*  	ld hl,BUF_40_040
0451F3 01 2B 00 00 5649*  	ld bc,43
0451F7 11 17 00 00 5650*  	ld de,23
0451FB DD 21 DD 03 5651*  	ld ix,989
       00          
045200 CD 68 B8 04 5652*  	call vdu_load_img
045204 C9          5653*  	ret
045205             5654*  
045205             5655*  ld_40_044:
045205 21 4B 5E 04 5656*  	ld hl,F40_044
045209 22 ED B6 04 5657*  	ld (cur_filename),hl
04520D 11 1A C3 04 5658*  	ld de,filedata
045211 01 00 00 01 5659*  	ld bc,65536
045215 3E 01       5660*  	ld a,mos_load
045217 5B CF       5661*  	RST.LIL 08h
045219 21 30 02 00 5662*  	ld hl,BUF_40_044
04521D 01 01 00 00 5663*  	ld bc,1
045221 11 01 00 00 5664*  	ld de,1
045225 DD 21 01 00 5665*  	ld ix,1
       00          
04522A CD 68 B8 04 5666*  	call vdu_load_img
04522E C9          5667*  	ret
04522F             5668*  
04522F             5669*  ld_41_004:
04522F 21 5F 5E 04 5670*  	ld hl,F41_004
045233 22 ED B6 04 5671*  	ld (cur_filename),hl
045237 11 1A C3 04 5672*  	ld de,filedata
04523B 01 00 00 01 5673*  	ld bc,65536
04523F 3E 01       5674*  	ld a,mos_load
045241 5B CF       5675*  	RST.LIL 08h
045243 21 31 02 00 5676*  	ld hl,BUF_41_004
045247 01 0B 00 00 5677*  	ld bc,11
04524B 11 0B 00 00 5678*  	ld de,11
04524F DD 21 79 00 5679*  	ld ix,121
       00          
045254 CD 68 B8 04 5680*  	call vdu_load_img
045258 C9          5681*  	ret
045259             5682*  
045259             5683*  ld_41_020:
045259 21 73 5E 04 5684*  	ld hl,F41_020
04525D 22 ED B6 04 5685*  	ld (cur_filename),hl
045261 11 1A C3 04 5686*  	ld de,filedata
045265 01 00 00 01 5687*  	ld bc,65536
045269 3E 01       5688*  	ld a,mos_load
04526B 5B CF       5689*  	RST.LIL 08h
04526D 21 32 02 00 5690*  	ld hl,BUF_41_020
045271 01 10 00 00 5691*  	ld bc,16
045275 11 0E 00 00 5692*  	ld de,14
045279 DD 21 E0 00 5693*  	ld ix,224
       00          
04527E CD 68 B8 04 5694*  	call vdu_load_img
045282 C9          5695*  	ret
045283             5696*  
045283             5697*  ld_41_032:
045283 21 87 5E 04 5698*  	ld hl,F41_032
045287 22 ED B6 04 5699*  	ld (cur_filename),hl
04528B 11 1A C3 04 5700*  	ld de,filedata
04528F 01 00 00 01 5701*  	ld bc,65536
045293 3E 01       5702*  	ld a,mos_load
045295 5B CF       5703*  	RST.LIL 08h
045297 21 33 02 00 5704*  	ld hl,BUF_41_032
04529B 01 16 00 00 5705*  	ld bc,22
04529F 11 14 00 00 5706*  	ld de,20
0452A3 DD 21 B8 01 5707*  	ld ix,440
       00          
0452A8 CD 68 B8 04 5708*  	call vdu_load_img
0452AC C9          5709*  	ret
0452AD             5710*  
0452AD             5711*  ld_41_040:
0452AD 21 9B 5E 04 5712*  	ld hl,F41_040
0452B1 22 ED B6 04 5713*  	ld (cur_filename),hl
0452B5 11 1A C3 04 5714*  	ld de,filedata
0452B9 01 00 00 01 5715*  	ld bc,65536
0452BD 3E 01       5716*  	ld a,mos_load
0452BF 5B CF       5717*  	RST.LIL 08h
0452C1 21 34 02 00 5718*  	ld hl,BUF_41_040
0452C5 01 25 00 00 5719*  	ld bc,37
0452C9 11 22 00 00 5720*  	ld de,34
0452CD DD 21 EA 04 5721*  	ld ix,1258
       00          
0452D2 CD 68 B8 04 5722*  	call vdu_load_img
0452D6 C9          5723*  	ret
0452D7             5724*  
0452D7             5725*  ld_41_044:
0452D7 21 AF 5E 04 5726*  	ld hl,F41_044
0452DB 22 ED B6 04 5727*  	ld (cur_filename),hl
0452DF 11 1A C3 04 5728*  	ld de,filedata
0452E3 01 00 00 01 5729*  	ld bc,65536
0452E7 3E 01       5730*  	ld a,mos_load
0452E9 5B CF       5731*  	RST.LIL 08h
0452EB 21 35 02 00 5732*  	ld hl,BUF_41_044
0452EF 01 23 00 00 5733*  	ld bc,35
0452F3 11 19 00 00 5734*  	ld de,25
0452F7 DD 21 6B 03 5735*  	ld ix,875
       00          
0452FC CD 68 B8 04 5736*  	call vdu_load_img
045300 C9          5737*  	ret
045301             5738*  
045301             5739*  ld_42_004:
045301 21 C3 5E 04 5740*  	ld hl,F42_004
045305 22 ED B6 04 5741*  	ld (cur_filename),hl
045309 11 1A C3 04 5742*  	ld de,filedata
04530D 01 00 00 01 5743*  	ld bc,65536
045311 3E 01       5744*  	ld a,mos_load
045313 5B CF       5745*  	RST.LIL 08h
045315 21 36 02 00 5746*  	ld hl,BUF_42_004
045319 01 0A 00 00 5747*  	ld bc,10
04531D 11 09 00 00 5748*  	ld de,9
045321 DD 21 5A 00 5749*  	ld ix,90
       00          
045326 CD 68 B8 04 5750*  	call vdu_load_img
04532A C9          5751*  	ret
04532B             5752*  
04532B             5753*  ld_42_020:
04532B 21 D7 5E 04 5754*  	ld hl,F42_020
04532F 22 ED B6 04 5755*  	ld (cur_filename),hl
045333 11 1A C3 04 5756*  	ld de,filedata
045337 01 00 00 01 5757*  	ld bc,65536
04533B 3E 01       5758*  	ld a,mos_load
04533D 5B CF       5759*  	RST.LIL 08h
04533F 21 37 02 00 5760*  	ld hl,BUF_42_020
045343 01 0E 00 00 5761*  	ld bc,14
045347 11 0B 00 00 5762*  	ld de,11
04534B DD 21 9A 00 5763*  	ld ix,154
       00          
045350 CD 68 B8 04 5764*  	call vdu_load_img
045354 C9          5765*  	ret
045355             5766*  
045355             5767*  ld_42_032:
045355 21 EB 5E 04 5768*  	ld hl,F42_032
045359 22 ED B6 04 5769*  	ld (cur_filename),hl
04535D 11 1A C3 04 5770*  	ld de,filedata
045361 01 00 00 01 5771*  	ld bc,65536
045365 3E 01       5772*  	ld a,mos_load
045367 5B CF       5773*  	RST.LIL 08h
045369 21 38 02 00 5774*  	ld hl,BUF_42_032
04536D 01 13 00 00 5775*  	ld bc,19
045371 11 10 00 00 5776*  	ld de,16
045375 DD 21 30 01 5777*  	ld ix,304
       00          
04537A CD 68 B8 04 5778*  	call vdu_load_img
04537E C9          5779*  	ret
04537F             5780*  
04537F             5781*  ld_42_040:
04537F 21 FF 5E 04 5782*  	ld hl,F42_040
045383 22 ED B6 04 5783*  	ld (cur_filename),hl
045387 11 1A C3 04 5784*  	ld de,filedata
04538B 01 00 00 01 5785*  	ld bc,65536
04538F 3E 01       5786*  	ld a,mos_load
045391 5B CF       5787*  	RST.LIL 08h
045393 21 39 02 00 5788*  	ld hl,BUF_42_040
045397 01 20 00 00 5789*  	ld bc,32
04539B 11 1B 00 00 5790*  	ld de,27
04539F DD 21 60 03 5791*  	ld ix,864
       00          
0453A4 CD 68 B8 04 5792*  	call vdu_load_img
0453A8 C9          5793*  	ret
0453A9             5794*  
0453A9             5795*  ld_42_044:
0453A9 21 13 5F 04 5796*  	ld hl,F42_044
0453AD 22 ED B6 04 5797*  	ld (cur_filename),hl
0453B1 11 1A C3 04 5798*  	ld de,filedata
0453B5 01 00 00 01 5799*  	ld bc,65536
0453B9 3E 01       5800*  	ld a,mos_load
0453BB 5B CF       5801*  	RST.LIL 08h
0453BD 21 3A 02 00 5802*  	ld hl,BUF_42_044
0453C1 01 3F 00 00 5803*  	ld bc,63
0453C5 11 04 00 00 5804*  	ld de,4
0453C9 DD 21 FC 00 5805*  	ld ix,252
       00          
0453CE CD 68 B8 04 5806*  	call vdu_load_img
0453D2 C9          5807*  	ret
0453D3             5808*  
0453D3             5809*  ld_43_004:
0453D3 21 27 5F 04 5810*  	ld hl,F43_004
0453D7 22 ED B6 04 5811*  	ld (cur_filename),hl
0453DB 11 1A C3 04 5812*  	ld de,filedata
0453DF 01 00 00 01 5813*  	ld bc,65536
0453E3 3E 01       5814*  	ld a,mos_load
0453E5 5B CF       5815*  	RST.LIL 08h
0453E7 21 3B 02 00 5816*  	ld hl,BUF_43_004
0453EB 01 0B 00 00 5817*  	ld bc,11
0453EF 11 04 00 00 5818*  	ld de,4
0453F3 DD 21 2C 00 5819*  	ld ix,44
       00          
0453F8 CD 68 B8 04 5820*  	call vdu_load_img
0453FC C9          5821*  	ret
0453FD             5822*  
0453FD             5823*  ld_43_020:
0453FD 21 3B 5F 04 5824*  	ld hl,F43_020
045401 22 ED B6 04 5825*  	ld (cur_filename),hl
045405 11 1A C3 04 5826*  	ld de,filedata
045409 01 00 00 01 5827*  	ld bc,65536
04540D 3E 01       5828*  	ld a,mos_load
04540F 5B CF       5829*  	RST.LIL 08h
045411 21 3C 02 00 5830*  	ld hl,BUF_43_020
045415 01 0F 00 00 5831*  	ld bc,15
045419 11 04 00 00 5832*  	ld de,4
04541D DD 21 3C 00 5833*  	ld ix,60
       00          
045422 CD 68 B8 04 5834*  	call vdu_load_img
045426 C9          5835*  	ret
045427             5836*  
045427             5837*  ld_43_032:
045427 21 4F 5F 04 5838*  	ld hl,F43_032
04542B 22 ED B6 04 5839*  	ld (cur_filename),hl
04542F 11 1A C3 04 5840*  	ld de,filedata
045433 01 00 00 01 5841*  	ld bc,65536
045437 3E 01       5842*  	ld a,mos_load
045439 5B CF       5843*  	RST.LIL 08h
04543B 21 3D 02 00 5844*  	ld hl,BUF_43_032
04543F 01 15 00 00 5845*  	ld bc,21
045443 11 07 00 00 5846*  	ld de,7
045447 DD 21 93 00 5847*  	ld ix,147
       00          
04544C CD 68 B8 04 5848*  	call vdu_load_img
045450 C9          5849*  	ret
045451             5850*  
045451             5851*  ld_43_040:
045451 21 63 5F 04 5852*  	ld hl,F43_040
045455 22 ED B6 04 5853*  	ld (cur_filename),hl
045459 11 1A C3 04 5854*  	ld de,filedata
04545D 01 00 00 01 5855*  	ld bc,65536
045461 3E 01       5856*  	ld a,mos_load
045463 5B CF       5857*  	RST.LIL 08h
045465 21 3E 02 00 5858*  	ld hl,BUF_43_040
045469 01 23 00 00 5859*  	ld bc,35
04546D 11 0D 00 00 5860*  	ld de,13
045471 DD 21 C7 01 5861*  	ld ix,455
       00          
045476 CD 68 B8 04 5862*  	call vdu_load_img
04547A C9          5863*  	ret
04547B             5864*  
04547B             5865*  ld_43_044:
04547B 21 77 5F 04 5866*  	ld hl,F43_044
04547F 22 ED B6 04 5867*  	ld (cur_filename),hl
045483 11 1A C3 04 5868*  	ld de,filedata
045487 01 00 00 01 5869*  	ld bc,65536
04548B 3E 01       5870*  	ld a,mos_load
04548D 5B CF       5871*  	RST.LIL 08h
04548F 21 3F 02 00 5872*  	ld hl,BUF_43_044
045493 01 01 00 00 5873*  	ld bc,1
045497 11 01 00 00 5874*  	ld de,1
04549B DD 21 01 00 5875*  	ld ix,1
       00          
0454A0 CD 68 B8 04 5876*  	call vdu_load_img
0454A4 C9          5877*  	ret
0454A5             5878*  
0454A5             5879*  ld_44_004:
0454A5 21 8B 5F 04 5880*  	ld hl,F44_004
0454A9 22 ED B6 04 5881*  	ld (cur_filename),hl
0454AD 11 1A C3 04 5882*  	ld de,filedata
0454B1 01 00 00 01 5883*  	ld bc,65536
0454B5 3E 01       5884*  	ld a,mos_load
0454B7 5B CF       5885*  	RST.LIL 08h
0454B9 21 40 02 00 5886*  	ld hl,BUF_44_004
0454BD 01 05 00 00 5887*  	ld bc,5
0454C1 11 04 00 00 5888*  	ld de,4
0454C5 DD 21 14 00 5889*  	ld ix,20
       00          
0454CA CD 68 B8 04 5890*  	call vdu_load_img
0454CE C9          5891*  	ret
0454CF             5892*  
0454CF             5893*  ld_44_020:
0454CF 21 9F 5F 04 5894*  	ld hl,F44_020
0454D3 22 ED B6 04 5895*  	ld (cur_filename),hl
0454D7 11 1A C3 04 5896*  	ld de,filedata
0454DB 01 00 00 01 5897*  	ld bc,65536
0454DF 3E 01       5898*  	ld a,mos_load
0454E1 5B CF       5899*  	RST.LIL 08h
0454E3 21 41 02 00 5900*  	ld hl,BUF_44_020
0454E7 01 08 00 00 5901*  	ld bc,8
0454EB 11 06 00 00 5902*  	ld de,6
0454EF DD 21 30 00 5903*  	ld ix,48
       00          
0454F4 CD 68 B8 04 5904*  	call vdu_load_img
0454F8 C9          5905*  	ret
0454F9             5906*  
0454F9             5907*  ld_44_032:
0454F9 21 B3 5F 04 5908*  	ld hl,F44_032
0454FD 22 ED B6 04 5909*  	ld (cur_filename),hl
045501 11 1A C3 04 5910*  	ld de,filedata
045505 01 00 00 01 5911*  	ld bc,65536
045509 3E 01       5912*  	ld a,mos_load
04550B 5B CF       5913*  	RST.LIL 08h
04550D 21 42 02 00 5914*  	ld hl,BUF_44_032
045511 01 0D 00 00 5915*  	ld bc,13
045515 11 0A 00 00 5916*  	ld de,10
045519 DD 21 82 00 5917*  	ld ix,130
       00          
04551E CD 68 B8 04 5918*  	call vdu_load_img
045522 C9          5919*  	ret
045523             5920*  
045523             5921*  ld_44_040:
045523 21 C7 5F 04 5922*  	ld hl,F44_040
045527 22 ED B6 04 5923*  	ld (cur_filename),hl
04552B 11 1A C3 04 5924*  	ld de,filedata
04552F 01 00 00 01 5925*  	ld bc,65536
045533 3E 01       5926*  	ld a,mos_load
045535 5B CF       5927*  	RST.LIL 08h
045537 21 43 02 00 5928*  	ld hl,BUF_44_040
04553B 01 14 00 00 5929*  	ld bc,20
04553F 11 0F 00 00 5930*  	ld de,15
045543 DD 21 2C 01 5931*  	ld ix,300
       00          
045548 CD 68 B8 04 5932*  	call vdu_load_img
04554C C9          5933*  	ret
04554D             5934*  
04554D             5935*  ld_44_044:
04554D 21 DB 5F 04 5936*  	ld hl,F44_044
045551 22 ED B6 04 5937*  	ld (cur_filename),hl
045555 11 1A C3 04 5938*  	ld de,filedata
045559 01 00 00 01 5939*  	ld bc,65536
04555D 3E 01       5940*  	ld a,mos_load
04555F 5B CF       5941*  	RST.LIL 08h
045561 21 44 02 00 5942*  	ld hl,BUF_44_044
045565 01 01 00 00 5943*  	ld bc,1
045569 11 01 00 00 5944*  	ld de,1
04556D DD 21 01 00 5945*  	ld ix,1
       00          
045572 CD 68 B8 04 5946*  	call vdu_load_img
045576 C9          5947*  	ret
045577             5948*  
045577             5949*  ld_45_004:
045577 21 EF 5F 04 5950*  	ld hl,F45_004
04557B 22 ED B6 04 5951*  	ld (cur_filename),hl
04557F 11 1A C3 04 5952*  	ld de,filedata
045583 01 00 00 01 5953*  	ld bc,65536
045587 3E 01       5954*  	ld a,mos_load
045589 5B CF       5955*  	RST.LIL 08h
04558B 21 45 02 00 5956*  	ld hl,BUF_45_004
04558F 01 10 00 00 5957*  	ld bc,16
045593 11 0A 00 00 5958*  	ld de,10
045597 DD 21 A0 00 5959*  	ld ix,160
       00          
04559C CD 68 B8 04 5960*  	call vdu_load_img
0455A0 C9          5961*  	ret
0455A1             5962*  
0455A1             5963*  ld_45_020:
0455A1 21 03 60 04 5964*  	ld hl,F45_020
0455A5 22 ED B6 04 5965*  	ld (cur_filename),hl
0455A9 11 1A C3 04 5966*  	ld de,filedata
0455AD 01 00 00 01 5967*  	ld bc,65536
0455B1 3E 01       5968*  	ld a,mos_load
0455B3 5B CF       5969*  	RST.LIL 08h
0455B5 21 46 02 00 5970*  	ld hl,BUF_45_020
0455B9 01 14 00 00 5971*  	ld bc,20
0455BD 11 0D 00 00 5972*  	ld de,13
0455C1 DD 21 04 01 5973*  	ld ix,260
       00          
0455C6 CD 68 B8 04 5974*  	call vdu_load_img
0455CA C9          5975*  	ret
0455CB             5976*  
0455CB             5977*  ld_45_032:
0455CB 21 17 60 04 5978*  	ld hl,F45_032
0455CF 22 ED B6 04 5979*  	ld (cur_filename),hl
0455D3 11 1A C3 04 5980*  	ld de,filedata
0455D7 01 00 00 01 5981*  	ld bc,65536
0455DB 3E 01       5982*  	ld a,mos_load
0455DD 5B CF       5983*  	RST.LIL 08h
0455DF 21 47 02 00 5984*  	ld hl,BUF_45_032
0455E3 01 1D 00 00 5985*  	ld bc,29
0455E7 11 12 00 00 5986*  	ld de,18
0455EB DD 21 0A 02 5987*  	ld ix,522
       00          
0455F0 CD 68 B8 04 5988*  	call vdu_load_img
0455F4 C9          5989*  	ret
0455F5             5990*  
0455F5             5991*  ld_45_040:
0455F5 21 2B 60 04 5992*  	ld hl,F45_040
0455F9 22 ED B6 04 5993*  	ld (cur_filename),hl
0455FD 11 1A C3 04 5994*  	ld de,filedata
045601 01 00 00 01 5995*  	ld bc,65536
045605 3E 01       5996*  	ld a,mos_load
045607 5B CF       5997*  	RST.LIL 08h
045609 21 48 02 00 5998*  	ld hl,BUF_45_040
04560D 01 30 00 00 5999*  	ld bc,48
045611 11 21 00 00 6000*  	ld de,33
045615 DD 21 30 06 6001*  	ld ix,1584
       00          
04561A CD 68 B8 04 6002*  	call vdu_load_img
04561E C9          6003*  	ret
04561F             6004*  
04561F             6005*  ld_45_044:
04561F 21 3F 60 04 6006*  	ld hl,F45_044
045623 22 ED B6 04 6007*  	ld (cur_filename),hl
045627 11 1A C3 04 6008*  	ld de,filedata
04562B 01 00 00 01 6009*  	ld bc,65536
04562F 3E 01       6010*  	ld a,mos_load
045631 5B CF       6011*  	RST.LIL 08h
045633 21 49 02 00 6012*  	ld hl,BUF_45_044
045637 01 75 00 00 6013*  	ld bc,117
04563B 11 13 00 00 6014*  	ld de,19
04563F DD 21 AF 08 6015*  	ld ix,2223
       00          
045644 CD 68 B8 04 6016*  	call vdu_load_img
045648 C9          6017*  	ret
045649             6018*  
045649             6019*  ld_46_004:
045649 21 53 60 04 6020*  	ld hl,F46_004
04564D 22 ED B6 04 6021*  	ld (cur_filename),hl
045651 11 1A C3 04 6022*  	ld de,filedata
045655 01 00 00 01 6023*  	ld bc,65536
045659 3E 01       6024*  	ld a,mos_load
04565B 5B CF       6025*  	RST.LIL 08h
04565D 21 4A 02 00 6026*  	ld hl,BUF_46_004
045661 01 10 00 00 6027*  	ld bc,16
045665 11 08 00 00 6028*  	ld de,8
045669 DD 21 80 00 6029*  	ld ix,128
       00          
04566E CD 68 B8 04 6030*  	call vdu_load_img
045672 C9          6031*  	ret
045673             6032*  
045673             6033*  ld_46_020:
045673 21 67 60 04 6034*  	ld hl,F46_020
045677 22 ED B6 04 6035*  	ld (cur_filename),hl
04567B 11 1A C3 04 6036*  	ld de,filedata
04567F 01 00 00 01 6037*  	ld bc,65536
045683 3E 01       6038*  	ld a,mos_load
045685 5B CF       6039*  	RST.LIL 08h
045687 21 4B 02 00 6040*  	ld hl,BUF_46_020
04568B 01 14 00 00 6041*  	ld bc,20
04568F 11 0B 00 00 6042*  	ld de,11
045693 DD 21 DC 00 6043*  	ld ix,220
       00          
045698 CD 68 B8 04 6044*  	call vdu_load_img
04569C C9          6045*  	ret
04569D             6046*  
04569D             6047*  ld_46_032:
04569D 21 7B 60 04 6048*  	ld hl,F46_032
0456A1 22 ED B6 04 6049*  	ld (cur_filename),hl
0456A5 11 1A C3 04 6050*  	ld de,filedata
0456A9 01 00 00 01 6051*  	ld bc,65536
0456AD 3E 01       6052*  	ld a,mos_load
0456AF 5B CF       6053*  	RST.LIL 08h
0456B1 21 4C 02 00 6054*  	ld hl,BUF_46_032
0456B5 01 1D 00 00 6055*  	ld bc,29
0456B9 11 0F 00 00 6056*  	ld de,15
0456BD DD 21 B3 01 6057*  	ld ix,435
       00          
0456C2 CD 68 B8 04 6058*  	call vdu_load_img
0456C6 C9          6059*  	ret
0456C7             6060*  
0456C7             6061*  ld_46_040:
0456C7 21 8F 60 04 6062*  	ld hl,F46_040
0456CB 22 ED B6 04 6063*  	ld (cur_filename),hl
0456CF 11 1A C3 04 6064*  	ld de,filedata
0456D3 01 00 00 01 6065*  	ld bc,65536
0456D7 3E 01       6066*  	ld a,mos_load
0456D9 5B CF       6067*  	RST.LIL 08h
0456DB 21 4D 02 00 6068*  	ld hl,BUF_46_040
0456DF 01 30 00 00 6069*  	ld bc,48
0456E3 11 1B 00 00 6070*  	ld de,27
0456E7 DD 21 10 05 6071*  	ld ix,1296
       00          
0456EC CD 68 B8 04 6072*  	call vdu_load_img
0456F0 C9          6073*  	ret
0456F1             6074*  
0456F1             6075*  ld_46_044:
0456F1 21 A3 60 04 6076*  	ld hl,F46_044
0456F5 22 ED B6 04 6077*  	ld (cur_filename),hl
0456F9 11 1A C3 04 6078*  	ld de,filedata
0456FD 01 00 00 01 6079*  	ld bc,65536
045701 3E 01       6080*  	ld a,mos_load
045703 5B CF       6081*  	RST.LIL 08h
045705 21 4E 02 00 6082*  	ld hl,BUF_46_044
045709 01 51 00 00 6083*  	ld bc,81
04570D 11 01 00 00 6084*  	ld de,1
045711 DD 21 51 00 6085*  	ld ix,81
       00          
045716 CD 68 B8 04 6086*  	call vdu_load_img
04571A C9          6087*  	ret
04571B             6088*  
04571B             6089*  ld_47_004:
04571B 21 B7 60 04 6090*  	ld hl,F47_004
04571F 22 ED B6 04 6091*  	ld (cur_filename),hl
045723 11 1A C3 04 6092*  	ld de,filedata
045727 01 00 00 01 6093*  	ld bc,65536
04572B 3E 01       6094*  	ld a,mos_load
04572D 5B CF       6095*  	RST.LIL 08h
04572F 21 4F 02 00 6096*  	ld hl,BUF_47_004
045733 01 10 00 00 6097*  	ld bc,16
045737 11 09 00 00 6098*  	ld de,9
04573B DD 21 90 00 6099*  	ld ix,144
       00          
045740 CD 68 B8 04 6100*  	call vdu_load_img
045744 C9          6101*  	ret
045745             6102*  
045745             6103*  ld_47_020:
045745 21 CB 60 04 6104*  	ld hl,F47_020
045749 22 ED B6 04 6105*  	ld (cur_filename),hl
04574D 11 1A C3 04 6106*  	ld de,filedata
045751 01 00 00 01 6107*  	ld bc,65536
045755 3E 01       6108*  	ld a,mos_load
045757 5B CF       6109*  	RST.LIL 08h
045759 21 50 02 00 6110*  	ld hl,BUF_47_020
04575D 01 14 00 00 6111*  	ld bc,20
045761 11 0B 00 00 6112*  	ld de,11
045765 DD 21 DC 00 6113*  	ld ix,220
       00          
04576A CD 68 B8 04 6114*  	call vdu_load_img
04576E C9          6115*  	ret
04576F             6116*  
04576F             6117*  ld_47_032:
04576F 21 DF 60 04 6118*  	ld hl,F47_032
045773 22 ED B6 04 6119*  	ld (cur_filename),hl
045777 11 1A C3 04 6120*  	ld de,filedata
04577B 01 00 00 01 6121*  	ld bc,65536
04577F 3E 01       6122*  	ld a,mos_load
045781 5B CF       6123*  	RST.LIL 08h
045783 21 51 02 00 6124*  	ld hl,BUF_47_032
045787 01 1D 00 00 6125*  	ld bc,29
04578B 11 11 00 00 6126*  	ld de,17
04578F DD 21 ED 01 6127*  	ld ix,493
       00          
045794 CD 68 B8 04 6128*  	call vdu_load_img
045798 C9          6129*  	ret
045799             6130*  
045799             6131*  ld_47_040:
045799 21 F3 60 04 6132*  	ld hl,F47_040
04579D 22 ED B6 04 6133*  	ld (cur_filename),hl
0457A1 11 1A C3 04 6134*  	ld de,filedata
0457A5 01 00 00 01 6135*  	ld bc,65536
0457A9 3E 01       6136*  	ld a,mos_load
0457AB 5B CF       6137*  	RST.LIL 08h
0457AD 21 52 02 00 6138*  	ld hl,BUF_47_040
0457B1 01 30 00 00 6139*  	ld bc,48
0457B5 11 1B 00 00 6140*  	ld de,27
0457B9 DD 21 10 05 6141*  	ld ix,1296
       00          
0457BE CD 68 B8 04 6142*  	call vdu_load_img
0457C2 C9          6143*  	ret
0457C3             6144*  
0457C3             6145*  ld_47_044:
0457C3 21 07 61 04 6146*  	ld hl,F47_044
0457C7 22 ED B6 04 6147*  	ld (cur_filename),hl
0457CB 11 1A C3 04 6148*  	ld de,filedata
0457CF 01 00 00 01 6149*  	ld bc,65536
0457D3 3E 01       6150*  	ld a,mos_load
0457D5 5B CF       6151*  	RST.LIL 08h
0457D7 21 53 02 00 6152*  	ld hl,BUF_47_044
0457DB 01 1B 00 00 6153*  	ld bc,27
0457DF 11 0A 00 00 6154*  	ld de,10
0457E3 DD 21 0E 01 6155*  	ld ix,270
       00          
0457E8 CD 68 B8 04 6156*  	call vdu_load_img
0457EC C9          6157*  	ret
0457ED             6158*  
0457ED             6159*  ld_48_004:
0457ED 21 1B 61 04 6160*  	ld hl,F48_004
0457F1 22 ED B6 04 6161*  	ld (cur_filename),hl
0457F5 11 1A C3 04 6162*  	ld de,filedata
0457F9 01 00 00 01 6163*  	ld bc,65536
0457FD 3E 01       6164*  	ld a,mos_load
0457FF 5B CF       6165*  	RST.LIL 08h
045801 21 54 02 00 6166*  	ld hl,BUF_48_004
045805 01 12 00 00 6167*  	ld bc,18
045809 11 07 00 00 6168*  	ld de,7
04580D DD 21 7E 00 6169*  	ld ix,126
       00          
045812 CD 68 B8 04 6170*  	call vdu_load_img
045816 C9          6171*  	ret
045817             6172*  
045817             6173*  ld_48_020:
045817 21 2F 61 04 6174*  	ld hl,F48_020
04581B 22 ED B6 04 6175*  	ld (cur_filename),hl
04581F 11 1A C3 04 6176*  	ld de,filedata
045823 01 00 00 01 6177*  	ld bc,65536
045827 3E 01       6178*  	ld a,mos_load
045829 5B CF       6179*  	RST.LIL 08h
04582B 21 55 02 00 6180*  	ld hl,BUF_48_020
04582F 01 17 00 00 6181*  	ld bc,23
045833 11 0A 00 00 6182*  	ld de,10
045837 DD 21 E6 00 6183*  	ld ix,230
       00          
04583C CD 68 B8 04 6184*  	call vdu_load_img
045840 C9          6185*  	ret
045841             6186*  
045841             6187*  ld_48_032:
045841 21 43 61 04 6188*  	ld hl,F48_032
045845 22 ED B6 04 6189*  	ld (cur_filename),hl
045849 11 1A C3 04 6190*  	ld de,filedata
04584D 01 00 00 01 6191*  	ld bc,65536
045851 3E 01       6192*  	ld a,mos_load
045853 5B CF       6193*  	RST.LIL 08h
045855 21 56 02 00 6194*  	ld hl,BUF_48_032
045859 01 20 00 00 6195*  	ld bc,32
04585D 11 0D 00 00 6196*  	ld de,13
045861 DD 21 A0 01 6197*  	ld ix,416
       00          
045866 CD 68 B8 04 6198*  	call vdu_load_img
04586A C9          6199*  	ret
04586B             6200*  
04586B             6201*  ld_48_040:
04586B 21 57 61 04 6202*  	ld hl,F48_040
04586F 22 ED B6 04 6203*  	ld (cur_filename),hl
045873 11 1A C3 04 6204*  	ld de,filedata
045877 01 00 00 01 6205*  	ld bc,65536
04587B 3E 01       6206*  	ld a,mos_load
04587D 5B CF       6207*  	RST.LIL 08h
04587F 21 57 02 00 6208*  	ld hl,BUF_48_040
045883 01 35 00 00 6209*  	ld bc,53
045887 11 18 00 00 6210*  	ld de,24
04588B DD 21 F8 04 6211*  	ld ix,1272
       00          
045890 CD 68 B8 04 6212*  	call vdu_load_img
045894 C9          6213*  	ret
045895             6214*  
045895             6215*  ld_48_044:
045895 21 6B 61 04 6216*  	ld hl,F48_044
045899 22 ED B6 04 6217*  	ld (cur_filename),hl
04589D 11 1A C3 04 6218*  	ld de,filedata
0458A1 01 00 00 01 6219*  	ld bc,65536
0458A5 3E 01       6220*  	ld a,mos_load
0458A7 5B CF       6221*  	RST.LIL 08h
0458A9 21 58 02 00 6222*  	ld hl,BUF_48_044
0458AD 01 01 00 00 6223*  	ld bc,1
0458B1 11 01 00 00 6224*  	ld de,1
0458B5 DD 21 01 00 6225*  	ld ix,1
       00          
0458BA CD 68 B8 04 6226*  	call vdu_load_img
0458BE C9          6227*  	ret
0458BF             6228*  
0458BF             6229*  ld_49_004:
0458BF 21 7F 61 04 6230*  	ld hl,F49_004
0458C3 22 ED B6 04 6231*  	ld (cur_filename),hl
0458C7 11 1A C3 04 6232*  	ld de,filedata
0458CB 01 00 00 01 6233*  	ld bc,65536
0458CF 3E 01       6234*  	ld a,mos_load
0458D1 5B CF       6235*  	RST.LIL 08h
0458D3 21 59 02 00 6236*  	ld hl,BUF_49_004
0458D7 01 0E 00 00 6237*  	ld bc,14
0458DB 11 06 00 00 6238*  	ld de,6
0458DF DD 21 54 00 6239*  	ld ix,84
       00          
0458E4 CD 68 B8 04 6240*  	call vdu_load_img
0458E8 C9          6241*  	ret
0458E9             6242*  
0458E9             6243*  ld_49_020:
0458E9 21 93 61 04 6244*  	ld hl,F49_020
0458ED 22 ED B6 04 6245*  	ld (cur_filename),hl
0458F1 11 1A C3 04 6246*  	ld de,filedata
0458F5 01 00 00 01 6247*  	ld bc,65536
0458F9 3E 01       6248*  	ld a,mos_load
0458FB 5B CF       6249*  	RST.LIL 08h
0458FD 21 5A 02 00 6250*  	ld hl,BUF_49_020
045901 01 12 00 00 6251*  	ld bc,18
045905 11 08 00 00 6252*  	ld de,8
045909 DD 21 90 00 6253*  	ld ix,144
       00          
04590E CD 68 B8 04 6254*  	call vdu_load_img
045912 C9          6255*  	ret
045913             6256*  
045913             6257*  ld_49_032:
045913 21 A7 61 04 6258*  	ld hl,F49_032
045917 22 ED B6 04 6259*  	ld (cur_filename),hl
04591B 11 1A C3 04 6260*  	ld de,filedata
04591F 01 00 00 01 6261*  	ld bc,65536
045923 3E 01       6262*  	ld a,mos_load
045925 5B CF       6263*  	RST.LIL 08h
045927 21 5B 02 00 6264*  	ld hl,BUF_49_032
04592B 01 1A 00 00 6265*  	ld bc,26
04592F 11 0B 00 00 6266*  	ld de,11
045933 DD 21 1E 01 6267*  	ld ix,286
       00          
045938 CD 68 B8 04 6268*  	call vdu_load_img
04593C C9          6269*  	ret
04593D             6270*  
04593D             6271*  ld_49_040:
04593D 21 BB 61 04 6272*  	ld hl,F49_040
045941 22 ED B6 04 6273*  	ld (cur_filename),hl
045945 11 1A C3 04 6274*  	ld de,filedata
045949 01 00 00 01 6275*  	ld bc,65536
04594D 3E 01       6276*  	ld a,mos_load
04594F 5B CF       6277*  	RST.LIL 08h
045951 21 5C 02 00 6278*  	ld hl,BUF_49_040
045955 01 2B 00 00 6279*  	ld bc,43
045959 11 12 00 00 6280*  	ld de,18
04595D DD 21 06 03 6281*  	ld ix,774
       00          
045962 CD 68 B8 04 6282*  	call vdu_load_img
045966 C9          6283*  	ret
045967             6284*  
045967             6285*  ld_49_044:
045967 21 CF 61 04 6286*  	ld hl,F49_044
04596B 22 ED B6 04 6287*  	ld (cur_filename),hl
04596F 11 1A C3 04 6288*  	ld de,filedata
045973 01 00 00 01 6289*  	ld bc,65536
045977 3E 01       6290*  	ld a,mos_load
045979 5B CF       6291*  	RST.LIL 08h
04597B 21 5D 02 00 6292*  	ld hl,BUF_49_044
04597F 01 01 00 00 6293*  	ld bc,1
045983 11 01 00 00 6294*  	ld de,1
045987 DD 21 01 00 6295*  	ld ix,1
       00          
04598C CD 68 B8 04 6296*  	call vdu_load_img
045990 C9          6297*  	ret
045991             6298*  
045991             6299*  ld_50_004:
045991 21 E3 61 04 6300*  	ld hl,F50_004
045995 22 ED B6 04 6301*  	ld (cur_filename),hl
045999 11 1A C3 04 6302*  	ld de,filedata
04599D 01 00 00 01 6303*  	ld bc,65536
0459A1 3E 01       6304*  	ld a,mos_load
0459A3 5B CF       6305*  	RST.LIL 08h
0459A5 21 5E 02 00 6306*  	ld hl,BUF_50_004
0459A9 01 0A 00 00 6307*  	ld bc,10
0459AD 11 0D 00 00 6308*  	ld de,13
0459B1 DD 21 82 00 6309*  	ld ix,130
       00          
0459B6 CD 68 B8 04 6310*  	call vdu_load_img
0459BA C9          6311*  	ret
0459BB             6312*  
0459BB             6313*  ld_50_020:
0459BB 21 F7 61 04 6314*  	ld hl,F50_020
0459BF 22 ED B6 04 6315*  	ld (cur_filename),hl
0459C3 11 1A C3 04 6316*  	ld de,filedata
0459C7 01 00 00 01 6317*  	ld bc,65536
0459CB 3E 01       6318*  	ld a,mos_load
0459CD 5B CF       6319*  	RST.LIL 08h
0459CF 21 5F 02 00 6320*  	ld hl,BUF_50_020
0459D3 01 0D 00 00 6321*  	ld bc,13
0459D7 11 11 00 00 6322*  	ld de,17
0459DB DD 21 DD 00 6323*  	ld ix,221
       00          
0459E0 CD 68 B8 04 6324*  	call vdu_load_img
0459E4 C9          6325*  	ret
0459E5             6326*  
0459E5             6327*  ld_50_032:
0459E5 21 0B 62 04 6328*  	ld hl,F50_032
0459E9 22 ED B6 04 6329*  	ld (cur_filename),hl
0459ED 11 1A C3 04 6330*  	ld de,filedata
0459F1 01 00 00 01 6331*  	ld bc,65536
0459F5 3E 01       6332*  	ld a,mos_load
0459F7 5B CF       6333*  	RST.LIL 08h
0459F9 21 60 02 00 6334*  	ld hl,BUF_50_032
0459FD 01 12 00 00 6335*  	ld bc,18
045A01 11 1A 00 00 6336*  	ld de,26
045A05 DD 21 D4 01 6337*  	ld ix,468
       00          
045A0A CD 68 B8 04 6338*  	call vdu_load_img
045A0E C9          6339*  	ret
045A0F             6340*  
045A0F             6341*  ld_50_040:
045A0F 21 1F 62 04 6342*  	ld hl,F50_040
045A13 22 ED B6 04 6343*  	ld (cur_filename),hl
045A17 11 1A C3 04 6344*  	ld de,filedata
045A1B 01 00 00 01 6345*  	ld bc,65536
045A1F 3E 01       6346*  	ld a,mos_load
045A21 5B CF       6347*  	RST.LIL 08h
045A23 21 61 02 00 6348*  	ld hl,BUF_50_040
045A27 01 1E 00 00 6349*  	ld bc,30
045A2B 11 2A 00 00 6350*  	ld de,42
045A2F DD 21 EC 04 6351*  	ld ix,1260
       00          
045A34 CD 68 B8 04 6352*  	call vdu_load_img
045A38 C9          6353*  	ret
045A39             6354*  
045A39             6355*  ld_50_044:
045A39 21 33 62 04 6356*  	ld hl,F50_044
045A3D 22 ED B6 04 6357*  	ld (cur_filename),hl
045A41 11 1A C3 04 6358*  	ld de,filedata
045A45 01 00 00 01 6359*  	ld bc,65536
045A49 3E 01       6360*  	ld a,mos_load
045A4B 5B CF       6361*  	RST.LIL 08h
045A4D 21 62 02 00 6362*  	ld hl,BUF_50_044
045A51 01 46 00 00 6363*  	ld bc,70
045A55 11 32 00 00 6364*  	ld de,50
045A59 DD 21 AC 0D 6365*  	ld ix,3500
       00          
045A5E CD 68 B8 04 6366*  	call vdu_load_img
045A62 C9          6367*  	ret
045A63             6368*  
045A63             6369*  ld_51_004:
045A63 21 47 62 04 6370*  	ld hl,F51_004
045A67 22 ED B6 04 6371*  	ld (cur_filename),hl
045A6B 11 1A C3 04 6372*  	ld de,filedata
045A6F 01 00 00 01 6373*  	ld bc,65536
045A73 3E 01       6374*  	ld a,mos_load
045A75 5B CF       6375*  	RST.LIL 08h
045A77 21 63 02 00 6376*  	ld hl,BUF_51_004
045A7B 01 11 00 00 6377*  	ld bc,17
045A7F 11 17 00 00 6378*  	ld de,23
045A83 DD 21 87 01 6379*  	ld ix,391
       00          
045A88 CD 68 B8 04 6380*  	call vdu_load_img
045A8C C9          6381*  	ret
045A8D             6382*  
045A8D             6383*  ld_51_020:
045A8D 21 5B 62 04 6384*  	ld hl,F51_020
045A91 22 ED B6 04 6385*  	ld (cur_filename),hl
045A95 11 1A C3 04 6386*  	ld de,filedata
045A99 01 00 00 01 6387*  	ld bc,65536
045A9D 3E 01       6388*  	ld a,mos_load
045A9F 5B CF       6389*  	RST.LIL 08h
045AA1 21 64 02 00 6390*  	ld hl,BUF_51_020
045AA5 01 15 00 00 6391*  	ld bc,21
045AA9 11 1D 00 00 6392*  	ld de,29
045AAD DD 21 61 02 6393*  	ld ix,609
       00          
045AB2 CD 68 B8 04 6394*  	call vdu_load_img
045AB6 C9          6395*  	ret
045AB7             6396*  
045AB7             6397*  ld_51_032:
045AB7 21 6F 62 04 6398*  	ld hl,F51_032
045ABB 22 ED B6 04 6399*  	ld (cur_filename),hl
045ABF 11 1A C3 04 6400*  	ld de,filedata
045AC3 01 00 00 01 6401*  	ld bc,65536
045AC7 3E 01       6402*  	ld a,mos_load
045AC9 5B CF       6403*  	RST.LIL 08h
045ACB 21 65 02 00 6404*  	ld hl,BUF_51_032
045ACF 01 1E 00 00 6405*  	ld bc,30
045AD3 11 2A 00 00 6406*  	ld de,42
045AD7 DD 21 EC 04 6407*  	ld ix,1260
       00          
045ADC CD 68 B8 04 6408*  	call vdu_load_img
045AE0 C9          6409*  	ret
045AE1             6410*  
045AE1             6411*  ld_51_040:
045AE1 21 83 62 04 6412*  	ld hl,F51_040
045AE5 22 ED B6 04 6413*  	ld (cur_filename),hl
045AE9 11 1A C3 04 6414*  	ld de,filedata
045AED 01 00 00 01 6415*  	ld bc,65536
045AF1 3E 01       6416*  	ld a,mos_load
045AF3 5B CF       6417*  	RST.LIL 08h
045AF5 21 66 02 00 6418*  	ld hl,BUF_51_040
045AF9 01 31 00 00 6419*  	ld bc,49
045AFD 11 46 00 00 6420*  	ld de,70
045B01 DD 21 66 0D 6421*  	ld ix,3430
       00          
045B06 CD 68 B8 04 6422*  	call vdu_load_img
045B0A C9          6423*  	ret
045B0B             6424*  
045B0B             6425*  ld_51_044:
045B0B 21 97 62 04 6426*  	ld hl,F51_044
045B0F 22 ED B6 04 6427*  	ld (cur_filename),hl
045B13 11 1A C3 04 6428*  	ld de,filedata
045B17 01 00 00 01 6429*  	ld bc,65536
045B1B 3E 01       6430*  	ld a,mos_load
045B1D 5B CF       6431*  	RST.LIL 08h
045B1F 21 67 02 00 6432*  	ld hl,BUF_51_044
045B23 01 92 00 00 6433*  	ld bc,146
045B27 11 83 00 00 6434*  	ld de,131
045B2B DD 21 B6 4A 6435*  	ld ix,19126
       00          
045B30 CD 68 B8 04 6436*  	call vdu_load_img
045B34 C9          6437*  	ret
045B35             6438*  
045B35             6439*  ld_52_004:
045B35 21 AB 62 04 6440*  	ld hl,F52_004
045B39 22 ED B6 04 6441*  	ld (cur_filename),hl
045B3D 11 1A C3 04 6442*  	ld de,filedata
045B41 01 00 00 01 6443*  	ld bc,65536
045B45 3E 01       6444*  	ld a,mos_load
045B47 5B CF       6445*  	RST.LIL 08h
045B49 21 68 02 00 6446*  	ld hl,BUF_52_004
045B4D 01 0E 00 00 6447*  	ld bc,14
045B51 11 17 00 00 6448*  	ld de,23
045B55 DD 21 42 01 6449*  	ld ix,322
       00          
045B5A CD 68 B8 04 6450*  	call vdu_load_img
045B5E C9          6451*  	ret
045B5F             6452*  
045B5F             6453*  ld_52_020:
045B5F 21 BF 62 04 6454*  	ld hl,F52_020
045B63 22 ED B6 04 6455*  	ld (cur_filename),hl
045B67 11 1A C3 04 6456*  	ld de,filedata
045B6B 01 00 00 01 6457*  	ld bc,65536
045B6F 3E 01       6458*  	ld a,mos_load
045B71 5B CF       6459*  	RST.LIL 08h
045B73 21 69 02 00 6460*  	ld hl,BUF_52_020
045B77 01 11 00 00 6461*  	ld bc,17
045B7B 11 1D 00 00 6462*  	ld de,29
045B7F DD 21 ED 01 6463*  	ld ix,493
       00          
045B84 CD 68 B8 04 6464*  	call vdu_load_img
045B88 C9          6465*  	ret
045B89             6466*  
045B89             6467*  ld_52_032:
045B89 21 D3 62 04 6468*  	ld hl,F52_032
045B8D 22 ED B6 04 6469*  	ld (cur_filename),hl
045B91 11 1A C3 04 6470*  	ld de,filedata
045B95 01 00 00 01 6471*  	ld bc,65536
045B99 3E 01       6472*  	ld a,mos_load
045B9B 5B CF       6473*  	RST.LIL 08h
045B9D 21 6A 02 00 6474*  	ld hl,BUF_52_032
045BA1 01 19 00 00 6475*  	ld bc,25
045BA5 11 2A 00 00 6476*  	ld de,42
045BA9 DD 21 1A 04 6477*  	ld ix,1050
       00          
045BAE CD 68 B8 04 6478*  	call vdu_load_img
045BB2 C9          6479*  	ret
045BB3             6480*  
045BB3             6481*  ld_52_040:
045BB3 21 E7 62 04 6482*  	ld hl,F52_040
045BB7 22 ED B6 04 6483*  	ld (cur_filename),hl
045BBB 11 1A C3 04 6484*  	ld de,filedata
045BBF 01 00 00 01 6485*  	ld bc,65536
045BC3 3E 01       6486*  	ld a,mos_load
045BC5 5B CF       6487*  	RST.LIL 08h
045BC7 21 6B 02 00 6488*  	ld hl,BUF_52_040
045BCB 01 28 00 00 6489*  	ld bc,40
045BCF 11 46 00 00 6490*  	ld de,70
045BD3 DD 21 F0 0A 6491*  	ld ix,2800
       00          
045BD8 CD 68 B8 04 6492*  	call vdu_load_img
045BDC C9          6493*  	ret
045BDD             6494*  
045BDD             6495*  ld_52_044:
045BDD 21 FB 62 04 6496*  	ld hl,F52_044
045BE1 22 ED B6 04 6497*  	ld (cur_filename),hl
045BE5 11 1A C3 04 6498*  	ld de,filedata
045BE9 01 00 00 01 6499*  	ld bc,65536
045BED 3E 01       6500*  	ld a,mos_load
045BEF 5B CF       6501*  	RST.LIL 08h
045BF1 21 6C 02 00 6502*  	ld hl,BUF_52_044
045BF5 01 78 00 00 6503*  	ld bc,120
045BF9 11 83 00 00 6504*  	ld de,131
045BFD DD 21 68 3D 6505*  	ld ix,15720
       00          
045C02 CD 68 B8 04 6506*  	call vdu_load_img
045C06 C9          6507*  	ret
045C07             6508*  
045C07             6509*  ; File name lookups:
045C07 70 61 6E 65 6510*  F20_004: db "panels/20_004.rgba2",0
       6C 73 2F 32 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C1B 70 61 6E 65 6511*  F20_020: db "panels/20_020.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C2F 70 61 6E 65 6512*  F20_032: db "panels/20_032.rgba2",0
       6C 73 2F 32 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045C43 70 61 6E 65 6513*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045C57 70 61 6E 65 6514*  F20_044: db "panels/20_044.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045C6B 70 61 6E 65 6515*  F21_004: db "panels/21_004.rgba2",0
       6C 73 2F 32 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C7F 70 61 6E 65 6516*  F21_020: db "panels/21_020.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C93 70 61 6E 65 6517*  F21_032: db "panels/21_032.rgba2",0
       6C 73 2F 32 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045CA7 70 61 6E 65 6518*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045CBB 70 61 6E 65 6519*  F21_044: db "panels/21_044.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045CCF 70 61 6E 65 6520*  F22_004: db "panels/22_004.rgba2",0
       6C 73 2F 32 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045CE3 70 61 6E 65 6521*  F22_020: db "panels/22_020.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045CF7 70 61 6E 65 6522*  F22_032: db "panels/22_032.rgba2",0
       6C 73 2F 32 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D0B 70 61 6E 65 6523*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D1F 70 61 6E 65 6524*  F22_044: db "panels/22_044.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D33 70 61 6E 65 6525*  F23_004: db "panels/23_004.rgba2",0
       6C 73 2F 32 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045D47 70 61 6E 65 6526*  F23_020: db "panels/23_020.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045D5B 70 61 6E 65 6527*  F23_032: db "panels/23_032.rgba2",0
       6C 73 2F 32 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D6F 70 61 6E 65 6528*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D83 70 61 6E 65 6529*  F23_044: db "panels/23_044.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D97 70 61 6E 65 6530*  F24_004: db "panels/24_004.rgba2",0
       6C 73 2F 32 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045DAB 70 61 6E 65 6531*  F24_020: db "panels/24_020.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045DBF 70 61 6E 65 6532*  F24_032: db "panels/24_032.rgba2",0
       6C 73 2F 32 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045DD3 70 61 6E 65 6533*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045DE7 70 61 6E 65 6534*  F24_044: db "panels/24_044.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045DFB 70 61 6E 65 6535*  F40_004: db "panels/40_004.rgba2",0
       6C 73 2F 34 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E0F 70 61 6E 65 6536*  F40_020: db "panels/40_020.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E23 70 61 6E 65 6537*  F40_032: db "panels/40_032.rgba2",0
       6C 73 2F 34 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E37 70 61 6E 65 6538*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E4B 70 61 6E 65 6539*  F40_044: db "panels/40_044.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E5F 70 61 6E 65 6540*  F41_004: db "panels/41_004.rgba2",0
       6C 73 2F 34 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E73 70 61 6E 65 6541*  F41_020: db "panels/41_020.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E87 70 61 6E 65 6542*  F41_032: db "panels/41_032.rgba2",0
       6C 73 2F 34 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E9B 70 61 6E 65 6543*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045EAF 70 61 6E 65 6544*  F41_044: db "panels/41_044.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045EC3 70 61 6E 65 6545*  F42_004: db "panels/42_004.rgba2",0
       6C 73 2F 34 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045ED7 70 61 6E 65 6546*  F42_020: db "panels/42_020.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045EEB 70 61 6E 65 6547*  F42_032: db "panels/42_032.rgba2",0
       6C 73 2F 34 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045EFF 70 61 6E 65 6548*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F13 70 61 6E 65 6549*  F42_044: db "panels/42_044.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F27 70 61 6E 65 6550*  F43_004: db "panels/43_004.rgba2",0
       6C 73 2F 34 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F3B 70 61 6E 65 6551*  F43_020: db "panels/43_020.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F4F 70 61 6E 65 6552*  F43_032: db "panels/43_032.rgba2",0
       6C 73 2F 34 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F63 70 61 6E 65 6553*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F77 70 61 6E 65 6554*  F43_044: db "panels/43_044.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F8B 70 61 6E 65 6555*  F44_004: db "panels/44_004.rgba2",0
       6C 73 2F 34 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F9F 70 61 6E 65 6556*  F44_020: db "panels/44_020.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045FB3 70 61 6E 65 6557*  F44_032: db "panels/44_032.rgba2",0
       6C 73 2F 34 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045FC7 70 61 6E 65 6558*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045FDB 70 61 6E 65 6559*  F44_044: db "panels/44_044.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045FEF 70 61 6E 65 6560*  F45_004: db "panels/45_004.rgba2",0
       6C 73 2F 34 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046003 70 61 6E 65 6561*  F45_020: db "panels/45_020.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046017 70 61 6E 65 6562*  F45_032: db "panels/45_032.rgba2",0
       6C 73 2F 34 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04602B 70 61 6E 65 6563*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04603F 70 61 6E 65 6564*  F45_044: db "panels/45_044.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046053 70 61 6E 65 6565*  F46_004: db "panels/46_004.rgba2",0
       6C 73 2F 34 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046067 70 61 6E 65 6566*  F46_020: db "panels/46_020.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04607B 70 61 6E 65 6567*  F46_032: db "panels/46_032.rgba2",0
       6C 73 2F 34 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04608F 70 61 6E 65 6568*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0460A3 70 61 6E 65 6569*  F46_044: db "panels/46_044.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0460B7 70 61 6E 65 6570*  F47_004: db "panels/47_004.rgba2",0
       6C 73 2F 34 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0460CB 70 61 6E 65 6571*  F47_020: db "panels/47_020.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0460DF 70 61 6E 65 6572*  F47_032: db "panels/47_032.rgba2",0
       6C 73 2F 34 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0460F3 70 61 6E 65 6573*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046107 70 61 6E 65 6574*  F47_044: db "panels/47_044.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04611B 70 61 6E 65 6575*  F48_004: db "panels/48_004.rgba2",0
       6C 73 2F 34 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04612F 70 61 6E 65 6576*  F48_020: db "panels/48_020.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046143 70 61 6E 65 6577*  F48_032: db "panels/48_032.rgba2",0
       6C 73 2F 34 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046157 70 61 6E 65 6578*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04616B 70 61 6E 65 6579*  F48_044: db "panels/48_044.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04617F 70 61 6E 65 6580*  F49_004: db "panels/49_004.rgba2",0
       6C 73 2F 34 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046193 70 61 6E 65 6581*  F49_020: db "panels/49_020.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0461A7 70 61 6E 65 6582*  F49_032: db "panels/49_032.rgba2",0
       6C 73 2F 34 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0461BB 70 61 6E 65 6583*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0461CF 70 61 6E 65 6584*  F49_044: db "panels/49_044.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0461E3 70 61 6E 65 6585*  F50_004: db "panels/50_004.rgba2",0
       6C 73 2F 35 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0461F7 70 61 6E 65 6586*  F50_020: db "panels/50_020.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04620B 70 61 6E 65 6587*  F50_032: db "panels/50_032.rgba2",0
       6C 73 2F 35 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04621F 70 61 6E 65 6588*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046233 70 61 6E 65 6589*  F50_044: db "panels/50_044.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046247 70 61 6E 65 6590*  F51_004: db "panels/51_004.rgba2",0
       6C 73 2F 35 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04625B 70 61 6E 65 6591*  F51_020: db "panels/51_020.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04626F 70 61 6E 65 6592*  F51_032: db "panels/51_032.rgba2",0
       6C 73 2F 35 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046283 70 61 6E 65 6593*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046297 70 61 6E 65 6594*  F51_044: db "panels/51_044.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0462AB 70 61 6E 65 6595*  F52_004: db "panels/52_004.rgba2",0
       6C 73 2F 35 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0462BF 70 61 6E 65 6596*  F52_020: db "panels/52_020.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0462D3 70 61 6E 65 6597*  F52_032: db "panels/52_032.rgba2",0
       6C 73 2F 35 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0462E7 70 61 6E 65 6598*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0462FB 70 61 6E 65 6599*  F52_044: db "panels/52_044.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04630F             6600*  
04630F             6601*  ; dws buffer ids:
04630F             6602*  BUF_DW_6: equ 0x026D
04630F             6603*  BUF_DW_7: equ 0x026E
04630F             6604*  BUF_DW_8: equ 0x026F
04630F             6605*  BUF_DW_9: equ 0x0270
04630F             6606*  BUF_DW_10: equ 0x0271
04630F             6607*  BUF_DW_11: equ 0x0272
04630F             6608*  BUF_DW_12: equ 0x0273
04630F             6609*  BUF_DW_13: equ 0x0274
04630F             6610*  BUF_DW_14: equ 0x0275
04630F             6611*  
04630F             6612*  dws_num_panels: equ 9
04630F             6613*  
04630F             6614*  ; dws buffer id reverse lookup:
04630F             6615*  dws_buffer_id_lut:
04630F 6D 02 00    6616*  	dl BUF_DW_6
046312 6E 02 00    6617*  	dl BUF_DW_7
046315 6F 02 00    6618*  	dl BUF_DW_8
046318 70 02 00    6619*  	dl BUF_DW_9
04631B 71 02 00    6620*  	dl BUF_DW_10
04631E 72 02 00    6621*  	dl BUF_DW_11
046321 73 02 00    6622*  	dl BUF_DW_12
046324 74 02 00    6623*  	dl BUF_DW_13
046327 75 02 00    6624*  	dl BUF_DW_14
04632A             6625*  
04632A             6626*  ; dws load routines jump table:
04632A             6627*  dws_load_panels_table:
04632A 45 63 04    6628*  	dl ld_dw_6
04632D 6F 63 04    6629*  	dl ld_dw_7
046330 99 63 04    6630*  	dl ld_dw_8
046333 C3 63 04    6631*  	dl ld_dw_9
046336 ED 63 04    6632*  	dl ld_dw_10
046339 17 64 04    6633*  	dl ld_dw_11
04633C 41 64 04    6634*  	dl ld_dw_12
04633F 6B 64 04    6635*  	dl ld_dw_13
046342 95 64 04    6636*  	dl ld_dw_14
046345             6637*  
046345             6638*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
046345             6639*  
046345             6640*  ld_dw_6:
046345 21 BF 64 04 6641*  	ld hl,Fdw_6
046349 22 ED B6 04 6642*  	ld (cur_filename),hl
04634D 11 1A C3 04 6643*  	ld de,filedata
046351 01 00 00 01 6644*  	ld bc,65536
046355 3E 01       6645*  	ld a,mos_load
046357 5B CF       6646*  	RST.LIL 08h
046359 21 6D 02 00 6647*  	ld hl,BUF_DW_6
04635D 01 40 01 00 6648*  	ld bc,320
046361 11 1E 00 00 6649*  	ld de,30
046365 DD 21 80 25 6650*  	ld ix,9600
       00          
04636A CD 68 B8 04 6651*  	call vdu_load_img
04636E C9          6652*  	ret
04636F             6653*  
04636F             6654*  ld_dw_7:
04636F 21 CE 64 04 6655*  	ld hl,Fdw_7
046373 22 ED B6 04 6656*  	ld (cur_filename),hl
046377 11 1A C3 04 6657*  	ld de,filedata
04637B 01 00 00 01 6658*  	ld bc,65536
04637F 3E 01       6659*  	ld a,mos_load
046381 5B CF       6660*  	RST.LIL 08h
046383 21 6E 02 00 6661*  	ld hl,BUF_DW_7
046387 01 40 01 00 6662*  	ld bc,320
04638B 11 18 00 00 6663*  	ld de,24
04638F DD 21 00 1E 6664*  	ld ix,7680
       00          
046394 CD 68 B8 04 6665*  	call vdu_load_img
046398 C9          6666*  	ret
046399             6667*  
046399             6668*  ld_dw_8:
046399 21 DD 64 04 6669*  	ld hl,Fdw_8
04639D 22 ED B6 04 6670*  	ld (cur_filename),hl
0463A1 11 1A C3 04 6671*  	ld de,filedata
0463A5 01 00 00 01 6672*  	ld bc,65536
0463A9 3E 01       6673*  	ld a,mos_load
0463AB 5B CF       6674*  	RST.LIL 08h
0463AD 21 6F 02 00 6675*  	ld hl,BUF_DW_8
0463B1 01 40 01 00 6676*  	ld bc,320
0463B5 11 12 00 00 6677*  	ld de,18
0463B9 DD 21 80 16 6678*  	ld ix,5760
       00          
0463BE CD 68 B8 04 6679*  	call vdu_load_img
0463C2 C9          6680*  	ret
0463C3             6681*  
0463C3             6682*  ld_dw_9:
0463C3 21 EC 64 04 6683*  	ld hl,Fdw_9
0463C7 22 ED B6 04 6684*  	ld (cur_filename),hl
0463CB 11 1A C3 04 6685*  	ld de,filedata
0463CF 01 00 00 01 6686*  	ld bc,65536
0463D3 3E 01       6687*  	ld a,mos_load
0463D5 5B CF       6688*  	RST.LIL 08h
0463D7 21 70 02 00 6689*  	ld hl,BUF_DW_9
0463DB 01 40 01 00 6690*  	ld bc,320
0463DF 11 10 00 00 6691*  	ld de,16
0463E3 DD 21 00 14 6692*  	ld ix,5120
       00          
0463E8 CD 68 B8 04 6693*  	call vdu_load_img
0463EC C9          6694*  	ret
0463ED             6695*  
0463ED             6696*  ld_dw_10:
0463ED 21 FB 64 04 6697*  	ld hl,Fdw_10
0463F1 22 ED B6 04 6698*  	ld (cur_filename),hl
0463F5 11 1A C3 04 6699*  	ld de,filedata
0463F9 01 00 00 01 6700*  	ld bc,65536
0463FD 3E 01       6701*  	ld a,mos_load
0463FF 5B CF       6702*  	RST.LIL 08h
046401 21 71 02 00 6703*  	ld hl,BUF_DW_10
046405 01 40 01 00 6704*  	ld bc,320
046409 11 10 00 00 6705*  	ld de,16
04640D DD 21 00 14 6706*  	ld ix,5120
       00          
046412 CD 68 B8 04 6707*  	call vdu_load_img
046416 C9          6708*  	ret
046417             6709*  
046417             6710*  ld_dw_11:
046417 21 0B 65 04 6711*  	ld hl,Fdw_11
04641B 22 ED B6 04 6712*  	ld (cur_filename),hl
04641F 11 1A C3 04 6713*  	ld de,filedata
046423 01 00 00 01 6714*  	ld bc,65536
046427 3E 01       6715*  	ld a,mos_load
046429 5B CF       6716*  	RST.LIL 08h
04642B 21 72 02 00 6717*  	ld hl,BUF_DW_11
04642F 01 40 01 00 6718*  	ld bc,320
046433 11 0E 00 00 6719*  	ld de,14
046437 DD 21 80 11 6720*  	ld ix,4480
       00          
04643C CD 68 B8 04 6721*  	call vdu_load_img
046440 C9          6722*  	ret
046441             6723*  
046441             6724*  ld_dw_12:
046441 21 1B 65 04 6725*  	ld hl,Fdw_12
046445 22 ED B6 04 6726*  	ld (cur_filename),hl
046449 11 1A C3 04 6727*  	ld de,filedata
04644D 01 00 00 01 6728*  	ld bc,65536
046451 3E 01       6729*  	ld a,mos_load
046453 5B CF       6730*  	RST.LIL 08h
046455 21 73 02 00 6731*  	ld hl,BUF_DW_12
046459 01 40 01 00 6732*  	ld bc,320
04645D 11 0C 00 00 6733*  	ld de,12
046461 DD 21 00 0F 6734*  	ld ix,3840
       00          
046466 CD 68 B8 04 6735*  	call vdu_load_img
04646A C9          6736*  	ret
04646B             6737*  
04646B             6738*  ld_dw_13:
04646B 21 2B 65 04 6739*  	ld hl,Fdw_13
04646F 22 ED B6 04 6740*  	ld (cur_filename),hl
046473 11 1A C3 04 6741*  	ld de,filedata
046477 01 00 00 01 6742*  	ld bc,65536
04647B 3E 01       6743*  	ld a,mos_load
04647D 5B CF       6744*  	RST.LIL 08h
04647F 21 74 02 00 6745*  	ld hl,BUF_DW_13
046483 01 40 01 00 6746*  	ld bc,320
046487 11 0C 00 00 6747*  	ld de,12
04648B DD 21 00 0F 6748*  	ld ix,3840
       00          
046490 CD 68 B8 04 6749*  	call vdu_load_img
046494 C9          6750*  	ret
046495             6751*  
046495             6752*  ld_dw_14:
046495 21 3B 65 04 6753*  	ld hl,Fdw_14
046499 22 ED B6 04 6754*  	ld (cur_filename),hl
04649D 11 1A C3 04 6755*  	ld de,filedata
0464A1 01 00 00 01 6756*  	ld bc,65536
0464A5 3E 01       6757*  	ld a,mos_load
0464A7 5B CF       6758*  	RST.LIL 08h
0464A9 21 75 02 00 6759*  	ld hl,BUF_DW_14
0464AD 01 40 01 00 6760*  	ld bc,320
0464B1 11 0C 00 00 6761*  	ld de,12
0464B5 DD 21 00 0F 6762*  	ld ix,3840
       00          
0464BA CD 68 B8 04 6763*  	call vdu_load_img
0464BE C9          6764*  	ret
0464BF             6765*  
0464BF             6766*  ; File name lookups:
0464BF 64 77 73 2F 6767*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
0464CE 64 77 73 2F 6768*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
0464DD 64 77 73 2F 6769*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
0464EC 64 77 73 2F 6770*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
0464FB 64 77 73 2F 6771*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
04650B 64 77 73 2F 6772*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
04651B 64 77 73 2F 6773*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
04652B 64 77 73 2F 6774*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
04653B 64 77 73 2F 6775*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
04654B             0014   	include "src/asm/fonts_bmp.asm"
04654B             0001*  ; plots a bitmap character to the screen
04654B             0002*  ; inputs: a; ascii character to plot
04654B             0003*  ;      bc,de = x,y screen coordinates in pixels
04654B             0004*  ;      ix pointed at the font definition lut
04654B             0005*  ; returns: bc as the next x coordinate to plot
04654B             0006*  ;          pretty pixels which hopefully resemble readable text
04654B             0007*  ; destroys: lotsa stuff
04654B             0008*  font_bmp_plot:
04654B             0009*  ; back up bc,de
04654B C5          0010*      push bc
04654C D5          0011*      push de
04654D             0012*  ; get the buffer id of the character
04654D D6 20       0013*      sub 32 ; lookup table starts at ascii 32
04654F 06 06       0014*      ld b,6 ; six bytes per lookup record
046551 4F          0015*      ld c,a
046552 ED 4C       0016*      mlt bc
046554 DD 09       0017*      add ix,bc ; now ix points to the character definition
046556 DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
046559 CD D7 A9 04 0019*      call vdu_buff_select
04655D             0020*  ; plot the character
04655D D1          0021*      pop de
04655E DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
046561 83          0023*      add a,e ; add the y-coordinate
046562 5F          0024*      ld e,a
046563 3E 00       0025*      ld a,0 ; can't xor it because we need carry
046565 8A          0026*      adc a,d
046566 57          0027*      ld d,a ; plot_y now correct for the character
046567 C1          0028*      pop bc ; plot_x
046568 C5          0029*      push bc ; we want it back after the plot
046569 CD A8 AB 04 0030*      call vdu_plot_bmp
04656D             0031*  ; now set bc to the next x coordinate
04656D C1          0032*      pop bc
04656E DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
046571 C6 02       0034*      add a,2 ; add a little padding between characters
046573 81          0035*      add a,c ; bump the original x-coordinate
046574 4F          0036*      ld c,a
046575 3E 00       0037*      ld a,0 ; can't xor it because we need carry
046577 88          0038*      adc a,b
046578 47          0039*      ld b,a ; plot_x now correct for the next character
046579 C9          0040*      ret
04657A             0041*  
04657A             0042*  ; plots a zero-terminated string of bitmap characters to the screen
04657A             0043*  ; inputs: hl; pointer to the string
04657A             0044*  ;       bc,de = x,y screen coordinates in pixels
04657A             0045*  ;       ix pointed at the font definition lut
04657A             0046*  ; returns: bc as the next x coordinate to plot
04657A             0047*  ;          de as the next y coordinate to plot
04657A             0048*  ;          pretty pixels which hopefully resemble readable text
04657A             0049*  font_bmp_print:
04657A             0050*  @next_char:
04657A             0051*  ; fetch the next character in the string
04657A 7E          0052*      ld a,(hl) ; a has the ascii value of the character
04657B FE 00       0053*      cp 0 ; is it zero?
04657D C8          0054*      ret z ; if so, we're done
04657E 23          0055*      inc hl ; point to the next character
04657F E5          0056*      push hl ; save the pointer
046580 D5          0057*      push de ; save our y-coordinate
046581 DD E5       0058*      push ix ; save the font lut pointer
046583 CD 4B 65 04 0059*      call font_bmp_plot ; plot the character
046587 DD E1       0060*      pop ix ; restore the font lut pointer
046589 D1          0061*      pop de ; restore our y-coordinate
04658A E1          0062*      pop hl ; restore the pointer
04658B C3 7A 65 04 0063*      jp @next_char ; loop
04658F             0015   	include "src/asm/maps.asm"
04658F             0001*  ; ############# MAP CONSTANTS #############
04658F             0002*  ; map tables addresses
04658F             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
04658F             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
04658F             0005*  
04658F             0006*  ; map status/type flags
04658F             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
04658F             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
04658F             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
04658F             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
04658F             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
04658F             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
04658F             0013*  ; bits 1 and 0 are the render_type mask
04658F             0014*  render_type_cube:   equ %00000000  ; 0
04658F             0015*  render_type_floor:  equ %00000001  ; 1
04658F             0016*  render_type_null:   equ %00000010  ; 2
04658F             0017*  render_type_sprite: equ %00000011  ; 3
04658F             0018*  
04658F             0019*  ; HOW THE MAP TABLE IS LAID OUT
04658F             0020*  ; map table field offset constants
04658F             0021*  ; (mind the little-endianess)
04658F             0022*  map_type_status: 	equ 0
04658F             0023*  map_img_idx: 		equ 1
04658F             0024*  map_obj_id: 		equ 2
04658F             0025*  map_sprite_id: 		equ 3
04658F             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
04658F             0027*  
04658F             0028*  ; gets cell info from a directional displacement from a given map location
04658F             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
04658F             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
04658F             0031*  ; calls: get_dx_dy, get_cell_from_coords
04658F             0032*  get_neighbor:
04658F             0033*  ; modulo 4 on orientation
04658F 7B          0034*      ld a,e
046590 E6 03       0035*      and 0x03
046592 5F          0036*      ld e,a
046593 CD C2 65 04 0037*  	call get_dx_dy ; d,e = dy,dx
046597             0038*  ; add add b,c to the deltas in d,e
046597 79          0039*  	ld a,c
046598 83          0040*  	add a,e
046599 5F          0041*  	ld e,a
04659A 78          0042*  	ld a,b
04659B 82          0043*  	add a,d
04659C 57          0044*  	ld d,a
04659D             0045*  ; fall through to get_cell_from_coords
04659D             0046*  
04659D             0047*  ; gets cell info from a given x,y map coordinate
04659D             0048*  ; inputs: ; d,e = map_y,map_x
04659D             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04659D             0050*  get_cell_from_coords:
04659D             0051*  ; modulo 16 on input coords
04659D 7B          0052*  	ld a,e
04659E E6 0F       0053*  	and 0x0F
0465A0 5F          0054*  	ld e,a
0465A1 7A          0055*  	ld a,d
0465A2 E6 0F       0056*  	and 0x0F
0465A4 57          0057*  	ld d,a
0465A5             0058*  ; get cell_id from x,y
0465A5 42          0059*  	ld b,d ; y
0465A6 0E 10       0060*  	ld c,16 ; number of cells in a column
0465A8 ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
0465AA 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0465AE 6B          0063*  	ld l,e ; x
0465AF 09          0064*  	add hl,bc ; hl = cell_id of x,y
0465B0 E5          0065*  	push hl ; so we can return cell_id
0465B1 4D          0066*  	ld c,l ; c = cell_id
0465B2             0067*  ; get address of cell record in cell_status table
0465B2 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0465B4 ED 4C       0069*  	mlt bc ; bc = offset to cell record
0465B6 DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0465BB DD 09       0071*  	add ix,bc ; ix = address of cell record
0465BD DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0465C0 C1          0073*  	pop bc ; bc = cell_id
0465C1 C9          0074*  	ret
0465C2             0075*  
0465C2             0076*  ; gets dx,dy from orientation and distance
0465C2             0077*  ; d = distance ; e = orientation
0465C2             0078*  ; returns: d,e = dy,dx
0465C2             0079*  get_dx_dy:
0465C2             0080*  ; modulo 4 on orientation
0465C2 7B          0081*  	ld a,e
0465C3 E6 03       0082*  	and 0x03
0465C5 FE 00       0083*  	cp 0
0465C7 28 11       0084*  	jr z,@north
0465C9 FE 01       0085*  	cp 1
0465CB 28 14       0086*  	jr z,@east
0465CD FE 02       0087*  	cp 2
0465CF 28 14       0088*  	jr z,@south
0465D1 FE 03       0089*  	cp 3
0465D3 28 13       0090*  	jr z,@west
0465D5             0091*  ; if none of those, return zeroes
0465D5 11 00 00 00 0092*  	ld de,0
0465D9 C9          0093*  	ret
0465DA             0094*  @north:
0465DA             0095*  ; x = 0, y = -d
0465DA 1E 00       0096*  	ld e,0
0465DC 7A          0097*  	ld a,d
0465DD ED 44       0098*  	neg
0465DF 57          0099*  	ld d,a
0465E0 C9          0100*  	ret
0465E1             0101*  @east:
0465E1             0102*  ; x = d, y = 0
0465E1 5A          0103*  	ld e,d
0465E2 16 00       0104*  	ld d,0
0465E4 C9          0105*  	ret
0465E5             0106*  @south:
0465E5             0107*  ; x = 0, y = d
0465E5 1E 00       0108*  	ld e,0
0465E7 C9          0109*  	ret
0465E8             0110*  @west:
0465E8             0111*  ; x = -d, y = 0
0465E8 7A          0112*  	ld a,d
0465E9 ED 44       0113*  	neg
0465EB 5F          0114*  	ld e,a
0465EC 16 00       0115*  	ld d,0
0465EE C9          0116*  	ret
0465EF             0117*  
0465EF             0118*  ; gets the direction from a dy,dx pair
0465EF             0119*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
0465EF             0120*  ; inputs: ; d = dy ; e = dx
0465EF             0121*  ; returns: a = orientation
0465EF             0122*  get_dir_from_dy_dx:
0465EF AF          0123*  	xor a
0465F0 93          0124*  	sub e
0465F1 28 06       0125*  	jr z,@not_x
0465F3 3E 01       0126*  	ld a,1
0465F5 F8          0127*  	ret m
0465F6 3E 03       0128*  	ld a,3
0465F8 C9          0129*  	ret
0465F9             0130*  @not_x:
0465F9 AF          0131*  	xor a
0465FA 92          0132*  	sub d
0465FB C8          0133*  	ret z
0465FC 3E 02       0134*  	ld a,2
0465FE F8          0135*  	ret m
0465FF AF          0136*  	xor a
046600 C9          0137*  	ret
046601             0138*  
046601             0139*  
046601             0140*  ; translate camera relative x,y deltas to map x,y deltas
046601             0141*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
046601             0142*  ; returns:	d = map_dy ; e = map_dx
046601             0143*  trans_dx_dy:
046601             0144*  ; modulo 4 on orientation
046601 E6 03       0145*  	and 0x03
046603 28 11       0146*  	jr z,@north
046605 FE 01       0147*  	cp 1 ; east
046607 28 12       0148*  	jr z,@east
046609 FE 02       0149*  	cp 2 ; south
04660B 28 12       0150*  	jr z,@south
04660D FE 03       0151*  	cp 3 ; west
04660F 28 13       0152*  	jr z,@west
046611             0153*  ; if none of those, return zeroes
046611 11 00 00 00 0154*  	ld de,0
046615 C9          0155*  	ret
046616             0156*  @north: ; invert y axis, x unnchanged
046616 7A          0157*  	ld a,d
046617 ED 44       0158*  	neg
046619 57          0159*  	ld d,a
04661A C9          0160*  	ret
04661B             0161*  @east: ; +x = +y, +y = +x
04661B 7A          0162*  	ld a,d
04661C 53          0163*  	ld d,e
04661D 5F          0164*  	ld e,a
04661E C9          0165*  	ret
04661F             0166*  @south: ; invert x axis, y unchanged
04661F 7B          0167*  	ld a,e
046620 ED 44       0168*  	neg
046622 5F          0169*  	ld e,a
046623 C9          0170*  	ret
046624             0171*  @west: ; +x = -y, +y = -x
046624 7A          0172*  	ld a,d ; y
046625 ED 44       0173*  	neg ; -y
046627 53          0174*  	ld d,e ; x
046628 5F          0175*  	ld e,a ; -y
046629 7A          0176*  	ld a,d ; x
04662A ED 44       0177*  	neg ; -x
04662C 57          0178*  	ld d,a ; -x
04662D C9          0179*  	ret
04662E             0180*  
04662E             0181*  ; initialize map variables and load map file
04662E             0182*  ; inputs: none
04662E             0183*  map_init:
04662E AF          0184*  	xor a
04662F 32 E3 B1 04 0185*  	ld (cur_floor),a
046633 32 E4 B1 04 0186*  	ld (cur_room),a
046637             0187*  ; load room file
046637 CD 3C 66 04 0188*  	call map_load
04663B             0189*  ; set player initial position
04663B C9          0190*  	ret
04663C             0191*  
04663C             0192*  ; load map file
04663C             0193*  ; inputs: cur_floor, cur_room set
04663C             0194*  map_load:
04663C 21 F4 66 04 0195*  	ld hl,floors ; address of floors lut
046640 3A E3 B1 04 0196*  	ld a,(cur_floor)
046644 5F          0197*  	ld e,a
046645 16 03       0198*  	ld d,3 ; three bytes per lookup record
046647 ED 5C       0199*  	mlt de ; de = offset to floor lut entry
046649 19          0200*  	add hl,de ; hl = address of floor lut entry
04664A ED 27       0201*  	ld hl,(hl) ; hl = base address of rooms for given floor
04664C 3A E4 B1 04 0202*  	ld a,(cur_room)
046650 5F          0203*  	ld e,a
046651 16 03       0204*  	ld d,3 ; three bytes per lookup record
046653 ED 5C       0205*  	mlt de ; de = offset to room lut entry
046655 19          0206*  	add hl,de ; hl = address of room lut entry
046656 ED 27       0207*  	ld hl,(hl) ; hl = address of room file name
046658 22 ED B6 04 0208*  	ld (cur_filename),hl ; DEBUG
04665C 11 00 E0 B7 0209*  	ld de,cell_status ; address to load map data
046660 01 00 20 00 0210*  	ld bc,8*1024 ; size of map data in bytes
046664 3E 01       0211*  	ld a,mos_load
046666 5B CF       0212*  	RST.LIL 08h
046668             0213*  ; DEBUG: print filename
046668 2A ED B6 04 0214*  	ld hl,(cur_filename)
04666C CD 6D AE 04 0215*  	call printString
046670             0216*  ; load sprite data
046670 CD 75 66 04 0217*  	call map_init_sprites
046674 C9          0218*  	ret
046675             0219*  
046675             0220*  ; initialize sprite data for the current room into sprite table
046675             0221*  ; inputs: map data loaded
046675             0222*  map_init_sprites:
046675             0223*  ; initialize pointers
046675 DD 21 00 E0 0224*  	ld ix,cell_status
       B7          
04667A FD 21 00 FC 0225*  	ld iy,sprite_table_base
       B7          
04667F AF          0226*  	xor a
046680 32 C4 66 04 0227*  	ld (@cell_id),a
046684             0228*  @loop:
046684 FD 22 10 9F 0229*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
046689 DD 7E 03    0230*  	ld a,(ix+map_sprite_id)
04668C FE FF       0231*  	cp 255 ; check for no sprite
04668E 28 1B       0232*  	jr z,@next_cell
046690 FD 77 00    0233*  	ld (iy+sprite_id),a
046693 DD 7E 01    0234*  	ld a,(ix+map_img_idx)
046696 FD 77 01    0235*  	ld (iy+sprite_obj),a
046699 CD 41 A0 04 0236*  	call sprite_init_data
04669D 3A C4 66 04 0237*  	ld a,(@cell_id)
0466A1 CD C5 66 04 0238*  	call cell_id_to_coords ; d = map_y, e = map_x
0466A5 FD 1F 04    0239*  	ld (iy+sprite_x),de ; set sprite x,y
0466A8 ED 33 10    0240*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
0466AB             0241*  @next_cell:
0466AB ED 32 04    0242*  	lea ix,ix+map_record_size ; advance pointer to next cell
0466AE             0243*  ; check if we've reached the end of the map data
0466AE 3A C4 66 04 0244*  	ld a,(@cell_id)
0466B2 3C          0245*  	inc a
0466B3 32 C4 66 04 0246*  	ld (@cell_id),a
0466B7 20 CB       0247*  	jr nz,@loop ; still more to do
0466B9             0248*  ; cleanup and return
0466B9 FD 21 00 FC 0249*  	ld iy,sprite_table_base ; reset pointer
       B7          
0466BE FD 22 10 9F 0250*  	ld (sprite_table_pointer),iy
       04          
0466C3 C9          0251*  	ret
0466C4 00          0252*  @cell_id: db 0
0466C5             0253*  
0466C5             0254*  ; get the x,y map coordinates from a cell_id
0466C5             0255*  ; inputs: a = cell_id
0466C5             0256*  ; returns: a = cell_id, d = map_y, e = map_x
0466C5             0257*  cell_id_to_coords:
0466C5 F5          0258*  	push af	; Save the cell id
0466C6             0259*  ; Calculate the y coordinate by dividing the index by 16
0466C6 57          0260*  	ld d,a      ; Move index into d
0466C7 CB 2A       0261*  	sra d        ; Shift right once (d = d / 2)
0466C9 CB 2A       0262*  	sra d        ; Shift right again (d = d / 4)
0466CB CB 2A       0263*  	sra d        ; Shift right again (d = d / 8)
0466CD CB 2A       0264*  	sra d        ; Shift right again (d = d / 16)
0466CF             0265*  ; Calculate the x coordinate by taking the index modulo 16
0466CF E6 0F       0266*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
0466D1 5F          0267*  	ld e,a      ; e is now the x coordinate
0466D2 F1          0268*  	pop af	; a is cell id
0466D3 C9          0269*  	ret
0466D4             0270*  
0466D4             0271*  ; get starting position based on the start flag
0466D4             0272*  ; inputs: none
0466D4             0273*  ; returns: a = cell_id, d = map_y, e = map_x
0466D4             0274*  get_start_pos:
0466D4 11 00 00 00 0275*  	ld de,0 ; initialize to 0,0 as a default
0466D8 DD 21 00 E0 0276*  	ld ix,cell_status ; ix points to the start of the map data
       B7          
0466DD AF          0277*  	xor a ; start at cell 0
0466DE             0278*  @loop:
0466DE F5          0279*  	push af ; save cell_id
0466DF DD 7E 00    0280*  	ld a,(ix+map_type_status) ; a is the cell status bitmmask
0466E2 E6 08       0281*  	and cell_is_start ; testing whether the cell start bit is lit
0466E4 28 06       0282*  	jr z,@not_start ; go to the next cell if not
0466E6 F1          0283*  	pop	af ; a is cell_id
0466E7 CD C5 66 04 0284*  	call cell_id_to_coords ; d = map_y, e = map_x
0466EB C9          0285*  	ret
0466EC             0286*  @not_start:
0466EC F1          0287*  	pop	af ; a is cell_id
0466ED 3C          0288*  	inc a ; bump cell id
0466EE C8          0289*  	ret z ; if zero we've wrapped around so we return 0,0 in de and 0 in a as cell_id
0466EF ED 32 04    0290*  	lea ix,ix+map_record_size ; otherwise bump pointer to next map record
0466F2 18 EA       0291*  	jr @loop
0466F4             0292*  
0466F4             0293*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
0466F4             0294*  
0466F4             0295*  floors:
0466F4 F7 66 04    0296*  	dl floor_00
0466F7             0297*  
0466F7             0298*  ; map room filename labels
0466F7             0299*  room_files:
0466F7             0300*  floor_00:
0466F7 FD 66 04    0301*  	dl room_00_0
0466FA 0F 67 04    0302*  	dl room_00_1
0466FD             0303*  
0466FD             0304*  ; map data filenames
0466FD 6D 61 70 73 0305*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
04670F 6D 61 70 73 0306*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
046721             0016   	include "src/asm/render.asm"
046721             0001*  ; #### RENDERING SCRATCH VARIABLES ####
046721             0002*  ; first three bytes of cell_status record in little-endian order
046721             0003*  to_cell_status:
046721             0004*  to_map_type_status: ds 1
046722             0005*  to_img_idx: ds 1
046723             0006*  to_obj_id: ds 1
046724             0007*  ; fourth byte of cell_status record
046724             0008*  to_sprite_id: ds 1
046725             0009*  
046725             0010*  to_poly_id: ds 1
046726             0011*  to_buffer_id: ds 3
046729             0012*  
046729             0013*  cur_cell_views: ds 3
04672C             0014*  
04672C             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
04672C             0016*  
04672C             0017*  ; render background as a prelude to rendering panels and sprites
04672C             0018*  ; hl is the buffer id, bc and de are plot_x and plot_y
04672C             0019*  render_background:
04672C             0020*  ; back up everything
04672C C5          0021*      push bc
04672D D5          0022*      push de
04672E E5          0023*      push hl
04672F             0024*  ; plot background
04672F AF          0025*      xor a ; color mode
046730 0E 08       0026*      ld c,c_grey_dk ; color
046732 CD 98 A8 04 0027*      call vdu_gcol_fg
046736 01 00 00 00 0028*      ld bc,0 ; x0
04673A 11 00 00 00 0029*      ld de,0 ; y0
04673E DD 21 3F 01 0030*      ld ix,319
       00          
046743 FD 21 50 00 0031*      ld iy,80
       00          
046748 CD E5 AB 04 0032*      call vdu_plot_rf
04674C AF          0033*      xor a ; color mode
04674D 0E 07       0034*      ld c,c_grey ; color
04674F CD 98 A8 04 0035*      call vdu_gcol_fg
046753 01 00 00 00 0036*      ld bc,0 ; x0
046757 11 50 00 00 0037*      ld de,80 ; y0
04675B DD 21 3F 01 0038*      ld ix,319
       00          
046760 FD 21 9F 00 0039*      ld iy,159
       00          
046765 CD E5 AB 04 0040*      call vdu_plot_rf
046769             0041*  ; plot the background
046769 E1          0042*      pop hl ; get back the buffer id
04676A CD D7 A9 04 0043*      call vdu_buff_select
04676E D1          0044*      pop de ; get back plot_y
04676F C1          0045*      pop bc ; get back plot_x
046770 CD A8 AB 04 0046*      call vdu_plot_bmp
046774 C9          0047*      ret
046775             0048*  
046775             0049*  ; render a 3D panel
046775             0050*  ; inputs: to_poly_id set, to_buffer_id set
046775             0051*  render_panel:
046775             0052*  ; make the bitmap buffer active
046775 2A 26 67 04 0053*      ld hl,(to_buffer_id)
046779 CD D7 A9 04 0054*      call vdu_buff_select
04677D             0055*  ; get the coordinates of the panel
04677D DD 21 79 69 0056*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
046782             0057*  ; get the panel's poly_id
046782 3A 25 67 04 0058*      ld a,(to_poly_id)
046786             0059*  ; multiply a by 6 to get the offset
046786 47          0060*      ld b,a
046787 0E 06       0061*      ld c,6
046789 ED 4C       0062*      mlt bc
04678B             0063*  ; add the offset to the lookup table
04678B DD 09       0064*      add ix,bc
04678D             0065*  ; get the panel coordinates
04678D DD 07 00    0066*      ld bc,(ix) ; plot_x
046790 DD 17 03    0067*      ld de,(ix+3) ; plot_y
046793             0068*  ; plot that mofo and go home
046793 CD A8 AB 04 0069*      call vdu_plot_bmp
046797 C9          0070*      ret
046798             0071*  
046798             0072*  ; render a 3D sprite
046798             0073*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
046798             0074*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
046798             0075*  render_sprite:
046798             0076*  ; look up sprite_obj in sprite table
046798 FD 21 00 FC 0077*      ld iy,sprite_table_base
       B7          
04679D 47          0078*      ld b,a ; sprite id
04679E 0E 10       0079*      ld c,sprite_record_size
0467A0 ED 4C       0080*      mlt bc
0467A2 FD 09       0081*      add iy,bc ; iy points to sprite record
0467A4 FD 22 10 9F 0082*      ld (sprite_table_pointer),iy
       04          
0467A9             0083*  ; get sprite imgs lookup
0467A9 FD 7E 01    0084*      ld a,(iy+sprite_obj) ; a is sprite_obj
0467AC FD 21 6A 6C 0085*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
0467B1 47          0086*      ld b,a
0467B2 0E 03       0087*      ld c,3 ; 3 bytes per record
0467B4 ED 4C       0088*      mlt bc
0467B6 FD 09       0089*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
0467B8 FD 37 00    0090*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
0467BB             0091*  ; convert to_poly_id to sprite_poly
0467BB 21 3D 6C 04 0092*      ld hl,sprite_polys_lookup
0467BF 3A 25 67 04 0093*      ld a,(to_poly_id)
0467C3 01 00 00 00 0094*      ld bc,0  ; make sure bcu and b are zero
0467C7 4F          0095*      ld c,a
0467C8 09          0096*      add hl,bc ; hl points to the sprite's poly id
0467C9             0097*  ; get the sprites image defs for the particular poly id
0467C9 7E          0098*      ld a,(hl)
0467CA 47          0099*      ld b,a
0467CB 0E 09       0100*      ld c,9  ; 9 bytes per record
0467CD ED 4C       0101*      mlt bc
0467CF FD 09       0102*      add iy,bc ; iy is the offset to the sprite's image def
0467D1             0103*  ; select buffer
0467D1 FD 27 06    0104*      ld hl,(iy+6)
0467D4 CD D7 A9 04 0105*      call vdu_buff_select
0467D8             0106*  ; plot sprite
0467D8 FD 07 00    0107*      ld bc,(iy+0) ; plot_x
0467DB FD 17 03    0108*      ld de,(iy+3) ; plot_y
0467DE CD A8 AB 04 0109*      call vdu_plot_bmp
0467E2 C9          0110*      ret
0467E3             0111*  
0467E3             0112*  ; render the object in a given cell and poly_id
0467E3             0113*  ; inputs: to_poly_id set, d,e are the cell coords
0467E3             0114*  render_cell:
0467E3             0115*  ; get the cell to render's cell_status data and store it in scratch
0467E3 CD 9D 65 04 0116*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
0467E7 DD 27 00    0117*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
0467EA 22 21 67 04 0118*      ld (to_cell_status),hl
0467EE             0119*  ; get sprite_id from cell_status lut
0467EE DD 7E 03    0120*      ld a,(ix+map_sprite_id)
0467F1 FE FF       0121*      cp 255 ; value if no sprite present
0467F3 C2 98 67 04 0122*      jp nz,render_sprite
0467F7             0123*  ; get cell's render_type
0467F7 7D          0124*      ld a,l ; map_type_status
0467F8 E6 02       0125*      and 2 ; mask off everything but lowest two bits
0467FA 28 02       0126*      jr z,@cube ; render_type_cube is 0
0467FC 18 32       0127*      jr @nodraw ; placeholder for future implementation TODO
0467FE             0128*  @cube:
0467FE             0129*      ; get map_img_idx from cell_status lut
0467FE 3A 22 67 04 0130*      ld a,(to_img_idx)
046802 FE FF       0131*      cp 255 ; value for cell with nothing to draw
046804 28 2A       0132*      jr z,@nodraw
046806             0133*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
046806 21 B4 6A 04 0134*      ld hl,cube_img_idx_lookup
04680A 47          0135*      ld b,a
04680B 0E 03       0136*      ld c,3 ; three bytes per record
04680D ED 4C       0137*      mlt bc
04680F 09          0138*      add hl,bc ; hl points to the cube's base buffer id
046810 ED 27       0139*      ld hl,(hl) ; hl is the base buffer id
046812 EB          0140*      ex de,hl ; stash the base buffer id in de for later
046813 21 87 6A 04 0141*      ld hl,cube_poly_idx_lookup
046817 3A 25 67 04 0142*      ld a,(to_poly_id)
04681B 01 00 00 00 0143*      ld bc,0 ; make sure bcu is zero
04681F 4F          0144*      ld c,a
046820 09          0145*      add hl,bc ; hl is the buffer id index address
046821 7E          0146*      ld a,(hl) ; a is the buffer id index value
046822 21 00 00 00 0147*      ld hl,0 ; make sure hlu is zero
046826 6F          0148*      ld l,a ; hl is the buffer id index value
046827 19          0149*      add hl,de ; hl is the buffer id
046828 22 26 67 04 0150*      ld (to_buffer_id),hl
04682C C3 75 67 04 0151*      jp render_panel
046830             0152*  @nodraw:
046830 C9          0153*      ret
046831             0154*  
046831             0155*  ; render a full 3d scene
046831             0156*  ; inputs: cur_x, cur_y, orientation set
046831             0157*  ; outputs: pretty pictures
046831             0158*  ; destroys: everything
046831             0159*  render_scene:
046831             0160*  ; clear the screen
046831 CD 2C 67 04 0161*      call render_background
046835             0162*  ; get current map position and camera orientation
046835 ED 5B E9 B1 0163*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04683A CD 9D 65 04 0164*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04683E             0165*  ; get cell_views address for this cell and orientation
04683E 3A E8 B1 04 0166*      ld a,(orientation)
046842 5F          0167*      ld e,a
046843 16 06       0168*      ld d,6 ; 6 bytes per orientation
046845 ED 5C       0169*      mlt de ; de = orientation offset
046847 EB          0170*      ex de,hl ; hl = orientation offset
046848 06 18       0171*      ld b,24 ; 24 bytes per cell in cell_views lut
04684A ED 4C       0172*      mlt bc ; bc = offset from base address of cell_views lut
04684C 09          0173*      add hl,bc ; hl = total offset from cell_views base address
04684D EB          0174*      ex de,hl ; becaue we can't add iy to hl
04684E FD 21 00 E4 0175*      ld iy,cell_views ; base address of cell_views lut
       B7          
046853 FD 19       0176*      add iy,de ; iy = cell_views address
046855 FD 22 29 67 0177*      ld (cur_cell_views),iy
       04          
04685A             0178*  ; cycle through the cell views masks and render the appropriate objects
04685A 01 00 46 28 0179*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04685E AF          0180*      xor a ; poly_id
04685F 32 25 67 04 0181*      ld (to_poly_id),a
046863             0182*  @loop:
046863 ED 43 6F 68 0183*      ld (@bit_iy+2),bc
       04          
046868 FD 2A 29 67 0184*      ld iy,(cur_cell_views)
       04          
04686D             0185*  @bit_iy:
04686D FD CB 00 46 0186*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
046871 28 21       0187*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
046873             0188*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
046873 3A 25 67 04 0189*      ld a,(to_poly_id)
046877 4F          0190*      ld c,a ; poly_id
046878 3A E8 B1 04 0191*      ld a,(orientation)
04687C CD 46 69 04 0192*      call get_polys_deltas ; d,e = y,x deltas
046880 3A E9 B1 04 0193*      ld a,(cur_x)
046884 83          0194*      add a,e
046885 5F          0195*      ld e,a
046886 3A EA B1 04 0196*      ld a,(cur_y)
04688A 82          0197*      add a,d
04688B 57          0198*      ld d,a
04688C 3A 25 67 04 0199*      ld a,(to_poly_id)
046890 CD E3 67 04 0200*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
046894             0201*  @next_poly:
046894 ED 4B 6F 68 0202*      ld bc,(@bit_iy+2)
       04          
046899 3A 25 67 04 0203*      ld a,(to_poly_id)
04689D 3C          0204*      inc a ; a is next poly_id
04689E 32 25 67 04 0205*      ld (to_poly_id),a
0468A2 FE 2D       0206*      cp num_polys
0468A4 28 0D       0207*      jr z,@end
0468A6 3E 08       0208*      ld a,8
0468A8 80          0209*      add a,b
0468A9 47          0210*      ld b,a ; bit tested codes to 0x46 + b/8
0468AA FE 86       0211*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
0468AC 20 B5       0212*      jr nz,@loop
0468AE 06 46       0213*      ld b,0x46
0468B0 0C          0214*      inc c ; iy address offset
0468B1 18 B0       0215*      jr @loop
0468B3             0216*  @end:
0468B3             0217*  ; draw the graphic portions of the ui
0468B3 21 01 20 00 0218*  	ld hl,BUF_UI_LOWER_PANEL
0468B7 CD D7 A9 04 0219*      call vdu_buff_select
0468BB 01 00 00 00 0220*  	ld bc,0 ; x
0468BF 11 A0 00 00 0221*  	ld de,160 ; y
0468C3 CD A8 AB 04 0222*  	call vdu_plot_bmp
0468C7             0223*  
0468C7 2A 04 B2 04 0224*      ld hl,(plyr_wpn_ui_lg)
0468CB ED 5B 16 B2 0225*      ld de,(plyr_wpn_anim_fr)
       04          
0468D0 19          0226*      add hl,de
0468D1 CD D7 A9 04 0227*      call vdu_buff_select
0468D5 01 80 00 00 0228*      ld bc,128 ; x
0468D9 11 60 00 00 0229*      ld de,96 ; y
0468DD CD A8 AB 04 0230*      call vdu_plot_bmp
0468E1             0231*  
0468E1 2A 01 B2 04 0232*      ld hl,(plyr_wpn_ui_sm)
0468E5 CD D7 A9 04 0233*      call vdu_buff_select
0468E9 01 0A 01 00 0234*      ld bc,266 ; x
0468ED 11 B2 00 00 0235*      ld de,178 ; y
0468F1 CD A8 AB 04 0236*      call vdu_plot_bmp
0468F5             0237*  
0468F5             0238*  ; draw the text portions of the ui
0468F5 0E 16       0239*      ld c,22 ; x
0468F7 06 03       0240*      ld b,3 ; y
0468F9 CD AB A9 04 0241*      call vdu_move_cursor
0468FD 2A 19 B2 04 0242*      ld hl,(plyr_ammo)
046901 CD BB AE 04 0243*      call printDec
046905             0244*  
046905 0E 11       0245*      ld c,17 ; x
046907 06 03       0246*      ld b,3 ; y
046909 CD AB A9 04 0247*      call vdu_move_cursor
04690D 2A DA B1 04 0248*      ld hl,(plyr_health)
046911 CD BB AE 04 0249*      call printDec
046915             0250*  
046915 0E 07       0251*      ld c,7; x
046917 06 03       0252*      ld b,3 ; y
046919 CD AB A9 04 0253*      call vdu_move_cursor
04691D 2A E0 B1 04 0254*      ld hl,(plyr_lives)
046921 CD BB AE 04 0255*      call printDec
046925             0256*  
046925 0E 03       0257*      ld c,3 ; x
046927 06 03       0258*      ld b,3 ; y
046929 CD AB A9 04 0259*      call vdu_move_cursor
04692D 2A D7 B1 04 0260*      ld hl,(plyr_score)
046931 CD BB AE 04 0261*      call printDec
046935             0262*  
046935 0E 01       0263*      ld c,1 ; x
046937 06 03       0264*      ld b,3 ; y
046939 CD AB A9 04 0265*      call vdu_move_cursor
04693D 3A E3 B1 04 0266*      ld a,(cur_floor)
046941 CD 9D AE 04 0267*      call printHex8
046945             0268*  
046945             0269*  ; all done
046945 C9          0270*      ret
046946             0271*  
046946             0272*  ; get the map coordinates deltas for a given orientation and poly_id
046946             0273*  ; inputs: a is the orientation, c is the poly_id
046946             0274*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
046946             0275*  get_polys_deltas:
046946             0276*  ; get the base address of the orientation-specific deltas lookup table
046946 FE 00       0277*      cp 0
046948 28 11       0278*      jr z,@orientation_0
04694A FE 01       0279*      cp 1
04694C 28 13       0280*      jr z,@orientation_1
04694E FE 02       0281*      cp 2
046950 28 15       0282*      jr z,@orientation_2
046952 FE 03       0283*      cp 3
046954 28 17       0284*      jr z,@orientation_3
046956             0285*  ; return zeros if not found
046956 11 00 00 00 0286*      ld de,0
04695A C9          0287*      ret
04695B             0288*  @orientation_0: ; north
04695B 21 D5 6A 04 0289*      ld hl,polys_map_deltas_0
04695F 18 10       0290*      jr @get_deltas
046961             0291*  @orientation_1: ; east
046961 21 2F 6B 04 0292*      ld hl,polys_map_deltas_1
046965 18 0A       0293*      jr @get_deltas
046967             0294*  @orientation_2: ; south
046967 21 89 6B 04 0295*      ld hl,polys_map_deltas_2
04696B 18 04       0296*      jr @get_deltas
04696D             0297*  @orientation_3: ; west
04696D 21 E3 6B 04 0298*      ld hl,polys_map_deltas_3
046971             0299*  @get_deltas:
046971 06 02       0300*      ld b,2 ; 2 bytes per record
046973 ED 4C       0301*      mlt bc ; poly_id * 2
046975 09          0302*      add hl,bc ; hl points to the deltas
046976 ED 17       0303*      ld de,(hl) ;d,e = dy,dx
046978 C9          0304*      ret
046979             0017   	include "src/asm/polys.asm"
046979             0001*  num_polys: equ 45
046979             0002*  
046979             0003*  polys_lookup_plot:
046979             0004*  ;	   plot_x,  plot_y:
046979 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
04697F 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
046985 47 00 00 3E 0007*  	dl 0x000047,0x00003E ; poly_id:2 02
       00 00       
04698B 6A 00 00 3E 0008*  	dl 0x00006A,0x00003E ; poly_id:3 03
       00 00       
046991 8E 00 00 3E 0009*  	dl 0x00008E,0x00003E ; poly_id:4 04
       00 00       
046997 B1 00 00 3E 0010*  	dl 0x0000B1,0x00003E ; poly_id:5 05
       00 00       
04699D D5 00 00 3E 0011*  	dl 0x0000D5,0x00003E ; poly_id:6 06
       00 00       
0469A3 F8 00 00 3E 0012*  	dl 0x0000F8,0x00003E ; poly_id:7 07
       00 00       
0469A9 1C 01 00 3E 0013*  	dl 0x00011C,0x00003E ; poly_id:8 08
       00 00       
0469AF 00 00 00 39 0014*  	dl 0x000000,0x000039 ; poly_id:9 09
       00 00       
0469B5 2E 00 00 39 0015*  	dl 0x00002E,0x000039 ; poly_id:10 0A
       00 00       
0469BB 5B 00 00 39 0016*  	dl 0x00005B,0x000039 ; poly_id:11 0B
       00 00       
0469C1 89 00 00 39 0017*  	dl 0x000089,0x000039 ; poly_id:12 0C
       00 00       
0469C7 B1 00 00 39 0018*  	dl 0x0000B1,0x000039 ; poly_id:13 0D
       00 00       
0469CD D5 00 00 39 0019*  	dl 0x0000D5,0x000039 ; poly_id:14 0E
       00 00       
0469D3 F8 00 00 39 0020*  	dl 0x0000F8,0x000039 ; poly_id:15 0F
       00 00       
0469D9 1C 01 00 39 0021*  	dl 0x00011C,0x000039 ; poly_id:16 10
       00 00       
0469DF 00 00 00 39 0022*  	dl 0x000000,0x000039 ; poly_id:17 11
       00 00       
0469E5 2E 00 00 39 0023*  	dl 0x00002E,0x000039 ; poly_id:18 12
       00 00       
0469EB 5B 00 00 39 0024*  	dl 0x00005B,0x000039 ; poly_id:19 13
       00 00       
0469F1 89 00 00 39 0025*  	dl 0x000089,0x000039 ; poly_id:20 14
       00 00       
0469F7 B6 00 00 39 0026*  	dl 0x0000B6,0x000039 ; poly_id:21 15
       00 00       
0469FD E4 00 00 39 0027*  	dl 0x0000E4,0x000039 ; poly_id:22 16
       00 00       
046A03 11 01 00 39 0028*  	dl 0x000111,0x000039 ; poly_id:23 17
       00 00       
046A09 00 00 00 30 0029*  	dl 0x000000,0x000030 ; poly_id:24 18
       00 00       
046A0F 3F 00 00 30 0030*  	dl 0x00003F,0x000030 ; poly_id:25 19
       00 00       
046A15 80 00 00 30 0031*  	dl 0x000080,0x000030 ; poly_id:26 1A
       00 00       
046A1B B6 00 00 30 0032*  	dl 0x0000B6,0x000030 ; poly_id:27 1B
       00 00       
046A21 E4 00 00 30 0033*  	dl 0x0000E4,0x000030 ; poly_id:28 1C
       00 00       
046A27 11 01 00 30 0034*  	dl 0x000111,0x000030 ; poly_id:29 1D
       00 00       
046A2D 00 00 00 30 0035*  	dl 0x000000,0x000030 ; poly_id:30 1E
       00 00       
046A33 3F 00 00 30 0036*  	dl 0x00003F,0x000030 ; poly_id:31 1F
       00 00       
046A39 80 00 00 30 0037*  	dl 0x000080,0x000030 ; poly_id:32 20
       00 00       
046A3F C0 00 00 30 0038*  	dl 0x0000C0,0x000030 ; poly_id:33 21
       00 00       
046A45 00 01 00 30 0039*  	dl 0x000100,0x000030 ; poly_id:34 22
       00 00       
046A4B 00 00 00 1A 0040*  	dl 0x000000,0x00001A ; poly_id:35 23
       00 00       
046A51 6A 00 00 1A 0041*  	dl 0x00006A,0x00001A ; poly_id:36 24
       00 00       
046A57 C0 00 00 1A 0042*  	dl 0x0000C0,0x00001A ; poly_id:37 25
       00 00       
046A5D 00 01 00 1A 0043*  	dl 0x000100,0x00001A ; poly_id:38 26
       00 00       
046A63 00 00 00 1A 0044*  	dl 0x000000,0x00001A ; poly_id:39 27
       00 00       
046A69 6A 00 00 1A 0045*  	dl 0x00006A,0x00001A ; poly_id:40 28
       00 00       
046A6F D5 00 00 1A 0046*  	dl 0x0000D5,0x00001A ; poly_id:41 29
       00 00       
046A75 00 00 00 00 0047*  	dl 0x000000,0x000000 ; poly_id:42 2A
       00 00       
046A7B D5 00 00 00 0048*  	dl 0x0000D5,0x000000 ; poly_id:43 2B
       00 00       
046A81 00 00 00 00 0049*  	dl 0x000000,0x000000 ; poly_id:44 2C
       00 00       
046A87             0050*  
046A87             0051*  cube_poly_idx_lookup:
046A87             0052*  ;	 img_idx,  poly_id
046A87 00          0053*  	db 0 ; poly_id:0 0
046A88 00          0054*  	db 0 ; poly_id:1 1
046A89 00          0055*  	db 0 ; poly_id:2 2
046A8A 00          0056*  	db 0 ; poly_id:3 3
046A8B 00          0057*  	db 0 ; poly_id:4 4
046A8C 00          0058*  	db 0 ; poly_id:5 5
046A8D 00          0059*  	db 0 ; poly_id:6 6
046A8E 00          0060*  	db 0 ; poly_id:7 7
046A8F 00          0061*  	db 0 ; poly_id:8 8
046A90 01          0062*  	db 1 ; poly_id:9 9
046A91 02          0063*  	db 2 ; poly_id:10 10
046A92 03          0064*  	db 3 ; poly_id:11 11
046A93 04          0065*  	db 4 ; poly_id:12 12
046A94 05          0066*  	db 5 ; poly_id:13 13
046A95 06          0067*  	db 6 ; poly_id:14 14
046A96 07          0068*  	db 7 ; poly_id:15 15
046A97 08          0069*  	db 8 ; poly_id:16 16
046A98 09          0070*  	db 9 ; poly_id:17 17
046A99 09          0071*  	db 9 ; poly_id:18 18
046A9A 09          0072*  	db 9 ; poly_id:19 19
046A9B 09          0073*  	db 9 ; poly_id:20 20
046A9C 09          0074*  	db 9 ; poly_id:21 21
046A9D 09          0075*  	db 9 ; poly_id:22 22
046A9E 09          0076*  	db 9 ; poly_id:23 23
046A9F 0A          0077*  	db 10 ; poly_id:24 24
046AA0 0B          0078*  	db 11 ; poly_id:25 25
046AA1 0C          0079*  	db 12 ; poly_id:26 26
046AA2 0D          0080*  	db 13 ; poly_id:27 27
046AA3 0E          0081*  	db 14 ; poly_id:28 28
046AA4 0F          0082*  	db 15 ; poly_id:29 29
046AA5 10          0083*  	db 16 ; poly_id:30 30
046AA6 10          0084*  	db 16 ; poly_id:31 31
046AA7 10          0085*  	db 16 ; poly_id:32 32
046AA8 10          0086*  	db 16 ; poly_id:33 33
046AA9 10          0087*  	db 16 ; poly_id:34 34
046AAA 11          0088*  	db 17 ; poly_id:35 35
046AAB 12          0089*  	db 18 ; poly_id:36 36
046AAC 13          0090*  	db 19 ; poly_id:37 37
046AAD 14          0091*  	db 20 ; poly_id:38 38
046AAE 15          0092*  	db 21 ; poly_id:39 39
046AAF 15          0093*  	db 21 ; poly_id:40 40
046AB0 15          0094*  	db 21 ; poly_id:41 41
046AB1 16          0095*  	db 22 ; poly_id:42 42
046AB2 17          0096*  	db 23 ; poly_id:43 43
046AB3 18          0097*  	db 24 ; poly_id:44 44
046AB4             0098*  
046AB4             0099*  cube_img_idx_lookup:
046AB4             0100*  ;	 img_idx,  bank_id,  obj_id,  tile_name
046AB4 00 01 00    0101*  	dl BUF_10_004 ; idx:0 render_obj_id:10 LIGHT GREY WALL
046AB7 19 01 00    0102*  	dl BUF_11_004 ; idx:1 render_obj_id:11 JAIL CELL
046ABA 32 01 00    0103*  	dl BUF_12_004 ; idx:2 render_obj_id:12 STONE ARCH BIRD
046ABD 4B 01 00    0104*  	dl BUF_13_004 ; idx:3 render_obj_id:13 DARK GREY WALL
046AC0 64 01 00    0105*  	dl BUF_14_004 ; idx:4 render_obj_id:14 WOOD WALL
046AC3 7D 01 00    0106*  	dl BUF_15_004 ; idx:5 render_obj_id:15 HANGING FLAG
046AC6 96 01 00    0107*  	dl BUF_16_004 ; idx:6 render_obj_id:16 WOOD EAGLE
046AC9 AF 01 00    0108*  	dl BUF_17_004 ; idx:7 render_obj_id:17 BLUE WALL
046ACC C8 01 00    0109*  	dl BUF_57_004 ; idx:8 render_obj_id:57 REGULAR DOOR
046ACF E1 01 00    0110*  	dl BUF_58_004 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
046AD2 FA 01 00    0111*  	dl BUF_59_004 ; idx:10 render_obj_id:59 ELEVATOR DOOR
046AD5             0112*  
046AD5             0113*  ; map_delta_x,  map_delta_y
046AD5             0114*  polys_map_deltas_0: ; north orientation
046AD5 FC FB       0115*  	db 0xFC,0xFB ; poly_id:0 00
046AD7 FD FB       0116*  	db 0xFD,0xFB ; poly_id:1 01
046AD9 FE FB       0117*  	db 0xFE,0xFB ; poly_id:2 02
046ADB FF FB       0118*  	db 0xFF,0xFB ; poly_id:3 03
046ADD 00 FB       0119*  	db 0x00,0xFB ; poly_id:4 04
046ADF 01 FB       0120*  	db 0x01,0xFB ; poly_id:5 05
046AE1 02 FB       0121*  	db 0x02,0xFB ; poly_id:6 06
046AE3 03 FB       0122*  	db 0x03,0xFB ; poly_id:7 07
046AE5 04 FB       0123*  	db 0x04,0xFB ; poly_id:8 08
046AE7 FC FC       0124*  	db 0xFC,0xFC ; poly_id:9 09
046AE9 FD FC       0125*  	db 0xFD,0xFC ; poly_id:10 0A
046AEB FE FC       0126*  	db 0xFE,0xFC ; poly_id:11 0B
046AED FF FC       0127*  	db 0xFF,0xFC ; poly_id:12 0C
046AEF 01 FC       0128*  	db 0x01,0xFC ; poly_id:13 0D
046AF1 02 FC       0129*  	db 0x02,0xFC ; poly_id:14 0E
046AF3 03 FC       0130*  	db 0x03,0xFC ; poly_id:15 0F
046AF5 04 FC       0131*  	db 0x04,0xFC ; poly_id:16 10
046AF7 FD FC       0132*  	db 0xFD,0xFC ; poly_id:17 11
046AF9 FE FC       0133*  	db 0xFE,0xFC ; poly_id:18 12
046AFB FF FC       0134*  	db 0xFF,0xFC ; poly_id:19 13
046AFD 00 FC       0135*  	db 0x00,0xFC ; poly_id:20 14
046AFF 01 FC       0136*  	db 0x01,0xFC ; poly_id:21 15
046B01 02 FC       0137*  	db 0x02,0xFC ; poly_id:22 16
046B03 03 FC       0138*  	db 0x03,0xFC ; poly_id:23 17
046B05 FD FD       0139*  	db 0xFD,0xFD ; poly_id:24 18
046B07 FE FD       0140*  	db 0xFE,0xFD ; poly_id:25 19
046B09 FF FD       0141*  	db 0xFF,0xFD ; poly_id:26 1A
046B0B 01 FD       0142*  	db 0x01,0xFD ; poly_id:27 1B
046B0D 02 FD       0143*  	db 0x02,0xFD ; poly_id:28 1C
046B0F 03 FD       0144*  	db 0x03,0xFD ; poly_id:29 1D
046B11 FE FD       0145*  	db 0xFE,0xFD ; poly_id:30 1E
046B13 FF FD       0146*  	db 0xFF,0xFD ; poly_id:31 1F
046B15 00 FD       0147*  	db 0x00,0xFD ; poly_id:32 20
046B17 01 FD       0148*  	db 0x01,0xFD ; poly_id:33 21
046B19 02 FD       0149*  	db 0x02,0xFD ; poly_id:34 22
046B1B FE FE       0150*  	db 0xFE,0xFE ; poly_id:35 23
046B1D FF FE       0151*  	db 0xFF,0xFE ; poly_id:36 24
046B1F 01 FE       0152*  	db 0x01,0xFE ; poly_id:37 25
046B21 02 FE       0153*  	db 0x02,0xFE ; poly_id:38 26
046B23 FF FE       0154*  	db 0xFF,0xFE ; poly_id:39 27
046B25 00 FE       0155*  	db 0x00,0xFE ; poly_id:40 28
046B27 01 FE       0156*  	db 0x01,0xFE ; poly_id:41 29
046B29 FF FF       0157*  	db 0xFF,0xFF ; poly_id:42 2A
046B2B 01 FF       0158*  	db 0x01,0xFF ; poly_id:43 2B
046B2D 00 FF       0159*  	db 0x00,0xFF ; poly_id:44 2C
046B2F             0160*  
046B2F             0161*  polys_map_deltas_1: ; east orientation
046B2F 05 FC       0162*  	db 0x05,0xFC ; poly_id:0 00
046B31 05 FD       0163*  	db 0x05,0xFD ; poly_id:1 01
046B33 05 FE       0164*  	db 0x05,0xFE ; poly_id:2 02
046B35 05 FF       0165*  	db 0x05,0xFF ; poly_id:3 03
046B37 05 00       0166*  	db 0x05,0x00 ; poly_id:4 04
046B39 05 01       0167*  	db 0x05,0x01 ; poly_id:5 05
046B3B 05 02       0168*  	db 0x05,0x02 ; poly_id:6 06
046B3D 05 03       0169*  	db 0x05,0x03 ; poly_id:7 07
046B3F 05 04       0170*  	db 0x05,0x04 ; poly_id:8 08
046B41 04 FC       0171*  	db 0x04,0xFC ; poly_id:9 09
046B43 04 FD       0172*  	db 0x04,0xFD ; poly_id:10 0A
046B45 04 FE       0173*  	db 0x04,0xFE ; poly_id:11 0B
046B47 04 FF       0174*  	db 0x04,0xFF ; poly_id:12 0C
046B49 04 01       0175*  	db 0x04,0x01 ; poly_id:13 0D
046B4B 04 02       0176*  	db 0x04,0x02 ; poly_id:14 0E
046B4D 04 03       0177*  	db 0x04,0x03 ; poly_id:15 0F
046B4F 04 04       0178*  	db 0x04,0x04 ; poly_id:16 10
046B51 04 FD       0179*  	db 0x04,0xFD ; poly_id:17 11
046B53 04 FE       0180*  	db 0x04,0xFE ; poly_id:18 12
046B55 04 FF       0181*  	db 0x04,0xFF ; poly_id:19 13
046B57 04 00       0182*  	db 0x04,0x00 ; poly_id:20 14
046B59 04 01       0183*  	db 0x04,0x01 ; poly_id:21 15
046B5B 04 02       0184*  	db 0x04,0x02 ; poly_id:22 16
046B5D 04 03       0185*  	db 0x04,0x03 ; poly_id:23 17
046B5F 03 FD       0186*  	db 0x03,0xFD ; poly_id:24 18
046B61 03 FE       0187*  	db 0x03,0xFE ; poly_id:25 19
046B63 03 FF       0188*  	db 0x03,0xFF ; poly_id:26 1A
046B65 03 01       0189*  	db 0x03,0x01 ; poly_id:27 1B
046B67 03 02       0190*  	db 0x03,0x02 ; poly_id:28 1C
046B69 03 03       0191*  	db 0x03,0x03 ; poly_id:29 1D
046B6B 03 FE       0192*  	db 0x03,0xFE ; poly_id:30 1E
046B6D 03 FF       0193*  	db 0x03,0xFF ; poly_id:31 1F
046B6F 03 00       0194*  	db 0x03,0x00 ; poly_id:32 20
046B71 03 01       0195*  	db 0x03,0x01 ; poly_id:33 21
046B73 03 02       0196*  	db 0x03,0x02 ; poly_id:34 22
046B75 02 FE       0197*  	db 0x02,0xFE ; poly_id:35 23
046B77 02 FF       0198*  	db 0x02,0xFF ; poly_id:36 24
046B79 02 01       0199*  	db 0x02,0x01 ; poly_id:37 25
046B7B 02 02       0200*  	db 0x02,0x02 ; poly_id:38 26
046B7D 02 FF       0201*  	db 0x02,0xFF ; poly_id:39 27
046B7F 02 00       0202*  	db 0x02,0x00 ; poly_id:40 28
046B81 02 01       0203*  	db 0x02,0x01 ; poly_id:41 29
046B83 01 FF       0204*  	db 0x01,0xFF ; poly_id:42 2A
046B85 01 01       0205*  	db 0x01,0x01 ; poly_id:43 2B
046B87 01 00       0206*  	db 0x01,0x00 ; poly_id:44 2C
046B89             0207*  
046B89             0208*  polys_map_deltas_2: ; south orientation
046B89 04 05       0209*  	db 0x04,0x05 ; poly_id:0 00
046B8B 03 05       0210*  	db 0x03,0x05 ; poly_id:1 01
046B8D 02 05       0211*  	db 0x02,0x05 ; poly_id:2 02
046B8F 01 05       0212*  	db 0x01,0x05 ; poly_id:3 03
046B91 00 05       0213*  	db 0x00,0x05 ; poly_id:4 04
046B93 FF 05       0214*  	db 0xFF,0x05 ; poly_id:5 05
046B95 FE 05       0215*  	db 0xFE,0x05 ; poly_id:6 06
046B97 FD 05       0216*  	db 0xFD,0x05 ; poly_id:7 07
046B99 FC 05       0217*  	db 0xFC,0x05 ; poly_id:8 08
046B9B 04 04       0218*  	db 0x04,0x04 ; poly_id:9 09
046B9D 03 04       0219*  	db 0x03,0x04 ; poly_id:10 0A
046B9F 02 04       0220*  	db 0x02,0x04 ; poly_id:11 0B
046BA1 01 04       0221*  	db 0x01,0x04 ; poly_id:12 0C
046BA3 FF 04       0222*  	db 0xFF,0x04 ; poly_id:13 0D
046BA5 FE 04       0223*  	db 0xFE,0x04 ; poly_id:14 0E
046BA7 FD 04       0224*  	db 0xFD,0x04 ; poly_id:15 0F
046BA9 FC 04       0225*  	db 0xFC,0x04 ; poly_id:16 10
046BAB 03 04       0226*  	db 0x03,0x04 ; poly_id:17 11
046BAD 02 04       0227*  	db 0x02,0x04 ; poly_id:18 12
046BAF 01 04       0228*  	db 0x01,0x04 ; poly_id:19 13
046BB1 00 04       0229*  	db 0x00,0x04 ; poly_id:20 14
046BB3 FF 04       0230*  	db 0xFF,0x04 ; poly_id:21 15
046BB5 FE 04       0231*  	db 0xFE,0x04 ; poly_id:22 16
046BB7 FD 04       0232*  	db 0xFD,0x04 ; poly_id:23 17
046BB9 03 03       0233*  	db 0x03,0x03 ; poly_id:24 18
046BBB 02 03       0234*  	db 0x02,0x03 ; poly_id:25 19
046BBD 01 03       0235*  	db 0x01,0x03 ; poly_id:26 1A
046BBF FF 03       0236*  	db 0xFF,0x03 ; poly_id:27 1B
046BC1 FE 03       0237*  	db 0xFE,0x03 ; poly_id:28 1C
046BC3 FD 03       0238*  	db 0xFD,0x03 ; poly_id:29 1D
046BC5 02 03       0239*  	db 0x02,0x03 ; poly_id:30 1E
046BC7 01 03       0240*  	db 0x01,0x03 ; poly_id:31 1F
046BC9 00 03       0241*  	db 0x00,0x03 ; poly_id:32 20
046BCB FF 03       0242*  	db 0xFF,0x03 ; poly_id:33 21
046BCD FE 03       0243*  	db 0xFE,0x03 ; poly_id:34 22
046BCF 02 02       0244*  	db 0x02,0x02 ; poly_id:35 23
046BD1 01 02       0245*  	db 0x01,0x02 ; poly_id:36 24
046BD3 FF 02       0246*  	db 0xFF,0x02 ; poly_id:37 25
046BD5 FE 02       0247*  	db 0xFE,0x02 ; poly_id:38 26
046BD7 01 02       0248*  	db 0x01,0x02 ; poly_id:39 27
046BD9 00 02       0249*  	db 0x00,0x02 ; poly_id:40 28
046BDB FF 02       0250*  	db 0xFF,0x02 ; poly_id:41 29
046BDD 01 01       0251*  	db 0x01,0x01 ; poly_id:42 2A
046BDF FF 01       0252*  	db 0xFF,0x01 ; poly_id:43 2B
046BE1 00 01       0253*  	db 0x00,0x01 ; poly_id:44 2C
046BE3             0254*  
046BE3             0255*  polys_map_deltas_3: ; west orientation
046BE3 FB 04       0256*  	db 0xFB,0x04 ; poly_id:0 00
046BE5 FB 03       0257*  	db 0xFB,0x03 ; poly_id:1 01
046BE7 FB 02       0258*  	db 0xFB,0x02 ; poly_id:2 02
046BE9 FB 01       0259*  	db 0xFB,0x01 ; poly_id:3 03
046BEB FB 00       0260*  	db 0xFB,0x00 ; poly_id:4 04
046BED FB FF       0261*  	db 0xFB,0xFF ; poly_id:5 05
046BEF FB FE       0262*  	db 0xFB,0xFE ; poly_id:6 06
046BF1 FB FD       0263*  	db 0xFB,0xFD ; poly_id:7 07
046BF3 FB FC       0264*  	db 0xFB,0xFC ; poly_id:8 08
046BF5 FC 04       0265*  	db 0xFC,0x04 ; poly_id:9 09
046BF7 FC 03       0266*  	db 0xFC,0x03 ; poly_id:10 0A
046BF9 FC 02       0267*  	db 0xFC,0x02 ; poly_id:11 0B
046BFB FC 01       0268*  	db 0xFC,0x01 ; poly_id:12 0C
046BFD FC FF       0269*  	db 0xFC,0xFF ; poly_id:13 0D
046BFF FC FE       0270*  	db 0xFC,0xFE ; poly_id:14 0E
046C01 FC FD       0271*  	db 0xFC,0xFD ; poly_id:15 0F
046C03 FC FC       0272*  	db 0xFC,0xFC ; poly_id:16 10
046C05 FC 03       0273*  	db 0xFC,0x03 ; poly_id:17 11
046C07 FC 02       0274*  	db 0xFC,0x02 ; poly_id:18 12
046C09 FC 01       0275*  	db 0xFC,0x01 ; poly_id:19 13
046C0B FC 00       0276*  	db 0xFC,0x00 ; poly_id:20 14
046C0D FC FF       0277*  	db 0xFC,0xFF ; poly_id:21 15
046C0F FC FE       0278*  	db 0xFC,0xFE ; poly_id:22 16
046C11 FC FD       0279*  	db 0xFC,0xFD ; poly_id:23 17
046C13 FD 03       0280*  	db 0xFD,0x03 ; poly_id:24 18
046C15 FD 02       0281*  	db 0xFD,0x02 ; poly_id:25 19
046C17 FD 01       0282*  	db 0xFD,0x01 ; poly_id:26 1A
046C19 FD FF       0283*  	db 0xFD,0xFF ; poly_id:27 1B
046C1B FD FE       0284*  	db 0xFD,0xFE ; poly_id:28 1C
046C1D FD FD       0285*  	db 0xFD,0xFD ; poly_id:29 1D
046C1F FD 02       0286*  	db 0xFD,0x02 ; poly_id:30 1E
046C21 FD 01       0287*  	db 0xFD,0x01 ; poly_id:31 1F
046C23 FD 00       0288*  	db 0xFD,0x00 ; poly_id:32 20
046C25 FD FF       0289*  	db 0xFD,0xFF ; poly_id:33 21
046C27 FD FE       0290*  	db 0xFD,0xFE ; poly_id:34 22
046C29 FE 02       0291*  	db 0xFE,0x02 ; poly_id:35 23
046C2B FE 01       0292*  	db 0xFE,0x01 ; poly_id:36 24
046C2D FE FF       0293*  	db 0xFE,0xFF ; poly_id:37 25
046C2F FE FE       0294*  	db 0xFE,0xFE ; poly_id:38 26
046C31 FE 01       0295*  	db 0xFE,0x01 ; poly_id:39 27
046C33 FE 00       0296*  	db 0xFE,0x00 ; poly_id:40 28
046C35 FE FF       0297*  	db 0xFE,0xFF ; poly_id:41 29
046C37 FF 01       0298*  	db 0xFF,0x01 ; poly_id:42 2A
046C39 FF FF       0299*  	db 0xFF,0xFF ; poly_id:43 2B
046C3B FF 00       0300*  	db 0xFF,0x00 ; poly_id:44 2C
046C3D             0301*  
046C3D             0302*  num_sprite_polys: equ 25
046C3D             0303*  
046C3D             0304*  sprite_polys_lookup:
046C3D             0305*  ;south_id 	; poly_id
046C3D 00          0306*  	db 0	; 0
046C3E 01          0307*  	db 1	; 1
046C3F 02          0308*  	db 2	; 2
046C40 03          0309*  	db 3	; 3
046C41 04          0310*  	db 4	; 4
046C42 05          0311*  	db 5	; 5
046C43 06          0312*  	db 6	; 6
046C44 07          0313*  	db 7	; 7
046C45 08          0314*  	db 8	; 8
046C46 FF          0315*  	db 255	; 9
046C47 FF          0316*  	db 255	; 10
046C48 FF          0317*  	db 255	; 11
046C49 FF          0318*  	db 255	; 12
046C4A FF          0319*  	db 255	; 13
046C4B FF          0320*  	db 255	; 14
046C4C FF          0321*  	db 255	; 15
046C4D FF          0322*  	db 255	; 16
046C4E 09          0323*  	db 9	; 17
046C4F 0A          0324*  	db 10	; 18
046C50 0B          0325*  	db 11	; 19
046C51 0C          0326*  	db 12	; 20
046C52 0D          0327*  	db 13	; 21
046C53 0E          0328*  	db 14	; 22
046C54 0F          0329*  	db 15	; 23
046C55 FF          0330*  	db 255	; 24
046C56 FF          0331*  	db 255	; 25
046C57 FF          0332*  	db 255	; 26
046C58 FF          0333*  	db 255	; 27
046C59 FF          0334*  	db 255	; 28
046C5A FF          0335*  	db 255	; 29
046C5B 10          0336*  	db 16	; 30
046C5C 11          0337*  	db 17	; 31
046C5D 12          0338*  	db 18	; 32
046C5E 13          0339*  	db 19	; 33
046C5F 14          0340*  	db 20	; 34
046C60 FF          0341*  	db 255	; 35
046C61 FF          0342*  	db 255	; 36
046C62 FF          0343*  	db 255	; 37
046C63 FF          0344*  	db 255	; 38
046C64 15          0345*  	db 21	; 39
046C65 16          0346*  	db 22	; 40
046C66 17          0347*  	db 23	; 41
046C67 FF          0348*  	db 255	; 42
046C68 FF          0349*  	db 255	; 43
046C69 18          0350*  	db 24	; 44
046C6A             0351*  
046C6A             0352*  sprite_imgs_lookup:
046C6A             0353*  ;	 sprite_obj; render_obj_id
046C6A A0 6C 04    0354*  	dl sprite_obj_000 ; render_obj_id:20
046C6D 81 6D 04    0355*  	dl sprite_obj_001 ; render_obj_id:21
046C70 62 6E 04    0356*  	dl sprite_obj_002 ; render_obj_id:22
046C73 43 6F 04    0357*  	dl sprite_obj_003 ; render_obj_id:23
046C76 24 70 04    0358*  	dl sprite_obj_004 ; render_obj_id:24
046C79 05 71 04    0359*  	dl sprite_obj_005 ; render_obj_id:40
046C7C E6 71 04    0360*  	dl sprite_obj_006 ; render_obj_id:41
046C7F C7 72 04    0361*  	dl sprite_obj_007 ; render_obj_id:42
046C82 A8 73 04    0362*  	dl sprite_obj_008 ; render_obj_id:43
046C85 89 74 04    0363*  	dl sprite_obj_009 ; render_obj_id:44
046C88 6A 75 04    0364*  	dl sprite_obj_010 ; render_obj_id:45
046C8B 4B 76 04    0365*  	dl sprite_obj_011 ; render_obj_id:46
046C8E 2C 77 04    0366*  	dl sprite_obj_012 ; render_obj_id:47
046C91 0D 78 04    0367*  	dl sprite_obj_013 ; render_obj_id:48
046C94 EE 78 04    0368*  	dl sprite_obj_014 ; render_obj_id:49
046C97 CF 79 04    0369*  	dl sprite_obj_015 ; render_obj_id:50
046C9A B0 7A 04    0370*  	dl sprite_obj_016 ; render_obj_id:51
046C9D 91 7B 04    0371*  	dl sprite_obj_017 ; render_obj_id:52
046CA0             0372*  ;	 plot_x,  plot_y, buffer_label
046CA0             0373*  
046CA0             0374*  ; render_obj_id:20
046CA0             0375*  sprite_obj_000:
046CA0 09 00 00 4E 0376*  	dl 0x000009,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CA9 2C 00 00 4E 0377*  	dl 0x00002C,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CB2 50 00 00 4E 0378*  	dl 0x000050,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CBB 73 00 00 4E 0379*  	dl 0x000073,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CC4 97 00 00 4E 0380*  	dl 0x000097,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CCD BA 00 00 4E 0381*  	dl 0x0000BA,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CD6 DE 00 00 4E 0382*  	dl 0x0000DE,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CDF 01 01 00 4E 0383*  	dl 0x000101,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CE8 25 01 00 4E 0384*  	dl 0x000125,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CF1 0B 00 00 4E 0385*  	dl 0x00000B,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046CFA 39 00 00 4E 0386*  	dl 0x000039,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D03 66 00 00 4E 0387*  	dl 0x000066,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D0C 94 00 00 4E 0388*  	dl 0x000094,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D15 C1 00 00 4E 0389*  	dl 0x0000C1,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D1E EF 00 00 4E 0390*  	dl 0x0000EF,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D27 1C 01 00 4E 0391*  	dl 0x00011C,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D30 11 00 00 4D 0392*  	dl 0x000011,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D39 50 00 00 4D 0393*  	dl 0x000050,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D42 91 00 00 4D 0394*  	dl 0x000091,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D4B D1 00 00 4D 0395*  	dl 0x0000D1,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D54 11 01 00 4D 0396*  	dl 0x000111,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D5D 1B 00 00 4C 0397*  	dl 0x00001B,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D66 85 00 00 4C 0398*  	dl 0x000085,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D6F F0 00 00 4C 0399*  	dl 0x0000F0,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D78 6B 00 00 44 0400*  	dl 0x00006B,0x000044,BUF_20_044
       00 00 17 02 
       00          
046D81             0401*  
046D81             0402*  ; render_obj_id:21
046D81             0403*  sprite_obj_001:
046D81 0D 00 00 55 0404*  	dl 0x00000D,0x000055,BUF_21_004
       00 00 18 02 
       00          
046D8A 30 00 00 55 0405*  	dl 0x000030,0x000055,BUF_21_004
       00 00 18 02 
       00          
046D93 54 00 00 55 0406*  	dl 0x000054,0x000055,BUF_21_004
       00 00 18 02 
       00          
046D9C 77 00 00 55 0407*  	dl 0x000077,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DA5 9B 00 00 55 0408*  	dl 0x00009B,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DAE BE 00 00 55 0409*  	dl 0x0000BE,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DB7 E2 00 00 55 0410*  	dl 0x0000E2,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DC0 05 01 00 55 0411*  	dl 0x000105,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DC9 29 01 00 55 0412*  	dl 0x000129,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DD2 10 00 00 57 0413*  	dl 0x000010,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DDB 3E 00 00 57 0414*  	dl 0x00003E,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DE4 6B 00 00 57 0415*  	dl 0x00006B,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DED 99 00 00 57 0416*  	dl 0x000099,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DF6 C6 00 00 57 0417*  	dl 0x0000C6,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DFF F4 00 00 57 0418*  	dl 0x0000F4,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E08 21 01 00 57 0419*  	dl 0x000121,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E11 16 00 00 5A 0420*  	dl 0x000016,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E1A 55 00 00 5A 0421*  	dl 0x000055,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E23 96 00 00 5A 0422*  	dl 0x000096,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E2C D6 00 00 5A 0423*  	dl 0x0000D6,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E35 16 01 00 5A 0424*  	dl 0x000116,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E3E 26 00 00 60 0425*  	dl 0x000026,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E47 90 00 00 60 0426*  	dl 0x000090,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E50 FB 00 00 60 0427*  	dl 0x0000FB,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E59 6E 00 00 82 0428*  	dl 0x00006E,0x000082,BUF_21_044
       00 00 1C 02 
       00          
046E62             0429*  
046E62             0430*  ; render_obj_id:22
046E62             0431*  sprite_obj_002:
046E62 09 00 00 55 0432*  	dl 0x000009,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E6B 2C 00 00 55 0433*  	dl 0x00002C,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E74 50 00 00 55 0434*  	dl 0x000050,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E7D 73 00 00 55 0435*  	dl 0x000073,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E86 97 00 00 55 0436*  	dl 0x000097,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E8F BA 00 00 55 0437*  	dl 0x0000BA,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E98 DE 00 00 55 0438*  	dl 0x0000DE,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EA1 01 01 00 55 0439*  	dl 0x000101,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EAA 25 01 00 55 0440*  	dl 0x000125,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EB3 0B 00 00 57 0441*  	dl 0x00000B,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EBC 39 00 00 57 0442*  	dl 0x000039,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EC5 66 00 00 57 0443*  	dl 0x000066,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046ECE 94 00 00 57 0444*  	dl 0x000094,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046ED7 C1 00 00 57 0445*  	dl 0x0000C1,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EE0 EF 00 00 57 0446*  	dl 0x0000EF,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EE9 1C 01 00 57 0447*  	dl 0x00011C,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EF2 10 00 00 5A 0448*  	dl 0x000010,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046EFB 4F 00 00 5A 0449*  	dl 0x00004F,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F04 90 00 00 5A 0450*  	dl 0x000090,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F0D D0 00 00 5A 0451*  	dl 0x0000D0,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F16 10 01 00 5A 0452*  	dl 0x000110,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F1F 1B 00 00 60 0453*  	dl 0x00001B,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F28 85 00 00 60 0454*  	dl 0x000085,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F31 F0 00 00 60 0455*  	dl 0x0000F0,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F3A 50 00 00 82 0456*  	dl 0x000050,0x000082,BUF_22_044
       00 00 21 02 
       00          
046F43             0457*  
046F43             0458*  ; render_obj_id:23
046F43             0459*  sprite_obj_003:
046F43 0C 00 00 3E 0460*  	dl 0x00000C,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F4C 2F 00 00 3E 0461*  	dl 0x00002F,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F55 53 00 00 3E 0462*  	dl 0x000053,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F5E 76 00 00 3E 0463*  	dl 0x000076,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F67 9A 00 00 3E 0464*  	dl 0x00009A,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F70 BD 00 00 3E 0465*  	dl 0x0000BD,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F79 E1 00 00 3E 0466*  	dl 0x0000E1,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F82 04 01 00 3E 0467*  	dl 0x000104,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F8B 28 01 00 3E 0468*  	dl 0x000128,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F94 0F 00 00 39 0469*  	dl 0x00000F,0x000039,BUF_23_020
       00 00 23 02 
       00          
046F9D 3D 00 00 39 0470*  	dl 0x00003D,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FA6 6A 00 00 39 0471*  	dl 0x00006A,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FAF 98 00 00 39 0472*  	dl 0x000098,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FB8 C5 00 00 39 0473*  	dl 0x0000C5,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FC1 F3 00 00 39 0474*  	dl 0x0000F3,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FCA 20 01 00 39 0475*  	dl 0x000120,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FD3 16 00 00 30 0476*  	dl 0x000016,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FDC 55 00 00 30 0477*  	dl 0x000055,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FE5 96 00 00 30 0478*  	dl 0x000096,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FEE D6 00 00 30 0479*  	dl 0x0000D6,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FF7 16 01 00 30 0480*  	dl 0x000116,0x000030,BUF_23_032
       00 00 24 02 
       00          
047000 24 00 00 1A 0481*  	dl 0x000024,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047009 8E 00 00 1A 0482*  	dl 0x00008E,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047012 F9 00 00 1A 0483*  	dl 0x0000F9,0x00001A,BUF_23_040
       00 00 25 02 
       00          
04701B 09 01 00 83 0484*  	dl 0x000109,0x000083,BUF_23_044
       00 00 26 02 
       00          
047024             0485*  
047024             0486*  ; render_obj_id:24
047024             0487*  sprite_obj_004:
047024 0D 00 00 55 0488*  	dl 0x00000D,0x000055,BUF_24_004
       00 00 27 02 
       00          
04702D 30 00 00 55 0489*  	dl 0x000030,0x000055,BUF_24_004
       00 00 27 02 
       00          
047036 54 00 00 55 0490*  	dl 0x000054,0x000055,BUF_24_004
       00 00 27 02 
       00          
04703F 77 00 00 55 0491*  	dl 0x000077,0x000055,BUF_24_004
       00 00 27 02 
       00          
047048 9B 00 00 55 0492*  	dl 0x00009B,0x000055,BUF_24_004
       00 00 27 02 
       00          
047051 BE 00 00 55 0493*  	dl 0x0000BE,0x000055,BUF_24_004
       00 00 27 02 
       00          
04705A E2 00 00 55 0494*  	dl 0x0000E2,0x000055,BUF_24_004
       00 00 27 02 
       00          
047063 05 01 00 55 0495*  	dl 0x000105,0x000055,BUF_24_004
       00 00 27 02 
       00          
04706C 29 01 00 55 0496*  	dl 0x000129,0x000055,BUF_24_004
       00 00 27 02 
       00          
047075 10 00 00 57 0497*  	dl 0x000010,0x000057,BUF_24_020
       00 00 28 02 
       00          
04707E 3E 00 00 57 0498*  	dl 0x00003E,0x000057,BUF_24_020
       00 00 28 02 
       00          
047087 6B 00 00 57 0499*  	dl 0x00006B,0x000057,BUF_24_020
       00 00 28 02 
       00          
047090 99 00 00 57 0500*  	dl 0x000099,0x000057,BUF_24_020
       00 00 28 02 
       00          
047099 C6 00 00 57 0501*  	dl 0x0000C6,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470A2 F4 00 00 57 0502*  	dl 0x0000F4,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470AB 21 01 00 57 0503*  	dl 0x000121,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470B4 16 00 00 5A 0504*  	dl 0x000016,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470BD 55 00 00 5A 0505*  	dl 0x000055,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470C6 96 00 00 5A 0506*  	dl 0x000096,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470CF D6 00 00 5A 0507*  	dl 0x0000D6,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470D8 16 01 00 5A 0508*  	dl 0x000116,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470E1 26 00 00 60 0509*  	dl 0x000026,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0470EA 90 00 00 60 0510*  	dl 0x000090,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0470F3 FB 00 00 60 0511*  	dl 0x0000FB,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0470FC 6E 00 00 82 0512*  	dl 0x00006E,0x000082,BUF_24_044
       00 00 2B 02 
       00          
047105             0513*  
047105             0514*  ; render_obj_id:40
047105             0515*  sprite_obj_005:
047105 0A 00 00 5A 0516*  	dl 0x00000A,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04710E 2D 00 00 5A 0517*  	dl 0x00002D,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047117 51 00 00 5A 0518*  	dl 0x000051,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047120 74 00 00 5A 0519*  	dl 0x000074,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047129 98 00 00 5A 0520*  	dl 0x000098,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047132 BB 00 00 5A 0521*  	dl 0x0000BB,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04713B DF 00 00 5A 0522*  	dl 0x0000DF,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047144 02 01 00 5A 0523*  	dl 0x000102,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04714D 26 01 00 5A 0524*  	dl 0x000126,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047156 0D 00 00 5C 0525*  	dl 0x00000D,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04715F 3B 00 00 5C 0526*  	dl 0x00003B,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047168 68 00 00 5C 0527*  	dl 0x000068,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047171 96 00 00 5C 0528*  	dl 0x000096,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04717A C3 00 00 5C 0529*  	dl 0x0000C3,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047183 F1 00 00 5C 0530*  	dl 0x0000F1,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04718C 1E 01 00 5C 0531*  	dl 0x00011E,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047195 13 00 00 62 0532*  	dl 0x000013,0x000062,BUF_40_032
       00 00 2E 02 
       00          
04719E 52 00 00 62 0533*  	dl 0x000052,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471A7 93 00 00 62 0534*  	dl 0x000093,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471B0 D3 00 00 62 0535*  	dl 0x0000D3,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471B9 13 01 00 62 0536*  	dl 0x000113,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471C2 20 00 00 6D 0537*  	dl 0x000020,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471CB 8A 00 00 6D 0538*  	dl 0x00008A,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471D4 F5 00 00 6D 0539*  	dl 0x0000F5,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471DD E0 00 00 A0 0540*  	dl 0x0000E0,0x0000A0,BUF_40_044
       00 00 30 02 
       00          
0471E6             0541*  
0471E6             0542*  ; render_obj_id:41
0471E6             0543*  sprite_obj_006:
0471E6 0C 00 00 55 0544*  	dl 0x00000C,0x000055,BUF_41_004
       00 00 31 02 
       00          
0471EF 2F 00 00 55 0545*  	dl 0x00002F,0x000055,BUF_41_004
       00 00 31 02 
       00          
0471F8 53 00 00 55 0546*  	dl 0x000053,0x000055,BUF_41_004
       00 00 31 02 
       00          
047201 76 00 00 55 0547*  	dl 0x000076,0x000055,BUF_41_004
       00 00 31 02 
       00          
04720A 9A 00 00 55 0548*  	dl 0x00009A,0x000055,BUF_41_004
       00 00 31 02 
       00          
047213 BD 00 00 55 0549*  	dl 0x0000BD,0x000055,BUF_41_004
       00 00 31 02 
       00          
04721C E1 00 00 55 0550*  	dl 0x0000E1,0x000055,BUF_41_004
       00 00 31 02 
       00          
047225 04 01 00 55 0551*  	dl 0x000104,0x000055,BUF_41_004
       00 00 31 02 
       00          
04722E 28 01 00 55 0552*  	dl 0x000128,0x000055,BUF_41_004
       00 00 31 02 
       00          
047237 0E 00 00 57 0553*  	dl 0x00000E,0x000057,BUF_41_020
       00 00 32 02 
       00          
047240 3C 00 00 57 0554*  	dl 0x00003C,0x000057,BUF_41_020
       00 00 32 02 
       00          
047249 69 00 00 57 0555*  	dl 0x000069,0x000057,BUF_41_020
       00 00 32 02 
       00          
047252 97 00 00 57 0556*  	dl 0x000097,0x000057,BUF_41_020
       00 00 32 02 
       00          
04725B C4 00 00 57 0557*  	dl 0x0000C4,0x000057,BUF_41_020
       00 00 32 02 
       00          
047264 F2 00 00 57 0558*  	dl 0x0000F2,0x000057,BUF_41_020
       00 00 32 02 
       00          
04726D 1F 01 00 57 0559*  	dl 0x00011F,0x000057,BUF_41_020
       00 00 32 02 
       00          
047276 15 00 00 5B 0560*  	dl 0x000015,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04727F 54 00 00 5B 0561*  	dl 0x000054,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047288 95 00 00 5B 0562*  	dl 0x000095,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047291 D5 00 00 5B 0563*  	dl 0x0000D5,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04729A 15 01 00 5B 0564*  	dl 0x000115,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0472A3 23 00 00 62 0565*  	dl 0x000023,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472AC 8D 00 00 62 0566*  	dl 0x00008D,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472B5 F8 00 00 62 0567*  	dl 0x0000F8,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472BE 84 00 00 87 0568*  	dl 0x000084,0x000087,BUF_41_044
       00 00 35 02 
       00          
0472C7             0569*  
0472C7             0570*  ; render_obj_id:42
0472C7             0571*  sprite_obj_007:
0472C7 0D 00 00 57 0572*  	dl 0x00000D,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472D0 30 00 00 57 0573*  	dl 0x000030,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472D9 54 00 00 57 0574*  	dl 0x000054,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472E2 77 00 00 57 0575*  	dl 0x000077,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472EB 9B 00 00 57 0576*  	dl 0x00009B,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472F4 BE 00 00 57 0577*  	dl 0x0000BE,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472FD E2 00 00 57 0578*  	dl 0x0000E2,0x000057,BUF_42_004
       00 00 36 02 
       00          
047306 05 01 00 57 0579*  	dl 0x000105,0x000057,BUF_42_004
       00 00 36 02 
       00          
04730F 29 01 00 57 0580*  	dl 0x000129,0x000057,BUF_42_004
       00 00 36 02 
       00          
047318 10 00 00 5A 0581*  	dl 0x000010,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047321 3E 00 00 5A 0582*  	dl 0x00003E,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04732A 6B 00 00 5A 0583*  	dl 0x00006B,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047333 99 00 00 5A 0584*  	dl 0x000099,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04733C C6 00 00 5A 0585*  	dl 0x0000C6,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047345 F4 00 00 5A 0586*  	dl 0x0000F4,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04734E 21 01 00 5A 0587*  	dl 0x000121,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047357 18 00 00 5F 0588*  	dl 0x000018,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047360 57 00 00 5F 0589*  	dl 0x000057,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047369 98 00 00 5F 0590*  	dl 0x000098,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047372 D8 00 00 5F 0591*  	dl 0x0000D8,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04737B 18 01 00 5F 0592*  	dl 0x000118,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047384 28 00 00 69 0593*  	dl 0x000028,0x000069,BUF_42_040
       00 00 39 02 
       00          
04738D 92 00 00 69 0594*  	dl 0x000092,0x000069,BUF_42_040
       00 00 39 02 
       00          
047396 FD 00 00 69 0595*  	dl 0x0000FD,0x000069,BUF_42_040
       00 00 39 02 
       00          
04739F 7D 00 00 9C 0596*  	dl 0x00007D,0x00009C,BUF_42_044
       00 00 3A 02 
       00          
0473A8             0597*  
0473A8             0598*  ; render_obj_id:43
0473A8             0599*  sprite_obj_008:
0473A8 0C 00 00 5C 0600*  	dl 0x00000C,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473B1 2F 00 00 5C 0601*  	dl 0x00002F,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473BA 53 00 00 5C 0602*  	dl 0x000053,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473C3 76 00 00 5C 0603*  	dl 0x000076,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473CC 9A 00 00 5C 0604*  	dl 0x00009A,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473D5 BD 00 00 5C 0605*  	dl 0x0000BD,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473DE E1 00 00 5C 0606*  	dl 0x0000E1,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473E7 04 01 00 5C 0607*  	dl 0x000104,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473F0 28 01 00 5C 0608*  	dl 0x000128,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473F9 0F 00 00 61 0609*  	dl 0x00000F,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047402 3D 00 00 61 0610*  	dl 0x00003D,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04740B 6A 00 00 61 0611*  	dl 0x00006A,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047414 98 00 00 61 0612*  	dl 0x000098,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04741D C5 00 00 61 0613*  	dl 0x0000C5,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047426 F3 00 00 61 0614*  	dl 0x0000F3,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04742F 20 01 00 61 0615*  	dl 0x000120,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047438 15 00 00 68 0616*  	dl 0x000015,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047441 54 00 00 68 0617*  	dl 0x000054,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04744A 95 00 00 68 0618*  	dl 0x000095,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047453 D5 00 00 68 0619*  	dl 0x0000D5,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04745C 15 01 00 68 0620*  	dl 0x000115,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047465 24 00 00 77 0621*  	dl 0x000024,0x000077,BUF_43_040
       00 00 3E 02 
       00          
04746E 8E 00 00 77 0622*  	dl 0x00008E,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047477 F9 00 00 77 0623*  	dl 0x0000F9,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047480 D4 00 00 9F 0624*  	dl 0x0000D4,0x00009F,BUF_43_044
       00 00 3F 02 
       00          
047489             0625*  
047489             0626*  ; render_obj_id:44
047489             0627*  sprite_obj_009:
047489 0F 00 00 5C 0628*  	dl 0x00000F,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047492 32 00 00 5C 0629*  	dl 0x000032,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04749B 56 00 00 5C 0630*  	dl 0x000056,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474A4 79 00 00 5C 0631*  	dl 0x000079,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474AD 9D 00 00 5C 0632*  	dl 0x00009D,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474B6 C0 00 00 5C 0633*  	dl 0x0000C0,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474BF E4 00 00 5C 0634*  	dl 0x0000E4,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474C8 07 01 00 5C 0635*  	dl 0x000107,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474D1 2B 01 00 5C 0636*  	dl 0x00012B,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474DA 14 00 00 5F 0637*  	dl 0x000014,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474E3 42 00 00 5F 0638*  	dl 0x000042,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474EC 6F 00 00 5F 0639*  	dl 0x00006F,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474F5 9D 00 00 5F 0640*  	dl 0x00009D,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474FE CA 00 00 5F 0641*  	dl 0x0000CA,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047507 F8 00 00 5F 0642*  	dl 0x0000F8,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047510 25 01 00 5F 0643*  	dl 0x000125,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047519 1B 00 00 66 0644*  	dl 0x00001B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047522 5A 00 00 66 0645*  	dl 0x00005A,0x000066,BUF_44_032
       00 00 42 02 
       00          
04752B 9B 00 00 66 0646*  	dl 0x00009B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047534 DB 00 00 66 0647*  	dl 0x0000DB,0x000066,BUF_44_032
       00 00 42 02 
       00          
04753D 1B 01 00 66 0648*  	dl 0x00011B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047546 2E 00 00 75 0649*  	dl 0x00002E,0x000075,BUF_44_040
       00 00 43 02 
       00          
04754F 98 00 00 75 0650*  	dl 0x000098,0x000075,BUF_44_040
       00 00 43 02 
       00          
047558 03 01 00 75 0651*  	dl 0x000103,0x000075,BUF_44_040
       00 00 43 02 
       00          
047561 C8 00 00 A1 0652*  	dl 0x0000C8,0x0000A1,BUF_44_044
       00 00 44 02 
       00          
04756A             0653*  
04756A             0654*  ; render_obj_id:45
04756A             0655*  sprite_obj_010:
04756A 09 00 00 56 0656*  	dl 0x000009,0x000056,BUF_45_004
       00 00 45 02 
       00          
047573 2C 00 00 56 0657*  	dl 0x00002C,0x000056,BUF_45_004
       00 00 45 02 
       00          
04757C 50 00 00 56 0658*  	dl 0x000050,0x000056,BUF_45_004
       00 00 45 02 
       00          
047585 73 00 00 56 0659*  	dl 0x000073,0x000056,BUF_45_004
       00 00 45 02 
       00          
04758E 97 00 00 56 0660*  	dl 0x000097,0x000056,BUF_45_004
       00 00 45 02 
       00          
047597 BA 00 00 56 0661*  	dl 0x0000BA,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475A0 DE 00 00 56 0662*  	dl 0x0000DE,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475A9 01 01 00 56 0663*  	dl 0x000101,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475B2 25 01 00 56 0664*  	dl 0x000125,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475BB 0C 00 00 58 0665*  	dl 0x00000C,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475C4 3A 00 00 58 0666*  	dl 0x00003A,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475CD 67 00 00 58 0667*  	dl 0x000067,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475D6 95 00 00 58 0668*  	dl 0x000095,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475DF C2 00 00 58 0669*  	dl 0x0000C2,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475E8 F0 00 00 58 0670*  	dl 0x0000F0,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475F1 1D 01 00 58 0671*  	dl 0x00011D,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475FA 11 00 00 5D 0672*  	dl 0x000011,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047603 50 00 00 5D 0673*  	dl 0x000050,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04760C 91 00 00 5D 0674*  	dl 0x000091,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047615 D1 00 00 5D 0675*  	dl 0x0000D1,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04761E 11 01 00 5D 0676*  	dl 0x000111,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047627 1D 00 00 63 0677*  	dl 0x00001D,0x000063,BUF_45_040
       00 00 48 02 
       00          
047630 87 00 00 63 0678*  	dl 0x000087,0x000063,BUF_45_040
       00 00 48 02 
       00          
047639 F2 00 00 63 0679*  	dl 0x0000F2,0x000063,BUF_45_040
       00 00 48 02 
       00          
047642 58 00 00 8D 0680*  	dl 0x000058,0x00008D,BUF_45_044
       00 00 49 02 
       00          
04764B             0681*  
04764B             0682*  ; render_obj_id:46
04764B             0683*  sprite_obj_011:
04764B 09 00 00 58 0684*  	dl 0x000009,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047654 2C 00 00 58 0685*  	dl 0x00002C,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04765D 50 00 00 58 0686*  	dl 0x000050,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047666 73 00 00 58 0687*  	dl 0x000073,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04766F 97 00 00 58 0688*  	dl 0x000097,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047678 BA 00 00 58 0689*  	dl 0x0000BA,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047681 DE 00 00 58 0690*  	dl 0x0000DE,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04768A 01 01 00 58 0691*  	dl 0x000101,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047693 25 01 00 58 0692*  	dl 0x000125,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04769C 0C 00 00 5A 0693*  	dl 0x00000C,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476A5 3A 00 00 5A 0694*  	dl 0x00003A,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476AE 67 00 00 5A 0695*  	dl 0x000067,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476B7 95 00 00 5A 0696*  	dl 0x000095,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476C0 C2 00 00 5A 0697*  	dl 0x0000C2,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476C9 F0 00 00 5A 0698*  	dl 0x0000F0,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476D2 1D 01 00 5A 0699*  	dl 0x00011D,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476DB 11 00 00 60 0700*  	dl 0x000011,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476E4 50 00 00 60 0701*  	dl 0x000050,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476ED 91 00 00 60 0702*  	dl 0x000091,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476F6 D1 00 00 60 0703*  	dl 0x0000D1,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476FF 11 01 00 60 0704*  	dl 0x000111,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047708 1D 00 00 69 0705*  	dl 0x00001D,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047711 87 00 00 69 0706*  	dl 0x000087,0x000069,BUF_46_040
       00 00 4D 02 
       00          
04771A F2 00 00 69 0707*  	dl 0x0000F2,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047723 8E 00 00 9F 0708*  	dl 0x00008E,0x00009F,BUF_46_044
       00 00 4E 02 
       00          
04772C             0709*  
04772C             0710*  ; render_obj_id:47
04772C             0711*  sprite_obj_012:
04772C 09 00 00 57 0712*  	dl 0x000009,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047735 2C 00 00 57 0713*  	dl 0x00002C,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04773E 50 00 00 57 0714*  	dl 0x000050,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047747 73 00 00 57 0715*  	dl 0x000073,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047750 97 00 00 57 0716*  	dl 0x000097,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047759 BA 00 00 57 0717*  	dl 0x0000BA,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047762 DE 00 00 57 0718*  	dl 0x0000DE,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04776B 01 01 00 57 0719*  	dl 0x000101,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047774 25 01 00 57 0720*  	dl 0x000125,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04777D 0C 00 00 59 0721*  	dl 0x00000C,0x000059,BUF_47_020
       00 00 50 02 
       00          
047786 3A 00 00 59 0722*  	dl 0x00003A,0x000059,BUF_47_020
       00 00 50 02 
       00          
04778F 67 00 00 59 0723*  	dl 0x000067,0x000059,BUF_47_020
       00 00 50 02 
       00          
047798 95 00 00 59 0724*  	dl 0x000095,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477A1 C2 00 00 59 0725*  	dl 0x0000C2,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477AA F0 00 00 59 0726*  	dl 0x0000F0,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477B3 1D 01 00 59 0727*  	dl 0x00011D,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477BC 11 00 00 5E 0728*  	dl 0x000011,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477C5 50 00 00 5E 0729*  	dl 0x000050,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477CE 91 00 00 5E 0730*  	dl 0x000091,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477D7 D1 00 00 5E 0731*  	dl 0x0000D1,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477E0 11 01 00 5E 0732*  	dl 0x000111,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477E9 1D 00 00 66 0733*  	dl 0x00001D,0x000066,BUF_47_040
       00 00 52 02 
       00          
0477F2 87 00 00 66 0734*  	dl 0x000087,0x000066,BUF_47_040
       00 00 52 02 
       00          
0477FB F2 00 00 66 0735*  	dl 0x0000F2,0x000066,BUF_47_040
       00 00 52 02 
       00          
047804 B2 00 00 96 0736*  	dl 0x0000B2,0x000096,BUF_47_044
       00 00 53 02 
       00          
04780D             0737*  
04780D             0738*  ; render_obj_id:48
04780D             0739*  sprite_obj_013:
04780D 0A 00 00 5A 0740*  	dl 0x00000A,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047816 2D 00 00 5A 0741*  	dl 0x00002D,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04781F 51 00 00 5A 0742*  	dl 0x000051,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047828 74 00 00 5A 0743*  	dl 0x000074,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047831 98 00 00 5A 0744*  	dl 0x000098,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04783A BB 00 00 5A 0745*  	dl 0x0000BB,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047843 DF 00 00 5A 0746*  	dl 0x0000DF,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04784C 02 01 00 5A 0747*  	dl 0x000102,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047855 26 01 00 5A 0748*  	dl 0x000126,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04785E 0D 00 00 5C 0749*  	dl 0x00000D,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047867 3B 00 00 5C 0750*  	dl 0x00003B,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047870 68 00 00 5C 0751*  	dl 0x000068,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047879 96 00 00 5C 0752*  	dl 0x000096,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047882 C3 00 00 5C 0753*  	dl 0x0000C3,0x00005C,BUF_48_020
       00 00 55 02 
       00          
04788B F1 00 00 5C 0754*  	dl 0x0000F1,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047894 1E 01 00 5C 0755*  	dl 0x00011E,0x00005C,BUF_48_020
       00 00 55 02 
       00          
04789D 12 00 00 62 0756*  	dl 0x000012,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478A6 51 00 00 62 0757*  	dl 0x000051,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478AF 92 00 00 62 0758*  	dl 0x000092,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478B8 D2 00 00 62 0759*  	dl 0x0000D2,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478C1 12 01 00 62 0760*  	dl 0x000112,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478CA 1D 00 00 6C 0761*  	dl 0x00001D,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478D3 87 00 00 6C 0762*  	dl 0x000087,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478DC F2 00 00 6C 0763*  	dl 0x0000F2,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478E5 00 01 00 A0 0764*  	dl 0x000100,0x0000A0,BUF_48_044
       00 00 58 02 
       00          
0478EE             0765*  
0478EE             0766*  ; render_obj_id:49
0478EE             0767*  sprite_obj_014:
0478EE 0A 00 00 59 0768*  	dl 0x00000A,0x000059,BUF_49_004
       00 00 59 02 
       00          
0478F7 2D 00 00 59 0769*  	dl 0x00002D,0x000059,BUF_49_004
       00 00 59 02 
       00          
047900 51 00 00 59 0770*  	dl 0x000051,0x000059,BUF_49_004
       00 00 59 02 
       00          
047909 74 00 00 59 0771*  	dl 0x000074,0x000059,BUF_49_004
       00 00 59 02 
       00          
047912 98 00 00 59 0772*  	dl 0x000098,0x000059,BUF_49_004
       00 00 59 02 
       00          
04791B BB 00 00 59 0773*  	dl 0x0000BB,0x000059,BUF_49_004
       00 00 59 02 
       00          
047924 DF 00 00 59 0774*  	dl 0x0000DF,0x000059,BUF_49_004
       00 00 59 02 
       00          
04792D 02 01 00 59 0775*  	dl 0x000102,0x000059,BUF_49_004
       00 00 59 02 
       00          
047936 26 01 00 59 0776*  	dl 0x000126,0x000059,BUF_49_004
       00 00 59 02 
       00          
04793F 0E 00 00 5B 0777*  	dl 0x00000E,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047948 3C 00 00 5B 0778*  	dl 0x00003C,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047951 69 00 00 5B 0779*  	dl 0x000069,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04795A 97 00 00 5B 0780*  	dl 0x000097,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047963 C4 00 00 5B 0781*  	dl 0x0000C4,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04796C F2 00 00 5B 0782*  	dl 0x0000F2,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047975 1F 01 00 5B 0783*  	dl 0x00011F,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04797E 13 00 00 62 0784*  	dl 0x000013,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047987 52 00 00 62 0785*  	dl 0x000052,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047990 93 00 00 62 0786*  	dl 0x000093,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047999 D3 00 00 62 0787*  	dl 0x0000D3,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479A2 13 01 00 62 0788*  	dl 0x000113,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479AB 20 00 00 6C 0789*  	dl 0x000020,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479B4 8A 00 00 6C 0790*  	dl 0x00008A,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479BD F5 00 00 6C 0791*  	dl 0x0000F5,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479C6 E8 00 00 A0 0792*  	dl 0x0000E8,0x0000A0,BUF_49_044
       00 00 5D 02 
       00          
0479CF             0793*  
0479CF             0794*  ; render_obj_id:50
0479CF             0795*  sprite_obj_015:
0479CF 0D 00 00 53 0796*  	dl 0x00000D,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479D8 30 00 00 53 0797*  	dl 0x000030,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479E1 54 00 00 53 0798*  	dl 0x000054,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479EA 77 00 00 53 0799*  	dl 0x000077,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479F3 9B 00 00 53 0800*  	dl 0x00009B,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479FC BE 00 00 53 0801*  	dl 0x0000BE,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A05 E2 00 00 53 0802*  	dl 0x0000E2,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A0E 05 01 00 53 0803*  	dl 0x000105,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A17 29 01 00 53 0804*  	dl 0x000129,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A20 10 00 00 54 0805*  	dl 0x000010,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A29 3E 00 00 54 0806*  	dl 0x00003E,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A32 6B 00 00 54 0807*  	dl 0x00006B,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A3B 99 00 00 54 0808*  	dl 0x000099,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A44 C6 00 00 54 0809*  	dl 0x0000C6,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A4D F4 00 00 54 0810*  	dl 0x0000F4,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A56 21 01 00 54 0811*  	dl 0x000121,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A5F 16 00 00 56 0812*  	dl 0x000016,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A68 55 00 00 56 0813*  	dl 0x000055,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A71 96 00 00 56 0814*  	dl 0x000096,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A7A D6 00 00 56 0815*  	dl 0x0000D6,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A83 16 01 00 56 0816*  	dl 0x000116,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A8C 26 00 00 5A 0817*  	dl 0x000026,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047A95 90 00 00 5A 0818*  	dl 0x000090,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047A9E FB 00 00 5A 0819*  	dl 0x0000FB,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AA7 78 00 00 6E 0820*  	dl 0x000078,0x00006E,BUF_50_044
       00 00 62 02 
       00          
047AB0             0821*  
047AB0             0822*  ; render_obj_id:51
047AB0             0823*  sprite_obj_016:
047AB0 0B 00 00 49 0824*  	dl 0x00000B,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AB9 2E 00 00 49 0825*  	dl 0x00002E,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AC2 52 00 00 49 0826*  	dl 0x000052,0x000049,BUF_51_004
       00 00 63 02 
       00          
047ACB 75 00 00 49 0827*  	dl 0x000075,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AD4 99 00 00 49 0828*  	dl 0x000099,0x000049,BUF_51_004
       00 00 63 02 
       00          
047ADD BC 00 00 49 0829*  	dl 0x0000BC,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AE6 E0 00 00 49 0830*  	dl 0x0000E0,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AEF 03 01 00 49 0831*  	dl 0x000103,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AF8 27 01 00 49 0832*  	dl 0x000127,0x000049,BUF_51_004
       00 00 63 02 
       00          
047B01 0D 00 00 48 0833*  	dl 0x00000D,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B0A 3B 00 00 48 0834*  	dl 0x00003B,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B13 68 00 00 48 0835*  	dl 0x000068,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B1C 96 00 00 48 0836*  	dl 0x000096,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B25 C3 00 00 48 0837*  	dl 0x0000C3,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B2E F1 00 00 48 0838*  	dl 0x0000F1,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B37 1E 01 00 48 0839*  	dl 0x00011E,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B40 13 00 00 45 0840*  	dl 0x000013,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B49 52 00 00 45 0841*  	dl 0x000052,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B52 93 00 00 45 0842*  	dl 0x000093,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B5B D3 00 00 45 0843*  	dl 0x0000D3,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B64 13 01 00 45 0844*  	dl 0x000113,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B6D 20 00 00 3E 0845*  	dl 0x000020,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B76 8A 00 00 3E 0846*  	dl 0x00008A,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B7F F5 00 00 3E 0847*  	dl 0x0000F5,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B88 5E 00 00 1C 0848*  	dl 0x00005E,0x00001C,BUF_51_044
       00 00 67 02 
       00          
047B91             0849*  
047B91             0850*  ; render_obj_id:52
047B91             0851*  sprite_obj_017:
047B91 0C 00 00 49 0852*  	dl 0x00000C,0x000049,BUF_52_004
       00 00 68 02 
       00          
047B9A 2F 00 00 49 0853*  	dl 0x00002F,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BA3 53 00 00 49 0854*  	dl 0x000053,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BAC 76 00 00 49 0855*  	dl 0x000076,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BB5 9A 00 00 49 0856*  	dl 0x00009A,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BBE BD 00 00 49 0857*  	dl 0x0000BD,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BC7 E1 00 00 49 0858*  	dl 0x0000E1,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BD0 04 01 00 49 0859*  	dl 0x000104,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BD9 28 01 00 49 0860*  	dl 0x000128,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BE2 0F 00 00 48 0861*  	dl 0x00000F,0x000048,BUF_52_020
       00 00 69 02 
       00          
047BEB 3D 00 00 48 0862*  	dl 0x00003D,0x000048,BUF_52_020
       00 00 69 02 
       00          
047BF4 6A 00 00 48 0863*  	dl 0x00006A,0x000048,BUF_52_020
       00 00 69 02 
       00          
047BFD 98 00 00 48 0864*  	dl 0x000098,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C06 C5 00 00 48 0865*  	dl 0x0000C5,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C0F F3 00 00 48 0866*  	dl 0x0000F3,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C18 20 01 00 48 0867*  	dl 0x000120,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C21 16 00 00 45 0868*  	dl 0x000016,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C2A 55 00 00 45 0869*  	dl 0x000055,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C33 96 00 00 45 0870*  	dl 0x000096,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C3C D6 00 00 45 0871*  	dl 0x0000D6,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C45 16 01 00 45 0872*  	dl 0x000116,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C4E 24 00 00 3E 0873*  	dl 0x000024,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C57 8E 00 00 3E 0874*  	dl 0x00008E,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C60 F9 00 00 3E 0875*  	dl 0x0000F9,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C69 6B 00 00 1C 0876*  	dl 0x00006B,0x00001C,BUF_52_044
       00 00 6C 02 
       00          
047C72             0877*  
047C72             0878*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
047C72             0018   	include "src/asm/font_itc_honda.asm"
047C72             0001*  ; Bitmap indices:
047C72             0002*  BUF_4384: equ 0x1120 ; 32
047C72             0003*  ; Missing character 33 !
047C72             0004*  ; Missing character 34 "
047C72             0005*  ; Missing character 35 #
047C72             0006*  ; Missing character 36 $
047C72             0007*  ; Missing character 37 %
047C72             0008*  ; Missing character 38 &
047C72             0009*  ; Missing character 39 '
047C72             0010*  ; Missing character 40 (
047C72             0011*  ; Missing character 41 )
047C72             0012*  ; Missing character 42 *
047C72             0013*  ; Missing character 43 +
047C72             0014*  ; Missing character 44 ,
047C72             0015*  ; Missing character 45 -
047C72             0016*  BUF_4398: equ 0x112E ; 46 .
047C72             0017*  ; Missing character 47 /
047C72             0018*  BUF_4400: equ 0x1130 ; 48 0
047C72             0019*  BUF_4401: equ 0x1131 ; 49 1
047C72             0020*  BUF_4402: equ 0x1132 ; 50 2
047C72             0021*  BUF_4403: equ 0x1133 ; 51 3
047C72             0022*  BUF_4404: equ 0x1134 ; 52 4
047C72             0023*  BUF_4405: equ 0x1135 ; 53 5
047C72             0024*  BUF_4406: equ 0x1136 ; 54 6
047C72             0025*  BUF_4407: equ 0x1137 ; 55 7
047C72             0026*  BUF_4408: equ 0x1138 ; 56 8
047C72             0027*  BUF_4409: equ 0x1139 ; 57 9
047C72             0028*  ; Missing character 58 :
047C72             0029*  ; Missing character 59 ;
047C72             0030*  ; Missing character 60 <
047C72             0031*  ; Missing character 61 =
047C72             0032*  ; Missing character 62 >
047C72             0033*  ; Missing character 63 ?
047C72             0034*  ; Missing character 64 @
047C72             0035*  BUF_4417: equ 0x1141 ; 65 A
047C72             0036*  BUF_4418: equ 0x1142 ; 66 B
047C72             0037*  BUF_4419: equ 0x1143 ; 67 C
047C72             0038*  BUF_4420: equ 0x1144 ; 68 D
047C72             0039*  BUF_4421: equ 0x1145 ; 69 E
047C72             0040*  BUF_4422: equ 0x1146 ; 70 F
047C72             0041*  BUF_4423: equ 0x1147 ; 71 G
047C72             0042*  BUF_4424: equ 0x1148 ; 72 H
047C72             0043*  BUF_4425: equ 0x1149 ; 73 I
047C72             0044*  BUF_4426: equ 0x114A ; 74 J
047C72             0045*  BUF_4427: equ 0x114B ; 75 K
047C72             0046*  BUF_4428: equ 0x114C ; 76 L
047C72             0047*  BUF_4429: equ 0x114D ; 77 M
047C72             0048*  BUF_4430: equ 0x114E ; 78 N
047C72             0049*  BUF_4431: equ 0x114F ; 79 O
047C72             0050*  BUF_4432: equ 0x1150 ; 80 P
047C72             0051*  BUF_4433: equ 0x1151 ; 81 Q
047C72             0052*  BUF_4434: equ 0x1152 ; 82 R
047C72             0053*  BUF_4435: equ 0x1153 ; 83 S
047C72             0054*  BUF_4436: equ 0x1154 ; 84 T
047C72             0055*  BUF_4437: equ 0x1155 ; 85 U
047C72             0056*  BUF_4438: equ 0x1156 ; 86 V
047C72             0057*  BUF_4439: equ 0x1157 ; 87 W
047C72             0058*  BUF_4440: equ 0x1158 ; 88 X
047C72             0059*  BUF_4441: equ 0x1159 ; 89 Y
047C72             0060*  BUF_4442: equ 0x115A ; 90 Z
047C72             0061*  ; Missing character 91 [
047C72             0062*  ; Missing character 92 \
047C72             0063*  ; Missing character 93 ]
047C72             0064*  ; Missing character 94 ^
047C72             0065*  ; Missing character 95 _
047C72             0066*  ; Missing character 96 `
047C72             0067*  BUF_4449: equ 0x1161 ; 97 a
047C72             0068*  BUF_4450: equ 0x1162 ; 98 b
047C72             0069*  BUF_4451: equ 0x1163 ; 99 c
047C72             0070*  BUF_4452: equ 0x1164 ; 100 d
047C72             0071*  BUF_4453: equ 0x1165 ; 101 e
047C72             0072*  BUF_4454: equ 0x1166 ; 102 f
047C72             0073*  BUF_4455: equ 0x1167 ; 103 g
047C72             0074*  BUF_4456: equ 0x1168 ; 104 h
047C72             0075*  BUF_4457: equ 0x1169 ; 105 i
047C72             0076*  BUF_4458: equ 0x116A ; 106 j
047C72             0077*  BUF_4459: equ 0x116B ; 107 k
047C72             0078*  BUF_4460: equ 0x116C ; 108 l
047C72             0079*  BUF_4461: equ 0x116D ; 109 m
047C72             0080*  BUF_4462: equ 0x116E ; 110 n
047C72             0081*  BUF_4463: equ 0x116F ; 111 o
047C72             0082*  BUF_4464: equ 0x1170 ; 112 p
047C72             0083*  BUF_4465: equ 0x1171 ; 113 q
047C72             0084*  BUF_4466: equ 0x1172 ; 114 r
047C72             0085*  BUF_4467: equ 0x1173 ; 115 s
047C72             0086*  BUF_4468: equ 0x1174 ; 116 t
047C72             0087*  BUF_4469: equ 0x1175 ; 117 u
047C72             0088*  BUF_4470: equ 0x1176 ; 118 v
047C72             0089*  BUF_4471: equ 0x1177 ; 119 w
047C72             0090*  BUF_4472: equ 0x1178 ; 120 x
047C72             0091*  BUF_4473: equ 0x1179 ; 121 y
047C72             0092*  BUF_4474: equ 0x117A ; 122 z
047C72             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
047C72             0094*  font_itc_honda:
047C72 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
047C78 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
047C7E 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
047C84 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
047C8A 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
047C90 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
047C96 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
047C9C 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
047CA2 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
047CA8 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
047CAE 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
047CB4 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
047CBA 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
047CC0 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
047CC6 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
047CCC 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
047CD2 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
047CD8 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
047CDE 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
047CE4 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
047CEA 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
047CF0 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
047CF6 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
047CFC 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
047D02 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
047D08 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
047D0E 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
047D14 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
047D1A 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
047D20 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
047D26 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
047D2C 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
047D32 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
047D38 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
047D3E 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
047D44 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
047D4A 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
047D50 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
047D56 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
047D5C 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
047D62 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
047D68 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
047D6E 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
047D74 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
047D7A 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
047D80 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
047D86 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
047D8C 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
047D92 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
047D98 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
047D9E 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
047DA4 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
047DAA 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
047DB0 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
047DB6 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
047DBC 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
047DC2 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
047DC8 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
047DCE 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
047DD4 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
047DDA 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
047DE0 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
047DE6 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
047DEC 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
047DF2 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
047DF8 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
047DFE 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
047E04 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
047E0A 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
047E10 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
047E16 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
047E1C 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
047E22 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
047E28 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
047E2E 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
047E34 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
047E3A 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
047E40 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
047E46 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
047E4C 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
047E52 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
047E58 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
047E5E 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
047E64 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
047E6A 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
047E70 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
047E76 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
047E7C 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
047E82 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
047E88 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
047E8E 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
047E94             0186*  
047E94             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
047E94             0188*  load_font_itc_honda:
047E94             0189*  
047E94 21 D5 87 04 0190*  	ld hl,Fhonda032
047E98 11 1A C3 04 0191*  	ld de,filedata
047E9C 01 00 00 01 0192*  	ld bc,65536
047EA0 3E 01       0193*  	ld a,mos_load
047EA2 5B CF       0194*  	RST.LIL 08h
047EA4 21 20 11 00 0195*  	ld hl,BUF_4384
047EA8 01 06 00 00 0196*  	ld bc,6
047EAC 11 01 00 00 0197*  	ld de,1
047EB0 DD 21 06 00 0198*  	ld ix,6
       00          
047EB5 CD 68 B8 04 0199*  	call vdu_load_img
047EB9             0200*  ; Missing character 33
047EB9             0201*  ; Missing character 34
047EB9             0202*  ; Missing character 35
047EB9             0203*  ; Missing character 36
047EB9             0204*  ; Missing character 37
047EB9             0205*  ; Missing character 38
047EB9             0206*  ; Missing character 39
047EB9             0207*  ; Missing character 40
047EB9             0208*  ; Missing character 41
047EB9             0209*  ; Missing character 42
047EB9             0210*  ; Missing character 43
047EB9             0211*  ; Missing character 44
047EB9             0212*  ; Missing character 45
047EB9             0213*  
047EB9 21 EB 87 04 0214*  	ld hl,Fhonda046
047EBD 11 1A C3 04 0215*  	ld de,filedata
047EC1 01 00 00 01 0216*  	ld bc,65536
047EC5 3E 01       0217*  	ld a,mos_load
047EC7 5B CF       0218*  	RST.LIL 08h
047EC9 21 2E 11 00 0219*  	ld hl,BUF_4398
047ECD 01 05 00 00 0220*  	ld bc,5
047ED1 11 05 00 00 0221*  	ld de,5
047ED5 DD 21 19 00 0222*  	ld ix,25
       00          
047EDA CD 68 B8 04 0223*  	call vdu_load_img
047EDE             0224*  ; Missing character 47
047EDE             0225*  
047EDE 21 01 88 04 0226*  	ld hl,Fhonda048
047EE2 11 1A C3 04 0227*  	ld de,filedata
047EE6 01 00 00 01 0228*  	ld bc,65536
047EEA 3E 01       0229*  	ld a,mos_load
047EEC 5B CF       0230*  	RST.LIL 08h
047EEE 21 30 11 00 0231*  	ld hl,BUF_4400
047EF2 01 0A 00 00 0232*  	ld bc,10
047EF6 11 12 00 00 0233*  	ld de,18
047EFA DD 21 B4 00 0234*  	ld ix,180
       00          
047EFF CD 68 B8 04 0235*  	call vdu_load_img
047F03             0236*  
047F03 21 17 88 04 0237*  	ld hl,Fhonda049
047F07 11 1A C3 04 0238*  	ld de,filedata
047F0B 01 00 00 01 0239*  	ld bc,65536
047F0F 3E 01       0240*  	ld a,mos_load
047F11 5B CF       0241*  	RST.LIL 08h
047F13 21 31 11 00 0242*  	ld hl,BUF_4401
047F17 01 04 00 00 0243*  	ld bc,4
047F1B 11 12 00 00 0244*  	ld de,18
047F1F DD 21 48 00 0245*  	ld ix,72
       00          
047F24 CD 68 B8 04 0246*  	call vdu_load_img
047F28             0247*  
047F28 21 2D 88 04 0248*  	ld hl,Fhonda050
047F2C 11 1A C3 04 0249*  	ld de,filedata
047F30 01 00 00 01 0250*  	ld bc,65536
047F34 3E 01       0251*  	ld a,mos_load
047F36 5B CF       0252*  	RST.LIL 08h
047F38 21 32 11 00 0253*  	ld hl,BUF_4402
047F3C 01 09 00 00 0254*  	ld bc,9
047F40 11 12 00 00 0255*  	ld de,18
047F44 DD 21 A2 00 0256*  	ld ix,162
       00          
047F49 CD 68 B8 04 0257*  	call vdu_load_img
047F4D             0258*  
047F4D 21 43 88 04 0259*  	ld hl,Fhonda051
047F51 11 1A C3 04 0260*  	ld de,filedata
047F55 01 00 00 01 0261*  	ld bc,65536
047F59 3E 01       0262*  	ld a,mos_load
047F5B 5B CF       0263*  	RST.LIL 08h
047F5D 21 33 11 00 0264*  	ld hl,BUF_4403
047F61 01 0A 00 00 0265*  	ld bc,10
047F65 11 12 00 00 0266*  	ld de,18
047F69 DD 21 B4 00 0267*  	ld ix,180
       00          
047F6E CD 68 B8 04 0268*  	call vdu_load_img
047F72             0269*  
047F72 21 59 88 04 0270*  	ld hl,Fhonda052
047F76 11 1A C3 04 0271*  	ld de,filedata
047F7A 01 00 00 01 0272*  	ld bc,65536
047F7E 3E 01       0273*  	ld a,mos_load
047F80 5B CF       0274*  	RST.LIL 08h
047F82 21 34 11 00 0275*  	ld hl,BUF_4404
047F86 01 0C 00 00 0276*  	ld bc,12
047F8A 11 12 00 00 0277*  	ld de,18
047F8E DD 21 D8 00 0278*  	ld ix,216
       00          
047F93 CD 68 B8 04 0279*  	call vdu_load_img
047F97             0280*  
047F97 21 6F 88 04 0281*  	ld hl,Fhonda053
047F9B 11 1A C3 04 0282*  	ld de,filedata
047F9F 01 00 00 01 0283*  	ld bc,65536
047FA3 3E 01       0284*  	ld a,mos_load
047FA5 5B CF       0285*  	RST.LIL 08h
047FA7 21 35 11 00 0286*  	ld hl,BUF_4405
047FAB 01 0A 00 00 0287*  	ld bc,10
047FAF 11 12 00 00 0288*  	ld de,18
047FB3 DD 21 B4 00 0289*  	ld ix,180
       00          
047FB8 CD 68 B8 04 0290*  	call vdu_load_img
047FBC             0291*  
047FBC 21 85 88 04 0292*  	ld hl,Fhonda054
047FC0 11 1A C3 04 0293*  	ld de,filedata
047FC4 01 00 00 01 0294*  	ld bc,65536
047FC8 3E 01       0295*  	ld a,mos_load
047FCA 5B CF       0296*  	RST.LIL 08h
047FCC 21 36 11 00 0297*  	ld hl,BUF_4406
047FD0 01 0A 00 00 0298*  	ld bc,10
047FD4 11 12 00 00 0299*  	ld de,18
047FD8 DD 21 B4 00 0300*  	ld ix,180
       00          
047FDD CD 68 B8 04 0301*  	call vdu_load_img
047FE1             0302*  
047FE1 21 9B 88 04 0303*  	ld hl,Fhonda055
047FE5 11 1A C3 04 0304*  	ld de,filedata
047FE9 01 00 00 01 0305*  	ld bc,65536
047FED 3E 01       0306*  	ld a,mos_load
047FEF 5B CF       0307*  	RST.LIL 08h
047FF1 21 37 11 00 0308*  	ld hl,BUF_4407
047FF5 01 08 00 00 0309*  	ld bc,8
047FF9 11 12 00 00 0310*  	ld de,18
047FFD DD 21 90 00 0311*  	ld ix,144
       00          
048002 CD 68 B8 04 0312*  	call vdu_load_img
048006             0313*  
048006 21 B1 88 04 0314*  	ld hl,Fhonda056
04800A 11 1A C3 04 0315*  	ld de,filedata
04800E 01 00 00 01 0316*  	ld bc,65536
048012 3E 01       0317*  	ld a,mos_load
048014 5B CF       0318*  	RST.LIL 08h
048016 21 38 11 00 0319*  	ld hl,BUF_4408
04801A 01 0A 00 00 0320*  	ld bc,10
04801E 11 12 00 00 0321*  	ld de,18
048022 DD 21 B4 00 0322*  	ld ix,180
       00          
048027 CD 68 B8 04 0323*  	call vdu_load_img
04802B             0324*  
04802B 21 C7 88 04 0325*  	ld hl,Fhonda057
04802F 11 1A C3 04 0326*  	ld de,filedata
048033 01 00 00 01 0327*  	ld bc,65536
048037 3E 01       0328*  	ld a,mos_load
048039 5B CF       0329*  	RST.LIL 08h
04803B 21 39 11 00 0330*  	ld hl,BUF_4409
04803F 01 0A 00 00 0331*  	ld bc,10
048043 11 12 00 00 0332*  	ld de,18
048047 DD 21 B4 00 0333*  	ld ix,180
       00          
04804C CD 68 B8 04 0334*  	call vdu_load_img
048050             0335*  ; Missing character 58
048050             0336*  ; Missing character 59
048050             0337*  ; Missing character 60
048050             0338*  ; Missing character 61
048050             0339*  ; Missing character 62
048050             0340*  ; Missing character 63
048050             0341*  ; Missing character 64
048050             0342*  
048050 21 DD 88 04 0343*  	ld hl,Fhonda065
048054 11 1A C3 04 0344*  	ld de,filedata
048058 01 00 00 01 0345*  	ld bc,65536
04805C 3E 01       0346*  	ld a,mos_load
04805E 5B CF       0347*  	RST.LIL 08h
048060 21 41 11 00 0348*  	ld hl,BUF_4417
048064 01 0A 00 00 0349*  	ld bc,10
048068 11 12 00 00 0350*  	ld de,18
04806C DD 21 B4 00 0351*  	ld ix,180
       00          
048071 CD 68 B8 04 0352*  	call vdu_load_img
048075             0353*  
048075 21 F3 88 04 0354*  	ld hl,Fhonda066
048079 11 1A C3 04 0355*  	ld de,filedata
04807D 01 00 00 01 0356*  	ld bc,65536
048081 3E 01       0357*  	ld a,mos_load
048083 5B CF       0358*  	RST.LIL 08h
048085 21 42 11 00 0359*  	ld hl,BUF_4418
048089 01 0A 00 00 0360*  	ld bc,10
04808D 11 12 00 00 0361*  	ld de,18
048091 DD 21 B4 00 0362*  	ld ix,180
       00          
048096 CD 68 B8 04 0363*  	call vdu_load_img
04809A             0364*  
04809A 21 09 89 04 0365*  	ld hl,Fhonda067
04809E 11 1A C3 04 0366*  	ld de,filedata
0480A2 01 00 00 01 0367*  	ld bc,65536
0480A6 3E 01       0368*  	ld a,mos_load
0480A8 5B CF       0369*  	RST.LIL 08h
0480AA 21 43 11 00 0370*  	ld hl,BUF_4419
0480AE 01 08 00 00 0371*  	ld bc,8
0480B2 11 13 00 00 0372*  	ld de,19
0480B6 DD 21 98 00 0373*  	ld ix,152
       00          
0480BB CD 68 B8 04 0374*  	call vdu_load_img
0480BF             0375*  
0480BF 21 1F 89 04 0376*  	ld hl,Fhonda068
0480C3 11 1A C3 04 0377*  	ld de,filedata
0480C7 01 00 00 01 0378*  	ld bc,65536
0480CB 3E 01       0379*  	ld a,mos_load
0480CD 5B CF       0380*  	RST.LIL 08h
0480CF 21 44 11 00 0381*  	ld hl,BUF_4420
0480D3 01 0A 00 00 0382*  	ld bc,10
0480D7 11 12 00 00 0383*  	ld de,18
0480DB DD 21 B4 00 0384*  	ld ix,180
       00          
0480E0 CD 68 B8 04 0385*  	call vdu_load_img
0480E4             0386*  
0480E4 21 35 89 04 0387*  	ld hl,Fhonda069
0480E8 11 1A C3 04 0388*  	ld de,filedata
0480EC 01 00 00 01 0389*  	ld bc,65536
0480F0 3E 01       0390*  	ld a,mos_load
0480F2 5B CF       0391*  	RST.LIL 08h
0480F4 21 45 11 00 0392*  	ld hl,BUF_4421
0480F8 01 08 00 00 0393*  	ld bc,8
0480FC 11 12 00 00 0394*  	ld de,18
048100 DD 21 90 00 0395*  	ld ix,144
       00          
048105 CD 68 B8 04 0396*  	call vdu_load_img
048109             0397*  
048109 21 4B 89 04 0398*  	ld hl,Fhonda070
04810D 11 1A C3 04 0399*  	ld de,filedata
048111 01 00 00 01 0400*  	ld bc,65536
048115 3E 01       0401*  	ld a,mos_load
048117 5B CF       0402*  	RST.LIL 08h
048119 21 46 11 00 0403*  	ld hl,BUF_4422
04811D 01 08 00 00 0404*  	ld bc,8
048121 11 12 00 00 0405*  	ld de,18
048125 DD 21 90 00 0406*  	ld ix,144
       00          
04812A CD 68 B8 04 0407*  	call vdu_load_img
04812E             0408*  
04812E 21 61 89 04 0409*  	ld hl,Fhonda071
048132 11 1A C3 04 0410*  	ld de,filedata
048136 01 00 00 01 0411*  	ld bc,65536
04813A 3E 01       0412*  	ld a,mos_load
04813C 5B CF       0413*  	RST.LIL 08h
04813E 21 47 11 00 0414*  	ld hl,BUF_4423
048142 01 0A 00 00 0415*  	ld bc,10
048146 11 12 00 00 0416*  	ld de,18
04814A DD 21 B4 00 0417*  	ld ix,180
       00          
04814F CD 68 B8 04 0418*  	call vdu_load_img
048153             0419*  
048153 21 77 89 04 0420*  	ld hl,Fhonda072
048157 11 1A C3 04 0421*  	ld de,filedata
04815B 01 00 00 01 0422*  	ld bc,65536
04815F 3E 01       0423*  	ld a,mos_load
048161 5B CF       0424*  	RST.LIL 08h
048163 21 48 11 00 0425*  	ld hl,BUF_4424
048167 01 0A 00 00 0426*  	ld bc,10
04816B 11 12 00 00 0427*  	ld de,18
04816F DD 21 B4 00 0428*  	ld ix,180
       00          
048174 CD 68 B8 04 0429*  	call vdu_load_img
048178             0430*  
048178 21 8D 89 04 0431*  	ld hl,Fhonda073
04817C 11 1A C3 04 0432*  	ld de,filedata
048180 01 00 00 01 0433*  	ld bc,65536
048184 3E 01       0434*  	ld a,mos_load
048186 5B CF       0435*  	RST.LIL 08h
048188 21 49 11 00 0436*  	ld hl,BUF_4425
04818C 01 03 00 00 0437*  	ld bc,3
048190 11 12 00 00 0438*  	ld de,18
048194 DD 21 36 00 0439*  	ld ix,54
       00          
048199 CD 68 B8 04 0440*  	call vdu_load_img
04819D             0441*  
04819D 21 A3 89 04 0442*  	ld hl,Fhonda074
0481A1 11 1A C3 04 0443*  	ld de,filedata
0481A5 01 00 00 01 0444*  	ld bc,65536
0481A9 3E 01       0445*  	ld a,mos_load
0481AB 5B CF       0446*  	RST.LIL 08h
0481AD 21 4A 11 00 0447*  	ld hl,BUF_4426
0481B1 01 06 00 00 0448*  	ld bc,6
0481B5 11 12 00 00 0449*  	ld de,18
0481B9 DD 21 6C 00 0450*  	ld ix,108
       00          
0481BE CD 68 B8 04 0451*  	call vdu_load_img
0481C2             0452*  
0481C2 21 B9 89 04 0453*  	ld hl,Fhonda075
0481C6 11 1A C3 04 0454*  	ld de,filedata
0481CA 01 00 00 01 0455*  	ld bc,65536
0481CE 3E 01       0456*  	ld a,mos_load
0481D0 5B CF       0457*  	RST.LIL 08h
0481D2 21 4B 11 00 0458*  	ld hl,BUF_4427
0481D6 01 0A 00 00 0459*  	ld bc,10
0481DA 11 12 00 00 0460*  	ld de,18
0481DE DD 21 B4 00 0461*  	ld ix,180
       00          
0481E3 CD 68 B8 04 0462*  	call vdu_load_img
0481E7             0463*  
0481E7 21 CF 89 04 0464*  	ld hl,Fhonda076
0481EB 11 1A C3 04 0465*  	ld de,filedata
0481EF 01 00 00 01 0466*  	ld bc,65536
0481F3 3E 01       0467*  	ld a,mos_load
0481F5 5B CF       0468*  	RST.LIL 08h
0481F7 21 4C 11 00 0469*  	ld hl,BUF_4428
0481FB 01 08 00 00 0470*  	ld bc,8
0481FF 11 12 00 00 0471*  	ld de,18
048203 DD 21 90 00 0472*  	ld ix,144
       00          
048208 CD 68 B8 04 0473*  	call vdu_load_img
04820C             0474*  
04820C 21 E5 89 04 0475*  	ld hl,Fhonda077
048210 11 1A C3 04 0476*  	ld de,filedata
048214 01 00 00 01 0477*  	ld bc,65536
048218 3E 01       0478*  	ld a,mos_load
04821A 5B CF       0479*  	RST.LIL 08h
04821C 21 4D 11 00 0480*  	ld hl,BUF_4429
048220 01 0E 00 00 0481*  	ld bc,14
048224 11 12 00 00 0482*  	ld de,18
048228 DD 21 FC 00 0483*  	ld ix,252
       00          
04822D CD 68 B8 04 0484*  	call vdu_load_img
048231             0485*  
048231 21 FB 89 04 0486*  	ld hl,Fhonda078
048235 11 1A C3 04 0487*  	ld de,filedata
048239 01 00 00 01 0488*  	ld bc,65536
04823D 3E 01       0489*  	ld a,mos_load
04823F 5B CF       0490*  	RST.LIL 08h
048241 21 4E 11 00 0491*  	ld hl,BUF_4430
048245 01 0A 00 00 0492*  	ld bc,10
048249 11 12 00 00 0493*  	ld de,18
04824D DD 21 B4 00 0494*  	ld ix,180
       00          
048252 CD 68 B8 04 0495*  	call vdu_load_img
048256             0496*  
048256 21 11 8A 04 0497*  	ld hl,Fhonda079
04825A 11 1A C3 04 0498*  	ld de,filedata
04825E 01 00 00 01 0499*  	ld bc,65536
048262 3E 01       0500*  	ld a,mos_load
048264 5B CF       0501*  	RST.LIL 08h
048266 21 4F 11 00 0502*  	ld hl,BUF_4431
04826A 01 0A 00 00 0503*  	ld bc,10
04826E 11 12 00 00 0504*  	ld de,18
048272 DD 21 B4 00 0505*  	ld ix,180
       00          
048277 CD 68 B8 04 0506*  	call vdu_load_img
04827B             0507*  
04827B 21 27 8A 04 0508*  	ld hl,Fhonda080
04827F 11 1A C3 04 0509*  	ld de,filedata
048283 01 00 00 01 0510*  	ld bc,65536
048287 3E 01       0511*  	ld a,mos_load
048289 5B CF       0512*  	RST.LIL 08h
04828B 21 50 11 00 0513*  	ld hl,BUF_4432
04828F 01 0A 00 00 0514*  	ld bc,10
048293 11 12 00 00 0515*  	ld de,18
048297 DD 21 B4 00 0516*  	ld ix,180
       00          
04829C CD 68 B8 04 0517*  	call vdu_load_img
0482A0             0518*  
0482A0 21 3D 8A 04 0519*  	ld hl,Fhonda081
0482A4 11 1A C3 04 0520*  	ld de,filedata
0482A8 01 00 00 01 0521*  	ld bc,65536
0482AC 3E 01       0522*  	ld a,mos_load
0482AE 5B CF       0523*  	RST.LIL 08h
0482B0 21 51 11 00 0524*  	ld hl,BUF_4433
0482B4 01 0A 00 00 0525*  	ld bc,10
0482B8 11 15 00 00 0526*  	ld de,21
0482BC DD 21 D2 00 0527*  	ld ix,210
       00          
0482C1 CD 68 B8 04 0528*  	call vdu_load_img
0482C5             0529*  
0482C5 21 53 8A 04 0530*  	ld hl,Fhonda082
0482C9 11 1A C3 04 0531*  	ld de,filedata
0482CD 01 00 00 01 0532*  	ld bc,65536
0482D1 3E 01       0533*  	ld a,mos_load
0482D3 5B CF       0534*  	RST.LIL 08h
0482D5 21 52 11 00 0535*  	ld hl,BUF_4434
0482D9 01 0A 00 00 0536*  	ld bc,10
0482DD 11 12 00 00 0537*  	ld de,18
0482E1 DD 21 B4 00 0538*  	ld ix,180
       00          
0482E6 CD 68 B8 04 0539*  	call vdu_load_img
0482EA             0540*  
0482EA 21 69 8A 04 0541*  	ld hl,Fhonda083
0482EE 11 1A C3 04 0542*  	ld de,filedata
0482F2 01 00 00 01 0543*  	ld bc,65536
0482F6 3E 01       0544*  	ld a,mos_load
0482F8 5B CF       0545*  	RST.LIL 08h
0482FA 21 53 11 00 0546*  	ld hl,BUF_4435
0482FE 01 09 00 00 0547*  	ld bc,9
048302 11 13 00 00 0548*  	ld de,19
048306 DD 21 AB 00 0549*  	ld ix,171
       00          
04830B CD 68 B8 04 0550*  	call vdu_load_img
04830F             0551*  
04830F 21 7F 8A 04 0552*  	ld hl,Fhonda084
048313 11 1A C3 04 0553*  	ld de,filedata
048317 01 00 00 01 0554*  	ld bc,65536
04831B 3E 01       0555*  	ld a,mos_load
04831D 5B CF       0556*  	RST.LIL 08h
04831F 21 54 11 00 0557*  	ld hl,BUF_4436
048323 01 0A 00 00 0558*  	ld bc,10
048327 11 12 00 00 0559*  	ld de,18
04832B DD 21 B4 00 0560*  	ld ix,180
       00          
048330 CD 68 B8 04 0561*  	call vdu_load_img
048334             0562*  
048334 21 95 8A 04 0563*  	ld hl,Fhonda085
048338 11 1A C3 04 0564*  	ld de,filedata
04833C 01 00 00 01 0565*  	ld bc,65536
048340 3E 01       0566*  	ld a,mos_load
048342 5B CF       0567*  	RST.LIL 08h
048344 21 55 11 00 0568*  	ld hl,BUF_4437
048348 01 0A 00 00 0569*  	ld bc,10
04834C 11 12 00 00 0570*  	ld de,18
048350 DD 21 B4 00 0571*  	ld ix,180
       00          
048355 CD 68 B8 04 0572*  	call vdu_load_img
048359             0573*  
048359 21 AB 8A 04 0574*  	ld hl,Fhonda086
04835D 11 1A C3 04 0575*  	ld de,filedata
048361 01 00 00 01 0576*  	ld bc,65536
048365 3E 01       0577*  	ld a,mos_load
048367 5B CF       0578*  	RST.LIL 08h
048369 21 56 11 00 0579*  	ld hl,BUF_4438
04836D 01 0A 00 00 0580*  	ld bc,10
048371 11 12 00 00 0581*  	ld de,18
048375 DD 21 B4 00 0582*  	ld ix,180
       00          
04837A CD 68 B8 04 0583*  	call vdu_load_img
04837E             0584*  
04837E 21 C1 8A 04 0585*  	ld hl,Fhonda087
048382 11 1A C3 04 0586*  	ld de,filedata
048386 01 00 00 01 0587*  	ld bc,65536
04838A 3E 01       0588*  	ld a,mos_load
04838C 5B CF       0589*  	RST.LIL 08h
04838E 21 57 11 00 0590*  	ld hl,BUF_4439
048392 01 10 00 00 0591*  	ld bc,16
048396 11 12 00 00 0592*  	ld de,18
04839A DD 21 20 01 0593*  	ld ix,288
       00          
04839F CD 68 B8 04 0594*  	call vdu_load_img
0483A3             0595*  
0483A3 21 D7 8A 04 0596*  	ld hl,Fhonda088
0483A7 11 1A C3 04 0597*  	ld de,filedata
0483AB 01 00 00 01 0598*  	ld bc,65536
0483AF 3E 01       0599*  	ld a,mos_load
0483B1 5B CF       0600*  	RST.LIL 08h
0483B3 21 58 11 00 0601*  	ld hl,BUF_4440
0483B7 01 0A 00 00 0602*  	ld bc,10
0483BB 11 12 00 00 0603*  	ld de,18
0483BF DD 21 B4 00 0604*  	ld ix,180
       00          
0483C4 CD 68 B8 04 0605*  	call vdu_load_img
0483C8             0606*  
0483C8 21 ED 8A 04 0607*  	ld hl,Fhonda089
0483CC 11 1A C3 04 0608*  	ld de,filedata
0483D0 01 00 00 01 0609*  	ld bc,65536
0483D4 3E 01       0610*  	ld a,mos_load
0483D6 5B CF       0611*  	RST.LIL 08h
0483D8 21 59 11 00 0612*  	ld hl,BUF_4441
0483DC 01 0A 00 00 0613*  	ld bc,10
0483E0 11 12 00 00 0614*  	ld de,18
0483E4 DD 21 B4 00 0615*  	ld ix,180
       00          
0483E9 CD 68 B8 04 0616*  	call vdu_load_img
0483ED             0617*  
0483ED 21 03 8B 04 0618*  	ld hl,Fhonda090
0483F1 11 1A C3 04 0619*  	ld de,filedata
0483F5 01 00 00 01 0620*  	ld bc,65536
0483F9 3E 01       0621*  	ld a,mos_load
0483FB 5B CF       0622*  	RST.LIL 08h
0483FD 21 5A 11 00 0623*  	ld hl,BUF_4442
048401 01 09 00 00 0624*  	ld bc,9
048405 11 12 00 00 0625*  	ld de,18
048409 DD 21 A2 00 0626*  	ld ix,162
       00          
04840E CD 68 B8 04 0627*  	call vdu_load_img
048412             0628*  ; Missing character 91
048412             0629*  ; Missing character 92
048412             0630*  ; Missing character 93
048412             0631*  ; Missing character 94
048412             0632*  ; Missing character 95
048412             0633*  ; Missing character 96
048412             0634*  
048412 21 19 8B 04 0635*  	ld hl,Fhonda097
048416 11 1A C3 04 0636*  	ld de,filedata
04841A 01 00 00 01 0637*  	ld bc,65536
04841E 3E 01       0638*  	ld a,mos_load
048420 5B CF       0639*  	RST.LIL 08h
048422 21 61 11 00 0640*  	ld hl,BUF_4449
048426 01 08 00 00 0641*  	ld bc,8
04842A 11 0C 00 00 0642*  	ld de,12
04842E DD 21 60 00 0643*  	ld ix,96
       00          
048433 CD 68 B8 04 0644*  	call vdu_load_img
048437             0645*  
048437 21 2F 8B 04 0646*  	ld hl,Fhonda098
04843B 11 1A C3 04 0647*  	ld de,filedata
04843F 01 00 00 01 0648*  	ld bc,65536
048443 3E 01       0649*  	ld a,mos_load
048445 5B CF       0650*  	RST.LIL 08h
048447 21 62 11 00 0651*  	ld hl,BUF_4450
04844B 01 09 00 00 0652*  	ld bc,9
04844F 11 12 00 00 0653*  	ld de,18
048453 DD 21 A2 00 0654*  	ld ix,162
       00          
048458 CD 68 B8 04 0655*  	call vdu_load_img
04845C             0656*  
04845C 21 45 8B 04 0657*  	ld hl,Fhonda099
048460 11 1A C3 04 0658*  	ld de,filedata
048464 01 00 00 01 0659*  	ld bc,65536
048468 3E 01       0660*  	ld a,mos_load
04846A 5B CF       0661*  	RST.LIL 08h
04846C 21 63 11 00 0662*  	ld hl,BUF_4451
048470 01 07 00 00 0663*  	ld bc,7
048474 11 0C 00 00 0664*  	ld de,12
048478 DD 21 54 00 0665*  	ld ix,84
       00          
04847D CD 68 B8 04 0666*  	call vdu_load_img
048481             0667*  
048481 21 5B 8B 04 0668*  	ld hl,Fhonda100
048485 11 1A C3 04 0669*  	ld de,filedata
048489 01 00 00 01 0670*  	ld bc,65536
04848D 3E 01       0671*  	ld a,mos_load
04848F 5B CF       0672*  	RST.LIL 08h
048491 21 64 11 00 0673*  	ld hl,BUF_4452
048495 01 09 00 00 0674*  	ld bc,9
048499 11 12 00 00 0675*  	ld de,18
04849D DD 21 A2 00 0676*  	ld ix,162
       00          
0484A2 CD 68 B8 04 0677*  	call vdu_load_img
0484A6             0678*  
0484A6 21 71 8B 04 0679*  	ld hl,Fhonda101
0484AA 11 1A C3 04 0680*  	ld de,filedata
0484AE 01 00 00 01 0681*  	ld bc,65536
0484B2 3E 01       0682*  	ld a,mos_load
0484B4 5B CF       0683*  	RST.LIL 08h
0484B6 21 65 11 00 0684*  	ld hl,BUF_4453
0484BA 01 08 00 00 0685*  	ld bc,8
0484BE 11 0C 00 00 0686*  	ld de,12
0484C2 DD 21 60 00 0687*  	ld ix,96
       00          
0484C7 CD 68 B8 04 0688*  	call vdu_load_img
0484CB             0689*  
0484CB 21 87 8B 04 0690*  	ld hl,Fhonda102
0484CF 11 1A C3 04 0691*  	ld de,filedata
0484D3 01 00 00 01 0692*  	ld bc,65536
0484D7 3E 01       0693*  	ld a,mos_load
0484D9 5B CF       0694*  	RST.LIL 08h
0484DB 21 66 11 00 0695*  	ld hl,BUF_4454
0484DF 01 09 00 00 0696*  	ld bc,9
0484E3 11 12 00 00 0697*  	ld de,18
0484E7 DD 21 A2 00 0698*  	ld ix,162
       00          
0484EC CD 68 B8 04 0699*  	call vdu_load_img
0484F0             0700*  
0484F0 21 9D 8B 04 0701*  	ld hl,Fhonda103
0484F4 11 1A C3 04 0702*  	ld de,filedata
0484F8 01 00 00 01 0703*  	ld bc,65536
0484FC 3E 01       0704*  	ld a,mos_load
0484FE 5B CF       0705*  	RST.LIL 08h
048500 21 67 11 00 0706*  	ld hl,BUF_4455
048504 01 09 00 00 0707*  	ld bc,9
048508 11 12 00 00 0708*  	ld de,18
04850C DD 21 A2 00 0709*  	ld ix,162
       00          
048511 CD 68 B8 04 0710*  	call vdu_load_img
048515             0711*  
048515 21 B3 8B 04 0712*  	ld hl,Fhonda104
048519 11 1A C3 04 0713*  	ld de,filedata
04851D 01 00 00 01 0714*  	ld bc,65536
048521 3E 01       0715*  	ld a,mos_load
048523 5B CF       0716*  	RST.LIL 08h
048525 21 68 11 00 0717*  	ld hl,BUF_4456
048529 01 09 00 00 0718*  	ld bc,9
04852D 11 12 00 00 0719*  	ld de,18
048531 DD 21 A2 00 0720*  	ld ix,162
       00          
048536 CD 68 B8 04 0721*  	call vdu_load_img
04853A             0722*  
04853A 21 C9 8B 04 0723*  	ld hl,Fhonda105
04853E 11 1A C3 04 0724*  	ld de,filedata
048542 01 00 00 01 0725*  	ld bc,65536
048546 3E 01       0726*  	ld a,mos_load
048548 5B CF       0727*  	RST.LIL 08h
04854A 21 69 11 00 0728*  	ld hl,BUF_4457
04854E 01 04 00 00 0729*  	ld bc,4
048552 11 12 00 00 0730*  	ld de,18
048556 DD 21 48 00 0731*  	ld ix,72
       00          
04855B CD 68 B8 04 0732*  	call vdu_load_img
04855F             0733*  
04855F 21 DF 8B 04 0734*  	ld hl,Fhonda106
048563 11 1A C3 04 0735*  	ld de,filedata
048567 01 00 00 01 0736*  	ld bc,65536
04856B 3E 01       0737*  	ld a,mos_load
04856D 5B CF       0738*  	RST.LIL 08h
04856F 21 6A 11 00 0739*  	ld hl,BUF_4458
048573 01 08 00 00 0740*  	ld bc,8
048577 11 18 00 00 0741*  	ld de,24
04857B DD 21 C0 00 0742*  	ld ix,192
       00          
048580 CD 68 B8 04 0743*  	call vdu_load_img
048584             0744*  
048584 21 F5 8B 04 0745*  	ld hl,Fhonda107
048588 11 1A C3 04 0746*  	ld de,filedata
04858C 01 00 00 01 0747*  	ld bc,65536
048590 3E 01       0748*  	ld a,mos_load
048592 5B CF       0749*  	RST.LIL 08h
048594 21 6B 11 00 0750*  	ld hl,BUF_4459
048598 01 09 00 00 0751*  	ld bc,9
04859C 11 12 00 00 0752*  	ld de,18
0485A0 DD 21 A2 00 0753*  	ld ix,162
       00          
0485A5 CD 68 B8 04 0754*  	call vdu_load_img
0485A9             0755*  
0485A9 21 0B 8C 04 0756*  	ld hl,Fhonda108
0485AD 11 1A C3 04 0757*  	ld de,filedata
0485B1 01 00 00 01 0758*  	ld bc,65536
0485B5 3E 01       0759*  	ld a,mos_load
0485B7 5B CF       0760*  	RST.LIL 08h
0485B9 21 6C 11 00 0761*  	ld hl,BUF_4460
0485BD 01 03 00 00 0762*  	ld bc,3
0485C1 11 12 00 00 0763*  	ld de,18
0485C5 DD 21 36 00 0764*  	ld ix,54
       00          
0485CA CD 68 B8 04 0765*  	call vdu_load_img
0485CE             0766*  
0485CE 21 21 8C 04 0767*  	ld hl,Fhonda109
0485D2 11 1A C3 04 0768*  	ld de,filedata
0485D6 01 00 00 01 0769*  	ld bc,65536
0485DA 3E 01       0770*  	ld a,mos_load
0485DC 5B CF       0771*  	RST.LIL 08h
0485DE 21 6D 11 00 0772*  	ld hl,BUF_4461
0485E2 01 0E 00 00 0773*  	ld bc,14
0485E6 11 0D 00 00 0774*  	ld de,13
0485EA DD 21 B6 00 0775*  	ld ix,182
       00          
0485EF CD 68 B8 04 0776*  	call vdu_load_img
0485F3             0777*  
0485F3 21 37 8C 04 0778*  	ld hl,Fhonda110
0485F7 11 1A C3 04 0779*  	ld de,filedata
0485FB 01 00 00 01 0780*  	ld bc,65536
0485FF 3E 01       0781*  	ld a,mos_load
048601 5B CF       0782*  	RST.LIL 08h
048603 21 6E 11 00 0783*  	ld hl,BUF_4462
048607 01 09 00 00 0784*  	ld bc,9
04860B 11 0C 00 00 0785*  	ld de,12
04860F DD 21 6C 00 0786*  	ld ix,108
       00          
048614 CD 68 B8 04 0787*  	call vdu_load_img
048618             0788*  
048618 21 4D 8C 04 0789*  	ld hl,Fhonda111
04861C 11 1A C3 04 0790*  	ld de,filedata
048620 01 00 00 01 0791*  	ld bc,65536
048624 3E 01       0792*  	ld a,mos_load
048626 5B CF       0793*  	RST.LIL 08h
048628 21 6F 11 00 0794*  	ld hl,BUF_4463
04862C 01 09 00 00 0795*  	ld bc,9
048630 11 0C 00 00 0796*  	ld de,12
048634 DD 21 6C 00 0797*  	ld ix,108
       00          
048639 CD 68 B8 04 0798*  	call vdu_load_img
04863D             0799*  
04863D 21 63 8C 04 0800*  	ld hl,Fhonda112
048641 11 1A C3 04 0801*  	ld de,filedata
048645 01 00 00 01 0802*  	ld bc,65536
048649 3E 01       0803*  	ld a,mos_load
04864B 5B CF       0804*  	RST.LIL 08h
04864D 21 70 11 00 0805*  	ld hl,BUF_4464
048651 01 09 00 00 0806*  	ld bc,9
048655 11 12 00 00 0807*  	ld de,18
048659 DD 21 A2 00 0808*  	ld ix,162
       00          
04865E CD 68 B8 04 0809*  	call vdu_load_img
048662             0810*  
048662 21 79 8C 04 0811*  	ld hl,Fhonda113
048666 11 1A C3 04 0812*  	ld de,filedata
04866A 01 00 00 01 0813*  	ld bc,65536
04866E 3E 01       0814*  	ld a,mos_load
048670 5B CF       0815*  	RST.LIL 08h
048672 21 71 11 00 0816*  	ld hl,BUF_4465
048676 01 09 00 00 0817*  	ld bc,9
04867A 11 12 00 00 0818*  	ld de,18
04867E DD 21 A2 00 0819*  	ld ix,162
       00          
048683 CD 68 B8 04 0820*  	call vdu_load_img
048687             0821*  
048687 21 8F 8C 04 0822*  	ld hl,Fhonda114
04868B 11 1A C3 04 0823*  	ld de,filedata
04868F 01 00 00 01 0824*  	ld bc,65536
048693 3E 01       0825*  	ld a,mos_load
048695 5B CF       0826*  	RST.LIL 08h
048697 21 72 11 00 0827*  	ld hl,BUF_4466
04869B 01 06 00 00 0828*  	ld bc,6
04869F 11 0D 00 00 0829*  	ld de,13
0486A3 DD 21 4E 00 0830*  	ld ix,78
       00          
0486A8 CD 68 B8 04 0831*  	call vdu_load_img
0486AC             0832*  
0486AC 21 A5 8C 04 0833*  	ld hl,Fhonda115
0486B0 11 1A C3 04 0834*  	ld de,filedata
0486B4 01 00 00 01 0835*  	ld bc,65536
0486B8 3E 01       0836*  	ld a,mos_load
0486BA 5B CF       0837*  	RST.LIL 08h
0486BC 21 73 11 00 0838*  	ld hl,BUF_4467
0486C0 01 08 00 00 0839*  	ld bc,8
0486C4 11 0D 00 00 0840*  	ld de,13
0486C8 DD 21 68 00 0841*  	ld ix,104
       00          
0486CD CD 68 B8 04 0842*  	call vdu_load_img
0486D1             0843*  
0486D1 21 BB 8C 04 0844*  	ld hl,Fhonda116
0486D5 11 1A C3 04 0845*  	ld de,filedata
0486D9 01 00 00 01 0846*  	ld bc,65536
0486DD 3E 01       0847*  	ld a,mos_load
0486DF 5B CF       0848*  	RST.LIL 08h
0486E1 21 74 11 00 0849*  	ld hl,BUF_4468
0486E5 01 07 00 00 0850*  	ld bc,7
0486E9 11 0F 00 00 0851*  	ld de,15
0486ED DD 21 69 00 0852*  	ld ix,105
       00          
0486F2 CD 68 B8 04 0853*  	call vdu_load_img
0486F6             0854*  
0486F6 21 D1 8C 04 0855*  	ld hl,Fhonda117
0486FA 11 1A C3 04 0856*  	ld de,filedata
0486FE 01 00 00 01 0857*  	ld bc,65536
048702 3E 01       0858*  	ld a,mos_load
048704 5B CF       0859*  	RST.LIL 08h
048706 21 75 11 00 0860*  	ld hl,BUF_4469
04870A 01 09 00 00 0861*  	ld bc,9
04870E 11 0C 00 00 0862*  	ld de,12
048712 DD 21 6C 00 0863*  	ld ix,108
       00          
048717 CD 68 B8 04 0864*  	call vdu_load_img
04871B             0865*  
04871B 21 E7 8C 04 0866*  	ld hl,Fhonda118
04871F 11 1A C3 04 0867*  	ld de,filedata
048723 01 00 00 01 0868*  	ld bc,65536
048727 3E 01       0869*  	ld a,mos_load
048729 5B CF       0870*  	RST.LIL 08h
04872B 21 76 11 00 0871*  	ld hl,BUF_4470
04872F 01 09 00 00 0872*  	ld bc,9
048733 11 0C 00 00 0873*  	ld de,12
048737 DD 21 6C 00 0874*  	ld ix,108
       00          
04873C CD 68 B8 04 0875*  	call vdu_load_img
048740             0876*  
048740 21 FD 8C 04 0877*  	ld hl,Fhonda119
048744 11 1A C3 04 0878*  	ld de,filedata
048748 01 00 00 01 0879*  	ld bc,65536
04874C 3E 01       0880*  	ld a,mos_load
04874E 5B CF       0881*  	RST.LIL 08h
048750 21 77 11 00 0882*  	ld hl,BUF_4471
048754 01 0E 00 00 0883*  	ld bc,14
048758 11 0C 00 00 0884*  	ld de,12
04875C DD 21 A8 00 0885*  	ld ix,168
       00          
048761 CD 68 B8 04 0886*  	call vdu_load_img
048765             0887*  
048765 21 13 8D 04 0888*  	ld hl,Fhonda120
048769 11 1A C3 04 0889*  	ld de,filedata
04876D 01 00 00 01 0890*  	ld bc,65536
048771 3E 01       0891*  	ld a,mos_load
048773 5B CF       0892*  	RST.LIL 08h
048775 21 78 11 00 0893*  	ld hl,BUF_4472
048779 01 09 00 00 0894*  	ld bc,9
04877D 11 0C 00 00 0895*  	ld de,12
048781 DD 21 6C 00 0896*  	ld ix,108
       00          
048786 CD 68 B8 04 0897*  	call vdu_load_img
04878A             0898*  
04878A 21 29 8D 04 0899*  	ld hl,Fhonda121
04878E 11 1A C3 04 0900*  	ld de,filedata
048792 01 00 00 01 0901*  	ld bc,65536
048796 3E 01       0902*  	ld a,mos_load
048798 5B CF       0903*  	RST.LIL 08h
04879A 21 79 11 00 0904*  	ld hl,BUF_4473
04879E 01 09 00 00 0905*  	ld bc,9
0487A2 11 11 00 00 0906*  	ld de,17
0487A6 DD 21 99 00 0907*  	ld ix,153
       00          
0487AB CD 68 B8 04 0908*  	call vdu_load_img
0487AF             0909*  
0487AF 21 3F 8D 04 0910*  	ld hl,Fhonda122
0487B3 11 1A C3 04 0911*  	ld de,filedata
0487B7 01 00 00 01 0912*  	ld bc,65536
0487BB 3E 01       0913*  	ld a,mos_load
0487BD 5B CF       0914*  	RST.LIL 08h
0487BF 21 7A 11 00 0915*  	ld hl,BUF_4474
0487C3 01 09 00 00 0916*  	ld bc,9
0487C7 11 0C 00 00 0917*  	ld de,12
0487CB DD 21 6C 00 0918*  	ld ix,108
       00          
0487D0 CD 68 B8 04 0919*  	call vdu_load_img
0487D4             0920*  
0487D4 C9          0921*  	ret
0487D5             0922*  
0487D5 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
0487EB 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
048801 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
048817 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
04882D 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
048843 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
048859 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
04886F 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
048885 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
04889B 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0488B1 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
0488C7 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
0488DD 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
0488F3 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
048909 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
04891F 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
048935 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
04894B 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
048961 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
048977 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
04898D 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0489A3 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
0489B9 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
0489CF 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
0489E5 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
0489FB 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
048A11 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
048A27 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
048A3D 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
048A53 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
048A69 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
048A7F 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
048A95 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
048AAB 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
048AC1 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
048AD7 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
048AED 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
048B03 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
048B19 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
048B2F 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
048B45 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
048B5B 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
048B71 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
048B87 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
048B9D 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
048BB3 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
048BC9 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
048BDF 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
048BF5 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
048C0B 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
048C21 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
048C37 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
048C4D 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
048C63 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
048C79 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
048C8F 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
048CA5 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
048CBB 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
048CD1 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
048CE7 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
048CFD 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
048D13 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
048D29 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
048D3F 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
048D55             0019   	include "src/asm/font_retro_computer.asm"
048D55             0001*  ; Bitmap indices:
048D55             0002*  BUF_4128: equ 0x1020 ; 32
048D55             0003*  BUF_4129: equ 0x1021 ; 33 !
048D55             0004*  ; Missing character 34 "
048D55             0005*  ; Missing character 35 #
048D55             0006*  ; Missing character 36 $
048D55             0007*  ; Missing character 37 %
048D55             0008*  ; Missing character 38 &
048D55             0009*  ; Missing character 39 '
048D55             0010*  ; Missing character 40 (
048D55             0011*  ; Missing character 41 )
048D55             0012*  ; Missing character 42 *
048D55             0013*  ; Missing character 43 +
048D55             0014*  ; Missing character 44 ,
048D55             0015*  ; Missing character 45 -
048D55             0016*  ; Missing character 46 .
048D55             0017*  ; Missing character 47 /
048D55             0018*  BUF_4144: equ 0x1030 ; 48 0
048D55             0019*  BUF_4145: equ 0x1031 ; 49 1
048D55             0020*  BUF_4146: equ 0x1032 ; 50 2
048D55             0021*  BUF_4147: equ 0x1033 ; 51 3
048D55             0022*  BUF_4148: equ 0x1034 ; 52 4
048D55             0023*  BUF_4149: equ 0x1035 ; 53 5
048D55             0024*  BUF_4150: equ 0x1036 ; 54 6
048D55             0025*  BUF_4151: equ 0x1037 ; 55 7
048D55             0026*  BUF_4152: equ 0x1038 ; 56 8
048D55             0027*  BUF_4153: equ 0x1039 ; 57 9
048D55             0028*  ; Missing character 58 :
048D55             0029*  ; Missing character 59 ;
048D55             0030*  ; Missing character 60 <
048D55             0031*  ; Missing character 61 =
048D55             0032*  ; Missing character 62 >
048D55             0033*  BUF_4159: equ 0x103F ; 63 ?
048D55             0034*  ; Missing character 64 @
048D55             0035*  BUF_4161: equ 0x1041 ; 65 A
048D55             0036*  BUF_4162: equ 0x1042 ; 66 B
048D55             0037*  BUF_4163: equ 0x1043 ; 67 C
048D55             0038*  BUF_4164: equ 0x1044 ; 68 D
048D55             0039*  BUF_4165: equ 0x1045 ; 69 E
048D55             0040*  BUF_4166: equ 0x1046 ; 70 F
048D55             0041*  BUF_4167: equ 0x1047 ; 71 G
048D55             0042*  BUF_4168: equ 0x1048 ; 72 H
048D55             0043*  BUF_4169: equ 0x1049 ; 73 I
048D55             0044*  BUF_4170: equ 0x104A ; 74 J
048D55             0045*  BUF_4171: equ 0x104B ; 75 K
048D55             0046*  BUF_4172: equ 0x104C ; 76 L
048D55             0047*  BUF_4173: equ 0x104D ; 77 M
048D55             0048*  BUF_4174: equ 0x104E ; 78 N
048D55             0049*  BUF_4175: equ 0x104F ; 79 O
048D55             0050*  BUF_4176: equ 0x1050 ; 80 P
048D55             0051*  BUF_4177: equ 0x1051 ; 81 Q
048D55             0052*  BUF_4178: equ 0x1052 ; 82 R
048D55             0053*  BUF_4179: equ 0x1053 ; 83 S
048D55             0054*  BUF_4180: equ 0x1054 ; 84 T
048D55             0055*  BUF_4181: equ 0x1055 ; 85 U
048D55             0056*  BUF_4182: equ 0x1056 ; 86 V
048D55             0057*  BUF_4183: equ 0x1057 ; 87 W
048D55             0058*  BUF_4184: equ 0x1058 ; 88 X
048D55             0059*  BUF_4185: equ 0x1059 ; 89 Y
048D55             0060*  BUF_4186: equ 0x105A ; 90 Z
048D55             0061*  ; Missing character 91 [
048D55             0062*  ; Missing character 92 \
048D55             0063*  ; Missing character 93 ]
048D55             0064*  ; Missing character 94 ^
048D55             0065*  ; Missing character 95 _
048D55             0066*  ; Missing character 96 `
048D55             0067*  ; Missing character 97 a
048D55             0068*  ; Missing character 98 b
048D55             0069*  ; Missing character 99 c
048D55             0070*  ; Missing character 100 d
048D55             0071*  ; Missing character 101 e
048D55             0072*  ; Missing character 102 f
048D55             0073*  ; Missing character 103 g
048D55             0074*  ; Missing character 104 h
048D55             0075*  ; Missing character 105 i
048D55             0076*  ; Missing character 106 j
048D55             0077*  ; Missing character 107 k
048D55             0078*  ; Missing character 108 l
048D55             0079*  ; Missing character 109 m
048D55             0080*  ; Missing character 110 n
048D55             0081*  ; Missing character 111 o
048D55             0082*  ; Missing character 112 p
048D55             0083*  ; Missing character 113 q
048D55             0084*  ; Missing character 114 r
048D55             0085*  ; Missing character 115 s
048D55             0086*  ; Missing character 116 t
048D55             0087*  ; Missing character 117 u
048D55             0088*  ; Missing character 118 v
048D55             0089*  ; Missing character 119 w
048D55             0090*  ; Missing character 120 x
048D55             0091*  ; Missing character 121 y
048D55             0092*  ; Missing character 122 z
048D55             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
048D55             0094*  font_retro_computer:
048D55 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
048D5B 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
048D61 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
048D67 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
048D6D 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
048D73 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
048D79 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
048D7F 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
048D85 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
048D8B 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
048D91 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
048D97 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
048D9D 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
048DA3 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
048DA9 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
048DAF 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
048DB5 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
048DBB 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
048DC1 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
048DC7 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
048DCD 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
048DD3 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
048DD9 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
048DDF 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
048DE5 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
048DEB 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
048DF1 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
048DF7 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
048DFD 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
048E03 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
048E09 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
048E0F 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
048E15 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
048E1B 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
048E21 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
048E27 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
048E2D 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
048E33 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
048E39 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
048E3F 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
048E45 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
048E4B 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
048E51 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
048E57 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
048E5D 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
048E63 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
048E69 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
048E6F 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
048E75 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
048E7B 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
048E81 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
048E87 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
048E8D 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
048E93 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
048E99 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
048E9F 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
048EA5 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
048EAB 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
048EB1 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
048EB7 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
048EBD 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
048EC3 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
048EC9 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
048ECF 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
048ED5 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
048EDB 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
048EE1 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
048EE7 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
048EED 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
048EF3 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
048EF9 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
048EFF 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
048F05 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
048F0B 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
048F11 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
048F17 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
048F1D 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
048F23 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
048F29 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
048F2F 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
048F35 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
048F3B 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
048F41 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
048F47 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
048F4D 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
048F53 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
048F59 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
048F5F 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
048F65 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
048F6B 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
048F71 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
048F77             0186*  
048F77             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
048F77             0188*  load_font_retro_computer:
048F77             0189*  
048F77 21 1B 95 04 0190*  	ld hl,Frc032
048F7B 11 1A C3 04 0191*  	ld de,filedata
048F7F 01 00 00 01 0192*  	ld bc,65536
048F83 3E 01       0193*  	ld a,mos_load
048F85 5B CF       0194*  	RST.LIL 08h
048F87 21 20 10 00 0195*  	ld hl,BUF_4128
048F8B 01 06 00 00 0196*  	ld bc,6
048F8F 11 01 00 00 0197*  	ld de,1
048F93 DD 21 06 00 0198*  	ld ix,6
       00          
048F98 CD 68 B8 04 0199*  	call vdu_load_img
048F9C             0200*  
048F9C 21 2E 95 04 0201*  	ld hl,Frc033
048FA0 11 1A C3 04 0202*  	ld de,filedata
048FA4 01 00 00 01 0203*  	ld bc,65536
048FA8 3E 01       0204*  	ld a,mos_load
048FAA 5B CF       0205*  	RST.LIL 08h
048FAC 21 21 10 00 0206*  	ld hl,BUF_4129
048FB0 01 03 00 00 0207*  	ld bc,3
048FB4 11 0E 00 00 0208*  	ld de,14
048FB8 DD 21 2A 00 0209*  	ld ix,42
       00          
048FBD CD 68 B8 04 0210*  	call vdu_load_img
048FC1             0211*  ; Missing character 34
048FC1             0212*  ; Missing character 35
048FC1             0213*  ; Missing character 36
048FC1             0214*  ; Missing character 37
048FC1             0215*  ; Missing character 38
048FC1             0216*  ; Missing character 39
048FC1             0217*  ; Missing character 40
048FC1             0218*  ; Missing character 41
048FC1             0219*  ; Missing character 42
048FC1             0220*  ; Missing character 43
048FC1             0221*  ; Missing character 44
048FC1             0222*  ; Missing character 45
048FC1             0223*  ; Missing character 46
048FC1             0224*  ; Missing character 47
048FC1             0225*  
048FC1 21 41 95 04 0226*  	ld hl,Frc048
048FC5 11 1A C3 04 0227*  	ld de,filedata
048FC9 01 00 00 01 0228*  	ld bc,65536
048FCD 3E 01       0229*  	ld a,mos_load
048FCF 5B CF       0230*  	RST.LIL 08h
048FD1 21 30 10 00 0231*  	ld hl,BUF_4144
048FD5 01 08 00 00 0232*  	ld bc,8
048FD9 11 0E 00 00 0233*  	ld de,14
048FDD DD 21 70 00 0234*  	ld ix,112
       00          
048FE2 CD 68 B8 04 0235*  	call vdu_load_img
048FE6             0236*  
048FE6 21 54 95 04 0237*  	ld hl,Frc049
048FEA 11 1A C3 04 0238*  	ld de,filedata
048FEE 01 00 00 01 0239*  	ld bc,65536
048FF2 3E 01       0240*  	ld a,mos_load
048FF4 5B CF       0241*  	RST.LIL 08h
048FF6 21 31 10 00 0242*  	ld hl,BUF_4145
048FFA 01 08 00 00 0243*  	ld bc,8
048FFE 11 0E 00 00 0244*  	ld de,14
049002 DD 21 70 00 0245*  	ld ix,112
       00          
049007 CD 68 B8 04 0246*  	call vdu_load_img
04900B             0247*  
04900B 21 67 95 04 0248*  	ld hl,Frc050
04900F 11 1A C3 04 0249*  	ld de,filedata
049013 01 00 00 01 0250*  	ld bc,65536
049017 3E 01       0251*  	ld a,mos_load
049019 5B CF       0252*  	RST.LIL 08h
04901B 21 32 10 00 0253*  	ld hl,BUF_4146
04901F 01 08 00 00 0254*  	ld bc,8
049023 11 0E 00 00 0255*  	ld de,14
049027 DD 21 70 00 0256*  	ld ix,112
       00          
04902C CD 68 B8 04 0257*  	call vdu_load_img
049030             0258*  
049030 21 7A 95 04 0259*  	ld hl,Frc051
049034 11 1A C3 04 0260*  	ld de,filedata
049038 01 00 00 01 0261*  	ld bc,65536
04903C 3E 01       0262*  	ld a,mos_load
04903E 5B CF       0263*  	RST.LIL 08h
049040 21 33 10 00 0264*  	ld hl,BUF_4147
049044 01 08 00 00 0265*  	ld bc,8
049048 11 0E 00 00 0266*  	ld de,14
04904C DD 21 70 00 0267*  	ld ix,112
       00          
049051 CD 68 B8 04 0268*  	call vdu_load_img
049055             0269*  
049055 21 8D 95 04 0270*  	ld hl,Frc052
049059 11 1A C3 04 0271*  	ld de,filedata
04905D 01 00 00 01 0272*  	ld bc,65536
049061 3E 01       0273*  	ld a,mos_load
049063 5B CF       0274*  	RST.LIL 08h
049065 21 34 10 00 0275*  	ld hl,BUF_4148
049069 01 08 00 00 0276*  	ld bc,8
04906D 11 0E 00 00 0277*  	ld de,14
049071 DD 21 70 00 0278*  	ld ix,112
       00          
049076 CD 68 B8 04 0279*  	call vdu_load_img
04907A             0280*  
04907A 21 A0 95 04 0281*  	ld hl,Frc053
04907E 11 1A C3 04 0282*  	ld de,filedata
049082 01 00 00 01 0283*  	ld bc,65536
049086 3E 01       0284*  	ld a,mos_load
049088 5B CF       0285*  	RST.LIL 08h
04908A 21 35 10 00 0286*  	ld hl,BUF_4149
04908E 01 08 00 00 0287*  	ld bc,8
049092 11 0E 00 00 0288*  	ld de,14
049096 DD 21 70 00 0289*  	ld ix,112
       00          
04909B CD 68 B8 04 0290*  	call vdu_load_img
04909F             0291*  
04909F 21 B3 95 04 0292*  	ld hl,Frc054
0490A3 11 1A C3 04 0293*  	ld de,filedata
0490A7 01 00 00 01 0294*  	ld bc,65536
0490AB 3E 01       0295*  	ld a,mos_load
0490AD 5B CF       0296*  	RST.LIL 08h
0490AF 21 36 10 00 0297*  	ld hl,BUF_4150
0490B3 01 08 00 00 0298*  	ld bc,8
0490B7 11 0E 00 00 0299*  	ld de,14
0490BB DD 21 70 00 0300*  	ld ix,112
       00          
0490C0 CD 68 B8 04 0301*  	call vdu_load_img
0490C4             0302*  
0490C4 21 C6 95 04 0303*  	ld hl,Frc055
0490C8 11 1A C3 04 0304*  	ld de,filedata
0490CC 01 00 00 01 0305*  	ld bc,65536
0490D0 3E 01       0306*  	ld a,mos_load
0490D2 5B CF       0307*  	RST.LIL 08h
0490D4 21 37 10 00 0308*  	ld hl,BUF_4151
0490D8 01 08 00 00 0309*  	ld bc,8
0490DC 11 0E 00 00 0310*  	ld de,14
0490E0 DD 21 70 00 0311*  	ld ix,112
       00          
0490E5 CD 68 B8 04 0312*  	call vdu_load_img
0490E9             0313*  
0490E9 21 D9 95 04 0314*  	ld hl,Frc056
0490ED 11 1A C3 04 0315*  	ld de,filedata
0490F1 01 00 00 01 0316*  	ld bc,65536
0490F5 3E 01       0317*  	ld a,mos_load
0490F7 5B CF       0318*  	RST.LIL 08h
0490F9 21 38 10 00 0319*  	ld hl,BUF_4152
0490FD 01 08 00 00 0320*  	ld bc,8
049101 11 0E 00 00 0321*  	ld de,14
049105 DD 21 70 00 0322*  	ld ix,112
       00          
04910A CD 68 B8 04 0323*  	call vdu_load_img
04910E             0324*  
04910E 21 EC 95 04 0325*  	ld hl,Frc057
049112 11 1A C3 04 0326*  	ld de,filedata
049116 01 00 00 01 0327*  	ld bc,65536
04911A 3E 01       0328*  	ld a,mos_load
04911C 5B CF       0329*  	RST.LIL 08h
04911E 21 39 10 00 0330*  	ld hl,BUF_4153
049122 01 08 00 00 0331*  	ld bc,8
049126 11 0E 00 00 0332*  	ld de,14
04912A DD 21 70 00 0333*  	ld ix,112
       00          
04912F CD 68 B8 04 0334*  	call vdu_load_img
049133             0335*  ; Missing character 58
049133             0336*  ; Missing character 59
049133             0337*  ; Missing character 60
049133             0338*  ; Missing character 61
049133             0339*  ; Missing character 62
049133             0340*  
049133 21 FF 95 04 0341*  	ld hl,Frc063
049137 11 1A C3 04 0342*  	ld de,filedata
04913B 01 00 00 01 0343*  	ld bc,65536
04913F 3E 01       0344*  	ld a,mos_load
049141 5B CF       0345*  	RST.LIL 08h
049143 21 3F 10 00 0346*  	ld hl,BUF_4159
049147 01 08 00 00 0347*  	ld bc,8
04914B 11 0E 00 00 0348*  	ld de,14
04914F DD 21 70 00 0349*  	ld ix,112
       00          
049154 CD 68 B8 04 0350*  	call vdu_load_img
049158             0351*  ; Missing character 64
049158             0352*  
049158 21 12 96 04 0353*  	ld hl,Frc065
04915C 11 1A C3 04 0354*  	ld de,filedata
049160 01 00 00 01 0355*  	ld bc,65536
049164 3E 01       0356*  	ld a,mos_load
049166 5B CF       0357*  	RST.LIL 08h
049168 21 41 10 00 0358*  	ld hl,BUF_4161
04916C 01 07 00 00 0359*  	ld bc,7
049170 11 0E 00 00 0360*  	ld de,14
049174 DD 21 62 00 0361*  	ld ix,98
       00          
049179 CD 68 B8 04 0362*  	call vdu_load_img
04917D             0363*  
04917D 21 25 96 04 0364*  	ld hl,Frc066
049181 11 1A C3 04 0365*  	ld de,filedata
049185 01 00 00 01 0366*  	ld bc,65536
049189 3E 01       0367*  	ld a,mos_load
04918B 5B CF       0368*  	RST.LIL 08h
04918D 21 42 10 00 0369*  	ld hl,BUF_4162
049191 01 08 00 00 0370*  	ld bc,8
049195 11 0E 00 00 0371*  	ld de,14
049199 DD 21 70 00 0372*  	ld ix,112
       00          
04919E CD 68 B8 04 0373*  	call vdu_load_img
0491A2             0374*  
0491A2 21 38 96 04 0375*  	ld hl,Frc067
0491A6 11 1A C3 04 0376*  	ld de,filedata
0491AA 01 00 00 01 0377*  	ld bc,65536
0491AE 3E 01       0378*  	ld a,mos_load
0491B0 5B CF       0379*  	RST.LIL 08h
0491B2 21 43 10 00 0380*  	ld hl,BUF_4163
0491B6 01 07 00 00 0381*  	ld bc,7
0491BA 11 0E 00 00 0382*  	ld de,14
0491BE DD 21 62 00 0383*  	ld ix,98
       00          
0491C3 CD 68 B8 04 0384*  	call vdu_load_img
0491C7             0385*  
0491C7 21 4B 96 04 0386*  	ld hl,Frc068
0491CB 11 1A C3 04 0387*  	ld de,filedata
0491CF 01 00 00 01 0388*  	ld bc,65536
0491D3 3E 01       0389*  	ld a,mos_load
0491D5 5B CF       0390*  	RST.LIL 08h
0491D7 21 44 10 00 0391*  	ld hl,BUF_4164
0491DB 01 08 00 00 0392*  	ld bc,8
0491DF 11 0E 00 00 0393*  	ld de,14
0491E3 DD 21 70 00 0394*  	ld ix,112
       00          
0491E8 CD 68 B8 04 0395*  	call vdu_load_img
0491EC             0396*  
0491EC 21 5E 96 04 0397*  	ld hl,Frc069
0491F0 11 1A C3 04 0398*  	ld de,filedata
0491F4 01 00 00 01 0399*  	ld bc,65536
0491F8 3E 01       0400*  	ld a,mos_load
0491FA 5B CF       0401*  	RST.LIL 08h
0491FC 21 45 10 00 0402*  	ld hl,BUF_4165
049200 01 08 00 00 0403*  	ld bc,8
049204 11 0E 00 00 0404*  	ld de,14
049208 DD 21 70 00 0405*  	ld ix,112
       00          
04920D CD 68 B8 04 0406*  	call vdu_load_img
049211             0407*  
049211 21 71 96 04 0408*  	ld hl,Frc070
049215 11 1A C3 04 0409*  	ld de,filedata
049219 01 00 00 01 0410*  	ld bc,65536
04921D 3E 01       0411*  	ld a,mos_load
04921F 5B CF       0412*  	RST.LIL 08h
049221 21 46 10 00 0413*  	ld hl,BUF_4166
049225 01 07 00 00 0414*  	ld bc,7
049229 11 0E 00 00 0415*  	ld de,14
04922D DD 21 62 00 0416*  	ld ix,98
       00          
049232 CD 68 B8 04 0417*  	call vdu_load_img
049236             0418*  
049236 21 84 96 04 0419*  	ld hl,Frc071
04923A 11 1A C3 04 0420*  	ld de,filedata
04923E 01 00 00 01 0421*  	ld bc,65536
049242 3E 01       0422*  	ld a,mos_load
049244 5B CF       0423*  	RST.LIL 08h
049246 21 47 10 00 0424*  	ld hl,BUF_4167
04924A 01 08 00 00 0425*  	ld bc,8
04924E 11 0E 00 00 0426*  	ld de,14
049252 DD 21 70 00 0427*  	ld ix,112
       00          
049257 CD 68 B8 04 0428*  	call vdu_load_img
04925B             0429*  
04925B 21 97 96 04 0430*  	ld hl,Frc072
04925F 11 1A C3 04 0431*  	ld de,filedata
049263 01 00 00 01 0432*  	ld bc,65536
049267 3E 01       0433*  	ld a,mos_load
049269 5B CF       0434*  	RST.LIL 08h
04926B 21 48 10 00 0435*  	ld hl,BUF_4168
04926F 01 07 00 00 0436*  	ld bc,7
049273 11 0E 00 00 0437*  	ld de,14
049277 DD 21 62 00 0438*  	ld ix,98
       00          
04927C CD 68 B8 04 0439*  	call vdu_load_img
049280             0440*  
049280 21 AA 96 04 0441*  	ld hl,Frc073
049284 11 1A C3 04 0442*  	ld de,filedata
049288 01 00 00 01 0443*  	ld bc,65536
04928C 3E 01       0444*  	ld a,mos_load
04928E 5B CF       0445*  	RST.LIL 08h
049290 21 49 10 00 0446*  	ld hl,BUF_4169
049294 01 07 00 00 0447*  	ld bc,7
049298 11 0E 00 00 0448*  	ld de,14
04929C DD 21 62 00 0449*  	ld ix,98
       00          
0492A1 CD 68 B8 04 0450*  	call vdu_load_img
0492A5             0451*  
0492A5 21 BD 96 04 0452*  	ld hl,Frc074
0492A9 11 1A C3 04 0453*  	ld de,filedata
0492AD 01 00 00 01 0454*  	ld bc,65536
0492B1 3E 01       0455*  	ld a,mos_load
0492B3 5B CF       0456*  	RST.LIL 08h
0492B5 21 4A 10 00 0457*  	ld hl,BUF_4170
0492B9 01 08 00 00 0458*  	ld bc,8
0492BD 11 0E 00 00 0459*  	ld de,14
0492C1 DD 21 70 00 0460*  	ld ix,112
       00          
0492C6 CD 68 B8 04 0461*  	call vdu_load_img
0492CA             0462*  
0492CA 21 D0 96 04 0463*  	ld hl,Frc075
0492CE 11 1A C3 04 0464*  	ld de,filedata
0492D2 01 00 00 01 0465*  	ld bc,65536
0492D6 3E 01       0466*  	ld a,mos_load
0492D8 5B CF       0467*  	RST.LIL 08h
0492DA 21 4B 10 00 0468*  	ld hl,BUF_4171
0492DE 01 07 00 00 0469*  	ld bc,7
0492E2 11 0E 00 00 0470*  	ld de,14
0492E6 DD 21 62 00 0471*  	ld ix,98
       00          
0492EB CD 68 B8 04 0472*  	call vdu_load_img
0492EF             0473*  
0492EF 21 E3 96 04 0474*  	ld hl,Frc076
0492F3 11 1A C3 04 0475*  	ld de,filedata
0492F7 01 00 00 01 0476*  	ld bc,65536
0492FB 3E 01       0477*  	ld a,mos_load
0492FD 5B CF       0478*  	RST.LIL 08h
0492FF 21 4C 10 00 0479*  	ld hl,BUF_4172
049303 01 08 00 00 0480*  	ld bc,8
049307 11 0E 00 00 0481*  	ld de,14
04930B DD 21 70 00 0482*  	ld ix,112
       00          
049310 CD 68 B8 04 0483*  	call vdu_load_img
049314             0484*  
049314 21 F6 96 04 0485*  	ld hl,Frc077
049318 11 1A C3 04 0486*  	ld de,filedata
04931C 01 00 00 01 0487*  	ld bc,65536
049320 3E 01       0488*  	ld a,mos_load
049322 5B CF       0489*  	RST.LIL 08h
049324 21 4D 10 00 0490*  	ld hl,BUF_4173
049328 01 09 00 00 0491*  	ld bc,9
04932C 11 0E 00 00 0492*  	ld de,14
049330 DD 21 7E 00 0493*  	ld ix,126
       00          
049335 CD 68 B8 04 0494*  	call vdu_load_img
049339             0495*  
049339 21 09 97 04 0496*  	ld hl,Frc078
04933D 11 1A C3 04 0497*  	ld de,filedata
049341 01 00 00 01 0498*  	ld bc,65536
049345 3E 01       0499*  	ld a,mos_load
049347 5B CF       0500*  	RST.LIL 08h
049349 21 4E 10 00 0501*  	ld hl,BUF_4174
04934D 01 07 00 00 0502*  	ld bc,7
049351 11 0E 00 00 0503*  	ld de,14
049355 DD 21 62 00 0504*  	ld ix,98
       00          
04935A CD 68 B8 04 0505*  	call vdu_load_img
04935E             0506*  
04935E 21 1C 97 04 0507*  	ld hl,Frc079
049362 11 1A C3 04 0508*  	ld de,filedata
049366 01 00 00 01 0509*  	ld bc,65536
04936A 3E 01       0510*  	ld a,mos_load
04936C 5B CF       0511*  	RST.LIL 08h
04936E 21 4F 10 00 0512*  	ld hl,BUF_4175
049372 01 08 00 00 0513*  	ld bc,8
049376 11 0E 00 00 0514*  	ld de,14
04937A DD 21 70 00 0515*  	ld ix,112
       00          
04937F CD 68 B8 04 0516*  	call vdu_load_img
049383             0517*  
049383 21 2F 97 04 0518*  	ld hl,Frc080
049387 11 1A C3 04 0519*  	ld de,filedata
04938B 01 00 00 01 0520*  	ld bc,65536
04938F 3E 01       0521*  	ld a,mos_load
049391 5B CF       0522*  	RST.LIL 08h
049393 21 50 10 00 0523*  	ld hl,BUF_4176
049397 01 07 00 00 0524*  	ld bc,7
04939B 11 0E 00 00 0525*  	ld de,14
04939F DD 21 62 00 0526*  	ld ix,98
       00          
0493A4 CD 68 B8 04 0527*  	call vdu_load_img
0493A8             0528*  
0493A8 21 42 97 04 0529*  	ld hl,Frc081
0493AC 11 1A C3 04 0530*  	ld de,filedata
0493B0 01 00 00 01 0531*  	ld bc,65536
0493B4 3E 01       0532*  	ld a,mos_load
0493B6 5B CF       0533*  	RST.LIL 08h
0493B8 21 51 10 00 0534*  	ld hl,BUF_4177
0493BC 01 08 00 00 0535*  	ld bc,8
0493C0 11 0F 00 00 0536*  	ld de,15
0493C4 DD 21 78 00 0537*  	ld ix,120
       00          
0493C9 CD 68 B8 04 0538*  	call vdu_load_img
0493CD             0539*  
0493CD 21 55 97 04 0540*  	ld hl,Frc082
0493D1 11 1A C3 04 0541*  	ld de,filedata
0493D5 01 00 00 01 0542*  	ld bc,65536
0493D9 3E 01       0543*  	ld a,mos_load
0493DB 5B CF       0544*  	RST.LIL 08h
0493DD 21 52 10 00 0545*  	ld hl,BUF_4178
0493E1 01 08 00 00 0546*  	ld bc,8
0493E5 11 0E 00 00 0547*  	ld de,14
0493E9 DD 21 70 00 0548*  	ld ix,112
       00          
0493EE CD 68 B8 04 0549*  	call vdu_load_img
0493F2             0550*  
0493F2 21 68 97 04 0551*  	ld hl,Frc083
0493F6 11 1A C3 04 0552*  	ld de,filedata
0493FA 01 00 00 01 0553*  	ld bc,65536
0493FE 3E 01       0554*  	ld a,mos_load
049400 5B CF       0555*  	RST.LIL 08h
049402 21 53 10 00 0556*  	ld hl,BUF_4179
049406 01 08 00 00 0557*  	ld bc,8
04940A 11 0E 00 00 0558*  	ld de,14
04940E DD 21 70 00 0559*  	ld ix,112
       00          
049413 CD 68 B8 04 0560*  	call vdu_load_img
049417             0561*  
049417 21 7B 97 04 0562*  	ld hl,Frc084
04941B 11 1A C3 04 0563*  	ld de,filedata
04941F 01 00 00 01 0564*  	ld bc,65536
049423 3E 01       0565*  	ld a,mos_load
049425 5B CF       0566*  	RST.LIL 08h
049427 21 54 10 00 0567*  	ld hl,BUF_4180
04942B 01 07 00 00 0568*  	ld bc,7
04942F 11 0E 00 00 0569*  	ld de,14
049433 DD 21 62 00 0570*  	ld ix,98
       00          
049438 CD 68 B8 04 0571*  	call vdu_load_img
04943C             0572*  
04943C 21 8E 97 04 0573*  	ld hl,Frc085
049440 11 1A C3 04 0574*  	ld de,filedata
049444 01 00 00 01 0575*  	ld bc,65536
049448 3E 01       0576*  	ld a,mos_load
04944A 5B CF       0577*  	RST.LIL 08h
04944C 21 55 10 00 0578*  	ld hl,BUF_4181
049450 01 08 00 00 0579*  	ld bc,8
049454 11 0E 00 00 0580*  	ld de,14
049458 DD 21 70 00 0581*  	ld ix,112
       00          
04945D CD 68 B8 04 0582*  	call vdu_load_img
049461             0583*  
049461 21 A1 97 04 0584*  	ld hl,Frc086
049465 11 1A C3 04 0585*  	ld de,filedata
049469 01 00 00 01 0586*  	ld bc,65536
04946D 3E 01       0587*  	ld a,mos_load
04946F 5B CF       0588*  	RST.LIL 08h
049471 21 56 10 00 0589*  	ld hl,BUF_4182
049475 01 07 00 00 0590*  	ld bc,7
049479 11 0E 00 00 0591*  	ld de,14
04947D DD 21 62 00 0592*  	ld ix,98
       00          
049482 CD 68 B8 04 0593*  	call vdu_load_img
049486             0594*  
049486 21 B4 97 04 0595*  	ld hl,Frc087
04948A 11 1A C3 04 0596*  	ld de,filedata
04948E 01 00 00 01 0597*  	ld bc,65536
049492 3E 01       0598*  	ld a,mos_load
049494 5B CF       0599*  	RST.LIL 08h
049496 21 57 10 00 0600*  	ld hl,BUF_4183
04949A 01 0B 00 00 0601*  	ld bc,11
04949E 11 0E 00 00 0602*  	ld de,14
0494A2 DD 21 9A 00 0603*  	ld ix,154
       00          
0494A7 CD 68 B8 04 0604*  	call vdu_load_img
0494AB             0605*  
0494AB 21 C7 97 04 0606*  	ld hl,Frc088
0494AF 11 1A C3 04 0607*  	ld de,filedata
0494B3 01 00 00 01 0608*  	ld bc,65536
0494B7 3E 01       0609*  	ld a,mos_load
0494B9 5B CF       0610*  	RST.LIL 08h
0494BB 21 58 10 00 0611*  	ld hl,BUF_4184
0494BF 01 07 00 00 0612*  	ld bc,7
0494C3 11 0E 00 00 0613*  	ld de,14
0494C7 DD 21 62 00 0614*  	ld ix,98
       00          
0494CC CD 68 B8 04 0615*  	call vdu_load_img
0494D0             0616*  
0494D0 21 DA 97 04 0617*  	ld hl,Frc089
0494D4 11 1A C3 04 0618*  	ld de,filedata
0494D8 01 00 00 01 0619*  	ld bc,65536
0494DC 3E 01       0620*  	ld a,mos_load
0494DE 5B CF       0621*  	RST.LIL 08h
0494E0 21 59 10 00 0622*  	ld hl,BUF_4185
0494E4 01 08 00 00 0623*  	ld bc,8
0494E8 11 0E 00 00 0624*  	ld de,14
0494EC DD 21 70 00 0625*  	ld ix,112
       00          
0494F1 CD 68 B8 04 0626*  	call vdu_load_img
0494F5             0627*  
0494F5 21 ED 97 04 0628*  	ld hl,Frc090
0494F9 11 1A C3 04 0629*  	ld de,filedata
0494FD 01 00 00 01 0630*  	ld bc,65536
049501 3E 01       0631*  	ld a,mos_load
049503 5B CF       0632*  	RST.LIL 08h
049505 21 5A 10 00 0633*  	ld hl,BUF_4186
049509 01 07 00 00 0634*  	ld bc,7
04950D 11 0E 00 00 0635*  	ld de,14
049511 DD 21 62 00 0636*  	ld ix,98
       00          
049516 CD 68 B8 04 0637*  	call vdu_load_img
04951A             0638*  ; Missing character 91
04951A             0639*  ; Missing character 92
04951A             0640*  ; Missing character 93
04951A             0641*  ; Missing character 94
04951A             0642*  ; Missing character 95
04951A             0643*  ; Missing character 96
04951A             0644*  ; Missing character 97
04951A             0645*  ; Missing character 98
04951A             0646*  ; Missing character 99
04951A             0647*  ; Missing character 100
04951A             0648*  ; Missing character 101
04951A             0649*  ; Missing character 102
04951A             0650*  ; Missing character 103
04951A             0651*  ; Missing character 104
04951A             0652*  ; Missing character 105
04951A             0653*  ; Missing character 106
04951A             0654*  ; Missing character 107
04951A             0655*  ; Missing character 108
04951A             0656*  ; Missing character 109
04951A             0657*  ; Missing character 110
04951A             0658*  ; Missing character 111
04951A             0659*  ; Missing character 112
04951A             0660*  ; Missing character 113
04951A             0661*  ; Missing character 114
04951A             0662*  ; Missing character 115
04951A             0663*  ; Missing character 116
04951A             0664*  ; Missing character 117
04951A             0665*  ; Missing character 118
04951A             0666*  ; Missing character 119
04951A             0667*  ; Missing character 120
04951A             0668*  ; Missing character 121
04951A             0669*  ; Missing character 122
04951A             0670*  
04951A C9          0671*  	ret
04951B             0672*  
04951B 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
04952E 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
049541 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
049554 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
049567 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
04957A 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
04958D 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
0495A0 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
0495B3 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
0495C6 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
0495D9 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
0495EC 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
0495FF 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
049612 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
049625 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
049638 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
04964B 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
04965E 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
049671 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
049684 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
049697 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
0496AA 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
0496BD 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
0496D0 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
0496E3 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
0496F6 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
049709 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
04971C 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
04972F 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
049742 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
049755 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
049768 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
04977B 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
04978E 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
0497A1 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
0497B4 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
0497C7 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
0497DA 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
0497ED 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
049800             0020   	include "src/asm/ui.asm"
049800             0001*  ; ui routines will go here
049800             0021   	include "src/asm/ui_img.asm"
049800             0001*  ; Bitmap indices:
049800             0002*  BUF_UI_BJ_120_120: equ 0x2000
049800             0003*  BUF_UI_LOWER_PANEL: equ 0x2001
049800             0004*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2002
049800             0005*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2003
049800             0006*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2004
049800             0007*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2005
049800             0008*  BUF_UI_SPLASH: equ 0x2006
049800             0009*  
049800             0010*  ; Import .rgba2 bitmap files and load them into VDP buffers
049800             0011*  load_ui_images:
049800             0012*  
049800 21 20 99 04 0013*  	ld hl,F_UI_bj_120_120
049804 11 1A C3 04 0014*  	ld de,filedata
049808 01 00 00 01 0015*  	ld bc,65536
04980C 3E 01       0016*  	ld a,mos_load
04980E 5B CF       0017*  	RST.LIL 08h
049810 21 00 20 00 0018*  	ld hl,BUF_UI_BJ_120_120
049814 01 78 00 00 0019*  	ld bc,120
049818 11 78 00 00 0020*  	ld de,120
04981C DD 21 40 38 0021*  	ld ix,14400
       00          
049821 CD 68 B8 04 0022*  	call vdu_load_img
049825 3E 2E       0023*  	LD A, '.'
049827 5B D7       0024*  	RST.LIL 10h
049829             0025*  
049829 21 34 99 04 0026*  	ld hl,F_UI_lower_panel
04982D 11 1A C3 04 0027*  	ld de,filedata
049831 01 00 00 01 0028*  	ld bc,65536
049835 3E 01       0029*  	ld a,mos_load
049837 5B CF       0030*  	RST.LIL 08h
049839 21 01 20 00 0031*  	ld hl,BUF_UI_LOWER_PANEL
04983D 01 40 01 00 0032*  	ld bc,320
049841 11 50 00 00 0033*  	ld de,80
049845 DD 21 00 64 0034*  	ld ix,25600
       00          
04984A CD 68 B8 04 0035*  	call vdu_load_img
04984E 3E 2E       0036*  	LD A, '.'
049850 5B D7       0037*  	RST.LIL 10h
049852             0038*  
049852 21 49 99 04 0039*  	ld hl,F_UI_lower_panel_gatling
049856 11 1A C3 04 0040*  	ld de,filedata
04985A 01 00 00 01 0041*  	ld bc,65536
04985E 3E 01       0042*  	ld a,mos_load
049860 5B CF       0043*  	RST.LIL 08h
049862 21 02 20 00 0044*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
049866 01 28 00 00 0045*  	ld bc,40
04986A 11 14 00 00 0046*  	ld de,20
04986E DD 21 20 03 0047*  	ld ix,800
       00          
049873 CD 68 B8 04 0048*  	call vdu_load_img
049877 3E 2E       0049*  	LD A, '.'
049879 5B D7       0050*  	RST.LIL 10h
04987B             0051*  
04987B 21 66 99 04 0052*  	ld hl,F_UI_lower_panel_knife
04987F 11 1A C3 04 0053*  	ld de,filedata
049883 01 00 00 01 0054*  	ld bc,65536
049887 3E 01       0055*  	ld a,mos_load
049889 5B CF       0056*  	RST.LIL 08h
04988B 21 03 20 00 0057*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
04988F 01 28 00 00 0058*  	ld bc,40
049893 11 14 00 00 0059*  	ld de,20
049897 DD 21 20 03 0060*  	ld ix,800
       00          
04989C CD 68 B8 04 0061*  	call vdu_load_img
0498A0 3E 2E       0062*  	LD A, '.'
0498A2 5B D7       0063*  	RST.LIL 10h
0498A4             0064*  
0498A4 21 81 99 04 0065*  	ld hl,F_UI_lower_panel_machine_gun
0498A8 11 1A C3 04 0066*  	ld de,filedata
0498AC 01 00 00 01 0067*  	ld bc,65536
0498B0 3E 01       0068*  	ld a,mos_load
0498B2 5B CF       0069*  	RST.LIL 08h
0498B4 21 04 20 00 0070*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
0498B8 01 28 00 00 0071*  	ld bc,40
0498BC 11 14 00 00 0072*  	ld de,20
0498C0 DD 21 20 03 0073*  	ld ix,800
       00          
0498C5 CD 68 B8 04 0074*  	call vdu_load_img
0498C9 3E 2E       0075*  	LD A, '.'
0498CB 5B D7       0076*  	RST.LIL 10h
0498CD             0077*  
0498CD 21 A2 99 04 0078*  	ld hl,F_UI_lower_panel_pistol
0498D1 11 1A C3 04 0079*  	ld de,filedata
0498D5 01 00 00 01 0080*  	ld bc,65536
0498D9 3E 01       0081*  	ld a,mos_load
0498DB 5B CF       0082*  	RST.LIL 08h
0498DD 21 05 20 00 0083*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
0498E1 01 28 00 00 0084*  	ld bc,40
0498E5 11 14 00 00 0085*  	ld de,20
0498E9 DD 21 20 03 0086*  	ld ix,800
       00          
0498EE CD 68 B8 04 0087*  	call vdu_load_img
0498F2 3E 2E       0088*  	LD A, '.'
0498F4 5B D7       0089*  	RST.LIL 10h
0498F6             0090*  
0498F6 21 BE 99 04 0091*  	ld hl,F_UI_splash
0498FA 11 1A C3 04 0092*  	ld de,filedata
0498FE 01 00 00 01 0093*  	ld bc,65536
049902 3E 01       0094*  	ld a,mos_load
049904 5B CF       0095*  	RST.LIL 08h
049906 21 06 20 00 0096*  	ld hl,BUF_UI_SPLASH
04990A 01 40 01 00 0097*  	ld bc,320
04990E 11 A0 00 00 0098*  	ld de,160
049912 DD 21 00 C8 0099*  	ld ix,51200
       00          
049917 CD 68 B8 04 0100*  	call vdu_load_img
04991B 3E 2E       0101*  	LD A, '.'
04991D 5B D7       0102*  	RST.LIL 10h
04991F             0103*  
04991F C9          0104*  	ret
049920             0105*  
049920 75 69 2F 62 0106*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
049934 75 69 2F 6C 0107*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
049949 75 69 2F 6C 0108*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
049966 75 69 2F 6C 0109*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
049981 75 69 2F 6C 0110*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
0499A2 75 69 2F 6C 0111*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
0499BE 75 69 2F 73 0112*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
0499CE             0022   	include "src/asm/ui_img_bj.asm"
0499CE             0001*  ; Bitmap indices:
0499CE             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
0499CE             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
0499CE             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
0499CE             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
0499CE             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
0499CE             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
0499CE             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
0499CE             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
0499CE             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
0499CE             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
0499CE             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
0499CE             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
0499CE             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
0499CE             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
0499CE             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
0499CE             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
0499CE             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
0499CE             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
0499CE             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
0499CE             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
0499CE             0022*  
0499CE             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
0499CE             0024*  load_ui_images_bj:
0499CE             0025*  
0499CE 21 03 9D 04 0026*  	ld hl,F_UI_bj_gatling_00
0499D2 11 1A C3 04 0027*  	ld de,filedata
0499D6 01 00 00 01 0028*  	ld bc,65536
0499DA 3E 01       0029*  	ld a,mos_load
0499DC 5B CF       0030*  	RST.LIL 08h
0499DE 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
0499E2 01 40 00 00 0032*  	ld bc,64
0499E6 11 40 00 00 0033*  	ld de,64
0499EA DD 21 00 10 0034*  	ld ix,4096
       00          
0499EF CD 68 B8 04 0035*  	call vdu_load_img
0499F3 3E 2E       0036*  	LD A, '.'
0499F5 5B D7       0037*  	RST.LIL 10h
0499F7             0038*  
0499F7 21 1D 9D 04 0039*  	ld hl,F_UI_bj_gatling_01
0499FB 11 1A C3 04 0040*  	ld de,filedata
0499FF 01 00 00 01 0041*  	ld bc,65536
049A03 3E 01       0042*  	ld a,mos_load
049A05 5B CF       0043*  	RST.LIL 08h
049A07 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
049A0B 01 40 00 00 0045*  	ld bc,64
049A0F 11 40 00 00 0046*  	ld de,64
049A13 DD 21 00 10 0047*  	ld ix,4096
       00          
049A18 CD 68 B8 04 0048*  	call vdu_load_img
049A1C 3E 2E       0049*  	LD A, '.'
049A1E 5B D7       0050*  	RST.LIL 10h
049A20             0051*  
049A20 21 37 9D 04 0052*  	ld hl,F_UI_bj_gatling_02
049A24 11 1A C3 04 0053*  	ld de,filedata
049A28 01 00 00 01 0054*  	ld bc,65536
049A2C 3E 01       0055*  	ld a,mos_load
049A2E 5B CF       0056*  	RST.LIL 08h
049A30 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
049A34 01 40 00 00 0058*  	ld bc,64
049A38 11 40 00 00 0059*  	ld de,64
049A3C DD 21 00 10 0060*  	ld ix,4096
       00          
049A41 CD 68 B8 04 0061*  	call vdu_load_img
049A45 3E 2E       0062*  	LD A, '.'
049A47 5B D7       0063*  	RST.LIL 10h
049A49             0064*  
049A49 21 51 9D 04 0065*  	ld hl,F_UI_bj_gatling_03
049A4D 11 1A C3 04 0066*  	ld de,filedata
049A51 01 00 00 01 0067*  	ld bc,65536
049A55 3E 01       0068*  	ld a,mos_load
049A57 5B CF       0069*  	RST.LIL 08h
049A59 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
049A5D 01 40 00 00 0071*  	ld bc,64
049A61 11 40 00 00 0072*  	ld de,64
049A65 DD 21 00 10 0073*  	ld ix,4096
       00          
049A6A CD 68 B8 04 0074*  	call vdu_load_img
049A6E 3E 2E       0075*  	LD A, '.'
049A70 5B D7       0076*  	RST.LIL 10h
049A72             0077*  
049A72 21 6B 9D 04 0078*  	ld hl,F_UI_bj_gatling_04
049A76 11 1A C3 04 0079*  	ld de,filedata
049A7A 01 00 00 01 0080*  	ld bc,65536
049A7E 3E 01       0081*  	ld a,mos_load
049A80 5B CF       0082*  	RST.LIL 08h
049A82 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
049A86 01 40 00 00 0084*  	ld bc,64
049A8A 11 40 00 00 0085*  	ld de,64
049A8E DD 21 00 10 0086*  	ld ix,4096
       00          
049A93 CD 68 B8 04 0087*  	call vdu_load_img
049A97 3E 2E       0088*  	LD A, '.'
049A99 5B D7       0089*  	RST.LIL 10h
049A9B             0090*  
049A9B 21 85 9D 04 0091*  	ld hl,F_UI_bj_knife_00
049A9F 11 1A C3 04 0092*  	ld de,filedata
049AA3 01 00 00 01 0093*  	ld bc,65536
049AA7 3E 01       0094*  	ld a,mos_load
049AA9 5B CF       0095*  	RST.LIL 08h
049AAB 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
049AAF 01 40 00 00 0097*  	ld bc,64
049AB3 11 40 00 00 0098*  	ld de,64
049AB7 DD 21 00 10 0099*  	ld ix,4096
       00          
049ABC CD 68 B8 04 0100*  	call vdu_load_img
049AC0 3E 2E       0101*  	LD A, '.'
049AC2 5B D7       0102*  	RST.LIL 10h
049AC4             0103*  
049AC4 21 9D 9D 04 0104*  	ld hl,F_UI_bj_knife_01
049AC8 11 1A C3 04 0105*  	ld de,filedata
049ACC 01 00 00 01 0106*  	ld bc,65536
049AD0 3E 01       0107*  	ld a,mos_load
049AD2 5B CF       0108*  	RST.LIL 08h
049AD4 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
049AD8 01 40 00 00 0110*  	ld bc,64
049ADC 11 40 00 00 0111*  	ld de,64
049AE0 DD 21 00 10 0112*  	ld ix,4096
       00          
049AE5 CD 68 B8 04 0113*  	call vdu_load_img
049AE9 3E 2E       0114*  	LD A, '.'
049AEB 5B D7       0115*  	RST.LIL 10h
049AED             0116*  
049AED 21 B5 9D 04 0117*  	ld hl,F_UI_bj_knife_02
049AF1 11 1A C3 04 0118*  	ld de,filedata
049AF5 01 00 00 01 0119*  	ld bc,65536
049AF9 3E 01       0120*  	ld a,mos_load
049AFB 5B CF       0121*  	RST.LIL 08h
049AFD 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
049B01 01 40 00 00 0123*  	ld bc,64
049B05 11 40 00 00 0124*  	ld de,64
049B09 DD 21 00 10 0125*  	ld ix,4096
       00          
049B0E CD 68 B8 04 0126*  	call vdu_load_img
049B12 3E 2E       0127*  	LD A, '.'
049B14 5B D7       0128*  	RST.LIL 10h
049B16             0129*  
049B16 21 CD 9D 04 0130*  	ld hl,F_UI_bj_knife_03
049B1A 11 1A C3 04 0131*  	ld de,filedata
049B1E 01 00 00 01 0132*  	ld bc,65536
049B22 3E 01       0133*  	ld a,mos_load
049B24 5B CF       0134*  	RST.LIL 08h
049B26 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
049B2A 01 40 00 00 0136*  	ld bc,64
049B2E 11 40 00 00 0137*  	ld de,64
049B32 DD 21 00 10 0138*  	ld ix,4096
       00          
049B37 CD 68 B8 04 0139*  	call vdu_load_img
049B3B 3E 2E       0140*  	LD A, '.'
049B3D 5B D7       0141*  	RST.LIL 10h
049B3F             0142*  
049B3F 21 E5 9D 04 0143*  	ld hl,F_UI_bj_knife_04
049B43 11 1A C3 04 0144*  	ld de,filedata
049B47 01 00 00 01 0145*  	ld bc,65536
049B4B 3E 01       0146*  	ld a,mos_load
049B4D 5B CF       0147*  	RST.LIL 08h
049B4F 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
049B53 01 40 00 00 0149*  	ld bc,64
049B57 11 40 00 00 0150*  	ld de,64
049B5B DD 21 00 10 0151*  	ld ix,4096
       00          
049B60 CD 68 B8 04 0152*  	call vdu_load_img
049B64 3E 2E       0153*  	LD A, '.'
049B66 5B D7       0154*  	RST.LIL 10h
049B68             0155*  
049B68 21 FD 9D 04 0156*  	ld hl,F_UI_bj_machine_gun_00
049B6C 11 1A C3 04 0157*  	ld de,filedata
049B70 01 00 00 01 0158*  	ld bc,65536
049B74 3E 01       0159*  	ld a,mos_load
049B76 5B CF       0160*  	RST.LIL 08h
049B78 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
049B7C 01 40 00 00 0162*  	ld bc,64
049B80 11 40 00 00 0163*  	ld de,64
049B84 DD 21 00 10 0164*  	ld ix,4096
       00          
049B89 CD 68 B8 04 0165*  	call vdu_load_img
049B8D 3E 2E       0166*  	LD A, '.'
049B8F 5B D7       0167*  	RST.LIL 10h
049B91             0168*  
049B91 21 1B 9E 04 0169*  	ld hl,F_UI_bj_machine_gun_01
049B95 11 1A C3 04 0170*  	ld de,filedata
049B99 01 00 00 01 0171*  	ld bc,65536
049B9D 3E 01       0172*  	ld a,mos_load
049B9F 5B CF       0173*  	RST.LIL 08h
049BA1 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
049BA5 01 40 00 00 0175*  	ld bc,64
049BA9 11 40 00 00 0176*  	ld de,64
049BAD DD 21 00 10 0177*  	ld ix,4096
       00          
049BB2 CD 68 B8 04 0178*  	call vdu_load_img
049BB6 3E 2E       0179*  	LD A, '.'
049BB8 5B D7       0180*  	RST.LIL 10h
049BBA             0181*  
049BBA 21 39 9E 04 0182*  	ld hl,F_UI_bj_machine_gun_02
049BBE 11 1A C3 04 0183*  	ld de,filedata
049BC2 01 00 00 01 0184*  	ld bc,65536
049BC6 3E 01       0185*  	ld a,mos_load
049BC8 5B CF       0186*  	RST.LIL 08h
049BCA 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
049BCE 01 40 00 00 0188*  	ld bc,64
049BD2 11 40 00 00 0189*  	ld de,64
049BD6 DD 21 00 10 0190*  	ld ix,4096
       00          
049BDB CD 68 B8 04 0191*  	call vdu_load_img
049BDF 3E 2E       0192*  	LD A, '.'
049BE1 5B D7       0193*  	RST.LIL 10h
049BE3             0194*  
049BE3 21 57 9E 04 0195*  	ld hl,F_UI_bj_machine_gun_03
049BE7 11 1A C3 04 0196*  	ld de,filedata
049BEB 01 00 00 01 0197*  	ld bc,65536
049BEF 3E 01       0198*  	ld a,mos_load
049BF1 5B CF       0199*  	RST.LIL 08h
049BF3 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
049BF7 01 40 00 00 0201*  	ld bc,64
049BFB 11 40 00 00 0202*  	ld de,64
049BFF DD 21 00 10 0203*  	ld ix,4096
       00          
049C04 CD 68 B8 04 0204*  	call vdu_load_img
049C08 3E 2E       0205*  	LD A, '.'
049C0A 5B D7       0206*  	RST.LIL 10h
049C0C             0207*  
049C0C 21 75 9E 04 0208*  	ld hl,F_UI_bj_machine_gun_04
049C10 11 1A C3 04 0209*  	ld de,filedata
049C14 01 00 00 01 0210*  	ld bc,65536
049C18 3E 01       0211*  	ld a,mos_load
049C1A 5B CF       0212*  	RST.LIL 08h
049C1C 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
049C20 01 40 00 00 0214*  	ld bc,64
049C24 11 40 00 00 0215*  	ld de,64
049C28 DD 21 00 10 0216*  	ld ix,4096
       00          
049C2D CD 68 B8 04 0217*  	call vdu_load_img
049C31 3E 2E       0218*  	LD A, '.'
049C33 5B D7       0219*  	RST.LIL 10h
049C35             0220*  
049C35 21 93 9E 04 0221*  	ld hl,F_UI_bj_pistol_00
049C39 11 1A C3 04 0222*  	ld de,filedata
049C3D 01 00 00 01 0223*  	ld bc,65536
049C41 3E 01       0224*  	ld a,mos_load
049C43 5B CF       0225*  	RST.LIL 08h
049C45 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
049C49 01 40 00 00 0227*  	ld bc,64
049C4D 11 40 00 00 0228*  	ld de,64
049C51 DD 21 00 10 0229*  	ld ix,4096
       00          
049C56 CD 68 B8 04 0230*  	call vdu_load_img
049C5A 3E 2E       0231*  	LD A, '.'
049C5C 5B D7       0232*  	RST.LIL 10h
049C5E             0233*  
049C5E 21 AC 9E 04 0234*  	ld hl,F_UI_bj_pistol_01
049C62 11 1A C3 04 0235*  	ld de,filedata
049C66 01 00 00 01 0236*  	ld bc,65536
049C6A 3E 01       0237*  	ld a,mos_load
049C6C 5B CF       0238*  	RST.LIL 08h
049C6E 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
049C72 01 40 00 00 0240*  	ld bc,64
049C76 11 40 00 00 0241*  	ld de,64
049C7A DD 21 00 10 0242*  	ld ix,4096
       00          
049C7F CD 68 B8 04 0243*  	call vdu_load_img
049C83 3E 2E       0244*  	LD A, '.'
049C85 5B D7       0245*  	RST.LIL 10h
049C87             0246*  
049C87 21 C5 9E 04 0247*  	ld hl,F_UI_bj_pistol_02
049C8B 11 1A C3 04 0248*  	ld de,filedata
049C8F 01 00 00 01 0249*  	ld bc,65536
049C93 3E 01       0250*  	ld a,mos_load
049C95 5B CF       0251*  	RST.LIL 08h
049C97 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
049C9B 01 40 00 00 0253*  	ld bc,64
049C9F 11 40 00 00 0254*  	ld de,64
049CA3 DD 21 00 10 0255*  	ld ix,4096
       00          
049CA8 CD 68 B8 04 0256*  	call vdu_load_img
049CAC 3E 2E       0257*  	LD A, '.'
049CAE 5B D7       0258*  	RST.LIL 10h
049CB0             0259*  
049CB0 21 DE 9E 04 0260*  	ld hl,F_UI_bj_pistol_03
049CB4 11 1A C3 04 0261*  	ld de,filedata
049CB8 01 00 00 01 0262*  	ld bc,65536
049CBC 3E 01       0263*  	ld a,mos_load
049CBE 5B CF       0264*  	RST.LIL 08h
049CC0 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
049CC4 01 40 00 00 0266*  	ld bc,64
049CC8 11 40 00 00 0267*  	ld de,64
049CCC DD 21 00 10 0268*  	ld ix,4096
       00          
049CD1 CD 68 B8 04 0269*  	call vdu_load_img
049CD5 3E 2E       0270*  	LD A, '.'
049CD7 5B D7       0271*  	RST.LIL 10h
049CD9             0272*  
049CD9 21 F7 9E 04 0273*  	ld hl,F_UI_bj_pistol_04
049CDD 11 1A C3 04 0274*  	ld de,filedata
049CE1 01 00 00 01 0275*  	ld bc,65536
049CE5 3E 01       0276*  	ld a,mos_load
049CE7 5B CF       0277*  	RST.LIL 08h
049CE9 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
049CED 01 40 00 00 0279*  	ld bc,64
049CF1 11 40 00 00 0280*  	ld de,64
049CF5 DD 21 00 10 0281*  	ld ix,4096
       00          
049CFA CD 68 B8 04 0282*  	call vdu_load_img
049CFE 3E 2E       0283*  	LD A, '.'
049D00 5B D7       0284*  	RST.LIL 10h
049D02             0285*  
049D02 C9          0286*  	ret
049D03             0287*  
049D03 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049D1D 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049D37 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049D51 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049D6B 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049D85 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
049D9D 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
049DB5 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
049DCD 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
049DE5 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
049DFD 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049E1B 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049E39 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049E57 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049E75 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049E93 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
049EAC 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
049EC5 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
049EDE 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
049EF7 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
049F10             0023   	include "src/asm/sprites.asm"
049F10             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
049F10             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
049F10             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
049F10             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
049F10             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
049F10             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
049F10             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
049F10             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
049F10             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
049F10             0010*  sprite_anim_tmr: equ 08 ; 1 byte  - when hits zero, draw next animation frame
049F10             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
049F10             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
049F10             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, BCD
049F10             0014*  sprite_health_modifier:   equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
049F10             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
049F10             0016*  sprite_record_size: equ 16 ; 16 bytes per sprite record
049F10             0017*  
049F10             0018*  ; sprite_triggers_mask defs
049F10             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
049F10             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
049F10             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
049F10             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
049F10             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
049F10             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
049F10             0025*  
049F10             0026*  ; ###### SPRITE TABLE VARIABLES ######
049F10             0027*  ; maximum number of sprites
049F10             0028*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
049F10             0029*  table_total_bytes:      equ table_max_records*sprite_record_size
049F10             0030*  
049F10             0031*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
049F10             0032*  sprite_table_base:       equ 0xB7FC00
049F10             0033*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
049F10             0034*  
049F10             0035*  ; pointer to top address of current record, initialized to sprite_table_base
049F10 00 FC B7    0036*  sprite_table_pointer: dl sprite_table_base
049F13             0037*  ; how many active sprites
049F13 00          0038*  table_active_sprites: db 0x00
049F14             0039*  ; flag indicating collision with screen edge
049F14             0040*  ; uses orientation codes to specify which edge(s)
049F14 00          0041*  sprite_screen_edge: db #00
049F15             0042*  ; next sprite id to use
049F15 00          0043*  sprite_next_id: db 0
049F16             0044*  
049F16             0045*  ; ######### COLLISION SPRITE PARAMETERS ##########
049F16             0046*  ; integer coordinates are all that are needed for collision calculations
049F16 00          0047*  collision_x: db 0x00
049F17 00          0048*  collision_y: db 0x00
049F18 00          0049*  collision_dim_x: db 0x00
049F19 00          0050*  collision_dim_y: db 0x00
049F1A             0051*  
049F1A             0052*  ; scratch variables
049F1A 00          0053*  x: db 0x00 ; 8-bit signed integer
049F1B 00          0054*  y: db 0x00 ; 8-bit signed integer
049F1C 00 00 00    0055*  x0: dl 0x000000 ; 16.8 signed fixed place
049F1F 00 00 00    0056*  y0: dl 0x000000 ; 16.8 signed fixed place
049F22 00 00 00    0057*  incx1: dl 0x000000 ; 16.8 signed fixed place
049F25 00 00 00    0058*  incy1: dl 0x000000 ; 16.8 signed fixed place
049F28 00 00 00    0059*  incx2: dl 0x000000 ; 16.8 signed fixed place
049F2B 00 00 00    0060*  incy2: dl 0x000000 ; 16.8 signed fixed place
049F2E             0061*  
049F2E             0062*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
049F2E 00 00 00    0063*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
049F31 00 00 00    0064*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F34 00 00 00    0065*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F37             0066*  
049F37             0067*  ; gets the next available sprite id
049F37             0068*  ; inputs; none
049F37             0069*  ; returns: if new sprite available, a = sprite id,
049F37             0070*  ;      ix pointing to new sprite vars, carry set
049F37             0071*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
049F37             0072*  ; destroys: a,b,hl,ix
049F37             0073*  ; affects: bumps table_active_sprites by one
049F37             0074*  table_get_next_id:
049F37 DD 21 00 FC 0075*      ld ix,sprite_table_base
       B7          
049F3C 11 10 00 00 0076*      ld de,sprite_record_size
049F40 06 40       0077*      ld b,table_max_records
049F42             0078*  @loop:
049F42 DD 7E 01    0079*      ld a,(ix+sprite_obj)
049F45 A7          0080*      and a
049F46 28 06       0081*      jr z,@found
049F48 DD 19       0082*      add ix,de
049F4A 10 F6       0083*      djnz @loop
049F4C             0084*  @notfound:
049F4C AF          0085*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
049F4D C9          0086*      ret
049F4E             0087*  @found:
049F4E             0088*  ; bump number of active sprites
049F4E 21 13 9F 04 0089*      ld hl,table_active_sprites
049F52 34          0090*      inc (hl)
049F53             0091*  ; return sprite id
049F53 3E 40       0092*      ld a,table_max_records
049F55 90          0093*      sub b
049F56 32 15 9F 04 0094*      ld (sprite_next_id),a
049F5A 37          0095*      scf ; sets carry flag indicating we found a free sprite
049F5B C9          0096*      ret ; done
049F5C             0097*  
049F5C             0098*  ; deactivate the sprite with the given id
049F5C             0099*  ; inputs: a = sprite id
049F5C             0100*  ; outputs: nothing
049F5C             0101*  ; destroys: a,ix,de
049F5C             0102*  ; affects: decrements table_active_sprites by one
049F5C             0103*  table_deactivate_sprite:
049F5C F5          0104*      push af ; save sprite id bc we need it later
049F5D CD 49 AC 04 0105*      call vdu_sprite_select
049F61 CD CD AC 04 0106*      call vdu_sprite_hide
049F65 F1          0107*      pop af ; restore sprite id
049F66 11 00 00 00 0108*      ld de,0 ; clear deu
049F6A 57          0109*      ld d,a
049F6B 1E 10       0110*      ld e,sprite_record_size
049F6D ED 5C       0111*      mlt de
049F6F DD 21 00 FC 0112*      ld ix,sprite_table_base
       B7          
049F74 DD 19       0113*      add ix,de
049F76 AF          0114*      xor a
049F77 DD 77 01    0115*      ld (ix+sprite_obj),a
049F7A DD 21 13 9F 0116*      ld ix,table_active_sprites
       04          
049F7F DD 35 00    0117*      dec (ix)
049F82 C9          0118*      ret
049F83             0119*  
049F83             0120*  ; sets iy and sprite_table_pointer to the sprite record with the given id
049F83             0121*  ; inputs: a = sprite id
049F83             0122*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
049F83             0123*  ; destroys: bc
049F83             0124*  sprite_set_pointer:
049F83 47          0125*      ld b,a
049F84 0E 10       0126*      ld c,sprite_record_size
049F86 ED 4C       0127*      mlt bc
049F88 FD 21 00 FC 0128*      ld iy,sprite_table_base
       B7          
049F8D FD 09       0129*      add iy,bc
049F8F FD 22 10 9F 0130*      ld (sprite_table_pointer),iy
       04          
049F94 C9          0131*      ret
049F95             0132*  
049F95             0133*  ; set the active sprite record to no sprite and remove it from the map cell it was in
049F95             0134*  ; inputs: iy pointed at sprite record to clear
049F95             0135*  sprite_kill:
049F95             0136*  ; set sprite table record to no sprite
049F95 21 FF FF FF 0137*      ld hl,0xFFFFFF ; a string of -1s
049F99 FD 2F 00    0138*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
049F9C             0139*  
049F9C             0140*  ; set map cell to no sprite and normal floor
049F9C 21 01 FF 1D 0141*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
049FA0 DD 2F 00    0142*      ld (ix),hl
049FA3 3E FF       0143*      ld a,0xFF ; no sprite
049FA5 DD 77 03    0144*      ld (ix+map_sprite_id),a ; now sprite is truly dead
049FA8 C9          0145*      ret
049FA9             0146*  
049FA9 00          0147*  sprite_new_x: db 0x00
049FAA 00          0148*  sprite_new_y: db 0x00
049FAB 00          0149*                db 0x00 ; padding
049FAC             0150*  
049FAC             0151*  ; checks if the sprite can move to the new position
049FAC             0152*  ; inputs: iy pointed at sprite record, d,e = new y,x position
049FAC             0153*  sprite_check_move:
049FAC ED 53 A9 9F 0154*      ld (sprite_new_x),de ; save new y,x position
       04          
049FB1 CD 9D 65 04 0155*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FB5             0156*  ; check whether target cell contains a sprite
049FB5 DD 7E 03    0157*      ld a,(ix+map_sprite_id)
049FB8 FE FF       0158*      cp 255 ; value if not sprite
049FBA C0          0159*      ret nz ; already occupied by another sprite so we can't move there
049FBB             0160*  ; read map type/status mask from target cell
049FBB DD 7E 00    0161*      ld a,(ix+map_type_status)
049FBE E6 01       0162*      and render_type_floor
049FC0 C8          0163*      ret z ; target cell is not a floor so we can't move there
049FC1             0164*  ; we are cleared for movement so fall through to sprite_move
049FC1             0165*  
049FC1             0166*  ; moves the sprite to the given map position
049FC1             0167*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
049FC1             0168*  sprite_move:
049FC1             0169*  ; update old sprite position to no sprite
049FC1 FD 17 04    0170*      ld de,(iy+sprite_x) ; d,e = sprite current y,x position
049FC4 CD 9D 65 04 0171*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FC8             0172*  ; set map cell to no sprite and normal floor
049FC8 21 01 FF 1D 0173*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
049FCC DD 2F 00    0174*      ld (ix),hl
049FCF 3E FF       0175*      ld a,0xFF ; no sprite
049FD1 DD 77 03    0176*      ld (ix+map_sprite_id),a
049FD4             0177*  ; update sprite record with new position
049FD4 ED 5B A9 9F 0178*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
049FD9 FD 1F 04    0179*      ld (iy+sprite_x),de
049FDC             0180*  ; update new map cell with sprite id
049FDC CD 9D 65 04 0181*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FE0 FD 7E 00    0182*      ld a,(iy+sprite_id)
049FE3 DD 77 03    0183*      ld (ix+map_sprite_id),a
049FE6 C9          0184*      ret
049FE7             0185*  
049FE7             0186*  ; move a sprite in a random direction
049FE7             0187*  ; inputs: iy pointed at sprite record
049FE7             0188*  sprite_move_random:
049FE7             0189*  ; point iy at sprite record
049FE7 FD 2A 10 9F 0190*      ld iy,(sprite_table_pointer)
       04          
049FEC             0191*  ; DEBUG:
049FEC             0192*      ; ld bc,(iy+sprite_x)
049FEC             0193*      ; push bc
049FEC             0194*  ; pick a random direction
049FEC CD D5 B6 04 0195*      call rand_8
049FF0 E6 03       0196*      and 3 ; direction between 0 and 3
049FF2             0197*  ; get dy,dx for moving once cell in the chosen direction
049FF2 5F          0198*      ld e,a
049FF3 16 01       0199*      ld d,1 ; distance
049FF5 CD C2 65 04 0200*      call get_dx_dy ; d,e = dy,dx
049FF9             0201*  ; calculate new position
049FF9 FD 7E 04    0202*      ld a,(iy+sprite_x)
049FFC 83          0203*      add a,e
049FFD E6 0F       0204*      and 15 ; modulo 16
049FFF 5F          0205*      ld e,a
04A000 FD 7E 05    0206*      ld a,(iy+sprite_y)
04A003 82          0207*      add a,d
04A004 E6 0F       0208*      and 15 ; modulo 16
04A006 57          0209*      ld d,a
04A007             0210*  
04A007             0211*      ; pop bc
04A007             0212*      ; call stepRegistersHex
04A007 C3 AC 9F 04 0213*      jp sprite_check_move
04A00B             0214*  
04A00B             0215*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04A00B             0216*  sprite_behavior_lookup:
04A00B 6E A0 04    0217*      dl LAMP
04A00E B7 A0 04    0218*      dl BARREL
04A011 17 A1 04    0219*      dl TABLE
04A014 60 A1 04    0220*      dl OVERHEAD_LIGHT
04A017 A9 A1 04    0221*      dl RADIOACTIVE_BARREL
04A01A 09 A2 04    0222*      dl HEALTH_PACK
04A01D 57 A2 04    0223*      dl GOLD_CHALISE
04A020 AD A2 04    0224*      dl GOLD_CROSS
04A023 03 A3 04    0225*      dl PLATE_OF_FOOD
04A026 51 A3 04    0226*      dl KEYCARD
04A029 A8 A3 04    0227*      dl GOLD_CHEST
04A02C FE A3 04    0228*      dl MACHINE_GUN
04A02F 67 A4 04    0229*      dl GATLING_GUN
04A032 D0 A4 04    0230*      dl DOG_FOOD
04A035 1E A5 04    0231*      dl GOLD_KEY
04A038 67 A5 04    0232*      dl DOG
04A03B 08 A6 04    0233*      dl GERMAN_TROOPER
04A03E BB A6 04    0234*      dl SS_GUARD
04A041             0235*  
04A041             0236*  ; initializes sprite data for a particular sprite type and id
04A041             0237*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A041             0238*  sprite_init_data:
04A041 3E 00       0239*      ld a,sp_init ; index for sprite init routine
04A043 CD 51 A0 04 0240*      call do_sprite_behavior ; hl points at address to copy from
04A047 ED 13 02    0241*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04A04A 01 0E 00 00 0242*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04A04E ED B0       0243*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04A050 C9          0244*      ret ; done
04A051             0245*  
04A051             0246*  ; #### SPRITE BEHAVIOR ROUTINES ####
04A051             0247*  ; sprite behavior indices
04A051             0248*  sp_init:   equ 0
04A051             0249*  sp_use:    equ 1
04A051             0250*  sp_hurt:  equ 2
04A051             0251*  sp_kill:   equ 3
04A051             0252*  sp_see:    equ 4
04A051             0253*  sp_move:  equ 5
04A051             0254*  sp_shoot:  equ 6
04A051             0255*  
04A051             0256*  ; calls the sprite behavior routine for the sprite pointed to by iy
04A051             0257*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A051             0258*  ;         a = type index of routine to call
04A051             0259*  do_sprite_behavior:
04A051 FD 22 10 9F 0260*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04A056 FD 46 01    0261*      ld b,(iy+sprite_obj)
04A059 0E 03       0262*      ld c,3 ; three bytes per lookup record
04A05B ED 4C       0263*      mlt bc ; bc is offset from the base of the lookup table
04A05D 21 0B A0 04 0264*      ld hl,sprite_behavior_lookup
04A061 09          0265*      add hl,bc
04A062 ED 27       0266*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04A064 47          0267*      ld b,a ; b holds the routine index
04A065 0E 03       0268*      ld c,3 ; three bytes per lookup record
04A067 ED 4C       0269*      mlt bc ; bc is offset from the base of the lookup table
04A069 09          0270*      add hl,bc ; hl points to the label of the routine to call
04A06A ED 27       0271*      ld hl,(hl) ; hl points to the routine to call
04A06C E9          0272*      jp (hl) ; call the behavior routine
04A06D             0273*  sprite_behavior_return: ; we always return here from a sprite behavior call
04A06D C9          0274*      ret
04A06E             0275*  
04A06E             0276*  LAMP:
04A06E             0277*  ; behavior routine address lookup
04A06E 83 A0 04    0278*      dl @init
04A071 99 A0 04    0279*      dl @use
04A074 9D A0 04    0280*      dl @hurt
04A077 A2 A0 04    0281*      dl @kill
04A07A AA A0 04    0282*      dl @see
04A07D AF A0 04    0283*      dl @move
04A080 B3 A0 04    0284*      dl @shoot
04A083             0285*  @init:
04A083 21 8B A0 04 0286*      ld hl,@data ; address for LDIR to copy from
04A087 C3 6D A0 04 0287*      jp sprite_behavior_return
04A08B             0288*  @data:
04A08B 64          0289*      db 100 ;sprite_health
04A08C 00          0290*      db 000 ;sprite_triggers_mask
04A08D 00          0291*      db 000 ;sprite_x
04A08E 00          0292*      db 000 ;sprite_y
04A08F 00          0293*      db 000 ;sprite_orientation
04A090 00          0294*      db 000 ;sprite_animation
04A091 00          0295*      db 000 ;sprite_anim_tmr
04A092 01          0296*      db 001 ;sprite_move_timer
04A093 00          0297*      db 000 ;sprite_move_step
04A094 00          0298*      db 000 ;sprite_points
04A095 00          0299*      db 000 ;sprite_health_modifier
04A096 00          0300*      db 000 ;sprite_unassigned_0
04A097 00          0301*      db 000 ;sprite_unassigned_1
04A098 00          0302*      db 000 ;sprite_unassigned_2
04A099             0303*  @use:
04A099 C3 6D A0 04 0304*      jp sprite_behavior_return
04A09D             0305*  @hurt:
04A09D AF          0306*      xor a
04A09E C3 6D A0 04 0307*      jp sprite_behavior_return
04A0A2             0308*  @kill:
04A0A2 CD 95 9F 04 0309*      call sprite_kill
04A0A6 C3 6D A0 04 0310*      jp sprite_behavior_return
04A0AA             0311*  @see:
04A0AA AF          0312*      xor a
04A0AB C3 6D A0 04 0313*      jp sprite_behavior_return
04A0AF             0314*  @move:
04A0AF C3 6D A0 04 0315*      jp sprite_behavior_return
04A0B3             0316*  @shoot:
04A0B3 C3 6D A0 04 0317*      jp sprite_behavior_return
04A0B7             0318*  
04A0B7             0319*  BARREL:
04A0B7             0320*  ; behavior routine address lookup
04A0B7 CC A0 04    0321*      dl @init
04A0BA E2 A0 04    0322*      dl @use
04A0BD E6 A0 04    0323*      dl @hurt
04A0C0 FA A0 04    0324*      dl @kill
04A0C3 0A A1 04    0325*      dl @see
04A0C6 0F A1 04    0326*      dl @move
04A0C9 13 A1 04    0327*      dl @shoot
04A0CC             0328*  @init:
04A0CC 21 D4 A0 04 0329*      ld hl,@data ; address for LDIR to copy from
04A0D0 C3 6D A0 04 0330*      jp sprite_behavior_return
04A0D4             0331*  @data:
04A0D4 12          0332*      db 018 ;sprite_health
04A0D5 00          0333*      db 000 ;sprite_triggers_mask
04A0D6 00          0334*      db 000 ;sprite_x
04A0D7 00          0335*      db 000 ;sprite_y
04A0D8 00          0336*      db 000 ;sprite_orientation
04A0D9 00          0337*      db 000 ;sprite_animation
04A0DA 00          0338*      db 000 ;sprite_anim_tmr
04A0DB 01          0339*      db 001 ;sprite_move_timer
04A0DC 00          0340*      db 000 ;sprite_move_step
04A0DD 00          0341*      db 000 ;sprite_points
04A0DE CE          0342*      db -50 ;sprite_health_modifier
04A0DF 00          0343*      db 000 ;sprite_unassigned_0
04A0E0 00          0344*      db 000 ;sprite_unassigned_1
04A0E1 00          0345*      db 000 ;sprite_unassigned_2
04A0E2             0346*  @use:
04A0E2 C3 6D A0 04 0347*      jp sprite_behavior_return
04A0E6             0348*  @hurt:
04A0E6 3E FF       0349*      ld a,255 ; kill player's shot
04A0E8 32 F9 B1 04 0350*      ld (plyr_shot_status),a
04A0EC 3A FD B1 04 0351*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A0F0 FD 86 02    0352*      add a,(iy+sprite_health)
04A0F3 FD 77 02    0353*      ld (iy+sprite_health),a
04A0F6 F2 6D A0 04 0354*      jp p,sprite_behavior_return ; if health is positive, return
04A0FA             0355*      ; otherwise fall through to kill sprite
04A0FA             0356*  @kill:
04A0FA FD E5       0357*      push iy
04A0FC CD 14 BE 04 0358*      call sfx_play_explode
04A100 FD E1       0359*      pop iy
04A102 CD 95 9F 04 0360*      call sprite_kill
04A106 C3 6D A0 04 0361*      jp sprite_behavior_return
04A10A             0362*  @see:
04A10A AF          0363*      xor a
04A10B C3 6D A0 04 0364*      jp sprite_behavior_return
04A10F             0365*  @move:
04A10F C3 6D A0 04 0366*      jp sprite_behavior_return
04A113             0367*  @shoot:
04A113 C3 6D A0 04 0368*      jp sprite_behavior_return
04A117             0369*  
04A117             0370*  TABLE:
04A117             0371*  ; behavior routine address lookup
04A117 2C A1 04    0372*      dl @init
04A11A 42 A1 04    0373*      dl @use
04A11D 46 A1 04    0374*      dl @hurt
04A120 4B A1 04    0375*      dl @kill
04A123 53 A1 04    0376*      dl @see
04A126 58 A1 04    0377*      dl @move
04A129 5C A1 04    0378*      dl @shoot
04A12C             0379*  @init:
04A12C 21 34 A1 04 0380*      ld hl,@data ; address for LDIR to copy from
04A130 C3 6D A0 04 0381*      jp sprite_behavior_return
04A134             0382*  @data:
04A134 64          0383*      db 100 ;sprite_health
04A135 00          0384*      db 000 ;sprite_triggers_mask
04A136 00          0385*      db 000 ;sprite_x
04A137 00          0386*      db 000 ;sprite_y
04A138 00          0387*      db 000 ;sprite_orientation
04A139 00          0388*      db 000 ;sprite_animation
04A13A 00          0389*      db 000 ;sprite_anim_tmr
04A13B 01          0390*      db 001 ;sprite_move_timer
04A13C 00          0391*      db 000 ;sprite_move_step
04A13D 00          0392*      db 000 ;sprite_points
04A13E 00          0393*      db 000 ;sprite_health_modifier
04A13F 00          0394*      db 000 ;sprite_unassigned_0
04A140 00          0395*      db 000 ;sprite_unassigned_1
04A141 00          0396*      db 000 ;sprite_unassigned_2
04A142             0397*  @use:
04A142 C3 6D A0 04 0398*      jp sprite_behavior_return
04A146             0399*  @hurt:
04A146 AF          0400*      xor a
04A147 C3 6D A0 04 0401*      jp sprite_behavior_return
04A14B             0402*  @kill:
04A14B CD 95 9F 04 0403*      call sprite_kill
04A14F C3 6D A0 04 0404*      jp sprite_behavior_return
04A153             0405*  @see:
04A153 AF          0406*      xor a
04A154 C3 6D A0 04 0407*      jp sprite_behavior_return
04A158             0408*  @move:
04A158 C3 6D A0 04 0409*      jp sprite_behavior_return
04A15C             0410*  @shoot:
04A15C C3 6D A0 04 0411*      jp sprite_behavior_return
04A160             0412*  
04A160             0413*  OVERHEAD_LIGHT:
04A160             0414*  ; behavior routine address lookup
04A160 75 A1 04    0415*      dl @init
04A163 8B A1 04    0416*      dl @use
04A166 8F A1 04    0417*      dl @hurt
04A169 94 A1 04    0418*      dl @kill
04A16C 9C A1 04    0419*      dl @see
04A16F A1 A1 04    0420*      dl @move
04A172 A5 A1 04    0421*      dl @shoot
04A175             0422*  @init:
04A175 21 7D A1 04 0423*      ld hl,@data ; address for LDIR to copy from
04A179 C3 6D A0 04 0424*      jp sprite_behavior_return
04A17D             0425*  @data:
04A17D 64          0426*      db 100 ;sprite_health
04A17E 00          0427*      db 000 ;sprite_triggers_mask
04A17F 00          0428*      db 000 ;sprite_x
04A180 00          0429*      db 000 ;sprite_y
04A181 00          0430*      db 000 ;sprite_orientation
04A182 00          0431*      db 000 ;sprite_animation
04A183 00          0432*      db 000 ;sprite_anim_tmr
04A184 01          0433*      db 001 ;sprite_move_timer
04A185 00          0434*      db 000 ;sprite_move_step
04A186 00          0435*      db 000 ;sprite_points
04A187 00          0436*      db 000 ;sprite_health_modifier
04A188 00          0437*      db 000 ;sprite_unassigned_0
04A189 00          0438*      db 000 ;sprite_unassigned_1
04A18A 00          0439*      db 000 ;sprite_unassigned_2
04A18B             0440*  @use:
04A18B C3 6D A0 04 0441*      jp sprite_behavior_return
04A18F             0442*  @hurt:
04A18F AF          0443*      xor a
04A190 C3 6D A0 04 0444*      jp sprite_behavior_return
04A194             0445*  @kill:
04A194 CD 95 9F 04 0446*      call sprite_kill
04A198 C3 6D A0 04 0447*      jp sprite_behavior_return
04A19C             0448*  @see:
04A19C AF          0449*      xor a
04A19D C3 6D A0 04 0450*      jp sprite_behavior_return
04A1A1             0451*  @move:
04A1A1 C3 6D A0 04 0452*      jp sprite_behavior_return
04A1A5             0453*  @shoot:
04A1A5 C3 6D A0 04 0454*      jp sprite_behavior_return
04A1A9             0455*  
04A1A9             0456*  RADIOACTIVE_BARREL:
04A1A9             0457*  ; behavior routine address lookup
04A1A9 BE A1 04    0458*      dl @init
04A1AC D4 A1 04    0459*      dl @use
04A1AF D8 A1 04    0460*      dl @hurt
04A1B2 EC A1 04    0461*      dl @kill
04A1B5 FC A1 04    0462*      dl @see
04A1B8 01 A2 04    0463*      dl @move
04A1BB 05 A2 04    0464*      dl @shoot
04A1BE             0465*  @init:
04A1BE 21 C6 A1 04 0466*      ld hl,@data ; address for LDIR to copy from
04A1C2 C3 6D A0 04 0467*      jp sprite_behavior_return
04A1C6             0468*  @data:
04A1C6 18          0469*      db 024 ;sprite_health
04A1C7 00          0470*      db 000 ;sprite_triggers_mask
04A1C8 00          0471*      db 000 ;sprite_x
04A1C9 00          0472*      db 000 ;sprite_y
04A1CA 00          0473*      db 000 ;sprite_orientation
04A1CB 00          0474*      db 000 ;sprite_animation
04A1CC 00          0475*      db 000 ;sprite_anim_tmr
04A1CD 01          0476*      db 001 ;sprite_move_timer
04A1CE 00          0477*      db 000 ;sprite_move_step
04A1CF 00          0478*      db 000 ;sprite_points
04A1D0 B5          0479*      db -75 ;sprite_health_modifier
04A1D1 00          0480*      db 000 ;sprite_unassigned_0
04A1D2 00          0481*      db 000 ;sprite_unassigned_1
04A1D3 00          0482*      db 000 ;sprite_unassigned_2
04A1D4             0483*  @use:
04A1D4 C3 6D A0 04 0484*      jp sprite_behavior_return
04A1D8             0485*  @hurt:
04A1D8 3E FF       0486*      ld a,255 ; kill player's shot
04A1DA 32 F9 B1 04 0487*      ld (plyr_shot_status),a
04A1DE 3A FD B1 04 0488*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A1E2 FD 86 02    0489*      add a,(iy+sprite_health)
04A1E5 FD 77 02    0490*      ld (iy+sprite_health),a
04A1E8 F2 6D A0 04 0491*      jp p,sprite_behavior_return ; if health is positive, return
04A1EC             0492*      ; otherwise fall through to kill sprite
04A1EC             0493*  @kill:
04A1EC FD E5       0494*      push iy
04A1EE CD 14 BE 04 0495*      call sfx_play_explode
04A1F2 FD E1       0496*      pop iy
04A1F4 CD 95 9F 04 0497*      call sprite_kill
04A1F8 C3 6D A0 04 0498*      jp sprite_behavior_return
04A1FC             0499*  @see:
04A1FC AF          0500*      xor a
04A1FD C3 6D A0 04 0501*      jp sprite_behavior_return
04A201             0502*  @move:
04A201 C3 6D A0 04 0503*      jp sprite_behavior_return
04A205             0504*  @shoot:
04A205 C3 6D A0 04 0505*      jp sprite_behavior_return
04A209             0506*  
04A209             0507*  HEALTH_PACK:
04A209             0508*  ; behavior routine address lookup
04A209 1E A2 04    0509*      dl @init
04A20C 34 A2 04    0510*      dl @use
04A20F 3D A2 04    0511*      dl @hurt
04A212 42 A2 04    0512*      dl @kill
04A215 4A A2 04    0513*      dl @see
04A218 4F A2 04    0514*      dl @move
04A21B 53 A2 04    0515*      dl @shoot
04A21E             0516*  @init:
04A21E 21 26 A2 04 0517*      ld hl,@data ; address for LDIR to copy from
04A222 C3 6D A0 04 0518*      jp sprite_behavior_return
04A226             0519*  @data:
04A226 64          0520*      db 100 ;sprite_health
04A227 00          0521*      db 000 ;sprite_triggers_mask
04A228 00          0522*      db 000 ;sprite_x
04A229 00          0523*      db 000 ;sprite_y
04A22A 00          0524*      db 000 ;sprite_orientation
04A22B 00          0525*      db 000 ;sprite_animation
04A22C 00          0526*      db 000 ;sprite_anim_tmr
04A22D 01          0527*      db 001 ;sprite_move_timer
04A22E 00          0528*      db 000 ;sprite_move_step
04A22F 00          0529*      db 000 ;sprite_points
04A230 14          0530*      db 020 ;sprite_health_modifier
04A231 00          0531*      db 000 ;sprite_unassigned_0
04A232 00          0532*      db 000 ;sprite_unassigned_1
04A233 00          0533*      db 000 ;sprite_unassigned_2
04A234             0534*  @use:
04A234 FD 7E 0C    0535*      ld a,(iy+sprite_health_modifier)
04A237 CD A6 B3 04 0536*      call plyr_add_health
04A23B 18 05       0537*      jr @kill
04A23D             0538*  @hurt:
04A23D AF          0539*      xor a
04A23E C3 6D A0 04 0540*      jp sprite_behavior_return
04A242             0541*  @kill:
04A242 CD 95 9F 04 0542*      call sprite_kill
04A246 C3 6D A0 04 0543*      jp sprite_behavior_return
04A24A             0544*  @see:
04A24A AF          0545*      xor a
04A24B C3 6D A0 04 0546*      jp sprite_behavior_return
04A24F             0547*  @move:
04A24F C3 6D A0 04 0548*      jp sprite_behavior_return
04A253             0549*  @shoot:
04A253 C3 6D A0 04 0550*      jp sprite_behavior_return
04A257             0551*  
04A257             0552*  GOLD_CHALISE:
04A257             0553*  ; behavior routine address lookup
04A257 6C A2 04    0554*      dl @init
04A25A 82 A2 04    0555*      dl @use
04A25D 93 A2 04    0556*      dl @hurt
04A260 98 A2 04    0557*      dl @kill
04A263 A0 A2 04    0558*      dl @see
04A266 A5 A2 04    0559*      dl @move
04A269 A9 A2 04    0560*      dl @shoot
04A26C             0561*  @init:
04A26C 21 74 A2 04 0562*      ld hl,@data ; address for LDIR to copy from
04A270 C3 6D A0 04 0563*      jp sprite_behavior_return
04A274             0564*  @data:
04A274 64          0565*      db 100 ;sprite_health
04A275 00          0566*      db 000 ;sprite_triggers_mask
04A276 00          0567*      db 000 ;sprite_x
04A277 00          0568*      db 000 ;sprite_y
04A278 00          0569*      db 000 ;sprite_orientation
04A279 00          0570*      db 000 ;sprite_animation
04A27A 00          0571*      db 000 ;sprite_anim_tmr
04A27B 01          0572*      db 001 ;sprite_move_timer
04A27C 00          0573*      db 000 ;sprite_move_step
04A27D 64          0574*      db 100 ;sprite_points
04A27E 00          0575*      db 000 ;sprite_health_modifier
04A27F 00          0576*      db 000 ;sprite_unassigned_0
04A280 00          0577*      db 000 ;sprite_unassigned_1
04A281 00          0578*      db 000 ;sprite_unassigned_2
04A282             0579*  @use:
04A282 FD E5       0580*      push iy
04A284 CD 20 BE 04 0581*      call sfx_play_got_treasure
04A288 FD E1       0582*      pop iy
04A28A FD 7E 0B    0583*      ld a,(iy+sprite_points)
04A28D CD C7 B3 04 0584*      call plyr_mod_score
04A291 18 05       0585*      jr @kill
04A293             0586*  @hurt:
04A293 AF          0587*      xor a
04A294 C3 6D A0 04 0588*      jp sprite_behavior_return
04A298             0589*  @kill:
04A298 CD 95 9F 04 0590*      call sprite_kill
04A29C C3 6D A0 04 0591*      jp sprite_behavior_return
04A2A0             0592*  @see:
04A2A0 AF          0593*      xor a
04A2A1 C3 6D A0 04 0594*      jp sprite_behavior_return
04A2A5             0595*  @move:
04A2A5 C3 6D A0 04 0596*      jp sprite_behavior_return
04A2A9             0597*  @shoot:
04A2A9 C3 6D A0 04 0598*      jp sprite_behavior_return
04A2AD             0599*  
04A2AD             0600*  GOLD_CROSS:
04A2AD             0601*  ; behavior routine address lookup
04A2AD C2 A2 04    0602*      dl @init
04A2B0 D8 A2 04    0603*      dl @use
04A2B3 E9 A2 04    0604*      dl @hurt
04A2B6 EE A2 04    0605*      dl @kill
04A2B9 F6 A2 04    0606*      dl @see
04A2BC FB A2 04    0607*      dl @move
04A2BF FF A2 04    0608*      dl @shoot
04A2C2             0609*  @init:
04A2C2 21 CA A2 04 0610*      ld hl,@data ; address for LDIR to copy from
04A2C6 C3 6D A0 04 0611*      jp sprite_behavior_return
04A2CA             0612*  @data:
04A2CA 64          0613*      db 100 ;sprite_health
04A2CB 00          0614*      db 000 ;sprite_triggers_mask
04A2CC 00          0615*      db 000 ;sprite_x
04A2CD 00          0616*      db 000 ;sprite_y
04A2CE 00          0617*      db 000 ;sprite_orientation
04A2CF 00          0618*      db 000 ;sprite_animation
04A2D0 00          0619*      db 000 ;sprite_anim_tmr
04A2D1 01          0620*      db 001 ;sprite_move_timer
04A2D2 00          0621*      db 000 ;sprite_move_step
04A2D3 32          0622*      db 050 ;sprite_points
04A2D4 00          0623*      db 000 ;sprite_health_modifier
04A2D5 00          0624*      db 000 ;sprite_unassigned_0
04A2D6 00          0625*      db 000 ;sprite_unassigned_1
04A2D7 00          0626*      db 000 ;sprite_unassigned_2
04A2D8             0627*  @use:
04A2D8 FD E5       0628*      push iy
04A2DA CD 20 BE 04 0629*      call sfx_play_got_treasure
04A2DE FD E1       0630*      pop iy
04A2E0 FD 7E 0B    0631*      ld a,(iy+sprite_points)
04A2E3 CD C7 B3 04 0632*      call plyr_mod_score
04A2E7 18 05       0633*      jr @kill
04A2E9             0634*  @hurt:
04A2E9 AF          0635*      xor a
04A2EA C3 6D A0 04 0636*      jp sprite_behavior_return
04A2EE             0637*  @kill:
04A2EE CD 95 9F 04 0638*      call sprite_kill
04A2F2 C3 6D A0 04 0639*      jp sprite_behavior_return
04A2F6             0640*  @see:
04A2F6 AF          0641*      xor a
04A2F7 C3 6D A0 04 0642*      jp sprite_behavior_return
04A2FB             0643*  @move:
04A2FB C3 6D A0 04 0644*      jp sprite_behavior_return
04A2FF             0645*  @shoot:
04A2FF C3 6D A0 04 0646*      jp sprite_behavior_return
04A303             0647*  
04A303             0648*  PLATE_OF_FOOD:
04A303             0649*  ; behavior routine address lookup
04A303 18 A3 04    0650*      dl @init
04A306 2E A3 04    0651*      dl @use
04A309 37 A3 04    0652*      dl @hurt
04A30C 3C A3 04    0653*      dl @kill
04A30F 44 A3 04    0654*      dl @see
04A312 49 A3 04    0655*      dl @move
04A315 4D A3 04    0656*      dl @shoot
04A318             0657*  @init:
04A318 21 20 A3 04 0658*      ld hl,@data ; address for LDIR to copy from
04A31C C3 6D A0 04 0659*      jp sprite_behavior_return
04A320             0660*  @data:
04A320 64          0661*      db 100 ;sprite_health
04A321 00          0662*      db 000 ;sprite_triggers_mask
04A322 00          0663*      db 000 ;sprite_x
04A323 00          0664*      db 000 ;sprite_y
04A324 00          0665*      db 000 ;sprite_orientation
04A325 00          0666*      db 000 ;sprite_animation
04A326 00          0667*      db 000 ;sprite_anim_tmr
04A327 01          0668*      db 001 ;sprite_move_timer
04A328 00          0669*      db 000 ;sprite_move_step
04A329 00          0670*      db 000 ;sprite_points
04A32A 0A          0671*      db 010 ;sprite_health_modifier
04A32B 00          0672*      db 000 ;sprite_unassigned_0
04A32C 00          0673*      db 000 ;sprite_unassigned_1
04A32D 00          0674*      db 000 ;sprite_unassigned_2
04A32E             0675*  @use:
04A32E FD 7E 0C    0676*      ld a,(iy+sprite_health_modifier)
04A331 CD A6 B3 04 0677*      call plyr_add_health
04A335 18 05       0678*      jr @kill
04A337             0679*  @hurt:
04A337 AF          0680*      xor a
04A338 C3 6D A0 04 0681*      jp sprite_behavior_return
04A33C             0682*  @kill:
04A33C CD 95 9F 04 0683*      call sprite_kill
04A340 C3 6D A0 04 0684*      jp sprite_behavior_return
04A344             0685*  @see:
04A344 AF          0686*      xor a
04A345 C3 6D A0 04 0687*      jp sprite_behavior_return
04A349             0688*  @move:
04A349 C3 6D A0 04 0689*      jp sprite_behavior_return
04A34D             0690*  @shoot:
04A34D C3 6D A0 04 0691*      jp sprite_behavior_return
04A351             0692*  
04A351             0693*  KEYCARD:
04A351             0694*  ; behavior routine address lookup
04A351 66 A3 04    0695*      dl @init
04A354 7C A3 04    0696*      dl @use
04A357 8E A3 04    0697*      dl @hurt
04A35A 93 A3 04    0698*      dl @kill
04A35D 9B A3 04    0699*      dl @see
04A360 A0 A3 04    0700*      dl @move
04A363 A4 A3 04    0701*      dl @shoot
04A366             0702*  @init:
04A366 21 6E A3 04 0703*      ld hl,@data ; address for LDIR to copy from
04A36A C3 6D A0 04 0704*      jp sprite_behavior_return
04A36E             0705*  @data:
04A36E 64          0706*      db 100 ;sprite_health
04A36F 00          0707*      db 000 ;sprite_triggers_mask
04A370 00          0708*      db 000 ;sprite_x
04A371 00          0709*      db 000 ;sprite_y
04A372 00          0710*      db 000 ;sprite_orientation
04A373 00          0711*      db 000 ;sprite_animation
04A374 00          0712*      db 000 ;sprite_anim_tmr
04A375 01          0713*      db 001 ;sprite_move_timer
04A376 00          0714*      db 000 ;sprite_move_step
04A377 00          0715*      db 000 ;sprite_points
04A378 00          0716*      db 000 ;sprite_health_modifier
04A379 00          0717*      db 000 ;sprite_unassigned_0
04A37A 00          0718*      db 000 ;sprite_unassigned_1
04A37B 00          0719*      db 000 ;sprite_unassigned_2
04A37C             0720*  @use:
04A37C 3E 08       0721*      ld a,8
04A37E CD D6 B3 04 0722*      call plyr_add_ammo
04A382 CD 38 BE 04 0723*      call sfx_play_gun_reload
04A386 CD 95 9F 04 0724*      call sprite_kill
04A38A C3 6D A0 04 0725*      jp sprite_behavior_return
04A38E             0726*  @hurt:
04A38E AF          0727*      xor a
04A38F C3 6D A0 04 0728*      jp sprite_behavior_return
04A393             0729*  @kill:
04A393 CD 95 9F 04 0730*      call sprite_kill
04A397 C3 6D A0 04 0731*      jp sprite_behavior_return
04A39B             0732*  @see:
04A39B AF          0733*      xor a
04A39C C3 6D A0 04 0734*      jp sprite_behavior_return
04A3A0             0735*  @move:
04A3A0 C3 6D A0 04 0736*      jp sprite_behavior_return
04A3A4             0737*  @shoot:
04A3A4 C3 6D A0 04 0738*      jp sprite_behavior_return
04A3A8             0739*  
04A3A8             0740*  GOLD_CHEST:
04A3A8             0741*  ; behavior routine address lookup
04A3A8 BD A3 04    0742*      dl @init
04A3AB D3 A3 04    0743*      dl @use
04A3AE E4 A3 04    0744*      dl @hurt
04A3B1 E9 A3 04    0745*      dl @kill
04A3B4 F1 A3 04    0746*      dl @see
04A3B7 F6 A3 04    0747*      dl @move
04A3BA FA A3 04    0748*      dl @shoot
04A3BD             0749*  @init:
04A3BD 21 C5 A3 04 0750*      ld hl,@data ; address for LDIR to copy from
04A3C1 C3 6D A0 04 0751*      jp sprite_behavior_return
04A3C5             0752*  @data:
04A3C5 64          0753*      db 100 ;sprite_health
04A3C6 00          0754*      db 000 ;sprite_triggers_mask
04A3C7 00          0755*      db 000 ;sprite_x
04A3C8 00          0756*      db 000 ;sprite_y
04A3C9 00          0757*      db 000 ;sprite_orientation
04A3CA 00          0758*      db 000 ;sprite_animation
04A3CB 00          0759*      db 000 ;sprite_anim_tmr
04A3CC 01          0760*      db 001 ;sprite_move_timer
04A3CD 00          0761*      db 000 ;sprite_move_step
04A3CE FA          0762*      db 250 ;sprite_points
04A3CF 00          0763*      db 000 ;sprite_health_modifier
04A3D0 00          0764*      db 000 ;sprite_unassigned_0
04A3D1 00          0765*      db 000 ;sprite_unassigned_1
04A3D2 00          0766*      db 000 ;sprite_unassigned_2
04A3D3             0767*  @use:
04A3D3 FD E5       0768*      push iy
04A3D5 CD 20 BE 04 0769*      call sfx_play_got_treasure
04A3D9 FD E1       0770*      pop iy
04A3DB FD 7E 0B    0771*      ld a,(iy+sprite_points)
04A3DE CD C7 B3 04 0772*      call plyr_mod_score
04A3E2 18 05       0773*      jr @kill
04A3E4             0774*  @hurt:
04A3E4 AF          0775*      xor a
04A3E5 C3 6D A0 04 0776*      jp sprite_behavior_return
04A3E9             0777*  @kill:
04A3E9 CD 95 9F 04 0778*      call sprite_kill
04A3ED C3 6D A0 04 0779*      jp sprite_behavior_return
04A3F1             0780*  @see:
04A3F1 AF          0781*      xor a
04A3F2 C3 6D A0 04 0782*      jp sprite_behavior_return
04A3F6             0783*  @move:
04A3F6 C3 6D A0 04 0784*      jp sprite_behavior_return
04A3FA             0785*  @shoot:
04A3FA C3 6D A0 04 0786*      jp sprite_behavior_return
04A3FE             0787*  
04A3FE             0788*  MACHINE_GUN:
04A3FE             0789*  ; behavior routine address lookup
04A3FE 13 A4 04    0790*      dl @init
04A401 29 A4 04    0791*      dl @use
04A404 4D A4 04    0792*      dl @hurt
04A407 52 A4 04    0793*      dl @kill
04A40A 5A A4 04    0794*      dl @see
04A40D 5F A4 04    0795*      dl @move
04A410 63 A4 04    0796*      dl @shoot
04A413             0797*  @init:
04A413 21 1B A4 04 0798*      ld hl,@data ; address for LDIR to copy from
04A417 C3 6D A0 04 0799*      jp sprite_behavior_return
04A41B             0800*  @data:
04A41B 64          0801*      db 100 ;sprite_health
04A41C 00          0802*      db 000 ;sprite_triggers_mask
04A41D 00          0803*      db 000 ;sprite_x
04A41E 00          0804*      db 000 ;sprite_y
04A41F 00          0805*      db 000 ;sprite_orientation
04A420 00          0806*      db 000 ;sprite_animation
04A421 00          0807*      db 000 ;sprite_anim_tmr
04A422 01          0808*      db 001 ;sprite_move_timer
04A423 00          0809*      db 000 ;sprite_move_step
04A424 00          0810*      db 000 ;sprite_points
04A425 00          0811*      db 000 ;sprite_health_modifier
04A426 00          0812*      db 000 ;sprite_unassigned_0
04A427 00          0813*      db 000 ;sprite_unassigned_1
04A428 00          0814*      db 000 ;sprite_unassigned_2
04A429             0815*  @use:
04A429 3E 10       0816*      ld a,16
04A42B CD D6 B3 04 0817*      call plyr_add_ammo
04A42F CD 38 BE 04 0818*      call sfx_play_gun_reload
04A433 3E 04       0819*      ld a,plyr_wpn_mg
04A435 21 FE B1 04 0820*      ld hl,plyr_wpns
04A439 B6          0821*      or (hl)
04A43A 77          0822*      ld (hl),a
04A43B 3E 04       0823*      ld a,plyr_wpn_mg
04A43D 32 FF B1 04 0824*      ld (plyr_wpn_active),a
04A441 CD ED B2 04 0825*      call plyr_set_weapon_parameters
04A445 CD 95 9F 04 0826*      call sprite_kill
04A449 C3 6D A0 04 0827*      jp sprite_behavior_return
04A44D             0828*  @hurt:
04A44D AF          0829*      xor a
04A44E C3 6D A0 04 0830*      jp sprite_behavior_return
04A452             0831*  @kill:
04A452 CD 95 9F 04 0832*      call sprite_kill
04A456 C3 6D A0 04 0833*      jp sprite_behavior_return
04A45A             0834*  @see:
04A45A AF          0835*      xor a
04A45B C3 6D A0 04 0836*      jp sprite_behavior_return
04A45F             0837*  @move:
04A45F C3 6D A0 04 0838*      jp sprite_behavior_return
04A463             0839*  @shoot:
04A463 C3 6D A0 04 0840*      jp sprite_behavior_return
04A467             0841*  
04A467             0842*  GATLING_GUN:
04A467             0843*  ; behavior routine address lookup
04A467 7C A4 04    0844*      dl @init
04A46A 92 A4 04    0845*      dl @use
04A46D B6 A4 04    0846*      dl @hurt
04A470 BB A4 04    0847*      dl @kill
04A473 C3 A4 04    0848*      dl @see
04A476 C8 A4 04    0849*      dl @move
04A479 CC A4 04    0850*      dl @shoot
04A47C             0851*  @init:
04A47C 21 84 A4 04 0852*      ld hl,@data ; address for LDIR to copy from
04A480 C3 6D A0 04 0853*      jp sprite_behavior_return
04A484             0854*  @data:
04A484 64          0855*      db 100 ;sprite_health
04A485 00          0856*      db 000 ;sprite_triggers_mask
04A486 00          0857*      db 000 ;sprite_x
04A487 00          0858*      db 000 ;sprite_y
04A488 00          0859*      db 000 ;sprite_orientation
04A489 00          0860*      db 000 ;sprite_animation
04A48A 00          0861*      db 000 ;sprite_anim_tmr
04A48B 01          0862*      db 001 ;sprite_move_timer
04A48C 00          0863*      db 000 ;sprite_move_step
04A48D 00          0864*      db 000 ;sprite_points
04A48E 00          0865*      db 000 ;sprite_health_modifier
04A48F 00          0866*      db 000 ;sprite_unassigned_0
04A490 00          0867*      db 000 ;sprite_unassigned_1
04A491 00          0868*      db 000 ;sprite_unassigned_2
04A492             0869*  @use:
04A492 3E 20       0870*      ld a,32
04A494 CD D6 B3 04 0871*      call plyr_add_ammo
04A498 CD 38 BE 04 0872*      call sfx_play_gun_reload
04A49C 3E 08       0873*      ld a,plyr_wpn_gg
04A49E 21 FE B1 04 0874*      ld hl,plyr_wpns
04A4A2 B6          0875*      or (hl)
04A4A3 77          0876*      ld (hl),a
04A4A4 3E 08       0877*      ld a,plyr_wpn_gg
04A4A6 32 FF B1 04 0878*      ld (plyr_wpn_active),a
04A4AA CD ED B2 04 0879*      call plyr_set_weapon_parameters
04A4AE CD 95 9F 04 0880*      call sprite_kill
04A4B2 C3 6D A0 04 0881*      jp sprite_behavior_return
04A4B6             0882*  @hurt:
04A4B6 AF          0883*      xor a
04A4B7 C3 6D A0 04 0884*      jp sprite_behavior_return
04A4BB             0885*  @kill:
04A4BB CD 95 9F 04 0886*      call sprite_kill
04A4BF C3 6D A0 04 0887*      jp sprite_behavior_return
04A4C3             0888*  @see:
04A4C3 AF          0889*      xor a
04A4C4 C3 6D A0 04 0890*      jp sprite_behavior_return
04A4C8             0891*  @move:
04A4C8 C3 6D A0 04 0892*      jp sprite_behavior_return
04A4CC             0893*  @shoot:
04A4CC C3 6D A0 04 0894*      jp sprite_behavior_return
04A4D0             0895*  
04A4D0             0896*  DOG_FOOD:
04A4D0             0897*  ; behavior routine address lookup
04A4D0 E5 A4 04    0898*      dl @init
04A4D3 FB A4 04    0899*      dl @use
04A4D6 04 A5 04    0900*      dl @hurt
04A4D9 09 A5 04    0901*      dl @kill
04A4DC 11 A5 04    0902*      dl @see
04A4DF 16 A5 04    0903*      dl @move
04A4E2 1A A5 04    0904*      dl @shoot
04A4E5             0905*  @init:
04A4E5 21 ED A4 04 0906*      ld hl,@data ; address for LDIR to copy from
04A4E9 C3 6D A0 04 0907*      jp sprite_behavior_return
04A4ED             0908*  @data:
04A4ED 64          0909*      db 100 ;sprite_health
04A4EE 00          0910*      db 000 ;sprite_triggers_mask
04A4EF 00          0911*      db 000 ;sprite_x
04A4F0 00          0912*      db 000 ;sprite_y
04A4F1 00          0913*      db 000 ;sprite_orientation
04A4F2 00          0914*      db 000 ;sprite_animation
04A4F3 00          0915*      db 000 ;sprite_anim_tmr
04A4F4 01          0916*      db 001 ;sprite_move_timer
04A4F5 00          0917*      db 000 ;sprite_move_step
04A4F6 00          0918*      db 000 ;sprite_points
04A4F7 05          0919*      db 005 ;sprite_health_modifier
04A4F8 00          0920*      db 000 ;sprite_unassigned_0
04A4F9 00          0921*      db 000 ;sprite_unassigned_1
04A4FA 00          0922*      db 000 ;sprite_unassigned_2
04A4FB             0923*  @use:
04A4FB FD 7E 0C    0924*      ld a,(iy+sprite_health_modifier)
04A4FE CD A6 B3 04 0925*      call plyr_add_health
04A502 18 05       0926*      jr @kill
04A504             0927*  @hurt:
04A504 AF          0928*      xor a
04A505 C3 6D A0 04 0929*      jp sprite_behavior_return
04A509             0930*  @kill:
04A509 CD 95 9F 04 0931*      call sprite_kill
04A50D C3 6D A0 04 0932*      jp sprite_behavior_return
04A511             0933*  @see:
04A511 AF          0934*      xor a
04A512 C3 6D A0 04 0935*      jp sprite_behavior_return
04A516             0936*  @move:
04A516 C3 6D A0 04 0937*      jp sprite_behavior_return
04A51A             0938*  @shoot:
04A51A C3 6D A0 04 0939*      jp sprite_behavior_return
04A51E             0940*  
04A51E             0941*  GOLD_KEY:
04A51E             0942*  ; behavior routine address lookup
04A51E 33 A5 04    0943*      dl @init
04A521 49 A5 04    0944*      dl @use
04A524 4D A5 04    0945*      dl @hurt
04A527 52 A5 04    0946*      dl @kill
04A52A 5A A5 04    0947*      dl @see
04A52D 5F A5 04    0948*      dl @move
04A530 63 A5 04    0949*      dl @shoot
04A533             0950*  @init:
04A533 21 3B A5 04 0951*      ld hl,@data ; address for LDIR to copy from
04A537 C3 6D A0 04 0952*      jp sprite_behavior_return
04A53B             0953*  @data:
04A53B 64          0954*      db 100 ;sprite_health
04A53C 00          0955*      db 000 ;sprite_triggers_mask
04A53D 00          0956*      db 000 ;sprite_x
04A53E 00          0957*      db 000 ;sprite_y
04A53F 00          0958*      db 000 ;sprite_orientation
04A540 00          0959*      db 000 ;sprite_animation
04A541 00          0960*      db 000 ;sprite_anim_tmr
04A542 01          0961*      db 001 ;sprite_move_timer
04A543 00          0962*      db 000 ;sprite_move_step
04A544 00          0963*      db 000 ;sprite_points
04A545 00          0964*      db 000 ;sprite_health_modifier
04A546 00          0965*      db 000 ;sprite_unassigned_0
04A547 00          0966*      db 000 ;sprite_unassigned_1
04A548 00          0967*      db 000 ;sprite_unassigned_2
04A549             0968*  @use:
04A549 C3 6D A0 04 0969*      jp sprite_behavior_return
04A54D             0970*  @hurt:
04A54D AF          0971*      xor a
04A54E C3 6D A0 04 0972*      jp sprite_behavior_return
04A552             0973*  @kill:
04A552 CD 95 9F 04 0974*      call sprite_kill
04A556 C3 6D A0 04 0975*      jp sprite_behavior_return
04A55A             0976*  @see:
04A55A AF          0977*      xor a
04A55B C3 6D A0 04 0978*      jp sprite_behavior_return
04A55F             0979*  @move:
04A55F C3 6D A0 04 0980*      jp sprite_behavior_return
04A563             0981*  @shoot:
04A563 C3 6D A0 04 0982*      jp sprite_behavior_return
04A567             0983*  
04A567             0984*  DOG:
04A567             0985*  ; behavior routine address lookup
04A567 7C A5 04    0986*      dl @init
04A56A 92 A5 04    0987*      dl @use
04A56D A5 A5 04    0988*      dl @hurt
04A570 C9 A5 04    0989*      dl @kill
04A573 E0 A5 04    0990*      dl @see
04A576 E8 A5 04    0991*      dl @move
04A579 04 A6 04    0992*      dl @shoot
04A57C             0993*  @init:
04A57C 21 84 A5 04 0994*      ld hl,@data ; address for LDIR to copy from
04A580 C3 6D A0 04 0995*      jp sprite_behavior_return
04A584             0996*  @data:
04A584 32          0997*      db 050 ;sprite_health
04A585 00          0998*      db 000 ;sprite_triggers_mask
04A586 00          0999*      db 000 ;sprite_x
04A587 00          1000*      db 000 ;sprite_y
04A588 00          1001*      db 000 ;sprite_orientation
04A589 00          1002*      db 000 ;sprite_animation
04A58A 00          1003*      db 000 ;sprite_anim_tmr
04A58B 01          1004*      db 001 ;sprite_move_timer
04A58C 00          1005*      db 000 ;sprite_move_step
04A58D 0A          1006*      db 010 ;sprite_points
04A58E F6          1007*      db -10 ;sprite_health_modifier
04A58F 00          1008*      db 000 ;sprite_unassigned_0
04A590 00          1009*      db 000 ;sprite_unassigned_1
04A591 00          1010*      db 000 ;sprite_unassigned_2
04A592             1011*  @use:
04A592 FD E5       1012*      push iy
04A594 CD FC BD 04 1013*      call sfx_play_dog_woof_single
04A598 FD E1       1014*      pop iy
04A59A FD 7E 0C    1015*      ld a,(iy+sprite_health_modifier)
04A59D CD B3 B3 04 1016*      call plyr_sub_health
04A5A1 C3 6D A0 04 1017*      jp sprite_behavior_return
04A5A5             1018*  @hurt:
04A5A5 CD D5 B6 04 1019*      call rand_8
04A5A9 E6 01       1020*      and %00000001
04A5AB 20 08       1021*      jr nz,@nosound
04A5AD FD E5       1022*      push iy
04A5AF CD 08 BE 04 1023*      call sfx_play_dog_yelp
04A5B3 FD E1       1024*      pop iy
04A5B5             1025*  @nosound:
04A5B5 3E FF       1026*      ld a,255 ; kill player's shot
04A5B7 32 F9 B1 04 1027*      ld (plyr_shot_status),a
04A5BB 3A FD B1 04 1028*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A5BF FD 86 02    1029*      add a,(iy+sprite_health)
04A5C2 FD 77 02    1030*      ld (iy+sprite_health),a
04A5C5             1031*      ; jp p,sprite_behavior_return ; if health is positive, return
04A5C5 F2 EF A5 04 1032*      jp p,@do_move
04A5C9             1033*      ; otherwise fall through to kill sprite
04A5C9             1034*  @kill:
04A5C9 FD E5       1035*      push iy
04A5CB CD 08 BE 04 1036*      call sfx_play_dog_yelp
04A5CF FD E1       1037*      pop iy
04A5D1 FD 7E 0B    1038*      ld a,(iy+sprite_points)
04A5D4 CD C7 B3 04 1039*      call plyr_mod_score
04A5D8 CD 95 9F 04 1040*      call sprite_kill
04A5DC C3 6D A0 04 1041*      jp sprite_behavior_return
04A5E0             1042*  @see:
04A5E0 18 06       1043*      jr @move
04A5E2             1044*  @seen:
04A5E2 AF          1045*      xor a
04A5E3 3C          1046*      inc a
04A5E4 C3 6D A0 04 1047*      jp sprite_behavior_return
04A5E8             1048*  @move:
04A5E8 FD 35 09    1049*      dec (iy+sprite_move_timer)
04A5EB 28 02       1050*      jr z,@do_move
04A5ED 18 F3       1051*      jr @seen
04A5EF             1052*  @do_move:
04A5EF CD D5 B6 04 1053*      call rand_8
04A5F3 E6 3F       1054*      and %00111111 ; between 0 and 63
04A5F5             1055*      ; or %00100000  ; at least 32
04A5F5 F6 10       1056*      or %00010000  ; at least 16
04A5F7 FD 77 09    1057*      ld (iy+sprite_move_timer),a
04A5FA CD E7 9F 04 1058*      call sprite_move_random
04A5FE CD F0 BD 04 1059*      call sfx_play_dog_woof_double
04A602 18 DE       1060*      jr @seen
04A604             1061*  @shoot:
04A604 C3 6D A0 04 1062*      jp sprite_behavior_return
04A608             1063*  
04A608             1064*  GERMAN_TROOPER:
04A608             1065*  ; behavior routine address lookup
04A608 1D A6 04    1066*      dl @init
04A60B 33 A6 04    1067*      dl @use
04A60E 45 A6 04    1068*      dl @hurt
04A611 69 A6 04    1069*      dl @kill
04A614 80 A6 04    1070*      dl @see
04A617 9F A6 04    1071*      dl @move
04A61A B7 A6 04    1072*      dl @shoot
04A61D             1073*  @init:
04A61D 21 25 A6 04 1074*      ld hl,@data ; address for LDIR to copy from
04A621 C3 6D A0 04 1075*      jp sprite_behavior_return
04A625             1076*  @data:
04A625 4B          1077*      db 075 ;sprite_health
04A626 00          1078*      db 000 ;sprite_triggers_mask
04A627 00          1079*      db 000 ;sprite_x
04A628 00          1080*      db 000 ;sprite_y
04A629 00          1081*      db 000 ;sprite_orientation
04A62A 00          1082*      db 000 ;sprite_animation
04A62B 00          1083*      db 000 ;sprite_anim_tmr
04A62C 01          1084*      db 001 ;sprite_move_timer
04A62D 00          1085*      db 000 ;sprite_move_step
04A62E 14          1086*      db 020 ;sprite_points
04A62F EC          1087*      db -20 ;sprite_health_modifier
04A630 00          1088*      db 000 ;sprite_unassigned_0
04A631 00          1089*      db 000 ;sprite_unassigned_1
04A632 00          1090*      db 000 ;sprite_unassigned_2
04A633             1091*  @use:
04A633 FD E5       1092*      push iy
04A635 CD B4 BD 04 1093*      call sfx_play_achtung
04A639 FD E1       1094*      pop iy
04A63B 3E FB       1095*      ld a,-5
04A63D CD B3 B3 04 1096*      call plyr_sub_health
04A641 C3 6D A0 04 1097*      jp sprite_behavior_return
04A645             1098*  @hurt:
04A645 CD D5 B6 04 1099*      call rand_8
04A649 E6 01       1100*      and %00000001
04A64B 20 08       1101*      jr nz,@nosound
04A64D FD E5       1102*      push iy
04A64F CD AC AD 04 1103*      call sfx_play_random_hurt
04A653 FD E1       1104*      pop iy
04A655             1105*  @nosound:
04A655 3E FF       1106*      ld a,255 ; kill player's shot
04A657 32 F9 B1 04 1107*      ld (plyr_shot_status),a
04A65B 3A FD B1 04 1108*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A65F FD 86 02    1109*      add a,(iy+sprite_health)
04A662 FD 77 02    1110*      ld (iy+sprite_health),a
04A665             1111*      ; jp p,sprite_behavior_return ; if health is positive, return
04A665 F2 A6 A6 04 1112*      jp p,@do_move
04A669             1113*      ; otherwise fall through to kill sprite
04A669             1114*  @kill:
04A669 FD E5       1115*      push iy
04A66B CD B0 BE 04 1116*      call sfx_play_wilhelm
04A66F FD E1       1117*      pop iy
04A671 FD 7E 0B    1118*      ld a,(iy+sprite_points)
04A674 CD C7 B3 04 1119*      call plyr_mod_score
04A678 CD 95 9F 04 1120*      call sprite_kill
04A67C C3 6D A0 04 1121*      jp sprite_behavior_return
04A680             1122*  @see:
04A680 FD 7E 03    1123*      ld a,(iy+sprite_triggers_mask)
04A683 E6 01       1124*      and sprite_trigger_see
04A685 C2 9F A6 04 1125*      jp nz,@move
04A689 3E 01       1126*      ld a,sprite_trigger_see
04A68B FD B6 03    1127*      or a,(iy+sprite_triggers_mask)
04A68E FD 77 03    1128*      ld (iy+sprite_triggers_mask),a
04A691 FD E5       1129*      push iy
04A693 CD B4 BD 04 1130*      call sfx_play_achtung
04A697 FD E1       1131*      pop iy
04A699             1132*  @seen:
04A699 AF          1133*      xor a
04A69A 3C          1134*      inc a
04A69B C3 6D A0 04 1135*      jp sprite_behavior_return
04A69F             1136*  @move:
04A69F FD 35 09    1137*      dec (iy+sprite_move_timer)
04A6A2 28 02       1138*      jr z,@do_move
04A6A4 18 F3       1139*      jr @seen
04A6A6             1140*  @do_move:
04A6A6 CD D5 B6 04 1141*      call rand_8
04A6AA E6 3F       1142*      and %00111111 ; between 0 and 63
04A6AC             1143*      ; or %00100000  ; at least 32
04A6AC F6 10       1144*      or %00010000  ; at least 16
04A6AE FD 77 09    1145*      ld (iy+sprite_move_timer),a
04A6B1 CD E7 9F 04 1146*      call sprite_move_random
04A6B5 18 E2       1147*      jr @seen
04A6B7             1148*  @shoot:
04A6B7 C3 6D A0 04 1149*      jp sprite_behavior_return
04A6BB             1150*  
04A6BB             1151*  SS_GUARD:
04A6BB             1152*  ; behavior routine address lookup
04A6BB D0 A6 04    1153*      dl @init
04A6BE E6 A6 04    1154*      dl @use
04A6C1 F8 A6 04    1155*      dl @hurt
04A6C4 1C A7 04    1156*      dl @kill
04A6C7 33 A7 04    1157*      dl @see
04A6CA 52 A7 04    1158*      dl @move
04A6CD 6A A7 04    1159*      dl @shoot
04A6D0             1160*  @init:
04A6D0 21 D8 A6 04 1161*      ld hl,@data ; address for LDIR to copy from
04A6D4 C3 6D A0 04 1162*      jp sprite_behavior_return
04A6D8             1163*  @data:
04A6D8 64          1164*      db 100 ;sprite_health
04A6D9 00          1165*      db 000 ;sprite_triggers_mask
04A6DA 00          1166*      db 000 ;sprite_x
04A6DB 00          1167*      db 000 ;sprite_y
04A6DC 00          1168*      db 000 ;sprite_orientation
04A6DD 00          1169*      db 000 ;sprite_animation
04A6DE 00          1170*      db 000 ;sprite_anim_tmr
04A6DF 01          1171*      db 001 ;sprite_move_timer
04A6E0 00          1172*      db 000 ;sprite_move_step
04A6E1 1E          1173*      db 030 ;sprite_points
04A6E2 E2          1174*      db -30 ;sprite_health_modifier
04A6E3 00          1175*      db 000 ;sprite_unassigned_0
04A6E4 00          1176*      db 000 ;sprite_unassigned_1
04A6E5 00          1177*      db 000 ;sprite_unassigned_2
04A6E6             1178*  @use:
04A6E6 FD E5       1179*      push iy
04A6E8 CD 68 BE 04 1180*      call sfx_play_schusstaffel
04A6EC FD E1       1181*      pop iy
04A6EE 3E F6       1182*      ld a,-10
04A6F0 CD B3 B3 04 1183*      call plyr_sub_health
04A6F4 C3 6D A0 04 1184*      jp sprite_behavior_return
04A6F8             1185*  @hurt:
04A6F8 CD D5 B6 04 1186*      call rand_8
04A6FC E6 01       1187*      and %00000001
04A6FE 20 08       1188*      jr nz,@nosound
04A700 FD E5       1189*      push iy
04A702 CD AC AD 04 1190*      call sfx_play_random_hurt
04A706 FD E1       1191*      pop iy
04A708             1192*  @nosound:
04A708 3E FF       1193*      ld a,255 ; kill player's shot
04A70A 32 F9 B1 04 1194*      ld (plyr_shot_status),a
04A70E 3A FD B1 04 1195*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A712 FD 86 02    1196*      add a,(iy+sprite_health)
04A715 FD 77 02    1197*      ld (iy+sprite_health),a
04A718             1198*      ; jp p,sprite_behavior_return ; if health is positive, return
04A718 F2 59 A7 04 1199*      jp p,@do_move
04A71C             1200*      ; otherwise fall through to kill sprite
04A71C             1201*  @kill:
04A71C FD E5       1202*      push iy
04A71E CD 50 BE 04 1203*      call sfx_play_mein_leben
04A722 FD E1       1204*      pop iy
04A724 FD 7E 0B    1205*      ld a,(iy+sprite_points)
04A727 CD C7 B3 04 1206*      call plyr_mod_score
04A72B CD 95 9F 04 1207*      call sprite_kill
04A72F C3 6D A0 04 1208*      jp sprite_behavior_return
04A733             1209*  @see:
04A733 FD 7E 03    1210*      ld a,(iy+sprite_triggers_mask)
04A736 E6 01       1211*      and sprite_trigger_see
04A738 C2 52 A7 04 1212*      jp nz,@move
04A73C 3E 01       1213*      ld a,sprite_trigger_see
04A73E FD B6 03    1214*      or a,(iy+sprite_triggers_mask)
04A741 FD 77 03    1215*      ld (iy+sprite_triggers_mask),a
04A744 FD E5       1216*      push iy
04A746 CD 68 BE 04 1217*      call sfx_play_schusstaffel
04A74A FD E1       1218*      pop iy
04A74C             1219*  @seen:
04A74C AF          1220*      xor a
04A74D 3C          1221*      inc a
04A74E C3 6D A0 04 1222*      jp sprite_behavior_return
04A752             1223*  @move:
04A752 FD 35 09    1224*      dec (iy+sprite_move_timer)
04A755 28 02       1225*      jr z,@do_move
04A757 18 F3       1226*      jr @seen
04A759             1227*  @do_move:
04A759 CD D5 B6 04 1228*      call rand_8
04A75D E6 3F       1229*      and %00111111 ; between 0 and 63
04A75F             1230*      ; or %00100000  ; at least 32
04A75F F6 10       1231*      or %00010000  ; at least 16
04A761 FD 77 09    1232*      ld (iy+sprite_move_timer),a
04A764 CD E7 9F 04 1233*      call sprite_move_random
04A768 18 E2       1234*      jr @seen
04A76A             1235*  @shoot:
04A76A C3 6D A0 04 1236*      jp sprite_behavior_return
04A76E             1237*  
04A76E 00          1238*  see_orientation: db 0x00
04A76F             1239*  ; cycle through all cells visible to the player from the current position
04A76F             1240*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04A76F             1241*  ; inputs: cur_x, cur_y,
04A76F             1242*  ; outputs: player-aware enemies
04A76F             1243*  ; destroys: everything
04A76F             1244*  sprites_see_plyr:
04A76F             1245*  ; ; DEBUG: set up loop timer
04A76F             1246*  ;     call prt_loop_reset
04A76F             1247*  ; ; END DEBUG
04A76F             1248*  ; ; DEBUG: start loop timer
04A76F             1249*  ;     call prt_loop_start
04A76F             1250*  ; ; END DEBUG
04A76F             1251*  
04A76F             1252*  ; intialize orientation
04A76F AF          1253*      xor a
04A770 32 6E A7 04 1254*      ld (see_orientation),a
04A774             1255*  @loop_orientation:
04A774             1256*  ; get current map position and camera orientation
04A774 ED 5B E9 B1 1257*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04A779             1258*      ; 0-1 prt ticks, 4 loops
04A779 CD 9D 65 04 1259*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04A77D             1260*  ; get cell_views address for this cell and orientation
04A77D 3A 6E A7 04 1261*      ld a,(see_orientation)
04A781 5F          1262*      ld e,a
04A782 16 06       1263*      ld d,6 ; 6 bytes per orientation
04A784 ED 5C       1264*      mlt de ; de = orientation offset
04A786 EB          1265*      ex de,hl ; hl = orientation offset
04A787 06 18       1266*      ld b,24 ; 24 bytes per cell in cell_views lut
04A789 ED 4C       1267*      mlt bc ; bc = offset from base address of cell_views lut
04A78B 09          1268*      add hl,bc ; hl = total offset from cell_views base address
04A78C EB          1269*      ex de,hl ; because we can't add iy to hl
04A78D FD 21 00 E4 1270*      ld iy,cell_views ; base address of cell_views lut
       B7          
04A792 FD 19       1271*      add iy,de ; iy = cell_views address
04A794 FD 22 29 67 1272*      ld (cur_cell_views),iy
       04          
04A799             1273*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04A799 01 00 46 28 1274*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04A79D AF          1275*      xor a ; poly_id
04A79E 32 25 67 04 1276*      ld (to_poly_id),a
04A7A2             1277*  @loop:
04A7A2 ED 43 AE A7 1278*      ld (@bit_iy+2),bc
       04          
04A7A7 FD 2A 29 67 1279*      ld iy,(cur_cell_views)
       04          
04A7AC             1280*  @bit_iy:
04A7AC FD CB 00 46 1281*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04A7B0 28 2E       1282*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04A7B2             1283*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04A7B2 3A 25 67 04 1284*      ld a,(to_poly_id)
04A7B6 4F          1285*      ld c,a ; poly_id
04A7B7 3A 6E A7 04 1286*      ld a,(see_orientation)
04A7BB CD 46 69 04 1287*      call get_polys_deltas ; d,e = y,x deltas
04A7BF 3A E9 B1 04 1288*      ld a,(cur_x)
04A7C3 83          1289*      add a,e
04A7C4 5F          1290*      ld e,a
04A7C5 3A EA B1 04 1291*      ld a,(cur_y)
04A7C9 82          1292*      add a,d
04A7CA 57          1293*      ld d,a
04A7CB CD 9D 65 04 1294*      call get_cell_from_coords
04A7CF DD 7E 03    1295*      ld a,(ix+map_sprite_id)
04A7D2 FE FF       1296*      cp 0xFF ; no sprite
04A7D4 28 0A       1297*      jr z,@next_poly
04A7D6 CD 83 9F 04 1298*      call sprite_set_pointer
04A7DA 3E 04       1299*      ld a,sp_see
04A7DC CD 51 A0 04 1300*      call do_sprite_behavior
04A7E0             1301*  @next_poly:
04A7E0 ED 4B AE A7 1302*      ld bc,(@bit_iy+2)
       04          
04A7E5 3A 25 67 04 1303*      ld a,(to_poly_id)
04A7E9 3C          1304*      inc a ; a is next poly_id
04A7EA 32 25 67 04 1305*      ld (to_poly_id),a
04A7EE FE 2D       1306*      cp num_polys
04A7F0 28 0D       1307*      jr z,@next_orientation
04A7F2 3E 08       1308*      ld a,8
04A7F4 80          1309*      add a,b
04A7F5 47          1310*      ld b,a ; bit tested codes to 0x46 + b/8
04A7F6 FE 86       1311*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04A7F8 20 A8       1312*      jr nz,@loop
04A7FA 06 46       1313*      ld b,0x46
04A7FC 0C          1314*      inc c ; iy address offset
04A7FD 18 A3       1315*      jr @loop
04A7FF             1316*  @next_orientation:
04A7FF 3A 6E A7 04 1317*      ld a,(see_orientation)
04A803 3C          1318*      inc a
04A804 E6 03       1319*      and 3 ; modulo 4
04A806 32 6E A7 04 1320*      ld (see_orientation),a
04A80A C2 74 A7 04 1321*      jp nz,@loop_orientation
04A80E             1322*  
04A80E             1323*  ; full loop 1-2 prt ticks
04A80E             1324*  ; ; DEBUG: stop loop timer
04A80E             1325*  ;     call prt_loop_stop
04A80E             1326*  ; ; END DEBUG
04A80E C9          1327*      ret
04A80F             0024   	include "src/asm/vdu.asm"
04A80F             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04A80F             0002*  ; VDU 0: Null (no operation)
04A80F             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A80F             0004*  ; VDU 2: Enable “printer” §§
04A80F             0005*  ; VDU 3: Disable “printer” §§
04A80F             0006*  ; VDU 4: Write text at text cursor
04A80F             0007*  ; VDU 5: Write text at graphics cursor
04A80F             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A80F             0009*  ; VDU 7: Make a short beep (BEL)
04A80F             0010*  ; VDU 8: Move cursor back one character
04A80F             0011*  ; VDU 9: Move cursor forward one character
04A80F             0012*  ; VDU 10: Move cursor down one line
04A80F             0013*  ; VDU 11: Move cursor up one line
04A80F             0014*  ; VDU 12: Clear text area (CLS)
04A80F             0015*  ; VDU 13: Carriage return
04A80F             0016*  ; VDU 14: Page mode On *
04A80F             0017*  ; VDU 15: Page mode Off *
04A80F             0018*  ; VDU 16: Clear graphics area (CLG)
04A80F             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04A80F             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04A80F             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A80F             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A80F             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04A80F             0024*  ; VDU 22, n: Select screen mode (MODE n)
04A80F             0025*  ; VDU 23, n: Re-program display character / System Commands
04A80F             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04A80F             0027*  ; VDU 25, mode, x; y;: PLOT command
04A80F             0028*  ; VDU 26: Reset graphics and text viewports **
04A80F             0029*  ; VDU 27, char: Output character to screen §
04A80F             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A80F             0031*  ; VDU 29, x; y;: Set graphics origin
04A80F             0032*  ; VDU 30: Home cursor
04A80F             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A80F             0034*  ; VDU 127: Backspace
04A80F             0035*  
04A80F             0036*  ; VDU 0: Null (no operation)
04A80F             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04A80F             0038*  ;     This may be useful for padding out a VDU command sequence,
04A80F             0039*  ;     or for inserting a placeholder for a command that will be added later.
04A80F             0040*  ; inputs: none
04A80F             0041*  ; outputs: an empty byte somewhere in VDU
04A80F             0042*  ; destroys: a
04A80F             0043*  vdu_null:
04A80F AF          0044*      xor a
04A810 5B D7       0045*  	rst.lil $10
04A812 C9          0046*  	ret
04A813             0047*  
04A813             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A813             0049*  ;     Ensures that the next character received by the VDP is sent through to
04A813             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04A813             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04A813             0052*  ;     intended to be displayed on the screen. It allows characters that would
04A813             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04A813             0054*  ;     If the “printer” has not been enabled then this command will just discard
04A813             0055*  ;     the next byte sent to the VDP.
04A813             0056*  ; inputs: a is the ascii code of the character to send
04A813             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04A813             0058*  ; outputs: a character on the serial terminal connected to the USB port
04A813             0059*  ;           and the same character on the screen at the current text cursor location
04A813             0060*  ; QUESTION: does it also advance the text cursor?
04A813             0061*  ; destroys: hl, bc
04A813             0062*  vdu_char_to_printer:
04A813 32 23 A8 04 0063*  	ld (@arg),a
04A817 21 22 A8 04 0064*  	ld hl,@cmd
04A81B 01 02 00 00 0065*  	ld bc,@end-@cmd
04A81F 5B DF       0066*  	rst.lil $18
04A821 C9          0067*  	ret
04A822 01          0068*  @cmd: db 1
04A823 00          0069*  @arg: db 0
04A824             0070*  @end:
04A824             0071*  
04A824             0072*  ; VDU 2: Enable “printer” §§
04A824             0073*  ;     Enables the “printer”.
04A824             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04A824             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04A824             0076*  ;     this port is used for power, but it can also be used to send and
04A824             0077*  ;     receive data to and from the VDP.
04A824             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04A824             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04A824             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04A824             0081*  ;     use the VDU 1 command.
04A824             0082*  ;     The VDP will not send through other control codes to the printer,
04A824             0083*  ;     and will will not send through data it receives as part of other commands.
04A824             0084*  vdu_enable_printer:
04A824 3E 02       0085*      ld a,2
04A826 5B D7       0086*  	rst.lil $10
04A828 C9          0087*  	ret
04A829             0088*  
04A829             0089*  ; VDU 3: Disable “printer” §§
04A829             0090*  ; inputs: none
04A829             0091*  ; outputs: a USB port bereft of communication with the VDP
04A829             0092*  ; destroys: a
04A829             0093*  vdu_disable_printer:
04A829 3E 03       0094*      ld a,3
04A82B 5B D7       0095*  	rst.lil $10
04A82D C9          0096*  	ret
04A82E             0097*  
04A82E             0098*  ; VDU 4: Write text at text cursor
04A82E             0099*  ;     This causes text to be written at the current text cursor position.
04A82E             0100*  ;     This is the default mode for text display.
04A82E             0101*  ;     Text is written using the current text foreground and background colours.
04A82E             0102*  ; inputs: a is the character to write to the screen
04A82E             0103*  ; prerequisites: the text cursor at the intended position on screen
04A82E             0104*  ; outputs: prints the character and moves text cursor right one position
04A82E             0105*  ; destroys: a, hl, bc
04A82E             0106*  vdu_char_to_text_cursor:
04A82E 32 3E A8 04 0107*  	ld (@arg),a
04A832 21 3D A8 04 0108*  	ld hl,@cmd
04A836 01 02 00 00 0109*  	ld bc,@end-@cmd
04A83A 5B DF       0110*  	rst.lil $18
04A83C C9          0111*  	ret
04A83D 04          0112*  @cmd: db 4
04A83E 00          0113*  @arg: db 0
04A83F             0114*  @end:
04A83F             0115*  
04A83F             0116*  ; VDU 5: Write text at graphics cursor
04A83F             0117*  ;     This causes text to be written at the current graphics cursor position.
04A83F             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04A83F             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04A83F             0120*  ;     or for positioning text at a specific location on the screen.
04A83F             0121*  ;     Characters are plotted using the current graphics foreground colour,
04A83F             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04A83F             0123*  ;     The character background is transparent, and will not overwrite any
04A83F             0124*  ;     graphics that are already present at the character’s location.
04A83F             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04A83F             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04A83F             0127*  ;     graphics background colour.
04A83F             0128*  ; inputs: a is the character to write to the screen
04A83F             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04A83F             0130*  ; outputs: see the name of the function
04A83F             0131*  ; destroys: a, hl, bc
04A83F             0132*  vdu_char_to_gfx_cursor:
04A83F 32 4F A8 04 0133*  	ld (@arg),a
04A843 21 4E A8 04 0134*  	ld hl,@cmd
04A847 01 02 00 00 0135*  	ld bc,@end-@cmd
04A84B 5B DF       0136*  	rst.lil $18
04A84D C9          0137*  	ret
04A84E 05          0138*  @cmd: db 5
04A84F 00          0139*  @arg: db 0
04A850             0140*  @end:
04A850             0141*  
04A850             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A850             0143*  ;     This enables the screen, and re-enables VDU command processing,
04A850             0144*  ;     reversing the effect of VDU 21.
04A850             0145*  ; inputs: none
04A850             0146*  ; outputs: a functioning screen and VDU
04A850             0147*  ; destroys: a
04A850             0148*  vdu_enable_screen:
04A850 3E 06       0149*      ld a,6
04A852 5B D7       0150*  	rst.lil $10
04A854 C9          0151*  	ret
04A855             0152*  
04A855             0153*  ; PASSES
04A855             0154*  ; VDU 7: Make a short beep (BEL)
04A855             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04A855             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04A855             0157*  ; inputs: none
04A855             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04A855             0159*  ; destroys: a
04A855             0160*  vdu_beep:
04A855 3E 07       0161*      ld a,7
04A857 5B D7       0162*  	rst.lil $10
04A859 C9          0163*  	ret
04A85A             0164*  
04A85A             0165*  ; VDU 8: Move cursor back one character
04A85A             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04A85A             0167*  ;     By default, when at the start of a line it will move to the end of
04A85A             0168*  ;     the previous line (as defined by the current text viewport).
04A85A             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04A85A             0170*  ;     The cursor remains constrained to the current text viewport.
04A85A             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04A85A             0172*  ;     The cursor is just moved left by one character width.
04A85A             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04A85A             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04A85A             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04A85A             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04A85A             0177*  vdu_cursor_back:
04A85A 3E 08       0178*      ld a,8
04A85C 5B D7       0179*  	rst.lil $10
04A85E C9          0180*  	ret
04A85F             0181*  
04A85F             0182*  ; VDU 9: Move cursor forward one character
04A85F             0183*  vdu_cursor_forward:
04A85F 3E 09       0184*      ld a,9
04A861 5B D7       0185*  	rst.lil $10
04A863 C9          0186*  	ret
04A864             0187*  
04A864             0188*  ; VDU 10: Move cursor down one line
04A864             0189*  vdu_cursor_down:
04A864 3E 0A       0190*      ld a,10
04A866 5B D7       0191*  	rst.lil $10
04A868 C9          0192*  	ret
04A869             0193*  
04A869             0194*  ; VDU 11: Move cursor up one line
04A869             0195*  vdu_cursor_up:
04A869 3E 0B       0196*      ld a,11
04A86B 5B D7       0197*  	rst.lil $10
04A86D C9          0198*  	ret
04A86E             0199*  
04A86E             0200*  ; VDU 12: Clear text area (CLS)
04A86E             0201*  vdu_cls:
04A86E 3E 0C       0202*      ld a,12
04A870 5B D7       0203*  	rst.lil $10
04A872 C9          0204*  	ret
04A873             0205*  
04A873             0206*  ; VDU 13: Carriage return
04A873             0207*  vdu_cr:
04A873 3E 0D       0208*      ld a,13
04A875 5B D7       0209*  	rst.lil $10
04A877 C9          0210*  	ret
04A878             0211*  
04A878             0212*  ; VDU 14: Page mode On *
04A878             0213*  vdu_page_on:
04A878 3E 0E       0214*      ld a,14
04A87A 5B D7       0215*  	rst.lil $10
04A87C C9          0216*  	ret
04A87D             0217*  
04A87D             0218*  ; VDU 15: Page mode Off *
04A87D             0219*  vdu_page_off:
04A87D 3E 0F       0220*      ld a,15
04A87F 5B D7       0221*  	rst.lil $10
04A881 C9          0222*  	ret
04A882             0223*  
04A882             0224*  ; VDU 16: Clear graphics area (CLG)
04A882             0225*  vdu_clg:
04A882 3E 10       0226*      ld a,16
04A884 5B D7       0227*  	rst.lil $10
04A886 C9          0228*  	ret
04A887             0229*  
04A887             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04A887             0231*  vdu_colour_text:
04A887 32 97 A8 04 0232*  	ld (@arg),a
04A88B 21 96 A8 04 0233*  	ld hl,@cmd
04A88F 01 02 00 00 0234*  	ld bc,@end-@cmd
04A893 5B DF       0235*  	rst.lil $18
04A895 C9          0236*  	ret
04A896 11          0237*  @cmd: db 17
04A897 00          0238*  @arg: db 0
04A898             0239*  @end:
04A898             0240*  
04A898             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04A898             0242*  ; inputs: a is the plotting mode, c is the colour
04A898             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04A898             0244*  vdu_gcol_fg:
04A898             0245*  ; This command will set both the current graphics colour,
04A898             0246*  ; and the current graphics plotting mode.
04A898             0247*  ; As with VDU 17 the colour number will set the foreground colour
04A898             0248*  ; if it is in the range 0-127, or the background colour if it is
04A898             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04A898             0250*  ; Support for different plotting modes on Agon is currently very limited.
04A898             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04A898             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04A898             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04A898             0254*  ; very limited support for mode 4, which will invert the colour of any
04A898             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04A898             0256*  ; and may not work as expected.
04A898             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04A898             0258*  ; original VDU system, may be added in the future.
04A898             0259*  ; This command is identical to the BASIC GCOL keyword.
04A898 32 AD A8 04 0260*  	ld (@mode),a
04A89C 79          0261*      ld a,c
04A89D 32 AE A8 04 0262*      ld (@col),a
04A8A1 21 AC A8 04 0263*  	ld hl,@cmd
04A8A5 01 03 00 00 0264*  	ld bc,@end-@cmd
04A8A9 5B DF       0265*  	rst.lil $18
04A8AB C9          0266*  	ret
04A8AC 12          0267*  @cmd: db 18
04A8AD 00          0268*  @mode: db 0
04A8AE 00          0269*  @col: db 0
04A8AF             0270*  @end:
04A8AF             0271*  
04A8AF             0272*  vdu_gcol_bg:
04A8AF 32 C6 A8 04 0273*  	ld (@mode),a
04A8B3 79          0274*      ld a,c
04A8B4 C6 80       0275*      add a,128
04A8B6 32 C7 A8 04 0276*      ld (@col),a
04A8BA 21 C5 A8 04 0277*  	ld hl,@cmd
04A8BE 01 03 00 00 0278*  	ld bc,@end-@cmd
04A8C2 5B DF       0279*  	rst.lil $18
04A8C4 C9          0280*  	ret
04A8C5 12          0281*  @cmd:  db 18
04A8C6 00          0282*  @mode: db 0
04A8C7 00          0283*  @col:  db 0
04A8C8             0284*  @end:
04A8C8             0285*  
04A8C8             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A8C8             0287*  ;     This command sets the colour palette, by mapping a logical colour
04A8C8             0288*  ;     to a physical colour. This is useful for defining custom colours,
04A8C8             0289*  ;     or for redefining the default colours.
04A8C8             0290*  ;     If the physical colour number is given as 255 then the colour will
04A8C8             0291*  ;     be defined using the red, green, and blue values given. If the physical
04A8C8             0292*  ;     colour number is given as any other value then the colour will be defined
04A8C8             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04A8C8             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04A8C8             0295*  ;     must still be provided, but will be ignored.
04A8C8             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04A8C8             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04A8C8             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04A8C8             0299*  ;     requested. The nearest colour will be chosen.
04A8C8             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04A8C8             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04A8C8             0302*  vdu_def_log_colour:
04A8C8 32 ED A8 04 0303*  	ld (@physical),a
04A8CC 47          0304*      ld b,a
04A8CD 32 EC A8 04 0305*      ld (@logical),a
04A8D1 79          0306*      ld a,c
04A8D2 32 EE A8 04 0307*      ld (@red),a
04A8D6 7C          0308*      ld a,h
04A8D7 32 EF A8 04 0309*      ld (@green),a
04A8DB 7D          0310*      ld a,l
04A8DC 32 F0 A8 04 0311*      ld (@blue),a
04A8E0 21 EB A8 04 0312*  	ld hl,@cmd
04A8E4 01 06 00 00 0313*  	ld bc,@end-@cmd
04A8E8 5B DF       0314*  	rst.lil $18
04A8EA C9          0315*  	ret
04A8EB 13          0316*  @cmd: db 19
04A8EC 00          0317*  @logical: db 0
04A8ED 00          0318*  @physical: db 0
04A8EE 00          0319*  @red: db 0
04A8EF 00          0320*  @green: db 0
04A8F0 00          0321*  @blue: db 0
04A8F1             0322*  @end:
04A8F1             0323*  
04A8F1             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A8F1             0325*  vdu_reset_gfx:
04A8F1 3E 14       0326*      ld a,20
04A8F3 5B D7       0327*  	rst.lil $10
04A8F5 C9          0328*  	ret
04A8F6             0329*  
04A8F6             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04A8F6             0331*  ; except for VDU 1 and VDU 6) §§
04A8F6             0332*  vdu_disable_screen:
04A8F6 3E 15       0333*      ld a,21
04A8F8 5B D7       0334*  	rst.lil $10
04A8FA C9          0335*  	ret
04A8FB             0336*  
04A8FB             0337*  ; VDU 22, n: Select screen mode (MODE n)
04A8FB             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04A8FB             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04A8FB             0340*  ; Screen modes
04A8FB             0341*  ; Modes over 128 are double-buffered
04A8FB             0342*  ; From Version 1.04 or greater
04A8FB             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04A8FB             0344*  ; 0 	640 	480 	16 	    60hz
04A8FB             0345*  ; * 1 	640 	480 	4 	    60hz
04A8FB             0346*  ; 2 	640 	480 	2 	    60hz
04A8FB             0347*  ; 3 	640 	240 	64 	    60hz
04A8FB             0348*  ; 4 	640 	240 	16 	    60hz
04A8FB             0349*  ; 5 	640 	240 	4 	    60hz
04A8FB             0350*  ; 6 	640 	240 	2 	    60hz
04A8FB             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04A8FB             0352*  ; 8 	320 	240 	64 	    60hz
04A8FB             0353*  ; 9 	320 	240 	16 	    60hz
04A8FB             0354*  ; 10 	320 	240 	4 	    60hz
04A8FB             0355*  ; 11 	320 	240 	2 	    60hz
04A8FB             0356*  ; 12 	320 	200 	64 	    70hz
04A8FB             0357*  ; 13 	320 	200 	16 	    70hz
04A8FB             0358*  ; 14 	320 	200 	4 	    70hz
04A8FB             0359*  ; 15 	320 	200 	2 	    70hz
04A8FB             0360*  ; 16 	800 	600 	4 	    60hz
04A8FB             0361*  ; 17 	800 	600 	2 	    60hz
04A8FB             0362*  ; 18 	1024 	768 	2 	    60hz
04A8FB             0363*  ; 129 	640 	480 	4 	    60hz
04A8FB             0364*  ; 130 	640 	480 	2 	    60hz
04A8FB             0365*  ; 132 	640 	240 	16 	    60hz
04A8FB             0366*  ; 133 	640 	240 	4 	    60hz
04A8FB             0367*  ; 134 	640 	240 	2 	    60hz
04A8FB             0368*  ; 136 	320 	240 	64 	    60hz
04A8FB             0369*  ; 137 	320 	240 	16 	    60hz
04A8FB             0370*  ; 138 	320 	240 	4 	    60hz
04A8FB             0371*  ; 139 	320 	240 	2 	    60hz
04A8FB             0372*  ; 140 	320 	200 	64 	    70hz
04A8FB             0373*  ; 141 	320 	200 	16 	    70hz
04A8FB             0374*  ; 142 	320 	200 	4 	    70hz
04A8FB             0375*  ; 143 	320 	200 	2 	    70hz
04A8FB             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04A8FB             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04A8FB             0378*  ; change to the requested mode.
04A8FB             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04A8FB             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04A8FB             0381*  vdu_set_screen_mode:
04A8FB 32 0B A9 04 0382*  	ld (@arg),a
04A8FF 21 0A A9 04 0383*  	ld hl,@cmd
04A903 01 02 00 00 0384*  	ld bc,@end-@cmd
04A907 5B DF       0385*  	rst.lil $18
04A909 C9          0386*  	ret
04A90A 16          0387*  @cmd: db 22 ; set screen mode
04A90B 00          0388*  @arg: db 0  ; screen mode parameter
04A90C             0389*  @end:
04A90C             0390*  
04A90C             0391*  ; VDU 23, n: Re-program display character / System Commands
04A90C             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04A90C             0393*  vdu_define_character:
04A90C 32 28 A9 04 0394*  	ld (@ascii),a
04A910 11 29 A9 04 0395*  	ld de,@data
04A914 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04A916             0397*  @loop:
04A916 7E          0398*  	ld a,(hl)
04A917 12          0399*  	ld (de),a
04A918 23          0400*  	inc hl
04A919 13          0401*  	inc de
04A91A 10 FA       0402*  	djnz @loop
04A91C 21 27 A9 04 0403*  	ld hl,@cmd
04A920 01 0A 00 00 0404*  	ld bc,@end-@cmd
04A924 5B DF       0405*  	rst.lil $18
04A926 C9          0406*  	ret
04A927 17          0407*  @cmd:   db 23
04A928 00          0408*  @ascii: db 0
04A929             0409*  @data:  ds 8
04A931             0410*  @end:
04A931             0411*  
04A931             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04A931             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04A931             0414*  ; 	because we have turned off logical screen scaling
04A931             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04A931             0416*  ; outputs; nothing
04A931             0417*  ; destroys: a might make it out alive
04A931             0418*  vdu_set_gfx_viewport:
04A931 ED 43 51 A9 0419*      ld (@x0),bc
       04          
04A936 FD 22 53 A9 0420*      ld (@y1),iy
       04          
04A93B DD 22 55 A9 0421*  	ld (@x1),ix
       04          
04A940 ED 53 57 A9 0422*  	ld (@y0),de
       04          
04A945 21 50 A9 04 0423*  	ld hl,@cmd
04A949 01 09 00 00 0424*  	ld bc,@end-@cmd
04A94D 5B DF       0425*  	rst.lil $18
04A94F C9          0426*  	ret
04A950 18          0427*  @cmd:   db 24 ; set graphics viewport command
04A951 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04A953 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04A955 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04A957 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04A959 00          0432*  @end:   db 0x00	  ; padding
04A95A             0433*  
04A95A             0434*  ; VDU 25, mode, x; y;: PLOT command
04A95A             0435*  ; Implemented in vdu_plot.asm
04A95A             0436*  
04A95A             0437*  ; VDU 26: Reset graphics and text viewports **
04A95A             0438*  vdu_reset_txt_gfx_view:
04A95A 3E 1A       0439*      ld a,26
04A95C 5B D7       0440*  	rst.lil $10
04A95E C9          0441*  	ret
04A95F             0442*  
04A95F             0443*  ; PASSES
04A95F             0444*  ; VDU 27, char: Output character to screen §
04A95F             0445*  ; inputs: a is the ascii code of the character to draw
04A95F             0446*  vdu_draw_char:
04A95F 32 6F A9 04 0447*  	ld (@arg),a
04A963 21 6E A9 04 0448*  	ld hl,@cmd
04A967 01 02 00 00 0449*  	ld bc,@end-@cmd
04A96B 5B DF       0450*  	rst.lil $18
04A96D C9          0451*  	ret
04A96E 1B          0452*  @cmd: db 27
04A96F 00          0453*  @arg: db 0  ; ascii code of character to draw
04A970             0454*  @end:
04A970             0455*  
04A970             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A970             0457*  ; MIND THE LITTLE-ENDIANESS
04A970             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04A970             0459*  ; outputs; nothing
04A970             0460*  ; destroys: a might make it out alive
04A970             0461*  vdu_set_txt_viewport:
04A970 ED 43 86 A9 0462*      ld (@lb),bc
       04          
04A975 ED 53 88 A9 0463*  	ld (@rt),de
       04          
04A97A 21 85 A9 04 0464*  	ld hl,@cmd
04A97E 01 05 00 00 0465*  	ld bc,@end-@cmd
04A982 5B DF       0466*  	rst.lil $18
04A984 C9          0467*  	ret
04A985 1C          0468*  @cmd:   db 28 ; set text viewport command
04A986 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04A988 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04A98A 00          0471*  @end:   db 0x00	  ; padding
04A98B             0472*  
04A98B             0473*  ; PASSES
04A98B             0474*  ; VDU 29, x; y;: Set graphics origin
04A98B             0475*  ; inputs: bc,de x,y coordinates
04A98B             0476*  vdu_set_gfx_origin:
04A98B ED 43 A1 A9 0477*      ld (@x0),bc
       04          
04A990 ED 53 A3 A9 0478*      ld (@y0),de
       04          
04A995 21 A0 A9 04 0479*  	ld hl,@cmd
04A999 01 05 00 00 0480*  	ld bc,@end-@cmd
04A99D 5B DF       0481*  	rst.lil $18
04A99F C9          0482*  	ret
04A9A0 1D          0483*  @cmd:	db 29
04A9A1 00 00       0484*  @x0: 	dw 0
04A9A3 00 00       0485*  @y0: 	dw 0
04A9A5 00          0486*  @end: 	db 0 ; padding
04A9A6             0487*  
04A9A6             0488*  ; PASSES
04A9A6             0489*  ; VDU 30: Home cursor
04A9A6             0490*  vdu_home_cursor:
04A9A6 3E 1E       0491*      ld a,30
04A9A8 5B D7       0492*  	rst.lil $10
04A9AA C9          0493*  	ret
04A9AB             0494*  
04A9AB             0495*  ; PASSES
04A9AB             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A9AB             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04A9AB             0498*  vdu_move_cursor:
04A9AB ED 43 BC A9 0499*      ld (@x0),bc
       04          
04A9B0 21 BB A9 04 0500*  	ld hl,@cmd
04A9B4 01 03 00 00 0501*  	ld bc,@end-@cmd
04A9B8 5B DF       0502*  	rst.lil $18
04A9BA C9          0503*  	ret
04A9BB 1F          0504*  @cmd: 	db 31
04A9BC 00          0505*  @x0:	db 0
04A9BD 00          0506*  @y0: 	db 0
04A9BE 00          0507*  @end: 	db 0 ; padding
04A9BF             0508*  
04A9BF             0509*  
04A9BF             0510*  ; VDU 127: Backspace
04A9BF             0511*  vdu_bksp:
04A9BF 3E 7F       0512*      ld a,127
04A9C1 5B D7       0513*  	rst.lil $10
04A9C3 C9          0514*  	ret
04A9C4             0515*  
04A9C4             0516*  ; activate a bitmap in preparation to draw it
04A9C4             0517*  ; inputs: a holding the bitmap index
04A9C4             0518*  vdu_bmp_select:
04A9C4 32 D6 A9 04 0519*  	ld (@bmp),a
04A9C8 21 D3 A9 04 0520*  	ld hl,@cmd
04A9CC 01 04 00 00 0521*  	ld bc,@end-@cmd
04A9D0 5B DF       0522*  	rst.lil $18
04A9D2 C9          0523*  	ret
04A9D3 17 1B 00    0524*  @cmd: db 23,27,0
04A9D6 00          0525*  @bmp: db 0
04A9D7             0526*  @end:
04A9D7             0527*  
04A9D7             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04A9D7             0529*  ; inputs: hl=bufferId
04A9D7             0530*  vdu_buff_select:
04A9D7 22 E9 A9 04 0531*  	ld (@bufferId),hl
04A9DB 21 E6 A9 04 0532*  	ld hl,@cmd
04A9DF 01 05 00 00 0533*  	ld bc,@end-@cmd
04A9E3 5B DF       0534*  	rst.lil $18
04A9E5 C9          0535*  	ret
04A9E6 17 1B 20    0536*  @cmd: db 23,27,0x20
04A9E9 00 00       0537*  @bufferId: dw 0x0000
04A9EB 00          0538*  @end: db 0x00 ; padding
04A9EC             0539*  
04A9EC             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04A9EC             0541*  ; inputs: a=format; bc=width; de=height
04A9EC             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04A9EC             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04A9EC             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04A9EC             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04A9EC             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04A9EC             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04A9EC             0548*  vdu_bmp_create:
04A9EC ED 43 08 AA 0549*      ld (@width),bc
       04          
04A9F1 ED 53 0A AA 0550*      ld (@height),de
       04          
04A9F6 32 0C AA 04 0551*      ld (@fmt),a
04A9FA 21 05 AA 04 0552*  	ld hl,@cmd
04A9FE 01 08 00 00 0553*  	ld bc,@end-@cmd
04AA02 5B DF       0554*  	rst.lil $18
04AA04 C9          0555*  	ret
04AA05 17 1B 21    0556*  @cmd:       db 23,27,0x21
04AA08 00 00       0557*  @width:     dw 0x0000
04AA0A 00 00       0558*  @height:    dw 0x0000
04AA0C 00          0559*  @fmt:       db 0x00
04AA0D             0560*  @end:
04AA0D             0561*  
04AA0D             0562*  ; Draw a bitmap on the screen
04AA0D             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04AA0D             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04AA0D             0565*  vdu_bmp_draw:
04AA0D ED 43 25 AA 0566*      ld (@x0),bc
       04          
04AA12 ED 53 27 AA 0567*      ld (@y0),de
       04          
04AA17 21 22 AA 04 0568*  	ld hl,@cmd
04AA1B 01 07 00 00 0569*  	ld bc,@end-@cmd
04AA1F 5B DF       0570*  	rst.lil $18
04AA21 C9          0571*  	ret
04AA22 17 1B 03    0572*  @cmd: db 23,27,3
04AA25 00 00       0573*  @x0:  dw 0x0000
04AA27 00 00       0574*  @y0:  dw 0x0000
04AA29 00          0575*  @end: db 0x00 ; padding
04AA2A             0576*  
04AA2A             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04AA2A             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04AA2A             0579*  ; note: default setting on boot is scaling ON
04AA2A             0580*  vdu_set_scaling:
04AA2A 32 3C AA 04 0581*  	ld (@arg),a
04AA2E 21 39 AA 04 0582*  	ld hl,@cmd
04AA32 01 04 00 00 0583*  	ld bc,@end-@cmd
04AA36 5B DF       0584*  	rst.lil $18
04AA38 C9          0585*  	ret
04AA39 17 00 C0    0586*  @cmd: db 23,0,0xC0
04AA3C 00          0587*  @arg: db 0  ; scaling on/off
04AA3D             0588*  @end:
04AA3D             0589*  
04AA3D             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04AA3D             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04AA3D             0592*  ; 	(all modes).
04AA3D             0593*  
04AA3D             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04AA3D             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04AA3D             0596*  ; 	mode is not double-buffered then this command will wait for the next
04AA3D             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04AA3D             0598*  ; 	screen with the vertical refresh rate of the monitor.
04AA3D             0599*  
04AA3D             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04AA3D             0601*  ; 	as it will prevent tearing of the screen.
04AA3D             0602*  ; inputs: none
04AA3D             0603*  ; outputs: none
04AA3D             0604*  ; destroys: hl, bc
04AA3D             0605*  vdu_flip:
04AA3D 21 48 AA 04 0606*  	ld hl,@cmd
04AA41 01 03 00 00 0607*  	ld bc,@end-@cmd
04AA45 5B DF       0608*  	rst.lil $18
04AA47 C9          0609*  	ret
04AA48 17 00 C3    0610*  @cmd: db 23,0,0xC3
04AA4B             0611*  @end:
04AA4B             0612*  
04AA4B             0613*  ; Command 64: Compress a buffer
04AA4B             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04AA4B             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA4B             0616*  
04AA4B             0617*  
04AA4B             0618*  ; Command 65: Decompress a buffer
04AA4B             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AA4B             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA4B             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04AA4B             0622*  vdu_decompress_buffer:
04AA4B 22 67 AA 04 0623*  	ld (@targetBufferId),hl
04AA4F 22 6A AA 04 0624*  	ld (@sourceBufferId),hl
04AA53 3E 41       0625*  	ld a,65
04AA55 32 69 AA 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AA59 21 64 AA 04 0627*  	ld hl,@cmd
04AA5D 01 08 00 00 0628*  	ld bc,@end-@cmd
04AA61 5B DF       0629*  	rst.lil $18
04AA63 C9          0630*  	ret
04AA64 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04AA67 00 00       0632*  @targetBufferId: dw 0x0000
04AA69 41          0633*  @cmd1:	db 65
04AA6A 00 00       0634*  @sourceBufferId: dw 0x0000
04AA6C 00          0635*  @end: 	db 0x00 ; padding
04AA6D             0636*  
04AA6D             0637*  ; Command 65: Decompress a buffer
04AA6D             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AA6D             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA6D             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04AA6D             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04AA6D             0642*  vdu_decompress_buffer_different:
04AA6D 22 8D AA 04 0643*  	ld (@targetBufferId),hl
04AA71 21 FF 7F 00 0644*      ld hl,0x7FFF
04AA75 22 90 AA 04 0645*  	ld (@sourceBufferId),hl
04AA79 3E 41       0646*  	ld a,65
04AA7B 32 8F AA 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AA7F 21 8A AA 04 0648*  	ld hl,@cmd
04AA83 01 08 00 00 0649*  	ld bc,@end-@cmd
04AA87 5B DF       0650*  	rst.lil $18
04AA89 C9          0651*  	ret
04AA8A 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04AA8D 00 00       0653*  @targetBufferId: dw 0x0000
04AA8F 41          0654*  @cmd1:	db 65
04AA90 00 00       0655*  @sourceBufferId: dw 0x0000
04AA92 00          0656*  @end: 	db 0x00 ; padding
04AA93             0657*  
04AA93             0658*  ; #### from vdp.asm ####
04AA93             0659*  
04AA93             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04AA93             0661*  ; VDU 23, 7: Scrolling
04AA93             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04AA93             0663*  ; inputs: a, extent; l, direction; h; speed
04AA93             0664*  vdu_scroll_down:
04AA93 32 A8 AA 04 0665*  	ld (@extent),a
04AA97 22 A9 AA 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04AA9B 21 A6 AA 04 0667*  	ld hl,@cmd
04AA9F 01 05 00 00 0668*  	ld bc,@end-@cmd
04AAA3 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04AAA5 C9          0670*  	ret
04AAA6 17 07       0671*  @cmd:       db 23,7
04AAA8 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04AAA9 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04AAAA 00          0674*  @speed:     db 0x00 ; pixels
04AAAB 00          0675*  @end:		db 0x00 ; padding
04AAAC             0676*  
04AAAC             0677*  cursor_on:
04AAAC 21 B7 AA 04 0678*  	ld hl,@cmd
04AAB0 01 03 00 00 0679*  	ld bc,@end-@cmd
04AAB4 5B DF       0680*  	rst.lil $18
04AAB6 C9          0681*  	ret
04AAB7             0682*  @cmd:
04AAB7 17 01 01    0683*  	db 23,1,1
04AABA             0684*  @end:
04AABA             0685*  
04AABA             0686*  cursor_off:
04AABA 21 C5 AA 04 0687*  	ld hl,@cmd
04AABE 01 03 00 00 0688*  	ld bc,@end-@cmd
04AAC2 5B DF       0689*  	rst.lil $18
04AAC4 C9          0690*  	ret
04AAC5             0691*  @cmd:
04AAC5 17 01 00    0692*  	db 23,1,0
04AAC8             0693*  @end:
04AAC8             0694*  
04AAC8 DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04AACA             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04AACA 3E 08       0001*M 			LD	A, function
04AACC 5B CF       0002*M 			RST.LIL	08h
04AACE DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04AAD1 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04AAD4 28 FB       0699*  			JR	Z, @wait
04AAD6 DD E1       0700*  			POP	IX
04AAD8 C9          0701*  			RET
04AAD9             0702*  
04AAD9             0703*  ; #### from vdu_bmp.asm ####
04AAD9             0704*  ; =========================================================================
04AAD9             0705*  ; Bitmaps
04AAD9             0706*  ; -------------------------------------------------------------------------
04AAD9             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04AAD9             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04AAD9             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04AAD9             0710*  
04AAD9             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04AAD9             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04AAD9             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04AAD9             0714*  ; typically "move" style plot commands are used to define the rectangle.
04AAD9             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04AAD9             0716*  ; inputs: hl; target bufferId
04AAD9             0717*  ; all the following are in 16.8 fixed point format
04AAD9             0718*  ;   ub.c; top-left x coordinate
04AAD9             0719*  ;   ud.e; top-left y coordinate
04AAD9             0720*  ;   ui.x; width
04AAD9             0721*  ;   ui.y; height
04AAD9             0722*  vdu_buff_screen_capture168:
04AAD9 ED 53 10 AB 0723*          ld (@y0-1),de
       04          
04AADE ED 43 0E AB 0724*          ld (@x0-1),bc
       04          
04AAE3 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04AAE5 32 0E AB 04 0726*          ld (@x0-1),a
04AAE9             0727*  
04AAE9 DD 22 15 AB 0728*          ld (@x1),ix
       04          
04AAEE FD 22 17 AB 0729*          ld (@y1),iy
       04          
04AAF3 3E 17       0730*          ld a,23
04AAF5 32 19 AB 04 0731*          ld (@y1+2),a
04AAF9             0732*  
04AAF9 22 1C AB 04 0733*          ld (@bufId),hl
04AAFD AF          0734*          xor a
04AAFE 32 1E AB 04 0735*          ld (@bufId+2),a
04AB02             0736*  
04AB02 21 0D AB 04 0737*          ld hl,@begin
04AB06 01 13 00 00 0738*          ld bc,@end-@begin
04AB0A 5B DF       0739*          rst.lil $18
04AB0C C9          0740*          ret
04AB0D             0741*  @begin:
04AB0D             0742*  ; absolute move gfx cursor to top-left screen coordinate
04AB0D             0743*  ; VDU 25, mode, x; y;: PLOT command
04AB0D 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04AB0F 40 00       0745*  @x0: 	dw 64
04AB11 40 00       0746*  @y0: 	dw 64
04AB13             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04AB13             0748*  ; VDU 25, mode, x; y;: PLOT command
04AB13 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04AB15 0F 00       0750*  @x1: 	dw 15
04AB17 0F 00       0751*  @y1: 	dw 15
04AB19             0752*  ; now the main event
04AB19             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04AB19 17 1B 21    0754*          db 23,27,0x21
04AB1C 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04AB20             0756*  @end: ; no padding required
04AB20             0757*  
04AB20             0758*  vdu_buff_screen_capture_full:
04AB20 21 2B AB 04 0759*          ld hl,@begin
04AB24 01 13 00 00 0760*          ld bc,@end-@begin
04AB28 5B DF       0761*          rst.lil $18
04AB2A C9          0762*          ret
04AB2B             0763*  @begin:
04AB2B             0764*  ; absolute move gfx cursor to top-left screen coordinate
04AB2B             0765*  ; VDU 25, mode, x; y;: PLOT command
04AB2B 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04AB2D 00 00       0767*  @x0: 	dw 0
04AB2F 00 00       0768*  @y0: 	dw 0
04AB31             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04AB31             0770*  ; VDU 25, mode, x; y;: PLOT command
04AB31 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04AB33 3F 01       0772*  @x1: 	dw 319
04AB35 EF 00       0773*  @y1: 	dw 239
04AB37             0774*  ; now the main event
04AB37             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04AB37 17 1B 21    0776*          db 23,27,0x21
04AB3A 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04AB3E             0778*  @end: ; no padding required
04AB3E             0779*  
04AB3E             0780*  vdu_buff_screen_paste_full:
04AB3E 21 49 AB 04 0781*          ld hl,@begin
04AB42 01 0B 00 00 0782*          ld bc,@end-@begin
04AB46 5B DF       0783*          rst.lil $18
04AB48 C9          0784*          ret
04AB49             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AB49 17 1B 20    0786*  @begin:    db 23,27,0x20
04AB4C 00 20       0787*  @bufferId: dw 0x2000
04AB4E             0788*  ; VDU 25, mode, x; y;: PLOT command
04AB4E 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04AB50 00 00 00 00 0790*             dw 0x0000,0x0000
04AB54             0791*  @end: ; no padding required
04AB54             0792*  
04AB54             0793*  vdu_buff_screen_capture_tiles:
04AB54 21 5F AB 04 0794*          ld hl,@begin
04AB58 01 13 00 00 0795*          ld bc,@end-@begin
04AB5C 5B DF       0796*          rst.lil $18
04AB5E C9          0797*          ret
04AB5F             0798*  @begin:
04AB5F             0799*  ; absolute move gfx cursor to top-left screen coordinate
04AB5F             0800*  ; VDU 25, mode, x; y;: PLOT command
04AB5F 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04AB61 00 00       0802*  @x0: 	dw 0
04AB63 00 00       0803*  @y0: 	dw 0
04AB65             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04AB65             0805*  ; VDU 25, mode, x; y;: PLOT command
04AB65 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04AB67 FF 00       0807*  @x1: 	dw 319-64
04AB69 EF 00       0808*  @y1: 	dw 239
04AB6B             0809*  ; now the main event
04AB6B             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04AB6B 17 1B 21    0811*          db 23,27,0x21
04AB6E 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04AB72             0813*  @end: ; no padding required
04AB72             0814*  
04AB72             0815*  vdu_buff_screen_paste_tiles:
04AB72 21 7D AB 04 0816*          ld hl,@begin
04AB76 01 0B 00 00 0817*          ld bc,@end-@begin
04AB7A 5B DF       0818*          rst.lil $18
04AB7C C9          0819*          ret
04AB7D             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AB7D 17 1B 20    0821*  @begin:    db 23,27,0x20
04AB80 00 20       0822*  @bufferId: dw 0x2000
04AB82             0823*  ; VDU 25, mode, x; y;: PLOT command
04AB82 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04AB84 00 00 01 00 0825*             dw 0x0000,0x0001
04AB88             0826*  @end: ; no padding required
04AB88             0827*  
04AB88             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04AB88             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04AB88             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04AB88             0831*  ; Value	Meaning
04AB88             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04AB88             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04AB88             0834*  ; 2	Mono/Mask (1-bit per pixel)
04AB88             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04AB88             0836*  ;     They have some significant limitations, and are not intended for general use.
04AB88             0837*  
04AB88             0838*  ; =========================================================================
04AB88             0839*  ; Sprites
04AB88             0840*  ; -------------------------------------------------------------------------
04AB88             0841*  ; VDU 23, 27, 4, n: Select sprite n
04AB88             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04AB88             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AB88             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AB88             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04AB88             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04AB88             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04AB88             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AB88             0849*  ; VDU 23, 27, 11: Show current sprite
04AB88             0850*  ; VDU 23, 27, 12: Hide current sprite
04AB88             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AB88             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AB88             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AB88             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AB88             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AB88             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AB88             0857*  
04AB88             0858*  ; =========================================================================
04AB88             0859*  ; Mouse cursor
04AB88             0860*  ; -------------------------------------------------------------------------
04AB88             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04AB88             0862*  
04AB88             0863*  ; #### from vdu_plot.asm ####
04AB88             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04AB88             0865*  ; PLOT code 	(Decimal) 	Effect
04AB88             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04AB88             0867*  plot_sl_both: equ 0x00
04AB88             0868*  
04AB88             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04AB88             0870*  plot_sl_first: equ 0x08
04AB88             0871*  
04AB88             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04AB88             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04AB88             0874*  
04AB88             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04AB88             0876*  plot_sl_last: equ 0x20
04AB88             0877*  
04AB88             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04AB88             0879*  plot_sl_none: equ 0x28
04AB88             0880*  
04AB88             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04AB88             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04AB88             0883*  
04AB88             0884*  ; &40-&47 	64-71 	Point plot
04AB88             0885*  plot_pt: equ 0x40
04AB88             0886*  
04AB88             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04AB88             0888*  plot_lf_lr_non_bg: equ 0x48
04AB88             0889*  
04AB88             0890*  ; &50-&57 	80-87 	Triangle fill
04AB88             0891*  plot_tf: equ 0x50
04AB88             0892*  
04AB88             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04AB88             0894*  plot_lf_r_bg: equ 0x58
04AB88             0895*  
04AB88             0896*  ; &60-&67 	96-103 	Rectangle fill
04AB88             0897*  plot_rf: equ 0x60
04AB88             0898*  
04AB88             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04AB88             0900*  plot_lf_lr_fg: equ 0x60
04AB88             0901*  
04AB88             0902*  ; &70-&77 	112-119 	Parallelogram fill
04AB88             0903*  plot_pf: equ 0x70
04AB88             0904*  
04AB88             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04AB88             0906*  plot_lf_r_non_fg: equ 0x78
04AB88             0907*  
04AB88             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04AB88             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04AB88             0910*  
04AB88             0911*  ; &90-&97 	144-151 	Circle outline
04AB88             0912*  plot_co: equ 0x90
04AB88             0913*  
04AB88             0914*  ; &98-&9F 	152-159 	Circle fill
04AB88             0915*  plot_cf: equ 0x98
04AB88             0916*  
04AB88             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04AB88             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04AB88             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04AB88             0920*  
04AB88             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04AB88             0922*  plot_rcm: equ 0xB8
04AB88             0923*  
04AB88             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04AB88             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04AB88             0926*  ; &D0-&D7 	208-215 	Not defined
04AB88             0927*  ; &D8-&DF 	216-223 	Not defined
04AB88             0928*  ; &E0-&E7 	224-231 	Not defined
04AB88             0929*  
04AB88             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04AB88             0931*  plot_bmp: equ 0xE8
04AB88             0932*  
04AB88             0933*  ; &F0-&F7 	240-247 	Not defined
04AB88             0934*  ; &F8-&FF 	248-255 	Not defined
04AB88             0935*  
04AB88             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04AB88             0937*  ; Agon Console8 VDP 2.2.0
04AB88             0938*  
04AB88             0939*  ; Within each group of eight plot codes, the effects are as follows:
04AB88             0940*  ; Plot code 	Effect
04AB88             0941*  ; 0 	Move relative
04AB88             0942*  mv_rel: equ 0
04AB88             0943*  
04AB88             0944*  ; 1 	Plot relative in current foreground colour
04AB88             0945*  dr_rel_fg: equ 1
04AB88             0946*  
04AB88             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04AB88             0948*  ; 3 	Plot relative in current background colour
04AB88             0949*  dr_rel_bg: equ 3
04AB88             0950*  
04AB88             0951*  ; 4 	Move absolute
04AB88             0952*  mv_abs: equ 4
04AB88             0953*  
04AB88             0954*  ; 5 	Plot absolute in current foreground colour
04AB88             0955*  dr_abs_fg: equ 5
04AB88             0956*  
04AB88             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04AB88             0958*  ; 7 	Plot absolute in current background colour
04AB88             0959*  dr_abs_bg: equ 7
04AB88             0960*  
04AB88             0961*  ; Codes 0-3 use the position data provided as part of the command
04AB88             0962*  ; as a relative position, adding the position given to the current
04AB88             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04AB88             0964*  ; as part of the command as an absolute position, setting the current
04AB88             0965*  ; graphical cursor position to the position given.
04AB88             0966*  
04AB88             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04AB88             0968*  ; current pixel colour. These operations cannot currently be supported
04AB88             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04AB88             0970*  ; supported. Support for these codes may be added in a future version
04AB88             0971*  ; of the VDP firmware.
04AB88             0972*  
04AB88             0973*  ; 16 colour palette constants
04AB88             0974*  c_black: equ 0
04AB88             0975*  c_red_dk: equ 1
04AB88             0976*  c_green_dk: equ 2
04AB88             0977*  c_yellow_dk: equ 3
04AB88             0978*  c_blue_dk: equ 4
04AB88             0979*  c_magenta_dk: equ 5
04AB88             0980*  c_cyan_dk: equ 6
04AB88             0981*  c_grey: equ 7
04AB88             0982*  c_grey_dk: equ 8
04AB88             0983*  c_red: equ 9
04AB88             0984*  c_green: equ 10
04AB88             0985*  c_yellow: equ 11
04AB88             0986*  c_blue: equ 12
04AB88             0987*  c_magenta: equ 13
04AB88             0988*  c_cyan: equ 14
04AB88             0989*  c_white: equ 15
04AB88             0990*  
04AB88             0991*  ; VDU 25, mode, x; y;: PLOT command
04AB88             0992*  ; inputs: a=mode, bc=x0, de=y0
04AB88             0993*  vdu_plot:
04AB88 32 A2 AB 04 0994*      ld (@mode),a
04AB8C ED 43 A3 AB 0995*      ld (@x0),bc
       04          
04AB91 ED 53 A5 AB 0996*      ld (@y0),de
       04          
04AB96 21 A1 AB 04 0997*  	ld hl,@cmd
04AB9A 01 06 00 00 0998*  	ld bc,@end-@cmd
04AB9E 5B DF       0999*  	rst.lil $18
04ABA0 C9          1000*  	ret
04ABA1 19          1001*  @cmd:   db 25
04ABA2 00          1002*  @mode:  db 0
04ABA3 00 00       1003*  @x0: 	dw 0
04ABA5 00 00       1004*  @y0: 	dw 0
04ABA7 00          1005*  @end:   db 0 ; extra byte to soak up deu
04ABA8             1006*  
04ABA8             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABA8             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABA8             1009*  ; VDU 25, mode, x; y;: PLOT command
04ABA8             1010*  ; inputs: bc=x0, de=y0
04ABA8             1011*  ; prerequisites: vdu_buff_select
04ABA8             1012*  vdu_plot_bmp:
04ABA8 ED 43 BF AB 1013*      ld (@x0),bc
       04          
04ABAD ED 53 C1 AB 1014*      ld (@y0),de
       04          
04ABB2 21 BD AB 04 1015*  	ld hl,@cmd
04ABB6 01 06 00 00 1016*  	ld bc,@end-@cmd
04ABBA 5B DF       1017*  	rst.lil $18
04ABBC C9          1018*  	ret
04ABBD 19          1019*  @cmd:   db 25
04ABBE ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04ABBF 00 00       1021*  @x0: 	dw 0x0000
04ABC1 00 00       1022*  @y0: 	dw 0x0000
04ABC3 00          1023*  @end:   db 0x00 ; padding
04ABC4             1024*  
04ABC4             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABC4             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABC4             1027*  ; VDU 25, mode, x; y;: PLOT command
04ABC4             1028*  ; inputs: bc=x0, de=y0
04ABC4             1029*  ; USING 16.8 FIXED POINT COORDINATES
04ABC4             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04ABC4             1031*  ;   the fractional portiion of the inputs are truncated
04ABC4             1032*  ;   leaving only the 16-bit integer portion
04ABC4             1033*  ; prerequisites: vdu_buff_select
04ABC4             1034*  vdu_plot_bmp168:
04ABC4             1035*  ; populate in the reverse of normal to keep the
04ABC4             1036*  ; inputs from stomping on each other
04ABC4 ED 53 E2 AB 1037*      ld (@y0-1),de
       04          
04ABC9 ED 43 E0 AB 1038*      ld (@x0-1),bc
       04          
04ABCE 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04ABD0 32 E0 AB 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04ABD4 21 DF AB 04 1041*  	ld hl,@cmd
04ABD8 01 06 00 00 1042*  	ld bc,@end-@cmd
04ABDC 5B DF       1043*  	rst.lil $18
04ABDE C9          1044*  	ret
04ABDF 19          1045*  @cmd:   db 25
04ABE0 ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04ABE1 00 00       1047*  @x0: 	dw 0x0000
04ABE3 00 00       1048*  @y0: 	dw 0x0000
04ABE5             1049*  @end:  ; no padding required b/c we shifted de right
04ABE5             1050*  
04ABE5             1051*  ; draw a filled rectangle
04ABE5             1052*  vdu_plot_rf:
04ABE5 ED 43 0C AC 1053*      ld (@x0),bc
       04          
04ABEA ED 53 0E AC 1054*      ld (@y0),de
       04          
04ABEF DD 22 12 AC 1055*      ld (@x1),ix
       04          
04ABF4 FD 22 14 AC 1056*      ld (@y1),iy
       04          
04ABF9 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04ABFB 32 10 AC 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04ABFF 21 0A AC 04 1059*  	ld hl,@cmd0
04AC03 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04AC07 5B DF       1061*  	rst.lil $18
04AC09 C9          1062*      ret
04AC0A 19          1063*  @cmd0:  db 25 ; plot
04AC0B 04          1064*  @arg0:  db plot_sl_both+mv_abs
04AC0C 00 00       1065*  @x0:    dw 0x0000
04AC0E 00 00       1066*  @y0:    dw 0x0000
04AC10 19          1067*  @cmd1:  db 25 ; plot
04AC11 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04AC12 00 00       1069*  @x1:    dw 0x0000
04AC14 00 00       1070*  @y1:    dw 0x0000
04AC16 00          1071*  @end:   db 0x00 ; padding
04AC17             1072*  
04AC17             1073*  ; draw a filled circle
04AC17             1074*  vdu_plot_cf:
04AC17 ED 43 3E AC 1075*      ld (@x0),bc
       04          
04AC1C ED 53 40 AC 1076*      ld (@y0),de
       04          
04AC21 DD 22 44 AC 1077*      ld (@x1),ix
       04          
04AC26 FD 22 46 AC 1078*      ld (@y1),iy
       04          
04AC2B 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04AC2D 32 42 AC 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AC31 21 3C AC 04 1081*  	ld hl,@cmd0
04AC35 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04AC39 5B DF       1083*  	rst.lil $18
04AC3B C9          1084*      ret
04AC3C 19          1085*  @cmd0:  db 25 ; plot
04AC3D 04          1086*  @arg0:  db plot_sl_both+mv_abs
04AC3E 00 00       1087*  @x0:    dw 0x0000
04AC40 00 00       1088*  @y0:    dw 0x0000
04AC42 19          1089*  @cmd1:  db 25 ; plot
04AC43 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04AC44 00 00       1091*  @x1:    dw 0x0000
04AC46 00 00       1092*  @y1:    dw 0x0000
04AC48 00          1093*  @end:   db 0x00 ; padding
04AC49             1094*  
04AC49             1095*  ; #### from vdu_sprites.asm ####
04AC49             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04AC49             1097*  ; the VDP can support up to 256 sprites. They must be defined
04AC49             1098*  ; contiguously, and so the first sprite is sprite 0.
04AC49             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04AC49             1100*  ; Once a selection of sprites have been defined, you can activate
04AC49             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04AC49             1102*  ; of sprites to activate. This will activate the first n sprites,
04AC49             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04AC49             1104*  
04AC49             1105*  ; A single sprite can have multiple "frames", referring to
04AC49             1106*  ; different bitmaps.
04AC49             1107*  ; (These bitmaps do not need to be the same size.)
04AC49             1108*  ; This allows a sprite to include an animation sequence,
04AC49             1109*  ; which can be stepped through one frame at a time, or picked
04AC49             1110*  ; in any order.
04AC49             1111*  
04AC49             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04AC49             1113*  ; be noted however that "native" format bitmaps are not
04AC49             1114*  ; recommended for use as sprite frames, as they cannot get
04AC49             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04AC49             1116*  ; format is not really intended for general use.) This is part
04AC49             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04AC49             1118*  ; screen are now stored in RGBA2222 format.
04AC49             1119*  
04AC49             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04AC49             1121*  ; and then later shown again.
04AC49             1122*  
04AC49             1123*  ; Moving sprites around the screen is done by changing the
04AC49             1124*  ; position of the sprite. This can be done either by setting
04AC49             1125*  ; the absolute position of the sprite, or by moving the sprite
04AC49             1126*  ; by a given number of pixels. (Sprites are positioned using
04AC49             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04AC49             1128*  ; In the current sprite system, sprites will not update their
04AC49             1129*  ; position on-screen until either another drawing operation is
04AC49             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04AC49             1131*  
04AC49             1132*  ; Here are the sprite commands:
04AC49             1133*  ;
04AC49             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04AC49             1135*  ; inputs: a is the 8-bit sprite id
04AC49             1136*  ; vdu_sprite_select:
04AC49             1137*  
04AC49             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04AC49             1139*  ; inputs: none
04AC49             1140*  ; prerequisites: vdu_sprite_select
04AC49             1141*  ; vdu_sprite_clear_frames:
04AC49             1142*  
04AC49             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AC49             1144*  ; inputs: a is the 8-bit bitmap number
04AC49             1145*  ; prerequisites: vdu_sprite_select
04AC49             1146*  ; vdu_sprite_add_bmp:
04AC49             1147*  
04AC49             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04AC49             1149*  ; inputs: a is the number of sprites to activate
04AC49             1150*  ; vdu_sprite_activate:
04AC49             1151*  
04AC49             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04AC49             1153*  ; inputs: none
04AC49             1154*  ; prerequisites: vdu_sprite_select
04AC49             1155*  ; vdu_sprite_next_frame:
04AC49             1156*  
04AC49             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04AC49             1158*  ; inputs: none
04AC49             1159*  ; prerequisites: vdu_sprite_select
04AC49             1160*  ; vdu_sprite_prev_frame:
04AC49             1161*  
04AC49             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AC49             1163*  ; inputs: a is frame number to select
04AC49             1164*  ; prerequisites: vdu_sprite_select
04AC49             1165*  ; vdu_sprite_select_frame:
04AC49             1166*  
04AC49             1167*  ; VDU 23, 27, 11: Show current sprite
04AC49             1168*  ; inputs: none
04AC49             1169*  ; prerequisites: vdu_sprite_select
04AC49             1170*  ; vdu_sprite_show:
04AC49             1171*  
04AC49             1172*  ; VDU 23, 27, 12: Hide current sprite
04AC49             1173*  ; inputs: none
04AC49             1174*  ; prerequisites: vdu_sprite_select
04AC49             1175*  ; vdu_sprite_hide:
04AC49             1176*  
04AC49             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AC49             1178*  ; inputs: bc is x coordinate, de is y coordinate
04AC49             1179*  ; prerequisites: vdu_sprite_select
04AC49             1180*  ; vdu_sprite_move_abs:
04AC49             1181*  ;
04AC49             1182*  ; USING 16.8 FIXED POINT COORDINATES
04AC49             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AC49             1184*  ;   the fractional portiion of the inputs are truncated
04AC49             1185*  ;   leaving only the 16-bit integer portion
04AC49             1186*  ; prerequisites: vdu_sprite_select
04AC49             1187*  ; vdu_sprite_move_abs168:
04AC49             1188*  
04AC49             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AC49             1190*  ; inputs: bc is x coordinate, de is y coordinate
04AC49             1191*  ; prerequisites: vdu_sprite_select
04AC49             1192*  ; vdu_sprite_move_rel:
04AC49             1193*  ;
04AC49             1194*  ; USING 16.8 FIXED POINT COORDINATES
04AC49             1195*  ; inputs: ub.c is dx, ud.e is dy
04AC49             1196*  ;   the fractional portiion of the inputs are truncated
04AC49             1197*  ;   leaving only the 16-bit integer portion
04AC49             1198*  ; prerequisites: vdu_sprite_select
04AC49             1199*  ; vdu_sprite_move_rel168:
04AC49             1200*  
04AC49             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AC49             1202*  ; inputs: none
04AC49             1203*  ; vdu_sprite_update:
04AC49             1204*  
04AC49             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AC49             1206*  ; inputs: none
04AC49             1207*  ; vdu_sprite_bmp_reset:
04AC49             1208*  
04AC49             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AC49             1210*  ; inputs: none
04AC49             1211*  ; vdu_sprite_reset:
04AC49             1212*  
04AC49             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AC49             1214*  ; inputs: a is the GCOL paint mode
04AC49             1215*  ; prerequisites: vdu_sprite_select
04AC49             1216*  ; vdu_sprite_set_gcol:
04AC49             1217*  
04AC49             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AC49             1219*  ; inputs: hl=bufferId
04AC49             1220*  ; prerequisites: vdu_sprite_select
04AC49             1221*  ; vdu_sprite_add_buff:
04AC49             1222*  
04AC49             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04AC49             1224*  
04AC49             1225*  ; VDU 23, 27, 4, n: Select sprite n
04AC49             1226*  ; inputs: a is the 8-bit sprite id
04AC49             1227*  vdu_sprite_select:
04AC49 32 5B AC 04 1228*      ld (@sprite),a
04AC4D 21 58 AC 04 1229*      ld hl,@cmd
04AC51 01 04 00 00 1230*      ld bc,@end-@cmd
04AC55 5B DF       1231*      rst.lil $18
04AC57 C9          1232*      ret
04AC58 17 1B 04    1233*  @cmd:    db 23,27,4
04AC5B 00          1234*  @sprite: db 0x00
04AC5C             1235*  @end:
04AC5C             1236*  
04AC5C             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04AC5C             1238*  ; inputs: none
04AC5C             1239*  ; prerequisites: vdu_sprite_select
04AC5C             1240*  vdu_sprite_clear_frames:
04AC5C 21 67 AC 04 1241*      ld hl,@cmd
04AC60 01 03 00 00 1242*      ld bc,@end-@cmd
04AC64 5B DF       1243*      rst.lil $18
04AC66 C9          1244*      ret
04AC67 17 1B 05    1245*  @cmd: db 23,27,5
04AC6A             1246*  @end:
04AC6A             1247*  
04AC6A             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AC6A             1249*  ; inputs: a is the 8-bit bitmap number
04AC6A             1250*  ; prerequisites: vdu_sprite_select
04AC6A             1251*  vdu_sprite_add_bmp:
04AC6A 32 7C AC 04 1252*      ld (@bmp),a
04AC6E 21 79 AC 04 1253*      ld hl,@cmd
04AC72 01 04 00 00 1254*      ld bc,@end-@cmd
04AC76 5B DF       1255*      rst.lil $18
04AC78 C9          1256*      ret
04AC79 17 1B 06    1257*  @cmd: db 23,27,6
04AC7C 00          1258*  @bmp: db 0x00
04AC7D             1259*  @end:
04AC7D             1260*  
04AC7D             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04AC7D             1262*  ; inputs: a is the number of sprites to activate
04AC7D             1263*  vdu_sprite_activate:
04AC7D 32 8F AC 04 1264*      ld (@num),a
04AC81 21 8C AC 04 1265*      ld hl,@cmd
04AC85 01 04 00 00 1266*      ld bc,@end-@cmd
04AC89 5B DF       1267*      rst.lil $18
04AC8B C9          1268*      ret
04AC8C 17 1B 07    1269*  @cmd: db 23,27,7
04AC8F 00          1270*  @num: db 0x00
04AC90             1271*  @end:
04AC90             1272*  
04AC90             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04AC90             1274*  ; inputs: none
04AC90             1275*  ; prerequisites: vdu_sprite_select
04AC90             1276*  vdu_sprite_next_frame:
04AC90 21 9B AC 04 1277*      ld hl,@cmd
04AC94 01 03 00 00 1278*      ld bc,@end-@cmd
04AC98 5B DF       1279*      rst.lil $18
04AC9A C9          1280*      ret
04AC9B 17 1B 08    1281*  @cmd: db 23,27,8
04AC9E             1282*  @end:
04AC9E             1283*  
04AC9E             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04AC9E             1285*  ; inputs: none
04AC9E             1286*  ; prerequisites: vdu_sprite_select
04AC9E             1287*  vdu_sprite_prev_frame:
04AC9E 21 A9 AC 04 1288*      ld hl,@cmd
04ACA2 01 03 00 00 1289*      ld bc,@end-@cmd
04ACA6 5B DF       1290*      rst.lil $18
04ACA8 C9          1291*      ret
04ACA9 17 1B 09    1292*  @cmd: db 23,27,9
04ACAC             1293*  @end:
04ACAC             1294*  
04ACAC             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04ACAC             1296*  ; inputs: a is frame number to select
04ACAC             1297*  ; prerequisites: vdu_sprite_select
04ACAC             1298*  vdu_sprite_select_frame:
04ACAC 32 BE AC 04 1299*      ld (@frame),a
04ACB0 21 BB AC 04 1300*      ld hl,@cmd
04ACB4 01 04 00 00 1301*      ld bc,@end-@cmd
04ACB8 5B DF       1302*      rst.lil $18
04ACBA C9          1303*      ret
04ACBB 17 1B 0A    1304*  @cmd:    db 23,27,10
04ACBE 00          1305*  @frame:  db 0x00
04ACBF             1306*  @end:
04ACBF             1307*  
04ACBF             1308*  ; VDU 23, 27, 11: Show current sprite
04ACBF             1309*  ; inputs: none
04ACBF             1310*  ; prerequisites: vdu_sprite_select
04ACBF             1311*  vdu_sprite_show:
04ACBF 21 CA AC 04 1312*      ld hl,@cmd
04ACC3 01 03 00 00 1313*      ld bc,@end-@cmd
04ACC7 5B DF       1314*      rst.lil $18
04ACC9 C9          1315*      ret
04ACCA 17 1B 0B    1316*  @cmd: db 23,27,11
04ACCD             1317*  @end:
04ACCD             1318*  
04ACCD             1319*  ; VDU 23, 27, 12: Hide current sprite
04ACCD             1320*  ; inputs: none
04ACCD             1321*  ; prerequisites: vdu_sprite_select
04ACCD             1322*  vdu_sprite_hide:
04ACCD 21 D8 AC 04 1323*      ld hl,@cmd
04ACD1 01 03 00 00 1324*      ld bc,@end-@cmd
04ACD5 5B DF       1325*      rst.lil $18
04ACD7 C9          1326*      ret
04ACD8 17 1B 0C    1327*  @cmd: db 23,27,12
04ACDB             1328*  @end:
04ACDB             1329*  
04ACDB             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04ACDB             1331*  ; inputs: bc is x coordinate, de is y coordinate
04ACDB             1332*  ; prerequisites: vdu_sprite_select
04ACDB             1333*  vdu_sprite_move_abs:
04ACDB ED 43 F3 AC 1334*      ld (@xpos),bc
       04          
04ACE0 ED 53 F5 AC 1335*      ld (@ypos),de
       04          
04ACE5 21 F0 AC 04 1336*      ld hl,@cmd
04ACE9 01 07 00 00 1337*      ld bc,@end-@cmd
04ACED 5B DF       1338*      rst.lil $18
04ACEF C9          1339*      ret
04ACF0 17 1B 0D    1340*  @cmd:  db 23,27,13
04ACF3 00 00       1341*  @xpos: dw 0x0000
04ACF5 00 00       1342*  @ypos: dw 0x0000
04ACF7 00          1343*  @end:  db 0x00 ; padding
04ACF8             1344*  
04ACF8             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04ACF8             1346*  ; inputs: bc is x coordinate, de is y coordinate
04ACF8             1347*  ; prerequisites: vdu_sprite_select
04ACF8             1348*  vdu_sprite_move_rel:
04ACF8 ED 43 10 AD 1349*      ld (@dx),bc
       04          
04ACFD ED 53 12 AD 1350*      ld (@dy),de
       04          
04AD02 21 0D AD 04 1351*      ld hl,@cmd
04AD06 01 07 00 00 1352*      ld bc,@end-@cmd
04AD0A 5B DF       1353*      rst.lil $18
04AD0C C9          1354*      ret
04AD0D 17 1B 0E    1355*  @cmd: db 23,27,14
04AD10 00 00       1356*  @dx:  dw 0x0000
04AD12 00 00       1357*  @dy:  dw 0x0000
04AD14 00          1358*  @end: db 0x00 ; padding
04AD15             1359*  
04AD15             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AD15             1361*  ; USING 16.8 FIXED POINT COORDINATES
04AD15             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AD15             1363*  ;   the fractional portiion of the inputs are truncated
04AD15             1364*  ;   leaving only the 16-bit integer portion
04AD15             1365*  ; prerequisites: vdu_sprite_select
04AD15             1366*  vdu_sprite_move_abs168:
04AD15             1367*  ; populate in the reverse of normal to keep the
04AD15             1368*  ; inputs from stomping on each other
04AD15 ED 53 34 AD 1369*      ld (@ypos-1),de
       04          
04AD1A ED 43 32 AD 1370*      ld (@xpos-1),bc
       04          
04AD1F 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04AD21 32 32 AD 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD25 21 30 AD 04 1373*      ld hl,@cmd
04AD29 01 07 00 00 1374*      ld bc,@end-@cmd
04AD2D 5B DF       1375*      rst.lil $18
04AD2F C9          1376*      ret
04AD30 17 1B 0D    1377*  @cmd:  db 23,27,13
04AD33 00 00       1378*  @xpos: dw 0x0000
04AD35 00 00       1379*  @ypos: dw 0x0000
04AD37             1380*  @end:  ; no padding required b/c we shifted de right
04AD37             1381*  
04AD37             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AD37             1383*  ; USING 16.8 FIXED POINT COORDINATES
04AD37             1384*  ; inputs: ub.c is dx, ud.e is dy
04AD37             1385*  ;   the fractional portiion of the inputs are truncated
04AD37             1386*  ;   leaving only the 16-bit integer portion
04AD37             1387*  ; prerequisites: vdu_sprite_select
04AD37             1388*  vdu_sprite_move_rel168:
04AD37             1389*  ; populate in the reverse of normal to keep the
04AD37             1390*  ; inputs from stomping on each other
04AD37 ED 53 56 AD 1391*      ld (@dy-1),de
       04          
04AD3C ED 43 54 AD 1392*      ld (@dx-1),bc
       04          
04AD41 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04AD43 32 54 AD 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD47 21 52 AD 04 1395*      ld hl,@cmd
04AD4B 01 07 00 00 1396*      ld bc,@end-@cmd
04AD4F 5B DF       1397*      rst.lil $18
04AD51 C9          1398*      ret
04AD52 17 1B 0E    1399*  @cmd:  db 23,27,14
04AD55 00 00       1400*  @dx: dw 0x0000
04AD57 00 00       1401*  @dy: dw 0x0000
04AD59             1402*  @end:  ; no padding required b/c we shifted de right
04AD59             1403*  
04AD59             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AD59             1405*  ; inputs: none
04AD59             1406*  vdu_sprite_update:
04AD59 21 64 AD 04 1407*      ld hl,@cmd
04AD5D 01 03 00 00 1408*      ld bc,@end-@cmd
04AD61 5B DF       1409*      rst.lil $18
04AD63 C9          1410*      ret
04AD64 17 1B 0F    1411*  @cmd: db 23,27,15
04AD67             1412*  @end:
04AD67             1413*  
04AD67             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AD67             1415*  ; inputs: none
04AD67             1416*  vdu_sprite_bmp_reset:
04AD67 21 72 AD 04 1417*      ld hl,@cmd
04AD6B 01 03 00 00 1418*      ld bc,@end-@cmd
04AD6F 5B DF       1419*      rst.lil $18
04AD71 C9          1420*      ret
04AD72 17 1B 10    1421*  @cmd: db 23,27,16
04AD75             1422*  @end:
04AD75             1423*  
04AD75             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AD75             1425*  ; inputs: none
04AD75             1426*  vdu_sprite_reset:
04AD75 21 80 AD 04 1427*      ld hl,@cmd
04AD79 01 03 00 00 1428*      ld bc,@end-@cmd
04AD7D 5B DF       1429*      rst.lil $18
04AD7F C9          1430*      ret
04AD80 17 1B 11    1431*  @cmd: db 23,27,17
04AD83             1432*  @end:
04AD83             1433*  
04AD83             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AD83             1435*  ; inputs: a is the GCOL paint mode
04AD83             1436*  ; prerequisites: vdu_sprite_select
04AD83             1437*  vdu_sprite_set_gcol:
04AD83 32 95 AD 04 1438*      ld (@mode),a
04AD87 21 92 AD 04 1439*      ld hl,@cmd
04AD8B 01 04 00 00 1440*      ld bc,@end-@cmd
04AD8F 5B DF       1441*      rst.lil $18
04AD91 C9          1442*      ret
04AD92 17 1B 12    1443*  @cmd:  db 23,27,18
04AD95 00          1444*  @mode: db 0x00
04AD96             1445*  @end:
04AD96             1446*  
04AD96             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04AD96             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04AD96             1449*  ; inputs: hl=bufferId
04AD96             1450*  ; prerequisites: vdu_sprite_select
04AD96             1451*  vdu_sprite_add_buff:
04AD96 22 A8 AD 04 1452*      ld (@bufferId),hl
04AD9A 21 A5 AD 04 1453*      ld hl,@cmd
04AD9E 01 05 00 00 1454*      ld bc,@end-@cmd
04ADA2 5B DF       1455*      rst.lil $18
04ADA4 C9          1456*      ret
04ADA5 17 1B 26    1457*  @cmd:      db 23,27,0x26
04ADA8 00 00       1458*  @bufferId: dw 0x0000
04ADAA 00          1459*  @end:      db 0x00 ; padding
04ADAB             1460*  
04ADAB             1461*  
04ADAB             1462*  ; #### from sfx.asm ####
04ADAB 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04ADAC             1464*  
04ADAC             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04ADAC             1466*  ; ; inputs: hl = bufferId
04ADAC             1467*  ; sfx_play:
04ADAC             1468*  ; 	ld iy,sfx_last_channel
04ADAC             1469*  ; 	ld a,(iy+0)
04ADAC             1470*  ; 	ld (@bufferId),hl
04ADAC             1471*  ; @find_next_channel:
04ADAC             1472*  ; 	inc a ; bump to next channel
04ADAC             1473*  ; 	and 31 ; modulo 32 channel
04ADAC             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04ADAC             1475*  ; 	ret z ; so we return to caller without doing anything
04ADAC             1476*  ; 	push af ; back up channel
04ADAC             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04ADAC             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04ADAC             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04ADAC             1480*  ; 	pop af ; restore channel
04ADAC             1481*  ; 	jr @find_next_channel ; try the next channel
04ADAC             1482*  ; @play_sfx:
04ADAC             1483*  ; 	pop af ; restore channel
04ADAC             1484*  ; 	ld (iy+0),a ; store channel
04ADAC             1485*  ; 	ld hl,(@bufferId)
04ADAC             1486*  ; 	ld c,a ; channel
04ADAC             1487*  ; 	ld b,127 ; full volume
04ADAC             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04ADAC             1489*  ; 	jp vdu_play_sample
04ADAC             1490*  ; @bufferId:
04ADAC             1491*  ; 	dw 0x0000 ; 16-bit value
04ADAC             1492*  
04ADAC             1493*  sfx_play_random_hurt:
04ADAC CD D5 B6 04 1494*  	call rand_8
04ADB0 E6 03       1495*  	and 3
04ADB2 FE 00       1496*  	cp 0
04ADB4 CA C0 BD 04 1497*  	jp z,sfx_play_ahh
04ADB8 FE 01       1498*  	cp 1
04ADBA CA CC BD 04 1499*  	jp z,sfx_play_augh
04ADBE FE 02       1500*  	cp 2
04ADC0 CA D8 BD 04 1501*  	jp z,sfx_play_ayee
04ADC4 C3 A4 BE 04 1502*  	jp sfx_play_ugh
04ADC8             1503*  
04ADC8             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04ADC8             1505*  sfx_load_main:
04ADC8 21 00 00 00 1506*      ld hl,0
04ADCC 22 EA B6 04 1507*      ld (cur_file_idx),hl
04ADD0             1508*  sfx_load_main_loop:
04ADD0             1509*  ; back up loop counter
04ADD0 C5          1510*      push bc
04ADD1             1511*  ; load the next sound
04ADD1 CD 25 AE 04 1512*      call load_next_sound
04ADD5             1513*  ; draw all the things
04ADD5 CD 53 B8 04 1514*      call tmp_draw_all_the_things
04ADD9             1515*  ; move bj
04ADD9 CD DB B7 04 1516*  	call move_bj
04ADDD             1517*  ; print welcome message
04ADDD DD 21 72 7C 1518*  	ld ix,font_itc_honda
       04          
04ADE2 21 BD C0 04 1519*  	ld hl,hello_world
04ADE6 01 20 00 00 1520*  	ld bc,32
04ADEA 11 02 00 00 1521*  	ld de,2
04ADEE CD 7A 65 04 1522*  	call font_bmp_print
04ADF2             1523*  ; print current filename
04ADF2 CD 6E A8 04 1524*  	call vdu_cls
04ADF6 2A ED B6 04 1525*  	ld hl,(cur_filename)
04ADFA CD 6D AE 04 1526*  	call printString
04ADFE CD 82 AE 04 1527*  	call printNewLine
04AE02             1528*  
04AE02             1529*  ; print current load stopwatch
04AE02 21 DF C0 04 1530*  	ld hl,loading_time
04AE06 CD 6D AE 04 1531*  	call printString
04AE0A CD 6F C0 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04AE0E CD BB AE 04 1533*  	call printDec
04AE12             1534*  
04AE12             1535*  ; flip screen
04AE12 CD 3D AA 04 1536*      call vdu_flip
04AE16             1537*  ; ; delay for a bit so sound can play
04AE16             1538*  ;     ld a,%10000000 ; 1 second delay
04AE16             1539*  ;     call multiPurposeDelay
04AE16             1540*  ; decrement loop counter
04AE16 C1          1541*      pop bc
04AE17 0B          1542*  	dec bc
04AE18             1543*  ; ; DEBUG: DUMP REGISTERS
04AE18             1544*  ; 	push bc
04AE18             1545*  ; 	call dumpRegistersHex
04AE18             1546*  ; 	call vdu_flip
04AE18             1547*  ; 	pop bc
04AE18             1548*  ; ; END DEBUG
04AE18 79          1549*      ld a,c
04AE19 B7          1550*      or a
04AE1A C2 D0 AD 04 1551*      jp nz,sfx_load_main_loop
04AE1E 78          1552*      ld a,b
04AE1F B7          1553*      or a
04AE20 C2 D0 AD 04 1554*      jp nz,sfx_load_main_loop
04AE24 C9          1555*      ret
04AE25             1556*  
04AE25             1557*  load_next_sound:
04AE25             1558*  ; look up the load routine for the current file index
04AE25 2A EA B6 04 1559*  	ld hl,(cur_file_idx)
04AE29 29          1560*  	add hl,hl ; multiply current index by 2 ...
04AE2A ED 5B EA B6 1561*  	ld de,(cur_file_idx)
       04          
04AE2F 19          1562*  	add hl,de ; ... now by 3
04AE30 ED 5B F6 B6 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04AE35 19          1564*  	add hl,de
04AE36 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04AE38 22 3D AE 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04AE3C             1567*  @jump_addr:
04AE3C CD 00 00 00 1568*  	call 0 ; call the sound load routine
04AE40             1569*  ; look up the buffer id for the current file
04AE40 2A EA B6 04 1570*  	ld hl,(cur_file_idx)
04AE44 29          1571*  	add hl,hl ; multiply current index by 2 ...
04AE45 ED 5B EA B6 1572*  	ld de,(cur_file_idx)
       04          
04AE4A 19          1573*  	add hl,de ; ... now by 3
04AE4B ED 5B F3 B6 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04AE50 19          1575*  	add hl,de
04AE51 ED 27       1576*  	ld hl,(hl)
04AE53 22 F0 B6 04 1577*  	ld (cur_buffer_id),hl
04AE57             1578*  ; bump the current file index
04AE57 2A EA B6 04 1579*  	ld hl,(cur_file_idx)
04AE5B 23          1580*  	inc hl
04AE5C 22 EA B6 04 1581*  	ld (cur_file_idx),hl
04AE60 C9          1582*  	ret
04AE61             1583*  
04AE61             1584*  ; load a sound file to a buffer
04AE61             1585*  ; inputs: hl = bufferId ; ix = file size
04AE61             1586*  vdu_load_sfx:
04AE61             1587*  ; back up input parameters
04AE61 E5          1588*      push hl ; bufferId
04AE62             1589*  ; load the sound
04AE62 CD CD C2 04 1590*  	call vdu_load_buffer_from_file
04AE66             1591*  ; now make the buffer a sound sample
04AE66 E1          1592*      pop hl ; bufferId
04AE67 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04AE68             1594*      ; push hl ; bufferId
04AE68 CD 28 01 04 1595*  	call vdu_buffer_to_sound
04AE6C             1596*  ; ; play the loaded sound
04AE6C             1597*  ;     ld c,0 ; channel
04AE6C             1598*  ;     ld b,127 ; full volume
04AE6C             1599*  ;     ld de,1000 ; 1 second duration
04AE6C             1600*  ;     pop hl ; bufferId
04AE6C             1601*  ;     call vdu_play_sample
04AE6C C9          1602*      ret
04AE6D             0025       include "src/asm/functions.asm"
04AE6D             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04AE6D             0002*  ; Print a zero-terminated string
04AE6D             0003*  ; HL: Pointer to string
04AE6D             0004*  printString:
04AE6D C5          0005*  	PUSH	BC
04AE6E 01 00 00 00 0006*  	LD		BC,0
04AE72 3E 00       0007*  	LD 	 	A,0
04AE74 5B DF       0008*  	RST.LIL 18h
04AE76 C1          0009*  	POP		BC
04AE77 C9          0010*  	RET
04AE78             0011*  ; print a VDU sequence
04AE78             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04AE78             0013*  sendVDUsequence:
04AE78 C5          0014*  	PUSH	BC
04AE79 01 00 00 00 0015*  	LD		BC, 0
04AE7D 4E          0016*  	LD		C, (HL)
04AE7E 5B DF       0017*  	RST.LIL	18h
04AE80 C1          0018*  	POP		BC
04AE81 C9          0019*  	RET
04AE82             0020*  ; Print Newline sequence to VDP
04AE82             0021*  printNewLine:
04AE82 3E 0D       0022*  	LD	A, '\r'
04AE84 5B D7       0023*  	RST.LIL 10h
04AE86 3E 0A       0024*  	LD	A, '\n'
04AE88 5B D7       0025*  	RST.LIL 10h
04AE8A C9          0026*  	RET
04AE8B             0027*  ; Print a 24-bit HEX number
04AE8B             0028*  ; HLU: Number to print
04AE8B             0029*  printHex24:
04AE8B E5          0030*  	PUSH	HL
04AE8C 21 02 00 00 0031*  	LD		HL, 2
04AE90 39          0032*  	ADD		HL, SP
04AE91 7E          0033*  	LD		A, (HL)
04AE92 E1          0034*  	POP		HL
04AE93 CD 9D AE 04 0035*  	CALL	printHex8
04AE97             0036*  ; Print a 16-bit HEX number
04AE97             0037*  ; HL: Number to print
04AE97             0038*  printHex16:
04AE97 7C          0039*  	LD		A,H
04AE98 CD 9D AE 04 0040*  	CALL	printHex8
04AE9C 7D          0041*  	LD		A,L
04AE9D             0042*  ; Print an 8-bit HEX number
04AE9D             0043*  ; A: Number to print
04AE9D             0044*  printHex8:
04AE9D 4F          0045*  	LD		C,A
04AE9E 1F          0046*  	RRA
04AE9F 1F          0047*  	RRA
04AEA0 1F          0048*  	RRA
04AEA1 1F          0049*  	RRA
04AEA2 CD A7 AE 04 0050*  	CALL	@F
04AEA6 79          0051*  	LD		A,C
04AEA7             0052*  @@:
04AEA7 E6 0F       0053*  	AND		0Fh
04AEA9 C6 90       0054*  	ADD		A,90h
04AEAB 27          0055*  	DAA
04AEAC CE 40       0056*  	ADC		A,40h
04AEAE 27          0057*  	DAA
04AEAF 5B D7       0058*  	RST.LIL	10h
04AEB1 C9          0059*  	RET
04AEB2             0060*  
04AEB2             0061*  ; Print a 0x HEX prefix
04AEB2             0062*  DisplayHexPrefix:
04AEB2 3E 30       0063*  	LD	A, '0'
04AEB4 5B D7       0064*  	RST.LIL 10h
04AEB6 3E 78       0065*  	LD	A, 'x'
04AEB8 5B D7       0066*  	RST.LIL 10h
04AEBA C9          0067*  	RET
04AEBB             0068*  
04AEBB             0069*  
04AEBB             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04AEBB             0071*  ; HL : Value to print
04AEBB             0072*  printDec:
04AEBB 11 DF AE 04 0073*  	LD	 DE, _printDecBuffer
04AEBF CD E8 AE 04 0074*  	CALL Num2String
04AEC3             0075*  ; BEGIN MY CODE
04AEC3             0076*  ; replace leading zeroes with spaces
04AEC3 21 DF AE 04 0077*      LD	 HL, _printDecBuffer
04AEC7 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04AEC9             0079*  @loop:
04AEC9 7E          0080*      LD	 A, (HL)
04AECA FE 30       0081*      CP	 '0'
04AECC C2 DA AE 04 0082*      JP	 NZ, @done
04AED0 3E 20       0083*      LD   A, ' '
04AED2 77          0084*      LD	 (HL), A
04AED3 23          0085*      INC	 HL
04AED4 CD 5F A8 04 0086*      CALL vdu_cursor_forward
04AED8 10 EF       0087*      DJNZ @loop
04AEDA             0088*  @done:
04AEDA             0089*  ; END MY CODE
04AEDA             0090*  	; LD	 HL, _printDecBuffer
04AEDA CD 6D AE 04 0091*  	CALL printString
04AEDE C9          0092*  	RET
04AEDF 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04AEE8             0094*  
04AEE8             0095*  ; This routine converts the value from HL into it's ASCII representation,
04AEE8             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04AEE8             0097*  ; so it will allways be 8 characters length
04AEE8             0098*  ; HL : Value to convert to string
04AEE8             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04AEE8             0100*  Num2String:
04AEE8 01 80 69 67 0101*  	LD	 BC,-10000000
04AEEC CD 1F AF 04 0102*  	CALL OneDigit
04AEF0 01 C0 BD F0 0103*  	LD	 BC,-1000000
04AEF4 CD 1F AF 04 0104*  	CALL OneDigit
04AEF8 01 60 79 FE 0105*  	LD	 BC,-100000
04AEFC CD 1F AF 04 0106*  	CALL OneDigit
04AF00 01 F0 D8 FF 0107*  	LD   BC,-10000
04AF04 CD 1F AF 04 0108*  	CALL OneDigit
04AF08 01 18 FC FF 0109*  	LD   BC,-1000
04AF0C CD 1F AF 04 0110*  	CALL OneDigit
04AF10 01 9C FF FF 0111*  	LD   BC,-100
04AF14 CD 1F AF 04 0112*  	CALL OneDigit
04AF18 0E F6       0113*  	LD   C,-10
04AF1A CD 1F AF 04 0114*  	CALL OneDigit
04AF1E 48          0115*  	LD   C,B
04AF1F             0116*  OneDigit:
04AF1F 3E 2F       0117*  	LD   A,'0'-1
04AF21             0118*  DivideMe:
04AF21 3C          0119*  	INC  A
04AF22 09          0120*  	ADD  HL,BC
04AF23 38 FC       0121*  	JR   C,DivideMe
04AF25 ED 42       0122*  	SBC  HL,BC
04AF27 12          0123*  	LD   (DE),A
04AF28 13          0124*  	INC  DE
04AF29 C9          0125*  	RET
04AF2A             0126*  
04AF2A             0127*  
04AF2A             0128*  ; #### new functions added by Brandon R. Gates ####
04AF2A             0129*  
04AF2A             0130*  ; print the binary representation of the 8-bit value in a
04AF2A             0131*  ; destroys a, hl, bc
04AF2A             0132*  printBin8:
04AF2A 06 08       0133*      ld b,8      ; loop counter for 8 bits
04AF2C 21 47 AF 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04AF30             0135*                  ; (which will be the high bit of the value in a)
04AF30             0136*  @loop:
04AF30 07          0137*      rlca ; put the next highest bit into carry
04AF31 38 04       0138*      jr c,@one
04AF33 36 30       0139*      ld (hl),'0'
04AF35 18 02       0140*      jr @next_bit
04AF37             0141*  @one:
04AF37 36 31       0142*      ld (hl),'1'
04AF39             0143*  @next_bit:
04AF39 23          0144*      inc hl
04AF3A 10 F4       0145*      djnz @loop
04AF3C             0146*  ; print it
04AF3C 21 47 AF 04 0147*  	ld hl,@cmd
04AF40 01 08 00 00 0148*  	ld bc,@end-@cmd
04AF44 5B DF       0149*  	rst.lil $18
04AF46 C9          0150*  	ret
04AF47             0151*  @cmd: ds 8 ; eight bytes for eight bits
04AF4F             0152*  @end:
04AF4F             0153*  
04AF4F             0154*  ; print registers to screen in hexidecimal format
04AF4F             0155*  ; inputs: none
04AF4F             0156*  ; outputs: values of every register printed to screen
04AF4F             0157*  ;    values of each register in global scratch memory
04AF4F             0158*  ; destroys: nothing
04AF4F             0159*  stepRegistersHex:
04AF4F             0160*  ; store everything in scratch
04AF4F 22 52 B1 04 0161*      ld (uhl),hl
04AF53 ED 43 55 B1 0162*      ld (ubc),bc
       04          
04AF58 ED 53 58 B1 0163*      ld (ude),de
       04          
04AF5D DD 22 5B B1 0164*      ld (uix),ix
       04          
04AF62 FD 22 5E B1 0165*      ld (uiy),iy
       04          
04AF67 F5          0166*      push af ; fml
04AF68 E1          0167*      pop hl  ; thanks, zilog
04AF69 22 4F B1 04 0168*      ld (uaf),hl
04AF6D F5          0169*      push af ; dammit
04AF6E             0170*  
04AF6E             0171*  ; home the cursor
04AF6E CD A6 A9 04 0172*      call vdu_home_cursor
04AF72             0173*  
04AF72             0174*  ; print each register
04AF72 21 DB B0 04 0175*      ld hl,str_afu
04AF76 CD 6D AE 04 0176*      call printString
04AF7A 2A 4F B1 04 0177*      ld hl,(uaf)
04AF7E CD 8B AE 04 0178*      call printHex24
04AF82 CD 82 AE 04 0179*      call printNewLine
04AF86             0180*  
04AF86 21 DF B0 04 0181*      ld hl,str_hlu
04AF8A CD 6D AE 04 0182*      call printString
04AF8E 2A 52 B1 04 0183*      ld hl,(uhl)
04AF92 CD 8B AE 04 0184*      call printHex24
04AF96 CD 82 AE 04 0185*      call printNewLine
04AF9A             0186*  
04AF9A 21 E3 B0 04 0187*      ld hl,str_bcu
04AF9E CD 6D AE 04 0188*      call printString
04AFA2 2A 55 B1 04 0189*      ld hl,(ubc)
04AFA6 CD 8B AE 04 0190*      call printHex24
04AFAA CD 82 AE 04 0191*      call printNewLine
04AFAE             0192*  
04AFAE 21 E7 B0 04 0193*      ld hl,str_deu
04AFB2 CD 6D AE 04 0194*      call printString
04AFB6 2A 58 B1 04 0195*      ld hl,(ude)
04AFBA CD 8B AE 04 0196*      call printHex24
04AFBE CD 82 AE 04 0197*      call printNewLine
04AFC2             0198*  
04AFC2 21 EB B0 04 0199*      ld hl,str_ixu
04AFC6 CD 6D AE 04 0200*      call printString
04AFCA 2A 5B B1 04 0201*      ld hl,(uix)
04AFCE CD 8B AE 04 0202*      call printHex24
04AFD2 CD 82 AE 04 0203*      call printNewLine
04AFD6             0204*  
04AFD6 21 EF B0 04 0205*      ld hl,str_iyu
04AFDA CD 6D AE 04 0206*      call printString
04AFDE 2A 5E B1 04 0207*      ld hl,(uiy)
04AFE2 CD 8B AE 04 0208*      call printHex24
04AFE6 CD 82 AE 04 0209*      call printNewLine
04AFEA             0210*  
04AFEA             0211*      ; call vsync
04AFEA             0212*  
04AFEA CD 82 AE 04 0213*      call printNewLine
04AFEE             0214*  
04AFEE             0215*  ; check for escape key and quit if pressed
04AFEE             0216*  	MOSCALL mos_getkbmap
04AFEE 3E 1E       0001*M 			LD	A, function
04AFF0 5B CF       0002*M 			RST.LIL	08h
04AFF2             0217*  @stayhere:
04AFF2             0218*  ; 113 Escape
04AFF2 DD CB 0E 46 0219*      bit 0,(ix+14)
04AFF6 20 02       0220*      jr nz,@Escape
04AFF8 18 F8       0221*  	jr @stayhere
04AFFA             0222*  @Escape:
04AFFA DD CB 0E 86 0223*      res 0,(ix+14) ; debounce the key (hopefully)
04AFFE 3E 80       0224*      ld a,%10000000
04B000 CD 82 C0 04 0225*      call multiPurposeDelay
04B004             0226*  
04B004             0227*  ; restore everything
04B004 2A 52 B1 04 0228*      ld hl, (uhl)
04B008 ED 4B 55 B1 0229*      ld bc, (ubc)
       04          
04B00D ED 5B 58 B1 0230*      ld de, (ude)
       04          
04B012 DD 2A 5B B1 0231*      ld ix, (uix)
       04          
04B017 FD 2A 5E B1 0232*      ld iy, (uiy)
       04          
04B01C F1          0233*      pop af
04B01D             0234*  ; all done
04B01D C9          0235*      ret
04B01E             0236*  
04B01E             0237*  ; print registers to screen in hexidecimal format
04B01E             0238*  ; inputs: none
04B01E             0239*  ; outputs: values of every register printed to screen
04B01E             0240*  ;    values of each register in global scratch memory
04B01E             0241*  ; destroys: nothing
04B01E             0242*  dumpRegistersHex:
04B01E             0243*  ; store everything in scratch
04B01E 22 52 B1 04 0244*      ld (uhl),hl
04B022 ED 43 55 B1 0245*      ld (ubc),bc
       04          
04B027 ED 53 58 B1 0246*      ld (ude),de
       04          
04B02C DD 22 5B B1 0247*      ld (uix),ix
       04          
04B031 FD 22 5E B1 0248*      ld (uiy),iy
       04          
04B036 F5          0249*      push af ; fml
04B037 E1          0250*      pop hl  ; thanks, zilog
04B038 22 4F B1 04 0251*      ld (uaf),hl
04B03C F5          0252*      push af ; dammit
04B03D             0253*  
04B03D             0254*  ; home the cursor
04B03D CD A6 A9 04 0255*      call vdu_home_cursor
04B041             0256*  
04B041             0257*  ; print each register
04B041 21 DB B0 04 0258*      ld hl,str_afu
04B045 CD 6D AE 04 0259*      call printString
04B049 2A 4F B1 04 0260*      ld hl,(uaf)
04B04D CD 8B AE 04 0261*      call printHex24
04B051 CD 82 AE 04 0262*      call printNewLine
04B055             0263*  
04B055 21 DF B0 04 0264*      ld hl,str_hlu
04B059 CD 6D AE 04 0265*      call printString
04B05D 2A 52 B1 04 0266*      ld hl,(uhl)
04B061 CD 8B AE 04 0267*      call printHex24
04B065 CD 82 AE 04 0268*      call printNewLine
04B069             0269*  
04B069 21 E3 B0 04 0270*      ld hl,str_bcu
04B06D CD 6D AE 04 0271*      call printString
04B071 2A 55 B1 04 0272*      ld hl,(ubc)
04B075 CD 8B AE 04 0273*      call printHex24
04B079 CD 82 AE 04 0274*      call printNewLine
04B07D             0275*  
04B07D 21 E7 B0 04 0276*      ld hl,str_deu
04B081 CD 6D AE 04 0277*      call printString
04B085 2A 58 B1 04 0278*      ld hl,(ude)
04B089 CD 8B AE 04 0279*      call printHex24
04B08D CD 82 AE 04 0280*      call printNewLine
04B091             0281*  
04B091 21 EB B0 04 0282*      ld hl,str_ixu
04B095 CD 6D AE 04 0283*      call printString
04B099 2A 5B B1 04 0284*      ld hl,(uix)
04B09D CD 8B AE 04 0285*      call printHex24
04B0A1 CD 82 AE 04 0286*      call printNewLine
04B0A5             0287*  
04B0A5 21 EF B0 04 0288*      ld hl,str_iyu
04B0A9 CD 6D AE 04 0289*      call printString
04B0AD 2A 5E B1 04 0290*      ld hl,(uiy)
04B0B1 CD 8B AE 04 0291*      call printHex24
04B0B5 CD 82 AE 04 0292*      call printNewLine
04B0B9             0293*  
04B0B9 CD C8 AA 04 0294*      call vdu_vblank
04B0BD             0295*  
04B0BD CD 82 AE 04 0296*      call printNewLine
04B0C1             0297*  ; restore everything
04B0C1 2A 52 B1 04 0298*      ld hl, (uhl)
04B0C5 ED 4B 55 B1 0299*      ld bc, (ubc)
       04          
04B0CA ED 5B 58 B1 0300*      ld de, (ude)
       04          
04B0CF DD 2A 5B B1 0301*      ld ix, (uix)
       04          
04B0D4 FD 2A 5E B1 0302*      ld iy, (uiy)
       04          
04B0D9 F1          0303*      pop af
04B0DA             0304*  ; all done
04B0DA C9          0305*      ret
04B0DB             0306*  
04B0DB 61 66 3D 00 0307*  str_afu: db "af=",0
04B0DF 68 6C 3D 00 0308*  str_hlu: db "hl=",0
04B0E3 62 63 3D 00 0309*  str_bcu: db "bc=",0
04B0E7 64 65 3D 00 0310*  str_deu: db "de=",0
04B0EB 69 78 3D 00 0311*  str_ixu: db "ix=",0
04B0EF 69 79 3D 00 0312*  str_iyu: db "iy=",0
04B0F3             0313*  
04B0F3             0314*  ; print udeuhl to screen in hexidecimal format
04B0F3             0315*  ; inputs: none
04B0F3             0316*  ; outputs: concatenated hexidecimal udeuhl
04B0F3             0317*  ; destroys: nothing
04B0F3             0318*  dumpUDEUHLHex:
04B0F3             0319*  ; store everything in scratch
04B0F3 22 52 B1 04 0320*      ld (uhl),hl
04B0F7 ED 43 55 B1 0321*      ld (ubc),bc
       04          
04B0FC ED 53 58 B1 0322*      ld (ude),de
       04          
04B101 DD 22 5B B1 0323*      ld (uix),ix
       04          
04B106 FD 22 5E B1 0324*      ld (uiy),iy
       04          
04B10B F5          0325*      push af
04B10C             0326*  
04B10C             0327*  ; print each register
04B10C             0328*  
04B10C 21 46 B1 04 0329*      ld hl,str_udeuhl
04B110 CD 6D AE 04 0330*      call printString
04B114 2A 58 B1 04 0331*      ld hl,(ude)
04B118 CD 8B AE 04 0332*      call printHex24
04B11C 3E 2E       0333*  	ld a,'.'	; print a dot to separate the values
04B11E 5B D7       0334*  	rst.lil 10h
04B120 2A 52 B1 04 0335*      ld hl,(uhl)
04B124 CD 8B AE 04 0336*      call printHex24
04B128 CD 82 AE 04 0337*      call printNewLine
04B12C             0338*  
04B12C             0339*  ; restore everything
04B12C 2A 52 B1 04 0340*      ld hl, (uhl)
04B130 ED 4B 55 B1 0341*      ld bc, (ubc)
       04          
04B135 ED 5B 58 B1 0342*      ld de, (ude)
       04          
04B13A DD 2A 5B B1 0343*      ld ix, (uix)
       04          
04B13F FD 2A 5E B1 0344*      ld iy, (uiy)
       04          
04B144 F1          0345*      pop af
04B145             0346*  ; all done
04B145 C9          0347*      ret
04B146             0348*  
04B146 75 64 65 2E 0349*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04B14F             0350*  
04B14F             0351*  ; global scratch memory for registers
04B14F 00 00 00    0352*  uaf: dl 0
04B152 00 00 00    0353*  uhl: dl 0
04B155 00 00 00    0354*  ubc: dl 0
04B158 00 00 00    0355*  ude: dl 0
04B15B 00 00 00    0356*  uix: dl 0
04B15E 00 00 00    0357*  uiy: dl 0
04B161 00 00 00    0358*  usp: dl 0
04B164 00 00 00    0359*  upc: dl 0
04B167             0360*  
04B167             0361*  ; inputs: whatever is in the flags register
04B167             0362*  ; outputs: binary representation of flags
04B167             0363*  ;          with a header so we know which is what
04B167             0364*  ; destroys: nothing
04B167             0365*  ; preserves: everything
04B167             0366*  dumpFlags:
04B167             0367*  ; first we curse zilog for not giving direct access to flags
04B167 F5          0368*      push af ; this is so we can send it back unharmed
04B168 F5          0369*      push af ; this is so we can pop it to hl
04B169             0370*  ; store everything in scratch
04B169 22 52 B1 04 0371*      ld (uhl),hl
04B16D ED 43 55 B1 0372*      ld (ubc),bc
       04          
04B172 ED 53 58 B1 0373*      ld (ude),de
       04          
04B177 DD 22 5B B1 0374*      ld (uix),ix
       04          
04B17C FD 22 5E B1 0375*      ld (uiy),iy
       04          
04B181             0376*  ; next we print the header
04B181 21 AD B1 04 0377*      ld hl,@header
04B185 CD 6D AE 04 0378*      call printString
04B189 E1          0379*      pop hl ; flags are now in l
04B18A 7D          0380*      ld a,l ; flags are now in a
04B18B CD 2A AF 04 0381*      call printBin8
04B18F CD 82 AE 04 0382*  	call printNewLine
04B193             0383*  ; restore everything
04B193 2A 52 B1 04 0384*      ld hl, (uhl)
04B197 ED 4B 55 B1 0385*      ld bc, (ubc)
       04          
04B19C ED 5B 58 B1 0386*      ld de, (ude)
       04          
04B1A1 DD 2A 5B B1 0387*      ld ix, (uix)
       04          
04B1A6 FD 2A 5E B1 0388*      ld iy, (uiy)
       04          
04B1AB F1          0389*      pop af ; send her home the way she came
04B1AC C9          0390*      ret
04B1AD             0391*  ; Bit 7 (S): Sign flag
04B1AD             0392*  ; Bit 6 (Z): Zero flag
04B1AD             0393*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04B1AD             0394*  ; Bit 4 (H): Half Carry flag
04B1AD             0395*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04B1AD             0396*  ; Bit 2 (PV): Parity/Overflow flag
04B1AD             0397*  ; Bit 1 (N): Subtract flag
04B1AD             0398*  ; Bit 0 (C): Carry flag
04B1AD 53 5A 78 48 0399*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04B1B8             0400*  
04B1B8             0401*  ; set all the bits in the flag register
04B1B8             0402*  ; more of an academic exercise than anything useful
04B1B8             0403*  ; inputs; none
04B1B8             0404*  ; outputs; a=0,f=255
04B1B8             0405*  ; destroys: flags, hl
04B1B8             0406*  ; preserves: a, because why not
04B1B8             0407*  setAllFlags:
04B1B8 21 FF 00 00 0408*      ld hl,255
04B1BC 67          0409*      ld h,a ; four cycles to preserve a is cheap
04B1BD E5          0410*      push hl
04B1BE F1          0411*      pop af
04B1BF C9          0412*      ret
04B1C0             0413*  
04B1C0             0414*  ; reset all the bits in the flag register
04B1C0             0415*  ; unlike its inverse counterpart, this may actually be useful
04B1C0             0416*  ; inputs; none
04B1C0             0417*  ; outputs; a=0,f=0
04B1C0             0418*  ; destroys: flags, hl
04B1C0             0419*  ; preserves: a, because why not
04B1C0             0420*  resetAllFlags:
04B1C0 21 00 00 00 0421*      ld hl,0
04B1C4 67          0422*      ld h,a ; four cycles to preserve a is cheap
04B1C5 E5          0423*      push hl
04B1C6 F1          0424*      pop af
04B1C7 C9          0425*      ret
04B1C8             0426*  
04B1C8             0427*  ; wait until user presses a key
04B1C8             0428*  ; inputs: none
04B1C8             0429*  ; outputs: none
04B1C8             0430*  ; destroys: af,ix
04B1C8             0431*  waitKeypress:
04B1C8             0432*      MOSCALL mos_sysvars
04B1C8 3E 08       0001*M 			LD	A, function
04B1CA 5B CF       0002*M 			RST.LIL	08h
04B1CC AF          0433*      xor a ; zero out any prior keypresses
04B1CD DD 77 05    0434*      ld (ix+sysvar_keyascii),a
04B1D0             0435*  @loop:
04B1D0 DD 7E 05    0436*      ld a,(ix+sysvar_keyascii)
04B1D3 A7          0437*      and a
04B1D4 C0          0438*      ret nz
04B1D5 18 F9       0439*      jr @loop
04B1D7             0026   	include "src/asm/player.asm"
04B1D7             0001*  ; ######## GAME STATE VARIABLES #######
04B1D7             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04B1D7 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04B1DA             0004*  ; player current health,binary
04B1DA             0005*  ; when < 0 player splodes
04B1DA             0006*  ; restores to plyr_max_health when new ship spawns
04B1DA 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04B1DD             0008*  ; max player health,binary
04B1DD             0009*  ; can increase with power-ups (todo)
04B1DD 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04B1E0             0011*  ; when reaches zero,game ends
04B1E0             0012*  ; can increase based on TODO
04B1E0 03 00 00    0013*  plyr_lives: dl 3 ; binary
04B1E3             0014*  
04B1E3             0015*  ; ######### Player Variables ##########
04B1E3             0016*  ; player position on the map and orientation
04B1E3 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B1E4 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B1E5 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04B1E6 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B1E7 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B1E8 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04B1E9 00          0023*  cur_x: db 0x00
04B1EA 00          0024*  cur_y: db 0x00
04B1EB 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04B1EC 00          0026*  xvel:  db 0x00
04B1ED 00          0027*  yvel:  db 0x00
04B1EE 00          0028*         db 0x00 ; padding
04B1EF 00          0029*  dy:    db 0x00
04B1F0 00          0030*  dx:    db 0x00
04B1F1 00          0031*         db 0x00 ; padding
04B1F2 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04B1F3             0033*  
04B1F3 00          0034*  plyr_shot_x:      db 0x00
04B1F4 00          0035*  plyr_shot_y:      db 0x00
04B1F5 00          0036*                      db 0x00 ; padding
04B1F6 00          0037*  plyr_shot_xvel:   db 0x00
04B1F7 00          0038*  plyr_shot_yvel:   db 0x00
04B1F8 00          0039*                      db 0x00 ; padding
04B1F9 FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04B1FA 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04B1FD 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04B1FE             0043*  
04B1FE 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04B1FF 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04B200             0046*  plyr_wpn_knife: equ %00000001
04B200             0047*  plyr_wpn_pistol: equ %00000010
04B200             0048*  plyr_wpn_mg: equ %00000100
04B200             0049*  plyr_wpn_gg: equ %00001000
04B200 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04B201 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04B204 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04B207             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04B20D             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04B213 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04B216             0056*  
04B216             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04B216 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04B219             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04B219             0060*  
04B219             0061*  
04B219 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04B21C             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04B224 00          0064*                   db 0 ; string terminator
04B225             0065*  
04B225             0066*  ; ######### PLAYER CONSTANTS ##########
04B225             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04B225             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04B22B             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04B22B             0070*  
04B22B             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04B22B             0072*  ; uses the same offsets from its table base as the main sprite table:
04B22B             0073*  plyr_start_variables: ; label marking beginning of table
04B22B 40          0074*  plyr_id:               db table_max_records
04B22C 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04B22D 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04B230 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04B233 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04B234 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04B235 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04B236 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04B239 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04B23C 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04B23F 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04B242 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04B245 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04B248 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04B24B 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04B24C 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04B24D             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04B24D 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04B24E 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04B24F 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04B250             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04B250             0095*  
04B250             0096*  
04B250             0097*  ; set initial player position
04B250             0098*  ; inputs: none,everything is hardcoded
04B250             0099*  ; outputs: player set to the first valid position on the map
04B250             0100*  ; destroys: a
04B250             0101*  plyr_init:
04B250 CD D4 66 04 0102*      call get_start_pos ; a = cell_id, d = map_y, e = map_x
04B254 32 E5 B1 04 0103*      ld (cur_cell),a
04B258 ED 53 E9 B1 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B25D AF          0105*      xor a ; north is default orientation
04B25E 32 E8 B1 04 0106*      ld (orientation),a
04B262 21 1E 00 00 0107*      ld hl,plyr_move_rate
04B266 FD 21 25 B2 0108*      ld iy,plyr_move_timer
       04          
04B26B CD 46 C0 04 0109*      call timestamp_tmr_set
04B26F 3E 03       0110*      ld a,3
04B271 32 E0 B1 04 0111*      ld (plyr_lives),a
04B275 3E 64       0112*      ld a,100
04B277 32 DA B1 04 0113*      ld (plyr_health),a
04B27B 3E 08       0114*      ld a,8
04B27D 32 19 B2 04 0115*      ld (plyr_ammo),a
04B281 3E 01       0116*      ld a,plyr_wpn_knife
04B283 F6 02       0117*      or plyr_wpn_pistol
04B285 32 FE B1 04 0118*      ld (plyr_wpns),a
04B289 3E 01       0119*      ld a,plyr_wpn_knife
04B28B 32 FF B1 04 0120*      ld (plyr_wpn_active),a
04B28F CD ED B2 04 0121*      call plyr_set_weapon_parameters
04B293 FD 21 07 B2 0122*      ld iy,plyr_wpn_select_tmr
       04          
04B298 21 00 00 00 0123*      ld hl,0
04B29C CD 46 C0 04 0124*      call timestamp_tmr_set
04B2A0 C9          0125*      ret
04B2A1             0126*  
04B2A1             0127*  plyr_next_weapon:
04B2A1             0128*  ; check if select weapons timer has expired
04B2A1 FD 21 07 B2 0129*      ld iy,plyr_wpn_select_tmr
       04          
04B2A6 CD 51 C0 04 0130*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B2AA F0          0131*      ret p ; time left on timer so no weapon select
04B2AB             0132*  ; reset weapon select timer
04B2AB 21 14 00 00 0133*      ld hl,120/6 ; 1/6 second
04B2AF CD 46 C0 04 0134*      call timestamp_tmr_set
04B2B3             0135*  ; select next weapon
04B2B3 21 FE B1 04 0136*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B2B7 ED 07       0137*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B2B9             0138*  @loop:
04B2B9 3A FF B1 04 0139*      ld a,(plyr_wpn_active)
04B2BD 07          0140*      rlca ; rotate left
04B2BE 32 FF B1 04 0141*      ld (plyr_wpn_active),a
04B2C2 A6          0142*      and (hl) ; check inventory mask
04B2C3 28 F4       0143*      jr z,@loop
04B2C5 C3 ED B2 04 0144*      jp plyr_set_weapon_parameters
04B2C9             0145*  
04B2C9             0146*  plyr_previous_weapon:
04B2C9             0147*  ; check if select weapons timer has expired
04B2C9 FD 21 07 B2 0148*      ld iy,plyr_wpn_select_tmr
       04          
04B2CE CD 51 C0 04 0149*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B2D2 F0          0150*      ret p ; time left on timer so no weapon select
04B2D3             0151*  ; reset weapon select timer
04B2D3 21 14 00 00 0152*      ld hl,120/6 ; 1/6 second
04B2D7 CD 46 C0 04 0153*      call timestamp_tmr_set
04B2DB             0154*  ; select next weapon
04B2DB 21 FE B1 04 0155*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B2DF ED 07       0156*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B2E1             0157*  @loop:
04B2E1 3A FF B1 04 0158*      ld a,(plyr_wpn_active)
04B2E5 0F          0159*      rrca ; rotate right
04B2E6 32 FF B1 04 0160*      ld (plyr_wpn_active),a
04B2EA A6          0161*      and (hl) ; check inventory mask
04B2EB 28 F4       0162*      jr z,@loop
04B2ED             0163*      ; fall through to plyr_set_weapon_parameters
04B2ED             0164*  
04B2ED             0165*  plyr_set_weapon_parameters:
04B2ED FE 01       0166*      cp %00000001 ; knife
04B2EF CA 06 B3 04 0167*      jp z,@knife
04B2F3 FE 02       0168*      cp %00000010 ; pistol
04B2F5 CA 2E B3 04 0169*      jp z,@pistol
04B2F9 FE 04       0170*      cp %00000100 ; machine gun
04B2FB CA 56 B3 04 0171*      jp z,@machine_gun
04B2FF FE 08       0172*      cp %00001000 ; gatling gun
04B301 CA 7E B3 04 0173*      jp z,@gatling_gun
04B305 C9          0174*      ret ; if none of the above do nothing
04B306             0175*  @knife:
04B306 21 05 21 00 0176*      ld hl,BUF_UI_BJ_KNIFE_00
04B30A 22 04 B2 04 0177*      ld (plyr_wpn_ui_lg),hl
04B30E 21 03 20 00 0178*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04B312 22 01 B2 04 0179*      ld (plyr_wpn_ui_sm),hl
04B316 3E 14       0180*      ld a,20 ; dps = 60
04B318 32 00 B2 04 0181*      ld (plyr_wpn_damage),a
04B31C 21 3C 00 00 0182*      ld hl,120/2 ; 3 times/second
04B320 22 13 B2 04 0183*      ld (plyr_wpn_fire_rate),hl
04B324 FD 21 0D B2 0184*      ld iy,plyr_wpn_fire_tmr
       04          
04B329 CD 46 C0 04 0185*      call timestamp_tmr_set
04B32D C9          0186*      ret
04B32E             0187*  @pistol:
04B32E 21 0F 21 00 0188*      ld hl,BUF_UI_BJ_PISTOL_00
04B332 22 04 B2 04 0189*      ld (plyr_wpn_ui_lg),hl
04B336 21 05 20 00 0190*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04B33A 22 01 B2 04 0191*      ld (plyr_wpn_ui_sm),hl
04B33E             0192*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04B33E 3E 1E       0193*      ld a,30 ; damage/burst
04B340 32 00 B2 04 0194*      ld (plyr_wpn_damage),a
04B344 21 28 00 00 0195*      ld hl,120/3 ; 3 bursts/second
04B348 22 13 B2 04 0196*      ld (plyr_wpn_fire_rate),hl
04B34C FD 21 0D B2 0197*      ld iy,plyr_wpn_fire_tmr
       04          
04B351 CD 46 C0 04 0198*      call timestamp_tmr_set
04B355 C9          0199*      ret
04B356             0200*  @machine_gun:
04B356 21 0A 21 00 0201*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04B35A 22 04 B2 04 0202*      ld (plyr_wpn_ui_lg),hl
04B35E 21 04 20 00 0203*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04B362 22 01 B2 04 0204*      ld (plyr_wpn_ui_sm),hl
04B366             0205*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04B366 3E 50       0206*      ld a,80 ; damage/burst
04B368 32 00 B2 04 0207*      ld (plyr_wpn_damage),a
04B36C 21 28 00 00 0208*      ld hl,120/3 ; 3 bursts/second
04B370 22 13 B2 04 0209*      ld (plyr_wpn_fire_rate),hl
04B374 FD 21 0D B2 0210*      ld iy,plyr_wpn_fire_tmr
       04          
04B379 CD 46 C0 04 0211*      call timestamp_tmr_set
04B37D C9          0212*      ret
04B37E             0213*  @gatling_gun:
04B37E 21 00 21 00 0214*      ld hl,BUF_UI_BJ_GATLING_00
04B382 22 04 B2 04 0215*      ld (plyr_wpn_ui_lg),hl
04B386 21 02 20 00 0216*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04B38A 22 01 B2 04 0217*      ld (plyr_wpn_ui_sm),hl
04B38E             0218*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04B38E 3E 78       0219*      ld a,120 ; damage/burst
04B390 32 00 B2 04 0220*      ld (plyr_wpn_damage),a
04B394 21 28 00 00 0221*      ld hl,120/3 ; 3 bursts/second
04B398 22 13 B2 04 0222*      ld (plyr_wpn_fire_rate),hl
04B39C FD 21 0D B2 0223*      ld iy,plyr_wpn_fire_tmr
       04          
04B3A1 CD 46 C0 04 0224*      call timestamp_tmr_set
04B3A5 C9          0225*      ret
04B3A6             0226*  
04B3A6             0227*  ; adds to player's health by a set amount
04B3A6             0228*  ; inputs: a is the signed amount to modify health
04B3A6             0229*  ; outputs: a will contain amount of health remaining
04B3A6             0230*  ;          carry will be set if health maxes out to 255
04B3A6             0231*  plyr_add_health:
04B3A6 21 DA B1 04 0232*      ld hl,plyr_health
04B3AA 86          0233*      add a,(hl)
04B3AB D2 B1 B3 04 0234*      jp nc,@update ; if we roll over to zero when adding
04B3AF 3E FF       0235*      ld a,255 ; ... set health remaining to max
04B3B1             0236*  @update:
04B3B1 77          0237*      ld (hl),a
04B3B2 C9          0238*      ret
04B3B3             0239*  
04B3B3             0240*  ; subtracts from player's health by a set amount
04B3B3             0241*  ; inputs: a is the signed amount to modify health
04B3B3             0242*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04B3B3             0243*  ;        a contains remaining health
04B3B3             0244*  plyr_sub_health:
04B3B3 21 DA B1 04 0245*      ld hl,plyr_health
04B3B7 86          0246*      add a,(hl)
04B3B8 CA C0 B3 04 0247*      jp z,@zero
04B3BC DA C5 B3 04 0248*      jp c,@update
04B3C0             0249*  @zero:
04B3C0 AF          0250*      xor a ; clear carry, set health to zero
04B3C1 21 DA B1 04 0251*      ld hl,plyr_health
04B3C5             0252*  @update:
04B3C5 77          0253*      ld (hl),a
04B3C6 C9          0254*      ret
04B3C7             0255*  
04B3C7             0256*  ; modifies the players score by a set amount
04B3C7             0257*  ; inputs: a is the signed amount to modify score
04B3C7             0258*  plyr_mod_score:
04B3C7 11 00 00 00 0259*      ld de,0 ; make sure deu is zero
04B3CB 5F          0260*      ld e,a
04B3CC 2A D7 B1 04 0261*      ld hl,(plyr_score)
04B3D0 19          0262*      add hl,de
04B3D1 22 D7 B1 04 0263*      ld (plyr_score),hl
04B3D5 C9          0264*      ret
04B3D6             0265*  
04B3D6             0266*  ; adds to player's ammo by a set amount
04B3D6             0267*  ; inputs: a is the signed amount to modify ammo
04B3D6             0268*  ; outputs: a will contain amount of ammo remaining
04B3D6             0269*  ;          carry will be set if ammo maxes out to 255
04B3D6             0270*  plyr_add_ammo:
04B3D6 21 19 B2 04 0271*      ld hl,plyr_ammo
04B3DA 86          0272*      add a,(hl)
04B3DB D2 E1 B3 04 0273*      jp nc,@update ; if we roll over to zero when adding
04B3DF 3E FF       0274*      ld a,255 ; ... set ammo remaining to max
04B3E1             0275*  @update:
04B3E1 77          0276*      ld (hl),a
04B3E2 C9          0277*      ret
04B3E3             0278*  
04B3E3             0279*  ; subtracts from player's ammo by a set amount
04B3E3             0280*  ; inputs: a is the signed amount to modify ammo
04B3E3             0281*  ; outputs: carry reset if player was out of ammo before firing
04B3E3             0282*  ;          a will also contain amount of ammo remaining after shot
04B3E3             0283*  plyr_sub_ammo:
04B3E3 21 19 B2 04 0284*      ld hl,plyr_ammo
04B3E7 86          0285*      add a,(hl)
04B3E8 DA FB B3 04 0286*      jp c,@update
04B3EC 3E 01       0287*      ld a,%00000001 ; knife
04B3EE 32 FF B1 04 0288*      ld (plyr_wpn_active),a
04B3F2 CD ED B2 04 0289*      call plyr_set_weapon_parameters
04B3F6 AF          0290*      xor a ; clear carry, set ammo to zero
04B3F7 21 19 B2 04 0291*      ld hl,plyr_ammo
04B3FB             0292*  @update:
04B3FB 77          0293*      ld (hl),a
04B3FC C9          0294*      ret
04B3FD             0295*  
04B3FD             0296*  plyr_shoot_knife:
04B3FD CD 44 BE 04 0297*      call sfx_play_knife
04B401             0298*      ; check whether the player hit anything
04B401 3A E8 B1 04 0299*      ld a,(orientation) ; direction knife is moving
04B405 5F          0300*      ld e,a
04B406 16 01       0301*      ld d,1 ; shot "velocity" in map units
04B408 CD C2 65 04 0302*      call get_dx_dy ; d,e = dy,dx
04B40C ED 53 F6 B1 0303*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B411 2A E9 B1 04 0304*      ld hl,(cur_x) ; h,l = player y,x
04B415 22 F3 B1 04 0305*      ld (plyr_shot_x),hl ; initial shot position
04B419 ED 5B F6 B1 0306*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B41E 2A F3 B1 04 0307*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B422             0308*      ; bump bullet position one map unit in direction of travel
04B422 7D          0309*      ld a,l ; player shot x
04B423 83          0310*      add a,e ; add xvel
04B424 6F          0311*      ld l,a ; save new x
04B425 7C          0312*      ld a,h ; player shot y
04B426 82          0313*      add a,d ; add yvel
04B427 67          0314*      ld h,a ; save new y
04B428 22 F3 B1 04 0315*      ld (plyr_shot_x),hl ; and save that position
04B42C EB          0316*      ex de,hl ; d,e = bullet y,x
04B42D CD 9D 65 04 0317*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B431             0318*  ; check whether target cell contains a sprite
04B431 DD 7E 03    0319*      ld a,(ix+map_sprite_id)
04B434 FE FF       0320*      cp 255 ; value if not sprite
04B436 C8          0321*      ret z ; if we hit a non-sprite, we're done
04B437             0322*  ; is a sprite so run its "hurt" behavior routine
04B437 CD 83 9F 04 0323*      call sprite_set_pointer
04B43B 3E 02       0324*      ld a,sp_hurt
04B43D CD 51 A0 04 0325*      call do_sprite_behavior ; a = sprite behavior return code
04B441 C9          0326*      ret
04B442             0327*  
04B442             0328*  plyr_shoot_pistol:
04B442 3E FF       0329*      ld a,-1
04B444 CD E3 B3 04 0330*      call plyr_sub_ammo
04B448 DA 51 B4 04 0331*      jp c,@shoot
04B44C CD 2C BE 04 0332*      call sfx_play_gun_empty
04B450 C9          0333*      ret
04B451             0334*  @shoot:
04B451 CD 98 BE 04 0335*      call sfx_play_shot_pistol
04B455 C3 87 B4 04 0336*      jp plyr_move_bullet
04B459             0337*  
04B459             0338*  plyr_shoot_machine_gun:
04B459 3E FC       0339*      ld a,-4
04B45B CD E3 B3 04 0340*      call plyr_sub_ammo
04B45F DA 68 B4 04 0341*      jp c,@shoot
04B463 CD 2C BE 04 0342*      call sfx_play_gun_empty
04B467 C9          0343*      ret
04B468             0344*  @shoot:
04B468 CD 8C BE 04 0345*      call sfx_play_shot_machine_gun_burst
04B46C C3 87 B4 04 0346*      jp plyr_move_bullet
04B470             0347*  
04B470             0348*  plyr_shoot_gatling_gun:
04B470 3E F8       0349*      ld a,-8
04B472 CD E3 B3 04 0350*      call plyr_sub_ammo
04B476 DA 7F B4 04 0351*      jp c,@shoot
04B47A CD 2C BE 04 0352*      call sfx_play_gun_empty
04B47E C9          0353*      ret
04B47F             0354*  @shoot:
04B47F CD 80 BE 04 0355*      call sfx_play_shot_gatling_burst
04B483 C3 87 B4 04 0356*      jp plyr_move_bullet
04B487             0357*  
04B487             0358*  plyr_move_bullet:
04B487             0359*      ; check whether the player hit anything
04B487 3A E8 B1 04 0360*      ld a,(orientation) ; direction shot is moving
04B48B 32 F9 B1 04 0361*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04B48F 5F          0362*      ld e,a
04B490 16 01       0363*      ld d,1 ; shot "velocity" in map units
04B492 CD C2 65 04 0364*      call get_dx_dy ; d,e = dy,dx
04B496 ED 53 F6 B1 0365*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B49B 2A E9 B1 04 0366*      ld hl,(cur_x) ; h,l = player y,x
04B49F 22 F3 B1 04 0367*      ld (plyr_shot_x),hl ; initial shot position
04B4A3 06 05       0368*      ld b,view_distance ; loop counter so player can't shoot past view distance
04B4A5             0369*  @loop:
04B4A5 C5          0370*      push bc ; save loop counter
04B4A6 ED 5B F6 B1 0371*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B4AB 2A F3 B1 04 0372*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B4AF             0373*      ; bump bullet position one map unit in direction of travel
04B4AF 7D          0374*      ld a,l ; player shot x
04B4B0 83          0375*      add a,e ; add xvel
04B4B1 6F          0376*      ld l,a ; save new x
04B4B2 7C          0377*      ld a,h ; player shot y
04B4B3 82          0378*      add a,d ; add yvel
04B4B4 67          0379*      ld h,a ; save new y
04B4B5 22 F3 B1 04 0380*      ld (plyr_shot_x),hl ; and save that position
04B4B9 EB          0381*      ex de,hl ; d,e = bullet y,x
04B4BA CD 9D 65 04 0382*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B4BE             0383*  ; check whether target cell contains a sprite
04B4BE DD 7E 03    0384*      ld a,(ix+map_sprite_id)
04B4C1 FE FF       0385*      cp 255 ; value if not sprite
04B4C3 28 14       0386*      jr z,@not_sprite
04B4C5             0387*  ; is a sprite so run its "hurt" behavior routine
04B4C5 CD 83 9F 04 0388*      call sprite_set_pointer
04B4C9 3E 02       0389*      ld a,sp_hurt
04B4CB CD 51 A0 04 0390*      call do_sprite_behavior ; a = sprite behavior return code
04B4CF 3A F9 B1 04 0391*      ld a,(plyr_shot_status)
04B4D3 FE FF       0392*      cp 255 ; value if shot hit a shootable sprite
04B4D5 28 10       0393*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04B4D7 18 16       0394*      jr @move_bullet ; otherwise keep moving bullet
04B4D9             0395*  @not_sprite:
04B4D9 ED 5B F6 B1 0396*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04B4DE             0397*  ; read map type/status mask from target cell
04B4DE DD 7E 00    0398*      ld a,(ix+map_type_status)
04B4E1 E6 03       0399*      and %00000011 ; mask off everything but the render type mask bits
04B4E3             0400*  ; branch on the values in the bitmask
04B4E3 FE 01       0401*      cp render_type_floor
04B4E5 28 08       0402*      jr z,@move_bullet ; keep going if map cell is a floor
04B4E7             0403*  @stop_bullet:
04B4E7 C1          0404*      pop bc ; dummy pop to balance stack
04B4E8 3E FF       0405*      ld a,255
04B4EA 32 F9 B1 04 0406*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B4EE C9          0407*      ret ; combat ended
04B4EF             0408*  @move_bullet:
04B4EF C1          0409*      pop bc ; restore loop counter
04B4F0 10 B3       0410*      djnz @loop ; keep moving bullet if we have more distance to cover
04B4F2 3E FF       0411*      ld a,255
04B4F4 32 F9 B1 04 0412*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B4F8 C9          0413*      ret ; combat ended
04B4F9             0414*  
04B4F9             0415*  plyr_shoot:
04B4F9             0416*  ; check if fire weapons timer has expired
04B4F9 FD 21 0D B2 0417*      ld iy,plyr_wpn_fire_tmr
       04          
04B4FE CD 51 C0 04 0418*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B502 CA 0B B5 04 0419*      jp z,@time_up ; timer zero so fire weapon
04B506 FA 0B B5 04 0420*      jp m,@time_up ; timer negative so fire weapon
04B50A C9          0421*      ret ; timer not expired so don't fire weapon
04B50B             0422*  @time_up:
04B50B             0423*  ; reset fire weapon timer
04B50B FD 21 0D B2 0424*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04B510 2A 13 B2 04 0425*      ld hl,(plyr_wpn_fire_rate)
04B514 CD 46 C0 04 0426*      call timestamp_tmr_set
04B518             0427*  ; check animation frame for zero
04B518 21 16 B2 04 0428*      ld hl,plyr_wpn_anim_fr
04B51C 7E          0429*      ld a,(hl)
04B51D A7          0430*      and a
04B51E 20 01       0431*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04B520 34          0432*      inc (hl) ; is zero so bump to first animation frame
04B521             0433*  @shoot:
04B521             0434*  ; roll for damage modifier
04B521 CD D5 B6 04 0435*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04B525 21 00 B2 04 0436*      ld hl,plyr_wpn_damage
04B529 A6          0437*      and a,(hl) ; a contains modified damage value
04B52A ED 44       0438*      neg ; so we can add the negative
04B52C 32 FD B1 04 0439*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04B530             0440*  ; determine active weapon and shoot it
04B530 3A FF B1 04 0441*      ld a,(plyr_wpn_active)
04B534 FE 02       0442*      cp plyr_wpn_pistol
04B536 CA 42 B4 04 0443*      jp z,plyr_shoot_pistol
04B53A FE 04       0444*      cp plyr_wpn_mg
04B53C CA 59 B4 04 0445*      jp z,plyr_shoot_machine_gun
04B540 FE 08       0446*      cp plyr_wpn_gg
04B542 CA 70 B4 04 0447*      jp z,plyr_shoot_gatling_gun
04B546 FE 01       0448*      cp plyr_wpn_knife
04B548 CA FD B3 04 0449*      jp z,plyr_shoot_knife
04B54C C9          0450*      ret
04B54D             0451*  
04B54D             0452*  ; process player keyboard input
04B54D             0453*  ; Inputs: plyr_x/y set at desired position
04B54D             0454*  ; Returns: player position updated
04B54D             0455*  ; Destroys: probably everything
04B54D             0456*  plyr_input:
04B54D             0457*  ; check weapon anmation frame for zero
04B54D 3A 16 B2 04 0458*      ld a,(plyr_wpn_anim_fr)
04B551 E6 03       0459*      and 3 ; modulo 4
04B553 32 16 B2 04 0460*      ld (plyr_wpn_anim_fr),a
04B557 28 05       0461*      jr z,@get_input
04B559             0462*  ; ; animation frame is not zero so check animation timer
04B559             0463*  ;     ld iy,plyr_wpn_anim_tmr
04B559             0464*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B559             0465*  ;     jp z,@animate ; timer zero so animate
04B559             0466*  ;     jp m,@animate ; timer negative so animate
04B559             0467*  ;     jp @get_input ; time left on timer so no animation
04B559             0468*  ; bump animation frame
04B559             0469*  @animate:
04B559 21 16 B2 04 0470*      ld hl,plyr_wpn_anim_fr
04B55D 34          0471*      inc (hl) ; next frame
04B55E             0472*  ; ; reset animation timer
04B55E             0473*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04B55E             0474*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04B55E             0475*  ;     call timestamp_tmr_set
04B55E             0476*  
04B55E             0477*  @get_input:
04B55E             0478*  ; reset player component velocities to zero as the default
04B55E 21 00 00 00 0479*      ld hl,0
04B562 22 EC B1 04 0480*      ld (xvel),hl ; implicitly sets yvel
04B566 AF          0481*      xor a ;
04B567 32 F2 B1 04 0482*      ld (avel),a ; set player angular velocity to zero as default
04B56B             0483*  
04B56B             0484*  ; check for keypresses and branch accordingly
04B56B             0485*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04B56B 3E 1E       0001*M 			LD	A, function
04B56D 5B CF       0002*M 			RST.LIL	08h
04B56F             0486*  
04B56F             0487*  ; CHECK WEAPON CONTROL KEYS
04B56F             0488*  ; 58 Up player selects next weapon
04B56F DD CB 07 4E 0489*      bit 1,(ix+7)
04B573 28 08       0490*      jr z,@Up
04B575 DD E5       0491*      push ix ; it gets clobbered by the weapon select routine
04B577 CD A1 B2 04 0492*      call plyr_next_weapon
04B57B DD E1       0493*      pop ix
04B57D             0494*  @Up:
04B57D             0495*  
04B57D             0496*  ; 42 Down
04B57D DD CB 05 4E 0497*      bit 1,(ix+5)
04B581 28 08       0498*      jr z,@Down
04B583 DD E5       0499*      push ix ; it gets clobbered by the weapon select routine
04B585 CD C9 B2 04 0500*      call plyr_previous_weapon
04B589 DD E1       0501*      pop ix
04B58B             0502*  @Down:
04B58B             0503*  
04B58B             0504*  ; =====================
04B58B             0505*  ; 99 Space FIRE ZEE MISSILES!!!111
04B58B DD CB 0C 56 0506*      bit 2,(ix+12)
04B58F 28 08       0507*      jr z,@Space
04B591 DD E5       0508*      push ix ; it gets clobbered by the weapon firing
04B593 CD F9 B4 04 0509*      call plyr_shoot
04B597 DD E1       0510*      pop ix ; restore ix
04B599             0511*  @Space:
04B599             0512*  
04B599             0513*  ; CHECK MOVEMENT KEYS
04B599             0514*  ; non-zero means no movement key was pressed
04B599 3E FF       0515*      ld a,-1
04B59B             0516*  
04B59B             0517*  ; 34 W player moves forward
04B59B DD CB 04 4E 0518*      bit 1,(ix+4)
04B59F 28 07       0519*      jr z,@W
04B5A1 3E 01       0520*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B5A3 32 ED B1 04 0521*      ld (yvel),a
04B5A7 AF          0522*      xor a
04B5A8             0523*  @W:
04B5A8             0524*  
04B5A8             0525*  ; 82 S player moves backward
04B5A8 DD CB 0A 4E 0526*      bit 1,(ix+10)
04B5AC 28 0C       0527*      jr z,@S
04B5AE 16 FF       0528*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B5B0 3A ED B1 04 0529*      ld a,(yvel)
04B5B4 82          0530*      add a,d
04B5B5 32 ED B1 04 0531*      ld (yvel),a
04B5B9 AF          0532*      xor a
04B5BA             0533*  @S:
04B5BA             0534*  
04B5BA             0535*  ; 66 A plyer moves left
04B5BA DD CB 08 4E 0536*      bit 1,(ix+8)
04B5BE 28 07       0537*      jr z,@A
04B5C0 3E FF       0538*      ld a,-speed_plyr ; no funky axis conversion here
04B5C2 32 EC B1 04 0539*      ld (xvel),a
04B5C6 AF          0540*      xor a
04B5C7             0541*  @A:
04B5C7             0542*  
04B5C7             0543*  ; 51 D player moves right
04B5C7 DD CB 06 56 0544*      bit 2,(ix+6)
04B5CB 28 0C       0545*      jr z,@D
04B5CD 16 01       0546*      ld d,speed_plyr ; no funky axis conversion here
04B5CF 3A EC B1 04 0547*      ld a,(xvel)
04B5D3 82          0548*      add a,d
04B5D4 32 EC B1 04 0549*      ld (xvel),a
04B5D8 AF          0550*      xor a
04B5D9             0551*  @D:
04B5D9             0552*  
04B5D9             0553*  ; 26 Left player rotates anti-clockwise
04B5D9 DD CB 03 4E 0554*      bit 1,(ix+3)
04B5DD 28 06       0555*      jr z,@Left
04B5DF 21 F2 B1 04 0556*      ld hl,avel
04B5E3 35          0557*      dec (hl)
04B5E4 AF          0558*      xor a
04B5E5             0559*  @Left:
04B5E5             0560*  
04B5E5             0561*  ; 122 Right player rotates clockwise
04B5E5 DD CB 0F 4E 0562*      bit 1,(ix+15)
04B5E9 28 06       0563*      jr z,@Right
04B5EB 21 F2 B1 04 0564*      ld hl,avel
04B5EF 34          0565*      inc (hl)
04B5F0 AF          0566*      xor a
04B5F1             0567*  @Right:
04B5F1             0568*  
04B5F1             0569*  ; KEYPRESS DETECTION DONE
04B5F1 A7          0570*      and a ; this will zero if player pressed a movement key
04B5F2 C0          0571*      ret nz ; non zero so no key pressed
04B5F3             0572*  ; check move timer
04B5F3 FD 21 25 B2 0573*      ld iy,plyr_move_timer
       04          
04B5F8 CD 51 C0 04 0574*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B5FC F0          0575*      ret p ; time left on timer so no movement
04B5FD             0576*  ; reset_move_timer
04B5FD 21 1E 00 00 0577*      ld hl,plyr_move_rate
04B601 FD 21 25 B2 0578*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04B606 CD 46 C0 04 0579*      call timestamp_tmr_set
04B60A             0580*  ; move player according to velocities set by keypresses
04B60A ED 5B EC B1 0581*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04B60F 3A F2 B1 04 0582*      ld a,(avel)
04B613 21 E8 B1 04 0583*      ld hl,orientation
04B617 86          0584*      add a,(hl)
04B618 E6 03       0585*      and 0x03 ; modulo 4
04B61A 77          0586*      ld (hl),a
04B61B CD 01 66 04 0587*      call trans_dx_dy ; d = dy, e = dx
04B61F ED 53 F0 B1 0588*      ld (dx),de
       04          
04B624 3A E9 B1 04 0589*      ld a,(cur_x)
04B628 83          0590*      add a,e
04B629 5F          0591*      ld e,a
04B62A 3A EA B1 04 0592*      ld a,(cur_y)
04B62E 82          0593*      add a,d
04B62F 57          0594*      ld d,a
04B630 ED 53 EC B1 0595*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04B635 CD 9D 65 04 0596*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04B639             0597*  ; check whether target cell contains a sprite
04B639 DD 7E 03    0598*      ld a,(ix+map_sprite_id)
04B63C FE FF       0599*      cp 255 ; value if not sprite
04B63E 28 0A       0600*      jr z,@not_sprite
04B640             0601*  ; is a sprite so run its "use" behavior routine
04B640 CD 83 9F 04 0602*      call sprite_set_pointer
04B644 3E 01       0603*      ld a,sp_use
04B646 CD 51 A0 04 0604*      call do_sprite_behavior
04B64A             0605*  ; fall through because we still need to check out what's going on in the target cell
04B64A             0606*  @not_sprite:
04B64A ED 5B EC B1 0607*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04B64F             0608*  ; read map type/status mask from target cell
04B64F DD 7E 00    0609*      ld a,(ix+map_type_status)
04B652 47          0610*      ld b,a ; b = target cell type/status
04B653             0611*  ; branch on the values in the bitmask
04B653 3E 80       0612*      ld a,cell_is_door
04B655 A0          0613*      and b
04B656 20 06       0614*      jr nz,@door
04B658 3E 40       0615*      ld a,cell_is_wall
04B65A A0          0616*      and b
04B65B C0          0617*      ret nz ; can't move thru walls
04B65C 18 2B       0618*      jr @move_it ; if it wasn't a wall or door, move as normal
04B65E             0619*  @door:
04B65E ED 5B F0 B1 0620*      ld de,(dx) ; d = dy, e = dx
       04          
04B663 CD EF 65 04 0621*      call get_dir_from_dy_dx ; a is direction of attempted movement
04B667 F5          0622*      push af
04B668 16 02       0623*      ld d,2 ; 1 past the door in the movement direction
04B66A 5F          0624*      ld e,a
04B66B CD C2 65 04 0625*      call get_dx_dy
04B66F ED 53 F0 B1 0626*      ld (dx),de
       04          
04B674 F1          0627*      pop af
04B675 5F          0628*      ld e,a
04B676 16 02       0629*      ld d,2
04B678 ED 4B E9 B1 0630*      ld bc,(cur_x)
       04          
04B67D CD 8F 65 04 0631*      call get_neighbor ; ix points to cell defs/status, a is target cell current obj_id
04B681 DD 7E 00    0632*      ld a,(ix+map_type_status)
04B684 47          0633*      ld b,a ; b = target cell type/status
04B685 3E 40       0634*      ld a,cell_is_wall
04B687 A0          0635*      and b
04B688 C0          0636*      ret nz ; can't move thru walls
04B689             0637*      ; fall through to @move_it
04B689             0638*  @move_it:
04B689             0639*  ; we are cleared for movement so update player position
04B689 11 00 00 00 0640*      ld de,0 ; make sure deu is zero
04B68D ED 4B F0 B1 0641*      ld bc,(dx) ; b = dy, c = dx
       04          
04B692 3A E9 B1 04 0642*      ld a,(cur_x)
04B696 81          0643*      add a,c
04B697 5F          0644*      ld e,a
04B698 32 E9 B1 04 0645*      ld (cur_x),a
04B69C 3A EA B1 04 0646*      ld a,(cur_y)
04B6A0 80          0647*      add a,b
04B6A1 57          0648*      ld d,a
04B6A2 32 EA B1 04 0649*      ld (cur_y),a
04B6A6 C9          0650*      ret
04B6A7             0027   	include "src/asm/maths.asm"
04B6A7 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04B6AB 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04B6AF             0003*  
04B6AF             0004*  ; set bcd values in a scratch memory address from registers bcde
04B6AF             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04B6AF             0006*  ; destroys ; hl
04B6AF             0007*  set_bcd:
04B6AF 73          0008*      ld (hl),e
04B6B0 23          0009*      inc hl
04B6B1 72          0010*      ld (hl),d
04B6B2 23          0011*      inc hl
04B6B3 71          0012*      ld (hl),c
04B6B4 23          0013*      inc hl
04B6B5 70          0014*      ld (hl),b
04B6B6 C9          0015*      ret
04B6B7             0016*  
04B6B7             0017*  ; load bcd values from a scratch memory address to bcde
04B6B7             0018*  ; input: hl; scratch address
04B6B7             0019*  ; output: bcde; 8-place bcd number
04B6B7             0020*  ; destroys: hl
04B6B7             0021*  get_bcd:
04B6B7 5E          0022*      ld e,(hl)
04B6B8 23          0023*      inc hl
04B6B9 56          0024*      ld d,(hl)
04B6BA 23          0025*      inc hl
04B6BB 4E          0026*      ld c,(hl)
04B6BC 23          0027*      inc hl
04B6BD 46          0028*      ld b,(hl)
04B6BE C9          0029*      ret
04B6BF             0030*  
04B6BF             0031*  ; BCD addition
04B6BF             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B6BF             0033*  ;       a is the number of bytes holding each number (number of places/2)
04B6BF             0034*  ; outputs: (hl) + (de) --> (hl)
04B6BF             0035*  ; destroys: a,b,de,hl
04B6BF             0036*  add_bcd:
04B6BF 47          0037*      ld b,a ; loop counter
04B6C0 AF          0038*      xor a ; reset a, clear carry flag
04B6C1             0039*  adcec:
04B6C1 1A          0040*      ld a,(de) ; addend to acc
04B6C2 8E          0041*      adc a,(hl) ; add (hl) to acc
04B6C3 27          0042*      daa ; adjust result to bcd
04B6C4 77          0043*      ld (hl),a ; store result
04B6C5 23          0044*      inc hl ; advance memory pointers
04B6C6 13          0045*      inc de
04B6C7 10 F8       0046*      djnz adcec ; loop until b == 0
04B6C9 C9          0047*      ret
04B6CA             0048*  
04B6CA             0049*  ; BCD subtraction
04B6CA             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B6CA             0051*  ;       a is the number of bytes holding each number (number of places/2)
04B6CA             0052*  ; outputs: (hl) - (de) --> (hl)
04B6CA             0053*  ; destroys: a,b,de,hl
04B6CA             0054*  sub_bcd:
04B6CA 47          0055*      ld b,a ; loop counter
04B6CB AF          0056*      xor a ; reset a,clear carry flag
04B6CC             0057*  subdec:
04B6CC 1A          0058*      ld a,(de) ; subtrahend to acc
04B6CD 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04B6CE 27          0060*      daa ; adjust result to bcd
04B6CF 77          0061*      ld (hl),a ; store result
04B6D0 23          0062*      inc hl ; advance memory pointers
04B6D1 13          0063*      inc de
04B6D2 10 F8       0064*      djnz subdec ; loop until b == 0
04B6D4 C9          0065*      ret
04B6D5             0066*  
04B6D5             0067*  ; http://www.z80.info/pseudo-random.txt
04B6D5             0068*  rand_8:
04B6D5 C5          0069*      push bc
04B6D6 3A E9 B6 04 0070*      ld a,(r_seed)
04B6DA 4F          0071*      ld c,a
04B6DB             0072*  
04B6DB 0F          0073*      rrca ; multiply by 32
04B6DC 0F          0074*      rrca
04B6DD 0F          0075*      rrca
04B6DE EE 1F       0076*      xor 0x1f
04B6E0             0077*  
04B6E0 81          0078*      add a,c
04B6E1 DE FF       0079*      sbc a,255 ; carry
04B6E3             0080*  
04B6E3 32 E9 B6 04 0081*      ld (r_seed),a
04B6E7 C1          0082*      pop bc
04B6E8 C9          0083*      ret
04B6E9 50          0084*  r_seed: defb $50
04B6EA             0028   	include "src/asm/img_load.asm"
04B6EA 00 00 00    0001*  cur_file_idx: dl 0
04B6ED 00 00 00    0002*  cur_filename: dl 0
04B6F0 00 00 00    0003*  cur_buffer_id: dl 0
04B6F3 00 00 00    0004*  cur_buffer_id_lut: dl 0
04B6F6 00 00 00    0005*  cur_load_jump_table: dl 0
04B6F9             0006*  
04B6F9             0007*  img_load_init:
04B6F9             0008*  ; initialize bj's position parameters
04B6F9 21 00 00 00 0009*  	ld hl,0
04B6FD 22 47 B8 04 0010*  	ld (bj_yvel),hl
04B701             0011*  
04B701 21 2D 00 00 0012*      ld hl,45
04B705 22 4A B8 04 0013*  	ld (bj_y_cur),hl
04B709 22 4D B8 04 0014*  	ld (bj_y_min),hl
04B70D 22 50 B8 04 0015*      ld (bj_y_max),hl
04B711             0016*  
04B711 21 01 00 00 0017*  	ld hl,1
04B715 22 3B B8 04 0018*  	ld (bj_xvel),hl
04B719             0019*  
04B719 21 0A 00 00 0020*  	ld hl,10
04B71D 22 3E B8 04 0021*  	ld (bj_x_cur),hl
04B721 22 41 B8 04 0022*  	ld (bj_x_min),hl
04B725             0023*  
04B725 21 C8 00 00 0024*  	ld hl,320-120
04B729 22 44 B8 04 0025*  	ld (bj_x_max),hl
04B72D             0026*  
04B72D C9          0027*      ret
04B72E             0028*  
04B72E             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04B72E             0030*  img_load_main:
04B72E 21 00 00 00 0031*      ld hl,0
04B732 22 EA B6 04 0032*      ld (cur_file_idx),hl
04B736             0033*  img_load_main_loop:
04B736             0034*  ; back up loop counter
04B736 C5          0035*      push bc
04B737             0036*  ; load the next panel
04B737 CD 9F B7 04 0037*      call load_next_panel
04B73B             0038*  ; draw all the things
04B73B CD 53 B8 04 0039*      call tmp_draw_all_the_things
04B73F             0040*  ; draw the most recently loaded panel
04B73F 2A F0 B6 04 0041*  	ld hl,(cur_buffer_id)
04B743 CD D7 A9 04 0042*  	call vdu_buff_select
04B747 01 00 00 00 0043*  	ld bc,0
04B74B 11 00 00 00 0044*  	ld de,0
04B74F CD A8 AB 04 0045*  	call vdu_plot_bmp
04B753             0046*  ; move bj
04B753 CD DB B7 04 0047*  	call move_bj
04B757             0048*  ; print welcome message
04B757 DD 21 72 7C 0049*  	ld ix,font_itc_honda
       04          
04B75C 21 BD C0 04 0050*  	ld hl,hello_world
04B760 01 20 00 00 0051*  	ld bc,32
04B764 11 02 00 00 0052*  	ld de,2
04B768 CD 7A 65 04 0053*  	call font_bmp_print
04B76C             0054*  ; print current filename
04B76C CD 6E A8 04 0055*  	call vdu_cls
04B770 2A ED B6 04 0056*  	ld hl,(cur_filename)
04B774 CD 6D AE 04 0057*  	call printString
04B778 CD 82 AE 04 0058*  	call printNewLine
04B77C             0059*  
04B77C             0060*  ; print current load stopwatch
04B77C 21 DF C0 04 0061*  	ld hl,loading_time
04B780 CD 6D AE 04 0062*  	call printString
04B784 CD 6F C0 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04B788 CD BB AE 04 0064*  	call printDec
04B78C             0065*  
04B78C             0066*  ; flip screen
04B78C CD 3D AA 04 0067*      call vdu_flip
04B790             0068*  ; decrement loop counter
04B790 C1          0069*      pop bc
04B791 0B          0070*  	dec bc
04B792             0071*  ; ; DEBUG: DUMP REGISTERS
04B792             0072*  ; 	push bc
04B792             0073*  ; 	call dumpRegistersHex
04B792             0074*  ; 	call vdu_flip
04B792             0075*  ; 	pop bc
04B792             0076*  ; ; END DEBUG
04B792 79          0077*      ld a,c
04B793 B7          0078*      or a
04B794 C2 36 B7 04 0079*      jp nz,img_load_main_loop
04B798 78          0080*      ld a,b
04B799 B7          0081*      or a
04B79A C2 36 B7 04 0082*      jp nz,img_load_main_loop
04B79E C9          0083*      ret
04B79F             0084*  
04B79F             0085*  load_next_panel:
04B79F             0086*  ; look up the load routine for the current file index
04B79F 2A EA B6 04 0087*  	ld hl,(cur_file_idx)
04B7A3 29          0088*  	add hl,hl ; multiply current index by 2 ...
04B7A4 ED 5B EA B6 0089*  	ld de,(cur_file_idx)
       04          
04B7A9 19          0090*  	add hl,de ; ... now by 3
04B7AA ED 5B F6 B6 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04B7AF 19          0092*  	add hl,de
04B7B0 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04B7B2 22 B7 B7 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04B7B6             0095*  @jump_addr:
04B7B6 CD 00 00 00 0096*  	call 0 ; call the panel load routine
04B7BA             0097*  ; look up the buffer id for the current file
04B7BA 2A EA B6 04 0098*  	ld hl,(cur_file_idx)
04B7BE 29          0099*  	add hl,hl ; multiply current index by 2 ...
04B7BF ED 5B EA B6 0100*  	ld de,(cur_file_idx)
       04          
04B7C4 19          0101*  	add hl,de ; ... now by 3
04B7C5 ED 5B F3 B6 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04B7CA 19          0103*  	add hl,de
04B7CB ED 27       0104*  	ld hl,(hl)
04B7CD 22 F0 B6 04 0105*  	ld (cur_buffer_id),hl
04B7D1             0106*  ; bump the current file index
04B7D1 2A EA B6 04 0107*  	ld hl,(cur_file_idx)
04B7D5 23          0108*  	inc hl
04B7D6 22 EA B6 04 0109*  	ld (cur_file_idx),hl
04B7DA C9          0110*  	ret
04B7DB             0111*  
04B7DB             0112*  move_bj:
04B7DB             0113*  ; activate bj bitmap
04B7DB 21 00 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04B7DF CD D7 A9 04 0115*  	call vdu_buff_select
04B7E3             0116*  ; update position based on velocity parameters
04B7E3 2A 3E B8 04 0117*  	ld hl, (bj_x_cur)
04B7E7 ED 5B 3B B8 0118*  	ld de, (bj_xvel)
       04          
04B7EC 19          0119*  	add hl, de
04B7ED 22 3E B8 04 0120*  	ld (bj_x_cur), hl
04B7F1 EB          0121*  	ex de,hl ; store x_cur in de
04B7F2             0122*  ; check if we're < x_min
04B7F2 2A 41 B8 04 0123*  	ld hl,(bj_x_min)
04B7F6 AF          0124*  	xor a ; clear carry
04B7F7 ED 52       0125*  	sbc hl,de ; x_min - x_cur
04B7F9 F2 17 B8 04 0126*  	jp p, move_bj_x_min
04B7FD             0127*  ; check if we're > x_max
04B7FD 2A 44 B8 04 0128*  	ld hl,(bj_x_max)
04B801 AF          0129*  	xor a ; clear carry
04B802 ED 52       0130*  	sbc hl,de ; x_max - x_cur
04B804 FA 29 B8 04 0131*  	jp m, move_bj_x_max
04B808             0132*  ; if not at either boundary, fall through to draw bj's
04B808             0133*  draw_bj:
04B808 ED 4B 3E B8 0134*  	ld bc,(bj_x_cur)
       04          
04B80D ED 5B 4A B8 0135*  	ld de,(bj_y_cur)
       04          
04B812 CD A8 AB 04 0136*  	call vdu_plot_bmp
04B816 C9          0137*  	ret
04B817             0138*  move_bj_x_min:
04B817 21 01 00 00 0139*  	ld hl,1
04B81B 22 3B B8 04 0140*  	ld (bj_xvel),hl
04B81F 2A 41 B8 04 0141*  	ld hl,(bj_x_min)
04B823 22 3E B8 04 0142*  	ld (bj_x_cur),hl
04B827 18 DF       0143*  	jr draw_bj
04B829             0144*  move_bj_x_max:
04B829 21 FF FF FF 0145*  	ld hl,-1
04B82D 22 3B B8 04 0146*  	ld (bj_xvel),hl
04B831 2A 44 B8 04 0147*  	ld hl,(bj_x_max)
04B835 22 3E B8 04 0148*  	ld (bj_x_cur),hl
04B839 18 CD       0149*  	jr draw_bj
04B83B 00 00 00    0150*  bj_xvel: dl 0
04B83E 00 00 00    0151*  bj_x_cur: dl 0
04B841 00 00 00    0152*  bj_x_min: dl 0
04B844 00 00 00    0153*  bj_x_max: dl 0
04B847             0154*  
04B847 00 00 00    0155*  bj_yvel: dl 0
04B84A 00 00 00    0156*  bj_y_cur: dl 0
04B84D 00 00 00    0157*  bj_y_min: dl 0
04B850 00 00 00    0158*  bj_y_max: dl 0
04B853             0159*  
04B853             0160*  tmp_draw_all_the_things:
04B853 21 06 20 00 0161*      ld hl,BUF_UI_SPLASH
04B857 CD D7 A9 04 0162*      call vdu_buff_select
04B85B 01 00 00 00 0163*      ld bc,0
04B85F 11 00 00 00 0164*      ld de,0
04B863 CD A8 AB 04 0165*      call vdu_plot_bmp
04B867 C9          0166*  	ret
04B868             0167*  
04B868             0168*  ; load an uncompressed rgba2222 image file to a buffer
04B868             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B868             0170*  vdu_load_img:
04B868             0171*  ; back up image dimension parameters
04B868 C5          0172*  	push bc
04B869 D5          0173*  	push de
04B86A             0174*  ; load the image
04B86A CD CD C2 04 0175*  	call vdu_load_buffer_from_file
04B86E             0176*  ; now make it a bitmap
04B86E D1          0177*  	pop de
04B86F C1          0178*  	pop bc
04B870 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04B872 C3 EC A9 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04B876             0181*  
04B876             0182*  ; load a compressed rgba2222 image file to a buffer
04B876             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B876             0184*  vdu_load_img_cmp:
04B876             0185*  ; back up image dimension parameters
04B876 C5          0186*  	push bc
04B877 D5          0187*  	push de
04B878             0188*  ; back up the buffer id
04B878 E5          0189*  	push hl
04B879             0190*  ; load the image
04B879 CD CD C2 04 0191*  	call vdu_load_buffer_from_file
04B87D             0192*  ; decompress the buffer
04B87D E1          0193*  	pop hl ; bufferId
04B87E CD 4B AA 04 0194*  	call vdu_decompress_buffer
04B882             0195*  ; now make it a bitmap
04B882 D1          0196*  	pop de ; image height
04B883 C1          0197*  	pop bc ; image width
04B884 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04B886 C3 EC A9 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04B88A             0029   	include "src/asm/sfx.asm"
04B88A             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04B88A             0002*  
04B88A             0003*  SFX_num_buffers: equ 22
04B88A             0004*  ; SFX buffer ids:
04B88A             0005*  BUF_ACHTUNG: equ 0xFB00
04B88A             0006*  BUF_AHH: equ 0xFB01
04B88A             0007*  BUF_AUGH: equ 0xFB02
04B88A             0008*  BUF_AYEE: equ 0xFB03
04B88A             0009*  BUF_AYEE_HIGH: equ 0xFB04
04B88A             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04B88A             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04B88A             0012*  BUF_DOG_YELP: equ 0xFB07
04B88A             0013*  BUF_EXPLODE: equ 0xFB08
04B88A             0014*  BUF_GOT_TREASURE: equ 0xFB09
04B88A             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04B88A             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04B88A             0017*  BUF_KNIFE: equ 0xFB0C
04B88A             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04B88A             0019*  BUF_OOF: equ 0xFB0E
04B88A             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04B88A             0021*  BUF_SCREAM: equ 0xFB10
04B88A             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04B88A             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04B88A             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04B88A             0025*  BUF_UGH: equ 0xFB14
04B88A             0026*  BUF_WILHELM: equ 0xFB15
04B88A             0027*  
04B88A             0028*  ; SFX buffer id reverse lookup:
04B88A             0029*  SFX_buffer_id_lut:
04B88A 00 FB 00    0030*  	dl BUF_ACHTUNG
04B88D 01 FB 00    0031*  	dl BUF_AHH
04B890 02 FB 00    0032*  	dl BUF_AUGH
04B893 03 FB 00    0033*  	dl BUF_AYEE
04B896 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04B899 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04B89C 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04B89F 07 FB 00    0037*  	dl BUF_DOG_YELP
04B8A2 08 FB 00    0038*  	dl BUF_EXPLODE
04B8A5 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04B8A8 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04B8AB 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04B8AE 0C FB 00    0042*  	dl BUF_KNIFE
04B8B1 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04B8B4 0E FB 00    0044*  	dl BUF_OOF
04B8B7 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04B8BA 10 FB 00    0046*  	dl BUF_SCREAM
04B8BD 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04B8C0 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04B8C3 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04B8C6 14 FB 00    0050*  	dl BUF_UGH
04B8C9 15 FB 00    0051*  	dl BUF_WILHELM
04B8CC             0052*  
04B8CC             0053*  ; SFX duration lookup:
04B8CC             0054*  SFX_duration_lut:
04B8CC 58 03       0055*  	dw 856 ; ACHTUNG
04B8CE 91 01       0056*  	dw 401 ; AHH
04B8D0 FC 02       0057*  	dw 764 ; AUGH
04B8D2 E6 01       0058*  	dw 486 ; AYEE
04B8D4 40 04       0059*  	dw 1088 ; AYEE_HIGH
04B8D6 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04B8D8 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04B8DA B0 01       0062*  	dw 432 ; DOG_YELP
04B8DC 13 05       0063*  	dw 1299 ; EXPLODE
04B8DE A7 05       0064*  	dw 1447 ; GOT_TREASURE
04B8E0 24 01       0065*  	dw 292 ; GUN_EMPTY
04B8E2 BA 01       0066*  	dw 442 ; GUN_RELOAD
04B8E4 F2 00       0067*  	dw 242 ; KNIFE
04B8E6 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04B8E8 CE 03       0069*  	dw 974 ; OOF
04B8EA 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04B8EC E0 02       0071*  	dw 736 ; SCREAM
04B8EE B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04B8F0 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04B8F2 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04B8F4 77 01       0075*  	dw 375 ; UGH
04B8F6 FD 04       0076*  	dw 1277 ; WILHELM
04B8F8             0077*  
04B8F8             0078*  ; SFX load routines jump table:
04B8F8             0079*  SFX_load_routines_table:
04B8F8 3A B9 04    0080*  	dl load_sfx_ACHTUNG
04B8FB 5C B9 04    0081*  	dl load_sfx_AHH
04B8FE 7E B9 04    0082*  	dl load_sfx_AUGH
04B901 A0 B9 04    0083*  	dl load_sfx_AYEE
04B904 C2 B9 04    0084*  	dl load_sfx_AYEE_HIGH
04B907 E4 B9 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04B90A 06 BA 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04B90D 28 BA 04    0087*  	dl load_sfx_DOG_YELP
04B910 4A BA 04    0088*  	dl load_sfx_EXPLODE
04B913 6C BA 04    0089*  	dl load_sfx_GOT_TREASURE
04B916 8E BA 04    0090*  	dl load_sfx_GUN_EMPTY
04B919 B0 BA 04    0091*  	dl load_sfx_GUN_RELOAD
04B91C D2 BA 04    0092*  	dl load_sfx_KNIFE
04B91F F4 BA 04    0093*  	dl load_sfx_MEIN_LEBEN
04B922 16 BB 04    0094*  	dl load_sfx_OOF
04B925 38 BB 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04B928 5A BB 04    0096*  	dl load_sfx_SCREAM
04B92B 7C BB 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04B92E 9E BB 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04B931 C0 BB 04    0099*  	dl load_sfx_SHOT_PISTOL
04B934 E2 BB 04    0100*  	dl load_sfx_UGH
04B937 04 BC 04    0101*  	dl load_sfx_WILHELM
04B93A             0102*  
04B93A             0103*  ; Import sfx .raw files and load them into VDP buffers
04B93A             0104*  
04B93A             0105*  load_sfx_ACHTUNG:
04B93A 21 26 BC 04 0106*  	ld hl,FACHTUNG
04B93E 22 ED B6 04 0107*  	ld (cur_filename),hl
04B942 11 1A C3 04 0108*  	ld de,filedata
04B946 01 00 00 01 0109*  	ld bc,65536
04B94A 3E 01       0110*  	ld a,mos_load
04B94C 5B CF       0111*  	RST.LIL 08h
04B94E 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04B952 DD 21 3A 38 0113*  	ld ix,14394
       00          
04B957 CD 61 AE 04 0114*  	call vdu_load_sfx
04B95B C9          0115*  	ret
04B95C             0116*  
04B95C             0117*  load_sfx_AHH:
04B95C 21 36 BC 04 0118*  	ld hl,FAHH
04B960 22 ED B6 04 0119*  	ld (cur_filename),hl
04B964 11 1A C3 04 0120*  	ld de,filedata
04B968 01 00 00 01 0121*  	ld bc,65536
04B96C 3E 01       0122*  	ld a,mos_load
04B96E 5B CF       0123*  	RST.LIL 08h
04B970 21 01 FB 00 0124*  	ld hl,BUF_AHH
04B974 DD 21 63 1A 0125*  	ld ix,6755
       00          
04B979 CD 61 AE 04 0126*  	call vdu_load_sfx
04B97D C9          0127*  	ret
04B97E             0128*  
04B97E             0129*  load_sfx_AUGH:
04B97E 21 42 BC 04 0130*  	ld hl,FAUGH
04B982 22 ED B6 04 0131*  	ld (cur_filename),hl
04B986 11 1A C3 04 0132*  	ld de,filedata
04B98A 01 00 00 01 0133*  	ld bc,65536
04B98E 3E 01       0134*  	ld a,mos_load
04B990 5B CF       0135*  	RST.LIL 08h
04B992 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04B996 DD 21 39 32 0137*  	ld ix,12857
       00          
04B99B CD 61 AE 04 0138*  	call vdu_load_sfx
04B99F C9          0139*  	ret
04B9A0             0140*  
04B9A0             0141*  load_sfx_AYEE:
04B9A0 21 4F BC 04 0142*  	ld hl,FAYEE
04B9A4 22 ED B6 04 0143*  	ld (cur_filename),hl
04B9A8 11 1A C3 04 0144*  	ld de,filedata
04B9AC 01 00 00 01 0145*  	ld bc,65536
04B9B0 3E 01       0146*  	ld a,mos_load
04B9B2 5B CF       0147*  	RST.LIL 08h
04B9B4 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04B9B8 DD 21 00 20 0149*  	ld ix,8192
       00          
04B9BD CD 61 AE 04 0150*  	call vdu_load_sfx
04B9C1 C9          0151*  	ret
04B9C2             0152*  
04B9C2             0153*  load_sfx_AYEE_HIGH:
04B9C2 21 5C BC 04 0154*  	ld hl,FAYEE_HIGH
04B9C6 22 ED B6 04 0155*  	ld (cur_filename),hl
04B9CA 11 1A C3 04 0156*  	ld de,filedata
04B9CE 01 00 00 01 0157*  	ld bc,65536
04B9D2 3E 01       0158*  	ld a,mos_load
04B9D4 5B CF       0159*  	RST.LIL 08h
04B9D6 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04B9DA DD 21 77 47 0161*  	ld ix,18295
       00          
04B9DF CD 61 AE 04 0162*  	call vdu_load_sfx
04B9E3 C9          0163*  	ret
04B9E4             0164*  
04B9E4             0165*  load_sfx_DOG_WOOF_DOUBLE:
04B9E4 21 6E BC 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04B9E8 22 ED B6 04 0167*  	ld (cur_filename),hl
04B9EC 11 1A C3 04 0168*  	ld de,filedata
04B9F0 01 00 00 01 0169*  	ld bc,65536
04B9F4 3E 01       0170*  	ld a,mos_load
04B9F6 5B CF       0171*  	RST.LIL 08h
04B9F8 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04B9FC DD 21 24 28 0173*  	ld ix,10276
       00          
04BA01 CD 61 AE 04 0174*  	call vdu_load_sfx
04BA05 C9          0175*  	ret
04BA06             0176*  
04BA06             0177*  load_sfx_DOG_WOOF_SINGLE:
04BA06 21 86 BC 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04BA0A 22 ED B6 04 0179*  	ld (cur_filename),hl
04BA0E 11 1A C3 04 0180*  	ld de,filedata
04BA12 01 00 00 01 0181*  	ld bc,65536
04BA16 3E 01       0182*  	ld a,mos_load
04BA18 5B CF       0183*  	RST.LIL 08h
04BA1A 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04BA1E DD 21 10 23 0185*  	ld ix,8976
       00          
04BA23 CD 61 AE 04 0186*  	call vdu_load_sfx
04BA27 C9          0187*  	ret
04BA28             0188*  
04BA28             0189*  load_sfx_DOG_YELP:
04BA28 21 9E BC 04 0190*  	ld hl,FDOG_YELP
04BA2C 22 ED B6 04 0191*  	ld (cur_filename),hl
04BA30 11 1A C3 04 0192*  	ld de,filedata
04BA34 01 00 00 01 0193*  	ld bc,65536
04BA38 3E 01       0194*  	ld a,mos_load
04BA3A 5B CF       0195*  	RST.LIL 08h
04BA3C 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04BA40 DD 21 60 1C 0197*  	ld ix,7264
       00          
04BA45 CD 61 AE 04 0198*  	call vdu_load_sfx
04BA49 C9          0199*  	ret
04BA4A             0200*  
04BA4A             0201*  load_sfx_EXPLODE:
04BA4A 21 AF BC 04 0202*  	ld hl,FEXPLODE
04BA4E 22 ED B6 04 0203*  	ld (cur_filename),hl
04BA52 11 1A C3 04 0204*  	ld de,filedata
04BA56 01 00 00 01 0205*  	ld bc,65536
04BA5A 3E 01       0206*  	ld a,mos_load
04BA5C 5B CF       0207*  	RST.LIL 08h
04BA5E 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04BA62 DD 21 48 55 0209*  	ld ix,21832
       00          
04BA67 CD 61 AE 04 0210*  	call vdu_load_sfx
04BA6B C9          0211*  	ret
04BA6C             0212*  
04BA6C             0213*  load_sfx_GOT_TREASURE:
04BA6C 21 BF BC 04 0214*  	ld hl,FGOT_TREASURE
04BA70 22 ED B6 04 0215*  	ld (cur_filename),hl
04BA74 11 1A C3 04 0216*  	ld de,filedata
04BA78 01 00 00 01 0217*  	ld bc,65536
04BA7C 3E 01       0218*  	ld a,mos_load
04BA7E 5B CF       0219*  	RST.LIL 08h
04BA80 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04BA84 DD 21 07 5F 0221*  	ld ix,24327
       00          
04BA89 CD 61 AE 04 0222*  	call vdu_load_sfx
04BA8D C9          0223*  	ret
04BA8E             0224*  
04BA8E             0225*  load_sfx_GUN_EMPTY:
04BA8E 21 D4 BC 04 0226*  	ld hl,FGUN_EMPTY
04BA92 22 ED B6 04 0227*  	ld (cur_filename),hl
04BA96 11 1A C3 04 0228*  	ld de,filedata
04BA9A 01 00 00 01 0229*  	ld bc,65536
04BA9E 3E 01       0230*  	ld a,mos_load
04BAA0 5B CF       0231*  	RST.LIL 08h
04BAA2 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04BAA6 DD 21 3F 13 0233*  	ld ix,4927
       00          
04BAAB CD 61 AE 04 0234*  	call vdu_load_sfx
04BAAF C9          0235*  	ret
04BAB0             0236*  
04BAB0             0237*  load_sfx_GUN_RELOAD:
04BAB0 21 E6 BC 04 0238*  	ld hl,FGUN_RELOAD
04BAB4 22 ED B6 04 0239*  	ld (cur_filename),hl
04BAB8 11 1A C3 04 0240*  	ld de,filedata
04BABC 01 00 00 01 0241*  	ld bc,65536
04BAC0 3E 01       0242*  	ld a,mos_load
04BAC2 5B CF       0243*  	RST.LIL 08h
04BAC4 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04BAC8 DD 21 0F 1D 0245*  	ld ix,7439
       00          
04BACD CD 61 AE 04 0246*  	call vdu_load_sfx
04BAD1 C9          0247*  	ret
04BAD2             0248*  
04BAD2             0249*  load_sfx_KNIFE:
04BAD2 21 F9 BC 04 0250*  	ld hl,FKNIFE
04BAD6 22 ED B6 04 0251*  	ld (cur_filename),hl
04BADA 11 1A C3 04 0252*  	ld de,filedata
04BADE 01 00 00 01 0253*  	ld bc,65536
04BAE2 3E 01       0254*  	ld a,mos_load
04BAE4 5B CF       0255*  	RST.LIL 08h
04BAE6 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04BAEA DD 21 F3 0F 0257*  	ld ix,4083
       00          
04BAEF CD 61 AE 04 0258*  	call vdu_load_sfx
04BAF3 C9          0259*  	ret
04BAF4             0260*  
04BAF4             0261*  load_sfx_MEIN_LEBEN:
04BAF4 21 07 BD 04 0262*  	ld hl,FMEIN_LEBEN
04BAF8 22 ED B6 04 0263*  	ld (cur_filename),hl
04BAFC 11 1A C3 04 0264*  	ld de,filedata
04BB00 01 00 00 01 0265*  	ld bc,65536
04BB04 3E 01       0266*  	ld a,mos_load
04BB06 5B CF       0267*  	RST.LIL 08h
04BB08 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04BB0C DD 21 81 35 0269*  	ld ix,13697
       00          
04BB11 CD 61 AE 04 0270*  	call vdu_load_sfx
04BB15 C9          0271*  	ret
04BB16             0272*  
04BB16             0273*  load_sfx_OOF:
04BB16 21 1A BD 04 0274*  	ld hl,FOOF
04BB1A 22 ED B6 04 0275*  	ld (cur_filename),hl
04BB1E 11 1A C3 04 0276*  	ld de,filedata
04BB22 01 00 00 01 0277*  	ld bc,65536
04BB26 3E 01       0278*  	ld a,mos_load
04BB28 5B CF       0279*  	RST.LIL 08h
04BB2A 21 0E FB 00 0280*  	ld hl,BUF_OOF
04BB2E DD 21 00 40 0281*  	ld ix,16384
       00          
04BB33 CD 61 AE 04 0282*  	call vdu_load_sfx
04BB37 C9          0283*  	ret
04BB38             0284*  
04BB38             0285*  load_sfx_SCHUSSTAFFEL:
04BB38 21 26 BD 04 0286*  	ld hl,FSCHUSSTAFFEL
04BB3C 22 ED B6 04 0287*  	ld (cur_filename),hl
04BB40 11 1A C3 04 0288*  	ld de,filedata
04BB44 01 00 00 01 0289*  	ld bc,65536
04BB48 3E 01       0290*  	ld a,mos_load
04BB4A 5B CF       0291*  	RST.LIL 08h
04BB4C 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04BB50 DD 21 63 26 0293*  	ld ix,9827
       00          
04BB55 CD 61 AE 04 0294*  	call vdu_load_sfx
04BB59 C9          0295*  	ret
04BB5A             0296*  
04BB5A             0297*  load_sfx_SCREAM:
04BB5A 21 3B BD 04 0298*  	ld hl,FSCREAM
04BB5E 22 ED B6 04 0299*  	ld (cur_filename),hl
04BB62 11 1A C3 04 0300*  	ld de,filedata
04BB66 01 00 00 01 0301*  	ld bc,65536
04BB6A 3E 01       0302*  	ld a,mos_load
04BB6C 5B CF       0303*  	RST.LIL 08h
04BB6E 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04BB72 DD 21 5E 30 0305*  	ld ix,12382
       00          
04BB77 CD 61 AE 04 0306*  	call vdu_load_sfx
04BB7B C9          0307*  	ret
04BB7C             0308*  
04BB7C             0309*  load_sfx_SHOT_GATLING_BURST:
04BB7C 21 4A BD 04 0310*  	ld hl,FSHOT_GATLING_BURST
04BB80 22 ED B6 04 0311*  	ld (cur_filename),hl
04BB84 11 1A C3 04 0312*  	ld de,filedata
04BB88 01 00 00 01 0313*  	ld bc,65536
04BB8C 3E 01       0314*  	ld a,mos_load
04BB8E 5B CF       0315*  	RST.LIL 08h
04BB90 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04BB94 DD 21 00 60 0317*  	ld ix,24576
       00          
04BB99 CD 61 AE 04 0318*  	call vdu_load_sfx
04BB9D C9          0319*  	ret
04BB9E             0320*  
04BB9E             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04BB9E 21 65 BD 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04BBA2 22 ED B6 04 0323*  	ld (cur_filename),hl
04BBA6 11 1A C3 04 0324*  	ld de,filedata
04BBAA 01 00 00 01 0325*  	ld bc,65536
04BBAE 3E 01       0326*  	ld a,mos_load
04BBB0 5B CF       0327*  	RST.LIL 08h
04BBB2 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BBB6 DD 21 C4 42 0329*  	ld ix,17092
       00          
04BBBB CD 61 AE 04 0330*  	call vdu_load_sfx
04BBBF C9          0331*  	ret
04BBC0             0332*  
04BBC0             0333*  load_sfx_SHOT_PISTOL:
04BBC0 21 84 BD 04 0334*  	ld hl,FSHOT_PISTOL
04BBC4 22 ED B6 04 0335*  	ld (cur_filename),hl
04BBC8 11 1A C3 04 0336*  	ld de,filedata
04BBCC 01 00 00 01 0337*  	ld bc,65536
04BBD0 3E 01       0338*  	ld a,mos_load
04BBD2 5B CF       0339*  	RST.LIL 08h
04BBD4 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04BBD8 DD 21 61 4B 0341*  	ld ix,19297
       00          
04BBDD CD 61 AE 04 0342*  	call vdu_load_sfx
04BBE1 C9          0343*  	ret
04BBE2             0344*  
04BBE2             0345*  load_sfx_UGH:
04BBE2 21 98 BD 04 0346*  	ld hl,FUGH
04BBE6 22 ED B6 04 0347*  	ld (cur_filename),hl
04BBEA 11 1A C3 04 0348*  	ld de,filedata
04BBEE 01 00 00 01 0349*  	ld bc,65536
04BBF2 3E 01       0350*  	ld a,mos_load
04BBF4 5B CF       0351*  	RST.LIL 08h
04BBF6 21 14 FB 00 0352*  	ld hl,BUF_UGH
04BBFA DD 21 A9 18 0353*  	ld ix,6313
       00          
04BBFF CD 61 AE 04 0354*  	call vdu_load_sfx
04BC03 C9          0355*  	ret
04BC04             0356*  
04BC04             0357*  load_sfx_WILHELM:
04BC04 21 A4 BD 04 0358*  	ld hl,FWILHELM
04BC08 22 ED B6 04 0359*  	ld (cur_filename),hl
04BC0C 11 1A C3 04 0360*  	ld de,filedata
04BC10 01 00 00 01 0361*  	ld bc,65536
04BC14 3E 01       0362*  	ld a,mos_load
04BC16 5B CF       0363*  	RST.LIL 08h
04BC18 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04BC1C DD 21 D7 53 0365*  	ld ix,21463
       00          
04BC21 CD 61 AE 04 0366*  	call vdu_load_sfx
04BC25 C9          0367*  	ret
04BC26             0368*  
04BC26             0369*  ; File name lookups:
04BC26 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04BC36 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04BC42 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04BC4F 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04BC5C 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04BC6E 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04BC86 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04BC9E 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04BCAF 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04BCBF 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04BCD4 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04BCE6 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04BCF9 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04BD07 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04BD1A 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04BD26 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04BD3B 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04BD4A 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BD65 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BD84 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04BD98 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04BDA4 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04BDB4             0392*  
04BDB4             0393*  ; Play sfx routines
04BDB4             0394*  
04BDB4             0395*  sfx_play_achtung:
04BDB4 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04BDB8 01 58 03 00 0397*  	ld bc,856
04BDBC C3 46 00 04 0398*  	jp vdu_play_sfx
04BDC0             0399*  
04BDC0             0400*  sfx_play_ahh:
04BDC0 21 01 FB 00 0401*  	ld hl,BUF_AHH
04BDC4 01 91 01 00 0402*  	ld bc,401
04BDC8 C3 46 00 04 0403*  	jp vdu_play_sfx
04BDCC             0404*  
04BDCC             0405*  sfx_play_augh:
04BDCC 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04BDD0 01 FC 02 00 0407*  	ld bc,764
04BDD4 C3 46 00 04 0408*  	jp vdu_play_sfx
04BDD8             0409*  
04BDD8             0410*  sfx_play_ayee:
04BDD8 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04BDDC 01 E6 01 00 0412*  	ld bc,486
04BDE0 C3 46 00 04 0413*  	jp vdu_play_sfx
04BDE4             0414*  
04BDE4             0415*  sfx_play_ayee_high:
04BDE4 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04BDE8 01 40 04 00 0417*  	ld bc,1088
04BDEC C3 46 00 04 0418*  	jp vdu_play_sfx
04BDF0             0419*  
04BDF0             0420*  sfx_play_dog_woof_double:
04BDF0 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BDF4 01 63 02 00 0422*  	ld bc,611
04BDF8 C3 46 00 04 0423*  	jp vdu_play_sfx
04BDFC             0424*  
04BDFC             0425*  sfx_play_dog_woof_single:
04BDFC 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04BE00 01 15 02 00 0427*  	ld bc,533
04BE04 C3 46 00 04 0428*  	jp vdu_play_sfx
04BE08             0429*  
04BE08             0430*  sfx_play_dog_yelp:
04BE08 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04BE0C 01 B0 01 00 0432*  	ld bc,432
04BE10 C3 46 00 04 0433*  	jp vdu_play_sfx
04BE14             0434*  
04BE14             0435*  sfx_play_explode:
04BE14 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04BE18 01 13 05 00 0437*  	ld bc,1299
04BE1C C3 46 00 04 0438*  	jp vdu_play_sfx
04BE20             0439*  
04BE20             0440*  sfx_play_got_treasure:
04BE20 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04BE24 01 A7 05 00 0442*  	ld bc,1447
04BE28 C3 46 00 04 0443*  	jp vdu_play_sfx
04BE2C             0444*  
04BE2C             0445*  sfx_play_gun_empty:
04BE2C 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04BE30 01 24 01 00 0447*  	ld bc,292
04BE34 C3 46 00 04 0448*  	jp vdu_play_sfx
04BE38             0449*  
04BE38             0450*  sfx_play_gun_reload:
04BE38 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04BE3C 01 BA 01 00 0452*  	ld bc,442
04BE40 C3 46 00 04 0453*  	jp vdu_play_sfx
04BE44             0454*  
04BE44             0455*  sfx_play_knife:
04BE44 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04BE48 01 F2 00 00 0457*  	ld bc,242
04BE4C C3 46 00 04 0458*  	jp vdu_play_sfx
04BE50             0459*  
04BE50             0460*  sfx_play_mein_leben:
04BE50 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04BE54 01 2E 03 00 0462*  	ld bc,814
04BE58 C3 46 00 04 0463*  	jp vdu_play_sfx
04BE5C             0464*  
04BE5C             0465*  sfx_play_oof:
04BE5C 21 0E FB 00 0466*  	ld hl,BUF_OOF
04BE60 01 CE 03 00 0467*  	ld bc,974
04BE64 C3 46 00 04 0468*  	jp vdu_play_sfx
04BE68             0469*  
04BE68             0470*  sfx_play_schusstaffel:
04BE68 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04BE6C 01 48 02 00 0472*  	ld bc,584
04BE70 C3 46 00 04 0473*  	jp vdu_play_sfx
04BE74             0474*  
04BE74             0475*  sfx_play_scream:
04BE74 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04BE78 01 E0 02 00 0477*  	ld bc,736
04BE7C C3 46 00 04 0478*  	jp vdu_play_sfx
04BE80             0479*  
04BE80             0480*  sfx_play_shot_gatling_burst:
04BE80 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04BE84 01 B6 05 00 0482*  	ld bc,1462
04BE88 C3 46 00 04 0483*  	jp vdu_play_sfx
04BE8C             0484*  
04BE8C             0485*  sfx_play_shot_machine_gun_burst:
04BE8C 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BE90 01 F9 03 00 0487*  	ld bc,1017
04BE94 C3 46 00 04 0488*  	jp vdu_play_sfx
04BE98             0489*  
04BE98             0490*  sfx_play_shot_pistol:
04BE98 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04BE9C 01 7C 04 00 0492*  	ld bc,1148
04BEA0 C3 46 00 04 0493*  	jp vdu_play_sfx
04BEA4             0494*  
04BEA4             0495*  sfx_play_ugh:
04BEA4 21 14 FB 00 0496*  	ld hl,BUF_UGH
04BEA8 01 77 01 00 0497*  	ld bc,375
04BEAC C3 46 00 04 0498*  	jp vdu_play_sfx
04BEB0             0499*  
04BEB0             0500*  sfx_play_wilhelm:
04BEB0 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04BEB4 01 FD 04 00 0502*  	ld bc,1277
04BEB8 C3 46 00 04 0503*  	jp vdu_play_sfx
04BEBC             0030   	include "src/asm/timer.asm"
04BEBC             0001*  ; Table 32. Timer Control Registers
04BEBC             0002*  ; this constant is the base address of the timer control registers
04BEBC             0003*  ; each timer takes three bytes:
04BEBC             0004*  ;   0: control register
04BEBC             0005*  ;   1: low byte of timer reset value
04BEBC             0006*  ;   2: high byte of timer reset value
04BEBC             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04BEBC             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04BEBC             0009*  TMR_CTL:     equ 80h
04BEBC             0010*  
04BEBC             0011*  ; Timer Control Register Bit Definitions
04BEBC             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04BEBC             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04BEBC             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04BEBC             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04BEBC             0016*                              ; the TMRx_CTL register is read.
04BEBC             0017*  
04BEBC             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04BEBC             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04BEBC             0020*  
04BEBC             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04BEBC             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04BEBC             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04BEBC             0024*                              ; written to the counter when the end-of-count value is reached.
04BEBC             0025*  
04BEBC             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04BEBC             0027*  CLK_DIV_256:  equ %00001100 ;
04BEBC             0028*  CLK_DIV_64:   equ %00001000 ;
04BEBC             0029*  CLK_DIV_16:   equ %00000100 ;
04BEBC             0030*  CLK_DIV_4:    equ %00000000 ;
04BEBC             0031*  
04BEBC             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04BEBC             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04BEBC             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04BEBC             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04BEBC             0036*                              ; programmer must ensure that this bit is set to 1 each time
04BEBC             0037*                              ; SINGLE-PASS mode is used.
04BEBC             0038*  
04BEBC             0039*  ; disable/enable the programmable reload timer
04BEBC             0040*  PRT_EN_0:     equ %00000000 ;
04BEBC             0041*  PRT_EN_1:     equ %00000001 ;
04BEBC             0042*  
04BEBC             0043*  ; Table 37. Timer Input Source Select Register
04BEBC             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04BEBC             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04BEBC             0046*  ;   00: System clock / CLK_DIV
04BEBC             0047*  ;   01: RTC / CLK_DIV
04BEBC             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04BEBC             0049*  ;   10: GPIO port B pin 1.
04BEBC             0050*  ;   11: GPIO port B pin 1.
04BEBC             0051*  TMR_ISS:   equ 92h ; register address
04BEBC             0052*  
04BEBC             0053*  ; Table 51. Real-Time Clock Control Register
04BEBC             0054*  RTC_CTRL: equ EDh ; register address
04BEBC             0055*  
04BEBC             0056*  ; alarm interrupt disable/enable
04BEBC             0057*  RTC_ALARM_0:    equ %00000000
04BEBC             0058*  RTC_ALARM_1:    equ %10000000
04BEBC             0059*  
04BEBC             0060*  ; interrupt on alarm disable/enable
04BEBC             0061*  RTC_INT_ENT_0:  equ %00000000
04BEBC             0062*  RTC_INT_ENT_1:  equ %01000000
04BEBC             0063*  
04BEBC             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04BEBC             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04BEBC             0066*  
04BEBC             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04BEBC             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04BEBC             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04BEBC             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04BEBC             0071*  
04BEBC             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04BEBC             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04BEBC             0074*  
04BEBC             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04BEBC             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04BEBC             0077*  
04BEBC             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04BEBC             0079*                                  ; RTC counter is enabled.
04BEBC             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04BEBC             0081*                                  ; RTC counter is disabled.
04BEBC             0082*  
04BEBC             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04BEBC             0084*  
04BEBC             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04BEBC             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04BEBC 00 00 00    0087*  prt_reload: dl 0x000000
04BEBF             0088*  
04BEBF             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04BEBF             0090*  ;          de = number PRT interrupts during test interval
04BEBF             0091*  prt_calibrate:
04BEBF CD C8 AA 04 0092*      call vdu_vblank
04BEC3             0093*  ; set a MOS timer
04BEC3 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04BEC7 FD 21 1A C0 0095*      ld iy,tmr_test
       04          
04BECC CD F8 BF 04 0096*      call tmr_set
04BED0             0097*  ; set a PRT timer
04BED0             0098*      ; ld hl,prt_reload_hardware
04BED0             0099*      ; ld hl,prt_reload_emulator
04BED0 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04BED4 22 BC BE 04 0101*      ld (prt_reload),hl
04BED8 CD 33 BF 04 0102*      call prt_set
04BEDC             0103*  @loop:
04BEDC             0104*  ; check time remaining on MOS timer
04BEDC CD 06 C0 04 0105*      call tmr_get
04BEE0 CA EA BE 04 0106*      jp z,@done ; time expired,so quit
04BEE4 FA EA BE 04 0107*      jp m,@done ; time past expiration (negative),so quit
04BEE8 18 F2       0108*      jr @loop
04BEEA             0109*  @done:
04BEEA ED 5B 81 BF 0110*      ld de,(prt_irq_counter)
       04          
04BEEF 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04BEF3 ED 43 BC BE 0112*      ld (prt_reload),bc
       04          
04BEF8 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04BEFC AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04BEFD 32 0A C1 04 0115*      ld (is_emulator),a
04BF01 ED 52       0116*      sbc hl,de
04BF03 21 31 C1 04 0117*      ld hl,on_hardware ; default message for running on hardware
04BF07 CA BF BE 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04BF0B F8          0119*      ret m ; negative result means we're on hardware
04BF0C 3C          0120*      inc a ; we're on emulator
04BF0D 32 0A C1 04 0121*      ld (is_emulator),a
04BF11 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04BF15 ED 43 BC BE 0123*      ld (prt_reload),bc
       04          
04BF1A 21 0B C1 04 0124*      ld hl,on_emulator
04BF1E C9          0125*      ret
04BF1F             0126*  
04BF1F 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04BF33             0128*  
04BF33             0129*  ; set PRT timer
04BF33             0130*  prt_set:
04BF33 21 00 00 00 0131*      ld hl,0
04BF37 22 81 BF 04 0132*      ld (prt_irq_counter),hl
04BF3B 2A BC BE 04 0133*      ld hl,(prt_reload)
04BF3F ED 29 84    0134*      out0 ($84),l
04BF42 ED 21 85    0135*  	out0 ($85),h
04BF45             0136*  ; disable timer
04BF45 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04BF47 ED 39 83    0138*  	out0 ($83),a
04BF4A             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04BF4A 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04BF4C ED 39 83    0141*  	out0 ($83),a
04BF4F C9          0142*      ret
04BF50             0143*  
04BF50             0144*  ; ===============================================
04BF50             0145*  ; PRT Timer Interrupt Handling
04BF50             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04BF50             0147*  ; -----------------------------------------------
04BF50             0148*  prt_irq_init:
04BF50             0149*      ; set up interrupt vector table 2
04BF50 21 00 00 00 0150*  	ld hl,0
04BF54 3A 0C 01 00 0151*  	ld a,($10c)
04BF58 6F          0152*  	ld l,a
04BF59 3A 0D 01 00 0153*  	ld a,($10d)
04BF5D 67          0154*  	ld h,a
04BF5E             0155*  
04BF5E             0156*  	; skip over CALL ($c3)
04BF5E 23          0157*  	inc hl
04BF5F             0158*  	; load address of jump into vector table 2 (in ram)
04BF5F ED 27       0159*  	ld hl,(hl)
04BF61             0160*  
04BF61             0161*  	; write CALL prt_irq_handler to vector table 2
04BF61 3E C3       0162*  	ld a,$c3
04BF63 77          0163*  	ld (hl),a
04BF64 23          0164*  	inc hl
04BF65 11 6C BF 04 0165*  	ld de,prt_irq_handler
04BF69 ED 1F       0166*  	ld (hl),de
04BF6B             0167*  
04BF6B C9          0168*      ret
04BF6C             0169*  
04BF6C             0170*  prt_irq_handler:
04BF6C F3          0171*  	di
04BF6D F5          0172*  	push af
04BF6E E5          0173*      push hl
04BF6F ED 38 83    0174*  	in0 a,($83)
04BF72 2A 81 BF 04 0175*  	ld hl,(prt_irq_counter)
04BF76 23          0176*  	inc hl
04BF77 22 81 BF 04 0177*  	ld (prt_irq_counter),hl
04BF7B E1          0178*      pop hl
04BF7C F1          0179*  	pop af
04BF7D FB          0180*  	ei
04BF7E 5B ED 4D    0181*  	reti.l
04BF81             0182*  
04BF81             0183*  prt_irq_counter:
04BF81 00 00 00    0184*  	.dl 0
04BF84             0185*  prt_irq_counter_saved:
04BF84 00 00 00    0186*      .dl 0
04BF87             0187*  
04BF87             0188*  prt_loop_reset:
04BF87 E5          0189*      push hl
04BF88 21 00 00 00 0190*  	ld hl,0
04BF8C 22 81 BF 04 0191*  	ld (prt_irq_counter),hl
04BF90 22 F2 BF 04 0192*      ld (prt_loop_counter),hl
04BF94 22 F5 BF 04 0193*      ld (prt_loops),hl
04BF98 CD 33 BF 04 0194*      call prt_set
04BF9C E1          0195*      pop hl
04BF9D C9          0196*      ret
04BF9E             0197*  
04BF9E             0198*  prt_loop_start:
04BF9E E5          0199*      push hl
04BF9F 21 00 00 00 0200*  	ld hl,0
04BFA3 22 81 BF 04 0201*  	ld (prt_irq_counter),hl
04BFA7 E1          0202*      pop hl
04BFA8 C9          0203*      ret
04BFA9             0204*  
04BFA9             0205*  prt_loop_stop:
04BFA9 E5          0206*      push hl
04BFAA D5          0207*      push de
04BFAB 2A 81 BF 04 0208*      ld hl,(prt_irq_counter)
04BFAF ED 5B F2 BF 0209*      ld de,(prt_loop_counter)
       04          
04BFB4 19          0210*      add hl,de
04BFB5 22 F2 BF 04 0211*      ld (prt_loop_counter),hl
04BFB9 21 00 00 00 0212*      ld hl,0
04BFBD 22 81 BF 04 0213*      ld (prt_irq_counter),hl
04BFC1 2A F5 BF 04 0214*      ld hl,(prt_loops)
04BFC5 23          0215*      inc hl
04BFC6 22 F5 BF 04 0216*      ld (prt_loops),hl
04BFCA D1          0217*      pop de
04BFCB E1          0218*      pop hl
04BFCC C9          0219*      ret
04BFCD             0220*  
04BFCD             0221*  ; inputs: bc = y,x text coordinates to print
04BFCD             0222*  prt_loop_print:
04BFCD F5          0223*      push af
04BFCE E5          0224*      push hl
04BFCF C5          0225*      push bc
04BFD0 D5          0226*      push de
04BFD1 DD E5       0227*      push ix
04BFD3 FD E5       0228*      push iy
04BFD5 CD AB A9 04 0229*      call vdu_move_cursor
04BFD9             0230*  
04BFD9 2A F2 BF 04 0231*      ld hl,(prt_loop_counter)
04BFDD CD BB AE 04 0232*      call printDec
04BFE1             0233*  
04BFE1 2A F5 BF 04 0234*      ld hl,(prt_loops)
04BFE5 CD BB AE 04 0235*      call printDec
04BFE9             0236*  
04BFE9 FD E1       0237*      pop iy
04BFEB DD E1       0238*      pop ix
04BFED D1          0239*      pop de
04BFEE C1          0240*      pop bc
04BFEF E1          0241*      pop hl
04BFF0 F1          0242*      pop af
04BFF1 C9          0243*      ret
04BFF2             0244*  
04BFF2             0245*  prt_loop_counter:
04BFF2 00 00 00    0246*      .dl 0
04BFF5             0247*  prt_loops:
04BFF5 00 00 00    0248*      .dl 0
04BFF8             0249*  
04BFF8             0250*  ; ===============================================
04BFF8             0251*  ; Timer functions
04BFF8             0252*  ; -----------------------------------------------
04BFF8             0253*  ; set a countdown timer
04BFF8             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04BFF8             0255*  ; returns: hl = current time
04BFF8             0256*  tmr_set:
04BFF8 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04BFFB             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04BFFB 3E 08       0001*M 			LD	A, function
04BFFD 5B CF       0002*M 			RST.LIL	08h
04BFFF DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04C002 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04C005 C9          0261*      ret
04C006             0262*  
04C006             0263*  ; gets time remaining on a countdown timer
04C006             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C006             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C006             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C006             0267*  tmr_get:
04C006             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04C006 3E 08       0001*M 			LD	A, function
04C008 5B CF       0002*M 			RST.LIL	08h
04C00A DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04C00D FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04C010 AF          0271*      xor a                   ; clear carry
04C011 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C013 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04C016 AF          0274*      xor a                   ; clear carry
04C017 ED 5A       0275*      adc hl,de               ; hl = time remaining
04C019             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C019 C9          0277*      ret
04C01A             0278*  
04C01A             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04C020             0280*  
04C020 00 00 00    0281*  timestamp_now: dl 0
04C023 00 00 00    0282*  timestamp_old: dl 0
04C026 00 00 00    0283*  timestamp_chg: dl 0
04C029             0284*  
04C029             0285*  ; update the global timestamp from the system clock
04C029             0286*  ; inputs: none
04C029             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04C029             0288*  ;          de = current time
04C029             0289*  ;          ix = pointer to syvars table
04C029             0290*  ; destroys: af,hl,de,ix
04C029             0291*  timestamp_tick:
04C029 ED 5B 20 C0 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04C02E ED 53 23 C0 0293*      ld (timestamp_old),de   ; save previous time
       04          
04C033             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04C033 3E 08       0001*M 			LD	A, function
04C035 5B CF       0002*M 			RST.LIL	08h
04C037 DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04C03A 22 20 C0 04 0296*      ld (timestamp_now),hl   ; save current time
04C03E AF          0297*      xor a                   ; clear carry
04C03F ED 52       0298*      sbc hl,de               ; hl = time elapsed
04C041 22 26 C0 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04C045 C9          0300*      ret
04C046             0301*  
04C046             0302*  ; set a countdown timer
04C046             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C046             0304*  ; requires: timestamp_tick to be called at least once before this function
04C046             0305*  ; returns: hl = current time
04C046             0306*  ; destroys: hl
04C046             0307*  timestamp_tmr_set:
04C046 FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04C049 2A 20 C0 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04C04D FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04C050 C9          0311*      ret
04C051             0312*  
04C051             0313*  ; gets time remaining on a countdown timer following the global timestamp
04C051             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C051             0315*  ; requires: timestamp_tick to be called at least once before this function
04C051             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C051             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C051             0318*  ; destroys: af,hl,de
04C051             0319*  timestamp_tmr_get:
04C051 ED 5B 20 C0 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04C056 FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04C059 AF          0322*      xor a                   ; clear carry
04C05A ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C05C FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04C05F AF          0325*      xor a                   ; clear carry
04C060 ED 5A       0326*      adc hl,de               ; hl = time remaining
04C062             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C062 C9          0328*      ret
04C063             0329*  
04C063             0330*  ; set a stopwatch
04C063             0331*  ; returns: hl = start time
04C063             0332*  ; destroys: hl,ix
04C063             0333*  stopwatch_set:
04C063             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04C063 3E 08       0001*M 			LD	A, function
04C065 5B CF       0002*M 			RST.LIL	08h
04C067 DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04C06A 22 7F C0 04 0336*      ld (stopwatch_started),hl            ; set start time
04C06E C9          0337*      ret
04C06F             0338*  
04C06F             0339*  ; gets time elapsed on a stopwatch
04C06F             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04C06F             0341*  ; destroys: af,hl,de,ix
04C06F             0342*  stopwatch_get:
04C06F             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04C06F 3E 08       0001*M 			LD	A, function
04C071 5B CF       0002*M 			RST.LIL	08h
04C073 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04C076 ED 5B 7F C0 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04C07B AF          0346*      xor a                   ; clear carry
04C07C ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04C07E C9          0348*      ret
04C07F             0349*  
04C07F             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04C082             0351*  
04C082             0352*  ; ------------------
04C082             0353*  ; delay routine
04C082             0354*  ; Author: Richard Turrnidge
04C082             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04C082             0356*  ; routine waits a fixed time,then returns
04C082             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04C082             0358*  ; eg. ld A,00000100b
04C082             0359*  
04C082             0360*  multiPurposeDelay:
04C082 F5          0361*      push af
04C083 C5          0362*      push bc
04C084 DD E5       0363*      push ix
04C086 47          0364*      ld b,a
04C087 3E 08       0365*      ld a,$08
04C089 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04C08B             0367*  
04C08B             0368*  waitLoop:
04C08B             0369*  
04C08B DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04C08E             0371*  
04C08E             0372*                                  ;   we check if bit set is same as last time we checked.
04C08E             0373*                                  ;   bit 0 - don't use
04C08E             0374*                                  ;   bit 1 - changes 64 times per second
04C08E             0375*                                  ;   bit 2 - changes 32 times per second
04C08E             0376*                                  ;   bit 3 - changes 16 times per second
04C08E             0377*  
04C08E             0378*                                  ;   bit 4 - changes 8 times per second
04C08E             0379*                                  ;   bit 5 - changes 4 times per second
04C08E             0380*                                  ;   bit 6 - changes 2 times per second
04C08E             0381*                                  ;   bit 7 - changes 1 times per second
04C08E A0          0382*      and b
04C08F 4F          0383*      ld c,a
04C090 3A A1 C0 04 0384*      ld a,(oldTimeStamp)
04C094 B9          0385*      cp c                        ; is A same as last value?
04C095 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04C097 79          0387*      ld a,c
04C098 32 A1 C0 04 0388*      ld (oldTimeStamp),a        ; set new value
04C09C             0389*  
04C09C DD E1       0390*      pop ix
04C09E C1          0391*      pop bc
04C09F F1          0392*      pop af
04C0A0 C9          0393*      ret
04C0A1             0394*  
04C0A1 00          0395*  oldTimeStamp:   .db 00h
04C0A2             0031   
04C0A2             0032   
04C0A2             0033   start:
04C0A2 F5          0034       push af
04C0A3 C5          0035       push bc
04C0A4 D5          0036       push de
04C0A5 DD E5       0037       push ix
04C0A7 FD E5       0038       push iy
04C0A9             0039   
04C0A9 CD 58 C1 04 0040   	call init ; Initialization code
04C0AD CD 79 C2 04 0041       call main ; Call the main function
04C0B1             0042   
04C0B1             0043   exit:
04C0B1             0044   
04C0B1 FD E1       0045       pop iy
04C0B3 DD E1       0046       pop ix
04C0B5 D1          0047       pop de
04C0B6 C1          0048       pop bc
04C0B7 F1          0049       pop af
04C0B8 21 00 00 00 0050       ld hl,0
04C0BC             0051   
04C0BC C9          0052       ret
04C0BD             0053   
04C0BD 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04C0D4 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04C0DF 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04C0ED 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04C10A 00          0058   is_emulator: defb 0
04C10B 52 75 6E 6E 0059   on_emulator: defb "Running on emulator, sound enabled.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2C 
       20 73 6F 75 
       6E 64 20 65 
       6E 61 62 6C 
       65 64 2E 0D 
       0A 00       
04C131 52 75 6E 6E 0060   on_hardware: defb "Running on hardware, sound disabled.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2C 
       20 73 6F 75 
       6E 64 20 64 
       69 73 61 62 
       6C 65 64 2E 
       0D 0A 00    
04C158             0061   
04C158             0062   init:
04C158             0063   ; start generic stopwatch to time setup loop
04C158             0064   ; so we can determine if we're running on emulator or hardware
04C158 CD 63 C0 04 0065   	call stopwatch_set
04C15C             0066   
04C15C             0067   ; initialize global timestamp
04C15C DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04C15F 22 20 C0 04 0069       ld (timestamp_now),hl
04C163             0070   
04C163             0071   ; set the cursor off
04C163 CD BA AA 04 0072   	call cursor_off
04C167             0073   
04C167             0074   ; print loading ui message
04C167 21 D4 C0 04 0075   	ld hl,loading_ui
04C16B CD 6D AE 04 0076   	call printString
04C16F             0077   
04C16F             0078   ; load fonts
04C16F CD 94 7E 04 0079   	call load_font_itc_honda
04C173 CD 77 8F 04 0080   	call load_font_retro_computer
04C177             0081   
04C177             0082   ; load UI images
04C177 CD 00 98 04 0083   	call load_ui_images
04C17B CD CE 99 04 0084   	call load_ui_images_bj
04C17F             0085   
04C17F             0086   ; set up the display
04C17F 3E 88       0087       ld a,8+128 ; 320x240x64 double-buffered
04C181 CD FB A8 04 0088       call vdu_set_screen_mode
04C185 AF          0089       xor a
04C186 CD 2A AA 04 0090       call vdu_set_scaling
04C18A             0091   
04C18A             0092   ; set text background color
04C18A 3E 84       0093   	ld a,4 + 128
04C18C CD 87 A8 04 0094   	call vdu_colour_text
04C190             0095   
04C190             0096   ; set gfx bg color
04C190 AF          0097   	xor a ; plotting mode 0
04C191 0E 04       0098   	ld c,4 ; dark blue
04C193 CD AF A8 04 0099   	call vdu_gcol_bg
04C197 CD 82 A8 04 0100   	call vdu_clg
04C19B             0101   
04C19B             0102   ; set the cursor off again since we changed screen modes
04C19B CD BA AA 04 0103   	call cursor_off
04C19F             0104   
04C19F             0105   ; VDU 28, left, bottom, right, top: Set text viewport **
04C19F             0106   ; MIND THE LITTLE-ENDIANESS
04C19F             0107   ; inputs: c=left,b=bottom,e=right,d=top
04C19F 0E 00       0108   	ld c,0 ; left
04C1A1 16 14       0109   	ld d,20 ; top
04C1A3 1E 27       0110   	ld e,39 ; right
04C1A5 06 1D       0111   	ld b,29; bottom
04C1A7 CD 70 A9 04 0112   	call vdu_set_txt_viewport
04C1AB             0113   
04C1AB             0114   ; initialize image load routine
04C1AB CD F9 B6 04 0115   	call img_load_init
04C1AF             0116   
04C1AF             0117   ; load panels
04C1AF 01 13 01 00 0118   	ld bc,cube_num_panels
04C1B3 21 1B 02 04 0119   	ld hl,cube_buffer_id_lut
04C1B7 22 F3 B6 04 0120   	ld (cur_buffer_id_lut),hl
04C1BB 21 54 05 04 0121   	ld hl,cube_load_panels_table
04C1BF 22 F6 B6 04 0122   	ld (cur_load_jump_table),hl
04C1C3 CD 2E B7 04 0123   	call img_load_main
04C1C7             0124   
04C1C7             0125   ; load sprites
04C1C7 01 5A 00 00 0126   	ld bc,sprite_num_panels
04C1CB 21 27 4B 04 0127   	ld hl,sprite_buffer_id_lut
04C1CF 22 F3 B6 04 0128   	ld (cur_buffer_id_lut),hl
04C1D3 21 35 4C 04 0129   	ld hl,sprite_load_panels_table
04C1D7 22 F6 B6 04 0130   	ld (cur_load_jump_table),hl
04C1DB CD 2E B7 04 0131   	call img_load_main
04C1DF             0132   
04C1DF             0133   ; load distance walls
04C1DF 01 09 00 00 0134   	ld bc,dws_num_panels
04C1E3 21 0F 63 04 0135   	ld hl,dws_buffer_id_lut
04C1E7 22 F3 B6 04 0136   	ld (cur_buffer_id_lut),hl
04C1EB 21 2A 63 04 0137   	ld hl,dws_load_panels_table
04C1EF 22 F6 B6 04 0138   	ld (cur_load_jump_table),hl
04C1F3 CD 2E B7 04 0139   	call img_load_main
04C1F7             0140   
04C1F7             0141   ; use loading time to determine if we're running on emulator or hardware
04C1F7 CD 6F C0 04 0142   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C1FB 11 40 1F 00 0143   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04C1FF AF          0144   	xor a ; clear carry, default is running on hardware
04C200 32 0A C1 04 0145   	ld (is_emulator),a
04C204 ED 52       0146   	sbc hl,de
04C206 FA 1A C2 04 0147   	jp m,@on_emulator
04C20A CD A6 A9 04 0148   	call vdu_home_cursor
04C20E 21 31 C1 04 0149   	ld hl,on_hardware
04C212 CD 6D AE 04 0150   	call printString
04C216 C3 4D C2 04 0151   	jp @test_done
04C21A             0152   
04C21A             0153   @on_emulator:
04C21A             0154   ; enable all the sound chanels
04C21A CD 7F 01 04 0155   	call vdu_enable_channels
04C21E             0156   
04C21E             0157   ; load sound effects
04C21E 01 16 00 00 0158   	ld bc,SFX_num_buffers
04C222 21 8A B8 04 0159   	ld hl,SFX_buffer_id_lut
04C226 22 F3 B6 04 0160   	ld (cur_buffer_id_lut),hl
04C22A 21 F8 B8 04 0161   	ld hl,SFX_load_routines_table
04C22E 22 F6 B6 04 0162   	ld (cur_load_jump_table),hl
04C232 CD C8 AD 04 0163   	call sfx_load_main
04C236             0164   
04C236             0165   ; self modify vdu_play_sfx to enable sound
04C236 AF          0166   	xor a
04C237 32 46 00 04 0167   	ld (vdu_play_sfx_disable),a
04C23B             0168   
04C23B             0169   ; print emulator message
04C23B 3E 01       0170   	ld a,1
04C23D 32 0A C1 04 0171   	ld (is_emulator),a
04C241 CD A6 A9 04 0172   	call vdu_home_cursor
04C245 21 0B C1 04 0173   	ld hl,on_emulator
04C249 CD 6D AE 04 0174   	call printString
04C24D             0175   
04C24D             0176   @test_done:
04C24D             0177   ; print final loading time
04C24D 21 DF C0 04 0178   	ld hl,loading_time
04C251 CD 6D AE 04 0179   	call printString
04C255 CD 6F C0 04 0180   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C259 CD BB AE 04 0181   	call printDec
04C25D CD 82 AE 04 0182   	call printNewLine
04C261             0183   
04C261             0184   ; print loading complete message and wait for user keypress
04C261 21 ED C0 04 0185   	ld hl,loading_complete
04C265 CD 6D AE 04 0186   	call printString
04C269 CD 3D AA 04 0187   	call vdu_flip
04C26D CD C8 B1 04 0188   	call waitKeypress
04C271             0189   
04C271             0190   ; initialization done
04C271 C9          0191   	ret
04C272             0192   
04C272             0193   ; DEBUG: set up a simple countdown timer
04C272 01          0194   debug_timer: db 0x01
04C273             0195   
04C273             0196   main_loop_tmr: ds 6
04C279             0197   framerate: equ 30
04C279             0198   
04C279             0199   main:
04C279             0200   ; set map variables and load initial map file
04C279 CD 2E 66 04 0201   	call map_init
04C27D             0202   ; initialize player position
04C27D CD 50 B2 04 0203   	call plyr_init
04C281             0204   
04C281             0205   main_loop:
04C281             0206   ; update global timestamp
04C281 CD 29 C0 04 0207       call timestamp_tick
04C285             0208   
04C285             0209   ; move enemies
04C285 CD 6F A7 04 0210   	call sprites_see_plyr ; 220-285  prt ticks
04C289             0211   
04C289             0212   ; get player input and update sprite position
04C289             0213   	; 0-1 prt ticks
04C289 CD 4D B5 04 0214   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04C28D             0215   
04C28D             0216   ; render the updated scene
04C28D CD 31 68 04 0217   	call render_scene ; 6-12 prt ticks
04C291             0218   ; full loop 12-16 prt ticks
04C291             0219   
04C291             0220   ; flip the screen
04C291 CD 3D AA 04 0221   	call vdu_flip
04C295             0222   
04C295             0223   @wait:
04C295 FD 21 73 C2 0224   	ld iy,main_loop_tmr
       04          
04C29A CD 06 C0 04 0225   	call tmr_get
04C29E CA AA C2 04 0226   	jp z,@continue
04C2A2 FA AA C2 04 0227   	jp m,@continue
04C2A6 C3 95 C2 04 0228   	jp @wait
04C2AA             0229   @continue:
04C2AA             0230   
04C2AA             0231   ; reset main loop timer
04C2AA FD 21 73 C2 0232   	ld iy,main_loop_tmr
       04          
04C2AF 21 04 00 00 0233   	ld hl,120/framerate
04C2B3 CD F8 BF 04 0234   	call tmr_set
04C2B7             0235   
04C2B7             0236   ; check for escape key and quit if pressed
04C2B7             0237   	MOSCALL mos_getkbmap
04C2B7 3E 1E       0001M  			LD	A, function
04C2B9 5B CF       0002M  			RST.LIL	08h
04C2BB             0238   ; 113 Escape
04C2BB DD CB 0E 46 0239       bit 0,(ix+14)
04C2BF 20 02       0240   	jr nz,main_end
04C2C1             0241   @Escape:
04C2C1 18 BE       0242   	jr main_loop
04C2C3             0243   
04C2C3             0244   main_end:
04C2C3             0245   	; call do_outro
04C2C3             0246   ; restore screen to something normalish
04C2C3 AF          0247   	xor a
04C2C4 CD FB A8 04 0248   	call vdu_set_screen_mode
04C2C8 CD AC AA 04 0249   	call cursor_on
04C2CC C9          0250   	ret
04C2CD             0251   
04C2CD             0252   ; files.asm must go here so that filedata doesn't stomp on program data
04C2CD             0253   	include "src/asm/files.asm"
04C2CD             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04C2CD             0002*  ; inputs: hl = bufferId, ix = file size
04C2CD             0003*  vdu_load_buffer_from_file:
04C2CD             0004*  	; load buffer ids
04C2CD 22 0A C3 04 0005*  		ld (@id0),hl
04C2D1 22 10 C3 04 0006*  		ld (@id1),hl
04C2D5 22 15 C3 04 0007*  		ld (@id2),hl
04C2D9             0008*  	; clean up bytes that got stomped on by the ID loads
04C2D9 3E 02       0009*  		ld a,2
04C2DB 32 0C C3 04 0010*  		ld (@id0+2),a
04C2DF 3E 17       0011*  		ld a,23
04C2E1 32 12 C3 04 0012*  		ld (@id1+2),a
04C2E5 AF          0013*  		xor a
04C2E6 32 17 C3 04 0014*  		ld (@id2+2),a
04C2EA             0015*  	; read size from ix
04C2EA DD 7D       0016*  		ld a,ixl
04C2EC 32 18 C3 04 0017*  		ld (@size),a
04C2F0 DD 7C       0018*  		ld a,ixh
04C2F2 32 19 C3 04 0019*  		ld (@size+1),a
04C2F6             0020*  	; get all the ducks in a row for the vdu call
04C2F6 01 13 00 00 0021*  		ld bc,filedata-@start
04C2FA DD 09       0022*  		add ix,bc
04C2FC DD 44       0023*  		ld b,ixh
04C2FE DD 4D       0024*  		ld c,ixl
04C300 21 07 C3 04 0025*  		ld hl,@start
04C304             0026*  	; push the button
04C304 5B DF       0027*  		rst.lil $18
04C306             0028*  	; back to caller
04C306 C9          0029*  		ret
04C307             0030*  ; vdp command string:
04C307 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04C30A 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04C30C 02          0033*  		db 2
04C30D             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04C30D 17 1B 20    0035*  		db 23,27,0x20
04C310 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04C312             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04C312 17 00 A0    0038*  		db 23,0,0xA0
04C315 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04C317 00          0040*  		db 0
04C318             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04C318 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04C31A             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04C31A             0044*  	; ds 65536 ; placeholder for file data	DEBUG
