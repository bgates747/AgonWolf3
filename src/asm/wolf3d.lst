PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 AB 40 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.inc" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.inc
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.inc" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  max_channels: equ 6
040046             0003*  
040046             0004*  vdu_play_sfx:
040046 C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0006*      ld (@bufferId),hl
04004B ED 43 89 00 0007*      ld (@duration),bc
       04          
040050 3E 17       0008*      ld a,23
040052 32 81 00 04 0009*      ld (@bufferId+2),a
040056 3A 45 00 04 0010*      ld a,(last_channel)
04005A 3C          0011*      inc a
04005B             0012*      ; and 31 ; modulo 32
04005B FE 06       0013*      cp max_channels
04005D C2 62 00 04 0014*      jp nz,@load_channel
040061 AF          0015*      xor a
040062             0016*  @load_channel:
040062 32 45 00 04 0017*      ld (last_channel),a
040066 32 7C 00 04 0018*      ld (@channel0),a
04006A 32 84 00 04 0019*      ld (@channel1),a
04006E 21 79 00 04 0020*      ld hl, @sample
040072 01 12 00 00 0021*      ld bc, @sample_end - @sample
040076 5B DF       0022*      rst.lil $18
040078 C9          0023*      ret
040079             0024*  @sample:
040079             0025*  ; Command 4: Set waveform
040079             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0027*      .db 23,0,$85                        ; do sound
04007C             0028*  @channel0:
04007C 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
04007F             0030*  @bufferId:
04007F 00 00       0031*      .dw 0x0000
040081             0032*  ; Command 0: Play note
040081             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0034*      .db 23,0,$85                        ; do sound
040084             0035*  @channel1:
040084 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040087 00 00       0037*      .dw 0
040089             0038*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0039*      .dw 0x0000                        ; duration
04008B             0040*  @sample_end:
04008B 00          0041*      .db 0x00 ; padding
04008C             0042*  
04008C             0043*  ; enable enough additional channels so that total enabled = max_channels
04008C             0044*  ; inputs: max_channels set
04008C             0045*  ; returns: nothing
04008C             0046*  ; destroys: af, bc, hl
04008C             0047*  vdu_enable_channels:
04008C 3E 06       0048*      ld a,max_channels
04008E D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040090 F2 97 00 04 0050*      jp p,@loop
040094 C9          0051*      ret
040095 3E 03       0052*      ld a,3 ; first non-default channel
040097             0053*  @loop:
040097 32 B2 00 04 0054*      ld (@channel),a
04009B 21 AF 00 04 0055*      ld hl,@beg
04009F 01 05 00 00 0056*      ld bc,@end-@beg
0400A3 F5          0057*      push af
0400A4 5B DF       0058*      rst.lil $18
0400A6 F1          0059*      pop af
0400A7 3C          0060*      inc a
0400A8 FE 06       0061*      cp max_channels
0400AA C2 97 00 04 0062*      jp nz,@loop
0400AE C9          0063*      ret
0400AF             0064*  @beg:
0400AF 17 00 85    0065*              db 23, 0, $85
0400B2 00          0066*  @channel:   db 0
0400B3 08          0067*              db 8 ; command 8: enable channel
0400B4             0068*  @end:
0400B4             0069*  
0400B4             0070*  ; disable all but the three default sound channels
0400B4             0071*  ; inputs: max_channels set
0400B4             0072*  ; outputs: none
0400B4             0073*  ; destroys: ah,hl,bc
0400B4             0074*  vdu_disable_channels:
0400B4 3E 06       0075*      ld a,max_channels
0400B6 D6 03       0076*      sub 3 ; subtract number of default channels already enabled
0400B8 F2 BF 00 04 0077*      jp p,@loop
0400BC C9          0078*      ret
0400BD 3E 03       0079*      ld a,3 ; first non-default channel
0400BF             0080*  @loop:
0400BF 32 DA 00 04 0081*      ld (@channel),a
0400C3 21 D7 00 04 0082*      ld hl,@beg
0400C7 01 05 00 00 0083*      ld bc,@end-@beg
0400CB F5          0084*      push af
0400CC 5B DF       0085*      rst.lil $18
0400CE F1          0086*      pop af
0400CF 3C          0087*      inc a
0400D0 FE 06       0088*      cp max_channels
0400D2 C2 BF 00 04 0089*      jp nz,@loop
0400D6 C9          0090*      ret
0400D7             0091*  @beg:
0400D7 17 00 85    0092*      db 23, 0, $85
0400DA 00          0093*  @channel: db 0
0400DB 09          0094*      db 9 ; command 9: disable channel
0400DC             0095*  @end:
0400DC             0096*  
0400DC             0097*  
0400DC             0098*  ; ############################################################
0400DC             0099*  ; VDU SOUND API
0400DC             0100*  ; ############################################################
0400DC             0101*  ; Command 0: Play note
0400DC             0102*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0400DC             0103*      MACRO PLAY_NOTE channel, volume, frequency, duration
0400DC             0104*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
0400DC             0105*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
0400DC             0106*      rst.lil $18
0400DC             0107*      jr @PLAY_NOTE_END
0400DC             0108*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
0400DC             0109*                   db channel                  ; Channel, 0 (commented out)
0400DC             0110*                   db 0                        ; Play note command
0400DC             0111*                   db volume                   ; Volume
0400DC             0112*                   dw frequency                ; Frequency
0400DC             0113*                   dw duration                 ; Duration
0400DC             0114*  @PLAY_NOTE_END:
0400DC             0115*      ENDMACRO
0400DC             0116*  
0400DC             0117*      MACRO MUTE_CHANNEL channel
0400DC             0118*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
0400DC             0119*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
0400DC             0120*      rst.lil $18
0400DC             0121*      jr @MUTE_CHANNEL_END
0400DC             0122*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
0400DC             0123*                     db channel                ; Channel, 0 (commented out)
0400DC             0124*                     db 2                      ; Set volume command
0400DC             0125*                     db 0                      ; Volume (mute)
0400DC             0126*  @MUTE_CHANNEL_END:
0400DC             0127*      ENDMACRO
0400DC             0128*  
0400DC             0129*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
0400DC             0130*  vdu_play_note:
0400DC 79          0131*      ld a,c
0400DD 32 FD 00 04 0132*      ld (@channel),a
0400E1 78          0133*      ld a,b
0400E2 32 FF 00 04 0134*      ld (@volume),a
0400E6 22 00 01 04 0135*      ld (@frequency),hl
0400EA ED 53 02 01 0136*      ld (@duration),de
       04          
0400EF 21 FA 00 04 0137*      ld hl,@cmd
0400F3 01 0A 00 00 0138*      ld bc,@end-@cmd
0400F7 5B DF       0139*      rst.lil $18
0400F9 C9          0140*      ret
0400FA 17 00 85    0141*  @cmd:       db 23, 0, 0x85
0400FD 00          0142*  @channel:   db 0x00
0400FE 00          0143*              db 0x00 ; play note command
0400FF 00          0144*  @volume:    db 0x00
040100 00 00       0145*  @frequency: dw 0x0000
040102 00 00       0146*  @duration:  dw 0x0000
040104 00          0147*  @end:       db 0x00 ; padding
040105             0148*  
040105             0149*  ; Command 1: Status
040105             0150*  ; VDU 23, 0, &85, channel, 1
040105             0151*  ; inputs: a = channel
040105             0152*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
040105             0153*  ; Bit 	Name 	Meaning
040105             0154*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
040105             0155*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
040105             0156*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
040105             0157*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
040105             0158*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
040105             0159*  
040105             0160*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
040105             0161*  vdu_channel_status:
040105 32 17 01 04 0162*      ld (@channel),a
040109 21 14 01 04 0163*      ld hl,@cmd
04010D 01 05 00 00 0164*      ld bc,@end-@cmd
040111 5B DF       0165*      rst.lil $18
040113 C9          0166*      ret
040114 17 00 85    0167*  @cmd:       db 23, 0, 0x85
040117 00          0168*  @channel:   db 0x00
040118 01          0169*              db 0x01 ; get channel status command
040119             0170*  @end:
040119             0171*  
040119             0172*  ; VDU 23, 0, &85, channel, 2, volume
040119             0173*  ; inputs: c = channel, b = volume
040119             0174*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
040119             0175*  
040119             0176*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
040119             0177*  
040119             0178*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
040119             0179*  vdu_channel_volume:
040119 79          0180*      ld a,c
04011A 32 31 01 04 0181*      ld (@channel),a
04011E 78          0182*      ld a,b
04011F 32 33 01 04 0183*      ld (@volume),a
040123 21 2E 01 04 0184*      ld hl,@cmd
040127 01 06 00 00 0185*      ld bc,@end-@cmd
04012B 5B DF       0186*      rst.lil $18
04012D C9          0187*      ret
04012E 17 00 85    0188*  @cmd:       db 23, 0, 0x85
040131 00          0189*  @channel:   db 0x00
040132 02          0190*              db 0x02 ; set volume command
040133 00          0191*  @volume:    db 0x00
040134             0192*  @end:
040134             0193*  
040134             0194*  ; VDU 23, 0, &85, channel, 3, frequency;
040134             0195*  
040134             0196*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
040134             0197*  
040134             0198*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
040134             0199*  
040134             0200*  ; Returns 1 on success, 0 for failure.
040134             0201*  vdu_channel_frequency:
040134 79          0202*      ld a,c
040135 32 4C 01 04 0203*      ld (@channel),a
040139 ED 53 4E 01 0204*      ld (@frequency),de
       04          
04013E 21 49 01 04 0205*      ld hl,@cmd
040142 01 07 00 00 0206*      ld bc,@end-@cmd
040146 5B DF       0207*      rst.lil $18
040148 C9          0208*      ret
040149 17 00 85    0209*  @cmd:       db 23, 0, 0x85
04014C 00          0210*  @channel:   db 0x00
04014D 03          0211*              db 0x03 ; set frequency command
04014E 00 00       0212*  @frequency: dw 0x0000
040150 00          0213*  @end:       db 0x00 ; padding
040151             0214*  
040151             0215*  
040151             0216*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040151             0217*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040151             0218*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040151             0219*  
040151             0220*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040151             0221*  
040151             0222*  ; By default a channel is set to use waveform 0 (square wave).
040151             0223*  
040151             0224*  ; Valid waveform values are as follows:
040151             0225*  ; Value 	Waveform
040151             0226*  ; 0 	Square wave
040151             0227*  ; 1 	Triangle wave
040151             0228*  ; 2 	Sawtooth wave
040151             0229*  ; 3 	Sine wave
040151             0230*  ; 4 	Noise (simple white noise with no frequency support)
040151             0231*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040151             0232*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040151             0233*  
040151             0234*  vdu_channel_waveform:
040151 79          0235*      ld a,c
040152 32 77 01 04 0236*      ld (@channel),a
040156 78          0237*      ld a,b
040157 32 79 01 04 0238*      ld (@waveform),a
04015B FE 08       0239*      cp 8 ; check if the waveform is a sample
04015D 28 06       0240*      jr z, @sample
04015F 01 06 00 00 0241*      ld bc,@bufferId-@cmd
040163 18 08       0242*      jr @sendToVdu
040165             0243*  @sample:
040165 22 7A 01 04 0244*      ld (@bufferId),hl
040169 01 08 00 00 0245*      ld bc,@end-@cmd
04016D             0246*  @sendToVdu:
04016D 21 74 01 04 0247*      ld hl,@cmd
040171 5B DF       0248*      rst.lil $18
040173 C9          0249*      ret
040174 17 00 85    0250*  @cmd:       db 23, 0, 0x85
040177 00          0251*  @channel:   db 0x00
040178 04          0252*              db 0x04 ; set waveform command
040179 00          0253*  @waveform:  db 0x00
04017A 00 00       0254*  @bufferId:  dw 0x0000
04017C 00          0255*  @end:       db 0x00 ; padding
04017D             0256*  
04017D             0257*  
04017D             0258*  
04017D             0259*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04017D             0260*  ; inputs: hl = bufferId; a = format
04017D             0261*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04017D             0262*  ; Value 	Description
04017D             0263*  ; 0 	8-bit signed, 16KHz
04017D             0264*  ; 1 	8-bit unsigned, 16KHz
04017D             0265*  vdu_buffer_to_sound:
04017D 22 96 01 04 0266*      ld (@bufferId),hl
040181 32 98 01 04 0267*      ld (@format),a
040185 21 90 01 04 0268*      ld hl,@cmd
040189 01 09 00 00 0269*      ld bc,@end-@cmd
04018D 5B DF       0270*      rst.lil $18
04018F C9          0271*      ret
040190 17 00 85    0272*  @cmd:       db 23, 0, 0x85
040193 00          0273*              db 0x00 ; a magic number that is always 0
040194 05          0274*              db 0x05 ; buffer to sound command
040195 02          0275*              db 0x02 ; a magic number that is always 2
040196 00 00       0276*  @bufferId:  dw 0x0000
040198 00          0277*  @format:    db 0x00
040199             0278*  @end:
040199             0279*  
040199             0280*  
040199             0281*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040199             0282*  vdu_play_sample:
040199             0283*      ; populate input parameters
040199 79          0284*      ld a,c
04019A 32 C4 01 04 0285*      ld (@channel0),a
04019E 32 CC 01 04 0286*      ld (@channel1),a
0401A2 78          0287*      ld a,b
0401A3 32 CE 01 04 0288*      ld (@volume),a
0401A7 ED 53 CF 01 0289*      ld (@frequency),de
       04          
0401AC 22 C7 01 04 0290*      ld (@bufferId),hl
0401B0             0291*      ; clean up byte that got stomped on by bufferId load from hl
0401B0 3E 17       0292*      ld a,23
0401B2 32 C9 01 04 0293*      ld (@cmd1),a
0401B6             0294*      ; prep the vdu command string
0401B6 21 C1 01 04 0295*      ld hl, @cmd0
0401BA 01 12 00 00 0296*      ld bc, @end - @cmd0
0401BE 5B DF       0297*      rst.lil $18
0401C0 C9          0298*      ret
0401C1 17 00 85    0299*  @cmd0:       db 23, 0, 0x85
0401C4 00          0300*  @channel0:   db 0x00
0401C5 04          0301*               db 0x04 ; set waveform command
0401C6 08          0302*  @waveform:   db 0x08 ; sample
0401C7 00 00       0303*  @bufferId:   dw 0x0000
0401C9 17 00 85    0304*  @cmd1:       db 23, 0, 0x85
0401CC 00          0305*  @channel1:   db 0x00
0401CD 00          0306*               db 0x00 ; play note command
0401CE 00          0307*  @volume:     db 0x00
0401CF 00 00       0308*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0401D1 00 00       0309*  @duration:   dw 0x0000 ; milliseconds
0401D3 00          0310*  @end:        db 0x00 ; padding
0401D4             0013   	include "src/asm/images.inc"
0401D4             0001*  ; This file is created by build_92_asm_load_tiles.py, do not edit it!
0401D4             0002*  
0401D4             0003*  ; cube buffer ids:
0401D4             0004*  BUF_10: equ 0x000A
0401D4             0005*  BUF_11: equ 0x000B
0401D4             0006*  BUF_12: equ 0x000C
0401D4             0007*  BUF_13: equ 0x000D
0401D4             0008*  BUF_14: equ 0x000E
0401D4             0009*  BUF_15: equ 0x000F
0401D4             0010*  BUF_16: equ 0x0010
0401D4             0011*  BUF_17: equ 0x0011
0401D4             0012*  BUF_57: equ 0x0039
0401D4             0013*  BUF_58: equ 0x003A
0401D4             0014*  BUF_59: equ 0x003B
0401D4             0015*  
0401D4             0016*  cube_num_tiles: equ 11
0401D4             0017*  
0401D4             0018*  ; cube buffer id reverse lookup:
0401D4             0019*  cube_buffer_id_lut:
0401D4 0A 00 00    0020*  	dl BUF_10
0401D7 0B 00 00    0021*  	dl BUF_11
0401DA 0C 00 00    0022*  	dl BUF_12
0401DD 0D 00 00    0023*  	dl BUF_13
0401E0 0E 00 00    0024*  	dl BUF_14
0401E3 0F 00 00    0025*  	dl BUF_15
0401E6 10 00 00    0026*  	dl BUF_16
0401E9 11 00 00    0027*  	dl BUF_17
0401EC 39 00 00    0028*  	dl BUF_57
0401EF 3A 00 00    0029*  	dl BUF_58
0401F2 3B 00 00    0030*  	dl BUF_59
0401F5             0031*  
0401F5             0032*  ; cube load routines jump table:
0401F5             0033*  cube_load_tiles_table:
0401F5 58 02 04    0034*  	dl ld_10
0401F8 78 02 04    0035*  	dl ld_11
0401FB 98 02 04    0036*  	dl ld_12
0401FE B8 02 04    0037*  	dl ld_13
040201 D8 02 04    0038*  	dl ld_14
040204 F8 02 04    0039*  	dl ld_15
040207 18 03 04    0040*  	dl ld_16
04020A 38 03 04    0041*  	dl ld_17
04020D 58 03 04    0042*  	dl ld_57
040210 78 03 04    0043*  	dl ld_58
040213 98 03 04    0044*  	dl ld_59
040216             0045*  
040216             0046*  ; TexPanelLut for cube tiles:
040216             0047*  ; typedef struct TexPanel {
040216             0048*  ;     uint8_t img_idx;           // Image Index (handled on the vdp side so no need to load it here.
040216             0049*  ;     uint16_t texture_id;       // Texture ID for the panel
040216             0050*  ;     uint16_t width;            // Texture width
040216             0051*  ;     uint16_t height;           // Texture height
040216             0052*  ; } TexPanel;
040216             0053*  cube_tex_panel_lut:
040216 0A 00 10 00 0054*  	dw 0x000A,16,16
       10 00       
04021C 0B 00 10 00 0055*  	dw 0x000B,16,16
       10 00       
040222 0C 00 10 00 0056*  	dw 0x000C,16,16
       10 00       
040228 0D 00 10 00 0057*  	dw 0x000D,16,16
       10 00       
04022E 0E 00 10 00 0058*  	dw 0x000E,16,16
       10 00       
040234 0F 00 10 00 0059*  	dw 0x000F,16,16
       10 00       
04023A 10 00 10 00 0060*  	dw 0x0010,16,16
       10 00       
040240 11 00 10 00 0061*  	dw 0x0011,16,16
       10 00       
040246 39 00 10 00 0062*  	dw 0x0039,16,16
       10 00       
04024C 3A 00 10 00 0063*  	dw 0x003A,16,16
       10 00       
040252 3B 00 10 00 0064*  	dw 0x003B,16,16
       10 00       
040258             0065*  
040258             0066*  ; Import cube .rgba8 bitmap files and load them into VDP buffers
040258             0067*  
040258             0068*  ld_10:
040258 21 0A 00 00 0069*  	ld hl,BUF_10
04025C 01 10 00 00 0070*  	ld bc,16
040260 11 10 00 00 0071*  	ld de,16
040264 DD 21 00 04 0072*  	ld ix,1024
       00          
040269 FD 21 B8 03 0073*  	ld iy,F10
       04          
04026E FD 22 61 32 0074*  	ld (cur_filename),iy
       04          
040273 CD EC 33 04 0075*  	call vdu_load_img_8
040277 C9          0076*  	ret
040278             0077*  
040278             0078*  ld_11:
040278 21 0B 00 00 0079*  	ld hl,BUF_11
04027C 01 10 00 00 0080*  	ld bc,16
040280 11 10 00 00 0081*  	ld de,16
040284 DD 21 00 04 0082*  	ld ix,1024
       00          
040289 FD 21 C7 03 0083*  	ld iy,F11
       04          
04028E FD 22 61 32 0084*  	ld (cur_filename),iy
       04          
040293 CD EC 33 04 0085*  	call vdu_load_img_8
040297 C9          0086*  	ret
040298             0087*  
040298             0088*  ld_12:
040298 21 0C 00 00 0089*  	ld hl,BUF_12
04029C 01 10 00 00 0090*  	ld bc,16
0402A0 11 10 00 00 0091*  	ld de,16
0402A4 DD 21 00 04 0092*  	ld ix,1024
       00          
0402A9 FD 21 D6 03 0093*  	ld iy,F12
       04          
0402AE FD 22 61 32 0094*  	ld (cur_filename),iy
       04          
0402B3 CD EC 33 04 0095*  	call vdu_load_img_8
0402B7 C9          0096*  	ret
0402B8             0097*  
0402B8             0098*  ld_13:
0402B8 21 0D 00 00 0099*  	ld hl,BUF_13
0402BC 01 10 00 00 0100*  	ld bc,16
0402C0 11 10 00 00 0101*  	ld de,16
0402C4 DD 21 00 04 0102*  	ld ix,1024
       00          
0402C9 FD 21 E5 03 0103*  	ld iy,F13
       04          
0402CE FD 22 61 32 0104*  	ld (cur_filename),iy
       04          
0402D3 CD EC 33 04 0105*  	call vdu_load_img_8
0402D7 C9          0106*  	ret
0402D8             0107*  
0402D8             0108*  ld_14:
0402D8 21 0E 00 00 0109*  	ld hl,BUF_14
0402DC 01 10 00 00 0110*  	ld bc,16
0402E0 11 10 00 00 0111*  	ld de,16
0402E4 DD 21 00 04 0112*  	ld ix,1024
       00          
0402E9 FD 21 F4 03 0113*  	ld iy,F14
       04          
0402EE FD 22 61 32 0114*  	ld (cur_filename),iy
       04          
0402F3 CD EC 33 04 0115*  	call vdu_load_img_8
0402F7 C9          0116*  	ret
0402F8             0117*  
0402F8             0118*  ld_15:
0402F8 21 0F 00 00 0119*  	ld hl,BUF_15
0402FC 01 10 00 00 0120*  	ld bc,16
040300 11 10 00 00 0121*  	ld de,16
040304 DD 21 00 04 0122*  	ld ix,1024
       00          
040309 FD 21 03 04 0123*  	ld iy,F15
       04          
04030E FD 22 61 32 0124*  	ld (cur_filename),iy
       04          
040313 CD EC 33 04 0125*  	call vdu_load_img_8
040317 C9          0126*  	ret
040318             0127*  
040318             0128*  ld_16:
040318 21 10 00 00 0129*  	ld hl,BUF_16
04031C 01 10 00 00 0130*  	ld bc,16
040320 11 10 00 00 0131*  	ld de,16
040324 DD 21 00 04 0132*  	ld ix,1024
       00          
040329 FD 21 12 04 0133*  	ld iy,F16
       04          
04032E FD 22 61 32 0134*  	ld (cur_filename),iy
       04          
040333 CD EC 33 04 0135*  	call vdu_load_img_8
040337 C9          0136*  	ret
040338             0137*  
040338             0138*  ld_17:
040338 21 11 00 00 0139*  	ld hl,BUF_17
04033C 01 10 00 00 0140*  	ld bc,16
040340 11 10 00 00 0141*  	ld de,16
040344 DD 21 00 04 0142*  	ld ix,1024
       00          
040349 FD 21 21 04 0143*  	ld iy,F17
       04          
04034E FD 22 61 32 0144*  	ld (cur_filename),iy
       04          
040353 CD EC 33 04 0145*  	call vdu_load_img_8
040357 C9          0146*  	ret
040358             0147*  
040358             0148*  ld_57:
040358 21 39 00 00 0149*  	ld hl,BUF_57
04035C 01 10 00 00 0150*  	ld bc,16
040360 11 10 00 00 0151*  	ld de,16
040364 DD 21 00 04 0152*  	ld ix,1024
       00          
040369 FD 21 30 04 0153*  	ld iy,F57
       04          
04036E FD 22 61 32 0154*  	ld (cur_filename),iy
       04          
040373 CD EC 33 04 0155*  	call vdu_load_img_8
040377 C9          0156*  	ret
040378             0157*  
040378             0158*  ld_58:
040378 21 3A 00 00 0159*  	ld hl,BUF_58
04037C 01 10 00 00 0160*  	ld bc,16
040380 11 10 00 00 0161*  	ld de,16
040384 DD 21 00 04 0162*  	ld ix,1024
       00          
040389 FD 21 3F 04 0163*  	ld iy,F58
       04          
04038E FD 22 61 32 0164*  	ld (cur_filename),iy
       04          
040393 CD EC 33 04 0165*  	call vdu_load_img_8
040397 C9          0166*  	ret
040398             0167*  
040398             0168*  ld_59:
040398 21 3B 00 00 0169*  	ld hl,BUF_59
04039C 01 10 00 00 0170*  	ld bc,16
0403A0 11 10 00 00 0171*  	ld de,16
0403A4 DD 21 00 04 0172*  	ld ix,1024
       00          
0403A9 FD 21 4E 04 0173*  	ld iy,F59
       04          
0403AE FD 22 61 32 0174*  	ld (cur_filename),iy
       04          
0403B3 CD EC 33 04 0175*  	call vdu_load_img_8
0403B7 C9          0176*  	ret
0403B8             0177*  
0403B8             0178*  ; File name lookups:
0403B8 74 69 6C 65 0179*  F10: db "tiles/10.rgba8",0
       73 2F 31 30 
       2E 72 67 62 
       61 38 00    
0403C7 74 69 6C 65 0180*  F11: db "tiles/11.rgba8",0
       73 2F 31 31 
       2E 72 67 62 
       61 38 00    
0403D6 74 69 6C 65 0181*  F12: db "tiles/12.rgba8",0
       73 2F 31 32 
       2E 72 67 62 
       61 38 00    
0403E5 74 69 6C 65 0182*  F13: db "tiles/13.rgba8",0
       73 2F 31 33 
       2E 72 67 62 
       61 38 00    
0403F4 74 69 6C 65 0183*  F14: db "tiles/14.rgba8",0
       73 2F 31 34 
       2E 72 67 62 
       61 38 00    
040403 74 69 6C 65 0184*  F15: db "tiles/15.rgba8",0
       73 2F 31 35 
       2E 72 67 62 
       61 38 00    
040412 74 69 6C 65 0185*  F16: db "tiles/16.rgba8",0
       73 2F 31 36 
       2E 72 67 62 
       61 38 00    
040421 74 69 6C 65 0186*  F17: db "tiles/17.rgba8",0
       73 2F 31 37 
       2E 72 67 62 
       61 38 00    
040430 74 69 6C 65 0187*  F57: db "tiles/57.rgba8",0
       73 2F 35 37 
       2E 72 67 62 
       61 38 00    
04043F 74 69 6C 65 0188*  F58: db "tiles/58.rgba8",0
       73 2F 35 38 
       2E 72 67 62 
       61 38 00    
04044E 74 69 6C 65 0189*  F59: db "tiles/59.rgba8",0
       73 2F 35 39 
       2E 72 67 62 
       61 38 00    
04045D             0190*  
04045D             0191*  ; sprite buffer ids:
04045D             0192*  BUF_20: equ 0x0014
04045D             0193*  BUF_21: equ 0x0015
04045D             0194*  BUF_22: equ 0x0016
04045D             0195*  BUF_23: equ 0x0017
04045D             0196*  BUF_24: equ 0x0018
04045D             0197*  BUF_40: equ 0x0028
04045D             0198*  BUF_41: equ 0x0029
04045D             0199*  BUF_42: equ 0x002A
04045D             0200*  BUF_43: equ 0x002B
04045D             0201*  BUF_44: equ 0x002C
04045D             0202*  BUF_45: equ 0x002D
04045D             0203*  BUF_46: equ 0x002E
04045D             0204*  BUF_47: equ 0x002F
04045D             0205*  BUF_48: equ 0x0030
04045D             0206*  BUF_49: equ 0x0031
04045D             0207*  BUF_50: equ 0x0032
04045D             0208*  BUF_51: equ 0x0033
04045D             0209*  BUF_52: equ 0x0034
04045D             0210*  BUF_56: equ 0x0038
04045D             0211*  BUF_60: equ 0x003C
04045D             0212*  
04045D             0213*  sprite_num_tiles: equ 20
04045D             0214*  
04045D             0215*  ; sprite buffer id reverse lookup:
04045D             0216*  sprite_buffer_id_lut:
04045D 14 00 00    0217*  	dl BUF_20
040460 15 00 00    0218*  	dl BUF_21
040463 16 00 00    0219*  	dl BUF_22
040466 17 00 00    0220*  	dl BUF_23
040469 18 00 00    0221*  	dl BUF_24
04046C 28 00 00    0222*  	dl BUF_40
04046F 29 00 00    0223*  	dl BUF_41
040472 2A 00 00    0224*  	dl BUF_42
040475 2B 00 00    0225*  	dl BUF_43
040478 2C 00 00    0226*  	dl BUF_44
04047B 2D 00 00    0227*  	dl BUF_45
04047E 2E 00 00    0228*  	dl BUF_46
040481 2F 00 00    0229*  	dl BUF_47
040484 30 00 00    0230*  	dl BUF_48
040487 31 00 00    0231*  	dl BUF_49
04048A 32 00 00    0232*  	dl BUF_50
04048D 33 00 00    0233*  	dl BUF_51
040490 34 00 00    0234*  	dl BUF_52
040493 38 00 00    0235*  	dl BUF_56
040496 3C 00 00    0236*  	dl BUF_60
040499             0237*  
040499             0238*  ; sprite load routines jump table:
040499             0239*  sprite_load_tiles_table:
040499 D5 04 04    0240*  	dl ld_20
04049C F5 04 04    0241*  	dl ld_21
04049F 15 05 04    0242*  	dl ld_22
0404A2 35 05 04    0243*  	dl ld_23
0404A5 55 05 04    0244*  	dl ld_24
0404A8 75 05 04    0245*  	dl ld_40
0404AB 95 05 04    0246*  	dl ld_41
0404AE B5 05 04    0247*  	dl ld_42
0404B1 D5 05 04    0248*  	dl ld_43
0404B4 F5 05 04    0249*  	dl ld_44
0404B7 15 06 04    0250*  	dl ld_45
0404BA 35 06 04    0251*  	dl ld_46
0404BD 55 06 04    0252*  	dl ld_47
0404C0 75 06 04    0253*  	dl ld_48
0404C3 95 06 04    0254*  	dl ld_49
0404C6 B5 06 04    0255*  	dl ld_50
0404C9 D5 06 04    0256*  	dl ld_51
0404CC F5 06 04    0257*  	dl ld_52
0404CF 15 07 04    0258*  	dl ld_56
0404D2 35 07 04    0259*  	dl ld_60
0404D5             0260*  
0404D5             0261*  
0404D5             0262*  ; Import sprite .rgba8 bitmap files and load them into VDP buffers
0404D5             0263*  
0404D5             0264*  ld_20:
0404D5 21 14 00 00 0265*  	ld hl,BUF_20
0404D9 01 10 00 00 0266*  	ld bc,16
0404DD 11 10 00 00 0267*  	ld de,16
0404E1 DD 21 00 04 0268*  	ld ix,1024
       00          
0404E6 FD 21 55 07 0269*  	ld iy,F20
       04          
0404EB FD 22 61 32 0270*  	ld (cur_filename),iy
       04          
0404F0 CD EC 33 04 0271*  	call vdu_load_img_8
0404F4 C9          0272*  	ret
0404F5             0273*  
0404F5             0274*  ld_21:
0404F5 21 15 00 00 0275*  	ld hl,BUF_21
0404F9 01 10 00 00 0276*  	ld bc,16
0404FD 11 10 00 00 0277*  	ld de,16
040501 DD 21 00 04 0278*  	ld ix,1024
       00          
040506 FD 21 64 07 0279*  	ld iy,F21
       04          
04050B FD 22 61 32 0280*  	ld (cur_filename),iy
       04          
040510 CD EC 33 04 0281*  	call vdu_load_img_8
040514 C9          0282*  	ret
040515             0283*  
040515             0284*  ld_22:
040515 21 16 00 00 0285*  	ld hl,BUF_22
040519 01 10 00 00 0286*  	ld bc,16
04051D 11 10 00 00 0287*  	ld de,16
040521 DD 21 00 04 0288*  	ld ix,1024
       00          
040526 FD 21 73 07 0289*  	ld iy,F22
       04          
04052B FD 22 61 32 0290*  	ld (cur_filename),iy
       04          
040530 CD EC 33 04 0291*  	call vdu_load_img_8
040534 C9          0292*  	ret
040535             0293*  
040535             0294*  ld_23:
040535 21 17 00 00 0295*  	ld hl,BUF_23
040539 01 10 00 00 0296*  	ld bc,16
04053D 11 10 00 00 0297*  	ld de,16
040541 DD 21 00 04 0298*  	ld ix,1024
       00          
040546 FD 21 82 07 0299*  	ld iy,F23
       04          
04054B FD 22 61 32 0300*  	ld (cur_filename),iy
       04          
040550 CD EC 33 04 0301*  	call vdu_load_img_8
040554 C9          0302*  	ret
040555             0303*  
040555             0304*  ld_24:
040555 21 18 00 00 0305*  	ld hl,BUF_24
040559 01 10 00 00 0306*  	ld bc,16
04055D 11 10 00 00 0307*  	ld de,16
040561 DD 21 00 04 0308*  	ld ix,1024
       00          
040566 FD 21 91 07 0309*  	ld iy,F24
       04          
04056B FD 22 61 32 0310*  	ld (cur_filename),iy
       04          
040570 CD EC 33 04 0311*  	call vdu_load_img_8
040574 C9          0312*  	ret
040575             0313*  
040575             0314*  ld_40:
040575 21 28 00 00 0315*  	ld hl,BUF_40
040579 01 10 00 00 0316*  	ld bc,16
04057D 11 10 00 00 0317*  	ld de,16
040581 DD 21 00 04 0318*  	ld ix,1024
       00          
040586 FD 21 A0 07 0319*  	ld iy,F40
       04          
04058B FD 22 61 32 0320*  	ld (cur_filename),iy
       04          
040590 CD EC 33 04 0321*  	call vdu_load_img_8
040594 C9          0322*  	ret
040595             0323*  
040595             0324*  ld_41:
040595 21 29 00 00 0325*  	ld hl,BUF_41
040599 01 10 00 00 0326*  	ld bc,16
04059D 11 10 00 00 0327*  	ld de,16
0405A1 DD 21 00 04 0328*  	ld ix,1024
       00          
0405A6 FD 21 AF 07 0329*  	ld iy,F41
       04          
0405AB FD 22 61 32 0330*  	ld (cur_filename),iy
       04          
0405B0 CD EC 33 04 0331*  	call vdu_load_img_8
0405B4 C9          0332*  	ret
0405B5             0333*  
0405B5             0334*  ld_42:
0405B5 21 2A 00 00 0335*  	ld hl,BUF_42
0405B9 01 10 00 00 0336*  	ld bc,16
0405BD 11 10 00 00 0337*  	ld de,16
0405C1 DD 21 00 04 0338*  	ld ix,1024
       00          
0405C6 FD 21 BE 07 0339*  	ld iy,F42
       04          
0405CB FD 22 61 32 0340*  	ld (cur_filename),iy
       04          
0405D0 CD EC 33 04 0341*  	call vdu_load_img_8
0405D4 C9          0342*  	ret
0405D5             0343*  
0405D5             0344*  ld_43:
0405D5 21 2B 00 00 0345*  	ld hl,BUF_43
0405D9 01 10 00 00 0346*  	ld bc,16
0405DD 11 10 00 00 0347*  	ld de,16
0405E1 DD 21 00 04 0348*  	ld ix,1024
       00          
0405E6 FD 21 CD 07 0349*  	ld iy,F43
       04          
0405EB FD 22 61 32 0350*  	ld (cur_filename),iy
       04          
0405F0 CD EC 33 04 0351*  	call vdu_load_img_8
0405F4 C9          0352*  	ret
0405F5             0353*  
0405F5             0354*  ld_44:
0405F5 21 2C 00 00 0355*  	ld hl,BUF_44
0405F9 01 10 00 00 0356*  	ld bc,16
0405FD 11 10 00 00 0357*  	ld de,16
040601 DD 21 00 04 0358*  	ld ix,1024
       00          
040606 FD 21 DC 07 0359*  	ld iy,F44
       04          
04060B FD 22 61 32 0360*  	ld (cur_filename),iy
       04          
040610 CD EC 33 04 0361*  	call vdu_load_img_8
040614 C9          0362*  	ret
040615             0363*  
040615             0364*  ld_45:
040615 21 2D 00 00 0365*  	ld hl,BUF_45
040619 01 10 00 00 0366*  	ld bc,16
04061D 11 10 00 00 0367*  	ld de,16
040621 DD 21 00 04 0368*  	ld ix,1024
       00          
040626 FD 21 EB 07 0369*  	ld iy,F45
       04          
04062B FD 22 61 32 0370*  	ld (cur_filename),iy
       04          
040630 CD EC 33 04 0371*  	call vdu_load_img_8
040634 C9          0372*  	ret
040635             0373*  
040635             0374*  ld_46:
040635 21 2E 00 00 0375*  	ld hl,BUF_46
040639 01 10 00 00 0376*  	ld bc,16
04063D 11 10 00 00 0377*  	ld de,16
040641 DD 21 00 04 0378*  	ld ix,1024
       00          
040646 FD 21 FA 07 0379*  	ld iy,F46
       04          
04064B FD 22 61 32 0380*  	ld (cur_filename),iy
       04          
040650 CD EC 33 04 0381*  	call vdu_load_img_8
040654 C9          0382*  	ret
040655             0383*  
040655             0384*  ld_47:
040655 21 2F 00 00 0385*  	ld hl,BUF_47
040659 01 10 00 00 0386*  	ld bc,16
04065D 11 10 00 00 0387*  	ld de,16
040661 DD 21 00 04 0388*  	ld ix,1024
       00          
040666 FD 21 09 08 0389*  	ld iy,F47
       04          
04066B FD 22 61 32 0390*  	ld (cur_filename),iy
       04          
040670 CD EC 33 04 0391*  	call vdu_load_img_8
040674 C9          0392*  	ret
040675             0393*  
040675             0394*  ld_48:
040675 21 30 00 00 0395*  	ld hl,BUF_48
040679 01 10 00 00 0396*  	ld bc,16
04067D 11 10 00 00 0397*  	ld de,16
040681 DD 21 00 04 0398*  	ld ix,1024
       00          
040686 FD 21 18 08 0399*  	ld iy,F48
       04          
04068B FD 22 61 32 0400*  	ld (cur_filename),iy
       04          
040690 CD EC 33 04 0401*  	call vdu_load_img_8
040694 C9          0402*  	ret
040695             0403*  
040695             0404*  ld_49:
040695 21 31 00 00 0405*  	ld hl,BUF_49
040699 01 10 00 00 0406*  	ld bc,16
04069D 11 10 00 00 0407*  	ld de,16
0406A1 DD 21 00 04 0408*  	ld ix,1024
       00          
0406A6 FD 21 27 08 0409*  	ld iy,F49
       04          
0406AB FD 22 61 32 0410*  	ld (cur_filename),iy
       04          
0406B0 CD EC 33 04 0411*  	call vdu_load_img_8
0406B4 C9          0412*  	ret
0406B5             0413*  
0406B5             0414*  ld_50:
0406B5 21 32 00 00 0415*  	ld hl,BUF_50
0406B9 01 10 00 00 0416*  	ld bc,16
0406BD 11 10 00 00 0417*  	ld de,16
0406C1 DD 21 00 04 0418*  	ld ix,1024
       00          
0406C6 FD 21 36 08 0419*  	ld iy,F50
       04          
0406CB FD 22 61 32 0420*  	ld (cur_filename),iy
       04          
0406D0 CD EC 33 04 0421*  	call vdu_load_img_8
0406D4 C9          0422*  	ret
0406D5             0423*  
0406D5             0424*  ld_51:
0406D5 21 33 00 00 0425*  	ld hl,BUF_51
0406D9 01 10 00 00 0426*  	ld bc,16
0406DD 11 10 00 00 0427*  	ld de,16
0406E1 DD 21 00 04 0428*  	ld ix,1024
       00          
0406E6 FD 21 45 08 0429*  	ld iy,F51
       04          
0406EB FD 22 61 32 0430*  	ld (cur_filename),iy
       04          
0406F0 CD EC 33 04 0431*  	call vdu_load_img_8
0406F4 C9          0432*  	ret
0406F5             0433*  
0406F5             0434*  ld_52:
0406F5 21 34 00 00 0435*  	ld hl,BUF_52
0406F9 01 10 00 00 0436*  	ld bc,16
0406FD 11 10 00 00 0437*  	ld de,16
040701 DD 21 00 04 0438*  	ld ix,1024
       00          
040706 FD 21 54 08 0439*  	ld iy,F52
       04          
04070B FD 22 61 32 0440*  	ld (cur_filename),iy
       04          
040710 CD EC 33 04 0441*  	call vdu_load_img_8
040714 C9          0442*  	ret
040715             0443*  
040715             0444*  ld_56:
040715 21 38 00 00 0445*  	ld hl,BUF_56
040719 01 10 00 00 0446*  	ld bc,16
04071D 11 10 00 00 0447*  	ld de,16
040721 DD 21 00 04 0448*  	ld ix,1024
       00          
040726 FD 21 63 08 0449*  	ld iy,F56
       04          
04072B FD 22 61 32 0450*  	ld (cur_filename),iy
       04          
040730 CD EC 33 04 0451*  	call vdu_load_img_8
040734 C9          0452*  	ret
040735             0453*  
040735             0454*  ld_60:
040735 21 3C 00 00 0455*  	ld hl,BUF_60
040739 01 10 00 00 0456*  	ld bc,16
04073D 11 10 00 00 0457*  	ld de,16
040741 DD 21 00 04 0458*  	ld ix,1024
       00          
040746 FD 21 72 08 0459*  	ld iy,F60
       04          
04074B FD 22 61 32 0460*  	ld (cur_filename),iy
       04          
040750 CD EC 33 04 0461*  	call vdu_load_img_8
040754 C9          0462*  	ret
040755             0463*  
040755             0464*  ; File name lookups:
040755 74 69 6C 65 0465*  F20: db "tiles/20.rgba8",0
       73 2F 32 30 
       2E 72 67 62 
       61 38 00    
040764 74 69 6C 65 0466*  F21: db "tiles/21.rgba8",0
       73 2F 32 31 
       2E 72 67 62 
       61 38 00    
040773 74 69 6C 65 0467*  F22: db "tiles/22.rgba8",0
       73 2F 32 32 
       2E 72 67 62 
       61 38 00    
040782 74 69 6C 65 0468*  F23: db "tiles/23.rgba8",0
       73 2F 32 33 
       2E 72 67 62 
       61 38 00    
040791 74 69 6C 65 0469*  F24: db "tiles/24.rgba8",0
       73 2F 32 34 
       2E 72 67 62 
       61 38 00    
0407A0 74 69 6C 65 0470*  F40: db "tiles/40.rgba8",0
       73 2F 34 30 
       2E 72 67 62 
       61 38 00    
0407AF 74 69 6C 65 0471*  F41: db "tiles/41.rgba8",0
       73 2F 34 31 
       2E 72 67 62 
       61 38 00    
0407BE 74 69 6C 65 0472*  F42: db "tiles/42.rgba8",0
       73 2F 34 32 
       2E 72 67 62 
       61 38 00    
0407CD 74 69 6C 65 0473*  F43: db "tiles/43.rgba8",0
       73 2F 34 33 
       2E 72 67 62 
       61 38 00    
0407DC 74 69 6C 65 0474*  F44: db "tiles/44.rgba8",0
       73 2F 34 34 
       2E 72 67 62 
       61 38 00    
0407EB 74 69 6C 65 0475*  F45: db "tiles/45.rgba8",0
       73 2F 34 35 
       2E 72 67 62 
       61 38 00    
0407FA 74 69 6C 65 0476*  F46: db "tiles/46.rgba8",0
       73 2F 34 36 
       2E 72 67 62 
       61 38 00    
040809 74 69 6C 65 0477*  F47: db "tiles/47.rgba8",0
       73 2F 34 37 
       2E 72 67 62 
       61 38 00    
040818 74 69 6C 65 0478*  F48: db "tiles/48.rgba8",0
       73 2F 34 38 
       2E 72 67 62 
       61 38 00    
040827 74 69 6C 65 0479*  F49: db "tiles/49.rgba8",0
       73 2F 34 39 
       2E 72 67 62 
       61 38 00    
040836 74 69 6C 65 0480*  F50: db "tiles/50.rgba8",0
       73 2F 35 30 
       2E 72 67 62 
       61 38 00    
040845 74 69 6C 65 0481*  F51: db "tiles/51.rgba8",0
       73 2F 35 31 
       2E 72 67 62 
       61 38 00    
040854 74 69 6C 65 0482*  F52: db "tiles/52.rgba8",0
       73 2F 35 32 
       2E 72 67 62 
       61 38 00    
040863 74 69 6C 65 0483*  F56: db "tiles/56.rgba8",0
       73 2F 35 36 
       2E 72 67 62 
       61 38 00    
040872 74 69 6C 65 0484*  F60: db "tiles/60.rgba8",0
       73 2F 36 30 
       2E 72 67 62 
       61 38 00    
040881             0014   	include "src/asm/fonts_bmp.inc"
040881             0001*  ; plots a bitmap character to the screen
040881             0002*  ; inputs: a; ascii character to plot
040881             0003*  ;      bc,de = x,y screen coordinates in pixels
040881             0004*  ;      ix pointed at the font definition lut
040881             0005*  ; returns: bc as the next x coordinate to plot
040881             0006*  ;          pretty pixels which hopefully resemble readable text
040881             0007*  ; destroys: lotsa stuff
040881             0008*  font_bmp_plot:
040881             0009*  ; back up bc,de
040881 C5          0010*      push bc
040882 D5          0011*      push de
040883             0012*  ; get the buffer id of the character
040883 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
040885 06 06       0014*      ld b,6 ; six bytes per lookup record
040887 4F          0015*      ld c,a
040888 ED 4C       0016*      mlt bc
04088A DD 09       0017*      add ix,bc ; now ix points to the character definition
04088C DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
04088F CD 77 29 04 0019*      call vdu_buff_select
040893             0020*  ; plot the character
040893 D1          0021*      pop de
040894 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
040897 83          0023*      add a,e ; add the y-coordinate
040898 5F          0024*      ld e,a
040899 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04089B 8A          0026*      adc a,d
04089C 57          0027*      ld d,a ; plot_y now correct for the character
04089D C1          0028*      pop bc ; plot_x
04089E C5          0029*      push bc ; we want it back after the plot
04089F CD 48 2B 04 0030*      call vdu_plot_bmp
0408A3             0031*  ; now set bc to the next x coordinate
0408A3 C1          0032*      pop bc
0408A4 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0408A7 C6 02       0034*      add a,2 ; add a little padding between characters
0408A9 81          0035*      add a,c ; bump the original x-coordinate
0408AA 4F          0036*      ld c,a
0408AB 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0408AD 88          0038*      adc a,b
0408AE 47          0039*      ld b,a ; plot_x now correct for the next character
0408AF C9          0040*      ret
0408B0             0041*  
0408B0             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0408B0             0043*  ; inputs: hl; pointer to the string
0408B0             0044*  ;       bc,de = x,y screen coordinates in pixels
0408B0             0045*  ;       ix pointed at the font definition lut
0408B0             0046*  ; returns: bc as the next x coordinate to plot
0408B0             0047*  ;          de as the next y coordinate to plot
0408B0             0048*  ;          pretty pixels which hopefully resemble readable text
0408B0             0049*  font_bmp_print:
0408B0             0050*  @next_char:
0408B0             0051*  ; fetch the next character in the string
0408B0 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0408B1 FE 00       0053*      cp 0 ; is it zero?
0408B3 C8          0054*      ret z ; if so, we're done
0408B4 23          0055*      inc hl ; point to the next character
0408B5 E5          0056*      push hl ; save the pointer
0408B6 D5          0057*      push de ; save our y-coordinate
0408B7 DD E5       0058*      push ix ; save the font lut pointer
0408B9 CD 81 08 04 0059*      call font_bmp_plot ; plot the character
0408BD DD E1       0060*      pop ix ; restore the font lut pointer
0408BF D1          0061*      pop de ; restore our y-coordinate
0408C0 E1          0062*      pop hl ; restore the pointer
0408C1 C3 B0 08 04 0063*      jp @next_char ; loop
0408C5             0015   	include "src/asm/maps.inc"
0408C5             0001*  ; ############# MAP CONSTANTS #############
0408C5             0002*  ; map tables addresses
0408C5             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
0408C5             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
0408C5             0005*  
0408C5             0006*  ; map status/type flags
0408C5             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
0408C5             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
0408C5             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
0408C5             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
0408C5             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
0408C5             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
0408C5             0013*  ; bits 1 and 0 are the render_type mask
0408C5             0014*  render_type_cube:   equ %00000000  ; 0
0408C5             0015*  render_type_floor:  equ %00000001  ; 1
0408C5             0016*  render_type_null:   equ %00000010  ; 2
0408C5             0017*  render_type_sprite: equ %00000011  ; 3
0408C5             0018*  
0408C5             0019*  ; HOW THE MAP TABLE IS LAID OUT
0408C5             0020*  ; map table field offset constants
0408C5             0021*  ; (mind the little-endianess)
0408C5             0022*  map_type_status: 	equ 0
0408C5             0023*  map_img_idx: 		equ 1
0408C5             0024*  map_obj_id: 		equ 2
0408C5             0025*  map_sprite_id: 		equ 3
0408C5             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
0408C5             0027*  
0408C5             0028*  ; gets cell info from a directional displacement from a given map location
0408C5             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
0408C5             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
0408C5             0031*  ; calls: get_dx_dy, get_cell_from_coords
0408C5             0032*  get_neighbor:
0408C5             0033*  ; modulo 4 on orientation
0408C5 7B          0034*      ld a,e
0408C6 E6 03       0035*      and 0x03
0408C8 5F          0036*      ld e,a
0408C9 CD F8 08 04 0037*  	call get_dx_dy ; d,e = dy,dx
0408CD             0038*  ; add add b,c to the deltas in d,e
0408CD 79          0039*  	ld a,c
0408CE 83          0040*  	add a,e
0408CF 5F          0041*  	ld e,a
0408D0 78          0042*  	ld a,b
0408D1 82          0043*  	add a,d
0408D2 57          0044*  	ld d,a
0408D3             0045*  ; fall through to get_cell_from_coords
0408D3             0046*  
0408D3             0047*  ; gets cell info from a given x,y map coordinate
0408D3             0048*  ; inputs: ; d,e = map_y,map_x
0408D3             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
0408D3             0050*  get_cell_from_coords:
0408D3             0051*  ; modulo 16 on input coords
0408D3 7B          0052*  	ld a,e
0408D4 E6 0F       0053*  	and 0x0F
0408D6 5F          0054*  	ld e,a
0408D7 7A          0055*  	ld a,d
0408D8 E6 0F       0056*  	and 0x0F
0408DA 57          0057*  	ld d,a
0408DB             0058*  ; get cell_id from x,y
0408DB 42          0059*  	ld b,d ; y
0408DC 0E 10       0060*  	ld c,16 ; number of cells in a column
0408DE ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
0408E0 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0408E4 6B          0063*  	ld l,e ; x
0408E5 09          0064*  	add hl,bc ; hl = cell_id of x,y
0408E6 E5          0065*  	push hl ; so we can return cell_id
0408E7 4D          0066*  	ld c,l ; c = cell_id
0408E8             0067*  ; get address of cell record in cell_status table
0408E8 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0408EA ED 4C       0069*  	mlt bc ; bc = offset to cell record
0408EC DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0408F1 DD 09       0071*  	add ix,bc ; ix = address of cell record
0408F3 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0408F6 C1          0073*  	pop bc ; bc = cell_id
0408F7 C9          0074*  	ret
0408F8             0075*  
0408F8             0076*  ; gets dx,dy from orientation and distance
0408F8             0077*  ; d = distance ; e = orientation
0408F8             0078*  ; returns: d,e = dy,dx
0408F8             0079*  get_dx_dy:
0408F8             0080*  ; make sure deu is zero
0408F8 E5          0081*  	push hl
0408F9 21 00 00 00 0082*  	ld hl,0
0408FD 62          0083*  	ld h,d
0408FE 6B          0084*  	ld l,e
0408FF EB          0085*  	ex de,hl
040900 E1          0086*  	pop hl
040901             0087*  ; modulo 4 on orientation
040901 7B          0088*  	ld a,e
040902 E6 03       0089*  	and 0x03
040904 FE 00       0090*  	cp 0
040906 28 11       0091*  	jr z,@north
040908 FE 01       0092*  	cp 1
04090A 28 14       0093*  	jr z,@east
04090C FE 02       0094*  	cp 2
04090E 28 14       0095*  	jr z,@south
040910 FE 03       0096*  	cp 3
040912 28 13       0097*  	jr z,@west
040914             0098*  ; if none of those, return zeroes
040914 11 00 00 00 0099*  	ld de,0
040918 C9          0100*  	ret
040919             0101*  @north:
040919             0102*  ; x = 0, y = -d
040919 1E 00       0103*  	ld e,0
04091B 7A          0104*  	ld a,d
04091C ED 44       0105*  	neg
04091E 57          0106*  	ld d,a
04091F C9          0107*  	ret
040920             0108*  @east:
040920             0109*  ; x = d, y = 0
040920 5A          0110*  	ld e,d
040921 16 00       0111*  	ld d,0
040923 C9          0112*  	ret
040924             0113*  @south:
040924             0114*  ; x = 0, y = d
040924 1E 00       0115*  	ld e,0
040926 C9          0116*  	ret
040927             0117*  @west:
040927             0118*  ; x = -d, y = 0
040927 7A          0119*  	ld a,d
040928 ED 44       0120*  	neg
04092A 5F          0121*  	ld e,a
04092B 16 00       0122*  	ld d,0
04092D C9          0123*  	ret
04092E             0124*  
04092E             0125*  ; gets the direction from a dy,dx pair
04092E             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
04092E             0127*  ; inputs: ; d = dy ; e = dx
04092E             0128*  ; returns: a = orientation
04092E             0129*  get_dir_from_dy_dx:
04092E AF          0130*  	xor a
04092F 93          0131*  	sub e
040930 28 06       0132*  	jr z,@not_x
040932 3E 01       0133*  	ld a,1
040934 F8          0134*  	ret m
040935 3E 03       0135*  	ld a,3
040937 C9          0136*  	ret
040938             0137*  @not_x:
040938 AF          0138*  	xor a
040939 92          0139*  	sub d
04093A C8          0140*  	ret z
04093B 3E 02       0141*  	ld a,2
04093D F8          0142*  	ret m
04093E AF          0143*  	xor a
04093F C9          0144*  	ret
040940             0145*  
040940             0146*  
040940             0147*  ; translate camera relative x,y deltas to map x,y deltas
040940             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
040940             0149*  ; returns:	d = map_dy ; e = map_dx
040940             0150*  trans_dx_dy:
040940             0151*  ; modulo 4 on orientation
040940 E6 03       0152*  	and 0x03
040942 28 11       0153*  	jr z,@north
040944 FE 01       0154*  	cp 1 ; east
040946 28 12       0155*  	jr z,@east
040948 FE 02       0156*  	cp 2 ; south
04094A 28 12       0157*  	jr z,@south
04094C FE 03       0158*  	cp 3 ; west
04094E 28 13       0159*  	jr z,@west
040950             0160*  ; if none of those, return zeroes
040950 11 00 00 00 0161*  	ld de,0
040954 C9          0162*  	ret
040955             0163*  @north: ; invert y axis, x unnchanged
040955 7A          0164*  	ld a,d
040956 ED 44       0165*  	neg
040958 57          0166*  	ld d,a
040959 C9          0167*  	ret
04095A             0168*  @east: ; +x = +y, +y = +x
04095A 7A          0169*  	ld a,d
04095B 53          0170*  	ld d,e
04095C 5F          0171*  	ld e,a
04095D C9          0172*  	ret
04095E             0173*  @south: ; invert x axis, y unchanged
04095E 7B          0174*  	ld a,e
04095F ED 44       0175*  	neg
040961 5F          0176*  	ld e,a
040962 C9          0177*  	ret
040963             0178*  @west: ; +x = -y, +y = -x
040963 7A          0179*  	ld a,d ; y
040964 ED 44       0180*  	neg ; -y
040966 53          0181*  	ld d,e ; x
040967 5F          0182*  	ld e,a ; -y
040968 7A          0183*  	ld a,d ; x
040969 ED 44       0184*  	neg ; -x
04096B 57          0185*  	ld d,a ; -x
04096C C9          0186*  	ret
04096D             0187*  
04096D             0188*  ; initialize map variables and load map file
04096D             0189*  ; inputs: none
04096D             0190*  map_init:
04096D AF          0191*  	xor a
04096E 32 A2 40 04 0192*  	ld (cur_floor),a
040972 32 A3 40 04 0193*  	ld (cur_room),a
040976             0194*  ; load room file
040976 CD 7B 09 04 0195*  	call map_load
04097A C9          0196*  	ret
04097B             0197*  
04097B             0198*  ; load map file
04097B             0199*  ; inputs: cur_floor, cur_room set
04097B             0200*  map_load:
04097B 3A A2 40 04 0201*  	ld a,(cur_floor)
04097F 5F          0202*  	ld e,a
040980 16 03       0203*  	ld d,3 ; three bytes per lookup record
040982 ED 5C       0204*  	mlt de ; de = offset to floor lut entry
040984 21 29 0A 04 0205*  	ld hl,floors ; address of floors lut
040988 19          0206*  	add hl,de ; hl = address of floor lut entry
040989 ED 27       0207*  	ld hl,(hl) ; hl = base address of rooms for given floor
04098B 3A A3 40 04 0208*  	ld a,(cur_room)
04098F 5F          0209*  	ld e,a
040990 16 03       0210*  	ld d,3 ; three bytes per lookup record
040992 ED 5C       0211*  	mlt de ; de = offset to room lut entry
040994 19          0212*  	add hl,de ; hl = address of room lut entry
040995 ED 27       0213*  	ld hl,(hl) ; hl = address of room file name
040997 22 61 32 04 0214*  	ld (cur_filename),hl ; DEBUG
04099B 11 00 E0 B7 0215*  	ld de,cell_status ; address to load map data
04099F 01 00 08 00 0216*  	ld bc,2048 ; size of map data in bytes
0409A3 3E 01       0217*  	ld a,mos_load
0409A5 5B CF       0218*  	RST.LIL 08h
0409A7             0219*  ; ; load sprite data
0409A7             0220*  ; 	call map_init_sprites
0409A7 C9          0221*  	ret
0409A8             0222*  
0409A8             0223*  ; ; initialize sprite data for the current room into sprite table
0409A8             0224*  ; ; inputs: map data loaded
0409A8             0225*  ; map_init_sprites:
0409A8             0226*  ; ; initialize pointers
0409A8             0227*  ; 	ld ix,cell_status
0409A8             0228*  ; 	ld iy,sprite_table_base
0409A8             0229*  ; 	xor a
0409A8             0230*  ; 	ld (@cell_id),a
0409A8             0231*  ; @loop:
0409A8             0232*  ; 	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
0409A8             0233*  ; 	ld a,(ix+map_sprite_id)
0409A8             0234*  ; 	cp 255 ; check for no sprite
0409A8             0235*  ; 	jr z,@next_cell
0409A8             0236*  ; 	ld (iy+sprite_id),a
0409A8             0237*  ; 	ld a,(ix+map_img_idx)
0409A8             0238*  ; 	ld (iy+sprite_obj),a
0409A8             0239*  ; 	call sprite_init_data
0409A8             0240*  ; 	ld a,(@cell_id)
0409A8             0241*  ; 	call cell_id_to_coords ; d = map_y, e = map_x
0409A8             0242*  ; 	ld (iy+sprite_x),de ; set sprite x,y
0409A8             0243*  ; 	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
0409A8             0244*  ; @next_cell:
0409A8             0245*  ; 	lea ix,ix+map_record_size ; advance pointer to next cell
0409A8             0246*  ; ; check if we've reached the end of the map data
0409A8             0247*  ; 	ld a,(@cell_id)
0409A8             0248*  ; 	inc a
0409A8             0249*  ; 	ld (@cell_id),a
0409A8             0250*  ; 	jr nz,@loop ; still more to do
0409A8             0251*  ; ; cleanup and return
0409A8             0252*  ; 	ld iy,sprite_table_base ; reset pointer
0409A8             0253*  ; 	ld (sprite_table_pointer),iy
0409A8             0254*  ; 	ret
0409A8             0255*  ; @cell_id: db 0
0409A8             0256*  
0409A8             0257*  ; get the x,y map coordinates from a cell_id
0409A8             0258*  ; inputs: a = cell_id
0409A8             0259*  ; returns: a = cell_id, d = map_y, e = map_x
0409A8             0260*  cell_id_to_coords:
0409A8 11 00 00 00 0261*  	ld de,0 ; make sure deu is zero
0409AC F5          0262*  	push af	; Save the cell id
0409AD             0263*  ; Calculate the y coordinate by dividing the index by 16
0409AD 57          0264*  	ld d,a      ; Move index into d
0409AE CB 3A       0265*  	srl d        ; Shift right once (d = d / 2)
0409B0 CB 3A       0266*  	srl d        ; Shift right again (d = d / 4)
0409B2 CB 3A       0267*  	srl d        ; Shift right again (d = d / 8)
0409B4 CB 3A       0268*  	srl d        ; Shift right again (d = d / 16)
0409B6             0269*  ; Calculate the x coordinate by taking the index modulo 16
0409B6 E6 0F       0270*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
0409B8 5F          0271*  	ld e,a      ; e is now the x coordinate
0409B9 F1          0272*  	pop af	; a is cell id
0409BA C9          0273*  	ret
0409BB             0274*  
0409BB             0275*  ; get starting position in room 0 of a floor based on is_start flag being set
0409BB             0276*  ; inputs: none
0409BB             0277*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
0409BB             0278*  ; destroys: c,iy
0409BB             0279*  get_floor_start:
0409BB             0280*  ; loop through map data to find the obj_id in a
0409BB DD 21 00 E0 0281*  	ld ix,cell_status
       B7          
0409C0 0E 00       0282*  	ld c,0 ; c will be a loop counter giving us cell_id
0409C2             0283*  @start_cell_loop:
0409C2 DD 7E 00    0284*  	ld a,(ix+map_type_status)
0409C5 E6 08       0285*  	and cell_is_start
0409C7 20 06       0286*  	jr nz,@start_cell_found
0409C9 ED 32 04    0287*  	lea ix,ix+map_record_size
0409CC 0C          0288*  	inc c
0409CD 18 F3       0289*  	jr @start_cell_loop
0409CF             0290*  @start_cell_found:
0409CF 79          0291*  	ld a,c
0409D0 CD A8 09 04 0292*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
0409D4 ED 53 A8 40 0293*  	ld (cur_x),de
       04          
0409D9 C9          0294*  	ret
0409DA             0295*  
0409DA             0296*  ; get starting position based an obj_id
0409DA             0297*  ; inputs: a is the obj_id to search for
0409DA             0298*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
0409DA             0299*  ; destroys: c,iy
0409DA             0300*  get_room_start:
0409DA             0301*  ; loop through map data to find the obj_id in a
0409DA DD 21 00 E0 0302*  	ld ix,cell_status
       B7          
0409DF 0E 00       0303*  	ld c,0 ; c will be a loop counter giving us cell_id
0409E1             0304*  @start_cell_loop:
0409E1 DD BE 02    0305*  	cp (ix+map_obj_id)
0409E4 28 06       0306*  	jr z,@start_cell_found
0409E6 ED 32 04    0307*  	lea ix,ix+map_record_size
0409E9 0C          0308*  	inc c
0409EA 18 F5       0309*  	jr @start_cell_loop
0409EC             0310*  @start_cell_found:
0409EC 79          0311*  	ld a,c
0409ED CD A8 09 04 0312*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
0409F1 ED 53 A8 40 0313*  	ld (cur_x),de
       04          
0409F6 C9          0314*  	ret
0409F7             0315*  
0409F7             0316*  
0409F7             0317*  ; ; moves player to the room indicated by the too room cell they've just entered
0409F7             0318*  ; ; inputs: ix = pointer to the cell containing the too room door
0409F7             0319*  ; change_room:
0409F7             0320*  ; ; set visited flag for old room
0409F7             0321*  ; 	ld a,(cur_room)
0409F7             0322*  ; 	ld hl,room_flags
0409F7             0323*  ; 	ld de,0 ; make sure deu and d are zero
0409F7             0324*  ; 	ld e,a
0409F7             0325*  ; 	add hl,de ; hl = address of room flags entry
0409F7             0326*  ; 	ld a,room_flag_visited
0409F7             0327*  ; 	or (hl)
0409F7             0328*  ; 	ld (hl),a
0409F7             0329*  ; ; update from_room
0409F7             0330*  ; 	ld a,(cur_room)
0409F7             0331*  ; 	ld (from_room),a
0409F7             0332*  ; ; get the new room id from the cell and update cur_room
0409F7             0333*  ; 	ld hl,to_room_obj_lut
0409F7             0334*  ; 	ld a,(ix+map_obj_id)
0409F7             0335*  ; 	sub (hl)
0409F7             0336*  ; 	ld (cur_room),a
0409F7             0337*  ; ; save old room state to room dat memory location
0409F7             0338*  ; 	ld hl,room_dat_lut
0409F7             0339*  ; 	ld a,(from_room)
0409F7             0340*  ; 	ld d,a
0409F7             0341*  ; 	ld e,3 ; three bytes per lookup record
0409F7             0342*  ; 	mlt de ; de = offset to room dat entry
0409F7             0343*  ; 	add hl,de ; hl = address of room dat entry
0409F7             0344*  ; 	ld de,(hl) ; destination address for room data
0409F7             0345*  ; 	ld hl,cell_status ; source address for room data
0409F7             0346*  ; 	ld bc,8*1024 ; size of room data
0409F7             0347*  ; 	ldir
0409F7             0348*  ; ; check room visited flag for target room
0409F7             0349*  ; 	ld hl,room_flags
0409F7             0350*  ; 	ld a,(cur_room)
0409F7             0351*  ; 	ld de,0 ; make sure deu and d are zero
0409F7             0352*  ; 	ld e,a
0409F7             0353*  ; 	add hl,de ; hl = address of room flags entry
0409F7             0354*  ; 	ld a,room_flag_visited
0409F7             0355*  ; 	and (hl)
0409F7             0356*  ; 	jr nz,@room_visited
0409F7             0357*  ; ; room not visited so load room data from file
0409F7             0358*  ; 	call map_load
0409F7             0359*  ; 	call map_init_sprites
0409F7             0360*  ; 	jr @get_room_start
0409F7             0361*  ; @room_visited:
0409F7             0362*  ; ; fetch new room state from room dat memory location
0409F7             0363*  ; 	ld hl,room_dat_lut
0409F7             0364*  ; 	ld a,(cur_room)
0409F7             0365*  ; 	ld d,a
0409F7             0366*  ; 	ld e,3 ; three bytes per lookup record
0409F7             0367*  ; 	mlt de ; de = offset to room dat entry
0409F7             0368*  ; 	add hl,de ; hl = address of room dat entry
0409F7             0369*  ; 	ld hl,(hl) ; source address for room data
0409F7             0370*  ; 	ld de,cell_status ; destination address for room data
0409F7             0371*  ; 	ld bc,8*1024 ; size of room data
0409F7             0372*  ; 	ldir
0409F7             0373*  ; @get_room_start:
0409F7             0374*  ; ; get player starting position from to_room_obj_lut
0409F7             0375*  ; 	ld a,(from_room)
0409F7             0376*  ; 	ld hl,to_room_obj_lut
0409F7             0377*  ; 	ld de,0 ; make sure deu and d are zero
0409F7             0378*  ; 	ld e,a
0409F7             0379*  ; 	add hl,de ; hl = address of to_room_obj_lut entry
0409F7             0380*  ; 	ld a,(hl)
0409F7             0381*  ; 	call get_room_start
0409F7             0382*  ; 	ld (cur_x),de
0409F7             0383*  ; 	ret
0409F7             0384*  
0409F7 1E 1F 20 21 0385*  to_room_obj_lut: db 30,31,32,33,34,35,36,37,38,39
       22 23 24 25 
       26 27       
040A01             0386*  
040A01 00 00 00 00 0387*  room_flags: blkb 10,0
       00 00 00 00 
       00 00       
040A0B             0388*  room_flag_visited: equ %00000001
040A0B             0389*  
040A0B             0390*  room_dat_lut:
040A0B 00 00 0A    0391*  room_00_dat: dl 0x0A0000
040A0E 00 20 0A    0392*  room_01_dat: dl 0x0A2000
040A11 00 40 0A    0393*  room_02_dat: dl 0x0A4000
040A14 00 60 0A    0394*  room_03_dat: dl 0x0A6000
040A17 00 80 0A    0395*  room_04_dat: dl 0x0A8000
040A1A 00 A0 0A    0396*  room_05_dat: dl 0x0AA000
040A1D 00 C0 0A    0397*  room_06_dat: dl 0x0AC000
040A20 00 E0 0A    0398*  room_07_dat: dl 0x0AE000
040A23 00 00 0B    0399*  room_08_dat: dl 0x0B0000
040A26 00 20 0B    0400*  room_09_dat: dl 0x0B2000
040A29             0401*  
040A29             0402*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
040A29             0403*  
040A29             0404*  start_obj_id: equ 28
040A29             0405*  
040A29             0406*  floors:
040A29 2C 0A 04    0407*  	dl floor_00
040A2C             0408*  
040A2C             0409*  room_files:
040A2C             0410*  floor_00:
040A2C 35 0A 04    0411*  	dl room_00_0
040A2F 47 0A 04    0412*  	dl room_00_1
040A32 59 0A 04    0413*  	dl room_00_2
040A35             0414*  
040A35 6D 61 70 73 0415*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
040A47 6D 61 70 73 0416*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
040A59 6D 61 70 73 0417*  room_00_2: db "maps/map_00_2.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       32 2E 62 69 
       6E 00       
040A6B             0016   	; include "src/asm/render.inc"
040A6B             0017   	include "src/asm/font_itc_honda.inc"
040A6B             0001*  ; Bitmap indices:
040A6B             0002*  BUF_0544: equ 0x0220 ; 32
040A6B             0003*  ; Missing character 33 !
040A6B             0004*  ; Missing character 34 "
040A6B             0005*  ; Missing character 35 #
040A6B             0006*  ; Missing character 36 $
040A6B             0007*  ; Missing character 37 %
040A6B             0008*  ; Missing character 38 &
040A6B             0009*  ; Missing character 39 '
040A6B             0010*  ; Missing character 40 (
040A6B             0011*  ; Missing character 41 )
040A6B             0012*  ; Missing character 42 *
040A6B             0013*  ; Missing character 43 +
040A6B             0014*  ; Missing character 44 ,
040A6B             0015*  ; Missing character 45 -
040A6B             0016*  BUF_0558: equ 0x022E ; 46 .
040A6B             0017*  ; Missing character 47 /
040A6B             0018*  BUF_0560: equ 0x0230 ; 48 0
040A6B             0019*  BUF_0561: equ 0x0231 ; 49 1
040A6B             0020*  BUF_0562: equ 0x0232 ; 50 2
040A6B             0021*  BUF_0563: equ 0x0233 ; 51 3
040A6B             0022*  BUF_0564: equ 0x0234 ; 52 4
040A6B             0023*  BUF_0565: equ 0x0235 ; 53 5
040A6B             0024*  BUF_0566: equ 0x0236 ; 54 6
040A6B             0025*  BUF_0567: equ 0x0237 ; 55 7
040A6B             0026*  BUF_0568: equ 0x0238 ; 56 8
040A6B             0027*  BUF_0569: equ 0x0239 ; 57 9
040A6B             0028*  ; Missing character 58 :
040A6B             0029*  ; Missing character 59 ;
040A6B             0030*  ; Missing character 60 <
040A6B             0031*  ; Missing character 61 =
040A6B             0032*  ; Missing character 62 >
040A6B             0033*  ; Missing character 63 ?
040A6B             0034*  ; Missing character 64 @
040A6B             0035*  BUF_0577: equ 0x0241 ; 65 A
040A6B             0036*  BUF_0578: equ 0x0242 ; 66 B
040A6B             0037*  BUF_0579: equ 0x0243 ; 67 C
040A6B             0038*  BUF_0580: equ 0x0244 ; 68 D
040A6B             0039*  BUF_0581: equ 0x0245 ; 69 E
040A6B             0040*  BUF_0582: equ 0x0246 ; 70 F
040A6B             0041*  BUF_0583: equ 0x0247 ; 71 G
040A6B             0042*  BUF_0584: equ 0x0248 ; 72 H
040A6B             0043*  BUF_0585: equ 0x0249 ; 73 I
040A6B             0044*  BUF_0586: equ 0x024A ; 74 J
040A6B             0045*  BUF_0587: equ 0x024B ; 75 K
040A6B             0046*  BUF_0588: equ 0x024C ; 76 L
040A6B             0047*  BUF_0589: equ 0x024D ; 77 M
040A6B             0048*  BUF_0590: equ 0x024E ; 78 N
040A6B             0049*  BUF_0591: equ 0x024F ; 79 O
040A6B             0050*  BUF_0592: equ 0x0250 ; 80 P
040A6B             0051*  BUF_0593: equ 0x0251 ; 81 Q
040A6B             0052*  BUF_0594: equ 0x0252 ; 82 R
040A6B             0053*  BUF_0595: equ 0x0253 ; 83 S
040A6B             0054*  BUF_0596: equ 0x0254 ; 84 T
040A6B             0055*  BUF_0597: equ 0x0255 ; 85 U
040A6B             0056*  BUF_0598: equ 0x0256 ; 86 V
040A6B             0057*  BUF_0599: equ 0x0257 ; 87 W
040A6B             0058*  BUF_0600: equ 0x0258 ; 88 X
040A6B             0059*  BUF_0601: equ 0x0259 ; 89 Y
040A6B             0060*  BUF_0602: equ 0x025A ; 90 Z
040A6B             0061*  ; Missing character 91 [
040A6B             0062*  ; Missing character 92 \
040A6B             0063*  ; Missing character 93 ]
040A6B             0064*  ; Missing character 94 ^
040A6B             0065*  ; Missing character 95 _
040A6B             0066*  ; Missing character 96 `
040A6B             0067*  BUF_0609: equ 0x0261 ; 97 a
040A6B             0068*  BUF_0610: equ 0x0262 ; 98 b
040A6B             0069*  BUF_0611: equ 0x0263 ; 99 c
040A6B             0070*  BUF_0612: equ 0x0264 ; 100 d
040A6B             0071*  BUF_0613: equ 0x0265 ; 101 e
040A6B             0072*  BUF_0614: equ 0x0266 ; 102 f
040A6B             0073*  BUF_0615: equ 0x0267 ; 103 g
040A6B             0074*  BUF_0616: equ 0x0268 ; 104 h
040A6B             0075*  BUF_0617: equ 0x0269 ; 105 i
040A6B             0076*  BUF_0618: equ 0x026A ; 106 j
040A6B             0077*  BUF_0619: equ 0x026B ; 107 k
040A6B             0078*  BUF_0620: equ 0x026C ; 108 l
040A6B             0079*  BUF_0621: equ 0x026D ; 109 m
040A6B             0080*  BUF_0622: equ 0x026E ; 110 n
040A6B             0081*  BUF_0623: equ 0x026F ; 111 o
040A6B             0082*  BUF_0624: equ 0x0270 ; 112 p
040A6B             0083*  BUF_0625: equ 0x0271 ; 113 q
040A6B             0084*  BUF_0626: equ 0x0272 ; 114 r
040A6B             0085*  BUF_0627: equ 0x0273 ; 115 s
040A6B             0086*  BUF_0628: equ 0x0274 ; 116 t
040A6B             0087*  BUF_0629: equ 0x0275 ; 117 u
040A6B             0088*  BUF_0630: equ 0x0276 ; 118 v
040A6B             0089*  BUF_0631: equ 0x0277 ; 119 w
040A6B             0090*  BUF_0632: equ 0x0278 ; 120 x
040A6B             0091*  BUF_0633: equ 0x0279 ; 121 y
040A6B             0092*  BUF_0634: equ 0x027A ; 122 z
040A6B             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
040A6B             0094*  font_itc_honda:
040A6B 06 01 00 20 0095*  	dl 0x000106,BUF_0544
       02 00       
040A71 06 01 00 20 0096*  	dl 0x000106,BUF_0544 ; Missing character 33
       02 00       
040A77 06 01 00 20 0097*  	dl 0x000106,BUF_0544 ; Missing character 34
       02 00       
040A7D 06 01 00 20 0098*  	dl 0x000106,BUF_0544 ; Missing character 35
       02 00       
040A83 06 01 00 20 0099*  	dl 0x000106,BUF_0544 ; Missing character 36
       02 00       
040A89 06 01 00 20 0100*  	dl 0x000106,BUF_0544 ; Missing character 37
       02 00       
040A8F 06 01 00 20 0101*  	dl 0x000106,BUF_0544 ; Missing character 38
       02 00       
040A95 06 01 00 20 0102*  	dl 0x000106,BUF_0544 ; Missing character 39
       02 00       
040A9B 06 01 00 20 0103*  	dl 0x000106,BUF_0544 ; Missing character 40
       02 00       
040AA1 06 01 00 20 0104*  	dl 0x000106,BUF_0544 ; Missing character 41
       02 00       
040AA7 06 01 00 20 0105*  	dl 0x000106,BUF_0544 ; Missing character 42
       02 00       
040AAD 06 01 00 20 0106*  	dl 0x000106,BUF_0544 ; Missing character 43
       02 00       
040AB3 06 01 00 20 0107*  	dl 0x000106,BUF_0544 ; Missing character 44
       02 00       
040AB9 06 01 00 20 0108*  	dl 0x000106,BUF_0544 ; Missing character 45
       02 00       
040ABF 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_0558
       02 00       
040AC5 06 01 00 20 0110*  	dl 0x000106,BUF_0544 ; Missing character 47
       02 00       
040ACB 0A 12 00 30 0111*  	dl 0x00120A,BUF_0560
       02 00       
040AD1 04 12 00 31 0112*  	dl 0x001204,BUF_0561
       02 00       
040AD7 09 12 00 32 0113*  	dl 0x001209,BUF_0562
       02 00       
040ADD 0A 12 00 33 0114*  	dl 0x00120A,BUF_0563
       02 00       
040AE3 0C 12 00 34 0115*  	dl 0x00120C,BUF_0564
       02 00       
040AE9 0A 12 00 35 0116*  	dl 0x00120A,BUF_0565
       02 00       
040AEF 0A 12 00 36 0117*  	dl 0x00120A,BUF_0566
       02 00       
040AF5 08 12 00 37 0118*  	dl 0x001208,BUF_0567
       02 00       
040AFB 0A 12 00 38 0119*  	dl 0x00120A,BUF_0568
       02 00       
040B01 0A 12 00 39 0120*  	dl 0x00120A,BUF_0569
       02 00       
040B07 06 01 00 20 0121*  	dl 0x000106,BUF_0544 ; Missing character 58
       02 00       
040B0D 06 01 00 20 0122*  	dl 0x000106,BUF_0544 ; Missing character 59
       02 00       
040B13 06 01 00 20 0123*  	dl 0x000106,BUF_0544 ; Missing character 60
       02 00       
040B19 06 01 00 20 0124*  	dl 0x000106,BUF_0544 ; Missing character 61
       02 00       
040B1F 06 01 00 20 0125*  	dl 0x000106,BUF_0544 ; Missing character 62
       02 00       
040B25 06 01 00 20 0126*  	dl 0x000106,BUF_0544 ; Missing character 63
       02 00       
040B2B 06 01 00 20 0127*  	dl 0x000106,BUF_0544 ; Missing character 64
       02 00       
040B31 0A 12 01 41 0128*  	dl 0x01120A,BUF_0577
       02 00       
040B37 0A 12 00 42 0129*  	dl 0x00120A,BUF_0578
       02 00       
040B3D 08 13 00 43 0130*  	dl 0x001308,BUF_0579
       02 00       
040B43 0A 12 00 44 0131*  	dl 0x00120A,BUF_0580
       02 00       
040B49 08 12 00 45 0132*  	dl 0x001208,BUF_0581
       02 00       
040B4F 08 12 00 46 0133*  	dl 0x001208,BUF_0582
       02 00       
040B55 0A 12 00 47 0134*  	dl 0x00120A,BUF_0583
       02 00       
040B5B 0A 12 00 48 0135*  	dl 0x00120A,BUF_0584
       02 00       
040B61 03 12 00 49 0136*  	dl 0x001203,BUF_0585
       02 00       
040B67 06 12 00 4A 0137*  	dl 0x001206,BUF_0586
       02 00       
040B6D 0A 12 00 4B 0138*  	dl 0x00120A,BUF_0587
       02 00       
040B73 08 12 01 4C 0139*  	dl 0x011208,BUF_0588
       02 00       
040B79 0E 12 00 4D 0140*  	dl 0x00120E,BUF_0589
       02 00       
040B7F 0A 12 00 4E 0141*  	dl 0x00120A,BUF_0590
       02 00       
040B85 0A 12 00 4F 0142*  	dl 0x00120A,BUF_0591
       02 00       
040B8B 0A 12 00 50 0143*  	dl 0x00120A,BUF_0592
       02 00       
040B91 0A 15 00 51 0144*  	dl 0x00150A,BUF_0593
       02 00       
040B97 0A 12 00 52 0145*  	dl 0x00120A,BUF_0594
       02 00       
040B9D 09 13 00 53 0146*  	dl 0x001309,BUF_0595
       02 00       
040BA3 0A 12 00 54 0147*  	dl 0x00120A,BUF_0596
       02 00       
040BA9 0A 12 00 55 0148*  	dl 0x00120A,BUF_0597
       02 00       
040BAF 0A 12 00 56 0149*  	dl 0x00120A,BUF_0598
       02 00       
040BB5 10 12 00 57 0150*  	dl 0x001210,BUF_0599
       02 00       
040BBB 0A 12 00 58 0151*  	dl 0x00120A,BUF_0600
       02 00       
040BC1 0A 12 01 59 0152*  	dl 0x01120A,BUF_0601
       02 00       
040BC7 09 12 01 5A 0153*  	dl 0x011209,BUF_0602
       02 00       
040BCD 06 01 00 20 0154*  	dl 0x000106,BUF_0544 ; Missing character 91
       02 00       
040BD3 06 01 00 20 0155*  	dl 0x000106,BUF_0544 ; Missing character 92
       02 00       
040BD9 06 01 00 20 0156*  	dl 0x000106,BUF_0544 ; Missing character 93
       02 00       
040BDF 06 01 00 20 0157*  	dl 0x000106,BUF_0544 ; Missing character 94
       02 00       
040BE5 06 01 00 20 0158*  	dl 0x000106,BUF_0544 ; Missing character 95
       02 00       
040BEB 06 01 00 20 0159*  	dl 0x000106,BUF_0544 ; Missing character 96
       02 00       
040BF1 08 0C 06 61 0160*  	dl 0x060C08,BUF_0609
       02 00       
040BF7 09 12 01 62 0161*  	dl 0x011209,BUF_0610
       02 00       
040BFD 07 0C 06 63 0162*  	dl 0x060C07,BUF_0611
       02 00       
040C03 09 12 00 64 0163*  	dl 0x001209,BUF_0612
       02 00       
040C09 08 0C 06 65 0164*  	dl 0x060C08,BUF_0613
       02 00       
040C0F 09 12 00 66 0165*  	dl 0x001209,BUF_0614
       02 00       
040C15 09 12 06 67 0166*  	dl 0x061209,BUF_0615
       02 00       
040C1B 09 12 01 68 0167*  	dl 0x011209,BUF_0616
       02 00       
040C21 04 12 00 69 0168*  	dl 0x001204,BUF_0617
       02 00       
040C27 08 18 00 6A 0169*  	dl 0x001808,BUF_0618
       02 00       
040C2D 09 12 01 6B 0170*  	dl 0x011209,BUF_0619
       02 00       
040C33 03 12 00 6C 0171*  	dl 0x001203,BUF_0620
       02 00       
040C39 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_0621
       02 00       
040C3F 09 0C 06 6E 0173*  	dl 0x060C09,BUF_0622
       02 00       
040C45 09 0C 06 6F 0174*  	dl 0x060C09,BUF_0623
       02 00       
040C4B 09 12 06 70 0175*  	dl 0x061209,BUF_0624
       02 00       
040C51 09 12 06 71 0176*  	dl 0x061209,BUF_0625
       02 00       
040C57 06 0D 06 72 0177*  	dl 0x060D06,BUF_0626
       02 00       
040C5D 08 0D 06 73 0178*  	dl 0x060D08,BUF_0627
       02 00       
040C63 07 0F 03 74 0179*  	dl 0x030F07,BUF_0628
       02 00       
040C69 09 0C 06 75 0180*  	dl 0x060C09,BUF_0629
       02 00       
040C6F 09 0C 06 76 0181*  	dl 0x060C09,BUF_0630
       02 00       
040C75 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_0631
       02 00       
040C7B 09 0C 06 78 0183*  	dl 0x060C09,BUF_0632
       02 00       
040C81 09 11 06 79 0184*  	dl 0x061109,BUF_0633
       02 00       
040C87 09 0C 06 7A 0185*  	dl 0x060C09,BUF_0634
       02 00       
040C8D             0186*  
040C8D             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
040C8D             0188*  load_font_itc_honda:
040C8D             0189*  
040C8D 21 20 02 00 0190*  	ld hl,BUF_0544
040C91 01 06 00 00 0191*  	ld bc,6
040C95 11 01 00 00 0192*  	ld de,1
040C99 DD 21 06 00 0193*  	ld ix,6
       00          
040C9E FD 21 0E 13 0194*  	ld iy,Fhonda032
       04          
040CA3 CD DC 33 04 0195*  	call vdu_load_img_2
040CA7             0196*  ; Missing character 33
040CA7             0197*  ; Missing character 34
040CA7             0198*  ; Missing character 35
040CA7             0199*  ; Missing character 36
040CA7             0200*  ; Missing character 37
040CA7             0201*  ; Missing character 38
040CA7             0202*  ; Missing character 39
040CA7             0203*  ; Missing character 40
040CA7             0204*  ; Missing character 41
040CA7             0205*  ; Missing character 42
040CA7             0206*  ; Missing character 43
040CA7             0207*  ; Missing character 44
040CA7             0208*  ; Missing character 45
040CA7             0209*  
040CA7 21 2E 02 00 0210*  	ld hl,BUF_0558
040CAB 01 05 00 00 0211*  	ld bc,5
040CAF 11 05 00 00 0212*  	ld de,5
040CB3 DD 21 19 00 0213*  	ld ix,25
       00          
040CB8 FD 21 24 13 0214*  	ld iy,Fhonda046
       04          
040CBD CD DC 33 04 0215*  	call vdu_load_img_2
040CC1             0216*  ; Missing character 47
040CC1             0217*  
040CC1 21 30 02 00 0218*  	ld hl,BUF_0560
040CC5 01 0A 00 00 0219*  	ld bc,10
040CC9 11 12 00 00 0220*  	ld de,18
040CCD DD 21 B4 00 0221*  	ld ix,180
       00          
040CD2 FD 21 3A 13 0222*  	ld iy,Fhonda048
       04          
040CD7 CD DC 33 04 0223*  	call vdu_load_img_2
040CDB             0224*  
040CDB 21 31 02 00 0225*  	ld hl,BUF_0561
040CDF 01 04 00 00 0226*  	ld bc,4
040CE3 11 12 00 00 0227*  	ld de,18
040CE7 DD 21 48 00 0228*  	ld ix,72
       00          
040CEC FD 21 50 13 0229*  	ld iy,Fhonda049
       04          
040CF1 CD DC 33 04 0230*  	call vdu_load_img_2
040CF5             0231*  
040CF5 21 32 02 00 0232*  	ld hl,BUF_0562
040CF9 01 09 00 00 0233*  	ld bc,9
040CFD 11 12 00 00 0234*  	ld de,18
040D01 DD 21 A2 00 0235*  	ld ix,162
       00          
040D06 FD 21 66 13 0236*  	ld iy,Fhonda050
       04          
040D0B CD DC 33 04 0237*  	call vdu_load_img_2
040D0F             0238*  
040D0F 21 33 02 00 0239*  	ld hl,BUF_0563
040D13 01 0A 00 00 0240*  	ld bc,10
040D17 11 12 00 00 0241*  	ld de,18
040D1B DD 21 B4 00 0242*  	ld ix,180
       00          
040D20 FD 21 7C 13 0243*  	ld iy,Fhonda051
       04          
040D25 CD DC 33 04 0244*  	call vdu_load_img_2
040D29             0245*  
040D29 21 34 02 00 0246*  	ld hl,BUF_0564
040D2D 01 0C 00 00 0247*  	ld bc,12
040D31 11 12 00 00 0248*  	ld de,18
040D35 DD 21 D8 00 0249*  	ld ix,216
       00          
040D3A FD 21 92 13 0250*  	ld iy,Fhonda052
       04          
040D3F CD DC 33 04 0251*  	call vdu_load_img_2
040D43             0252*  
040D43 21 35 02 00 0253*  	ld hl,BUF_0565
040D47 01 0A 00 00 0254*  	ld bc,10
040D4B 11 12 00 00 0255*  	ld de,18
040D4F DD 21 B4 00 0256*  	ld ix,180
       00          
040D54 FD 21 A8 13 0257*  	ld iy,Fhonda053
       04          
040D59 CD DC 33 04 0258*  	call vdu_load_img_2
040D5D             0259*  
040D5D 21 36 02 00 0260*  	ld hl,BUF_0566
040D61 01 0A 00 00 0261*  	ld bc,10
040D65 11 12 00 00 0262*  	ld de,18
040D69 DD 21 B4 00 0263*  	ld ix,180
       00          
040D6E FD 21 BE 13 0264*  	ld iy,Fhonda054
       04          
040D73 CD DC 33 04 0265*  	call vdu_load_img_2
040D77             0266*  
040D77 21 37 02 00 0267*  	ld hl,BUF_0567
040D7B 01 08 00 00 0268*  	ld bc,8
040D7F 11 12 00 00 0269*  	ld de,18
040D83 DD 21 90 00 0270*  	ld ix,144
       00          
040D88 FD 21 D4 13 0271*  	ld iy,Fhonda055
       04          
040D8D CD DC 33 04 0272*  	call vdu_load_img_2
040D91             0273*  
040D91 21 38 02 00 0274*  	ld hl,BUF_0568
040D95 01 0A 00 00 0275*  	ld bc,10
040D99 11 12 00 00 0276*  	ld de,18
040D9D DD 21 B4 00 0277*  	ld ix,180
       00          
040DA2 FD 21 EA 13 0278*  	ld iy,Fhonda056
       04          
040DA7 CD DC 33 04 0279*  	call vdu_load_img_2
040DAB             0280*  
040DAB 21 39 02 00 0281*  	ld hl,BUF_0569
040DAF 01 0A 00 00 0282*  	ld bc,10
040DB3 11 12 00 00 0283*  	ld de,18
040DB7 DD 21 B4 00 0284*  	ld ix,180
       00          
040DBC FD 21 00 14 0285*  	ld iy,Fhonda057
       04          
040DC1 CD DC 33 04 0286*  	call vdu_load_img_2
040DC5             0287*  ; Missing character 58
040DC5             0288*  ; Missing character 59
040DC5             0289*  ; Missing character 60
040DC5             0290*  ; Missing character 61
040DC5             0291*  ; Missing character 62
040DC5             0292*  ; Missing character 63
040DC5             0293*  ; Missing character 64
040DC5             0294*  
040DC5 21 41 02 00 0295*  	ld hl,BUF_0577
040DC9 01 0A 00 00 0296*  	ld bc,10
040DCD 11 12 00 00 0297*  	ld de,18
040DD1 DD 21 B4 00 0298*  	ld ix,180
       00          
040DD6 FD 21 16 14 0299*  	ld iy,Fhonda065
       04          
040DDB CD DC 33 04 0300*  	call vdu_load_img_2
040DDF             0301*  
040DDF 21 42 02 00 0302*  	ld hl,BUF_0578
040DE3 01 0A 00 00 0303*  	ld bc,10
040DE7 11 12 00 00 0304*  	ld de,18
040DEB DD 21 B4 00 0305*  	ld ix,180
       00          
040DF0 FD 21 2C 14 0306*  	ld iy,Fhonda066
       04          
040DF5 CD DC 33 04 0307*  	call vdu_load_img_2
040DF9             0308*  
040DF9 21 43 02 00 0309*  	ld hl,BUF_0579
040DFD 01 08 00 00 0310*  	ld bc,8
040E01 11 13 00 00 0311*  	ld de,19
040E05 DD 21 98 00 0312*  	ld ix,152
       00          
040E0A FD 21 42 14 0313*  	ld iy,Fhonda067
       04          
040E0F CD DC 33 04 0314*  	call vdu_load_img_2
040E13             0315*  
040E13 21 44 02 00 0316*  	ld hl,BUF_0580
040E17 01 0A 00 00 0317*  	ld bc,10
040E1B 11 12 00 00 0318*  	ld de,18
040E1F DD 21 B4 00 0319*  	ld ix,180
       00          
040E24 FD 21 58 14 0320*  	ld iy,Fhonda068
       04          
040E29 CD DC 33 04 0321*  	call vdu_load_img_2
040E2D             0322*  
040E2D 21 45 02 00 0323*  	ld hl,BUF_0581
040E31 01 08 00 00 0324*  	ld bc,8
040E35 11 12 00 00 0325*  	ld de,18
040E39 DD 21 90 00 0326*  	ld ix,144
       00          
040E3E FD 21 6E 14 0327*  	ld iy,Fhonda069
       04          
040E43 CD DC 33 04 0328*  	call vdu_load_img_2
040E47             0329*  
040E47 21 46 02 00 0330*  	ld hl,BUF_0582
040E4B 01 08 00 00 0331*  	ld bc,8
040E4F 11 12 00 00 0332*  	ld de,18
040E53 DD 21 90 00 0333*  	ld ix,144
       00          
040E58 FD 21 84 14 0334*  	ld iy,Fhonda070
       04          
040E5D CD DC 33 04 0335*  	call vdu_load_img_2
040E61             0336*  
040E61 21 47 02 00 0337*  	ld hl,BUF_0583
040E65 01 0A 00 00 0338*  	ld bc,10
040E69 11 12 00 00 0339*  	ld de,18
040E6D DD 21 B4 00 0340*  	ld ix,180
       00          
040E72 FD 21 9A 14 0341*  	ld iy,Fhonda071
       04          
040E77 CD DC 33 04 0342*  	call vdu_load_img_2
040E7B             0343*  
040E7B 21 48 02 00 0344*  	ld hl,BUF_0584
040E7F 01 0A 00 00 0345*  	ld bc,10
040E83 11 12 00 00 0346*  	ld de,18
040E87 DD 21 B4 00 0347*  	ld ix,180
       00          
040E8C FD 21 B0 14 0348*  	ld iy,Fhonda072
       04          
040E91 CD DC 33 04 0349*  	call vdu_load_img_2
040E95             0350*  
040E95 21 49 02 00 0351*  	ld hl,BUF_0585
040E99 01 03 00 00 0352*  	ld bc,3
040E9D 11 12 00 00 0353*  	ld de,18
040EA1 DD 21 36 00 0354*  	ld ix,54
       00          
040EA6 FD 21 C6 14 0355*  	ld iy,Fhonda073
       04          
040EAB CD DC 33 04 0356*  	call vdu_load_img_2
040EAF             0357*  
040EAF 21 4A 02 00 0358*  	ld hl,BUF_0586
040EB3 01 06 00 00 0359*  	ld bc,6
040EB7 11 12 00 00 0360*  	ld de,18
040EBB DD 21 6C 00 0361*  	ld ix,108
       00          
040EC0 FD 21 DC 14 0362*  	ld iy,Fhonda074
       04          
040EC5 CD DC 33 04 0363*  	call vdu_load_img_2
040EC9             0364*  
040EC9 21 4B 02 00 0365*  	ld hl,BUF_0587
040ECD 01 0A 00 00 0366*  	ld bc,10
040ED1 11 12 00 00 0367*  	ld de,18
040ED5 DD 21 B4 00 0368*  	ld ix,180
       00          
040EDA FD 21 F2 14 0369*  	ld iy,Fhonda075
       04          
040EDF CD DC 33 04 0370*  	call vdu_load_img_2
040EE3             0371*  
040EE3 21 4C 02 00 0372*  	ld hl,BUF_0588
040EE7 01 08 00 00 0373*  	ld bc,8
040EEB 11 12 00 00 0374*  	ld de,18
040EEF DD 21 90 00 0375*  	ld ix,144
       00          
040EF4 FD 21 08 15 0376*  	ld iy,Fhonda076
       04          
040EF9 CD DC 33 04 0377*  	call vdu_load_img_2
040EFD             0378*  
040EFD 21 4D 02 00 0379*  	ld hl,BUF_0589
040F01 01 0E 00 00 0380*  	ld bc,14
040F05 11 12 00 00 0381*  	ld de,18
040F09 DD 21 FC 00 0382*  	ld ix,252
       00          
040F0E FD 21 1E 15 0383*  	ld iy,Fhonda077
       04          
040F13 CD DC 33 04 0384*  	call vdu_load_img_2
040F17             0385*  
040F17 21 4E 02 00 0386*  	ld hl,BUF_0590
040F1B 01 0A 00 00 0387*  	ld bc,10
040F1F 11 12 00 00 0388*  	ld de,18
040F23 DD 21 B4 00 0389*  	ld ix,180
       00          
040F28 FD 21 34 15 0390*  	ld iy,Fhonda078
       04          
040F2D CD DC 33 04 0391*  	call vdu_load_img_2
040F31             0392*  
040F31 21 4F 02 00 0393*  	ld hl,BUF_0591
040F35 01 0A 00 00 0394*  	ld bc,10
040F39 11 12 00 00 0395*  	ld de,18
040F3D DD 21 B4 00 0396*  	ld ix,180
       00          
040F42 FD 21 4A 15 0397*  	ld iy,Fhonda079
       04          
040F47 CD DC 33 04 0398*  	call vdu_load_img_2
040F4B             0399*  
040F4B 21 50 02 00 0400*  	ld hl,BUF_0592
040F4F 01 0A 00 00 0401*  	ld bc,10
040F53 11 12 00 00 0402*  	ld de,18
040F57 DD 21 B4 00 0403*  	ld ix,180
       00          
040F5C FD 21 60 15 0404*  	ld iy,Fhonda080
       04          
040F61 CD DC 33 04 0405*  	call vdu_load_img_2
040F65             0406*  
040F65 21 51 02 00 0407*  	ld hl,BUF_0593
040F69 01 0A 00 00 0408*  	ld bc,10
040F6D 11 15 00 00 0409*  	ld de,21
040F71 DD 21 D2 00 0410*  	ld ix,210
       00          
040F76 FD 21 76 15 0411*  	ld iy,Fhonda081
       04          
040F7B CD DC 33 04 0412*  	call vdu_load_img_2
040F7F             0413*  
040F7F 21 52 02 00 0414*  	ld hl,BUF_0594
040F83 01 0A 00 00 0415*  	ld bc,10
040F87 11 12 00 00 0416*  	ld de,18
040F8B DD 21 B4 00 0417*  	ld ix,180
       00          
040F90 FD 21 8C 15 0418*  	ld iy,Fhonda082
       04          
040F95 CD DC 33 04 0419*  	call vdu_load_img_2
040F99             0420*  
040F99 21 53 02 00 0421*  	ld hl,BUF_0595
040F9D 01 09 00 00 0422*  	ld bc,9
040FA1 11 13 00 00 0423*  	ld de,19
040FA5 DD 21 AB 00 0424*  	ld ix,171
       00          
040FAA FD 21 A2 15 0425*  	ld iy,Fhonda083
       04          
040FAF CD DC 33 04 0426*  	call vdu_load_img_2
040FB3             0427*  
040FB3 21 54 02 00 0428*  	ld hl,BUF_0596
040FB7 01 0A 00 00 0429*  	ld bc,10
040FBB 11 12 00 00 0430*  	ld de,18
040FBF DD 21 B4 00 0431*  	ld ix,180
       00          
040FC4 FD 21 B8 15 0432*  	ld iy,Fhonda084
       04          
040FC9 CD DC 33 04 0433*  	call vdu_load_img_2
040FCD             0434*  
040FCD 21 55 02 00 0435*  	ld hl,BUF_0597
040FD1 01 0A 00 00 0436*  	ld bc,10
040FD5 11 12 00 00 0437*  	ld de,18
040FD9 DD 21 B4 00 0438*  	ld ix,180
       00          
040FDE FD 21 CE 15 0439*  	ld iy,Fhonda085
       04          
040FE3 CD DC 33 04 0440*  	call vdu_load_img_2
040FE7             0441*  
040FE7 21 56 02 00 0442*  	ld hl,BUF_0598
040FEB 01 0A 00 00 0443*  	ld bc,10
040FEF 11 12 00 00 0444*  	ld de,18
040FF3 DD 21 B4 00 0445*  	ld ix,180
       00          
040FF8 FD 21 E4 15 0446*  	ld iy,Fhonda086
       04          
040FFD CD DC 33 04 0447*  	call vdu_load_img_2
041001             0448*  
041001 21 57 02 00 0449*  	ld hl,BUF_0599
041005 01 10 00 00 0450*  	ld bc,16
041009 11 12 00 00 0451*  	ld de,18
04100D DD 21 20 01 0452*  	ld ix,288
       00          
041012 FD 21 FA 15 0453*  	ld iy,Fhonda087
       04          
041017 CD DC 33 04 0454*  	call vdu_load_img_2
04101B             0455*  
04101B 21 58 02 00 0456*  	ld hl,BUF_0600
04101F 01 0A 00 00 0457*  	ld bc,10
041023 11 12 00 00 0458*  	ld de,18
041027 DD 21 B4 00 0459*  	ld ix,180
       00          
04102C FD 21 10 16 0460*  	ld iy,Fhonda088
       04          
041031 CD DC 33 04 0461*  	call vdu_load_img_2
041035             0462*  
041035 21 59 02 00 0463*  	ld hl,BUF_0601
041039 01 0A 00 00 0464*  	ld bc,10
04103D 11 12 00 00 0465*  	ld de,18
041041 DD 21 B4 00 0466*  	ld ix,180
       00          
041046 FD 21 26 16 0467*  	ld iy,Fhonda089
       04          
04104B CD DC 33 04 0468*  	call vdu_load_img_2
04104F             0469*  
04104F 21 5A 02 00 0470*  	ld hl,BUF_0602
041053 01 09 00 00 0471*  	ld bc,9
041057 11 12 00 00 0472*  	ld de,18
04105B DD 21 A2 00 0473*  	ld ix,162
       00          
041060 FD 21 3C 16 0474*  	ld iy,Fhonda090
       04          
041065 CD DC 33 04 0475*  	call vdu_load_img_2
041069             0476*  ; Missing character 91
041069             0477*  ; Missing character 92
041069             0478*  ; Missing character 93
041069             0479*  ; Missing character 94
041069             0480*  ; Missing character 95
041069             0481*  ; Missing character 96
041069             0482*  
041069 21 61 02 00 0483*  	ld hl,BUF_0609
04106D 01 08 00 00 0484*  	ld bc,8
041071 11 0C 00 00 0485*  	ld de,12
041075 DD 21 60 00 0486*  	ld ix,96
       00          
04107A FD 21 52 16 0487*  	ld iy,Fhonda097
       04          
04107F CD DC 33 04 0488*  	call vdu_load_img_2
041083             0489*  
041083 21 62 02 00 0490*  	ld hl,BUF_0610
041087 01 09 00 00 0491*  	ld bc,9
04108B 11 12 00 00 0492*  	ld de,18
04108F DD 21 A2 00 0493*  	ld ix,162
       00          
041094 FD 21 68 16 0494*  	ld iy,Fhonda098
       04          
041099 CD DC 33 04 0495*  	call vdu_load_img_2
04109D             0496*  
04109D 21 63 02 00 0497*  	ld hl,BUF_0611
0410A1 01 07 00 00 0498*  	ld bc,7
0410A5 11 0C 00 00 0499*  	ld de,12
0410A9 DD 21 54 00 0500*  	ld ix,84
       00          
0410AE FD 21 7E 16 0501*  	ld iy,Fhonda099
       04          
0410B3 CD DC 33 04 0502*  	call vdu_load_img_2
0410B7             0503*  
0410B7 21 64 02 00 0504*  	ld hl,BUF_0612
0410BB 01 09 00 00 0505*  	ld bc,9
0410BF 11 12 00 00 0506*  	ld de,18
0410C3 DD 21 A2 00 0507*  	ld ix,162
       00          
0410C8 FD 21 94 16 0508*  	ld iy,Fhonda100
       04          
0410CD CD DC 33 04 0509*  	call vdu_load_img_2
0410D1             0510*  
0410D1 21 65 02 00 0511*  	ld hl,BUF_0613
0410D5 01 08 00 00 0512*  	ld bc,8
0410D9 11 0C 00 00 0513*  	ld de,12
0410DD DD 21 60 00 0514*  	ld ix,96
       00          
0410E2 FD 21 AA 16 0515*  	ld iy,Fhonda101
       04          
0410E7 CD DC 33 04 0516*  	call vdu_load_img_2
0410EB             0517*  
0410EB 21 66 02 00 0518*  	ld hl,BUF_0614
0410EF 01 09 00 00 0519*  	ld bc,9
0410F3 11 12 00 00 0520*  	ld de,18
0410F7 DD 21 A2 00 0521*  	ld ix,162
       00          
0410FC FD 21 C0 16 0522*  	ld iy,Fhonda102
       04          
041101 CD DC 33 04 0523*  	call vdu_load_img_2
041105             0524*  
041105 21 67 02 00 0525*  	ld hl,BUF_0615
041109 01 09 00 00 0526*  	ld bc,9
04110D 11 12 00 00 0527*  	ld de,18
041111 DD 21 A2 00 0528*  	ld ix,162
       00          
041116 FD 21 D6 16 0529*  	ld iy,Fhonda103
       04          
04111B CD DC 33 04 0530*  	call vdu_load_img_2
04111F             0531*  
04111F 21 68 02 00 0532*  	ld hl,BUF_0616
041123 01 09 00 00 0533*  	ld bc,9
041127 11 12 00 00 0534*  	ld de,18
04112B DD 21 A2 00 0535*  	ld ix,162
       00          
041130 FD 21 EC 16 0536*  	ld iy,Fhonda104
       04          
041135 CD DC 33 04 0537*  	call vdu_load_img_2
041139             0538*  
041139 21 69 02 00 0539*  	ld hl,BUF_0617
04113D 01 04 00 00 0540*  	ld bc,4
041141 11 12 00 00 0541*  	ld de,18
041145 DD 21 48 00 0542*  	ld ix,72
       00          
04114A FD 21 02 17 0543*  	ld iy,Fhonda105
       04          
04114F CD DC 33 04 0544*  	call vdu_load_img_2
041153             0545*  
041153 21 6A 02 00 0546*  	ld hl,BUF_0618
041157 01 08 00 00 0547*  	ld bc,8
04115B 11 18 00 00 0548*  	ld de,24
04115F DD 21 C0 00 0549*  	ld ix,192
       00          
041164 FD 21 18 17 0550*  	ld iy,Fhonda106
       04          
041169 CD DC 33 04 0551*  	call vdu_load_img_2
04116D             0552*  
04116D 21 6B 02 00 0553*  	ld hl,BUF_0619
041171 01 09 00 00 0554*  	ld bc,9
041175 11 12 00 00 0555*  	ld de,18
041179 DD 21 A2 00 0556*  	ld ix,162
       00          
04117E FD 21 2E 17 0557*  	ld iy,Fhonda107
       04          
041183 CD DC 33 04 0558*  	call vdu_load_img_2
041187             0559*  
041187 21 6C 02 00 0560*  	ld hl,BUF_0620
04118B 01 03 00 00 0561*  	ld bc,3
04118F 11 12 00 00 0562*  	ld de,18
041193 DD 21 36 00 0563*  	ld ix,54
       00          
041198 FD 21 44 17 0564*  	ld iy,Fhonda108
       04          
04119D CD DC 33 04 0565*  	call vdu_load_img_2
0411A1             0566*  
0411A1 21 6D 02 00 0567*  	ld hl,BUF_0621
0411A5 01 0E 00 00 0568*  	ld bc,14
0411A9 11 0D 00 00 0569*  	ld de,13
0411AD DD 21 B6 00 0570*  	ld ix,182
       00          
0411B2 FD 21 5A 17 0571*  	ld iy,Fhonda109
       04          
0411B7 CD DC 33 04 0572*  	call vdu_load_img_2
0411BB             0573*  
0411BB 21 6E 02 00 0574*  	ld hl,BUF_0622
0411BF 01 09 00 00 0575*  	ld bc,9
0411C3 11 0C 00 00 0576*  	ld de,12
0411C7 DD 21 6C 00 0577*  	ld ix,108
       00          
0411CC FD 21 70 17 0578*  	ld iy,Fhonda110
       04          
0411D1 CD DC 33 04 0579*  	call vdu_load_img_2
0411D5             0580*  
0411D5 21 6F 02 00 0581*  	ld hl,BUF_0623
0411D9 01 09 00 00 0582*  	ld bc,9
0411DD 11 0C 00 00 0583*  	ld de,12
0411E1 DD 21 6C 00 0584*  	ld ix,108
       00          
0411E6 FD 21 86 17 0585*  	ld iy,Fhonda111
       04          
0411EB CD DC 33 04 0586*  	call vdu_load_img_2
0411EF             0587*  
0411EF 21 70 02 00 0588*  	ld hl,BUF_0624
0411F3 01 09 00 00 0589*  	ld bc,9
0411F7 11 12 00 00 0590*  	ld de,18
0411FB DD 21 A2 00 0591*  	ld ix,162
       00          
041200 FD 21 9C 17 0592*  	ld iy,Fhonda112
       04          
041205 CD DC 33 04 0593*  	call vdu_load_img_2
041209             0594*  
041209 21 71 02 00 0595*  	ld hl,BUF_0625
04120D 01 09 00 00 0596*  	ld bc,9
041211 11 12 00 00 0597*  	ld de,18
041215 DD 21 A2 00 0598*  	ld ix,162
       00          
04121A FD 21 B2 17 0599*  	ld iy,Fhonda113
       04          
04121F CD DC 33 04 0600*  	call vdu_load_img_2
041223             0601*  
041223 21 72 02 00 0602*  	ld hl,BUF_0626
041227 01 06 00 00 0603*  	ld bc,6
04122B 11 0D 00 00 0604*  	ld de,13
04122F DD 21 4E 00 0605*  	ld ix,78
       00          
041234 FD 21 C8 17 0606*  	ld iy,Fhonda114
       04          
041239 CD DC 33 04 0607*  	call vdu_load_img_2
04123D             0608*  
04123D 21 73 02 00 0609*  	ld hl,BUF_0627
041241 01 08 00 00 0610*  	ld bc,8
041245 11 0D 00 00 0611*  	ld de,13
041249 DD 21 68 00 0612*  	ld ix,104
       00          
04124E FD 21 DE 17 0613*  	ld iy,Fhonda115
       04          
041253 CD DC 33 04 0614*  	call vdu_load_img_2
041257             0615*  
041257 21 74 02 00 0616*  	ld hl,BUF_0628
04125B 01 07 00 00 0617*  	ld bc,7
04125F 11 0F 00 00 0618*  	ld de,15
041263 DD 21 69 00 0619*  	ld ix,105
       00          
041268 FD 21 F4 17 0620*  	ld iy,Fhonda116
       04          
04126D CD DC 33 04 0621*  	call vdu_load_img_2
041271             0622*  
041271 21 75 02 00 0623*  	ld hl,BUF_0629
041275 01 09 00 00 0624*  	ld bc,9
041279 11 0C 00 00 0625*  	ld de,12
04127D DD 21 6C 00 0626*  	ld ix,108
       00          
041282 FD 21 0A 18 0627*  	ld iy,Fhonda117
       04          
041287 CD DC 33 04 0628*  	call vdu_load_img_2
04128B             0629*  
04128B 21 76 02 00 0630*  	ld hl,BUF_0630
04128F 01 09 00 00 0631*  	ld bc,9
041293 11 0C 00 00 0632*  	ld de,12
041297 DD 21 6C 00 0633*  	ld ix,108
       00          
04129C FD 21 20 18 0634*  	ld iy,Fhonda118
       04          
0412A1 CD DC 33 04 0635*  	call vdu_load_img_2
0412A5             0636*  
0412A5 21 77 02 00 0637*  	ld hl,BUF_0631
0412A9 01 0E 00 00 0638*  	ld bc,14
0412AD 11 0C 00 00 0639*  	ld de,12
0412B1 DD 21 A8 00 0640*  	ld ix,168
       00          
0412B6 FD 21 36 18 0641*  	ld iy,Fhonda119
       04          
0412BB CD DC 33 04 0642*  	call vdu_load_img_2
0412BF             0643*  
0412BF 21 78 02 00 0644*  	ld hl,BUF_0632
0412C3 01 09 00 00 0645*  	ld bc,9
0412C7 11 0C 00 00 0646*  	ld de,12
0412CB DD 21 6C 00 0647*  	ld ix,108
       00          
0412D0 FD 21 4C 18 0648*  	ld iy,Fhonda120
       04          
0412D5 CD DC 33 04 0649*  	call vdu_load_img_2
0412D9             0650*  
0412D9 21 79 02 00 0651*  	ld hl,BUF_0633
0412DD 01 09 00 00 0652*  	ld bc,9
0412E1 11 11 00 00 0653*  	ld de,17
0412E5 DD 21 99 00 0654*  	ld ix,153
       00          
0412EA FD 21 62 18 0655*  	ld iy,Fhonda121
       04          
0412EF CD DC 33 04 0656*  	call vdu_load_img_2
0412F3             0657*  
0412F3 21 7A 02 00 0658*  	ld hl,BUF_0634
0412F7 01 09 00 00 0659*  	ld bc,9
0412FB 11 0C 00 00 0660*  	ld de,12
0412FF DD 21 6C 00 0661*  	ld ix,108
       00          
041304 FD 21 78 18 0662*  	ld iy,Fhonda122
       04          
041309 CD DC 33 04 0663*  	call vdu_load_img_2
04130D             0664*  
04130D C9          0665*  	ret
04130E             0666*  
04130E 66 6F 6E 74 0667*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
041324 66 6F 6E 74 0668*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
04133A 66 6F 6E 74 0669*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
041350 66 6F 6E 74 0670*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
041366 66 6F 6E 74 0671*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
04137C 66 6F 6E 74 0672*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
041392 66 6F 6E 74 0673*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
0413A8 66 6F 6E 74 0674*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
0413BE 66 6F 6E 74 0675*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
0413D4 66 6F 6E 74 0676*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0413EA 66 6F 6E 74 0677*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
041400 66 6F 6E 74 0678*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
041416 66 6F 6E 74 0679*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
04142C 66 6F 6E 74 0680*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
041442 66 6F 6E 74 0681*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
041458 66 6F 6E 74 0682*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
04146E 66 6F 6E 74 0683*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
041484 66 6F 6E 74 0684*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
04149A 66 6F 6E 74 0685*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
0414B0 66 6F 6E 74 0686*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
0414C6 66 6F 6E 74 0687*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0414DC 66 6F 6E 74 0688*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
0414F2 66 6F 6E 74 0689*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
041508 66 6F 6E 74 0690*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
04151E 66 6F 6E 74 0691*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
041534 66 6F 6E 74 0692*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
04154A 66 6F 6E 74 0693*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
041560 66 6F 6E 74 0694*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
041576 66 6F 6E 74 0695*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
04158C 66 6F 6E 74 0696*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
0415A2 66 6F 6E 74 0697*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
0415B8 66 6F 6E 74 0698*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
0415CE 66 6F 6E 74 0699*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
0415E4 66 6F 6E 74 0700*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
0415FA 66 6F 6E 74 0701*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
041610 66 6F 6E 74 0702*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
041626 66 6F 6E 74 0703*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
04163C 66 6F 6E 74 0704*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
041652 66 6F 6E 74 0705*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
041668 66 6F 6E 74 0706*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
04167E 66 6F 6E 74 0707*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
041694 66 6F 6E 74 0708*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
0416AA 66 6F 6E 74 0709*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
0416C0 66 6F 6E 74 0710*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
0416D6 66 6F 6E 74 0711*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
0416EC 66 6F 6E 74 0712*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
041702 66 6F 6E 74 0713*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
041718 66 6F 6E 74 0714*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
04172E 66 6F 6E 74 0715*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
041744 66 6F 6E 74 0716*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
04175A 66 6F 6E 74 0717*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
041770 66 6F 6E 74 0718*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
041786 66 6F 6E 74 0719*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
04179C 66 6F 6E 74 0720*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
0417B2 66 6F 6E 74 0721*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
0417C8 66 6F 6E 74 0722*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
0417DE 66 6F 6E 74 0723*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
0417F4 66 6F 6E 74 0724*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
04180A 66 6F 6E 74 0725*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
041820 66 6F 6E 74 0726*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
041836 66 6F 6E 74 0727*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
04184C 66 6F 6E 74 0728*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
041862 66 6F 6E 74 0729*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
041878 66 6F 6E 74 0730*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
04188E             0018   	include "src/asm/font_retro_computer.inc"
04188E             0001*  ; Bitmap indices:
04188E             0002*  BUF_0288: equ 0x0120 ; 32
04188E             0003*  BUF_0289: equ 0x0121 ; 33 !
04188E             0004*  ; Missing character 34 "
04188E             0005*  ; Missing character 35 #
04188E             0006*  ; Missing character 36 $
04188E             0007*  ; Missing character 37 %
04188E             0008*  ; Missing character 38 &
04188E             0009*  ; Missing character 39 '
04188E             0010*  ; Missing character 40 (
04188E             0011*  ; Missing character 41 )
04188E             0012*  ; Missing character 42 *
04188E             0013*  ; Missing character 43 +
04188E             0014*  ; Missing character 44 ,
04188E             0015*  ; Missing character 45 -
04188E             0016*  ; Missing character 46 .
04188E             0017*  ; Missing character 47 /
04188E             0018*  BUF_0304: equ 0x0130 ; 48 0
04188E             0019*  BUF_0305: equ 0x0131 ; 49 1
04188E             0020*  BUF_0306: equ 0x0132 ; 50 2
04188E             0021*  BUF_0307: equ 0x0133 ; 51 3
04188E             0022*  BUF_0308: equ 0x0134 ; 52 4
04188E             0023*  BUF_0309: equ 0x0135 ; 53 5
04188E             0024*  BUF_0310: equ 0x0136 ; 54 6
04188E             0025*  BUF_0311: equ 0x0137 ; 55 7
04188E             0026*  BUF_0312: equ 0x0138 ; 56 8
04188E             0027*  BUF_0313: equ 0x0139 ; 57 9
04188E             0028*  ; Missing character 58 :
04188E             0029*  ; Missing character 59 ;
04188E             0030*  ; Missing character 60 <
04188E             0031*  ; Missing character 61 =
04188E             0032*  ; Missing character 62 >
04188E             0033*  BUF_0319: equ 0x013F ; 63 ?
04188E             0034*  ; Missing character 64 @
04188E             0035*  BUF_0321: equ 0x0141 ; 65 A
04188E             0036*  BUF_0322: equ 0x0142 ; 66 B
04188E             0037*  BUF_0323: equ 0x0143 ; 67 C
04188E             0038*  BUF_0324: equ 0x0144 ; 68 D
04188E             0039*  BUF_0325: equ 0x0145 ; 69 E
04188E             0040*  BUF_0326: equ 0x0146 ; 70 F
04188E             0041*  BUF_0327: equ 0x0147 ; 71 G
04188E             0042*  BUF_0328: equ 0x0148 ; 72 H
04188E             0043*  BUF_0329: equ 0x0149 ; 73 I
04188E             0044*  BUF_0330: equ 0x014A ; 74 J
04188E             0045*  BUF_0331: equ 0x014B ; 75 K
04188E             0046*  BUF_0332: equ 0x014C ; 76 L
04188E             0047*  BUF_0333: equ 0x014D ; 77 M
04188E             0048*  BUF_0334: equ 0x014E ; 78 N
04188E             0049*  BUF_0335: equ 0x014F ; 79 O
04188E             0050*  BUF_0336: equ 0x0150 ; 80 P
04188E             0051*  BUF_0337: equ 0x0151 ; 81 Q
04188E             0052*  BUF_0338: equ 0x0152 ; 82 R
04188E             0053*  BUF_0339: equ 0x0153 ; 83 S
04188E             0054*  BUF_0340: equ 0x0154 ; 84 T
04188E             0055*  BUF_0341: equ 0x0155 ; 85 U
04188E             0056*  BUF_0342: equ 0x0156 ; 86 V
04188E             0057*  BUF_0343: equ 0x0157 ; 87 W
04188E             0058*  BUF_0344: equ 0x0158 ; 88 X
04188E             0059*  BUF_0345: equ 0x0159 ; 89 Y
04188E             0060*  BUF_0346: equ 0x015A ; 90 Z
04188E             0061*  ; Missing character 91 [
04188E             0062*  ; Missing character 92 \
04188E             0063*  ; Missing character 93 ]
04188E             0064*  ; Missing character 94 ^
04188E             0065*  ; Missing character 95 _
04188E             0066*  ; Missing character 96 `
04188E             0067*  ; Missing character 97 a
04188E             0068*  ; Missing character 98 b
04188E             0069*  ; Missing character 99 c
04188E             0070*  ; Missing character 100 d
04188E             0071*  ; Missing character 101 e
04188E             0072*  ; Missing character 102 f
04188E             0073*  ; Missing character 103 g
04188E             0074*  ; Missing character 104 h
04188E             0075*  ; Missing character 105 i
04188E             0076*  ; Missing character 106 j
04188E             0077*  ; Missing character 107 k
04188E             0078*  ; Missing character 108 l
04188E             0079*  ; Missing character 109 m
04188E             0080*  ; Missing character 110 n
04188E             0081*  ; Missing character 111 o
04188E             0082*  ; Missing character 112 p
04188E             0083*  ; Missing character 113 q
04188E             0084*  ; Missing character 114 r
04188E             0085*  ; Missing character 115 s
04188E             0086*  ; Missing character 116 t
04188E             0087*  ; Missing character 117 u
04188E             0088*  ; Missing character 118 v
04188E             0089*  ; Missing character 119 w
04188E             0090*  ; Missing character 120 x
04188E             0091*  ; Missing character 121 y
04188E             0092*  ; Missing character 122 z
04188E             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
04188E             0094*  font_retro_computer:
04188E 06 01 00 20 0095*  	dl 0x000106,BUF_0288
       01 00       
041894 03 0E 00 21 0096*  	dl 0x000E03,BUF_0289
       01 00       
04189A 06 01 00 20 0097*  	dl 0x000106,BUF_0288 ; Missing character 34
       01 00       
0418A0 06 01 00 20 0098*  	dl 0x000106,BUF_0288 ; Missing character 35
       01 00       
0418A6 06 01 00 20 0099*  	dl 0x000106,BUF_0288 ; Missing character 36
       01 00       
0418AC 06 01 00 20 0100*  	dl 0x000106,BUF_0288 ; Missing character 37
       01 00       
0418B2 06 01 00 20 0101*  	dl 0x000106,BUF_0288 ; Missing character 38
       01 00       
0418B8 06 01 00 20 0102*  	dl 0x000106,BUF_0288 ; Missing character 39
       01 00       
0418BE 06 01 00 20 0103*  	dl 0x000106,BUF_0288 ; Missing character 40
       01 00       
0418C4 06 01 00 20 0104*  	dl 0x000106,BUF_0288 ; Missing character 41
       01 00       
0418CA 06 01 00 20 0105*  	dl 0x000106,BUF_0288 ; Missing character 42
       01 00       
0418D0 06 01 00 20 0106*  	dl 0x000106,BUF_0288 ; Missing character 43
       01 00       
0418D6 06 01 00 20 0107*  	dl 0x000106,BUF_0288 ; Missing character 44
       01 00       
0418DC 06 01 00 20 0108*  	dl 0x000106,BUF_0288 ; Missing character 45
       01 00       
0418E2 06 01 00 20 0109*  	dl 0x000106,BUF_0288 ; Missing character 46
       01 00       
0418E8 06 01 00 20 0110*  	dl 0x000106,BUF_0288 ; Missing character 47
       01 00       
0418EE 08 0E 00 30 0111*  	dl 0x000E08,BUF_0304
       01 00       
0418F4 08 0E 00 31 0112*  	dl 0x000E08,BUF_0305
       01 00       
0418FA 08 0E 00 32 0113*  	dl 0x000E08,BUF_0306
       01 00       
041900 08 0E 00 33 0114*  	dl 0x000E08,BUF_0307
       01 00       
041906 08 0E 00 34 0115*  	dl 0x000E08,BUF_0308
       01 00       
04190C 08 0E 00 35 0116*  	dl 0x000E08,BUF_0309
       01 00       
041912 08 0E 00 36 0117*  	dl 0x000E08,BUF_0310
       01 00       
041918 08 0E 00 37 0118*  	dl 0x000E08,BUF_0311
       01 00       
04191E 08 0E 00 38 0119*  	dl 0x000E08,BUF_0312
       01 00       
041924 08 0E 00 39 0120*  	dl 0x000E08,BUF_0313
       01 00       
04192A 06 01 00 20 0121*  	dl 0x000106,BUF_0288 ; Missing character 58
       01 00       
041930 06 01 00 20 0122*  	dl 0x000106,BUF_0288 ; Missing character 59
       01 00       
041936 06 01 00 20 0123*  	dl 0x000106,BUF_0288 ; Missing character 60
       01 00       
04193C 06 01 00 20 0124*  	dl 0x000106,BUF_0288 ; Missing character 61
       01 00       
041942 06 01 00 20 0125*  	dl 0x000106,BUF_0288 ; Missing character 62
       01 00       
041948 08 0E 00 3F 0126*  	dl 0x000E08,BUF_0319
       01 00       
04194E 06 01 00 20 0127*  	dl 0x000106,BUF_0288 ; Missing character 64
       01 00       
041954 07 0E 00 41 0128*  	dl 0x000E07,BUF_0321
       01 00       
04195A 08 0E 00 42 0129*  	dl 0x000E08,BUF_0322
       01 00       
041960 07 0E 00 43 0130*  	dl 0x000E07,BUF_0323
       01 00       
041966 08 0E 00 44 0131*  	dl 0x000E08,BUF_0324
       01 00       
04196C 08 0E 00 45 0132*  	dl 0x000E08,BUF_0325
       01 00       
041972 07 0E 00 46 0133*  	dl 0x000E07,BUF_0326
       01 00       
041978 08 0E 00 47 0134*  	dl 0x000E08,BUF_0327
       01 00       
04197E 07 0E 00 48 0135*  	dl 0x000E07,BUF_0328
       01 00       
041984 07 0E 00 49 0136*  	dl 0x000E07,BUF_0329
       01 00       
04198A 08 0E 00 4A 0137*  	dl 0x000E08,BUF_0330
       01 00       
041990 07 0E 00 4B 0138*  	dl 0x000E07,BUF_0331
       01 00       
041996 08 0E 00 4C 0139*  	dl 0x000E08,BUF_0332
       01 00       
04199C 09 0E 00 4D 0140*  	dl 0x000E09,BUF_0333
       01 00       
0419A2 07 0E 00 4E 0141*  	dl 0x000E07,BUF_0334
       01 00       
0419A8 08 0E 00 4F 0142*  	dl 0x000E08,BUF_0335
       01 00       
0419AE 07 0E 00 50 0143*  	dl 0x000E07,BUF_0336
       01 00       
0419B4 08 0F 00 51 0144*  	dl 0x000F08,BUF_0337
       01 00       
0419BA 08 0E 00 52 0145*  	dl 0x000E08,BUF_0338
       01 00       
0419C0 08 0E 00 53 0146*  	dl 0x000E08,BUF_0339
       01 00       
0419C6 07 0E 00 54 0147*  	dl 0x000E07,BUF_0340
       01 00       
0419CC 08 0E 00 55 0148*  	dl 0x000E08,BUF_0341
       01 00       
0419D2 07 0E 00 56 0149*  	dl 0x000E07,BUF_0342
       01 00       
0419D8 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_0343
       01 00       
0419DE 07 0E 00 58 0151*  	dl 0x000E07,BUF_0344
       01 00       
0419E4 08 0E 00 59 0152*  	dl 0x000E08,BUF_0345
       01 00       
0419EA 07 0E 00 5A 0153*  	dl 0x000E07,BUF_0346
       01 00       
0419F0 06 01 00 20 0154*  	dl 0x000106,BUF_0288 ; Missing character 91
       01 00       
0419F6 06 01 00 20 0155*  	dl 0x000106,BUF_0288 ; Missing character 92
       01 00       
0419FC 06 01 00 20 0156*  	dl 0x000106,BUF_0288 ; Missing character 93
       01 00       
041A02 06 01 00 20 0157*  	dl 0x000106,BUF_0288 ; Missing character 94
       01 00       
041A08 06 01 00 20 0158*  	dl 0x000106,BUF_0288 ; Missing character 95
       01 00       
041A0E 06 01 00 20 0159*  	dl 0x000106,BUF_0288 ; Missing character 96
       01 00       
041A14 06 01 00 20 0160*  	dl 0x000106,BUF_0288 ; Missing character 97
       01 00       
041A1A 06 01 00 20 0161*  	dl 0x000106,BUF_0288 ; Missing character 98
       01 00       
041A20 06 01 00 20 0162*  	dl 0x000106,BUF_0288 ; Missing character 99
       01 00       
041A26 06 01 00 20 0163*  	dl 0x000106,BUF_0288 ; Missing character 100
       01 00       
041A2C 06 01 00 20 0164*  	dl 0x000106,BUF_0288 ; Missing character 101
       01 00       
041A32 06 01 00 20 0165*  	dl 0x000106,BUF_0288 ; Missing character 102
       01 00       
041A38 06 01 00 20 0166*  	dl 0x000106,BUF_0288 ; Missing character 103
       01 00       
041A3E 06 01 00 20 0167*  	dl 0x000106,BUF_0288 ; Missing character 104
       01 00       
041A44 06 01 00 20 0168*  	dl 0x000106,BUF_0288 ; Missing character 105
       01 00       
041A4A 06 01 00 20 0169*  	dl 0x000106,BUF_0288 ; Missing character 106
       01 00       
041A50 06 01 00 20 0170*  	dl 0x000106,BUF_0288 ; Missing character 107
       01 00       
041A56 06 01 00 20 0171*  	dl 0x000106,BUF_0288 ; Missing character 108
       01 00       
041A5C 06 01 00 20 0172*  	dl 0x000106,BUF_0288 ; Missing character 109
       01 00       
041A62 06 01 00 20 0173*  	dl 0x000106,BUF_0288 ; Missing character 110
       01 00       
041A68 06 01 00 20 0174*  	dl 0x000106,BUF_0288 ; Missing character 111
       01 00       
041A6E 06 01 00 20 0175*  	dl 0x000106,BUF_0288 ; Missing character 112
       01 00       
041A74 06 01 00 20 0176*  	dl 0x000106,BUF_0288 ; Missing character 113
       01 00       
041A7A 06 01 00 20 0177*  	dl 0x000106,BUF_0288 ; Missing character 114
       01 00       
041A80 06 01 00 20 0178*  	dl 0x000106,BUF_0288 ; Missing character 115
       01 00       
041A86 06 01 00 20 0179*  	dl 0x000106,BUF_0288 ; Missing character 116
       01 00       
041A8C 06 01 00 20 0180*  	dl 0x000106,BUF_0288 ; Missing character 117
       01 00       
041A92 06 01 00 20 0181*  	dl 0x000106,BUF_0288 ; Missing character 118
       01 00       
041A98 06 01 00 20 0182*  	dl 0x000106,BUF_0288 ; Missing character 119
       01 00       
041A9E 06 01 00 20 0183*  	dl 0x000106,BUF_0288 ; Missing character 120
       01 00       
041AA4 06 01 00 20 0184*  	dl 0x000106,BUF_0288 ; Missing character 121
       01 00       
041AAA 06 01 00 20 0185*  	dl 0x000106,BUF_0288 ; Missing character 122
       01 00       
041AB0             0186*  
041AB0             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
041AB0             0188*  load_font_retro_computer:
041AB0             0189*  
041AB0 21 20 01 00 0190*  	ld hl,BUF_0288
041AB4 01 06 00 00 0191*  	ld bc,6
041AB8 11 01 00 00 0192*  	ld de,1
041ABC DD 21 06 00 0193*  	ld ix,6
       00          
041AC1 FD 21 A7 1E 0194*  	ld iy,Frc032
       04          
041AC6 CD DC 33 04 0195*  	call vdu_load_img_2
041ACA             0196*  
041ACA 21 21 01 00 0197*  	ld hl,BUF_0289
041ACE 01 03 00 00 0198*  	ld bc,3
041AD2 11 0E 00 00 0199*  	ld de,14
041AD6 DD 21 2A 00 0200*  	ld ix,42
       00          
041ADB FD 21 BA 1E 0201*  	ld iy,Frc033
       04          
041AE0 CD DC 33 04 0202*  	call vdu_load_img_2
041AE4             0203*  ; Missing character 34
041AE4             0204*  ; Missing character 35
041AE4             0205*  ; Missing character 36
041AE4             0206*  ; Missing character 37
041AE4             0207*  ; Missing character 38
041AE4             0208*  ; Missing character 39
041AE4             0209*  ; Missing character 40
041AE4             0210*  ; Missing character 41
041AE4             0211*  ; Missing character 42
041AE4             0212*  ; Missing character 43
041AE4             0213*  ; Missing character 44
041AE4             0214*  ; Missing character 45
041AE4             0215*  ; Missing character 46
041AE4             0216*  ; Missing character 47
041AE4             0217*  
041AE4 21 30 01 00 0218*  	ld hl,BUF_0304
041AE8 01 08 00 00 0219*  	ld bc,8
041AEC 11 0E 00 00 0220*  	ld de,14
041AF0 DD 21 70 00 0221*  	ld ix,112
       00          
041AF5 FD 21 CD 1E 0222*  	ld iy,Frc048
       04          
041AFA CD DC 33 04 0223*  	call vdu_load_img_2
041AFE             0224*  
041AFE 21 31 01 00 0225*  	ld hl,BUF_0305
041B02 01 08 00 00 0226*  	ld bc,8
041B06 11 0E 00 00 0227*  	ld de,14
041B0A DD 21 70 00 0228*  	ld ix,112
       00          
041B0F FD 21 E0 1E 0229*  	ld iy,Frc049
       04          
041B14 CD DC 33 04 0230*  	call vdu_load_img_2
041B18             0231*  
041B18 21 32 01 00 0232*  	ld hl,BUF_0306
041B1C 01 08 00 00 0233*  	ld bc,8
041B20 11 0E 00 00 0234*  	ld de,14
041B24 DD 21 70 00 0235*  	ld ix,112
       00          
041B29 FD 21 F3 1E 0236*  	ld iy,Frc050
       04          
041B2E CD DC 33 04 0237*  	call vdu_load_img_2
041B32             0238*  
041B32 21 33 01 00 0239*  	ld hl,BUF_0307
041B36 01 08 00 00 0240*  	ld bc,8
041B3A 11 0E 00 00 0241*  	ld de,14
041B3E DD 21 70 00 0242*  	ld ix,112
       00          
041B43 FD 21 06 1F 0243*  	ld iy,Frc051
       04          
041B48 CD DC 33 04 0244*  	call vdu_load_img_2
041B4C             0245*  
041B4C 21 34 01 00 0246*  	ld hl,BUF_0308
041B50 01 08 00 00 0247*  	ld bc,8
041B54 11 0E 00 00 0248*  	ld de,14
041B58 DD 21 70 00 0249*  	ld ix,112
       00          
041B5D FD 21 19 1F 0250*  	ld iy,Frc052
       04          
041B62 CD DC 33 04 0251*  	call vdu_load_img_2
041B66             0252*  
041B66 21 35 01 00 0253*  	ld hl,BUF_0309
041B6A 01 08 00 00 0254*  	ld bc,8
041B6E 11 0E 00 00 0255*  	ld de,14
041B72 DD 21 70 00 0256*  	ld ix,112
       00          
041B77 FD 21 2C 1F 0257*  	ld iy,Frc053
       04          
041B7C CD DC 33 04 0258*  	call vdu_load_img_2
041B80             0259*  
041B80 21 36 01 00 0260*  	ld hl,BUF_0310
041B84 01 08 00 00 0261*  	ld bc,8
041B88 11 0E 00 00 0262*  	ld de,14
041B8C DD 21 70 00 0263*  	ld ix,112
       00          
041B91 FD 21 3F 1F 0264*  	ld iy,Frc054
       04          
041B96 CD DC 33 04 0265*  	call vdu_load_img_2
041B9A             0266*  
041B9A 21 37 01 00 0267*  	ld hl,BUF_0311
041B9E 01 08 00 00 0268*  	ld bc,8
041BA2 11 0E 00 00 0269*  	ld de,14
041BA6 DD 21 70 00 0270*  	ld ix,112
       00          
041BAB FD 21 52 1F 0271*  	ld iy,Frc055
       04          
041BB0 CD DC 33 04 0272*  	call vdu_load_img_2
041BB4             0273*  
041BB4 21 38 01 00 0274*  	ld hl,BUF_0312
041BB8 01 08 00 00 0275*  	ld bc,8
041BBC 11 0E 00 00 0276*  	ld de,14
041BC0 DD 21 70 00 0277*  	ld ix,112
       00          
041BC5 FD 21 65 1F 0278*  	ld iy,Frc056
       04          
041BCA CD DC 33 04 0279*  	call vdu_load_img_2
041BCE             0280*  
041BCE 21 39 01 00 0281*  	ld hl,BUF_0313
041BD2 01 08 00 00 0282*  	ld bc,8
041BD6 11 0E 00 00 0283*  	ld de,14
041BDA DD 21 70 00 0284*  	ld ix,112
       00          
041BDF FD 21 78 1F 0285*  	ld iy,Frc057
       04          
041BE4 CD DC 33 04 0286*  	call vdu_load_img_2
041BE8             0287*  ; Missing character 58
041BE8             0288*  ; Missing character 59
041BE8             0289*  ; Missing character 60
041BE8             0290*  ; Missing character 61
041BE8             0291*  ; Missing character 62
041BE8             0292*  
041BE8 21 3F 01 00 0293*  	ld hl,BUF_0319
041BEC 01 08 00 00 0294*  	ld bc,8
041BF0 11 0E 00 00 0295*  	ld de,14
041BF4 DD 21 70 00 0296*  	ld ix,112
       00          
041BF9 FD 21 8B 1F 0297*  	ld iy,Frc063
       04          
041BFE CD DC 33 04 0298*  	call vdu_load_img_2
041C02             0299*  ; Missing character 64
041C02             0300*  
041C02 21 41 01 00 0301*  	ld hl,BUF_0321
041C06 01 07 00 00 0302*  	ld bc,7
041C0A 11 0E 00 00 0303*  	ld de,14
041C0E DD 21 62 00 0304*  	ld ix,98
       00          
041C13 FD 21 9E 1F 0305*  	ld iy,Frc065
       04          
041C18 CD DC 33 04 0306*  	call vdu_load_img_2
041C1C             0307*  
041C1C 21 42 01 00 0308*  	ld hl,BUF_0322
041C20 01 08 00 00 0309*  	ld bc,8
041C24 11 0E 00 00 0310*  	ld de,14
041C28 DD 21 70 00 0311*  	ld ix,112
       00          
041C2D FD 21 B1 1F 0312*  	ld iy,Frc066
       04          
041C32 CD DC 33 04 0313*  	call vdu_load_img_2
041C36             0314*  
041C36 21 43 01 00 0315*  	ld hl,BUF_0323
041C3A 01 07 00 00 0316*  	ld bc,7
041C3E 11 0E 00 00 0317*  	ld de,14
041C42 DD 21 62 00 0318*  	ld ix,98
       00          
041C47 FD 21 C4 1F 0319*  	ld iy,Frc067
       04          
041C4C CD DC 33 04 0320*  	call vdu_load_img_2
041C50             0321*  
041C50 21 44 01 00 0322*  	ld hl,BUF_0324
041C54 01 08 00 00 0323*  	ld bc,8
041C58 11 0E 00 00 0324*  	ld de,14
041C5C DD 21 70 00 0325*  	ld ix,112
       00          
041C61 FD 21 D7 1F 0326*  	ld iy,Frc068
       04          
041C66 CD DC 33 04 0327*  	call vdu_load_img_2
041C6A             0328*  
041C6A 21 45 01 00 0329*  	ld hl,BUF_0325
041C6E 01 08 00 00 0330*  	ld bc,8
041C72 11 0E 00 00 0331*  	ld de,14
041C76 DD 21 70 00 0332*  	ld ix,112
       00          
041C7B FD 21 EA 1F 0333*  	ld iy,Frc069
       04          
041C80 CD DC 33 04 0334*  	call vdu_load_img_2
041C84             0335*  
041C84 21 46 01 00 0336*  	ld hl,BUF_0326
041C88 01 07 00 00 0337*  	ld bc,7
041C8C 11 0E 00 00 0338*  	ld de,14
041C90 DD 21 62 00 0339*  	ld ix,98
       00          
041C95 FD 21 FD 1F 0340*  	ld iy,Frc070
       04          
041C9A CD DC 33 04 0341*  	call vdu_load_img_2
041C9E             0342*  
041C9E 21 47 01 00 0343*  	ld hl,BUF_0327
041CA2 01 08 00 00 0344*  	ld bc,8
041CA6 11 0E 00 00 0345*  	ld de,14
041CAA DD 21 70 00 0346*  	ld ix,112
       00          
041CAF FD 21 10 20 0347*  	ld iy,Frc071
       04          
041CB4 CD DC 33 04 0348*  	call vdu_load_img_2
041CB8             0349*  
041CB8 21 48 01 00 0350*  	ld hl,BUF_0328
041CBC 01 07 00 00 0351*  	ld bc,7
041CC0 11 0E 00 00 0352*  	ld de,14
041CC4 DD 21 62 00 0353*  	ld ix,98
       00          
041CC9 FD 21 23 20 0354*  	ld iy,Frc072
       04          
041CCE CD DC 33 04 0355*  	call vdu_load_img_2
041CD2             0356*  
041CD2 21 49 01 00 0357*  	ld hl,BUF_0329
041CD6 01 07 00 00 0358*  	ld bc,7
041CDA 11 0E 00 00 0359*  	ld de,14
041CDE DD 21 62 00 0360*  	ld ix,98
       00          
041CE3 FD 21 36 20 0361*  	ld iy,Frc073
       04          
041CE8 CD DC 33 04 0362*  	call vdu_load_img_2
041CEC             0363*  
041CEC 21 4A 01 00 0364*  	ld hl,BUF_0330
041CF0 01 08 00 00 0365*  	ld bc,8
041CF4 11 0E 00 00 0366*  	ld de,14
041CF8 DD 21 70 00 0367*  	ld ix,112
       00          
041CFD FD 21 49 20 0368*  	ld iy,Frc074
       04          
041D02 CD DC 33 04 0369*  	call vdu_load_img_2
041D06             0370*  
041D06 21 4B 01 00 0371*  	ld hl,BUF_0331
041D0A 01 07 00 00 0372*  	ld bc,7
041D0E 11 0E 00 00 0373*  	ld de,14
041D12 DD 21 62 00 0374*  	ld ix,98
       00          
041D17 FD 21 5C 20 0375*  	ld iy,Frc075
       04          
041D1C CD DC 33 04 0376*  	call vdu_load_img_2
041D20             0377*  
041D20 21 4C 01 00 0378*  	ld hl,BUF_0332
041D24 01 08 00 00 0379*  	ld bc,8
041D28 11 0E 00 00 0380*  	ld de,14
041D2C DD 21 70 00 0381*  	ld ix,112
       00          
041D31 FD 21 6F 20 0382*  	ld iy,Frc076
       04          
041D36 CD DC 33 04 0383*  	call vdu_load_img_2
041D3A             0384*  
041D3A 21 4D 01 00 0385*  	ld hl,BUF_0333
041D3E 01 09 00 00 0386*  	ld bc,9
041D42 11 0E 00 00 0387*  	ld de,14
041D46 DD 21 7E 00 0388*  	ld ix,126
       00          
041D4B FD 21 82 20 0389*  	ld iy,Frc077
       04          
041D50 CD DC 33 04 0390*  	call vdu_load_img_2
041D54             0391*  
041D54 21 4E 01 00 0392*  	ld hl,BUF_0334
041D58 01 07 00 00 0393*  	ld bc,7
041D5C 11 0E 00 00 0394*  	ld de,14
041D60 DD 21 62 00 0395*  	ld ix,98
       00          
041D65 FD 21 95 20 0396*  	ld iy,Frc078
       04          
041D6A CD DC 33 04 0397*  	call vdu_load_img_2
041D6E             0398*  
041D6E 21 4F 01 00 0399*  	ld hl,BUF_0335
041D72 01 08 00 00 0400*  	ld bc,8
041D76 11 0E 00 00 0401*  	ld de,14
041D7A DD 21 70 00 0402*  	ld ix,112
       00          
041D7F FD 21 A8 20 0403*  	ld iy,Frc079
       04          
041D84 CD DC 33 04 0404*  	call vdu_load_img_2
041D88             0405*  
041D88 21 50 01 00 0406*  	ld hl,BUF_0336
041D8C 01 07 00 00 0407*  	ld bc,7
041D90 11 0E 00 00 0408*  	ld de,14
041D94 DD 21 62 00 0409*  	ld ix,98
       00          
041D99 FD 21 BB 20 0410*  	ld iy,Frc080
       04          
041D9E CD DC 33 04 0411*  	call vdu_load_img_2
041DA2             0412*  
041DA2 21 51 01 00 0413*  	ld hl,BUF_0337
041DA6 01 08 00 00 0414*  	ld bc,8
041DAA 11 0F 00 00 0415*  	ld de,15
041DAE DD 21 78 00 0416*  	ld ix,120
       00          
041DB3 FD 21 CE 20 0417*  	ld iy,Frc081
       04          
041DB8 CD DC 33 04 0418*  	call vdu_load_img_2
041DBC             0419*  
041DBC 21 52 01 00 0420*  	ld hl,BUF_0338
041DC0 01 08 00 00 0421*  	ld bc,8
041DC4 11 0E 00 00 0422*  	ld de,14
041DC8 DD 21 70 00 0423*  	ld ix,112
       00          
041DCD FD 21 E1 20 0424*  	ld iy,Frc082
       04          
041DD2 CD DC 33 04 0425*  	call vdu_load_img_2
041DD6             0426*  
041DD6 21 53 01 00 0427*  	ld hl,BUF_0339
041DDA 01 08 00 00 0428*  	ld bc,8
041DDE 11 0E 00 00 0429*  	ld de,14
041DE2 DD 21 70 00 0430*  	ld ix,112
       00          
041DE7 FD 21 F4 20 0431*  	ld iy,Frc083
       04          
041DEC CD DC 33 04 0432*  	call vdu_load_img_2
041DF0             0433*  
041DF0 21 54 01 00 0434*  	ld hl,BUF_0340
041DF4 01 07 00 00 0435*  	ld bc,7
041DF8 11 0E 00 00 0436*  	ld de,14
041DFC DD 21 62 00 0437*  	ld ix,98
       00          
041E01 FD 21 07 21 0438*  	ld iy,Frc084
       04          
041E06 CD DC 33 04 0439*  	call vdu_load_img_2
041E0A             0440*  
041E0A 21 55 01 00 0441*  	ld hl,BUF_0341
041E0E 01 08 00 00 0442*  	ld bc,8
041E12 11 0E 00 00 0443*  	ld de,14
041E16 DD 21 70 00 0444*  	ld ix,112
       00          
041E1B FD 21 1A 21 0445*  	ld iy,Frc085
       04          
041E20 CD DC 33 04 0446*  	call vdu_load_img_2
041E24             0447*  
041E24 21 56 01 00 0448*  	ld hl,BUF_0342
041E28 01 07 00 00 0449*  	ld bc,7
041E2C 11 0E 00 00 0450*  	ld de,14
041E30 DD 21 62 00 0451*  	ld ix,98
       00          
041E35 FD 21 2D 21 0452*  	ld iy,Frc086
       04          
041E3A CD DC 33 04 0453*  	call vdu_load_img_2
041E3E             0454*  
041E3E 21 57 01 00 0455*  	ld hl,BUF_0343
041E42 01 0B 00 00 0456*  	ld bc,11
041E46 11 0E 00 00 0457*  	ld de,14
041E4A DD 21 9A 00 0458*  	ld ix,154
       00          
041E4F FD 21 40 21 0459*  	ld iy,Frc087
       04          
041E54 CD DC 33 04 0460*  	call vdu_load_img_2
041E58             0461*  
041E58 21 58 01 00 0462*  	ld hl,BUF_0344
041E5C 01 07 00 00 0463*  	ld bc,7
041E60 11 0E 00 00 0464*  	ld de,14
041E64 DD 21 62 00 0465*  	ld ix,98
       00          
041E69 FD 21 53 21 0466*  	ld iy,Frc088
       04          
041E6E CD DC 33 04 0467*  	call vdu_load_img_2
041E72             0468*  
041E72 21 59 01 00 0469*  	ld hl,BUF_0345
041E76 01 08 00 00 0470*  	ld bc,8
041E7A 11 0E 00 00 0471*  	ld de,14
041E7E DD 21 70 00 0472*  	ld ix,112
       00          
041E83 FD 21 66 21 0473*  	ld iy,Frc089
       04          
041E88 CD DC 33 04 0474*  	call vdu_load_img_2
041E8C             0475*  
041E8C 21 5A 01 00 0476*  	ld hl,BUF_0346
041E90 01 07 00 00 0477*  	ld bc,7
041E94 11 0E 00 00 0478*  	ld de,14
041E98 DD 21 62 00 0479*  	ld ix,98
       00          
041E9D FD 21 79 21 0480*  	ld iy,Frc090
       04          
041EA2 CD DC 33 04 0481*  	call vdu_load_img_2
041EA6             0482*  ; Missing character 91
041EA6             0483*  ; Missing character 92
041EA6             0484*  ; Missing character 93
041EA6             0485*  ; Missing character 94
041EA6             0486*  ; Missing character 95
041EA6             0487*  ; Missing character 96
041EA6             0488*  ; Missing character 97
041EA6             0489*  ; Missing character 98
041EA6             0490*  ; Missing character 99
041EA6             0491*  ; Missing character 100
041EA6             0492*  ; Missing character 101
041EA6             0493*  ; Missing character 102
041EA6             0494*  ; Missing character 103
041EA6             0495*  ; Missing character 104
041EA6             0496*  ; Missing character 105
041EA6             0497*  ; Missing character 106
041EA6             0498*  ; Missing character 107
041EA6             0499*  ; Missing character 108
041EA6             0500*  ; Missing character 109
041EA6             0501*  ; Missing character 110
041EA6             0502*  ; Missing character 111
041EA6             0503*  ; Missing character 112
041EA6             0504*  ; Missing character 113
041EA6             0505*  ; Missing character 114
041EA6             0506*  ; Missing character 115
041EA6             0507*  ; Missing character 116
041EA6             0508*  ; Missing character 117
041EA6             0509*  ; Missing character 118
041EA6             0510*  ; Missing character 119
041EA6             0511*  ; Missing character 120
041EA6             0512*  ; Missing character 121
041EA6             0513*  ; Missing character 122
041EA6             0514*  
041EA6 C9          0515*  	ret
041EA7             0516*  
041EA7 66 6F 6E 74 0517*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
041EBA 66 6F 6E 74 0518*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
041ECD 66 6F 6E 74 0519*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
041EE0 66 6F 6E 74 0520*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
041EF3 66 6F 6E 74 0521*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
041F06 66 6F 6E 74 0522*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
041F19 66 6F 6E 74 0523*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
041F2C 66 6F 6E 74 0524*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
041F3F 66 6F 6E 74 0525*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
041F52 66 6F 6E 74 0526*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
041F65 66 6F 6E 74 0527*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
041F78 66 6F 6E 74 0528*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
041F8B 66 6F 6E 74 0529*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
041F9E 66 6F 6E 74 0530*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
041FB1 66 6F 6E 74 0531*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
041FC4 66 6F 6E 74 0532*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
041FD7 66 6F 6E 74 0533*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
041FEA 66 6F 6E 74 0534*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
041FFD 66 6F 6E 74 0535*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
042010 66 6F 6E 74 0536*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
042023 66 6F 6E 74 0537*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
042036 66 6F 6E 74 0538*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
042049 66 6F 6E 74 0539*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
04205C 66 6F 6E 74 0540*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
04206F 66 6F 6E 74 0541*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
042082 66 6F 6E 74 0542*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
042095 66 6F 6E 74 0543*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
0420A8 66 6F 6E 74 0544*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
0420BB 66 6F 6E 74 0545*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
0420CE 66 6F 6E 74 0546*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
0420E1 66 6F 6E 74 0547*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
0420F4 66 6F 6E 74 0548*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
042107 66 6F 6E 74 0549*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
04211A 66 6F 6E 74 0550*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
04212D 66 6F 6E 74 0551*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
042140 66 6F 6E 74 0552*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
042153 66 6F 6E 74 0553*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
042166 66 6F 6E 74 0554*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
042179 66 6F 6E 74 0555*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
04218C             0019   	include "src/asm/ui.inc"
04218C             0001*  ; ui routines will go here
04218C             0020   	include "src/asm/ui_img.inc"
04218C             0001*  ; Bitmap indices:
04218C             0002*  BUF_UI_BJ_025: equ 0x0300
04218C             0003*  BUF_UI_BJ_050: equ 0x0301
04218C             0004*  BUF_UI_BJ_075: equ 0x0302
04218C             0005*  BUF_UI_BJ_100: equ 0x0303
04218C             0006*  BUF_UI_BJ_120_120: equ 0x0304
04218C             0007*  BUF_UI_LOWER_PANEL: equ 0x0305
04218C             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x0306
04218C             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x0307
04218C             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x0308
04218C             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x0309
04218C             0012*  BUF_UI_SPLASH: equ 0x030A
04218C             0013*  
04218C             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
04218C             0015*  load_ui_images:
04218C             0016*  
04218C 21 00 03 00 0017*  	ld hl,BUF_UI_BJ_025
042190 01 20 00 00 0018*  	ld bc,32
042194 11 20 00 00 0019*  	ld de,32
042198 DD 21 00 04 0020*  	ld ix,1024
       00          
04219D FD 21 AB 22 0021*  	ld iy,F_UI_bj_025
       04          
0421A2 CD DC 33 04 0022*  	call vdu_load_img_2
0421A6             0023*  
0421A6 21 01 03 00 0024*  	ld hl,BUF_UI_BJ_050
0421AA 01 20 00 00 0025*  	ld bc,32
0421AE 11 20 00 00 0026*  	ld de,32
0421B2 DD 21 00 04 0027*  	ld ix,1024
       00          
0421B7 FD 21 BB 22 0028*  	ld iy,F_UI_bj_050
       04          
0421BC CD DC 33 04 0029*  	call vdu_load_img_2
0421C0             0030*  
0421C0 21 02 03 00 0031*  	ld hl,BUF_UI_BJ_075
0421C4 01 20 00 00 0032*  	ld bc,32
0421C8 11 20 00 00 0033*  	ld de,32
0421CC DD 21 00 04 0034*  	ld ix,1024
       00          
0421D1 FD 21 CB 22 0035*  	ld iy,F_UI_bj_075
       04          
0421D6 CD DC 33 04 0036*  	call vdu_load_img_2
0421DA             0037*  
0421DA 21 03 03 00 0038*  	ld hl,BUF_UI_BJ_100
0421DE 01 20 00 00 0039*  	ld bc,32
0421E2 11 20 00 00 0040*  	ld de,32
0421E6 DD 21 00 04 0041*  	ld ix,1024
       00          
0421EB FD 21 DB 22 0042*  	ld iy,F_UI_bj_100
       04          
0421F0 CD DC 33 04 0043*  	call vdu_load_img_2
0421F4             0044*  
0421F4 21 04 03 00 0045*  	ld hl,BUF_UI_BJ_120_120
0421F8 01 78 00 00 0046*  	ld bc,120
0421FC 11 78 00 00 0047*  	ld de,120
042200 DD 21 40 38 0048*  	ld ix,14400
       00          
042205 FD 21 EB 22 0049*  	ld iy,F_UI_bj_120_120
       04          
04220A CD DC 33 04 0050*  	call vdu_load_img_2
04220E             0051*  
04220E 21 05 03 00 0052*  	ld hl,BUF_UI_LOWER_PANEL
042212 01 40 01 00 0053*  	ld bc,320
042216 11 50 00 00 0054*  	ld de,80
04221A DD 21 00 64 0055*  	ld ix,25600
       00          
04221F FD 21 FF 22 0056*  	ld iy,F_UI_lower_panel
       04          
042224 CD DC 33 04 0057*  	call vdu_load_img_2
042228             0058*  
042228 21 06 03 00 0059*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
04222C 01 28 00 00 0060*  	ld bc,40
042230 11 14 00 00 0061*  	ld de,20
042234 DD 21 20 03 0062*  	ld ix,800
       00          
042239 FD 21 14 23 0063*  	ld iy,F_UI_lower_panel_gatling
       04          
04223E CD DC 33 04 0064*  	call vdu_load_img_2
042242             0065*  
042242 21 07 03 00 0066*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
042246 01 28 00 00 0067*  	ld bc,40
04224A 11 14 00 00 0068*  	ld de,20
04224E DD 21 20 03 0069*  	ld ix,800
       00          
042253 FD 21 31 23 0070*  	ld iy,F_UI_lower_panel_knife
       04          
042258 CD DC 33 04 0071*  	call vdu_load_img_2
04225C             0072*  
04225C 21 08 03 00 0073*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
042260 01 28 00 00 0074*  	ld bc,40
042264 11 14 00 00 0075*  	ld de,20
042268 DD 21 20 03 0076*  	ld ix,800
       00          
04226D FD 21 4C 23 0077*  	ld iy,F_UI_lower_panel_machine_gun
       04          
042272 CD DC 33 04 0078*  	call vdu_load_img_2
042276             0079*  
042276 21 09 03 00 0080*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
04227A 01 28 00 00 0081*  	ld bc,40
04227E 11 14 00 00 0082*  	ld de,20
042282 DD 21 20 03 0083*  	ld ix,800
       00          
042287 FD 21 6D 23 0084*  	ld iy,F_UI_lower_panel_pistol
       04          
04228C CD DC 33 04 0085*  	call vdu_load_img_2
042290             0086*  
042290 21 0A 03 00 0087*  	ld hl,BUF_UI_SPLASH
042294 01 40 01 00 0088*  	ld bc,320
042298 11 A0 00 00 0089*  	ld de,160
04229C DD 21 00 C8 0090*  	ld ix,51200
       00          
0422A1 FD 21 89 23 0091*  	ld iy,F_UI_splash
       04          
0422A6 CD DC 33 04 0092*  	call vdu_load_img_2
0422AA             0093*  
0422AA C9          0094*  	ret
0422AB             0095*  
0422AB 75 69 2F 62 0096*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0422BB 75 69 2F 62 0097*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
0422CB 75 69 2F 62 0098*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
0422DB 75 69 2F 62 0099*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
0422EB 75 69 2F 62 0100*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
0422FF 75 69 2F 6C 0101*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
042314 75 69 2F 6C 0102*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
042331 75 69 2F 6C 0103*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
04234C 75 69 2F 6C 0104*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
04236D 75 69 2F 6C 0105*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
042389 75 69 2F 73 0106*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
042399             0021   	include "src/asm/ui_img_bj.inc"
042399             0001*  ; Bitmap indices:
042399             0002*  BUF_UI_BJ_GATLING_00: equ 0x0400
042399             0003*  BUF_UI_BJ_GATLING_01: equ 0x0401
042399             0004*  BUF_UI_BJ_GATLING_02: equ 0x0402
042399             0005*  BUF_UI_BJ_GATLING_03: equ 0x0403
042399             0006*  BUF_UI_BJ_GATLING_04: equ 0x0404
042399             0007*  BUF_UI_BJ_KNIFE_00: equ 0x0405
042399             0008*  BUF_UI_BJ_KNIFE_01: equ 0x0406
042399             0009*  BUF_UI_BJ_KNIFE_02: equ 0x0407
042399             0010*  BUF_UI_BJ_KNIFE_03: equ 0x0408
042399             0011*  BUF_UI_BJ_KNIFE_04: equ 0x0409
042399             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x040A
042399             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x040B
042399             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x040C
042399             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x040D
042399             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x040E
042399             0017*  BUF_UI_BJ_PISTOL_00: equ 0x040F
042399             0018*  BUF_UI_BJ_PISTOL_01: equ 0x0410
042399             0019*  BUF_UI_BJ_PISTOL_02: equ 0x0411
042399             0020*  BUF_UI_BJ_PISTOL_03: equ 0x0412
042399             0021*  BUF_UI_BJ_PISTOL_04: equ 0x0413
042399             0022*  
042399             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
042399             0024*  load_ui_images_bj:
042399             0025*  
042399 21 00 04 00 0026*  	ld hl,BUF_UI_BJ_GATLING_00
04239D 01 40 00 00 0027*  	ld bc,64
0423A1 11 40 00 00 0028*  	ld de,64
0423A5 DD 21 00 10 0029*  	ld ix,4096
       00          
0423AA FD 21 A2 25 0030*  	ld iy,F_UI_bj_gatling_00
       04          
0423AF CD DC 33 04 0031*  	call vdu_load_img_2
0423B3             0032*  
0423B3 21 01 04 00 0033*  	ld hl,BUF_UI_BJ_GATLING_01
0423B7 01 40 00 00 0034*  	ld bc,64
0423BB 11 40 00 00 0035*  	ld de,64
0423BF DD 21 00 10 0036*  	ld ix,4096
       00          
0423C4 FD 21 BC 25 0037*  	ld iy,F_UI_bj_gatling_01
       04          
0423C9 CD DC 33 04 0038*  	call vdu_load_img_2
0423CD             0039*  
0423CD 21 02 04 00 0040*  	ld hl,BUF_UI_BJ_GATLING_02
0423D1 01 40 00 00 0041*  	ld bc,64
0423D5 11 40 00 00 0042*  	ld de,64
0423D9 DD 21 00 10 0043*  	ld ix,4096
       00          
0423DE FD 21 D6 25 0044*  	ld iy,F_UI_bj_gatling_02
       04          
0423E3 CD DC 33 04 0045*  	call vdu_load_img_2
0423E7             0046*  
0423E7 21 03 04 00 0047*  	ld hl,BUF_UI_BJ_GATLING_03
0423EB 01 40 00 00 0048*  	ld bc,64
0423EF 11 40 00 00 0049*  	ld de,64
0423F3 DD 21 00 10 0050*  	ld ix,4096
       00          
0423F8 FD 21 F0 25 0051*  	ld iy,F_UI_bj_gatling_03
       04          
0423FD CD DC 33 04 0052*  	call vdu_load_img_2
042401             0053*  
042401 21 04 04 00 0054*  	ld hl,BUF_UI_BJ_GATLING_04
042405 01 40 00 00 0055*  	ld bc,64
042409 11 40 00 00 0056*  	ld de,64
04240D DD 21 00 10 0057*  	ld ix,4096
       00          
042412 FD 21 0A 26 0058*  	ld iy,F_UI_bj_gatling_04
       04          
042417 CD DC 33 04 0059*  	call vdu_load_img_2
04241B             0060*  
04241B 21 05 04 00 0061*  	ld hl,BUF_UI_BJ_KNIFE_00
04241F 01 40 00 00 0062*  	ld bc,64
042423 11 40 00 00 0063*  	ld de,64
042427 DD 21 00 10 0064*  	ld ix,4096
       00          
04242C FD 21 24 26 0065*  	ld iy,F_UI_bj_knife_00
       04          
042431 CD DC 33 04 0066*  	call vdu_load_img_2
042435             0067*  
042435 21 06 04 00 0068*  	ld hl,BUF_UI_BJ_KNIFE_01
042439 01 40 00 00 0069*  	ld bc,64
04243D 11 40 00 00 0070*  	ld de,64
042441 DD 21 00 10 0071*  	ld ix,4096
       00          
042446 FD 21 3C 26 0072*  	ld iy,F_UI_bj_knife_01
       04          
04244B CD DC 33 04 0073*  	call vdu_load_img_2
04244F             0074*  
04244F 21 07 04 00 0075*  	ld hl,BUF_UI_BJ_KNIFE_02
042453 01 40 00 00 0076*  	ld bc,64
042457 11 40 00 00 0077*  	ld de,64
04245B DD 21 00 10 0078*  	ld ix,4096
       00          
042460 FD 21 54 26 0079*  	ld iy,F_UI_bj_knife_02
       04          
042465 CD DC 33 04 0080*  	call vdu_load_img_2
042469             0081*  
042469 21 08 04 00 0082*  	ld hl,BUF_UI_BJ_KNIFE_03
04246D 01 40 00 00 0083*  	ld bc,64
042471 11 40 00 00 0084*  	ld de,64
042475 DD 21 00 10 0085*  	ld ix,4096
       00          
04247A FD 21 6C 26 0086*  	ld iy,F_UI_bj_knife_03
       04          
04247F CD DC 33 04 0087*  	call vdu_load_img_2
042483             0088*  
042483 21 09 04 00 0089*  	ld hl,BUF_UI_BJ_KNIFE_04
042487 01 40 00 00 0090*  	ld bc,64
04248B 11 40 00 00 0091*  	ld de,64
04248F DD 21 00 10 0092*  	ld ix,4096
       00          
042494 FD 21 84 26 0093*  	ld iy,F_UI_bj_knife_04
       04          
042499 CD DC 33 04 0094*  	call vdu_load_img_2
04249D             0095*  
04249D 21 0A 04 00 0096*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
0424A1 01 40 00 00 0097*  	ld bc,64
0424A5 11 40 00 00 0098*  	ld de,64
0424A9 DD 21 00 10 0099*  	ld ix,4096
       00          
0424AE FD 21 9C 26 0100*  	ld iy,F_UI_bj_machine_gun_00
       04          
0424B3 CD DC 33 04 0101*  	call vdu_load_img_2
0424B7             0102*  
0424B7 21 0B 04 00 0103*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
0424BB 01 40 00 00 0104*  	ld bc,64
0424BF 11 40 00 00 0105*  	ld de,64
0424C3 DD 21 00 10 0106*  	ld ix,4096
       00          
0424C8 FD 21 BA 26 0107*  	ld iy,F_UI_bj_machine_gun_01
       04          
0424CD CD DC 33 04 0108*  	call vdu_load_img_2
0424D1             0109*  
0424D1 21 0C 04 00 0110*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
0424D5 01 40 00 00 0111*  	ld bc,64
0424D9 11 40 00 00 0112*  	ld de,64
0424DD DD 21 00 10 0113*  	ld ix,4096
       00          
0424E2 FD 21 D8 26 0114*  	ld iy,F_UI_bj_machine_gun_02
       04          
0424E7 CD DC 33 04 0115*  	call vdu_load_img_2
0424EB             0116*  
0424EB 21 0D 04 00 0117*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
0424EF 01 40 00 00 0118*  	ld bc,64
0424F3 11 40 00 00 0119*  	ld de,64
0424F7 DD 21 00 10 0120*  	ld ix,4096
       00          
0424FC FD 21 F6 26 0121*  	ld iy,F_UI_bj_machine_gun_03
       04          
042501 CD DC 33 04 0122*  	call vdu_load_img_2
042505             0123*  
042505 21 0E 04 00 0124*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
042509 01 40 00 00 0125*  	ld bc,64
04250D 11 40 00 00 0126*  	ld de,64
042511 DD 21 00 10 0127*  	ld ix,4096
       00          
042516 FD 21 14 27 0128*  	ld iy,F_UI_bj_machine_gun_04
       04          
04251B CD DC 33 04 0129*  	call vdu_load_img_2
04251F             0130*  
04251F 21 0F 04 00 0131*  	ld hl,BUF_UI_BJ_PISTOL_00
042523 01 40 00 00 0132*  	ld bc,64
042527 11 40 00 00 0133*  	ld de,64
04252B DD 21 00 10 0134*  	ld ix,4096
       00          
042530 FD 21 32 27 0135*  	ld iy,F_UI_bj_pistol_00
       04          
042535 CD DC 33 04 0136*  	call vdu_load_img_2
042539             0137*  
042539 21 10 04 00 0138*  	ld hl,BUF_UI_BJ_PISTOL_01
04253D 01 40 00 00 0139*  	ld bc,64
042541 11 40 00 00 0140*  	ld de,64
042545 DD 21 00 10 0141*  	ld ix,4096
       00          
04254A FD 21 4B 27 0142*  	ld iy,F_UI_bj_pistol_01
       04          
04254F CD DC 33 04 0143*  	call vdu_load_img_2
042553             0144*  
042553 21 11 04 00 0145*  	ld hl,BUF_UI_BJ_PISTOL_02
042557 01 40 00 00 0146*  	ld bc,64
04255B 11 40 00 00 0147*  	ld de,64
04255F DD 21 00 10 0148*  	ld ix,4096
       00          
042564 FD 21 64 27 0149*  	ld iy,F_UI_bj_pistol_02
       04          
042569 CD DC 33 04 0150*  	call vdu_load_img_2
04256D             0151*  
04256D 21 12 04 00 0152*  	ld hl,BUF_UI_BJ_PISTOL_03
042571 01 40 00 00 0153*  	ld bc,64
042575 11 40 00 00 0154*  	ld de,64
042579 DD 21 00 10 0155*  	ld ix,4096
       00          
04257E FD 21 7D 27 0156*  	ld iy,F_UI_bj_pistol_03
       04          
042583 CD DC 33 04 0157*  	call vdu_load_img_2
042587             0158*  
042587 21 13 04 00 0159*  	ld hl,BUF_UI_BJ_PISTOL_04
04258B 01 40 00 00 0160*  	ld bc,64
04258F 11 40 00 00 0161*  	ld de,64
042593 DD 21 00 10 0162*  	ld ix,4096
       00          
042598 FD 21 96 27 0163*  	ld iy,F_UI_bj_pistol_04
       04          
04259D CD DC 33 04 0164*  	call vdu_load_img_2
0425A1             0165*  
0425A1 C9          0166*  	ret
0425A2             0167*  
0425A2 75 69 2F 62 0168*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
0425BC 75 69 2F 62 0169*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
0425D6 75 69 2F 62 0170*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
0425F0 75 69 2F 62 0171*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04260A 75 69 2F 62 0172*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
042624 75 69 2F 62 0173*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
04263C 75 69 2F 62 0174*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
042654 75 69 2F 62 0175*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
04266C 75 69 2F 62 0176*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
042684 75 69 2F 62 0177*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
04269C 75 69 2F 62 0178*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
0426BA 75 69 2F 62 0179*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
0426D8 75 69 2F 62 0180*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
0426F6 75 69 2F 62 0181*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
042714 75 69 2F 62 0182*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
042732 75 69 2F 62 0183*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
04274B 75 69 2F 62 0184*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
042764 75 69 2F 62 0185*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
04277D 75 69 2F 62 0186*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
042796 75 69 2F 62 0187*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
0427AF             0022   	; include "src/asm/sprites.inc"
0427AF             0023   	include "src/asm/vdu.inc"
0427AF             0001*  ; The following is a high-level list of the VDU sequences that are supported:
0427AF             0002*  ; VDU 0: Null (no operation)
0427AF             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
0427AF             0004*  ; VDU 2: Enable “printer” §§
0427AF             0005*  ; VDU 3: Disable “printer” §§
0427AF             0006*  ; VDU 4: Write text at text cursor
0427AF             0007*  ; VDU 5: Write text at graphics cursor
0427AF             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
0427AF             0009*  ; VDU 7: Make a short beep (BEL)
0427AF             0010*  ; VDU 8: Move cursor back one character
0427AF             0011*  ; VDU 9: Move cursor forward one character
0427AF             0012*  ; VDU 10: Move cursor down one line
0427AF             0013*  ; VDU 11: Move cursor up one line
0427AF             0014*  ; VDU 12: Clear text area (CLS)
0427AF             0015*  ; VDU 13: Carriage return
0427AF             0016*  ; VDU 14: Page mode On *
0427AF             0017*  ; VDU 15: Page mode Off *
0427AF             0018*  ; VDU 16: Clear graphics area (CLG)
0427AF             0019*  ; VDU 17, colour: Define text colour (COLOUR)
0427AF             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
0427AF             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
0427AF             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
0427AF             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
0427AF             0024*  ; VDU 22, n: Select screen mode (MODE n)
0427AF             0025*  ; VDU 23, n: Re-program display character / System Commands
0427AF             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
0427AF             0027*  ; VDU 25, mode, x; y;: PLOT command
0427AF             0028*  ; VDU 26: Reset graphics and text viewports **
0427AF             0029*  ; VDU 27, char: Output character to screen §
0427AF             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
0427AF             0031*  ; VDU 29, x; y;: Set graphics origin
0427AF             0032*  ; VDU 30: Home cursor
0427AF             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
0427AF             0034*  ; VDU 127: Backspace
0427AF             0035*  
0427AF             0036*  ; VDU 0: Null (no operation)
0427AF             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
0427AF             0038*  ;     This may be useful for padding out a VDU command sequence,
0427AF             0039*  ;     or for inserting a placeholder for a command that will be added later.
0427AF             0040*  ; inputs: none
0427AF             0041*  ; outputs: an empty byte somewhere in VDU
0427AF             0042*  ; destroys: a
0427AF             0043*  vdu_null:
0427AF AF          0044*      xor a
0427B0 5B D7       0045*  	rst.lil $10
0427B2 C9          0046*  	ret
0427B3             0047*  
0427B3             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
0427B3             0049*  ;     Ensures that the next character received by the VDP is sent through to
0427B3             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
0427B3             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
0427B3             0052*  ;     intended to be displayed on the screen. It allows characters that would
0427B3             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
0427B3             0054*  ;     If the “printer” has not been enabled then this command will just discard
0427B3             0055*  ;     the next byte sent to the VDP.
0427B3             0056*  ; inputs: a is the ascii code of the character to send
0427B3             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
0427B3             0058*  ; outputs: a character on the serial terminal connected to the USB port
0427B3             0059*  ;           and the same character on the screen at the current text cursor location
0427B3             0060*  ; QUESTION: does it also advance the text cursor?
0427B3             0061*  ; destroys: hl, bc
0427B3             0062*  vdu_char_to_printer:
0427B3 32 C3 27 04 0063*  	ld (@arg),a
0427B7 21 C2 27 04 0064*  	ld hl,@cmd
0427BB 01 02 00 00 0065*  	ld bc,@end-@cmd
0427BF 5B DF       0066*  	rst.lil $18
0427C1 C9          0067*  	ret
0427C2 01          0068*  @cmd: db 1
0427C3 00          0069*  @arg: db 0
0427C4             0070*  @end:
0427C4             0071*  
0427C4             0072*  ; VDU 2: Enable “printer” §§
0427C4             0073*  ;     Enables the “printer”.
0427C4             0074*  ;     In the context of the Agon platform, the “printer” is a serial
0427C4             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
0427C4             0076*  ;     this port is used for power, but it can also be used to send and
0427C4             0077*  ;     receive data to and from the VDP.
0427C4             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
0427C4             0079*  ;     to the “printer” as well as to the screen. It will additionally send
0427C4             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
0427C4             0081*  ;     use the VDU 1 command.
0427C4             0082*  ;     The VDP will not send through other control codes to the printer,
0427C4             0083*  ;     and will will not send through data it receives as part of other commands.
0427C4             0084*  vdu_enable_printer:
0427C4 3E 02       0085*      ld a,2
0427C6 5B D7       0086*  	rst.lil $10
0427C8 C9          0087*  	ret
0427C9             0088*  
0427C9             0089*  ; VDU 3: Disable “printer” §§
0427C9             0090*  ; inputs: none
0427C9             0091*  ; outputs: a USB port bereft of communication with the VDP
0427C9             0092*  ; destroys: a
0427C9             0093*  vdu_disable_printer:
0427C9 3E 03       0094*      ld a,3
0427CB 5B D7       0095*  	rst.lil $10
0427CD C9          0096*  	ret
0427CE             0097*  
0427CE             0098*  ; VDU 4: Write text at text cursor
0427CE             0099*  ;     This causes text to be written at the current text cursor position.
0427CE             0100*  ;     This is the default mode for text display.
0427CE             0101*  ;     Text is written using the current text foreground and background colours.
0427CE             0102*  ; inputs: a is the character to write to the screen
0427CE             0103*  ; prerequisites: the text cursor at the intended position on screen
0427CE             0104*  ; outputs: prints the character and moves text cursor right one position
0427CE             0105*  ; destroys: a, hl, bc
0427CE             0106*  vdu_char_to_text_cursor:
0427CE 32 DE 27 04 0107*  	ld (@arg),a
0427D2 21 DD 27 04 0108*  	ld hl,@cmd
0427D6 01 02 00 00 0109*  	ld bc,@end-@cmd
0427DA 5B DF       0110*  	rst.lil $18
0427DC C9          0111*  	ret
0427DD 04          0112*  @cmd: db 4
0427DE 00          0113*  @arg: db 0
0427DF             0114*  @end:
0427DF             0115*  
0427DF             0116*  ; VDU 5: Write text at graphics cursor
0427DF             0117*  ;     This causes text to be written at the current graphics cursor position.
0427DF             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
0427DF             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
0427DF             0120*  ;     or for positioning text at a specific location on the screen.
0427DF             0121*  ;     Characters are plotted using the current graphics foreground colour,
0427DF             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
0427DF             0123*  ;     The character background is transparent, and will not overwrite any
0427DF             0124*  ;     graphics that are already present at the character’s location.
0427DF             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
0427DF             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
0427DF             0127*  ;     graphics background colour.
0427DF             0128*  ; inputs: a is the character to write to the screen
0427DF             0129*  ; prerequisites: the graphics cursor at the intended position on screen
0427DF             0130*  ; outputs: see the name of the function
0427DF             0131*  ; destroys: a, hl, bc
0427DF             0132*  vdu_char_to_gfx_cursor:
0427DF 32 EF 27 04 0133*  	ld (@arg),a
0427E3 21 EE 27 04 0134*  	ld hl,@cmd
0427E7 01 02 00 00 0135*  	ld bc,@end-@cmd
0427EB 5B DF       0136*  	rst.lil $18
0427ED C9          0137*  	ret
0427EE 05          0138*  @cmd: db 5
0427EF 00          0139*  @arg: db 0
0427F0             0140*  @end:
0427F0             0141*  
0427F0             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
0427F0             0143*  ;     This enables the screen, and re-enables VDU command processing,
0427F0             0144*  ;     reversing the effect of VDU 21.
0427F0             0145*  ; inputs: none
0427F0             0146*  ; outputs: a functioning screen and VDU
0427F0             0147*  ; destroys: a
0427F0             0148*  vdu_enable_screen:
0427F0 3E 06       0149*      ld a,6
0427F2 5B D7       0150*  	rst.lil $10
0427F4 C9          0151*  	ret
0427F5             0152*  
0427F5             0153*  ; PASSES
0427F5             0154*  ; VDU 7: Make a short beep (BEL)
0427F5             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
0427F5             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
0427F5             0157*  ; inputs: none
0427F5             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
0427F5             0159*  ; destroys: a
0427F5             0160*  vdu_beep:
0427F5 3E 07       0161*      ld a,7
0427F7 5B D7       0162*  	rst.lil $10
0427F9 C9          0163*  	ret
0427FA             0164*  
0427FA             0165*  ; VDU 8: Move cursor back one character
0427FA             0166*  ;     Moves the text cursor one character in the negative “X” direction.
0427FA             0167*  ;     By default, when at the start of a line it will move to the end of
0427FA             0168*  ;     the previous line (as defined by the current text viewport).
0427FA             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
0427FA             0170*  ;     The cursor remains constrained to the current text viewport.
0427FA             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
0427FA             0172*  ;     The cursor is just moved left by one character width.
0427FA             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
0427FA             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
0427FA             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
0427FA             0176*  ;     will move the cursor to the left. This is likely to change in the future.
0427FA             0177*  vdu_cursor_back:
0427FA 3E 08       0178*      ld a,8
0427FC 5B D7       0179*  	rst.lil $10
0427FE C9          0180*  	ret
0427FF             0181*  
0427FF             0182*  ; VDU 9: Move cursor forward one character
0427FF             0183*  vdu_cursor_forward:
0427FF 3E 09       0184*      ld a,9
042801 5B D7       0185*  	rst.lil $10
042803 C9          0186*  	ret
042804             0187*  
042804             0188*  ; VDU 10: Move cursor down one line
042804             0189*  vdu_cursor_down:
042804 3E 0A       0190*      ld a,10
042806 5B D7       0191*  	rst.lil $10
042808 C9          0192*  	ret
042809             0193*  
042809             0194*  ; VDU 11: Move cursor up one line
042809             0195*  vdu_cursor_up:
042809 3E 0B       0196*      ld a,11
04280B 5B D7       0197*  	rst.lil $10
04280D C9          0198*  	ret
04280E             0199*  
04280E             0200*  ; VDU 12: Clear text area (CLS)
04280E             0201*  vdu_cls:
04280E 3E 0C       0202*      ld a,12
042810 5B D7       0203*  	rst.lil $10
042812 C9          0204*  	ret
042813             0205*  
042813             0206*  ; VDU 13: Carriage return
042813             0207*  vdu_cr:
042813 3E 0D       0208*      ld a,13
042815 5B D7       0209*  	rst.lil $10
042817 C9          0210*  	ret
042818             0211*  
042818             0212*  ; VDU 14: Page mode On *
042818             0213*  vdu_page_on:
042818 3E 0E       0214*      ld a,14
04281A 5B D7       0215*  	rst.lil $10
04281C C9          0216*  	ret
04281D             0217*  
04281D             0218*  ; VDU 15: Page mode Off *
04281D             0219*  vdu_page_off:
04281D 3E 0F       0220*      ld a,15
04281F 5B D7       0221*  	rst.lil $10
042821 C9          0222*  	ret
042822             0223*  
042822             0224*  ; VDU 16: Clear graphics area (CLG)
042822             0225*  vdu_clg:
042822 3E 10       0226*      ld a,16
042824 5B D7       0227*  	rst.lil $10
042826 C9          0228*  	ret
042827             0229*  
042827             0230*  ; VDU 17, colour: Define text colour (COLOUR)
042827             0231*  vdu_colour_text:
042827 32 37 28 04 0232*  	ld (@arg),a
04282B 21 36 28 04 0233*  	ld hl,@cmd
04282F 01 02 00 00 0234*  	ld bc,@end-@cmd
042833 5B DF       0235*  	rst.lil $18
042835 C9          0236*  	ret
042836 11          0237*  @cmd: db 17
042837 00          0238*  @arg: db 0
042838             0239*  @end:
042838             0240*  
042838             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
042838             0242*  ; inputs: a is the plotting mode, c is the colour
042838             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
042838             0244*  vdu_gcol_fg:
042838             0245*  ; This command will set both the current graphics colour,
042838             0246*  ; and the current graphics plotting mode.
042838             0247*  ; As with VDU 17 the colour number will set the foreground colour
042838             0248*  ; if it is in the range 0-127, or the background colour if it is
042838             0249*  ; in the range 128-255, and will be interpreted in the same manner.
042838             0250*  ; Support for different plotting modes on Agon is currently very limited.
042838             0251*  ; The only fully supported mode is mode 0, which is the default mode.
042838             0252*  ; This mode will plot the given colour at the given graphics coordinate,
042838             0253*  ; and will overwrite any existing graphics at that coordinate. There is
042838             0254*  ; very limited support for mode 4, which will invert the colour of any
042838             0255*  ; existing graphics at the given coordinate, but this is not fully supported
042838             0256*  ; and may not work as expected.
042838             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
042838             0258*  ; original VDU system, may be added in the future.
042838             0259*  ; This command is identical to the BASIC GCOL keyword.
042838 32 4D 28 04 0260*  	ld (@mode),a
04283C 79          0261*      ld a,c
04283D 32 4E 28 04 0262*      ld (@col),a
042841 21 4C 28 04 0263*  	ld hl,@cmd
042845 01 03 00 00 0264*  	ld bc,@end-@cmd
042849 5B DF       0265*  	rst.lil $18
04284B C9          0266*  	ret
04284C 12          0267*  @cmd: db 18
04284D 00          0268*  @mode: db 0
04284E 00          0269*  @col: db 0
04284F             0270*  @end:
04284F             0271*  
04284F             0272*  vdu_gcol_bg:
04284F 32 66 28 04 0273*  	ld (@mode),a
042853 79          0274*      ld a,c
042854 C6 80       0275*      add a,128
042856 32 67 28 04 0276*      ld (@col),a
04285A 21 65 28 04 0277*  	ld hl,@cmd
04285E 01 03 00 00 0278*  	ld bc,@end-@cmd
042862 5B DF       0279*  	rst.lil $18
042864 C9          0280*  	ret
042865 12          0281*  @cmd:  db 18
042866 00          0282*  @mode: db 0
042867 00          0283*  @col:  db 0
042868             0284*  @end:
042868             0285*  
042868             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
042868             0287*  ;     This command sets the colour palette, by mapping a logical colour
042868             0288*  ;     to a physical colour. This is useful for defining custom colours,
042868             0289*  ;     or for redefining the default colours.
042868             0290*  ;     If the physical colour number is given as 255 then the colour will
042868             0291*  ;     be defined using the red, green, and blue values given. If the physical
042868             0292*  ;     colour number is given as any other value then the colour will be defined
042868             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
042868             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
042868             0295*  ;     must still be provided, but will be ignored.
042868             0296*  ;     The values for red, green and blue must be given in the range 0-255.
042868             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
042868             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
042868             0299*  ;     requested. The nearest colour will be chosen.
042868             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
042868             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
042868             0302*  vdu_def_log_colour:
042868 32 8D 28 04 0303*  	ld (@physical),a
04286C 47          0304*      ld b,a
04286D 32 8C 28 04 0305*      ld (@logical),a
042871 79          0306*      ld a,c
042872 32 8E 28 04 0307*      ld (@red),a
042876 7C          0308*      ld a,h
042877 32 8F 28 04 0309*      ld (@green),a
04287B 7D          0310*      ld a,l
04287C 32 90 28 04 0311*      ld (@blue),a
042880 21 8B 28 04 0312*  	ld hl,@cmd
042884 01 06 00 00 0313*  	ld bc,@end-@cmd
042888 5B DF       0314*  	rst.lil $18
04288A C9          0315*  	ret
04288B 13          0316*  @cmd: db 19
04288C 00          0317*  @logical: db 0
04288D 00          0318*  @physical: db 0
04288E 00          0319*  @red: db 0
04288F 00          0320*  @green: db 0
042890 00          0321*  @blue: db 0
042891             0322*  @end:
042891             0323*  
042891             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
042891             0325*  vdu_reset_gfx:
042891 3E 14       0326*      ld a,20
042893 5B D7       0327*  	rst.lil $10
042895 C9          0328*  	ret
042896             0329*  
042896             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
042896             0331*  ; except for VDU 1 and VDU 6) §§
042896             0332*  vdu_disable_screen:
042896 3E 15       0333*      ld a,21
042898 5B D7       0334*  	rst.lil $10
04289A C9          0335*  	ret
04289B             0336*  
04289B             0337*  ; VDU 22, n: Select screen mode (MODE n)
04289B             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04289B             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04289B             0340*  ; Screen modes
04289B             0341*  ; Modes over 128 are double-buffered
04289B             0342*  ; From Version 1.04 or greater
04289B             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04289B             0344*  ; 0 	640 	480 	16 	    60hz
04289B             0345*  ; * 1 	640 	480 	4 	    60hz
04289B             0346*  ; 2 	640 	480 	2 	    60hz
04289B             0347*  ; 3 	640 	240 	64 	    60hz
04289B             0348*  ; 4 	640 	240 	16 	    60hz
04289B             0349*  ; 5 	640 	240 	4 	    60hz
04289B             0350*  ; 6 	640 	240 	2 	    60hz
04289B             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04289B             0352*  ; 8 	320 	240 	64 	    60hz
04289B             0353*  ; 9 	320 	240 	16 	    60hz
04289B             0354*  ; 10 	320 	240 	4 	    60hz
04289B             0355*  ; 11 	320 	240 	2 	    60hz
04289B             0356*  ; 12 	320 	200 	64 	    70hz
04289B             0357*  ; 13 	320 	200 	16 	    70hz
04289B             0358*  ; 14 	320 	200 	4 	    70hz
04289B             0359*  ; 15 	320 	200 	2 	    70hz
04289B             0360*  ; 16 	800 	600 	4 	    60hz
04289B             0361*  ; 17 	800 	600 	2 	    60hz
04289B             0362*  ; 18 	1024 	768 	2 	    60hz
04289B             0363*  ; 129 	640 	480 	4 	    60hz
04289B             0364*  ; 130 	640 	480 	2 	    60hz
04289B             0365*  ; 132 	640 	240 	16 	    60hz
04289B             0366*  ; 133 	640 	240 	4 	    60hz
04289B             0367*  ; 134 	640 	240 	2 	    60hz
04289B             0368*  ; 136 	320 	240 	64 	    60hz
04289B             0369*  ; 137 	320 	240 	16 	    60hz
04289B             0370*  ; 138 	320 	240 	4 	    60hz
04289B             0371*  ; 139 	320 	240 	2 	    60hz
04289B             0372*  ; 140 	320 	200 	64 	    70hz
04289B             0373*  ; 141 	320 	200 	16 	    70hz
04289B             0374*  ; 142 	320 	200 	4 	    70hz
04289B             0375*  ; 143 	320 	200 	2 	    70hz
04289B             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04289B             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04289B             0378*  ; change to the requested mode.
04289B             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04289B             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04289B             0381*  vdu_set_screen_mode:
04289B 32 AB 28 04 0382*  	ld (@arg),a
04289F 21 AA 28 04 0383*  	ld hl,@cmd
0428A3 01 02 00 00 0384*  	ld bc,@end-@cmd
0428A7 5B DF       0385*  	rst.lil $18
0428A9 C9          0386*  	ret
0428AA 16          0387*  @cmd: db 22 ; set screen mode
0428AB 00          0388*  @arg: db 0  ; screen mode parameter
0428AC             0389*  @end:
0428AC             0390*  
0428AC             0391*  ; VDU 23, n: Re-program display character / System Commands
0428AC             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
0428AC             0393*  vdu_define_character:
0428AC 32 C8 28 04 0394*  	ld (@ascii),a
0428B0 11 C9 28 04 0395*  	ld de,@data
0428B4 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
0428B6             0397*  @loop:
0428B6 7E          0398*  	ld a,(hl)
0428B7 12          0399*  	ld (de),a
0428B8 23          0400*  	inc hl
0428B9 13          0401*  	inc de
0428BA 10 FA       0402*  	djnz @loop
0428BC 21 C7 28 04 0403*  	ld hl,@cmd
0428C0 01 0A 00 00 0404*  	ld bc,@end-@cmd
0428C4 5B DF       0405*  	rst.lil $18
0428C6 C9          0406*  	ret
0428C7 17          0407*  @cmd:   db 23
0428C8 00          0408*  @ascii: db 0
0428C9             0409*  @data:  ds 8
0428D1             0410*  @end:
0428D1             0411*  
0428D1             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
0428D1             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
0428D1             0414*  ; 	because we have turned off logical screen scaling
0428D1             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
0428D1             0416*  ; outputs; nothing
0428D1             0417*  ; destroys: a might make it out alive
0428D1             0418*  vdu_set_gfx_viewport:
0428D1 ED 43 F1 28 0419*      ld (@x0),bc
       04          
0428D6 FD 22 F3 28 0420*      ld (@y1),iy
       04          
0428DB DD 22 F5 28 0421*  	ld (@x1),ix
       04          
0428E0 ED 53 F7 28 0422*  	ld (@y0),de
       04          
0428E5 21 F0 28 04 0423*  	ld hl,@cmd
0428E9 01 09 00 00 0424*  	ld bc,@end-@cmd
0428ED 5B DF       0425*  	rst.lil $18
0428EF C9          0426*  	ret
0428F0 18          0427*  @cmd:   db 24 ; set graphics viewport command
0428F1 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
0428F3 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
0428F5 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
0428F7 00 00       0431*  @y0: 	dw 0x0000 ; set by de
0428F9 00          0432*  @end:   db 0x00	  ; padding
0428FA             0433*  
0428FA             0434*  ; VDU 25, mode, x; y;: PLOT command
0428FA             0435*  ; Implemented in vdu_plot.inc
0428FA             0436*  
0428FA             0437*  ; VDU 26: Reset graphics and text viewports **
0428FA             0438*  vdu_reset_txt_gfx_view:
0428FA 3E 1A       0439*      ld a,26
0428FC 5B D7       0440*  	rst.lil $10
0428FE C9          0441*  	ret
0428FF             0442*  
0428FF             0443*  ; PASSES
0428FF             0444*  ; VDU 27, char: Output character to screen §
0428FF             0445*  ; inputs: a is the ascii code of the character to draw
0428FF             0446*  vdu_draw_char:
0428FF 32 0F 29 04 0447*  	ld (@arg),a
042903 21 0E 29 04 0448*  	ld hl,@cmd
042907 01 02 00 00 0449*  	ld bc,@end-@cmd
04290B 5B DF       0450*  	rst.lil $18
04290D C9          0451*  	ret
04290E 1B          0452*  @cmd: db 27
04290F 00          0453*  @arg: db 0  ; ascii code of character to draw
042910             0454*  @end:
042910             0455*  
042910             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
042910             0457*  ; MIND THE LITTLE-ENDIANESS
042910             0458*  ; inputs: c=left,b=bottom,e=right,d=top
042910             0459*  ; outputs; nothing
042910             0460*  ; destroys: a might make it out alive
042910             0461*  vdu_set_txt_viewport:
042910 ED 43 26 29 0462*      ld (@lb),bc
       04          
042915 ED 53 28 29 0463*  	ld (@rt),de
       04          
04291A 21 25 29 04 0464*  	ld hl,@cmd
04291E 01 05 00 00 0465*  	ld bc,@end-@cmd
042922 5B DF       0466*  	rst.lil $18
042924 C9          0467*  	ret
042925 1C          0468*  @cmd:   db 28 ; set text viewport command
042926 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
042928 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04292A 00          0471*  @end:   db 0x00	  ; padding
04292B             0472*  
04292B             0473*  ; PASSES
04292B             0474*  ; VDU 29, x; y;: Set graphics origin
04292B             0475*  ; inputs: bc,de x,y coordinates
04292B             0476*  vdu_set_gfx_origin:
04292B ED 43 41 29 0477*      ld (@x0),bc
       04          
042930 ED 53 43 29 0478*      ld (@y0),de
       04          
042935 21 40 29 04 0479*  	ld hl,@cmd
042939 01 05 00 00 0480*  	ld bc,@end-@cmd
04293D 5B DF       0481*  	rst.lil $18
04293F C9          0482*  	ret
042940 1D          0483*  @cmd:	db 29
042941 00 00       0484*  @x0: 	dw 0
042943 00 00       0485*  @y0: 	dw 0
042945 00          0486*  @end: 	db 0 ; padding
042946             0487*  
042946             0488*  ; PASSES
042946             0489*  ; VDU 30: Home cursor
042946             0490*  vdu_home_cursor:
042946 3E 1E       0491*      ld a,30
042948 5B D7       0492*  	rst.lil $10
04294A C9          0493*  	ret
04294B             0494*  
04294B             0495*  ; PASSES
04294B             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04294B             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04294B             0498*  vdu_move_cursor:
04294B ED 43 5C 29 0499*      ld (@x0),bc
       04          
042950 21 5B 29 04 0500*  	ld hl,@cmd
042954 01 03 00 00 0501*  	ld bc,@end-@cmd
042958 5B DF       0502*  	rst.lil $18
04295A C9          0503*  	ret
04295B 1F          0504*  @cmd: 	db 31
04295C 00          0505*  @x0:	db 0
04295D 00          0506*  @y0: 	db 0
04295E 00          0507*  @end: 	db 0 ; padding
04295F             0508*  
04295F             0509*  
04295F             0510*  ; VDU 127: Backspace
04295F             0511*  vdu_bksp:
04295F 3E 7F       0512*      ld a,127
042961 5B D7       0513*  	rst.lil $10
042963 C9          0514*  	ret
042964             0515*  
042964             0516*  ; activate a bitmap in preparation to draw it
042964             0517*  ; inputs: a holding the bitmap index
042964             0518*  vdu_bmp_select:
042964 32 76 29 04 0519*  	ld (@bmp),a
042968 21 73 29 04 0520*  	ld hl,@cmd
04296C 01 04 00 00 0521*  	ld bc,@end-@cmd
042970 5B DF       0522*  	rst.lil $18
042972 C9          0523*  	ret
042973 17 1B 00    0524*  @cmd: db 23,27,0
042976 00          0525*  @bmp: db 0
042977             0526*  @end:
042977             0527*  
042977             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042977             0529*  ; inputs: hl=bufferId
042977             0530*  vdu_buff_select:
042977 22 89 29 04 0531*  	ld (@bufferId),hl
04297B 21 86 29 04 0532*  	ld hl,@cmd
04297F 01 05 00 00 0533*  	ld bc,@end-@cmd
042983 5B DF       0534*  	rst.lil $18
042985 C9          0535*  	ret
042986 17 1B 20    0536*  @cmd: db 23,27,0x20
042989 00 00       0537*  @bufferId: dw 0x0000
04298B 00          0538*  @end: db 0x00 ; padding
04298C             0539*  
04298C             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04298C             0541*  ; inputs: a=format; bc=width; de=height
04298C             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04298C             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04298C             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04298C             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04298C             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04298C             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04298C             0548*  vdu_bmp_create:
04298C ED 43 A8 29 0549*      ld (@width),bc
       04          
042991 ED 53 AA 29 0550*      ld (@height),de
       04          
042996 32 AC 29 04 0551*      ld (@fmt),a
04299A 21 A5 29 04 0552*  	ld hl,@cmd
04299E 01 08 00 00 0553*  	ld bc,@end-@cmd
0429A2 5B DF       0554*  	rst.lil $18
0429A4 C9          0555*  	ret
0429A5 17 1B 21    0556*  @cmd:       db 23,27,0x21
0429A8 00 00       0557*  @width:     dw 0x0000
0429AA 00 00       0558*  @height:    dw 0x0000
0429AC 00          0559*  @fmt:       db 0x00
0429AD             0560*  @end:
0429AD             0561*  
0429AD             0562*  ; Draw a bitmap on the screen
0429AD             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
0429AD             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
0429AD             0565*  vdu_bmp_draw:
0429AD ED 43 C5 29 0566*      ld (@x0),bc
       04          
0429B2 ED 53 C7 29 0567*      ld (@y0),de
       04          
0429B7 21 C2 29 04 0568*  	ld hl,@cmd
0429BB 01 07 00 00 0569*  	ld bc,@end-@cmd
0429BF 5B DF       0570*  	rst.lil $18
0429C1 C9          0571*  	ret
0429C2 17 1B 03    0572*  @cmd: db 23,27,3
0429C5 00 00       0573*  @x0:  dw 0x0000
0429C7 00 00       0574*  @y0:  dw 0x0000
0429C9 00          0575*  @end: db 0x00 ; padding
0429CA             0576*  
0429CA             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0429CA             0578*  ; inputs: a is scaling mode, 1=on, 0=off
0429CA             0579*  ; note: default setting on boot is scaling ON
0429CA             0580*  vdu_set_scaling:
0429CA 32 DC 29 04 0581*  	ld (@arg),a
0429CE 21 D9 29 04 0582*  	ld hl,@cmd
0429D2 01 04 00 00 0583*  	ld bc,@end-@cmd
0429D6 5B DF       0584*  	rst.lil $18
0429D8 C9          0585*  	ret
0429D9 17 00 C0    0586*  @cmd: db 23,0,0xC0
0429DC 00          0587*  @arg: db 0  ; scaling on/off
0429DD             0588*  @end:
0429DD             0589*  
0429DD             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
0429DD             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
0429DD             0592*  ; 	(all modes).
0429DD             0593*  
0429DD             0594*  ; 	This command will swap the screen buffer, if the current screen mode
0429DD             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
0429DD             0596*  ; 	mode is not double-buffered then this command will wait for the next
0429DD             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
0429DD             0598*  ; 	screen with the vertical refresh rate of the monitor.
0429DD             0599*  
0429DD             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
0429DD             0601*  ; 	as it will prevent tearing of the screen.
0429DD             0602*  ; inputs: none
0429DD             0603*  ; outputs: none
0429DD             0604*  ; destroys: hl, bc
0429DD             0605*  vdu_flip:
0429DD 21 E8 29 04 0606*  	ld hl,@cmd
0429E1 01 03 00 00 0607*  	ld bc,@end-@cmd
0429E5 5B DF       0608*  	rst.lil $18
0429E7 C9          0609*  	ret
0429E8 17 00 C3    0610*  @cmd: db 23,0,0xC3
0429EB             0611*  @end:
0429EB             0612*  
0429EB             0613*  ; Command 64: Compress a buffer
0429EB             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
0429EB             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
0429EB             0616*  
0429EB             0617*  
0429EB             0618*  ; Command 65: Decompress a buffer
0429EB             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
0429EB             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
0429EB             0621*  ; inputs: hl=sourceBufferId/targetBufferId
0429EB             0622*  vdu_decompress_buffer:
0429EB 22 07 2A 04 0623*  	ld (@targetBufferId),hl
0429EF 22 0A 2A 04 0624*  	ld (@sourceBufferId),hl
0429F3 3E 41       0625*  	ld a,65
0429F5 32 09 2A 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
0429F9 21 04 2A 04 0627*  	ld hl,@cmd
0429FD 01 08 00 00 0628*  	ld bc,@end-@cmd
042A01 5B DF       0629*  	rst.lil $18
042A03 C9          0630*  	ret
042A04 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
042A07 00 00       0632*  @targetBufferId: dw 0x0000
042A09 41          0633*  @cmd1:	db 65
042A0A 00 00       0634*  @sourceBufferId: dw 0x0000
042A0C 00          0635*  @end: 	db 0x00 ; padding
042A0D             0636*  
042A0D             0637*  ; Command 65: Decompress a buffer
042A0D             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
042A0D             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
042A0D             0640*  ; inputs: hl=sourceBufferId/targetBufferId
042A0D             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
042A0D             0642*  vdu_decompress_buffer_different:
042A0D 22 2D 2A 04 0643*  	ld (@targetBufferId),hl
042A11 21 FF 7F 00 0644*      ld hl,0x7FFF
042A15 22 30 2A 04 0645*  	ld (@sourceBufferId),hl
042A19 3E 41       0646*  	ld a,65
042A1B 32 2F 2A 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
042A1F 21 2A 2A 04 0648*  	ld hl,@cmd
042A23 01 08 00 00 0649*  	ld bc,@end-@cmd
042A27 5B DF       0650*  	rst.lil $18
042A29 C9          0651*  	ret
042A2A 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
042A2D 00 00       0653*  @targetBufferId: dw 0x0000
042A2F 41          0654*  @cmd1:	db 65
042A30 00 00       0655*  @sourceBufferId: dw 0x0000
042A32 00          0656*  @end: 	db 0x00 ; padding
042A33             0657*  
042A33             0658*  ; #### from vdp.inc ####
042A33             0659*  
042A33             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
042A33             0661*  ; VDU 23, 7: Scrolling
042A33             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
042A33             0663*  ; inputs: a, extent; l, direction; h; speed
042A33             0664*  vdu_scroll_down:
042A33 32 48 2A 04 0665*  	ld (@extent),a
042A37 22 49 2A 04 0666*  	ld (@dir),hl ; implicitly populates @speed
042A3B 21 46 2A 04 0667*  	ld hl,@cmd
042A3F 01 05 00 00 0668*  	ld bc,@end-@cmd
042A43 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
042A45 C9          0670*  	ret
042A46 17 07       0671*  @cmd:       db 23,7
042A48 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
042A49 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
042A4A 00          0674*  @speed:     db 0x00 ; pixels
042A4B 00          0675*  @end:		db 0x00 ; padding
042A4C             0676*  
042A4C             0677*  cursor_on:
042A4C 21 57 2A 04 0678*  	ld hl,@cmd
042A50 01 03 00 00 0679*  	ld bc,@end-@cmd
042A54 5B DF       0680*  	rst.lil $18
042A56 C9          0681*  	ret
042A57             0682*  @cmd:
042A57 17 01 01    0683*  	db 23,1,1
042A5A             0684*  @end:
042A5A             0685*  
042A5A             0686*  cursor_off:
042A5A 21 65 2A 04 0687*  	ld hl,@cmd
042A5E 01 03 00 00 0688*  	ld bc,@end-@cmd
042A62 5B DF       0689*  	rst.lil $18
042A64 C9          0690*  	ret
042A65             0691*  @cmd:
042A65 17 01 00    0692*  	db 23,1,0
042A68             0693*  @end:
042A68             0694*  
042A68 DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
042A6A             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
042A6A 3E 08       0001*M 			LD	A, function
042A6C 5B CF       0002*M 			RST.LIL	08h
042A6E DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
042A71 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
042A74 28 FB       0699*  			JR	Z, @wait
042A76 DD E1       0700*  			POP	IX
042A78 C9          0701*  			RET
042A79             0702*  
042A79             0703*  ; #### from vdu_bmp.inc ####
042A79             0704*  ; =========================================================================
042A79             0705*  ; Bitmaps
042A79             0706*  ; -------------------------------------------------------------------------
042A79             0707*  ; VDU 23, 27, 0, n: Select bitmap n
042A79             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
042A79             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
042A79             0710*  
042A79             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
042A79             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
042A79             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
042A79             0714*  ; typically "move" style plot commands are used to define the rectangle.
042A79             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
042A79             0716*  ; inputs: hl; target bufferId
042A79             0717*  ; all the following are in 16.8 fixed point format
042A79             0718*  ;   ub.c; top-left x coordinate
042A79             0719*  ;   ud.e; top-left y coordinate
042A79             0720*  ;   ui.x; width
042A79             0721*  ;   ui.y; height
042A79             0722*  vdu_buff_screen_capture168:
042A79 ED 53 B0 2A 0723*          ld (@y0-1),de
       04          
042A7E ED 43 AE 2A 0724*          ld (@x0-1),bc
       04          
042A83 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
042A85 32 AE 2A 04 0726*          ld (@x0-1),a
042A89             0727*  
042A89 DD 22 B5 2A 0728*          ld (@x1),ix
       04          
042A8E FD 22 B7 2A 0729*          ld (@y1),iy
       04          
042A93 3E 17       0730*          ld a,23
042A95 32 B9 2A 04 0731*          ld (@y1+2),a
042A99             0732*  
042A99 22 BC 2A 04 0733*          ld (@bufId),hl
042A9D AF          0734*          xor a
042A9E 32 BE 2A 04 0735*          ld (@bufId+2),a
042AA2             0736*  
042AA2 21 AD 2A 04 0737*          ld hl,@begin
042AA6 01 13 00 00 0738*          ld bc,@end-@begin
042AAA 5B DF       0739*          rst.lil $18
042AAC C9          0740*          ret
042AAD             0741*  @begin:
042AAD             0742*  ; absolute move gfx cursor to top-left screen coordinate
042AAD             0743*  ; VDU 25, mode, x; y;: PLOT command
042AAD 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
042AAF 40 00       0745*  @x0: 	dw 64
042AB1 40 00       0746*  @y0: 	dw 64
042AB3             0747*  ; relative move gfx cursor to bottom-right screen coordinate
042AB3             0748*  ; VDU 25, mode, x; y;: PLOT command
042AB3 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
042AB5 0F 00       0750*  @x1: 	dw 15
042AB7 0F 00       0751*  @y1: 	dw 15
042AB9             0752*  ; now the main event
042AB9             0753*  ; VDU 23, 27, &21, bitmapId; 0;
042AB9 17 1B 21    0754*          db 23,27,0x21
042ABC 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
042AC0             0756*  @end: ; no padding required
042AC0             0757*  
042AC0             0758*  vdu_buff_screen_capture_full:
042AC0 21 CB 2A 04 0759*          ld hl,@begin
042AC4 01 13 00 00 0760*          ld bc,@end-@begin
042AC8 5B DF       0761*          rst.lil $18
042ACA C9          0762*          ret
042ACB             0763*  @begin:
042ACB             0764*  ; absolute move gfx cursor to top-left screen coordinate
042ACB             0765*  ; VDU 25, mode, x; y;: PLOT command
042ACB 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
042ACD 00 00       0767*  @x0: 	dw 0
042ACF 00 00       0768*  @y0: 	dw 0
042AD1             0769*  ; relative move gfx cursor to bottom-right screen coordinate
042AD1             0770*  ; VDU 25, mode, x; y;: PLOT command
042AD1 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
042AD3 3F 01       0772*  @x1: 	dw 319
042AD5 EF 00       0773*  @y1: 	dw 239
042AD7             0774*  ; now the main event
042AD7             0775*  ; VDU 23, 27, &21, bitmapId; 0;
042AD7 17 1B 21    0776*          db 23,27,0x21
042ADA 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
042ADE             0778*  @end: ; no padding required
042ADE             0779*  
042ADE             0780*  vdu_buff_screen_paste_full:
042ADE 21 E9 2A 04 0781*          ld hl,@begin
042AE2 01 0B 00 00 0782*          ld bc,@end-@begin
042AE6 5B DF       0783*          rst.lil $18
042AE8 C9          0784*          ret
042AE9             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042AE9 17 1B 20    0786*  @begin:    db 23,27,0x20
042AEC 00 20       0787*  @bufferId: dw 0x2000
042AEE             0788*  ; VDU 25, mode, x; y;: PLOT command
042AEE 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
042AF0 00 00 00 00 0790*             dw 0x0000,0x0000
042AF4             0791*  @end: ; no padding required
042AF4             0792*  
042AF4             0793*  vdu_buff_screen_capture_tiles:
042AF4 21 FF 2A 04 0794*          ld hl,@begin
042AF8 01 13 00 00 0795*          ld bc,@end-@begin
042AFC 5B DF       0796*          rst.lil $18
042AFE C9          0797*          ret
042AFF             0798*  @begin:
042AFF             0799*  ; absolute move gfx cursor to top-left screen coordinate
042AFF             0800*  ; VDU 25, mode, x; y;: PLOT command
042AFF 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
042B01 00 00       0802*  @x0: 	dw 0
042B03 00 00       0803*  @y0: 	dw 0
042B05             0804*  ; relative move gfx cursor to bottom-right screen coordinate
042B05             0805*  ; VDU 25, mode, x; y;: PLOT command
042B05 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
042B07 FF 00       0807*  @x1: 	dw 319-64
042B09 EF 00       0808*  @y1: 	dw 239
042B0B             0809*  ; now the main event
042B0B             0810*  ; VDU 23, 27, &21, bitmapId; 0;
042B0B 17 1B 21    0811*          db 23,27,0x21
042B0E 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
042B12             0813*  @end: ; no padding required
042B12             0814*  
042B12             0815*  vdu_buff_screen_paste_tiles:
042B12 21 1D 2B 04 0816*          ld hl,@begin
042B16 01 0B 00 00 0817*          ld bc,@end-@begin
042B1A 5B DF       0818*          rst.lil $18
042B1C C9          0819*          ret
042B1D             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042B1D 17 1B 20    0821*  @begin:    db 23,27,0x20
042B20 00 20       0822*  @bufferId: dw 0x2000
042B22             0823*  ; VDU 25, mode, x; y;: PLOT command
042B22 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
042B24 00 00 01 00 0825*             dw 0x0000,0x0001
042B28             0826*  @end: ; no padding required
042B28             0827*  
042B28             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
042B28             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
042B28             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
042B28             0831*  ; Value	Meaning
042B28             0832*  ; 0	RGBA8888 (4-bytes per pixel)
042B28             0833*  ; 1	RGBA2222 (1-bytes per pixel)
042B28             0834*  ; 2	Mono/Mask (1-bit per pixel)
042B28             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
042B28             0836*  ;     They have some significant limitations, and are not intended for general use.
042B28             0837*  
042B28             0838*  ; =========================================================================
042B28             0839*  ; Sprites
042B28             0840*  ; -------------------------------------------------------------------------
042B28             0841*  ; VDU 23, 27, 4, n: Select sprite n
042B28             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
042B28             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042B28             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042B28             0845*  ; VDU 23, 27, 7, n: Activate n sprites
042B28             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
042B28             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
042B28             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042B28             0849*  ; VDU 23, 27, 11: Show current sprite
042B28             0850*  ; VDU 23, 27, 12: Hide current sprite
042B28             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042B28             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042B28             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
042B28             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042B28             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042B28             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042B28             0857*  
042B28             0858*  ; =========================================================================
042B28             0859*  ; Mouse cursor
042B28             0860*  ; -------------------------------------------------------------------------
042B28             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
042B28             0862*  
042B28             0863*  ; #### from vdu_plot.inc ####
042B28             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042B28             0865*  ; PLOT code 	(Decimal) 	Effect
042B28             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
042B28             0867*  plot_sl_both: equ 0x00
042B28             0868*  
042B28             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
042B28             0870*  plot_sl_first: equ 0x08
042B28             0871*  
042B28             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
042B28             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
042B28             0874*  
042B28             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
042B28             0876*  plot_sl_last: equ 0x20
042B28             0877*  
042B28             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
042B28             0879*  plot_sl_none: equ 0x28
042B28             0880*  
042B28             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
042B28             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
042B28             0883*  
042B28             0884*  ; &40-&47 	64-71 	Point plot
042B28             0885*  plot_pt: equ 0x40
042B28             0886*  
042B28             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
042B28             0888*  plot_lf_lr_non_bg: equ 0x48
042B28             0889*  
042B28             0890*  ; &50-&57 	80-87 	Triangle fill
042B28             0891*  plot_tf: equ 0x50
042B28             0892*  
042B28             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
042B28             0894*  plot_lf_r_bg: equ 0x58
042B28             0895*  
042B28             0896*  ; &60-&67 	96-103 	Rectangle fill
042B28             0897*  plot_rf: equ 0x60
042B28             0898*  
042B28             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
042B28             0900*  plot_lf_lr_fg: equ 0x60
042B28             0901*  
042B28             0902*  ; &70-&77 	112-119 	Parallelogram fill
042B28             0903*  plot_pf: equ 0x70
042B28             0904*  
042B28             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
042B28             0906*  plot_lf_r_non_fg: equ 0x78
042B28             0907*  
042B28             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
042B28             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
042B28             0910*  
042B28             0911*  ; &90-&97 	144-151 	Circle outline
042B28             0912*  plot_co: equ 0x90
042B28             0913*  
042B28             0914*  ; &98-&9F 	152-159 	Circle fill
042B28             0915*  plot_cf: equ 0x98
042B28             0916*  
042B28             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
042B28             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
042B28             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
042B28             0920*  
042B28             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
042B28             0922*  plot_rcm: equ 0xB8
042B28             0923*  
042B28             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
042B28             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
042B28             0926*  ; &D0-&D7 	208-215 	Not defined
042B28             0927*  ; &D8-&DF 	216-223 	Not defined
042B28             0928*  ; &E0-&E7 	224-231 	Not defined
042B28             0929*  
042B28             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
042B28             0931*  plot_bmp: equ 0xE8
042B28             0932*  
042B28             0933*  ; &F0-&F7 	240-247 	Not defined
042B28             0934*  ; &F8-&FF 	248-255 	Not defined
042B28             0935*  
042B28             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
042B28             0937*  ; Agon Console8 VDP 2.2.0
042B28             0938*  
042B28             0939*  ; Within each group of eight plot codes, the effects are as follows:
042B28             0940*  ; Plot code 	Effect
042B28             0941*  ; 0 	Move relative
042B28             0942*  mv_rel: equ 0
042B28             0943*  
042B28             0944*  ; 1 	Plot relative in current foreground colour
042B28             0945*  dr_rel_fg: equ 1
042B28             0946*  
042B28             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
042B28             0948*  ; 3 	Plot relative in current background colour
042B28             0949*  dr_rel_bg: equ 3
042B28             0950*  
042B28             0951*  ; 4 	Move absolute
042B28             0952*  mv_abs: equ 4
042B28             0953*  
042B28             0954*  ; 5 	Plot absolute in current foreground colour
042B28             0955*  dr_abs_fg: equ 5
042B28             0956*  
042B28             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
042B28             0958*  ; 7 	Plot absolute in current background colour
042B28             0959*  dr_abs_bg: equ 7
042B28             0960*  
042B28             0961*  ; Codes 0-3 use the position data provided as part of the command
042B28             0962*  ; as a relative position, adding the position given to the current
042B28             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
042B28             0964*  ; as part of the command as an absolute position, setting the current
042B28             0965*  ; graphical cursor position to the position given.
042B28             0966*  
042B28             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
042B28             0968*  ; current pixel colour. These operations cannot currently be supported
042B28             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
042B28             0970*  ; supported. Support for these codes may be added in a future version
042B28             0971*  ; of the VDP firmware.
042B28             0972*  
042B28             0973*  ; 16 colour palette constants
042B28             0974*  c_black: equ 0
042B28             0975*  c_red_dk: equ 1
042B28             0976*  c_green_dk: equ 2
042B28             0977*  c_yellow_dk: equ 3
042B28             0978*  c_blue_dk: equ 4
042B28             0979*  c_magenta_dk: equ 5
042B28             0980*  c_cyan_dk: equ 6
042B28             0981*  c_grey: equ 7
042B28             0982*  c_grey_dk: equ 8
042B28             0983*  c_red: equ 9
042B28             0984*  c_green: equ 10
042B28             0985*  c_yellow: equ 11
042B28             0986*  c_blue: equ 12
042B28             0987*  c_magenta: equ 13
042B28             0988*  c_cyan: equ 14
042B28             0989*  c_white: equ 15
042B28             0990*  
042B28             0991*  ; VDU 25, mode, x; y;: PLOT command
042B28             0992*  ; inputs: a=mode, bc=x0, de=y0
042B28             0993*  vdu_plot:
042B28 32 42 2B 04 0994*      ld (@mode),a
042B2C ED 43 43 2B 0995*      ld (@x0),bc
       04          
042B31 ED 53 45 2B 0996*      ld (@y0),de
       04          
042B36 21 41 2B 04 0997*  	ld hl,@cmd
042B3A 01 06 00 00 0998*  	ld bc,@end-@cmd
042B3E 5B DF       0999*  	rst.lil $18
042B40 C9          1000*  	ret
042B41 19          1001*  @cmd:   db 25
042B42 00          1002*  @mode:  db 0
042B43 00 00       1003*  @x0: 	dw 0
042B45 00 00       1004*  @y0: 	dw 0
042B47 00          1005*  @end:   db 0 ; extra byte to soak up deu
042B48             1006*  
042B48             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042B48             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
042B48             1009*  ; VDU 25, mode, x; y;: PLOT command
042B48             1010*  ; inputs: bc=x0, de=y0
042B48             1011*  ; prerequisites: vdu_buff_select
042B48             1012*  vdu_plot_bmp:
042B48 ED 43 5F 2B 1013*      ld (@x0),bc
       04          
042B4D ED 53 61 2B 1014*      ld (@y0),de
       04          
042B52 21 5D 2B 04 1015*  	ld hl,@cmd
042B56 01 06 00 00 1016*  	ld bc,@end-@cmd
042B5A 5B DF       1017*  	rst.lil $18
042B5C C9          1018*  	ret
042B5D 19          1019*  @cmd:   db 25
042B5E ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
042B5F 00 00       1021*  @x0: 	dw 0x0000
042B61 00 00       1022*  @y0: 	dw 0x0000
042B63 00          1023*  @end:   db 0x00 ; padding
042B64             1024*  
042B64             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042B64             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
042B64             1027*  ; VDU 25, mode, x; y;: PLOT command
042B64             1028*  ; inputs: bc=x0, de=y0
042B64             1029*  ; USING 16.8 FIXED POINT COORDINATES
042B64             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042B64             1031*  ;   the fractional portiion of the inputs are truncated
042B64             1032*  ;   leaving only the 16-bit integer portion
042B64             1033*  ; prerequisites: vdu_buff_select
042B64             1034*  vdu_plot_bmp168:
042B64             1035*  ; populate in the reverse of normal to keep the
042B64             1036*  ; inputs from stomping on each other
042B64 ED 53 82 2B 1037*      ld (@y0-1),de
       04          
042B69 ED 43 80 2B 1038*      ld (@x0-1),bc
       04          
042B6E 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
042B70 32 80 2B 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
042B74 21 7F 2B 04 1041*  	ld hl,@cmd
042B78 01 06 00 00 1042*  	ld bc,@end-@cmd
042B7C 5B DF       1043*  	rst.lil $18
042B7E C9          1044*  	ret
042B7F 19          1045*  @cmd:   db 25
042B80 ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
042B81 00 00       1047*  @x0: 	dw 0x0000
042B83 00 00       1048*  @y0: 	dw 0x0000
042B85             1049*  @end:  ; no padding required b/c we shifted de right
042B85             1050*  
042B85             1051*  ; draw a filled rectangle
042B85             1052*  vdu_plot_rf:
042B85 ED 43 AC 2B 1053*      ld (@x0),bc
       04          
042B8A ED 53 AE 2B 1054*      ld (@y0),de
       04          
042B8F DD 22 B2 2B 1055*      ld (@x1),ix
       04          
042B94 FD 22 B4 2B 1056*      ld (@y1),iy
       04          
042B99 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
042B9B 32 B0 2B 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
042B9F 21 AA 2B 04 1059*  	ld hl,@cmd0
042BA3 01 0C 00 00 1060*  	ld bc,@end-@cmd0
042BA7 5B DF       1061*  	rst.lil $18
042BA9 C9          1062*      ret
042BAA 19          1063*  @cmd0:  db 25 ; plot
042BAB 04          1064*  @arg0:  db plot_sl_both+mv_abs
042BAC 00 00       1065*  @x0:    dw 0x0000
042BAE 00 00       1066*  @y0:    dw 0x0000
042BB0 19          1067*  @cmd1:  db 25 ; plot
042BB1 65          1068*  @arg1:  db plot_rf+dr_abs_fg
042BB2 00 00       1069*  @x1:    dw 0x0000
042BB4 00 00       1070*  @y1:    dw 0x0000
042BB6 00          1071*  @end:   db 0x00 ; padding
042BB7             1072*  
042BB7             1073*  ; draw a filled circle
042BB7             1074*  vdu_plot_cf:
042BB7 ED 43 DE 2B 1075*      ld (@x0),bc
       04          
042BBC ED 53 E0 2B 1076*      ld (@y0),de
       04          
042BC1 DD 22 E4 2B 1077*      ld (@x1),ix
       04          
042BC6 FD 22 E6 2B 1078*      ld (@y1),iy
       04          
042BCB 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
042BCD 32 E2 2B 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
042BD1 21 DC 2B 04 1081*  	ld hl,@cmd0
042BD5 01 0C 00 00 1082*  	ld bc,@end-@cmd0
042BD9 5B DF       1083*  	rst.lil $18
042BDB C9          1084*      ret
042BDC 19          1085*  @cmd0:  db 25 ; plot
042BDD 04          1086*  @arg0:  db plot_sl_both+mv_abs
042BDE 00 00       1087*  @x0:    dw 0x0000
042BE0 00 00       1088*  @y0:    dw 0x0000
042BE2 19          1089*  @cmd1:  db 25 ; plot
042BE3 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
042BE4 00 00       1091*  @x1:    dw 0x0000
042BE6 00 00       1092*  @y1:    dw 0x0000
042BE8 00          1093*  @end:   db 0x00 ; padding
042BE9             1094*  
042BE9             1095*  ; #### from vdu_sprites.inc ####
042BE9             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
042BE9             1097*  ; the VDP can support up to 256 sprites. They must be defined
042BE9             1098*  ; contiguously, and so the first sprite is sprite 0.
042BE9             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
042BE9             1100*  ; Once a selection of sprites have been defined, you can activate
042BE9             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
042BE9             1102*  ; of sprites to activate. This will activate the first n sprites,
042BE9             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
042BE9             1104*  
042BE9             1105*  ; A single sprite can have multiple "frames", referring to
042BE9             1106*  ; different bitmaps.
042BE9             1107*  ; (These bitmaps do not need to be the same size.)
042BE9             1108*  ; This allows a sprite to include an animation sequence,
042BE9             1109*  ; which can be stepped through one frame at a time, or picked
042BE9             1110*  ; in any order.
042BE9             1111*  
042BE9             1112*  ; Any format of bitmap can be used as a sprite frame. It should
042BE9             1113*  ; be noted however that "native" format bitmaps are not
042BE9             1114*  ; recommended for use as sprite frames, as they cannot get
042BE9             1115*  ; erased from the screen. (As noted above, the "native" bitmap
042BE9             1116*  ; format is not really intended for general use.) This is part
042BE9             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
042BE9             1118*  ; screen are now stored in RGBA2222 format.
042BE9             1119*  
042BE9             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
042BE9             1121*  ; and then later shown again.
042BE9             1122*  
042BE9             1123*  ; Moving sprites around the screen is done by changing the
042BE9             1124*  ; position of the sprite. This can be done either by setting
042BE9             1125*  ; the absolute position of the sprite, or by moving the sprite
042BE9             1126*  ; by a given number of pixels. (Sprites are positioned using
042BE9             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
042BE9             1128*  ; In the current sprite system, sprites will not update their
042BE9             1129*  ; position on-screen until either another drawing operation is
042BE9             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
042BE9             1131*  
042BE9             1132*  ; Here are the sprite commands:
042BE9             1133*  ;
042BE9             1134*  ; VDU 23, 27, 4,  n: Select sprite n
042BE9             1135*  ; inputs: a is the 8-bit sprite id
042BE9             1136*  ; vdu_sprite_select:
042BE9             1137*  
042BE9             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
042BE9             1139*  ; inputs: none
042BE9             1140*  ; prerequisites: vdu_sprite_select
042BE9             1141*  ; vdu_sprite_clear_frames:
042BE9             1142*  
042BE9             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042BE9             1144*  ; inputs: a is the 8-bit bitmap number
042BE9             1145*  ; prerequisites: vdu_sprite_select
042BE9             1146*  ; vdu_sprite_add_bmp:
042BE9             1147*  
042BE9             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
042BE9             1149*  ; inputs: a is the number of sprites to activate
042BE9             1150*  ; vdu_sprite_activate:
042BE9             1151*  
042BE9             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
042BE9             1153*  ; inputs: none
042BE9             1154*  ; prerequisites: vdu_sprite_select
042BE9             1155*  ; vdu_sprite_next_frame:
042BE9             1156*  
042BE9             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
042BE9             1158*  ; inputs: none
042BE9             1159*  ; prerequisites: vdu_sprite_select
042BE9             1160*  ; vdu_sprite_prev_frame:
042BE9             1161*  
042BE9             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042BE9             1163*  ; inputs: a is frame number to select
042BE9             1164*  ; prerequisites: vdu_sprite_select
042BE9             1165*  ; vdu_sprite_select_frame:
042BE9             1166*  
042BE9             1167*  ; VDU 23, 27, 11: Show current sprite
042BE9             1168*  ; inputs: none
042BE9             1169*  ; prerequisites: vdu_sprite_select
042BE9             1170*  ; vdu_sprite_show:
042BE9             1171*  
042BE9             1172*  ; VDU 23, 27, 12: Hide current sprite
042BE9             1173*  ; inputs: none
042BE9             1174*  ; prerequisites: vdu_sprite_select
042BE9             1175*  ; vdu_sprite_hide:
042BE9             1176*  
042BE9             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042BE9             1178*  ; inputs: bc is x coordinate, de is y coordinate
042BE9             1179*  ; prerequisites: vdu_sprite_select
042BE9             1180*  ; vdu_sprite_move_abs:
042BE9             1181*  ;
042BE9             1182*  ; USING 16.8 FIXED POINT COORDINATES
042BE9             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042BE9             1184*  ;   the fractional portiion of the inputs are truncated
042BE9             1185*  ;   leaving only the 16-bit integer portion
042BE9             1186*  ; prerequisites: vdu_sprite_select
042BE9             1187*  ; vdu_sprite_move_abs168:
042BE9             1188*  
042BE9             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042BE9             1190*  ; inputs: bc is x coordinate, de is y coordinate
042BE9             1191*  ; prerequisites: vdu_sprite_select
042BE9             1192*  ; vdu_sprite_move_rel:
042BE9             1193*  ;
042BE9             1194*  ; USING 16.8 FIXED POINT COORDINATES
042BE9             1195*  ; inputs: ub.c is dx, ud.e is dy
042BE9             1196*  ;   the fractional portiion of the inputs are truncated
042BE9             1197*  ;   leaving only the 16-bit integer portion
042BE9             1198*  ; prerequisites: vdu_sprite_select
042BE9             1199*  ; vdu_sprite_move_rel168:
042BE9             1200*  
042BE9             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
042BE9             1202*  ; inputs: none
042BE9             1203*  ; vdu_sprite_update:
042BE9             1204*  
042BE9             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042BE9             1206*  ; inputs: none
042BE9             1207*  ; vdu_sprite_bmp_reset:
042BE9             1208*  
042BE9             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042BE9             1210*  ; inputs: none
042BE9             1211*  ; vdu_sprite_reset:
042BE9             1212*  
042BE9             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042BE9             1214*  ; inputs: a is the GCOL paint mode
042BE9             1215*  ; prerequisites: vdu_sprite_select
042BE9             1216*  ; vdu_sprite_set_gcol:
042BE9             1217*  
042BE9             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
042BE9             1219*  ; inputs: hl=bufferId
042BE9             1220*  ; prerequisites: vdu_sprite_select
042BE9             1221*  ; vdu_sprite_add_buff:
042BE9             1222*  
042BE9             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
042BE9             1224*  
042BE9             1225*  ; VDU 23, 27, 4, n: Select sprite n
042BE9             1226*  ; inputs: a is the 8-bit sprite id
042BE9             1227*  vdu_sprite_select:
042BE9 32 FB 2B 04 1228*      ld (@sprite),a
042BED 21 F8 2B 04 1229*      ld hl,@cmd
042BF1 01 04 00 00 1230*      ld bc,@end-@cmd
042BF5 5B DF       1231*      rst.lil $18
042BF7 C9          1232*      ret
042BF8 17 1B 04    1233*  @cmd:    db 23,27,4
042BFB 00          1234*  @sprite: db 0x00
042BFC             1235*  @end:
042BFC             1236*  
042BFC             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
042BFC             1238*  ; inputs: none
042BFC             1239*  ; prerequisites: vdu_sprite_select
042BFC             1240*  vdu_sprite_clear_frames:
042BFC 21 07 2C 04 1241*      ld hl,@cmd
042C00 01 03 00 00 1242*      ld bc,@end-@cmd
042C04 5B DF       1243*      rst.lil $18
042C06 C9          1244*      ret
042C07 17 1B 05    1245*  @cmd: db 23,27,5
042C0A             1246*  @end:
042C0A             1247*  
042C0A             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
042C0A             1249*  ; inputs: a is the 8-bit bitmap number
042C0A             1250*  ; prerequisites: vdu_sprite_select
042C0A             1251*  vdu_sprite_add_bmp:
042C0A 32 1C 2C 04 1252*      ld (@bmp),a
042C0E 21 19 2C 04 1253*      ld hl,@cmd
042C12 01 04 00 00 1254*      ld bc,@end-@cmd
042C16 5B DF       1255*      rst.lil $18
042C18 C9          1256*      ret
042C19 17 1B 06    1257*  @cmd: db 23,27,6
042C1C 00          1258*  @bmp: db 0x00
042C1D             1259*  @end:
042C1D             1260*  
042C1D             1261*  ; VDU 23, 27, 7, n: Activate n sprites
042C1D             1262*  ; inputs: a is the number of sprites to activate
042C1D             1263*  vdu_sprite_activate:
042C1D 32 2F 2C 04 1264*      ld (@num),a
042C21 21 2C 2C 04 1265*      ld hl,@cmd
042C25 01 04 00 00 1266*      ld bc,@end-@cmd
042C29 5B DF       1267*      rst.lil $18
042C2B C9          1268*      ret
042C2C 17 1B 07    1269*  @cmd: db 23,27,7
042C2F 00          1270*  @num: db 0x00
042C30             1271*  @end:
042C30             1272*  
042C30             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
042C30             1274*  ; inputs: none
042C30             1275*  ; prerequisites: vdu_sprite_select
042C30             1276*  vdu_sprite_next_frame:
042C30 21 3B 2C 04 1277*      ld hl,@cmd
042C34 01 03 00 00 1278*      ld bc,@end-@cmd
042C38 5B DF       1279*      rst.lil $18
042C3A C9          1280*      ret
042C3B 17 1B 08    1281*  @cmd: db 23,27,8
042C3E             1282*  @end:
042C3E             1283*  
042C3E             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
042C3E             1285*  ; inputs: none
042C3E             1286*  ; prerequisites: vdu_sprite_select
042C3E             1287*  vdu_sprite_prev_frame:
042C3E 21 49 2C 04 1288*      ld hl,@cmd
042C42 01 03 00 00 1289*      ld bc,@end-@cmd
042C46 5B DF       1290*      rst.lil $18
042C48 C9          1291*      ret
042C49 17 1B 09    1292*  @cmd: db 23,27,9
042C4C             1293*  @end:
042C4C             1294*  
042C4C             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
042C4C             1296*  ; inputs: a is frame number to select
042C4C             1297*  ; prerequisites: vdu_sprite_select
042C4C             1298*  vdu_sprite_select_frame:
042C4C 32 5E 2C 04 1299*      ld (@frame),a
042C50 21 5B 2C 04 1300*      ld hl,@cmd
042C54 01 04 00 00 1301*      ld bc,@end-@cmd
042C58 5B DF       1302*      rst.lil $18
042C5A C9          1303*      ret
042C5B 17 1B 0A    1304*  @cmd:    db 23,27,10
042C5E 00          1305*  @frame:  db 0x00
042C5F             1306*  @end:
042C5F             1307*  
042C5F             1308*  ; VDU 23, 27, 11: Show current sprite
042C5F             1309*  ; inputs: none
042C5F             1310*  ; prerequisites: vdu_sprite_select
042C5F             1311*  vdu_sprite_show:
042C5F 21 6A 2C 04 1312*      ld hl,@cmd
042C63 01 03 00 00 1313*      ld bc,@end-@cmd
042C67 5B DF       1314*      rst.lil $18
042C69 C9          1315*      ret
042C6A 17 1B 0B    1316*  @cmd: db 23,27,11
042C6D             1317*  @end:
042C6D             1318*  
042C6D             1319*  ; VDU 23, 27, 12: Hide current sprite
042C6D             1320*  ; inputs: none
042C6D             1321*  ; prerequisites: vdu_sprite_select
042C6D             1322*  vdu_sprite_hide:
042C6D 21 78 2C 04 1323*      ld hl,@cmd
042C71 01 03 00 00 1324*      ld bc,@end-@cmd
042C75 5B DF       1325*      rst.lil $18
042C77 C9          1326*      ret
042C78 17 1B 0C    1327*  @cmd: db 23,27,12
042C7B             1328*  @end:
042C7B             1329*  
042C7B             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042C7B             1331*  ; inputs: bc is x coordinate, de is y coordinate
042C7B             1332*  ; prerequisites: vdu_sprite_select
042C7B             1333*  vdu_sprite_move_abs:
042C7B ED 43 93 2C 1334*      ld (@xpos),bc
       04          
042C80 ED 53 95 2C 1335*      ld (@ypos),de
       04          
042C85 21 90 2C 04 1336*      ld hl,@cmd
042C89 01 07 00 00 1337*      ld bc,@end-@cmd
042C8D 5B DF       1338*      rst.lil $18
042C8F C9          1339*      ret
042C90 17 1B 0D    1340*  @cmd:  db 23,27,13
042C93 00 00       1341*  @xpos: dw 0x0000
042C95 00 00       1342*  @ypos: dw 0x0000
042C97 00          1343*  @end:  db 0x00 ; padding
042C98             1344*  
042C98             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042C98             1346*  ; inputs: bc is x coordinate, de is y coordinate
042C98             1347*  ; prerequisites: vdu_sprite_select
042C98             1348*  vdu_sprite_move_rel:
042C98 ED 43 B0 2C 1349*      ld (@dx),bc
       04          
042C9D ED 53 B2 2C 1350*      ld (@dy),de
       04          
042CA2 21 AD 2C 04 1351*      ld hl,@cmd
042CA6 01 07 00 00 1352*      ld bc,@end-@cmd
042CAA 5B DF       1353*      rst.lil $18
042CAC C9          1354*      ret
042CAD 17 1B 0E    1355*  @cmd: db 23,27,14
042CB0 00 00       1356*  @dx:  dw 0x0000
042CB2 00 00       1357*  @dy:  dw 0x0000
042CB4 00          1358*  @end: db 0x00 ; padding
042CB5             1359*  
042CB5             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
042CB5             1361*  ; USING 16.8 FIXED POINT COORDINATES
042CB5             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042CB5             1363*  ;   the fractional portiion of the inputs are truncated
042CB5             1364*  ;   leaving only the 16-bit integer portion
042CB5             1365*  ; prerequisites: vdu_sprite_select
042CB5             1366*  vdu_sprite_move_abs168:
042CB5             1367*  ; populate in the reverse of normal to keep the
042CB5             1368*  ; inputs from stomping on each other
042CB5 ED 53 D4 2C 1369*      ld (@ypos-1),de
       04          
042CBA ED 43 D2 2C 1370*      ld (@xpos-1),bc
       04          
042CBF 3E 0D       1371*      ld a,13       ; restore the final byte of the command
042CC1 32 D2 2C 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
042CC5 21 D0 2C 04 1373*      ld hl,@cmd
042CC9 01 07 00 00 1374*      ld bc,@end-@cmd
042CCD 5B DF       1375*      rst.lil $18
042CCF C9          1376*      ret
042CD0 17 1B 0D    1377*  @cmd:  db 23,27,13
042CD3 00 00       1378*  @xpos: dw 0x0000
042CD5 00 00       1379*  @ypos: dw 0x0000
042CD7             1380*  @end:  ; no padding required b/c we shifted de right
042CD7             1381*  
042CD7             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
042CD7             1383*  ; USING 16.8 FIXED POINT COORDINATES
042CD7             1384*  ; inputs: ub.c is dx, ud.e is dy
042CD7             1385*  ;   the fractional portiion of the inputs are truncated
042CD7             1386*  ;   leaving only the 16-bit integer portion
042CD7             1387*  ; prerequisites: vdu_sprite_select
042CD7             1388*  vdu_sprite_move_rel168:
042CD7             1389*  ; populate in the reverse of normal to keep the
042CD7             1390*  ; inputs from stomping on each other
042CD7 ED 53 F6 2C 1391*      ld (@dy-1),de
       04          
042CDC ED 43 F4 2C 1392*      ld (@dx-1),bc
       04          
042CE1 3E 0E       1393*      ld a,14       ; restore the final byte of the command
042CE3 32 F4 2C 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
042CE7 21 F2 2C 04 1395*      ld hl,@cmd
042CEB 01 07 00 00 1396*      ld bc,@end-@cmd
042CEF 5B DF       1397*      rst.lil $18
042CF1 C9          1398*      ret
042CF2 17 1B 0E    1399*  @cmd:  db 23,27,14
042CF5 00 00       1400*  @dx: dw 0x0000
042CF7 00 00       1401*  @dy: dw 0x0000
042CF9             1402*  @end:  ; no padding required b/c we shifted de right
042CF9             1403*  
042CF9             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
042CF9             1405*  ; inputs: none
042CF9             1406*  vdu_sprite_update:
042CF9 21 04 2D 04 1407*      ld hl,@cmd
042CFD 01 03 00 00 1408*      ld bc,@end-@cmd
042D01 5B DF       1409*      rst.lil $18
042D03 C9          1410*      ret
042D04 17 1B 0F    1411*  @cmd: db 23,27,15
042D07             1412*  @end:
042D07             1413*  
042D07             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042D07             1415*  ; inputs: none
042D07             1416*  vdu_sprite_bmp_reset:
042D07 21 12 2D 04 1417*      ld hl,@cmd
042D0B 01 03 00 00 1418*      ld bc,@end-@cmd
042D0F 5B DF       1419*      rst.lil $18
042D11 C9          1420*      ret
042D12 17 1B 10    1421*  @cmd: db 23,27,16
042D15             1422*  @end:
042D15             1423*  
042D15             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042D15             1425*  ; inputs: none
042D15             1426*  vdu_sprite_reset:
042D15 21 20 2D 04 1427*      ld hl,@cmd
042D19 01 03 00 00 1428*      ld bc,@end-@cmd
042D1D 5B DF       1429*      rst.lil $18
042D1F C9          1430*      ret
042D20 17 1B 11    1431*  @cmd: db 23,27,17
042D23             1432*  @end:
042D23             1433*  
042D23             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042D23             1435*  ; inputs: a is the GCOL paint mode
042D23             1436*  ; prerequisites: vdu_sprite_select
042D23             1437*  vdu_sprite_set_gcol:
042D23 32 35 2D 04 1438*      ld (@mode),a
042D27 21 32 2D 04 1439*      ld hl,@cmd
042D2B 01 04 00 00 1440*      ld bc,@end-@cmd
042D2F 5B DF       1441*      rst.lil $18
042D31 C9          1442*      ret
042D32 17 1B 12    1443*  @cmd:  db 23,27,18
042D35 00          1444*  @mode: db 0x00
042D36             1445*  @end:
042D36             1446*  
042D36             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
042D36             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
042D36             1449*  ; inputs: hl=bufferId
042D36             1450*  ; prerequisites: vdu_sprite_select
042D36             1451*  vdu_sprite_add_buff:
042D36 22 48 2D 04 1452*      ld (@bufferId),hl
042D3A 21 45 2D 04 1453*      ld hl,@cmd
042D3E 01 05 00 00 1454*      ld bc,@end-@cmd
042D42 5B DF       1455*      rst.lil $18
042D44 C9          1456*      ret
042D45 17 1B 26    1457*  @cmd:      db 23,27,0x26
042D48 00 00       1458*  @bufferId: dw 0x0000
042D4A 00          1459*  @end:      db 0x00 ; padding
042D4B             1460*  
042D4B             1461*  
042D4B             1462*  ; #### from sfx.inc ####
042D4B 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
042D4C             1464*  
042D4C             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
042D4C             1466*  ; ; inputs: hl = bufferId
042D4C             1467*  ; sfx_play:
042D4C             1468*  ; 	ld iy,sfx_last_channel
042D4C             1469*  ; 	ld a,(iy+0)
042D4C             1470*  ; 	ld (@bufferId),hl
042D4C             1471*  ; @find_next_channel:
042D4C             1472*  ; 	inc a ; bump to next channel
042D4C             1473*  ; 	and 31 ; modulo 32 channel
042D4C             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
042D4C             1475*  ; 	ret z ; so we return to caller without doing anything
042D4C             1476*  ; 	push af ; back up channel
042D4C             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
042D4C             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
042D4C             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
042D4C             1480*  ; 	pop af ; restore channel
042D4C             1481*  ; 	jr @find_next_channel ; try the next channel
042D4C             1482*  ; @play_sfx:
042D4C             1483*  ; 	pop af ; restore channel
042D4C             1484*  ; 	ld (iy+0),a ; store channel
042D4C             1485*  ; 	ld hl,(@bufferId)
042D4C             1486*  ; 	ld c,a ; channel
042D4C             1487*  ; 	ld b,127 ; full volume
042D4C             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
042D4C             1489*  ; 	jp vdu_play_sample
042D4C             1490*  ; @bufferId:
042D4C             1491*  ; 	dw 0x0000 ; 16-bit value
042D4C             1492*  
042D4C             1493*  sfx_play_random_hurt:
042D4C CD 49 32 04 1494*  	call rand_8
042D50 E6 03       1495*  	and 3
042D52 FE 00       1496*  	cp 0
042D54 CA 56 38 04 1497*  	jp z,sfx_play_ahh
042D58 FE 01       1498*  	cp 1
042D5A CA 62 38 04 1499*  	jp z,sfx_play_augh
042D5E FE 02       1500*  	cp 2
042D60 CA 6E 38 04 1501*  	jp z,sfx_play_ayee
042D64 C3 3A 39 04 1502*  	jp sfx_play_ugh
042D68             1503*  
042D68             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
042D68             1505*  sfx_load_main:
042D68 21 00 00 00 1506*      ld hl,0
042D6C 22 5E 32 04 1507*      ld (cur_file_idx),hl
042D70             1508*  sfx_load_main_loop:
042D70             1509*  ; back up loop counter
042D70 C5          1510*      push bc
042D71             1511*  ; load the next sound
042D71 CD C5 2D 04 1512*      call load_next_sound
042D75             1513*  ; draw all the things
042D75 CD C7 33 04 1514*      call tmp_draw_all_the_things
042D79             1515*  ; move bj
042D79 CD 4F 33 04 1516*  	call move_bj
042D7D             1517*  ; print welcome message
042D7D DD 21 6B 0A 1518*  	ld ix,font_itc_honda
       04          
042D82 21 C6 40 04 1519*  	ld hl,hello_world
042D86 01 20 00 00 1520*  	ld bc,32
042D8A 11 02 00 00 1521*  	ld de,2
042D8E CD B0 08 04 1522*  	call font_bmp_print
042D92             1523*  ; print current filename
042D92 CD 0E 28 04 1524*  	call vdu_cls
042D96 2A 61 32 04 1525*  	ld hl,(cur_filename)
042D9A CD 1E 2E 04 1526*  	call printString
042D9E CD 33 2E 04 1527*  	call printNewLine
042DA2             1528*  
042DA2             1529*  ; print current load stopwatch
042DA2 21 E8 40 04 1530*  	ld hl,loading_time
042DA6 CD 1E 2E 04 1531*  	call printString
042DAA CD 05 3B 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
042DAE CD 6C 2E 04 1533*  	call printDec
042DB2             1534*  
042DB2             1535*  ; flip screen
042DB2 CD DD 29 04 1536*      call vdu_flip
042DB6             1537*  ; ; delay for a bit so sound can play
042DB6             1538*  ;     ld a,%10000000 ; 1 second delay
042DB6             1539*  ;     call multiPurposeDelay
042DB6             1540*  ; decrement loop counter
042DB6 C1          1541*      pop bc
042DB7 0B          1542*  	dec bc
042DB8             1543*  ; ; DEBUG: DUMP REGISTERS
042DB8             1544*  ; 	push bc
042DB8             1545*  ; 	call dumpRegistersHex
042DB8             1546*  ; 	call vdu_flip
042DB8             1547*  ; 	pop bc
042DB8             1548*  ; ; END DEBUG
042DB8 79          1549*      ld a,c
042DB9 B7          1550*      or a
042DBA C2 70 2D 04 1551*      jp nz,sfx_load_main_loop
042DBE 78          1552*      ld a,b
042DBF B7          1553*      or a
042DC0 C2 70 2D 04 1554*      jp nz,sfx_load_main_loop
042DC4 C9          1555*      ret
042DC5             1556*  
042DC5             1557*  load_next_sound:
042DC5             1558*  ; look up the load routine for the current file index
042DC5 2A 5E 32 04 1559*  	ld hl,(cur_file_idx)
042DC9 29          1560*  	add hl,hl ; multiply current index by 2 ...
042DCA ED 5B 5E 32 1561*  	ld de,(cur_file_idx)
       04          
042DCF 19          1562*  	add hl,de ; ... now by 3
042DD0 ED 5B 6A 32 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
042DD5 19          1564*  	add hl,de
042DD6 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
042DD8 22 DD 2D 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
042DDC             1567*  @jump_addr:
042DDC CD 00 00 00 1568*  	call 0 ; call the sound load routine
042DE0             1569*  ; look up the buffer id for the current file
042DE0 2A 5E 32 04 1570*  	ld hl,(cur_file_idx)
042DE4 29          1571*  	add hl,hl ; multiply current index by 2 ...
042DE5 ED 5B 5E 32 1572*  	ld de,(cur_file_idx)
       04          
042DEA 19          1573*  	add hl,de ; ... now by 3
042DEB ED 5B 67 32 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
042DF0 19          1575*  	add hl,de
042DF1 ED 27       1576*  	ld hl,(hl)
042DF3 22 64 32 04 1577*  	ld (cur_buffer_id),hl
042DF7             1578*  ; bump the current file index
042DF7 2A 5E 32 04 1579*  	ld hl,(cur_file_idx)
042DFB 23          1580*  	inc hl
042DFC 22 5E 32 04 1581*  	ld (cur_file_idx),hl
042E00 C9          1582*  	ret
042E01             1583*  
042E01             1584*  ; load a sound file to a buffer
042E01             1585*  ; inputs: hl = bufferId ; ix = file size ; iy = pointer to filename
042E01             1586*  vdu_load_sfx:
042E01             1587*  ; back up input parameters
042E01 E5          1588*      push hl ; bufferId
042E02             1589*  ; load the sound
042E02 CD 14 43 04 1590*  	call vdu_load_buffer_from_file
042E06             1591*  ; now make the buffer a sound sample
042E06 E1          1592*      pop hl ; bufferId
042E07 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
042E08             1594*      ; push hl ; bufferId
042E08 CD 7D 01 04 1595*  	call vdu_buffer_to_sound
042E0C             1596*  ; ; play the loaded sound
042E0C             1597*  ;     ld c,0 ; channel
042E0C             1598*  ;     ld b,127 ; full volume
042E0C             1599*  ;     ld de,1000 ; 1 second duration
042E0C             1600*  ;     pop hl ; bufferId
042E0C             1601*  ;     call vdu_play_sample
042E0C C9          1602*      ret
042E0D             1603*  
042E0D             1604*  vdu_clear_all_buffers:
042E0D             1605*  ; clear all buffers
042E0D 21 18 2E 04 1606*      ld hl,@beg
042E11 01 06 00 00 1607*      ld bc,@end-@beg
042E15 5B DF       1608*      rst.lil $18
042E17 C9          1609*      ret
042E18 17 00 A0    1610*  @beg: db 23,0,$A0
042E1B FF FF       1611*        dw -1 ; clear all buffers
042E1D 02          1612*        db 2  ; command 2: clear a buffer
042E1E             1613*  @end:
042E1E             0024       include "src/asm/functions.inc"
042E1E             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
042E1E             0002*  ; Print a zero-terminated string
042E1E             0003*  ; HL: Pointer to string
042E1E             0004*  printString:
042E1E C5          0005*  	PUSH	BC
042E1F 01 00 00 00 0006*  	LD		BC,0
042E23 3E 00       0007*  	LD 	 	A,0
042E25 5B DF       0008*  	RST.LIL 18h
042E27 C1          0009*  	POP		BC
042E28 C9          0010*  	RET
042E29             0011*  ; print a VDU sequence
042E29             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
042E29             0013*  sendVDUsequence:
042E29 C5          0014*  	PUSH	BC
042E2A 01 00 00 00 0015*  	LD		BC, 0
042E2E 4E          0016*  	LD		C, (HL)
042E2F 5B DF       0017*  	RST.LIL	18h
042E31 C1          0018*  	POP		BC
042E32 C9          0019*  	RET
042E33             0020*  ; Print Newline sequence to VDP
042E33             0021*  printNewLine:
042E33 3E 0D       0022*  	LD	A, '\r'
042E35 5B D7       0023*  	RST.LIL 10h
042E37 3E 0A       0024*  	LD	A, '\n'
042E39 5B D7       0025*  	RST.LIL 10h
042E3B C9          0026*  	RET
042E3C             0027*  ; Print a 24-bit HEX number
042E3C             0028*  ; HLU: Number to print
042E3C             0029*  printHex24:
042E3C E5          0030*  	PUSH	HL
042E3D 21 02 00 00 0031*  	LD		HL, 2
042E41 39          0032*  	ADD		HL, SP
042E42 7E          0033*  	LD		A, (HL)
042E43 E1          0034*  	POP		HL
042E44 CD 4E 2E 04 0035*  	CALL	printHex8
042E48             0036*  ; Print a 16-bit HEX number
042E48             0037*  ; HL: Number to print
042E48             0038*  printHex16:
042E48 7C          0039*  	LD		A,H
042E49 CD 4E 2E 04 0040*  	CALL	printHex8
042E4D 7D          0041*  	LD		A,L
042E4E             0042*  ; Print an 8-bit HEX number
042E4E             0043*  ; A: Number to print
042E4E             0044*  printHex8:
042E4E 4F          0045*  	LD		C,A
042E4F 1F          0046*  	RRA
042E50 1F          0047*  	RRA
042E51 1F          0048*  	RRA
042E52 1F          0049*  	RRA
042E53 CD 58 2E 04 0050*  	CALL	@F
042E57 79          0051*  	LD		A,C
042E58             0052*  @@:
042E58 E6 0F       0053*  	AND		0Fh
042E5A C6 90       0054*  	ADD		A,90h
042E5C 27          0055*  	DAA
042E5D CE 40       0056*  	ADC		A,40h
042E5F 27          0057*  	DAA
042E60 5B D7       0058*  	RST.LIL	10h
042E62 C9          0059*  	RET
042E63             0060*  
042E63             0061*  ; Print a 0x HEX prefix
042E63             0062*  DisplayHexPrefix:
042E63 3E 30       0063*  	LD	A, '0'
042E65 5B D7       0064*  	RST.LIL 10h
042E67 3E 78       0065*  	LD	A, 'x'
042E69 5B D7       0066*  	RST.LIL 10h
042E6B C9          0067*  	RET
042E6C             0068*  
042E6C             0069*  
042E6C             0070*  ; Prints the right justified decimal value in HL without leading zeroes
042E6C             0071*  ; HL : Value to print
042E6C             0072*  printDec:
042E6C 11 90 2E 04 0073*  	LD	 DE, _printDecBuffer
042E70 CD 99 2E 04 0074*  	CALL Num2String
042E74             0075*  ; BEGIN MY CODE
042E74             0076*  ; replace leading zeroes with spaces
042E74 21 90 2E 04 0077*      LD	 HL, _printDecBuffer
042E78 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
042E7A             0079*  @loop:
042E7A 7E          0080*      LD	 A, (HL)
042E7B FE 30       0081*      CP	 '0'
042E7D C2 8B 2E 04 0082*      JP	 NZ, @done
042E81 3E 20       0083*      LD   A, ' '
042E83 77          0084*      LD	 (HL), A
042E84 23          0085*      INC	 HL
042E85 CD FF 27 04 0086*      CALL vdu_cursor_forward
042E89 10 EF       0087*      DJNZ @loop
042E8B             0088*  @done:
042E8B             0089*  ; END MY CODE
042E8B             0090*  	; LD	 HL, _printDecBuffer
042E8B CD 1E 2E 04 0091*  	CALL printString
042E8F C9          0092*  	RET
042E90 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
042E99             0094*  
042E99             0095*  ; This routine converts the value from HL into it's ASCII representation,
042E99             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
042E99             0097*  ; so it will allways be 8 characters length
042E99             0098*  ; HL : Value to convert to string
042E99             0099*  ; DE : pointer to buffer, at least 8 byte + 0
042E99             0100*  Num2String:
042E99 01 80 69 67 0101*  	LD	 BC,-10000000
042E9D CD D0 2E 04 0102*  	CALL OneDigit
042EA1 01 C0 BD F0 0103*  	LD	 BC,-1000000
042EA5 CD D0 2E 04 0104*  	CALL OneDigit
042EA9 01 60 79 FE 0105*  	LD	 BC,-100000
042EAD CD D0 2E 04 0106*  	CALL OneDigit
042EB1 01 F0 D8 FF 0107*  	LD   BC,-10000
042EB5 CD D0 2E 04 0108*  	CALL OneDigit
042EB9 01 18 FC FF 0109*  	LD   BC,-1000
042EBD CD D0 2E 04 0110*  	CALL OneDigit
042EC1 01 9C FF FF 0111*  	LD   BC,-100
042EC5 CD D0 2E 04 0112*  	CALL OneDigit
042EC9 0E F6       0113*  	LD   C,-10
042ECB CD D0 2E 04 0114*  	CALL OneDigit
042ECF 48          0115*  	LD   C,B
042ED0             0116*  OneDigit:
042ED0 3E 2F       0117*  	LD   A,'0'-1
042ED2             0118*  DivideMe:
042ED2 3C          0119*  	INC  A
042ED3 09          0120*  	ADD  HL,BC
042ED4 38 FC       0121*  	JR   C,DivideMe
042ED6 ED 42       0122*  	SBC  HL,BC
042ED8 12          0123*  	LD   (DE),A
042ED9 13          0124*  	INC  DE
042EDA C9          0125*  	RET
042EDB             0126*  
042EDB             0127*  
042EDB             0128*  ; #### new functions added by Brandon R. Gates ####
042EDB             0129*  
042EDB             0130*  ; print the binary representation of the 8-bit value in a
042EDB             0131*  ; destroys a, hl, bc
042EDB             0132*  printBin8:
042EDB 06 08       0133*      ld b,8      ; loop counter for 8 bits
042EDD 21 F8 2E 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
042EE1             0135*                  ; (which will be the high bit of the value in a)
042EE1             0136*  @loop:
042EE1 07          0137*      rlca ; put the next highest bit into carry
042EE2 38 04       0138*      jr c,@one
042EE4 36 30       0139*      ld (hl),'0'
042EE6 18 02       0140*      jr @next_bit
042EE8             0141*  @one:
042EE8 36 31       0142*      ld (hl),'1'
042EEA             0143*  @next_bit:
042EEA 23          0144*      inc hl
042EEB 10 F4       0145*      djnz @loop
042EED             0146*  ; print it
042EED 21 F8 2E 04 0147*  	ld hl,@cmd
042EF1 01 08 00 00 0148*  	ld bc,@end-@cmd
042EF5 5B DF       0149*  	rst.lil $18
042EF7 C9          0150*  	ret
042EF8             0151*  @cmd: ds 8 ; eight bytes for eight bits
042F00             0152*  @end:
042F00             0153*  
042F00             0154*  ; print the binary representation of the 8-bit value in a
042F00             0155*  ; in reverse order (lsb first)
042F00             0156*  ; destroys a, hl, bc
042F00             0157*  printBin8Rev:
042F00 06 08       0158*      ld b,8      ; loop counter for 8 bits
042F02 21 1D 2F 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
042F06             0160*                  ; (which will be the high bit of the value in a)
042F06             0161*  @loop:
042F06 0F          0162*      rrca ; put the next lowest bit into carry
042F07 38 04       0163*      jr c,@one
042F09 36 30       0164*      ld (hl),'0'
042F0B 18 02       0165*      jr @next_bit
042F0D             0166*  @one:
042F0D 36 31       0167*      ld (hl),'1'
042F0F             0168*  @next_bit:
042F0F 23          0169*      inc hl
042F10 10 F4       0170*      djnz @loop
042F12             0171*  ; print it
042F12 21 1D 2F 04 0172*  	ld hl,@cmd
042F16 01 08 00 00 0173*  	ld bc,@end-@cmd
042F1A 5B DF       0174*  	rst.lil $18
042F1C C9          0175*  	ret
042F1D             0176*  @cmd: ds 8 ; eight bytes for eight bits
042F25             0177*  @end:
042F25             0178*  
042F25             0179*  ; print registers to screen in hexidecimal format
042F25             0180*  ; inputs: none
042F25             0181*  ; outputs: values of every register printed to screen
042F25             0182*  ;    values of each register in global scratch memory
042F25             0183*  ; destroys: nothing
042F25             0184*  stepRegistersHex:
042F25             0185*  ; store everything in scratch
042F25 22 28 31 04 0186*      ld (uhl),hl
042F29 ED 43 2B 31 0187*      ld (ubc),bc
       04          
042F2E ED 53 2E 31 0188*      ld (ude),de
       04          
042F33 DD 22 31 31 0189*      ld (uix),ix
       04          
042F38 FD 22 34 31 0190*      ld (uiy),iy
       04          
042F3D F5          0191*      push af ; fml
042F3E E1          0192*      pop hl  ; thanks, zilog
042F3F 22 25 31 04 0193*      ld (uaf),hl
042F43 F5          0194*      push af ; dammit
042F44             0195*  
042F44             0196*  ; home the cursor
042F44 CD 46 29 04 0197*      call vdu_home_cursor
042F48             0198*  
042F48             0199*  ; print each register
042F48 21 B1 30 04 0200*      ld hl,str_afu
042F4C CD 1E 2E 04 0201*      call printString
042F50 2A 25 31 04 0202*      ld hl,(uaf)
042F54 CD 3C 2E 04 0203*      call printHex24
042F58 CD 33 2E 04 0204*      call printNewLine
042F5C             0205*  
042F5C 21 B5 30 04 0206*      ld hl,str_hlu
042F60 CD 1E 2E 04 0207*      call printString
042F64 2A 28 31 04 0208*      ld hl,(uhl)
042F68 CD 3C 2E 04 0209*      call printHex24
042F6C CD 33 2E 04 0210*      call printNewLine
042F70             0211*  
042F70 21 B9 30 04 0212*      ld hl,str_bcu
042F74 CD 1E 2E 04 0213*      call printString
042F78 2A 2B 31 04 0214*      ld hl,(ubc)
042F7C CD 3C 2E 04 0215*      call printHex24
042F80 CD 33 2E 04 0216*      call printNewLine
042F84             0217*  
042F84 21 BD 30 04 0218*      ld hl,str_deu
042F88 CD 1E 2E 04 0219*      call printString
042F8C 2A 2E 31 04 0220*      ld hl,(ude)
042F90 CD 3C 2E 04 0221*      call printHex24
042F94 CD 33 2E 04 0222*      call printNewLine
042F98             0223*  
042F98 21 C1 30 04 0224*      ld hl,str_ixu
042F9C CD 1E 2E 04 0225*      call printString
042FA0 2A 31 31 04 0226*      ld hl,(uix)
042FA4 CD 3C 2E 04 0227*      call printHex24
042FA8 CD 33 2E 04 0228*      call printNewLine
042FAC             0229*  
042FAC 21 C5 30 04 0230*      ld hl,str_iyu
042FB0 CD 1E 2E 04 0231*      call printString
042FB4 2A 34 31 04 0232*      ld hl,(uiy)
042FB8 CD 3C 2E 04 0233*      call printHex24
042FBC CD 33 2E 04 0234*      call printNewLine
042FC0             0235*  
042FC0             0236*      ; call vsync
042FC0             0237*  
042FC0 CD 33 2E 04 0238*      call printNewLine
042FC4             0239*  
042FC4             0240*  ; check for right shift key and quit if pressed
042FC4             0241*  	MOSCALL mos_getkbmap
042FC4 3E 1E       0001*M 			LD	A, function
042FC6 5B CF       0002*M 			RST.LIL	08h
042FC8             0242*  @stayhere:
042FC8             0243*  ; 7 RightShift
042FC8 DD CB 00 76 0244*      bit 6,(ix+0)
042FCC 20 02       0245*      jr nz,@RightShift
042FCE 18 F8       0246*      jr @stayhere
042FD0             0247*  @RightShift:
042FD0 DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
042FD4 3E 80       0249*      ld a,%10000000
042FD6 CD 18 3B 04 0250*      call multiPurposeDelay
042FDA             0251*  
042FDA             0252*  ; restore everything
042FDA 2A 28 31 04 0253*      ld hl, (uhl)
042FDE ED 4B 2B 31 0254*      ld bc, (ubc)
       04          
042FE3 ED 5B 2E 31 0255*      ld de, (ude)
       04          
042FE8 DD 2A 31 31 0256*      ld ix, (uix)
       04          
042FED FD 2A 34 31 0257*      ld iy, (uiy)
       04          
042FF2 F1          0258*      pop af
042FF3             0259*  ; all done
042FF3 C9          0260*      ret
042FF4             0261*  
042FF4             0262*  ; print registers to screen in hexidecimal format
042FF4             0263*  ; inputs: none
042FF4             0264*  ; outputs: values of every register printed to screen
042FF4             0265*  ;    values of each register in global scratch memory
042FF4             0266*  ; destroys: nothing
042FF4             0267*  dumpRegistersHex:
042FF4             0268*  ; store everything in scratch
042FF4 22 28 31 04 0269*      ld (uhl),hl
042FF8 ED 43 2B 31 0270*      ld (ubc),bc
       04          
042FFD ED 53 2E 31 0271*      ld (ude),de
       04          
043002 DD 22 31 31 0272*      ld (uix),ix
       04          
043007 FD 22 34 31 0273*      ld (uiy),iy
       04          
04300C F5          0274*      push af ; fml
04300D E1          0275*      pop hl  ; thanks, zilog
04300E 22 25 31 04 0276*      ld (uaf),hl
043012 F5          0277*      push af ; dammit
043013             0278*  
043013             0279*  ; home the cursor
043013 CD 46 29 04 0280*      call vdu_home_cursor
043017             0281*  
043017             0282*  ; print each register
043017 21 B1 30 04 0283*      ld hl,str_afu
04301B CD 1E 2E 04 0284*      call printString
04301F 2A 25 31 04 0285*      ld hl,(uaf)
043023 CD 3C 2E 04 0286*      call printHex24
043027 CD 33 2E 04 0287*      call printNewLine
04302B             0288*  
04302B 21 B5 30 04 0289*      ld hl,str_hlu
04302F CD 1E 2E 04 0290*      call printString
043033 2A 28 31 04 0291*      ld hl,(uhl)
043037 CD 3C 2E 04 0292*      call printHex24
04303B CD 33 2E 04 0293*      call printNewLine
04303F             0294*  
04303F 21 B9 30 04 0295*      ld hl,str_bcu
043043 CD 1E 2E 04 0296*      call printString
043047 2A 2B 31 04 0297*      ld hl,(ubc)
04304B CD 3C 2E 04 0298*      call printHex24
04304F CD 33 2E 04 0299*      call printNewLine
043053             0300*  
043053 21 BD 30 04 0301*      ld hl,str_deu
043057 CD 1E 2E 04 0302*      call printString
04305B 2A 2E 31 04 0303*      ld hl,(ude)
04305F CD 3C 2E 04 0304*      call printHex24
043063 CD 33 2E 04 0305*      call printNewLine
043067             0306*  
043067 21 C1 30 04 0307*      ld hl,str_ixu
04306B CD 1E 2E 04 0308*      call printString
04306F 2A 31 31 04 0309*      ld hl,(uix)
043073 CD 3C 2E 04 0310*      call printHex24
043077 CD 33 2E 04 0311*      call printNewLine
04307B             0312*  
04307B 21 C5 30 04 0313*      ld hl,str_iyu
04307F CD 1E 2E 04 0314*      call printString
043083 2A 34 31 04 0315*      ld hl,(uiy)
043087 CD 3C 2E 04 0316*      call printHex24
04308B CD 33 2E 04 0317*      call printNewLine
04308F             0318*  
04308F CD 68 2A 04 0319*      call vdu_vblank
043093             0320*  
043093 CD 33 2E 04 0321*      call printNewLine
043097             0322*  ; restore everything
043097 2A 28 31 04 0323*      ld hl, (uhl)
04309B ED 4B 2B 31 0324*      ld bc, (ubc)
       04          
0430A0 ED 5B 2E 31 0325*      ld de, (ude)
       04          
0430A5 DD 2A 31 31 0326*      ld ix, (uix)
       04          
0430AA FD 2A 34 31 0327*      ld iy, (uiy)
       04          
0430AF F1          0328*      pop af
0430B0             0329*  ; all done
0430B0 C9          0330*      ret
0430B1             0331*  
0430B1 61 66 3D 00 0332*  str_afu: db "af=",0
0430B5 68 6C 3D 00 0333*  str_hlu: db "hl=",0
0430B9 62 63 3D 00 0334*  str_bcu: db "bc=",0
0430BD 64 65 3D 00 0335*  str_deu: db "de=",0
0430C1 69 78 3D 00 0336*  str_ixu: db "ix=",0
0430C5 69 79 3D 00 0337*  str_iyu: db "iy=",0
0430C9             0338*  
0430C9             0339*  ; print udeuhl to screen in hexidecimal format
0430C9             0340*  ; inputs: none
0430C9             0341*  ; outputs: concatenated hexidecimal udeuhl
0430C9             0342*  ; destroys: nothing
0430C9             0343*  dumpUDEUHLHex:
0430C9             0344*  ; store everything in scratch
0430C9 22 28 31 04 0345*      ld (uhl),hl
0430CD ED 43 2B 31 0346*      ld (ubc),bc
       04          
0430D2 ED 53 2E 31 0347*      ld (ude),de
       04          
0430D7 DD 22 31 31 0348*      ld (uix),ix
       04          
0430DC FD 22 34 31 0349*      ld (uiy),iy
       04          
0430E1 F5          0350*      push af
0430E2             0351*  
0430E2             0352*  ; print each register
0430E2             0353*  
0430E2 21 1C 31 04 0354*      ld hl,str_udeuhl
0430E6 CD 1E 2E 04 0355*      call printString
0430EA 2A 2E 31 04 0356*      ld hl,(ude)
0430EE CD 3C 2E 04 0357*      call printHex24
0430F2 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
0430F4 5B D7       0359*  	rst.lil 10h
0430F6 2A 28 31 04 0360*      ld hl,(uhl)
0430FA CD 3C 2E 04 0361*      call printHex24
0430FE CD 33 2E 04 0362*      call printNewLine
043102             0363*  
043102             0364*  ; restore everything
043102 2A 28 31 04 0365*      ld hl, (uhl)
043106 ED 4B 2B 31 0366*      ld bc, (ubc)
       04          
04310B ED 5B 2E 31 0367*      ld de, (ude)
       04          
043110 DD 2A 31 31 0368*      ld ix, (uix)
       04          
043115 FD 2A 34 31 0369*      ld iy, (uiy)
       04          
04311A F1          0370*      pop af
04311B             0371*  ; all done
04311B C9          0372*      ret
04311C             0373*  
04311C 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
043125             0375*  
043125             0376*  ; global scratch memory for registers
043125 00 00 00    0377*  uaf: dl 0
043128 00 00 00    0378*  uhl: dl 0
04312B 00 00 00    0379*  ubc: dl 0
04312E 00 00 00    0380*  ude: dl 0
043131 00 00 00    0381*  uix: dl 0
043134 00 00 00    0382*  uiy: dl 0
043137 00 00 00    0383*  usp: dl 0
04313A 00 00 00    0384*  upc: dl 0
04313D             0385*  
04313D             0386*  ; inputs: whatever is in the flags register
04313D             0387*  ; outputs: binary representation of flags
04313D             0388*  ;          with a header so we know which is what
04313D             0389*  ; destroys: nothing
04313D             0390*  ; preserves: everything
04313D             0391*  dumpFlags:
04313D             0392*  ; first we curse zilog for not giving direct access to flags
04313D F5          0393*      push af ; this is so we can send it back unharmed
04313E F5          0394*      push af ; this is so we can pop it to hl
04313F             0395*  ; store everything in scratch
04313F 22 28 31 04 0396*      ld (uhl),hl
043143 ED 43 2B 31 0397*      ld (ubc),bc
       04          
043148 ED 53 2E 31 0398*      ld (ude),de
       04          
04314D DD 22 31 31 0399*      ld (uix),ix
       04          
043152 FD 22 34 31 0400*      ld (uiy),iy
       04          
043157             0401*  ; next we print the header
043157 21 83 31 04 0402*      ld hl,@header
04315B CD 1E 2E 04 0403*      call printString
04315F E1          0404*      pop hl ; flags are now in l
043160 7D          0405*      ld a,l ; flags are now in a
043161 CD DB 2E 04 0406*      call printBin8
043165 CD 33 2E 04 0407*  	call printNewLine
043169             0408*  ; restore everything
043169 2A 28 31 04 0409*      ld hl, (uhl)
04316D ED 4B 2B 31 0410*      ld bc, (ubc)
       04          
043172 ED 5B 2E 31 0411*      ld de, (ude)
       04          
043177 DD 2A 31 31 0412*      ld ix, (uix)
       04          
04317C FD 2A 34 31 0413*      ld iy, (uiy)
       04          
043181 F1          0414*      pop af ; send her home the way she came
043182 C9          0415*      ret
043183             0416*  ; Bit 7 (S): Sign flag
043183             0417*  ; Bit 6 (Z): Zero flag
043183             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
043183             0419*  ; Bit 4 (H): Half Carry flag
043183             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
043183             0421*  ; Bit 2 (PV): Parity/Overflow flag
043183             0422*  ; Bit 1 (N): Subtract flag
043183             0423*  ; Bit 0 (C): Carry flag
043183 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04318E             0425*  
04318E             0426*  ; set all the bits in the flag register
04318E             0427*  ; more of an academic exercise than anything useful
04318E             0428*  ; inputs; none
04318E             0429*  ; outputs; a=0,f=255
04318E             0430*  ; destroys: flags, hl
04318E             0431*  ; preserves: a, because why not
04318E             0432*  setAllFlags:
04318E 21 FF 00 00 0433*      ld hl,255
043192 67          0434*      ld h,a ; four cycles to preserve a is cheap
043193 E5          0435*      push hl
043194 F1          0436*      pop af
043195 C9          0437*      ret
043196             0438*  
043196             0439*  ; reset all the bits in the flag register
043196             0440*  ; unlike its inverse counterpart, this may actually be useful
043196             0441*  ; inputs; none
043196             0442*  ; outputs; a=0,f=0
043196             0443*  ; destroys: flags, hl
043196             0444*  ; preserves: a, because why not
043196             0445*  resetAllFlags:
043196 21 00 00 00 0446*      ld hl,0
04319A 67          0447*      ld h,a ; four cycles to preserve a is cheap
04319B E5          0448*      push hl
04319C F1          0449*      pop af
04319D C9          0450*      ret
04319E             0451*  
04319E             0452*  ; wait until user presses a key
04319E             0453*  ; inputs: none
04319E             0454*  ; outputs: none
04319E             0455*  ; destroys: af,ix
04319E             0456*  waitKeypress:
04319E             0457*      MOSCALL mos_sysvars
04319E 3E 08       0001*M 			LD	A, function
0431A0 5B CF       0002*M 			RST.LIL	08h
0431A2 AF          0458*      xor a ; zero out any prior keypresses
0431A3 DD 77 05    0459*      ld (ix+sysvar_keyascii),a
0431A6             0460*  @loop:
0431A6 DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
0431A9 A7          0462*      and a
0431AA C0          0463*      ret nz
0431AB 18 F9       0464*      jr @loop
0431AD             0465*  
0431AD             0466*  
0431AD             0467*  ; print bytes from an address to the screen in hexidecimal format
0431AD             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0431AD             0469*  ; outputs: values of each byte printed to screen separated by spaces
0431AD             0470*  ; destroys: nothing
0431AD             0471*  dumpMemoryHex:
0431AD             0472*  ; save all registers to the stack
0431AD F5          0473*      push af
0431AE C5          0474*      push bc
0431AF D5          0475*      push de
0431B0 E5          0476*      push hl
0431B1 DD E5       0477*      push ix
0431B3 FD E5       0478*      push iy
0431B5             0479*  
0431B5             0480*  ; set b to be our loop counter
0431B5 47          0481*      ld b,a
0431B6             0482*  @loop:
0431B6             0483*  ; print the byte
0431B6 7E          0484*      ld a,(hl)
0431B7 CD 4E 2E 04 0485*      call printHex8
0431BB             0486*  ; print a space
0431BB 3E 20       0487*      ld a,' '
0431BD 5B D7       0488*      rst.lil 10h
0431BF 23          0489*      inc hl
0431C0 10 F4       0490*      djnz @loop
0431C2 CD 33 2E 04 0491*      call printNewLine
0431C6             0492*  
0431C6             0493*  ; restore everything
0431C6 FD E1       0494*      pop iy
0431C8 DD E1       0495*      pop ix
0431CA E1          0496*      pop hl
0431CB D1          0497*      pop de
0431CC C1          0498*      pop bc
0431CD F1          0499*      pop af
0431CE             0500*  ; all done
0431CE C9          0501*      ret
0431CF             0502*  
0431CF             0503*  
0431CF             0504*  ; print bytes from an address to the screen in binary format
0431CF             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0431CF             0506*  ; outputs: values of each byte printed to screen separated by spaces
0431CF             0507*  ; destroys: nothing
0431CF             0508*  dumpMemoryBin:
0431CF             0509*  ; save all registers to the stack
0431CF F5          0510*      push af
0431D0 C5          0511*      push bc
0431D1 D5          0512*      push de
0431D2 E5          0513*      push hl
0431D3 DD E5       0514*      push ix
0431D5 FD E5       0515*      push iy
0431D7             0516*  
0431D7             0517*  ; set b to be our loop counter
0431D7 47          0518*      ld b,a
0431D8             0519*  @loop:
0431D8             0520*  ; print the byte
0431D8 7E          0521*      ld a,(hl)
0431D9 E5          0522*      push hl
0431DA C5          0523*      push bc
0431DB CD DB 2E 04 0524*      call printBin8
0431DF C1          0525*      pop bc
0431E0             0526*  ; print a space
0431E0 3E 20       0527*      ld a,' '
0431E2 5B D7       0528*      rst.lil 10h
0431E4 E1          0529*      pop hl
0431E5 23          0530*      inc hl
0431E6 10 F0       0531*      djnz @loop
0431E8 CD 33 2E 04 0532*      call printNewLine
0431EC             0533*  
0431EC             0534*  ; restore everything
0431EC FD E1       0535*      pop iy
0431EE DD E1       0536*      pop ix
0431F0 E1          0537*      pop hl
0431F1 D1          0538*      pop de
0431F2 C1          0539*      pop bc
0431F3 F1          0540*      pop af
0431F4             0541*  ; all done
0431F4 C9          0542*      ret
0431F5             0543*  
0431F5             0544*  ; print bytes from an address to the screen in binary format
0431F5             0545*  ; with the bits of each byte in reverse order (lsb first)
0431F5             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0431F5             0547*  ; outputs: values of each byte printed to screen separated by spaces
0431F5             0548*  ; destroys: nothing
0431F5             0549*  dumpMemoryBinRev:
0431F5             0550*  ; save all registers to the stack
0431F5 F5          0551*      push af
0431F6 C5          0552*      push bc
0431F7 D5          0553*      push de
0431F8 E5          0554*      push hl
0431F9 DD E5       0555*      push ix
0431FB FD E5       0556*      push iy
0431FD             0557*  
0431FD             0558*  ; set b to be our loop counter
0431FD 47          0559*      ld b,a
0431FE             0560*  @loop:
0431FE             0561*  ; print the byte
0431FE 7E          0562*      ld a,(hl)
0431FF E5          0563*      push hl
043200 C5          0564*      push bc
043201 CD 00 2F 04 0565*      call printBin8Rev
043205 C1          0566*      pop bc
043206             0567*  ; print a space
043206 3E 20       0568*      ld a,' '
043208 5B D7       0569*      rst.lil 10h
04320A E1          0570*      pop hl
04320B 23          0571*      inc hl
04320C 10 F0       0572*      djnz @loop
04320E CD 33 2E 04 0573*      call printNewLine
043212             0574*  
043212             0575*  ; restore everything
043212 FD E1       0576*      pop iy
043214 DD E1       0577*      pop ix
043216 E1          0578*      pop hl
043217 D1          0579*      pop de
043218 C1          0580*      pop bc
043219 F1          0581*      pop af
04321A             0582*  ; all done
04321A C9          0583*      ret
04321B             0025   	; include "src/asm/player.inc"
04321B             0026   	include "src/asm/maths.inc"
04321B 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04321F 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
043223             0003*  
043223             0004*  ; set bcd values in a scratch memory address from registers bcde
043223             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
043223             0006*  ; destroys ; hl
043223             0007*  set_bcd:
043223 73          0008*      ld (hl),e
043224 23          0009*      inc hl
043225 72          0010*      ld (hl),d
043226 23          0011*      inc hl
043227 71          0012*      ld (hl),c
043228 23          0013*      inc hl
043229 70          0014*      ld (hl),b
04322A C9          0015*      ret
04322B             0016*  
04322B             0017*  ; load bcd values from a scratch memory address to bcde
04322B             0018*  ; input: hl; scratch address
04322B             0019*  ; output: bcde; 8-place bcd number
04322B             0020*  ; destroys: hl
04322B             0021*  get_bcd:
04322B 5E          0022*      ld e,(hl)
04322C 23          0023*      inc hl
04322D 56          0024*      ld d,(hl)
04322E 23          0025*      inc hl
04322F 4E          0026*      ld c,(hl)
043230 23          0027*      inc hl
043231 46          0028*      ld b,(hl)
043232 C9          0029*      ret
043233             0030*  
043233             0031*  ; BCD addition
043233             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
043233             0033*  ;       a is the number of bytes holding each number (number of places/2)
043233             0034*  ; outputs: (hl) + (de) --> (hl)
043233             0035*  ; destroys: a,b,de,hl
043233             0036*  add_bcd:
043233 47          0037*      ld b,a ; loop counter
043234 AF          0038*      xor a ; reset a, clear carry flag
043235             0039*  adcec:
043235 1A          0040*      ld a,(de) ; addend to acc
043236 8E          0041*      adc a,(hl) ; add (hl) to acc
043237 27          0042*      daa ; adjust result to bcd
043238 77          0043*      ld (hl),a ; store result
043239 23          0044*      inc hl ; advance memory pointers
04323A 13          0045*      inc de
04323B 10 F8       0046*      djnz adcec ; loop until b == 0
04323D C9          0047*      ret
04323E             0048*  
04323E             0049*  ; BCD subtraction
04323E             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04323E             0051*  ;       a is the number of bytes holding each number (number of places/2)
04323E             0052*  ; outputs: (hl) - (de) --> (hl)
04323E             0053*  ; destroys: a,b,de,hl
04323E             0054*  sub_bcd:
04323E 47          0055*      ld b,a ; loop counter
04323F AF          0056*      xor a ; reset a,clear carry flag
043240             0057*  subdec:
043240 1A          0058*      ld a,(de) ; subtrahend to acc
043241 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
043242 27          0060*      daa ; adjust result to bcd
043243 77          0061*      ld (hl),a ; store result
043244 23          0062*      inc hl ; advance memory pointers
043245 13          0063*      inc de
043246 10 F8       0064*      djnz subdec ; loop until b == 0
043248 C9          0065*      ret
043249             0066*  
043249             0067*  ; http://www.z80.info/pseudo-random.txt
043249             0068*  rand_8:
043249 C5          0069*      push bc
04324A 3A 5D 32 04 0070*      ld a,(r_seed)
04324E 4F          0071*      ld c,a
04324F             0072*  
04324F 0F          0073*      rrca ; multiply by 32
043250 0F          0074*      rrca
043251 0F          0075*      rrca
043252 EE 1F       0076*      xor 0x1f
043254             0077*  
043254 81          0078*      add a,c
043255 DE FF       0079*      sbc a,255 ; carry
043257             0080*  
043257 32 5D 32 04 0081*      ld (r_seed),a
04325B C1          0082*      pop bc
04325C C9          0083*      ret
04325D 50          0084*  r_seed: defb $50
04325E             0027   	include "src/asm/img_load.inc"
04325E 00 00 00    0001*  cur_file_idx: dl 0
043261 00 00 00    0002*  cur_filename: dl 0
043264 00 00 00    0003*  cur_buffer_id: dl 0
043267 00 00 00    0004*  cur_buffer_id_lut: dl 0
04326A 00 00 00    0005*  cur_load_jump_table: dl 0
04326D             0006*  
04326D             0007*  img_load_init:
04326D             0008*  ; initialize bj's position parameters
04326D 21 00 00 00 0009*  	ld hl,0
043271 22 BB 33 04 0010*  	ld (bj_yvel),hl
043275             0011*  
043275 21 2D 00 00 0012*      ld hl,45
043279 22 BE 33 04 0013*  	ld (bj_y_cur),hl
04327D 22 C1 33 04 0014*  	ld (bj_y_min),hl
043281 22 C4 33 04 0015*      ld (bj_y_max),hl
043285             0016*  
043285 21 01 00 00 0017*  	ld hl,1
043289 22 AF 33 04 0018*  	ld (bj_xvel),hl
04328D             0019*  
04328D 21 0A 00 00 0020*  	ld hl,10
043291 22 B2 33 04 0021*  	ld (bj_x_cur),hl
043295 22 B5 33 04 0022*  	ld (bj_x_min),hl
043299             0023*  
043299 21 C8 00 00 0024*  	ld hl,320-120
04329D 22 B8 33 04 0025*  	ld (bj_x_max),hl
0432A1             0026*  
0432A1 C9          0027*      ret
0432A2             0028*  
0432A2             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
0432A2             0030*  img_load_main:
0432A2 21 00 00 00 0031*      ld hl,0
0432A6 22 5E 32 04 0032*      ld (cur_file_idx),hl
0432AA             0033*  img_load_main_loop:
0432AA             0034*  ; back up loop counter
0432AA C5          0035*      push bc
0432AB             0036*  ; load the next panel
0432AB CD 13 33 04 0037*      call load_next_panel
0432AF             0038*  ; draw all the things
0432AF CD C7 33 04 0039*      call tmp_draw_all_the_things
0432B3             0040*  ; draw the most recently loaded panel
0432B3 2A 64 32 04 0041*  	ld hl,(cur_buffer_id)
0432B7 CD 77 29 04 0042*  	call vdu_buff_select
0432BB 01 00 00 00 0043*  	ld bc,0
0432BF 11 00 00 00 0044*  	ld de,0
0432C3 CD 48 2B 04 0045*  	call vdu_plot_bmp
0432C7             0046*  ; move bj
0432C7 CD 4F 33 04 0047*  	call move_bj
0432CB             0048*  ; print welcome message
0432CB DD 21 6B 0A 0049*  	ld ix,font_itc_honda
       04          
0432D0 21 C6 40 04 0050*  	ld hl,hello_world
0432D4 01 20 00 00 0051*  	ld bc,32
0432D8 11 02 00 00 0052*  	ld de,2
0432DC CD B0 08 04 0053*  	call font_bmp_print
0432E0             0054*  ; print current filename
0432E0 CD 0E 28 04 0055*  	call vdu_cls
0432E4 2A 61 32 04 0056*  	ld hl,(cur_filename)
0432E8 CD 1E 2E 04 0057*  	call printString
0432EC CD 33 2E 04 0058*  	call printNewLine
0432F0             0059*  
0432F0             0060*  ; print current load stopwatch
0432F0 21 E8 40 04 0061*  	ld hl,loading_time
0432F4 CD 1E 2E 04 0062*  	call printString
0432F8 CD 05 3B 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
0432FC CD 6C 2E 04 0064*  	call printDec
043300             0065*  
043300             0066*  ; flip screen
043300 CD DD 29 04 0067*      call vdu_flip
043304             0068*  ; decrement loop counter
043304 C1          0069*      pop bc
043305 0B          0070*  	dec bc
043306             0071*  ; ; DEBUG: DUMP REGISTERS
043306             0072*  ; 	push bc
043306             0073*  ; 	call dumpRegistersHex
043306             0074*  ; 	call vdu_flip
043306             0075*  ; 	pop bc
043306             0076*  ; ; END DEBUG
043306 79          0077*      ld a,c
043307 B7          0078*      or a
043308 C2 AA 32 04 0079*      jp nz,img_load_main_loop
04330C 78          0080*      ld a,b
04330D B7          0081*      or a
04330E C2 AA 32 04 0082*      jp nz,img_load_main_loop
043312 C9          0083*      ret
043313             0084*  
043313             0085*  load_next_panel:
043313             0086*  ; look up the load routine for the current file index
043313 2A 5E 32 04 0087*  	ld hl,(cur_file_idx)
043317 29          0088*  	add hl,hl ; multiply current index by 2 ...
043318 ED 5B 5E 32 0089*  	ld de,(cur_file_idx)
       04          
04331D 19          0090*  	add hl,de ; ... now by 3
04331E ED 5B 6A 32 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
043323 19          0092*  	add hl,de
043324 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
043326 22 2B 33 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04332A             0095*  @jump_addr:
04332A CD 00 00 00 0096*  	call 0 ; call the panel load routine
04332E             0097*  ; look up the buffer id for the current file
04332E 2A 5E 32 04 0098*  	ld hl,(cur_file_idx)
043332 29          0099*  	add hl,hl ; multiply current index by 2 ...
043333 ED 5B 5E 32 0100*  	ld de,(cur_file_idx)
       04          
043338 19          0101*  	add hl,de ; ... now by 3
043339 ED 5B 67 32 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04333E 19          0103*  	add hl,de
04333F ED 27       0104*  	ld hl,(hl)
043341 22 64 32 04 0105*  	ld (cur_buffer_id),hl
043345             0106*  ; bump the current file index
043345 2A 5E 32 04 0107*  	ld hl,(cur_file_idx)
043349 23          0108*  	inc hl
04334A 22 5E 32 04 0109*  	ld (cur_file_idx),hl
04334E C9          0110*  	ret
04334F             0111*  
04334F             0112*  move_bj:
04334F             0113*  ; activate bj bitmap
04334F 21 04 03 00 0114*  	ld hl, BUF_UI_BJ_120_120
043353 CD 77 29 04 0115*  	call vdu_buff_select
043357             0116*  ; update position based on velocity parameters
043357 2A B2 33 04 0117*  	ld hl, (bj_x_cur)
04335B ED 5B AF 33 0118*  	ld de, (bj_xvel)
       04          
043360 19          0119*  	add hl, de
043361 22 B2 33 04 0120*  	ld (bj_x_cur), hl
043365 EB          0121*  	ex de,hl ; store x_cur in de
043366             0122*  ; check if we're < x_min
043366 2A B5 33 04 0123*  	ld hl,(bj_x_min)
04336A AF          0124*  	xor a ; clear carry
04336B ED 52       0125*  	sbc hl,de ; x_min - x_cur
04336D F2 8B 33 04 0126*  	jp p, move_bj_x_min
043371             0127*  ; check if we're > x_max
043371 2A B8 33 04 0128*  	ld hl,(bj_x_max)
043375 AF          0129*  	xor a ; clear carry
043376 ED 52       0130*  	sbc hl,de ; x_max - x_cur
043378 FA 9D 33 04 0131*  	jp m, move_bj_x_max
04337C             0132*  ; if not at either boundary, fall through to draw bj's
04337C             0133*  draw_bj:
04337C ED 4B B2 33 0134*  	ld bc,(bj_x_cur)
       04          
043381 ED 5B BE 33 0135*  	ld de,(bj_y_cur)
       04          
043386 CD 48 2B 04 0136*  	call vdu_plot_bmp
04338A C9          0137*  	ret
04338B             0138*  move_bj_x_min:
04338B 21 01 00 00 0139*  	ld hl,1
04338F 22 AF 33 04 0140*  	ld (bj_xvel),hl
043393 2A B5 33 04 0141*  	ld hl,(bj_x_min)
043397 22 B2 33 04 0142*  	ld (bj_x_cur),hl
04339B 18 DF       0143*  	jr draw_bj
04339D             0144*  move_bj_x_max:
04339D 21 FF FF FF 0145*  	ld hl,-1
0433A1 22 AF 33 04 0146*  	ld (bj_xvel),hl
0433A5 2A B8 33 04 0147*  	ld hl,(bj_x_max)
0433A9 22 B2 33 04 0148*  	ld (bj_x_cur),hl
0433AD 18 CD       0149*  	jr draw_bj
0433AF 00 00 00    0150*  bj_xvel: dl 0
0433B2 00 00 00    0151*  bj_x_cur: dl 0
0433B5 00 00 00    0152*  bj_x_min: dl 0
0433B8 00 00 00    0153*  bj_x_max: dl 0
0433BB             0154*  
0433BB 00 00 00    0155*  bj_yvel: dl 0
0433BE 00 00 00    0156*  bj_y_cur: dl 0
0433C1 00 00 00    0157*  bj_y_min: dl 0
0433C4 00 00 00    0158*  bj_y_max: dl 0
0433C7             0159*  
0433C7             0160*  tmp_draw_all_the_things:
0433C7 21 0A 03 00 0161*      ld hl,BUF_UI_SPLASH
0433CB CD 77 29 04 0162*      call vdu_buff_select
0433CF 01 00 00 00 0163*      ld bc,0
0433D3 11 00 00 00 0164*      ld de,0
0433D7 CD 48 2B 04 0165*      call vdu_plot_bmp
0433DB C9          0166*  	ret
0433DC             0167*  
0433DC             0168*  ; load an rgba2222 image file to a buffer
0433DC             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0433DC             0170*  vdu_load_img_2:
0433DC             0171*  ; back up image dimension parameters and buffer id
0433DC E5          0172*  	push hl
0433DD C5          0173*  	push bc
0433DE D5          0174*  	push de
0433DF             0175*  ; load the image
0433DF CD 14 43 04 0176*  	call vdu_load_buffer_from_file
0433E3             0177*  ; now make it a bitmap
0433E3 D1          0178*  	pop de
0433E4 C1          0179*  	pop bc
0433E5 E1          0180*  	pop hl
0433E6 3E 01       0181*  	ld a,1 ; the magic number for rgba2222
0433E8 C3 8C 29 04 0182*  	jp vdu_bmp_create ; will return to caller from there
0433EC             0183*  
0433EC             0184*  ; load an rgba8888 image file to a buffer
0433EC             0185*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
0433EC             0186*  vdu_load_img_8:
0433EC             0187*  ; back up image dimension parameters and buffer id
0433EC E5          0188*  	push hl
0433ED C5          0189*  	push bc
0433EE D5          0190*  	push de
0433EF             0191*  ; load the image
0433EF CD 14 43 04 0192*  	call vdu_load_buffer_from_file
0433F3             0193*  ; now make it a bitmap
0433F3 D1          0194*  	pop de
0433F4 C1          0195*  	pop bc
0433F5 E1          0196*  	pop hl
0433F6 3E 00       0197*  	ld a,0 ; the magic number for rgba8888
0433F8 C3 8C 29 04 0198*  	jp vdu_bmp_create ; will return to caller from there
0433FC             0028   	include "src/asm/sfx.inc"
0433FC             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
0433FC             0002*  
0433FC             0003*  SFX_num_buffers: equ 22
0433FC             0004*  ; SFX buffer ids:
0433FC             0005*  BUF_ACHTUNG: equ 0x0500
0433FC             0006*  BUF_AHH: equ 0x0501
0433FC             0007*  BUF_AUGH: equ 0x0502
0433FC             0008*  BUF_AYEE: equ 0x0503
0433FC             0009*  BUF_AYEE_HIGH: equ 0x0504
0433FC             0010*  BUF_DOG_WOOF_DOUBLE: equ 0x0505
0433FC             0011*  BUF_DOG_WOOF_SINGLE: equ 0x0506
0433FC             0012*  BUF_DOG_YELP: equ 0x0507
0433FC             0013*  BUF_EXPLODE: equ 0x0508
0433FC             0014*  BUF_GOT_TREASURE: equ 0x0509
0433FC             0015*  BUF_GUN_EMPTY: equ 0x050A
0433FC             0016*  BUF_GUN_RELOAD: equ 0x050B
0433FC             0017*  BUF_KNIFE: equ 0x050C
0433FC             0018*  BUF_MEIN_LEBEN: equ 0x050D
0433FC             0019*  BUF_OOF: equ 0x050E
0433FC             0020*  BUF_SCHUSSTAFFEL: equ 0x050F
0433FC             0021*  BUF_SCREAM: equ 0x0510
0433FC             0022*  BUF_SHOT_GATLING_BURST: equ 0x0511
0433FC             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0x0512
0433FC             0024*  BUF_SHOT_PISTOL: equ 0x0513
0433FC             0025*  BUF_UGH: equ 0x0514
0433FC             0026*  BUF_WILHELM: equ 0x0515
0433FC             0027*  
0433FC             0028*  ; SFX buffer id reverse lookup:
0433FC             0029*  SFX_buffer_id_lut:
0433FC 00 05 00    0030*  	dl BUF_ACHTUNG
0433FF 01 05 00    0031*  	dl BUF_AHH
043402 02 05 00    0032*  	dl BUF_AUGH
043405 03 05 00    0033*  	dl BUF_AYEE
043408 04 05 00    0034*  	dl BUF_AYEE_HIGH
04340B 05 05 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04340E 06 05 00    0036*  	dl BUF_DOG_WOOF_SINGLE
043411 07 05 00    0037*  	dl BUF_DOG_YELP
043414 08 05 00    0038*  	dl BUF_EXPLODE
043417 09 05 00    0039*  	dl BUF_GOT_TREASURE
04341A 0A 05 00    0040*  	dl BUF_GUN_EMPTY
04341D 0B 05 00    0041*  	dl BUF_GUN_RELOAD
043420 0C 05 00    0042*  	dl BUF_KNIFE
043423 0D 05 00    0043*  	dl BUF_MEIN_LEBEN
043426 0E 05 00    0044*  	dl BUF_OOF
043429 0F 05 00    0045*  	dl BUF_SCHUSSTAFFEL
04342C 10 05 00    0046*  	dl BUF_SCREAM
04342F 11 05 00    0047*  	dl BUF_SHOT_GATLING_BURST
043432 12 05 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
043435 13 05 00    0049*  	dl BUF_SHOT_PISTOL
043438 14 05 00    0050*  	dl BUF_UGH
04343B 15 05 00    0051*  	dl BUF_WILHELM
04343E             0052*  
04343E             0053*  ; SFX duration lookup:
04343E             0054*  SFX_duration_lut:
04343E 58 03       0055*  	dw 856 ; ACHTUNG
043440 91 01       0056*  	dw 401 ; AHH
043442 FC 02       0057*  	dw 764 ; AUGH
043444 E6 01       0058*  	dw 486 ; AYEE
043446 40 04       0059*  	dw 1088 ; AYEE_HIGH
043448 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04344A 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04344C B0 01       0062*  	dw 432 ; DOG_YELP
04344E 13 05       0063*  	dw 1299 ; EXPLODE
043450 A7 05       0064*  	dw 1447 ; GOT_TREASURE
043452 24 01       0065*  	dw 292 ; GUN_EMPTY
043454 BA 01       0066*  	dw 442 ; GUN_RELOAD
043456 F2 00       0067*  	dw 242 ; KNIFE
043458 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04345A CE 03       0069*  	dw 974 ; OOF
04345C 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04345E E0 02       0071*  	dw 736 ; SCREAM
043460 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
043462 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
043464 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
043466 77 01       0075*  	dw 375 ; UGH
043468 FD 04       0076*  	dw 1277 ; WILHELM
04346A             0077*  
04346A             0078*  ; SFX load routines jump table:
04346A             0079*  SFX_load_routines_table:
04346A AC 34 04    0080*  	dl load_sfx_ACHTUNG
04346D C4 34 04    0081*  	dl load_sfx_AHH
043470 DC 34 04    0082*  	dl load_sfx_AUGH
043473 F4 34 04    0083*  	dl load_sfx_AYEE
043476 0C 35 04    0084*  	dl load_sfx_AYEE_HIGH
043479 24 35 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04347C 3C 35 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04347F 54 35 04    0087*  	dl load_sfx_DOG_YELP
043482 6C 35 04    0088*  	dl load_sfx_EXPLODE
043485 84 35 04    0089*  	dl load_sfx_GOT_TREASURE
043488 9C 35 04    0090*  	dl load_sfx_GUN_EMPTY
04348B B4 35 04    0091*  	dl load_sfx_GUN_RELOAD
04348E CC 35 04    0092*  	dl load_sfx_KNIFE
043491 E4 35 04    0093*  	dl load_sfx_MEIN_LEBEN
043494 FC 35 04    0094*  	dl load_sfx_OOF
043497 14 36 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04349A 2C 36 04    0096*  	dl load_sfx_SCREAM
04349D 44 36 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
0434A0 5C 36 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
0434A3 74 36 04    0099*  	dl load_sfx_SHOT_PISTOL
0434A6 8C 36 04    0100*  	dl load_sfx_UGH
0434A9 A4 36 04    0101*  	dl load_sfx_WILHELM
0434AC             0102*  
0434AC             0103*  ; Import sfx .raw files and load them into VDP buffers
0434AC             0104*  
0434AC             0105*  load_sfx_ACHTUNG:
0434AC 21 00 05 00 0106*  	ld hl,BUF_ACHTUNG
0434B0 DD 21 3A 38 0107*  	ld ix,14394
       00          
0434B5 FD 21 BC 36 0108*  	ld iy,FACHTUNG
       04          
0434BA FD 22 61 32 0109*  	ld (cur_filename),iy
       04          
0434BF CD 01 2E 04 0110*  	call vdu_load_sfx
0434C3 C9          0111*  	ret
0434C4             0112*  
0434C4             0113*  load_sfx_AHH:
0434C4 21 01 05 00 0114*  	ld hl,BUF_AHH
0434C8 DD 21 63 1A 0115*  	ld ix,6755
       00          
0434CD FD 21 CC 36 0116*  	ld iy,FAHH
       04          
0434D2 FD 22 61 32 0117*  	ld (cur_filename),iy
       04          
0434D7 CD 01 2E 04 0118*  	call vdu_load_sfx
0434DB C9          0119*  	ret
0434DC             0120*  
0434DC             0121*  load_sfx_AUGH:
0434DC 21 02 05 00 0122*  	ld hl,BUF_AUGH
0434E0 DD 21 39 32 0123*  	ld ix,12857
       00          
0434E5 FD 21 D8 36 0124*  	ld iy,FAUGH
       04          
0434EA FD 22 61 32 0125*  	ld (cur_filename),iy
       04          
0434EF CD 01 2E 04 0126*  	call vdu_load_sfx
0434F3 C9          0127*  	ret
0434F4             0128*  
0434F4             0129*  load_sfx_AYEE:
0434F4 21 03 05 00 0130*  	ld hl,BUF_AYEE
0434F8 DD 21 00 20 0131*  	ld ix,8192
       00          
0434FD FD 21 E5 36 0132*  	ld iy,FAYEE
       04          
043502 FD 22 61 32 0133*  	ld (cur_filename),iy
       04          
043507 CD 01 2E 04 0134*  	call vdu_load_sfx
04350B C9          0135*  	ret
04350C             0136*  
04350C             0137*  load_sfx_AYEE_HIGH:
04350C 21 04 05 00 0138*  	ld hl,BUF_AYEE_HIGH
043510 DD 21 77 47 0139*  	ld ix,18295
       00          
043515 FD 21 F2 36 0140*  	ld iy,FAYEE_HIGH
       04          
04351A FD 22 61 32 0141*  	ld (cur_filename),iy
       04          
04351F CD 01 2E 04 0142*  	call vdu_load_sfx
043523 C9          0143*  	ret
043524             0144*  
043524             0145*  load_sfx_DOG_WOOF_DOUBLE:
043524 21 05 05 00 0146*  	ld hl,BUF_DOG_WOOF_DOUBLE
043528 DD 21 24 28 0147*  	ld ix,10276
       00          
04352D FD 21 04 37 0148*  	ld iy,FDOG_WOOF_DOUBLE
       04          
043532 FD 22 61 32 0149*  	ld (cur_filename),iy
       04          
043537 CD 01 2E 04 0150*  	call vdu_load_sfx
04353B C9          0151*  	ret
04353C             0152*  
04353C             0153*  load_sfx_DOG_WOOF_SINGLE:
04353C 21 06 05 00 0154*  	ld hl,BUF_DOG_WOOF_SINGLE
043540 DD 21 10 23 0155*  	ld ix,8976
       00          
043545 FD 21 1C 37 0156*  	ld iy,FDOG_WOOF_SINGLE
       04          
04354A FD 22 61 32 0157*  	ld (cur_filename),iy
       04          
04354F CD 01 2E 04 0158*  	call vdu_load_sfx
043553 C9          0159*  	ret
043554             0160*  
043554             0161*  load_sfx_DOG_YELP:
043554 21 07 05 00 0162*  	ld hl,BUF_DOG_YELP
043558 DD 21 60 1C 0163*  	ld ix,7264
       00          
04355D FD 21 34 37 0164*  	ld iy,FDOG_YELP
       04          
043562 FD 22 61 32 0165*  	ld (cur_filename),iy
       04          
043567 CD 01 2E 04 0166*  	call vdu_load_sfx
04356B C9          0167*  	ret
04356C             0168*  
04356C             0169*  load_sfx_EXPLODE:
04356C 21 08 05 00 0170*  	ld hl,BUF_EXPLODE
043570 DD 21 48 55 0171*  	ld ix,21832
       00          
043575 FD 21 45 37 0172*  	ld iy,FEXPLODE
       04          
04357A FD 22 61 32 0173*  	ld (cur_filename),iy
       04          
04357F CD 01 2E 04 0174*  	call vdu_load_sfx
043583 C9          0175*  	ret
043584             0176*  
043584             0177*  load_sfx_GOT_TREASURE:
043584 21 09 05 00 0178*  	ld hl,BUF_GOT_TREASURE
043588 DD 21 07 5F 0179*  	ld ix,24327
       00          
04358D FD 21 55 37 0180*  	ld iy,FGOT_TREASURE
       04          
043592 FD 22 61 32 0181*  	ld (cur_filename),iy
       04          
043597 CD 01 2E 04 0182*  	call vdu_load_sfx
04359B C9          0183*  	ret
04359C             0184*  
04359C             0185*  load_sfx_GUN_EMPTY:
04359C 21 0A 05 00 0186*  	ld hl,BUF_GUN_EMPTY
0435A0 DD 21 3F 13 0187*  	ld ix,4927
       00          
0435A5 FD 21 6A 37 0188*  	ld iy,FGUN_EMPTY
       04          
0435AA FD 22 61 32 0189*  	ld (cur_filename),iy
       04          
0435AF CD 01 2E 04 0190*  	call vdu_load_sfx
0435B3 C9          0191*  	ret
0435B4             0192*  
0435B4             0193*  load_sfx_GUN_RELOAD:
0435B4 21 0B 05 00 0194*  	ld hl,BUF_GUN_RELOAD
0435B8 DD 21 0F 1D 0195*  	ld ix,7439
       00          
0435BD FD 21 7C 37 0196*  	ld iy,FGUN_RELOAD
       04          
0435C2 FD 22 61 32 0197*  	ld (cur_filename),iy
       04          
0435C7 CD 01 2E 04 0198*  	call vdu_load_sfx
0435CB C9          0199*  	ret
0435CC             0200*  
0435CC             0201*  load_sfx_KNIFE:
0435CC 21 0C 05 00 0202*  	ld hl,BUF_KNIFE
0435D0 DD 21 F3 0F 0203*  	ld ix,4083
       00          
0435D5 FD 21 8F 37 0204*  	ld iy,FKNIFE
       04          
0435DA FD 22 61 32 0205*  	ld (cur_filename),iy
       04          
0435DF CD 01 2E 04 0206*  	call vdu_load_sfx
0435E3 C9          0207*  	ret
0435E4             0208*  
0435E4             0209*  load_sfx_MEIN_LEBEN:
0435E4 21 0D 05 00 0210*  	ld hl,BUF_MEIN_LEBEN
0435E8 DD 21 81 35 0211*  	ld ix,13697
       00          
0435ED FD 21 9D 37 0212*  	ld iy,FMEIN_LEBEN
       04          
0435F2 FD 22 61 32 0213*  	ld (cur_filename),iy
       04          
0435F7 CD 01 2E 04 0214*  	call vdu_load_sfx
0435FB C9          0215*  	ret
0435FC             0216*  
0435FC             0217*  load_sfx_OOF:
0435FC 21 0E 05 00 0218*  	ld hl,BUF_OOF
043600 DD 21 00 40 0219*  	ld ix,16384
       00          
043605 FD 21 B0 37 0220*  	ld iy,FOOF
       04          
04360A FD 22 61 32 0221*  	ld (cur_filename),iy
       04          
04360F CD 01 2E 04 0222*  	call vdu_load_sfx
043613 C9          0223*  	ret
043614             0224*  
043614             0225*  load_sfx_SCHUSSTAFFEL:
043614 21 0F 05 00 0226*  	ld hl,BUF_SCHUSSTAFFEL
043618 DD 21 63 26 0227*  	ld ix,9827
       00          
04361D FD 21 BC 37 0228*  	ld iy,FSCHUSSTAFFEL
       04          
043622 FD 22 61 32 0229*  	ld (cur_filename),iy
       04          
043627 CD 01 2E 04 0230*  	call vdu_load_sfx
04362B C9          0231*  	ret
04362C             0232*  
04362C             0233*  load_sfx_SCREAM:
04362C 21 10 05 00 0234*  	ld hl,BUF_SCREAM
043630 DD 21 5E 30 0235*  	ld ix,12382
       00          
043635 FD 21 D1 37 0236*  	ld iy,FSCREAM
       04          
04363A FD 22 61 32 0237*  	ld (cur_filename),iy
       04          
04363F CD 01 2E 04 0238*  	call vdu_load_sfx
043643 C9          0239*  	ret
043644             0240*  
043644             0241*  load_sfx_SHOT_GATLING_BURST:
043644 21 11 05 00 0242*  	ld hl,BUF_SHOT_GATLING_BURST
043648 DD 21 00 60 0243*  	ld ix,24576
       00          
04364D FD 21 E0 37 0244*  	ld iy,FSHOT_GATLING_BURST
       04          
043652 FD 22 61 32 0245*  	ld (cur_filename),iy
       04          
043657 CD 01 2E 04 0246*  	call vdu_load_sfx
04365B C9          0247*  	ret
04365C             0248*  
04365C             0249*  load_sfx_SHOT_MACHINE_GUN_BURST:
04365C 21 12 05 00 0250*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
043660 DD 21 C4 42 0251*  	ld ix,17092
       00          
043665 FD 21 FB 37 0252*  	ld iy,FSHOT_MACHINE_GUN_BURST
       04          
04366A FD 22 61 32 0253*  	ld (cur_filename),iy
       04          
04366F CD 01 2E 04 0254*  	call vdu_load_sfx
043673 C9          0255*  	ret
043674             0256*  
043674             0257*  load_sfx_SHOT_PISTOL:
043674 21 13 05 00 0258*  	ld hl,BUF_SHOT_PISTOL
043678 DD 21 61 4B 0259*  	ld ix,19297
       00          
04367D FD 21 1A 38 0260*  	ld iy,FSHOT_PISTOL
       04          
043682 FD 22 61 32 0261*  	ld (cur_filename),iy
       04          
043687 CD 01 2E 04 0262*  	call vdu_load_sfx
04368B C9          0263*  	ret
04368C             0264*  
04368C             0265*  load_sfx_UGH:
04368C 21 14 05 00 0266*  	ld hl,BUF_UGH
043690 DD 21 A9 18 0267*  	ld ix,6313
       00          
043695 FD 21 2E 38 0268*  	ld iy,FUGH
       04          
04369A FD 22 61 32 0269*  	ld (cur_filename),iy
       04          
04369F CD 01 2E 04 0270*  	call vdu_load_sfx
0436A3 C9          0271*  	ret
0436A4             0272*  
0436A4             0273*  load_sfx_WILHELM:
0436A4 21 15 05 00 0274*  	ld hl,BUF_WILHELM
0436A8 DD 21 D7 53 0275*  	ld ix,21463
       00          
0436AD FD 21 3A 38 0276*  	ld iy,FWILHELM
       04          
0436B2 FD 22 61 32 0277*  	ld (cur_filename),iy
       04          
0436B7 CD 01 2E 04 0278*  	call vdu_load_sfx
0436BB C9          0279*  	ret
0436BC             0280*  
0436BC             0281*  ; File name lookups:
0436BC 73 66 78 2F 0282*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
0436CC 73 66 78 2F 0283*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
0436D8 73 66 78 2F 0284*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
0436E5 73 66 78 2F 0285*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
0436F2 73 66 78 2F 0286*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
043704 73 66 78 2F 0287*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04371C 73 66 78 2F 0288*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
043734 73 66 78 2F 0289*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
043745 73 66 78 2F 0290*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
043755 73 66 78 2F 0291*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04376A 73 66 78 2F 0292*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04377C 73 66 78 2F 0293*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04378F 73 66 78 2F 0294*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04379D 73 66 78 2F 0295*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
0437B0 73 66 78 2F 0296*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
0437BC 73 66 78 2F 0297*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
0437D1 73 66 78 2F 0298*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
0437E0 73 66 78 2F 0299*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
0437FB 73 66 78 2F 0300*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04381A 73 66 78 2F 0301*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04382E 73 66 78 2F 0302*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04383A 73 66 78 2F 0303*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04384A             0304*  
04384A             0305*  ; Play sfx routines
04384A             0306*  
04384A             0307*  sfx_play_achtung:
04384A 21 00 05 00 0308*  	ld hl,BUF_ACHTUNG
04384E 01 58 03 00 0309*  	ld bc,856
043852 C3 46 00 04 0310*  	jp vdu_play_sfx
043856             0311*  
043856             0312*  sfx_play_ahh:
043856 21 01 05 00 0313*  	ld hl,BUF_AHH
04385A 01 91 01 00 0314*  	ld bc,401
04385E C3 46 00 04 0315*  	jp vdu_play_sfx
043862             0316*  
043862             0317*  sfx_play_augh:
043862 21 02 05 00 0318*  	ld hl,BUF_AUGH
043866 01 FC 02 00 0319*  	ld bc,764
04386A C3 46 00 04 0320*  	jp vdu_play_sfx
04386E             0321*  
04386E             0322*  sfx_play_ayee:
04386E 21 03 05 00 0323*  	ld hl,BUF_AYEE
043872 01 E6 01 00 0324*  	ld bc,486
043876 C3 46 00 04 0325*  	jp vdu_play_sfx
04387A             0326*  
04387A             0327*  sfx_play_ayee_high:
04387A 21 04 05 00 0328*  	ld hl,BUF_AYEE_HIGH
04387E 01 40 04 00 0329*  	ld bc,1088
043882 C3 46 00 04 0330*  	jp vdu_play_sfx
043886             0331*  
043886             0332*  sfx_play_dog_woof_double:
043886 21 05 05 00 0333*  	ld hl,BUF_DOG_WOOF_DOUBLE
04388A 01 63 02 00 0334*  	ld bc,611
04388E C3 46 00 04 0335*  	jp vdu_play_sfx
043892             0336*  
043892             0337*  sfx_play_dog_woof_single:
043892 21 06 05 00 0338*  	ld hl,BUF_DOG_WOOF_SINGLE
043896 01 15 02 00 0339*  	ld bc,533
04389A C3 46 00 04 0340*  	jp vdu_play_sfx
04389E             0341*  
04389E             0342*  sfx_play_dog_yelp:
04389E 21 07 05 00 0343*  	ld hl,BUF_DOG_YELP
0438A2 01 B0 01 00 0344*  	ld bc,432
0438A6 C3 46 00 04 0345*  	jp vdu_play_sfx
0438AA             0346*  
0438AA             0347*  sfx_play_explode:
0438AA 21 08 05 00 0348*  	ld hl,BUF_EXPLODE
0438AE 01 13 05 00 0349*  	ld bc,1299
0438B2 C3 46 00 04 0350*  	jp vdu_play_sfx
0438B6             0351*  
0438B6             0352*  sfx_play_got_treasure:
0438B6 21 09 05 00 0353*  	ld hl,BUF_GOT_TREASURE
0438BA 01 A7 05 00 0354*  	ld bc,1447
0438BE C3 46 00 04 0355*  	jp vdu_play_sfx
0438C2             0356*  
0438C2             0357*  sfx_play_gun_empty:
0438C2 21 0A 05 00 0358*  	ld hl,BUF_GUN_EMPTY
0438C6 01 24 01 00 0359*  	ld bc,292
0438CA C3 46 00 04 0360*  	jp vdu_play_sfx
0438CE             0361*  
0438CE             0362*  sfx_play_gun_reload:
0438CE 21 0B 05 00 0363*  	ld hl,BUF_GUN_RELOAD
0438D2 01 BA 01 00 0364*  	ld bc,442
0438D6 C3 46 00 04 0365*  	jp vdu_play_sfx
0438DA             0366*  
0438DA             0367*  sfx_play_knife:
0438DA 21 0C 05 00 0368*  	ld hl,BUF_KNIFE
0438DE 01 F2 00 00 0369*  	ld bc,242
0438E2 C3 46 00 04 0370*  	jp vdu_play_sfx
0438E6             0371*  
0438E6             0372*  sfx_play_mein_leben:
0438E6 21 0D 05 00 0373*  	ld hl,BUF_MEIN_LEBEN
0438EA 01 2E 03 00 0374*  	ld bc,814
0438EE C3 46 00 04 0375*  	jp vdu_play_sfx
0438F2             0376*  
0438F2             0377*  sfx_play_oof:
0438F2 21 0E 05 00 0378*  	ld hl,BUF_OOF
0438F6 01 CE 03 00 0379*  	ld bc,974
0438FA C3 46 00 04 0380*  	jp vdu_play_sfx
0438FE             0381*  
0438FE             0382*  sfx_play_schusstaffel:
0438FE 21 0F 05 00 0383*  	ld hl,BUF_SCHUSSTAFFEL
043902 01 48 02 00 0384*  	ld bc,584
043906 C3 46 00 04 0385*  	jp vdu_play_sfx
04390A             0386*  
04390A             0387*  sfx_play_scream:
04390A 21 10 05 00 0388*  	ld hl,BUF_SCREAM
04390E 01 E0 02 00 0389*  	ld bc,736
043912 C3 46 00 04 0390*  	jp vdu_play_sfx
043916             0391*  
043916             0392*  sfx_play_shot_gatling_burst:
043916 21 11 05 00 0393*  	ld hl,BUF_SHOT_GATLING_BURST
04391A 01 B6 05 00 0394*  	ld bc,1462
04391E C3 46 00 04 0395*  	jp vdu_play_sfx
043922             0396*  
043922             0397*  sfx_play_shot_machine_gun_burst:
043922 21 12 05 00 0398*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
043926 01 F9 03 00 0399*  	ld bc,1017
04392A C3 46 00 04 0400*  	jp vdu_play_sfx
04392E             0401*  
04392E             0402*  sfx_play_shot_pistol:
04392E 21 13 05 00 0403*  	ld hl,BUF_SHOT_PISTOL
043932 01 7C 04 00 0404*  	ld bc,1148
043936 C3 46 00 04 0405*  	jp vdu_play_sfx
04393A             0406*  
04393A             0407*  sfx_play_ugh:
04393A 21 14 05 00 0408*  	ld hl,BUF_UGH
04393E 01 77 01 00 0409*  	ld bc,375
043942 C3 46 00 04 0410*  	jp vdu_play_sfx
043946             0411*  
043946             0412*  sfx_play_wilhelm:
043946 21 15 05 00 0413*  	ld hl,BUF_WILHELM
04394A 01 FD 04 00 0414*  	ld bc,1277
04394E C3 46 00 04 0415*  	jp vdu_play_sfx
043952             0029   	include "src/asm/timer.inc"
043952             0001*  ; Table 32. Timer Control Registers
043952             0002*  ; this constant is the base address of the timer control registers
043952             0003*  ; each timer takes three bytes:
043952             0004*  ;   0: control register
043952             0005*  ;   1: low byte of timer reset value
043952             0006*  ;   2: high byte of timer reset value
043952             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
043952             0008*  ; which correctly force the high and upper bytes of the address bus to zero
043952             0009*  TMR_CTL:     equ 80h
043952             0010*  
043952             0011*  ; Timer Control Register Bit Definitions
043952             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
043952             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
043952             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
043952             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
043952             0016*                              ; the TMRx_CTL register is read.
043952             0017*  
043952             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
043952             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
043952             0020*  
043952             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
043952             0022*                              ;  0,and counting stops when the end-of-count value is reached.
043952             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
043952             0024*                              ; written to the counter when the end-of-count value is reached.
043952             0025*  
043952             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
043952             0027*  CLK_DIV_256:  equ %00001100 ;
043952             0028*  CLK_DIV_64:   equ %00001000 ;
043952             0029*  CLK_DIV_16:   equ %00000100 ;
043952             0030*  CLK_DIV_4:    equ %00000000 ;
043952             0031*  
043952             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
043952             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
043952             0034*                              ; When a 1 is written to this bit,the values in the reload registers
043952             0035*                              ;  are loaded into the downcounter when the timer restarts. The
043952             0036*                              ; programmer must ensure that this bit is set to 1 each time
043952             0037*                              ; SINGLE-PASS mode is used.
043952             0038*  
043952             0039*  ; disable/enable the programmable reload timer
043952             0040*  PRT_EN_0:     equ %00000000 ;
043952             0041*  PRT_EN_1:     equ %00000001 ;
043952             0042*  
043952             0043*  ; Table 37. Timer Input Source Select Register
043952             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
043952             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
043952             0046*  ;   00: System clock / CLK_DIV
043952             0047*  ;   01: RTC / CLK_DIV
043952             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
043952             0049*  ;   10: GPIO port B pin 1.
043952             0050*  ;   11: GPIO port B pin 1.
043952             0051*  TMR_ISS:   equ 92h ; register address
043952             0052*  
043952             0053*  ; Table 51. Real-Time Clock Control Register
043952             0054*  RTC_CTRL: equ EDh ; register address
043952             0055*  
043952             0056*  ; alarm interrupt disable/enable
043952             0057*  RTC_ALARM_0:    equ %00000000
043952             0058*  RTC_ALARM_1:    equ %10000000
043952             0059*  
043952             0060*  ; interrupt on alarm disable/enable
043952             0061*  RTC_INT_ENT_0:  equ %00000000
043952             0062*  RTC_INT_ENT_1:  equ %01000000
043952             0063*  
043952             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
043952             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
043952             0066*  
043952             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
043952             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
043952             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
043952             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
043952             0071*  
043952             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
043952             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
043952             0074*  
043952             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
043952             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
043952             0077*  
043952             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
043952             0079*                                  ; RTC counter is enabled.
043952             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
043952             0081*                                  ; RTC counter is disabled.
043952             0082*  
043952             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
043952             0084*  
043952             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
043952             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
043952 00 00 00    0087*  prt_reload: dl 0x000000
043955             0088*  
043955             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
043955             0090*  ;          de = number PRT interrupts during test interval
043955             0091*  prt_calibrate:
043955 CD 68 2A 04 0092*      call vdu_vblank
043959             0093*  ; set a MOS timer
043959 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04395D FD 21 B0 3A 0095*      ld iy,tmr_test
       04          
043962 CD 8E 3A 04 0096*      call tmr_set
043966             0097*  ; set a PRT timer
043966             0098*      ; ld hl,prt_reload_hardware
043966             0099*      ; ld hl,prt_reload_emulator
043966 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04396A 22 52 39 04 0101*      ld (prt_reload),hl
04396E CD C9 39 04 0102*      call prt_set
043972             0103*  @loop:
043972             0104*  ; check time remaining on MOS timer
043972 CD 9C 3A 04 0105*      call tmr_get
043976 CA 80 39 04 0106*      jp z,@done ; time expired,so quit
04397A FA 80 39 04 0107*      jp m,@done ; time past expiration (negative),so quit
04397E 18 F2       0108*      jr @loop
043980             0109*  @done:
043980 ED 5B 17 3A 0110*      ld de,(prt_irq_counter)
       04          
043985 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
043989 ED 43 52 39 0112*      ld (prt_reload),bc
       04          
04398E 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
043992 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
043993 32 13 41 04 0115*      ld (is_emulator),a
043997 ED 52       0116*      sbc hl,de
043999 21 2B 41 04 0117*      ld hl,on_hardware ; default message for running on hardware
04399D CA 55 39 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
0439A1 F8          0119*      ret m ; negative result means we're on hardware
0439A2 3C          0120*      inc a ; we're on emulator
0439A3 32 13 41 04 0121*      ld (is_emulator),a
0439A7 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
0439AB ED 43 52 39 0123*      ld (prt_reload),bc
       04          
0439B0 21 14 41 04 0124*      ld hl,on_emulator
0439B4 C9          0125*      ret
0439B5             0126*  
0439B5 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
0439C9             0128*  
0439C9             0129*  ; set PRT timer
0439C9             0130*  prt_set:
0439C9 21 00 00 00 0131*      ld hl,0
0439CD 22 17 3A 04 0132*      ld (prt_irq_counter),hl
0439D1 2A 52 39 04 0133*      ld hl,(prt_reload)
0439D5 ED 29 84    0134*      out0 ($84),l
0439D8 ED 21 85    0135*  	out0 ($85),h
0439DB             0136*  ; disable timer
0439DB 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0439DD ED 39 83    0138*  	out0 ($83),a
0439E0             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0439E0 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0439E2 ED 39 83    0141*  	out0 ($83),a
0439E5 C9          0142*      ret
0439E6             0143*  
0439E6             0144*  ; ===============================================
0439E6             0145*  ; PRT Timer Interrupt Handling
0439E6             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0439E6             0147*  ; -----------------------------------------------
0439E6             0148*  prt_irq_init:
0439E6             0149*      ; set up interrupt vector table 2
0439E6 21 00 00 00 0150*  	ld hl,0
0439EA 3A 0C 01 00 0151*  	ld a,($10c)
0439EE 6F          0152*  	ld l,a
0439EF 3A 0D 01 00 0153*  	ld a,($10d)
0439F3 67          0154*  	ld h,a
0439F4             0155*  
0439F4             0156*  	; skip over CALL ($c3)
0439F4 23          0157*  	inc hl
0439F5             0158*  	; load address of jump into vector table 2 (in ram)
0439F5 ED 27       0159*  	ld hl,(hl)
0439F7             0160*  
0439F7             0161*  	; write CALL prt_irq_handler to vector table 2
0439F7 3E C3       0162*  	ld a,$c3
0439F9 77          0163*  	ld (hl),a
0439FA 23          0164*  	inc hl
0439FB 11 02 3A 04 0165*  	ld de,prt_irq_handler
0439FF ED 1F       0166*  	ld (hl),de
043A01             0167*  
043A01 C9          0168*      ret
043A02             0169*  
043A02             0170*  prt_irq_handler:
043A02 F3          0171*  	di
043A03 F5          0172*  	push af
043A04 E5          0173*      push hl
043A05 ED 38 83    0174*  	in0 a,($83)
043A08 2A 17 3A 04 0175*  	ld hl,(prt_irq_counter)
043A0C 23          0176*  	inc hl
043A0D 22 17 3A 04 0177*  	ld (prt_irq_counter),hl
043A11 E1          0178*      pop hl
043A12 F1          0179*  	pop af
043A13 FB          0180*  	ei
043A14 5B ED 4D    0181*  	reti.l
043A17             0182*  
043A17             0183*  prt_irq_counter:
043A17 00 00 00    0184*  	.dl 0
043A1A             0185*  prt_irq_counter_saved:
043A1A 00 00 00    0186*      .dl 0
043A1D             0187*  
043A1D             0188*  prt_loop_reset:
043A1D E5          0189*      push hl
043A1E 21 00 00 00 0190*  	ld hl,0
043A22 22 17 3A 04 0191*  	ld (prt_irq_counter),hl
043A26 22 88 3A 04 0192*      ld (prt_loop_counter),hl
043A2A 22 8B 3A 04 0193*      ld (prt_loops),hl
043A2E CD C9 39 04 0194*      call prt_set
043A32 E1          0195*      pop hl
043A33 C9          0196*      ret
043A34             0197*  
043A34             0198*  prt_loop_start:
043A34 E5          0199*      push hl
043A35 21 00 00 00 0200*  	ld hl,0
043A39 22 17 3A 04 0201*  	ld (prt_irq_counter),hl
043A3D E1          0202*      pop hl
043A3E C9          0203*      ret
043A3F             0204*  
043A3F             0205*  prt_loop_stop:
043A3F E5          0206*      push hl
043A40 D5          0207*      push de
043A41 2A 17 3A 04 0208*      ld hl,(prt_irq_counter)
043A45 ED 5B 88 3A 0209*      ld de,(prt_loop_counter)
       04          
043A4A 19          0210*      add hl,de
043A4B 22 88 3A 04 0211*      ld (prt_loop_counter),hl
043A4F 21 00 00 00 0212*      ld hl,0
043A53 22 17 3A 04 0213*      ld (prt_irq_counter),hl
043A57 2A 8B 3A 04 0214*      ld hl,(prt_loops)
043A5B 23          0215*      inc hl
043A5C 22 8B 3A 04 0216*      ld (prt_loops),hl
043A60 D1          0217*      pop de
043A61 E1          0218*      pop hl
043A62 C9          0219*      ret
043A63             0220*  
043A63             0221*  ; inputs: bc = y,x text coordinates to print
043A63             0222*  prt_loop_print:
043A63 F5          0223*      push af
043A64 E5          0224*      push hl
043A65 C5          0225*      push bc
043A66 D5          0226*      push de
043A67 DD E5       0227*      push ix
043A69 FD E5       0228*      push iy
043A6B CD 4B 29 04 0229*      call vdu_move_cursor
043A6F             0230*  
043A6F 2A 88 3A 04 0231*      ld hl,(prt_loop_counter)
043A73 CD 6C 2E 04 0232*      call printDec
043A77             0233*  
043A77 2A 8B 3A 04 0234*      ld hl,(prt_loops)
043A7B CD 6C 2E 04 0235*      call printDec
043A7F             0236*  
043A7F FD E1       0237*      pop iy
043A81 DD E1       0238*      pop ix
043A83 D1          0239*      pop de
043A84 C1          0240*      pop bc
043A85 E1          0241*      pop hl
043A86 F1          0242*      pop af
043A87 C9          0243*      ret
043A88             0244*  
043A88             0245*  prt_loop_counter:
043A88 00 00 00    0246*      .dl 0
043A8B             0247*  prt_loops:
043A8B 00 00 00    0248*      .dl 0
043A8E             0249*  
043A8E             0250*  ; ===============================================
043A8E             0251*  ; Timer functions
043A8E             0252*  ; -----------------------------------------------
043A8E             0253*  ; set a countdown timer
043A8E             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043A8E             0255*  ; returns: hl = current time
043A8E             0256*  tmr_set:
043A8E FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
043A91             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
043A91 3E 08       0001*M 			LD	A, function
043A93 5B CF       0002*M 			RST.LIL	08h
043A95 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
043A98 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
043A9B C9          0261*      ret
043A9C             0262*  
043A9C             0263*  ; gets time remaining on a countdown timer
043A9C             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043A9C             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
043A9C             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
043A9C             0267*  tmr_get:
043A9C             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
043A9C 3E 08       0001*M 			LD	A, function
043A9E 5B CF       0002*M 			RST.LIL	08h
043AA0 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
043AA3 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
043AA6 AF          0271*      xor a                   ; clear carry
043AA7 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
043AA9 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
043AAC AF          0274*      xor a                   ; clear carry
043AAD ED 5A       0275*      adc hl,de               ; hl = time remaining
043AAF             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
043AAF C9          0277*      ret
043AB0             0278*  
043AB0             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
043AB6             0280*  
043AB6 00 00 00    0281*  timestamp_now: dl 0
043AB9 00 00 00    0282*  timestamp_old: dl 0
043ABC 00 00 00    0283*  timestamp_chg: dl 0
043ABF             0284*  
043ABF             0285*  ; update the global timestamp from the system clock
043ABF             0286*  ; inputs: none
043ABF             0287*  ; returns: hl = time elapsed in 1/120ths of a second
043ABF             0288*  ;          de = current time
043ABF             0289*  ;          ix = pointer to syvars table
043ABF             0290*  ; destroys: af,hl,de,ix
043ABF             0291*  timestamp_tick:
043ABF ED 5B B6 3A 0292*      ld de,(timestamp_now)   ; get previous time
       04          
043AC4 ED 53 B9 3A 0293*      ld (timestamp_old),de   ; save previous time
       04          
043AC9             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
043AC9 3E 08       0001*M 			LD	A, function
043ACB 5B CF       0002*M 			RST.LIL	08h
043ACD DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
043AD0 22 B6 3A 04 0296*      ld (timestamp_now),hl   ; save current time
043AD4 AF          0297*      xor a                   ; clear carry
043AD5 ED 52       0298*      sbc hl,de               ; hl = time elapsed
043AD7 22 BC 3A 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
043ADB C9          0300*      ret
043ADC             0301*  
043ADC             0302*  ; set a countdown timer
043ADC             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043ADC             0304*  ; requires: timestamp_tick to be called at least once before this function
043ADC             0305*  ; returns: hl = current time
043ADC             0306*  ; destroys: hl
043ADC             0307*  timestamp_tmr_set:
043ADC FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
043ADF 2A B6 3A 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
043AE3 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
043AE6 C9          0311*      ret
043AE7             0312*  
043AE7             0313*  ; gets time remaining on a countdown timer following the global timestamp
043AE7             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043AE7             0315*  ; requires: timestamp_tick to be called at least once before this function
043AE7             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
043AE7             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
043AE7             0318*  ; destroys: af,hl,de
043AE7             0319*  timestamp_tmr_get:
043AE7 ED 5B B6 3A 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
043AEC FD 27 00    0321*      ld hl,(iy+0)            ; get start time
043AEF AF          0322*      xor a                   ; clear carry
043AF0 ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
043AF2 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
043AF5 AF          0325*      xor a                   ; clear carry
043AF6 ED 5A       0326*      adc hl,de               ; hl = time remaining
043AF8             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
043AF8 C9          0328*      ret
043AF9             0329*  
043AF9             0330*  ; set a stopwatch
043AF9             0331*  ; returns: hl = start time
043AF9             0332*  ; destroys: hl,ix
043AF9             0333*  stopwatch_set:
043AF9             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
043AF9 3E 08       0001*M 			LD	A, function
043AFB 5B CF       0002*M 			RST.LIL	08h
043AFD DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
043B00 22 15 3B 04 0336*      ld (stopwatch_started),hl            ; set start time
043B04 C9          0337*      ret
043B05             0338*  
043B05             0339*  ; gets time elapsed on a stopwatch
043B05             0340*  ; returns: hl = time elapsed in 1/120ths of a second
043B05             0341*  ; destroys: af,hl,de,ix
043B05             0342*  stopwatch_get:
043B05             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
043B05 3E 08       0001*M 			LD	A, function
043B07 5B CF       0002*M 			RST.LIL	08h
043B09 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
043B0C ED 5B 15 3B 0345*      ld de,(stopwatch_started)            ; get start time
       04          
043B11 AF          0346*      xor a                   ; clear carry
043B12 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
043B14 C9          0348*      ret
043B15             0349*  
043B15             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
043B18             0351*  
043B18             0352*  ; ------------------
043B18             0353*  ; delay routine
043B18             0354*  ; Author: Richard Turrnidge
043B18             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
043B18             0356*  ; routine waits a fixed time,then returns
043B18             0357*  ; arrive with A =  the delay byte. One bit to be set only.
043B18             0358*  ; eg. ld A,00000100b
043B18             0359*  
043B18             0360*  multiPurposeDelay:
043B18 F5          0361*      push af
043B19 C5          0362*      push bc
043B1A DD E5       0363*      push ix
043B1C 47          0364*      ld b,a
043B1D 3E 08       0365*      ld a,$08
043B1F 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
043B21             0367*  
043B21             0368*  waitLoop:
043B21             0369*  
043B21 DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
043B24             0371*  
043B24             0372*                                  ;   we check if bit set is same as last time we checked.
043B24             0373*                                  ;   bit 0 - don't use
043B24             0374*                                  ;   bit 1 - changes 64 times per second
043B24             0375*                                  ;   bit 2 - changes 32 times per second
043B24             0376*                                  ;   bit 3 - changes 16 times per second
043B24             0377*  
043B24             0378*                                  ;   bit 4 - changes 8 times per second
043B24             0379*                                  ;   bit 5 - changes 4 times per second
043B24             0380*                                  ;   bit 6 - changes 2 times per second
043B24             0381*                                  ;   bit 7 - changes 1 times per second
043B24 A0          0382*      and b
043B25 4F          0383*      ld c,a
043B26 3A 37 3B 04 0384*      ld a,(oldTimeStamp)
043B2A B9          0385*      cp c                        ; is A same as last value?
043B2B 28 F4       0386*      jr z,waitLoop              ; loop here if it is
043B2D 79          0387*      ld a,c
043B2E 32 37 3B 04 0388*      ld (oldTimeStamp),a        ; set new value
043B32             0389*  
043B32 DD E1       0390*      pop ix
043B34 C1          0391*      pop bc
043B35 F1          0392*      pop af
043B36 C9          0393*      ret
043B37             0394*  
043B37 00          0395*  oldTimeStamp:   .db 00h
043B38             0030   	include "src/asm/vdu_wolf3d.inc"
043B38             0001*  ; global constants and variables
043B38             0002*  sid: equ 0x1000 ; scene id is a 16-bit bufferID holding the wolf3d control structure
043B38             0003*  mid: equ 1 ; model id is an 8-bit unsigned integer used by wolf3d internally
043B38             0004*  oid: equ 1 ; object id is an 8-bit unsigned integer used by wolf3d internally
043B38             0005*  obj_scale: equ 256 * 10
043B38             0006*  objbmid: equ 0x1001
043B38             0007*  tgtbmid: equ 0x1002
043B38             0008*  
043B38             0009*  cstw: equ 240 ; 256
043B38             0010*  csth: equ 160 ; 128
043B38             0011*  cstx: equ 40  ; 32
043B38             0012*  csty: equ 32  ; 20
043B38             0013*  
043B38             0014*  camd: equ 32*1 ; 32767/256 * bar
043B38 00 00 00    0015*  camx: dl  0*camd
043B3B 00 00 00    0016*  camy: dl  0*camd
043B3E 00 00 00    0017*  camz: dl  0*camd
043B41             0018*  
043B41 00 00 00    0019*  camdx: dl 0x000000
043B44 00 00 00    0020*  camdy: dl 0x000000
043B47 00 00 00    0021*  camdz: dl 0x000000
043B4A             0022*  
043B4A             0023*  camdr: equ 91*5 ; 32767/360*foo
043B4A 00 00 00    0024*  camrx: dl 0x000000
043B4D 00 00 00    0025*  camry: dl 0x000000
043B50 00 00 00    0026*  camrz: dl 0x000000
043B53             0027*  
043B53 00 00 00    0028*  camdrx: dl 0x000000
043B56 00 00 00    0029*  camdry: dl 0x000000
043B59 00 00 00    0030*  camdrz: dl 0x000000
043B5C             0031*  
043B5C             0032*  objdr: equ 91*5 ; 32767/360*foo
043B5C 00 00 00    0033*  objdrx: dl 0
043B5F 00 00 00    0034*  objdry: dl 0
043B62 00 00 00    0035*  objdrz: dl 0
043B65             0036*  
043B65 00 00 00    0037*  objrx: dl 0
043B68 00 00 00    0038*  objry: dl 0
043B6B 00 00 00    0039*  objrz: dl 0
043B6E             0040*  
043B6E             0041*  objd: equ 32*1 ; 32767/256 * bar
043B6E 00 00 00    0042*  objx: dl 0*objd
043B71 00 00 00    0043*  objy: dl 0 ; -42 ; -1/3*objd
043B74 40 FC FF    0044*  objz: dl -30*objd
043B77             0045*  
043B77 00 00 00    0046*  objdx: dl 0x000000
043B7A 00 00 00    0047*  objdy: dl 0x000000
043B7D 00 00 00    0048*  objdz: dl 0x000000
043B80             0049*  
043B80             0050*  filetype: equ 0 ; rgba8
043B80             0051*  
043B80 00          0052*  dithering_type: db 0x00 ; 0=none, 1=bayer ordered matrix, 2=floyd-steinberg
043B81             0053*  
043B81             0054*  ; create wolf control structure
043B81             0055*      MACRO CCS SID, SCENE_WIDTH, SCENE_HEIGHT
043B81             0056*      ld hl,@beg
043B81             0057*      ld bc,@end-@beg
043B81             0058*      rst.lil $18
043B81             0059*      jp @end
043B81             0060*  @beg:
043B81             0061*  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
043B81             0062*      db 23,0,$A0
043B81             0063*      dw SID
043B81             0064*      db $49,0
043B81             0065*      dw SCENE_WIDTH
043B81             0066*      dw SCENE_HEIGHT
043B81             0067*  @end:
043B81             0068*      ENDMACRO
043B81             0069*  
043B81             0070*  ; DEFINE MESH VERTICES
043B81             0071*      MACRO SV SID, MID, VERTICES, VERTICES_N
043B81             0072*      ld hl,@beg
043B81             0073*      ld bc,@end-@beg
043B81             0074*      rst.lil $18
043B81             0075*      jp @end
043B81             0076*  @beg:
043B81             0077*  ;   VDU 23,0, &A0, sid%; &49, 1, mid%; VERTICES%; Define Mesh Vertices
043B81             0078*      db 23,0,$A0
043B81             0079*      dw SID
043B81             0080*      db $49,1
043B81             0081*      dw MID, VERTICES_N
043B81             0082*  @end:
043B81             0083*      ld hl,VERTICES
043B81             0084*      ld bc,VERTICES_N*6 ; 3 coordinates per vertex, 2 bytes per coordinate
043B81             0085*      rst.lil $18
043B81             0086*      ENDMACRO
043B81             0087*  
043B81             0088*  ; DEFINE MESH VERTEX INDICES
043B81             0089*      MACRO SMVI SID, MID, VERTEX_INDICES, INDICES_N
043B81             0090*      ld hl,@beg
043B81             0091*      ld bc,@end-@beg
043B81             0092*      rst.lil $18
043B81             0093*      jp @end
043B81             0094*  @beg:
043B81             0095*  ;   VDU 23,0, &A0, sid%; &49, 2, mid%; model_indices%; Set Mesh Vertex indices
043B81             0096*      db 23,0,$A0
043B81             0097*      dw SID
043B81             0098*      db $49,2
043B81             0099*      dw MID, INDICES_N
043B81             0100*  @end:
043B81             0101*      ld hl,VERTEX_INDICES
043B81             0102*      ld bc,INDICES_N*2 ; 2 bytes per index
043B81             0103*      rst.lil $18
043B81             0104*      ENDMACRO
043B81             0105*  
043B81             0106*  ; DEFINE MESH TEXTURE COORDINATES
043B81             0107*      MACRO STC SID, MID, UVS, UVS_N
043B81             0108*      ld hl,@beg
043B81             0109*      ld bc,@end-@beg
043B81             0110*      rst.lil $18
043B81             0111*      jp @end
043B81             0112*  @beg:
043B81             0113*  ;   VDU 23, 0, &A0, sid; &49, 3, mid; n; u0; v0; ... :  Define Mesh Texture Coordinates
043B81             0114*      db 23,0,$A0
043B81             0115*      dw SID
043B81             0116*      db $49,3
043B81             0117*      dw MID, UVS_N
043B81             0118*  @end:
043B81             0119*      ld hl,UVS
043B81             0120*      ld bc,UVS_N*4 ; 2 coordinates per uv, 2 bytes per coordinate
043B81             0121*      rst.lil $18
043B81             0122*      ENDMACRO
043B81             0123*  
043B81             0124*  ; SET MESH TEXTURE COORDINATE INDEXES
043B81             0125*      MACRO STCI SID, MID, UV_INDICES, INDICES_N
043B81             0126*      ld hl,@beg
043B81             0127*      ld bc,@end-@beg
043B81             0128*      rst.lil $18
043B81             0129*      jp @end
043B81             0130*  @beg:
043B81             0131*  ;   VDU 23, 0, &A0, sid; &49, 4, mid; n; i0; ... :  Set Texture Coordinate Indexes
043B81             0132*      db 23,0,$A0
043B81             0133*      dw SID
043B81             0134*      db $49,4
043B81             0135*      dw MID, INDICES_N
043B81             0136*  @end:
043B81             0137*      ld hl,UV_INDICES
043B81             0138*      ld bc,INDICES_N*2 ; 2 bytes per index
043B81             0139*      rst.lil $18
043B81             0140*      ENDMACRO
043B81             0141*  
043B81             0142*  ; DEFINE MESH NORMALS
043B81             0143*      MACRO SN SID, MID, NORMALS, NORMALS_N
043B81             0144*      ld hl,@beg
043B81             0145*      ld bc,@end-@beg
043B81             0146*      rst.lil $18
043B81             0147*      jp @end
043B81             0148*  @beg:
043B81             0149*  ;   VDU 23, 0, &A0, sid; &49, 129, mid; n; x0; y0; z0; ... :  Define Mesh Normals
043B81             0150*      db 23,0,$A0
043B81             0151*      dw SID
043B81             0152*      db $49,129
043B81             0153*      dw MID, NORMALS_N
043B81             0154*  @end:
043B81             0155*      ld hl,NORMALS
043B81             0156*      ld bc,NORMALS_N*6 ; 3 coordinates per normal, 2 bytes per coordinate
043B81             0157*      rst.lil $18
043B81             0158*      ENDMACRO
043B81             0159*  
043B81             0160*  ; SET MESH NORMAL INDEXES
043B81             0161*      MACRO SMNI SID, MID, NORMAL_INDICES, INDICES_N
043B81             0162*      ld hl,@beg
043B81             0163*      ld bc,@end-@beg
043B81             0164*      rst.lil $18
043B81             0165*      jp @end
043B81             0166*  @beg:
043B81             0167*  ;   VDU 23, 0, &A0, sid; &49, 130, mid; n; i0; ... :  Set Mesh Normal Indexes
043B81             0168*      db 23,0,$A0
043B81             0169*      dw SID
043B81             0170*      db $49,130
043B81             0171*      dw MID, INDICES_N
043B81             0172*  @end:
043B81             0173*      ld hl,NORMAL_INDICES
043B81             0174*      ld bc,INDICES_N*2 ; 2 bytes per index
043B81             0175*      rst.lil $18
043B81             0176*      ENDMACRO
043B81             0177*  
043B81             0178*  ; CREATE OBJECT
043B81             0179*      MACRO CO SID, OID, MID, BMID
043B81             0180*      ld hl,@beg
043B81             0181*      ld bc,@end-@beg
043B81             0182*      rst.lil $18
043B81             0183*      jp @end
043B81             0184*  @beg:
043B81             0185*  ;   VDU 23, 0, &A0, sid; &49, 5, oid; mid; bmid; :  Create Object
043B81             0186*      db 23,0,$A0
043B81             0187*      dw SID
043B81             0188*      db $49,5
043B81             0189*      dw OID
043B81             0190*      dw MID
043B81             0191*      dw BMID
043B81             0192*  @end:
043B81             0193*      ENDMACRO
043B81             0194*  
043B81             0195*  ; SET OBJECT XYZ SCALE FACTORS
043B81             0196*      MACRO SO SID, OID, SCALEX, SCALEY, SCALEZ
043B81             0197*      ld hl,@beg
043B81             0198*      ld bc,@end-@beg
043B81             0199*      rst.lil $18
043B81             0200*      jp @end
043B81             0201*  @beg:
043B81             0202*  ;   VDU 23, 0, &A0, sid%; &49, 9, oid%; scale; scale; scale; Set Object XYZ Scale Factors
043B81             0203*      db 23,0,$A0
043B81             0204*      dw SID
043B81             0205*      db $49,9
043B81             0206*      dw OID
043B81             0207*      dw SCALEX
043B81             0208*      dw SCALEY
043B81             0209*      dw SCALEZ
043B81             0210*  @end:
043B81             0211*      ENDMACRO
043B81             0212*  
043B81             0213*  ; CREATE RENDER TARGET BITMAP
043B81             0214*      MACRO CTB BMID, SCENE_WIDTH, SCENE_HEIGHT
043B81             0215*      ld hl,@beg
043B81             0216*      ld bc,@end-@beg
043B81             0217*      rst.lil $18
043B81             0218*      jp @end
043B81             0219*  @beg:
043B81             0220*  ;   VDU 23, 27, &20, bmid2% Select output bitmap
043B81             0221*      db 23,27,$20
043B81             0222*      dw BMID
043B81             0223*  ;   VDU 23, 27, 2, cstw%; csth%; &0000; &00C0; Create solid color bitmap
043B81             0224*      db 23,27,2
043B81             0225*      dw SCENE_WIDTH
043B81             0226*      dw SCENE_HEIGHT
043B81             0227*      dw $0000
043B81             0228*      dw $00C0
043B81             0229*  @end:
043B81             0230*      ENDMACRO
043B81             0231*  
043B81             0232*  ; RENDER TO TARGET BITMAP
043B81             0233*      MACRO RENDBMP SID, BMID
043B81             0234*      ld hl,@beg
043B81             0235*      ld bc,@end-@beg
043B81             0236*      rst.lil $18
043B81             0237*      jp @end
043B81             0238*  @beg:
043B81             0239*  ;  1040 VDU 23, 0, &A0, sid%; &49, 38, bmid%; Render To Bitmap
043B81             0240*      db 23, 0, $A0
043B81             0241*      dw SID
043B81             0242*      db $49, 38
043B81             0243*      dw BMID
043B81             0244*  @end:
043B81             0245*      ENDMACRO
043B81             0246*  
043B81             0247*  ; DISPLAY RENDER TARGET BITMAP
043B81             0248*      MACRO DISPBMP BMID, X, Y
043B81             0249*      ld hl,@beg
043B81             0250*      ld bc,@end-@beg
043B81             0251*      rst.lil $18
043B81             0252*      jp @end
043B81             0253*  @beg:
043B81             0254*  ;   VDU 23, 27, &20, bmid% Select output bitmap
043B81             0255*      db 23,27,$20
043B81             0256*      dw BMID
043B81             0257*  ;   VDU 23, 27, 3, 0; 0; Display output bitmap
043B81             0258*      db 23,27,3
043B81             0259*      dw X,Y
043B81             0260*  @end:
043B81             0261*      ENDMACRO
043B81             0262*  
043B81             0263*  ; set wolf camera distance
043B81             0264*  ; inputs: bc distx, de disty, iy distz
043B81             0265*  scdabs:
043B81 ED 43 A2 3B 0266*      ld (@x),bc
       04          
043B86 ED 53 A4 3B 0267*      ld (@y),de
       04          
043B8B FD 22 A6 3B 0268*      ld (@z),iy
       04          
043B90 21 9B 3B 04 0269*      ld hl,@beg
043B94 01 0D 00 00 0270*      ld bc,@end-@beg
043B98 5B DF       0271*      rst.lil $18
043B9A C9          0272*      ret
043B9B             0273*  @beg:
043B9B             0274*  ;   360 VDU 23,0, &A0, sid%; &49, 25, distx; disty; distz; Set Camera XYZ Translation Distances
043B9B 17 00 A0    0275*      db 23,0,$A0
043B9E 00 10       0276*      dw sid
043BA0 49 19       0277*      db $49,25
043BA2 00 00       0278*  @x: dw 0x0000
043BA4 00 00       0279*  @y: dw 0x0000
043BA6 00 00       0280*  @z: dw 0x0000
043BA8 00          0281*  @end: db 0x00 ; padding
043BA9             0282*  
043BA9             0283*  ; set wolf camera rotation angkes
043BA9             0284*  ; inputs: bc anglex, de angley, iy anglez
043BA9             0285*  scrabs:
043BA9 ED 43 CA 3B 0286*      ld (@rx),bc
       04          
043BAE ED 53 CC 3B 0287*      ld (@ry),de
       04          
043BB3 FD 22 CE 3B 0288*      ld (@rz),iy
       04          
043BB8 21 C3 3B 04 0289*      ld hl,@beg
043BBC 01 0D 00 00 0290*      ld bc,@end-@beg
043BC0 5B DF       0291*      rst.lil $18
043BC2 C9          0292*      ret
043BC3             0293*  @beg:
043BC3             0294*  ; VDU 23, 0, &A0, sid; &49, 21, anglex; angley; anglez; : Set Camera XYZ Rotation Angles
043BC3 17 00 A0    0295*          db 23,0,$A0
043BC6 00 10       0296*          dw sid
043BC8 49 12       0297*          db $49,18
043BCA 00 00       0298*  @rx:    dw 0x0000
043BCC 00 00       0299*  @ry:    dw 0x0000
043BCE 00 00       0300*  @rz:    dw 0x0000
043BD0 00          0301*  @end:   db 0x00 ; padding
043BD1             0302*  
043BD1             0303*  ; set wolf object distance
043BD1             0304*  ; inputs: hl oid, bc distx, de disty, iy distz
043BD1             0305*  sodabs:
043BD1 22 F6 3B 04 0306*      ld (@oid),hl
043BD5 ED 43 F8 3B 0307*      ld (@x),bc
       04          
043BDA ED 53 FA 3B 0308*      ld (@y),de
       04          
043BDF FD 22 FC 3B 0309*      ld (@z),iy
       04          
043BE4 21 EF 3B 04 0310*      ld hl,@beg
043BE8 01 0F 00 00 0311*      ld bc,@end-@beg
043BEC 5B DF       0312*      rst.lil $18
043BEE C9          0313*      ret
043BEF             0314*  @beg:
043BEF             0315*  ; VDU 23, 0, &A0, sid; &49, 17, oid; distx; disty; distz; : Set Object XYZ Translation Distances
043BEF 17 00 A0    0316*          db 23, 0, $A0
043BF2 00 10       0317*          dw sid
043BF4 49 11       0318*          db $49, 17
043BF6 00 00       0319*  @oid:   dw 0
043BF8 00 00       0320*  @x:     dw 0
043BFA 00 00       0321*  @y:     dw 0
043BFC 00 00       0322*  @z:     dw 0
043BFE 00          0323*  @end:   db 0 ; padding
043BFF             0324*  
043BFF             0325*  ; set wolf object rotation angkes
043BFF             0326*  ; inputs: hl oid, bc anglex, de angley, iy anglez
043BFF             0327*  sorabs:
043BFF 22 24 3C 04 0328*      ld (@oid),hl
043C03 ED 43 26 3C 0329*      ld (@rx),bc
       04          
043C08 ED 53 28 3C 0330*      ld (@ry),de
       04          
043C0D FD 22 2A 3C 0331*      ld (@rz),iy
       04          
043C12 21 1D 3C 04 0332*      ld hl,@beg
043C16 01 0F 00 00 0333*      ld bc,@end-@beg
043C1A 5B DF       0334*      rst.lil $18
043C1C C9          0335*      ret
043C1D             0336*  @beg:
043C1D             0337*  ;  1120 VDU 23, 0, &A0, sid%; &49, 13, oid%; rx; ry; rz; Set Object XYZ Rotation Angles
043C1D 17 00 A0    0338*          db 23, 0, $A0
043C20 00 10       0339*          dw sid
043C22 49 0D       0340*          db $49, 13
043C24 00 00       0341*  @oid:   dw 0
043C26 00 00       0342*  @rx:    dw 0
043C28 00 00       0343*  @ry:    dw 0
043C2A 00 00       0344*  @rz:    dw 0
043C2C 00          0345*  @end:   db 0 ; padding
043C2D             0346*  
043C2D             0347*  ; set wolf camera distance relative
043C2D             0348*  ; inputs: bc distx, de disty, iy distz
043C2D             0349*  scdrel:
043C2D ED 43 4E 3C 0350*      ld (@x),bc
       04          
043C32 ED 53 50 3C 0351*      ld (@y),de
       04          
043C37 FD 22 52 3C 0352*      ld (@z),iy
       04          
043C3C 21 47 3C 04 0353*      ld hl,@beg
043C40 01 0D 00 00 0354*      ld bc,@end-@beg
043C44 5B DF       0355*      rst.lil $18
043C46 C9          0356*      ret
043C47             0357*  @beg:
043C47             0358*  ;   360 VDU 23,0, &A0, sid%; &49, 153, distx; disty; distz; Set Camera XYZ Translation Distances Relative
043C47 17 00 A0    0359*      db 23,0,$A0
043C4A 00 10       0360*      dw sid
043C4C 49 99       0361*      db $49,153
043C4E 00 00       0362*  @x: dw 0x0000
043C50 00 00       0363*  @y: dw 0x0000
043C52 00 00       0364*  @z: dw 0x0000
043C54 00          0365*  @end: db 0x00 ; padding
043C55             0366*  
043C55             0367*  ; set wolf camera rotation angkes relative
043C55             0368*  ; inputs: bc anglex, de angley, iy anglez
043C55             0369*  scrrel:
043C55 ED 43 76 3C 0370*      ld (@rx),bc
       04          
043C5A ED 53 78 3C 0371*      ld (@ry),de
       04          
043C5F FD 22 7A 3C 0372*      ld (@rz),iy
       04          
043C64 21 6F 3C 04 0373*      ld hl,@beg
043C68 01 0D 00 00 0374*      ld bc,@end-@beg
043C6C 5B DF       0375*      rst.lil $18
043C6E C9          0376*      ret
043C6F             0377*  @beg:
043C6F             0378*  ; VDU 23, 0, &A0, sid; &49, 149, anglex; angley; anglez; : Set Camera XYZ Rotation Angles Relative
043C6F 17 00 A0    0379*          db 23,0,$A0
043C72 00 10       0380*          dw sid
043C74 49 95       0381*          db $49,149
043C76 00 00       0382*  @rx:    dw 0x0000
043C78 00 00       0383*  @ry:    dw 0x0000
043C7A 00 00       0384*  @rz:    dw 0x0000
043C7C 00          0385*  @end:   db 0x00 ; padding
043C7D             0386*  
043C7D             0387*  ; VDU 23, 0, &A0, sid; &49, 42, oid; : Rotate Camera Locally to track a specified object
043C7D             0388*  ; inputs: hl oid
043C7D             0389*  cto:
043C7D 22 93 3C 04 0390*      ld (@oid),hl
043C81 21 8C 3C 04 0391*      ld hl,@beg
043C85 01 09 00 00 0392*      ld bc,@end-@beg
043C89 5B DF       0393*      rst.lil $18
043C8B C9          0394*      ret
043C8C             0395*  @beg:
043C8C 17 00 A0    0396*      db 23, 0, $A0
043C8F 00 10       0397*      dw sid
043C91 49 2A       0398*      db $49, 42
043C93 00 00       0399*  @oid:   dw 0
043C95 00          0400*  @end:   db 0 ; padding
043C96             0401*  
043C96             0402*  ; set wolf object distance
043C96             0403*  ; inputs: hl oid, bc distx, de disty, iy distz
043C96             0404*  sodrel:
043C96 22 BB 3C 04 0405*      ld (@oid),hl
043C9A ED 43 BD 3C 0406*      ld (@x),bc
       04          
043C9F ED 53 BF 3C 0407*      ld (@y),de
       04          
043CA4 FD 22 C1 3C 0408*      ld (@z),iy
       04          
043CA9 21 B4 3C 04 0409*      ld hl,@beg
043CAD 01 0F 00 00 0410*      ld bc,@end-@beg
043CB1 5B DF       0411*      rst.lil $18
043CB3 C9          0412*      ret
043CB4             0413*  @beg:
043CB4             0414*  ; VDU 23, 0, &A0, sid; &49, 145, oid; distx; disty; distz; : Set Object XYZ Translation Distances Relative
043CB4 17 00 A0    0415*          db 23, 0, $A0
043CB7 00 10       0416*          dw sid
043CB9 49 91       0417*          db $49, 145
043CBB 00 00       0418*  @oid:   dw 0
043CBD 00 00       0419*  @x:     dw 0
043CBF 00 00       0420*  @y:     dw 0
043CC1 00 00       0421*  @z:     dw 0
043CC3 00          0422*  @end:   db 0 ; padding
043CC4             0423*  
043CC4             0424*  ; set wolf object rotation angkes
043CC4             0425*  ; inputs: hl oid, bc anglex, de angley, iy anglez
043CC4             0426*  sorrel:
043CC4 22 E9 3C 04 0427*      ld (@oid),hl
043CC8 ED 43 EB 3C 0428*      ld (@rx),bc
       04          
043CCD ED 53 ED 3C 0429*      ld (@ry),de
       04          
043CD2 FD 22 EF 3C 0430*      ld (@rz),iy
       04          
043CD7 21 E2 3C 04 0431*      ld hl,@beg
043CDB 01 0F 00 00 0432*      ld bc,@end-@beg
043CDF 5B DF       0433*      rst.lil $18
043CE1 C9          0434*      ret
043CE2             0435*  @beg:
043CE2             0436*  ;  1120 VDU 23, 0, &A0, sid%; &49, 141, oid%; rx; ry; rz; Set Object XYZ Rotation Angles Relative
043CE2 17 00 A0    0437*          db 23, 0, $A0
043CE5 00 10       0438*          dw sid
043CE7 49 8D       0439*          db $49, 141
043CE9 00 00       0440*  @oid:   dw 0
043CEB 00 00       0441*  @rx:    dw 0
043CED 00 00       0442*  @ry:    dw 0
043CEF 00 00       0443*  @rz:    dw 0
043CF1 00          0444*  @end:   db 0 ; padding
043CF2             0445*  
043CF2             0446*  cycle_dithering:
043CF2 3A 80 3B 04 0447*      ld a,(dithering_type)
043CF6 3C          0448*      inc a
043CF7 FE 03       0449*      cp 3
043CF9 20 01       0450*      jr nz,@set
043CFB AF          0451*      xor a
043CFC             0452*  @set:
043CFC 32 80 3B 04 0453*      ld (dithering_type),a
043D00             0454*  ; fall through to vdu_set_dither
043D00             0455*  
043D00             0456*  ; set dithering type
043D00             0457*  ; inputs: a = dithering type/optons
043D00             0458*  ; dithering types bits 0-1: 00 none (default), 01 bayer ordered matrix, 10 floyd-steinberg
043D00             0459*  vdu_set_dither:
043D00             0460*  ; VDU 23, 0, &A0, sid; &49, 41, type
043D00 32 16 3D 04 0461*      ld (@dt),a
043D04 21 0F 3D 04 0462*      ld hl,@beg
043D08 01 08 00 00 0463*      ld bc,@end-@beg
043D0C 5B DF       0464*      rst.lil $18
043D0E C9          0465*      ret
043D0F             0466*  @beg:
043D0F 17 00 A0    0467*          db 23,0,$A0
043D12 00 10       0468*          dw sid
043D14 49 29       0469*          db $49,41
043D16 00          0470*  @dt:    db 0x00
043D17             0471*  @end:
043D17             0472*  
043D17             0473*  move_object_abs:
043D17 CD 33 2E 04 0474*      call printNewLine
043D1B             0475*  
043D1B 2A 6E 3B 04 0476*      ld hl,(objx)
043D1F ED 5B 77 3B 0477*      ld de,(objdx)
       04          
043D24 19          0478*      add hl,de
043D25 22 71 3D 04 0479*      ld (@x),hl
043D29 22 6E 3B 04 0480*      ld (objx),hl
043D2D CD 6C 2E 04 0481*      call printDec
043D31             0482*  
043D31 2A 71 3B 04 0483*      ld hl,(objy)
043D35 ED 5B 7A 3B 0484*      ld de,(objdy)
       04          
043D3A 19          0485*      add hl,de
043D3B 22 73 3D 04 0486*      ld (@y),hl
043D3F 22 71 3B 04 0487*      ld (objy),hl
043D43 CD 6C 2E 04 0488*      call printDec
043D47             0489*  
043D47 2A 74 3B 04 0490*      ld hl,(objz)
043D4B ED 5B 7D 3B 0491*      ld de,(objdz)
       04          
043D50 19          0492*      add hl,de
043D51 22 75 3D 04 0493*      ld (@z),hl
043D55 22 74 3B 04 0494*      ld (objz),hl
043D59 CD 6C 2E 04 0495*      call printDec
043D5D             0496*  
043D5D 21 68 3D 04 0497*      ld hl,@beg
043D61 01 0F 00 00 0498*      ld bc,@end-@beg
043D65 5B DF       0499*      rst.lil $18
043D67 C9          0500*      ret
043D68             0501*  @beg:
043D68             0502*  ; VDU 23, 0, &A0, sid; &49, 17, oid; distx; disty; distz; : Set Object XYZ Translation Distances
043D68 17 00 A0    0503*          db 23, 0, $A0
043D6B 00 10       0504*          dw sid
043D6D 49 11       0505*          db $49, 17
043D6F 01 00       0506*          dw oid
043D71 00 00       0507*  @x:     dw 0
043D73 00 00       0508*  @y:     dw 0
043D75 00 00       0509*  @z:     dw 0
043D77 00          0510*  @end:   db 0 ; padding
043D78             0511*  
043D78             0512*  rotate_object_abs:
043D78             0513*  ;  1080 objrx=objrx+objdrx: IF objrx>=pi2 THEN objrx=objrx-pi2
043D78 2A 65 3B 04 0514*      ld hl,(objrx)
043D7C ED 5B 5C 3B 0515*      ld de,(objdrx)
       04          
043D81 19          0516*      add hl,de
043D82 22 CE 3D 04 0517*      ld (@rx),hl
043D86 22 65 3B 04 0518*      ld (objrx),hl
043D8A CD 6C 2E 04 0519*      call printDec
043D8E             0520*  ;  1090 objry=objry+objdry: IF objry>=pi2 THEN objry=objry-pi2
043D8E 2A 68 3B 04 0521*      ld hl,(objry)
043D92 ED 5B 5F 3B 0522*      ld de,(objdry)
       04          
043D97 19          0523*      add hl,de
043D98 22 D0 3D 04 0524*      ld (@ry),hl
043D9C 22 68 3B 04 0525*      ld (objry),hl
043DA0 CD 6C 2E 04 0526*      call printDec
043DA4             0527*  ;  1100 objrz=objrz+objdrz: IF objrz>=pi2 THEN objrz=objrz-pi2
043DA4 2A 6B 3B 04 0528*      ld hl,(objrz)
043DA8 ED 5B 62 3B 0529*      ld de,(objdrz)
       04          
043DAD 19          0530*      add hl,de
043DAE 22 D2 3D 04 0531*      ld (@rz),hl
043DB2 22 6B 3B 04 0532*      ld (objrz),hl
043DB6 CD 6C 2E 04 0533*      call printDec
043DBA             0534*  
043DBA 21 C5 3D 04 0535*      ld hl,@beg
043DBE 01 0F 00 00 0536*      ld bc,@end-@beg
043DC2 5B DF       0537*      rst.lil $18
043DC4 C9          0538*      ret
043DC5             0539*  @beg:
043DC5             0540*  ;  1120 VDU 23, 0, &A0, sid%; &49, 13, oid%; rx; ry; rz; Set Object XYZ Rotation Angles
043DC5 17 00 A0    0541*          db 23, 0, $A0
043DC8 00 10       0542*          dw sid
043DCA 49 0D       0543*          db $49, 13
043DCC 01 00       0544*          dw oid
043DCE 00 00       0545*  @rx:    dw 0
043DD0 00 00       0546*  @ry:    dw 0
043DD2 00 00       0547*  @rz:    dw 0
043DD4 00          0548*  @end:   db 0 ; padding
043DD5             0549*  
043DD5             0550*  rotate_camera_abs:
043DD5 CD 33 2E 04 0551*      call printNewLine
043DD9             0552*  
043DD9             0553*  ;  1080 camrx=camrx+camdrx: IF camrx>=pi2 THEN camrx=camrx-pi2
043DD9 2A 4A 3B 04 0554*      ld hl,(camrx)
043DDD ED 5B 53 3B 0555*      ld de,(camdrx)
       04          
043DE2 19          0556*      add hl,de
043DE3 22 2D 3E 04 0557*      ld (@rx),hl
043DE7 22 4A 3B 04 0558*      ld (camrx),hl
043DEB CD 6C 2E 04 0559*      call printDec
043DEF             0560*  ;  1090 camry=camry+camdry: IF camry>=pi2 THEN camry=camry-pi2
043DEF 2A 4D 3B 04 0561*      ld hl,(camry)
043DF3 ED 5B 56 3B 0562*      ld de,(camdry)
       04          
043DF8 19          0563*      add hl,de
043DF9 22 2F 3E 04 0564*      ld (@ry),hl
043DFD 22 4D 3B 04 0565*      ld (camry),hl
043E01 CD 6C 2E 04 0566*      call printDec
043E05             0567*  ;  1100 camrz=camrz+camdrz: IF camrz>=pi2 THEN camrz=camrz-pi2
043E05 2A 50 3B 04 0568*      ld hl,(camrz)
043E09 ED 5B 59 3B 0569*      ld de,(camdrz)
       04          
043E0E 19          0570*      add hl,de
043E0F 22 31 3E 04 0571*      ld (@rz),hl
043E13 22 50 3B 04 0572*      ld (camrz),hl
043E17 CD 6C 2E 04 0573*      call printDec
043E1B             0574*  
043E1B 21 26 3E 04 0575*      ld hl,@beg
043E1F 01 0D 00 00 0576*      ld bc,@end-@beg
043E23 5B DF       0577*      rst.lil $18
043E25 C9          0578*      ret
043E26             0579*  @beg:
043E26             0580*  ; VDU 23, 0, &A0, sid; &49, 21, anglex; angley; anglez; : Set Camera XYZ Rotation Angles
043E26 17 00 A0    0581*          db 23, 0, $A0
043E29 00 10       0582*          dw sid
043E2B 49 15       0583*          db $49, 21
043E2D 00 00       0584*  @rx:    dw 0
043E2F 00 00       0585*  @ry:    dw 0
043E31 00 00       0586*  @rz:    dw 0
043E33 00          0587*  @end:   db 0 ; padding
043E34             0588*  
043E34             0589*  move_camera_abs:
043E34 CD 33 2E 04 0590*      call printNewLine
043E38             0591*  
043E38 2A 38 3B 04 0592*      ld hl,(camx)
043E3C ED 5B 41 3B 0593*      ld de,(camdx)
       04          
043E41 19          0594*      add hl,de
043E42 22 8C 3E 04 0595*      ld (@x),hl
043E46 22 38 3B 04 0596*      ld (camx),hl
043E4A CD 6C 2E 04 0597*      call printDec
043E4E             0598*  
043E4E 2A 3B 3B 04 0599*      ld hl,(camy)
043E52 ED 5B 44 3B 0600*      ld de,(camdy)
       04          
043E57 19          0601*      add hl,de
043E58 22 8E 3E 04 0602*      ld (@y),hl
043E5C 22 3B 3B 04 0603*      ld (camy),hl
043E60 CD 6C 2E 04 0604*      call printDec
043E64             0605*  
043E64 2A 3E 3B 04 0606*      ld hl,(camz)
043E68 ED 5B 47 3B 0607*      ld de,(camdz)
       04          
043E6D 19          0608*      add hl,de
043E6E 22 90 3E 04 0609*      ld (@z),hl
043E72 22 3E 3B 04 0610*      ld (camz),hl
043E76 CD 6C 2E 04 0611*      call printDec
043E7A             0612*  
043E7A 21 85 3E 04 0613*      ld hl,@beg
043E7E 01 0D 00 00 0614*      ld bc,@end-@beg
043E82 5B DF       0615*      rst.lil $18
043E84 C9          0616*      ret
043E85             0617*  @beg:
043E85             0618*  ;   VDU 23, 0, &A0, sid; &48, 25; distx; disty; distz :  Set Camera XYZ Translation Distances
043E85 17 00 A0    0619*          db 23, 0, $A0
043E88 00 10       0620*          dw sid
043E8A 49 19       0621*          db $49, 25
043E8C 00 00       0622*  @x:     dw 0
043E8E 00 00       0623*  @y:     dw 0
043E90 00 00       0624*  @z:     dw 0
043E92 00          0625*  @end:   db 0 ; padding
043E93             0626*  
043E93             0627*  
043E93             0628*  move_object_loc:
043E93 CD 33 2E 04 0629*      call printNewLine
043E97             0630*  
043E97 2A 6E 3B 04 0631*      ld hl,(objx)
043E9B ED 5B 77 3B 0632*      ld de,(objdx)
       04          
043EA0 19          0633*      add hl,de
043EA1 ED 53 F0 3E 0634*      ld (@x),de
       04          
043EA6 22 6E 3B 04 0635*      ld (objx),hl
043EAA CD 6C 2E 04 0636*      call printDec
043EAE             0637*  
043EAE 2A 71 3B 04 0638*      ld hl,(objy)
043EB2 ED 5B 7A 3B 0639*      ld de,(objdy)
       04          
043EB7 19          0640*      add hl,de
043EB8 ED 53 F2 3E 0641*      ld (@y),de
       04          
043EBD 22 71 3B 04 0642*      ld (objy),hl
043EC1 CD 6C 2E 04 0643*      call printDec
043EC5             0644*  
043EC5 2A 74 3B 04 0645*      ld hl,(objz)
043EC9 ED 5B 7D 3B 0646*      ld de,(objdz)
       04          
043ECE 19          0647*      add hl,de
043ECF ED 53 F4 3E 0648*      ld (@z),de
       04          
043ED4 22 74 3B 04 0649*      ld (objz),hl
043ED8 CD 6C 2E 04 0650*      call printDec
043EDC             0651*  
043EDC 21 E7 3E 04 0652*      ld hl,@beg
043EE0 01 0F 00 00 0653*      ld bc,@end-@beg
043EE4 5B DF       0654*      rst.lil $18
043EE6 C9          0655*      ret
043EE7             0656*  @beg:
043EE7             0657*  ; VDU 23, 0, &A0, sid; &49, 145, oid; distx; disty; distz :  Set Object XYZ Translation Distances
043EE7 17 00 A0    0658*          db 23, 0, $A0
043EEA 00 10       0659*          dw sid
043EEC 49 91       0660*          db $49, 145
043EEE 01 00       0661*          dw oid
043EF0 00 00       0662*  @x:     dw 0
043EF2 00 00       0663*  @y:     dw 0
043EF4 00 00       0664*  @z:     dw 0
043EF6 00          0665*  @end:   db 0 ; padding
043EF7             0666*  
043EF7             0667*  rotate_object_loc:
043EF7             0668*  ;  1080 objrx=objrx+objdrx: IF objrx>=pi2 THEN objrx=objrx-pi2
043EF7 2A 65 3B 04 0669*      ld hl,(objrx)
043EFB ED 5B 5C 3B 0670*      ld de,(objdrx)
       04          
043F00 19          0671*      add hl,de
043F01 ED 53 50 3F 0672*      ld (@rx),de
       04          
043F06 22 65 3B 04 0673*      ld (objrx),hl
043F0A CD 6C 2E 04 0674*      call printDec
043F0E             0675*  ;  1090 objry=objry+objdry: IF objry>=pi2 THEN objry=objry-pi2
043F0E 2A 68 3B 04 0676*      ld hl,(objry)
043F12 ED 5B 5F 3B 0677*      ld de,(objdry)
       04          
043F17 19          0678*      add hl,de
043F18 ED 53 52 3F 0679*      ld (@ry),de
       04          
043F1D 22 68 3B 04 0680*      ld (objry),hl
043F21 CD 6C 2E 04 0681*      call printDec
043F25             0682*  ;  1100 objrz=objrz+objdrz: IF objrz>=pi2 THEN objrz=objrz-pi2
043F25 2A 6B 3B 04 0683*      ld hl,(objrz)
043F29 ED 5B 62 3B 0684*      ld de,(objdrz)
       04          
043F2E 19          0685*      add hl,de
043F2F ED 53 54 3F 0686*      ld (@rz),de
       04          
043F34 22 6B 3B 04 0687*      ld (objrz),hl
043F38 CD 6C 2E 04 0688*      call printDec
043F3C             0689*  
043F3C 21 47 3F 04 0690*      ld hl,@beg
043F40 01 0F 00 00 0691*      ld bc,@end-@beg
043F44 5B DF       0692*      rst.lil $18
043F46 C9          0693*      ret
043F47             0694*  @beg:
043F47             0695*  ; VDU 23, 0, &A0, sid; &49, 141, oid; anglex; angley; anglez; :  Set Object XYZ Rotation Angles Local
043F47 17 00 A0    0696*          db 23, 0, $A0
043F4A 00 10       0697*          dw sid
043F4C 49 8D       0698*          db $49, 141
043F4E 01 00       0699*          dw oid
043F50 00 00       0700*  @rx:    dw 0
043F52 00 00       0701*  @ry:    dw 0
043F54 00 00       0702*  @rz:    dw 0
043F56 00          0703*  @end:   db 0 ; padding
043F57             0704*  
043F57             0705*  rotate_camera_loc:
043F57 CD 33 2E 04 0706*      call printNewLine
043F5B             0707*  
043F5B 2A 4A 3B 04 0708*      ld hl,(camrx)
043F5F ED 5B 53 3B 0709*      ld de,(camdrx)
       04          
043F64 19          0710*      add hl,de
043F65 ED 53 B2 3F 0711*      ld (@rx),de
       04          
043F6A 22 4A 3B 04 0712*      ld (camrx),hl
043F6E CD 6C 2E 04 0713*      call printDec
043F72             0714*  
043F72 2A 4D 3B 04 0715*      ld hl,(camry)
043F76 ED 5B 56 3B 0716*      ld de,(camdry)
       04          
043F7B 19          0717*      add hl,de
043F7C ED 53 B4 3F 0718*      ld (@ry),de
       04          
043F81 22 4D 3B 04 0719*      ld (camry),hl
043F85 CD 6C 2E 04 0720*      call printDec
043F89             0721*  
043F89 2A 50 3B 04 0722*      ld hl,(camrz)
043F8D ED 5B 59 3B 0723*      ld de,(camdrz)
       04          
043F92 19          0724*      add hl,de
043F93 ED 53 B6 3F 0725*      ld (@rz),de
       04          
043F98 22 50 3B 04 0726*      ld (camrz),hl
043F9C CD 6C 2E 04 0727*      call printDec
043FA0             0728*  
043FA0 21 AB 3F 04 0729*      ld hl,@beg
043FA4 01 0D 00 00 0730*      ld bc,@end-@beg
043FA8 5B DF       0731*      rst.lil $18
043FAA C9          0732*      ret
043FAB             0733*  @beg:
043FAB             0734*  ; VDU 23, 0, &A0, sid; &49, 149; anglex; angley; anglez; :  Set Camera XYZ Rotation Angles (Local)
043FAB 17 00 A0    0735*          db 23, 0, $A0
043FAE 00 10       0736*          dw sid
043FB0 49 95       0737*          db $49, 149
043FB2 00 00       0738*  @rx:    dw 0
043FB4 00 00       0739*  @ry:    dw 0
043FB6 00 00       0740*  @rz:    dw 0
043FB8 00          0741*  @end:   db 0 ; padding
043FB9             0742*  
043FB9             0743*  move_camera_loc:
043FB9 CD 33 2E 04 0744*      call printNewLine
043FBD             0745*  
043FBD 2A 38 3B 04 0746*      ld hl,(camx)
043FC1 ED 5B 41 3B 0747*      ld de,(camdx)
       04          
043FC6 19          0748*      add hl,de
043FC7 ED 53 14 40 0749*      ld (@x),de
       04          
043FCC 22 38 3B 04 0750*      ld (camx),hl
043FD0 CD 6C 2E 04 0751*      call printDec
043FD4             0752*  
043FD4 2A 3B 3B 04 0753*      ld hl,(camy)
043FD8 ED 5B 44 3B 0754*      ld de,(camdy)
       04          
043FDD 19          0755*      add hl,de
043FDE ED 53 16 40 0756*      ld (@y),de
       04          
043FE3 22 3B 3B 04 0757*      ld (camy),hl
043FE7 CD 6C 2E 04 0758*      call printDec
043FEB             0759*  
043FEB 2A 3E 3B 04 0760*      ld hl,(camz)
043FEF ED 5B 47 3B 0761*      ld de,(camdz)
       04          
043FF4 19          0762*      add hl,de
043FF5 ED 53 18 40 0763*      ld (@z),de
       04          
043FFA 22 3E 3B 04 0764*      ld (camz),hl
043FFE CD 6C 2E 04 0765*      call printDec
044002             0766*  
044002 21 0D 40 04 0767*      ld hl,@beg
044006 01 0D 00 00 0768*      ld bc,@end-@beg
04400A 5B DF       0769*      rst.lil $18
04400C C9          0770*      ret
04400D             0771*  @beg:
04400D             0772*  ;   VDU 23, 0, &A0, sid; &49, 153, distx; disty; distz :  Set Camera XYZ Translation Distances (Local)
04400D 17 00 A0    0773*          db 23, 0, $A0
044010 00 10       0774*          dw sid
044012 49 99       0775*          db $49, 153
044014 00 00       0776*  @x:     dw 0
044016 00 00       0777*  @y:     dw 0
044018 00 00       0778*  @z:     dw 0
04401A 00          0779*  @end:   db 0 ; padding
04401B             0780*  
04401B             0781*  ; VDU 23, 0, &A0, sid; &49, 128, 0, map_id; width; height; <cells> :  Load Wolf3D Map Cells
04401B             0782*  ; inputs: a map_id, hl pointer to cells data
04401B             0783*  vdu_map_init:
04401B E5          0784*      push hl ; back up pointer to map data
04401C 32 36 40 04 0785*      ld (@map_id),a ; high byte will always be zero because we'll never need more than 255 maps
044020 21 2E 40 04 0786*      ld hl,@beg
044024 01 0E 00 00 0787*      ld bc,@end-@beg
044028 5B DF       0788*      rst.lil $18
04402A C3 3C 40 04 0789*      jp @end
04402E             0790*  @beg:
04402E 17 00 A0    0791*      db 23,0,$A0
044031 00 10       0792*      dw sid
044033 49 80 00    0793*      db $49,128,0
044036             0794*  @map_id:
044036 00 00       0795*      dw 0
044038 10 00       0796*      dw 16 ; map_width
04403A 10 00       0797*      dw 16 ; map_height
04403C             0798*  @end:
04403C E1          0799*      pop hl ; restore pointer to map data
04403D 01 00 04 00 0800*      ld bc,16*16*map_record_size ; 16x16 map
044041 5B DF       0801*      rst.lil $18
044043 C9          0802*      ret
044044             0803*  
044044             0804*  ; VDU 23, 0, &A0, sid; &49, 128, 1, map_id; num_panels; <texture_id; width; height;> :  Load Wolf3D Map Texture Panel Lookup Table
044044             0805*  ; inputs: a map_id
044044             0806*  vdu_panel_init:
044044 32 5E 40 04 0807*      ld (@map_id),a ; high byte will always be zero because we'll never need more than 255 maps
044048 21 56 40 04 0808*      ld hl,@beg
04404C 01 0C 00 00 0809*      ld bc,@end-@beg
044050 5B DF       0810*      rst.lil $18
044052 C3 62 40 04 0811*      jp @end
044056             0812*  @beg:
044056 17 00 A0    0813*      db 23,0,$A0
044059 00 10       0814*      dw sid
04405B 49 80 01    0815*      db $49,128,1
04405E             0816*  @map_id:
04405E 00 00       0817*      dw 0
044060 0B 00       0818*      dw cube_num_tiles ; num_panels
044062             0819*  @end:
044062 21 16 02 04 0820*      ld hl,cube_tex_panel_lut
044066 01 42 00 00 0821*      ld bc,cube_num_tiles*6 ; 6 bytes per panel
04406A 5B DF       0822*      rst.lil $18
04406C C9          0823*      ret
04406D             0824*  
04406D             0825*  ; VDU 23, 0, &A0, sid; &49, 129, 0, x; y; theta; fov; screen_width; screen_height; screen_dist; :  Create Wolf3D Camera
04406D             0826*  ; inputs: hl theta, bc x, de y
04406D             0827*  vdu_camera_init:
04406D ED 43 94 40 0828*      ld (@x),bc
       04          
044072 ED 53 96 40 0829*      ld (@y),de
       04          
044077 7D          0830*      ld a,l
044078 32 98 40 04 0831*      ld (@theta),a
04407C 7C          0832*      ld a,h
04407D 32 99 40 04 0833*      ld (@theta+1),a
044081 21 8C 40 04 0834*      ld hl,@beg
044085 01 16 00 00 0835*      ld bc,@end-@beg
044089 5B DF       0836*      rst.lil $18
04408B C9          0837*      ret
04408C             0838*  @beg:
04408C 17 00 A0    0839*      db 23,0,$A0
04408F 00 10       0840*      dw sid
044091 49 81 00    0841*      db $49,129,0
044094 00 00       0842*  @x:     dw 0
044096 00 00       0843*  @y:     dw 0
044098 00 00       0844*  @theta: dw 0
04409A 00 40       0845*          dw 64*256 ; fov of 90 degrees in 8.8 fixed point deg256
04409C F0 00 A0 00 0846*          dw cstw, csth ; screen height, width
0440A0 00 08       0847*          dw 8*256 ; screen_dist of 8 ft in 8.8 fixed point
0440A2             0848*  @end:
0440A2             0031   
0440A2             0032   	include "src/asm/tmp.inc"
0440A2             0001*  ; labels and subroutines from various include files
0440A2             0002*  ; which have been temporarily excluded until they can be refactored
0440A2             0003*  
0440A2 00          0004*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
0440A3 00          0005*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
0440A4 00          0006*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
0440A5 00          0007*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
0440A6 00          0008*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
0440A7 00          0009*  orientation: db 0x00 ; 0-3 north,east,south,west
0440A8 00          0010*  cur_x: db 0x00
0440A9 00          0011*  cur_y: db 0x00
0440AA 00          0012*         db 0x00 ; padding so we can read/write 24-bit registers
0440AB             0033   
0440AB             0034   
0440AB             0035   start:
0440AB F5          0036       push af
0440AC C5          0037       push bc
0440AD D5          0038       push de
0440AE DD E5       0039       push ix
0440B0 FD E5       0040       push iy
0440B2             0041   
0440B2 CD 42 41 04 0042   	call init ; Initialization code
0440B6 CD A6 42 04 0043       call main ; Call the main function
0440BA             0044   
0440BA             0045   exit:
0440BA             0046   
0440BA FD E1       0047       pop iy
0440BC DD E1       0048       pop ix
0440BE D1          0049       pop de
0440BF C1          0050       pop bc
0440C0 F1          0051       pop af
0440C1 21 00 00 00 0052       ld hl,0
0440C5             0053   
0440C5 C9          0054       ret
0440C6             0055   
0440C6 57 65 6C 63 0056   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
0440DD 4C 6F 61 64 0057   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
0440E8 4C 6F 61 64 0058   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
0440F6 50 72 65 73 0059   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
044113 00          0060   is_emulator: defb 0
044114 52 75 6E 6E 0061   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04412B 52 75 6E 6E 0062   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
044142             0063   
044142             0064   init:
044142             0065   ; clear all buffers
044142 CD 0D 2E 04 0066       call vdu_clear_all_buffers
044146             0067   
044146 CD EE 42 04 0068   	call init_display
04414A             0069   
04414A             0070   ; start generic stopwatch to time setup loop
04414A             0071   ; so we can determine if we're running on emulator or hardware
04414A CD F9 3A 04 0072   	call stopwatch_set
04414E             0073   
04414E             0074   ; initialize global timestamp
04414E DD 27 00    0075       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
044151 22 B6 3A 04 0076       ld (timestamp_now),hl
044155             0077   
044155             0078   ; enable additional audio channels
044155 CD 8C 00 04 0079   	call vdu_enable_channels
044159             0080   
044159             0081   ; set the cursor off
044159 CD 5A 2A 04 0082   	call cursor_off
04415D             0083   
04415D             0084   ; print loading ui message
04415D 21 DD 40 04 0085   	ld hl,loading_ui
044161 CD 1E 2E 04 0086   	call printString
044165             0087   
044165             0088   ; load fonts
044165 CD 8D 0C 04 0089   	call load_font_itc_honda
044169 CD B0 1A 04 0090   	call load_font_retro_computer
04416D             0091   
04416D             0092   ; load UI images
04416D CD 8C 21 04 0093   	call load_ui_images
044171 CD 99 23 04 0094   	call load_ui_images_bj
044175             0095   
044175             0096   ; VDU 28, left, bottom, right, top: Set text viewport **
044175             0097   ; MIND THE LITTLE-ENDIANESS
044175             0098   ; inputs: c=left,b=bottom,e=right,d=top
044175 0E 00       0099   	ld c,0 ; left
044177 16 14       0100   	ld d,20 ; top
044179 1E 27       0101   	ld e,39 ; right
04417B 06 1D       0102   	ld b,29; bottom
04417D CD 10 29 04 0103   	call vdu_set_txt_viewport
044181             0104   
044181             0105   ; initialize image load routine
044181 CD 6D 32 04 0106   	call img_load_init
044185             0107   
044185             0108   ; load tiles
044185 01 0B 00 00 0109   	ld bc,cube_num_tiles
044189 21 D4 01 04 0110   	ld hl,cube_buffer_id_lut
04418D 22 67 32 04 0111   	ld (cur_buffer_id_lut),hl
044191 21 F5 01 04 0112   	ld hl,cube_load_tiles_table
044195 22 6A 32 04 0113   	ld (cur_load_jump_table),hl
044199 CD A2 32 04 0114   	call img_load_main
04419D             0115   
04419D             0116   ; load sprites
04419D 01 14 00 00 0117   	ld bc,sprite_num_tiles
0441A1 21 5D 04 04 0118   	ld hl,sprite_buffer_id_lut
0441A5 22 67 32 04 0119   	ld (cur_buffer_id_lut),hl
0441A9 21 99 04 04 0120   	ld hl,sprite_load_tiles_table
0441AD 22 6A 32 04 0121   	ld (cur_load_jump_table),hl
0441B1 CD A2 32 04 0122   	call img_load_main
0441B5             0123   
0441B5             0124   ; load sound effects
0441B5 01 16 00 00 0125   	ld bc,SFX_num_buffers
0441B9 21 FC 33 04 0126   	ld hl,SFX_buffer_id_lut
0441BD 22 67 32 04 0127   	ld (cur_buffer_id_lut),hl
0441C1 21 6A 34 04 0128   	ld hl,SFX_load_routines_table
0441C5 22 6A 32 04 0129   	ld (cur_load_jump_table),hl
0441C9 CD 68 2D 04 0130   	call sfx_load_main
0441CD             0131   
0441CD             0132   ; self modify vdu_play_sfx to enable sound
0441CD AF          0133   	xor a
0441CE 32 46 00 04 0134   	ld (vdu_play_sfx_disable),a
0441D2             0135   
0441D2             0136   ; use loading time to determine if we're running on emulator or hardware
0441D2 CD 05 3B 04 0137   	call stopwatch_get ; hl = elapsed time in 120ths of a second
0441D6 11 40 1F 00 0138   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
0441DA AF          0139   	xor a ; clear carry, default is running on hardware
0441DB 32 13 41 04 0140   	ld (is_emulator),a
0441DF ED 52       0141   	sbc hl,de
0441E1 FA F5 41 04 0142   	jp m,@on_emulator
0441E5 CD 46 29 04 0143   	call vdu_home_cursor
0441E9 21 2B 41 04 0144   	ld hl,on_hardware
0441ED CD 1E 2E 04 0145   	call printString
0441F1 C3 07 42 04 0146   	jp @test_done
0441F5             0147   
0441F5             0148   @on_emulator:
0441F5             0149   ; print emulator message
0441F5 3E 01       0150   	ld a,1
0441F7 32 13 41 04 0151   	ld (is_emulator),a
0441FB CD 46 29 04 0152   	call vdu_home_cursor
0441FF 21 14 41 04 0153   	ld hl,on_emulator
044203 CD 1E 2E 04 0154   	call printString
044207             0155   
044207             0156   @test_done:
044207             0157   ; print final loading time
044207 21 E8 40 04 0158   	ld hl,loading_time
04420B CD 1E 2E 04 0159   	call printString
04420F CD 05 3B 04 0160   	call stopwatch_get ; hl = elapsed time in 120ths of a second
044213 CD 6C 2E 04 0161   	call printDec
044217 CD 33 2E 04 0162   	call printNewLine
04421B             0163   
04421B             0164   ; print loading complete message and wait for user keypress
04421B 21 F6 40 04 0165   	ld hl,loading_complete
04421F CD 1E 2E 04 0166   	call printString
044223 CD DD 29 04 0167   	call vdu_flip
044227 CD 9E 31 04 0168   	call waitKeypress
04422B             0169   
04422B             0170   ; initialization done
04422B C9          0171   	ret
04422C             0172   
04422C             0173   ; DEBUG: set up a simple countdown timer
04422C 01          0174   debug_timer: db 0x01
04422D             0175   
04422D             0176   main_loop_tmr: ds 6
044233             0177   framerate: equ 30
044233             0178   
044233             0179   new_game:
044233             0180   ; create wolf3d control structure
044233             0181   ccs:
044233             0182   	CCS sid, cstw, csth
044233 21 41 42 04 0001M      ld hl,@beg
044237 01 0B 00 00 0002M      ld bc,@end-@beg
04423B 5B DF       0003M      rst.lil $18
04423D C3 4C 42 04 0004M      jp @end
044241             0005M  @beg:
044241             0006M  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
044241 17 00 A0    0007M      db 23,0,$A0
044244 00 10       0008M      dw SID
044246 49 00       0009M      db $49,0
044248 F0 00       0010M      dw SCENE_WIDTH
04424A A0 00       0011M      dw SCENE_HEIGHT
04424C             0012M  @end:
04424C             0183   
04424C             0184   ; create render target bitmap
04424C             0185   ctb:
04424C             0186       CTB tgtbmid, cstw, csth
04424C 21 5A 42 04 0001M      ld hl,@beg
044250 01 10 00 00 0002M      ld bc,@end-@beg
044254 5B DF       0003M      rst.lil $18
044256 C3 6A 42 04 0004M      jp @end
04425A             0005M  @beg:
04425A             0006M  ;   VDU 23, 27, &20, bmid2% Select output bitmap
04425A 17 1B 20    0007M      db 23,27,$20
04425D 02 10       0008M      dw BMID
04425F             0009M  ;   VDU 23, 27, 2, cstw%; csth%; &0000; &00C0; Create solid color bitmap
04425F 17 1B 02    0010M      db 23,27,2
044262 F0 00       0011M      dw SCENE_WIDTH
044264 A0 00       0012M      dw SCENE_HEIGHT
044266 00 00       0013M      dw $0000
044268 C0 00       0014M      dw $00C0
04426A             0015M  @end:
04426A             0187   
04426A             0188   ; set dithering type
04426A 3A 80 3B 04 0189       ld a,(dithering_type)
04426E 21 00 10 00 0190       ld hl,sid
044272 CD 00 3D 04 0191       call vdu_set_dither
044276             0192   
044276             0193   ; initialize map variables and load map file
044276 21 01 0A 04 0194   	ld hl,room_flags
04427A AF          0195   	xor a
04427B 06 0A       0196   	ld b,10
04427D             0197   @room_flags_loop:
04427D 77          0198   	ld (hl),a
04427E 23          0199   	inc hl
04427F 10 FC       0200   	djnz @room_flags_loop
044281             0201   
044281             0202   ; load room file
044281 CD 6D 09 04 0203   	call map_init
044285 21 00 E0 B7 0204   	ld hl,cell_status ; pointer to map data
044289 3E 01       0205   	ld a,1 ; map_id
04428B CD 1B 40 04 0206   	call vdu_map_init
04428F 3E 01       0207   	ld a,1 ; map_id
044291 CD 44 40 04 0208   	call vdu_panel_init
044295             0209   ; ; initialize sprite data
044295             0210   ; 	call map_init_sprites
044295             0211   ; ; initialize player position
044295             0212   ; 	call plyr_init
044295             0213   
044295             0214   ; create camera
044295 01 00 0F 00 0215       ld bc,15*256
044299 11 00 0F 00 0216       ld de,15*256
04429D 21 00 E0 FF 0217       ld hl,-32*256 ; -45 degrees
0442A1 CD 6D 40 04 0218       call vdu_camera_init
0442A5             0219   
0442A5 C9          0220   	ret
0442A6             0221   
0442A6             0222   main:
0442A6 CD 33 42 04 0223   	call new_game
0442AA             0224   
0442AA             0225   main_loop:
0442AA             0226   ; update global timestamp
0442AA CD BF 3A 04 0227       call timestamp_tick
0442AE             0228   
0442AE             0229   ; ; move enemies
0442AE             0230   ; 	call sprites_see_plyr ; 220-285  prt ticks
0442AE             0231   
0442AE             0232   ; ; get player input and update sprite position
0442AE             0233   ; 	; 0-1 prt ticks
0442AE             0234   ; 	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
0442AE             0235   
0442AE             0236   ; ; render the updated scene
0442AE             0237   ; 	call render_scene ; 6-12 prt ticks
0442AE             0238   ; ; full loop 12-16 prt ticks
0442AE             0239   
0442AE             0240   ; ; flip the screen
0442AE             0241   ; 	call vdu_flip
0442AE             0242   
0442AE             0243   @wait:
0442AE FD 21 2D 42 0244   	ld iy,main_loop_tmr
       04          
0442B3 CD 9C 3A 04 0245   	call tmr_get
0442B7 CA C3 42 04 0246   	jp z,@continue
0442BB FA C3 42 04 0247   	jp m,@continue
0442BF C3 AE 42 04 0248   	jp @wait
0442C3             0249   @continue:
0442C3             0250   
0442C3             0251   ; reset main loop timer
0442C3 FD 21 2D 42 0252   	ld iy,main_loop_tmr
       04          
0442C8 21 04 00 00 0253   	ld hl,120/framerate
0442CC CD 8E 3A 04 0254   	call tmr_set
0442D0             0255   
0442D0             0256   ; check for escape key and quit if pressed
0442D0             0257   	MOSCALL mos_getkbmap
0442D0 3E 1E       0001M  			LD	A, function
0442D2 5B CF       0002M  			RST.LIL	08h
0442D4             0258   ; 113 Escape
0442D4 DD CB 0E 46 0259       bit 0,(ix+14)
0442D8 20 02       0260   	jr nz,main_end
0442DA             0261   @Escape:
0442DA 18 CE       0262   	jr main_loop
0442DC             0263   
0442DC             0264   main_end:
0442DC             0265   	; call do_outro
0442DC             0266   
0442DC CD 0D 2E 04 0267       call vdu_clear_all_buffers
0442E0 CD B4 00 04 0268   	call vdu_disable_channels
0442E4             0269   
0442E4             0270   ; restore screen to something normalish
0442E4 AF          0271   	xor a
0442E5 CD 9B 28 04 0272   	call vdu_set_screen_mode
0442E9 CD 4C 2A 04 0273   	call cursor_on
0442ED C9          0274   	ret
0442EE             0275   
0442EE             0276   init_display:
0442EE             0277   ; set up the display
0442EE 3E 88       0278       ld a,8+128 ; 320x240x64 double-buffered
0442F0 CD 9B 28 04 0279       call vdu_set_screen_mode
0442F4 AF          0280       xor a
0442F5 CD CA 29 04 0281       call vdu_set_scaling
0442F9             0282   
0442F9             0283   ; set text background color
0442F9 3E 84       0284   	ld a,4 + 128
0442FB CD 27 28 04 0285   	call vdu_colour_text
0442FF             0286   
0442FF             0287   ; set text foreground color
0442FF 3E 2F       0288   	ld a,47 ; aaaaff lavenderish
044301 CD 27 28 04 0289   	call vdu_colour_text
044305             0290   
044305             0291   ; set gfx bg color
044305 AF          0292   	xor a ; plotting mode 0
044306 0E 04       0293   	ld c,4 ; dark blue
044308 CD 4F 28 04 0294   	call vdu_gcol_bg
04430C CD 22 28 04 0295   	call vdu_clg
044310             0296   
044310             0297   ; set the cursor off again since we changed screen modes
044310 CD 5A 2A 04 0298   	call cursor_off
044314             0299   
044314             0300   ; files.inc must go here so that filedata doesn't stomp on program data
044314             0301   	include "src/asm/files.inc"
044314             0001*  
044314             0002*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
044314             0003*  ; inputs: hl = bufferId, ix = file size
044314             0004*  vdu_load_buffer_from_file:
044314             0005*      ; back up buffer id
044314 E5          0006*          push hl
044315             0007*      ; load the file from disk into ram
044315 FD E5       0008*          push iy
044317 E1          0009*          pop hl ; pointer to filename
044318 11 72 43 04 0010*          ld de,filedata
04431C 3E 01       0011*          ld a,mos_load
04431E 5B CF       0012*          RST.LIL 08h
044320             0013*  	; load buffer ids
044320 E1          0014*          pop hl
044321 22 62 43 04 0015*  		ld (@id0),hl
044325 22 68 43 04 0016*  		ld (@id1),hl
044329 22 6D 43 04 0017*  		ld (@id2),hl
04432D             0018*  	; clean up bytes that got stomped on by the ID loads
04432D 3E 02       0019*  		ld a,2
04432F 32 64 43 04 0020*  		ld (@id0+2),a
044333 3E 17       0021*  		ld a,23
044335 32 6A 43 04 0022*  		ld (@id1+2),a
044339 AF          0023*  		xor a
04433A 32 6F 43 04 0024*  		ld (@id2+2),a
04433E             0025*  	; read size from ix
04433E DD 7D       0026*  		ld a,ixl
044340 32 70 43 04 0027*  		ld (@size),a
044344 DD 7C       0028*  		ld a,ixh
044346 32 71 43 04 0029*  		ld (@size+1),a
04434A             0030*  	; get all the ducks in a row for the vdu call
04434A 01 13 00 00 0031*  		ld bc,filedata-@start
04434E DD 09       0032*  		add ix,bc
044350 DD 44       0033*  		ld b,ixh
044352 DD 4D       0034*  		ld c,ixl
044354 21 5F 43 04 0035*  		ld hl,@start
044358             0036*  	; push the button
044358 5B DF       0037*  		rst.lil $18
04435A             0038*      ; print a progress breadcrumb
04435A 3E 2E       0039*          ld a,'.'
04435C 5B D7       0040*          rst.lil 10h
04435E             0041*  	; back to caller
04435E C9          0042*  		ret
04435F             0043*  ; vdp command string:
04435F 17 00 A0    0044*  @start: db 23,0,0xA0 ; Clear buffer
044362 00 00       0045*  @id0:	dw 0x0000 ; bufferId
044364 02          0046*  		db 2
044365             0047*  	; select buffer VDU 23, 27, &20, bufferId;
044365 17 1B 20    0048*  		db 23,27,0x20
044368 00 00       0049*  @id1:	dw 0x0000 ; bufferId
04436A             0050*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04436A 17 00 A0    0051*  		db 23,0,0xA0
04436D 00 00       0052*  @id2:	dw 0x0000 ; bufferId
04436F 00          0053*  		db 0
044370             0054*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
044370 00 00       0055*  @size:	dw 0x0000 ; length of data in bytes
044372             0056*  filedata: ; no need to allocate space here if this is the final include of the application
044372             0057*  	; ds 65536 ; placeholder for file data	DEBUG
044372             0058*  
044372             0059*  ; ; TODO: MAKE PROGRESSIVE LOADING WORK
044372             0060*  ; ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
044372             0061*  ; ; inputs: hl = bufferId, ix = file size ; iy = pointer to filename
044372             0062*  ; vdu_load_buffer_from_file:
044372             0063*  ; ; load buffer ids
044372             0064*  ;     ld (@id0),hl
044372             0065*  ;     ld (@id1),hl
044372             0066*  ; ; clean up bytes that got stomped on by the ID loads
044372             0067*  ;     ld a,2
044372             0068*  ;     ld (@id0+2),a
044372             0069*  ;     xor a
044372             0070*  ;     ld (@id1+2),a
044372             0071*  ; ; load the file from disk into ram
044372             0072*  ;     ld (@filesize),ix
044372             0073*  ;     ld bc,(@filesize) ; for the mos_load call
044372             0074*  ;     push iy
044372             0075*  ; 	pop hl ; pointer to filename
044372             0076*  ; 	ld de,filedata
044372             0077*  ; 	ld a,mos_load
044372             0078*  ; 	RST.LIL 08h
044372             0079*  ; ; clear target buffer
044372             0080*  ;     ld hl,@clear0
044372             0081*  ;     ld bc,@clear1-@clear0
044372             0082*  ;     rst.lil $18
044372             0083*  ;     jp @clear1
044372             0084*  ; @clear0: db 23,0,0xA0
044372             0085*  ; @id0:	dw 0x0000 ; bufferId
044372             0086*  ; 		db 2 ; clear buffer
044372             0087*  ; @clear1:
044372             0088*  ; ; load default chunk size of 256 bytes
044372             0089*  ;     xor a
044372             0090*  ;     ld (@chunksize),a
044372             0091*  ;     ld a,1
044372             0092*  ;     ld (@chunksize+1),a
044372             0093*  ; ; point hl at the start of the file data
044372             0094*  ;     ld hl,filedata
044372             0095*  ;     ld (@chunkpointer),hl
044372             0096*  ; @loop:
044372             0097*  ;     ld hl,(@filesize) ; get the remaining bytes
044372             0098*  ;     ld de,256
044372             0099*  ;     xor a ; clear carry
044372             0100*  ;     sbc hl,de
044372             0101*  ;     ld (@filesize),hl ; store remaining bytes
044372             0102*  ;     jp z,@loadchunk ; jp means will return to caller from there
044372             0103*  ;     jp m,@lastchunk ; ditto
044372             0104*  ;     call @loadchunk ; load the next chunk and return here to loop again
044372             0105*  ;     jp @loop ; loop back to load the next chunk
044372             0106*  ; @lastchunk:
044372             0107*  ;     ld de,256
044372             0108*  ;     add hl,de
044372             0109*  ;     ld a,l
044372             0110*  ;     ld (@chunksize),a ; store the remaining bytes
044372             0111*  ;     ld a,h
044372             0112*  ;     ld (@chunksize+1),a
044372             0113*  ;     ; fall through to loadchunk
044372             0114*  ; @loadchunk:
044372             0115*  ;     ld hl,@chunk0
044372             0116*  ;     ld bc,@chunk1-@chunk0
044372             0117*  ;     rst.lil $18
044372             0118*  ;     jp @chunk1
044372             0119*  ; @chunk0:
044372             0120*  ; ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
044372             0121*  ; 		db 23,0,0xA0
044372             0122*  ; @id1:	dw 0x0000 ; bufferId
044372             0123*  ; 		db 0 ; load buffer
044372             0124*  ; @chunksize:	dw 0x0000 ; length of data in bytes
044372             0125*  ; @chunk1:
044372             0126*  ;     ld hl,(@chunkpointer) ; get the file data pointer
044372             0127*  ;     ld bc,0 ; make sure bcu is zero
044372             0128*  ;     ld a,(@chunksize)
044372             0129*  ;     ld c,a
044372             0130*  ;     ld a,(@chunksize+1)
044372             0131*  ;     ld b,a
044372             0132*  ;     rst.lil $18
044372             0133*  ;     ld hl,(@chunkpointer) ; get the file data pointer
044372             0134*  ;     ld bc,256
044372             0135*  ;     add hl,bc ; advance the file data pointer
044372             0136*  ;     ld (@chunkpointer),hl ; store pointer to file data
044372             0137*  ;     ld a,'.' ; print a progress breadcrumb
044372             0138*  ;     rst.lil 10h
044372             0139*  ;     ret
044372             0140*  ; @filesize: dl 0 ; file size in bytes
044372             0141*  ; @chunkpointer: dl 0 ; pointer to current chunk
044372             0142*  ; filedata: ; no need to allocate space here if this is the final include of the application
044372             0143*  ; 	; ds 65536 ; placeholder for file data	DEBUG
