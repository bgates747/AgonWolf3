PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 9C 41 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.inc" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.inc
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.inc" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  max_channels: equ 6
040046             0003*  
040046             0004*  vdu_play_sfx:
040046 C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0006*      ld (@bufferId),hl
04004B ED 43 89 00 0007*      ld (@duration),bc
       04          
040050 3E 17       0008*      ld a,23
040052 32 81 00 04 0009*      ld (@bufferId+2),a
040056 3A 45 00 04 0010*      ld a,(last_channel)
04005A 3C          0011*      inc a
04005B             0012*      ; and 31 ; modulo 32
04005B FE 06       0013*      cp max_channels
04005D C2 62 00 04 0014*      jp nz,@load_channel
040061 AF          0015*      xor a
040062             0016*  @load_channel:
040062 32 45 00 04 0017*      ld (last_channel),a
040066 32 7C 00 04 0018*      ld (@channel0),a
04006A 32 84 00 04 0019*      ld (@channel1),a
04006E 21 79 00 04 0020*      ld hl, @sample
040072 01 12 00 00 0021*      ld bc, @sample_end - @sample
040076 5B DF       0022*      rst.lil $18
040078 C9          0023*      ret
040079             0024*  @sample:
040079             0025*  ; Command 4: Set waveform
040079             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0027*      .db 23,0,$85                        ; do sound
04007C             0028*  @channel0:
04007C 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
04007F             0030*  @bufferId:
04007F 00 00       0031*      .dw 0x0000
040081             0032*  ; Command 0: Play note
040081             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0034*      .db 23,0,$85                        ; do sound
040084             0035*  @channel1:
040084 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040087 00 00       0037*      .dw 0
040089             0038*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0039*      .dw 0x0000                        ; duration
04008B             0040*  @sample_end:
04008B 00          0041*      .db 0x00 ; padding
04008C             0042*  
04008C             0043*  ; enable enough additional channels so that total enabled = max_channels
04008C             0044*  ; inputs: max_channels set
04008C             0045*  ; returns: nothing
04008C             0046*  ; destroys: af, bc, hl
04008C             0047*  vdu_enable_channels:
04008C 3E 06       0048*      ld a,max_channels
04008E D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040090 F2 97 00 04 0050*      jp p,@loop
040094 C9          0051*      ret
040095 3E 03       0052*      ld a,3 ; first non-default channel
040097             0053*  @loop:
040097 32 B2 00 04 0054*      ld (@channel),a
04009B 21 AF 00 04 0055*      ld hl,@beg
04009F 01 05 00 00 0056*      ld bc,@end-@beg
0400A3 F5          0057*      push af
0400A4 5B DF       0058*      rst.lil $18
0400A6 F1          0059*      pop af
0400A7 3C          0060*      inc a
0400A8 FE 06       0061*      cp max_channels
0400AA C2 97 00 04 0062*      jp nz,@loop
0400AE C9          0063*      ret
0400AF             0064*  @beg:
0400AF 17 00 85    0065*              db 23, 0, $85
0400B2 00          0066*  @channel:   db 0
0400B3 08          0067*              db 8 ; command 8: enable channel
0400B4             0068*  @end:
0400B4             0069*  
0400B4             0070*  ; disable all but the three default sound channels
0400B4             0071*  ; inputs: max_channels set
0400B4             0072*  ; outputs: none
0400B4             0073*  ; destroys: ah,hl,bc
0400B4             0074*  vdu_disable_channels:
0400B4 3E 06       0075*      ld a,max_channels
0400B6 D6 03       0076*      sub 3 ; subtract number of default channels already enabled
0400B8 F2 BF 00 04 0077*      jp p,@loop
0400BC C9          0078*      ret
0400BD 3E 03       0079*      ld a,3 ; first non-default channel
0400BF             0080*  @loop:
0400BF 32 DA 00 04 0081*      ld (@channel),a
0400C3 21 D7 00 04 0082*      ld hl,@beg
0400C7 01 05 00 00 0083*      ld bc,@end-@beg
0400CB F5          0084*      push af
0400CC 5B DF       0085*      rst.lil $18
0400CE F1          0086*      pop af
0400CF 3C          0087*      inc a
0400D0 FE 06       0088*      cp max_channels
0400D2 C2 BF 00 04 0089*      jp nz,@loop
0400D6 C9          0090*      ret
0400D7             0091*  @beg:
0400D7 17 00 85    0092*      db 23, 0, $85
0400DA 00          0093*  @channel: db 0
0400DB 09          0094*      db 9 ; command 9: disable channel
0400DC             0095*  @end:
0400DC             0096*  
0400DC             0097*  
0400DC             0098*  ; ############################################################
0400DC             0099*  ; VDU SOUND API
0400DC             0100*  ; ############################################################
0400DC             0101*  ; Command 0: Play note
0400DC             0102*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0400DC             0103*      MACRO PLAY_NOTE channel, volume, frequency, duration
0400DC             0104*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
0400DC             0105*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
0400DC             0106*      rst.lil $18
0400DC             0107*      jr @PLAY_NOTE_END
0400DC             0108*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
0400DC             0109*                   db channel                  ; Channel, 0 (commented out)
0400DC             0110*                   db 0                        ; Play note command
0400DC             0111*                   db volume                   ; Volume
0400DC             0112*                   dw frequency                ; Frequency
0400DC             0113*                   dw duration                 ; Duration
0400DC             0114*  @PLAY_NOTE_END:
0400DC             0115*      ENDMACRO
0400DC             0116*  
0400DC             0117*      MACRO MUTE_CHANNEL channel
0400DC             0118*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
0400DC             0119*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
0400DC             0120*      rst.lil $18
0400DC             0121*      jr @MUTE_CHANNEL_END
0400DC             0122*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
0400DC             0123*                     db channel                ; Channel, 0 (commented out)
0400DC             0124*                     db 2                      ; Set volume command
0400DC             0125*                     db 0                      ; Volume (mute)
0400DC             0126*  @MUTE_CHANNEL_END:
0400DC             0127*      ENDMACRO
0400DC             0128*  
0400DC             0129*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
0400DC             0130*  vdu_play_note:
0400DC 79          0131*      ld a,c
0400DD 32 FD 00 04 0132*      ld (@channel),a
0400E1 78          0133*      ld a,b
0400E2 32 FF 00 04 0134*      ld (@volume),a
0400E6 22 00 01 04 0135*      ld (@frequency),hl
0400EA ED 53 02 01 0136*      ld (@duration),de
       04          
0400EF 21 FA 00 04 0137*      ld hl,@cmd
0400F3 01 0A 00 00 0138*      ld bc,@end-@cmd
0400F7 5B DF       0139*      rst.lil $18
0400F9 C9          0140*      ret
0400FA 17 00 85    0141*  @cmd:       db 23, 0, 0x85
0400FD 00          0142*  @channel:   db 0x00
0400FE 00          0143*              db 0x00 ; play note command
0400FF 00          0144*  @volume:    db 0x00
040100 00 00       0145*  @frequency: dw 0x0000
040102 00 00       0146*  @duration:  dw 0x0000
040104 00          0147*  @end:       db 0x00 ; padding
040105             0148*  
040105             0149*  ; Command 1: Status
040105             0150*  ; VDU 23, 0, &85, channel, 1
040105             0151*  ; inputs: a = channel
040105             0152*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
040105             0153*  ; Bit 	Name 	Meaning
040105             0154*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
040105             0155*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
040105             0156*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
040105             0157*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
040105             0158*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
040105             0159*  
040105             0160*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
040105             0161*  vdu_channel_status:
040105 32 17 01 04 0162*      ld (@channel),a
040109 21 14 01 04 0163*      ld hl,@cmd
04010D 01 05 00 00 0164*      ld bc,@end-@cmd
040111 5B DF       0165*      rst.lil $18
040113 C9          0166*      ret
040114 17 00 85    0167*  @cmd:       db 23, 0, 0x85
040117 00          0168*  @channel:   db 0x00
040118 01          0169*              db 0x01 ; get channel status command
040119             0170*  @end:
040119             0171*  
040119             0172*  ; VDU 23, 0, &85, channel, 2, volume
040119             0173*  ; inputs: c = channel, b = volume
040119             0174*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
040119             0175*  
040119             0176*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
040119             0177*  
040119             0178*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
040119             0179*  vdu_channel_volume:
040119 79          0180*      ld a,c
04011A 32 31 01 04 0181*      ld (@channel),a
04011E 78          0182*      ld a,b
04011F 32 33 01 04 0183*      ld (@volume),a
040123 21 2E 01 04 0184*      ld hl,@cmd
040127 01 06 00 00 0185*      ld bc,@end-@cmd
04012B 5B DF       0186*      rst.lil $18
04012D C9          0187*      ret
04012E 17 00 85    0188*  @cmd:       db 23, 0, 0x85
040131 00          0189*  @channel:   db 0x00
040132 02          0190*              db 0x02 ; set volume command
040133 00          0191*  @volume:    db 0x00
040134             0192*  @end:
040134             0193*  
040134             0194*  ; VDU 23, 0, &85, channel, 3, frequency;
040134             0195*  
040134             0196*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
040134             0197*  
040134             0198*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
040134             0199*  
040134             0200*  ; Returns 1 on success, 0 for failure.
040134             0201*  vdu_channel_frequency:
040134 79          0202*      ld a,c
040135 32 4C 01 04 0203*      ld (@channel),a
040139 ED 53 4E 01 0204*      ld (@frequency),de
       04          
04013E 21 49 01 04 0205*      ld hl,@cmd
040142 01 07 00 00 0206*      ld bc,@end-@cmd
040146 5B DF       0207*      rst.lil $18
040148 C9          0208*      ret
040149 17 00 85    0209*  @cmd:       db 23, 0, 0x85
04014C 00          0210*  @channel:   db 0x00
04014D 03          0211*              db 0x03 ; set frequency command
04014E 00 00       0212*  @frequency: dw 0x0000
040150 00          0213*  @end:       db 0x00 ; padding
040151             0214*  
040151             0215*  
040151             0216*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040151             0217*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040151             0218*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040151             0219*  
040151             0220*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040151             0221*  
040151             0222*  ; By default a channel is set to use waveform 0 (square wave).
040151             0223*  
040151             0224*  ; Valid waveform values are as follows:
040151             0225*  ; Value 	Waveform
040151             0226*  ; 0 	Square wave
040151             0227*  ; 1 	Triangle wave
040151             0228*  ; 2 	Sawtooth wave
040151             0229*  ; 3 	Sine wave
040151             0230*  ; 4 	Noise (simple white noise with no frequency support)
040151             0231*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040151             0232*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040151             0233*  
040151             0234*  vdu_channel_waveform:
040151 79          0235*      ld a,c
040152 32 77 01 04 0236*      ld (@channel),a
040156 78          0237*      ld a,b
040157 32 79 01 04 0238*      ld (@waveform),a
04015B FE 08       0239*      cp 8 ; check if the waveform is a sample
04015D 28 06       0240*      jr z, @sample
04015F 01 06 00 00 0241*      ld bc,@bufferId-@cmd
040163 18 08       0242*      jr @sendToVdu
040165             0243*  @sample:
040165 22 7A 01 04 0244*      ld (@bufferId),hl
040169 01 08 00 00 0245*      ld bc,@end-@cmd
04016D             0246*  @sendToVdu:
04016D 21 74 01 04 0247*      ld hl,@cmd
040171 5B DF       0248*      rst.lil $18
040173 C9          0249*      ret
040174 17 00 85    0250*  @cmd:       db 23, 0, 0x85
040177 00          0251*  @channel:   db 0x00
040178 04          0252*              db 0x04 ; set waveform command
040179 00          0253*  @waveform:  db 0x00
04017A 00 00       0254*  @bufferId:  dw 0x0000
04017C 00          0255*  @end:       db 0x00 ; padding
04017D             0256*  
04017D             0257*  
04017D             0258*  
04017D             0259*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04017D             0260*  ; inputs: hl = bufferId; a = format
04017D             0261*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04017D             0262*  ; Value 	Description
04017D             0263*  ; 0 	8-bit signed, 16KHz
04017D             0264*  ; 1 	8-bit unsigned, 16KHz
04017D             0265*  vdu_buffer_to_sound:
04017D 22 96 01 04 0266*      ld (@bufferId),hl
040181 32 98 01 04 0267*      ld (@format),a
040185 21 90 01 04 0268*      ld hl,@cmd
040189 01 09 00 00 0269*      ld bc,@end-@cmd
04018D 5B DF       0270*      rst.lil $18
04018F C9          0271*      ret
040190 17 00 85    0272*  @cmd:       db 23, 0, 0x85
040193 00          0273*              db 0x00 ; a magic number that is always 0
040194 05          0274*              db 0x05 ; buffer to sound command
040195 02          0275*              db 0x02 ; a magic number that is always 2
040196 00 00       0276*  @bufferId:  dw 0x0000
040198 00          0277*  @format:    db 0x00
040199             0278*  @end:
040199             0279*  
040199             0280*  
040199             0281*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040199             0282*  vdu_play_sample:
040199             0283*      ; populate input parameters
040199 79          0284*      ld a,c
04019A 32 C4 01 04 0285*      ld (@channel0),a
04019E 32 CC 01 04 0286*      ld (@channel1),a
0401A2 78          0287*      ld a,b
0401A3 32 CE 01 04 0288*      ld (@volume),a
0401A7 ED 53 CF 01 0289*      ld (@frequency),de
       04          
0401AC 22 C7 01 04 0290*      ld (@bufferId),hl
0401B0             0291*      ; clean up byte that got stomped on by bufferId load from hl
0401B0 3E 17       0292*      ld a,23
0401B2 32 C9 01 04 0293*      ld (@cmd1),a
0401B6             0294*      ; prep the vdu command string
0401B6 21 C1 01 04 0295*      ld hl, @cmd0
0401BA 01 12 00 00 0296*      ld bc, @end - @cmd0
0401BE 5B DF       0297*      rst.lil $18
0401C0 C9          0298*      ret
0401C1 17 00 85    0299*  @cmd0:       db 23, 0, 0x85
0401C4 00          0300*  @channel0:   db 0x00
0401C5 04          0301*               db 0x04 ; set waveform command
0401C6 08          0302*  @waveform:   db 0x08 ; sample
0401C7 00 00       0303*  @bufferId:   dw 0x0000
0401C9 17 00 85    0304*  @cmd1:       db 23, 0, 0x85
0401CC 00          0305*  @channel1:   db 0x00
0401CD 00          0306*               db 0x00 ; play note command
0401CE 00          0307*  @volume:     db 0x00
0401CF 00 00       0308*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0401D1 00 00       0309*  @duration:   dw 0x0000 ; milliseconds
0401D3 00          0310*  @end:        db 0x00 ; padding
0401D4             0013   	include "src/asm/images.inc"
0401D4             0001*  ; This file is created by build_92_asm_load_tiles.py, do not edit it!
0401D4             0002*  
0401D4             0003*  ; cube buffer ids:
0401D4             0004*  BUF_10: equ 0x000A
0401D4             0005*  BUF_11: equ 0x000B
0401D4             0006*  BUF_12: equ 0x000C
0401D4             0007*  BUF_13: equ 0x000D
0401D4             0008*  BUF_14: equ 0x000E
0401D4             0009*  BUF_15: equ 0x000F
0401D4             0010*  BUF_16: equ 0x0010
0401D4             0011*  BUF_17: equ 0x0011
0401D4             0012*  BUF_57: equ 0x0039
0401D4             0013*  BUF_58: equ 0x003A
0401D4             0014*  BUF_59: equ 0x003B
0401D4             0015*  
0401D4             0016*  cube_num_tiles: equ 11
0401D4             0017*  
0401D4             0018*  ; cube buffer id reverse lookup:
0401D4             0019*  cube_buffer_id_lut:
0401D4 0A 00 00    0020*  	dl BUF_10
0401D7 0B 00 00    0021*  	dl BUF_11
0401DA 0C 00 00    0022*  	dl BUF_12
0401DD 0D 00 00    0023*  	dl BUF_13
0401E0 0E 00 00    0024*  	dl BUF_14
0401E3 0F 00 00    0025*  	dl BUF_15
0401E6 10 00 00    0026*  	dl BUF_16
0401E9 11 00 00    0027*  	dl BUF_17
0401EC 39 00 00    0028*  	dl BUF_57
0401EF 3A 00 00    0029*  	dl BUF_58
0401F2 3B 00 00    0030*  	dl BUF_59
0401F5             0031*  
0401F5             0032*  ; cube load routines jump table:
0401F5             0033*  cube_load_tiles_table:
0401F5 16 02 04    0034*  	dl ld_10
0401F8 40 02 04    0035*  	dl ld_11
0401FB 6A 02 04    0036*  	dl ld_12
0401FE 94 02 04    0037*  	dl ld_13
040201 BE 02 04    0038*  	dl ld_14
040204 E8 02 04    0039*  	dl ld_15
040207 12 03 04    0040*  	dl ld_16
04020A 3C 03 04    0041*  	dl ld_17
04020D 66 03 04    0042*  	dl ld_57
040210 90 03 04    0043*  	dl ld_58
040213 BA 03 04    0044*  	dl ld_59
040216             0045*  
040216             0046*  ; Import cube .rgba8 bitmap files and load them into VDP buffers
040216             0047*  
040216             0048*  ld_10:
040216 21 E4 03 04 0049*  	ld hl,F10
04021A 22 ED 37 04 0050*  	ld (cur_filename),hl
04021E 11 F5 43 04 0051*  	ld de,filedata
040222 01 00 00 01 0052*  	ld bc,65536
040226 3E 01       0053*  	ld a,mos_load
040228 5B CF       0054*  	RST.LIL 08h
04022A 21 0A 00 00 0055*  	ld hl,BUF_10
04022E 01 10 00 00 0056*  	ld bc,16
040232 11 10 00 00 0057*  	ld de,16
040236 DD 21 00 04 0058*  	ld ix,1024
       00          
04023B CD 76 39 04 0059*  	call vdu_load_img_8
04023F C9          0060*  	ret
040240             0061*  
040240             0062*  ld_11:
040240 21 F3 03 04 0063*  	ld hl,F11
040244 22 ED 37 04 0064*  	ld (cur_filename),hl
040248 11 F5 43 04 0065*  	ld de,filedata
04024C 01 00 00 01 0066*  	ld bc,65536
040250 3E 01       0067*  	ld a,mos_load
040252 5B CF       0068*  	RST.LIL 08h
040254 21 0B 00 00 0069*  	ld hl,BUF_11
040258 01 10 00 00 0070*  	ld bc,16
04025C 11 10 00 00 0071*  	ld de,16
040260 DD 21 00 04 0072*  	ld ix,1024
       00          
040265 CD 76 39 04 0073*  	call vdu_load_img_8
040269 C9          0074*  	ret
04026A             0075*  
04026A             0076*  ld_12:
04026A 21 02 04 04 0077*  	ld hl,F12
04026E 22 ED 37 04 0078*  	ld (cur_filename),hl
040272 11 F5 43 04 0079*  	ld de,filedata
040276 01 00 00 01 0080*  	ld bc,65536
04027A 3E 01       0081*  	ld a,mos_load
04027C 5B CF       0082*  	RST.LIL 08h
04027E 21 0C 00 00 0083*  	ld hl,BUF_12
040282 01 10 00 00 0084*  	ld bc,16
040286 11 10 00 00 0085*  	ld de,16
04028A DD 21 00 04 0086*  	ld ix,1024
       00          
04028F CD 76 39 04 0087*  	call vdu_load_img_8
040293 C9          0088*  	ret
040294             0089*  
040294             0090*  ld_13:
040294 21 11 04 04 0091*  	ld hl,F13
040298 22 ED 37 04 0092*  	ld (cur_filename),hl
04029C 11 F5 43 04 0093*  	ld de,filedata
0402A0 01 00 00 01 0094*  	ld bc,65536
0402A4 3E 01       0095*  	ld a,mos_load
0402A6 5B CF       0096*  	RST.LIL 08h
0402A8 21 0D 00 00 0097*  	ld hl,BUF_13
0402AC 01 10 00 00 0098*  	ld bc,16
0402B0 11 10 00 00 0099*  	ld de,16
0402B4 DD 21 00 04 0100*  	ld ix,1024
       00          
0402B9 CD 76 39 04 0101*  	call vdu_load_img_8
0402BD C9          0102*  	ret
0402BE             0103*  
0402BE             0104*  ld_14:
0402BE 21 20 04 04 0105*  	ld hl,F14
0402C2 22 ED 37 04 0106*  	ld (cur_filename),hl
0402C6 11 F5 43 04 0107*  	ld de,filedata
0402CA 01 00 00 01 0108*  	ld bc,65536
0402CE 3E 01       0109*  	ld a,mos_load
0402D0 5B CF       0110*  	RST.LIL 08h
0402D2 21 0E 00 00 0111*  	ld hl,BUF_14
0402D6 01 10 00 00 0112*  	ld bc,16
0402DA 11 10 00 00 0113*  	ld de,16
0402DE DD 21 00 04 0114*  	ld ix,1024
       00          
0402E3 CD 76 39 04 0115*  	call vdu_load_img_8
0402E7 C9          0116*  	ret
0402E8             0117*  
0402E8             0118*  ld_15:
0402E8 21 2F 04 04 0119*  	ld hl,F15
0402EC 22 ED 37 04 0120*  	ld (cur_filename),hl
0402F0 11 F5 43 04 0121*  	ld de,filedata
0402F4 01 00 00 01 0122*  	ld bc,65536
0402F8 3E 01       0123*  	ld a,mos_load
0402FA 5B CF       0124*  	RST.LIL 08h
0402FC 21 0F 00 00 0125*  	ld hl,BUF_15
040300 01 10 00 00 0126*  	ld bc,16
040304 11 10 00 00 0127*  	ld de,16
040308 DD 21 00 04 0128*  	ld ix,1024
       00          
04030D CD 76 39 04 0129*  	call vdu_load_img_8
040311 C9          0130*  	ret
040312             0131*  
040312             0132*  ld_16:
040312 21 3E 04 04 0133*  	ld hl,F16
040316 22 ED 37 04 0134*  	ld (cur_filename),hl
04031A 11 F5 43 04 0135*  	ld de,filedata
04031E 01 00 00 01 0136*  	ld bc,65536
040322 3E 01       0137*  	ld a,mos_load
040324 5B CF       0138*  	RST.LIL 08h
040326 21 10 00 00 0139*  	ld hl,BUF_16
04032A 01 10 00 00 0140*  	ld bc,16
04032E 11 10 00 00 0141*  	ld de,16
040332 DD 21 00 04 0142*  	ld ix,1024
       00          
040337 CD 76 39 04 0143*  	call vdu_load_img_8
04033B C9          0144*  	ret
04033C             0145*  
04033C             0146*  ld_17:
04033C 21 4D 04 04 0147*  	ld hl,F17
040340 22 ED 37 04 0148*  	ld (cur_filename),hl
040344 11 F5 43 04 0149*  	ld de,filedata
040348 01 00 00 01 0150*  	ld bc,65536
04034C 3E 01       0151*  	ld a,mos_load
04034E 5B CF       0152*  	RST.LIL 08h
040350 21 11 00 00 0153*  	ld hl,BUF_17
040354 01 10 00 00 0154*  	ld bc,16
040358 11 10 00 00 0155*  	ld de,16
04035C DD 21 00 04 0156*  	ld ix,1024
       00          
040361 CD 76 39 04 0157*  	call vdu_load_img_8
040365 C9          0158*  	ret
040366             0159*  
040366             0160*  ld_57:
040366 21 5C 04 04 0161*  	ld hl,F57
04036A 22 ED 37 04 0162*  	ld (cur_filename),hl
04036E 11 F5 43 04 0163*  	ld de,filedata
040372 01 00 00 01 0164*  	ld bc,65536
040376 3E 01       0165*  	ld a,mos_load
040378 5B CF       0166*  	RST.LIL 08h
04037A 21 39 00 00 0167*  	ld hl,BUF_57
04037E 01 10 00 00 0168*  	ld bc,16
040382 11 10 00 00 0169*  	ld de,16
040386 DD 21 00 04 0170*  	ld ix,1024
       00          
04038B CD 76 39 04 0171*  	call vdu_load_img_8
04038F C9          0172*  	ret
040390             0173*  
040390             0174*  ld_58:
040390 21 6B 04 04 0175*  	ld hl,F58
040394 22 ED 37 04 0176*  	ld (cur_filename),hl
040398 11 F5 43 04 0177*  	ld de,filedata
04039C 01 00 00 01 0178*  	ld bc,65536
0403A0 3E 01       0179*  	ld a,mos_load
0403A2 5B CF       0180*  	RST.LIL 08h
0403A4 21 3A 00 00 0181*  	ld hl,BUF_58
0403A8 01 10 00 00 0182*  	ld bc,16
0403AC 11 10 00 00 0183*  	ld de,16
0403B0 DD 21 00 04 0184*  	ld ix,1024
       00          
0403B5 CD 76 39 04 0185*  	call vdu_load_img_8
0403B9 C9          0186*  	ret
0403BA             0187*  
0403BA             0188*  ld_59:
0403BA 21 7A 04 04 0189*  	ld hl,F59
0403BE 22 ED 37 04 0190*  	ld (cur_filename),hl
0403C2 11 F5 43 04 0191*  	ld de,filedata
0403C6 01 00 00 01 0192*  	ld bc,65536
0403CA 3E 01       0193*  	ld a,mos_load
0403CC 5B CF       0194*  	RST.LIL 08h
0403CE 21 3B 00 00 0195*  	ld hl,BUF_59
0403D2 01 10 00 00 0196*  	ld bc,16
0403D6 11 10 00 00 0197*  	ld de,16
0403DA DD 21 00 04 0198*  	ld ix,1024
       00          
0403DF CD 76 39 04 0199*  	call vdu_load_img_8
0403E3 C9          0200*  	ret
0403E4             0201*  
0403E4             0202*  ; File name lookups:
0403E4 74 69 6C 65 0203*  F10: db "tiles/10.rgba8",0
       73 2F 31 30 
       2E 72 67 62 
       61 38 00    
0403F3 74 69 6C 65 0204*  F11: db "tiles/11.rgba8",0
       73 2F 31 31 
       2E 72 67 62 
       61 38 00    
040402 74 69 6C 65 0205*  F12: db "tiles/12.rgba8",0
       73 2F 31 32 
       2E 72 67 62 
       61 38 00    
040411 74 69 6C 65 0206*  F13: db "tiles/13.rgba8",0
       73 2F 31 33 
       2E 72 67 62 
       61 38 00    
040420 74 69 6C 65 0207*  F14: db "tiles/14.rgba8",0
       73 2F 31 34 
       2E 72 67 62 
       61 38 00    
04042F 74 69 6C 65 0208*  F15: db "tiles/15.rgba8",0
       73 2F 31 35 
       2E 72 67 62 
       61 38 00    
04043E 74 69 6C 65 0209*  F16: db "tiles/16.rgba8",0
       73 2F 31 36 
       2E 72 67 62 
       61 38 00    
04044D 74 69 6C 65 0210*  F17: db "tiles/17.rgba8",0
       73 2F 31 37 
       2E 72 67 62 
       61 38 00    
04045C 74 69 6C 65 0211*  F57: db "tiles/57.rgba8",0
       73 2F 35 37 
       2E 72 67 62 
       61 38 00    
04046B 74 69 6C 65 0212*  F58: db "tiles/58.rgba8",0
       73 2F 35 38 
       2E 72 67 62 
       61 38 00    
04047A 74 69 6C 65 0213*  F59: db "tiles/59.rgba8",0
       73 2F 35 39 
       2E 72 67 62 
       61 38 00    
040489             0214*  
040489             0215*  ; sprite buffer ids:
040489             0216*  BUF_20: equ 0x0014
040489             0217*  BUF_21: equ 0x0015
040489             0218*  BUF_22: equ 0x0016
040489             0219*  BUF_23: equ 0x0017
040489             0220*  BUF_24: equ 0x0018
040489             0221*  BUF_40: equ 0x0028
040489             0222*  BUF_41: equ 0x0029
040489             0223*  BUF_42: equ 0x002A
040489             0224*  BUF_43: equ 0x002B
040489             0225*  BUF_44: equ 0x002C
040489             0226*  BUF_45: equ 0x002D
040489             0227*  BUF_46: equ 0x002E
040489             0228*  BUF_47: equ 0x002F
040489             0229*  BUF_48: equ 0x0030
040489             0230*  BUF_49: equ 0x0031
040489             0231*  BUF_50: equ 0x0032
040489             0232*  BUF_51: equ 0x0033
040489             0233*  BUF_52: equ 0x0034
040489             0234*  BUF_56: equ 0x0038
040489             0235*  BUF_60: equ 0x003C
040489             0236*  
040489             0237*  sprite_num_tiles: equ 20
040489             0238*  
040489             0239*  ; sprite buffer id reverse lookup:
040489             0240*  sprite_buffer_id_lut:
040489 14 00 00    0241*  	dl BUF_20
04048C 15 00 00    0242*  	dl BUF_21
04048F 16 00 00    0243*  	dl BUF_22
040492 17 00 00    0244*  	dl BUF_23
040495 18 00 00    0245*  	dl BUF_24
040498 28 00 00    0246*  	dl BUF_40
04049B 29 00 00    0247*  	dl BUF_41
04049E 2A 00 00    0248*  	dl BUF_42
0404A1 2B 00 00    0249*  	dl BUF_43
0404A4 2C 00 00    0250*  	dl BUF_44
0404A7 2D 00 00    0251*  	dl BUF_45
0404AA 2E 00 00    0252*  	dl BUF_46
0404AD 2F 00 00    0253*  	dl BUF_47
0404B0 30 00 00    0254*  	dl BUF_48
0404B3 31 00 00    0255*  	dl BUF_49
0404B6 32 00 00    0256*  	dl BUF_50
0404B9 33 00 00    0257*  	dl BUF_51
0404BC 34 00 00    0258*  	dl BUF_52
0404BF 38 00 00    0259*  	dl BUF_56
0404C2 3C 00 00    0260*  	dl BUF_60
0404C5             0261*  
0404C5             0262*  ; sprite load routines jump table:
0404C5             0263*  sprite_load_tiles_table:
0404C5 01 05 04    0264*  	dl ld_20
0404C8 2B 05 04    0265*  	dl ld_21
0404CB 55 05 04    0266*  	dl ld_22
0404CE 7F 05 04    0267*  	dl ld_23
0404D1 A9 05 04    0268*  	dl ld_24
0404D4 D3 05 04    0269*  	dl ld_40
0404D7 FD 05 04    0270*  	dl ld_41
0404DA 27 06 04    0271*  	dl ld_42
0404DD 51 06 04    0272*  	dl ld_43
0404E0 7B 06 04    0273*  	dl ld_44
0404E3 A5 06 04    0274*  	dl ld_45
0404E6 CF 06 04    0275*  	dl ld_46
0404E9 F9 06 04    0276*  	dl ld_47
0404EC 23 07 04    0277*  	dl ld_48
0404EF 4D 07 04    0278*  	dl ld_49
0404F2 77 07 04    0279*  	dl ld_50
0404F5 A1 07 04    0280*  	dl ld_51
0404F8 CB 07 04    0281*  	dl ld_52
0404FB F5 07 04    0282*  	dl ld_56
0404FE 1F 08 04    0283*  	dl ld_60
040501             0284*  
040501             0285*  ; Import sprite .rgba8 bitmap files and load them into VDP buffers
040501             0286*  
040501             0287*  ld_20:
040501 21 49 08 04 0288*  	ld hl,F20
040505 22 ED 37 04 0289*  	ld (cur_filename),hl
040509 11 F5 43 04 0290*  	ld de,filedata
04050D 01 00 00 01 0291*  	ld bc,65536
040511 3E 01       0292*  	ld a,mos_load
040513 5B CF       0293*  	RST.LIL 08h
040515 21 14 00 00 0294*  	ld hl,BUF_20
040519 01 10 00 00 0295*  	ld bc,16
04051D 11 10 00 00 0296*  	ld de,16
040521 DD 21 00 04 0297*  	ld ix,1024
       00          
040526 CD 76 39 04 0298*  	call vdu_load_img_8
04052A C9          0299*  	ret
04052B             0300*  
04052B             0301*  ld_21:
04052B 21 58 08 04 0302*  	ld hl,F21
04052F 22 ED 37 04 0303*  	ld (cur_filename),hl
040533 11 F5 43 04 0304*  	ld de,filedata
040537 01 00 00 01 0305*  	ld bc,65536
04053B 3E 01       0306*  	ld a,mos_load
04053D 5B CF       0307*  	RST.LIL 08h
04053F 21 15 00 00 0308*  	ld hl,BUF_21
040543 01 10 00 00 0309*  	ld bc,16
040547 11 10 00 00 0310*  	ld de,16
04054B DD 21 00 04 0311*  	ld ix,1024
       00          
040550 CD 76 39 04 0312*  	call vdu_load_img_8
040554 C9          0313*  	ret
040555             0314*  
040555             0315*  ld_22:
040555 21 67 08 04 0316*  	ld hl,F22
040559 22 ED 37 04 0317*  	ld (cur_filename),hl
04055D 11 F5 43 04 0318*  	ld de,filedata
040561 01 00 00 01 0319*  	ld bc,65536
040565 3E 01       0320*  	ld a,mos_load
040567 5B CF       0321*  	RST.LIL 08h
040569 21 16 00 00 0322*  	ld hl,BUF_22
04056D 01 10 00 00 0323*  	ld bc,16
040571 11 10 00 00 0324*  	ld de,16
040575 DD 21 00 04 0325*  	ld ix,1024
       00          
04057A CD 76 39 04 0326*  	call vdu_load_img_8
04057E C9          0327*  	ret
04057F             0328*  
04057F             0329*  ld_23:
04057F 21 76 08 04 0330*  	ld hl,F23
040583 22 ED 37 04 0331*  	ld (cur_filename),hl
040587 11 F5 43 04 0332*  	ld de,filedata
04058B 01 00 00 01 0333*  	ld bc,65536
04058F 3E 01       0334*  	ld a,mos_load
040591 5B CF       0335*  	RST.LIL 08h
040593 21 17 00 00 0336*  	ld hl,BUF_23
040597 01 10 00 00 0337*  	ld bc,16
04059B 11 10 00 00 0338*  	ld de,16
04059F DD 21 00 04 0339*  	ld ix,1024
       00          
0405A4 CD 76 39 04 0340*  	call vdu_load_img_8
0405A8 C9          0341*  	ret
0405A9             0342*  
0405A9             0343*  ld_24:
0405A9 21 85 08 04 0344*  	ld hl,F24
0405AD 22 ED 37 04 0345*  	ld (cur_filename),hl
0405B1 11 F5 43 04 0346*  	ld de,filedata
0405B5 01 00 00 01 0347*  	ld bc,65536
0405B9 3E 01       0348*  	ld a,mos_load
0405BB 5B CF       0349*  	RST.LIL 08h
0405BD 21 18 00 00 0350*  	ld hl,BUF_24
0405C1 01 10 00 00 0351*  	ld bc,16
0405C5 11 10 00 00 0352*  	ld de,16
0405C9 DD 21 00 04 0353*  	ld ix,1024
       00          
0405CE CD 76 39 04 0354*  	call vdu_load_img_8
0405D2 C9          0355*  	ret
0405D3             0356*  
0405D3             0357*  ld_40:
0405D3 21 94 08 04 0358*  	ld hl,F40
0405D7 22 ED 37 04 0359*  	ld (cur_filename),hl
0405DB 11 F5 43 04 0360*  	ld de,filedata
0405DF 01 00 00 01 0361*  	ld bc,65536
0405E3 3E 01       0362*  	ld a,mos_load
0405E5 5B CF       0363*  	RST.LIL 08h
0405E7 21 28 00 00 0364*  	ld hl,BUF_40
0405EB 01 10 00 00 0365*  	ld bc,16
0405EF 11 10 00 00 0366*  	ld de,16
0405F3 DD 21 00 04 0367*  	ld ix,1024
       00          
0405F8 CD 76 39 04 0368*  	call vdu_load_img_8
0405FC C9          0369*  	ret
0405FD             0370*  
0405FD             0371*  ld_41:
0405FD 21 A3 08 04 0372*  	ld hl,F41
040601 22 ED 37 04 0373*  	ld (cur_filename),hl
040605 11 F5 43 04 0374*  	ld de,filedata
040609 01 00 00 01 0375*  	ld bc,65536
04060D 3E 01       0376*  	ld a,mos_load
04060F 5B CF       0377*  	RST.LIL 08h
040611 21 29 00 00 0378*  	ld hl,BUF_41
040615 01 10 00 00 0379*  	ld bc,16
040619 11 10 00 00 0380*  	ld de,16
04061D DD 21 00 04 0381*  	ld ix,1024
       00          
040622 CD 76 39 04 0382*  	call vdu_load_img_8
040626 C9          0383*  	ret
040627             0384*  
040627             0385*  ld_42:
040627 21 B2 08 04 0386*  	ld hl,F42
04062B 22 ED 37 04 0387*  	ld (cur_filename),hl
04062F 11 F5 43 04 0388*  	ld de,filedata
040633 01 00 00 01 0389*  	ld bc,65536
040637 3E 01       0390*  	ld a,mos_load
040639 5B CF       0391*  	RST.LIL 08h
04063B 21 2A 00 00 0392*  	ld hl,BUF_42
04063F 01 10 00 00 0393*  	ld bc,16
040643 11 10 00 00 0394*  	ld de,16
040647 DD 21 00 04 0395*  	ld ix,1024
       00          
04064C CD 76 39 04 0396*  	call vdu_load_img_8
040650 C9          0397*  	ret
040651             0398*  
040651             0399*  ld_43:
040651 21 C1 08 04 0400*  	ld hl,F43
040655 22 ED 37 04 0401*  	ld (cur_filename),hl
040659 11 F5 43 04 0402*  	ld de,filedata
04065D 01 00 00 01 0403*  	ld bc,65536
040661 3E 01       0404*  	ld a,mos_load
040663 5B CF       0405*  	RST.LIL 08h
040665 21 2B 00 00 0406*  	ld hl,BUF_43
040669 01 10 00 00 0407*  	ld bc,16
04066D 11 10 00 00 0408*  	ld de,16
040671 DD 21 00 04 0409*  	ld ix,1024
       00          
040676 CD 76 39 04 0410*  	call vdu_load_img_8
04067A C9          0411*  	ret
04067B             0412*  
04067B             0413*  ld_44:
04067B 21 D0 08 04 0414*  	ld hl,F44
04067F 22 ED 37 04 0415*  	ld (cur_filename),hl
040683 11 F5 43 04 0416*  	ld de,filedata
040687 01 00 00 01 0417*  	ld bc,65536
04068B 3E 01       0418*  	ld a,mos_load
04068D 5B CF       0419*  	RST.LIL 08h
04068F 21 2C 00 00 0420*  	ld hl,BUF_44
040693 01 10 00 00 0421*  	ld bc,16
040697 11 10 00 00 0422*  	ld de,16
04069B DD 21 00 04 0423*  	ld ix,1024
       00          
0406A0 CD 76 39 04 0424*  	call vdu_load_img_8
0406A4 C9          0425*  	ret
0406A5             0426*  
0406A5             0427*  ld_45:
0406A5 21 DF 08 04 0428*  	ld hl,F45
0406A9 22 ED 37 04 0429*  	ld (cur_filename),hl
0406AD 11 F5 43 04 0430*  	ld de,filedata
0406B1 01 00 00 01 0431*  	ld bc,65536
0406B5 3E 01       0432*  	ld a,mos_load
0406B7 5B CF       0433*  	RST.LIL 08h
0406B9 21 2D 00 00 0434*  	ld hl,BUF_45
0406BD 01 10 00 00 0435*  	ld bc,16
0406C1 11 10 00 00 0436*  	ld de,16
0406C5 DD 21 00 04 0437*  	ld ix,1024
       00          
0406CA CD 76 39 04 0438*  	call vdu_load_img_8
0406CE C9          0439*  	ret
0406CF             0440*  
0406CF             0441*  ld_46:
0406CF 21 EE 08 04 0442*  	ld hl,F46
0406D3 22 ED 37 04 0443*  	ld (cur_filename),hl
0406D7 11 F5 43 04 0444*  	ld de,filedata
0406DB 01 00 00 01 0445*  	ld bc,65536
0406DF 3E 01       0446*  	ld a,mos_load
0406E1 5B CF       0447*  	RST.LIL 08h
0406E3 21 2E 00 00 0448*  	ld hl,BUF_46
0406E7 01 10 00 00 0449*  	ld bc,16
0406EB 11 10 00 00 0450*  	ld de,16
0406EF DD 21 00 04 0451*  	ld ix,1024
       00          
0406F4 CD 76 39 04 0452*  	call vdu_load_img_8
0406F8 C9          0453*  	ret
0406F9             0454*  
0406F9             0455*  ld_47:
0406F9 21 FD 08 04 0456*  	ld hl,F47
0406FD 22 ED 37 04 0457*  	ld (cur_filename),hl
040701 11 F5 43 04 0458*  	ld de,filedata
040705 01 00 00 01 0459*  	ld bc,65536
040709 3E 01       0460*  	ld a,mos_load
04070B 5B CF       0461*  	RST.LIL 08h
04070D 21 2F 00 00 0462*  	ld hl,BUF_47
040711 01 10 00 00 0463*  	ld bc,16
040715 11 10 00 00 0464*  	ld de,16
040719 DD 21 00 04 0465*  	ld ix,1024
       00          
04071E CD 76 39 04 0466*  	call vdu_load_img_8
040722 C9          0467*  	ret
040723             0468*  
040723             0469*  ld_48:
040723 21 0C 09 04 0470*  	ld hl,F48
040727 22 ED 37 04 0471*  	ld (cur_filename),hl
04072B 11 F5 43 04 0472*  	ld de,filedata
04072F 01 00 00 01 0473*  	ld bc,65536
040733 3E 01       0474*  	ld a,mos_load
040735 5B CF       0475*  	RST.LIL 08h
040737 21 30 00 00 0476*  	ld hl,BUF_48
04073B 01 10 00 00 0477*  	ld bc,16
04073F 11 10 00 00 0478*  	ld de,16
040743 DD 21 00 04 0479*  	ld ix,1024
       00          
040748 CD 76 39 04 0480*  	call vdu_load_img_8
04074C C9          0481*  	ret
04074D             0482*  
04074D             0483*  ld_49:
04074D 21 1B 09 04 0484*  	ld hl,F49
040751 22 ED 37 04 0485*  	ld (cur_filename),hl
040755 11 F5 43 04 0486*  	ld de,filedata
040759 01 00 00 01 0487*  	ld bc,65536
04075D 3E 01       0488*  	ld a,mos_load
04075F 5B CF       0489*  	RST.LIL 08h
040761 21 31 00 00 0490*  	ld hl,BUF_49
040765 01 10 00 00 0491*  	ld bc,16
040769 11 10 00 00 0492*  	ld de,16
04076D DD 21 00 04 0493*  	ld ix,1024
       00          
040772 CD 76 39 04 0494*  	call vdu_load_img_8
040776 C9          0495*  	ret
040777             0496*  
040777             0497*  ld_50:
040777 21 2A 09 04 0498*  	ld hl,F50
04077B 22 ED 37 04 0499*  	ld (cur_filename),hl
04077F 11 F5 43 04 0500*  	ld de,filedata
040783 01 00 00 01 0501*  	ld bc,65536
040787 3E 01       0502*  	ld a,mos_load
040789 5B CF       0503*  	RST.LIL 08h
04078B 21 32 00 00 0504*  	ld hl,BUF_50
04078F 01 10 00 00 0505*  	ld bc,16
040793 11 10 00 00 0506*  	ld de,16
040797 DD 21 00 04 0507*  	ld ix,1024
       00          
04079C CD 76 39 04 0508*  	call vdu_load_img_8
0407A0 C9          0509*  	ret
0407A1             0510*  
0407A1             0511*  ld_51:
0407A1 21 39 09 04 0512*  	ld hl,F51
0407A5 22 ED 37 04 0513*  	ld (cur_filename),hl
0407A9 11 F5 43 04 0514*  	ld de,filedata
0407AD 01 00 00 01 0515*  	ld bc,65536
0407B1 3E 01       0516*  	ld a,mos_load
0407B3 5B CF       0517*  	RST.LIL 08h
0407B5 21 33 00 00 0518*  	ld hl,BUF_51
0407B9 01 10 00 00 0519*  	ld bc,16
0407BD 11 10 00 00 0520*  	ld de,16
0407C1 DD 21 00 04 0521*  	ld ix,1024
       00          
0407C6 CD 76 39 04 0522*  	call vdu_load_img_8
0407CA C9          0523*  	ret
0407CB             0524*  
0407CB             0525*  ld_52:
0407CB 21 48 09 04 0526*  	ld hl,F52
0407CF 22 ED 37 04 0527*  	ld (cur_filename),hl
0407D3 11 F5 43 04 0528*  	ld de,filedata
0407D7 01 00 00 01 0529*  	ld bc,65536
0407DB 3E 01       0530*  	ld a,mos_load
0407DD 5B CF       0531*  	RST.LIL 08h
0407DF 21 34 00 00 0532*  	ld hl,BUF_52
0407E3 01 10 00 00 0533*  	ld bc,16
0407E7 11 10 00 00 0534*  	ld de,16
0407EB DD 21 00 04 0535*  	ld ix,1024
       00          
0407F0 CD 76 39 04 0536*  	call vdu_load_img_8
0407F4 C9          0537*  	ret
0407F5             0538*  
0407F5             0539*  ld_56:
0407F5 21 57 09 04 0540*  	ld hl,F56
0407F9 22 ED 37 04 0541*  	ld (cur_filename),hl
0407FD 11 F5 43 04 0542*  	ld de,filedata
040801 01 00 00 01 0543*  	ld bc,65536
040805 3E 01       0544*  	ld a,mos_load
040807 5B CF       0545*  	RST.LIL 08h
040809 21 38 00 00 0546*  	ld hl,BUF_56
04080D 01 10 00 00 0547*  	ld bc,16
040811 11 10 00 00 0548*  	ld de,16
040815 DD 21 00 04 0549*  	ld ix,1024
       00          
04081A CD 76 39 04 0550*  	call vdu_load_img_8
04081E C9          0551*  	ret
04081F             0552*  
04081F             0553*  ld_60:
04081F 21 66 09 04 0554*  	ld hl,F60
040823 22 ED 37 04 0555*  	ld (cur_filename),hl
040827 11 F5 43 04 0556*  	ld de,filedata
04082B 01 00 00 01 0557*  	ld bc,65536
04082F 3E 01       0558*  	ld a,mos_load
040831 5B CF       0559*  	RST.LIL 08h
040833 21 3C 00 00 0560*  	ld hl,BUF_60
040837 01 10 00 00 0561*  	ld bc,16
04083B 11 10 00 00 0562*  	ld de,16
04083F DD 21 00 04 0563*  	ld ix,1024
       00          
040844 CD 76 39 04 0564*  	call vdu_load_img_8
040848 C9          0565*  	ret
040849             0566*  
040849             0567*  ; File name lookups:
040849 74 69 6C 65 0568*  F20: db "tiles/20.rgba8",0
       73 2F 32 30 
       2E 72 67 62 
       61 38 00    
040858 74 69 6C 65 0569*  F21: db "tiles/21.rgba8",0
       73 2F 32 31 
       2E 72 67 62 
       61 38 00    
040867 74 69 6C 65 0570*  F22: db "tiles/22.rgba8",0
       73 2F 32 32 
       2E 72 67 62 
       61 38 00    
040876 74 69 6C 65 0571*  F23: db "tiles/23.rgba8",0
       73 2F 32 33 
       2E 72 67 62 
       61 38 00    
040885 74 69 6C 65 0572*  F24: db "tiles/24.rgba8",0
       73 2F 32 34 
       2E 72 67 62 
       61 38 00    
040894 74 69 6C 65 0573*  F40: db "tiles/40.rgba8",0
       73 2F 34 30 
       2E 72 67 62 
       61 38 00    
0408A3 74 69 6C 65 0574*  F41: db "tiles/41.rgba8",0
       73 2F 34 31 
       2E 72 67 62 
       61 38 00    
0408B2 74 69 6C 65 0575*  F42: db "tiles/42.rgba8",0
       73 2F 34 32 
       2E 72 67 62 
       61 38 00    
0408C1 74 69 6C 65 0576*  F43: db "tiles/43.rgba8",0
       73 2F 34 33 
       2E 72 67 62 
       61 38 00    
0408D0 74 69 6C 65 0577*  F44: db "tiles/44.rgba8",0
       73 2F 34 34 
       2E 72 67 62 
       61 38 00    
0408DF 74 69 6C 65 0578*  F45: db "tiles/45.rgba8",0
       73 2F 34 35 
       2E 72 67 62 
       61 38 00    
0408EE 74 69 6C 65 0579*  F46: db "tiles/46.rgba8",0
       73 2F 34 36 
       2E 72 67 62 
       61 38 00    
0408FD 74 69 6C 65 0580*  F47: db "tiles/47.rgba8",0
       73 2F 34 37 
       2E 72 67 62 
       61 38 00    
04090C 74 69 6C 65 0581*  F48: db "tiles/48.rgba8",0
       73 2F 34 38 
       2E 72 67 62 
       61 38 00    
04091B 74 69 6C 65 0582*  F49: db "tiles/49.rgba8",0
       73 2F 34 39 
       2E 72 67 62 
       61 38 00    
04092A 74 69 6C 65 0583*  F50: db "tiles/50.rgba8",0
       73 2F 35 30 
       2E 72 67 62 
       61 38 00    
040939 74 69 6C 65 0584*  F51: db "tiles/51.rgba8",0
       73 2F 35 31 
       2E 72 67 62 
       61 38 00    
040948 74 69 6C 65 0585*  F52: db "tiles/52.rgba8",0
       73 2F 35 32 
       2E 72 67 62 
       61 38 00    
040957 74 69 6C 65 0586*  F56: db "tiles/56.rgba8",0
       73 2F 35 36 
       2E 72 67 62 
       61 38 00    
040966 74 69 6C 65 0587*  F60: db "tiles/60.rgba8",0
       73 2F 36 30 
       2E 72 67 62 
       61 38 00    
040975             0014   	include "src/asm/fonts_bmp.inc"
040975             0001*  ; plots a bitmap character to the screen
040975             0002*  ; inputs: a; ascii character to plot
040975             0003*  ;      bc,de = x,y screen coordinates in pixels
040975             0004*  ;      ix pointed at the font definition lut
040975             0005*  ; returns: bc as the next x coordinate to plot
040975             0006*  ;          pretty pixels which hopefully resemble readable text
040975             0007*  ; destroys: lotsa stuff
040975             0008*  font_bmp_plot:
040975             0009*  ; back up bc,de
040975 C5          0010*      push bc
040976 D5          0011*      push de
040977             0012*  ; get the buffer id of the character
040977 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
040979 06 06       0014*      ld b,6 ; six bytes per lookup record
04097B 4F          0015*      ld c,a
04097C ED 4C       0016*      mlt bc
04097E DD 09       0017*      add ix,bc ; now ix points to the character definition
040980 DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
040983 CD 03 2F 04 0019*      call vdu_buff_select
040987             0020*  ; plot the character
040987 D1          0021*      pop de
040988 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
04098B 83          0023*      add a,e ; add the y-coordinate
04098C 5F          0024*      ld e,a
04098D 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04098F 8A          0026*      adc a,d
040990 57          0027*      ld d,a ; plot_y now correct for the character
040991 C1          0028*      pop bc ; plot_x
040992 C5          0029*      push bc ; we want it back after the plot
040993 CD D4 30 04 0030*      call vdu_plot_bmp
040997             0031*  ; now set bc to the next x coordinate
040997 C1          0032*      pop bc
040998 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
04099B C6 02       0034*      add a,2 ; add a little padding between characters
04099D 81          0035*      add a,c ; bump the original x-coordinate
04099E 4F          0036*      ld c,a
04099F 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0409A1 88          0038*      adc a,b
0409A2 47          0039*      ld b,a ; plot_x now correct for the next character
0409A3 C9          0040*      ret
0409A4             0041*  
0409A4             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0409A4             0043*  ; inputs: hl; pointer to the string
0409A4             0044*  ;       bc,de = x,y screen coordinates in pixels
0409A4             0045*  ;       ix pointed at the font definition lut
0409A4             0046*  ; returns: bc as the next x coordinate to plot
0409A4             0047*  ;          de as the next y coordinate to plot
0409A4             0048*  ;          pretty pixels which hopefully resemble readable text
0409A4             0049*  font_bmp_print:
0409A4             0050*  @next_char:
0409A4             0051*  ; fetch the next character in the string
0409A4 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0409A5 FE 00       0053*      cp 0 ; is it zero?
0409A7 C8          0054*      ret z ; if so, we're done
0409A8 23          0055*      inc hl ; point to the next character
0409A9 E5          0056*      push hl ; save the pointer
0409AA D5          0057*      push de ; save our y-coordinate
0409AB DD E5       0058*      push ix ; save the font lut pointer
0409AD CD 75 09 04 0059*      call font_bmp_plot ; plot the character
0409B1 DD E1       0060*      pop ix ; restore the font lut pointer
0409B3 D1          0061*      pop de ; restore our y-coordinate
0409B4 E1          0062*      pop hl ; restore the pointer
0409B5 C3 A4 09 04 0063*      jp @next_char ; loop
0409B9             0015   	; include "src/asm/maps.inc"
0409B9             0016   	; include "src/asm/render.inc"
0409B9             0017   	include "src/asm/font_itc_honda.inc"
0409B9             0001*  ; Bitmap indices:
0409B9             0002*  BUF_0544: equ 0x0220 ; 32
0409B9             0003*  ; Missing character 33 !
0409B9             0004*  ; Missing character 34 "
0409B9             0005*  ; Missing character 35 #
0409B9             0006*  ; Missing character 36 $
0409B9             0007*  ; Missing character 37 %
0409B9             0008*  ; Missing character 38 &
0409B9             0009*  ; Missing character 39 '
0409B9             0010*  ; Missing character 40 (
0409B9             0011*  ; Missing character 41 )
0409B9             0012*  ; Missing character 42 *
0409B9             0013*  ; Missing character 43 +
0409B9             0014*  ; Missing character 44 ,
0409B9             0015*  ; Missing character 45 -
0409B9             0016*  BUF_0558: equ 0x022E ; 46 .
0409B9             0017*  ; Missing character 47 /
0409B9             0018*  BUF_0560: equ 0x0230 ; 48 0
0409B9             0019*  BUF_0561: equ 0x0231 ; 49 1
0409B9             0020*  BUF_0562: equ 0x0232 ; 50 2
0409B9             0021*  BUF_0563: equ 0x0233 ; 51 3
0409B9             0022*  BUF_0564: equ 0x0234 ; 52 4
0409B9             0023*  BUF_0565: equ 0x0235 ; 53 5
0409B9             0024*  BUF_0566: equ 0x0236 ; 54 6
0409B9             0025*  BUF_0567: equ 0x0237 ; 55 7
0409B9             0026*  BUF_0568: equ 0x0238 ; 56 8
0409B9             0027*  BUF_0569: equ 0x0239 ; 57 9
0409B9             0028*  ; Missing character 58 :
0409B9             0029*  ; Missing character 59 ;
0409B9             0030*  ; Missing character 60 <
0409B9             0031*  ; Missing character 61 =
0409B9             0032*  ; Missing character 62 >
0409B9             0033*  ; Missing character 63 ?
0409B9             0034*  ; Missing character 64 @
0409B9             0035*  BUF_0577: equ 0x0241 ; 65 A
0409B9             0036*  BUF_0578: equ 0x0242 ; 66 B
0409B9             0037*  BUF_0579: equ 0x0243 ; 67 C
0409B9             0038*  BUF_0580: equ 0x0244 ; 68 D
0409B9             0039*  BUF_0581: equ 0x0245 ; 69 E
0409B9             0040*  BUF_0582: equ 0x0246 ; 70 F
0409B9             0041*  BUF_0583: equ 0x0247 ; 71 G
0409B9             0042*  BUF_0584: equ 0x0248 ; 72 H
0409B9             0043*  BUF_0585: equ 0x0249 ; 73 I
0409B9             0044*  BUF_0586: equ 0x024A ; 74 J
0409B9             0045*  BUF_0587: equ 0x024B ; 75 K
0409B9             0046*  BUF_0588: equ 0x024C ; 76 L
0409B9             0047*  BUF_0589: equ 0x024D ; 77 M
0409B9             0048*  BUF_0590: equ 0x024E ; 78 N
0409B9             0049*  BUF_0591: equ 0x024F ; 79 O
0409B9             0050*  BUF_0592: equ 0x0250 ; 80 P
0409B9             0051*  BUF_0593: equ 0x0251 ; 81 Q
0409B9             0052*  BUF_0594: equ 0x0252 ; 82 R
0409B9             0053*  BUF_0595: equ 0x0253 ; 83 S
0409B9             0054*  BUF_0596: equ 0x0254 ; 84 T
0409B9             0055*  BUF_0597: equ 0x0255 ; 85 U
0409B9             0056*  BUF_0598: equ 0x0256 ; 86 V
0409B9             0057*  BUF_0599: equ 0x0257 ; 87 W
0409B9             0058*  BUF_0600: equ 0x0258 ; 88 X
0409B9             0059*  BUF_0601: equ 0x0259 ; 89 Y
0409B9             0060*  BUF_0602: equ 0x025A ; 90 Z
0409B9             0061*  ; Missing character 91 [
0409B9             0062*  ; Missing character 92 \
0409B9             0063*  ; Missing character 93 ]
0409B9             0064*  ; Missing character 94 ^
0409B9             0065*  ; Missing character 95 _
0409B9             0066*  ; Missing character 96 `
0409B9             0067*  BUF_0609: equ 0x0261 ; 97 a
0409B9             0068*  BUF_0610: equ 0x0262 ; 98 b
0409B9             0069*  BUF_0611: equ 0x0263 ; 99 c
0409B9             0070*  BUF_0612: equ 0x0264 ; 100 d
0409B9             0071*  BUF_0613: equ 0x0265 ; 101 e
0409B9             0072*  BUF_0614: equ 0x0266 ; 102 f
0409B9             0073*  BUF_0615: equ 0x0267 ; 103 g
0409B9             0074*  BUF_0616: equ 0x0268 ; 104 h
0409B9             0075*  BUF_0617: equ 0x0269 ; 105 i
0409B9             0076*  BUF_0618: equ 0x026A ; 106 j
0409B9             0077*  BUF_0619: equ 0x026B ; 107 k
0409B9             0078*  BUF_0620: equ 0x026C ; 108 l
0409B9             0079*  BUF_0621: equ 0x026D ; 109 m
0409B9             0080*  BUF_0622: equ 0x026E ; 110 n
0409B9             0081*  BUF_0623: equ 0x026F ; 111 o
0409B9             0082*  BUF_0624: equ 0x0270 ; 112 p
0409B9             0083*  BUF_0625: equ 0x0271 ; 113 q
0409B9             0084*  BUF_0626: equ 0x0272 ; 114 r
0409B9             0085*  BUF_0627: equ 0x0273 ; 115 s
0409B9             0086*  BUF_0628: equ 0x0274 ; 116 t
0409B9             0087*  BUF_0629: equ 0x0275 ; 117 u
0409B9             0088*  BUF_0630: equ 0x0276 ; 118 v
0409B9             0089*  BUF_0631: equ 0x0277 ; 119 w
0409B9             0090*  BUF_0632: equ 0x0278 ; 120 x
0409B9             0091*  BUF_0633: equ 0x0279 ; 121 y
0409B9             0092*  BUF_0634: equ 0x027A ; 122 z
0409B9             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
0409B9             0094*  font_itc_honda:
0409B9 06 01 00 20 0095*  	dl 0x000106,BUF_0544
       02 00       
0409BF 06 01 00 20 0096*  	dl 0x000106,BUF_0544 ; Missing character 33
       02 00       
0409C5 06 01 00 20 0097*  	dl 0x000106,BUF_0544 ; Missing character 34
       02 00       
0409CB 06 01 00 20 0098*  	dl 0x000106,BUF_0544 ; Missing character 35
       02 00       
0409D1 06 01 00 20 0099*  	dl 0x000106,BUF_0544 ; Missing character 36
       02 00       
0409D7 06 01 00 20 0100*  	dl 0x000106,BUF_0544 ; Missing character 37
       02 00       
0409DD 06 01 00 20 0101*  	dl 0x000106,BUF_0544 ; Missing character 38
       02 00       
0409E3 06 01 00 20 0102*  	dl 0x000106,BUF_0544 ; Missing character 39
       02 00       
0409E9 06 01 00 20 0103*  	dl 0x000106,BUF_0544 ; Missing character 40
       02 00       
0409EF 06 01 00 20 0104*  	dl 0x000106,BUF_0544 ; Missing character 41
       02 00       
0409F5 06 01 00 20 0105*  	dl 0x000106,BUF_0544 ; Missing character 42
       02 00       
0409FB 06 01 00 20 0106*  	dl 0x000106,BUF_0544 ; Missing character 43
       02 00       
040A01 06 01 00 20 0107*  	dl 0x000106,BUF_0544 ; Missing character 44
       02 00       
040A07 06 01 00 20 0108*  	dl 0x000106,BUF_0544 ; Missing character 45
       02 00       
040A0D 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_0558
       02 00       
040A13 06 01 00 20 0110*  	dl 0x000106,BUF_0544 ; Missing character 47
       02 00       
040A19 0A 12 00 30 0111*  	dl 0x00120A,BUF_0560
       02 00       
040A1F 04 12 00 31 0112*  	dl 0x001204,BUF_0561
       02 00       
040A25 09 12 00 32 0113*  	dl 0x001209,BUF_0562
       02 00       
040A2B 0A 12 00 33 0114*  	dl 0x00120A,BUF_0563
       02 00       
040A31 0C 12 00 34 0115*  	dl 0x00120C,BUF_0564
       02 00       
040A37 0A 12 00 35 0116*  	dl 0x00120A,BUF_0565
       02 00       
040A3D 0A 12 00 36 0117*  	dl 0x00120A,BUF_0566
       02 00       
040A43 08 12 00 37 0118*  	dl 0x001208,BUF_0567
       02 00       
040A49 0A 12 00 38 0119*  	dl 0x00120A,BUF_0568
       02 00       
040A4F 0A 12 00 39 0120*  	dl 0x00120A,BUF_0569
       02 00       
040A55 06 01 00 20 0121*  	dl 0x000106,BUF_0544 ; Missing character 58
       02 00       
040A5B 06 01 00 20 0122*  	dl 0x000106,BUF_0544 ; Missing character 59
       02 00       
040A61 06 01 00 20 0123*  	dl 0x000106,BUF_0544 ; Missing character 60
       02 00       
040A67 06 01 00 20 0124*  	dl 0x000106,BUF_0544 ; Missing character 61
       02 00       
040A6D 06 01 00 20 0125*  	dl 0x000106,BUF_0544 ; Missing character 62
       02 00       
040A73 06 01 00 20 0126*  	dl 0x000106,BUF_0544 ; Missing character 63
       02 00       
040A79 06 01 00 20 0127*  	dl 0x000106,BUF_0544 ; Missing character 64
       02 00       
040A7F 0A 12 01 41 0128*  	dl 0x01120A,BUF_0577
       02 00       
040A85 0A 12 00 42 0129*  	dl 0x00120A,BUF_0578
       02 00       
040A8B 08 13 00 43 0130*  	dl 0x001308,BUF_0579
       02 00       
040A91 0A 12 00 44 0131*  	dl 0x00120A,BUF_0580
       02 00       
040A97 08 12 00 45 0132*  	dl 0x001208,BUF_0581
       02 00       
040A9D 08 12 00 46 0133*  	dl 0x001208,BUF_0582
       02 00       
040AA3 0A 12 00 47 0134*  	dl 0x00120A,BUF_0583
       02 00       
040AA9 0A 12 00 48 0135*  	dl 0x00120A,BUF_0584
       02 00       
040AAF 03 12 00 49 0136*  	dl 0x001203,BUF_0585
       02 00       
040AB5 06 12 00 4A 0137*  	dl 0x001206,BUF_0586
       02 00       
040ABB 0A 12 00 4B 0138*  	dl 0x00120A,BUF_0587
       02 00       
040AC1 08 12 01 4C 0139*  	dl 0x011208,BUF_0588
       02 00       
040AC7 0E 12 00 4D 0140*  	dl 0x00120E,BUF_0589
       02 00       
040ACD 0A 12 00 4E 0141*  	dl 0x00120A,BUF_0590
       02 00       
040AD3 0A 12 00 4F 0142*  	dl 0x00120A,BUF_0591
       02 00       
040AD9 0A 12 00 50 0143*  	dl 0x00120A,BUF_0592
       02 00       
040ADF 0A 15 00 51 0144*  	dl 0x00150A,BUF_0593
       02 00       
040AE5 0A 12 00 52 0145*  	dl 0x00120A,BUF_0594
       02 00       
040AEB 09 13 00 53 0146*  	dl 0x001309,BUF_0595
       02 00       
040AF1 0A 12 00 54 0147*  	dl 0x00120A,BUF_0596
       02 00       
040AF7 0A 12 00 55 0148*  	dl 0x00120A,BUF_0597
       02 00       
040AFD 0A 12 00 56 0149*  	dl 0x00120A,BUF_0598
       02 00       
040B03 10 12 00 57 0150*  	dl 0x001210,BUF_0599
       02 00       
040B09 0A 12 00 58 0151*  	dl 0x00120A,BUF_0600
       02 00       
040B0F 0A 12 01 59 0152*  	dl 0x01120A,BUF_0601
       02 00       
040B15 09 12 01 5A 0153*  	dl 0x011209,BUF_0602
       02 00       
040B1B 06 01 00 20 0154*  	dl 0x000106,BUF_0544 ; Missing character 91
       02 00       
040B21 06 01 00 20 0155*  	dl 0x000106,BUF_0544 ; Missing character 92
       02 00       
040B27 06 01 00 20 0156*  	dl 0x000106,BUF_0544 ; Missing character 93
       02 00       
040B2D 06 01 00 20 0157*  	dl 0x000106,BUF_0544 ; Missing character 94
       02 00       
040B33 06 01 00 20 0158*  	dl 0x000106,BUF_0544 ; Missing character 95
       02 00       
040B39 06 01 00 20 0159*  	dl 0x000106,BUF_0544 ; Missing character 96
       02 00       
040B3F 08 0C 06 61 0160*  	dl 0x060C08,BUF_0609
       02 00       
040B45 09 12 01 62 0161*  	dl 0x011209,BUF_0610
       02 00       
040B4B 07 0C 06 63 0162*  	dl 0x060C07,BUF_0611
       02 00       
040B51 09 12 00 64 0163*  	dl 0x001209,BUF_0612
       02 00       
040B57 08 0C 06 65 0164*  	dl 0x060C08,BUF_0613
       02 00       
040B5D 09 12 00 66 0165*  	dl 0x001209,BUF_0614
       02 00       
040B63 09 12 06 67 0166*  	dl 0x061209,BUF_0615
       02 00       
040B69 09 12 01 68 0167*  	dl 0x011209,BUF_0616
       02 00       
040B6F 04 12 00 69 0168*  	dl 0x001204,BUF_0617
       02 00       
040B75 08 18 00 6A 0169*  	dl 0x001808,BUF_0618
       02 00       
040B7B 09 12 01 6B 0170*  	dl 0x011209,BUF_0619
       02 00       
040B81 03 12 00 6C 0171*  	dl 0x001203,BUF_0620
       02 00       
040B87 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_0621
       02 00       
040B8D 09 0C 06 6E 0173*  	dl 0x060C09,BUF_0622
       02 00       
040B93 09 0C 06 6F 0174*  	dl 0x060C09,BUF_0623
       02 00       
040B99 09 12 06 70 0175*  	dl 0x061209,BUF_0624
       02 00       
040B9F 09 12 06 71 0176*  	dl 0x061209,BUF_0625
       02 00       
040BA5 06 0D 06 72 0177*  	dl 0x060D06,BUF_0626
       02 00       
040BAB 08 0D 06 73 0178*  	dl 0x060D08,BUF_0627
       02 00       
040BB1 07 0F 03 74 0179*  	dl 0x030F07,BUF_0628
       02 00       
040BB7 09 0C 06 75 0180*  	dl 0x060C09,BUF_0629
       02 00       
040BBD 09 0C 06 76 0181*  	dl 0x060C09,BUF_0630
       02 00       
040BC3 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_0631
       02 00       
040BC9 09 0C 06 78 0183*  	dl 0x060C09,BUF_0632
       02 00       
040BCF 09 11 06 79 0184*  	dl 0x061109,BUF_0633
       02 00       
040BD5 09 0C 06 7A 0185*  	dl 0x060C09,BUF_0634
       02 00       
040BDB             0186*  
040BDB             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
040BDB             0188*  load_font_itc_honda:
040BDB             0189*  
040BDB 21 1C 15 04 0190*  	ld hl,Fhonda032
040BDF 11 F5 43 04 0191*  	ld de,filedata
040BE3 01 00 00 01 0192*  	ld bc,65536
040BE7 3E 01       0193*  	ld a,mos_load
040BE9 5B CF       0194*  	RST.LIL 08h
040BEB 21 20 02 00 0195*  	ld hl,BUF_0544
040BEF 01 06 00 00 0196*  	ld bc,6
040BF3 11 01 00 00 0197*  	ld de,1
040BF7 DD 21 06 00 0198*  	ld ix,6
       00          
040BFC CD 68 39 04 0199*  	call vdu_load_img_2
040C00             0200*  ; Missing character 33
040C00             0201*  ; Missing character 34
040C00             0202*  ; Missing character 35
040C00             0203*  ; Missing character 36
040C00             0204*  ; Missing character 37
040C00             0205*  ; Missing character 38
040C00             0206*  ; Missing character 39
040C00             0207*  ; Missing character 40
040C00             0208*  ; Missing character 41
040C00             0209*  ; Missing character 42
040C00             0210*  ; Missing character 43
040C00             0211*  ; Missing character 44
040C00             0212*  ; Missing character 45
040C00             0213*  
040C00 21 32 15 04 0214*  	ld hl,Fhonda046
040C04 11 F5 43 04 0215*  	ld de,filedata
040C08 01 00 00 01 0216*  	ld bc,65536
040C0C 3E 01       0217*  	ld a,mos_load
040C0E 5B CF       0218*  	RST.LIL 08h
040C10 21 2E 02 00 0219*  	ld hl,BUF_0558
040C14 01 05 00 00 0220*  	ld bc,5
040C18 11 05 00 00 0221*  	ld de,5
040C1C DD 21 19 00 0222*  	ld ix,25
       00          
040C21 CD 68 39 04 0223*  	call vdu_load_img_2
040C25             0224*  ; Missing character 47
040C25             0225*  
040C25 21 48 15 04 0226*  	ld hl,Fhonda048
040C29 11 F5 43 04 0227*  	ld de,filedata
040C2D 01 00 00 01 0228*  	ld bc,65536
040C31 3E 01       0229*  	ld a,mos_load
040C33 5B CF       0230*  	RST.LIL 08h
040C35 21 30 02 00 0231*  	ld hl,BUF_0560
040C39 01 0A 00 00 0232*  	ld bc,10
040C3D 11 12 00 00 0233*  	ld de,18
040C41 DD 21 B4 00 0234*  	ld ix,180
       00          
040C46 CD 68 39 04 0235*  	call vdu_load_img_2
040C4A             0236*  
040C4A 21 5E 15 04 0237*  	ld hl,Fhonda049
040C4E 11 F5 43 04 0238*  	ld de,filedata
040C52 01 00 00 01 0239*  	ld bc,65536
040C56 3E 01       0240*  	ld a,mos_load
040C58 5B CF       0241*  	RST.LIL 08h
040C5A 21 31 02 00 0242*  	ld hl,BUF_0561
040C5E 01 04 00 00 0243*  	ld bc,4
040C62 11 12 00 00 0244*  	ld de,18
040C66 DD 21 48 00 0245*  	ld ix,72
       00          
040C6B CD 68 39 04 0246*  	call vdu_load_img_2
040C6F             0247*  
040C6F 21 74 15 04 0248*  	ld hl,Fhonda050
040C73 11 F5 43 04 0249*  	ld de,filedata
040C77 01 00 00 01 0250*  	ld bc,65536
040C7B 3E 01       0251*  	ld a,mos_load
040C7D 5B CF       0252*  	RST.LIL 08h
040C7F 21 32 02 00 0253*  	ld hl,BUF_0562
040C83 01 09 00 00 0254*  	ld bc,9
040C87 11 12 00 00 0255*  	ld de,18
040C8B DD 21 A2 00 0256*  	ld ix,162
       00          
040C90 CD 68 39 04 0257*  	call vdu_load_img_2
040C94             0258*  
040C94 21 8A 15 04 0259*  	ld hl,Fhonda051
040C98 11 F5 43 04 0260*  	ld de,filedata
040C9C 01 00 00 01 0261*  	ld bc,65536
040CA0 3E 01       0262*  	ld a,mos_load
040CA2 5B CF       0263*  	RST.LIL 08h
040CA4 21 33 02 00 0264*  	ld hl,BUF_0563
040CA8 01 0A 00 00 0265*  	ld bc,10
040CAC 11 12 00 00 0266*  	ld de,18
040CB0 DD 21 B4 00 0267*  	ld ix,180
       00          
040CB5 CD 68 39 04 0268*  	call vdu_load_img_2
040CB9             0269*  
040CB9 21 A0 15 04 0270*  	ld hl,Fhonda052
040CBD 11 F5 43 04 0271*  	ld de,filedata
040CC1 01 00 00 01 0272*  	ld bc,65536
040CC5 3E 01       0273*  	ld a,mos_load
040CC7 5B CF       0274*  	RST.LIL 08h
040CC9 21 34 02 00 0275*  	ld hl,BUF_0564
040CCD 01 0C 00 00 0276*  	ld bc,12
040CD1 11 12 00 00 0277*  	ld de,18
040CD5 DD 21 D8 00 0278*  	ld ix,216
       00          
040CDA CD 68 39 04 0279*  	call vdu_load_img_2
040CDE             0280*  
040CDE 21 B6 15 04 0281*  	ld hl,Fhonda053
040CE2 11 F5 43 04 0282*  	ld de,filedata
040CE6 01 00 00 01 0283*  	ld bc,65536
040CEA 3E 01       0284*  	ld a,mos_load
040CEC 5B CF       0285*  	RST.LIL 08h
040CEE 21 35 02 00 0286*  	ld hl,BUF_0565
040CF2 01 0A 00 00 0287*  	ld bc,10
040CF6 11 12 00 00 0288*  	ld de,18
040CFA DD 21 B4 00 0289*  	ld ix,180
       00          
040CFF CD 68 39 04 0290*  	call vdu_load_img_2
040D03             0291*  
040D03 21 CC 15 04 0292*  	ld hl,Fhonda054
040D07 11 F5 43 04 0293*  	ld de,filedata
040D0B 01 00 00 01 0294*  	ld bc,65536
040D0F 3E 01       0295*  	ld a,mos_load
040D11 5B CF       0296*  	RST.LIL 08h
040D13 21 36 02 00 0297*  	ld hl,BUF_0566
040D17 01 0A 00 00 0298*  	ld bc,10
040D1B 11 12 00 00 0299*  	ld de,18
040D1F DD 21 B4 00 0300*  	ld ix,180
       00          
040D24 CD 68 39 04 0301*  	call vdu_load_img_2
040D28             0302*  
040D28 21 E2 15 04 0303*  	ld hl,Fhonda055
040D2C 11 F5 43 04 0304*  	ld de,filedata
040D30 01 00 00 01 0305*  	ld bc,65536
040D34 3E 01       0306*  	ld a,mos_load
040D36 5B CF       0307*  	RST.LIL 08h
040D38 21 37 02 00 0308*  	ld hl,BUF_0567
040D3C 01 08 00 00 0309*  	ld bc,8
040D40 11 12 00 00 0310*  	ld de,18
040D44 DD 21 90 00 0311*  	ld ix,144
       00          
040D49 CD 68 39 04 0312*  	call vdu_load_img_2
040D4D             0313*  
040D4D 21 F8 15 04 0314*  	ld hl,Fhonda056
040D51 11 F5 43 04 0315*  	ld de,filedata
040D55 01 00 00 01 0316*  	ld bc,65536
040D59 3E 01       0317*  	ld a,mos_load
040D5B 5B CF       0318*  	RST.LIL 08h
040D5D 21 38 02 00 0319*  	ld hl,BUF_0568
040D61 01 0A 00 00 0320*  	ld bc,10
040D65 11 12 00 00 0321*  	ld de,18
040D69 DD 21 B4 00 0322*  	ld ix,180
       00          
040D6E CD 68 39 04 0323*  	call vdu_load_img_2
040D72             0324*  
040D72 21 0E 16 04 0325*  	ld hl,Fhonda057
040D76 11 F5 43 04 0326*  	ld de,filedata
040D7A 01 00 00 01 0327*  	ld bc,65536
040D7E 3E 01       0328*  	ld a,mos_load
040D80 5B CF       0329*  	RST.LIL 08h
040D82 21 39 02 00 0330*  	ld hl,BUF_0569
040D86 01 0A 00 00 0331*  	ld bc,10
040D8A 11 12 00 00 0332*  	ld de,18
040D8E DD 21 B4 00 0333*  	ld ix,180
       00          
040D93 CD 68 39 04 0334*  	call vdu_load_img_2
040D97             0335*  ; Missing character 58
040D97             0336*  ; Missing character 59
040D97             0337*  ; Missing character 60
040D97             0338*  ; Missing character 61
040D97             0339*  ; Missing character 62
040D97             0340*  ; Missing character 63
040D97             0341*  ; Missing character 64
040D97             0342*  
040D97 21 24 16 04 0343*  	ld hl,Fhonda065
040D9B 11 F5 43 04 0344*  	ld de,filedata
040D9F 01 00 00 01 0345*  	ld bc,65536
040DA3 3E 01       0346*  	ld a,mos_load
040DA5 5B CF       0347*  	RST.LIL 08h
040DA7 21 41 02 00 0348*  	ld hl,BUF_0577
040DAB 01 0A 00 00 0349*  	ld bc,10
040DAF 11 12 00 00 0350*  	ld de,18
040DB3 DD 21 B4 00 0351*  	ld ix,180
       00          
040DB8 CD 68 39 04 0352*  	call vdu_load_img_2
040DBC             0353*  
040DBC 21 3A 16 04 0354*  	ld hl,Fhonda066
040DC0 11 F5 43 04 0355*  	ld de,filedata
040DC4 01 00 00 01 0356*  	ld bc,65536
040DC8 3E 01       0357*  	ld a,mos_load
040DCA 5B CF       0358*  	RST.LIL 08h
040DCC 21 42 02 00 0359*  	ld hl,BUF_0578
040DD0 01 0A 00 00 0360*  	ld bc,10
040DD4 11 12 00 00 0361*  	ld de,18
040DD8 DD 21 B4 00 0362*  	ld ix,180
       00          
040DDD CD 68 39 04 0363*  	call vdu_load_img_2
040DE1             0364*  
040DE1 21 50 16 04 0365*  	ld hl,Fhonda067
040DE5 11 F5 43 04 0366*  	ld de,filedata
040DE9 01 00 00 01 0367*  	ld bc,65536
040DED 3E 01       0368*  	ld a,mos_load
040DEF 5B CF       0369*  	RST.LIL 08h
040DF1 21 43 02 00 0370*  	ld hl,BUF_0579
040DF5 01 08 00 00 0371*  	ld bc,8
040DF9 11 13 00 00 0372*  	ld de,19
040DFD DD 21 98 00 0373*  	ld ix,152
       00          
040E02 CD 68 39 04 0374*  	call vdu_load_img_2
040E06             0375*  
040E06 21 66 16 04 0376*  	ld hl,Fhonda068
040E0A 11 F5 43 04 0377*  	ld de,filedata
040E0E 01 00 00 01 0378*  	ld bc,65536
040E12 3E 01       0379*  	ld a,mos_load
040E14 5B CF       0380*  	RST.LIL 08h
040E16 21 44 02 00 0381*  	ld hl,BUF_0580
040E1A 01 0A 00 00 0382*  	ld bc,10
040E1E 11 12 00 00 0383*  	ld de,18
040E22 DD 21 B4 00 0384*  	ld ix,180
       00          
040E27 CD 68 39 04 0385*  	call vdu_load_img_2
040E2B             0386*  
040E2B 21 7C 16 04 0387*  	ld hl,Fhonda069
040E2F 11 F5 43 04 0388*  	ld de,filedata
040E33 01 00 00 01 0389*  	ld bc,65536
040E37 3E 01       0390*  	ld a,mos_load
040E39 5B CF       0391*  	RST.LIL 08h
040E3B 21 45 02 00 0392*  	ld hl,BUF_0581
040E3F 01 08 00 00 0393*  	ld bc,8
040E43 11 12 00 00 0394*  	ld de,18
040E47 DD 21 90 00 0395*  	ld ix,144
       00          
040E4C CD 68 39 04 0396*  	call vdu_load_img_2
040E50             0397*  
040E50 21 92 16 04 0398*  	ld hl,Fhonda070
040E54 11 F5 43 04 0399*  	ld de,filedata
040E58 01 00 00 01 0400*  	ld bc,65536
040E5C 3E 01       0401*  	ld a,mos_load
040E5E 5B CF       0402*  	RST.LIL 08h
040E60 21 46 02 00 0403*  	ld hl,BUF_0582
040E64 01 08 00 00 0404*  	ld bc,8
040E68 11 12 00 00 0405*  	ld de,18
040E6C DD 21 90 00 0406*  	ld ix,144
       00          
040E71 CD 68 39 04 0407*  	call vdu_load_img_2
040E75             0408*  
040E75 21 A8 16 04 0409*  	ld hl,Fhonda071
040E79 11 F5 43 04 0410*  	ld de,filedata
040E7D 01 00 00 01 0411*  	ld bc,65536
040E81 3E 01       0412*  	ld a,mos_load
040E83 5B CF       0413*  	RST.LIL 08h
040E85 21 47 02 00 0414*  	ld hl,BUF_0583
040E89 01 0A 00 00 0415*  	ld bc,10
040E8D 11 12 00 00 0416*  	ld de,18
040E91 DD 21 B4 00 0417*  	ld ix,180
       00          
040E96 CD 68 39 04 0418*  	call vdu_load_img_2
040E9A             0419*  
040E9A 21 BE 16 04 0420*  	ld hl,Fhonda072
040E9E 11 F5 43 04 0421*  	ld de,filedata
040EA2 01 00 00 01 0422*  	ld bc,65536
040EA6 3E 01       0423*  	ld a,mos_load
040EA8 5B CF       0424*  	RST.LIL 08h
040EAA 21 48 02 00 0425*  	ld hl,BUF_0584
040EAE 01 0A 00 00 0426*  	ld bc,10
040EB2 11 12 00 00 0427*  	ld de,18
040EB6 DD 21 B4 00 0428*  	ld ix,180
       00          
040EBB CD 68 39 04 0429*  	call vdu_load_img_2
040EBF             0430*  
040EBF 21 D4 16 04 0431*  	ld hl,Fhonda073
040EC3 11 F5 43 04 0432*  	ld de,filedata
040EC7 01 00 00 01 0433*  	ld bc,65536
040ECB 3E 01       0434*  	ld a,mos_load
040ECD 5B CF       0435*  	RST.LIL 08h
040ECF 21 49 02 00 0436*  	ld hl,BUF_0585
040ED3 01 03 00 00 0437*  	ld bc,3
040ED7 11 12 00 00 0438*  	ld de,18
040EDB DD 21 36 00 0439*  	ld ix,54
       00          
040EE0 CD 68 39 04 0440*  	call vdu_load_img_2
040EE4             0441*  
040EE4 21 EA 16 04 0442*  	ld hl,Fhonda074
040EE8 11 F5 43 04 0443*  	ld de,filedata
040EEC 01 00 00 01 0444*  	ld bc,65536
040EF0 3E 01       0445*  	ld a,mos_load
040EF2 5B CF       0446*  	RST.LIL 08h
040EF4 21 4A 02 00 0447*  	ld hl,BUF_0586
040EF8 01 06 00 00 0448*  	ld bc,6
040EFC 11 12 00 00 0449*  	ld de,18
040F00 DD 21 6C 00 0450*  	ld ix,108
       00          
040F05 CD 68 39 04 0451*  	call vdu_load_img_2
040F09             0452*  
040F09 21 00 17 04 0453*  	ld hl,Fhonda075
040F0D 11 F5 43 04 0454*  	ld de,filedata
040F11 01 00 00 01 0455*  	ld bc,65536
040F15 3E 01       0456*  	ld a,mos_load
040F17 5B CF       0457*  	RST.LIL 08h
040F19 21 4B 02 00 0458*  	ld hl,BUF_0587
040F1D 01 0A 00 00 0459*  	ld bc,10
040F21 11 12 00 00 0460*  	ld de,18
040F25 DD 21 B4 00 0461*  	ld ix,180
       00          
040F2A CD 68 39 04 0462*  	call vdu_load_img_2
040F2E             0463*  
040F2E 21 16 17 04 0464*  	ld hl,Fhonda076
040F32 11 F5 43 04 0465*  	ld de,filedata
040F36 01 00 00 01 0466*  	ld bc,65536
040F3A 3E 01       0467*  	ld a,mos_load
040F3C 5B CF       0468*  	RST.LIL 08h
040F3E 21 4C 02 00 0469*  	ld hl,BUF_0588
040F42 01 08 00 00 0470*  	ld bc,8
040F46 11 12 00 00 0471*  	ld de,18
040F4A DD 21 90 00 0472*  	ld ix,144
       00          
040F4F CD 68 39 04 0473*  	call vdu_load_img_2
040F53             0474*  
040F53 21 2C 17 04 0475*  	ld hl,Fhonda077
040F57 11 F5 43 04 0476*  	ld de,filedata
040F5B 01 00 00 01 0477*  	ld bc,65536
040F5F 3E 01       0478*  	ld a,mos_load
040F61 5B CF       0479*  	RST.LIL 08h
040F63 21 4D 02 00 0480*  	ld hl,BUF_0589
040F67 01 0E 00 00 0481*  	ld bc,14
040F6B 11 12 00 00 0482*  	ld de,18
040F6F DD 21 FC 00 0483*  	ld ix,252
       00          
040F74 CD 68 39 04 0484*  	call vdu_load_img_2
040F78             0485*  
040F78 21 42 17 04 0486*  	ld hl,Fhonda078
040F7C 11 F5 43 04 0487*  	ld de,filedata
040F80 01 00 00 01 0488*  	ld bc,65536
040F84 3E 01       0489*  	ld a,mos_load
040F86 5B CF       0490*  	RST.LIL 08h
040F88 21 4E 02 00 0491*  	ld hl,BUF_0590
040F8C 01 0A 00 00 0492*  	ld bc,10
040F90 11 12 00 00 0493*  	ld de,18
040F94 DD 21 B4 00 0494*  	ld ix,180
       00          
040F99 CD 68 39 04 0495*  	call vdu_load_img_2
040F9D             0496*  
040F9D 21 58 17 04 0497*  	ld hl,Fhonda079
040FA1 11 F5 43 04 0498*  	ld de,filedata
040FA5 01 00 00 01 0499*  	ld bc,65536
040FA9 3E 01       0500*  	ld a,mos_load
040FAB 5B CF       0501*  	RST.LIL 08h
040FAD 21 4F 02 00 0502*  	ld hl,BUF_0591
040FB1 01 0A 00 00 0503*  	ld bc,10
040FB5 11 12 00 00 0504*  	ld de,18
040FB9 DD 21 B4 00 0505*  	ld ix,180
       00          
040FBE CD 68 39 04 0506*  	call vdu_load_img_2
040FC2             0507*  
040FC2 21 6E 17 04 0508*  	ld hl,Fhonda080
040FC6 11 F5 43 04 0509*  	ld de,filedata
040FCA 01 00 00 01 0510*  	ld bc,65536
040FCE 3E 01       0511*  	ld a,mos_load
040FD0 5B CF       0512*  	RST.LIL 08h
040FD2 21 50 02 00 0513*  	ld hl,BUF_0592
040FD6 01 0A 00 00 0514*  	ld bc,10
040FDA 11 12 00 00 0515*  	ld de,18
040FDE DD 21 B4 00 0516*  	ld ix,180
       00          
040FE3 CD 68 39 04 0517*  	call vdu_load_img_2
040FE7             0518*  
040FE7 21 84 17 04 0519*  	ld hl,Fhonda081
040FEB 11 F5 43 04 0520*  	ld de,filedata
040FEF 01 00 00 01 0521*  	ld bc,65536
040FF3 3E 01       0522*  	ld a,mos_load
040FF5 5B CF       0523*  	RST.LIL 08h
040FF7 21 51 02 00 0524*  	ld hl,BUF_0593
040FFB 01 0A 00 00 0525*  	ld bc,10
040FFF 11 15 00 00 0526*  	ld de,21
041003 DD 21 D2 00 0527*  	ld ix,210
       00          
041008 CD 68 39 04 0528*  	call vdu_load_img_2
04100C             0529*  
04100C 21 9A 17 04 0530*  	ld hl,Fhonda082
041010 11 F5 43 04 0531*  	ld de,filedata
041014 01 00 00 01 0532*  	ld bc,65536
041018 3E 01       0533*  	ld a,mos_load
04101A 5B CF       0534*  	RST.LIL 08h
04101C 21 52 02 00 0535*  	ld hl,BUF_0594
041020 01 0A 00 00 0536*  	ld bc,10
041024 11 12 00 00 0537*  	ld de,18
041028 DD 21 B4 00 0538*  	ld ix,180
       00          
04102D CD 68 39 04 0539*  	call vdu_load_img_2
041031             0540*  
041031 21 B0 17 04 0541*  	ld hl,Fhonda083
041035 11 F5 43 04 0542*  	ld de,filedata
041039 01 00 00 01 0543*  	ld bc,65536
04103D 3E 01       0544*  	ld a,mos_load
04103F 5B CF       0545*  	RST.LIL 08h
041041 21 53 02 00 0546*  	ld hl,BUF_0595
041045 01 09 00 00 0547*  	ld bc,9
041049 11 13 00 00 0548*  	ld de,19
04104D DD 21 AB 00 0549*  	ld ix,171
       00          
041052 CD 68 39 04 0550*  	call vdu_load_img_2
041056             0551*  
041056 21 C6 17 04 0552*  	ld hl,Fhonda084
04105A 11 F5 43 04 0553*  	ld de,filedata
04105E 01 00 00 01 0554*  	ld bc,65536
041062 3E 01       0555*  	ld a,mos_load
041064 5B CF       0556*  	RST.LIL 08h
041066 21 54 02 00 0557*  	ld hl,BUF_0596
04106A 01 0A 00 00 0558*  	ld bc,10
04106E 11 12 00 00 0559*  	ld de,18
041072 DD 21 B4 00 0560*  	ld ix,180
       00          
041077 CD 68 39 04 0561*  	call vdu_load_img_2
04107B             0562*  
04107B 21 DC 17 04 0563*  	ld hl,Fhonda085
04107F 11 F5 43 04 0564*  	ld de,filedata
041083 01 00 00 01 0565*  	ld bc,65536
041087 3E 01       0566*  	ld a,mos_load
041089 5B CF       0567*  	RST.LIL 08h
04108B 21 55 02 00 0568*  	ld hl,BUF_0597
04108F 01 0A 00 00 0569*  	ld bc,10
041093 11 12 00 00 0570*  	ld de,18
041097 DD 21 B4 00 0571*  	ld ix,180
       00          
04109C CD 68 39 04 0572*  	call vdu_load_img_2
0410A0             0573*  
0410A0 21 F2 17 04 0574*  	ld hl,Fhonda086
0410A4 11 F5 43 04 0575*  	ld de,filedata
0410A8 01 00 00 01 0576*  	ld bc,65536
0410AC 3E 01       0577*  	ld a,mos_load
0410AE 5B CF       0578*  	RST.LIL 08h
0410B0 21 56 02 00 0579*  	ld hl,BUF_0598
0410B4 01 0A 00 00 0580*  	ld bc,10
0410B8 11 12 00 00 0581*  	ld de,18
0410BC DD 21 B4 00 0582*  	ld ix,180
       00          
0410C1 CD 68 39 04 0583*  	call vdu_load_img_2
0410C5             0584*  
0410C5 21 08 18 04 0585*  	ld hl,Fhonda087
0410C9 11 F5 43 04 0586*  	ld de,filedata
0410CD 01 00 00 01 0587*  	ld bc,65536
0410D1 3E 01       0588*  	ld a,mos_load
0410D3 5B CF       0589*  	RST.LIL 08h
0410D5 21 57 02 00 0590*  	ld hl,BUF_0599
0410D9 01 10 00 00 0591*  	ld bc,16
0410DD 11 12 00 00 0592*  	ld de,18
0410E1 DD 21 20 01 0593*  	ld ix,288
       00          
0410E6 CD 68 39 04 0594*  	call vdu_load_img_2
0410EA             0595*  
0410EA 21 1E 18 04 0596*  	ld hl,Fhonda088
0410EE 11 F5 43 04 0597*  	ld de,filedata
0410F2 01 00 00 01 0598*  	ld bc,65536
0410F6 3E 01       0599*  	ld a,mos_load
0410F8 5B CF       0600*  	RST.LIL 08h
0410FA 21 58 02 00 0601*  	ld hl,BUF_0600
0410FE 01 0A 00 00 0602*  	ld bc,10
041102 11 12 00 00 0603*  	ld de,18
041106 DD 21 B4 00 0604*  	ld ix,180
       00          
04110B CD 68 39 04 0605*  	call vdu_load_img_2
04110F             0606*  
04110F 21 34 18 04 0607*  	ld hl,Fhonda089
041113 11 F5 43 04 0608*  	ld de,filedata
041117 01 00 00 01 0609*  	ld bc,65536
04111B 3E 01       0610*  	ld a,mos_load
04111D 5B CF       0611*  	RST.LIL 08h
04111F 21 59 02 00 0612*  	ld hl,BUF_0601
041123 01 0A 00 00 0613*  	ld bc,10
041127 11 12 00 00 0614*  	ld de,18
04112B DD 21 B4 00 0615*  	ld ix,180
       00          
041130 CD 68 39 04 0616*  	call vdu_load_img_2
041134             0617*  
041134 21 4A 18 04 0618*  	ld hl,Fhonda090
041138 11 F5 43 04 0619*  	ld de,filedata
04113C 01 00 00 01 0620*  	ld bc,65536
041140 3E 01       0621*  	ld a,mos_load
041142 5B CF       0622*  	RST.LIL 08h
041144 21 5A 02 00 0623*  	ld hl,BUF_0602
041148 01 09 00 00 0624*  	ld bc,9
04114C 11 12 00 00 0625*  	ld de,18
041150 DD 21 A2 00 0626*  	ld ix,162
       00          
041155 CD 68 39 04 0627*  	call vdu_load_img_2
041159             0628*  ; Missing character 91
041159             0629*  ; Missing character 92
041159             0630*  ; Missing character 93
041159             0631*  ; Missing character 94
041159             0632*  ; Missing character 95
041159             0633*  ; Missing character 96
041159             0634*  
041159 21 60 18 04 0635*  	ld hl,Fhonda097
04115D 11 F5 43 04 0636*  	ld de,filedata
041161 01 00 00 01 0637*  	ld bc,65536
041165 3E 01       0638*  	ld a,mos_load
041167 5B CF       0639*  	RST.LIL 08h
041169 21 61 02 00 0640*  	ld hl,BUF_0609
04116D 01 08 00 00 0641*  	ld bc,8
041171 11 0C 00 00 0642*  	ld de,12
041175 DD 21 60 00 0643*  	ld ix,96
       00          
04117A CD 68 39 04 0644*  	call vdu_load_img_2
04117E             0645*  
04117E 21 76 18 04 0646*  	ld hl,Fhonda098
041182 11 F5 43 04 0647*  	ld de,filedata
041186 01 00 00 01 0648*  	ld bc,65536
04118A 3E 01       0649*  	ld a,mos_load
04118C 5B CF       0650*  	RST.LIL 08h
04118E 21 62 02 00 0651*  	ld hl,BUF_0610
041192 01 09 00 00 0652*  	ld bc,9
041196 11 12 00 00 0653*  	ld de,18
04119A DD 21 A2 00 0654*  	ld ix,162
       00          
04119F CD 68 39 04 0655*  	call vdu_load_img_2
0411A3             0656*  
0411A3 21 8C 18 04 0657*  	ld hl,Fhonda099
0411A7 11 F5 43 04 0658*  	ld de,filedata
0411AB 01 00 00 01 0659*  	ld bc,65536
0411AF 3E 01       0660*  	ld a,mos_load
0411B1 5B CF       0661*  	RST.LIL 08h
0411B3 21 63 02 00 0662*  	ld hl,BUF_0611
0411B7 01 07 00 00 0663*  	ld bc,7
0411BB 11 0C 00 00 0664*  	ld de,12
0411BF DD 21 54 00 0665*  	ld ix,84
       00          
0411C4 CD 68 39 04 0666*  	call vdu_load_img_2
0411C8             0667*  
0411C8 21 A2 18 04 0668*  	ld hl,Fhonda100
0411CC 11 F5 43 04 0669*  	ld de,filedata
0411D0 01 00 00 01 0670*  	ld bc,65536
0411D4 3E 01       0671*  	ld a,mos_load
0411D6 5B CF       0672*  	RST.LIL 08h
0411D8 21 64 02 00 0673*  	ld hl,BUF_0612
0411DC 01 09 00 00 0674*  	ld bc,9
0411E0 11 12 00 00 0675*  	ld de,18
0411E4 DD 21 A2 00 0676*  	ld ix,162
       00          
0411E9 CD 68 39 04 0677*  	call vdu_load_img_2
0411ED             0678*  
0411ED 21 B8 18 04 0679*  	ld hl,Fhonda101
0411F1 11 F5 43 04 0680*  	ld de,filedata
0411F5 01 00 00 01 0681*  	ld bc,65536
0411F9 3E 01       0682*  	ld a,mos_load
0411FB 5B CF       0683*  	RST.LIL 08h
0411FD 21 65 02 00 0684*  	ld hl,BUF_0613
041201 01 08 00 00 0685*  	ld bc,8
041205 11 0C 00 00 0686*  	ld de,12
041209 DD 21 60 00 0687*  	ld ix,96
       00          
04120E CD 68 39 04 0688*  	call vdu_load_img_2
041212             0689*  
041212 21 CE 18 04 0690*  	ld hl,Fhonda102
041216 11 F5 43 04 0691*  	ld de,filedata
04121A 01 00 00 01 0692*  	ld bc,65536
04121E 3E 01       0693*  	ld a,mos_load
041220 5B CF       0694*  	RST.LIL 08h
041222 21 66 02 00 0695*  	ld hl,BUF_0614
041226 01 09 00 00 0696*  	ld bc,9
04122A 11 12 00 00 0697*  	ld de,18
04122E DD 21 A2 00 0698*  	ld ix,162
       00          
041233 CD 68 39 04 0699*  	call vdu_load_img_2
041237             0700*  
041237 21 E4 18 04 0701*  	ld hl,Fhonda103
04123B 11 F5 43 04 0702*  	ld de,filedata
04123F 01 00 00 01 0703*  	ld bc,65536
041243 3E 01       0704*  	ld a,mos_load
041245 5B CF       0705*  	RST.LIL 08h
041247 21 67 02 00 0706*  	ld hl,BUF_0615
04124B 01 09 00 00 0707*  	ld bc,9
04124F 11 12 00 00 0708*  	ld de,18
041253 DD 21 A2 00 0709*  	ld ix,162
       00          
041258 CD 68 39 04 0710*  	call vdu_load_img_2
04125C             0711*  
04125C 21 FA 18 04 0712*  	ld hl,Fhonda104
041260 11 F5 43 04 0713*  	ld de,filedata
041264 01 00 00 01 0714*  	ld bc,65536
041268 3E 01       0715*  	ld a,mos_load
04126A 5B CF       0716*  	RST.LIL 08h
04126C 21 68 02 00 0717*  	ld hl,BUF_0616
041270 01 09 00 00 0718*  	ld bc,9
041274 11 12 00 00 0719*  	ld de,18
041278 DD 21 A2 00 0720*  	ld ix,162
       00          
04127D CD 68 39 04 0721*  	call vdu_load_img_2
041281             0722*  
041281 21 10 19 04 0723*  	ld hl,Fhonda105
041285 11 F5 43 04 0724*  	ld de,filedata
041289 01 00 00 01 0725*  	ld bc,65536
04128D 3E 01       0726*  	ld a,mos_load
04128F 5B CF       0727*  	RST.LIL 08h
041291 21 69 02 00 0728*  	ld hl,BUF_0617
041295 01 04 00 00 0729*  	ld bc,4
041299 11 12 00 00 0730*  	ld de,18
04129D DD 21 48 00 0731*  	ld ix,72
       00          
0412A2 CD 68 39 04 0732*  	call vdu_load_img_2
0412A6             0733*  
0412A6 21 26 19 04 0734*  	ld hl,Fhonda106
0412AA 11 F5 43 04 0735*  	ld de,filedata
0412AE 01 00 00 01 0736*  	ld bc,65536
0412B2 3E 01       0737*  	ld a,mos_load
0412B4 5B CF       0738*  	RST.LIL 08h
0412B6 21 6A 02 00 0739*  	ld hl,BUF_0618
0412BA 01 08 00 00 0740*  	ld bc,8
0412BE 11 18 00 00 0741*  	ld de,24
0412C2 DD 21 C0 00 0742*  	ld ix,192
       00          
0412C7 CD 68 39 04 0743*  	call vdu_load_img_2
0412CB             0744*  
0412CB 21 3C 19 04 0745*  	ld hl,Fhonda107
0412CF 11 F5 43 04 0746*  	ld de,filedata
0412D3 01 00 00 01 0747*  	ld bc,65536
0412D7 3E 01       0748*  	ld a,mos_load
0412D9 5B CF       0749*  	RST.LIL 08h
0412DB 21 6B 02 00 0750*  	ld hl,BUF_0619
0412DF 01 09 00 00 0751*  	ld bc,9
0412E3 11 12 00 00 0752*  	ld de,18
0412E7 DD 21 A2 00 0753*  	ld ix,162
       00          
0412EC CD 68 39 04 0754*  	call vdu_load_img_2
0412F0             0755*  
0412F0 21 52 19 04 0756*  	ld hl,Fhonda108
0412F4 11 F5 43 04 0757*  	ld de,filedata
0412F8 01 00 00 01 0758*  	ld bc,65536
0412FC 3E 01       0759*  	ld a,mos_load
0412FE 5B CF       0760*  	RST.LIL 08h
041300 21 6C 02 00 0761*  	ld hl,BUF_0620
041304 01 03 00 00 0762*  	ld bc,3
041308 11 12 00 00 0763*  	ld de,18
04130C DD 21 36 00 0764*  	ld ix,54
       00          
041311 CD 68 39 04 0765*  	call vdu_load_img_2
041315             0766*  
041315 21 68 19 04 0767*  	ld hl,Fhonda109
041319 11 F5 43 04 0768*  	ld de,filedata
04131D 01 00 00 01 0769*  	ld bc,65536
041321 3E 01       0770*  	ld a,mos_load
041323 5B CF       0771*  	RST.LIL 08h
041325 21 6D 02 00 0772*  	ld hl,BUF_0621
041329 01 0E 00 00 0773*  	ld bc,14
04132D 11 0D 00 00 0774*  	ld de,13
041331 DD 21 B6 00 0775*  	ld ix,182
       00          
041336 CD 68 39 04 0776*  	call vdu_load_img_2
04133A             0777*  
04133A 21 7E 19 04 0778*  	ld hl,Fhonda110
04133E 11 F5 43 04 0779*  	ld de,filedata
041342 01 00 00 01 0780*  	ld bc,65536
041346 3E 01       0781*  	ld a,mos_load
041348 5B CF       0782*  	RST.LIL 08h
04134A 21 6E 02 00 0783*  	ld hl,BUF_0622
04134E 01 09 00 00 0784*  	ld bc,9
041352 11 0C 00 00 0785*  	ld de,12
041356 DD 21 6C 00 0786*  	ld ix,108
       00          
04135B CD 68 39 04 0787*  	call vdu_load_img_2
04135F             0788*  
04135F 21 94 19 04 0789*  	ld hl,Fhonda111
041363 11 F5 43 04 0790*  	ld de,filedata
041367 01 00 00 01 0791*  	ld bc,65536
04136B 3E 01       0792*  	ld a,mos_load
04136D 5B CF       0793*  	RST.LIL 08h
04136F 21 6F 02 00 0794*  	ld hl,BUF_0623
041373 01 09 00 00 0795*  	ld bc,9
041377 11 0C 00 00 0796*  	ld de,12
04137B DD 21 6C 00 0797*  	ld ix,108
       00          
041380 CD 68 39 04 0798*  	call vdu_load_img_2
041384             0799*  
041384 21 AA 19 04 0800*  	ld hl,Fhonda112
041388 11 F5 43 04 0801*  	ld de,filedata
04138C 01 00 00 01 0802*  	ld bc,65536
041390 3E 01       0803*  	ld a,mos_load
041392 5B CF       0804*  	RST.LIL 08h
041394 21 70 02 00 0805*  	ld hl,BUF_0624
041398 01 09 00 00 0806*  	ld bc,9
04139C 11 12 00 00 0807*  	ld de,18
0413A0 DD 21 A2 00 0808*  	ld ix,162
       00          
0413A5 CD 68 39 04 0809*  	call vdu_load_img_2
0413A9             0810*  
0413A9 21 C0 19 04 0811*  	ld hl,Fhonda113
0413AD 11 F5 43 04 0812*  	ld de,filedata
0413B1 01 00 00 01 0813*  	ld bc,65536
0413B5 3E 01       0814*  	ld a,mos_load
0413B7 5B CF       0815*  	RST.LIL 08h
0413B9 21 71 02 00 0816*  	ld hl,BUF_0625
0413BD 01 09 00 00 0817*  	ld bc,9
0413C1 11 12 00 00 0818*  	ld de,18
0413C5 DD 21 A2 00 0819*  	ld ix,162
       00          
0413CA CD 68 39 04 0820*  	call vdu_load_img_2
0413CE             0821*  
0413CE 21 D6 19 04 0822*  	ld hl,Fhonda114
0413D2 11 F5 43 04 0823*  	ld de,filedata
0413D6 01 00 00 01 0824*  	ld bc,65536
0413DA 3E 01       0825*  	ld a,mos_load
0413DC 5B CF       0826*  	RST.LIL 08h
0413DE 21 72 02 00 0827*  	ld hl,BUF_0626
0413E2 01 06 00 00 0828*  	ld bc,6
0413E6 11 0D 00 00 0829*  	ld de,13
0413EA DD 21 4E 00 0830*  	ld ix,78
       00          
0413EF CD 68 39 04 0831*  	call vdu_load_img_2
0413F3             0832*  
0413F3 21 EC 19 04 0833*  	ld hl,Fhonda115
0413F7 11 F5 43 04 0834*  	ld de,filedata
0413FB 01 00 00 01 0835*  	ld bc,65536
0413FF 3E 01       0836*  	ld a,mos_load
041401 5B CF       0837*  	RST.LIL 08h
041403 21 73 02 00 0838*  	ld hl,BUF_0627
041407 01 08 00 00 0839*  	ld bc,8
04140B 11 0D 00 00 0840*  	ld de,13
04140F DD 21 68 00 0841*  	ld ix,104
       00          
041414 CD 68 39 04 0842*  	call vdu_load_img_2
041418             0843*  
041418 21 02 1A 04 0844*  	ld hl,Fhonda116
04141C 11 F5 43 04 0845*  	ld de,filedata
041420 01 00 00 01 0846*  	ld bc,65536
041424 3E 01       0847*  	ld a,mos_load
041426 5B CF       0848*  	RST.LIL 08h
041428 21 74 02 00 0849*  	ld hl,BUF_0628
04142C 01 07 00 00 0850*  	ld bc,7
041430 11 0F 00 00 0851*  	ld de,15
041434 DD 21 69 00 0852*  	ld ix,105
       00          
041439 CD 68 39 04 0853*  	call vdu_load_img_2
04143D             0854*  
04143D 21 18 1A 04 0855*  	ld hl,Fhonda117
041441 11 F5 43 04 0856*  	ld de,filedata
041445 01 00 00 01 0857*  	ld bc,65536
041449 3E 01       0858*  	ld a,mos_load
04144B 5B CF       0859*  	RST.LIL 08h
04144D 21 75 02 00 0860*  	ld hl,BUF_0629
041451 01 09 00 00 0861*  	ld bc,9
041455 11 0C 00 00 0862*  	ld de,12
041459 DD 21 6C 00 0863*  	ld ix,108
       00          
04145E CD 68 39 04 0864*  	call vdu_load_img_2
041462             0865*  
041462 21 2E 1A 04 0866*  	ld hl,Fhonda118
041466 11 F5 43 04 0867*  	ld de,filedata
04146A 01 00 00 01 0868*  	ld bc,65536
04146E 3E 01       0869*  	ld a,mos_load
041470 5B CF       0870*  	RST.LIL 08h
041472 21 76 02 00 0871*  	ld hl,BUF_0630
041476 01 09 00 00 0872*  	ld bc,9
04147A 11 0C 00 00 0873*  	ld de,12
04147E DD 21 6C 00 0874*  	ld ix,108
       00          
041483 CD 68 39 04 0875*  	call vdu_load_img_2
041487             0876*  
041487 21 44 1A 04 0877*  	ld hl,Fhonda119
04148B 11 F5 43 04 0878*  	ld de,filedata
04148F 01 00 00 01 0879*  	ld bc,65536
041493 3E 01       0880*  	ld a,mos_load
041495 5B CF       0881*  	RST.LIL 08h
041497 21 77 02 00 0882*  	ld hl,BUF_0631
04149B 01 0E 00 00 0883*  	ld bc,14
04149F 11 0C 00 00 0884*  	ld de,12
0414A3 DD 21 A8 00 0885*  	ld ix,168
       00          
0414A8 CD 68 39 04 0886*  	call vdu_load_img_2
0414AC             0887*  
0414AC 21 5A 1A 04 0888*  	ld hl,Fhonda120
0414B0 11 F5 43 04 0889*  	ld de,filedata
0414B4 01 00 00 01 0890*  	ld bc,65536
0414B8 3E 01       0891*  	ld a,mos_load
0414BA 5B CF       0892*  	RST.LIL 08h
0414BC 21 78 02 00 0893*  	ld hl,BUF_0632
0414C0 01 09 00 00 0894*  	ld bc,9
0414C4 11 0C 00 00 0895*  	ld de,12
0414C8 DD 21 6C 00 0896*  	ld ix,108
       00          
0414CD CD 68 39 04 0897*  	call vdu_load_img_2
0414D1             0898*  
0414D1 21 70 1A 04 0899*  	ld hl,Fhonda121
0414D5 11 F5 43 04 0900*  	ld de,filedata
0414D9 01 00 00 01 0901*  	ld bc,65536
0414DD 3E 01       0902*  	ld a,mos_load
0414DF 5B CF       0903*  	RST.LIL 08h
0414E1 21 79 02 00 0904*  	ld hl,BUF_0633
0414E5 01 09 00 00 0905*  	ld bc,9
0414E9 11 11 00 00 0906*  	ld de,17
0414ED DD 21 99 00 0907*  	ld ix,153
       00          
0414F2 CD 68 39 04 0908*  	call vdu_load_img_2
0414F6             0909*  
0414F6 21 86 1A 04 0910*  	ld hl,Fhonda122
0414FA 11 F5 43 04 0911*  	ld de,filedata
0414FE 01 00 00 01 0912*  	ld bc,65536
041502 3E 01       0913*  	ld a,mos_load
041504 5B CF       0914*  	RST.LIL 08h
041506 21 7A 02 00 0915*  	ld hl,BUF_0634
04150A 01 09 00 00 0916*  	ld bc,9
04150E 11 0C 00 00 0917*  	ld de,12
041512 DD 21 6C 00 0918*  	ld ix,108
       00          
041517 CD 68 39 04 0919*  	call vdu_load_img_2
04151B             0920*  
04151B C9          0921*  	ret
04151C             0922*  
04151C 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
041532 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
041548 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
04155E 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
041574 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
04158A 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
0415A0 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
0415B6 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
0415CC 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
0415E2 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0415F8 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
04160E 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
041624 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
04163A 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
041650 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
041666 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
04167C 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
041692 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
0416A8 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
0416BE 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
0416D4 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0416EA 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
041700 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
041716 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
04172C 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
041742 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
041758 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
04176E 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
041784 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
04179A 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
0417B0 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
0417C6 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
0417DC 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
0417F2 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
041808 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
04181E 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
041834 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
04184A 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
041860 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
041876 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
04188C 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
0418A2 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
0418B8 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
0418CE 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
0418E4 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
0418FA 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
041910 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
041926 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
04193C 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
041952 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
041968 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
04197E 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
041994 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
0419AA 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
0419C0 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
0419D6 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
0419EC 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
041A02 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
041A18 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
041A2E 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
041A44 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
041A5A 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
041A70 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
041A86 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
041A9C             0018   	include "src/asm/font_retro_computer.inc"
041A9C             0001*  ; Bitmap indices:
041A9C             0002*  BUF_0288: equ 0x0120 ; 32
041A9C             0003*  BUF_0289: equ 0x0121 ; 33 !
041A9C             0004*  ; Missing character 34 "
041A9C             0005*  ; Missing character 35 #
041A9C             0006*  ; Missing character 36 $
041A9C             0007*  ; Missing character 37 %
041A9C             0008*  ; Missing character 38 &
041A9C             0009*  ; Missing character 39 '
041A9C             0010*  ; Missing character 40 (
041A9C             0011*  ; Missing character 41 )
041A9C             0012*  ; Missing character 42 *
041A9C             0013*  ; Missing character 43 +
041A9C             0014*  ; Missing character 44 ,
041A9C             0015*  ; Missing character 45 -
041A9C             0016*  ; Missing character 46 .
041A9C             0017*  ; Missing character 47 /
041A9C             0018*  BUF_0304: equ 0x0130 ; 48 0
041A9C             0019*  BUF_0305: equ 0x0131 ; 49 1
041A9C             0020*  BUF_0306: equ 0x0132 ; 50 2
041A9C             0021*  BUF_0307: equ 0x0133 ; 51 3
041A9C             0022*  BUF_0308: equ 0x0134 ; 52 4
041A9C             0023*  BUF_0309: equ 0x0135 ; 53 5
041A9C             0024*  BUF_0310: equ 0x0136 ; 54 6
041A9C             0025*  BUF_0311: equ 0x0137 ; 55 7
041A9C             0026*  BUF_0312: equ 0x0138 ; 56 8
041A9C             0027*  BUF_0313: equ 0x0139 ; 57 9
041A9C             0028*  ; Missing character 58 :
041A9C             0029*  ; Missing character 59 ;
041A9C             0030*  ; Missing character 60 <
041A9C             0031*  ; Missing character 61 =
041A9C             0032*  ; Missing character 62 >
041A9C             0033*  BUF_0319: equ 0x013F ; 63 ?
041A9C             0034*  ; Missing character 64 @
041A9C             0035*  BUF_0321: equ 0x0141 ; 65 A
041A9C             0036*  BUF_0322: equ 0x0142 ; 66 B
041A9C             0037*  BUF_0323: equ 0x0143 ; 67 C
041A9C             0038*  BUF_0324: equ 0x0144 ; 68 D
041A9C             0039*  BUF_0325: equ 0x0145 ; 69 E
041A9C             0040*  BUF_0326: equ 0x0146 ; 70 F
041A9C             0041*  BUF_0327: equ 0x0147 ; 71 G
041A9C             0042*  BUF_0328: equ 0x0148 ; 72 H
041A9C             0043*  BUF_0329: equ 0x0149 ; 73 I
041A9C             0044*  BUF_0330: equ 0x014A ; 74 J
041A9C             0045*  BUF_0331: equ 0x014B ; 75 K
041A9C             0046*  BUF_0332: equ 0x014C ; 76 L
041A9C             0047*  BUF_0333: equ 0x014D ; 77 M
041A9C             0048*  BUF_0334: equ 0x014E ; 78 N
041A9C             0049*  BUF_0335: equ 0x014F ; 79 O
041A9C             0050*  BUF_0336: equ 0x0150 ; 80 P
041A9C             0051*  BUF_0337: equ 0x0151 ; 81 Q
041A9C             0052*  BUF_0338: equ 0x0152 ; 82 R
041A9C             0053*  BUF_0339: equ 0x0153 ; 83 S
041A9C             0054*  BUF_0340: equ 0x0154 ; 84 T
041A9C             0055*  BUF_0341: equ 0x0155 ; 85 U
041A9C             0056*  BUF_0342: equ 0x0156 ; 86 V
041A9C             0057*  BUF_0343: equ 0x0157 ; 87 W
041A9C             0058*  BUF_0344: equ 0x0158 ; 88 X
041A9C             0059*  BUF_0345: equ 0x0159 ; 89 Y
041A9C             0060*  BUF_0346: equ 0x015A ; 90 Z
041A9C             0061*  ; Missing character 91 [
041A9C             0062*  ; Missing character 92 \
041A9C             0063*  ; Missing character 93 ]
041A9C             0064*  ; Missing character 94 ^
041A9C             0065*  ; Missing character 95 _
041A9C             0066*  ; Missing character 96 `
041A9C             0067*  ; Missing character 97 a
041A9C             0068*  ; Missing character 98 b
041A9C             0069*  ; Missing character 99 c
041A9C             0070*  ; Missing character 100 d
041A9C             0071*  ; Missing character 101 e
041A9C             0072*  ; Missing character 102 f
041A9C             0073*  ; Missing character 103 g
041A9C             0074*  ; Missing character 104 h
041A9C             0075*  ; Missing character 105 i
041A9C             0076*  ; Missing character 106 j
041A9C             0077*  ; Missing character 107 k
041A9C             0078*  ; Missing character 108 l
041A9C             0079*  ; Missing character 109 m
041A9C             0080*  ; Missing character 110 n
041A9C             0081*  ; Missing character 111 o
041A9C             0082*  ; Missing character 112 p
041A9C             0083*  ; Missing character 113 q
041A9C             0084*  ; Missing character 114 r
041A9C             0085*  ; Missing character 115 s
041A9C             0086*  ; Missing character 116 t
041A9C             0087*  ; Missing character 117 u
041A9C             0088*  ; Missing character 118 v
041A9C             0089*  ; Missing character 119 w
041A9C             0090*  ; Missing character 120 x
041A9C             0091*  ; Missing character 121 y
041A9C             0092*  ; Missing character 122 z
041A9C             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
041A9C             0094*  font_retro_computer:
041A9C 06 01 00 20 0095*  	dl 0x000106,BUF_0288
       01 00       
041AA2 03 0E 00 21 0096*  	dl 0x000E03,BUF_0289
       01 00       
041AA8 06 01 00 20 0097*  	dl 0x000106,BUF_0288 ; Missing character 34
       01 00       
041AAE 06 01 00 20 0098*  	dl 0x000106,BUF_0288 ; Missing character 35
       01 00       
041AB4 06 01 00 20 0099*  	dl 0x000106,BUF_0288 ; Missing character 36
       01 00       
041ABA 06 01 00 20 0100*  	dl 0x000106,BUF_0288 ; Missing character 37
       01 00       
041AC0 06 01 00 20 0101*  	dl 0x000106,BUF_0288 ; Missing character 38
       01 00       
041AC6 06 01 00 20 0102*  	dl 0x000106,BUF_0288 ; Missing character 39
       01 00       
041ACC 06 01 00 20 0103*  	dl 0x000106,BUF_0288 ; Missing character 40
       01 00       
041AD2 06 01 00 20 0104*  	dl 0x000106,BUF_0288 ; Missing character 41
       01 00       
041AD8 06 01 00 20 0105*  	dl 0x000106,BUF_0288 ; Missing character 42
       01 00       
041ADE 06 01 00 20 0106*  	dl 0x000106,BUF_0288 ; Missing character 43
       01 00       
041AE4 06 01 00 20 0107*  	dl 0x000106,BUF_0288 ; Missing character 44
       01 00       
041AEA 06 01 00 20 0108*  	dl 0x000106,BUF_0288 ; Missing character 45
       01 00       
041AF0 06 01 00 20 0109*  	dl 0x000106,BUF_0288 ; Missing character 46
       01 00       
041AF6 06 01 00 20 0110*  	dl 0x000106,BUF_0288 ; Missing character 47
       01 00       
041AFC 08 0E 00 30 0111*  	dl 0x000E08,BUF_0304
       01 00       
041B02 08 0E 00 31 0112*  	dl 0x000E08,BUF_0305
       01 00       
041B08 08 0E 00 32 0113*  	dl 0x000E08,BUF_0306
       01 00       
041B0E 08 0E 00 33 0114*  	dl 0x000E08,BUF_0307
       01 00       
041B14 08 0E 00 34 0115*  	dl 0x000E08,BUF_0308
       01 00       
041B1A 08 0E 00 35 0116*  	dl 0x000E08,BUF_0309
       01 00       
041B20 08 0E 00 36 0117*  	dl 0x000E08,BUF_0310
       01 00       
041B26 08 0E 00 37 0118*  	dl 0x000E08,BUF_0311
       01 00       
041B2C 08 0E 00 38 0119*  	dl 0x000E08,BUF_0312
       01 00       
041B32 08 0E 00 39 0120*  	dl 0x000E08,BUF_0313
       01 00       
041B38 06 01 00 20 0121*  	dl 0x000106,BUF_0288 ; Missing character 58
       01 00       
041B3E 06 01 00 20 0122*  	dl 0x000106,BUF_0288 ; Missing character 59
       01 00       
041B44 06 01 00 20 0123*  	dl 0x000106,BUF_0288 ; Missing character 60
       01 00       
041B4A 06 01 00 20 0124*  	dl 0x000106,BUF_0288 ; Missing character 61
       01 00       
041B50 06 01 00 20 0125*  	dl 0x000106,BUF_0288 ; Missing character 62
       01 00       
041B56 08 0E 00 3F 0126*  	dl 0x000E08,BUF_0319
       01 00       
041B5C 06 01 00 20 0127*  	dl 0x000106,BUF_0288 ; Missing character 64
       01 00       
041B62 07 0E 00 41 0128*  	dl 0x000E07,BUF_0321
       01 00       
041B68 08 0E 00 42 0129*  	dl 0x000E08,BUF_0322
       01 00       
041B6E 07 0E 00 43 0130*  	dl 0x000E07,BUF_0323
       01 00       
041B74 08 0E 00 44 0131*  	dl 0x000E08,BUF_0324
       01 00       
041B7A 08 0E 00 45 0132*  	dl 0x000E08,BUF_0325
       01 00       
041B80 07 0E 00 46 0133*  	dl 0x000E07,BUF_0326
       01 00       
041B86 08 0E 00 47 0134*  	dl 0x000E08,BUF_0327
       01 00       
041B8C 07 0E 00 48 0135*  	dl 0x000E07,BUF_0328
       01 00       
041B92 07 0E 00 49 0136*  	dl 0x000E07,BUF_0329
       01 00       
041B98 08 0E 00 4A 0137*  	dl 0x000E08,BUF_0330
       01 00       
041B9E 07 0E 00 4B 0138*  	dl 0x000E07,BUF_0331
       01 00       
041BA4 08 0E 00 4C 0139*  	dl 0x000E08,BUF_0332
       01 00       
041BAA 09 0E 00 4D 0140*  	dl 0x000E09,BUF_0333
       01 00       
041BB0 07 0E 00 4E 0141*  	dl 0x000E07,BUF_0334
       01 00       
041BB6 08 0E 00 4F 0142*  	dl 0x000E08,BUF_0335
       01 00       
041BBC 07 0E 00 50 0143*  	dl 0x000E07,BUF_0336
       01 00       
041BC2 08 0F 00 51 0144*  	dl 0x000F08,BUF_0337
       01 00       
041BC8 08 0E 00 52 0145*  	dl 0x000E08,BUF_0338
       01 00       
041BCE 08 0E 00 53 0146*  	dl 0x000E08,BUF_0339
       01 00       
041BD4 07 0E 00 54 0147*  	dl 0x000E07,BUF_0340
       01 00       
041BDA 08 0E 00 55 0148*  	dl 0x000E08,BUF_0341
       01 00       
041BE0 07 0E 00 56 0149*  	dl 0x000E07,BUF_0342
       01 00       
041BE6 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_0343
       01 00       
041BEC 07 0E 00 58 0151*  	dl 0x000E07,BUF_0344
       01 00       
041BF2 08 0E 00 59 0152*  	dl 0x000E08,BUF_0345
       01 00       
041BF8 07 0E 00 5A 0153*  	dl 0x000E07,BUF_0346
       01 00       
041BFE 06 01 00 20 0154*  	dl 0x000106,BUF_0288 ; Missing character 91
       01 00       
041C04 06 01 00 20 0155*  	dl 0x000106,BUF_0288 ; Missing character 92
       01 00       
041C0A 06 01 00 20 0156*  	dl 0x000106,BUF_0288 ; Missing character 93
       01 00       
041C10 06 01 00 20 0157*  	dl 0x000106,BUF_0288 ; Missing character 94
       01 00       
041C16 06 01 00 20 0158*  	dl 0x000106,BUF_0288 ; Missing character 95
       01 00       
041C1C 06 01 00 20 0159*  	dl 0x000106,BUF_0288 ; Missing character 96
       01 00       
041C22 06 01 00 20 0160*  	dl 0x000106,BUF_0288 ; Missing character 97
       01 00       
041C28 06 01 00 20 0161*  	dl 0x000106,BUF_0288 ; Missing character 98
       01 00       
041C2E 06 01 00 20 0162*  	dl 0x000106,BUF_0288 ; Missing character 99
       01 00       
041C34 06 01 00 20 0163*  	dl 0x000106,BUF_0288 ; Missing character 100
       01 00       
041C3A 06 01 00 20 0164*  	dl 0x000106,BUF_0288 ; Missing character 101
       01 00       
041C40 06 01 00 20 0165*  	dl 0x000106,BUF_0288 ; Missing character 102
       01 00       
041C46 06 01 00 20 0166*  	dl 0x000106,BUF_0288 ; Missing character 103
       01 00       
041C4C 06 01 00 20 0167*  	dl 0x000106,BUF_0288 ; Missing character 104
       01 00       
041C52 06 01 00 20 0168*  	dl 0x000106,BUF_0288 ; Missing character 105
       01 00       
041C58 06 01 00 20 0169*  	dl 0x000106,BUF_0288 ; Missing character 106
       01 00       
041C5E 06 01 00 20 0170*  	dl 0x000106,BUF_0288 ; Missing character 107
       01 00       
041C64 06 01 00 20 0171*  	dl 0x000106,BUF_0288 ; Missing character 108
       01 00       
041C6A 06 01 00 20 0172*  	dl 0x000106,BUF_0288 ; Missing character 109
       01 00       
041C70 06 01 00 20 0173*  	dl 0x000106,BUF_0288 ; Missing character 110
       01 00       
041C76 06 01 00 20 0174*  	dl 0x000106,BUF_0288 ; Missing character 111
       01 00       
041C7C 06 01 00 20 0175*  	dl 0x000106,BUF_0288 ; Missing character 112
       01 00       
041C82 06 01 00 20 0176*  	dl 0x000106,BUF_0288 ; Missing character 113
       01 00       
041C88 06 01 00 20 0177*  	dl 0x000106,BUF_0288 ; Missing character 114
       01 00       
041C8E 06 01 00 20 0178*  	dl 0x000106,BUF_0288 ; Missing character 115
       01 00       
041C94 06 01 00 20 0179*  	dl 0x000106,BUF_0288 ; Missing character 116
       01 00       
041C9A 06 01 00 20 0180*  	dl 0x000106,BUF_0288 ; Missing character 117
       01 00       
041CA0 06 01 00 20 0181*  	dl 0x000106,BUF_0288 ; Missing character 118
       01 00       
041CA6 06 01 00 20 0182*  	dl 0x000106,BUF_0288 ; Missing character 119
       01 00       
041CAC 06 01 00 20 0183*  	dl 0x000106,BUF_0288 ; Missing character 120
       01 00       
041CB2 06 01 00 20 0184*  	dl 0x000106,BUF_0288 ; Missing character 121
       01 00       
041CB8 06 01 00 20 0185*  	dl 0x000106,BUF_0288 ; Missing character 122
       01 00       
041CBE             0186*  
041CBE             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
041CBE             0188*  load_font_retro_computer:
041CBE             0189*  
041CBE 21 62 22 04 0190*  	ld hl,Frc032
041CC2 11 F5 43 04 0191*  	ld de,filedata
041CC6 01 00 00 01 0192*  	ld bc,65536
041CCA 3E 01       0193*  	ld a,mos_load
041CCC 5B CF       0194*  	RST.LIL 08h
041CCE 21 20 01 00 0195*  	ld hl,BUF_0288
041CD2 01 06 00 00 0196*  	ld bc,6
041CD6 11 01 00 00 0197*  	ld de,1
041CDA DD 21 06 00 0198*  	ld ix,6
       00          
041CDF CD 68 39 04 0199*  	call vdu_load_img_2
041CE3             0200*  
041CE3 21 75 22 04 0201*  	ld hl,Frc033
041CE7 11 F5 43 04 0202*  	ld de,filedata
041CEB 01 00 00 01 0203*  	ld bc,65536
041CEF 3E 01       0204*  	ld a,mos_load
041CF1 5B CF       0205*  	RST.LIL 08h
041CF3 21 21 01 00 0206*  	ld hl,BUF_0289
041CF7 01 03 00 00 0207*  	ld bc,3
041CFB 11 0E 00 00 0208*  	ld de,14
041CFF DD 21 2A 00 0209*  	ld ix,42
       00          
041D04 CD 68 39 04 0210*  	call vdu_load_img_2
041D08             0211*  ; Missing character 34
041D08             0212*  ; Missing character 35
041D08             0213*  ; Missing character 36
041D08             0214*  ; Missing character 37
041D08             0215*  ; Missing character 38
041D08             0216*  ; Missing character 39
041D08             0217*  ; Missing character 40
041D08             0218*  ; Missing character 41
041D08             0219*  ; Missing character 42
041D08             0220*  ; Missing character 43
041D08             0221*  ; Missing character 44
041D08             0222*  ; Missing character 45
041D08             0223*  ; Missing character 46
041D08             0224*  ; Missing character 47
041D08             0225*  
041D08 21 88 22 04 0226*  	ld hl,Frc048
041D0C 11 F5 43 04 0227*  	ld de,filedata
041D10 01 00 00 01 0228*  	ld bc,65536
041D14 3E 01       0229*  	ld a,mos_load
041D16 5B CF       0230*  	RST.LIL 08h
041D18 21 30 01 00 0231*  	ld hl,BUF_0304
041D1C 01 08 00 00 0232*  	ld bc,8
041D20 11 0E 00 00 0233*  	ld de,14
041D24 DD 21 70 00 0234*  	ld ix,112
       00          
041D29 CD 68 39 04 0235*  	call vdu_load_img_2
041D2D             0236*  
041D2D 21 9B 22 04 0237*  	ld hl,Frc049
041D31 11 F5 43 04 0238*  	ld de,filedata
041D35 01 00 00 01 0239*  	ld bc,65536
041D39 3E 01       0240*  	ld a,mos_load
041D3B 5B CF       0241*  	RST.LIL 08h
041D3D 21 31 01 00 0242*  	ld hl,BUF_0305
041D41 01 08 00 00 0243*  	ld bc,8
041D45 11 0E 00 00 0244*  	ld de,14
041D49 DD 21 70 00 0245*  	ld ix,112
       00          
041D4E CD 68 39 04 0246*  	call vdu_load_img_2
041D52             0247*  
041D52 21 AE 22 04 0248*  	ld hl,Frc050
041D56 11 F5 43 04 0249*  	ld de,filedata
041D5A 01 00 00 01 0250*  	ld bc,65536
041D5E 3E 01       0251*  	ld a,mos_load
041D60 5B CF       0252*  	RST.LIL 08h
041D62 21 32 01 00 0253*  	ld hl,BUF_0306
041D66 01 08 00 00 0254*  	ld bc,8
041D6A 11 0E 00 00 0255*  	ld de,14
041D6E DD 21 70 00 0256*  	ld ix,112
       00          
041D73 CD 68 39 04 0257*  	call vdu_load_img_2
041D77             0258*  
041D77 21 C1 22 04 0259*  	ld hl,Frc051
041D7B 11 F5 43 04 0260*  	ld de,filedata
041D7F 01 00 00 01 0261*  	ld bc,65536
041D83 3E 01       0262*  	ld a,mos_load
041D85 5B CF       0263*  	RST.LIL 08h
041D87 21 33 01 00 0264*  	ld hl,BUF_0307
041D8B 01 08 00 00 0265*  	ld bc,8
041D8F 11 0E 00 00 0266*  	ld de,14
041D93 DD 21 70 00 0267*  	ld ix,112
       00          
041D98 CD 68 39 04 0268*  	call vdu_load_img_2
041D9C             0269*  
041D9C 21 D4 22 04 0270*  	ld hl,Frc052
041DA0 11 F5 43 04 0271*  	ld de,filedata
041DA4 01 00 00 01 0272*  	ld bc,65536
041DA8 3E 01       0273*  	ld a,mos_load
041DAA 5B CF       0274*  	RST.LIL 08h
041DAC 21 34 01 00 0275*  	ld hl,BUF_0308
041DB0 01 08 00 00 0276*  	ld bc,8
041DB4 11 0E 00 00 0277*  	ld de,14
041DB8 DD 21 70 00 0278*  	ld ix,112
       00          
041DBD CD 68 39 04 0279*  	call vdu_load_img_2
041DC1             0280*  
041DC1 21 E7 22 04 0281*  	ld hl,Frc053
041DC5 11 F5 43 04 0282*  	ld de,filedata
041DC9 01 00 00 01 0283*  	ld bc,65536
041DCD 3E 01       0284*  	ld a,mos_load
041DCF 5B CF       0285*  	RST.LIL 08h
041DD1 21 35 01 00 0286*  	ld hl,BUF_0309
041DD5 01 08 00 00 0287*  	ld bc,8
041DD9 11 0E 00 00 0288*  	ld de,14
041DDD DD 21 70 00 0289*  	ld ix,112
       00          
041DE2 CD 68 39 04 0290*  	call vdu_load_img_2
041DE6             0291*  
041DE6 21 FA 22 04 0292*  	ld hl,Frc054
041DEA 11 F5 43 04 0293*  	ld de,filedata
041DEE 01 00 00 01 0294*  	ld bc,65536
041DF2 3E 01       0295*  	ld a,mos_load
041DF4 5B CF       0296*  	RST.LIL 08h
041DF6 21 36 01 00 0297*  	ld hl,BUF_0310
041DFA 01 08 00 00 0298*  	ld bc,8
041DFE 11 0E 00 00 0299*  	ld de,14
041E02 DD 21 70 00 0300*  	ld ix,112
       00          
041E07 CD 68 39 04 0301*  	call vdu_load_img_2
041E0B             0302*  
041E0B 21 0D 23 04 0303*  	ld hl,Frc055
041E0F 11 F5 43 04 0304*  	ld de,filedata
041E13 01 00 00 01 0305*  	ld bc,65536
041E17 3E 01       0306*  	ld a,mos_load
041E19 5B CF       0307*  	RST.LIL 08h
041E1B 21 37 01 00 0308*  	ld hl,BUF_0311
041E1F 01 08 00 00 0309*  	ld bc,8
041E23 11 0E 00 00 0310*  	ld de,14
041E27 DD 21 70 00 0311*  	ld ix,112
       00          
041E2C CD 68 39 04 0312*  	call vdu_load_img_2
041E30             0313*  
041E30 21 20 23 04 0314*  	ld hl,Frc056
041E34 11 F5 43 04 0315*  	ld de,filedata
041E38 01 00 00 01 0316*  	ld bc,65536
041E3C 3E 01       0317*  	ld a,mos_load
041E3E 5B CF       0318*  	RST.LIL 08h
041E40 21 38 01 00 0319*  	ld hl,BUF_0312
041E44 01 08 00 00 0320*  	ld bc,8
041E48 11 0E 00 00 0321*  	ld de,14
041E4C DD 21 70 00 0322*  	ld ix,112
       00          
041E51 CD 68 39 04 0323*  	call vdu_load_img_2
041E55             0324*  
041E55 21 33 23 04 0325*  	ld hl,Frc057
041E59 11 F5 43 04 0326*  	ld de,filedata
041E5D 01 00 00 01 0327*  	ld bc,65536
041E61 3E 01       0328*  	ld a,mos_load
041E63 5B CF       0329*  	RST.LIL 08h
041E65 21 39 01 00 0330*  	ld hl,BUF_0313
041E69 01 08 00 00 0331*  	ld bc,8
041E6D 11 0E 00 00 0332*  	ld de,14
041E71 DD 21 70 00 0333*  	ld ix,112
       00          
041E76 CD 68 39 04 0334*  	call vdu_load_img_2
041E7A             0335*  ; Missing character 58
041E7A             0336*  ; Missing character 59
041E7A             0337*  ; Missing character 60
041E7A             0338*  ; Missing character 61
041E7A             0339*  ; Missing character 62
041E7A             0340*  
041E7A 21 46 23 04 0341*  	ld hl,Frc063
041E7E 11 F5 43 04 0342*  	ld de,filedata
041E82 01 00 00 01 0343*  	ld bc,65536
041E86 3E 01       0344*  	ld a,mos_load
041E88 5B CF       0345*  	RST.LIL 08h
041E8A 21 3F 01 00 0346*  	ld hl,BUF_0319
041E8E 01 08 00 00 0347*  	ld bc,8
041E92 11 0E 00 00 0348*  	ld de,14
041E96 DD 21 70 00 0349*  	ld ix,112
       00          
041E9B CD 68 39 04 0350*  	call vdu_load_img_2
041E9F             0351*  ; Missing character 64
041E9F             0352*  
041E9F 21 59 23 04 0353*  	ld hl,Frc065
041EA3 11 F5 43 04 0354*  	ld de,filedata
041EA7 01 00 00 01 0355*  	ld bc,65536
041EAB 3E 01       0356*  	ld a,mos_load
041EAD 5B CF       0357*  	RST.LIL 08h
041EAF 21 41 01 00 0358*  	ld hl,BUF_0321
041EB3 01 07 00 00 0359*  	ld bc,7
041EB7 11 0E 00 00 0360*  	ld de,14
041EBB DD 21 62 00 0361*  	ld ix,98
       00          
041EC0 CD 68 39 04 0362*  	call vdu_load_img_2
041EC4             0363*  
041EC4 21 6C 23 04 0364*  	ld hl,Frc066
041EC8 11 F5 43 04 0365*  	ld de,filedata
041ECC 01 00 00 01 0366*  	ld bc,65536
041ED0 3E 01       0367*  	ld a,mos_load
041ED2 5B CF       0368*  	RST.LIL 08h
041ED4 21 42 01 00 0369*  	ld hl,BUF_0322
041ED8 01 08 00 00 0370*  	ld bc,8
041EDC 11 0E 00 00 0371*  	ld de,14
041EE0 DD 21 70 00 0372*  	ld ix,112
       00          
041EE5 CD 68 39 04 0373*  	call vdu_load_img_2
041EE9             0374*  
041EE9 21 7F 23 04 0375*  	ld hl,Frc067
041EED 11 F5 43 04 0376*  	ld de,filedata
041EF1 01 00 00 01 0377*  	ld bc,65536
041EF5 3E 01       0378*  	ld a,mos_load
041EF7 5B CF       0379*  	RST.LIL 08h
041EF9 21 43 01 00 0380*  	ld hl,BUF_0323
041EFD 01 07 00 00 0381*  	ld bc,7
041F01 11 0E 00 00 0382*  	ld de,14
041F05 DD 21 62 00 0383*  	ld ix,98
       00          
041F0A CD 68 39 04 0384*  	call vdu_load_img_2
041F0E             0385*  
041F0E 21 92 23 04 0386*  	ld hl,Frc068
041F12 11 F5 43 04 0387*  	ld de,filedata
041F16 01 00 00 01 0388*  	ld bc,65536
041F1A 3E 01       0389*  	ld a,mos_load
041F1C 5B CF       0390*  	RST.LIL 08h
041F1E 21 44 01 00 0391*  	ld hl,BUF_0324
041F22 01 08 00 00 0392*  	ld bc,8
041F26 11 0E 00 00 0393*  	ld de,14
041F2A DD 21 70 00 0394*  	ld ix,112
       00          
041F2F CD 68 39 04 0395*  	call vdu_load_img_2
041F33             0396*  
041F33 21 A5 23 04 0397*  	ld hl,Frc069
041F37 11 F5 43 04 0398*  	ld de,filedata
041F3B 01 00 00 01 0399*  	ld bc,65536
041F3F 3E 01       0400*  	ld a,mos_load
041F41 5B CF       0401*  	RST.LIL 08h
041F43 21 45 01 00 0402*  	ld hl,BUF_0325
041F47 01 08 00 00 0403*  	ld bc,8
041F4B 11 0E 00 00 0404*  	ld de,14
041F4F DD 21 70 00 0405*  	ld ix,112
       00          
041F54 CD 68 39 04 0406*  	call vdu_load_img_2
041F58             0407*  
041F58 21 B8 23 04 0408*  	ld hl,Frc070
041F5C 11 F5 43 04 0409*  	ld de,filedata
041F60 01 00 00 01 0410*  	ld bc,65536
041F64 3E 01       0411*  	ld a,mos_load
041F66 5B CF       0412*  	RST.LIL 08h
041F68 21 46 01 00 0413*  	ld hl,BUF_0326
041F6C 01 07 00 00 0414*  	ld bc,7
041F70 11 0E 00 00 0415*  	ld de,14
041F74 DD 21 62 00 0416*  	ld ix,98
       00          
041F79 CD 68 39 04 0417*  	call vdu_load_img_2
041F7D             0418*  
041F7D 21 CB 23 04 0419*  	ld hl,Frc071
041F81 11 F5 43 04 0420*  	ld de,filedata
041F85 01 00 00 01 0421*  	ld bc,65536
041F89 3E 01       0422*  	ld a,mos_load
041F8B 5B CF       0423*  	RST.LIL 08h
041F8D 21 47 01 00 0424*  	ld hl,BUF_0327
041F91 01 08 00 00 0425*  	ld bc,8
041F95 11 0E 00 00 0426*  	ld de,14
041F99 DD 21 70 00 0427*  	ld ix,112
       00          
041F9E CD 68 39 04 0428*  	call vdu_load_img_2
041FA2             0429*  
041FA2 21 DE 23 04 0430*  	ld hl,Frc072
041FA6 11 F5 43 04 0431*  	ld de,filedata
041FAA 01 00 00 01 0432*  	ld bc,65536
041FAE 3E 01       0433*  	ld a,mos_load
041FB0 5B CF       0434*  	RST.LIL 08h
041FB2 21 48 01 00 0435*  	ld hl,BUF_0328
041FB6 01 07 00 00 0436*  	ld bc,7
041FBA 11 0E 00 00 0437*  	ld de,14
041FBE DD 21 62 00 0438*  	ld ix,98
       00          
041FC3 CD 68 39 04 0439*  	call vdu_load_img_2
041FC7             0440*  
041FC7 21 F1 23 04 0441*  	ld hl,Frc073
041FCB 11 F5 43 04 0442*  	ld de,filedata
041FCF 01 00 00 01 0443*  	ld bc,65536
041FD3 3E 01       0444*  	ld a,mos_load
041FD5 5B CF       0445*  	RST.LIL 08h
041FD7 21 49 01 00 0446*  	ld hl,BUF_0329
041FDB 01 07 00 00 0447*  	ld bc,7
041FDF 11 0E 00 00 0448*  	ld de,14
041FE3 DD 21 62 00 0449*  	ld ix,98
       00          
041FE8 CD 68 39 04 0450*  	call vdu_load_img_2
041FEC             0451*  
041FEC 21 04 24 04 0452*  	ld hl,Frc074
041FF0 11 F5 43 04 0453*  	ld de,filedata
041FF4 01 00 00 01 0454*  	ld bc,65536
041FF8 3E 01       0455*  	ld a,mos_load
041FFA 5B CF       0456*  	RST.LIL 08h
041FFC 21 4A 01 00 0457*  	ld hl,BUF_0330
042000 01 08 00 00 0458*  	ld bc,8
042004 11 0E 00 00 0459*  	ld de,14
042008 DD 21 70 00 0460*  	ld ix,112
       00          
04200D CD 68 39 04 0461*  	call vdu_load_img_2
042011             0462*  
042011 21 17 24 04 0463*  	ld hl,Frc075
042015 11 F5 43 04 0464*  	ld de,filedata
042019 01 00 00 01 0465*  	ld bc,65536
04201D 3E 01       0466*  	ld a,mos_load
04201F 5B CF       0467*  	RST.LIL 08h
042021 21 4B 01 00 0468*  	ld hl,BUF_0331
042025 01 07 00 00 0469*  	ld bc,7
042029 11 0E 00 00 0470*  	ld de,14
04202D DD 21 62 00 0471*  	ld ix,98
       00          
042032 CD 68 39 04 0472*  	call vdu_load_img_2
042036             0473*  
042036 21 2A 24 04 0474*  	ld hl,Frc076
04203A 11 F5 43 04 0475*  	ld de,filedata
04203E 01 00 00 01 0476*  	ld bc,65536
042042 3E 01       0477*  	ld a,mos_load
042044 5B CF       0478*  	RST.LIL 08h
042046 21 4C 01 00 0479*  	ld hl,BUF_0332
04204A 01 08 00 00 0480*  	ld bc,8
04204E 11 0E 00 00 0481*  	ld de,14
042052 DD 21 70 00 0482*  	ld ix,112
       00          
042057 CD 68 39 04 0483*  	call vdu_load_img_2
04205B             0484*  
04205B 21 3D 24 04 0485*  	ld hl,Frc077
04205F 11 F5 43 04 0486*  	ld de,filedata
042063 01 00 00 01 0487*  	ld bc,65536
042067 3E 01       0488*  	ld a,mos_load
042069 5B CF       0489*  	RST.LIL 08h
04206B 21 4D 01 00 0490*  	ld hl,BUF_0333
04206F 01 09 00 00 0491*  	ld bc,9
042073 11 0E 00 00 0492*  	ld de,14
042077 DD 21 7E 00 0493*  	ld ix,126
       00          
04207C CD 68 39 04 0494*  	call vdu_load_img_2
042080             0495*  
042080 21 50 24 04 0496*  	ld hl,Frc078
042084 11 F5 43 04 0497*  	ld de,filedata
042088 01 00 00 01 0498*  	ld bc,65536
04208C 3E 01       0499*  	ld a,mos_load
04208E 5B CF       0500*  	RST.LIL 08h
042090 21 4E 01 00 0501*  	ld hl,BUF_0334
042094 01 07 00 00 0502*  	ld bc,7
042098 11 0E 00 00 0503*  	ld de,14
04209C DD 21 62 00 0504*  	ld ix,98
       00          
0420A1 CD 68 39 04 0505*  	call vdu_load_img_2
0420A5             0506*  
0420A5 21 63 24 04 0507*  	ld hl,Frc079
0420A9 11 F5 43 04 0508*  	ld de,filedata
0420AD 01 00 00 01 0509*  	ld bc,65536
0420B1 3E 01       0510*  	ld a,mos_load
0420B3 5B CF       0511*  	RST.LIL 08h
0420B5 21 4F 01 00 0512*  	ld hl,BUF_0335
0420B9 01 08 00 00 0513*  	ld bc,8
0420BD 11 0E 00 00 0514*  	ld de,14
0420C1 DD 21 70 00 0515*  	ld ix,112
       00          
0420C6 CD 68 39 04 0516*  	call vdu_load_img_2
0420CA             0517*  
0420CA 21 76 24 04 0518*  	ld hl,Frc080
0420CE 11 F5 43 04 0519*  	ld de,filedata
0420D2 01 00 00 01 0520*  	ld bc,65536
0420D6 3E 01       0521*  	ld a,mos_load
0420D8 5B CF       0522*  	RST.LIL 08h
0420DA 21 50 01 00 0523*  	ld hl,BUF_0336
0420DE 01 07 00 00 0524*  	ld bc,7
0420E2 11 0E 00 00 0525*  	ld de,14
0420E6 DD 21 62 00 0526*  	ld ix,98
       00          
0420EB CD 68 39 04 0527*  	call vdu_load_img_2
0420EF             0528*  
0420EF 21 89 24 04 0529*  	ld hl,Frc081
0420F3 11 F5 43 04 0530*  	ld de,filedata
0420F7 01 00 00 01 0531*  	ld bc,65536
0420FB 3E 01       0532*  	ld a,mos_load
0420FD 5B CF       0533*  	RST.LIL 08h
0420FF 21 51 01 00 0534*  	ld hl,BUF_0337
042103 01 08 00 00 0535*  	ld bc,8
042107 11 0F 00 00 0536*  	ld de,15
04210B DD 21 78 00 0537*  	ld ix,120
       00          
042110 CD 68 39 04 0538*  	call vdu_load_img_2
042114             0539*  
042114 21 9C 24 04 0540*  	ld hl,Frc082
042118 11 F5 43 04 0541*  	ld de,filedata
04211C 01 00 00 01 0542*  	ld bc,65536
042120 3E 01       0543*  	ld a,mos_load
042122 5B CF       0544*  	RST.LIL 08h
042124 21 52 01 00 0545*  	ld hl,BUF_0338
042128 01 08 00 00 0546*  	ld bc,8
04212C 11 0E 00 00 0547*  	ld de,14
042130 DD 21 70 00 0548*  	ld ix,112
       00          
042135 CD 68 39 04 0549*  	call vdu_load_img_2
042139             0550*  
042139 21 AF 24 04 0551*  	ld hl,Frc083
04213D 11 F5 43 04 0552*  	ld de,filedata
042141 01 00 00 01 0553*  	ld bc,65536
042145 3E 01       0554*  	ld a,mos_load
042147 5B CF       0555*  	RST.LIL 08h
042149 21 53 01 00 0556*  	ld hl,BUF_0339
04214D 01 08 00 00 0557*  	ld bc,8
042151 11 0E 00 00 0558*  	ld de,14
042155 DD 21 70 00 0559*  	ld ix,112
       00          
04215A CD 68 39 04 0560*  	call vdu_load_img_2
04215E             0561*  
04215E 21 C2 24 04 0562*  	ld hl,Frc084
042162 11 F5 43 04 0563*  	ld de,filedata
042166 01 00 00 01 0564*  	ld bc,65536
04216A 3E 01       0565*  	ld a,mos_load
04216C 5B CF       0566*  	RST.LIL 08h
04216E 21 54 01 00 0567*  	ld hl,BUF_0340
042172 01 07 00 00 0568*  	ld bc,7
042176 11 0E 00 00 0569*  	ld de,14
04217A DD 21 62 00 0570*  	ld ix,98
       00          
04217F CD 68 39 04 0571*  	call vdu_load_img_2
042183             0572*  
042183 21 D5 24 04 0573*  	ld hl,Frc085
042187 11 F5 43 04 0574*  	ld de,filedata
04218B 01 00 00 01 0575*  	ld bc,65536
04218F 3E 01       0576*  	ld a,mos_load
042191 5B CF       0577*  	RST.LIL 08h
042193 21 55 01 00 0578*  	ld hl,BUF_0341
042197 01 08 00 00 0579*  	ld bc,8
04219B 11 0E 00 00 0580*  	ld de,14
04219F DD 21 70 00 0581*  	ld ix,112
       00          
0421A4 CD 68 39 04 0582*  	call vdu_load_img_2
0421A8             0583*  
0421A8 21 E8 24 04 0584*  	ld hl,Frc086
0421AC 11 F5 43 04 0585*  	ld de,filedata
0421B0 01 00 00 01 0586*  	ld bc,65536
0421B4 3E 01       0587*  	ld a,mos_load
0421B6 5B CF       0588*  	RST.LIL 08h
0421B8 21 56 01 00 0589*  	ld hl,BUF_0342
0421BC 01 07 00 00 0590*  	ld bc,7
0421C0 11 0E 00 00 0591*  	ld de,14
0421C4 DD 21 62 00 0592*  	ld ix,98
       00          
0421C9 CD 68 39 04 0593*  	call vdu_load_img_2
0421CD             0594*  
0421CD 21 FB 24 04 0595*  	ld hl,Frc087
0421D1 11 F5 43 04 0596*  	ld de,filedata
0421D5 01 00 00 01 0597*  	ld bc,65536
0421D9 3E 01       0598*  	ld a,mos_load
0421DB 5B CF       0599*  	RST.LIL 08h
0421DD 21 57 01 00 0600*  	ld hl,BUF_0343
0421E1 01 0B 00 00 0601*  	ld bc,11
0421E5 11 0E 00 00 0602*  	ld de,14
0421E9 DD 21 9A 00 0603*  	ld ix,154
       00          
0421EE CD 68 39 04 0604*  	call vdu_load_img_2
0421F2             0605*  
0421F2 21 0E 25 04 0606*  	ld hl,Frc088
0421F6 11 F5 43 04 0607*  	ld de,filedata
0421FA 01 00 00 01 0608*  	ld bc,65536
0421FE 3E 01       0609*  	ld a,mos_load
042200 5B CF       0610*  	RST.LIL 08h
042202 21 58 01 00 0611*  	ld hl,BUF_0344
042206 01 07 00 00 0612*  	ld bc,7
04220A 11 0E 00 00 0613*  	ld de,14
04220E DD 21 62 00 0614*  	ld ix,98
       00          
042213 CD 68 39 04 0615*  	call vdu_load_img_2
042217             0616*  
042217 21 21 25 04 0617*  	ld hl,Frc089
04221B 11 F5 43 04 0618*  	ld de,filedata
04221F 01 00 00 01 0619*  	ld bc,65536
042223 3E 01       0620*  	ld a,mos_load
042225 5B CF       0621*  	RST.LIL 08h
042227 21 59 01 00 0622*  	ld hl,BUF_0345
04222B 01 08 00 00 0623*  	ld bc,8
04222F 11 0E 00 00 0624*  	ld de,14
042233 DD 21 70 00 0625*  	ld ix,112
       00          
042238 CD 68 39 04 0626*  	call vdu_load_img_2
04223C             0627*  
04223C 21 34 25 04 0628*  	ld hl,Frc090
042240 11 F5 43 04 0629*  	ld de,filedata
042244 01 00 00 01 0630*  	ld bc,65536
042248 3E 01       0631*  	ld a,mos_load
04224A 5B CF       0632*  	RST.LIL 08h
04224C 21 5A 01 00 0633*  	ld hl,BUF_0346
042250 01 07 00 00 0634*  	ld bc,7
042254 11 0E 00 00 0635*  	ld de,14
042258 DD 21 62 00 0636*  	ld ix,98
       00          
04225D CD 68 39 04 0637*  	call vdu_load_img_2
042261             0638*  ; Missing character 91
042261             0639*  ; Missing character 92
042261             0640*  ; Missing character 93
042261             0641*  ; Missing character 94
042261             0642*  ; Missing character 95
042261             0643*  ; Missing character 96
042261             0644*  ; Missing character 97
042261             0645*  ; Missing character 98
042261             0646*  ; Missing character 99
042261             0647*  ; Missing character 100
042261             0648*  ; Missing character 101
042261             0649*  ; Missing character 102
042261             0650*  ; Missing character 103
042261             0651*  ; Missing character 104
042261             0652*  ; Missing character 105
042261             0653*  ; Missing character 106
042261             0654*  ; Missing character 107
042261             0655*  ; Missing character 108
042261             0656*  ; Missing character 109
042261             0657*  ; Missing character 110
042261             0658*  ; Missing character 111
042261             0659*  ; Missing character 112
042261             0660*  ; Missing character 113
042261             0661*  ; Missing character 114
042261             0662*  ; Missing character 115
042261             0663*  ; Missing character 116
042261             0664*  ; Missing character 117
042261             0665*  ; Missing character 118
042261             0666*  ; Missing character 119
042261             0667*  ; Missing character 120
042261             0668*  ; Missing character 121
042261             0669*  ; Missing character 122
042261             0670*  
042261 C9          0671*  	ret
042262             0672*  
042262 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
042275 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
042288 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
04229B 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
0422AE 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
0422C1 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
0422D4 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
0422E7 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
0422FA 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
04230D 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
042320 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
042333 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
042346 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
042359 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
04236C 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
04237F 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
042392 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
0423A5 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
0423B8 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
0423CB 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
0423DE 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
0423F1 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
042404 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
042417 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
04242A 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
04243D 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
042450 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
042463 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
042476 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
042489 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
04249C 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
0424AF 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
0424C2 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
0424D5 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
0424E8 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
0424FB 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
04250E 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
042521 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
042534 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
042547             0019   	include "src/asm/ui.inc"
042547             0001*  ; ui routines will go here
042547             0020   	include "src/asm/ui_img.inc"
042547             0001*  ; Bitmap indices:
042547             0002*  BUF_UI_BJ_025: equ 0x0300
042547             0003*  BUF_UI_BJ_050: equ 0x0301
042547             0004*  BUF_UI_BJ_075: equ 0x0302
042547             0005*  BUF_UI_BJ_100: equ 0x0303
042547             0006*  BUF_UI_BJ_120_120: equ 0x0304
042547             0007*  BUF_UI_LOWER_PANEL: equ 0x0305
042547             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x0306
042547             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x0307
042547             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x0308
042547             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x0309
042547             0012*  BUF_UI_SPLASH: equ 0x030A
042547             0013*  
042547             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
042547             0015*  load_ui_images:
042547             0016*  
042547 21 0B 27 04 0017*  	ld hl,F_UI_bj_025
04254B 11 F5 43 04 0018*  	ld de,filedata
04254F 01 00 00 01 0019*  	ld bc,65536
042553 3E 01       0020*  	ld a,mos_load
042555 5B CF       0021*  	RST.LIL 08h
042557 21 00 03 00 0022*  	ld hl,BUF_UI_BJ_025
04255B 01 20 00 00 0023*  	ld bc,32
04255F 11 20 00 00 0024*  	ld de,32
042563 DD 21 00 04 0025*  	ld ix,1024
       00          
042568 CD 68 39 04 0026*  	call vdu_load_img_2
04256C 3E 2E       0027*  	LD A, '.'
04256E 5B D7       0028*  	RST.LIL 10h
042570             0029*  
042570 21 1B 27 04 0030*  	ld hl,F_UI_bj_050
042574 11 F5 43 04 0031*  	ld de,filedata
042578 01 00 00 01 0032*  	ld bc,65536
04257C 3E 01       0033*  	ld a,mos_load
04257E 5B CF       0034*  	RST.LIL 08h
042580 21 01 03 00 0035*  	ld hl,BUF_UI_BJ_050
042584 01 20 00 00 0036*  	ld bc,32
042588 11 20 00 00 0037*  	ld de,32
04258C DD 21 00 04 0038*  	ld ix,1024
       00          
042591 CD 68 39 04 0039*  	call vdu_load_img_2
042595 3E 2E       0040*  	LD A, '.'
042597 5B D7       0041*  	RST.LIL 10h
042599             0042*  
042599 21 2B 27 04 0043*  	ld hl,F_UI_bj_075
04259D 11 F5 43 04 0044*  	ld de,filedata
0425A1 01 00 00 01 0045*  	ld bc,65536
0425A5 3E 01       0046*  	ld a,mos_load
0425A7 5B CF       0047*  	RST.LIL 08h
0425A9 21 02 03 00 0048*  	ld hl,BUF_UI_BJ_075
0425AD 01 20 00 00 0049*  	ld bc,32
0425B1 11 20 00 00 0050*  	ld de,32
0425B5 DD 21 00 04 0051*  	ld ix,1024
       00          
0425BA CD 68 39 04 0052*  	call vdu_load_img_2
0425BE 3E 2E       0053*  	LD A, '.'
0425C0 5B D7       0054*  	RST.LIL 10h
0425C2             0055*  
0425C2 21 3B 27 04 0056*  	ld hl,F_UI_bj_100
0425C6 11 F5 43 04 0057*  	ld de,filedata
0425CA 01 00 00 01 0058*  	ld bc,65536
0425CE 3E 01       0059*  	ld a,mos_load
0425D0 5B CF       0060*  	RST.LIL 08h
0425D2 21 03 03 00 0061*  	ld hl,BUF_UI_BJ_100
0425D6 01 20 00 00 0062*  	ld bc,32
0425DA 11 20 00 00 0063*  	ld de,32
0425DE DD 21 00 04 0064*  	ld ix,1024
       00          
0425E3 CD 68 39 04 0065*  	call vdu_load_img_2
0425E7 3E 2E       0066*  	LD A, '.'
0425E9 5B D7       0067*  	RST.LIL 10h
0425EB             0068*  
0425EB 21 4B 27 04 0069*  	ld hl,F_UI_bj_120_120
0425EF 11 F5 43 04 0070*  	ld de,filedata
0425F3 01 00 00 01 0071*  	ld bc,65536
0425F7 3E 01       0072*  	ld a,mos_load
0425F9 5B CF       0073*  	RST.LIL 08h
0425FB 21 04 03 00 0074*  	ld hl,BUF_UI_BJ_120_120
0425FF 01 78 00 00 0075*  	ld bc,120
042603 11 78 00 00 0076*  	ld de,120
042607 DD 21 40 38 0077*  	ld ix,14400
       00          
04260C CD 68 39 04 0078*  	call vdu_load_img_2
042610 3E 2E       0079*  	LD A, '.'
042612 5B D7       0080*  	RST.LIL 10h
042614             0081*  
042614 21 5F 27 04 0082*  	ld hl,F_UI_lower_panel
042618 11 F5 43 04 0083*  	ld de,filedata
04261C 01 00 00 01 0084*  	ld bc,65536
042620 3E 01       0085*  	ld a,mos_load
042622 5B CF       0086*  	RST.LIL 08h
042624 21 05 03 00 0087*  	ld hl,BUF_UI_LOWER_PANEL
042628 01 40 01 00 0088*  	ld bc,320
04262C 11 50 00 00 0089*  	ld de,80
042630 DD 21 00 64 0090*  	ld ix,25600
       00          
042635 CD 68 39 04 0091*  	call vdu_load_img_2
042639 3E 2E       0092*  	LD A, '.'
04263B 5B D7       0093*  	RST.LIL 10h
04263D             0094*  
04263D 21 74 27 04 0095*  	ld hl,F_UI_lower_panel_gatling
042641 11 F5 43 04 0096*  	ld de,filedata
042645 01 00 00 01 0097*  	ld bc,65536
042649 3E 01       0098*  	ld a,mos_load
04264B 5B CF       0099*  	RST.LIL 08h
04264D 21 06 03 00 0100*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
042651 01 28 00 00 0101*  	ld bc,40
042655 11 14 00 00 0102*  	ld de,20
042659 DD 21 20 03 0103*  	ld ix,800
       00          
04265E CD 68 39 04 0104*  	call vdu_load_img_2
042662 3E 2E       0105*  	LD A, '.'
042664 5B D7       0106*  	RST.LIL 10h
042666             0107*  
042666 21 91 27 04 0108*  	ld hl,F_UI_lower_panel_knife
04266A 11 F5 43 04 0109*  	ld de,filedata
04266E 01 00 00 01 0110*  	ld bc,65536
042672 3E 01       0111*  	ld a,mos_load
042674 5B CF       0112*  	RST.LIL 08h
042676 21 07 03 00 0113*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
04267A 01 28 00 00 0114*  	ld bc,40
04267E 11 14 00 00 0115*  	ld de,20
042682 DD 21 20 03 0116*  	ld ix,800
       00          
042687 CD 68 39 04 0117*  	call vdu_load_img_2
04268B 3E 2E       0118*  	LD A, '.'
04268D 5B D7       0119*  	RST.LIL 10h
04268F             0120*  
04268F 21 AC 27 04 0121*  	ld hl,F_UI_lower_panel_machine_gun
042693 11 F5 43 04 0122*  	ld de,filedata
042697 01 00 00 01 0123*  	ld bc,65536
04269B 3E 01       0124*  	ld a,mos_load
04269D 5B CF       0125*  	RST.LIL 08h
04269F 21 08 03 00 0126*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
0426A3 01 28 00 00 0127*  	ld bc,40
0426A7 11 14 00 00 0128*  	ld de,20
0426AB DD 21 20 03 0129*  	ld ix,800
       00          
0426B0 CD 68 39 04 0130*  	call vdu_load_img_2
0426B4 3E 2E       0131*  	LD A, '.'
0426B6 5B D7       0132*  	RST.LIL 10h
0426B8             0133*  
0426B8 21 CD 27 04 0134*  	ld hl,F_UI_lower_panel_pistol
0426BC 11 F5 43 04 0135*  	ld de,filedata
0426C0 01 00 00 01 0136*  	ld bc,65536
0426C4 3E 01       0137*  	ld a,mos_load
0426C6 5B CF       0138*  	RST.LIL 08h
0426C8 21 09 03 00 0139*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
0426CC 01 28 00 00 0140*  	ld bc,40
0426D0 11 14 00 00 0141*  	ld de,20
0426D4 DD 21 20 03 0142*  	ld ix,800
       00          
0426D9 CD 68 39 04 0143*  	call vdu_load_img_2
0426DD 3E 2E       0144*  	LD A, '.'
0426DF 5B D7       0145*  	RST.LIL 10h
0426E1             0146*  
0426E1 21 E9 27 04 0147*  	ld hl,F_UI_splash
0426E5 11 F5 43 04 0148*  	ld de,filedata
0426E9 01 00 00 01 0149*  	ld bc,65536
0426ED 3E 01       0150*  	ld a,mos_load
0426EF 5B CF       0151*  	RST.LIL 08h
0426F1 21 0A 03 00 0152*  	ld hl,BUF_UI_SPLASH
0426F5 01 40 01 00 0153*  	ld bc,320
0426F9 11 A0 00 00 0154*  	ld de,160
0426FD DD 21 00 C8 0155*  	ld ix,51200
       00          
042702 CD 68 39 04 0156*  	call vdu_load_img_2
042706 3E 2E       0157*  	LD A, '.'
042708 5B D7       0158*  	RST.LIL 10h
04270A             0159*  
04270A C9          0160*  	ret
04270B             0161*  
04270B 75 69 2F 62 0162*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04271B 75 69 2F 62 0163*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
04272B 75 69 2F 62 0164*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
04273B 75 69 2F 62 0165*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
04274B 75 69 2F 62 0166*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
04275F 75 69 2F 6C 0167*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
042774 75 69 2F 6C 0168*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
042791 75 69 2F 6C 0169*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
0427AC 75 69 2F 6C 0170*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
0427CD 75 69 2F 6C 0171*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
0427E9 75 69 2F 73 0172*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
0427F9             0021   	include "src/asm/ui_img_bj.inc"
0427F9             0001*  ; Bitmap indices:
0427F9             0002*  BUF_UI_BJ_GATLING_00: equ 0x0400
0427F9             0003*  BUF_UI_BJ_GATLING_01: equ 0x0401
0427F9             0004*  BUF_UI_BJ_GATLING_02: equ 0x0402
0427F9             0005*  BUF_UI_BJ_GATLING_03: equ 0x0403
0427F9             0006*  BUF_UI_BJ_GATLING_04: equ 0x0404
0427F9             0007*  BUF_UI_BJ_KNIFE_00: equ 0x0405
0427F9             0008*  BUF_UI_BJ_KNIFE_01: equ 0x0406
0427F9             0009*  BUF_UI_BJ_KNIFE_02: equ 0x0407
0427F9             0010*  BUF_UI_BJ_KNIFE_03: equ 0x0408
0427F9             0011*  BUF_UI_BJ_KNIFE_04: equ 0x0409
0427F9             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x040A
0427F9             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x040B
0427F9             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x040C
0427F9             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x040D
0427F9             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x040E
0427F9             0017*  BUF_UI_BJ_PISTOL_00: equ 0x040F
0427F9             0018*  BUF_UI_BJ_PISTOL_01: equ 0x0410
0427F9             0019*  BUF_UI_BJ_PISTOL_02: equ 0x0411
0427F9             0020*  BUF_UI_BJ_PISTOL_03: equ 0x0412
0427F9             0021*  BUF_UI_BJ_PISTOL_04: equ 0x0413
0427F9             0022*  
0427F9             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
0427F9             0024*  load_ui_images_bj:
0427F9             0025*  
0427F9 21 2E 2B 04 0026*  	ld hl,F_UI_bj_gatling_00
0427FD 11 F5 43 04 0027*  	ld de,filedata
042801 01 00 00 01 0028*  	ld bc,65536
042805 3E 01       0029*  	ld a,mos_load
042807 5B CF       0030*  	RST.LIL 08h
042809 21 00 04 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
04280D 01 40 00 00 0032*  	ld bc,64
042811 11 40 00 00 0033*  	ld de,64
042815 DD 21 00 10 0034*  	ld ix,4096
       00          
04281A CD 68 39 04 0035*  	call vdu_load_img_2
04281E 3E 2E       0036*  	LD A, '.'
042820 5B D7       0037*  	RST.LIL 10h
042822             0038*  
042822 21 48 2B 04 0039*  	ld hl,F_UI_bj_gatling_01
042826 11 F5 43 04 0040*  	ld de,filedata
04282A 01 00 00 01 0041*  	ld bc,65536
04282E 3E 01       0042*  	ld a,mos_load
042830 5B CF       0043*  	RST.LIL 08h
042832 21 01 04 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
042836 01 40 00 00 0045*  	ld bc,64
04283A 11 40 00 00 0046*  	ld de,64
04283E DD 21 00 10 0047*  	ld ix,4096
       00          
042843 CD 68 39 04 0048*  	call vdu_load_img_2
042847 3E 2E       0049*  	LD A, '.'
042849 5B D7       0050*  	RST.LIL 10h
04284B             0051*  
04284B 21 62 2B 04 0052*  	ld hl,F_UI_bj_gatling_02
04284F 11 F5 43 04 0053*  	ld de,filedata
042853 01 00 00 01 0054*  	ld bc,65536
042857 3E 01       0055*  	ld a,mos_load
042859 5B CF       0056*  	RST.LIL 08h
04285B 21 02 04 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
04285F 01 40 00 00 0058*  	ld bc,64
042863 11 40 00 00 0059*  	ld de,64
042867 DD 21 00 10 0060*  	ld ix,4096
       00          
04286C CD 68 39 04 0061*  	call vdu_load_img_2
042870 3E 2E       0062*  	LD A, '.'
042872 5B D7       0063*  	RST.LIL 10h
042874             0064*  
042874 21 7C 2B 04 0065*  	ld hl,F_UI_bj_gatling_03
042878 11 F5 43 04 0066*  	ld de,filedata
04287C 01 00 00 01 0067*  	ld bc,65536
042880 3E 01       0068*  	ld a,mos_load
042882 5B CF       0069*  	RST.LIL 08h
042884 21 03 04 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
042888 01 40 00 00 0071*  	ld bc,64
04288C 11 40 00 00 0072*  	ld de,64
042890 DD 21 00 10 0073*  	ld ix,4096
       00          
042895 CD 68 39 04 0074*  	call vdu_load_img_2
042899 3E 2E       0075*  	LD A, '.'
04289B 5B D7       0076*  	RST.LIL 10h
04289D             0077*  
04289D 21 96 2B 04 0078*  	ld hl,F_UI_bj_gatling_04
0428A1 11 F5 43 04 0079*  	ld de,filedata
0428A5 01 00 00 01 0080*  	ld bc,65536
0428A9 3E 01       0081*  	ld a,mos_load
0428AB 5B CF       0082*  	RST.LIL 08h
0428AD 21 04 04 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
0428B1 01 40 00 00 0084*  	ld bc,64
0428B5 11 40 00 00 0085*  	ld de,64
0428B9 DD 21 00 10 0086*  	ld ix,4096
       00          
0428BE CD 68 39 04 0087*  	call vdu_load_img_2
0428C2 3E 2E       0088*  	LD A, '.'
0428C4 5B D7       0089*  	RST.LIL 10h
0428C6             0090*  
0428C6 21 B0 2B 04 0091*  	ld hl,F_UI_bj_knife_00
0428CA 11 F5 43 04 0092*  	ld de,filedata
0428CE 01 00 00 01 0093*  	ld bc,65536
0428D2 3E 01       0094*  	ld a,mos_load
0428D4 5B CF       0095*  	RST.LIL 08h
0428D6 21 05 04 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
0428DA 01 40 00 00 0097*  	ld bc,64
0428DE 11 40 00 00 0098*  	ld de,64
0428E2 DD 21 00 10 0099*  	ld ix,4096
       00          
0428E7 CD 68 39 04 0100*  	call vdu_load_img_2
0428EB 3E 2E       0101*  	LD A, '.'
0428ED 5B D7       0102*  	RST.LIL 10h
0428EF             0103*  
0428EF 21 C8 2B 04 0104*  	ld hl,F_UI_bj_knife_01
0428F3 11 F5 43 04 0105*  	ld de,filedata
0428F7 01 00 00 01 0106*  	ld bc,65536
0428FB 3E 01       0107*  	ld a,mos_load
0428FD 5B CF       0108*  	RST.LIL 08h
0428FF 21 06 04 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
042903 01 40 00 00 0110*  	ld bc,64
042907 11 40 00 00 0111*  	ld de,64
04290B DD 21 00 10 0112*  	ld ix,4096
       00          
042910 CD 68 39 04 0113*  	call vdu_load_img_2
042914 3E 2E       0114*  	LD A, '.'
042916 5B D7       0115*  	RST.LIL 10h
042918             0116*  
042918 21 E0 2B 04 0117*  	ld hl,F_UI_bj_knife_02
04291C 11 F5 43 04 0118*  	ld de,filedata
042920 01 00 00 01 0119*  	ld bc,65536
042924 3E 01       0120*  	ld a,mos_load
042926 5B CF       0121*  	RST.LIL 08h
042928 21 07 04 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
04292C 01 40 00 00 0123*  	ld bc,64
042930 11 40 00 00 0124*  	ld de,64
042934 DD 21 00 10 0125*  	ld ix,4096
       00          
042939 CD 68 39 04 0126*  	call vdu_load_img_2
04293D 3E 2E       0127*  	LD A, '.'
04293F 5B D7       0128*  	RST.LIL 10h
042941             0129*  
042941 21 F8 2B 04 0130*  	ld hl,F_UI_bj_knife_03
042945 11 F5 43 04 0131*  	ld de,filedata
042949 01 00 00 01 0132*  	ld bc,65536
04294D 3E 01       0133*  	ld a,mos_load
04294F 5B CF       0134*  	RST.LIL 08h
042951 21 08 04 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
042955 01 40 00 00 0136*  	ld bc,64
042959 11 40 00 00 0137*  	ld de,64
04295D DD 21 00 10 0138*  	ld ix,4096
       00          
042962 CD 68 39 04 0139*  	call vdu_load_img_2
042966 3E 2E       0140*  	LD A, '.'
042968 5B D7       0141*  	RST.LIL 10h
04296A             0142*  
04296A 21 10 2C 04 0143*  	ld hl,F_UI_bj_knife_04
04296E 11 F5 43 04 0144*  	ld de,filedata
042972 01 00 00 01 0145*  	ld bc,65536
042976 3E 01       0146*  	ld a,mos_load
042978 5B CF       0147*  	RST.LIL 08h
04297A 21 09 04 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
04297E 01 40 00 00 0149*  	ld bc,64
042982 11 40 00 00 0150*  	ld de,64
042986 DD 21 00 10 0151*  	ld ix,4096
       00          
04298B CD 68 39 04 0152*  	call vdu_load_img_2
04298F 3E 2E       0153*  	LD A, '.'
042991 5B D7       0154*  	RST.LIL 10h
042993             0155*  
042993 21 28 2C 04 0156*  	ld hl,F_UI_bj_machine_gun_00
042997 11 F5 43 04 0157*  	ld de,filedata
04299B 01 00 00 01 0158*  	ld bc,65536
04299F 3E 01       0159*  	ld a,mos_load
0429A1 5B CF       0160*  	RST.LIL 08h
0429A3 21 0A 04 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
0429A7 01 40 00 00 0162*  	ld bc,64
0429AB 11 40 00 00 0163*  	ld de,64
0429AF DD 21 00 10 0164*  	ld ix,4096
       00          
0429B4 CD 68 39 04 0165*  	call vdu_load_img_2
0429B8 3E 2E       0166*  	LD A, '.'
0429BA 5B D7       0167*  	RST.LIL 10h
0429BC             0168*  
0429BC 21 46 2C 04 0169*  	ld hl,F_UI_bj_machine_gun_01
0429C0 11 F5 43 04 0170*  	ld de,filedata
0429C4 01 00 00 01 0171*  	ld bc,65536
0429C8 3E 01       0172*  	ld a,mos_load
0429CA 5B CF       0173*  	RST.LIL 08h
0429CC 21 0B 04 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
0429D0 01 40 00 00 0175*  	ld bc,64
0429D4 11 40 00 00 0176*  	ld de,64
0429D8 DD 21 00 10 0177*  	ld ix,4096
       00          
0429DD CD 68 39 04 0178*  	call vdu_load_img_2
0429E1 3E 2E       0179*  	LD A, '.'
0429E3 5B D7       0180*  	RST.LIL 10h
0429E5             0181*  
0429E5 21 64 2C 04 0182*  	ld hl,F_UI_bj_machine_gun_02
0429E9 11 F5 43 04 0183*  	ld de,filedata
0429ED 01 00 00 01 0184*  	ld bc,65536
0429F1 3E 01       0185*  	ld a,mos_load
0429F3 5B CF       0186*  	RST.LIL 08h
0429F5 21 0C 04 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
0429F9 01 40 00 00 0188*  	ld bc,64
0429FD 11 40 00 00 0189*  	ld de,64
042A01 DD 21 00 10 0190*  	ld ix,4096
       00          
042A06 CD 68 39 04 0191*  	call vdu_load_img_2
042A0A 3E 2E       0192*  	LD A, '.'
042A0C 5B D7       0193*  	RST.LIL 10h
042A0E             0194*  
042A0E 21 82 2C 04 0195*  	ld hl,F_UI_bj_machine_gun_03
042A12 11 F5 43 04 0196*  	ld de,filedata
042A16 01 00 00 01 0197*  	ld bc,65536
042A1A 3E 01       0198*  	ld a,mos_load
042A1C 5B CF       0199*  	RST.LIL 08h
042A1E 21 0D 04 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
042A22 01 40 00 00 0201*  	ld bc,64
042A26 11 40 00 00 0202*  	ld de,64
042A2A DD 21 00 10 0203*  	ld ix,4096
       00          
042A2F CD 68 39 04 0204*  	call vdu_load_img_2
042A33 3E 2E       0205*  	LD A, '.'
042A35 5B D7       0206*  	RST.LIL 10h
042A37             0207*  
042A37 21 A0 2C 04 0208*  	ld hl,F_UI_bj_machine_gun_04
042A3B 11 F5 43 04 0209*  	ld de,filedata
042A3F 01 00 00 01 0210*  	ld bc,65536
042A43 3E 01       0211*  	ld a,mos_load
042A45 5B CF       0212*  	RST.LIL 08h
042A47 21 0E 04 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
042A4B 01 40 00 00 0214*  	ld bc,64
042A4F 11 40 00 00 0215*  	ld de,64
042A53 DD 21 00 10 0216*  	ld ix,4096
       00          
042A58 CD 68 39 04 0217*  	call vdu_load_img_2
042A5C 3E 2E       0218*  	LD A, '.'
042A5E 5B D7       0219*  	RST.LIL 10h
042A60             0220*  
042A60 21 BE 2C 04 0221*  	ld hl,F_UI_bj_pistol_00
042A64 11 F5 43 04 0222*  	ld de,filedata
042A68 01 00 00 01 0223*  	ld bc,65536
042A6C 3E 01       0224*  	ld a,mos_load
042A6E 5B CF       0225*  	RST.LIL 08h
042A70 21 0F 04 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
042A74 01 40 00 00 0227*  	ld bc,64
042A78 11 40 00 00 0228*  	ld de,64
042A7C DD 21 00 10 0229*  	ld ix,4096
       00          
042A81 CD 68 39 04 0230*  	call vdu_load_img_2
042A85 3E 2E       0231*  	LD A, '.'
042A87 5B D7       0232*  	RST.LIL 10h
042A89             0233*  
042A89 21 D7 2C 04 0234*  	ld hl,F_UI_bj_pistol_01
042A8D 11 F5 43 04 0235*  	ld de,filedata
042A91 01 00 00 01 0236*  	ld bc,65536
042A95 3E 01       0237*  	ld a,mos_load
042A97 5B CF       0238*  	RST.LIL 08h
042A99 21 10 04 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
042A9D 01 40 00 00 0240*  	ld bc,64
042AA1 11 40 00 00 0241*  	ld de,64
042AA5 DD 21 00 10 0242*  	ld ix,4096
       00          
042AAA CD 68 39 04 0243*  	call vdu_load_img_2
042AAE 3E 2E       0244*  	LD A, '.'
042AB0 5B D7       0245*  	RST.LIL 10h
042AB2             0246*  
042AB2 21 F0 2C 04 0247*  	ld hl,F_UI_bj_pistol_02
042AB6 11 F5 43 04 0248*  	ld de,filedata
042ABA 01 00 00 01 0249*  	ld bc,65536
042ABE 3E 01       0250*  	ld a,mos_load
042AC0 5B CF       0251*  	RST.LIL 08h
042AC2 21 11 04 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
042AC6 01 40 00 00 0253*  	ld bc,64
042ACA 11 40 00 00 0254*  	ld de,64
042ACE DD 21 00 10 0255*  	ld ix,4096
       00          
042AD3 CD 68 39 04 0256*  	call vdu_load_img_2
042AD7 3E 2E       0257*  	LD A, '.'
042AD9 5B D7       0258*  	RST.LIL 10h
042ADB             0259*  
042ADB 21 09 2D 04 0260*  	ld hl,F_UI_bj_pistol_03
042ADF 11 F5 43 04 0261*  	ld de,filedata
042AE3 01 00 00 01 0262*  	ld bc,65536
042AE7 3E 01       0263*  	ld a,mos_load
042AE9 5B CF       0264*  	RST.LIL 08h
042AEB 21 12 04 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
042AEF 01 40 00 00 0266*  	ld bc,64
042AF3 11 40 00 00 0267*  	ld de,64
042AF7 DD 21 00 10 0268*  	ld ix,4096
       00          
042AFC CD 68 39 04 0269*  	call vdu_load_img_2
042B00 3E 2E       0270*  	LD A, '.'
042B02 5B D7       0271*  	RST.LIL 10h
042B04             0272*  
042B04 21 22 2D 04 0273*  	ld hl,F_UI_bj_pistol_04
042B08 11 F5 43 04 0274*  	ld de,filedata
042B0C 01 00 00 01 0275*  	ld bc,65536
042B10 3E 01       0276*  	ld a,mos_load
042B12 5B CF       0277*  	RST.LIL 08h
042B14 21 13 04 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
042B18 01 40 00 00 0279*  	ld bc,64
042B1C 11 40 00 00 0280*  	ld de,64
042B20 DD 21 00 10 0281*  	ld ix,4096
       00          
042B25 CD 68 39 04 0282*  	call vdu_load_img_2
042B29 3E 2E       0283*  	LD A, '.'
042B2B 5B D7       0284*  	RST.LIL 10h
042B2D             0285*  
042B2D C9          0286*  	ret
042B2E             0287*  
042B2E 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
042B48 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
042B62 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
042B7C 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
042B96 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
042BB0 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
042BC8 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
042BE0 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
042BF8 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
042C10 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
042C28 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
042C46 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
042C64 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
042C82 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
042CA0 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
042CBE 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
042CD7 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
042CF0 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
042D09 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
042D22 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
042D3B             0022   	; include "src/asm/sprites.inc"
042D3B             0023   	include "src/asm/vdu.inc"
042D3B             0001*  ; The following is a high-level list of the VDU sequences that are supported:
042D3B             0002*  ; VDU 0: Null (no operation)
042D3B             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
042D3B             0004*  ; VDU 2: Enable “printer” §§
042D3B             0005*  ; VDU 3: Disable “printer” §§
042D3B             0006*  ; VDU 4: Write text at text cursor
042D3B             0007*  ; VDU 5: Write text at graphics cursor
042D3B             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
042D3B             0009*  ; VDU 7: Make a short beep (BEL)
042D3B             0010*  ; VDU 8: Move cursor back one character
042D3B             0011*  ; VDU 9: Move cursor forward one character
042D3B             0012*  ; VDU 10: Move cursor down one line
042D3B             0013*  ; VDU 11: Move cursor up one line
042D3B             0014*  ; VDU 12: Clear text area (CLS)
042D3B             0015*  ; VDU 13: Carriage return
042D3B             0016*  ; VDU 14: Page mode On *
042D3B             0017*  ; VDU 15: Page mode Off *
042D3B             0018*  ; VDU 16: Clear graphics area (CLG)
042D3B             0019*  ; VDU 17, colour: Define text colour (COLOUR)
042D3B             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
042D3B             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
042D3B             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
042D3B             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
042D3B             0024*  ; VDU 22, n: Select screen mode (MODE n)
042D3B             0025*  ; VDU 23, n: Re-program display character / System Commands
042D3B             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
042D3B             0027*  ; VDU 25, mode, x; y;: PLOT command
042D3B             0028*  ; VDU 26: Reset graphics and text viewports **
042D3B             0029*  ; VDU 27, char: Output character to screen §
042D3B             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
042D3B             0031*  ; VDU 29, x; y;: Set graphics origin
042D3B             0032*  ; VDU 30: Home cursor
042D3B             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
042D3B             0034*  ; VDU 127: Backspace
042D3B             0035*  
042D3B             0036*  ; VDU 0: Null (no operation)
042D3B             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
042D3B             0038*  ;     This may be useful for padding out a VDU command sequence,
042D3B             0039*  ;     or for inserting a placeholder for a command that will be added later.
042D3B             0040*  ; inputs: none
042D3B             0041*  ; outputs: an empty byte somewhere in VDU
042D3B             0042*  ; destroys: a
042D3B             0043*  vdu_null:
042D3B AF          0044*      xor a
042D3C 5B D7       0045*  	rst.lil $10
042D3E C9          0046*  	ret
042D3F             0047*  
042D3F             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
042D3F             0049*  ;     Ensures that the next character received by the VDP is sent through to
042D3F             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
042D3F             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
042D3F             0052*  ;     intended to be displayed on the screen. It allows characters that would
042D3F             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
042D3F             0054*  ;     If the “printer” has not been enabled then this command will just discard
042D3F             0055*  ;     the next byte sent to the VDP.
042D3F             0056*  ; inputs: a is the ascii code of the character to send
042D3F             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
042D3F             0058*  ; outputs: a character on the serial terminal connected to the USB port
042D3F             0059*  ;           and the same character on the screen at the current text cursor location
042D3F             0060*  ; QUESTION: does it also advance the text cursor?
042D3F             0061*  ; destroys: hl, bc
042D3F             0062*  vdu_char_to_printer:
042D3F 32 4F 2D 04 0063*  	ld (@arg),a
042D43 21 4E 2D 04 0064*  	ld hl,@cmd
042D47 01 02 00 00 0065*  	ld bc,@end-@cmd
042D4B 5B DF       0066*  	rst.lil $18
042D4D C9          0067*  	ret
042D4E 01          0068*  @cmd: db 1
042D4F 00          0069*  @arg: db 0
042D50             0070*  @end:
042D50             0071*  
042D50             0072*  ; VDU 2: Enable “printer” §§
042D50             0073*  ;     Enables the “printer”.
042D50             0074*  ;     In the context of the Agon platform, the “printer” is a serial
042D50             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
042D50             0076*  ;     this port is used for power, but it can also be used to send and
042D50             0077*  ;     receive data to and from the VDP.
042D50             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
042D50             0079*  ;     to the “printer” as well as to the screen. It will additionally send
042D50             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
042D50             0081*  ;     use the VDU 1 command.
042D50             0082*  ;     The VDP will not send through other control codes to the printer,
042D50             0083*  ;     and will will not send through data it receives as part of other commands.
042D50             0084*  vdu_enable_printer:
042D50 3E 02       0085*      ld a,2
042D52 5B D7       0086*  	rst.lil $10
042D54 C9          0087*  	ret
042D55             0088*  
042D55             0089*  ; VDU 3: Disable “printer” §§
042D55             0090*  ; inputs: none
042D55             0091*  ; outputs: a USB port bereft of communication with the VDP
042D55             0092*  ; destroys: a
042D55             0093*  vdu_disable_printer:
042D55 3E 03       0094*      ld a,3
042D57 5B D7       0095*  	rst.lil $10
042D59 C9          0096*  	ret
042D5A             0097*  
042D5A             0098*  ; VDU 4: Write text at text cursor
042D5A             0099*  ;     This causes text to be written at the current text cursor position.
042D5A             0100*  ;     This is the default mode for text display.
042D5A             0101*  ;     Text is written using the current text foreground and background colours.
042D5A             0102*  ; inputs: a is the character to write to the screen
042D5A             0103*  ; prerequisites: the text cursor at the intended position on screen
042D5A             0104*  ; outputs: prints the character and moves text cursor right one position
042D5A             0105*  ; destroys: a, hl, bc
042D5A             0106*  vdu_char_to_text_cursor:
042D5A 32 6A 2D 04 0107*  	ld (@arg),a
042D5E 21 69 2D 04 0108*  	ld hl,@cmd
042D62 01 02 00 00 0109*  	ld bc,@end-@cmd
042D66 5B DF       0110*  	rst.lil $18
042D68 C9          0111*  	ret
042D69 04          0112*  @cmd: db 4
042D6A 00          0113*  @arg: db 0
042D6B             0114*  @end:
042D6B             0115*  
042D6B             0116*  ; VDU 5: Write text at graphics cursor
042D6B             0117*  ;     This causes text to be written at the current graphics cursor position.
042D6B             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
042D6B             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
042D6B             0120*  ;     or for positioning text at a specific location on the screen.
042D6B             0121*  ;     Characters are plotted using the current graphics foreground colour,
042D6B             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
042D6B             0123*  ;     The character background is transparent, and will not overwrite any
042D6B             0124*  ;     graphics that are already present at the character’s location.
042D6B             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
042D6B             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
042D6B             0127*  ;     graphics background colour.
042D6B             0128*  ; inputs: a is the character to write to the screen
042D6B             0129*  ; prerequisites: the graphics cursor at the intended position on screen
042D6B             0130*  ; outputs: see the name of the function
042D6B             0131*  ; destroys: a, hl, bc
042D6B             0132*  vdu_char_to_gfx_cursor:
042D6B 32 7B 2D 04 0133*  	ld (@arg),a
042D6F 21 7A 2D 04 0134*  	ld hl,@cmd
042D73 01 02 00 00 0135*  	ld bc,@end-@cmd
042D77 5B DF       0136*  	rst.lil $18
042D79 C9          0137*  	ret
042D7A 05          0138*  @cmd: db 5
042D7B 00          0139*  @arg: db 0
042D7C             0140*  @end:
042D7C             0141*  
042D7C             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
042D7C             0143*  ;     This enables the screen, and re-enables VDU command processing,
042D7C             0144*  ;     reversing the effect of VDU 21.
042D7C             0145*  ; inputs: none
042D7C             0146*  ; outputs: a functioning screen and VDU
042D7C             0147*  ; destroys: a
042D7C             0148*  vdu_enable_screen:
042D7C 3E 06       0149*      ld a,6
042D7E 5B D7       0150*  	rst.lil $10
042D80 C9          0151*  	ret
042D81             0152*  
042D81             0153*  ; PASSES
042D81             0154*  ; VDU 7: Make a short beep (BEL)
042D81             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
042D81             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
042D81             0157*  ; inputs: none
042D81             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
042D81             0159*  ; destroys: a
042D81             0160*  vdu_beep:
042D81 3E 07       0161*      ld a,7
042D83 5B D7       0162*  	rst.lil $10
042D85 C9          0163*  	ret
042D86             0164*  
042D86             0165*  ; VDU 8: Move cursor back one character
042D86             0166*  ;     Moves the text cursor one character in the negative “X” direction.
042D86             0167*  ;     By default, when at the start of a line it will move to the end of
042D86             0168*  ;     the previous line (as defined by the current text viewport).
042D86             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
042D86             0170*  ;     The cursor remains constrained to the current text viewport.
042D86             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
042D86             0172*  ;     The cursor is just moved left by one character width.
042D86             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
042D86             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
042D86             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
042D86             0176*  ;     will move the cursor to the left. This is likely to change in the future.
042D86             0177*  vdu_cursor_back:
042D86 3E 08       0178*      ld a,8
042D88 5B D7       0179*  	rst.lil $10
042D8A C9          0180*  	ret
042D8B             0181*  
042D8B             0182*  ; VDU 9: Move cursor forward one character
042D8B             0183*  vdu_cursor_forward:
042D8B 3E 09       0184*      ld a,9
042D8D 5B D7       0185*  	rst.lil $10
042D8F C9          0186*  	ret
042D90             0187*  
042D90             0188*  ; VDU 10: Move cursor down one line
042D90             0189*  vdu_cursor_down:
042D90 3E 0A       0190*      ld a,10
042D92 5B D7       0191*  	rst.lil $10
042D94 C9          0192*  	ret
042D95             0193*  
042D95             0194*  ; VDU 11: Move cursor up one line
042D95             0195*  vdu_cursor_up:
042D95 3E 0B       0196*      ld a,11
042D97 5B D7       0197*  	rst.lil $10
042D99 C9          0198*  	ret
042D9A             0199*  
042D9A             0200*  ; VDU 12: Clear text area (CLS)
042D9A             0201*  vdu_cls:
042D9A 3E 0C       0202*      ld a,12
042D9C 5B D7       0203*  	rst.lil $10
042D9E C9          0204*  	ret
042D9F             0205*  
042D9F             0206*  ; VDU 13: Carriage return
042D9F             0207*  vdu_cr:
042D9F 3E 0D       0208*      ld a,13
042DA1 5B D7       0209*  	rst.lil $10
042DA3 C9          0210*  	ret
042DA4             0211*  
042DA4             0212*  ; VDU 14: Page mode On *
042DA4             0213*  vdu_page_on:
042DA4 3E 0E       0214*      ld a,14
042DA6 5B D7       0215*  	rst.lil $10
042DA8 C9          0216*  	ret
042DA9             0217*  
042DA9             0218*  ; VDU 15: Page mode Off *
042DA9             0219*  vdu_page_off:
042DA9 3E 0F       0220*      ld a,15
042DAB 5B D7       0221*  	rst.lil $10
042DAD C9          0222*  	ret
042DAE             0223*  
042DAE             0224*  ; VDU 16: Clear graphics area (CLG)
042DAE             0225*  vdu_clg:
042DAE 3E 10       0226*      ld a,16
042DB0 5B D7       0227*  	rst.lil $10
042DB2 C9          0228*  	ret
042DB3             0229*  
042DB3             0230*  ; VDU 17, colour: Define text colour (COLOUR)
042DB3             0231*  vdu_colour_text:
042DB3 32 C3 2D 04 0232*  	ld (@arg),a
042DB7 21 C2 2D 04 0233*  	ld hl,@cmd
042DBB 01 02 00 00 0234*  	ld bc,@end-@cmd
042DBF 5B DF       0235*  	rst.lil $18
042DC1 C9          0236*  	ret
042DC2 11          0237*  @cmd: db 17
042DC3 00          0238*  @arg: db 0
042DC4             0239*  @end:
042DC4             0240*  
042DC4             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
042DC4             0242*  ; inputs: a is the plotting mode, c is the colour
042DC4             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
042DC4             0244*  vdu_gcol_fg:
042DC4             0245*  ; This command will set both the current graphics colour,
042DC4             0246*  ; and the current graphics plotting mode.
042DC4             0247*  ; As with VDU 17 the colour number will set the foreground colour
042DC4             0248*  ; if it is in the range 0-127, or the background colour if it is
042DC4             0249*  ; in the range 128-255, and will be interpreted in the same manner.
042DC4             0250*  ; Support for different plotting modes on Agon is currently very limited.
042DC4             0251*  ; The only fully supported mode is mode 0, which is the default mode.
042DC4             0252*  ; This mode will plot the given colour at the given graphics coordinate,
042DC4             0253*  ; and will overwrite any existing graphics at that coordinate. There is
042DC4             0254*  ; very limited support for mode 4, which will invert the colour of any
042DC4             0255*  ; existing graphics at the given coordinate, but this is not fully supported
042DC4             0256*  ; and may not work as expected.
042DC4             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
042DC4             0258*  ; original VDU system, may be added in the future.
042DC4             0259*  ; This command is identical to the BASIC GCOL keyword.
042DC4 32 D9 2D 04 0260*  	ld (@mode),a
042DC8 79          0261*      ld a,c
042DC9 32 DA 2D 04 0262*      ld (@col),a
042DCD 21 D8 2D 04 0263*  	ld hl,@cmd
042DD1 01 03 00 00 0264*  	ld bc,@end-@cmd
042DD5 5B DF       0265*  	rst.lil $18
042DD7 C9          0266*  	ret
042DD8 12          0267*  @cmd: db 18
042DD9 00          0268*  @mode: db 0
042DDA 00          0269*  @col: db 0
042DDB             0270*  @end:
042DDB             0271*  
042DDB             0272*  vdu_gcol_bg:
042DDB 32 F2 2D 04 0273*  	ld (@mode),a
042DDF 79          0274*      ld a,c
042DE0 C6 80       0275*      add a,128
042DE2 32 F3 2D 04 0276*      ld (@col),a
042DE6 21 F1 2D 04 0277*  	ld hl,@cmd
042DEA 01 03 00 00 0278*  	ld bc,@end-@cmd
042DEE 5B DF       0279*  	rst.lil $18
042DF0 C9          0280*  	ret
042DF1 12          0281*  @cmd:  db 18
042DF2 00          0282*  @mode: db 0
042DF3 00          0283*  @col:  db 0
042DF4             0284*  @end:
042DF4             0285*  
042DF4             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
042DF4             0287*  ;     This command sets the colour palette, by mapping a logical colour
042DF4             0288*  ;     to a physical colour. This is useful for defining custom colours,
042DF4             0289*  ;     or for redefining the default colours.
042DF4             0290*  ;     If the physical colour number is given as 255 then the colour will
042DF4             0291*  ;     be defined using the red, green, and blue values given. If the physical
042DF4             0292*  ;     colour number is given as any other value then the colour will be defined
042DF4             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
042DF4             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
042DF4             0295*  ;     must still be provided, but will be ignored.
042DF4             0296*  ;     The values for red, green and blue must be given in the range 0-255.
042DF4             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
042DF4             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
042DF4             0299*  ;     requested. The nearest colour will be chosen.
042DF4             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
042DF4             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
042DF4             0302*  vdu_def_log_colour:
042DF4 32 19 2E 04 0303*  	ld (@physical),a
042DF8 47          0304*      ld b,a
042DF9 32 18 2E 04 0305*      ld (@logical),a
042DFD 79          0306*      ld a,c
042DFE 32 1A 2E 04 0307*      ld (@red),a
042E02 7C          0308*      ld a,h
042E03 32 1B 2E 04 0309*      ld (@green),a
042E07 7D          0310*      ld a,l
042E08 32 1C 2E 04 0311*      ld (@blue),a
042E0C 21 17 2E 04 0312*  	ld hl,@cmd
042E10 01 06 00 00 0313*  	ld bc,@end-@cmd
042E14 5B DF       0314*  	rst.lil $18
042E16 C9          0315*  	ret
042E17 13          0316*  @cmd: db 19
042E18 00          0317*  @logical: db 0
042E19 00          0318*  @physical: db 0
042E1A 00          0319*  @red: db 0
042E1B 00          0320*  @green: db 0
042E1C 00          0321*  @blue: db 0
042E1D             0322*  @end:
042E1D             0323*  
042E1D             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
042E1D             0325*  vdu_reset_gfx:
042E1D 3E 14       0326*      ld a,20
042E1F 5B D7       0327*  	rst.lil $10
042E21 C9          0328*  	ret
042E22             0329*  
042E22             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
042E22             0331*  ; except for VDU 1 and VDU 6) §§
042E22             0332*  vdu_disable_screen:
042E22 3E 15       0333*      ld a,21
042E24 5B D7       0334*  	rst.lil $10
042E26 C9          0335*  	ret
042E27             0336*  
042E27             0337*  ; VDU 22, n: Select screen mode (MODE n)
042E27             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
042E27             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
042E27             0340*  ; Screen modes
042E27             0341*  ; Modes over 128 are double-buffered
042E27             0342*  ; From Version 1.04 or greater
042E27             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
042E27             0344*  ; 0 	640 	480 	16 	    60hz
042E27             0345*  ; * 1 	640 	480 	4 	    60hz
042E27             0346*  ; 2 	640 	480 	2 	    60hz
042E27             0347*  ; 3 	640 	240 	64 	    60hz
042E27             0348*  ; 4 	640 	240 	16 	    60hz
042E27             0349*  ; 5 	640 	240 	4 	    60hz
042E27             0350*  ; 6 	640 	240 	2 	    60hz
042E27             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
042E27             0352*  ; 8 	320 	240 	64 	    60hz
042E27             0353*  ; 9 	320 	240 	16 	    60hz
042E27             0354*  ; 10 	320 	240 	4 	    60hz
042E27             0355*  ; 11 	320 	240 	2 	    60hz
042E27             0356*  ; 12 	320 	200 	64 	    70hz
042E27             0357*  ; 13 	320 	200 	16 	    70hz
042E27             0358*  ; 14 	320 	200 	4 	    70hz
042E27             0359*  ; 15 	320 	200 	2 	    70hz
042E27             0360*  ; 16 	800 	600 	4 	    60hz
042E27             0361*  ; 17 	800 	600 	2 	    60hz
042E27             0362*  ; 18 	1024 	768 	2 	    60hz
042E27             0363*  ; 129 	640 	480 	4 	    60hz
042E27             0364*  ; 130 	640 	480 	2 	    60hz
042E27             0365*  ; 132 	640 	240 	16 	    60hz
042E27             0366*  ; 133 	640 	240 	4 	    60hz
042E27             0367*  ; 134 	640 	240 	2 	    60hz
042E27             0368*  ; 136 	320 	240 	64 	    60hz
042E27             0369*  ; 137 	320 	240 	16 	    60hz
042E27             0370*  ; 138 	320 	240 	4 	    60hz
042E27             0371*  ; 139 	320 	240 	2 	    60hz
042E27             0372*  ; 140 	320 	200 	64 	    70hz
042E27             0373*  ; 141 	320 	200 	16 	    70hz
042E27             0374*  ; 142 	320 	200 	4 	    70hz
042E27             0375*  ; 143 	320 	200 	2 	    70hz
042E27             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
042E27             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
042E27             0378*  ; change to the requested mode.
042E27             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
042E27             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
042E27             0381*  vdu_set_screen_mode:
042E27 32 37 2E 04 0382*  	ld (@arg),a
042E2B 21 36 2E 04 0383*  	ld hl,@cmd
042E2F 01 02 00 00 0384*  	ld bc,@end-@cmd
042E33 5B DF       0385*  	rst.lil $18
042E35 C9          0386*  	ret
042E36 16          0387*  @cmd: db 22 ; set screen mode
042E37 00          0388*  @arg: db 0  ; screen mode parameter
042E38             0389*  @end:
042E38             0390*  
042E38             0391*  ; VDU 23, n: Re-program display character / System Commands
042E38             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
042E38             0393*  vdu_define_character:
042E38 32 54 2E 04 0394*  	ld (@ascii),a
042E3C 11 55 2E 04 0395*  	ld de,@data
042E40 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
042E42             0397*  @loop:
042E42 7E          0398*  	ld a,(hl)
042E43 12          0399*  	ld (de),a
042E44 23          0400*  	inc hl
042E45 13          0401*  	inc de
042E46 10 FA       0402*  	djnz @loop
042E48 21 53 2E 04 0403*  	ld hl,@cmd
042E4C 01 0A 00 00 0404*  	ld bc,@end-@cmd
042E50 5B DF       0405*  	rst.lil $18
042E52 C9          0406*  	ret
042E53 17          0407*  @cmd:   db 23
042E54 00          0408*  @ascii: db 0
042E55             0409*  @data:  ds 8
042E5D             0410*  @end:
042E5D             0411*  
042E5D             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
042E5D             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
042E5D             0414*  ; 	because we have turned off logical screen scaling
042E5D             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
042E5D             0416*  ; outputs; nothing
042E5D             0417*  ; destroys: a might make it out alive
042E5D             0418*  vdu_set_gfx_viewport:
042E5D ED 43 7D 2E 0419*      ld (@x0),bc
       04          
042E62 FD 22 7F 2E 0420*      ld (@y1),iy
       04          
042E67 DD 22 81 2E 0421*  	ld (@x1),ix
       04          
042E6C ED 53 83 2E 0422*  	ld (@y0),de
       04          
042E71 21 7C 2E 04 0423*  	ld hl,@cmd
042E75 01 09 00 00 0424*  	ld bc,@end-@cmd
042E79 5B DF       0425*  	rst.lil $18
042E7B C9          0426*  	ret
042E7C 18          0427*  @cmd:   db 24 ; set graphics viewport command
042E7D 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
042E7F 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
042E81 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
042E83 00 00       0431*  @y0: 	dw 0x0000 ; set by de
042E85 00          0432*  @end:   db 0x00	  ; padding
042E86             0433*  
042E86             0434*  ; VDU 25, mode, x; y;: PLOT command
042E86             0435*  ; Implemented in vdu_plot.inc
042E86             0436*  
042E86             0437*  ; VDU 26: Reset graphics and text viewports **
042E86             0438*  vdu_reset_txt_gfx_view:
042E86 3E 1A       0439*      ld a,26
042E88 5B D7       0440*  	rst.lil $10
042E8A C9          0441*  	ret
042E8B             0442*  
042E8B             0443*  ; PASSES
042E8B             0444*  ; VDU 27, char: Output character to screen §
042E8B             0445*  ; inputs: a is the ascii code of the character to draw
042E8B             0446*  vdu_draw_char:
042E8B 32 9B 2E 04 0447*  	ld (@arg),a
042E8F 21 9A 2E 04 0448*  	ld hl,@cmd
042E93 01 02 00 00 0449*  	ld bc,@end-@cmd
042E97 5B DF       0450*  	rst.lil $18
042E99 C9          0451*  	ret
042E9A 1B          0452*  @cmd: db 27
042E9B 00          0453*  @arg: db 0  ; ascii code of character to draw
042E9C             0454*  @end:
042E9C             0455*  
042E9C             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
042E9C             0457*  ; MIND THE LITTLE-ENDIANESS
042E9C             0458*  ; inputs: c=left,b=bottom,e=right,d=top
042E9C             0459*  ; outputs; nothing
042E9C             0460*  ; destroys: a might make it out alive
042E9C             0461*  vdu_set_txt_viewport:
042E9C ED 43 B2 2E 0462*      ld (@lb),bc
       04          
042EA1 ED 53 B4 2E 0463*  	ld (@rt),de
       04          
042EA6 21 B1 2E 04 0464*  	ld hl,@cmd
042EAA 01 05 00 00 0465*  	ld bc,@end-@cmd
042EAE 5B DF       0466*  	rst.lil $18
042EB0 C9          0467*  	ret
042EB1 1C          0468*  @cmd:   db 28 ; set text viewport command
042EB2 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
042EB4 00 00       0470*  @rt: 	dw 0x0000 ; set by de
042EB6 00          0471*  @end:   db 0x00	  ; padding
042EB7             0472*  
042EB7             0473*  ; PASSES
042EB7             0474*  ; VDU 29, x; y;: Set graphics origin
042EB7             0475*  ; inputs: bc,de x,y coordinates
042EB7             0476*  vdu_set_gfx_origin:
042EB7 ED 43 CD 2E 0477*      ld (@x0),bc
       04          
042EBC ED 53 CF 2E 0478*      ld (@y0),de
       04          
042EC1 21 CC 2E 04 0479*  	ld hl,@cmd
042EC5 01 05 00 00 0480*  	ld bc,@end-@cmd
042EC9 5B DF       0481*  	rst.lil $18
042ECB C9          0482*  	ret
042ECC 1D          0483*  @cmd:	db 29
042ECD 00 00       0484*  @x0: 	dw 0
042ECF 00 00       0485*  @y0: 	dw 0
042ED1 00          0486*  @end: 	db 0 ; padding
042ED2             0487*  
042ED2             0488*  ; PASSES
042ED2             0489*  ; VDU 30: Home cursor
042ED2             0490*  vdu_home_cursor:
042ED2 3E 1E       0491*      ld a,30
042ED4 5B D7       0492*  	rst.lil $10
042ED6 C9          0493*  	ret
042ED7             0494*  
042ED7             0495*  ; PASSES
042ED7             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
042ED7             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
042ED7             0498*  vdu_move_cursor:
042ED7 ED 43 E8 2E 0499*      ld (@x0),bc
       04          
042EDC 21 E7 2E 04 0500*  	ld hl,@cmd
042EE0 01 03 00 00 0501*  	ld bc,@end-@cmd
042EE4 5B DF       0502*  	rst.lil $18
042EE6 C9          0503*  	ret
042EE7 1F          0504*  @cmd: 	db 31
042EE8 00          0505*  @x0:	db 0
042EE9 00          0506*  @y0: 	db 0
042EEA 00          0507*  @end: 	db 0 ; padding
042EEB             0508*  
042EEB             0509*  
042EEB             0510*  ; VDU 127: Backspace
042EEB             0511*  vdu_bksp:
042EEB 3E 7F       0512*      ld a,127
042EED 5B D7       0513*  	rst.lil $10
042EEF C9          0514*  	ret
042EF0             0515*  
042EF0             0516*  ; activate a bitmap in preparation to draw it
042EF0             0517*  ; inputs: a holding the bitmap index
042EF0             0518*  vdu_bmp_select:
042EF0 32 02 2F 04 0519*  	ld (@bmp),a
042EF4 21 FF 2E 04 0520*  	ld hl,@cmd
042EF8 01 04 00 00 0521*  	ld bc,@end-@cmd
042EFC 5B DF       0522*  	rst.lil $18
042EFE C9          0523*  	ret
042EFF 17 1B 00    0524*  @cmd: db 23,27,0
042F02 00          0525*  @bmp: db 0
042F03             0526*  @end:
042F03             0527*  
042F03             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042F03             0529*  ; inputs: hl=bufferId
042F03             0530*  vdu_buff_select:
042F03 22 15 2F 04 0531*  	ld (@bufferId),hl
042F07 21 12 2F 04 0532*  	ld hl,@cmd
042F0B 01 05 00 00 0533*  	ld bc,@end-@cmd
042F0F 5B DF       0534*  	rst.lil $18
042F11 C9          0535*  	ret
042F12 17 1B 20    0536*  @cmd: db 23,27,0x20
042F15 00 00       0537*  @bufferId: dw 0x0000
042F17 00          0538*  @end: db 0x00 ; padding
042F18             0539*  
042F18             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
042F18             0541*  ; inputs: a=format; bc=width; de=height
042F18             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
042F18             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
042F18             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
042F18             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
042F18             0546*  ; 2 	Mono/Mask (1-bit per pixel)
042F18             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
042F18             0548*  vdu_bmp_create:
042F18 ED 43 34 2F 0549*      ld (@width),bc
       04          
042F1D ED 53 36 2F 0550*      ld (@height),de
       04          
042F22 32 38 2F 04 0551*      ld (@fmt),a
042F26 21 31 2F 04 0552*  	ld hl,@cmd
042F2A 01 08 00 00 0553*  	ld bc,@end-@cmd
042F2E 5B DF       0554*  	rst.lil $18
042F30 C9          0555*  	ret
042F31 17 1B 21    0556*  @cmd:       db 23,27,0x21
042F34 00 00       0557*  @width:     dw 0x0000
042F36 00 00       0558*  @height:    dw 0x0000
042F38 00          0559*  @fmt:       db 0x00
042F39             0560*  @end:
042F39             0561*  
042F39             0562*  ; Draw a bitmap on the screen
042F39             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
042F39             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
042F39             0565*  vdu_bmp_draw:
042F39 ED 43 51 2F 0566*      ld (@x0),bc
       04          
042F3E ED 53 53 2F 0567*      ld (@y0),de
       04          
042F43 21 4E 2F 04 0568*  	ld hl,@cmd
042F47 01 07 00 00 0569*  	ld bc,@end-@cmd
042F4B 5B DF       0570*  	rst.lil $18
042F4D C9          0571*  	ret
042F4E 17 1B 03    0572*  @cmd: db 23,27,3
042F51 00 00       0573*  @x0:  dw 0x0000
042F53 00 00       0574*  @y0:  dw 0x0000
042F55 00          0575*  @end: db 0x00 ; padding
042F56             0576*  
042F56             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
042F56             0578*  ; inputs: a is scaling mode, 1=on, 0=off
042F56             0579*  ; note: default setting on boot is scaling ON
042F56             0580*  vdu_set_scaling:
042F56 32 68 2F 04 0581*  	ld (@arg),a
042F5A 21 65 2F 04 0582*  	ld hl,@cmd
042F5E 01 04 00 00 0583*  	ld bc,@end-@cmd
042F62 5B DF       0584*  	rst.lil $18
042F64 C9          0585*  	ret
042F65 17 00 C0    0586*  @cmd: db 23,0,0xC0
042F68 00          0587*  @arg: db 0  ; scaling on/off
042F69             0588*  @end:
042F69             0589*  
042F69             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
042F69             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
042F69             0592*  ; 	(all modes).
042F69             0593*  
042F69             0594*  ; 	This command will swap the screen buffer, if the current screen mode
042F69             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
042F69             0596*  ; 	mode is not double-buffered then this command will wait for the next
042F69             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
042F69             0598*  ; 	screen with the vertical refresh rate of the monitor.
042F69             0599*  
042F69             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
042F69             0601*  ; 	as it will prevent tearing of the screen.
042F69             0602*  ; inputs: none
042F69             0603*  ; outputs: none
042F69             0604*  ; destroys: hl, bc
042F69             0605*  vdu_flip:
042F69 21 74 2F 04 0606*  	ld hl,@cmd
042F6D 01 03 00 00 0607*  	ld bc,@end-@cmd
042F71 5B DF       0608*  	rst.lil $18
042F73 C9          0609*  	ret
042F74 17 00 C3    0610*  @cmd: db 23,0,0xC3
042F77             0611*  @end:
042F77             0612*  
042F77             0613*  ; Command 64: Compress a buffer
042F77             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
042F77             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
042F77             0616*  
042F77             0617*  
042F77             0618*  ; Command 65: Decompress a buffer
042F77             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
042F77             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
042F77             0621*  ; inputs: hl=sourceBufferId/targetBufferId
042F77             0622*  vdu_decompress_buffer:
042F77 22 93 2F 04 0623*  	ld (@targetBufferId),hl
042F7B 22 96 2F 04 0624*  	ld (@sourceBufferId),hl
042F7F 3E 41       0625*  	ld a,65
042F81 32 95 2F 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
042F85 21 90 2F 04 0627*  	ld hl,@cmd
042F89 01 08 00 00 0628*  	ld bc,@end-@cmd
042F8D 5B DF       0629*  	rst.lil $18
042F8F C9          0630*  	ret
042F90 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
042F93 00 00       0632*  @targetBufferId: dw 0x0000
042F95 41          0633*  @cmd1:	db 65
042F96 00 00       0634*  @sourceBufferId: dw 0x0000
042F98 00          0635*  @end: 	db 0x00 ; padding
042F99             0636*  
042F99             0637*  ; Command 65: Decompress a buffer
042F99             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
042F99             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
042F99             0640*  ; inputs: hl=sourceBufferId/targetBufferId
042F99             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
042F99             0642*  vdu_decompress_buffer_different:
042F99 22 B9 2F 04 0643*  	ld (@targetBufferId),hl
042F9D 21 FF 7F 00 0644*      ld hl,0x7FFF
042FA1 22 BC 2F 04 0645*  	ld (@sourceBufferId),hl
042FA5 3E 41       0646*  	ld a,65
042FA7 32 BB 2F 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
042FAB 21 B6 2F 04 0648*  	ld hl,@cmd
042FAF 01 08 00 00 0649*  	ld bc,@end-@cmd
042FB3 5B DF       0650*  	rst.lil $18
042FB5 C9          0651*  	ret
042FB6 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
042FB9 00 00       0653*  @targetBufferId: dw 0x0000
042FBB 41          0654*  @cmd1:	db 65
042FBC 00 00       0655*  @sourceBufferId: dw 0x0000
042FBE 00          0656*  @end: 	db 0x00 ; padding
042FBF             0657*  
042FBF             0658*  ; #### from vdp.inc ####
042FBF             0659*  
042FBF             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
042FBF             0661*  ; VDU 23, 7: Scrolling
042FBF             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
042FBF             0663*  ; inputs: a, extent; l, direction; h; speed
042FBF             0664*  vdu_scroll_down:
042FBF 32 D4 2F 04 0665*  	ld (@extent),a
042FC3 22 D5 2F 04 0666*  	ld (@dir),hl ; implicitly populates @speed
042FC7 21 D2 2F 04 0667*  	ld hl,@cmd
042FCB 01 05 00 00 0668*  	ld bc,@end-@cmd
042FCF 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
042FD1 C9          0670*  	ret
042FD2 17 07       0671*  @cmd:       db 23,7
042FD4 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
042FD5 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
042FD6 00          0674*  @speed:     db 0x00 ; pixels
042FD7 00          0675*  @end:		db 0x00 ; padding
042FD8             0676*  
042FD8             0677*  cursor_on:
042FD8 21 E3 2F 04 0678*  	ld hl,@cmd
042FDC 01 03 00 00 0679*  	ld bc,@end-@cmd
042FE0 5B DF       0680*  	rst.lil $18
042FE2 C9          0681*  	ret
042FE3             0682*  @cmd:
042FE3 17 01 01    0683*  	db 23,1,1
042FE6             0684*  @end:
042FE6             0685*  
042FE6             0686*  cursor_off:
042FE6 21 F1 2F 04 0687*  	ld hl,@cmd
042FEA 01 03 00 00 0688*  	ld bc,@end-@cmd
042FEE 5B DF       0689*  	rst.lil $18
042FF0 C9          0690*  	ret
042FF1             0691*  @cmd:
042FF1 17 01 00    0692*  	db 23,1,0
042FF4             0693*  @end:
042FF4             0694*  
042FF4 DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
042FF6             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
042FF6 3E 08       0001*M 			LD	A, function
042FF8 5B CF       0002*M 			RST.LIL	08h
042FFA DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
042FFD DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
043000 28 FB       0699*  			JR	Z, @wait
043002 DD E1       0700*  			POP	IX
043004 C9          0701*  			RET
043005             0702*  
043005             0703*  ; #### from vdu_bmp.inc ####
043005             0704*  ; =========================================================================
043005             0705*  ; Bitmaps
043005             0706*  ; -------------------------------------------------------------------------
043005             0707*  ; VDU 23, 27, 0, n: Select bitmap n
043005             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
043005             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
043005             0710*  
043005             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
043005             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
043005             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
043005             0714*  ; typically "move" style plot commands are used to define the rectangle.
043005             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
043005             0716*  ; inputs: hl; target bufferId
043005             0717*  ; all the following are in 16.8 fixed point format
043005             0718*  ;   ub.c; top-left x coordinate
043005             0719*  ;   ud.e; top-left y coordinate
043005             0720*  ;   ui.x; width
043005             0721*  ;   ui.y; height
043005             0722*  vdu_buff_screen_capture168:
043005 ED 53 3C 30 0723*          ld (@y0-1),de
       04          
04300A ED 43 3A 30 0724*          ld (@x0-1),bc
       04          
04300F 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
043011 32 3A 30 04 0726*          ld (@x0-1),a
043015             0727*  
043015 DD 22 41 30 0728*          ld (@x1),ix
       04          
04301A FD 22 43 30 0729*          ld (@y1),iy
       04          
04301F 3E 17       0730*          ld a,23
043021 32 45 30 04 0731*          ld (@y1+2),a
043025             0732*  
043025 22 48 30 04 0733*          ld (@bufId),hl
043029 AF          0734*          xor a
04302A 32 4A 30 04 0735*          ld (@bufId+2),a
04302E             0736*  
04302E 21 39 30 04 0737*          ld hl,@begin
043032 01 13 00 00 0738*          ld bc,@end-@begin
043036 5B DF       0739*          rst.lil $18
043038 C9          0740*          ret
043039             0741*  @begin:
043039             0742*  ; absolute move gfx cursor to top-left screen coordinate
043039             0743*  ; VDU 25, mode, x; y;: PLOT command
043039 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04303B 40 00       0745*  @x0: 	dw 64
04303D 40 00       0746*  @y0: 	dw 64
04303F             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04303F             0748*  ; VDU 25, mode, x; y;: PLOT command
04303F 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
043041 0F 00       0750*  @x1: 	dw 15
043043 0F 00       0751*  @y1: 	dw 15
043045             0752*  ; now the main event
043045             0753*  ; VDU 23, 27, &21, bitmapId; 0;
043045 17 1B 21    0754*          db 23,27,0x21
043048 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04304C             0756*  @end: ; no padding required
04304C             0757*  
04304C             0758*  vdu_buff_screen_capture_full:
04304C 21 57 30 04 0759*          ld hl,@begin
043050 01 13 00 00 0760*          ld bc,@end-@begin
043054 5B DF       0761*          rst.lil $18
043056 C9          0762*          ret
043057             0763*  @begin:
043057             0764*  ; absolute move gfx cursor to top-left screen coordinate
043057             0765*  ; VDU 25, mode, x; y;: PLOT command
043057 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
043059 00 00       0767*  @x0: 	dw 0
04305B 00 00       0768*  @y0: 	dw 0
04305D             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04305D             0770*  ; VDU 25, mode, x; y;: PLOT command
04305D 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04305F 3F 01       0772*  @x1: 	dw 319
043061 EF 00       0773*  @y1: 	dw 239
043063             0774*  ; now the main event
043063             0775*  ; VDU 23, 27, &21, bitmapId; 0;
043063 17 1B 21    0776*          db 23,27,0x21
043066 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04306A             0778*  @end: ; no padding required
04306A             0779*  
04306A             0780*  vdu_buff_screen_paste_full:
04306A 21 75 30 04 0781*          ld hl,@begin
04306E 01 0B 00 00 0782*          ld bc,@end-@begin
043072 5B DF       0783*          rst.lil $18
043074 C9          0784*          ret
043075             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
043075 17 1B 20    0786*  @begin:    db 23,27,0x20
043078 00 20       0787*  @bufferId: dw 0x2000
04307A             0788*  ; VDU 25, mode, x; y;: PLOT command
04307A 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04307C 00 00 00 00 0790*             dw 0x0000,0x0000
043080             0791*  @end: ; no padding required
043080             0792*  
043080             0793*  vdu_buff_screen_capture_tiles:
043080 21 8B 30 04 0794*          ld hl,@begin
043084 01 13 00 00 0795*          ld bc,@end-@begin
043088 5B DF       0796*          rst.lil $18
04308A C9          0797*          ret
04308B             0798*  @begin:
04308B             0799*  ; absolute move gfx cursor to top-left screen coordinate
04308B             0800*  ; VDU 25, mode, x; y;: PLOT command
04308B 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04308D 00 00       0802*  @x0: 	dw 0
04308F 00 00       0803*  @y0: 	dw 0
043091             0804*  ; relative move gfx cursor to bottom-right screen coordinate
043091             0805*  ; VDU 25, mode, x; y;: PLOT command
043091 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
043093 FF 00       0807*  @x1: 	dw 319-64
043095 EF 00       0808*  @y1: 	dw 239
043097             0809*  ; now the main event
043097             0810*  ; VDU 23, 27, &21, bitmapId; 0;
043097 17 1B 21    0811*          db 23,27,0x21
04309A 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04309E             0813*  @end: ; no padding required
04309E             0814*  
04309E             0815*  vdu_buff_screen_paste_tiles:
04309E 21 A9 30 04 0816*          ld hl,@begin
0430A2 01 0B 00 00 0817*          ld bc,@end-@begin
0430A6 5B DF       0818*          rst.lil $18
0430A8 C9          0819*          ret
0430A9             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0430A9 17 1B 20    0821*  @begin:    db 23,27,0x20
0430AC 00 20       0822*  @bufferId: dw 0x2000
0430AE             0823*  ; VDU 25, mode, x; y;: PLOT command
0430AE 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
0430B0 00 00 01 00 0825*             dw 0x0000,0x0001
0430B4             0826*  @end: ; no padding required
0430B4             0827*  
0430B4             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
0430B4             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
0430B4             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
0430B4             0831*  ; Value	Meaning
0430B4             0832*  ; 0	RGBA8888 (4-bytes per pixel)
0430B4             0833*  ; 1	RGBA2222 (1-bytes per pixel)
0430B4             0834*  ; 2	Mono/Mask (1-bit per pixel)
0430B4             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
0430B4             0836*  ;     They have some significant limitations, and are not intended for general use.
0430B4             0837*  
0430B4             0838*  ; =========================================================================
0430B4             0839*  ; Sprites
0430B4             0840*  ; -------------------------------------------------------------------------
0430B4             0841*  ; VDU 23, 27, 4, n: Select sprite n
0430B4             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
0430B4             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0430B4             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
0430B4             0845*  ; VDU 23, 27, 7, n: Activate n sprites
0430B4             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
0430B4             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
0430B4             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0430B4             0849*  ; VDU 23, 27, 11: Show current sprite
0430B4             0850*  ; VDU 23, 27, 12: Hide current sprite
0430B4             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0430B4             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0430B4             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
0430B4             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
0430B4             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
0430B4             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
0430B4             0857*  
0430B4             0858*  ; =========================================================================
0430B4             0859*  ; Mouse cursor
0430B4             0860*  ; -------------------------------------------------------------------------
0430B4             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
0430B4             0862*  
0430B4             0863*  ; #### from vdu_plot.inc ####
0430B4             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0430B4             0865*  ; PLOT code 	(Decimal) 	Effect
0430B4             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
0430B4             0867*  plot_sl_both: equ 0x00
0430B4             0868*  
0430B4             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
0430B4             0870*  plot_sl_first: equ 0x08
0430B4             0871*  
0430B4             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
0430B4             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
0430B4             0874*  
0430B4             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
0430B4             0876*  plot_sl_last: equ 0x20
0430B4             0877*  
0430B4             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
0430B4             0879*  plot_sl_none: equ 0x28
0430B4             0880*  
0430B4             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
0430B4             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
0430B4             0883*  
0430B4             0884*  ; &40-&47 	64-71 	Point plot
0430B4             0885*  plot_pt: equ 0x40
0430B4             0886*  
0430B4             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
0430B4             0888*  plot_lf_lr_non_bg: equ 0x48
0430B4             0889*  
0430B4             0890*  ; &50-&57 	80-87 	Triangle fill
0430B4             0891*  plot_tf: equ 0x50
0430B4             0892*  
0430B4             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
0430B4             0894*  plot_lf_r_bg: equ 0x58
0430B4             0895*  
0430B4             0896*  ; &60-&67 	96-103 	Rectangle fill
0430B4             0897*  plot_rf: equ 0x60
0430B4             0898*  
0430B4             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
0430B4             0900*  plot_lf_lr_fg: equ 0x60
0430B4             0901*  
0430B4             0902*  ; &70-&77 	112-119 	Parallelogram fill
0430B4             0903*  plot_pf: equ 0x70
0430B4             0904*  
0430B4             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
0430B4             0906*  plot_lf_r_non_fg: equ 0x78
0430B4             0907*  
0430B4             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
0430B4             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
0430B4             0910*  
0430B4             0911*  ; &90-&97 	144-151 	Circle outline
0430B4             0912*  plot_co: equ 0x90
0430B4             0913*  
0430B4             0914*  ; &98-&9F 	152-159 	Circle fill
0430B4             0915*  plot_cf: equ 0x98
0430B4             0916*  
0430B4             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
0430B4             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
0430B4             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
0430B4             0920*  
0430B4             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
0430B4             0922*  plot_rcm: equ 0xB8
0430B4             0923*  
0430B4             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
0430B4             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
0430B4             0926*  ; &D0-&D7 	208-215 	Not defined
0430B4             0927*  ; &D8-&DF 	216-223 	Not defined
0430B4             0928*  ; &E0-&E7 	224-231 	Not defined
0430B4             0929*  
0430B4             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
0430B4             0931*  plot_bmp: equ 0xE8
0430B4             0932*  
0430B4             0933*  ; &F0-&F7 	240-247 	Not defined
0430B4             0934*  ; &F8-&FF 	248-255 	Not defined
0430B4             0935*  
0430B4             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
0430B4             0937*  ; Agon Console8 VDP 2.2.0
0430B4             0938*  
0430B4             0939*  ; Within each group of eight plot codes, the effects are as follows:
0430B4             0940*  ; Plot code 	Effect
0430B4             0941*  ; 0 	Move relative
0430B4             0942*  mv_rel: equ 0
0430B4             0943*  
0430B4             0944*  ; 1 	Plot relative in current foreground colour
0430B4             0945*  dr_rel_fg: equ 1
0430B4             0946*  
0430B4             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
0430B4             0948*  ; 3 	Plot relative in current background colour
0430B4             0949*  dr_rel_bg: equ 3
0430B4             0950*  
0430B4             0951*  ; 4 	Move absolute
0430B4             0952*  mv_abs: equ 4
0430B4             0953*  
0430B4             0954*  ; 5 	Plot absolute in current foreground colour
0430B4             0955*  dr_abs_fg: equ 5
0430B4             0956*  
0430B4             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
0430B4             0958*  ; 7 	Plot absolute in current background colour
0430B4             0959*  dr_abs_bg: equ 7
0430B4             0960*  
0430B4             0961*  ; Codes 0-3 use the position data provided as part of the command
0430B4             0962*  ; as a relative position, adding the position given to the current
0430B4             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
0430B4             0964*  ; as part of the command as an absolute position, setting the current
0430B4             0965*  ; graphical cursor position to the position given.
0430B4             0966*  
0430B4             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
0430B4             0968*  ; current pixel colour. These operations cannot currently be supported
0430B4             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
0430B4             0970*  ; supported. Support for these codes may be added in a future version
0430B4             0971*  ; of the VDP firmware.
0430B4             0972*  
0430B4             0973*  ; 16 colour palette constants
0430B4             0974*  c_black: equ 0
0430B4             0975*  c_red_dk: equ 1
0430B4             0976*  c_green_dk: equ 2
0430B4             0977*  c_yellow_dk: equ 3
0430B4             0978*  c_blue_dk: equ 4
0430B4             0979*  c_magenta_dk: equ 5
0430B4             0980*  c_cyan_dk: equ 6
0430B4             0981*  c_grey: equ 7
0430B4             0982*  c_grey_dk: equ 8
0430B4             0983*  c_red: equ 9
0430B4             0984*  c_green: equ 10
0430B4             0985*  c_yellow: equ 11
0430B4             0986*  c_blue: equ 12
0430B4             0987*  c_magenta: equ 13
0430B4             0988*  c_cyan: equ 14
0430B4             0989*  c_white: equ 15
0430B4             0990*  
0430B4             0991*  ; VDU 25, mode, x; y;: PLOT command
0430B4             0992*  ; inputs: a=mode, bc=x0, de=y0
0430B4             0993*  vdu_plot:
0430B4 32 CE 30 04 0994*      ld (@mode),a
0430B8 ED 43 CF 30 0995*      ld (@x0),bc
       04          
0430BD ED 53 D1 30 0996*      ld (@y0),de
       04          
0430C2 21 CD 30 04 0997*  	ld hl,@cmd
0430C6 01 06 00 00 0998*  	ld bc,@end-@cmd
0430CA 5B DF       0999*  	rst.lil $18
0430CC C9          1000*  	ret
0430CD 19          1001*  @cmd:   db 25
0430CE 00          1002*  @mode:  db 0
0430CF 00 00       1003*  @x0: 	dw 0
0430D1 00 00       1004*  @y0: 	dw 0
0430D3 00          1005*  @end:   db 0 ; extra byte to soak up deu
0430D4             1006*  
0430D4             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0430D4             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
0430D4             1009*  ; VDU 25, mode, x; y;: PLOT command
0430D4             1010*  ; inputs: bc=x0, de=y0
0430D4             1011*  ; prerequisites: vdu_buff_select
0430D4             1012*  vdu_plot_bmp:
0430D4 ED 43 EB 30 1013*      ld (@x0),bc
       04          
0430D9 ED 53 ED 30 1014*      ld (@y0),de
       04          
0430DE 21 E9 30 04 1015*  	ld hl,@cmd
0430E2 01 06 00 00 1016*  	ld bc,@end-@cmd
0430E6 5B DF       1017*  	rst.lil $18
0430E8 C9          1018*  	ret
0430E9 19          1019*  @cmd:   db 25
0430EA ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
0430EB 00 00       1021*  @x0: 	dw 0x0000
0430ED 00 00       1022*  @y0: 	dw 0x0000
0430EF 00          1023*  @end:   db 0x00 ; padding
0430F0             1024*  
0430F0             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
0430F0             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
0430F0             1027*  ; VDU 25, mode, x; y;: PLOT command
0430F0             1028*  ; inputs: bc=x0, de=y0
0430F0             1029*  ; USING 16.8 FIXED POINT COORDINATES
0430F0             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0430F0             1031*  ;   the fractional portiion of the inputs are truncated
0430F0             1032*  ;   leaving only the 16-bit integer portion
0430F0             1033*  ; prerequisites: vdu_buff_select
0430F0             1034*  vdu_plot_bmp168:
0430F0             1035*  ; populate in the reverse of normal to keep the
0430F0             1036*  ; inputs from stomping on each other
0430F0 ED 53 0E 31 1037*      ld (@y0-1),de
       04          
0430F5 ED 43 0C 31 1038*      ld (@x0-1),bc
       04          
0430FA 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
0430FC 32 0C 31 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
043100 21 0B 31 04 1041*  	ld hl,@cmd
043104 01 06 00 00 1042*  	ld bc,@end-@cmd
043108 5B DF       1043*  	rst.lil $18
04310A C9          1044*  	ret
04310B 19          1045*  @cmd:   db 25
04310C ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04310D 00 00       1047*  @x0: 	dw 0x0000
04310F 00 00       1048*  @y0: 	dw 0x0000
043111             1049*  @end:  ; no padding required b/c we shifted de right
043111             1050*  
043111             1051*  ; draw a filled rectangle
043111             1052*  vdu_plot_rf:
043111 ED 43 38 31 1053*      ld (@x0),bc
       04          
043116 ED 53 3A 31 1054*      ld (@y0),de
       04          
04311B DD 22 3E 31 1055*      ld (@x1),ix
       04          
043120 FD 22 40 31 1056*      ld (@y1),iy
       04          
043125 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
043127 32 3C 31 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04312B 21 36 31 04 1059*  	ld hl,@cmd0
04312F 01 0C 00 00 1060*  	ld bc,@end-@cmd0
043133 5B DF       1061*  	rst.lil $18
043135 C9          1062*      ret
043136 19          1063*  @cmd0:  db 25 ; plot
043137 04          1064*  @arg0:  db plot_sl_both+mv_abs
043138 00 00       1065*  @x0:    dw 0x0000
04313A 00 00       1066*  @y0:    dw 0x0000
04313C 19          1067*  @cmd1:  db 25 ; plot
04313D 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04313E 00 00       1069*  @x1:    dw 0x0000
043140 00 00       1070*  @y1:    dw 0x0000
043142 00          1071*  @end:   db 0x00 ; padding
043143             1072*  
043143             1073*  ; draw a filled circle
043143             1074*  vdu_plot_cf:
043143 ED 43 6A 31 1075*      ld (@x0),bc
       04          
043148 ED 53 6C 31 1076*      ld (@y0),de
       04          
04314D DD 22 70 31 1077*      ld (@x1),ix
       04          
043152 FD 22 72 31 1078*      ld (@y1),iy
       04          
043157 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
043159 32 6E 31 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04315D 21 68 31 04 1081*  	ld hl,@cmd0
043161 01 0C 00 00 1082*  	ld bc,@end-@cmd0
043165 5B DF       1083*  	rst.lil $18
043167 C9          1084*      ret
043168 19          1085*  @cmd0:  db 25 ; plot
043169 04          1086*  @arg0:  db plot_sl_both+mv_abs
04316A 00 00       1087*  @x0:    dw 0x0000
04316C 00 00       1088*  @y0:    dw 0x0000
04316E 19          1089*  @cmd1:  db 25 ; plot
04316F 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
043170 00 00       1091*  @x1:    dw 0x0000
043172 00 00       1092*  @y1:    dw 0x0000
043174 00          1093*  @end:   db 0x00 ; padding
043175             1094*  
043175             1095*  ; #### from vdu_sprites.inc ####
043175             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
043175             1097*  ; the VDP can support up to 256 sprites. They must be defined
043175             1098*  ; contiguously, and so the first sprite is sprite 0.
043175             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
043175             1100*  ; Once a selection of sprites have been defined, you can activate
043175             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
043175             1102*  ; of sprites to activate. This will activate the first n sprites,
043175             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
043175             1104*  
043175             1105*  ; A single sprite can have multiple "frames", referring to
043175             1106*  ; different bitmaps.
043175             1107*  ; (These bitmaps do not need to be the same size.)
043175             1108*  ; This allows a sprite to include an animation sequence,
043175             1109*  ; which can be stepped through one frame at a time, or picked
043175             1110*  ; in any order.
043175             1111*  
043175             1112*  ; Any format of bitmap can be used as a sprite frame. It should
043175             1113*  ; be noted however that "native" format bitmaps are not
043175             1114*  ; recommended for use as sprite frames, as they cannot get
043175             1115*  ; erased from the screen. (As noted above, the "native" bitmap
043175             1116*  ; format is not really intended for general use.) This is part
043175             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
043175             1118*  ; screen are now stored in RGBA2222 format.
043175             1119*  
043175             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
043175             1121*  ; and then later shown again.
043175             1122*  
043175             1123*  ; Moving sprites around the screen is done by changing the
043175             1124*  ; position of the sprite. This can be done either by setting
043175             1125*  ; the absolute position of the sprite, or by moving the sprite
043175             1126*  ; by a given number of pixels. (Sprites are positioned using
043175             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
043175             1128*  ; In the current sprite system, sprites will not update their
043175             1129*  ; position on-screen until either another drawing operation is
043175             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
043175             1131*  
043175             1132*  ; Here are the sprite commands:
043175             1133*  ;
043175             1134*  ; VDU 23, 27, 4,  n: Select sprite n
043175             1135*  ; inputs: a is the 8-bit sprite id
043175             1136*  ; vdu_sprite_select:
043175             1137*  
043175             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
043175             1139*  ; inputs: none
043175             1140*  ; prerequisites: vdu_sprite_select
043175             1141*  ; vdu_sprite_clear_frames:
043175             1142*  
043175             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
043175             1144*  ; inputs: a is the 8-bit bitmap number
043175             1145*  ; prerequisites: vdu_sprite_select
043175             1146*  ; vdu_sprite_add_bmp:
043175             1147*  
043175             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
043175             1149*  ; inputs: a is the number of sprites to activate
043175             1150*  ; vdu_sprite_activate:
043175             1151*  
043175             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
043175             1153*  ; inputs: none
043175             1154*  ; prerequisites: vdu_sprite_select
043175             1155*  ; vdu_sprite_next_frame:
043175             1156*  
043175             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
043175             1158*  ; inputs: none
043175             1159*  ; prerequisites: vdu_sprite_select
043175             1160*  ; vdu_sprite_prev_frame:
043175             1161*  
043175             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
043175             1163*  ; inputs: a is frame number to select
043175             1164*  ; prerequisites: vdu_sprite_select
043175             1165*  ; vdu_sprite_select_frame:
043175             1166*  
043175             1167*  ; VDU 23, 27, 11: Show current sprite
043175             1168*  ; inputs: none
043175             1169*  ; prerequisites: vdu_sprite_select
043175             1170*  ; vdu_sprite_show:
043175             1171*  
043175             1172*  ; VDU 23, 27, 12: Hide current sprite
043175             1173*  ; inputs: none
043175             1174*  ; prerequisites: vdu_sprite_select
043175             1175*  ; vdu_sprite_hide:
043175             1176*  
043175             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
043175             1178*  ; inputs: bc is x coordinate, de is y coordinate
043175             1179*  ; prerequisites: vdu_sprite_select
043175             1180*  ; vdu_sprite_move_abs:
043175             1181*  ;
043175             1182*  ; USING 16.8 FIXED POINT COORDINATES
043175             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
043175             1184*  ;   the fractional portiion of the inputs are truncated
043175             1185*  ;   leaving only the 16-bit integer portion
043175             1186*  ; prerequisites: vdu_sprite_select
043175             1187*  ; vdu_sprite_move_abs168:
043175             1188*  
043175             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
043175             1190*  ; inputs: bc is x coordinate, de is y coordinate
043175             1191*  ; prerequisites: vdu_sprite_select
043175             1192*  ; vdu_sprite_move_rel:
043175             1193*  ;
043175             1194*  ; USING 16.8 FIXED POINT COORDINATES
043175             1195*  ; inputs: ub.c is dx, ud.e is dy
043175             1196*  ;   the fractional portiion of the inputs are truncated
043175             1197*  ;   leaving only the 16-bit integer portion
043175             1198*  ; prerequisites: vdu_sprite_select
043175             1199*  ; vdu_sprite_move_rel168:
043175             1200*  
043175             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
043175             1202*  ; inputs: none
043175             1203*  ; vdu_sprite_update:
043175             1204*  
043175             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
043175             1206*  ; inputs: none
043175             1207*  ; vdu_sprite_bmp_reset:
043175             1208*  
043175             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
043175             1210*  ; inputs: none
043175             1211*  ; vdu_sprite_reset:
043175             1212*  
043175             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
043175             1214*  ; inputs: a is the GCOL paint mode
043175             1215*  ; prerequisites: vdu_sprite_select
043175             1216*  ; vdu_sprite_set_gcol:
043175             1217*  
043175             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
043175             1219*  ; inputs: hl=bufferId
043175             1220*  ; prerequisites: vdu_sprite_select
043175             1221*  ; vdu_sprite_add_buff:
043175             1222*  
043175             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
043175             1224*  
043175             1225*  ; VDU 23, 27, 4, n: Select sprite n
043175             1226*  ; inputs: a is the 8-bit sprite id
043175             1227*  vdu_sprite_select:
043175 32 87 31 04 1228*      ld (@sprite),a
043179 21 84 31 04 1229*      ld hl,@cmd
04317D 01 04 00 00 1230*      ld bc,@end-@cmd
043181 5B DF       1231*      rst.lil $18
043183 C9          1232*      ret
043184 17 1B 04    1233*  @cmd:    db 23,27,4
043187 00          1234*  @sprite: db 0x00
043188             1235*  @end:
043188             1236*  
043188             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
043188             1238*  ; inputs: none
043188             1239*  ; prerequisites: vdu_sprite_select
043188             1240*  vdu_sprite_clear_frames:
043188 21 93 31 04 1241*      ld hl,@cmd
04318C 01 03 00 00 1242*      ld bc,@end-@cmd
043190 5B DF       1243*      rst.lil $18
043192 C9          1244*      ret
043193 17 1B 05    1245*  @cmd: db 23,27,5
043196             1246*  @end:
043196             1247*  
043196             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
043196             1249*  ; inputs: a is the 8-bit bitmap number
043196             1250*  ; prerequisites: vdu_sprite_select
043196             1251*  vdu_sprite_add_bmp:
043196 32 A8 31 04 1252*      ld (@bmp),a
04319A 21 A5 31 04 1253*      ld hl,@cmd
04319E 01 04 00 00 1254*      ld bc,@end-@cmd
0431A2 5B DF       1255*      rst.lil $18
0431A4 C9          1256*      ret
0431A5 17 1B 06    1257*  @cmd: db 23,27,6
0431A8 00          1258*  @bmp: db 0x00
0431A9             1259*  @end:
0431A9             1260*  
0431A9             1261*  ; VDU 23, 27, 7, n: Activate n sprites
0431A9             1262*  ; inputs: a is the number of sprites to activate
0431A9             1263*  vdu_sprite_activate:
0431A9 32 BB 31 04 1264*      ld (@num),a
0431AD 21 B8 31 04 1265*      ld hl,@cmd
0431B1 01 04 00 00 1266*      ld bc,@end-@cmd
0431B5 5B DF       1267*      rst.lil $18
0431B7 C9          1268*      ret
0431B8 17 1B 07    1269*  @cmd: db 23,27,7
0431BB 00          1270*  @num: db 0x00
0431BC             1271*  @end:
0431BC             1272*  
0431BC             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
0431BC             1274*  ; inputs: none
0431BC             1275*  ; prerequisites: vdu_sprite_select
0431BC             1276*  vdu_sprite_next_frame:
0431BC 21 C7 31 04 1277*      ld hl,@cmd
0431C0 01 03 00 00 1278*      ld bc,@end-@cmd
0431C4 5B DF       1279*      rst.lil $18
0431C6 C9          1280*      ret
0431C7 17 1B 08    1281*  @cmd: db 23,27,8
0431CA             1282*  @end:
0431CA             1283*  
0431CA             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
0431CA             1285*  ; inputs: none
0431CA             1286*  ; prerequisites: vdu_sprite_select
0431CA             1287*  vdu_sprite_prev_frame:
0431CA 21 D5 31 04 1288*      ld hl,@cmd
0431CE 01 03 00 00 1289*      ld bc,@end-@cmd
0431D2 5B DF       1290*      rst.lil $18
0431D4 C9          1291*      ret
0431D5 17 1B 09    1292*  @cmd: db 23,27,9
0431D8             1293*  @end:
0431D8             1294*  
0431D8             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0431D8             1296*  ; inputs: a is frame number to select
0431D8             1297*  ; prerequisites: vdu_sprite_select
0431D8             1298*  vdu_sprite_select_frame:
0431D8 32 EA 31 04 1299*      ld (@frame),a
0431DC 21 E7 31 04 1300*      ld hl,@cmd
0431E0 01 04 00 00 1301*      ld bc,@end-@cmd
0431E4 5B DF       1302*      rst.lil $18
0431E6 C9          1303*      ret
0431E7 17 1B 0A    1304*  @cmd:    db 23,27,10
0431EA 00          1305*  @frame:  db 0x00
0431EB             1306*  @end:
0431EB             1307*  
0431EB             1308*  ; VDU 23, 27, 11: Show current sprite
0431EB             1309*  ; inputs: none
0431EB             1310*  ; prerequisites: vdu_sprite_select
0431EB             1311*  vdu_sprite_show:
0431EB 21 F6 31 04 1312*      ld hl,@cmd
0431EF 01 03 00 00 1313*      ld bc,@end-@cmd
0431F3 5B DF       1314*      rst.lil $18
0431F5 C9          1315*      ret
0431F6 17 1B 0B    1316*  @cmd: db 23,27,11
0431F9             1317*  @end:
0431F9             1318*  
0431F9             1319*  ; VDU 23, 27, 12: Hide current sprite
0431F9             1320*  ; inputs: none
0431F9             1321*  ; prerequisites: vdu_sprite_select
0431F9             1322*  vdu_sprite_hide:
0431F9 21 04 32 04 1323*      ld hl,@cmd
0431FD 01 03 00 00 1324*      ld bc,@end-@cmd
043201 5B DF       1325*      rst.lil $18
043203 C9          1326*      ret
043204 17 1B 0C    1327*  @cmd: db 23,27,12
043207             1328*  @end:
043207             1329*  
043207             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
043207             1331*  ; inputs: bc is x coordinate, de is y coordinate
043207             1332*  ; prerequisites: vdu_sprite_select
043207             1333*  vdu_sprite_move_abs:
043207 ED 43 1F 32 1334*      ld (@xpos),bc
       04          
04320C ED 53 21 32 1335*      ld (@ypos),de
       04          
043211 21 1C 32 04 1336*      ld hl,@cmd
043215 01 07 00 00 1337*      ld bc,@end-@cmd
043219 5B DF       1338*      rst.lil $18
04321B C9          1339*      ret
04321C 17 1B 0D    1340*  @cmd:  db 23,27,13
04321F 00 00       1341*  @xpos: dw 0x0000
043221 00 00       1342*  @ypos: dw 0x0000
043223 00          1343*  @end:  db 0x00 ; padding
043224             1344*  
043224             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
043224             1346*  ; inputs: bc is x coordinate, de is y coordinate
043224             1347*  ; prerequisites: vdu_sprite_select
043224             1348*  vdu_sprite_move_rel:
043224 ED 43 3C 32 1349*      ld (@dx),bc
       04          
043229 ED 53 3E 32 1350*      ld (@dy),de
       04          
04322E 21 39 32 04 1351*      ld hl,@cmd
043232 01 07 00 00 1352*      ld bc,@end-@cmd
043236 5B DF       1353*      rst.lil $18
043238 C9          1354*      ret
043239 17 1B 0E    1355*  @cmd: db 23,27,14
04323C 00 00       1356*  @dx:  dw 0x0000
04323E 00 00       1357*  @dy:  dw 0x0000
043240 00          1358*  @end: db 0x00 ; padding
043241             1359*  
043241             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
043241             1361*  ; USING 16.8 FIXED POINT COORDINATES
043241             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
043241             1363*  ;   the fractional portiion of the inputs are truncated
043241             1364*  ;   leaving only the 16-bit integer portion
043241             1365*  ; prerequisites: vdu_sprite_select
043241             1366*  vdu_sprite_move_abs168:
043241             1367*  ; populate in the reverse of normal to keep the
043241             1368*  ; inputs from stomping on each other
043241 ED 53 60 32 1369*      ld (@ypos-1),de
       04          
043246 ED 43 5E 32 1370*      ld (@xpos-1),bc
       04          
04324B 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04324D 32 5E 32 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
043251 21 5C 32 04 1373*      ld hl,@cmd
043255 01 07 00 00 1374*      ld bc,@end-@cmd
043259 5B DF       1375*      rst.lil $18
04325B C9          1376*      ret
04325C 17 1B 0D    1377*  @cmd:  db 23,27,13
04325F 00 00       1378*  @xpos: dw 0x0000
043261 00 00       1379*  @ypos: dw 0x0000
043263             1380*  @end:  ; no padding required b/c we shifted de right
043263             1381*  
043263             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
043263             1383*  ; USING 16.8 FIXED POINT COORDINATES
043263             1384*  ; inputs: ub.c is dx, ud.e is dy
043263             1385*  ;   the fractional portiion of the inputs are truncated
043263             1386*  ;   leaving only the 16-bit integer portion
043263             1387*  ; prerequisites: vdu_sprite_select
043263             1388*  vdu_sprite_move_rel168:
043263             1389*  ; populate in the reverse of normal to keep the
043263             1390*  ; inputs from stomping on each other
043263 ED 53 82 32 1391*      ld (@dy-1),de
       04          
043268 ED 43 80 32 1392*      ld (@dx-1),bc
       04          
04326D 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04326F 32 80 32 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
043273 21 7E 32 04 1395*      ld hl,@cmd
043277 01 07 00 00 1396*      ld bc,@end-@cmd
04327B 5B DF       1397*      rst.lil $18
04327D C9          1398*      ret
04327E 17 1B 0E    1399*  @cmd:  db 23,27,14
043281 00 00       1400*  @dx: dw 0x0000
043283 00 00       1401*  @dy: dw 0x0000
043285             1402*  @end:  ; no padding required b/c we shifted de right
043285             1403*  
043285             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
043285             1405*  ; inputs: none
043285             1406*  vdu_sprite_update:
043285 21 90 32 04 1407*      ld hl,@cmd
043289 01 03 00 00 1408*      ld bc,@end-@cmd
04328D 5B DF       1409*      rst.lil $18
04328F C9          1410*      ret
043290 17 1B 0F    1411*  @cmd: db 23,27,15
043293             1412*  @end:
043293             1413*  
043293             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
043293             1415*  ; inputs: none
043293             1416*  vdu_sprite_bmp_reset:
043293 21 9E 32 04 1417*      ld hl,@cmd
043297 01 03 00 00 1418*      ld bc,@end-@cmd
04329B 5B DF       1419*      rst.lil $18
04329D C9          1420*      ret
04329E 17 1B 10    1421*  @cmd: db 23,27,16
0432A1             1422*  @end:
0432A1             1423*  
0432A1             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
0432A1             1425*  ; inputs: none
0432A1             1426*  vdu_sprite_reset:
0432A1 21 AC 32 04 1427*      ld hl,@cmd
0432A5 01 03 00 00 1428*      ld bc,@end-@cmd
0432A9 5B DF       1429*      rst.lil $18
0432AB C9          1430*      ret
0432AC 17 1B 11    1431*  @cmd: db 23,27,17
0432AF             1432*  @end:
0432AF             1433*  
0432AF             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
0432AF             1435*  ; inputs: a is the GCOL paint mode
0432AF             1436*  ; prerequisites: vdu_sprite_select
0432AF             1437*  vdu_sprite_set_gcol:
0432AF 32 C1 32 04 1438*      ld (@mode),a
0432B3 21 BE 32 04 1439*      ld hl,@cmd
0432B7 01 04 00 00 1440*      ld bc,@end-@cmd
0432BB 5B DF       1441*      rst.lil $18
0432BD C9          1442*      ret
0432BE 17 1B 12    1443*  @cmd:  db 23,27,18
0432C1 00          1444*  @mode: db 0x00
0432C2             1445*  @end:
0432C2             1446*  
0432C2             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
0432C2             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
0432C2             1449*  ; inputs: hl=bufferId
0432C2             1450*  ; prerequisites: vdu_sprite_select
0432C2             1451*  vdu_sprite_add_buff:
0432C2 22 D4 32 04 1452*      ld (@bufferId),hl
0432C6 21 D1 32 04 1453*      ld hl,@cmd
0432CA 01 05 00 00 1454*      ld bc,@end-@cmd
0432CE 5B DF       1455*      rst.lil $18
0432D0 C9          1456*      ret
0432D1 17 1B 26    1457*  @cmd:      db 23,27,0x26
0432D4 00 00       1458*  @bufferId: dw 0x0000
0432D6 00          1459*  @end:      db 0x00 ; padding
0432D7             1460*  
0432D7             1461*  
0432D7             1462*  ; #### from sfx.inc ####
0432D7 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
0432D8             1464*  
0432D8             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
0432D8             1466*  ; ; inputs: hl = bufferId
0432D8             1467*  ; sfx_play:
0432D8             1468*  ; 	ld iy,sfx_last_channel
0432D8             1469*  ; 	ld a,(iy+0)
0432D8             1470*  ; 	ld (@bufferId),hl
0432D8             1471*  ; @find_next_channel:
0432D8             1472*  ; 	inc a ; bump to next channel
0432D8             1473*  ; 	and 31 ; modulo 32 channel
0432D8             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
0432D8             1475*  ; 	ret z ; so we return to caller without doing anything
0432D8             1476*  ; 	push af ; back up channel
0432D8             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
0432D8             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
0432D8             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
0432D8             1480*  ; 	pop af ; restore channel
0432D8             1481*  ; 	jr @find_next_channel ; try the next channel
0432D8             1482*  ; @play_sfx:
0432D8             1483*  ; 	pop af ; restore channel
0432D8             1484*  ; 	ld (iy+0),a ; store channel
0432D8             1485*  ; 	ld hl,(@bufferId)
0432D8             1486*  ; 	ld c,a ; channel
0432D8             1487*  ; 	ld b,127 ; full volume
0432D8             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
0432D8             1489*  ; 	jp vdu_play_sample
0432D8             1490*  ; @bufferId:
0432D8             1491*  ; 	dw 0x0000 ; 16-bit value
0432D8             1492*  
0432D8             1493*  sfx_play_random_hurt:
0432D8 CD D5 37 04 1494*  	call rand_8
0432DC E6 03       1495*  	and 3
0432DE FE 00       1496*  	cp 0
0432E0 CA BA 3E 04 1497*  	jp z,sfx_play_ahh
0432E4 FE 01       1498*  	cp 1
0432E6 CA C6 3E 04 1499*  	jp z,sfx_play_augh
0432EA FE 02       1500*  	cp 2
0432EC CA D2 3E 04 1501*  	jp z,sfx_play_ayee
0432F0 C3 9E 3F 04 1502*  	jp sfx_play_ugh
0432F4             1503*  
0432F4             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
0432F4             1505*  sfx_load_main:
0432F4 21 00 00 00 1506*      ld hl,0
0432F8 22 EA 37 04 1507*      ld (cur_file_idx),hl
0432FC             1508*  sfx_load_main_loop:
0432FC             1509*  ; back up loop counter
0432FC C5          1510*      push bc
0432FD             1511*  ; load the next sound
0432FD CD 51 33 04 1512*      call load_next_sound
043301             1513*  ; draw all the things
043301 CD 53 39 04 1514*      call tmp_draw_all_the_things
043305             1515*  ; move bj
043305 CD DB 38 04 1516*  	call move_bj
043309             1517*  ; print welcome message
043309 DD 21 B9 09 1518*  	ld ix,font_itc_honda
       04          
04330E 21 B7 41 04 1519*  	ld hl,hello_world
043312 01 20 00 00 1520*  	ld bc,32
043316 11 02 00 00 1521*  	ld de,2
04331A CD A4 09 04 1522*  	call font_bmp_print
04331E             1523*  ; print current filename
04331E CD 9A 2D 04 1524*  	call vdu_cls
043322 2A ED 37 04 1525*  	ld hl,(cur_filename)
043326 CD AA 33 04 1526*  	call printString
04332A CD BF 33 04 1527*  	call printNewLine
04332E             1528*  
04332E             1529*  ; print current load stopwatch
04332E 21 D9 41 04 1530*  	ld hl,loading_time
043332 CD AA 33 04 1531*  	call printString
043336 CD 69 41 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04333A CD F8 33 04 1533*  	call printDec
04333E             1534*  
04333E             1535*  ; flip screen
04333E CD 69 2F 04 1536*      call vdu_flip
043342             1537*  ; ; delay for a bit so sound can play
043342             1538*  ;     ld a,%10000000 ; 1 second delay
043342             1539*  ;     call multiPurposeDelay
043342             1540*  ; decrement loop counter
043342 C1          1541*      pop bc
043343 0B          1542*  	dec bc
043344             1543*  ; ; DEBUG: DUMP REGISTERS
043344             1544*  ; 	push bc
043344             1545*  ; 	call dumpRegistersHex
043344             1546*  ; 	call vdu_flip
043344             1547*  ; 	pop bc
043344             1548*  ; ; END DEBUG
043344 79          1549*      ld a,c
043345 B7          1550*      or a
043346 C2 FC 32 04 1551*      jp nz,sfx_load_main_loop
04334A 78          1552*      ld a,b
04334B B7          1553*      or a
04334C C2 FC 32 04 1554*      jp nz,sfx_load_main_loop
043350 C9          1555*      ret
043351             1556*  
043351             1557*  load_next_sound:
043351             1558*  ; look up the load routine for the current file index
043351 2A EA 37 04 1559*  	ld hl,(cur_file_idx)
043355 29          1560*  	add hl,hl ; multiply current index by 2 ...
043356 ED 5B EA 37 1561*  	ld de,(cur_file_idx)
       04          
04335B 19          1562*  	add hl,de ; ... now by 3
04335C ED 5B F6 37 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
043361 19          1564*  	add hl,de
043362 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
043364 22 69 33 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
043368             1567*  @jump_addr:
043368 CD 00 00 00 1568*  	call 0 ; call the sound load routine
04336C             1569*  ; look up the buffer id for the current file
04336C 2A EA 37 04 1570*  	ld hl,(cur_file_idx)
043370 29          1571*  	add hl,hl ; multiply current index by 2 ...
043371 ED 5B EA 37 1572*  	ld de,(cur_file_idx)
       04          
043376 19          1573*  	add hl,de ; ... now by 3
043377 ED 5B F3 37 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04337C 19          1575*  	add hl,de
04337D ED 27       1576*  	ld hl,(hl)
04337F 22 F0 37 04 1577*  	ld (cur_buffer_id),hl
043383             1578*  ; bump the current file index
043383 2A EA 37 04 1579*  	ld hl,(cur_file_idx)
043387 23          1580*  	inc hl
043388 22 EA 37 04 1581*  	ld (cur_file_idx),hl
04338C C9          1582*  	ret
04338D             1583*  
04338D             1584*  ; load a sound file to a buffer
04338D             1585*  ; inputs: hl = bufferId ; ix = file size
04338D             1586*  vdu_load_sfx:
04338D             1587*  ; back up input parameters
04338D E5          1588*      push hl ; bufferId
04338E             1589*  ; load the sound
04338E CD A8 43 04 1590*  	call vdu_load_buffer_from_file
043392             1591*  ; now make the buffer a sound sample
043392 E1          1592*      pop hl ; bufferId
043393 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
043394             1594*      ; push hl ; bufferId
043394 CD 7D 01 04 1595*  	call vdu_buffer_to_sound
043398             1596*  ; ; play the loaded sound
043398             1597*  ;     ld c,0 ; channel
043398             1598*  ;     ld b,127 ; full volume
043398             1599*  ;     ld de,1000 ; 1 second duration
043398             1600*  ;     pop hl ; bufferId
043398             1601*  ;     call vdu_play_sample
043398 C9          1602*      ret
043399             1603*  
043399             1604*  vdu_clear_all_buffers:
043399             1605*  ; clear all buffers
043399 21 A4 33 04 1606*      ld hl,@beg
04339D 01 06 00 00 1607*      ld bc,@end-@beg
0433A1 5B DF       1608*      rst.lil $18
0433A3 C9          1609*      ret
0433A4 17 00 A0    1610*  @beg: db 23,0,$A0
0433A7 FF FF       1611*        dw -1 ; clear all buffers
0433A9 02          1612*        db 2  ; command 2: clear a buffer
0433AA             1613*  @end:
0433AA             0024       include "src/asm/functions.inc"
0433AA             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
0433AA             0002*  ; Print a zero-terminated string
0433AA             0003*  ; HL: Pointer to string
0433AA             0004*  printString:
0433AA C5          0005*  	PUSH	BC
0433AB 01 00 00 00 0006*  	LD		BC,0
0433AF 3E 00       0007*  	LD 	 	A,0
0433B1 5B DF       0008*  	RST.LIL 18h
0433B3 C1          0009*  	POP		BC
0433B4 C9          0010*  	RET
0433B5             0011*  ; print a VDU sequence
0433B5             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
0433B5             0013*  sendVDUsequence:
0433B5 C5          0014*  	PUSH	BC
0433B6 01 00 00 00 0015*  	LD		BC, 0
0433BA 4E          0016*  	LD		C, (HL)
0433BB 5B DF       0017*  	RST.LIL	18h
0433BD C1          0018*  	POP		BC
0433BE C9          0019*  	RET
0433BF             0020*  ; Print Newline sequence to VDP
0433BF             0021*  printNewLine:
0433BF 3E 0D       0022*  	LD	A, '\r'
0433C1 5B D7       0023*  	RST.LIL 10h
0433C3 3E 0A       0024*  	LD	A, '\n'
0433C5 5B D7       0025*  	RST.LIL 10h
0433C7 C9          0026*  	RET
0433C8             0027*  ; Print a 24-bit HEX number
0433C8             0028*  ; HLU: Number to print
0433C8             0029*  printHex24:
0433C8 E5          0030*  	PUSH	HL
0433C9 21 02 00 00 0031*  	LD		HL, 2
0433CD 39          0032*  	ADD		HL, SP
0433CE 7E          0033*  	LD		A, (HL)
0433CF E1          0034*  	POP		HL
0433D0 CD DA 33 04 0035*  	CALL	printHex8
0433D4             0036*  ; Print a 16-bit HEX number
0433D4             0037*  ; HL: Number to print
0433D4             0038*  printHex16:
0433D4 7C          0039*  	LD		A,H
0433D5 CD DA 33 04 0040*  	CALL	printHex8
0433D9 7D          0041*  	LD		A,L
0433DA             0042*  ; Print an 8-bit HEX number
0433DA             0043*  ; A: Number to print
0433DA             0044*  printHex8:
0433DA 4F          0045*  	LD		C,A
0433DB 1F          0046*  	RRA
0433DC 1F          0047*  	RRA
0433DD 1F          0048*  	RRA
0433DE 1F          0049*  	RRA
0433DF CD E4 33 04 0050*  	CALL	@F
0433E3 79          0051*  	LD		A,C
0433E4             0052*  @@:
0433E4 E6 0F       0053*  	AND		0Fh
0433E6 C6 90       0054*  	ADD		A,90h
0433E8 27          0055*  	DAA
0433E9 CE 40       0056*  	ADC		A,40h
0433EB 27          0057*  	DAA
0433EC 5B D7       0058*  	RST.LIL	10h
0433EE C9          0059*  	RET
0433EF             0060*  
0433EF             0061*  ; Print a 0x HEX prefix
0433EF             0062*  DisplayHexPrefix:
0433EF 3E 30       0063*  	LD	A, '0'
0433F1 5B D7       0064*  	RST.LIL 10h
0433F3 3E 78       0065*  	LD	A, 'x'
0433F5 5B D7       0066*  	RST.LIL 10h
0433F7 C9          0067*  	RET
0433F8             0068*  
0433F8             0069*  
0433F8             0070*  ; Prints the right justified decimal value in HL without leading zeroes
0433F8             0071*  ; HL : Value to print
0433F8             0072*  printDec:
0433F8 11 1C 34 04 0073*  	LD	 DE, _printDecBuffer
0433FC CD 25 34 04 0074*  	CALL Num2String
043400             0075*  ; BEGIN MY CODE
043400             0076*  ; replace leading zeroes with spaces
043400 21 1C 34 04 0077*      LD	 HL, _printDecBuffer
043404 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
043406             0079*  @loop:
043406 7E          0080*      LD	 A, (HL)
043407 FE 30       0081*      CP	 '0'
043409 C2 17 34 04 0082*      JP	 NZ, @done
04340D 3E 20       0083*      LD   A, ' '
04340F 77          0084*      LD	 (HL), A
043410 23          0085*      INC	 HL
043411 CD 8B 2D 04 0086*      CALL vdu_cursor_forward
043415 10 EF       0087*      DJNZ @loop
043417             0088*  @done:
043417             0089*  ; END MY CODE
043417             0090*  	; LD	 HL, _printDecBuffer
043417 CD AA 33 04 0091*  	CALL printString
04341B C9          0092*  	RET
04341C 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
043425             0094*  
043425             0095*  ; This routine converts the value from HL into it's ASCII representation,
043425             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
043425             0097*  ; so it will allways be 8 characters length
043425             0098*  ; HL : Value to convert to string
043425             0099*  ; DE : pointer to buffer, at least 8 byte + 0
043425             0100*  Num2String:
043425 01 80 69 67 0101*  	LD	 BC,-10000000
043429 CD 5C 34 04 0102*  	CALL OneDigit
04342D 01 C0 BD F0 0103*  	LD	 BC,-1000000
043431 CD 5C 34 04 0104*  	CALL OneDigit
043435 01 60 79 FE 0105*  	LD	 BC,-100000
043439 CD 5C 34 04 0106*  	CALL OneDigit
04343D 01 F0 D8 FF 0107*  	LD   BC,-10000
043441 CD 5C 34 04 0108*  	CALL OneDigit
043445 01 18 FC FF 0109*  	LD   BC,-1000
043449 CD 5C 34 04 0110*  	CALL OneDigit
04344D 01 9C FF FF 0111*  	LD   BC,-100
043451 CD 5C 34 04 0112*  	CALL OneDigit
043455 0E F6       0113*  	LD   C,-10
043457 CD 5C 34 04 0114*  	CALL OneDigit
04345B 48          0115*  	LD   C,B
04345C             0116*  OneDigit:
04345C 3E 2F       0117*  	LD   A,'0'-1
04345E             0118*  DivideMe:
04345E 3C          0119*  	INC  A
04345F 09          0120*  	ADD  HL,BC
043460 38 FC       0121*  	JR   C,DivideMe
043462 ED 42       0122*  	SBC  HL,BC
043464 12          0123*  	LD   (DE),A
043465 13          0124*  	INC  DE
043466 C9          0125*  	RET
043467             0126*  
043467             0127*  
043467             0128*  ; #### new functions added by Brandon R. Gates ####
043467             0129*  
043467             0130*  ; print the binary representation of the 8-bit value in a
043467             0131*  ; destroys a, hl, bc
043467             0132*  printBin8:
043467 06 08       0133*      ld b,8      ; loop counter for 8 bits
043469 21 84 34 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04346D             0135*                  ; (which will be the high bit of the value in a)
04346D             0136*  @loop:
04346D 07          0137*      rlca ; put the next highest bit into carry
04346E 38 04       0138*      jr c,@one
043470 36 30       0139*      ld (hl),'0'
043472 18 02       0140*      jr @next_bit
043474             0141*  @one:
043474 36 31       0142*      ld (hl),'1'
043476             0143*  @next_bit:
043476 23          0144*      inc hl
043477 10 F4       0145*      djnz @loop
043479             0146*  ; print it
043479 21 84 34 04 0147*  	ld hl,@cmd
04347D 01 08 00 00 0148*  	ld bc,@end-@cmd
043481 5B DF       0149*  	rst.lil $18
043483 C9          0150*  	ret
043484             0151*  @cmd: ds 8 ; eight bytes for eight bits
04348C             0152*  @end:
04348C             0153*  
04348C             0154*  ; print the binary representation of the 8-bit value in a
04348C             0155*  ; in reverse order (lsb first)
04348C             0156*  ; destroys a, hl, bc
04348C             0157*  printBin8Rev:
04348C 06 08       0158*      ld b,8      ; loop counter for 8 bits
04348E 21 A9 34 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
043492             0160*                  ; (which will be the high bit of the value in a)
043492             0161*  @loop:
043492 0F          0162*      rrca ; put the next lowest bit into carry
043493 38 04       0163*      jr c,@one
043495 36 30       0164*      ld (hl),'0'
043497 18 02       0165*      jr @next_bit
043499             0166*  @one:
043499 36 31       0167*      ld (hl),'1'
04349B             0168*  @next_bit:
04349B 23          0169*      inc hl
04349C 10 F4       0170*      djnz @loop
04349E             0171*  ; print it
04349E 21 A9 34 04 0172*  	ld hl,@cmd
0434A2 01 08 00 00 0173*  	ld bc,@end-@cmd
0434A6 5B DF       0174*  	rst.lil $18
0434A8 C9          0175*  	ret
0434A9             0176*  @cmd: ds 8 ; eight bytes for eight bits
0434B1             0177*  @end:
0434B1             0178*  
0434B1             0179*  ; print registers to screen in hexidecimal format
0434B1             0180*  ; inputs: none
0434B1             0181*  ; outputs: values of every register printed to screen
0434B1             0182*  ;    values of each register in global scratch memory
0434B1             0183*  ; destroys: nothing
0434B1             0184*  stepRegistersHex:
0434B1             0185*  ; store everything in scratch
0434B1 22 B4 36 04 0186*      ld (uhl),hl
0434B5 ED 43 B7 36 0187*      ld (ubc),bc
       04          
0434BA ED 53 BA 36 0188*      ld (ude),de
       04          
0434BF DD 22 BD 36 0189*      ld (uix),ix
       04          
0434C4 FD 22 C0 36 0190*      ld (uiy),iy
       04          
0434C9 F5          0191*      push af ; fml
0434CA E1          0192*      pop hl  ; thanks, zilog
0434CB 22 B1 36 04 0193*      ld (uaf),hl
0434CF F5          0194*      push af ; dammit
0434D0             0195*  
0434D0             0196*  ; home the cursor
0434D0 CD D2 2E 04 0197*      call vdu_home_cursor
0434D4             0198*  
0434D4             0199*  ; print each register
0434D4 21 3D 36 04 0200*      ld hl,str_afu
0434D8 CD AA 33 04 0201*      call printString
0434DC 2A B1 36 04 0202*      ld hl,(uaf)
0434E0 CD C8 33 04 0203*      call printHex24
0434E4 CD BF 33 04 0204*      call printNewLine
0434E8             0205*  
0434E8 21 41 36 04 0206*      ld hl,str_hlu
0434EC CD AA 33 04 0207*      call printString
0434F0 2A B4 36 04 0208*      ld hl,(uhl)
0434F4 CD C8 33 04 0209*      call printHex24
0434F8 CD BF 33 04 0210*      call printNewLine
0434FC             0211*  
0434FC 21 45 36 04 0212*      ld hl,str_bcu
043500 CD AA 33 04 0213*      call printString
043504 2A B7 36 04 0214*      ld hl,(ubc)
043508 CD C8 33 04 0215*      call printHex24
04350C CD BF 33 04 0216*      call printNewLine
043510             0217*  
043510 21 49 36 04 0218*      ld hl,str_deu
043514 CD AA 33 04 0219*      call printString
043518 2A BA 36 04 0220*      ld hl,(ude)
04351C CD C8 33 04 0221*      call printHex24
043520 CD BF 33 04 0222*      call printNewLine
043524             0223*  
043524 21 4D 36 04 0224*      ld hl,str_ixu
043528 CD AA 33 04 0225*      call printString
04352C 2A BD 36 04 0226*      ld hl,(uix)
043530 CD C8 33 04 0227*      call printHex24
043534 CD BF 33 04 0228*      call printNewLine
043538             0229*  
043538 21 51 36 04 0230*      ld hl,str_iyu
04353C CD AA 33 04 0231*      call printString
043540 2A C0 36 04 0232*      ld hl,(uiy)
043544 CD C8 33 04 0233*      call printHex24
043548 CD BF 33 04 0234*      call printNewLine
04354C             0235*  
04354C             0236*      ; call vsync
04354C             0237*  
04354C CD BF 33 04 0238*      call printNewLine
043550             0239*  
043550             0240*  ; check for right shift key and quit if pressed
043550             0241*  	MOSCALL mos_getkbmap
043550 3E 1E       0001*M 			LD	A, function
043552 5B CF       0002*M 			RST.LIL	08h
043554             0242*  @stayhere:
043554             0243*  ; 7 RightShift
043554 DD CB 00 76 0244*      bit 6,(ix+0)
043558 20 02       0245*      jr nz,@RightShift
04355A 18 F8       0246*      jr @stayhere
04355C             0247*  @RightShift:
04355C DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
043560 3E 80       0249*      ld a,%10000000
043562 CD 7C 41 04 0250*      call multiPurposeDelay
043566             0251*  
043566             0252*  ; restore everything
043566 2A B4 36 04 0253*      ld hl, (uhl)
04356A ED 4B B7 36 0254*      ld bc, (ubc)
       04          
04356F ED 5B BA 36 0255*      ld de, (ude)
       04          
043574 DD 2A BD 36 0256*      ld ix, (uix)
       04          
043579 FD 2A C0 36 0257*      ld iy, (uiy)
       04          
04357E F1          0258*      pop af
04357F             0259*  ; all done
04357F C9          0260*      ret
043580             0261*  
043580             0262*  ; print registers to screen in hexidecimal format
043580             0263*  ; inputs: none
043580             0264*  ; outputs: values of every register printed to screen
043580             0265*  ;    values of each register in global scratch memory
043580             0266*  ; destroys: nothing
043580             0267*  dumpRegistersHex:
043580             0268*  ; store everything in scratch
043580 22 B4 36 04 0269*      ld (uhl),hl
043584 ED 43 B7 36 0270*      ld (ubc),bc
       04          
043589 ED 53 BA 36 0271*      ld (ude),de
       04          
04358E DD 22 BD 36 0272*      ld (uix),ix
       04          
043593 FD 22 C0 36 0273*      ld (uiy),iy
       04          
043598 F5          0274*      push af ; fml
043599 E1          0275*      pop hl  ; thanks, zilog
04359A 22 B1 36 04 0276*      ld (uaf),hl
04359E F5          0277*      push af ; dammit
04359F             0278*  
04359F             0279*  ; home the cursor
04359F CD D2 2E 04 0280*      call vdu_home_cursor
0435A3             0281*  
0435A3             0282*  ; print each register
0435A3 21 3D 36 04 0283*      ld hl,str_afu
0435A7 CD AA 33 04 0284*      call printString
0435AB 2A B1 36 04 0285*      ld hl,(uaf)
0435AF CD C8 33 04 0286*      call printHex24
0435B3 CD BF 33 04 0287*      call printNewLine
0435B7             0288*  
0435B7 21 41 36 04 0289*      ld hl,str_hlu
0435BB CD AA 33 04 0290*      call printString
0435BF 2A B4 36 04 0291*      ld hl,(uhl)
0435C3 CD C8 33 04 0292*      call printHex24
0435C7 CD BF 33 04 0293*      call printNewLine
0435CB             0294*  
0435CB 21 45 36 04 0295*      ld hl,str_bcu
0435CF CD AA 33 04 0296*      call printString
0435D3 2A B7 36 04 0297*      ld hl,(ubc)
0435D7 CD C8 33 04 0298*      call printHex24
0435DB CD BF 33 04 0299*      call printNewLine
0435DF             0300*  
0435DF 21 49 36 04 0301*      ld hl,str_deu
0435E3 CD AA 33 04 0302*      call printString
0435E7 2A BA 36 04 0303*      ld hl,(ude)
0435EB CD C8 33 04 0304*      call printHex24
0435EF CD BF 33 04 0305*      call printNewLine
0435F3             0306*  
0435F3 21 4D 36 04 0307*      ld hl,str_ixu
0435F7 CD AA 33 04 0308*      call printString
0435FB 2A BD 36 04 0309*      ld hl,(uix)
0435FF CD C8 33 04 0310*      call printHex24
043603 CD BF 33 04 0311*      call printNewLine
043607             0312*  
043607 21 51 36 04 0313*      ld hl,str_iyu
04360B CD AA 33 04 0314*      call printString
04360F 2A C0 36 04 0315*      ld hl,(uiy)
043613 CD C8 33 04 0316*      call printHex24
043617 CD BF 33 04 0317*      call printNewLine
04361B             0318*  
04361B CD F4 2F 04 0319*      call vdu_vblank
04361F             0320*  
04361F CD BF 33 04 0321*      call printNewLine
043623             0322*  ; restore everything
043623 2A B4 36 04 0323*      ld hl, (uhl)
043627 ED 4B B7 36 0324*      ld bc, (ubc)
       04          
04362C ED 5B BA 36 0325*      ld de, (ude)
       04          
043631 DD 2A BD 36 0326*      ld ix, (uix)
       04          
043636 FD 2A C0 36 0327*      ld iy, (uiy)
       04          
04363B F1          0328*      pop af
04363C             0329*  ; all done
04363C C9          0330*      ret
04363D             0331*  
04363D 61 66 3D 00 0332*  str_afu: db "af=",0
043641 68 6C 3D 00 0333*  str_hlu: db "hl=",0
043645 62 63 3D 00 0334*  str_bcu: db "bc=",0
043649 64 65 3D 00 0335*  str_deu: db "de=",0
04364D 69 78 3D 00 0336*  str_ixu: db "ix=",0
043651 69 79 3D 00 0337*  str_iyu: db "iy=",0
043655             0338*  
043655             0339*  ; print udeuhl to screen in hexidecimal format
043655             0340*  ; inputs: none
043655             0341*  ; outputs: concatenated hexidecimal udeuhl
043655             0342*  ; destroys: nothing
043655             0343*  dumpUDEUHLHex:
043655             0344*  ; store everything in scratch
043655 22 B4 36 04 0345*      ld (uhl),hl
043659 ED 43 B7 36 0346*      ld (ubc),bc
       04          
04365E ED 53 BA 36 0347*      ld (ude),de
       04          
043663 DD 22 BD 36 0348*      ld (uix),ix
       04          
043668 FD 22 C0 36 0349*      ld (uiy),iy
       04          
04366D F5          0350*      push af
04366E             0351*  
04366E             0352*  ; print each register
04366E             0353*  
04366E 21 A8 36 04 0354*      ld hl,str_udeuhl
043672 CD AA 33 04 0355*      call printString
043676 2A BA 36 04 0356*      ld hl,(ude)
04367A CD C8 33 04 0357*      call printHex24
04367E 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
043680 5B D7       0359*  	rst.lil 10h
043682 2A B4 36 04 0360*      ld hl,(uhl)
043686 CD C8 33 04 0361*      call printHex24
04368A CD BF 33 04 0362*      call printNewLine
04368E             0363*  
04368E             0364*  ; restore everything
04368E 2A B4 36 04 0365*      ld hl, (uhl)
043692 ED 4B B7 36 0366*      ld bc, (ubc)
       04          
043697 ED 5B BA 36 0367*      ld de, (ude)
       04          
04369C DD 2A BD 36 0368*      ld ix, (uix)
       04          
0436A1 FD 2A C0 36 0369*      ld iy, (uiy)
       04          
0436A6 F1          0370*      pop af
0436A7             0371*  ; all done
0436A7 C9          0372*      ret
0436A8             0373*  
0436A8 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
0436B1             0375*  
0436B1             0376*  ; global scratch memory for registers
0436B1 00 00 00    0377*  uaf: dl 0
0436B4 00 00 00    0378*  uhl: dl 0
0436B7 00 00 00    0379*  ubc: dl 0
0436BA 00 00 00    0380*  ude: dl 0
0436BD 00 00 00    0381*  uix: dl 0
0436C0 00 00 00    0382*  uiy: dl 0
0436C3 00 00 00    0383*  usp: dl 0
0436C6 00 00 00    0384*  upc: dl 0
0436C9             0385*  
0436C9             0386*  ; inputs: whatever is in the flags register
0436C9             0387*  ; outputs: binary representation of flags
0436C9             0388*  ;          with a header so we know which is what
0436C9             0389*  ; destroys: nothing
0436C9             0390*  ; preserves: everything
0436C9             0391*  dumpFlags:
0436C9             0392*  ; first we curse zilog for not giving direct access to flags
0436C9 F5          0393*      push af ; this is so we can send it back unharmed
0436CA F5          0394*      push af ; this is so we can pop it to hl
0436CB             0395*  ; store everything in scratch
0436CB 22 B4 36 04 0396*      ld (uhl),hl
0436CF ED 43 B7 36 0397*      ld (ubc),bc
       04          
0436D4 ED 53 BA 36 0398*      ld (ude),de
       04          
0436D9 DD 22 BD 36 0399*      ld (uix),ix
       04          
0436DE FD 22 C0 36 0400*      ld (uiy),iy
       04          
0436E3             0401*  ; next we print the header
0436E3 21 0F 37 04 0402*      ld hl,@header
0436E7 CD AA 33 04 0403*      call printString
0436EB E1          0404*      pop hl ; flags are now in l
0436EC 7D          0405*      ld a,l ; flags are now in a
0436ED CD 67 34 04 0406*      call printBin8
0436F1 CD BF 33 04 0407*  	call printNewLine
0436F5             0408*  ; restore everything
0436F5 2A B4 36 04 0409*      ld hl, (uhl)
0436F9 ED 4B B7 36 0410*      ld bc, (ubc)
       04          
0436FE ED 5B BA 36 0411*      ld de, (ude)
       04          
043703 DD 2A BD 36 0412*      ld ix, (uix)
       04          
043708 FD 2A C0 36 0413*      ld iy, (uiy)
       04          
04370D F1          0414*      pop af ; send her home the way she came
04370E C9          0415*      ret
04370F             0416*  ; Bit 7 (S): Sign flag
04370F             0417*  ; Bit 6 (Z): Zero flag
04370F             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04370F             0419*  ; Bit 4 (H): Half Carry flag
04370F             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04370F             0421*  ; Bit 2 (PV): Parity/Overflow flag
04370F             0422*  ; Bit 1 (N): Subtract flag
04370F             0423*  ; Bit 0 (C): Carry flag
04370F 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04371A             0425*  
04371A             0426*  ; set all the bits in the flag register
04371A             0427*  ; more of an academic exercise than anything useful
04371A             0428*  ; inputs; none
04371A             0429*  ; outputs; a=0,f=255
04371A             0430*  ; destroys: flags, hl
04371A             0431*  ; preserves: a, because why not
04371A             0432*  setAllFlags:
04371A 21 FF 00 00 0433*      ld hl,255
04371E 67          0434*      ld h,a ; four cycles to preserve a is cheap
04371F E5          0435*      push hl
043720 F1          0436*      pop af
043721 C9          0437*      ret
043722             0438*  
043722             0439*  ; reset all the bits in the flag register
043722             0440*  ; unlike its inverse counterpart, this may actually be useful
043722             0441*  ; inputs; none
043722             0442*  ; outputs; a=0,f=0
043722             0443*  ; destroys: flags, hl
043722             0444*  ; preserves: a, because why not
043722             0445*  resetAllFlags:
043722 21 00 00 00 0446*      ld hl,0
043726 67          0447*      ld h,a ; four cycles to preserve a is cheap
043727 E5          0448*      push hl
043728 F1          0449*      pop af
043729 C9          0450*      ret
04372A             0451*  
04372A             0452*  ; wait until user presses a key
04372A             0453*  ; inputs: none
04372A             0454*  ; outputs: none
04372A             0455*  ; destroys: af,ix
04372A             0456*  waitKeypress:
04372A             0457*      MOSCALL mos_sysvars
04372A 3E 08       0001*M 			LD	A, function
04372C 5B CF       0002*M 			RST.LIL	08h
04372E AF          0458*      xor a ; zero out any prior keypresses
04372F DD 77 05    0459*      ld (ix+sysvar_keyascii),a
043732             0460*  @loop:
043732 DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
043735 A7          0462*      and a
043736 C0          0463*      ret nz
043737 18 F9       0464*      jr @loop
043739             0465*  
043739             0466*  
043739             0467*  ; print bytes from an address to the screen in hexidecimal format
043739             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
043739             0469*  ; outputs: values of each byte printed to screen separated by spaces
043739             0470*  ; destroys: nothing
043739             0471*  dumpMemoryHex:
043739             0472*  ; save all registers to the stack
043739 F5          0473*      push af
04373A C5          0474*      push bc
04373B D5          0475*      push de
04373C E5          0476*      push hl
04373D DD E5       0477*      push ix
04373F FD E5       0478*      push iy
043741             0479*  
043741             0480*  ; set b to be our loop counter
043741 47          0481*      ld b,a
043742             0482*  @loop:
043742             0483*  ; print the byte
043742 7E          0484*      ld a,(hl)
043743 CD DA 33 04 0485*      call printHex8
043747             0486*  ; print a space
043747 3E 20       0487*      ld a,' '
043749 5B D7       0488*      rst.lil 10h
04374B 23          0489*      inc hl
04374C 10 F4       0490*      djnz @loop
04374E CD BF 33 04 0491*      call printNewLine
043752             0492*  
043752             0493*  ; restore everything
043752 FD E1       0494*      pop iy
043754 DD E1       0495*      pop ix
043756 E1          0496*      pop hl
043757 D1          0497*      pop de
043758 C1          0498*      pop bc
043759 F1          0499*      pop af
04375A             0500*  ; all done
04375A C9          0501*      ret
04375B             0502*  
04375B             0503*  
04375B             0504*  ; print bytes from an address to the screen in binary format
04375B             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04375B             0506*  ; outputs: values of each byte printed to screen separated by spaces
04375B             0507*  ; destroys: nothing
04375B             0508*  dumpMemoryBin:
04375B             0509*  ; save all registers to the stack
04375B F5          0510*      push af
04375C C5          0511*      push bc
04375D D5          0512*      push de
04375E E5          0513*      push hl
04375F DD E5       0514*      push ix
043761 FD E5       0515*      push iy
043763             0516*  
043763             0517*  ; set b to be our loop counter
043763 47          0518*      ld b,a
043764             0519*  @loop:
043764             0520*  ; print the byte
043764 7E          0521*      ld a,(hl)
043765 E5          0522*      push hl
043766 C5          0523*      push bc
043767 CD 67 34 04 0524*      call printBin8
04376B C1          0525*      pop bc
04376C             0526*  ; print a space
04376C 3E 20       0527*      ld a,' '
04376E 5B D7       0528*      rst.lil 10h
043770 E1          0529*      pop hl
043771 23          0530*      inc hl
043772 10 F0       0531*      djnz @loop
043774 CD BF 33 04 0532*      call printNewLine
043778             0533*  
043778             0534*  ; restore everything
043778 FD E1       0535*      pop iy
04377A DD E1       0536*      pop ix
04377C E1          0537*      pop hl
04377D D1          0538*      pop de
04377E C1          0539*      pop bc
04377F F1          0540*      pop af
043780             0541*  ; all done
043780 C9          0542*      ret
043781             0543*  
043781             0544*  ; print bytes from an address to the screen in binary format
043781             0545*  ; with the bits of each byte in reverse order (lsb first)
043781             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
043781             0547*  ; outputs: values of each byte printed to screen separated by spaces
043781             0548*  ; destroys: nothing
043781             0549*  dumpMemoryBinRev:
043781             0550*  ; save all registers to the stack
043781 F5          0551*      push af
043782 C5          0552*      push bc
043783 D5          0553*      push de
043784 E5          0554*      push hl
043785 DD E5       0555*      push ix
043787 FD E5       0556*      push iy
043789             0557*  
043789             0558*  ; set b to be our loop counter
043789 47          0559*      ld b,a
04378A             0560*  @loop:
04378A             0561*  ; print the byte
04378A 7E          0562*      ld a,(hl)
04378B E5          0563*      push hl
04378C C5          0564*      push bc
04378D CD 8C 34 04 0565*      call printBin8Rev
043791 C1          0566*      pop bc
043792             0567*  ; print a space
043792 3E 20       0568*      ld a,' '
043794 5B D7       0569*      rst.lil 10h
043796 E1          0570*      pop hl
043797 23          0571*      inc hl
043798 10 F0       0572*      djnz @loop
04379A CD BF 33 04 0573*      call printNewLine
04379E             0574*  
04379E             0575*  ; restore everything
04379E FD E1       0576*      pop iy
0437A0 DD E1       0577*      pop ix
0437A2 E1          0578*      pop hl
0437A3 D1          0579*      pop de
0437A4 C1          0580*      pop bc
0437A5 F1          0581*      pop af
0437A6             0582*  ; all done
0437A6 C9          0583*      ret
0437A7             0025   	; include "src/asm/player.inc"
0437A7             0026   	include "src/asm/maths.inc"
0437A7 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
0437AB 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
0437AF             0003*  
0437AF             0004*  ; set bcd values in a scratch memory address from registers bcde
0437AF             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
0437AF             0006*  ; destroys ; hl
0437AF             0007*  set_bcd:
0437AF 73          0008*      ld (hl),e
0437B0 23          0009*      inc hl
0437B1 72          0010*      ld (hl),d
0437B2 23          0011*      inc hl
0437B3 71          0012*      ld (hl),c
0437B4 23          0013*      inc hl
0437B5 70          0014*      ld (hl),b
0437B6 C9          0015*      ret
0437B7             0016*  
0437B7             0017*  ; load bcd values from a scratch memory address to bcde
0437B7             0018*  ; input: hl; scratch address
0437B7             0019*  ; output: bcde; 8-place bcd number
0437B7             0020*  ; destroys: hl
0437B7             0021*  get_bcd:
0437B7 5E          0022*      ld e,(hl)
0437B8 23          0023*      inc hl
0437B9 56          0024*      ld d,(hl)
0437BA 23          0025*      inc hl
0437BB 4E          0026*      ld c,(hl)
0437BC 23          0027*      inc hl
0437BD 46          0028*      ld b,(hl)
0437BE C9          0029*      ret
0437BF             0030*  
0437BF             0031*  ; BCD addition
0437BF             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0437BF             0033*  ;       a is the number of bytes holding each number (number of places/2)
0437BF             0034*  ; outputs: (hl) + (de) --> (hl)
0437BF             0035*  ; destroys: a,b,de,hl
0437BF             0036*  add_bcd:
0437BF 47          0037*      ld b,a ; loop counter
0437C0 AF          0038*      xor a ; reset a, clear carry flag
0437C1             0039*  adcec:
0437C1 1A          0040*      ld a,(de) ; addend to acc
0437C2 8E          0041*      adc a,(hl) ; add (hl) to acc
0437C3 27          0042*      daa ; adjust result to bcd
0437C4 77          0043*      ld (hl),a ; store result
0437C5 23          0044*      inc hl ; advance memory pointers
0437C6 13          0045*      inc de
0437C7 10 F8       0046*      djnz adcec ; loop until b == 0
0437C9 C9          0047*      ret
0437CA             0048*  
0437CA             0049*  ; BCD subtraction
0437CA             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
0437CA             0051*  ;       a is the number of bytes holding each number (number of places/2)
0437CA             0052*  ; outputs: (hl) - (de) --> (hl)
0437CA             0053*  ; destroys: a,b,de,hl
0437CA             0054*  sub_bcd:
0437CA 47          0055*      ld b,a ; loop counter
0437CB AF          0056*      xor a ; reset a,clear carry flag
0437CC             0057*  subdec:
0437CC 1A          0058*      ld a,(de) ; subtrahend to acc
0437CD 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
0437CE 27          0060*      daa ; adjust result to bcd
0437CF 77          0061*      ld (hl),a ; store result
0437D0 23          0062*      inc hl ; advance memory pointers
0437D1 13          0063*      inc de
0437D2 10 F8       0064*      djnz subdec ; loop until b == 0
0437D4 C9          0065*      ret
0437D5             0066*  
0437D5             0067*  ; http://www.z80.info/pseudo-random.txt
0437D5             0068*  rand_8:
0437D5 C5          0069*      push bc
0437D6 3A E9 37 04 0070*      ld a,(r_seed)
0437DA 4F          0071*      ld c,a
0437DB             0072*  
0437DB 0F          0073*      rrca ; multiply by 32
0437DC 0F          0074*      rrca
0437DD 0F          0075*      rrca
0437DE EE 1F       0076*      xor 0x1f
0437E0             0077*  
0437E0 81          0078*      add a,c
0437E1 DE FF       0079*      sbc a,255 ; carry
0437E3             0080*  
0437E3 32 E9 37 04 0081*      ld (r_seed),a
0437E7 C1          0082*      pop bc
0437E8 C9          0083*      ret
0437E9 50          0084*  r_seed: defb $50
0437EA             0027   	include "src/asm/img_load.inc"
0437EA 00 00 00    0001*  cur_file_idx: dl 0
0437ED 00 00 00    0002*  cur_filename: dl 0
0437F0 00 00 00    0003*  cur_buffer_id: dl 0
0437F3 00 00 00    0004*  cur_buffer_id_lut: dl 0
0437F6 00 00 00    0005*  cur_load_jump_table: dl 0
0437F9             0006*  
0437F9             0007*  img_load_init:
0437F9             0008*  ; initialize bj's position parameters
0437F9 21 00 00 00 0009*  	ld hl,0
0437FD 22 47 39 04 0010*  	ld (bj_yvel),hl
043801             0011*  
043801 21 2D 00 00 0012*      ld hl,45
043805 22 4A 39 04 0013*  	ld (bj_y_cur),hl
043809 22 4D 39 04 0014*  	ld (bj_y_min),hl
04380D 22 50 39 04 0015*      ld (bj_y_max),hl
043811             0016*  
043811 21 01 00 00 0017*  	ld hl,1
043815 22 3B 39 04 0018*  	ld (bj_xvel),hl
043819             0019*  
043819 21 0A 00 00 0020*  	ld hl,10
04381D 22 3E 39 04 0021*  	ld (bj_x_cur),hl
043821 22 41 39 04 0022*  	ld (bj_x_min),hl
043825             0023*  
043825 21 C8 00 00 0024*  	ld hl,320-120
043829 22 44 39 04 0025*  	ld (bj_x_max),hl
04382D             0026*  
04382D C9          0027*      ret
04382E             0028*  
04382E             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04382E             0030*  img_load_main:
04382E 21 00 00 00 0031*      ld hl,0
043832 22 EA 37 04 0032*      ld (cur_file_idx),hl
043836             0033*  img_load_main_loop:
043836             0034*  ; back up loop counter
043836 C5          0035*      push bc
043837             0036*  ; load the next panel
043837 CD 9F 38 04 0037*      call load_next_panel
04383B             0038*  ; draw all the things
04383B CD 53 39 04 0039*      call tmp_draw_all_the_things
04383F             0040*  ; draw the most recently loaded panel
04383F 2A F0 37 04 0041*  	ld hl,(cur_buffer_id)
043843 CD 03 2F 04 0042*  	call vdu_buff_select
043847 01 00 00 00 0043*  	ld bc,0
04384B 11 00 00 00 0044*  	ld de,0
04384F CD D4 30 04 0045*  	call vdu_plot_bmp
043853             0046*  ; move bj
043853 CD DB 38 04 0047*  	call move_bj
043857             0048*  ; print welcome message
043857 DD 21 B9 09 0049*  	ld ix,font_itc_honda
       04          
04385C 21 B7 41 04 0050*  	ld hl,hello_world
043860 01 20 00 00 0051*  	ld bc,32
043864 11 02 00 00 0052*  	ld de,2
043868 CD A4 09 04 0053*  	call font_bmp_print
04386C             0054*  ; print current filename
04386C CD 9A 2D 04 0055*  	call vdu_cls
043870 2A ED 37 04 0056*  	ld hl,(cur_filename)
043874 CD AA 33 04 0057*  	call printString
043878 CD BF 33 04 0058*  	call printNewLine
04387C             0059*  
04387C             0060*  ; print current load stopwatch
04387C 21 D9 41 04 0061*  	ld hl,loading_time
043880 CD AA 33 04 0062*  	call printString
043884 CD 69 41 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
043888 CD F8 33 04 0064*  	call printDec
04388C             0065*  
04388C             0066*  ; flip screen
04388C CD 69 2F 04 0067*      call vdu_flip
043890             0068*  ; decrement loop counter
043890 C1          0069*      pop bc
043891 0B          0070*  	dec bc
043892             0071*  ; ; DEBUG: DUMP REGISTERS
043892             0072*  ; 	push bc
043892             0073*  ; 	call dumpRegistersHex
043892             0074*  ; 	call vdu_flip
043892             0075*  ; 	pop bc
043892             0076*  ; ; END DEBUG
043892 79          0077*      ld a,c
043893 B7          0078*      or a
043894 C2 36 38 04 0079*      jp nz,img_load_main_loop
043898 78          0080*      ld a,b
043899 B7          0081*      or a
04389A C2 36 38 04 0082*      jp nz,img_load_main_loop
04389E C9          0083*      ret
04389F             0084*  
04389F             0085*  load_next_panel:
04389F             0086*  ; look up the load routine for the current file index
04389F 2A EA 37 04 0087*  	ld hl,(cur_file_idx)
0438A3 29          0088*  	add hl,hl ; multiply current index by 2 ...
0438A4 ED 5B EA 37 0089*  	ld de,(cur_file_idx)
       04          
0438A9 19          0090*  	add hl,de ; ... now by 3
0438AA ED 5B F6 37 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
0438AF 19          0092*  	add hl,de
0438B0 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
0438B2 22 B7 38 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
0438B6             0095*  @jump_addr:
0438B6 CD 00 00 00 0096*  	call 0 ; call the panel load routine
0438BA             0097*  ; look up the buffer id for the current file
0438BA 2A EA 37 04 0098*  	ld hl,(cur_file_idx)
0438BE 29          0099*  	add hl,hl ; multiply current index by 2 ...
0438BF ED 5B EA 37 0100*  	ld de,(cur_file_idx)
       04          
0438C4 19          0101*  	add hl,de ; ... now by 3
0438C5 ED 5B F3 37 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
0438CA 19          0103*  	add hl,de
0438CB ED 27       0104*  	ld hl,(hl)
0438CD 22 F0 37 04 0105*  	ld (cur_buffer_id),hl
0438D1             0106*  ; bump the current file index
0438D1 2A EA 37 04 0107*  	ld hl,(cur_file_idx)
0438D5 23          0108*  	inc hl
0438D6 22 EA 37 04 0109*  	ld (cur_file_idx),hl
0438DA C9          0110*  	ret
0438DB             0111*  
0438DB             0112*  move_bj:
0438DB             0113*  ; activate bj bitmap
0438DB 21 04 03 00 0114*  	ld hl, BUF_UI_BJ_120_120
0438DF CD 03 2F 04 0115*  	call vdu_buff_select
0438E3             0116*  ; update position based on velocity parameters
0438E3 2A 3E 39 04 0117*  	ld hl, (bj_x_cur)
0438E7 ED 5B 3B 39 0118*  	ld de, (bj_xvel)
       04          
0438EC 19          0119*  	add hl, de
0438ED 22 3E 39 04 0120*  	ld (bj_x_cur), hl
0438F1 EB          0121*  	ex de,hl ; store x_cur in de
0438F2             0122*  ; check if we're < x_min
0438F2 2A 41 39 04 0123*  	ld hl,(bj_x_min)
0438F6 AF          0124*  	xor a ; clear carry
0438F7 ED 52       0125*  	sbc hl,de ; x_min - x_cur
0438F9 F2 17 39 04 0126*  	jp p, move_bj_x_min
0438FD             0127*  ; check if we're > x_max
0438FD 2A 44 39 04 0128*  	ld hl,(bj_x_max)
043901 AF          0129*  	xor a ; clear carry
043902 ED 52       0130*  	sbc hl,de ; x_max - x_cur
043904 FA 29 39 04 0131*  	jp m, move_bj_x_max
043908             0132*  ; if not at either boundary, fall through to draw bj's
043908             0133*  draw_bj:
043908 ED 4B 3E 39 0134*  	ld bc,(bj_x_cur)
       04          
04390D ED 5B 4A 39 0135*  	ld de,(bj_y_cur)
       04          
043912 CD D4 30 04 0136*  	call vdu_plot_bmp
043916 C9          0137*  	ret
043917             0138*  move_bj_x_min:
043917 21 01 00 00 0139*  	ld hl,1
04391B 22 3B 39 04 0140*  	ld (bj_xvel),hl
04391F 2A 41 39 04 0141*  	ld hl,(bj_x_min)
043923 22 3E 39 04 0142*  	ld (bj_x_cur),hl
043927 18 DF       0143*  	jr draw_bj
043929             0144*  move_bj_x_max:
043929 21 FF FF FF 0145*  	ld hl,-1
04392D 22 3B 39 04 0146*  	ld (bj_xvel),hl
043931 2A 44 39 04 0147*  	ld hl,(bj_x_max)
043935 22 3E 39 04 0148*  	ld (bj_x_cur),hl
043939 18 CD       0149*  	jr draw_bj
04393B 00 00 00    0150*  bj_xvel: dl 0
04393E 00 00 00    0151*  bj_x_cur: dl 0
043941 00 00 00    0152*  bj_x_min: dl 0
043944 00 00 00    0153*  bj_x_max: dl 0
043947             0154*  
043947 00 00 00    0155*  bj_yvel: dl 0
04394A 00 00 00    0156*  bj_y_cur: dl 0
04394D 00 00 00    0157*  bj_y_min: dl 0
043950 00 00 00    0158*  bj_y_max: dl 0
043953             0159*  
043953             0160*  tmp_draw_all_the_things:
043953 21 0A 03 00 0161*      ld hl,BUF_UI_SPLASH
043957 CD 03 2F 04 0162*      call vdu_buff_select
04395B 01 00 00 00 0163*      ld bc,0
04395F 11 00 00 00 0164*      ld de,0
043963 CD D4 30 04 0165*      call vdu_plot_bmp
043967 C9          0166*  	ret
043968             0167*  
043968             0168*  ; load an rgba2222 image file to a buffer
043968             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
043968             0170*  vdu_load_img_2:
043968             0171*  ; back up image dimension parameters
043968 C5          0172*  	push bc
043969 D5          0173*  	push de
04396A             0174*  ; load the image
04396A CD A8 43 04 0175*  	call vdu_load_buffer_from_file
04396E             0176*  ; now make it a bitmap
04396E D1          0177*  	pop de
04396F C1          0178*  	pop bc
043970 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
043972 C3 18 2F 04 0180*  	jp vdu_bmp_create ; will return to caller from there
043976             0181*  
043976             0182*  ; load an rgba8888 image file to a buffer
043976             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
043976             0184*  vdu_load_img_8:
043976             0185*  ; back up image dimension parameters
043976 C5          0186*  	push bc
043977 D5          0187*  	push de
043978             0188*  ; load the image
043978 CD A8 43 04 0189*  	call vdu_load_buffer_from_file
04397C             0190*  ; now make it a bitmap
04397C D1          0191*  	pop de
04397D C1          0192*  	pop bc
04397E 3E 00       0193*  	ld a,0 ; the magic number for rgba8888
043980 C3 18 2F 04 0194*  	jp vdu_bmp_create ; will return to caller from there
043984             0028   	include "src/asm/sfx.inc"
043984             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
043984             0002*  
043984             0003*  SFX_num_buffers: equ 22
043984             0004*  ; SFX buffer ids:
043984             0005*  BUF_ACHTUNG: equ 0x0500
043984             0006*  BUF_AHH: equ 0x0501
043984             0007*  BUF_AUGH: equ 0x0502
043984             0008*  BUF_AYEE: equ 0x0503
043984             0009*  BUF_AYEE_HIGH: equ 0x0504
043984             0010*  BUF_DOG_WOOF_DOUBLE: equ 0x0505
043984             0011*  BUF_DOG_WOOF_SINGLE: equ 0x0506
043984             0012*  BUF_DOG_YELP: equ 0x0507
043984             0013*  BUF_EXPLODE: equ 0x0508
043984             0014*  BUF_GOT_TREASURE: equ 0x0509
043984             0015*  BUF_GUN_EMPTY: equ 0x050A
043984             0016*  BUF_GUN_RELOAD: equ 0x050B
043984             0017*  BUF_KNIFE: equ 0x050C
043984             0018*  BUF_MEIN_LEBEN: equ 0x050D
043984             0019*  BUF_OOF: equ 0x050E
043984             0020*  BUF_SCHUSSTAFFEL: equ 0x050F
043984             0021*  BUF_SCREAM: equ 0x0510
043984             0022*  BUF_SHOT_GATLING_BURST: equ 0x0511
043984             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0x0512
043984             0024*  BUF_SHOT_PISTOL: equ 0x0513
043984             0025*  BUF_UGH: equ 0x0514
043984             0026*  BUF_WILHELM: equ 0x0515
043984             0027*  
043984             0028*  ; SFX buffer id reverse lookup:
043984             0029*  SFX_buffer_id_lut:
043984 00 05 00    0030*  	dl BUF_ACHTUNG
043987 01 05 00    0031*  	dl BUF_AHH
04398A 02 05 00    0032*  	dl BUF_AUGH
04398D 03 05 00    0033*  	dl BUF_AYEE
043990 04 05 00    0034*  	dl BUF_AYEE_HIGH
043993 05 05 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
043996 06 05 00    0036*  	dl BUF_DOG_WOOF_SINGLE
043999 07 05 00    0037*  	dl BUF_DOG_YELP
04399C 08 05 00    0038*  	dl BUF_EXPLODE
04399F 09 05 00    0039*  	dl BUF_GOT_TREASURE
0439A2 0A 05 00    0040*  	dl BUF_GUN_EMPTY
0439A5 0B 05 00    0041*  	dl BUF_GUN_RELOAD
0439A8 0C 05 00    0042*  	dl BUF_KNIFE
0439AB 0D 05 00    0043*  	dl BUF_MEIN_LEBEN
0439AE 0E 05 00    0044*  	dl BUF_OOF
0439B1 0F 05 00    0045*  	dl BUF_SCHUSSTAFFEL
0439B4 10 05 00    0046*  	dl BUF_SCREAM
0439B7 11 05 00    0047*  	dl BUF_SHOT_GATLING_BURST
0439BA 12 05 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
0439BD 13 05 00    0049*  	dl BUF_SHOT_PISTOL
0439C0 14 05 00    0050*  	dl BUF_UGH
0439C3 15 05 00    0051*  	dl BUF_WILHELM
0439C6             0052*  
0439C6             0053*  ; SFX duration lookup:
0439C6             0054*  SFX_duration_lut:
0439C6 58 03       0055*  	dw 856 ; ACHTUNG
0439C8 91 01       0056*  	dw 401 ; AHH
0439CA FC 02       0057*  	dw 764 ; AUGH
0439CC E6 01       0058*  	dw 486 ; AYEE
0439CE 40 04       0059*  	dw 1088 ; AYEE_HIGH
0439D0 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
0439D2 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
0439D4 B0 01       0062*  	dw 432 ; DOG_YELP
0439D6 13 05       0063*  	dw 1299 ; EXPLODE
0439D8 A7 05       0064*  	dw 1447 ; GOT_TREASURE
0439DA 24 01       0065*  	dw 292 ; GUN_EMPTY
0439DC BA 01       0066*  	dw 442 ; GUN_RELOAD
0439DE F2 00       0067*  	dw 242 ; KNIFE
0439E0 2E 03       0068*  	dw 814 ; MEIN_LEBEN
0439E2 CE 03       0069*  	dw 974 ; OOF
0439E4 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
0439E6 E0 02       0071*  	dw 736 ; SCREAM
0439E8 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
0439EA F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
0439EC 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
0439EE 77 01       0075*  	dw 375 ; UGH
0439F0 FD 04       0076*  	dw 1277 ; WILHELM
0439F2             0077*  
0439F2             0078*  ; SFX load routines jump table:
0439F2             0079*  SFX_load_routines_table:
0439F2 34 3A 04    0080*  	dl load_sfx_ACHTUNG
0439F5 56 3A 04    0081*  	dl load_sfx_AHH
0439F8 78 3A 04    0082*  	dl load_sfx_AUGH
0439FB 9A 3A 04    0083*  	dl load_sfx_AYEE
0439FE BC 3A 04    0084*  	dl load_sfx_AYEE_HIGH
043A01 DE 3A 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
043A04 00 3B 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
043A07 22 3B 04    0087*  	dl load_sfx_DOG_YELP
043A0A 44 3B 04    0088*  	dl load_sfx_EXPLODE
043A0D 66 3B 04    0089*  	dl load_sfx_GOT_TREASURE
043A10 88 3B 04    0090*  	dl load_sfx_GUN_EMPTY
043A13 AA 3B 04    0091*  	dl load_sfx_GUN_RELOAD
043A16 CC 3B 04    0092*  	dl load_sfx_KNIFE
043A19 EE 3B 04    0093*  	dl load_sfx_MEIN_LEBEN
043A1C 10 3C 04    0094*  	dl load_sfx_OOF
043A1F 32 3C 04    0095*  	dl load_sfx_SCHUSSTAFFEL
043A22 54 3C 04    0096*  	dl load_sfx_SCREAM
043A25 76 3C 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
043A28 98 3C 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
043A2B BA 3C 04    0099*  	dl load_sfx_SHOT_PISTOL
043A2E DC 3C 04    0100*  	dl load_sfx_UGH
043A31 FE 3C 04    0101*  	dl load_sfx_WILHELM
043A34             0102*  
043A34             0103*  ; Import sfx .raw files and load them into VDP buffers
043A34             0104*  
043A34             0105*  load_sfx_ACHTUNG:
043A34 21 20 3D 04 0106*  	ld hl,FACHTUNG
043A38 22 ED 37 04 0107*  	ld (cur_filename),hl
043A3C 11 F5 43 04 0108*  	ld de,filedata
043A40 01 00 00 01 0109*  	ld bc,65536
043A44 3E 01       0110*  	ld a,mos_load
043A46 5B CF       0111*  	RST.LIL 08h
043A48 21 00 05 00 0112*  	ld hl,BUF_ACHTUNG
043A4C DD 21 3A 38 0113*  	ld ix,14394
       00          
043A51 CD 8D 33 04 0114*  	call vdu_load_sfx
043A55 C9          0115*  	ret
043A56             0116*  
043A56             0117*  load_sfx_AHH:
043A56 21 30 3D 04 0118*  	ld hl,FAHH
043A5A 22 ED 37 04 0119*  	ld (cur_filename),hl
043A5E 11 F5 43 04 0120*  	ld de,filedata
043A62 01 00 00 01 0121*  	ld bc,65536
043A66 3E 01       0122*  	ld a,mos_load
043A68 5B CF       0123*  	RST.LIL 08h
043A6A 21 01 05 00 0124*  	ld hl,BUF_AHH
043A6E DD 21 63 1A 0125*  	ld ix,6755
       00          
043A73 CD 8D 33 04 0126*  	call vdu_load_sfx
043A77 C9          0127*  	ret
043A78             0128*  
043A78             0129*  load_sfx_AUGH:
043A78 21 3C 3D 04 0130*  	ld hl,FAUGH
043A7C 22 ED 37 04 0131*  	ld (cur_filename),hl
043A80 11 F5 43 04 0132*  	ld de,filedata
043A84 01 00 00 01 0133*  	ld bc,65536
043A88 3E 01       0134*  	ld a,mos_load
043A8A 5B CF       0135*  	RST.LIL 08h
043A8C 21 02 05 00 0136*  	ld hl,BUF_AUGH
043A90 DD 21 39 32 0137*  	ld ix,12857
       00          
043A95 CD 8D 33 04 0138*  	call vdu_load_sfx
043A99 C9          0139*  	ret
043A9A             0140*  
043A9A             0141*  load_sfx_AYEE:
043A9A 21 49 3D 04 0142*  	ld hl,FAYEE
043A9E 22 ED 37 04 0143*  	ld (cur_filename),hl
043AA2 11 F5 43 04 0144*  	ld de,filedata
043AA6 01 00 00 01 0145*  	ld bc,65536
043AAA 3E 01       0146*  	ld a,mos_load
043AAC 5B CF       0147*  	RST.LIL 08h
043AAE 21 03 05 00 0148*  	ld hl,BUF_AYEE
043AB2 DD 21 00 20 0149*  	ld ix,8192
       00          
043AB7 CD 8D 33 04 0150*  	call vdu_load_sfx
043ABB C9          0151*  	ret
043ABC             0152*  
043ABC             0153*  load_sfx_AYEE_HIGH:
043ABC 21 56 3D 04 0154*  	ld hl,FAYEE_HIGH
043AC0 22 ED 37 04 0155*  	ld (cur_filename),hl
043AC4 11 F5 43 04 0156*  	ld de,filedata
043AC8 01 00 00 01 0157*  	ld bc,65536
043ACC 3E 01       0158*  	ld a,mos_load
043ACE 5B CF       0159*  	RST.LIL 08h
043AD0 21 04 05 00 0160*  	ld hl,BUF_AYEE_HIGH
043AD4 DD 21 77 47 0161*  	ld ix,18295
       00          
043AD9 CD 8D 33 04 0162*  	call vdu_load_sfx
043ADD C9          0163*  	ret
043ADE             0164*  
043ADE             0165*  load_sfx_DOG_WOOF_DOUBLE:
043ADE 21 68 3D 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
043AE2 22 ED 37 04 0167*  	ld (cur_filename),hl
043AE6 11 F5 43 04 0168*  	ld de,filedata
043AEA 01 00 00 01 0169*  	ld bc,65536
043AEE 3E 01       0170*  	ld a,mos_load
043AF0 5B CF       0171*  	RST.LIL 08h
043AF2 21 05 05 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
043AF6 DD 21 24 28 0173*  	ld ix,10276
       00          
043AFB CD 8D 33 04 0174*  	call vdu_load_sfx
043AFF C9          0175*  	ret
043B00             0176*  
043B00             0177*  load_sfx_DOG_WOOF_SINGLE:
043B00 21 80 3D 04 0178*  	ld hl,FDOG_WOOF_SINGLE
043B04 22 ED 37 04 0179*  	ld (cur_filename),hl
043B08 11 F5 43 04 0180*  	ld de,filedata
043B0C 01 00 00 01 0181*  	ld bc,65536
043B10 3E 01       0182*  	ld a,mos_load
043B12 5B CF       0183*  	RST.LIL 08h
043B14 21 06 05 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
043B18 DD 21 10 23 0185*  	ld ix,8976
       00          
043B1D CD 8D 33 04 0186*  	call vdu_load_sfx
043B21 C9          0187*  	ret
043B22             0188*  
043B22             0189*  load_sfx_DOG_YELP:
043B22 21 98 3D 04 0190*  	ld hl,FDOG_YELP
043B26 22 ED 37 04 0191*  	ld (cur_filename),hl
043B2A 11 F5 43 04 0192*  	ld de,filedata
043B2E 01 00 00 01 0193*  	ld bc,65536
043B32 3E 01       0194*  	ld a,mos_load
043B34 5B CF       0195*  	RST.LIL 08h
043B36 21 07 05 00 0196*  	ld hl,BUF_DOG_YELP
043B3A DD 21 60 1C 0197*  	ld ix,7264
       00          
043B3F CD 8D 33 04 0198*  	call vdu_load_sfx
043B43 C9          0199*  	ret
043B44             0200*  
043B44             0201*  load_sfx_EXPLODE:
043B44 21 A9 3D 04 0202*  	ld hl,FEXPLODE
043B48 22 ED 37 04 0203*  	ld (cur_filename),hl
043B4C 11 F5 43 04 0204*  	ld de,filedata
043B50 01 00 00 01 0205*  	ld bc,65536
043B54 3E 01       0206*  	ld a,mos_load
043B56 5B CF       0207*  	RST.LIL 08h
043B58 21 08 05 00 0208*  	ld hl,BUF_EXPLODE
043B5C DD 21 48 55 0209*  	ld ix,21832
       00          
043B61 CD 8D 33 04 0210*  	call vdu_load_sfx
043B65 C9          0211*  	ret
043B66             0212*  
043B66             0213*  load_sfx_GOT_TREASURE:
043B66 21 B9 3D 04 0214*  	ld hl,FGOT_TREASURE
043B6A 22 ED 37 04 0215*  	ld (cur_filename),hl
043B6E 11 F5 43 04 0216*  	ld de,filedata
043B72 01 00 00 01 0217*  	ld bc,65536
043B76 3E 01       0218*  	ld a,mos_load
043B78 5B CF       0219*  	RST.LIL 08h
043B7A 21 09 05 00 0220*  	ld hl,BUF_GOT_TREASURE
043B7E DD 21 07 5F 0221*  	ld ix,24327
       00          
043B83 CD 8D 33 04 0222*  	call vdu_load_sfx
043B87 C9          0223*  	ret
043B88             0224*  
043B88             0225*  load_sfx_GUN_EMPTY:
043B88 21 CE 3D 04 0226*  	ld hl,FGUN_EMPTY
043B8C 22 ED 37 04 0227*  	ld (cur_filename),hl
043B90 11 F5 43 04 0228*  	ld de,filedata
043B94 01 00 00 01 0229*  	ld bc,65536
043B98 3E 01       0230*  	ld a,mos_load
043B9A 5B CF       0231*  	RST.LIL 08h
043B9C 21 0A 05 00 0232*  	ld hl,BUF_GUN_EMPTY
043BA0 DD 21 3F 13 0233*  	ld ix,4927
       00          
043BA5 CD 8D 33 04 0234*  	call vdu_load_sfx
043BA9 C9          0235*  	ret
043BAA             0236*  
043BAA             0237*  load_sfx_GUN_RELOAD:
043BAA 21 E0 3D 04 0238*  	ld hl,FGUN_RELOAD
043BAE 22 ED 37 04 0239*  	ld (cur_filename),hl
043BB2 11 F5 43 04 0240*  	ld de,filedata
043BB6 01 00 00 01 0241*  	ld bc,65536
043BBA 3E 01       0242*  	ld a,mos_load
043BBC 5B CF       0243*  	RST.LIL 08h
043BBE 21 0B 05 00 0244*  	ld hl,BUF_GUN_RELOAD
043BC2 DD 21 0F 1D 0245*  	ld ix,7439
       00          
043BC7 CD 8D 33 04 0246*  	call vdu_load_sfx
043BCB C9          0247*  	ret
043BCC             0248*  
043BCC             0249*  load_sfx_KNIFE:
043BCC 21 F3 3D 04 0250*  	ld hl,FKNIFE
043BD0 22 ED 37 04 0251*  	ld (cur_filename),hl
043BD4 11 F5 43 04 0252*  	ld de,filedata
043BD8 01 00 00 01 0253*  	ld bc,65536
043BDC 3E 01       0254*  	ld a,mos_load
043BDE 5B CF       0255*  	RST.LIL 08h
043BE0 21 0C 05 00 0256*  	ld hl,BUF_KNIFE
043BE4 DD 21 F3 0F 0257*  	ld ix,4083
       00          
043BE9 CD 8D 33 04 0258*  	call vdu_load_sfx
043BED C9          0259*  	ret
043BEE             0260*  
043BEE             0261*  load_sfx_MEIN_LEBEN:
043BEE 21 01 3E 04 0262*  	ld hl,FMEIN_LEBEN
043BF2 22 ED 37 04 0263*  	ld (cur_filename),hl
043BF6 11 F5 43 04 0264*  	ld de,filedata
043BFA 01 00 00 01 0265*  	ld bc,65536
043BFE 3E 01       0266*  	ld a,mos_load
043C00 5B CF       0267*  	RST.LIL 08h
043C02 21 0D 05 00 0268*  	ld hl,BUF_MEIN_LEBEN
043C06 DD 21 81 35 0269*  	ld ix,13697
       00          
043C0B CD 8D 33 04 0270*  	call vdu_load_sfx
043C0F C9          0271*  	ret
043C10             0272*  
043C10             0273*  load_sfx_OOF:
043C10 21 14 3E 04 0274*  	ld hl,FOOF
043C14 22 ED 37 04 0275*  	ld (cur_filename),hl
043C18 11 F5 43 04 0276*  	ld de,filedata
043C1C 01 00 00 01 0277*  	ld bc,65536
043C20 3E 01       0278*  	ld a,mos_load
043C22 5B CF       0279*  	RST.LIL 08h
043C24 21 0E 05 00 0280*  	ld hl,BUF_OOF
043C28 DD 21 00 40 0281*  	ld ix,16384
       00          
043C2D CD 8D 33 04 0282*  	call vdu_load_sfx
043C31 C9          0283*  	ret
043C32             0284*  
043C32             0285*  load_sfx_SCHUSSTAFFEL:
043C32 21 20 3E 04 0286*  	ld hl,FSCHUSSTAFFEL
043C36 22 ED 37 04 0287*  	ld (cur_filename),hl
043C3A 11 F5 43 04 0288*  	ld de,filedata
043C3E 01 00 00 01 0289*  	ld bc,65536
043C42 3E 01       0290*  	ld a,mos_load
043C44 5B CF       0291*  	RST.LIL 08h
043C46 21 0F 05 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
043C4A DD 21 63 26 0293*  	ld ix,9827
       00          
043C4F CD 8D 33 04 0294*  	call vdu_load_sfx
043C53 C9          0295*  	ret
043C54             0296*  
043C54             0297*  load_sfx_SCREAM:
043C54 21 35 3E 04 0298*  	ld hl,FSCREAM
043C58 22 ED 37 04 0299*  	ld (cur_filename),hl
043C5C 11 F5 43 04 0300*  	ld de,filedata
043C60 01 00 00 01 0301*  	ld bc,65536
043C64 3E 01       0302*  	ld a,mos_load
043C66 5B CF       0303*  	RST.LIL 08h
043C68 21 10 05 00 0304*  	ld hl,BUF_SCREAM
043C6C DD 21 5E 30 0305*  	ld ix,12382
       00          
043C71 CD 8D 33 04 0306*  	call vdu_load_sfx
043C75 C9          0307*  	ret
043C76             0308*  
043C76             0309*  load_sfx_SHOT_GATLING_BURST:
043C76 21 44 3E 04 0310*  	ld hl,FSHOT_GATLING_BURST
043C7A 22 ED 37 04 0311*  	ld (cur_filename),hl
043C7E 11 F5 43 04 0312*  	ld de,filedata
043C82 01 00 00 01 0313*  	ld bc,65536
043C86 3E 01       0314*  	ld a,mos_load
043C88 5B CF       0315*  	RST.LIL 08h
043C8A 21 11 05 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
043C8E DD 21 00 60 0317*  	ld ix,24576
       00          
043C93 CD 8D 33 04 0318*  	call vdu_load_sfx
043C97 C9          0319*  	ret
043C98             0320*  
043C98             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
043C98 21 5F 3E 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
043C9C 22 ED 37 04 0323*  	ld (cur_filename),hl
043CA0 11 F5 43 04 0324*  	ld de,filedata
043CA4 01 00 00 01 0325*  	ld bc,65536
043CA8 3E 01       0326*  	ld a,mos_load
043CAA 5B CF       0327*  	RST.LIL 08h
043CAC 21 12 05 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
043CB0 DD 21 C4 42 0329*  	ld ix,17092
       00          
043CB5 CD 8D 33 04 0330*  	call vdu_load_sfx
043CB9 C9          0331*  	ret
043CBA             0332*  
043CBA             0333*  load_sfx_SHOT_PISTOL:
043CBA 21 7E 3E 04 0334*  	ld hl,FSHOT_PISTOL
043CBE 22 ED 37 04 0335*  	ld (cur_filename),hl
043CC2 11 F5 43 04 0336*  	ld de,filedata
043CC6 01 00 00 01 0337*  	ld bc,65536
043CCA 3E 01       0338*  	ld a,mos_load
043CCC 5B CF       0339*  	RST.LIL 08h
043CCE 21 13 05 00 0340*  	ld hl,BUF_SHOT_PISTOL
043CD2 DD 21 61 4B 0341*  	ld ix,19297
       00          
043CD7 CD 8D 33 04 0342*  	call vdu_load_sfx
043CDB C9          0343*  	ret
043CDC             0344*  
043CDC             0345*  load_sfx_UGH:
043CDC 21 92 3E 04 0346*  	ld hl,FUGH
043CE0 22 ED 37 04 0347*  	ld (cur_filename),hl
043CE4 11 F5 43 04 0348*  	ld de,filedata
043CE8 01 00 00 01 0349*  	ld bc,65536
043CEC 3E 01       0350*  	ld a,mos_load
043CEE 5B CF       0351*  	RST.LIL 08h
043CF0 21 14 05 00 0352*  	ld hl,BUF_UGH
043CF4 DD 21 A9 18 0353*  	ld ix,6313
       00          
043CF9 CD 8D 33 04 0354*  	call vdu_load_sfx
043CFD C9          0355*  	ret
043CFE             0356*  
043CFE             0357*  load_sfx_WILHELM:
043CFE 21 9E 3E 04 0358*  	ld hl,FWILHELM
043D02 22 ED 37 04 0359*  	ld (cur_filename),hl
043D06 11 F5 43 04 0360*  	ld de,filedata
043D0A 01 00 00 01 0361*  	ld bc,65536
043D0E 3E 01       0362*  	ld a,mos_load
043D10 5B CF       0363*  	RST.LIL 08h
043D12 21 15 05 00 0364*  	ld hl,BUF_WILHELM
043D16 DD 21 D7 53 0365*  	ld ix,21463
       00          
043D1B CD 8D 33 04 0366*  	call vdu_load_sfx
043D1F C9          0367*  	ret
043D20             0368*  
043D20             0369*  ; File name lookups:
043D20 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
043D30 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
043D3C 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
043D49 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
043D56 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
043D68 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
043D80 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
043D98 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
043DA9 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
043DB9 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
043DCE 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
043DE0 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
043DF3 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
043E01 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
043E14 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
043E20 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
043E35 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
043E44 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
043E5F 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
043E7E 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
043E92 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
043E9E 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
043EAE             0392*  
043EAE             0393*  ; Play sfx routines
043EAE             0394*  
043EAE             0395*  sfx_play_achtung:
043EAE 21 00 05 00 0396*  	ld hl,BUF_ACHTUNG
043EB2 01 58 03 00 0397*  	ld bc,856
043EB6 C3 46 00 04 0398*  	jp vdu_play_sfx
043EBA             0399*  
043EBA             0400*  sfx_play_ahh:
043EBA 21 01 05 00 0401*  	ld hl,BUF_AHH
043EBE 01 91 01 00 0402*  	ld bc,401
043EC2 C3 46 00 04 0403*  	jp vdu_play_sfx
043EC6             0404*  
043EC6             0405*  sfx_play_augh:
043EC6 21 02 05 00 0406*  	ld hl,BUF_AUGH
043ECA 01 FC 02 00 0407*  	ld bc,764
043ECE C3 46 00 04 0408*  	jp vdu_play_sfx
043ED2             0409*  
043ED2             0410*  sfx_play_ayee:
043ED2 21 03 05 00 0411*  	ld hl,BUF_AYEE
043ED6 01 E6 01 00 0412*  	ld bc,486
043EDA C3 46 00 04 0413*  	jp vdu_play_sfx
043EDE             0414*  
043EDE             0415*  sfx_play_ayee_high:
043EDE 21 04 05 00 0416*  	ld hl,BUF_AYEE_HIGH
043EE2 01 40 04 00 0417*  	ld bc,1088
043EE6 C3 46 00 04 0418*  	jp vdu_play_sfx
043EEA             0419*  
043EEA             0420*  sfx_play_dog_woof_double:
043EEA 21 05 05 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
043EEE 01 63 02 00 0422*  	ld bc,611
043EF2 C3 46 00 04 0423*  	jp vdu_play_sfx
043EF6             0424*  
043EF6             0425*  sfx_play_dog_woof_single:
043EF6 21 06 05 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
043EFA 01 15 02 00 0427*  	ld bc,533
043EFE C3 46 00 04 0428*  	jp vdu_play_sfx
043F02             0429*  
043F02             0430*  sfx_play_dog_yelp:
043F02 21 07 05 00 0431*  	ld hl,BUF_DOG_YELP
043F06 01 B0 01 00 0432*  	ld bc,432
043F0A C3 46 00 04 0433*  	jp vdu_play_sfx
043F0E             0434*  
043F0E             0435*  sfx_play_explode:
043F0E 21 08 05 00 0436*  	ld hl,BUF_EXPLODE
043F12 01 13 05 00 0437*  	ld bc,1299
043F16 C3 46 00 04 0438*  	jp vdu_play_sfx
043F1A             0439*  
043F1A             0440*  sfx_play_got_treasure:
043F1A 21 09 05 00 0441*  	ld hl,BUF_GOT_TREASURE
043F1E 01 A7 05 00 0442*  	ld bc,1447
043F22 C3 46 00 04 0443*  	jp vdu_play_sfx
043F26             0444*  
043F26             0445*  sfx_play_gun_empty:
043F26 21 0A 05 00 0446*  	ld hl,BUF_GUN_EMPTY
043F2A 01 24 01 00 0447*  	ld bc,292
043F2E C3 46 00 04 0448*  	jp vdu_play_sfx
043F32             0449*  
043F32             0450*  sfx_play_gun_reload:
043F32 21 0B 05 00 0451*  	ld hl,BUF_GUN_RELOAD
043F36 01 BA 01 00 0452*  	ld bc,442
043F3A C3 46 00 04 0453*  	jp vdu_play_sfx
043F3E             0454*  
043F3E             0455*  sfx_play_knife:
043F3E 21 0C 05 00 0456*  	ld hl,BUF_KNIFE
043F42 01 F2 00 00 0457*  	ld bc,242
043F46 C3 46 00 04 0458*  	jp vdu_play_sfx
043F4A             0459*  
043F4A             0460*  sfx_play_mein_leben:
043F4A 21 0D 05 00 0461*  	ld hl,BUF_MEIN_LEBEN
043F4E 01 2E 03 00 0462*  	ld bc,814
043F52 C3 46 00 04 0463*  	jp vdu_play_sfx
043F56             0464*  
043F56             0465*  sfx_play_oof:
043F56 21 0E 05 00 0466*  	ld hl,BUF_OOF
043F5A 01 CE 03 00 0467*  	ld bc,974
043F5E C3 46 00 04 0468*  	jp vdu_play_sfx
043F62             0469*  
043F62             0470*  sfx_play_schusstaffel:
043F62 21 0F 05 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
043F66 01 48 02 00 0472*  	ld bc,584
043F6A C3 46 00 04 0473*  	jp vdu_play_sfx
043F6E             0474*  
043F6E             0475*  sfx_play_scream:
043F6E 21 10 05 00 0476*  	ld hl,BUF_SCREAM
043F72 01 E0 02 00 0477*  	ld bc,736
043F76 C3 46 00 04 0478*  	jp vdu_play_sfx
043F7A             0479*  
043F7A             0480*  sfx_play_shot_gatling_burst:
043F7A 21 11 05 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
043F7E 01 B6 05 00 0482*  	ld bc,1462
043F82 C3 46 00 04 0483*  	jp vdu_play_sfx
043F86             0484*  
043F86             0485*  sfx_play_shot_machine_gun_burst:
043F86 21 12 05 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
043F8A 01 F9 03 00 0487*  	ld bc,1017
043F8E C3 46 00 04 0488*  	jp vdu_play_sfx
043F92             0489*  
043F92             0490*  sfx_play_shot_pistol:
043F92 21 13 05 00 0491*  	ld hl,BUF_SHOT_PISTOL
043F96 01 7C 04 00 0492*  	ld bc,1148
043F9A C3 46 00 04 0493*  	jp vdu_play_sfx
043F9E             0494*  
043F9E             0495*  sfx_play_ugh:
043F9E 21 14 05 00 0496*  	ld hl,BUF_UGH
043FA2 01 77 01 00 0497*  	ld bc,375
043FA6 C3 46 00 04 0498*  	jp vdu_play_sfx
043FAA             0499*  
043FAA             0500*  sfx_play_wilhelm:
043FAA 21 15 05 00 0501*  	ld hl,BUF_WILHELM
043FAE 01 FD 04 00 0502*  	ld bc,1277
043FB2 C3 46 00 04 0503*  	jp vdu_play_sfx
043FB6             0029   	include "src/asm/timer.inc"
043FB6             0001*  ; Table 32. Timer Control Registers
043FB6             0002*  ; this constant is the base address of the timer control registers
043FB6             0003*  ; each timer takes three bytes:
043FB6             0004*  ;   0: control register
043FB6             0005*  ;   1: low byte of timer reset value
043FB6             0006*  ;   2: high byte of timer reset value
043FB6             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
043FB6             0008*  ; which correctly force the high and upper bytes of the address bus to zero
043FB6             0009*  TMR_CTL:     equ 80h
043FB6             0010*  
043FB6             0011*  ; Timer Control Register Bit Definitions
043FB6             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
043FB6             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
043FB6             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
043FB6             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
043FB6             0016*                              ; the TMRx_CTL register is read.
043FB6             0017*  
043FB6             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
043FB6             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
043FB6             0020*  
043FB6             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
043FB6             0022*                              ;  0,and counting stops when the end-of-count value is reached.
043FB6             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
043FB6             0024*                              ; written to the counter when the end-of-count value is reached.
043FB6             0025*  
043FB6             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
043FB6             0027*  CLK_DIV_256:  equ %00001100 ;
043FB6             0028*  CLK_DIV_64:   equ %00001000 ;
043FB6             0029*  CLK_DIV_16:   equ %00000100 ;
043FB6             0030*  CLK_DIV_4:    equ %00000000 ;
043FB6             0031*  
043FB6             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
043FB6             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
043FB6             0034*                              ; When a 1 is written to this bit,the values in the reload registers
043FB6             0035*                              ;  are loaded into the downcounter when the timer restarts. The
043FB6             0036*                              ; programmer must ensure that this bit is set to 1 each time
043FB6             0037*                              ; SINGLE-PASS mode is used.
043FB6             0038*  
043FB6             0039*  ; disable/enable the programmable reload timer
043FB6             0040*  PRT_EN_0:     equ %00000000 ;
043FB6             0041*  PRT_EN_1:     equ %00000001 ;
043FB6             0042*  
043FB6             0043*  ; Table 37. Timer Input Source Select Register
043FB6             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
043FB6             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
043FB6             0046*  ;   00: System clock / CLK_DIV
043FB6             0047*  ;   01: RTC / CLK_DIV
043FB6             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
043FB6             0049*  ;   10: GPIO port B pin 1.
043FB6             0050*  ;   11: GPIO port B pin 1.
043FB6             0051*  TMR_ISS:   equ 92h ; register address
043FB6             0052*  
043FB6             0053*  ; Table 51. Real-Time Clock Control Register
043FB6             0054*  RTC_CTRL: equ EDh ; register address
043FB6             0055*  
043FB6             0056*  ; alarm interrupt disable/enable
043FB6             0057*  RTC_ALARM_0:    equ %00000000
043FB6             0058*  RTC_ALARM_1:    equ %10000000
043FB6             0059*  
043FB6             0060*  ; interrupt on alarm disable/enable
043FB6             0061*  RTC_INT_ENT_0:  equ %00000000
043FB6             0062*  RTC_INT_ENT_1:  equ %01000000
043FB6             0063*  
043FB6             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
043FB6             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
043FB6             0066*  
043FB6             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
043FB6             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
043FB6             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
043FB6             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
043FB6             0071*  
043FB6             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
043FB6             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
043FB6             0074*  
043FB6             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
043FB6             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
043FB6             0077*  
043FB6             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
043FB6             0079*                                  ; RTC counter is enabled.
043FB6             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
043FB6             0081*                                  ; RTC counter is disabled.
043FB6             0082*  
043FB6             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
043FB6             0084*  
043FB6             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
043FB6             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
043FB6 00 00 00    0087*  prt_reload: dl 0x000000
043FB9             0088*  
043FB9             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
043FB9             0090*  ;          de = number PRT interrupts during test interval
043FB9             0091*  prt_calibrate:
043FB9 CD F4 2F 04 0092*      call vdu_vblank
043FBD             0093*  ; set a MOS timer
043FBD 21 78 00 00 0094*      ld hl,120*1 ; 1 second
043FC1 FD 21 14 41 0095*      ld iy,tmr_test
       04          
043FC6 CD F2 40 04 0096*      call tmr_set
043FCA             0097*  ; set a PRT timer
043FCA             0098*      ; ld hl,prt_reload_hardware
043FCA             0099*      ; ld hl,prt_reload_emulator
043FCA 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
043FCE 22 B6 3F 04 0101*      ld (prt_reload),hl
043FD2 CD 2D 40 04 0102*      call prt_set
043FD6             0103*  @loop:
043FD6             0104*  ; check time remaining on MOS timer
043FD6 CD 00 41 04 0105*      call tmr_get
043FDA CA E4 3F 04 0106*      jp z,@done ; time expired,so quit
043FDE FA E4 3F 04 0107*      jp m,@done ; time past expiration (negative),so quit
043FE2 18 F2       0108*      jr @loop
043FE4             0109*  @done:
043FE4 ED 5B 7B 40 0110*      ld de,(prt_irq_counter)
       04          
043FE9 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
043FED ED 43 B6 3F 0112*      ld (prt_reload),bc
       04          
043FF2 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
043FF6 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
043FF7 32 04 42 04 0115*      ld (is_emulator),a
043FFB ED 52       0116*      sbc hl,de
043FFD 21 1C 42 04 0117*      ld hl,on_hardware ; default message for running on hardware
044001 CA B9 3F 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
044005 F8          0119*      ret m ; negative result means we're on hardware
044006 3C          0120*      inc a ; we're on emulator
044007 32 04 42 04 0121*      ld (is_emulator),a
04400B 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04400F ED 43 B6 3F 0123*      ld (prt_reload),bc
       04          
044014 21 05 42 04 0124*      ld hl,on_emulator
044018 C9          0125*      ret
044019             0126*  
044019 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04402D             0128*  
04402D             0129*  ; set PRT timer
04402D             0130*  prt_set:
04402D 21 00 00 00 0131*      ld hl,0
044031 22 7B 40 04 0132*      ld (prt_irq_counter),hl
044035 2A B6 3F 04 0133*      ld hl,(prt_reload)
044039 ED 29 84    0134*      out0 ($84),l
04403C ED 21 85    0135*  	out0 ($85),h
04403F             0136*  ; disable timer
04403F 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
044041 ED 39 83    0138*  	out0 ($83),a
044044             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
044044 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
044046 ED 39 83    0141*  	out0 ($83),a
044049 C9          0142*      ret
04404A             0143*  
04404A             0144*  ; ===============================================
04404A             0145*  ; PRT Timer Interrupt Handling
04404A             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
04404A             0147*  ; -----------------------------------------------
04404A             0148*  prt_irq_init:
04404A             0149*      ; set up interrupt vector table 2
04404A 21 00 00 00 0150*  	ld hl,0
04404E 3A 0C 01 00 0151*  	ld a,($10c)
044052 6F          0152*  	ld l,a
044053 3A 0D 01 00 0153*  	ld a,($10d)
044057 67          0154*  	ld h,a
044058             0155*  
044058             0156*  	; skip over CALL ($c3)
044058 23          0157*  	inc hl
044059             0158*  	; load address of jump into vector table 2 (in ram)
044059 ED 27       0159*  	ld hl,(hl)
04405B             0160*  
04405B             0161*  	; write CALL prt_irq_handler to vector table 2
04405B 3E C3       0162*  	ld a,$c3
04405D 77          0163*  	ld (hl),a
04405E 23          0164*  	inc hl
04405F 11 66 40 04 0165*  	ld de,prt_irq_handler
044063 ED 1F       0166*  	ld (hl),de
044065             0167*  
044065 C9          0168*      ret
044066             0169*  
044066             0170*  prt_irq_handler:
044066 F3          0171*  	di
044067 F5          0172*  	push af
044068 E5          0173*      push hl
044069 ED 38 83    0174*  	in0 a,($83)
04406C 2A 7B 40 04 0175*  	ld hl,(prt_irq_counter)
044070 23          0176*  	inc hl
044071 22 7B 40 04 0177*  	ld (prt_irq_counter),hl
044075 E1          0178*      pop hl
044076 F1          0179*  	pop af
044077 FB          0180*  	ei
044078 5B ED 4D    0181*  	reti.l
04407B             0182*  
04407B             0183*  prt_irq_counter:
04407B 00 00 00    0184*  	.dl 0
04407E             0185*  prt_irq_counter_saved:
04407E 00 00 00    0186*      .dl 0
044081             0187*  
044081             0188*  prt_loop_reset:
044081 E5          0189*      push hl
044082 21 00 00 00 0190*  	ld hl,0
044086 22 7B 40 04 0191*  	ld (prt_irq_counter),hl
04408A 22 EC 40 04 0192*      ld (prt_loop_counter),hl
04408E 22 EF 40 04 0193*      ld (prt_loops),hl
044092 CD 2D 40 04 0194*      call prt_set
044096 E1          0195*      pop hl
044097 C9          0196*      ret
044098             0197*  
044098             0198*  prt_loop_start:
044098 E5          0199*      push hl
044099 21 00 00 00 0200*  	ld hl,0
04409D 22 7B 40 04 0201*  	ld (prt_irq_counter),hl
0440A1 E1          0202*      pop hl
0440A2 C9          0203*      ret
0440A3             0204*  
0440A3             0205*  prt_loop_stop:
0440A3 E5          0206*      push hl
0440A4 D5          0207*      push de
0440A5 2A 7B 40 04 0208*      ld hl,(prt_irq_counter)
0440A9 ED 5B EC 40 0209*      ld de,(prt_loop_counter)
       04          
0440AE 19          0210*      add hl,de
0440AF 22 EC 40 04 0211*      ld (prt_loop_counter),hl
0440B3 21 00 00 00 0212*      ld hl,0
0440B7 22 7B 40 04 0213*      ld (prt_irq_counter),hl
0440BB 2A EF 40 04 0214*      ld hl,(prt_loops)
0440BF 23          0215*      inc hl
0440C0 22 EF 40 04 0216*      ld (prt_loops),hl
0440C4 D1          0217*      pop de
0440C5 E1          0218*      pop hl
0440C6 C9          0219*      ret
0440C7             0220*  
0440C7             0221*  ; inputs: bc = y,x text coordinates to print
0440C7             0222*  prt_loop_print:
0440C7 F5          0223*      push af
0440C8 E5          0224*      push hl
0440C9 C5          0225*      push bc
0440CA D5          0226*      push de
0440CB DD E5       0227*      push ix
0440CD FD E5       0228*      push iy
0440CF CD D7 2E 04 0229*      call vdu_move_cursor
0440D3             0230*  
0440D3 2A EC 40 04 0231*      ld hl,(prt_loop_counter)
0440D7 CD F8 33 04 0232*      call printDec
0440DB             0233*  
0440DB 2A EF 40 04 0234*      ld hl,(prt_loops)
0440DF CD F8 33 04 0235*      call printDec
0440E3             0236*  
0440E3 FD E1       0237*      pop iy
0440E5 DD E1       0238*      pop ix
0440E7 D1          0239*      pop de
0440E8 C1          0240*      pop bc
0440E9 E1          0241*      pop hl
0440EA F1          0242*      pop af
0440EB C9          0243*      ret
0440EC             0244*  
0440EC             0245*  prt_loop_counter:
0440EC 00 00 00    0246*      .dl 0
0440EF             0247*  prt_loops:
0440EF 00 00 00    0248*      .dl 0
0440F2             0249*  
0440F2             0250*  ; ===============================================
0440F2             0251*  ; Timer functions
0440F2             0252*  ; -----------------------------------------------
0440F2             0253*  ; set a countdown timer
0440F2             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0440F2             0255*  ; returns: hl = current time
0440F2             0256*  tmr_set:
0440F2 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
0440F5             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
0440F5 3E 08       0001*M 			LD	A, function
0440F7 5B CF       0002*M 			RST.LIL	08h
0440F9 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
0440FC FD 2F 00    0260*      ld (iy+0),hl            ; set start time
0440FF C9          0261*      ret
044100             0262*  
044100             0263*  ; gets time remaining on a countdown timer
044100             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
044100             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
044100             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
044100             0267*  tmr_get:
044100             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
044100 3E 08       0001*M 			LD	A, function
044102 5B CF       0002*M 			RST.LIL	08h
044104 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
044107 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04410A AF          0271*      xor a                   ; clear carry
04410B ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04410D FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
044110 AF          0274*      xor a                   ; clear carry
044111 ED 5A       0275*      adc hl,de               ; hl = time remaining
044113             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
044113 C9          0277*      ret
044114             0278*  
044114             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04411A             0280*  
04411A 00 00 00    0281*  timestamp_now: dl 0
04411D 00 00 00    0282*  timestamp_old: dl 0
044120 00 00 00    0283*  timestamp_chg: dl 0
044123             0284*  
044123             0285*  ; update the global timestamp from the system clock
044123             0286*  ; inputs: none
044123             0287*  ; returns: hl = time elapsed in 1/120ths of a second
044123             0288*  ;          de = current time
044123             0289*  ;          ix = pointer to syvars table
044123             0290*  ; destroys: af,hl,de,ix
044123             0291*  timestamp_tick:
044123 ED 5B 1A 41 0292*      ld de,(timestamp_now)   ; get previous time
       04          
044128 ED 53 1D 41 0293*      ld (timestamp_old),de   ; save previous time
       04          
04412D             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04412D 3E 08       0001*M 			LD	A, function
04412F 5B CF       0002*M 			RST.LIL	08h
044131 DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
044134 22 1A 41 04 0296*      ld (timestamp_now),hl   ; save current time
044138 AF          0297*      xor a                   ; clear carry
044139 ED 52       0298*      sbc hl,de               ; hl = time elapsed
04413B 22 20 41 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04413F C9          0300*      ret
044140             0301*  
044140             0302*  ; set a countdown timer
044140             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
044140             0304*  ; requires: timestamp_tick to be called at least once before this function
044140             0305*  ; returns: hl = current time
044140             0306*  ; destroys: hl
044140             0307*  timestamp_tmr_set:
044140 FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
044143 2A 1A 41 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
044147 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04414A C9          0311*      ret
04414B             0312*  
04414B             0313*  ; gets time remaining on a countdown timer following the global timestamp
04414B             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04414B             0315*  ; requires: timestamp_tick to be called at least once before this function
04414B             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04414B             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04414B             0318*  ; destroys: af,hl,de
04414B             0319*  timestamp_tmr_get:
04414B ED 5B 1A 41 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
044150 FD 27 00    0321*      ld hl,(iy+0)            ; get start time
044153 AF          0322*      xor a                   ; clear carry
044154 ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
044156 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
044159 AF          0325*      xor a                   ; clear carry
04415A ED 5A       0326*      adc hl,de               ; hl = time remaining
04415C             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04415C C9          0328*      ret
04415D             0329*  
04415D             0330*  ; set a stopwatch
04415D             0331*  ; returns: hl = start time
04415D             0332*  ; destroys: hl,ix
04415D             0333*  stopwatch_set:
04415D             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04415D 3E 08       0001*M 			LD	A, function
04415F 5B CF       0002*M 			RST.LIL	08h
044161 DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
044164 22 79 41 04 0336*      ld (stopwatch_started),hl            ; set start time
044168 C9          0337*      ret
044169             0338*  
044169             0339*  ; gets time elapsed on a stopwatch
044169             0340*  ; returns: hl = time elapsed in 1/120ths of a second
044169             0341*  ; destroys: af,hl,de,ix
044169             0342*  stopwatch_get:
044169             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
044169 3E 08       0001*M 			LD	A, function
04416B 5B CF       0002*M 			RST.LIL	08h
04416D DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
044170 ED 5B 79 41 0345*      ld de,(stopwatch_started)            ; get start time
       04          
044175 AF          0346*      xor a                   ; clear carry
044176 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
044178 C9          0348*      ret
044179             0349*  
044179             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04417C             0351*  
04417C             0352*  ; ------------------
04417C             0353*  ; delay routine
04417C             0354*  ; Author: Richard Turrnidge
04417C             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04417C             0356*  ; routine waits a fixed time,then returns
04417C             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04417C             0358*  ; eg. ld A,00000100b
04417C             0359*  
04417C             0360*  multiPurposeDelay:
04417C F5          0361*      push af
04417D C5          0362*      push bc
04417E DD E5       0363*      push ix
044180 47          0364*      ld b,a
044181 3E 08       0365*      ld a,$08
044183 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
044185             0367*  
044185             0368*  waitLoop:
044185             0369*  
044185 DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
044188             0371*  
044188             0372*                                  ;   we check if bit set is same as last time we checked.
044188             0373*                                  ;   bit 0 - don't use
044188             0374*                                  ;   bit 1 - changes 64 times per second
044188             0375*                                  ;   bit 2 - changes 32 times per second
044188             0376*                                  ;   bit 3 - changes 16 times per second
044188             0377*  
044188             0378*                                  ;   bit 4 - changes 8 times per second
044188             0379*                                  ;   bit 5 - changes 4 times per second
044188             0380*                                  ;   bit 6 - changes 2 times per second
044188             0381*                                  ;   bit 7 - changes 1 times per second
044188 A0          0382*      and b
044189 4F          0383*      ld c,a
04418A 3A 9B 41 04 0384*      ld a,(oldTimeStamp)
04418E B9          0385*      cp c                        ; is A same as last value?
04418F 28 F4       0386*      jr z,waitLoop              ; loop here if it is
044191 79          0387*      ld a,c
044192 32 9B 41 04 0388*      ld (oldTimeStamp),a        ; set new value
044196             0389*  
044196 DD E1       0390*      pop ix
044198 C1          0391*      pop bc
044199 F1          0392*      pop af
04419A C9          0393*      ret
04419B             0394*  
04419B 00          0395*  oldTimeStamp:   .db 00h
04419C             0030   	include "src/asm/vdu_wolf3d.inc"
04419C             0001*  ; create wolf3d control structure
04419C             0002*      MACRO CCS SID, SCENE_WIDTH, SCENE_HEIGHT
04419C             0003*      ld hl,@beg
04419C             0004*      ld bc,@end-@beg
04419C             0005*      rst.lil $18
04419C             0006*      jp @end
04419C             0007*  @beg:
04419C             0008*  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
04419C             0009*      db 23,0,$A0
04419C             0010*      dw SID
04419C             0011*      db $50,0
04419C             0012*      dw SCENE_WIDTH
04419C             0013*      dw SCENE_HEIGHT
04419C             0014*  @end:
04419C             0015*      ENDMACRO
04419C             0031   
04419C             0032   
04419C             0033   start:
04419C F5          0034       push af
04419D C5          0035       push bc
04419E D5          0036       push de
04419F DD E5       0037       push ix
0441A1 FD E5       0038       push iy
0441A3             0039   
0441A3 CD 33 42 04 0040   	call init ; Initialization code
0441A7 CD 60 43 04 0041       call main ; Call the main function
0441AB             0042   
0441AB             0043   exit:
0441AB             0044   
0441AB FD E1       0045       pop iy
0441AD DD E1       0046       pop ix
0441AF D1          0047       pop de
0441B0 C1          0048       pop bc
0441B1 F1          0049       pop af
0441B2 21 00 00 00 0050       ld hl,0
0441B6             0051   
0441B6 C9          0052       ret
0441B7             0053   
0441B7 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
0441CE 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
0441D9 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
0441E7 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
044204 00          0058   is_emulator: defb 0
044205 52 75 6E 6E 0059   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04421C 52 75 6E 6E 0060   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
044233             0061   
044233             0062   init:
044233             0063   ; clear all buffers
044233 CD 99 33 04 0064       call vdu_clear_all_buffers
044237             0065   
044237             0066   ; set up the display
044237 3E 88       0067       ld a,8+128 ; 320x240x64 double-buffered
044239 CD 27 2E 04 0068       call vdu_set_screen_mode
04423D AF          0069       xor a
04423E CD 56 2F 04 0070       call vdu_set_scaling
044242             0071   
044242             0072   ; start generic stopwatch to time setup loop
044242             0073   ; so we can determine if we're running on emulator or hardware
044242 CD 5D 41 04 0074   	call stopwatch_set
044246             0075   
044246             0076   ; initialize global timestamp
044246 DD 27 00    0077       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
044249 22 1A 41 04 0078       ld (timestamp_now),hl
04424D             0079   
04424D             0080   ; enable additional audio channels
04424D CD 8C 00 04 0081   	call vdu_enable_channels
044251             0082   
044251             0083   ; set the cursor off
044251 CD E6 2F 04 0084   	call cursor_off
044255             0085   
044255             0086   ; print loading ui message
044255 21 CE 41 04 0087   	ld hl,loading_ui
044259 CD AA 33 04 0088   	call printString
04425D             0089   
04425D             0090   ; load fonts
04425D CD DB 0B 04 0091   	call load_font_itc_honda
044261 CD BE 1C 04 0092   	call load_font_retro_computer
044265             0093   
044265             0094   ; load UI images
044265 CD 47 25 04 0095   	call load_ui_images
044269 CD F9 27 04 0096   	call load_ui_images_bj
04426D             0097   
04426D             0098   ; set text background color
04426D 3E 84       0099   	ld a,4 + 128
04426F CD B3 2D 04 0100   	call vdu_colour_text
044273             0101   
044273             0102   ; set text foreground color
044273 3E 2F       0103   	ld a,47 ; aaaaff lavenderish
044275 CD B3 2D 04 0104   	call vdu_colour_text
044279             0105   
044279             0106   ; set gfx bg color
044279 AF          0107   	xor a ; plotting mode 0
04427A 0E 04       0108   	ld c,4 ; dark blue
04427C CD DB 2D 04 0109   	call vdu_gcol_bg
044280 CD AE 2D 04 0110   	call vdu_clg
044284             0111   
044284             0112   ; set the cursor off again since we changed screen modes
044284 CD E6 2F 04 0113   	call cursor_off
044288             0114   
044288             0115   ; VDU 28, left, bottom, right, top: Set text viewport **
044288             0116   ; MIND THE LITTLE-ENDIANESS
044288             0117   ; inputs: c=left,b=bottom,e=right,d=top
044288 0E 00       0118   	ld c,0 ; left
04428A 16 14       0119   	ld d,20 ; top
04428C 1E 27       0120   	ld e,39 ; right
04428E 06 1D       0121   	ld b,29; bottom
044290 CD 9C 2E 04 0122   	call vdu_set_txt_viewport
044294             0123   
044294             0124   ; initialize image load routine
044294 CD F9 37 04 0125   	call img_load_init
044298             0126   
044298             0127   ; load tiles
044298 01 0B 00 00 0128   	ld bc,cube_num_tiles
04429C 21 D4 01 04 0129   	ld hl,cube_buffer_id_lut
0442A0 22 F3 37 04 0130   	ld (cur_buffer_id_lut),hl
0442A4 21 F5 01 04 0131   	ld hl,cube_load_tiles_table
0442A8 22 F6 37 04 0132   	ld (cur_load_jump_table),hl
0442AC CD 2E 38 04 0133   	call img_load_main
0442B0             0134   
0442B0             0135   ; load sprites
0442B0 01 14 00 00 0136   	ld bc,sprite_num_tiles
0442B4 21 89 04 04 0137   	ld hl,sprite_buffer_id_lut
0442B8 22 F3 37 04 0138   	ld (cur_buffer_id_lut),hl
0442BC 21 C5 04 04 0139   	ld hl,sprite_load_tiles_table
0442C0 22 F6 37 04 0140   	ld (cur_load_jump_table),hl
0442C4 CD 2E 38 04 0141   	call img_load_main
0442C8             0142   
0442C8             0143   ; load sound effects
0442C8 01 16 00 00 0144   	ld bc,SFX_num_buffers
0442CC 21 84 39 04 0145   	ld hl,SFX_buffer_id_lut
0442D0 22 F3 37 04 0146   	ld (cur_buffer_id_lut),hl
0442D4 21 F2 39 04 0147   	ld hl,SFX_load_routines_table
0442D8 22 F6 37 04 0148   	ld (cur_load_jump_table),hl
0442DC CD F4 32 04 0149   	call sfx_load_main
0442E0             0150   
0442E0             0151   ; self modify vdu_play_sfx to enable sound
0442E0 AF          0152   	xor a
0442E1 32 46 00 04 0153   	ld (vdu_play_sfx_disable),a
0442E5             0154   
0442E5             0155   ; use loading time to determine if we're running on emulator or hardware
0442E5 CD 69 41 04 0156   	call stopwatch_get ; hl = elapsed time in 120ths of a second
0442E9 11 40 1F 00 0157   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
0442ED AF          0158   	xor a ; clear carry, default is running on hardware
0442EE 32 04 42 04 0159   	ld (is_emulator),a
0442F2 ED 52       0160   	sbc hl,de
0442F4 FA 08 43 04 0161   	jp m,@on_emulator
0442F8 CD D2 2E 04 0162   	call vdu_home_cursor
0442FC 21 1C 42 04 0163   	ld hl,on_hardware
044300 CD AA 33 04 0164   	call printString
044304 C3 1A 43 04 0165   	jp @test_done
044308             0166   
044308             0167   @on_emulator:
044308             0168   ; print emulator message
044308 3E 01       0169   	ld a,1
04430A 32 04 42 04 0170   	ld (is_emulator),a
04430E CD D2 2E 04 0171   	call vdu_home_cursor
044312 21 05 42 04 0172   	ld hl,on_emulator
044316 CD AA 33 04 0173   	call printString
04431A             0174   
04431A             0175   @test_done:
04431A             0176   ; print final loading time
04431A 21 D9 41 04 0177   	ld hl,loading_time
04431E CD AA 33 04 0178   	call printString
044322 CD 69 41 04 0179   	call stopwatch_get ; hl = elapsed time in 120ths of a second
044326 CD F8 33 04 0180   	call printDec
04432A CD BF 33 04 0181   	call printNewLine
04432E             0182   
04432E             0183   ; print loading complete message and wait for user keypress
04432E 21 E7 41 04 0184   	ld hl,loading_complete
044332 CD AA 33 04 0185   	call printString
044336 CD 69 2F 04 0186   	call vdu_flip
04433A CD 2A 37 04 0187   	call waitKeypress
04433E             0188   
04433E             0189   ; initialization done
04433E C9          0190   	ret
04433F             0191   
04433F             0192   ; DEBUG: set up a simple countdown timer
04433F 01          0193   debug_timer: db 0x01
044340             0194   
044340             0195   main_loop_tmr: ds 6
044346             0196   framerate: equ 30
044346             0197   
044346             0198   new_game:
044346             0199   ; create wolf3d control structure
044346             0200   sid: equ 0x1000
044346             0201   scene_width: equ 256
044346             0202   scene_height: equ 192
044346             0203   ccs:
044346             0204   	CCS sid, scene_width, scene_height
044346 21 54 43 04 0001M      ld hl,@beg
04434A 01 0B 00 00 0002M      ld bc,@end-@beg
04434E 5B DF       0003M      rst.lil $18
044350 C3 5F 43 04 0004M      jp @end
044354             0005M  @beg:
044354             0006M  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
044354 17 00 A0    0007M      db 23,0,$A0
044357 00 10       0008M      dw SID
044359 50 00       0009M      db $50,0
04435B 00 01       0010M      dw SCENE_WIDTH
04435D C0 00       0011M      dw SCENE_HEIGHT
04435F             0012M  @end:
04435F             0205   
04435F             0206   ; ; initialize map variables and load map file
04435F             0207   ; 	ld hl,room_flags
04435F             0208   ; 	xor a
04435F             0209   ; 	ld b,10
04435F             0210   ; @room_flags_loop:
04435F             0211   ; 	ld (hl),a
04435F             0212   ; 	inc hl
04435F             0213   ; 	djnz @room_flags_loop
04435F             0214   ; ; map_init:
04435F             0215   ; 	ld (cur_floor),a
04435F             0216   ; 	ld (cur_room),a
04435F             0217   ; ; load room file
04435F             0218   ; 	call map_load
04435F             0219   ; ; initialize sprite data
04435F             0220   ; 	call map_init_sprites
04435F             0221   ; ; initialize player position
04435F             0222   ; 	call plyr_init
04435F             0223   
04435F C9          0224   	ret
044360             0225   
044360             0226   main:
044360 CD 46 43 04 0227   	call new_game
044364             0228   
044364             0229   main_loop:
044364             0230   ; update global timestamp
044364 CD 23 41 04 0231       call timestamp_tick
044368             0232   
044368             0233   ; ; move enemies
044368             0234   ; 	call sprites_see_plyr ; 220-285  prt ticks
044368             0235   
044368             0236   ; ; get player input and update sprite position
044368             0237   ; 	; 0-1 prt ticks
044368             0238   ; 	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
044368             0239   
044368             0240   ; ; render the updated scene
044368             0241   ; 	call render_scene ; 6-12 prt ticks
044368             0242   ; ; full loop 12-16 prt ticks
044368             0243   
044368             0244   ; ; flip the screen
044368             0245   ; 	call vdu_flip
044368             0246   
044368             0247   @wait:
044368 FD 21 40 43 0248   	ld iy,main_loop_tmr
       04          
04436D CD 00 41 04 0249   	call tmr_get
044371 CA 7D 43 04 0250   	jp z,@continue
044375 FA 7D 43 04 0251   	jp m,@continue
044379 C3 68 43 04 0252   	jp @wait
04437D             0253   @continue:
04437D             0254   
04437D             0255   ; reset main loop timer
04437D FD 21 40 43 0256   	ld iy,main_loop_tmr
       04          
044382 21 04 00 00 0257   	ld hl,120/framerate
044386 CD F2 40 04 0258   	call tmr_set
04438A             0259   
04438A             0260   ; check for escape key and quit if pressed
04438A             0261   	MOSCALL mos_getkbmap
04438A 3E 1E       0001M  			LD	A, function
04438C 5B CF       0002M  			RST.LIL	08h
04438E             0262   ; 113 Escape
04438E DD CB 0E 46 0263       bit 0,(ix+14)
044392 20 02       0264   	jr nz,main_end
044394             0265   @Escape:
044394 18 CE       0266   	jr main_loop
044396             0267   
044396             0268   main_end:
044396             0269   	; call do_outro
044396             0270   
044396 CD 99 33 04 0271       call vdu_clear_all_buffers
04439A CD B4 00 04 0272   	call vdu_disable_channels
04439E             0273   
04439E             0274   ; restore screen to something normalish
04439E AF          0275   	xor a
04439F CD 27 2E 04 0276   	call vdu_set_screen_mode
0443A3 CD D8 2F 04 0277   	call cursor_on
0443A7 C9          0278   	ret
0443A8             0279   
0443A8             0280   ; files.inc must go here so that filedata doesn't stomp on program data
0443A8             0281   	include "src/asm/files.inc"
0443A8             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
0443A8             0002*  ; inputs: hl = bufferId, ix = file size
0443A8             0003*  vdu_load_buffer_from_file:
0443A8             0004*  	; load buffer ids
0443A8 22 E5 43 04 0005*  		ld (@id0),hl
0443AC 22 EB 43 04 0006*  		ld (@id1),hl
0443B0 22 F0 43 04 0007*  		ld (@id2),hl
0443B4             0008*  	; clean up bytes that got stomped on by the ID loads
0443B4 3E 02       0009*  		ld a,2
0443B6 32 E7 43 04 0010*  		ld (@id0+2),a
0443BA 3E 17       0011*  		ld a,23
0443BC 32 ED 43 04 0012*  		ld (@id1+2),a
0443C0 AF          0013*  		xor a
0443C1 32 F2 43 04 0014*  		ld (@id2+2),a
0443C5             0015*  	; read size from ix
0443C5 DD 7D       0016*  		ld a,ixl
0443C7 32 F3 43 04 0017*  		ld (@size),a
0443CB DD 7C       0018*  		ld a,ixh
0443CD 32 F4 43 04 0019*  		ld (@size+1),a
0443D1             0020*  	; get all the ducks in a row for the vdu call
0443D1 01 13 00 00 0021*  		ld bc,filedata-@start
0443D5 DD 09       0022*  		add ix,bc
0443D7 DD 44       0023*  		ld b,ixh
0443D9 DD 4D       0024*  		ld c,ixl
0443DB 21 E2 43 04 0025*  		ld hl,@start
0443DF             0026*  	; push the button
0443DF 5B DF       0027*  		rst.lil $18
0443E1             0028*  	; back to caller
0443E1 C9          0029*  		ret
0443E2             0030*  ; vdp command string:
0443E2 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
0443E5 00 00       0032*  @id0:	dw 0x0000 ; bufferId
0443E7 02          0033*  		db 2
0443E8             0034*  	; select buffer VDU 23, 27, &20, bufferId;
0443E8 17 1B 20    0035*  		db 23,27,0x20
0443EB 00 00       0036*  @id1:	dw 0x0000 ; bufferId
0443ED             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
0443ED 17 00 A0    0038*  		db 23,0,0xA0
0443F0 00 00       0039*  @id2:	dw 0x0000 ; bufferId
0443F2 00          0040*  		db 0
0443F3             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
0443F3 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
0443F5             0043*  filedata: ; no need to allocate space here if this is the final include of the application
0443F5             0044*  	; ds 65536 ; placeholder for file data	DEBUG
