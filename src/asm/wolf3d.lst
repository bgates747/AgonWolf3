PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 76 C1 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  
040046             0003*  vdu_play_sfx:
040046 C9          0004*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0005*      ld (@bufferId),hl
04004B ED 43 89 00 0006*      ld (@duration),bc
       04          
040050 3E 17       0007*      ld a,23
040052 32 81 00 04 0008*      ld (@bufferId+2),a
040056 3A 45 00 04 0009*      ld a,(last_channel)
04005A 3C          0010*      inc a
04005B             0011*      ; and 31 ; modulo 32
04005B FE 03       0012*      cp 3
04005D C2 62 00 04 0013*      jp nz,@load_channel
040061 AF          0014*      xor a
040062             0015*  @load_channel:
040062 32 45 00 04 0016*      ld (last_channel),a
040066 32 7C 00 04 0017*      ld (@channel0),a
04006A 32 84 00 04 0018*      ld (@channel1),a
04006E 21 79 00 04 0019*      ld hl, @sample
040072 01 12 00 00 0020*      ld bc, @sample_end - @sample
040076 5B DF       0021*      rst.lil $18
040078 C9          0022*      ret
040079             0023*  @sample:
040079             0024*  ; Command 4: Set waveform
040079             0025*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0026*      .db 23,0,$85                        ; do sound
04007C             0027*  @channel0:
04007C 00 04 08    0028*      .db 0,4,8 ; channel, command, waveform
04007F             0029*  @bufferId:
04007F 00 00       0030*      .dw 0x0000
040081             0031*  ; Command 0: Play note
040081             0032*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0033*      .db 23,0,$85                        ; do sound
040084             0034*  @channel1:
040084 00 00 7F    0035*      .db 0,0,127                ; channel, volume
040087 00 00       0036*      .dw 0
040089             0037*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0038*      .dw 0x0000                        ; duration
04008B             0039*  @sample_end:
04008B 00          0040*      .db 0x00 ; padding
04008C             0041*  
04008C             0042*  ; ############################################################
04008C             0043*  ; VDU SOUND API
04008C             0044*  ; ############################################################
04008C             0045*  ; Command 0: Play note
04008C             0046*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04008C             0047*      MACRO PLAY_NOTE channel, volume, frequency, duration
04008C             0048*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
04008C             0049*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
04008C             0050*      rst.lil $18
04008C             0051*      jr @PLAY_NOTE_END
04008C             0052*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
04008C             0053*                   db channel                  ; Channel, 0 (commented out)
04008C             0054*                   db 0                        ; Play note command
04008C             0055*                   db volume                   ; Volume
04008C             0056*                   dw frequency                ; Frequency
04008C             0057*                   dw duration                 ; Duration
04008C             0058*  @PLAY_NOTE_END:
04008C             0059*      ENDMACRO
04008C             0060*  
04008C             0061*      MACRO MUTE_CHANNEL channel
04008C             0062*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
04008C             0063*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
04008C             0064*      rst.lil $18
04008C             0065*      jr @MUTE_CHANNEL_END
04008C             0066*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
04008C             0067*                     db channel                ; Channel, 0 (commented out)
04008C             0068*                     db 2                      ; Set volume command
04008C             0069*                     db 0                      ; Volume (mute)
04008C             0070*  @MUTE_CHANNEL_END:
04008C             0071*      ENDMACRO
04008C             0072*  
04008C             0073*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
04008C             0074*  vdu_play_note:
04008C 79          0075*      ld a,c
04008D 32 AD 00 04 0076*      ld (@channel),a
040091 78          0077*      ld a,b
040092 32 AF 00 04 0078*      ld (@volume),a
040096 22 B0 00 04 0079*      ld (@frequency),hl
04009A ED 53 B2 00 0080*      ld (@duration),de
       04          
04009F 21 AA 00 04 0081*      ld hl,@cmd
0400A3 01 0A 00 00 0082*      ld bc,@end-@cmd
0400A7 5B DF       0083*      rst.lil $18
0400A9 C9          0084*      ret
0400AA 17 00 85    0085*  @cmd:       db 23, 0, 0x85
0400AD 00          0086*  @channel:   db 0x00
0400AE 00          0087*              db 0x00 ; play note command
0400AF 00          0088*  @volume:    db 0x00
0400B0 00 00       0089*  @frequency: dw 0x0000
0400B2 00 00       0090*  @duration:  dw 0x0000
0400B4 00          0091*  @end:       db 0x00 ; padding
0400B5             0092*  
0400B5             0093*  ; Command 1: Status
0400B5             0094*  ; VDU 23, 0, &85, channel, 1
0400B5             0095*  ; inputs: a = channel
0400B5             0096*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400B5             0097*  ; Bit 	Name 	Meaning
0400B5             0098*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400B5             0099*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400B5             0100*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400B5             0101*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400B5             0102*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400B5             0103*  
0400B5             0104*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400B5             0105*  vdu_channel_status:
0400B5 32 C7 00 04 0106*      ld (@channel),a
0400B9 21 C4 00 04 0107*      ld hl,@cmd
0400BD 01 05 00 00 0108*      ld bc,@end-@cmd
0400C1 5B DF       0109*      rst.lil $18
0400C3 C9          0110*      ret
0400C4 17 00 85    0111*  @cmd:       db 23, 0, 0x85
0400C7 00          0112*  @channel:   db 0x00
0400C8 01          0113*              db 0x01 ; get channel status command
0400C9             0114*  @end:
0400C9             0115*  
0400C9             0116*  ; VDU 23, 0, &85, channel, 2, volume
0400C9             0117*  ; inputs: c = channel, b = volume
0400C9             0118*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400C9             0119*  
0400C9             0120*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400C9             0121*  
0400C9             0122*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400C9             0123*  vdu_channel_volume:
0400C9 79          0124*      ld a,c
0400CA 32 E1 00 04 0125*      ld (@channel),a
0400CE 78          0126*      ld a,b
0400CF 32 E3 00 04 0127*      ld (@volume),a
0400D3 21 DE 00 04 0128*      ld hl,@cmd
0400D7 01 06 00 00 0129*      ld bc,@end-@cmd
0400DB 5B DF       0130*      rst.lil $18
0400DD C9          0131*      ret
0400DE 17 00 85    0132*  @cmd:       db 23, 0, 0x85
0400E1 00          0133*  @channel:   db 0x00
0400E2 02          0134*              db 0x02 ; set volume command
0400E3 00          0135*  @volume:    db 0x00
0400E4             0136*  @end:
0400E4             0137*  
0400E4             0138*  ; VDU 23, 0, &85, channel, 3, frequency;
0400E4             0139*  
0400E4             0140*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0400E4             0141*  
0400E4             0142*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0400E4             0143*  
0400E4             0144*  ; Returns 1 on success, 0 for failure.
0400E4             0145*  vdu_channel_frequency:
0400E4 79          0146*      ld a,c
0400E5 32 FC 00 04 0147*      ld (@channel),a
0400E9 ED 53 FE 00 0148*      ld (@frequency),de
       04          
0400EE 21 F9 00 04 0149*      ld hl,@cmd
0400F2 01 07 00 00 0150*      ld bc,@end-@cmd
0400F6 5B DF       0151*      rst.lil $18
0400F8 C9          0152*      ret
0400F9 17 00 85    0153*  @cmd:       db 23, 0, 0x85
0400FC 00          0154*  @channel:   db 0x00
0400FD 03          0155*              db 0x03 ; set frequency command
0400FE 00 00       0156*  @frequency: dw 0x0000
040100 00          0157*  @end:       db 0x00 ; padding
040101             0158*  
040101             0159*  
040101             0160*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040101             0161*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040101             0162*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040101             0163*  
040101             0164*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040101             0165*  
040101             0166*  ; By default a channel is set to use waveform 0 (square wave).
040101             0167*  
040101             0168*  ; Valid waveform values are as follows:
040101             0169*  ; Value 	Waveform
040101             0170*  ; 0 	Square wave
040101             0171*  ; 1 	Triangle wave
040101             0172*  ; 2 	Sawtooth wave
040101             0173*  ; 3 	Sine wave
040101             0174*  ; 4 	Noise (simple white noise with no frequency support)
040101             0175*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040101             0176*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040101             0177*  
040101             0178*  vdu_channel_waveform:
040101 79          0179*      ld a,c
040102 32 27 01 04 0180*      ld (@channel),a
040106 78          0181*      ld a,b
040107 32 29 01 04 0182*      ld (@waveform),a
04010B FE 08       0183*      cp 8 ; check if the waveform is a sample
04010D 28 06       0184*      jr z, @sample
04010F 01 06 00 00 0185*      ld bc,@bufferId-@cmd
040113 18 08       0186*      jr @sendToVdu
040115             0187*  @sample:
040115 22 2A 01 04 0188*      ld (@bufferId),hl
040119 01 08 00 00 0189*      ld bc,@end-@cmd
04011D             0190*  @sendToVdu:
04011D 21 24 01 04 0191*      ld hl,@cmd
040121 5B DF       0192*      rst.lil $18
040123 C9          0193*      ret
040124 17 00 85    0194*  @cmd:       db 23, 0, 0x85
040127 00          0195*  @channel:   db 0x00
040128 04          0196*              db 0x04 ; set waveform command
040129 00          0197*  @waveform:  db 0x00
04012A 00 00       0198*  @bufferId:  dw 0x0000
04012C 00          0199*  @end:       db 0x00 ; padding
04012D             0200*  
04012D             0201*  
04012D             0202*  
04012D             0203*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04012D             0204*  ; inputs: hl = bufferId; a = format
04012D             0205*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04012D             0206*  ; Value 	Description
04012D             0207*  ; 0 	8-bit signed, 16KHz
04012D             0208*  ; 1 	8-bit unsigned, 16KHz
04012D             0209*  vdu_buffer_to_sound:
04012D 22 46 01 04 0210*      ld (@bufferId),hl
040131 32 48 01 04 0211*      ld (@format),a
040135 21 40 01 04 0212*      ld hl,@cmd
040139 01 09 00 00 0213*      ld bc,@end-@cmd
04013D 5B DF       0214*      rst.lil $18
04013F C9          0215*      ret
040140 17 00 85    0216*  @cmd:       db 23, 0, 0x85
040143 00          0217*              db 0x00 ; a magic number that is always 0
040144 05          0218*              db 0x05 ; buffer to sound command
040145 02          0219*              db 0x02 ; a magic number that is always 2
040146 00 00       0220*  @bufferId:  dw 0x0000
040148 00          0221*  @format:    db 0x00
040149             0222*  @end:
040149             0223*  
040149             0224*  
040149             0225*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040149             0226*  vdu_play_sample:
040149             0227*      ; populate input parameters
040149 79          0228*      ld a,c
04014A 32 74 01 04 0229*      ld (@channel0),a
04014E 32 7C 01 04 0230*      ld (@channel1),a
040152 78          0231*      ld a,b
040153 32 7E 01 04 0232*      ld (@volume),a
040157 ED 53 7F 01 0233*      ld (@frequency),de
       04          
04015C 22 77 01 04 0234*      ld (@bufferId),hl
040160             0235*      ; clean up byte that got stomped on by bufferId load from hl
040160 3E 17       0236*      ld a,23
040162 32 79 01 04 0237*      ld (@cmd1),a
040166             0238*      ; prep the vdu command string
040166 21 71 01 04 0239*      ld hl, @cmd0
04016A 01 12 00 00 0240*      ld bc, @end - @cmd0
04016E 5B DF       0241*      rst.lil $18
040170 C9          0242*      ret
040171 17 00 85    0243*  @cmd0:       db 23, 0, 0x85
040174 00          0244*  @channel0:   db 0x00
040175 04          0245*               db 0x04 ; set waveform command
040176 08          0246*  @waveform:   db 0x08 ; sample
040177 00 00       0247*  @bufferId:   dw 0x0000
040179 17 00 85    0248*  @cmd1:       db 23, 0, 0x85
04017C 00          0249*  @channel1:   db 0x00
04017D 00          0250*               db 0x00 ; play note command
04017E 00          0251*  @volume:     db 0x00
04017F 00 00       0252*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040181 00 00       0253*  @duration:   dw 0x0000 ; milliseconds
040183 00          0254*  @end:        db 0x00 ; padding
040184             0255*  
040184             0256*  
040184             0257*  vdu_enable_channels:
040184             0258*  ; enable all the channels
040184 21 8F 01 04 0259*      ld hl, enable_channels_cmd
040188 01 91 00 00 0260*      ld bc, enable_channels_end - enable_channels_cmd
04018C 5B DF       0261*      rst.lil $18
04018E C9          0262*      ret
04018F             0263*  enable_channels_cmd:
04018F 17 00 85 03 0264*      db 23, 0, $85, 3, 8
       08          
040194 17 00 85 04 0265*      db 23, 0, $85, 4, 8
       08          
040199 17 00 85 05 0266*      db 23, 0, $85, 5, 8
       08          
04019E 17 00 85 06 0267*      db 23, 0, $85, 6, 8
       08          
0401A3 17 00 85 07 0268*      db 23, 0, $85, 7, 8
       08          
0401A8 17 00 85 08 0269*      db 23, 0, $85, 8, 8
       08          
0401AD 17 00 85 09 0270*      db 23, 0, $85, 9, 8
       08          
0401B2 17 00 85 0A 0271*      db 23, 0, $85, 10, 8
       08          
0401B7 17 00 85 0B 0272*      db 23, 0, $85, 11, 8
       08          
0401BC 17 00 85 0C 0273*      db 23, 0, $85, 12, 8
       08          
0401C1 17 00 85 0D 0274*      db 23, 0, $85, 13, 8
       08          
0401C6 17 00 85 0E 0275*      db 23, 0, $85, 14, 8
       08          
0401CB 17 00 85 0F 0276*      db 23, 0, $85, 15, 8
       08          
0401D0 17 00 85 10 0277*      db 23, 0, $85, 16, 8
       08          
0401D5 17 00 85 11 0278*      db 23, 0, $85, 17, 8
       08          
0401DA 17 00 85 12 0279*      db 23, 0, $85, 18, 8
       08          
0401DF 17 00 85 13 0280*      db 23, 0, $85, 19, 8
       08          
0401E4 17 00 85 14 0281*      db 23, 0, $85, 20, 8
       08          
0401E9 17 00 85 15 0282*      db 23, 0, $85, 21, 8
       08          
0401EE 17 00 85 16 0283*      db 23, 0, $85, 22, 8
       08          
0401F3 17 00 85 17 0284*      db 23, 0, $85, 23, 8
       08          
0401F8 17 00 85 18 0285*      db 23, 0, $85, 24, 8
       08          
0401FD 17 00 85 19 0286*      db 23, 0, $85, 25, 8
       08          
040202 17 00 85 1A 0287*      db 23, 0, $85, 26, 8
       08          
040207 17 00 85 1B 0288*      db 23, 0, $85, 27, 8
       08          
04020C 17 00 85 1C 0289*      db 23, 0, $85, 28, 8
       08          
040211 17 00 85 1D 0290*      db 23, 0, $85, 29, 8
       08          
040216 17 00 85 1E 0291*      db 23, 0, $85, 30, 8
       08          
04021B 17 00 85 1F 0292*      db 23, 0, $85, 31, 8
       08          
040220             0293*  enable_channels_end:
040220             0013   	include "src/asm/images.asm"
040220             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
040220             0002*  
040220             0003*  ; cube buffer ids:
040220             0004*  BUF_10_004: equ 0x0100
040220             0005*  BUF_10_009: equ 0x0101
040220             0006*  BUF_10_010: equ 0x0102
040220             0007*  BUF_10_011: equ 0x0103
040220             0008*  BUF_10_012: equ 0x0104
040220             0009*  BUF_10_013: equ 0x0105
040220             0010*  BUF_10_014: equ 0x0106
040220             0011*  BUF_10_015: equ 0x0107
040220             0012*  BUF_10_016: equ 0x0108
040220             0013*  BUF_10_020: equ 0x0109
040220             0014*  BUF_10_024: equ 0x010A
040220             0015*  BUF_10_025: equ 0x010B
040220             0016*  BUF_10_026: equ 0x010C
040220             0017*  BUF_10_027: equ 0x010D
040220             0018*  BUF_10_028: equ 0x010E
040220             0019*  BUF_10_029: equ 0x010F
040220             0020*  BUF_10_032: equ 0x0110
040220             0021*  BUF_10_035: equ 0x0111
040220             0022*  BUF_10_036: equ 0x0112
040220             0023*  BUF_10_037: equ 0x0113
040220             0024*  BUF_10_038: equ 0x0114
040220             0025*  BUF_10_040: equ 0x0115
040220             0026*  BUF_10_042: equ 0x0116
040220             0027*  BUF_10_043: equ 0x0117
040220             0028*  BUF_10_044: equ 0x0118
040220             0029*  BUF_11_004: equ 0x0119
040220             0030*  BUF_11_009: equ 0x011A
040220             0031*  BUF_11_010: equ 0x011B
040220             0032*  BUF_11_011: equ 0x011C
040220             0033*  BUF_11_012: equ 0x011D
040220             0034*  BUF_11_013: equ 0x011E
040220             0035*  BUF_11_014: equ 0x011F
040220             0036*  BUF_11_015: equ 0x0120
040220             0037*  BUF_11_016: equ 0x0121
040220             0038*  BUF_11_020: equ 0x0122
040220             0039*  BUF_11_024: equ 0x0123
040220             0040*  BUF_11_025: equ 0x0124
040220             0041*  BUF_11_026: equ 0x0125
040220             0042*  BUF_11_027: equ 0x0126
040220             0043*  BUF_11_028: equ 0x0127
040220             0044*  BUF_11_029: equ 0x0128
040220             0045*  BUF_11_032: equ 0x0129
040220             0046*  BUF_11_035: equ 0x012A
040220             0047*  BUF_11_036: equ 0x012B
040220             0048*  BUF_11_037: equ 0x012C
040220             0049*  BUF_11_038: equ 0x012D
040220             0050*  BUF_11_040: equ 0x012E
040220             0051*  BUF_11_042: equ 0x012F
040220             0052*  BUF_11_043: equ 0x0130
040220             0053*  BUF_11_044: equ 0x0131
040220             0054*  BUF_12_004: equ 0x0132
040220             0055*  BUF_12_009: equ 0x0133
040220             0056*  BUF_12_010: equ 0x0134
040220             0057*  BUF_12_011: equ 0x0135
040220             0058*  BUF_12_012: equ 0x0136
040220             0059*  BUF_12_013: equ 0x0137
040220             0060*  BUF_12_014: equ 0x0138
040220             0061*  BUF_12_015: equ 0x0139
040220             0062*  BUF_12_016: equ 0x013A
040220             0063*  BUF_12_020: equ 0x013B
040220             0064*  BUF_12_024: equ 0x013C
040220             0065*  BUF_12_025: equ 0x013D
040220             0066*  BUF_12_026: equ 0x013E
040220             0067*  BUF_12_027: equ 0x013F
040220             0068*  BUF_12_028: equ 0x0140
040220             0069*  BUF_12_029: equ 0x0141
040220             0070*  BUF_12_032: equ 0x0142
040220             0071*  BUF_12_035: equ 0x0143
040220             0072*  BUF_12_036: equ 0x0144
040220             0073*  BUF_12_037: equ 0x0145
040220             0074*  BUF_12_038: equ 0x0146
040220             0075*  BUF_12_040: equ 0x0147
040220             0076*  BUF_12_042: equ 0x0148
040220             0077*  BUF_12_043: equ 0x0149
040220             0078*  BUF_12_044: equ 0x014A
040220             0079*  BUF_13_004: equ 0x014B
040220             0080*  BUF_13_009: equ 0x014C
040220             0081*  BUF_13_010: equ 0x014D
040220             0082*  BUF_13_011: equ 0x014E
040220             0083*  BUF_13_012: equ 0x014F
040220             0084*  BUF_13_013: equ 0x0150
040220             0085*  BUF_13_014: equ 0x0151
040220             0086*  BUF_13_015: equ 0x0152
040220             0087*  BUF_13_016: equ 0x0153
040220             0088*  BUF_13_020: equ 0x0154
040220             0089*  BUF_13_024: equ 0x0155
040220             0090*  BUF_13_025: equ 0x0156
040220             0091*  BUF_13_026: equ 0x0157
040220             0092*  BUF_13_027: equ 0x0158
040220             0093*  BUF_13_028: equ 0x0159
040220             0094*  BUF_13_029: equ 0x015A
040220             0095*  BUF_13_032: equ 0x015B
040220             0096*  BUF_13_035: equ 0x015C
040220             0097*  BUF_13_036: equ 0x015D
040220             0098*  BUF_13_037: equ 0x015E
040220             0099*  BUF_13_038: equ 0x015F
040220             0100*  BUF_13_040: equ 0x0160
040220             0101*  BUF_13_042: equ 0x0161
040220             0102*  BUF_13_043: equ 0x0162
040220             0103*  BUF_13_044: equ 0x0163
040220             0104*  BUF_14_004: equ 0x0164
040220             0105*  BUF_14_009: equ 0x0165
040220             0106*  BUF_14_010: equ 0x0166
040220             0107*  BUF_14_011: equ 0x0167
040220             0108*  BUF_14_012: equ 0x0168
040220             0109*  BUF_14_013: equ 0x0169
040220             0110*  BUF_14_014: equ 0x016A
040220             0111*  BUF_14_015: equ 0x016B
040220             0112*  BUF_14_016: equ 0x016C
040220             0113*  BUF_14_020: equ 0x016D
040220             0114*  BUF_14_024: equ 0x016E
040220             0115*  BUF_14_025: equ 0x016F
040220             0116*  BUF_14_026: equ 0x0170
040220             0117*  BUF_14_027: equ 0x0171
040220             0118*  BUF_14_028: equ 0x0172
040220             0119*  BUF_14_029: equ 0x0173
040220             0120*  BUF_14_032: equ 0x0174
040220             0121*  BUF_14_035: equ 0x0175
040220             0122*  BUF_14_036: equ 0x0176
040220             0123*  BUF_14_037: equ 0x0177
040220             0124*  BUF_14_038: equ 0x0178
040220             0125*  BUF_14_040: equ 0x0179
040220             0126*  BUF_14_042: equ 0x017A
040220             0127*  BUF_14_043: equ 0x017B
040220             0128*  BUF_14_044: equ 0x017C
040220             0129*  BUF_15_004: equ 0x017D
040220             0130*  BUF_15_009: equ 0x017E
040220             0131*  BUF_15_010: equ 0x017F
040220             0132*  BUF_15_011: equ 0x0180
040220             0133*  BUF_15_012: equ 0x0181
040220             0134*  BUF_15_013: equ 0x0182
040220             0135*  BUF_15_014: equ 0x0183
040220             0136*  BUF_15_015: equ 0x0184
040220             0137*  BUF_15_016: equ 0x0185
040220             0138*  BUF_15_020: equ 0x0186
040220             0139*  BUF_15_024: equ 0x0187
040220             0140*  BUF_15_025: equ 0x0188
040220             0141*  BUF_15_026: equ 0x0189
040220             0142*  BUF_15_027: equ 0x018A
040220             0143*  BUF_15_028: equ 0x018B
040220             0144*  BUF_15_029: equ 0x018C
040220             0145*  BUF_15_032: equ 0x018D
040220             0146*  BUF_15_035: equ 0x018E
040220             0147*  BUF_15_036: equ 0x018F
040220             0148*  BUF_15_037: equ 0x0190
040220             0149*  BUF_15_038: equ 0x0191
040220             0150*  BUF_15_040: equ 0x0192
040220             0151*  BUF_15_042: equ 0x0193
040220             0152*  BUF_15_043: equ 0x0194
040220             0153*  BUF_15_044: equ 0x0195
040220             0154*  BUF_16_004: equ 0x0196
040220             0155*  BUF_16_009: equ 0x0197
040220             0156*  BUF_16_010: equ 0x0198
040220             0157*  BUF_16_011: equ 0x0199
040220             0158*  BUF_16_012: equ 0x019A
040220             0159*  BUF_16_013: equ 0x019B
040220             0160*  BUF_16_014: equ 0x019C
040220             0161*  BUF_16_015: equ 0x019D
040220             0162*  BUF_16_016: equ 0x019E
040220             0163*  BUF_16_020: equ 0x019F
040220             0164*  BUF_16_024: equ 0x01A0
040220             0165*  BUF_16_025: equ 0x01A1
040220             0166*  BUF_16_026: equ 0x01A2
040220             0167*  BUF_16_027: equ 0x01A3
040220             0168*  BUF_16_028: equ 0x01A4
040220             0169*  BUF_16_029: equ 0x01A5
040220             0170*  BUF_16_032: equ 0x01A6
040220             0171*  BUF_16_035: equ 0x01A7
040220             0172*  BUF_16_036: equ 0x01A8
040220             0173*  BUF_16_037: equ 0x01A9
040220             0174*  BUF_16_038: equ 0x01AA
040220             0175*  BUF_16_040: equ 0x01AB
040220             0176*  BUF_16_042: equ 0x01AC
040220             0177*  BUF_16_043: equ 0x01AD
040220             0178*  BUF_16_044: equ 0x01AE
040220             0179*  BUF_17_004: equ 0x01AF
040220             0180*  BUF_17_009: equ 0x01B0
040220             0181*  BUF_17_010: equ 0x01B1
040220             0182*  BUF_17_011: equ 0x01B2
040220             0183*  BUF_17_012: equ 0x01B3
040220             0184*  BUF_17_013: equ 0x01B4
040220             0185*  BUF_17_014: equ 0x01B5
040220             0186*  BUF_17_015: equ 0x01B6
040220             0187*  BUF_17_016: equ 0x01B7
040220             0188*  BUF_17_020: equ 0x01B8
040220             0189*  BUF_17_024: equ 0x01B9
040220             0190*  BUF_17_025: equ 0x01BA
040220             0191*  BUF_17_026: equ 0x01BB
040220             0192*  BUF_17_027: equ 0x01BC
040220             0193*  BUF_17_028: equ 0x01BD
040220             0194*  BUF_17_029: equ 0x01BE
040220             0195*  BUF_17_032: equ 0x01BF
040220             0196*  BUF_17_035: equ 0x01C0
040220             0197*  BUF_17_036: equ 0x01C1
040220             0198*  BUF_17_037: equ 0x01C2
040220             0199*  BUF_17_038: equ 0x01C3
040220             0200*  BUF_17_040: equ 0x01C4
040220             0201*  BUF_17_042: equ 0x01C5
040220             0202*  BUF_17_043: equ 0x01C6
040220             0203*  BUF_17_044: equ 0x01C7
040220             0204*  BUF_57_004: equ 0x01C8
040220             0205*  BUF_57_009: equ 0x01C9
040220             0206*  BUF_57_010: equ 0x01CA
040220             0207*  BUF_57_011: equ 0x01CB
040220             0208*  BUF_57_012: equ 0x01CC
040220             0209*  BUF_57_013: equ 0x01CD
040220             0210*  BUF_57_014: equ 0x01CE
040220             0211*  BUF_57_015: equ 0x01CF
040220             0212*  BUF_57_016: equ 0x01D0
040220             0213*  BUF_57_020: equ 0x01D1
040220             0214*  BUF_57_024: equ 0x01D2
040220             0215*  BUF_57_025: equ 0x01D3
040220             0216*  BUF_57_026: equ 0x01D4
040220             0217*  BUF_57_027: equ 0x01D5
040220             0218*  BUF_57_028: equ 0x01D6
040220             0219*  BUF_57_029: equ 0x01D7
040220             0220*  BUF_57_032: equ 0x01D8
040220             0221*  BUF_57_035: equ 0x01D9
040220             0222*  BUF_57_036: equ 0x01DA
040220             0223*  BUF_57_037: equ 0x01DB
040220             0224*  BUF_57_038: equ 0x01DC
040220             0225*  BUF_57_040: equ 0x01DD
040220             0226*  BUF_57_042: equ 0x01DE
040220             0227*  BUF_57_043: equ 0x01DF
040220             0228*  BUF_57_044: equ 0x01E0
040220             0229*  BUF_58_004: equ 0x01E1
040220             0230*  BUF_58_009: equ 0x01E2
040220             0231*  BUF_58_010: equ 0x01E3
040220             0232*  BUF_58_011: equ 0x01E4
040220             0233*  BUF_58_012: equ 0x01E5
040220             0234*  BUF_58_013: equ 0x01E6
040220             0235*  BUF_58_014: equ 0x01E7
040220             0236*  BUF_58_015: equ 0x01E8
040220             0237*  BUF_58_016: equ 0x01E9
040220             0238*  BUF_58_020: equ 0x01EA
040220             0239*  BUF_58_024: equ 0x01EB
040220             0240*  BUF_58_025: equ 0x01EC
040220             0241*  BUF_58_026: equ 0x01ED
040220             0242*  BUF_58_027: equ 0x01EE
040220             0243*  BUF_58_028: equ 0x01EF
040220             0244*  BUF_58_029: equ 0x01F0
040220             0245*  BUF_58_032: equ 0x01F1
040220             0246*  BUF_58_035: equ 0x01F2
040220             0247*  BUF_58_036: equ 0x01F3
040220             0248*  BUF_58_037: equ 0x01F4
040220             0249*  BUF_58_038: equ 0x01F5
040220             0250*  BUF_58_040: equ 0x01F6
040220             0251*  BUF_58_042: equ 0x01F7
040220             0252*  BUF_58_043: equ 0x01F8
040220             0253*  BUF_58_044: equ 0x01F9
040220             0254*  BUF_59_004: equ 0x01FA
040220             0255*  BUF_59_009: equ 0x01FB
040220             0256*  BUF_59_010: equ 0x01FC
040220             0257*  BUF_59_011: equ 0x01FD
040220             0258*  BUF_59_012: equ 0x01FE
040220             0259*  BUF_59_013: equ 0x01FF
040220             0260*  BUF_59_014: equ 0x0200
040220             0261*  BUF_59_015: equ 0x0201
040220             0262*  BUF_59_016: equ 0x0202
040220             0263*  BUF_59_020: equ 0x0203
040220             0264*  BUF_59_024: equ 0x0204
040220             0265*  BUF_59_025: equ 0x0205
040220             0266*  BUF_59_026: equ 0x0206
040220             0267*  BUF_59_027: equ 0x0207
040220             0268*  BUF_59_028: equ 0x0208
040220             0269*  BUF_59_029: equ 0x0209
040220             0270*  BUF_59_032: equ 0x020A
040220             0271*  BUF_59_035: equ 0x020B
040220             0272*  BUF_59_036: equ 0x020C
040220             0273*  BUF_59_037: equ 0x020D
040220             0274*  BUF_59_038: equ 0x020E
040220             0275*  BUF_59_040: equ 0x020F
040220             0276*  BUF_59_042: equ 0x0210
040220             0277*  BUF_59_043: equ 0x0211
040220             0278*  BUF_59_044: equ 0x0212
040220             0279*  
040220             0280*  cube_num_panels: equ 275
040220             0281*  
040220             0282*  ; cube buffer id reverse lookup:
040220             0283*  cube_buffer_id_lut:
040220 00 01 00    0284*  	dl BUF_10_004
040223 01 01 00    0285*  	dl BUF_10_009
040226 02 01 00    0286*  	dl BUF_10_010
040229 03 01 00    0287*  	dl BUF_10_011
04022C 04 01 00    0288*  	dl BUF_10_012
04022F 05 01 00    0289*  	dl BUF_10_013
040232 06 01 00    0290*  	dl BUF_10_014
040235 07 01 00    0291*  	dl BUF_10_015
040238 08 01 00    0292*  	dl BUF_10_016
04023B 09 01 00    0293*  	dl BUF_10_020
04023E 0A 01 00    0294*  	dl BUF_10_024
040241 0B 01 00    0295*  	dl BUF_10_025
040244 0C 01 00    0296*  	dl BUF_10_026
040247 0D 01 00    0297*  	dl BUF_10_027
04024A 0E 01 00    0298*  	dl BUF_10_028
04024D 0F 01 00    0299*  	dl BUF_10_029
040250 10 01 00    0300*  	dl BUF_10_032
040253 11 01 00    0301*  	dl BUF_10_035
040256 12 01 00    0302*  	dl BUF_10_036
040259 13 01 00    0303*  	dl BUF_10_037
04025C 14 01 00    0304*  	dl BUF_10_038
04025F 15 01 00    0305*  	dl BUF_10_040
040262 16 01 00    0306*  	dl BUF_10_042
040265 17 01 00    0307*  	dl BUF_10_043
040268 18 01 00    0308*  	dl BUF_10_044
04026B 19 01 00    0309*  	dl BUF_11_004
04026E 1A 01 00    0310*  	dl BUF_11_009
040271 1B 01 00    0311*  	dl BUF_11_010
040274 1C 01 00    0312*  	dl BUF_11_011
040277 1D 01 00    0313*  	dl BUF_11_012
04027A 1E 01 00    0314*  	dl BUF_11_013
04027D 1F 01 00    0315*  	dl BUF_11_014
040280 20 01 00    0316*  	dl BUF_11_015
040283 21 01 00    0317*  	dl BUF_11_016
040286 22 01 00    0318*  	dl BUF_11_020
040289 23 01 00    0319*  	dl BUF_11_024
04028C 24 01 00    0320*  	dl BUF_11_025
04028F 25 01 00    0321*  	dl BUF_11_026
040292 26 01 00    0322*  	dl BUF_11_027
040295 27 01 00    0323*  	dl BUF_11_028
040298 28 01 00    0324*  	dl BUF_11_029
04029B 29 01 00    0325*  	dl BUF_11_032
04029E 2A 01 00    0326*  	dl BUF_11_035
0402A1 2B 01 00    0327*  	dl BUF_11_036
0402A4 2C 01 00    0328*  	dl BUF_11_037
0402A7 2D 01 00    0329*  	dl BUF_11_038
0402AA 2E 01 00    0330*  	dl BUF_11_040
0402AD 2F 01 00    0331*  	dl BUF_11_042
0402B0 30 01 00    0332*  	dl BUF_11_043
0402B3 31 01 00    0333*  	dl BUF_11_044
0402B6 32 01 00    0334*  	dl BUF_12_004
0402B9 33 01 00    0335*  	dl BUF_12_009
0402BC 34 01 00    0336*  	dl BUF_12_010
0402BF 35 01 00    0337*  	dl BUF_12_011
0402C2 36 01 00    0338*  	dl BUF_12_012
0402C5 37 01 00    0339*  	dl BUF_12_013
0402C8 38 01 00    0340*  	dl BUF_12_014
0402CB 39 01 00    0341*  	dl BUF_12_015
0402CE 3A 01 00    0342*  	dl BUF_12_016
0402D1 3B 01 00    0343*  	dl BUF_12_020
0402D4 3C 01 00    0344*  	dl BUF_12_024
0402D7 3D 01 00    0345*  	dl BUF_12_025
0402DA 3E 01 00    0346*  	dl BUF_12_026
0402DD 3F 01 00    0347*  	dl BUF_12_027
0402E0 40 01 00    0348*  	dl BUF_12_028
0402E3 41 01 00    0349*  	dl BUF_12_029
0402E6 42 01 00    0350*  	dl BUF_12_032
0402E9 43 01 00    0351*  	dl BUF_12_035
0402EC 44 01 00    0352*  	dl BUF_12_036
0402EF 45 01 00    0353*  	dl BUF_12_037
0402F2 46 01 00    0354*  	dl BUF_12_038
0402F5 47 01 00    0355*  	dl BUF_12_040
0402F8 48 01 00    0356*  	dl BUF_12_042
0402FB 49 01 00    0357*  	dl BUF_12_043
0402FE 4A 01 00    0358*  	dl BUF_12_044
040301 4B 01 00    0359*  	dl BUF_13_004
040304 4C 01 00    0360*  	dl BUF_13_009
040307 4D 01 00    0361*  	dl BUF_13_010
04030A 4E 01 00    0362*  	dl BUF_13_011
04030D 4F 01 00    0363*  	dl BUF_13_012
040310 50 01 00    0364*  	dl BUF_13_013
040313 51 01 00    0365*  	dl BUF_13_014
040316 52 01 00    0366*  	dl BUF_13_015
040319 53 01 00    0367*  	dl BUF_13_016
04031C 54 01 00    0368*  	dl BUF_13_020
04031F 55 01 00    0369*  	dl BUF_13_024
040322 56 01 00    0370*  	dl BUF_13_025
040325 57 01 00    0371*  	dl BUF_13_026
040328 58 01 00    0372*  	dl BUF_13_027
04032B 59 01 00    0373*  	dl BUF_13_028
04032E 5A 01 00    0374*  	dl BUF_13_029
040331 5B 01 00    0375*  	dl BUF_13_032
040334 5C 01 00    0376*  	dl BUF_13_035
040337 5D 01 00    0377*  	dl BUF_13_036
04033A 5E 01 00    0378*  	dl BUF_13_037
04033D 5F 01 00    0379*  	dl BUF_13_038
040340 60 01 00    0380*  	dl BUF_13_040
040343 61 01 00    0381*  	dl BUF_13_042
040346 62 01 00    0382*  	dl BUF_13_043
040349 63 01 00    0383*  	dl BUF_13_044
04034C 64 01 00    0384*  	dl BUF_14_004
04034F 65 01 00    0385*  	dl BUF_14_009
040352 66 01 00    0386*  	dl BUF_14_010
040355 67 01 00    0387*  	dl BUF_14_011
040358 68 01 00    0388*  	dl BUF_14_012
04035B 69 01 00    0389*  	dl BUF_14_013
04035E 6A 01 00    0390*  	dl BUF_14_014
040361 6B 01 00    0391*  	dl BUF_14_015
040364 6C 01 00    0392*  	dl BUF_14_016
040367 6D 01 00    0393*  	dl BUF_14_020
04036A 6E 01 00    0394*  	dl BUF_14_024
04036D 6F 01 00    0395*  	dl BUF_14_025
040370 70 01 00    0396*  	dl BUF_14_026
040373 71 01 00    0397*  	dl BUF_14_027
040376 72 01 00    0398*  	dl BUF_14_028
040379 73 01 00    0399*  	dl BUF_14_029
04037C 74 01 00    0400*  	dl BUF_14_032
04037F 75 01 00    0401*  	dl BUF_14_035
040382 76 01 00    0402*  	dl BUF_14_036
040385 77 01 00    0403*  	dl BUF_14_037
040388 78 01 00    0404*  	dl BUF_14_038
04038B 79 01 00    0405*  	dl BUF_14_040
04038E 7A 01 00    0406*  	dl BUF_14_042
040391 7B 01 00    0407*  	dl BUF_14_043
040394 7C 01 00    0408*  	dl BUF_14_044
040397 7D 01 00    0409*  	dl BUF_15_004
04039A 7E 01 00    0410*  	dl BUF_15_009
04039D 7F 01 00    0411*  	dl BUF_15_010
0403A0 80 01 00    0412*  	dl BUF_15_011
0403A3 81 01 00    0413*  	dl BUF_15_012
0403A6 82 01 00    0414*  	dl BUF_15_013
0403A9 83 01 00    0415*  	dl BUF_15_014
0403AC 84 01 00    0416*  	dl BUF_15_015
0403AF 85 01 00    0417*  	dl BUF_15_016
0403B2 86 01 00    0418*  	dl BUF_15_020
0403B5 87 01 00    0419*  	dl BUF_15_024
0403B8 88 01 00    0420*  	dl BUF_15_025
0403BB 89 01 00    0421*  	dl BUF_15_026
0403BE 8A 01 00    0422*  	dl BUF_15_027
0403C1 8B 01 00    0423*  	dl BUF_15_028
0403C4 8C 01 00    0424*  	dl BUF_15_029
0403C7 8D 01 00    0425*  	dl BUF_15_032
0403CA 8E 01 00    0426*  	dl BUF_15_035
0403CD 8F 01 00    0427*  	dl BUF_15_036
0403D0 90 01 00    0428*  	dl BUF_15_037
0403D3 91 01 00    0429*  	dl BUF_15_038
0403D6 92 01 00    0430*  	dl BUF_15_040
0403D9 93 01 00    0431*  	dl BUF_15_042
0403DC 94 01 00    0432*  	dl BUF_15_043
0403DF 95 01 00    0433*  	dl BUF_15_044
0403E2 96 01 00    0434*  	dl BUF_16_004
0403E5 97 01 00    0435*  	dl BUF_16_009
0403E8 98 01 00    0436*  	dl BUF_16_010
0403EB 99 01 00    0437*  	dl BUF_16_011
0403EE 9A 01 00    0438*  	dl BUF_16_012
0403F1 9B 01 00    0439*  	dl BUF_16_013
0403F4 9C 01 00    0440*  	dl BUF_16_014
0403F7 9D 01 00    0441*  	dl BUF_16_015
0403FA 9E 01 00    0442*  	dl BUF_16_016
0403FD 9F 01 00    0443*  	dl BUF_16_020
040400 A0 01 00    0444*  	dl BUF_16_024
040403 A1 01 00    0445*  	dl BUF_16_025
040406 A2 01 00    0446*  	dl BUF_16_026
040409 A3 01 00    0447*  	dl BUF_16_027
04040C A4 01 00    0448*  	dl BUF_16_028
04040F A5 01 00    0449*  	dl BUF_16_029
040412 A6 01 00    0450*  	dl BUF_16_032
040415 A7 01 00    0451*  	dl BUF_16_035
040418 A8 01 00    0452*  	dl BUF_16_036
04041B A9 01 00    0453*  	dl BUF_16_037
04041E AA 01 00    0454*  	dl BUF_16_038
040421 AB 01 00    0455*  	dl BUF_16_040
040424 AC 01 00    0456*  	dl BUF_16_042
040427 AD 01 00    0457*  	dl BUF_16_043
04042A AE 01 00    0458*  	dl BUF_16_044
04042D AF 01 00    0459*  	dl BUF_17_004
040430 B0 01 00    0460*  	dl BUF_17_009
040433 B1 01 00    0461*  	dl BUF_17_010
040436 B2 01 00    0462*  	dl BUF_17_011
040439 B3 01 00    0463*  	dl BUF_17_012
04043C B4 01 00    0464*  	dl BUF_17_013
04043F B5 01 00    0465*  	dl BUF_17_014
040442 B6 01 00    0466*  	dl BUF_17_015
040445 B7 01 00    0467*  	dl BUF_17_016
040448 B8 01 00    0468*  	dl BUF_17_020
04044B B9 01 00    0469*  	dl BUF_17_024
04044E BA 01 00    0470*  	dl BUF_17_025
040451 BB 01 00    0471*  	dl BUF_17_026
040454 BC 01 00    0472*  	dl BUF_17_027
040457 BD 01 00    0473*  	dl BUF_17_028
04045A BE 01 00    0474*  	dl BUF_17_029
04045D BF 01 00    0475*  	dl BUF_17_032
040460 C0 01 00    0476*  	dl BUF_17_035
040463 C1 01 00    0477*  	dl BUF_17_036
040466 C2 01 00    0478*  	dl BUF_17_037
040469 C3 01 00    0479*  	dl BUF_17_038
04046C C4 01 00    0480*  	dl BUF_17_040
04046F C5 01 00    0481*  	dl BUF_17_042
040472 C6 01 00    0482*  	dl BUF_17_043
040475 C7 01 00    0483*  	dl BUF_17_044
040478 C8 01 00    0484*  	dl BUF_57_004
04047B C9 01 00    0485*  	dl BUF_57_009
04047E CA 01 00    0486*  	dl BUF_57_010
040481 CB 01 00    0487*  	dl BUF_57_011
040484 CC 01 00    0488*  	dl BUF_57_012
040487 CD 01 00    0489*  	dl BUF_57_013
04048A CE 01 00    0490*  	dl BUF_57_014
04048D CF 01 00    0491*  	dl BUF_57_015
040490 D0 01 00    0492*  	dl BUF_57_016
040493 D1 01 00    0493*  	dl BUF_57_020
040496 D2 01 00    0494*  	dl BUF_57_024
040499 D3 01 00    0495*  	dl BUF_57_025
04049C D4 01 00    0496*  	dl BUF_57_026
04049F D5 01 00    0497*  	dl BUF_57_027
0404A2 D6 01 00    0498*  	dl BUF_57_028
0404A5 D7 01 00    0499*  	dl BUF_57_029
0404A8 D8 01 00    0500*  	dl BUF_57_032
0404AB D9 01 00    0501*  	dl BUF_57_035
0404AE DA 01 00    0502*  	dl BUF_57_036
0404B1 DB 01 00    0503*  	dl BUF_57_037
0404B4 DC 01 00    0504*  	dl BUF_57_038
0404B7 DD 01 00    0505*  	dl BUF_57_040
0404BA DE 01 00    0506*  	dl BUF_57_042
0404BD DF 01 00    0507*  	dl BUF_57_043
0404C0 E0 01 00    0508*  	dl BUF_57_044
0404C3 E1 01 00    0509*  	dl BUF_58_004
0404C6 E2 01 00    0510*  	dl BUF_58_009
0404C9 E3 01 00    0511*  	dl BUF_58_010
0404CC E4 01 00    0512*  	dl BUF_58_011
0404CF E5 01 00    0513*  	dl BUF_58_012
0404D2 E6 01 00    0514*  	dl BUF_58_013
0404D5 E7 01 00    0515*  	dl BUF_58_014
0404D8 E8 01 00    0516*  	dl BUF_58_015
0404DB E9 01 00    0517*  	dl BUF_58_016
0404DE EA 01 00    0518*  	dl BUF_58_020
0404E1 EB 01 00    0519*  	dl BUF_58_024
0404E4 EC 01 00    0520*  	dl BUF_58_025
0404E7 ED 01 00    0521*  	dl BUF_58_026
0404EA EE 01 00    0522*  	dl BUF_58_027
0404ED EF 01 00    0523*  	dl BUF_58_028
0404F0 F0 01 00    0524*  	dl BUF_58_029
0404F3 F1 01 00    0525*  	dl BUF_58_032
0404F6 F2 01 00    0526*  	dl BUF_58_035
0404F9 F3 01 00    0527*  	dl BUF_58_036
0404FC F4 01 00    0528*  	dl BUF_58_037
0404FF F5 01 00    0529*  	dl BUF_58_038
040502 F6 01 00    0530*  	dl BUF_58_040
040505 F7 01 00    0531*  	dl BUF_58_042
040508 F8 01 00    0532*  	dl BUF_58_043
04050B F9 01 00    0533*  	dl BUF_58_044
04050E FA 01 00    0534*  	dl BUF_59_004
040511 FB 01 00    0535*  	dl BUF_59_009
040514 FC 01 00    0536*  	dl BUF_59_010
040517 FD 01 00    0537*  	dl BUF_59_011
04051A FE 01 00    0538*  	dl BUF_59_012
04051D FF 01 00    0539*  	dl BUF_59_013
040520 00 02 00    0540*  	dl BUF_59_014
040523 01 02 00    0541*  	dl BUF_59_015
040526 02 02 00    0542*  	dl BUF_59_016
040529 03 02 00    0543*  	dl BUF_59_020
04052C 04 02 00    0544*  	dl BUF_59_024
04052F 05 02 00    0545*  	dl BUF_59_025
040532 06 02 00    0546*  	dl BUF_59_026
040535 07 02 00    0547*  	dl BUF_59_027
040538 08 02 00    0548*  	dl BUF_59_028
04053B 09 02 00    0549*  	dl BUF_59_029
04053E 0A 02 00    0550*  	dl BUF_59_032
040541 0B 02 00    0551*  	dl BUF_59_035
040544 0C 02 00    0552*  	dl BUF_59_036
040547 0D 02 00    0553*  	dl BUF_59_037
04054A 0E 02 00    0554*  	dl BUF_59_038
04054D 0F 02 00    0555*  	dl BUF_59_040
040550 10 02 00    0556*  	dl BUF_59_042
040553 11 02 00    0557*  	dl BUF_59_043
040556 12 02 00    0558*  	dl BUF_59_044
040559             0559*  
040559             0560*  ; cube load routines jump table:
040559             0561*  cube_load_panels_table:
040559 92 08 04    0562*  	dl ld_10_004
04055C BC 08 04    0563*  	dl ld_10_009
04055F E6 08 04    0564*  	dl ld_10_010
040562 10 09 04    0565*  	dl ld_10_011
040565 3A 09 04    0566*  	dl ld_10_012
040568 64 09 04    0567*  	dl ld_10_013
04056B 8E 09 04    0568*  	dl ld_10_014
04056E B8 09 04    0569*  	dl ld_10_015
040571 E2 09 04    0570*  	dl ld_10_016
040574 0C 0A 04    0571*  	dl ld_10_020
040577 36 0A 04    0572*  	dl ld_10_024
04057A 60 0A 04    0573*  	dl ld_10_025
04057D 8A 0A 04    0574*  	dl ld_10_026
040580 B4 0A 04    0575*  	dl ld_10_027
040583 DE 0A 04    0576*  	dl ld_10_028
040586 08 0B 04    0577*  	dl ld_10_029
040589 32 0B 04    0578*  	dl ld_10_032
04058C 5C 0B 04    0579*  	dl ld_10_035
04058F 86 0B 04    0580*  	dl ld_10_036
040592 B0 0B 04    0581*  	dl ld_10_037
040595 DA 0B 04    0582*  	dl ld_10_038
040598 04 0C 04    0583*  	dl ld_10_040
04059B 2E 0C 04    0584*  	dl ld_10_042
04059E 58 0C 04    0585*  	dl ld_10_043
0405A1 82 0C 04    0586*  	dl ld_10_044
0405A4 AC 0C 04    0587*  	dl ld_11_004
0405A7 D6 0C 04    0588*  	dl ld_11_009
0405AA 00 0D 04    0589*  	dl ld_11_010
0405AD 2A 0D 04    0590*  	dl ld_11_011
0405B0 54 0D 04    0591*  	dl ld_11_012
0405B3 7E 0D 04    0592*  	dl ld_11_013
0405B6 A8 0D 04    0593*  	dl ld_11_014
0405B9 D2 0D 04    0594*  	dl ld_11_015
0405BC FC 0D 04    0595*  	dl ld_11_016
0405BF 26 0E 04    0596*  	dl ld_11_020
0405C2 50 0E 04    0597*  	dl ld_11_024
0405C5 7A 0E 04    0598*  	dl ld_11_025
0405C8 A4 0E 04    0599*  	dl ld_11_026
0405CB CE 0E 04    0600*  	dl ld_11_027
0405CE F8 0E 04    0601*  	dl ld_11_028
0405D1 22 0F 04    0602*  	dl ld_11_029
0405D4 4C 0F 04    0603*  	dl ld_11_032
0405D7 76 0F 04    0604*  	dl ld_11_035
0405DA A0 0F 04    0605*  	dl ld_11_036
0405DD CA 0F 04    0606*  	dl ld_11_037
0405E0 F4 0F 04    0607*  	dl ld_11_038
0405E3 1E 10 04    0608*  	dl ld_11_040
0405E6 48 10 04    0609*  	dl ld_11_042
0405E9 72 10 04    0610*  	dl ld_11_043
0405EC 9C 10 04    0611*  	dl ld_11_044
0405EF C6 10 04    0612*  	dl ld_12_004
0405F2 F0 10 04    0613*  	dl ld_12_009
0405F5 1A 11 04    0614*  	dl ld_12_010
0405F8 44 11 04    0615*  	dl ld_12_011
0405FB 6E 11 04    0616*  	dl ld_12_012
0405FE 98 11 04    0617*  	dl ld_12_013
040601 C2 11 04    0618*  	dl ld_12_014
040604 EC 11 04    0619*  	dl ld_12_015
040607 16 12 04    0620*  	dl ld_12_016
04060A 40 12 04    0621*  	dl ld_12_020
04060D 6A 12 04    0622*  	dl ld_12_024
040610 94 12 04    0623*  	dl ld_12_025
040613 BE 12 04    0624*  	dl ld_12_026
040616 E8 12 04    0625*  	dl ld_12_027
040619 12 13 04    0626*  	dl ld_12_028
04061C 3C 13 04    0627*  	dl ld_12_029
04061F 66 13 04    0628*  	dl ld_12_032
040622 90 13 04    0629*  	dl ld_12_035
040625 BA 13 04    0630*  	dl ld_12_036
040628 E4 13 04    0631*  	dl ld_12_037
04062B 0E 14 04    0632*  	dl ld_12_038
04062E 38 14 04    0633*  	dl ld_12_040
040631 62 14 04    0634*  	dl ld_12_042
040634 8C 14 04    0635*  	dl ld_12_043
040637 B6 14 04    0636*  	dl ld_12_044
04063A E0 14 04    0637*  	dl ld_13_004
04063D 0A 15 04    0638*  	dl ld_13_009
040640 34 15 04    0639*  	dl ld_13_010
040643 5E 15 04    0640*  	dl ld_13_011
040646 88 15 04    0641*  	dl ld_13_012
040649 B2 15 04    0642*  	dl ld_13_013
04064C DC 15 04    0643*  	dl ld_13_014
04064F 06 16 04    0644*  	dl ld_13_015
040652 30 16 04    0645*  	dl ld_13_016
040655 5A 16 04    0646*  	dl ld_13_020
040658 84 16 04    0647*  	dl ld_13_024
04065B AE 16 04    0648*  	dl ld_13_025
04065E D8 16 04    0649*  	dl ld_13_026
040661 02 17 04    0650*  	dl ld_13_027
040664 2C 17 04    0651*  	dl ld_13_028
040667 56 17 04    0652*  	dl ld_13_029
04066A 80 17 04    0653*  	dl ld_13_032
04066D AA 17 04    0654*  	dl ld_13_035
040670 D4 17 04    0655*  	dl ld_13_036
040673 FE 17 04    0656*  	dl ld_13_037
040676 28 18 04    0657*  	dl ld_13_038
040679 52 18 04    0658*  	dl ld_13_040
04067C 7C 18 04    0659*  	dl ld_13_042
04067F A6 18 04    0660*  	dl ld_13_043
040682 D0 18 04    0661*  	dl ld_13_044
040685 FA 18 04    0662*  	dl ld_14_004
040688 24 19 04    0663*  	dl ld_14_009
04068B 4E 19 04    0664*  	dl ld_14_010
04068E 78 19 04    0665*  	dl ld_14_011
040691 A2 19 04    0666*  	dl ld_14_012
040694 CC 19 04    0667*  	dl ld_14_013
040697 F6 19 04    0668*  	dl ld_14_014
04069A 20 1A 04    0669*  	dl ld_14_015
04069D 4A 1A 04    0670*  	dl ld_14_016
0406A0 74 1A 04    0671*  	dl ld_14_020
0406A3 9E 1A 04    0672*  	dl ld_14_024
0406A6 C8 1A 04    0673*  	dl ld_14_025
0406A9 F2 1A 04    0674*  	dl ld_14_026
0406AC 1C 1B 04    0675*  	dl ld_14_027
0406AF 46 1B 04    0676*  	dl ld_14_028
0406B2 70 1B 04    0677*  	dl ld_14_029
0406B5 9A 1B 04    0678*  	dl ld_14_032
0406B8 C4 1B 04    0679*  	dl ld_14_035
0406BB EE 1B 04    0680*  	dl ld_14_036
0406BE 18 1C 04    0681*  	dl ld_14_037
0406C1 42 1C 04    0682*  	dl ld_14_038
0406C4 6C 1C 04    0683*  	dl ld_14_040
0406C7 96 1C 04    0684*  	dl ld_14_042
0406CA C0 1C 04    0685*  	dl ld_14_043
0406CD EA 1C 04    0686*  	dl ld_14_044
0406D0 14 1D 04    0687*  	dl ld_15_004
0406D3 3E 1D 04    0688*  	dl ld_15_009
0406D6 68 1D 04    0689*  	dl ld_15_010
0406D9 92 1D 04    0690*  	dl ld_15_011
0406DC BC 1D 04    0691*  	dl ld_15_012
0406DF E6 1D 04    0692*  	dl ld_15_013
0406E2 10 1E 04    0693*  	dl ld_15_014
0406E5 3A 1E 04    0694*  	dl ld_15_015
0406E8 64 1E 04    0695*  	dl ld_15_016
0406EB 8E 1E 04    0696*  	dl ld_15_020
0406EE B8 1E 04    0697*  	dl ld_15_024
0406F1 E2 1E 04    0698*  	dl ld_15_025
0406F4 0C 1F 04    0699*  	dl ld_15_026
0406F7 36 1F 04    0700*  	dl ld_15_027
0406FA 60 1F 04    0701*  	dl ld_15_028
0406FD 8A 1F 04    0702*  	dl ld_15_029
040700 B4 1F 04    0703*  	dl ld_15_032
040703 DE 1F 04    0704*  	dl ld_15_035
040706 08 20 04    0705*  	dl ld_15_036
040709 32 20 04    0706*  	dl ld_15_037
04070C 5C 20 04    0707*  	dl ld_15_038
04070F 86 20 04    0708*  	dl ld_15_040
040712 B0 20 04    0709*  	dl ld_15_042
040715 DA 20 04    0710*  	dl ld_15_043
040718 04 21 04    0711*  	dl ld_15_044
04071B 2E 21 04    0712*  	dl ld_16_004
04071E 58 21 04    0713*  	dl ld_16_009
040721 82 21 04    0714*  	dl ld_16_010
040724 AC 21 04    0715*  	dl ld_16_011
040727 D6 21 04    0716*  	dl ld_16_012
04072A 00 22 04    0717*  	dl ld_16_013
04072D 2A 22 04    0718*  	dl ld_16_014
040730 54 22 04    0719*  	dl ld_16_015
040733 7E 22 04    0720*  	dl ld_16_016
040736 A8 22 04    0721*  	dl ld_16_020
040739 D2 22 04    0722*  	dl ld_16_024
04073C FC 22 04    0723*  	dl ld_16_025
04073F 26 23 04    0724*  	dl ld_16_026
040742 50 23 04    0725*  	dl ld_16_027
040745 7A 23 04    0726*  	dl ld_16_028
040748 A4 23 04    0727*  	dl ld_16_029
04074B CE 23 04    0728*  	dl ld_16_032
04074E F8 23 04    0729*  	dl ld_16_035
040751 22 24 04    0730*  	dl ld_16_036
040754 4C 24 04    0731*  	dl ld_16_037
040757 76 24 04    0732*  	dl ld_16_038
04075A A0 24 04    0733*  	dl ld_16_040
04075D CA 24 04    0734*  	dl ld_16_042
040760 F4 24 04    0735*  	dl ld_16_043
040763 1E 25 04    0736*  	dl ld_16_044
040766 48 25 04    0737*  	dl ld_17_004
040769 72 25 04    0738*  	dl ld_17_009
04076C 9C 25 04    0739*  	dl ld_17_010
04076F C6 25 04    0740*  	dl ld_17_011
040772 F0 25 04    0741*  	dl ld_17_012
040775 1A 26 04    0742*  	dl ld_17_013
040778 44 26 04    0743*  	dl ld_17_014
04077B 6E 26 04    0744*  	dl ld_17_015
04077E 98 26 04    0745*  	dl ld_17_016
040781 C2 26 04    0746*  	dl ld_17_020
040784 EC 26 04    0747*  	dl ld_17_024
040787 16 27 04    0748*  	dl ld_17_025
04078A 40 27 04    0749*  	dl ld_17_026
04078D 6A 27 04    0750*  	dl ld_17_027
040790 94 27 04    0751*  	dl ld_17_028
040793 BE 27 04    0752*  	dl ld_17_029
040796 E8 27 04    0753*  	dl ld_17_032
040799 12 28 04    0754*  	dl ld_17_035
04079C 3C 28 04    0755*  	dl ld_17_036
04079F 66 28 04    0756*  	dl ld_17_037
0407A2 90 28 04    0757*  	dl ld_17_038
0407A5 BA 28 04    0758*  	dl ld_17_040
0407A8 E4 28 04    0759*  	dl ld_17_042
0407AB 0E 29 04    0760*  	dl ld_17_043
0407AE 38 29 04    0761*  	dl ld_17_044
0407B1 62 29 04    0762*  	dl ld_57_004
0407B4 8C 29 04    0763*  	dl ld_57_009
0407B7 B6 29 04    0764*  	dl ld_57_010
0407BA E0 29 04    0765*  	dl ld_57_011
0407BD 0A 2A 04    0766*  	dl ld_57_012
0407C0 34 2A 04    0767*  	dl ld_57_013
0407C3 5E 2A 04    0768*  	dl ld_57_014
0407C6 88 2A 04    0769*  	dl ld_57_015
0407C9 B2 2A 04    0770*  	dl ld_57_016
0407CC DC 2A 04    0771*  	dl ld_57_020
0407CF 06 2B 04    0772*  	dl ld_57_024
0407D2 30 2B 04    0773*  	dl ld_57_025
0407D5 5A 2B 04    0774*  	dl ld_57_026
0407D8 84 2B 04    0775*  	dl ld_57_027
0407DB AE 2B 04    0776*  	dl ld_57_028
0407DE D8 2B 04    0777*  	dl ld_57_029
0407E1 02 2C 04    0778*  	dl ld_57_032
0407E4 2C 2C 04    0779*  	dl ld_57_035
0407E7 56 2C 04    0780*  	dl ld_57_036
0407EA 80 2C 04    0781*  	dl ld_57_037
0407ED AA 2C 04    0782*  	dl ld_57_038
0407F0 D4 2C 04    0783*  	dl ld_57_040
0407F3 FE 2C 04    0784*  	dl ld_57_042
0407F6 28 2D 04    0785*  	dl ld_57_043
0407F9 52 2D 04    0786*  	dl ld_57_044
0407FC 7C 2D 04    0787*  	dl ld_58_004
0407FF A6 2D 04    0788*  	dl ld_58_009
040802 D0 2D 04    0789*  	dl ld_58_010
040805 FA 2D 04    0790*  	dl ld_58_011
040808 24 2E 04    0791*  	dl ld_58_012
04080B 4E 2E 04    0792*  	dl ld_58_013
04080E 78 2E 04    0793*  	dl ld_58_014
040811 A2 2E 04    0794*  	dl ld_58_015
040814 CC 2E 04    0795*  	dl ld_58_016
040817 F6 2E 04    0796*  	dl ld_58_020
04081A 20 2F 04    0797*  	dl ld_58_024
04081D 4A 2F 04    0798*  	dl ld_58_025
040820 74 2F 04    0799*  	dl ld_58_026
040823 9E 2F 04    0800*  	dl ld_58_027
040826 C8 2F 04    0801*  	dl ld_58_028
040829 F2 2F 04    0802*  	dl ld_58_029
04082C 1C 30 04    0803*  	dl ld_58_032
04082F 46 30 04    0804*  	dl ld_58_035
040832 70 30 04    0805*  	dl ld_58_036
040835 9A 30 04    0806*  	dl ld_58_037
040838 C4 30 04    0807*  	dl ld_58_038
04083B EE 30 04    0808*  	dl ld_58_040
04083E 18 31 04    0809*  	dl ld_58_042
040841 42 31 04    0810*  	dl ld_58_043
040844 6C 31 04    0811*  	dl ld_58_044
040847 96 31 04    0812*  	dl ld_59_004
04084A C0 31 04    0813*  	dl ld_59_009
04084D EA 31 04    0814*  	dl ld_59_010
040850 14 32 04    0815*  	dl ld_59_011
040853 3E 32 04    0816*  	dl ld_59_012
040856 68 32 04    0817*  	dl ld_59_013
040859 92 32 04    0818*  	dl ld_59_014
04085C BC 32 04    0819*  	dl ld_59_015
04085F E6 32 04    0820*  	dl ld_59_016
040862 10 33 04    0821*  	dl ld_59_020
040865 3A 33 04    0822*  	dl ld_59_024
040868 64 33 04    0823*  	dl ld_59_025
04086B 8E 33 04    0824*  	dl ld_59_026
04086E B8 33 04    0825*  	dl ld_59_027
040871 E2 33 04    0826*  	dl ld_59_028
040874 0C 34 04    0827*  	dl ld_59_029
040877 36 34 04    0828*  	dl ld_59_032
04087A 60 34 04    0829*  	dl ld_59_035
04087D 8A 34 04    0830*  	dl ld_59_036
040880 B4 34 04    0831*  	dl ld_59_037
040883 DE 34 04    0832*  	dl ld_59_038
040886 08 35 04    0833*  	dl ld_59_040
040889 32 35 04    0834*  	dl ld_59_042
04088C 5C 35 04    0835*  	dl ld_59_043
04088F 86 35 04    0836*  	dl ld_59_044
040892             0837*  
040892             0838*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
040892             0839*  
040892             0840*  ld_10_004:
040892 21 B0 35 04 0841*  	ld hl,F10_004
040896 22 C1 B7 04 0842*  	ld (cur_filename),hl
04089A 11 CB C3 04 0843*  	ld de,filedata
04089E 01 00 00 01 0844*  	ld bc,65536
0408A2 3E 01       0845*  	ld a,mos_load
0408A4 5B CF       0846*  	RST.LIL 08h
0408A6 21 00 01 00 0847*  	ld hl,BUF_10_004
0408AA 01 24 00 00 0848*  	ld bc,36
0408AE 11 23 00 00 0849*  	ld de,35
0408B2 DD 21 EC 04 0850*  	ld ix,1260
       00          
0408B7 CD 3C B9 04 0851*  	call vdu_load_img
0408BB C9          0852*  	ret
0408BC             0853*  
0408BC             0854*  ld_10_009:
0408BC 21 C4 35 04 0855*  	ld hl,F10_009
0408C0 22 C1 B7 04 0856*  	ld (cur_filename),hl
0408C4 11 CB C3 04 0857*  	ld de,filedata
0408C8 01 00 00 01 0858*  	ld bc,65536
0408CC 3E 01       0859*  	ld a,mos_load
0408CE 5B CF       0860*  	RST.LIL 08h
0408D0 21 01 01 00 0861*  	ld hl,BUF_10_009
0408D4 01 23 00 00 0862*  	ld bc,35
0408D8 11 2D 00 00 0863*  	ld de,45
0408DC DD 21 27 06 0864*  	ld ix,1575
       00          
0408E1 CD 3C B9 04 0865*  	call vdu_load_img
0408E5 C9          0866*  	ret
0408E6             0867*  
0408E6             0868*  ld_10_010:
0408E6 21 D8 35 04 0869*  	ld hl,F10_010
0408EA 22 C1 B7 04 0870*  	ld (cur_filename),hl
0408EE 11 CB C3 04 0871*  	ld de,filedata
0408F2 01 00 00 01 0872*  	ld bc,65536
0408F6 3E 01       0873*  	ld a,mos_load
0408F8 5B CF       0874*  	RST.LIL 08h
0408FA 21 02 01 00 0875*  	ld hl,BUF_10_010
0408FE 01 19 00 00 0876*  	ld bc,25
040902 11 2D 00 00 0877*  	ld de,45
040906 DD 21 65 04 0878*  	ld ix,1125
       00          
04090B CD 3C B9 04 0879*  	call vdu_load_img
04090F C9          0880*  	ret
040910             0881*  
040910             0882*  ld_10_011:
040910 21 EC 35 04 0883*  	ld hl,F10_011
040914 22 C1 B7 04 0884*  	ld (cur_filename),hl
040918 11 CB C3 04 0885*  	ld de,filedata
04091C 01 00 00 01 0886*  	ld bc,65536
040920 3E 01       0887*  	ld a,mos_load
040922 5B CF       0888*  	RST.LIL 08h
040924 21 03 01 00 0889*  	ld hl,BUF_10_011
040928 01 0F 00 00 0890*  	ld bc,15
04092C 11 2D 00 00 0891*  	ld de,45
040930 DD 21 A3 02 0892*  	ld ix,675
       00          
040935 CD 3C B9 04 0893*  	call vdu_load_img
040939 C9          0894*  	ret
04093A             0895*  
04093A             0896*  ld_10_012:
04093A 21 00 36 04 0897*  	ld hl,F10_012
04093E 22 C1 B7 04 0898*  	ld (cur_filename),hl
040942 11 CB C3 04 0899*  	ld de,filedata
040946 01 00 00 01 0900*  	ld bc,65536
04094A 3E 01       0901*  	ld a,mos_load
04094C 5B CF       0902*  	RST.LIL 08h
04094E 21 04 01 00 0903*  	ld hl,BUF_10_012
040952 01 05 00 00 0904*  	ld bc,5
040956 11 2D 00 00 0905*  	ld de,45
04095A DD 21 E1 00 0906*  	ld ix,225
       00          
04095F CD 3C B9 04 0907*  	call vdu_load_img
040963 C9          0908*  	ret
040964             0909*  
040964             0910*  ld_10_013:
040964 21 14 36 04 0911*  	ld hl,F10_013
040968 22 C1 B7 04 0912*  	ld (cur_filename),hl
04096C 11 CB C3 04 0913*  	ld de,filedata
040970 01 00 00 01 0914*  	ld bc,65536
040974 3E 01       0915*  	ld a,mos_load
040976 5B CF       0916*  	RST.LIL 08h
040978 21 05 01 00 0917*  	ld hl,BUF_10_013
04097C 01 05 00 00 0918*  	ld bc,5
040980 11 2B 00 00 0919*  	ld de,43
040984 DD 21 D7 00 0920*  	ld ix,215
       00          
040989 CD 3C B9 04 0921*  	call vdu_load_img
04098D C9          0922*  	ret
04098E             0923*  
04098E             0924*  ld_10_014:
04098E 21 28 36 04 0925*  	ld hl,F10_014
040992 22 C1 B7 04 0926*  	ld (cur_filename),hl
040996 11 CB C3 04 0927*  	ld de,filedata
04099A 01 00 00 01 0928*  	ld bc,65536
04099E 3E 01       0929*  	ld a,mos_load
0409A0 5B CF       0930*  	RST.LIL 08h
0409A2 21 06 01 00 0931*  	ld hl,BUF_10_014
0409A6 01 0F 00 00 0932*  	ld bc,15
0409AA 11 2D 00 00 0933*  	ld de,45
0409AE DD 21 A3 02 0934*  	ld ix,675
       00          
0409B3 CD 3C B9 04 0935*  	call vdu_load_img
0409B7 C9          0936*  	ret
0409B8             0937*  
0409B8             0938*  ld_10_015:
0409B8 21 3C 36 04 0939*  	ld hl,F10_015
0409BC 22 C1 B7 04 0940*  	ld (cur_filename),hl
0409C0 11 CB C3 04 0941*  	ld de,filedata
0409C4 01 00 00 01 0942*  	ld bc,65536
0409C8 3E 01       0943*  	ld a,mos_load
0409CA 5B CF       0944*  	RST.LIL 08h
0409CC 21 07 01 00 0945*  	ld hl,BUF_10_015
0409D0 01 19 00 00 0946*  	ld bc,25
0409D4 11 2D 00 00 0947*  	ld de,45
0409D8 DD 21 65 04 0948*  	ld ix,1125
       00          
0409DD CD 3C B9 04 0949*  	call vdu_load_img
0409E1 C9          0950*  	ret
0409E2             0951*  
0409E2             0952*  ld_10_016:
0409E2 21 50 36 04 0953*  	ld hl,F10_016
0409E6 22 C1 B7 04 0954*  	ld (cur_filename),hl
0409EA 11 CB C3 04 0955*  	ld de,filedata
0409EE 01 00 00 01 0956*  	ld bc,65536
0409F2 3E 01       0957*  	ld a,mos_load
0409F4 5B CF       0958*  	RST.LIL 08h
0409F6 21 08 01 00 0959*  	ld hl,BUF_10_016
0409FA 01 23 00 00 0960*  	ld bc,35
0409FE 11 2D 00 00 0961*  	ld de,45
040A02 DD 21 27 06 0962*  	ld ix,1575
       00          
040A07 CD 3C B9 04 0963*  	call vdu_load_img
040A0B C9          0964*  	ret
040A0C             0965*  
040A0C             0966*  ld_10_020:
040A0C 21 64 36 04 0967*  	ld hl,F10_020
040A10 22 C1 B7 04 0968*  	ld (cur_filename),hl
040A14 11 CB C3 04 0969*  	ld de,filedata
040A18 01 00 00 01 0970*  	ld bc,65536
040A1C 3E 01       0971*  	ld a,mos_load
040A1E 5B CF       0972*  	RST.LIL 08h
040A20 21 09 01 00 0973*  	ld hl,BUF_10_020
040A24 01 2E 00 00 0974*  	ld bc,46
040A28 11 2D 00 00 0975*  	ld de,45
040A2C DD 21 16 08 0976*  	ld ix,2070
       00          
040A31 CD 3C B9 04 0977*  	call vdu_load_img
040A35 C9          0978*  	ret
040A36             0979*  
040A36             0980*  ld_10_024:
040A36 21 78 36 04 0981*  	ld hl,F10_024
040A3A 22 C1 B7 04 0982*  	ld (cur_filename),hl
040A3E 11 CB C3 04 0983*  	ld de,filedata
040A42 01 00 00 01 0984*  	ld bc,65536
040A46 3E 01       0985*  	ld a,mos_load
040A48 5B CF       0986*  	RST.LIL 08h
040A4A 21 0A 01 00 0987*  	ld hl,BUF_10_024
040A4E 01 2E 00 00 0988*  	ld bc,46
040A52 11 40 00 00 0989*  	ld de,64
040A56 DD 21 80 0B 0990*  	ld ix,2944
       00          
040A5B CD 3C B9 04 0991*  	call vdu_load_img
040A5F C9          0992*  	ret
040A60             0993*  
040A60             0994*  ld_10_025:
040A60 21 8C 36 04 0995*  	ld hl,F10_025
040A64 22 C1 B7 04 0996*  	ld (cur_filename),hl
040A68 11 CB C3 04 0997*  	ld de,filedata
040A6C 01 00 00 01 0998*  	ld bc,65536
040A70 3E 01       0999*  	ld a,mos_load
040A72 5B CF       1000*  	RST.LIL 08h
040A74 21 0B 01 00 1001*  	ld hl,BUF_10_025
040A78 01 1C 00 00 1002*  	ld bc,28
040A7C 11 40 00 00 1003*  	ld de,64
040A80 DD 21 00 07 1004*  	ld ix,1792
       00          
040A85 CD 3C B9 04 1005*  	call vdu_load_img
040A89 C9          1006*  	ret
040A8A             1007*  
040A8A             1008*  ld_10_026:
040A8A 21 A0 36 04 1009*  	ld hl,F10_026
040A8E 22 C1 B7 04 1010*  	ld (cur_filename),hl
040A92 11 CB C3 04 1011*  	ld de,filedata
040A96 01 00 00 01 1012*  	ld bc,65536
040A9A 3E 01       1013*  	ld a,mos_load
040A9C 5B CF       1014*  	RST.LIL 08h
040A9E 21 0C 01 00 1015*  	ld hl,BUF_10_026
040AA2 01 09 00 00 1016*  	ld bc,9
040AA6 11 40 00 00 1017*  	ld de,64
040AAA DD 21 40 02 1018*  	ld ix,576
       00          
040AAF CD 3C B9 04 1019*  	call vdu_load_img
040AB3 C9          1020*  	ret
040AB4             1021*  
040AB4             1022*  ld_10_027:
040AB4 21 B4 36 04 1023*  	ld hl,F10_027
040AB8 22 C1 B7 04 1024*  	ld (cur_filename),hl
040ABC 11 CB C3 04 1025*  	ld de,filedata
040AC0 01 00 00 01 1026*  	ld bc,65536
040AC4 3E 01       1027*  	ld a,mos_load
040AC6 5B CF       1028*  	RST.LIL 08h
040AC8 21 0D 01 00 1029*  	ld hl,BUF_10_027
040ACC 01 0A 00 00 1030*  	ld bc,10
040AD0 11 3E 00 00 1031*  	ld de,62
040AD4 DD 21 6C 02 1032*  	ld ix,620
       00          
040AD9 CD 3C B9 04 1033*  	call vdu_load_img
040ADD C9          1034*  	ret
040ADE             1035*  
040ADE             1036*  ld_10_028:
040ADE 21 C8 36 04 1037*  	ld hl,F10_028
040AE2 22 C1 B7 04 1038*  	ld (cur_filename),hl
040AE6 11 CB C3 04 1039*  	ld de,filedata
040AEA 01 00 00 01 1040*  	ld bc,65536
040AEE 3E 01       1041*  	ld a,mos_load
040AF0 5B CF       1042*  	RST.LIL 08h
040AF2 21 0E 01 00 1043*  	ld hl,BUF_10_028
040AF6 01 1C 00 00 1044*  	ld bc,28
040AFA 11 40 00 00 1045*  	ld de,64
040AFE DD 21 00 07 1046*  	ld ix,1792
       00          
040B03 CD 3C B9 04 1047*  	call vdu_load_img
040B07 C9          1048*  	ret
040B08             1049*  
040B08             1050*  ld_10_029:
040B08 21 DC 36 04 1051*  	ld hl,F10_029
040B0C 22 C1 B7 04 1052*  	ld (cur_filename),hl
040B10 11 CB C3 04 1053*  	ld de,filedata
040B14 01 00 00 01 1054*  	ld bc,65536
040B18 3E 01       1055*  	ld a,mos_load
040B1A 5B CF       1056*  	RST.LIL 08h
040B1C 21 0F 01 00 1057*  	ld hl,BUF_10_029
040B20 01 2F 00 00 1058*  	ld bc,47
040B24 11 40 00 00 1059*  	ld de,64
040B28 DD 21 C0 0B 1060*  	ld ix,3008
       00          
040B2D CD 3C B9 04 1061*  	call vdu_load_img
040B31 C9          1062*  	ret
040B32             1063*  
040B32             1064*  ld_10_032:
040B32 21 F0 36 04 1065*  	ld hl,F10_032
040B36 22 C1 B7 04 1066*  	ld (cur_filename),hl
040B3A 11 CB C3 04 1067*  	ld de,filedata
040B3E 01 00 00 01 1068*  	ld bc,65536
040B42 3E 01       1069*  	ld a,mos_load
040B44 5B CF       1070*  	RST.LIL 08h
040B46 21 10 01 00 1071*  	ld hl,BUF_10_032
040B4A 01 41 00 00 1072*  	ld bc,65
040B4E 11 40 00 00 1073*  	ld de,64
040B52 DD 21 40 10 1074*  	ld ix,4160
       00          
040B57 CD 3C B9 04 1075*  	call vdu_load_img
040B5B C9          1076*  	ret
040B5C             1077*  
040B5C             1078*  ld_10_035:
040B5C 21 04 37 04 1079*  	ld hl,F10_035
040B60 22 C1 B7 04 1080*  	ld (cur_filename),hl
040B64 11 CB C3 04 1081*  	ld de,filedata
040B68 01 00 00 01 1082*  	ld bc,65536
040B6C 3E 01       1083*  	ld a,mos_load
040B6E 5B CF       1084*  	RST.LIL 08h
040B70 21 11 01 00 1085*  	ld hl,BUF_10_035
040B74 01 3F 00 00 1086*  	ld bc,63
040B78 11 6B 00 00 1087*  	ld de,107
040B7C DD 21 55 1A 1088*  	ld ix,6741
       00          
040B81 CD 3C B9 04 1089*  	call vdu_load_img
040B85 C9          1090*  	ret
040B86             1091*  
040B86             1092*  ld_10_036:
040B86 21 18 37 04 1093*  	ld hl,F10_036
040B8A 22 C1 B7 04 1094*  	ld (cur_filename),hl
040B8E 11 CB C3 04 1095*  	ld de,filedata
040B92 01 00 00 01 1096*  	ld bc,65536
040B96 3E 01       1097*  	ld a,mos_load
040B98 5B CF       1098*  	RST.LIL 08h
040B9A 21 12 01 00 1099*  	ld hl,BUF_10_036
040B9E 01 16 00 00 1100*  	ld bc,22
040BA2 11 6B 00 00 1101*  	ld de,107
040BA6 DD 21 32 09 1102*  	ld ix,2354
       00          
040BAB CD 3C B9 04 1103*  	call vdu_load_img
040BAF C9          1104*  	ret
040BB0             1105*  
040BB0             1106*  ld_10_037:
040BB0 21 2C 37 04 1107*  	ld hl,F10_037
040BB4 22 C1 B7 04 1108*  	ld (cur_filename),hl
040BB8 11 CB C3 04 1109*  	ld de,filedata
040BBC 01 00 00 01 1110*  	ld bc,65536
040BC0 3E 01       1111*  	ld a,mos_load
040BC2 5B CF       1112*  	RST.LIL 08h
040BC4 21 13 01 00 1113*  	ld hl,BUF_10_037
040BC8 01 15 00 00 1114*  	ld bc,21
040BCC 11 69 00 00 1115*  	ld de,105
040BD0 DD 21 9D 08 1116*  	ld ix,2205
       00          
040BD5 CD 3C B9 04 1117*  	call vdu_load_img
040BD9 C9          1118*  	ret
040BDA             1119*  
040BDA             1120*  ld_10_038:
040BDA 21 40 37 04 1121*  	ld hl,F10_038
040BDE 22 C1 B7 04 1122*  	ld (cur_filename),hl
040BE2 11 CB C3 04 1123*  	ld de,filedata
040BE6 01 00 00 01 1124*  	ld bc,65536
040BEA 3E 01       1125*  	ld a,mos_load
040BEC 5B CF       1126*  	RST.LIL 08h
040BEE 21 14 01 00 1127*  	ld hl,BUF_10_038
040BF2 01 3F 00 00 1128*  	ld bc,63
040BF6 11 6B 00 00 1129*  	ld de,107
040BFA DD 21 55 1A 1130*  	ld ix,6741
       00          
040BFF CD 3C B9 04 1131*  	call vdu_load_img
040C03 C9          1132*  	ret
040C04             1133*  
040C04             1134*  ld_10_040:
040C04 21 54 37 04 1135*  	ld hl,F10_040
040C08 22 C1 B7 04 1136*  	ld (cur_filename),hl
040C0C 11 CB C3 04 1137*  	ld de,filedata
040C10 01 00 00 01 1138*  	ld bc,65536
040C14 3E 01       1139*  	ld a,mos_load
040C16 5B CF       1140*  	RST.LIL 08h
040C18 21 15 01 00 1141*  	ld hl,BUF_10_040
040C1C 01 6C 00 00 1142*  	ld bc,108
040C20 11 6B 00 00 1143*  	ld de,107
040C24 DD 21 24 2D 1144*  	ld ix,11556
       00          
040C29 CD 3C B9 04 1145*  	call vdu_load_img
040C2D C9          1146*  	ret
040C2E             1147*  
040C2E             1148*  ld_10_042:
040C2E 21 68 37 04 1149*  	ld hl,F10_042
040C32 22 C1 B7 04 1150*  	ld (cur_filename),hl
040C36 11 CB C3 04 1151*  	ld de,filedata
040C3A 01 00 00 01 1152*  	ld bc,65536
040C3E 3E 01       1153*  	ld a,mos_load
040C40 5B CF       1154*  	RST.LIL 08h
040C42 21 16 01 00 1155*  	ld hl,BUF_10_042
040C46 01 6A 00 00 1156*  	ld bc,106
040C4A 11 A0 00 00 1157*  	ld de,160
040C4E DD 21 40 42 1158*  	ld ix,16960
       00          
040C53 CD 3C B9 04 1159*  	call vdu_load_img
040C57 C9          1160*  	ret
040C58             1161*  
040C58             1162*  ld_10_043:
040C58 21 7C 37 04 1163*  	ld hl,F10_043
040C5C 22 C1 B7 04 1164*  	ld (cur_filename),hl
040C60 11 CB C3 04 1165*  	ld de,filedata
040C64 01 00 00 01 1166*  	ld bc,65536
040C68 3E 01       1167*  	ld a,mos_load
040C6A 5B CF       1168*  	RST.LIL 08h
040C6C 21 17 01 00 1169*  	ld hl,BUF_10_043
040C70 01 6B 00 00 1170*  	ld bc,107
040C74 11 A0 00 00 1171*  	ld de,160
040C78 DD 21 E0 42 1172*  	ld ix,17120
       00          
040C7D CD 3C B9 04 1173*  	call vdu_load_img
040C81 C9          1174*  	ret
040C82             1175*  
040C82             1176*  ld_10_044:
040C82 21 90 37 04 1177*  	ld hl,F10_044
040C86 22 C1 B7 04 1178*  	ld (cur_filename),hl
040C8A 11 CB C3 04 1179*  	ld de,filedata
040C8E 01 00 00 01 1180*  	ld bc,65536
040C92 3E 01       1181*  	ld a,mos_load
040C94 5B CF       1182*  	RST.LIL 08h
040C96 21 18 01 00 1183*  	ld hl,BUF_10_044
040C9A 01 40 01 00 1184*  	ld bc,320
040C9E 11 A0 00 00 1185*  	ld de,160
040CA2 DD 21 00 C8 1186*  	ld ix,51200
       00          
040CA7 CD 3C B9 04 1187*  	call vdu_load_img
040CAB C9          1188*  	ret
040CAC             1189*  
040CAC             1190*  ld_11_004:
040CAC 21 A4 37 04 1191*  	ld hl,F11_004
040CB0 22 C1 B7 04 1192*  	ld (cur_filename),hl
040CB4 11 CB C3 04 1193*  	ld de,filedata
040CB8 01 00 00 01 1194*  	ld bc,65536
040CBC 3E 01       1195*  	ld a,mos_load
040CBE 5B CF       1196*  	RST.LIL 08h
040CC0 21 19 01 00 1197*  	ld hl,BUF_11_004
040CC4 01 24 00 00 1198*  	ld bc,36
040CC8 11 23 00 00 1199*  	ld de,35
040CCC DD 21 EC 04 1200*  	ld ix,1260
       00          
040CD1 CD 3C B9 04 1201*  	call vdu_load_img
040CD5 C9          1202*  	ret
040CD6             1203*  
040CD6             1204*  ld_11_009:
040CD6 21 B8 37 04 1205*  	ld hl,F11_009
040CDA 22 C1 B7 04 1206*  	ld (cur_filename),hl
040CDE 11 CB C3 04 1207*  	ld de,filedata
040CE2 01 00 00 01 1208*  	ld bc,65536
040CE6 3E 01       1209*  	ld a,mos_load
040CE8 5B CF       1210*  	RST.LIL 08h
040CEA 21 1A 01 00 1211*  	ld hl,BUF_11_009
040CEE 01 23 00 00 1212*  	ld bc,35
040CF2 11 2D 00 00 1213*  	ld de,45
040CF6 DD 21 27 06 1214*  	ld ix,1575
       00          
040CFB CD 3C B9 04 1215*  	call vdu_load_img
040CFF C9          1216*  	ret
040D00             1217*  
040D00             1218*  ld_11_010:
040D00 21 CC 37 04 1219*  	ld hl,F11_010
040D04 22 C1 B7 04 1220*  	ld (cur_filename),hl
040D08 11 CB C3 04 1221*  	ld de,filedata
040D0C 01 00 00 01 1222*  	ld bc,65536
040D10 3E 01       1223*  	ld a,mos_load
040D12 5B CF       1224*  	RST.LIL 08h
040D14 21 1B 01 00 1225*  	ld hl,BUF_11_010
040D18 01 19 00 00 1226*  	ld bc,25
040D1C 11 2D 00 00 1227*  	ld de,45
040D20 DD 21 65 04 1228*  	ld ix,1125
       00          
040D25 CD 3C B9 04 1229*  	call vdu_load_img
040D29 C9          1230*  	ret
040D2A             1231*  
040D2A             1232*  ld_11_011:
040D2A 21 E0 37 04 1233*  	ld hl,F11_011
040D2E 22 C1 B7 04 1234*  	ld (cur_filename),hl
040D32 11 CB C3 04 1235*  	ld de,filedata
040D36 01 00 00 01 1236*  	ld bc,65536
040D3A 3E 01       1237*  	ld a,mos_load
040D3C 5B CF       1238*  	RST.LIL 08h
040D3E 21 1C 01 00 1239*  	ld hl,BUF_11_011
040D42 01 0F 00 00 1240*  	ld bc,15
040D46 11 2D 00 00 1241*  	ld de,45
040D4A DD 21 A3 02 1242*  	ld ix,675
       00          
040D4F CD 3C B9 04 1243*  	call vdu_load_img
040D53 C9          1244*  	ret
040D54             1245*  
040D54             1246*  ld_11_012:
040D54 21 F4 37 04 1247*  	ld hl,F11_012
040D58 22 C1 B7 04 1248*  	ld (cur_filename),hl
040D5C 11 CB C3 04 1249*  	ld de,filedata
040D60 01 00 00 01 1250*  	ld bc,65536
040D64 3E 01       1251*  	ld a,mos_load
040D66 5B CF       1252*  	RST.LIL 08h
040D68 21 1D 01 00 1253*  	ld hl,BUF_11_012
040D6C 01 05 00 00 1254*  	ld bc,5
040D70 11 2D 00 00 1255*  	ld de,45
040D74 DD 21 E1 00 1256*  	ld ix,225
       00          
040D79 CD 3C B9 04 1257*  	call vdu_load_img
040D7D C9          1258*  	ret
040D7E             1259*  
040D7E             1260*  ld_11_013:
040D7E 21 08 38 04 1261*  	ld hl,F11_013
040D82 22 C1 B7 04 1262*  	ld (cur_filename),hl
040D86 11 CB C3 04 1263*  	ld de,filedata
040D8A 01 00 00 01 1264*  	ld bc,65536
040D8E 3E 01       1265*  	ld a,mos_load
040D90 5B CF       1266*  	RST.LIL 08h
040D92 21 1E 01 00 1267*  	ld hl,BUF_11_013
040D96 01 05 00 00 1268*  	ld bc,5
040D9A 11 2B 00 00 1269*  	ld de,43
040D9E DD 21 D7 00 1270*  	ld ix,215
       00          
040DA3 CD 3C B9 04 1271*  	call vdu_load_img
040DA7 C9          1272*  	ret
040DA8             1273*  
040DA8             1274*  ld_11_014:
040DA8 21 1C 38 04 1275*  	ld hl,F11_014
040DAC 22 C1 B7 04 1276*  	ld (cur_filename),hl
040DB0 11 CB C3 04 1277*  	ld de,filedata
040DB4 01 00 00 01 1278*  	ld bc,65536
040DB8 3E 01       1279*  	ld a,mos_load
040DBA 5B CF       1280*  	RST.LIL 08h
040DBC 21 1F 01 00 1281*  	ld hl,BUF_11_014
040DC0 01 0F 00 00 1282*  	ld bc,15
040DC4 11 2D 00 00 1283*  	ld de,45
040DC8 DD 21 A3 02 1284*  	ld ix,675
       00          
040DCD CD 3C B9 04 1285*  	call vdu_load_img
040DD1 C9          1286*  	ret
040DD2             1287*  
040DD2             1288*  ld_11_015:
040DD2 21 30 38 04 1289*  	ld hl,F11_015
040DD6 22 C1 B7 04 1290*  	ld (cur_filename),hl
040DDA 11 CB C3 04 1291*  	ld de,filedata
040DDE 01 00 00 01 1292*  	ld bc,65536
040DE2 3E 01       1293*  	ld a,mos_load
040DE4 5B CF       1294*  	RST.LIL 08h
040DE6 21 20 01 00 1295*  	ld hl,BUF_11_015
040DEA 01 19 00 00 1296*  	ld bc,25
040DEE 11 2D 00 00 1297*  	ld de,45
040DF2 DD 21 65 04 1298*  	ld ix,1125
       00          
040DF7 CD 3C B9 04 1299*  	call vdu_load_img
040DFB C9          1300*  	ret
040DFC             1301*  
040DFC             1302*  ld_11_016:
040DFC 21 44 38 04 1303*  	ld hl,F11_016
040E00 22 C1 B7 04 1304*  	ld (cur_filename),hl
040E04 11 CB C3 04 1305*  	ld de,filedata
040E08 01 00 00 01 1306*  	ld bc,65536
040E0C 3E 01       1307*  	ld a,mos_load
040E0E 5B CF       1308*  	RST.LIL 08h
040E10 21 21 01 00 1309*  	ld hl,BUF_11_016
040E14 01 23 00 00 1310*  	ld bc,35
040E18 11 2D 00 00 1311*  	ld de,45
040E1C DD 21 27 06 1312*  	ld ix,1575
       00          
040E21 CD 3C B9 04 1313*  	call vdu_load_img
040E25 C9          1314*  	ret
040E26             1315*  
040E26             1316*  ld_11_020:
040E26 21 58 38 04 1317*  	ld hl,F11_020
040E2A 22 C1 B7 04 1318*  	ld (cur_filename),hl
040E2E 11 CB C3 04 1319*  	ld de,filedata
040E32 01 00 00 01 1320*  	ld bc,65536
040E36 3E 01       1321*  	ld a,mos_load
040E38 5B CF       1322*  	RST.LIL 08h
040E3A 21 22 01 00 1323*  	ld hl,BUF_11_020
040E3E 01 2E 00 00 1324*  	ld bc,46
040E42 11 2D 00 00 1325*  	ld de,45
040E46 DD 21 16 08 1326*  	ld ix,2070
       00          
040E4B CD 3C B9 04 1327*  	call vdu_load_img
040E4F C9          1328*  	ret
040E50             1329*  
040E50             1330*  ld_11_024:
040E50 21 6C 38 04 1331*  	ld hl,F11_024
040E54 22 C1 B7 04 1332*  	ld (cur_filename),hl
040E58 11 CB C3 04 1333*  	ld de,filedata
040E5C 01 00 00 01 1334*  	ld bc,65536
040E60 3E 01       1335*  	ld a,mos_load
040E62 5B CF       1336*  	RST.LIL 08h
040E64 21 23 01 00 1337*  	ld hl,BUF_11_024
040E68 01 2E 00 00 1338*  	ld bc,46
040E6C 11 40 00 00 1339*  	ld de,64
040E70 DD 21 80 0B 1340*  	ld ix,2944
       00          
040E75 CD 3C B9 04 1341*  	call vdu_load_img
040E79 C9          1342*  	ret
040E7A             1343*  
040E7A             1344*  ld_11_025:
040E7A 21 80 38 04 1345*  	ld hl,F11_025
040E7E 22 C1 B7 04 1346*  	ld (cur_filename),hl
040E82 11 CB C3 04 1347*  	ld de,filedata
040E86 01 00 00 01 1348*  	ld bc,65536
040E8A 3E 01       1349*  	ld a,mos_load
040E8C 5B CF       1350*  	RST.LIL 08h
040E8E 21 24 01 00 1351*  	ld hl,BUF_11_025
040E92 01 1C 00 00 1352*  	ld bc,28
040E96 11 40 00 00 1353*  	ld de,64
040E9A DD 21 00 07 1354*  	ld ix,1792
       00          
040E9F CD 3C B9 04 1355*  	call vdu_load_img
040EA3 C9          1356*  	ret
040EA4             1357*  
040EA4             1358*  ld_11_026:
040EA4 21 94 38 04 1359*  	ld hl,F11_026
040EA8 22 C1 B7 04 1360*  	ld (cur_filename),hl
040EAC 11 CB C3 04 1361*  	ld de,filedata
040EB0 01 00 00 01 1362*  	ld bc,65536
040EB4 3E 01       1363*  	ld a,mos_load
040EB6 5B CF       1364*  	RST.LIL 08h
040EB8 21 25 01 00 1365*  	ld hl,BUF_11_026
040EBC 01 09 00 00 1366*  	ld bc,9
040EC0 11 40 00 00 1367*  	ld de,64
040EC4 DD 21 40 02 1368*  	ld ix,576
       00          
040EC9 CD 3C B9 04 1369*  	call vdu_load_img
040ECD C9          1370*  	ret
040ECE             1371*  
040ECE             1372*  ld_11_027:
040ECE 21 A8 38 04 1373*  	ld hl,F11_027
040ED2 22 C1 B7 04 1374*  	ld (cur_filename),hl
040ED6 11 CB C3 04 1375*  	ld de,filedata
040EDA 01 00 00 01 1376*  	ld bc,65536
040EDE 3E 01       1377*  	ld a,mos_load
040EE0 5B CF       1378*  	RST.LIL 08h
040EE2 21 26 01 00 1379*  	ld hl,BUF_11_027
040EE6 01 0A 00 00 1380*  	ld bc,10
040EEA 11 3E 00 00 1381*  	ld de,62
040EEE DD 21 6C 02 1382*  	ld ix,620
       00          
040EF3 CD 3C B9 04 1383*  	call vdu_load_img
040EF7 C9          1384*  	ret
040EF8             1385*  
040EF8             1386*  ld_11_028:
040EF8 21 BC 38 04 1387*  	ld hl,F11_028
040EFC 22 C1 B7 04 1388*  	ld (cur_filename),hl
040F00 11 CB C3 04 1389*  	ld de,filedata
040F04 01 00 00 01 1390*  	ld bc,65536
040F08 3E 01       1391*  	ld a,mos_load
040F0A 5B CF       1392*  	RST.LIL 08h
040F0C 21 27 01 00 1393*  	ld hl,BUF_11_028
040F10 01 1C 00 00 1394*  	ld bc,28
040F14 11 40 00 00 1395*  	ld de,64
040F18 DD 21 00 07 1396*  	ld ix,1792
       00          
040F1D CD 3C B9 04 1397*  	call vdu_load_img
040F21 C9          1398*  	ret
040F22             1399*  
040F22             1400*  ld_11_029:
040F22 21 D0 38 04 1401*  	ld hl,F11_029
040F26 22 C1 B7 04 1402*  	ld (cur_filename),hl
040F2A 11 CB C3 04 1403*  	ld de,filedata
040F2E 01 00 00 01 1404*  	ld bc,65536
040F32 3E 01       1405*  	ld a,mos_load
040F34 5B CF       1406*  	RST.LIL 08h
040F36 21 28 01 00 1407*  	ld hl,BUF_11_029
040F3A 01 2F 00 00 1408*  	ld bc,47
040F3E 11 40 00 00 1409*  	ld de,64
040F42 DD 21 C0 0B 1410*  	ld ix,3008
       00          
040F47 CD 3C B9 04 1411*  	call vdu_load_img
040F4B C9          1412*  	ret
040F4C             1413*  
040F4C             1414*  ld_11_032:
040F4C 21 E4 38 04 1415*  	ld hl,F11_032
040F50 22 C1 B7 04 1416*  	ld (cur_filename),hl
040F54 11 CB C3 04 1417*  	ld de,filedata
040F58 01 00 00 01 1418*  	ld bc,65536
040F5C 3E 01       1419*  	ld a,mos_load
040F5E 5B CF       1420*  	RST.LIL 08h
040F60 21 29 01 00 1421*  	ld hl,BUF_11_032
040F64 01 41 00 00 1422*  	ld bc,65
040F68 11 40 00 00 1423*  	ld de,64
040F6C DD 21 40 10 1424*  	ld ix,4160
       00          
040F71 CD 3C B9 04 1425*  	call vdu_load_img
040F75 C9          1426*  	ret
040F76             1427*  
040F76             1428*  ld_11_035:
040F76 21 F8 38 04 1429*  	ld hl,F11_035
040F7A 22 C1 B7 04 1430*  	ld (cur_filename),hl
040F7E 11 CB C3 04 1431*  	ld de,filedata
040F82 01 00 00 01 1432*  	ld bc,65536
040F86 3E 01       1433*  	ld a,mos_load
040F88 5B CF       1434*  	RST.LIL 08h
040F8A 21 2A 01 00 1435*  	ld hl,BUF_11_035
040F8E 01 3F 00 00 1436*  	ld bc,63
040F92 11 6B 00 00 1437*  	ld de,107
040F96 DD 21 55 1A 1438*  	ld ix,6741
       00          
040F9B CD 3C B9 04 1439*  	call vdu_load_img
040F9F C9          1440*  	ret
040FA0             1441*  
040FA0             1442*  ld_11_036:
040FA0 21 0C 39 04 1443*  	ld hl,F11_036
040FA4 22 C1 B7 04 1444*  	ld (cur_filename),hl
040FA8 11 CB C3 04 1445*  	ld de,filedata
040FAC 01 00 00 01 1446*  	ld bc,65536
040FB0 3E 01       1447*  	ld a,mos_load
040FB2 5B CF       1448*  	RST.LIL 08h
040FB4 21 2B 01 00 1449*  	ld hl,BUF_11_036
040FB8 01 16 00 00 1450*  	ld bc,22
040FBC 11 6B 00 00 1451*  	ld de,107
040FC0 DD 21 32 09 1452*  	ld ix,2354
       00          
040FC5 CD 3C B9 04 1453*  	call vdu_load_img
040FC9 C9          1454*  	ret
040FCA             1455*  
040FCA             1456*  ld_11_037:
040FCA 21 20 39 04 1457*  	ld hl,F11_037
040FCE 22 C1 B7 04 1458*  	ld (cur_filename),hl
040FD2 11 CB C3 04 1459*  	ld de,filedata
040FD6 01 00 00 01 1460*  	ld bc,65536
040FDA 3E 01       1461*  	ld a,mos_load
040FDC 5B CF       1462*  	RST.LIL 08h
040FDE 21 2C 01 00 1463*  	ld hl,BUF_11_037
040FE2 01 15 00 00 1464*  	ld bc,21
040FE6 11 69 00 00 1465*  	ld de,105
040FEA DD 21 9D 08 1466*  	ld ix,2205
       00          
040FEF CD 3C B9 04 1467*  	call vdu_load_img
040FF3 C9          1468*  	ret
040FF4             1469*  
040FF4             1470*  ld_11_038:
040FF4 21 34 39 04 1471*  	ld hl,F11_038
040FF8 22 C1 B7 04 1472*  	ld (cur_filename),hl
040FFC 11 CB C3 04 1473*  	ld de,filedata
041000 01 00 00 01 1474*  	ld bc,65536
041004 3E 01       1475*  	ld a,mos_load
041006 5B CF       1476*  	RST.LIL 08h
041008 21 2D 01 00 1477*  	ld hl,BUF_11_038
04100C 01 3F 00 00 1478*  	ld bc,63
041010 11 6B 00 00 1479*  	ld de,107
041014 DD 21 55 1A 1480*  	ld ix,6741
       00          
041019 CD 3C B9 04 1481*  	call vdu_load_img
04101D C9          1482*  	ret
04101E             1483*  
04101E             1484*  ld_11_040:
04101E 21 48 39 04 1485*  	ld hl,F11_040
041022 22 C1 B7 04 1486*  	ld (cur_filename),hl
041026 11 CB C3 04 1487*  	ld de,filedata
04102A 01 00 00 01 1488*  	ld bc,65536
04102E 3E 01       1489*  	ld a,mos_load
041030 5B CF       1490*  	RST.LIL 08h
041032 21 2E 01 00 1491*  	ld hl,BUF_11_040
041036 01 6C 00 00 1492*  	ld bc,108
04103A 11 6B 00 00 1493*  	ld de,107
04103E DD 21 24 2D 1494*  	ld ix,11556
       00          
041043 CD 3C B9 04 1495*  	call vdu_load_img
041047 C9          1496*  	ret
041048             1497*  
041048             1498*  ld_11_042:
041048 21 5C 39 04 1499*  	ld hl,F11_042
04104C 22 C1 B7 04 1500*  	ld (cur_filename),hl
041050 11 CB C3 04 1501*  	ld de,filedata
041054 01 00 00 01 1502*  	ld bc,65536
041058 3E 01       1503*  	ld a,mos_load
04105A 5B CF       1504*  	RST.LIL 08h
04105C 21 2F 01 00 1505*  	ld hl,BUF_11_042
041060 01 6A 00 00 1506*  	ld bc,106
041064 11 A0 00 00 1507*  	ld de,160
041068 DD 21 40 42 1508*  	ld ix,16960
       00          
04106D CD 3C B9 04 1509*  	call vdu_load_img
041071 C9          1510*  	ret
041072             1511*  
041072             1512*  ld_11_043:
041072 21 70 39 04 1513*  	ld hl,F11_043
041076 22 C1 B7 04 1514*  	ld (cur_filename),hl
04107A 11 CB C3 04 1515*  	ld de,filedata
04107E 01 00 00 01 1516*  	ld bc,65536
041082 3E 01       1517*  	ld a,mos_load
041084 5B CF       1518*  	RST.LIL 08h
041086 21 30 01 00 1519*  	ld hl,BUF_11_043
04108A 01 6B 00 00 1520*  	ld bc,107
04108E 11 A0 00 00 1521*  	ld de,160
041092 DD 21 E0 42 1522*  	ld ix,17120
       00          
041097 CD 3C B9 04 1523*  	call vdu_load_img
04109B C9          1524*  	ret
04109C             1525*  
04109C             1526*  ld_11_044:
04109C 21 84 39 04 1527*  	ld hl,F11_044
0410A0 22 C1 B7 04 1528*  	ld (cur_filename),hl
0410A4 11 CB C3 04 1529*  	ld de,filedata
0410A8 01 00 00 01 1530*  	ld bc,65536
0410AC 3E 01       1531*  	ld a,mos_load
0410AE 5B CF       1532*  	RST.LIL 08h
0410B0 21 31 01 00 1533*  	ld hl,BUF_11_044
0410B4 01 40 01 00 1534*  	ld bc,320
0410B8 11 A0 00 00 1535*  	ld de,160
0410BC DD 21 00 C8 1536*  	ld ix,51200
       00          
0410C1 CD 3C B9 04 1537*  	call vdu_load_img
0410C5 C9          1538*  	ret
0410C6             1539*  
0410C6             1540*  ld_12_004:
0410C6 21 98 39 04 1541*  	ld hl,F12_004
0410CA 22 C1 B7 04 1542*  	ld (cur_filename),hl
0410CE 11 CB C3 04 1543*  	ld de,filedata
0410D2 01 00 00 01 1544*  	ld bc,65536
0410D6 3E 01       1545*  	ld a,mos_load
0410D8 5B CF       1546*  	RST.LIL 08h
0410DA 21 32 01 00 1547*  	ld hl,BUF_12_004
0410DE 01 24 00 00 1548*  	ld bc,36
0410E2 11 23 00 00 1549*  	ld de,35
0410E6 DD 21 EC 04 1550*  	ld ix,1260
       00          
0410EB CD 3C B9 04 1551*  	call vdu_load_img
0410EF C9          1552*  	ret
0410F0             1553*  
0410F0             1554*  ld_12_009:
0410F0 21 AC 39 04 1555*  	ld hl,F12_009
0410F4 22 C1 B7 04 1556*  	ld (cur_filename),hl
0410F8 11 CB C3 04 1557*  	ld de,filedata
0410FC 01 00 00 01 1558*  	ld bc,65536
041100 3E 01       1559*  	ld a,mos_load
041102 5B CF       1560*  	RST.LIL 08h
041104 21 33 01 00 1561*  	ld hl,BUF_12_009
041108 01 23 00 00 1562*  	ld bc,35
04110C 11 2D 00 00 1563*  	ld de,45
041110 DD 21 27 06 1564*  	ld ix,1575
       00          
041115 CD 3C B9 04 1565*  	call vdu_load_img
041119 C9          1566*  	ret
04111A             1567*  
04111A             1568*  ld_12_010:
04111A 21 C0 39 04 1569*  	ld hl,F12_010
04111E 22 C1 B7 04 1570*  	ld (cur_filename),hl
041122 11 CB C3 04 1571*  	ld de,filedata
041126 01 00 00 01 1572*  	ld bc,65536
04112A 3E 01       1573*  	ld a,mos_load
04112C 5B CF       1574*  	RST.LIL 08h
04112E 21 34 01 00 1575*  	ld hl,BUF_12_010
041132 01 19 00 00 1576*  	ld bc,25
041136 11 2D 00 00 1577*  	ld de,45
04113A DD 21 65 04 1578*  	ld ix,1125
       00          
04113F CD 3C B9 04 1579*  	call vdu_load_img
041143 C9          1580*  	ret
041144             1581*  
041144             1582*  ld_12_011:
041144 21 D4 39 04 1583*  	ld hl,F12_011
041148 22 C1 B7 04 1584*  	ld (cur_filename),hl
04114C 11 CB C3 04 1585*  	ld de,filedata
041150 01 00 00 01 1586*  	ld bc,65536
041154 3E 01       1587*  	ld a,mos_load
041156 5B CF       1588*  	RST.LIL 08h
041158 21 35 01 00 1589*  	ld hl,BUF_12_011
04115C 01 0F 00 00 1590*  	ld bc,15
041160 11 2D 00 00 1591*  	ld de,45
041164 DD 21 A3 02 1592*  	ld ix,675
       00          
041169 CD 3C B9 04 1593*  	call vdu_load_img
04116D C9          1594*  	ret
04116E             1595*  
04116E             1596*  ld_12_012:
04116E 21 E8 39 04 1597*  	ld hl,F12_012
041172 22 C1 B7 04 1598*  	ld (cur_filename),hl
041176 11 CB C3 04 1599*  	ld de,filedata
04117A 01 00 00 01 1600*  	ld bc,65536
04117E 3E 01       1601*  	ld a,mos_load
041180 5B CF       1602*  	RST.LIL 08h
041182 21 36 01 00 1603*  	ld hl,BUF_12_012
041186 01 05 00 00 1604*  	ld bc,5
04118A 11 2D 00 00 1605*  	ld de,45
04118E DD 21 E1 00 1606*  	ld ix,225
       00          
041193 CD 3C B9 04 1607*  	call vdu_load_img
041197 C9          1608*  	ret
041198             1609*  
041198             1610*  ld_12_013:
041198 21 FC 39 04 1611*  	ld hl,F12_013
04119C 22 C1 B7 04 1612*  	ld (cur_filename),hl
0411A0 11 CB C3 04 1613*  	ld de,filedata
0411A4 01 00 00 01 1614*  	ld bc,65536
0411A8 3E 01       1615*  	ld a,mos_load
0411AA 5B CF       1616*  	RST.LIL 08h
0411AC 21 37 01 00 1617*  	ld hl,BUF_12_013
0411B0 01 05 00 00 1618*  	ld bc,5
0411B4 11 2B 00 00 1619*  	ld de,43
0411B8 DD 21 D7 00 1620*  	ld ix,215
       00          
0411BD CD 3C B9 04 1621*  	call vdu_load_img
0411C1 C9          1622*  	ret
0411C2             1623*  
0411C2             1624*  ld_12_014:
0411C2 21 10 3A 04 1625*  	ld hl,F12_014
0411C6 22 C1 B7 04 1626*  	ld (cur_filename),hl
0411CA 11 CB C3 04 1627*  	ld de,filedata
0411CE 01 00 00 01 1628*  	ld bc,65536
0411D2 3E 01       1629*  	ld a,mos_load
0411D4 5B CF       1630*  	RST.LIL 08h
0411D6 21 38 01 00 1631*  	ld hl,BUF_12_014
0411DA 01 0F 00 00 1632*  	ld bc,15
0411DE 11 2D 00 00 1633*  	ld de,45
0411E2 DD 21 A3 02 1634*  	ld ix,675
       00          
0411E7 CD 3C B9 04 1635*  	call vdu_load_img
0411EB C9          1636*  	ret
0411EC             1637*  
0411EC             1638*  ld_12_015:
0411EC 21 24 3A 04 1639*  	ld hl,F12_015
0411F0 22 C1 B7 04 1640*  	ld (cur_filename),hl
0411F4 11 CB C3 04 1641*  	ld de,filedata
0411F8 01 00 00 01 1642*  	ld bc,65536
0411FC 3E 01       1643*  	ld a,mos_load
0411FE 5B CF       1644*  	RST.LIL 08h
041200 21 39 01 00 1645*  	ld hl,BUF_12_015
041204 01 19 00 00 1646*  	ld bc,25
041208 11 2D 00 00 1647*  	ld de,45
04120C DD 21 65 04 1648*  	ld ix,1125
       00          
041211 CD 3C B9 04 1649*  	call vdu_load_img
041215 C9          1650*  	ret
041216             1651*  
041216             1652*  ld_12_016:
041216 21 38 3A 04 1653*  	ld hl,F12_016
04121A 22 C1 B7 04 1654*  	ld (cur_filename),hl
04121E 11 CB C3 04 1655*  	ld de,filedata
041222 01 00 00 01 1656*  	ld bc,65536
041226 3E 01       1657*  	ld a,mos_load
041228 5B CF       1658*  	RST.LIL 08h
04122A 21 3A 01 00 1659*  	ld hl,BUF_12_016
04122E 01 23 00 00 1660*  	ld bc,35
041232 11 2D 00 00 1661*  	ld de,45
041236 DD 21 27 06 1662*  	ld ix,1575
       00          
04123B CD 3C B9 04 1663*  	call vdu_load_img
04123F C9          1664*  	ret
041240             1665*  
041240             1666*  ld_12_020:
041240 21 4C 3A 04 1667*  	ld hl,F12_020
041244 22 C1 B7 04 1668*  	ld (cur_filename),hl
041248 11 CB C3 04 1669*  	ld de,filedata
04124C 01 00 00 01 1670*  	ld bc,65536
041250 3E 01       1671*  	ld a,mos_load
041252 5B CF       1672*  	RST.LIL 08h
041254 21 3B 01 00 1673*  	ld hl,BUF_12_020
041258 01 2E 00 00 1674*  	ld bc,46
04125C 11 2D 00 00 1675*  	ld de,45
041260 DD 21 16 08 1676*  	ld ix,2070
       00          
041265 CD 3C B9 04 1677*  	call vdu_load_img
041269 C9          1678*  	ret
04126A             1679*  
04126A             1680*  ld_12_024:
04126A 21 60 3A 04 1681*  	ld hl,F12_024
04126E 22 C1 B7 04 1682*  	ld (cur_filename),hl
041272 11 CB C3 04 1683*  	ld de,filedata
041276 01 00 00 01 1684*  	ld bc,65536
04127A 3E 01       1685*  	ld a,mos_load
04127C 5B CF       1686*  	RST.LIL 08h
04127E 21 3C 01 00 1687*  	ld hl,BUF_12_024
041282 01 2E 00 00 1688*  	ld bc,46
041286 11 40 00 00 1689*  	ld de,64
04128A DD 21 80 0B 1690*  	ld ix,2944
       00          
04128F CD 3C B9 04 1691*  	call vdu_load_img
041293 C9          1692*  	ret
041294             1693*  
041294             1694*  ld_12_025:
041294 21 74 3A 04 1695*  	ld hl,F12_025
041298 22 C1 B7 04 1696*  	ld (cur_filename),hl
04129C 11 CB C3 04 1697*  	ld de,filedata
0412A0 01 00 00 01 1698*  	ld bc,65536
0412A4 3E 01       1699*  	ld a,mos_load
0412A6 5B CF       1700*  	RST.LIL 08h
0412A8 21 3D 01 00 1701*  	ld hl,BUF_12_025
0412AC 01 1C 00 00 1702*  	ld bc,28
0412B0 11 40 00 00 1703*  	ld de,64
0412B4 DD 21 00 07 1704*  	ld ix,1792
       00          
0412B9 CD 3C B9 04 1705*  	call vdu_load_img
0412BD C9          1706*  	ret
0412BE             1707*  
0412BE             1708*  ld_12_026:
0412BE 21 88 3A 04 1709*  	ld hl,F12_026
0412C2 22 C1 B7 04 1710*  	ld (cur_filename),hl
0412C6 11 CB C3 04 1711*  	ld de,filedata
0412CA 01 00 00 01 1712*  	ld bc,65536
0412CE 3E 01       1713*  	ld a,mos_load
0412D0 5B CF       1714*  	RST.LIL 08h
0412D2 21 3E 01 00 1715*  	ld hl,BUF_12_026
0412D6 01 09 00 00 1716*  	ld bc,9
0412DA 11 40 00 00 1717*  	ld de,64
0412DE DD 21 40 02 1718*  	ld ix,576
       00          
0412E3 CD 3C B9 04 1719*  	call vdu_load_img
0412E7 C9          1720*  	ret
0412E8             1721*  
0412E8             1722*  ld_12_027:
0412E8 21 9C 3A 04 1723*  	ld hl,F12_027
0412EC 22 C1 B7 04 1724*  	ld (cur_filename),hl
0412F0 11 CB C3 04 1725*  	ld de,filedata
0412F4 01 00 00 01 1726*  	ld bc,65536
0412F8 3E 01       1727*  	ld a,mos_load
0412FA 5B CF       1728*  	RST.LIL 08h
0412FC 21 3F 01 00 1729*  	ld hl,BUF_12_027
041300 01 0A 00 00 1730*  	ld bc,10
041304 11 3E 00 00 1731*  	ld de,62
041308 DD 21 6C 02 1732*  	ld ix,620
       00          
04130D CD 3C B9 04 1733*  	call vdu_load_img
041311 C9          1734*  	ret
041312             1735*  
041312             1736*  ld_12_028:
041312 21 B0 3A 04 1737*  	ld hl,F12_028
041316 22 C1 B7 04 1738*  	ld (cur_filename),hl
04131A 11 CB C3 04 1739*  	ld de,filedata
04131E 01 00 00 01 1740*  	ld bc,65536
041322 3E 01       1741*  	ld a,mos_load
041324 5B CF       1742*  	RST.LIL 08h
041326 21 40 01 00 1743*  	ld hl,BUF_12_028
04132A 01 1C 00 00 1744*  	ld bc,28
04132E 11 40 00 00 1745*  	ld de,64
041332 DD 21 00 07 1746*  	ld ix,1792
       00          
041337 CD 3C B9 04 1747*  	call vdu_load_img
04133B C9          1748*  	ret
04133C             1749*  
04133C             1750*  ld_12_029:
04133C 21 C4 3A 04 1751*  	ld hl,F12_029
041340 22 C1 B7 04 1752*  	ld (cur_filename),hl
041344 11 CB C3 04 1753*  	ld de,filedata
041348 01 00 00 01 1754*  	ld bc,65536
04134C 3E 01       1755*  	ld a,mos_load
04134E 5B CF       1756*  	RST.LIL 08h
041350 21 41 01 00 1757*  	ld hl,BUF_12_029
041354 01 2F 00 00 1758*  	ld bc,47
041358 11 40 00 00 1759*  	ld de,64
04135C DD 21 C0 0B 1760*  	ld ix,3008
       00          
041361 CD 3C B9 04 1761*  	call vdu_load_img
041365 C9          1762*  	ret
041366             1763*  
041366             1764*  ld_12_032:
041366 21 D8 3A 04 1765*  	ld hl,F12_032
04136A 22 C1 B7 04 1766*  	ld (cur_filename),hl
04136E 11 CB C3 04 1767*  	ld de,filedata
041372 01 00 00 01 1768*  	ld bc,65536
041376 3E 01       1769*  	ld a,mos_load
041378 5B CF       1770*  	RST.LIL 08h
04137A 21 42 01 00 1771*  	ld hl,BUF_12_032
04137E 01 41 00 00 1772*  	ld bc,65
041382 11 40 00 00 1773*  	ld de,64
041386 DD 21 40 10 1774*  	ld ix,4160
       00          
04138B CD 3C B9 04 1775*  	call vdu_load_img
04138F C9          1776*  	ret
041390             1777*  
041390             1778*  ld_12_035:
041390 21 EC 3A 04 1779*  	ld hl,F12_035
041394 22 C1 B7 04 1780*  	ld (cur_filename),hl
041398 11 CB C3 04 1781*  	ld de,filedata
04139C 01 00 00 01 1782*  	ld bc,65536
0413A0 3E 01       1783*  	ld a,mos_load
0413A2 5B CF       1784*  	RST.LIL 08h
0413A4 21 43 01 00 1785*  	ld hl,BUF_12_035
0413A8 01 3F 00 00 1786*  	ld bc,63
0413AC 11 6B 00 00 1787*  	ld de,107
0413B0 DD 21 55 1A 1788*  	ld ix,6741
       00          
0413B5 CD 3C B9 04 1789*  	call vdu_load_img
0413B9 C9          1790*  	ret
0413BA             1791*  
0413BA             1792*  ld_12_036:
0413BA 21 00 3B 04 1793*  	ld hl,F12_036
0413BE 22 C1 B7 04 1794*  	ld (cur_filename),hl
0413C2 11 CB C3 04 1795*  	ld de,filedata
0413C6 01 00 00 01 1796*  	ld bc,65536
0413CA 3E 01       1797*  	ld a,mos_load
0413CC 5B CF       1798*  	RST.LIL 08h
0413CE 21 44 01 00 1799*  	ld hl,BUF_12_036
0413D2 01 16 00 00 1800*  	ld bc,22
0413D6 11 6B 00 00 1801*  	ld de,107
0413DA DD 21 32 09 1802*  	ld ix,2354
       00          
0413DF CD 3C B9 04 1803*  	call vdu_load_img
0413E3 C9          1804*  	ret
0413E4             1805*  
0413E4             1806*  ld_12_037:
0413E4 21 14 3B 04 1807*  	ld hl,F12_037
0413E8 22 C1 B7 04 1808*  	ld (cur_filename),hl
0413EC 11 CB C3 04 1809*  	ld de,filedata
0413F0 01 00 00 01 1810*  	ld bc,65536
0413F4 3E 01       1811*  	ld a,mos_load
0413F6 5B CF       1812*  	RST.LIL 08h
0413F8 21 45 01 00 1813*  	ld hl,BUF_12_037
0413FC 01 15 00 00 1814*  	ld bc,21
041400 11 69 00 00 1815*  	ld de,105
041404 DD 21 9D 08 1816*  	ld ix,2205
       00          
041409 CD 3C B9 04 1817*  	call vdu_load_img
04140D C9          1818*  	ret
04140E             1819*  
04140E             1820*  ld_12_038:
04140E 21 28 3B 04 1821*  	ld hl,F12_038
041412 22 C1 B7 04 1822*  	ld (cur_filename),hl
041416 11 CB C3 04 1823*  	ld de,filedata
04141A 01 00 00 01 1824*  	ld bc,65536
04141E 3E 01       1825*  	ld a,mos_load
041420 5B CF       1826*  	RST.LIL 08h
041422 21 46 01 00 1827*  	ld hl,BUF_12_038
041426 01 3F 00 00 1828*  	ld bc,63
04142A 11 6B 00 00 1829*  	ld de,107
04142E DD 21 55 1A 1830*  	ld ix,6741
       00          
041433 CD 3C B9 04 1831*  	call vdu_load_img
041437 C9          1832*  	ret
041438             1833*  
041438             1834*  ld_12_040:
041438 21 3C 3B 04 1835*  	ld hl,F12_040
04143C 22 C1 B7 04 1836*  	ld (cur_filename),hl
041440 11 CB C3 04 1837*  	ld de,filedata
041444 01 00 00 01 1838*  	ld bc,65536
041448 3E 01       1839*  	ld a,mos_load
04144A 5B CF       1840*  	RST.LIL 08h
04144C 21 47 01 00 1841*  	ld hl,BUF_12_040
041450 01 6C 00 00 1842*  	ld bc,108
041454 11 6B 00 00 1843*  	ld de,107
041458 DD 21 24 2D 1844*  	ld ix,11556
       00          
04145D CD 3C B9 04 1845*  	call vdu_load_img
041461 C9          1846*  	ret
041462             1847*  
041462             1848*  ld_12_042:
041462 21 50 3B 04 1849*  	ld hl,F12_042
041466 22 C1 B7 04 1850*  	ld (cur_filename),hl
04146A 11 CB C3 04 1851*  	ld de,filedata
04146E 01 00 00 01 1852*  	ld bc,65536
041472 3E 01       1853*  	ld a,mos_load
041474 5B CF       1854*  	RST.LIL 08h
041476 21 48 01 00 1855*  	ld hl,BUF_12_042
04147A 01 6A 00 00 1856*  	ld bc,106
04147E 11 A0 00 00 1857*  	ld de,160
041482 DD 21 40 42 1858*  	ld ix,16960
       00          
041487 CD 3C B9 04 1859*  	call vdu_load_img
04148B C9          1860*  	ret
04148C             1861*  
04148C             1862*  ld_12_043:
04148C 21 64 3B 04 1863*  	ld hl,F12_043
041490 22 C1 B7 04 1864*  	ld (cur_filename),hl
041494 11 CB C3 04 1865*  	ld de,filedata
041498 01 00 00 01 1866*  	ld bc,65536
04149C 3E 01       1867*  	ld a,mos_load
04149E 5B CF       1868*  	RST.LIL 08h
0414A0 21 49 01 00 1869*  	ld hl,BUF_12_043
0414A4 01 6B 00 00 1870*  	ld bc,107
0414A8 11 A0 00 00 1871*  	ld de,160
0414AC DD 21 E0 42 1872*  	ld ix,17120
       00          
0414B1 CD 3C B9 04 1873*  	call vdu_load_img
0414B5 C9          1874*  	ret
0414B6             1875*  
0414B6             1876*  ld_12_044:
0414B6 21 78 3B 04 1877*  	ld hl,F12_044
0414BA 22 C1 B7 04 1878*  	ld (cur_filename),hl
0414BE 11 CB C3 04 1879*  	ld de,filedata
0414C2 01 00 00 01 1880*  	ld bc,65536
0414C6 3E 01       1881*  	ld a,mos_load
0414C8 5B CF       1882*  	RST.LIL 08h
0414CA 21 4A 01 00 1883*  	ld hl,BUF_12_044
0414CE 01 40 01 00 1884*  	ld bc,320
0414D2 11 A0 00 00 1885*  	ld de,160
0414D6 DD 21 00 C8 1886*  	ld ix,51200
       00          
0414DB CD 3C B9 04 1887*  	call vdu_load_img
0414DF C9          1888*  	ret
0414E0             1889*  
0414E0             1890*  ld_13_004:
0414E0 21 8C 3B 04 1891*  	ld hl,F13_004
0414E4 22 C1 B7 04 1892*  	ld (cur_filename),hl
0414E8 11 CB C3 04 1893*  	ld de,filedata
0414EC 01 00 00 01 1894*  	ld bc,65536
0414F0 3E 01       1895*  	ld a,mos_load
0414F2 5B CF       1896*  	RST.LIL 08h
0414F4 21 4B 01 00 1897*  	ld hl,BUF_13_004
0414F8 01 24 00 00 1898*  	ld bc,36
0414FC 11 23 00 00 1899*  	ld de,35
041500 DD 21 EC 04 1900*  	ld ix,1260
       00          
041505 CD 3C B9 04 1901*  	call vdu_load_img
041509 C9          1902*  	ret
04150A             1903*  
04150A             1904*  ld_13_009:
04150A 21 A0 3B 04 1905*  	ld hl,F13_009
04150E 22 C1 B7 04 1906*  	ld (cur_filename),hl
041512 11 CB C3 04 1907*  	ld de,filedata
041516 01 00 00 01 1908*  	ld bc,65536
04151A 3E 01       1909*  	ld a,mos_load
04151C 5B CF       1910*  	RST.LIL 08h
04151E 21 4C 01 00 1911*  	ld hl,BUF_13_009
041522 01 23 00 00 1912*  	ld bc,35
041526 11 2D 00 00 1913*  	ld de,45
04152A DD 21 27 06 1914*  	ld ix,1575
       00          
04152F CD 3C B9 04 1915*  	call vdu_load_img
041533 C9          1916*  	ret
041534             1917*  
041534             1918*  ld_13_010:
041534 21 B4 3B 04 1919*  	ld hl,F13_010
041538 22 C1 B7 04 1920*  	ld (cur_filename),hl
04153C 11 CB C3 04 1921*  	ld de,filedata
041540 01 00 00 01 1922*  	ld bc,65536
041544 3E 01       1923*  	ld a,mos_load
041546 5B CF       1924*  	RST.LIL 08h
041548 21 4D 01 00 1925*  	ld hl,BUF_13_010
04154C 01 19 00 00 1926*  	ld bc,25
041550 11 2D 00 00 1927*  	ld de,45
041554 DD 21 65 04 1928*  	ld ix,1125
       00          
041559 CD 3C B9 04 1929*  	call vdu_load_img
04155D C9          1930*  	ret
04155E             1931*  
04155E             1932*  ld_13_011:
04155E 21 C8 3B 04 1933*  	ld hl,F13_011
041562 22 C1 B7 04 1934*  	ld (cur_filename),hl
041566 11 CB C3 04 1935*  	ld de,filedata
04156A 01 00 00 01 1936*  	ld bc,65536
04156E 3E 01       1937*  	ld a,mos_load
041570 5B CF       1938*  	RST.LIL 08h
041572 21 4E 01 00 1939*  	ld hl,BUF_13_011
041576 01 0F 00 00 1940*  	ld bc,15
04157A 11 2D 00 00 1941*  	ld de,45
04157E DD 21 A3 02 1942*  	ld ix,675
       00          
041583 CD 3C B9 04 1943*  	call vdu_load_img
041587 C9          1944*  	ret
041588             1945*  
041588             1946*  ld_13_012:
041588 21 DC 3B 04 1947*  	ld hl,F13_012
04158C 22 C1 B7 04 1948*  	ld (cur_filename),hl
041590 11 CB C3 04 1949*  	ld de,filedata
041594 01 00 00 01 1950*  	ld bc,65536
041598 3E 01       1951*  	ld a,mos_load
04159A 5B CF       1952*  	RST.LIL 08h
04159C 21 4F 01 00 1953*  	ld hl,BUF_13_012
0415A0 01 05 00 00 1954*  	ld bc,5
0415A4 11 2D 00 00 1955*  	ld de,45
0415A8 DD 21 E1 00 1956*  	ld ix,225
       00          
0415AD CD 3C B9 04 1957*  	call vdu_load_img
0415B1 C9          1958*  	ret
0415B2             1959*  
0415B2             1960*  ld_13_013:
0415B2 21 F0 3B 04 1961*  	ld hl,F13_013
0415B6 22 C1 B7 04 1962*  	ld (cur_filename),hl
0415BA 11 CB C3 04 1963*  	ld de,filedata
0415BE 01 00 00 01 1964*  	ld bc,65536
0415C2 3E 01       1965*  	ld a,mos_load
0415C4 5B CF       1966*  	RST.LIL 08h
0415C6 21 50 01 00 1967*  	ld hl,BUF_13_013
0415CA 01 05 00 00 1968*  	ld bc,5
0415CE 11 2B 00 00 1969*  	ld de,43
0415D2 DD 21 D7 00 1970*  	ld ix,215
       00          
0415D7 CD 3C B9 04 1971*  	call vdu_load_img
0415DB C9          1972*  	ret
0415DC             1973*  
0415DC             1974*  ld_13_014:
0415DC 21 04 3C 04 1975*  	ld hl,F13_014
0415E0 22 C1 B7 04 1976*  	ld (cur_filename),hl
0415E4 11 CB C3 04 1977*  	ld de,filedata
0415E8 01 00 00 01 1978*  	ld bc,65536
0415EC 3E 01       1979*  	ld a,mos_load
0415EE 5B CF       1980*  	RST.LIL 08h
0415F0 21 51 01 00 1981*  	ld hl,BUF_13_014
0415F4 01 0F 00 00 1982*  	ld bc,15
0415F8 11 2D 00 00 1983*  	ld de,45
0415FC DD 21 A3 02 1984*  	ld ix,675
       00          
041601 CD 3C B9 04 1985*  	call vdu_load_img
041605 C9          1986*  	ret
041606             1987*  
041606             1988*  ld_13_015:
041606 21 18 3C 04 1989*  	ld hl,F13_015
04160A 22 C1 B7 04 1990*  	ld (cur_filename),hl
04160E 11 CB C3 04 1991*  	ld de,filedata
041612 01 00 00 01 1992*  	ld bc,65536
041616 3E 01       1993*  	ld a,mos_load
041618 5B CF       1994*  	RST.LIL 08h
04161A 21 52 01 00 1995*  	ld hl,BUF_13_015
04161E 01 19 00 00 1996*  	ld bc,25
041622 11 2D 00 00 1997*  	ld de,45
041626 DD 21 65 04 1998*  	ld ix,1125
       00          
04162B CD 3C B9 04 1999*  	call vdu_load_img
04162F C9          2000*  	ret
041630             2001*  
041630             2002*  ld_13_016:
041630 21 2C 3C 04 2003*  	ld hl,F13_016
041634 22 C1 B7 04 2004*  	ld (cur_filename),hl
041638 11 CB C3 04 2005*  	ld de,filedata
04163C 01 00 00 01 2006*  	ld bc,65536
041640 3E 01       2007*  	ld a,mos_load
041642 5B CF       2008*  	RST.LIL 08h
041644 21 53 01 00 2009*  	ld hl,BUF_13_016
041648 01 23 00 00 2010*  	ld bc,35
04164C 11 2D 00 00 2011*  	ld de,45
041650 DD 21 27 06 2012*  	ld ix,1575
       00          
041655 CD 3C B9 04 2013*  	call vdu_load_img
041659 C9          2014*  	ret
04165A             2015*  
04165A             2016*  ld_13_020:
04165A 21 40 3C 04 2017*  	ld hl,F13_020
04165E 22 C1 B7 04 2018*  	ld (cur_filename),hl
041662 11 CB C3 04 2019*  	ld de,filedata
041666 01 00 00 01 2020*  	ld bc,65536
04166A 3E 01       2021*  	ld a,mos_load
04166C 5B CF       2022*  	RST.LIL 08h
04166E 21 54 01 00 2023*  	ld hl,BUF_13_020
041672 01 2E 00 00 2024*  	ld bc,46
041676 11 2D 00 00 2025*  	ld de,45
04167A DD 21 16 08 2026*  	ld ix,2070
       00          
04167F CD 3C B9 04 2027*  	call vdu_load_img
041683 C9          2028*  	ret
041684             2029*  
041684             2030*  ld_13_024:
041684 21 54 3C 04 2031*  	ld hl,F13_024
041688 22 C1 B7 04 2032*  	ld (cur_filename),hl
04168C 11 CB C3 04 2033*  	ld de,filedata
041690 01 00 00 01 2034*  	ld bc,65536
041694 3E 01       2035*  	ld a,mos_load
041696 5B CF       2036*  	RST.LIL 08h
041698 21 55 01 00 2037*  	ld hl,BUF_13_024
04169C 01 2E 00 00 2038*  	ld bc,46
0416A0 11 40 00 00 2039*  	ld de,64
0416A4 DD 21 80 0B 2040*  	ld ix,2944
       00          
0416A9 CD 3C B9 04 2041*  	call vdu_load_img
0416AD C9          2042*  	ret
0416AE             2043*  
0416AE             2044*  ld_13_025:
0416AE 21 68 3C 04 2045*  	ld hl,F13_025
0416B2 22 C1 B7 04 2046*  	ld (cur_filename),hl
0416B6 11 CB C3 04 2047*  	ld de,filedata
0416BA 01 00 00 01 2048*  	ld bc,65536
0416BE 3E 01       2049*  	ld a,mos_load
0416C0 5B CF       2050*  	RST.LIL 08h
0416C2 21 56 01 00 2051*  	ld hl,BUF_13_025
0416C6 01 1C 00 00 2052*  	ld bc,28
0416CA 11 40 00 00 2053*  	ld de,64
0416CE DD 21 00 07 2054*  	ld ix,1792
       00          
0416D3 CD 3C B9 04 2055*  	call vdu_load_img
0416D7 C9          2056*  	ret
0416D8             2057*  
0416D8             2058*  ld_13_026:
0416D8 21 7C 3C 04 2059*  	ld hl,F13_026
0416DC 22 C1 B7 04 2060*  	ld (cur_filename),hl
0416E0 11 CB C3 04 2061*  	ld de,filedata
0416E4 01 00 00 01 2062*  	ld bc,65536
0416E8 3E 01       2063*  	ld a,mos_load
0416EA 5B CF       2064*  	RST.LIL 08h
0416EC 21 57 01 00 2065*  	ld hl,BUF_13_026
0416F0 01 09 00 00 2066*  	ld bc,9
0416F4 11 40 00 00 2067*  	ld de,64
0416F8 DD 21 40 02 2068*  	ld ix,576
       00          
0416FD CD 3C B9 04 2069*  	call vdu_load_img
041701 C9          2070*  	ret
041702             2071*  
041702             2072*  ld_13_027:
041702 21 90 3C 04 2073*  	ld hl,F13_027
041706 22 C1 B7 04 2074*  	ld (cur_filename),hl
04170A 11 CB C3 04 2075*  	ld de,filedata
04170E 01 00 00 01 2076*  	ld bc,65536
041712 3E 01       2077*  	ld a,mos_load
041714 5B CF       2078*  	RST.LIL 08h
041716 21 58 01 00 2079*  	ld hl,BUF_13_027
04171A 01 0A 00 00 2080*  	ld bc,10
04171E 11 3E 00 00 2081*  	ld de,62
041722 DD 21 6C 02 2082*  	ld ix,620
       00          
041727 CD 3C B9 04 2083*  	call vdu_load_img
04172B C9          2084*  	ret
04172C             2085*  
04172C             2086*  ld_13_028:
04172C 21 A4 3C 04 2087*  	ld hl,F13_028
041730 22 C1 B7 04 2088*  	ld (cur_filename),hl
041734 11 CB C3 04 2089*  	ld de,filedata
041738 01 00 00 01 2090*  	ld bc,65536
04173C 3E 01       2091*  	ld a,mos_load
04173E 5B CF       2092*  	RST.LIL 08h
041740 21 59 01 00 2093*  	ld hl,BUF_13_028
041744 01 1C 00 00 2094*  	ld bc,28
041748 11 40 00 00 2095*  	ld de,64
04174C DD 21 00 07 2096*  	ld ix,1792
       00          
041751 CD 3C B9 04 2097*  	call vdu_load_img
041755 C9          2098*  	ret
041756             2099*  
041756             2100*  ld_13_029:
041756 21 B8 3C 04 2101*  	ld hl,F13_029
04175A 22 C1 B7 04 2102*  	ld (cur_filename),hl
04175E 11 CB C3 04 2103*  	ld de,filedata
041762 01 00 00 01 2104*  	ld bc,65536
041766 3E 01       2105*  	ld a,mos_load
041768 5B CF       2106*  	RST.LIL 08h
04176A 21 5A 01 00 2107*  	ld hl,BUF_13_029
04176E 01 2F 00 00 2108*  	ld bc,47
041772 11 40 00 00 2109*  	ld de,64
041776 DD 21 C0 0B 2110*  	ld ix,3008
       00          
04177B CD 3C B9 04 2111*  	call vdu_load_img
04177F C9          2112*  	ret
041780             2113*  
041780             2114*  ld_13_032:
041780 21 CC 3C 04 2115*  	ld hl,F13_032
041784 22 C1 B7 04 2116*  	ld (cur_filename),hl
041788 11 CB C3 04 2117*  	ld de,filedata
04178C 01 00 00 01 2118*  	ld bc,65536
041790 3E 01       2119*  	ld a,mos_load
041792 5B CF       2120*  	RST.LIL 08h
041794 21 5B 01 00 2121*  	ld hl,BUF_13_032
041798 01 41 00 00 2122*  	ld bc,65
04179C 11 40 00 00 2123*  	ld de,64
0417A0 DD 21 40 10 2124*  	ld ix,4160
       00          
0417A5 CD 3C B9 04 2125*  	call vdu_load_img
0417A9 C9          2126*  	ret
0417AA             2127*  
0417AA             2128*  ld_13_035:
0417AA 21 E0 3C 04 2129*  	ld hl,F13_035
0417AE 22 C1 B7 04 2130*  	ld (cur_filename),hl
0417B2 11 CB C3 04 2131*  	ld de,filedata
0417B6 01 00 00 01 2132*  	ld bc,65536
0417BA 3E 01       2133*  	ld a,mos_load
0417BC 5B CF       2134*  	RST.LIL 08h
0417BE 21 5C 01 00 2135*  	ld hl,BUF_13_035
0417C2 01 3F 00 00 2136*  	ld bc,63
0417C6 11 6B 00 00 2137*  	ld de,107
0417CA DD 21 55 1A 2138*  	ld ix,6741
       00          
0417CF CD 3C B9 04 2139*  	call vdu_load_img
0417D3 C9          2140*  	ret
0417D4             2141*  
0417D4             2142*  ld_13_036:
0417D4 21 F4 3C 04 2143*  	ld hl,F13_036
0417D8 22 C1 B7 04 2144*  	ld (cur_filename),hl
0417DC 11 CB C3 04 2145*  	ld de,filedata
0417E0 01 00 00 01 2146*  	ld bc,65536
0417E4 3E 01       2147*  	ld a,mos_load
0417E6 5B CF       2148*  	RST.LIL 08h
0417E8 21 5D 01 00 2149*  	ld hl,BUF_13_036
0417EC 01 16 00 00 2150*  	ld bc,22
0417F0 11 6B 00 00 2151*  	ld de,107
0417F4 DD 21 32 09 2152*  	ld ix,2354
       00          
0417F9 CD 3C B9 04 2153*  	call vdu_load_img
0417FD C9          2154*  	ret
0417FE             2155*  
0417FE             2156*  ld_13_037:
0417FE 21 08 3D 04 2157*  	ld hl,F13_037
041802 22 C1 B7 04 2158*  	ld (cur_filename),hl
041806 11 CB C3 04 2159*  	ld de,filedata
04180A 01 00 00 01 2160*  	ld bc,65536
04180E 3E 01       2161*  	ld a,mos_load
041810 5B CF       2162*  	RST.LIL 08h
041812 21 5E 01 00 2163*  	ld hl,BUF_13_037
041816 01 15 00 00 2164*  	ld bc,21
04181A 11 69 00 00 2165*  	ld de,105
04181E DD 21 9D 08 2166*  	ld ix,2205
       00          
041823 CD 3C B9 04 2167*  	call vdu_load_img
041827 C9          2168*  	ret
041828             2169*  
041828             2170*  ld_13_038:
041828 21 1C 3D 04 2171*  	ld hl,F13_038
04182C 22 C1 B7 04 2172*  	ld (cur_filename),hl
041830 11 CB C3 04 2173*  	ld de,filedata
041834 01 00 00 01 2174*  	ld bc,65536
041838 3E 01       2175*  	ld a,mos_load
04183A 5B CF       2176*  	RST.LIL 08h
04183C 21 5F 01 00 2177*  	ld hl,BUF_13_038
041840 01 3F 00 00 2178*  	ld bc,63
041844 11 6B 00 00 2179*  	ld de,107
041848 DD 21 55 1A 2180*  	ld ix,6741
       00          
04184D CD 3C B9 04 2181*  	call vdu_load_img
041851 C9          2182*  	ret
041852             2183*  
041852             2184*  ld_13_040:
041852 21 30 3D 04 2185*  	ld hl,F13_040
041856 22 C1 B7 04 2186*  	ld (cur_filename),hl
04185A 11 CB C3 04 2187*  	ld de,filedata
04185E 01 00 00 01 2188*  	ld bc,65536
041862 3E 01       2189*  	ld a,mos_load
041864 5B CF       2190*  	RST.LIL 08h
041866 21 60 01 00 2191*  	ld hl,BUF_13_040
04186A 01 6C 00 00 2192*  	ld bc,108
04186E 11 6B 00 00 2193*  	ld de,107
041872 DD 21 24 2D 2194*  	ld ix,11556
       00          
041877 CD 3C B9 04 2195*  	call vdu_load_img
04187B C9          2196*  	ret
04187C             2197*  
04187C             2198*  ld_13_042:
04187C 21 44 3D 04 2199*  	ld hl,F13_042
041880 22 C1 B7 04 2200*  	ld (cur_filename),hl
041884 11 CB C3 04 2201*  	ld de,filedata
041888 01 00 00 01 2202*  	ld bc,65536
04188C 3E 01       2203*  	ld a,mos_load
04188E 5B CF       2204*  	RST.LIL 08h
041890 21 61 01 00 2205*  	ld hl,BUF_13_042
041894 01 6A 00 00 2206*  	ld bc,106
041898 11 A0 00 00 2207*  	ld de,160
04189C DD 21 40 42 2208*  	ld ix,16960
       00          
0418A1 CD 3C B9 04 2209*  	call vdu_load_img
0418A5 C9          2210*  	ret
0418A6             2211*  
0418A6             2212*  ld_13_043:
0418A6 21 58 3D 04 2213*  	ld hl,F13_043
0418AA 22 C1 B7 04 2214*  	ld (cur_filename),hl
0418AE 11 CB C3 04 2215*  	ld de,filedata
0418B2 01 00 00 01 2216*  	ld bc,65536
0418B6 3E 01       2217*  	ld a,mos_load
0418B8 5B CF       2218*  	RST.LIL 08h
0418BA 21 62 01 00 2219*  	ld hl,BUF_13_043
0418BE 01 6B 00 00 2220*  	ld bc,107
0418C2 11 A0 00 00 2221*  	ld de,160
0418C6 DD 21 E0 42 2222*  	ld ix,17120
       00          
0418CB CD 3C B9 04 2223*  	call vdu_load_img
0418CF C9          2224*  	ret
0418D0             2225*  
0418D0             2226*  ld_13_044:
0418D0 21 6C 3D 04 2227*  	ld hl,F13_044
0418D4 22 C1 B7 04 2228*  	ld (cur_filename),hl
0418D8 11 CB C3 04 2229*  	ld de,filedata
0418DC 01 00 00 01 2230*  	ld bc,65536
0418E0 3E 01       2231*  	ld a,mos_load
0418E2 5B CF       2232*  	RST.LIL 08h
0418E4 21 63 01 00 2233*  	ld hl,BUF_13_044
0418E8 01 40 01 00 2234*  	ld bc,320
0418EC 11 A0 00 00 2235*  	ld de,160
0418F0 DD 21 00 C8 2236*  	ld ix,51200
       00          
0418F5 CD 3C B9 04 2237*  	call vdu_load_img
0418F9 C9          2238*  	ret
0418FA             2239*  
0418FA             2240*  ld_14_004:
0418FA 21 80 3D 04 2241*  	ld hl,F14_004
0418FE 22 C1 B7 04 2242*  	ld (cur_filename),hl
041902 11 CB C3 04 2243*  	ld de,filedata
041906 01 00 00 01 2244*  	ld bc,65536
04190A 3E 01       2245*  	ld a,mos_load
04190C 5B CF       2246*  	RST.LIL 08h
04190E 21 64 01 00 2247*  	ld hl,BUF_14_004
041912 01 24 00 00 2248*  	ld bc,36
041916 11 23 00 00 2249*  	ld de,35
04191A DD 21 EC 04 2250*  	ld ix,1260
       00          
04191F CD 3C B9 04 2251*  	call vdu_load_img
041923 C9          2252*  	ret
041924             2253*  
041924             2254*  ld_14_009:
041924 21 94 3D 04 2255*  	ld hl,F14_009
041928 22 C1 B7 04 2256*  	ld (cur_filename),hl
04192C 11 CB C3 04 2257*  	ld de,filedata
041930 01 00 00 01 2258*  	ld bc,65536
041934 3E 01       2259*  	ld a,mos_load
041936 5B CF       2260*  	RST.LIL 08h
041938 21 65 01 00 2261*  	ld hl,BUF_14_009
04193C 01 23 00 00 2262*  	ld bc,35
041940 11 2D 00 00 2263*  	ld de,45
041944 DD 21 27 06 2264*  	ld ix,1575
       00          
041949 CD 3C B9 04 2265*  	call vdu_load_img
04194D C9          2266*  	ret
04194E             2267*  
04194E             2268*  ld_14_010:
04194E 21 A8 3D 04 2269*  	ld hl,F14_010
041952 22 C1 B7 04 2270*  	ld (cur_filename),hl
041956 11 CB C3 04 2271*  	ld de,filedata
04195A 01 00 00 01 2272*  	ld bc,65536
04195E 3E 01       2273*  	ld a,mos_load
041960 5B CF       2274*  	RST.LIL 08h
041962 21 66 01 00 2275*  	ld hl,BUF_14_010
041966 01 19 00 00 2276*  	ld bc,25
04196A 11 2D 00 00 2277*  	ld de,45
04196E DD 21 65 04 2278*  	ld ix,1125
       00          
041973 CD 3C B9 04 2279*  	call vdu_load_img
041977 C9          2280*  	ret
041978             2281*  
041978             2282*  ld_14_011:
041978 21 BC 3D 04 2283*  	ld hl,F14_011
04197C 22 C1 B7 04 2284*  	ld (cur_filename),hl
041980 11 CB C3 04 2285*  	ld de,filedata
041984 01 00 00 01 2286*  	ld bc,65536
041988 3E 01       2287*  	ld a,mos_load
04198A 5B CF       2288*  	RST.LIL 08h
04198C 21 67 01 00 2289*  	ld hl,BUF_14_011
041990 01 0F 00 00 2290*  	ld bc,15
041994 11 2D 00 00 2291*  	ld de,45
041998 DD 21 A3 02 2292*  	ld ix,675
       00          
04199D CD 3C B9 04 2293*  	call vdu_load_img
0419A1 C9          2294*  	ret
0419A2             2295*  
0419A2             2296*  ld_14_012:
0419A2 21 D0 3D 04 2297*  	ld hl,F14_012
0419A6 22 C1 B7 04 2298*  	ld (cur_filename),hl
0419AA 11 CB C3 04 2299*  	ld de,filedata
0419AE 01 00 00 01 2300*  	ld bc,65536
0419B2 3E 01       2301*  	ld a,mos_load
0419B4 5B CF       2302*  	RST.LIL 08h
0419B6 21 68 01 00 2303*  	ld hl,BUF_14_012
0419BA 01 05 00 00 2304*  	ld bc,5
0419BE 11 2D 00 00 2305*  	ld de,45
0419C2 DD 21 E1 00 2306*  	ld ix,225
       00          
0419C7 CD 3C B9 04 2307*  	call vdu_load_img
0419CB C9          2308*  	ret
0419CC             2309*  
0419CC             2310*  ld_14_013:
0419CC 21 E4 3D 04 2311*  	ld hl,F14_013
0419D0 22 C1 B7 04 2312*  	ld (cur_filename),hl
0419D4 11 CB C3 04 2313*  	ld de,filedata
0419D8 01 00 00 01 2314*  	ld bc,65536
0419DC 3E 01       2315*  	ld a,mos_load
0419DE 5B CF       2316*  	RST.LIL 08h
0419E0 21 69 01 00 2317*  	ld hl,BUF_14_013
0419E4 01 05 00 00 2318*  	ld bc,5
0419E8 11 2B 00 00 2319*  	ld de,43
0419EC DD 21 D7 00 2320*  	ld ix,215
       00          
0419F1 CD 3C B9 04 2321*  	call vdu_load_img
0419F5 C9          2322*  	ret
0419F6             2323*  
0419F6             2324*  ld_14_014:
0419F6 21 F8 3D 04 2325*  	ld hl,F14_014
0419FA 22 C1 B7 04 2326*  	ld (cur_filename),hl
0419FE 11 CB C3 04 2327*  	ld de,filedata
041A02 01 00 00 01 2328*  	ld bc,65536
041A06 3E 01       2329*  	ld a,mos_load
041A08 5B CF       2330*  	RST.LIL 08h
041A0A 21 6A 01 00 2331*  	ld hl,BUF_14_014
041A0E 01 0F 00 00 2332*  	ld bc,15
041A12 11 2D 00 00 2333*  	ld de,45
041A16 DD 21 A3 02 2334*  	ld ix,675
       00          
041A1B CD 3C B9 04 2335*  	call vdu_load_img
041A1F C9          2336*  	ret
041A20             2337*  
041A20             2338*  ld_14_015:
041A20 21 0C 3E 04 2339*  	ld hl,F14_015
041A24 22 C1 B7 04 2340*  	ld (cur_filename),hl
041A28 11 CB C3 04 2341*  	ld de,filedata
041A2C 01 00 00 01 2342*  	ld bc,65536
041A30 3E 01       2343*  	ld a,mos_load
041A32 5B CF       2344*  	RST.LIL 08h
041A34 21 6B 01 00 2345*  	ld hl,BUF_14_015
041A38 01 19 00 00 2346*  	ld bc,25
041A3C 11 2D 00 00 2347*  	ld de,45
041A40 DD 21 65 04 2348*  	ld ix,1125
       00          
041A45 CD 3C B9 04 2349*  	call vdu_load_img
041A49 C9          2350*  	ret
041A4A             2351*  
041A4A             2352*  ld_14_016:
041A4A 21 20 3E 04 2353*  	ld hl,F14_016
041A4E 22 C1 B7 04 2354*  	ld (cur_filename),hl
041A52 11 CB C3 04 2355*  	ld de,filedata
041A56 01 00 00 01 2356*  	ld bc,65536
041A5A 3E 01       2357*  	ld a,mos_load
041A5C 5B CF       2358*  	RST.LIL 08h
041A5E 21 6C 01 00 2359*  	ld hl,BUF_14_016
041A62 01 23 00 00 2360*  	ld bc,35
041A66 11 2D 00 00 2361*  	ld de,45
041A6A DD 21 27 06 2362*  	ld ix,1575
       00          
041A6F CD 3C B9 04 2363*  	call vdu_load_img
041A73 C9          2364*  	ret
041A74             2365*  
041A74             2366*  ld_14_020:
041A74 21 34 3E 04 2367*  	ld hl,F14_020
041A78 22 C1 B7 04 2368*  	ld (cur_filename),hl
041A7C 11 CB C3 04 2369*  	ld de,filedata
041A80 01 00 00 01 2370*  	ld bc,65536
041A84 3E 01       2371*  	ld a,mos_load
041A86 5B CF       2372*  	RST.LIL 08h
041A88 21 6D 01 00 2373*  	ld hl,BUF_14_020
041A8C 01 2E 00 00 2374*  	ld bc,46
041A90 11 2D 00 00 2375*  	ld de,45
041A94 DD 21 16 08 2376*  	ld ix,2070
       00          
041A99 CD 3C B9 04 2377*  	call vdu_load_img
041A9D C9          2378*  	ret
041A9E             2379*  
041A9E             2380*  ld_14_024:
041A9E 21 48 3E 04 2381*  	ld hl,F14_024
041AA2 22 C1 B7 04 2382*  	ld (cur_filename),hl
041AA6 11 CB C3 04 2383*  	ld de,filedata
041AAA 01 00 00 01 2384*  	ld bc,65536
041AAE 3E 01       2385*  	ld a,mos_load
041AB0 5B CF       2386*  	RST.LIL 08h
041AB2 21 6E 01 00 2387*  	ld hl,BUF_14_024
041AB6 01 2E 00 00 2388*  	ld bc,46
041ABA 11 40 00 00 2389*  	ld de,64
041ABE DD 21 80 0B 2390*  	ld ix,2944
       00          
041AC3 CD 3C B9 04 2391*  	call vdu_load_img
041AC7 C9          2392*  	ret
041AC8             2393*  
041AC8             2394*  ld_14_025:
041AC8 21 5C 3E 04 2395*  	ld hl,F14_025
041ACC 22 C1 B7 04 2396*  	ld (cur_filename),hl
041AD0 11 CB C3 04 2397*  	ld de,filedata
041AD4 01 00 00 01 2398*  	ld bc,65536
041AD8 3E 01       2399*  	ld a,mos_load
041ADA 5B CF       2400*  	RST.LIL 08h
041ADC 21 6F 01 00 2401*  	ld hl,BUF_14_025
041AE0 01 1C 00 00 2402*  	ld bc,28
041AE4 11 40 00 00 2403*  	ld de,64
041AE8 DD 21 00 07 2404*  	ld ix,1792
       00          
041AED CD 3C B9 04 2405*  	call vdu_load_img
041AF1 C9          2406*  	ret
041AF2             2407*  
041AF2             2408*  ld_14_026:
041AF2 21 70 3E 04 2409*  	ld hl,F14_026
041AF6 22 C1 B7 04 2410*  	ld (cur_filename),hl
041AFA 11 CB C3 04 2411*  	ld de,filedata
041AFE 01 00 00 01 2412*  	ld bc,65536
041B02 3E 01       2413*  	ld a,mos_load
041B04 5B CF       2414*  	RST.LIL 08h
041B06 21 70 01 00 2415*  	ld hl,BUF_14_026
041B0A 01 09 00 00 2416*  	ld bc,9
041B0E 11 40 00 00 2417*  	ld de,64
041B12 DD 21 40 02 2418*  	ld ix,576
       00          
041B17 CD 3C B9 04 2419*  	call vdu_load_img
041B1B C9          2420*  	ret
041B1C             2421*  
041B1C             2422*  ld_14_027:
041B1C 21 84 3E 04 2423*  	ld hl,F14_027
041B20 22 C1 B7 04 2424*  	ld (cur_filename),hl
041B24 11 CB C3 04 2425*  	ld de,filedata
041B28 01 00 00 01 2426*  	ld bc,65536
041B2C 3E 01       2427*  	ld a,mos_load
041B2E 5B CF       2428*  	RST.LIL 08h
041B30 21 71 01 00 2429*  	ld hl,BUF_14_027
041B34 01 0A 00 00 2430*  	ld bc,10
041B38 11 3E 00 00 2431*  	ld de,62
041B3C DD 21 6C 02 2432*  	ld ix,620
       00          
041B41 CD 3C B9 04 2433*  	call vdu_load_img
041B45 C9          2434*  	ret
041B46             2435*  
041B46             2436*  ld_14_028:
041B46 21 98 3E 04 2437*  	ld hl,F14_028
041B4A 22 C1 B7 04 2438*  	ld (cur_filename),hl
041B4E 11 CB C3 04 2439*  	ld de,filedata
041B52 01 00 00 01 2440*  	ld bc,65536
041B56 3E 01       2441*  	ld a,mos_load
041B58 5B CF       2442*  	RST.LIL 08h
041B5A 21 72 01 00 2443*  	ld hl,BUF_14_028
041B5E 01 1C 00 00 2444*  	ld bc,28
041B62 11 40 00 00 2445*  	ld de,64
041B66 DD 21 00 07 2446*  	ld ix,1792
       00          
041B6B CD 3C B9 04 2447*  	call vdu_load_img
041B6F C9          2448*  	ret
041B70             2449*  
041B70             2450*  ld_14_029:
041B70 21 AC 3E 04 2451*  	ld hl,F14_029
041B74 22 C1 B7 04 2452*  	ld (cur_filename),hl
041B78 11 CB C3 04 2453*  	ld de,filedata
041B7C 01 00 00 01 2454*  	ld bc,65536
041B80 3E 01       2455*  	ld a,mos_load
041B82 5B CF       2456*  	RST.LIL 08h
041B84 21 73 01 00 2457*  	ld hl,BUF_14_029
041B88 01 2F 00 00 2458*  	ld bc,47
041B8C 11 40 00 00 2459*  	ld de,64
041B90 DD 21 C0 0B 2460*  	ld ix,3008
       00          
041B95 CD 3C B9 04 2461*  	call vdu_load_img
041B99 C9          2462*  	ret
041B9A             2463*  
041B9A             2464*  ld_14_032:
041B9A 21 C0 3E 04 2465*  	ld hl,F14_032
041B9E 22 C1 B7 04 2466*  	ld (cur_filename),hl
041BA2 11 CB C3 04 2467*  	ld de,filedata
041BA6 01 00 00 01 2468*  	ld bc,65536
041BAA 3E 01       2469*  	ld a,mos_load
041BAC 5B CF       2470*  	RST.LIL 08h
041BAE 21 74 01 00 2471*  	ld hl,BUF_14_032
041BB2 01 41 00 00 2472*  	ld bc,65
041BB6 11 40 00 00 2473*  	ld de,64
041BBA DD 21 40 10 2474*  	ld ix,4160
       00          
041BBF CD 3C B9 04 2475*  	call vdu_load_img
041BC3 C9          2476*  	ret
041BC4             2477*  
041BC4             2478*  ld_14_035:
041BC4 21 D4 3E 04 2479*  	ld hl,F14_035
041BC8 22 C1 B7 04 2480*  	ld (cur_filename),hl
041BCC 11 CB C3 04 2481*  	ld de,filedata
041BD0 01 00 00 01 2482*  	ld bc,65536
041BD4 3E 01       2483*  	ld a,mos_load
041BD6 5B CF       2484*  	RST.LIL 08h
041BD8 21 75 01 00 2485*  	ld hl,BUF_14_035
041BDC 01 3F 00 00 2486*  	ld bc,63
041BE0 11 6B 00 00 2487*  	ld de,107
041BE4 DD 21 55 1A 2488*  	ld ix,6741
       00          
041BE9 CD 3C B9 04 2489*  	call vdu_load_img
041BED C9          2490*  	ret
041BEE             2491*  
041BEE             2492*  ld_14_036:
041BEE 21 E8 3E 04 2493*  	ld hl,F14_036
041BF2 22 C1 B7 04 2494*  	ld (cur_filename),hl
041BF6 11 CB C3 04 2495*  	ld de,filedata
041BFA 01 00 00 01 2496*  	ld bc,65536
041BFE 3E 01       2497*  	ld a,mos_load
041C00 5B CF       2498*  	RST.LIL 08h
041C02 21 76 01 00 2499*  	ld hl,BUF_14_036
041C06 01 16 00 00 2500*  	ld bc,22
041C0A 11 6B 00 00 2501*  	ld de,107
041C0E DD 21 32 09 2502*  	ld ix,2354
       00          
041C13 CD 3C B9 04 2503*  	call vdu_load_img
041C17 C9          2504*  	ret
041C18             2505*  
041C18             2506*  ld_14_037:
041C18 21 FC 3E 04 2507*  	ld hl,F14_037
041C1C 22 C1 B7 04 2508*  	ld (cur_filename),hl
041C20 11 CB C3 04 2509*  	ld de,filedata
041C24 01 00 00 01 2510*  	ld bc,65536
041C28 3E 01       2511*  	ld a,mos_load
041C2A 5B CF       2512*  	RST.LIL 08h
041C2C 21 77 01 00 2513*  	ld hl,BUF_14_037
041C30 01 15 00 00 2514*  	ld bc,21
041C34 11 69 00 00 2515*  	ld de,105
041C38 DD 21 9D 08 2516*  	ld ix,2205
       00          
041C3D CD 3C B9 04 2517*  	call vdu_load_img
041C41 C9          2518*  	ret
041C42             2519*  
041C42             2520*  ld_14_038:
041C42 21 10 3F 04 2521*  	ld hl,F14_038
041C46 22 C1 B7 04 2522*  	ld (cur_filename),hl
041C4A 11 CB C3 04 2523*  	ld de,filedata
041C4E 01 00 00 01 2524*  	ld bc,65536
041C52 3E 01       2525*  	ld a,mos_load
041C54 5B CF       2526*  	RST.LIL 08h
041C56 21 78 01 00 2527*  	ld hl,BUF_14_038
041C5A 01 3F 00 00 2528*  	ld bc,63
041C5E 11 6B 00 00 2529*  	ld de,107
041C62 DD 21 55 1A 2530*  	ld ix,6741
       00          
041C67 CD 3C B9 04 2531*  	call vdu_load_img
041C6B C9          2532*  	ret
041C6C             2533*  
041C6C             2534*  ld_14_040:
041C6C 21 24 3F 04 2535*  	ld hl,F14_040
041C70 22 C1 B7 04 2536*  	ld (cur_filename),hl
041C74 11 CB C3 04 2537*  	ld de,filedata
041C78 01 00 00 01 2538*  	ld bc,65536
041C7C 3E 01       2539*  	ld a,mos_load
041C7E 5B CF       2540*  	RST.LIL 08h
041C80 21 79 01 00 2541*  	ld hl,BUF_14_040
041C84 01 6C 00 00 2542*  	ld bc,108
041C88 11 6B 00 00 2543*  	ld de,107
041C8C DD 21 24 2D 2544*  	ld ix,11556
       00          
041C91 CD 3C B9 04 2545*  	call vdu_load_img
041C95 C9          2546*  	ret
041C96             2547*  
041C96             2548*  ld_14_042:
041C96 21 38 3F 04 2549*  	ld hl,F14_042
041C9A 22 C1 B7 04 2550*  	ld (cur_filename),hl
041C9E 11 CB C3 04 2551*  	ld de,filedata
041CA2 01 00 00 01 2552*  	ld bc,65536
041CA6 3E 01       2553*  	ld a,mos_load
041CA8 5B CF       2554*  	RST.LIL 08h
041CAA 21 7A 01 00 2555*  	ld hl,BUF_14_042
041CAE 01 6A 00 00 2556*  	ld bc,106
041CB2 11 A0 00 00 2557*  	ld de,160
041CB6 DD 21 40 42 2558*  	ld ix,16960
       00          
041CBB CD 3C B9 04 2559*  	call vdu_load_img
041CBF C9          2560*  	ret
041CC0             2561*  
041CC0             2562*  ld_14_043:
041CC0 21 4C 3F 04 2563*  	ld hl,F14_043
041CC4 22 C1 B7 04 2564*  	ld (cur_filename),hl
041CC8 11 CB C3 04 2565*  	ld de,filedata
041CCC 01 00 00 01 2566*  	ld bc,65536
041CD0 3E 01       2567*  	ld a,mos_load
041CD2 5B CF       2568*  	RST.LIL 08h
041CD4 21 7B 01 00 2569*  	ld hl,BUF_14_043
041CD8 01 6B 00 00 2570*  	ld bc,107
041CDC 11 A0 00 00 2571*  	ld de,160
041CE0 DD 21 E0 42 2572*  	ld ix,17120
       00          
041CE5 CD 3C B9 04 2573*  	call vdu_load_img
041CE9 C9          2574*  	ret
041CEA             2575*  
041CEA             2576*  ld_14_044:
041CEA 21 60 3F 04 2577*  	ld hl,F14_044
041CEE 22 C1 B7 04 2578*  	ld (cur_filename),hl
041CF2 11 CB C3 04 2579*  	ld de,filedata
041CF6 01 00 00 01 2580*  	ld bc,65536
041CFA 3E 01       2581*  	ld a,mos_load
041CFC 5B CF       2582*  	RST.LIL 08h
041CFE 21 7C 01 00 2583*  	ld hl,BUF_14_044
041D02 01 40 01 00 2584*  	ld bc,320
041D06 11 A0 00 00 2585*  	ld de,160
041D0A DD 21 00 C8 2586*  	ld ix,51200
       00          
041D0F CD 3C B9 04 2587*  	call vdu_load_img
041D13 C9          2588*  	ret
041D14             2589*  
041D14             2590*  ld_15_004:
041D14 21 74 3F 04 2591*  	ld hl,F15_004
041D18 22 C1 B7 04 2592*  	ld (cur_filename),hl
041D1C 11 CB C3 04 2593*  	ld de,filedata
041D20 01 00 00 01 2594*  	ld bc,65536
041D24 3E 01       2595*  	ld a,mos_load
041D26 5B CF       2596*  	RST.LIL 08h
041D28 21 7D 01 00 2597*  	ld hl,BUF_15_004
041D2C 01 24 00 00 2598*  	ld bc,36
041D30 11 23 00 00 2599*  	ld de,35
041D34 DD 21 EC 04 2600*  	ld ix,1260
       00          
041D39 CD 3C B9 04 2601*  	call vdu_load_img
041D3D C9          2602*  	ret
041D3E             2603*  
041D3E             2604*  ld_15_009:
041D3E 21 88 3F 04 2605*  	ld hl,F15_009
041D42 22 C1 B7 04 2606*  	ld (cur_filename),hl
041D46 11 CB C3 04 2607*  	ld de,filedata
041D4A 01 00 00 01 2608*  	ld bc,65536
041D4E 3E 01       2609*  	ld a,mos_load
041D50 5B CF       2610*  	RST.LIL 08h
041D52 21 7E 01 00 2611*  	ld hl,BUF_15_009
041D56 01 23 00 00 2612*  	ld bc,35
041D5A 11 2D 00 00 2613*  	ld de,45
041D5E DD 21 27 06 2614*  	ld ix,1575
       00          
041D63 CD 3C B9 04 2615*  	call vdu_load_img
041D67 C9          2616*  	ret
041D68             2617*  
041D68             2618*  ld_15_010:
041D68 21 9C 3F 04 2619*  	ld hl,F15_010
041D6C 22 C1 B7 04 2620*  	ld (cur_filename),hl
041D70 11 CB C3 04 2621*  	ld de,filedata
041D74 01 00 00 01 2622*  	ld bc,65536
041D78 3E 01       2623*  	ld a,mos_load
041D7A 5B CF       2624*  	RST.LIL 08h
041D7C 21 7F 01 00 2625*  	ld hl,BUF_15_010
041D80 01 19 00 00 2626*  	ld bc,25
041D84 11 2D 00 00 2627*  	ld de,45
041D88 DD 21 65 04 2628*  	ld ix,1125
       00          
041D8D CD 3C B9 04 2629*  	call vdu_load_img
041D91 C9          2630*  	ret
041D92             2631*  
041D92             2632*  ld_15_011:
041D92 21 B0 3F 04 2633*  	ld hl,F15_011
041D96 22 C1 B7 04 2634*  	ld (cur_filename),hl
041D9A 11 CB C3 04 2635*  	ld de,filedata
041D9E 01 00 00 01 2636*  	ld bc,65536
041DA2 3E 01       2637*  	ld a,mos_load
041DA4 5B CF       2638*  	RST.LIL 08h
041DA6 21 80 01 00 2639*  	ld hl,BUF_15_011
041DAA 01 0F 00 00 2640*  	ld bc,15
041DAE 11 2D 00 00 2641*  	ld de,45
041DB2 DD 21 A3 02 2642*  	ld ix,675
       00          
041DB7 CD 3C B9 04 2643*  	call vdu_load_img
041DBB C9          2644*  	ret
041DBC             2645*  
041DBC             2646*  ld_15_012:
041DBC 21 C4 3F 04 2647*  	ld hl,F15_012
041DC0 22 C1 B7 04 2648*  	ld (cur_filename),hl
041DC4 11 CB C3 04 2649*  	ld de,filedata
041DC8 01 00 00 01 2650*  	ld bc,65536
041DCC 3E 01       2651*  	ld a,mos_load
041DCE 5B CF       2652*  	RST.LIL 08h
041DD0 21 81 01 00 2653*  	ld hl,BUF_15_012
041DD4 01 05 00 00 2654*  	ld bc,5
041DD8 11 2D 00 00 2655*  	ld de,45
041DDC DD 21 E1 00 2656*  	ld ix,225
       00          
041DE1 CD 3C B9 04 2657*  	call vdu_load_img
041DE5 C9          2658*  	ret
041DE6             2659*  
041DE6             2660*  ld_15_013:
041DE6 21 D8 3F 04 2661*  	ld hl,F15_013
041DEA 22 C1 B7 04 2662*  	ld (cur_filename),hl
041DEE 11 CB C3 04 2663*  	ld de,filedata
041DF2 01 00 00 01 2664*  	ld bc,65536
041DF6 3E 01       2665*  	ld a,mos_load
041DF8 5B CF       2666*  	RST.LIL 08h
041DFA 21 82 01 00 2667*  	ld hl,BUF_15_013
041DFE 01 05 00 00 2668*  	ld bc,5
041E02 11 2B 00 00 2669*  	ld de,43
041E06 DD 21 D7 00 2670*  	ld ix,215
       00          
041E0B CD 3C B9 04 2671*  	call vdu_load_img
041E0F C9          2672*  	ret
041E10             2673*  
041E10             2674*  ld_15_014:
041E10 21 EC 3F 04 2675*  	ld hl,F15_014
041E14 22 C1 B7 04 2676*  	ld (cur_filename),hl
041E18 11 CB C3 04 2677*  	ld de,filedata
041E1C 01 00 00 01 2678*  	ld bc,65536
041E20 3E 01       2679*  	ld a,mos_load
041E22 5B CF       2680*  	RST.LIL 08h
041E24 21 83 01 00 2681*  	ld hl,BUF_15_014
041E28 01 0F 00 00 2682*  	ld bc,15
041E2C 11 2D 00 00 2683*  	ld de,45
041E30 DD 21 A3 02 2684*  	ld ix,675
       00          
041E35 CD 3C B9 04 2685*  	call vdu_load_img
041E39 C9          2686*  	ret
041E3A             2687*  
041E3A             2688*  ld_15_015:
041E3A 21 00 40 04 2689*  	ld hl,F15_015
041E3E 22 C1 B7 04 2690*  	ld (cur_filename),hl
041E42 11 CB C3 04 2691*  	ld de,filedata
041E46 01 00 00 01 2692*  	ld bc,65536
041E4A 3E 01       2693*  	ld a,mos_load
041E4C 5B CF       2694*  	RST.LIL 08h
041E4E 21 84 01 00 2695*  	ld hl,BUF_15_015
041E52 01 19 00 00 2696*  	ld bc,25
041E56 11 2D 00 00 2697*  	ld de,45
041E5A DD 21 65 04 2698*  	ld ix,1125
       00          
041E5F CD 3C B9 04 2699*  	call vdu_load_img
041E63 C9          2700*  	ret
041E64             2701*  
041E64             2702*  ld_15_016:
041E64 21 14 40 04 2703*  	ld hl,F15_016
041E68 22 C1 B7 04 2704*  	ld (cur_filename),hl
041E6C 11 CB C3 04 2705*  	ld de,filedata
041E70 01 00 00 01 2706*  	ld bc,65536
041E74 3E 01       2707*  	ld a,mos_load
041E76 5B CF       2708*  	RST.LIL 08h
041E78 21 85 01 00 2709*  	ld hl,BUF_15_016
041E7C 01 23 00 00 2710*  	ld bc,35
041E80 11 2D 00 00 2711*  	ld de,45
041E84 DD 21 27 06 2712*  	ld ix,1575
       00          
041E89 CD 3C B9 04 2713*  	call vdu_load_img
041E8D C9          2714*  	ret
041E8E             2715*  
041E8E             2716*  ld_15_020:
041E8E 21 28 40 04 2717*  	ld hl,F15_020
041E92 22 C1 B7 04 2718*  	ld (cur_filename),hl
041E96 11 CB C3 04 2719*  	ld de,filedata
041E9A 01 00 00 01 2720*  	ld bc,65536
041E9E 3E 01       2721*  	ld a,mos_load
041EA0 5B CF       2722*  	RST.LIL 08h
041EA2 21 86 01 00 2723*  	ld hl,BUF_15_020
041EA6 01 2E 00 00 2724*  	ld bc,46
041EAA 11 2D 00 00 2725*  	ld de,45
041EAE DD 21 16 08 2726*  	ld ix,2070
       00          
041EB3 CD 3C B9 04 2727*  	call vdu_load_img
041EB7 C9          2728*  	ret
041EB8             2729*  
041EB8             2730*  ld_15_024:
041EB8 21 3C 40 04 2731*  	ld hl,F15_024
041EBC 22 C1 B7 04 2732*  	ld (cur_filename),hl
041EC0 11 CB C3 04 2733*  	ld de,filedata
041EC4 01 00 00 01 2734*  	ld bc,65536
041EC8 3E 01       2735*  	ld a,mos_load
041ECA 5B CF       2736*  	RST.LIL 08h
041ECC 21 87 01 00 2737*  	ld hl,BUF_15_024
041ED0 01 2E 00 00 2738*  	ld bc,46
041ED4 11 40 00 00 2739*  	ld de,64
041ED8 DD 21 80 0B 2740*  	ld ix,2944
       00          
041EDD CD 3C B9 04 2741*  	call vdu_load_img
041EE1 C9          2742*  	ret
041EE2             2743*  
041EE2             2744*  ld_15_025:
041EE2 21 50 40 04 2745*  	ld hl,F15_025
041EE6 22 C1 B7 04 2746*  	ld (cur_filename),hl
041EEA 11 CB C3 04 2747*  	ld de,filedata
041EEE 01 00 00 01 2748*  	ld bc,65536
041EF2 3E 01       2749*  	ld a,mos_load
041EF4 5B CF       2750*  	RST.LIL 08h
041EF6 21 88 01 00 2751*  	ld hl,BUF_15_025
041EFA 01 1C 00 00 2752*  	ld bc,28
041EFE 11 40 00 00 2753*  	ld de,64
041F02 DD 21 00 07 2754*  	ld ix,1792
       00          
041F07 CD 3C B9 04 2755*  	call vdu_load_img
041F0B C9          2756*  	ret
041F0C             2757*  
041F0C             2758*  ld_15_026:
041F0C 21 64 40 04 2759*  	ld hl,F15_026
041F10 22 C1 B7 04 2760*  	ld (cur_filename),hl
041F14 11 CB C3 04 2761*  	ld de,filedata
041F18 01 00 00 01 2762*  	ld bc,65536
041F1C 3E 01       2763*  	ld a,mos_load
041F1E 5B CF       2764*  	RST.LIL 08h
041F20 21 89 01 00 2765*  	ld hl,BUF_15_026
041F24 01 09 00 00 2766*  	ld bc,9
041F28 11 40 00 00 2767*  	ld de,64
041F2C DD 21 40 02 2768*  	ld ix,576
       00          
041F31 CD 3C B9 04 2769*  	call vdu_load_img
041F35 C9          2770*  	ret
041F36             2771*  
041F36             2772*  ld_15_027:
041F36 21 78 40 04 2773*  	ld hl,F15_027
041F3A 22 C1 B7 04 2774*  	ld (cur_filename),hl
041F3E 11 CB C3 04 2775*  	ld de,filedata
041F42 01 00 00 01 2776*  	ld bc,65536
041F46 3E 01       2777*  	ld a,mos_load
041F48 5B CF       2778*  	RST.LIL 08h
041F4A 21 8A 01 00 2779*  	ld hl,BUF_15_027
041F4E 01 0A 00 00 2780*  	ld bc,10
041F52 11 3E 00 00 2781*  	ld de,62
041F56 DD 21 6C 02 2782*  	ld ix,620
       00          
041F5B CD 3C B9 04 2783*  	call vdu_load_img
041F5F C9          2784*  	ret
041F60             2785*  
041F60             2786*  ld_15_028:
041F60 21 8C 40 04 2787*  	ld hl,F15_028
041F64 22 C1 B7 04 2788*  	ld (cur_filename),hl
041F68 11 CB C3 04 2789*  	ld de,filedata
041F6C 01 00 00 01 2790*  	ld bc,65536
041F70 3E 01       2791*  	ld a,mos_load
041F72 5B CF       2792*  	RST.LIL 08h
041F74 21 8B 01 00 2793*  	ld hl,BUF_15_028
041F78 01 1C 00 00 2794*  	ld bc,28
041F7C 11 40 00 00 2795*  	ld de,64
041F80 DD 21 00 07 2796*  	ld ix,1792
       00          
041F85 CD 3C B9 04 2797*  	call vdu_load_img
041F89 C9          2798*  	ret
041F8A             2799*  
041F8A             2800*  ld_15_029:
041F8A 21 A0 40 04 2801*  	ld hl,F15_029
041F8E 22 C1 B7 04 2802*  	ld (cur_filename),hl
041F92 11 CB C3 04 2803*  	ld de,filedata
041F96 01 00 00 01 2804*  	ld bc,65536
041F9A 3E 01       2805*  	ld a,mos_load
041F9C 5B CF       2806*  	RST.LIL 08h
041F9E 21 8C 01 00 2807*  	ld hl,BUF_15_029
041FA2 01 2F 00 00 2808*  	ld bc,47
041FA6 11 40 00 00 2809*  	ld de,64
041FAA DD 21 C0 0B 2810*  	ld ix,3008
       00          
041FAF CD 3C B9 04 2811*  	call vdu_load_img
041FB3 C9          2812*  	ret
041FB4             2813*  
041FB4             2814*  ld_15_032:
041FB4 21 B4 40 04 2815*  	ld hl,F15_032
041FB8 22 C1 B7 04 2816*  	ld (cur_filename),hl
041FBC 11 CB C3 04 2817*  	ld de,filedata
041FC0 01 00 00 01 2818*  	ld bc,65536
041FC4 3E 01       2819*  	ld a,mos_load
041FC6 5B CF       2820*  	RST.LIL 08h
041FC8 21 8D 01 00 2821*  	ld hl,BUF_15_032
041FCC 01 41 00 00 2822*  	ld bc,65
041FD0 11 40 00 00 2823*  	ld de,64
041FD4 DD 21 40 10 2824*  	ld ix,4160
       00          
041FD9 CD 3C B9 04 2825*  	call vdu_load_img
041FDD C9          2826*  	ret
041FDE             2827*  
041FDE             2828*  ld_15_035:
041FDE 21 C8 40 04 2829*  	ld hl,F15_035
041FE2 22 C1 B7 04 2830*  	ld (cur_filename),hl
041FE6 11 CB C3 04 2831*  	ld de,filedata
041FEA 01 00 00 01 2832*  	ld bc,65536
041FEE 3E 01       2833*  	ld a,mos_load
041FF0 5B CF       2834*  	RST.LIL 08h
041FF2 21 8E 01 00 2835*  	ld hl,BUF_15_035
041FF6 01 3F 00 00 2836*  	ld bc,63
041FFA 11 6B 00 00 2837*  	ld de,107
041FFE DD 21 55 1A 2838*  	ld ix,6741
       00          
042003 CD 3C B9 04 2839*  	call vdu_load_img
042007 C9          2840*  	ret
042008             2841*  
042008             2842*  ld_15_036:
042008 21 DC 40 04 2843*  	ld hl,F15_036
04200C 22 C1 B7 04 2844*  	ld (cur_filename),hl
042010 11 CB C3 04 2845*  	ld de,filedata
042014 01 00 00 01 2846*  	ld bc,65536
042018 3E 01       2847*  	ld a,mos_load
04201A 5B CF       2848*  	RST.LIL 08h
04201C 21 8F 01 00 2849*  	ld hl,BUF_15_036
042020 01 16 00 00 2850*  	ld bc,22
042024 11 6B 00 00 2851*  	ld de,107
042028 DD 21 32 09 2852*  	ld ix,2354
       00          
04202D CD 3C B9 04 2853*  	call vdu_load_img
042031 C9          2854*  	ret
042032             2855*  
042032             2856*  ld_15_037:
042032 21 F0 40 04 2857*  	ld hl,F15_037
042036 22 C1 B7 04 2858*  	ld (cur_filename),hl
04203A 11 CB C3 04 2859*  	ld de,filedata
04203E 01 00 00 01 2860*  	ld bc,65536
042042 3E 01       2861*  	ld a,mos_load
042044 5B CF       2862*  	RST.LIL 08h
042046 21 90 01 00 2863*  	ld hl,BUF_15_037
04204A 01 15 00 00 2864*  	ld bc,21
04204E 11 69 00 00 2865*  	ld de,105
042052 DD 21 9D 08 2866*  	ld ix,2205
       00          
042057 CD 3C B9 04 2867*  	call vdu_load_img
04205B C9          2868*  	ret
04205C             2869*  
04205C             2870*  ld_15_038:
04205C 21 04 41 04 2871*  	ld hl,F15_038
042060 22 C1 B7 04 2872*  	ld (cur_filename),hl
042064 11 CB C3 04 2873*  	ld de,filedata
042068 01 00 00 01 2874*  	ld bc,65536
04206C 3E 01       2875*  	ld a,mos_load
04206E 5B CF       2876*  	RST.LIL 08h
042070 21 91 01 00 2877*  	ld hl,BUF_15_038
042074 01 3F 00 00 2878*  	ld bc,63
042078 11 6B 00 00 2879*  	ld de,107
04207C DD 21 55 1A 2880*  	ld ix,6741
       00          
042081 CD 3C B9 04 2881*  	call vdu_load_img
042085 C9          2882*  	ret
042086             2883*  
042086             2884*  ld_15_040:
042086 21 18 41 04 2885*  	ld hl,F15_040
04208A 22 C1 B7 04 2886*  	ld (cur_filename),hl
04208E 11 CB C3 04 2887*  	ld de,filedata
042092 01 00 00 01 2888*  	ld bc,65536
042096 3E 01       2889*  	ld a,mos_load
042098 5B CF       2890*  	RST.LIL 08h
04209A 21 92 01 00 2891*  	ld hl,BUF_15_040
04209E 01 6C 00 00 2892*  	ld bc,108
0420A2 11 6B 00 00 2893*  	ld de,107
0420A6 DD 21 24 2D 2894*  	ld ix,11556
       00          
0420AB CD 3C B9 04 2895*  	call vdu_load_img
0420AF C9          2896*  	ret
0420B0             2897*  
0420B0             2898*  ld_15_042:
0420B0 21 2C 41 04 2899*  	ld hl,F15_042
0420B4 22 C1 B7 04 2900*  	ld (cur_filename),hl
0420B8 11 CB C3 04 2901*  	ld de,filedata
0420BC 01 00 00 01 2902*  	ld bc,65536
0420C0 3E 01       2903*  	ld a,mos_load
0420C2 5B CF       2904*  	RST.LIL 08h
0420C4 21 93 01 00 2905*  	ld hl,BUF_15_042
0420C8 01 6A 00 00 2906*  	ld bc,106
0420CC 11 A0 00 00 2907*  	ld de,160
0420D0 DD 21 40 42 2908*  	ld ix,16960
       00          
0420D5 CD 3C B9 04 2909*  	call vdu_load_img
0420D9 C9          2910*  	ret
0420DA             2911*  
0420DA             2912*  ld_15_043:
0420DA 21 40 41 04 2913*  	ld hl,F15_043
0420DE 22 C1 B7 04 2914*  	ld (cur_filename),hl
0420E2 11 CB C3 04 2915*  	ld de,filedata
0420E6 01 00 00 01 2916*  	ld bc,65536
0420EA 3E 01       2917*  	ld a,mos_load
0420EC 5B CF       2918*  	RST.LIL 08h
0420EE 21 94 01 00 2919*  	ld hl,BUF_15_043
0420F2 01 6B 00 00 2920*  	ld bc,107
0420F6 11 A0 00 00 2921*  	ld de,160
0420FA DD 21 E0 42 2922*  	ld ix,17120
       00          
0420FF CD 3C B9 04 2923*  	call vdu_load_img
042103 C9          2924*  	ret
042104             2925*  
042104             2926*  ld_15_044:
042104 21 54 41 04 2927*  	ld hl,F15_044
042108 22 C1 B7 04 2928*  	ld (cur_filename),hl
04210C 11 CB C3 04 2929*  	ld de,filedata
042110 01 00 00 01 2930*  	ld bc,65536
042114 3E 01       2931*  	ld a,mos_load
042116 5B CF       2932*  	RST.LIL 08h
042118 21 95 01 00 2933*  	ld hl,BUF_15_044
04211C 01 40 01 00 2934*  	ld bc,320
042120 11 A0 00 00 2935*  	ld de,160
042124 DD 21 00 C8 2936*  	ld ix,51200
       00          
042129 CD 3C B9 04 2937*  	call vdu_load_img
04212D C9          2938*  	ret
04212E             2939*  
04212E             2940*  ld_16_004:
04212E 21 68 41 04 2941*  	ld hl,F16_004
042132 22 C1 B7 04 2942*  	ld (cur_filename),hl
042136 11 CB C3 04 2943*  	ld de,filedata
04213A 01 00 00 01 2944*  	ld bc,65536
04213E 3E 01       2945*  	ld a,mos_load
042140 5B CF       2946*  	RST.LIL 08h
042142 21 96 01 00 2947*  	ld hl,BUF_16_004
042146 01 24 00 00 2948*  	ld bc,36
04214A 11 23 00 00 2949*  	ld de,35
04214E DD 21 EC 04 2950*  	ld ix,1260
       00          
042153 CD 3C B9 04 2951*  	call vdu_load_img
042157 C9          2952*  	ret
042158             2953*  
042158             2954*  ld_16_009:
042158 21 7C 41 04 2955*  	ld hl,F16_009
04215C 22 C1 B7 04 2956*  	ld (cur_filename),hl
042160 11 CB C3 04 2957*  	ld de,filedata
042164 01 00 00 01 2958*  	ld bc,65536
042168 3E 01       2959*  	ld a,mos_load
04216A 5B CF       2960*  	RST.LIL 08h
04216C 21 97 01 00 2961*  	ld hl,BUF_16_009
042170 01 23 00 00 2962*  	ld bc,35
042174 11 2D 00 00 2963*  	ld de,45
042178 DD 21 27 06 2964*  	ld ix,1575
       00          
04217D CD 3C B9 04 2965*  	call vdu_load_img
042181 C9          2966*  	ret
042182             2967*  
042182             2968*  ld_16_010:
042182 21 90 41 04 2969*  	ld hl,F16_010
042186 22 C1 B7 04 2970*  	ld (cur_filename),hl
04218A 11 CB C3 04 2971*  	ld de,filedata
04218E 01 00 00 01 2972*  	ld bc,65536
042192 3E 01       2973*  	ld a,mos_load
042194 5B CF       2974*  	RST.LIL 08h
042196 21 98 01 00 2975*  	ld hl,BUF_16_010
04219A 01 19 00 00 2976*  	ld bc,25
04219E 11 2D 00 00 2977*  	ld de,45
0421A2 DD 21 65 04 2978*  	ld ix,1125
       00          
0421A7 CD 3C B9 04 2979*  	call vdu_load_img
0421AB C9          2980*  	ret
0421AC             2981*  
0421AC             2982*  ld_16_011:
0421AC 21 A4 41 04 2983*  	ld hl,F16_011
0421B0 22 C1 B7 04 2984*  	ld (cur_filename),hl
0421B4 11 CB C3 04 2985*  	ld de,filedata
0421B8 01 00 00 01 2986*  	ld bc,65536
0421BC 3E 01       2987*  	ld a,mos_load
0421BE 5B CF       2988*  	RST.LIL 08h
0421C0 21 99 01 00 2989*  	ld hl,BUF_16_011
0421C4 01 0F 00 00 2990*  	ld bc,15
0421C8 11 2D 00 00 2991*  	ld de,45
0421CC DD 21 A3 02 2992*  	ld ix,675
       00          
0421D1 CD 3C B9 04 2993*  	call vdu_load_img
0421D5 C9          2994*  	ret
0421D6             2995*  
0421D6             2996*  ld_16_012:
0421D6 21 B8 41 04 2997*  	ld hl,F16_012
0421DA 22 C1 B7 04 2998*  	ld (cur_filename),hl
0421DE 11 CB C3 04 2999*  	ld de,filedata
0421E2 01 00 00 01 3000*  	ld bc,65536
0421E6 3E 01       3001*  	ld a,mos_load
0421E8 5B CF       3002*  	RST.LIL 08h
0421EA 21 9A 01 00 3003*  	ld hl,BUF_16_012
0421EE 01 05 00 00 3004*  	ld bc,5
0421F2 11 2D 00 00 3005*  	ld de,45
0421F6 DD 21 E1 00 3006*  	ld ix,225
       00          
0421FB CD 3C B9 04 3007*  	call vdu_load_img
0421FF C9          3008*  	ret
042200             3009*  
042200             3010*  ld_16_013:
042200 21 CC 41 04 3011*  	ld hl,F16_013
042204 22 C1 B7 04 3012*  	ld (cur_filename),hl
042208 11 CB C3 04 3013*  	ld de,filedata
04220C 01 00 00 01 3014*  	ld bc,65536
042210 3E 01       3015*  	ld a,mos_load
042212 5B CF       3016*  	RST.LIL 08h
042214 21 9B 01 00 3017*  	ld hl,BUF_16_013
042218 01 05 00 00 3018*  	ld bc,5
04221C 11 2B 00 00 3019*  	ld de,43
042220 DD 21 D7 00 3020*  	ld ix,215
       00          
042225 CD 3C B9 04 3021*  	call vdu_load_img
042229 C9          3022*  	ret
04222A             3023*  
04222A             3024*  ld_16_014:
04222A 21 E0 41 04 3025*  	ld hl,F16_014
04222E 22 C1 B7 04 3026*  	ld (cur_filename),hl
042232 11 CB C3 04 3027*  	ld de,filedata
042236 01 00 00 01 3028*  	ld bc,65536
04223A 3E 01       3029*  	ld a,mos_load
04223C 5B CF       3030*  	RST.LIL 08h
04223E 21 9C 01 00 3031*  	ld hl,BUF_16_014
042242 01 0F 00 00 3032*  	ld bc,15
042246 11 2D 00 00 3033*  	ld de,45
04224A DD 21 A3 02 3034*  	ld ix,675
       00          
04224F CD 3C B9 04 3035*  	call vdu_load_img
042253 C9          3036*  	ret
042254             3037*  
042254             3038*  ld_16_015:
042254 21 F4 41 04 3039*  	ld hl,F16_015
042258 22 C1 B7 04 3040*  	ld (cur_filename),hl
04225C 11 CB C3 04 3041*  	ld de,filedata
042260 01 00 00 01 3042*  	ld bc,65536
042264 3E 01       3043*  	ld a,mos_load
042266 5B CF       3044*  	RST.LIL 08h
042268 21 9D 01 00 3045*  	ld hl,BUF_16_015
04226C 01 19 00 00 3046*  	ld bc,25
042270 11 2D 00 00 3047*  	ld de,45
042274 DD 21 65 04 3048*  	ld ix,1125
       00          
042279 CD 3C B9 04 3049*  	call vdu_load_img
04227D C9          3050*  	ret
04227E             3051*  
04227E             3052*  ld_16_016:
04227E 21 08 42 04 3053*  	ld hl,F16_016
042282 22 C1 B7 04 3054*  	ld (cur_filename),hl
042286 11 CB C3 04 3055*  	ld de,filedata
04228A 01 00 00 01 3056*  	ld bc,65536
04228E 3E 01       3057*  	ld a,mos_load
042290 5B CF       3058*  	RST.LIL 08h
042292 21 9E 01 00 3059*  	ld hl,BUF_16_016
042296 01 23 00 00 3060*  	ld bc,35
04229A 11 2D 00 00 3061*  	ld de,45
04229E DD 21 27 06 3062*  	ld ix,1575
       00          
0422A3 CD 3C B9 04 3063*  	call vdu_load_img
0422A7 C9          3064*  	ret
0422A8             3065*  
0422A8             3066*  ld_16_020:
0422A8 21 1C 42 04 3067*  	ld hl,F16_020
0422AC 22 C1 B7 04 3068*  	ld (cur_filename),hl
0422B0 11 CB C3 04 3069*  	ld de,filedata
0422B4 01 00 00 01 3070*  	ld bc,65536
0422B8 3E 01       3071*  	ld a,mos_load
0422BA 5B CF       3072*  	RST.LIL 08h
0422BC 21 9F 01 00 3073*  	ld hl,BUF_16_020
0422C0 01 2E 00 00 3074*  	ld bc,46
0422C4 11 2D 00 00 3075*  	ld de,45
0422C8 DD 21 16 08 3076*  	ld ix,2070
       00          
0422CD CD 3C B9 04 3077*  	call vdu_load_img
0422D1 C9          3078*  	ret
0422D2             3079*  
0422D2             3080*  ld_16_024:
0422D2 21 30 42 04 3081*  	ld hl,F16_024
0422D6 22 C1 B7 04 3082*  	ld (cur_filename),hl
0422DA 11 CB C3 04 3083*  	ld de,filedata
0422DE 01 00 00 01 3084*  	ld bc,65536
0422E2 3E 01       3085*  	ld a,mos_load
0422E4 5B CF       3086*  	RST.LIL 08h
0422E6 21 A0 01 00 3087*  	ld hl,BUF_16_024
0422EA 01 2E 00 00 3088*  	ld bc,46
0422EE 11 40 00 00 3089*  	ld de,64
0422F2 DD 21 80 0B 3090*  	ld ix,2944
       00          
0422F7 CD 3C B9 04 3091*  	call vdu_load_img
0422FB C9          3092*  	ret
0422FC             3093*  
0422FC             3094*  ld_16_025:
0422FC 21 44 42 04 3095*  	ld hl,F16_025
042300 22 C1 B7 04 3096*  	ld (cur_filename),hl
042304 11 CB C3 04 3097*  	ld de,filedata
042308 01 00 00 01 3098*  	ld bc,65536
04230C 3E 01       3099*  	ld a,mos_load
04230E 5B CF       3100*  	RST.LIL 08h
042310 21 A1 01 00 3101*  	ld hl,BUF_16_025
042314 01 1C 00 00 3102*  	ld bc,28
042318 11 40 00 00 3103*  	ld de,64
04231C DD 21 00 07 3104*  	ld ix,1792
       00          
042321 CD 3C B9 04 3105*  	call vdu_load_img
042325 C9          3106*  	ret
042326             3107*  
042326             3108*  ld_16_026:
042326 21 58 42 04 3109*  	ld hl,F16_026
04232A 22 C1 B7 04 3110*  	ld (cur_filename),hl
04232E 11 CB C3 04 3111*  	ld de,filedata
042332 01 00 00 01 3112*  	ld bc,65536
042336 3E 01       3113*  	ld a,mos_load
042338 5B CF       3114*  	RST.LIL 08h
04233A 21 A2 01 00 3115*  	ld hl,BUF_16_026
04233E 01 09 00 00 3116*  	ld bc,9
042342 11 40 00 00 3117*  	ld de,64
042346 DD 21 40 02 3118*  	ld ix,576
       00          
04234B CD 3C B9 04 3119*  	call vdu_load_img
04234F C9          3120*  	ret
042350             3121*  
042350             3122*  ld_16_027:
042350 21 6C 42 04 3123*  	ld hl,F16_027
042354 22 C1 B7 04 3124*  	ld (cur_filename),hl
042358 11 CB C3 04 3125*  	ld de,filedata
04235C 01 00 00 01 3126*  	ld bc,65536
042360 3E 01       3127*  	ld a,mos_load
042362 5B CF       3128*  	RST.LIL 08h
042364 21 A3 01 00 3129*  	ld hl,BUF_16_027
042368 01 0A 00 00 3130*  	ld bc,10
04236C 11 3E 00 00 3131*  	ld de,62
042370 DD 21 6C 02 3132*  	ld ix,620
       00          
042375 CD 3C B9 04 3133*  	call vdu_load_img
042379 C9          3134*  	ret
04237A             3135*  
04237A             3136*  ld_16_028:
04237A 21 80 42 04 3137*  	ld hl,F16_028
04237E 22 C1 B7 04 3138*  	ld (cur_filename),hl
042382 11 CB C3 04 3139*  	ld de,filedata
042386 01 00 00 01 3140*  	ld bc,65536
04238A 3E 01       3141*  	ld a,mos_load
04238C 5B CF       3142*  	RST.LIL 08h
04238E 21 A4 01 00 3143*  	ld hl,BUF_16_028
042392 01 1C 00 00 3144*  	ld bc,28
042396 11 40 00 00 3145*  	ld de,64
04239A DD 21 00 07 3146*  	ld ix,1792
       00          
04239F CD 3C B9 04 3147*  	call vdu_load_img
0423A3 C9          3148*  	ret
0423A4             3149*  
0423A4             3150*  ld_16_029:
0423A4 21 94 42 04 3151*  	ld hl,F16_029
0423A8 22 C1 B7 04 3152*  	ld (cur_filename),hl
0423AC 11 CB C3 04 3153*  	ld de,filedata
0423B0 01 00 00 01 3154*  	ld bc,65536
0423B4 3E 01       3155*  	ld a,mos_load
0423B6 5B CF       3156*  	RST.LIL 08h
0423B8 21 A5 01 00 3157*  	ld hl,BUF_16_029
0423BC 01 2F 00 00 3158*  	ld bc,47
0423C0 11 40 00 00 3159*  	ld de,64
0423C4 DD 21 C0 0B 3160*  	ld ix,3008
       00          
0423C9 CD 3C B9 04 3161*  	call vdu_load_img
0423CD C9          3162*  	ret
0423CE             3163*  
0423CE             3164*  ld_16_032:
0423CE 21 A8 42 04 3165*  	ld hl,F16_032
0423D2 22 C1 B7 04 3166*  	ld (cur_filename),hl
0423D6 11 CB C3 04 3167*  	ld de,filedata
0423DA 01 00 00 01 3168*  	ld bc,65536
0423DE 3E 01       3169*  	ld a,mos_load
0423E0 5B CF       3170*  	RST.LIL 08h
0423E2 21 A6 01 00 3171*  	ld hl,BUF_16_032
0423E6 01 41 00 00 3172*  	ld bc,65
0423EA 11 40 00 00 3173*  	ld de,64
0423EE DD 21 40 10 3174*  	ld ix,4160
       00          
0423F3 CD 3C B9 04 3175*  	call vdu_load_img
0423F7 C9          3176*  	ret
0423F8             3177*  
0423F8             3178*  ld_16_035:
0423F8 21 BC 42 04 3179*  	ld hl,F16_035
0423FC 22 C1 B7 04 3180*  	ld (cur_filename),hl
042400 11 CB C3 04 3181*  	ld de,filedata
042404 01 00 00 01 3182*  	ld bc,65536
042408 3E 01       3183*  	ld a,mos_load
04240A 5B CF       3184*  	RST.LIL 08h
04240C 21 A7 01 00 3185*  	ld hl,BUF_16_035
042410 01 3F 00 00 3186*  	ld bc,63
042414 11 6B 00 00 3187*  	ld de,107
042418 DD 21 55 1A 3188*  	ld ix,6741
       00          
04241D CD 3C B9 04 3189*  	call vdu_load_img
042421 C9          3190*  	ret
042422             3191*  
042422             3192*  ld_16_036:
042422 21 D0 42 04 3193*  	ld hl,F16_036
042426 22 C1 B7 04 3194*  	ld (cur_filename),hl
04242A 11 CB C3 04 3195*  	ld de,filedata
04242E 01 00 00 01 3196*  	ld bc,65536
042432 3E 01       3197*  	ld a,mos_load
042434 5B CF       3198*  	RST.LIL 08h
042436 21 A8 01 00 3199*  	ld hl,BUF_16_036
04243A 01 16 00 00 3200*  	ld bc,22
04243E 11 6B 00 00 3201*  	ld de,107
042442 DD 21 32 09 3202*  	ld ix,2354
       00          
042447 CD 3C B9 04 3203*  	call vdu_load_img
04244B C9          3204*  	ret
04244C             3205*  
04244C             3206*  ld_16_037:
04244C 21 E4 42 04 3207*  	ld hl,F16_037
042450 22 C1 B7 04 3208*  	ld (cur_filename),hl
042454 11 CB C3 04 3209*  	ld de,filedata
042458 01 00 00 01 3210*  	ld bc,65536
04245C 3E 01       3211*  	ld a,mos_load
04245E 5B CF       3212*  	RST.LIL 08h
042460 21 A9 01 00 3213*  	ld hl,BUF_16_037
042464 01 15 00 00 3214*  	ld bc,21
042468 11 69 00 00 3215*  	ld de,105
04246C DD 21 9D 08 3216*  	ld ix,2205
       00          
042471 CD 3C B9 04 3217*  	call vdu_load_img
042475 C9          3218*  	ret
042476             3219*  
042476             3220*  ld_16_038:
042476 21 F8 42 04 3221*  	ld hl,F16_038
04247A 22 C1 B7 04 3222*  	ld (cur_filename),hl
04247E 11 CB C3 04 3223*  	ld de,filedata
042482 01 00 00 01 3224*  	ld bc,65536
042486 3E 01       3225*  	ld a,mos_load
042488 5B CF       3226*  	RST.LIL 08h
04248A 21 AA 01 00 3227*  	ld hl,BUF_16_038
04248E 01 3F 00 00 3228*  	ld bc,63
042492 11 6B 00 00 3229*  	ld de,107
042496 DD 21 55 1A 3230*  	ld ix,6741
       00          
04249B CD 3C B9 04 3231*  	call vdu_load_img
04249F C9          3232*  	ret
0424A0             3233*  
0424A0             3234*  ld_16_040:
0424A0 21 0C 43 04 3235*  	ld hl,F16_040
0424A4 22 C1 B7 04 3236*  	ld (cur_filename),hl
0424A8 11 CB C3 04 3237*  	ld de,filedata
0424AC 01 00 00 01 3238*  	ld bc,65536
0424B0 3E 01       3239*  	ld a,mos_load
0424B2 5B CF       3240*  	RST.LIL 08h
0424B4 21 AB 01 00 3241*  	ld hl,BUF_16_040
0424B8 01 6C 00 00 3242*  	ld bc,108
0424BC 11 6B 00 00 3243*  	ld de,107
0424C0 DD 21 24 2D 3244*  	ld ix,11556
       00          
0424C5 CD 3C B9 04 3245*  	call vdu_load_img
0424C9 C9          3246*  	ret
0424CA             3247*  
0424CA             3248*  ld_16_042:
0424CA 21 20 43 04 3249*  	ld hl,F16_042
0424CE 22 C1 B7 04 3250*  	ld (cur_filename),hl
0424D2 11 CB C3 04 3251*  	ld de,filedata
0424D6 01 00 00 01 3252*  	ld bc,65536
0424DA 3E 01       3253*  	ld a,mos_load
0424DC 5B CF       3254*  	RST.LIL 08h
0424DE 21 AC 01 00 3255*  	ld hl,BUF_16_042
0424E2 01 6A 00 00 3256*  	ld bc,106
0424E6 11 A0 00 00 3257*  	ld de,160
0424EA DD 21 40 42 3258*  	ld ix,16960
       00          
0424EF CD 3C B9 04 3259*  	call vdu_load_img
0424F3 C9          3260*  	ret
0424F4             3261*  
0424F4             3262*  ld_16_043:
0424F4 21 34 43 04 3263*  	ld hl,F16_043
0424F8 22 C1 B7 04 3264*  	ld (cur_filename),hl
0424FC 11 CB C3 04 3265*  	ld de,filedata
042500 01 00 00 01 3266*  	ld bc,65536
042504 3E 01       3267*  	ld a,mos_load
042506 5B CF       3268*  	RST.LIL 08h
042508 21 AD 01 00 3269*  	ld hl,BUF_16_043
04250C 01 6B 00 00 3270*  	ld bc,107
042510 11 A0 00 00 3271*  	ld de,160
042514 DD 21 E0 42 3272*  	ld ix,17120
       00          
042519 CD 3C B9 04 3273*  	call vdu_load_img
04251D C9          3274*  	ret
04251E             3275*  
04251E             3276*  ld_16_044:
04251E 21 48 43 04 3277*  	ld hl,F16_044
042522 22 C1 B7 04 3278*  	ld (cur_filename),hl
042526 11 CB C3 04 3279*  	ld de,filedata
04252A 01 00 00 01 3280*  	ld bc,65536
04252E 3E 01       3281*  	ld a,mos_load
042530 5B CF       3282*  	RST.LIL 08h
042532 21 AE 01 00 3283*  	ld hl,BUF_16_044
042536 01 40 01 00 3284*  	ld bc,320
04253A 11 A0 00 00 3285*  	ld de,160
04253E DD 21 00 C8 3286*  	ld ix,51200
       00          
042543 CD 3C B9 04 3287*  	call vdu_load_img
042547 C9          3288*  	ret
042548             3289*  
042548             3290*  ld_17_004:
042548 21 5C 43 04 3291*  	ld hl,F17_004
04254C 22 C1 B7 04 3292*  	ld (cur_filename),hl
042550 11 CB C3 04 3293*  	ld de,filedata
042554 01 00 00 01 3294*  	ld bc,65536
042558 3E 01       3295*  	ld a,mos_load
04255A 5B CF       3296*  	RST.LIL 08h
04255C 21 AF 01 00 3297*  	ld hl,BUF_17_004
042560 01 24 00 00 3298*  	ld bc,36
042564 11 23 00 00 3299*  	ld de,35
042568 DD 21 EC 04 3300*  	ld ix,1260
       00          
04256D CD 3C B9 04 3301*  	call vdu_load_img
042571 C9          3302*  	ret
042572             3303*  
042572             3304*  ld_17_009:
042572 21 70 43 04 3305*  	ld hl,F17_009
042576 22 C1 B7 04 3306*  	ld (cur_filename),hl
04257A 11 CB C3 04 3307*  	ld de,filedata
04257E 01 00 00 01 3308*  	ld bc,65536
042582 3E 01       3309*  	ld a,mos_load
042584 5B CF       3310*  	RST.LIL 08h
042586 21 B0 01 00 3311*  	ld hl,BUF_17_009
04258A 01 23 00 00 3312*  	ld bc,35
04258E 11 2D 00 00 3313*  	ld de,45
042592 DD 21 27 06 3314*  	ld ix,1575
       00          
042597 CD 3C B9 04 3315*  	call vdu_load_img
04259B C9          3316*  	ret
04259C             3317*  
04259C             3318*  ld_17_010:
04259C 21 84 43 04 3319*  	ld hl,F17_010
0425A0 22 C1 B7 04 3320*  	ld (cur_filename),hl
0425A4 11 CB C3 04 3321*  	ld de,filedata
0425A8 01 00 00 01 3322*  	ld bc,65536
0425AC 3E 01       3323*  	ld a,mos_load
0425AE 5B CF       3324*  	RST.LIL 08h
0425B0 21 B1 01 00 3325*  	ld hl,BUF_17_010
0425B4 01 19 00 00 3326*  	ld bc,25
0425B8 11 2D 00 00 3327*  	ld de,45
0425BC DD 21 65 04 3328*  	ld ix,1125
       00          
0425C1 CD 3C B9 04 3329*  	call vdu_load_img
0425C5 C9          3330*  	ret
0425C6             3331*  
0425C6             3332*  ld_17_011:
0425C6 21 98 43 04 3333*  	ld hl,F17_011
0425CA 22 C1 B7 04 3334*  	ld (cur_filename),hl
0425CE 11 CB C3 04 3335*  	ld de,filedata
0425D2 01 00 00 01 3336*  	ld bc,65536
0425D6 3E 01       3337*  	ld a,mos_load
0425D8 5B CF       3338*  	RST.LIL 08h
0425DA 21 B2 01 00 3339*  	ld hl,BUF_17_011
0425DE 01 0F 00 00 3340*  	ld bc,15
0425E2 11 2D 00 00 3341*  	ld de,45
0425E6 DD 21 A3 02 3342*  	ld ix,675
       00          
0425EB CD 3C B9 04 3343*  	call vdu_load_img
0425EF C9          3344*  	ret
0425F0             3345*  
0425F0             3346*  ld_17_012:
0425F0 21 AC 43 04 3347*  	ld hl,F17_012
0425F4 22 C1 B7 04 3348*  	ld (cur_filename),hl
0425F8 11 CB C3 04 3349*  	ld de,filedata
0425FC 01 00 00 01 3350*  	ld bc,65536
042600 3E 01       3351*  	ld a,mos_load
042602 5B CF       3352*  	RST.LIL 08h
042604 21 B3 01 00 3353*  	ld hl,BUF_17_012
042608 01 05 00 00 3354*  	ld bc,5
04260C 11 2D 00 00 3355*  	ld de,45
042610 DD 21 E1 00 3356*  	ld ix,225
       00          
042615 CD 3C B9 04 3357*  	call vdu_load_img
042619 C9          3358*  	ret
04261A             3359*  
04261A             3360*  ld_17_013:
04261A 21 C0 43 04 3361*  	ld hl,F17_013
04261E 22 C1 B7 04 3362*  	ld (cur_filename),hl
042622 11 CB C3 04 3363*  	ld de,filedata
042626 01 00 00 01 3364*  	ld bc,65536
04262A 3E 01       3365*  	ld a,mos_load
04262C 5B CF       3366*  	RST.LIL 08h
04262E 21 B4 01 00 3367*  	ld hl,BUF_17_013
042632 01 05 00 00 3368*  	ld bc,5
042636 11 2B 00 00 3369*  	ld de,43
04263A DD 21 D7 00 3370*  	ld ix,215
       00          
04263F CD 3C B9 04 3371*  	call vdu_load_img
042643 C9          3372*  	ret
042644             3373*  
042644             3374*  ld_17_014:
042644 21 D4 43 04 3375*  	ld hl,F17_014
042648 22 C1 B7 04 3376*  	ld (cur_filename),hl
04264C 11 CB C3 04 3377*  	ld de,filedata
042650 01 00 00 01 3378*  	ld bc,65536
042654 3E 01       3379*  	ld a,mos_load
042656 5B CF       3380*  	RST.LIL 08h
042658 21 B5 01 00 3381*  	ld hl,BUF_17_014
04265C 01 0F 00 00 3382*  	ld bc,15
042660 11 2D 00 00 3383*  	ld de,45
042664 DD 21 A3 02 3384*  	ld ix,675
       00          
042669 CD 3C B9 04 3385*  	call vdu_load_img
04266D C9          3386*  	ret
04266E             3387*  
04266E             3388*  ld_17_015:
04266E 21 E8 43 04 3389*  	ld hl,F17_015
042672 22 C1 B7 04 3390*  	ld (cur_filename),hl
042676 11 CB C3 04 3391*  	ld de,filedata
04267A 01 00 00 01 3392*  	ld bc,65536
04267E 3E 01       3393*  	ld a,mos_load
042680 5B CF       3394*  	RST.LIL 08h
042682 21 B6 01 00 3395*  	ld hl,BUF_17_015
042686 01 19 00 00 3396*  	ld bc,25
04268A 11 2D 00 00 3397*  	ld de,45
04268E DD 21 65 04 3398*  	ld ix,1125
       00          
042693 CD 3C B9 04 3399*  	call vdu_load_img
042697 C9          3400*  	ret
042698             3401*  
042698             3402*  ld_17_016:
042698 21 FC 43 04 3403*  	ld hl,F17_016
04269C 22 C1 B7 04 3404*  	ld (cur_filename),hl
0426A0 11 CB C3 04 3405*  	ld de,filedata
0426A4 01 00 00 01 3406*  	ld bc,65536
0426A8 3E 01       3407*  	ld a,mos_load
0426AA 5B CF       3408*  	RST.LIL 08h
0426AC 21 B7 01 00 3409*  	ld hl,BUF_17_016
0426B0 01 23 00 00 3410*  	ld bc,35
0426B4 11 2D 00 00 3411*  	ld de,45
0426B8 DD 21 27 06 3412*  	ld ix,1575
       00          
0426BD CD 3C B9 04 3413*  	call vdu_load_img
0426C1 C9          3414*  	ret
0426C2             3415*  
0426C2             3416*  ld_17_020:
0426C2 21 10 44 04 3417*  	ld hl,F17_020
0426C6 22 C1 B7 04 3418*  	ld (cur_filename),hl
0426CA 11 CB C3 04 3419*  	ld de,filedata
0426CE 01 00 00 01 3420*  	ld bc,65536
0426D2 3E 01       3421*  	ld a,mos_load
0426D4 5B CF       3422*  	RST.LIL 08h
0426D6 21 B8 01 00 3423*  	ld hl,BUF_17_020
0426DA 01 2E 00 00 3424*  	ld bc,46
0426DE 11 2D 00 00 3425*  	ld de,45
0426E2 DD 21 16 08 3426*  	ld ix,2070
       00          
0426E7 CD 3C B9 04 3427*  	call vdu_load_img
0426EB C9          3428*  	ret
0426EC             3429*  
0426EC             3430*  ld_17_024:
0426EC 21 24 44 04 3431*  	ld hl,F17_024
0426F0 22 C1 B7 04 3432*  	ld (cur_filename),hl
0426F4 11 CB C3 04 3433*  	ld de,filedata
0426F8 01 00 00 01 3434*  	ld bc,65536
0426FC 3E 01       3435*  	ld a,mos_load
0426FE 5B CF       3436*  	RST.LIL 08h
042700 21 B9 01 00 3437*  	ld hl,BUF_17_024
042704 01 2E 00 00 3438*  	ld bc,46
042708 11 40 00 00 3439*  	ld de,64
04270C DD 21 80 0B 3440*  	ld ix,2944
       00          
042711 CD 3C B9 04 3441*  	call vdu_load_img
042715 C9          3442*  	ret
042716             3443*  
042716             3444*  ld_17_025:
042716 21 38 44 04 3445*  	ld hl,F17_025
04271A 22 C1 B7 04 3446*  	ld (cur_filename),hl
04271E 11 CB C3 04 3447*  	ld de,filedata
042722 01 00 00 01 3448*  	ld bc,65536
042726 3E 01       3449*  	ld a,mos_load
042728 5B CF       3450*  	RST.LIL 08h
04272A 21 BA 01 00 3451*  	ld hl,BUF_17_025
04272E 01 1C 00 00 3452*  	ld bc,28
042732 11 40 00 00 3453*  	ld de,64
042736 DD 21 00 07 3454*  	ld ix,1792
       00          
04273B CD 3C B9 04 3455*  	call vdu_load_img
04273F C9          3456*  	ret
042740             3457*  
042740             3458*  ld_17_026:
042740 21 4C 44 04 3459*  	ld hl,F17_026
042744 22 C1 B7 04 3460*  	ld (cur_filename),hl
042748 11 CB C3 04 3461*  	ld de,filedata
04274C 01 00 00 01 3462*  	ld bc,65536
042750 3E 01       3463*  	ld a,mos_load
042752 5B CF       3464*  	RST.LIL 08h
042754 21 BB 01 00 3465*  	ld hl,BUF_17_026
042758 01 09 00 00 3466*  	ld bc,9
04275C 11 40 00 00 3467*  	ld de,64
042760 DD 21 40 02 3468*  	ld ix,576
       00          
042765 CD 3C B9 04 3469*  	call vdu_load_img
042769 C9          3470*  	ret
04276A             3471*  
04276A             3472*  ld_17_027:
04276A 21 60 44 04 3473*  	ld hl,F17_027
04276E 22 C1 B7 04 3474*  	ld (cur_filename),hl
042772 11 CB C3 04 3475*  	ld de,filedata
042776 01 00 00 01 3476*  	ld bc,65536
04277A 3E 01       3477*  	ld a,mos_load
04277C 5B CF       3478*  	RST.LIL 08h
04277E 21 BC 01 00 3479*  	ld hl,BUF_17_027
042782 01 0A 00 00 3480*  	ld bc,10
042786 11 3E 00 00 3481*  	ld de,62
04278A DD 21 6C 02 3482*  	ld ix,620
       00          
04278F CD 3C B9 04 3483*  	call vdu_load_img
042793 C9          3484*  	ret
042794             3485*  
042794             3486*  ld_17_028:
042794 21 74 44 04 3487*  	ld hl,F17_028
042798 22 C1 B7 04 3488*  	ld (cur_filename),hl
04279C 11 CB C3 04 3489*  	ld de,filedata
0427A0 01 00 00 01 3490*  	ld bc,65536
0427A4 3E 01       3491*  	ld a,mos_load
0427A6 5B CF       3492*  	RST.LIL 08h
0427A8 21 BD 01 00 3493*  	ld hl,BUF_17_028
0427AC 01 1C 00 00 3494*  	ld bc,28
0427B0 11 40 00 00 3495*  	ld de,64
0427B4 DD 21 00 07 3496*  	ld ix,1792
       00          
0427B9 CD 3C B9 04 3497*  	call vdu_load_img
0427BD C9          3498*  	ret
0427BE             3499*  
0427BE             3500*  ld_17_029:
0427BE 21 88 44 04 3501*  	ld hl,F17_029
0427C2 22 C1 B7 04 3502*  	ld (cur_filename),hl
0427C6 11 CB C3 04 3503*  	ld de,filedata
0427CA 01 00 00 01 3504*  	ld bc,65536
0427CE 3E 01       3505*  	ld a,mos_load
0427D0 5B CF       3506*  	RST.LIL 08h
0427D2 21 BE 01 00 3507*  	ld hl,BUF_17_029
0427D6 01 2F 00 00 3508*  	ld bc,47
0427DA 11 40 00 00 3509*  	ld de,64
0427DE DD 21 C0 0B 3510*  	ld ix,3008
       00          
0427E3 CD 3C B9 04 3511*  	call vdu_load_img
0427E7 C9          3512*  	ret
0427E8             3513*  
0427E8             3514*  ld_17_032:
0427E8 21 9C 44 04 3515*  	ld hl,F17_032
0427EC 22 C1 B7 04 3516*  	ld (cur_filename),hl
0427F0 11 CB C3 04 3517*  	ld de,filedata
0427F4 01 00 00 01 3518*  	ld bc,65536
0427F8 3E 01       3519*  	ld a,mos_load
0427FA 5B CF       3520*  	RST.LIL 08h
0427FC 21 BF 01 00 3521*  	ld hl,BUF_17_032
042800 01 41 00 00 3522*  	ld bc,65
042804 11 40 00 00 3523*  	ld de,64
042808 DD 21 40 10 3524*  	ld ix,4160
       00          
04280D CD 3C B9 04 3525*  	call vdu_load_img
042811 C9          3526*  	ret
042812             3527*  
042812             3528*  ld_17_035:
042812 21 B0 44 04 3529*  	ld hl,F17_035
042816 22 C1 B7 04 3530*  	ld (cur_filename),hl
04281A 11 CB C3 04 3531*  	ld de,filedata
04281E 01 00 00 01 3532*  	ld bc,65536
042822 3E 01       3533*  	ld a,mos_load
042824 5B CF       3534*  	RST.LIL 08h
042826 21 C0 01 00 3535*  	ld hl,BUF_17_035
04282A 01 3F 00 00 3536*  	ld bc,63
04282E 11 6B 00 00 3537*  	ld de,107
042832 DD 21 55 1A 3538*  	ld ix,6741
       00          
042837 CD 3C B9 04 3539*  	call vdu_load_img
04283B C9          3540*  	ret
04283C             3541*  
04283C             3542*  ld_17_036:
04283C 21 C4 44 04 3543*  	ld hl,F17_036
042840 22 C1 B7 04 3544*  	ld (cur_filename),hl
042844 11 CB C3 04 3545*  	ld de,filedata
042848 01 00 00 01 3546*  	ld bc,65536
04284C 3E 01       3547*  	ld a,mos_load
04284E 5B CF       3548*  	RST.LIL 08h
042850 21 C1 01 00 3549*  	ld hl,BUF_17_036
042854 01 16 00 00 3550*  	ld bc,22
042858 11 6B 00 00 3551*  	ld de,107
04285C DD 21 32 09 3552*  	ld ix,2354
       00          
042861 CD 3C B9 04 3553*  	call vdu_load_img
042865 C9          3554*  	ret
042866             3555*  
042866             3556*  ld_17_037:
042866 21 D8 44 04 3557*  	ld hl,F17_037
04286A 22 C1 B7 04 3558*  	ld (cur_filename),hl
04286E 11 CB C3 04 3559*  	ld de,filedata
042872 01 00 00 01 3560*  	ld bc,65536
042876 3E 01       3561*  	ld a,mos_load
042878 5B CF       3562*  	RST.LIL 08h
04287A 21 C2 01 00 3563*  	ld hl,BUF_17_037
04287E 01 15 00 00 3564*  	ld bc,21
042882 11 69 00 00 3565*  	ld de,105
042886 DD 21 9D 08 3566*  	ld ix,2205
       00          
04288B CD 3C B9 04 3567*  	call vdu_load_img
04288F C9          3568*  	ret
042890             3569*  
042890             3570*  ld_17_038:
042890 21 EC 44 04 3571*  	ld hl,F17_038
042894 22 C1 B7 04 3572*  	ld (cur_filename),hl
042898 11 CB C3 04 3573*  	ld de,filedata
04289C 01 00 00 01 3574*  	ld bc,65536
0428A0 3E 01       3575*  	ld a,mos_load
0428A2 5B CF       3576*  	RST.LIL 08h
0428A4 21 C3 01 00 3577*  	ld hl,BUF_17_038
0428A8 01 3F 00 00 3578*  	ld bc,63
0428AC 11 6B 00 00 3579*  	ld de,107
0428B0 DD 21 55 1A 3580*  	ld ix,6741
       00          
0428B5 CD 3C B9 04 3581*  	call vdu_load_img
0428B9 C9          3582*  	ret
0428BA             3583*  
0428BA             3584*  ld_17_040:
0428BA 21 00 45 04 3585*  	ld hl,F17_040
0428BE 22 C1 B7 04 3586*  	ld (cur_filename),hl
0428C2 11 CB C3 04 3587*  	ld de,filedata
0428C6 01 00 00 01 3588*  	ld bc,65536
0428CA 3E 01       3589*  	ld a,mos_load
0428CC 5B CF       3590*  	RST.LIL 08h
0428CE 21 C4 01 00 3591*  	ld hl,BUF_17_040
0428D2 01 6C 00 00 3592*  	ld bc,108
0428D6 11 6B 00 00 3593*  	ld de,107
0428DA DD 21 24 2D 3594*  	ld ix,11556
       00          
0428DF CD 3C B9 04 3595*  	call vdu_load_img
0428E3 C9          3596*  	ret
0428E4             3597*  
0428E4             3598*  ld_17_042:
0428E4 21 14 45 04 3599*  	ld hl,F17_042
0428E8 22 C1 B7 04 3600*  	ld (cur_filename),hl
0428EC 11 CB C3 04 3601*  	ld de,filedata
0428F0 01 00 00 01 3602*  	ld bc,65536
0428F4 3E 01       3603*  	ld a,mos_load
0428F6 5B CF       3604*  	RST.LIL 08h
0428F8 21 C5 01 00 3605*  	ld hl,BUF_17_042
0428FC 01 6A 00 00 3606*  	ld bc,106
042900 11 A0 00 00 3607*  	ld de,160
042904 DD 21 40 42 3608*  	ld ix,16960
       00          
042909 CD 3C B9 04 3609*  	call vdu_load_img
04290D C9          3610*  	ret
04290E             3611*  
04290E             3612*  ld_17_043:
04290E 21 28 45 04 3613*  	ld hl,F17_043
042912 22 C1 B7 04 3614*  	ld (cur_filename),hl
042916 11 CB C3 04 3615*  	ld de,filedata
04291A 01 00 00 01 3616*  	ld bc,65536
04291E 3E 01       3617*  	ld a,mos_load
042920 5B CF       3618*  	RST.LIL 08h
042922 21 C6 01 00 3619*  	ld hl,BUF_17_043
042926 01 6B 00 00 3620*  	ld bc,107
04292A 11 A0 00 00 3621*  	ld de,160
04292E DD 21 E0 42 3622*  	ld ix,17120
       00          
042933 CD 3C B9 04 3623*  	call vdu_load_img
042937 C9          3624*  	ret
042938             3625*  
042938             3626*  ld_17_044:
042938 21 3C 45 04 3627*  	ld hl,F17_044
04293C 22 C1 B7 04 3628*  	ld (cur_filename),hl
042940 11 CB C3 04 3629*  	ld de,filedata
042944 01 00 00 01 3630*  	ld bc,65536
042948 3E 01       3631*  	ld a,mos_load
04294A 5B CF       3632*  	RST.LIL 08h
04294C 21 C7 01 00 3633*  	ld hl,BUF_17_044
042950 01 40 01 00 3634*  	ld bc,320
042954 11 A0 00 00 3635*  	ld de,160
042958 DD 21 00 C8 3636*  	ld ix,51200
       00          
04295D CD 3C B9 04 3637*  	call vdu_load_img
042961 C9          3638*  	ret
042962             3639*  
042962             3640*  ld_57_004:
042962 21 50 45 04 3641*  	ld hl,F57_004
042966 22 C1 B7 04 3642*  	ld (cur_filename),hl
04296A 11 CB C3 04 3643*  	ld de,filedata
04296E 01 00 00 01 3644*  	ld bc,65536
042972 3E 01       3645*  	ld a,mos_load
042974 5B CF       3646*  	RST.LIL 08h
042976 21 C8 01 00 3647*  	ld hl,BUF_57_004
04297A 01 24 00 00 3648*  	ld bc,36
04297E 11 23 00 00 3649*  	ld de,35
042982 DD 21 EC 04 3650*  	ld ix,1260
       00          
042987 CD 3C B9 04 3651*  	call vdu_load_img
04298B C9          3652*  	ret
04298C             3653*  
04298C             3654*  ld_57_009:
04298C 21 64 45 04 3655*  	ld hl,F57_009
042990 22 C1 B7 04 3656*  	ld (cur_filename),hl
042994 11 CB C3 04 3657*  	ld de,filedata
042998 01 00 00 01 3658*  	ld bc,65536
04299C 3E 01       3659*  	ld a,mos_load
04299E 5B CF       3660*  	RST.LIL 08h
0429A0 21 C9 01 00 3661*  	ld hl,BUF_57_009
0429A4 01 23 00 00 3662*  	ld bc,35
0429A8 11 2D 00 00 3663*  	ld de,45
0429AC DD 21 27 06 3664*  	ld ix,1575
       00          
0429B1 CD 3C B9 04 3665*  	call vdu_load_img
0429B5 C9          3666*  	ret
0429B6             3667*  
0429B6             3668*  ld_57_010:
0429B6 21 78 45 04 3669*  	ld hl,F57_010
0429BA 22 C1 B7 04 3670*  	ld (cur_filename),hl
0429BE 11 CB C3 04 3671*  	ld de,filedata
0429C2 01 00 00 01 3672*  	ld bc,65536
0429C6 3E 01       3673*  	ld a,mos_load
0429C8 5B CF       3674*  	RST.LIL 08h
0429CA 21 CA 01 00 3675*  	ld hl,BUF_57_010
0429CE 01 19 00 00 3676*  	ld bc,25
0429D2 11 2D 00 00 3677*  	ld de,45
0429D6 DD 21 65 04 3678*  	ld ix,1125
       00          
0429DB CD 3C B9 04 3679*  	call vdu_load_img
0429DF C9          3680*  	ret
0429E0             3681*  
0429E0             3682*  ld_57_011:
0429E0 21 8C 45 04 3683*  	ld hl,F57_011
0429E4 22 C1 B7 04 3684*  	ld (cur_filename),hl
0429E8 11 CB C3 04 3685*  	ld de,filedata
0429EC 01 00 00 01 3686*  	ld bc,65536
0429F0 3E 01       3687*  	ld a,mos_load
0429F2 5B CF       3688*  	RST.LIL 08h
0429F4 21 CB 01 00 3689*  	ld hl,BUF_57_011
0429F8 01 0F 00 00 3690*  	ld bc,15
0429FC 11 2D 00 00 3691*  	ld de,45
042A00 DD 21 A3 02 3692*  	ld ix,675
       00          
042A05 CD 3C B9 04 3693*  	call vdu_load_img
042A09 C9          3694*  	ret
042A0A             3695*  
042A0A             3696*  ld_57_012:
042A0A 21 A0 45 04 3697*  	ld hl,F57_012
042A0E 22 C1 B7 04 3698*  	ld (cur_filename),hl
042A12 11 CB C3 04 3699*  	ld de,filedata
042A16 01 00 00 01 3700*  	ld bc,65536
042A1A 3E 01       3701*  	ld a,mos_load
042A1C 5B CF       3702*  	RST.LIL 08h
042A1E 21 CC 01 00 3703*  	ld hl,BUF_57_012
042A22 01 05 00 00 3704*  	ld bc,5
042A26 11 2D 00 00 3705*  	ld de,45
042A2A DD 21 E1 00 3706*  	ld ix,225
       00          
042A2F CD 3C B9 04 3707*  	call vdu_load_img
042A33 C9          3708*  	ret
042A34             3709*  
042A34             3710*  ld_57_013:
042A34 21 B4 45 04 3711*  	ld hl,F57_013
042A38 22 C1 B7 04 3712*  	ld (cur_filename),hl
042A3C 11 CB C3 04 3713*  	ld de,filedata
042A40 01 00 00 01 3714*  	ld bc,65536
042A44 3E 01       3715*  	ld a,mos_load
042A46 5B CF       3716*  	RST.LIL 08h
042A48 21 CD 01 00 3717*  	ld hl,BUF_57_013
042A4C 01 05 00 00 3718*  	ld bc,5
042A50 11 2B 00 00 3719*  	ld de,43
042A54 DD 21 D7 00 3720*  	ld ix,215
       00          
042A59 CD 3C B9 04 3721*  	call vdu_load_img
042A5D C9          3722*  	ret
042A5E             3723*  
042A5E             3724*  ld_57_014:
042A5E 21 C8 45 04 3725*  	ld hl,F57_014
042A62 22 C1 B7 04 3726*  	ld (cur_filename),hl
042A66 11 CB C3 04 3727*  	ld de,filedata
042A6A 01 00 00 01 3728*  	ld bc,65536
042A6E 3E 01       3729*  	ld a,mos_load
042A70 5B CF       3730*  	RST.LIL 08h
042A72 21 CE 01 00 3731*  	ld hl,BUF_57_014
042A76 01 0F 00 00 3732*  	ld bc,15
042A7A 11 2D 00 00 3733*  	ld de,45
042A7E DD 21 A3 02 3734*  	ld ix,675
       00          
042A83 CD 3C B9 04 3735*  	call vdu_load_img
042A87 C9          3736*  	ret
042A88             3737*  
042A88             3738*  ld_57_015:
042A88 21 DC 45 04 3739*  	ld hl,F57_015
042A8C 22 C1 B7 04 3740*  	ld (cur_filename),hl
042A90 11 CB C3 04 3741*  	ld de,filedata
042A94 01 00 00 01 3742*  	ld bc,65536
042A98 3E 01       3743*  	ld a,mos_load
042A9A 5B CF       3744*  	RST.LIL 08h
042A9C 21 CF 01 00 3745*  	ld hl,BUF_57_015
042AA0 01 19 00 00 3746*  	ld bc,25
042AA4 11 2D 00 00 3747*  	ld de,45
042AA8 DD 21 65 04 3748*  	ld ix,1125
       00          
042AAD CD 3C B9 04 3749*  	call vdu_load_img
042AB1 C9          3750*  	ret
042AB2             3751*  
042AB2             3752*  ld_57_016:
042AB2 21 F0 45 04 3753*  	ld hl,F57_016
042AB6 22 C1 B7 04 3754*  	ld (cur_filename),hl
042ABA 11 CB C3 04 3755*  	ld de,filedata
042ABE 01 00 00 01 3756*  	ld bc,65536
042AC2 3E 01       3757*  	ld a,mos_load
042AC4 5B CF       3758*  	RST.LIL 08h
042AC6 21 D0 01 00 3759*  	ld hl,BUF_57_016
042ACA 01 23 00 00 3760*  	ld bc,35
042ACE 11 2D 00 00 3761*  	ld de,45
042AD2 DD 21 27 06 3762*  	ld ix,1575
       00          
042AD7 CD 3C B9 04 3763*  	call vdu_load_img
042ADB C9          3764*  	ret
042ADC             3765*  
042ADC             3766*  ld_57_020:
042ADC 21 04 46 04 3767*  	ld hl,F57_020
042AE0 22 C1 B7 04 3768*  	ld (cur_filename),hl
042AE4 11 CB C3 04 3769*  	ld de,filedata
042AE8 01 00 00 01 3770*  	ld bc,65536
042AEC 3E 01       3771*  	ld a,mos_load
042AEE 5B CF       3772*  	RST.LIL 08h
042AF0 21 D1 01 00 3773*  	ld hl,BUF_57_020
042AF4 01 2E 00 00 3774*  	ld bc,46
042AF8 11 2D 00 00 3775*  	ld de,45
042AFC DD 21 16 08 3776*  	ld ix,2070
       00          
042B01 CD 3C B9 04 3777*  	call vdu_load_img
042B05 C9          3778*  	ret
042B06             3779*  
042B06             3780*  ld_57_024:
042B06 21 18 46 04 3781*  	ld hl,F57_024
042B0A 22 C1 B7 04 3782*  	ld (cur_filename),hl
042B0E 11 CB C3 04 3783*  	ld de,filedata
042B12 01 00 00 01 3784*  	ld bc,65536
042B16 3E 01       3785*  	ld a,mos_load
042B18 5B CF       3786*  	RST.LIL 08h
042B1A 21 D2 01 00 3787*  	ld hl,BUF_57_024
042B1E 01 2E 00 00 3788*  	ld bc,46
042B22 11 40 00 00 3789*  	ld de,64
042B26 DD 21 80 0B 3790*  	ld ix,2944
       00          
042B2B CD 3C B9 04 3791*  	call vdu_load_img
042B2F C9          3792*  	ret
042B30             3793*  
042B30             3794*  ld_57_025:
042B30 21 2C 46 04 3795*  	ld hl,F57_025
042B34 22 C1 B7 04 3796*  	ld (cur_filename),hl
042B38 11 CB C3 04 3797*  	ld de,filedata
042B3C 01 00 00 01 3798*  	ld bc,65536
042B40 3E 01       3799*  	ld a,mos_load
042B42 5B CF       3800*  	RST.LIL 08h
042B44 21 D3 01 00 3801*  	ld hl,BUF_57_025
042B48 01 1C 00 00 3802*  	ld bc,28
042B4C 11 40 00 00 3803*  	ld de,64
042B50 DD 21 00 07 3804*  	ld ix,1792
       00          
042B55 CD 3C B9 04 3805*  	call vdu_load_img
042B59 C9          3806*  	ret
042B5A             3807*  
042B5A             3808*  ld_57_026:
042B5A 21 40 46 04 3809*  	ld hl,F57_026
042B5E 22 C1 B7 04 3810*  	ld (cur_filename),hl
042B62 11 CB C3 04 3811*  	ld de,filedata
042B66 01 00 00 01 3812*  	ld bc,65536
042B6A 3E 01       3813*  	ld a,mos_load
042B6C 5B CF       3814*  	RST.LIL 08h
042B6E 21 D4 01 00 3815*  	ld hl,BUF_57_026
042B72 01 09 00 00 3816*  	ld bc,9
042B76 11 40 00 00 3817*  	ld de,64
042B7A DD 21 40 02 3818*  	ld ix,576
       00          
042B7F CD 3C B9 04 3819*  	call vdu_load_img
042B83 C9          3820*  	ret
042B84             3821*  
042B84             3822*  ld_57_027:
042B84 21 54 46 04 3823*  	ld hl,F57_027
042B88 22 C1 B7 04 3824*  	ld (cur_filename),hl
042B8C 11 CB C3 04 3825*  	ld de,filedata
042B90 01 00 00 01 3826*  	ld bc,65536
042B94 3E 01       3827*  	ld a,mos_load
042B96 5B CF       3828*  	RST.LIL 08h
042B98 21 D5 01 00 3829*  	ld hl,BUF_57_027
042B9C 01 0A 00 00 3830*  	ld bc,10
042BA0 11 3E 00 00 3831*  	ld de,62
042BA4 DD 21 6C 02 3832*  	ld ix,620
       00          
042BA9 CD 3C B9 04 3833*  	call vdu_load_img
042BAD C9          3834*  	ret
042BAE             3835*  
042BAE             3836*  ld_57_028:
042BAE 21 68 46 04 3837*  	ld hl,F57_028
042BB2 22 C1 B7 04 3838*  	ld (cur_filename),hl
042BB6 11 CB C3 04 3839*  	ld de,filedata
042BBA 01 00 00 01 3840*  	ld bc,65536
042BBE 3E 01       3841*  	ld a,mos_load
042BC0 5B CF       3842*  	RST.LIL 08h
042BC2 21 D6 01 00 3843*  	ld hl,BUF_57_028
042BC6 01 1C 00 00 3844*  	ld bc,28
042BCA 11 40 00 00 3845*  	ld de,64
042BCE DD 21 00 07 3846*  	ld ix,1792
       00          
042BD3 CD 3C B9 04 3847*  	call vdu_load_img
042BD7 C9          3848*  	ret
042BD8             3849*  
042BD8             3850*  ld_57_029:
042BD8 21 7C 46 04 3851*  	ld hl,F57_029
042BDC 22 C1 B7 04 3852*  	ld (cur_filename),hl
042BE0 11 CB C3 04 3853*  	ld de,filedata
042BE4 01 00 00 01 3854*  	ld bc,65536
042BE8 3E 01       3855*  	ld a,mos_load
042BEA 5B CF       3856*  	RST.LIL 08h
042BEC 21 D7 01 00 3857*  	ld hl,BUF_57_029
042BF0 01 2F 00 00 3858*  	ld bc,47
042BF4 11 40 00 00 3859*  	ld de,64
042BF8 DD 21 C0 0B 3860*  	ld ix,3008
       00          
042BFD CD 3C B9 04 3861*  	call vdu_load_img
042C01 C9          3862*  	ret
042C02             3863*  
042C02             3864*  ld_57_032:
042C02 21 90 46 04 3865*  	ld hl,F57_032
042C06 22 C1 B7 04 3866*  	ld (cur_filename),hl
042C0A 11 CB C3 04 3867*  	ld de,filedata
042C0E 01 00 00 01 3868*  	ld bc,65536
042C12 3E 01       3869*  	ld a,mos_load
042C14 5B CF       3870*  	RST.LIL 08h
042C16 21 D8 01 00 3871*  	ld hl,BUF_57_032
042C1A 01 41 00 00 3872*  	ld bc,65
042C1E 11 40 00 00 3873*  	ld de,64
042C22 DD 21 40 10 3874*  	ld ix,4160
       00          
042C27 CD 3C B9 04 3875*  	call vdu_load_img
042C2B C9          3876*  	ret
042C2C             3877*  
042C2C             3878*  ld_57_035:
042C2C 21 A4 46 04 3879*  	ld hl,F57_035
042C30 22 C1 B7 04 3880*  	ld (cur_filename),hl
042C34 11 CB C3 04 3881*  	ld de,filedata
042C38 01 00 00 01 3882*  	ld bc,65536
042C3C 3E 01       3883*  	ld a,mos_load
042C3E 5B CF       3884*  	RST.LIL 08h
042C40 21 D9 01 00 3885*  	ld hl,BUF_57_035
042C44 01 3F 00 00 3886*  	ld bc,63
042C48 11 6B 00 00 3887*  	ld de,107
042C4C DD 21 55 1A 3888*  	ld ix,6741
       00          
042C51 CD 3C B9 04 3889*  	call vdu_load_img
042C55 C9          3890*  	ret
042C56             3891*  
042C56             3892*  ld_57_036:
042C56 21 B8 46 04 3893*  	ld hl,F57_036
042C5A 22 C1 B7 04 3894*  	ld (cur_filename),hl
042C5E 11 CB C3 04 3895*  	ld de,filedata
042C62 01 00 00 01 3896*  	ld bc,65536
042C66 3E 01       3897*  	ld a,mos_load
042C68 5B CF       3898*  	RST.LIL 08h
042C6A 21 DA 01 00 3899*  	ld hl,BUF_57_036
042C6E 01 16 00 00 3900*  	ld bc,22
042C72 11 6B 00 00 3901*  	ld de,107
042C76 DD 21 32 09 3902*  	ld ix,2354
       00          
042C7B CD 3C B9 04 3903*  	call vdu_load_img
042C7F C9          3904*  	ret
042C80             3905*  
042C80             3906*  ld_57_037:
042C80 21 CC 46 04 3907*  	ld hl,F57_037
042C84 22 C1 B7 04 3908*  	ld (cur_filename),hl
042C88 11 CB C3 04 3909*  	ld de,filedata
042C8C 01 00 00 01 3910*  	ld bc,65536
042C90 3E 01       3911*  	ld a,mos_load
042C92 5B CF       3912*  	RST.LIL 08h
042C94 21 DB 01 00 3913*  	ld hl,BUF_57_037
042C98 01 15 00 00 3914*  	ld bc,21
042C9C 11 69 00 00 3915*  	ld de,105
042CA0 DD 21 9D 08 3916*  	ld ix,2205
       00          
042CA5 CD 3C B9 04 3917*  	call vdu_load_img
042CA9 C9          3918*  	ret
042CAA             3919*  
042CAA             3920*  ld_57_038:
042CAA 21 E0 46 04 3921*  	ld hl,F57_038
042CAE 22 C1 B7 04 3922*  	ld (cur_filename),hl
042CB2 11 CB C3 04 3923*  	ld de,filedata
042CB6 01 00 00 01 3924*  	ld bc,65536
042CBA 3E 01       3925*  	ld a,mos_load
042CBC 5B CF       3926*  	RST.LIL 08h
042CBE 21 DC 01 00 3927*  	ld hl,BUF_57_038
042CC2 01 3F 00 00 3928*  	ld bc,63
042CC6 11 6B 00 00 3929*  	ld de,107
042CCA DD 21 55 1A 3930*  	ld ix,6741
       00          
042CCF CD 3C B9 04 3931*  	call vdu_load_img
042CD3 C9          3932*  	ret
042CD4             3933*  
042CD4             3934*  ld_57_040:
042CD4 21 F4 46 04 3935*  	ld hl,F57_040
042CD8 22 C1 B7 04 3936*  	ld (cur_filename),hl
042CDC 11 CB C3 04 3937*  	ld de,filedata
042CE0 01 00 00 01 3938*  	ld bc,65536
042CE4 3E 01       3939*  	ld a,mos_load
042CE6 5B CF       3940*  	RST.LIL 08h
042CE8 21 DD 01 00 3941*  	ld hl,BUF_57_040
042CEC 01 6C 00 00 3942*  	ld bc,108
042CF0 11 6B 00 00 3943*  	ld de,107
042CF4 DD 21 24 2D 3944*  	ld ix,11556
       00          
042CF9 CD 3C B9 04 3945*  	call vdu_load_img
042CFD C9          3946*  	ret
042CFE             3947*  
042CFE             3948*  ld_57_042:
042CFE 21 08 47 04 3949*  	ld hl,F57_042
042D02 22 C1 B7 04 3950*  	ld (cur_filename),hl
042D06 11 CB C3 04 3951*  	ld de,filedata
042D0A 01 00 00 01 3952*  	ld bc,65536
042D0E 3E 01       3953*  	ld a,mos_load
042D10 5B CF       3954*  	RST.LIL 08h
042D12 21 DE 01 00 3955*  	ld hl,BUF_57_042
042D16 01 6A 00 00 3956*  	ld bc,106
042D1A 11 A0 00 00 3957*  	ld de,160
042D1E DD 21 40 42 3958*  	ld ix,16960
       00          
042D23 CD 3C B9 04 3959*  	call vdu_load_img
042D27 C9          3960*  	ret
042D28             3961*  
042D28             3962*  ld_57_043:
042D28 21 1C 47 04 3963*  	ld hl,F57_043
042D2C 22 C1 B7 04 3964*  	ld (cur_filename),hl
042D30 11 CB C3 04 3965*  	ld de,filedata
042D34 01 00 00 01 3966*  	ld bc,65536
042D38 3E 01       3967*  	ld a,mos_load
042D3A 5B CF       3968*  	RST.LIL 08h
042D3C 21 DF 01 00 3969*  	ld hl,BUF_57_043
042D40 01 6B 00 00 3970*  	ld bc,107
042D44 11 A0 00 00 3971*  	ld de,160
042D48 DD 21 E0 42 3972*  	ld ix,17120
       00          
042D4D CD 3C B9 04 3973*  	call vdu_load_img
042D51 C9          3974*  	ret
042D52             3975*  
042D52             3976*  ld_57_044:
042D52 21 30 47 04 3977*  	ld hl,F57_044
042D56 22 C1 B7 04 3978*  	ld (cur_filename),hl
042D5A 11 CB C3 04 3979*  	ld de,filedata
042D5E 01 00 00 01 3980*  	ld bc,65536
042D62 3E 01       3981*  	ld a,mos_load
042D64 5B CF       3982*  	RST.LIL 08h
042D66 21 E0 01 00 3983*  	ld hl,BUF_57_044
042D6A 01 40 01 00 3984*  	ld bc,320
042D6E 11 A0 00 00 3985*  	ld de,160
042D72 DD 21 00 C8 3986*  	ld ix,51200
       00          
042D77 CD 3C B9 04 3987*  	call vdu_load_img
042D7B C9          3988*  	ret
042D7C             3989*  
042D7C             3990*  ld_58_004:
042D7C 21 44 47 04 3991*  	ld hl,F58_004
042D80 22 C1 B7 04 3992*  	ld (cur_filename),hl
042D84 11 CB C3 04 3993*  	ld de,filedata
042D88 01 00 00 01 3994*  	ld bc,65536
042D8C 3E 01       3995*  	ld a,mos_load
042D8E 5B CF       3996*  	RST.LIL 08h
042D90 21 E1 01 00 3997*  	ld hl,BUF_58_004
042D94 01 24 00 00 3998*  	ld bc,36
042D98 11 23 00 00 3999*  	ld de,35
042D9C DD 21 EC 04 4000*  	ld ix,1260
       00          
042DA1 CD 3C B9 04 4001*  	call vdu_load_img
042DA5 C9          4002*  	ret
042DA6             4003*  
042DA6             4004*  ld_58_009:
042DA6 21 58 47 04 4005*  	ld hl,F58_009
042DAA 22 C1 B7 04 4006*  	ld (cur_filename),hl
042DAE 11 CB C3 04 4007*  	ld de,filedata
042DB2 01 00 00 01 4008*  	ld bc,65536
042DB6 3E 01       4009*  	ld a,mos_load
042DB8 5B CF       4010*  	RST.LIL 08h
042DBA 21 E2 01 00 4011*  	ld hl,BUF_58_009
042DBE 01 23 00 00 4012*  	ld bc,35
042DC2 11 2D 00 00 4013*  	ld de,45
042DC6 DD 21 27 06 4014*  	ld ix,1575
       00          
042DCB CD 3C B9 04 4015*  	call vdu_load_img
042DCF C9          4016*  	ret
042DD0             4017*  
042DD0             4018*  ld_58_010:
042DD0 21 6C 47 04 4019*  	ld hl,F58_010
042DD4 22 C1 B7 04 4020*  	ld (cur_filename),hl
042DD8 11 CB C3 04 4021*  	ld de,filedata
042DDC 01 00 00 01 4022*  	ld bc,65536
042DE0 3E 01       4023*  	ld a,mos_load
042DE2 5B CF       4024*  	RST.LIL 08h
042DE4 21 E3 01 00 4025*  	ld hl,BUF_58_010
042DE8 01 19 00 00 4026*  	ld bc,25
042DEC 11 2D 00 00 4027*  	ld de,45
042DF0 DD 21 65 04 4028*  	ld ix,1125
       00          
042DF5 CD 3C B9 04 4029*  	call vdu_load_img
042DF9 C9          4030*  	ret
042DFA             4031*  
042DFA             4032*  ld_58_011:
042DFA 21 80 47 04 4033*  	ld hl,F58_011
042DFE 22 C1 B7 04 4034*  	ld (cur_filename),hl
042E02 11 CB C3 04 4035*  	ld de,filedata
042E06 01 00 00 01 4036*  	ld bc,65536
042E0A 3E 01       4037*  	ld a,mos_load
042E0C 5B CF       4038*  	RST.LIL 08h
042E0E 21 E4 01 00 4039*  	ld hl,BUF_58_011
042E12 01 0F 00 00 4040*  	ld bc,15
042E16 11 2D 00 00 4041*  	ld de,45
042E1A DD 21 A3 02 4042*  	ld ix,675
       00          
042E1F CD 3C B9 04 4043*  	call vdu_load_img
042E23 C9          4044*  	ret
042E24             4045*  
042E24             4046*  ld_58_012:
042E24 21 94 47 04 4047*  	ld hl,F58_012
042E28 22 C1 B7 04 4048*  	ld (cur_filename),hl
042E2C 11 CB C3 04 4049*  	ld de,filedata
042E30 01 00 00 01 4050*  	ld bc,65536
042E34 3E 01       4051*  	ld a,mos_load
042E36 5B CF       4052*  	RST.LIL 08h
042E38 21 E5 01 00 4053*  	ld hl,BUF_58_012
042E3C 01 05 00 00 4054*  	ld bc,5
042E40 11 2D 00 00 4055*  	ld de,45
042E44 DD 21 E1 00 4056*  	ld ix,225
       00          
042E49 CD 3C B9 04 4057*  	call vdu_load_img
042E4D C9          4058*  	ret
042E4E             4059*  
042E4E             4060*  ld_58_013:
042E4E 21 A8 47 04 4061*  	ld hl,F58_013
042E52 22 C1 B7 04 4062*  	ld (cur_filename),hl
042E56 11 CB C3 04 4063*  	ld de,filedata
042E5A 01 00 00 01 4064*  	ld bc,65536
042E5E 3E 01       4065*  	ld a,mos_load
042E60 5B CF       4066*  	RST.LIL 08h
042E62 21 E6 01 00 4067*  	ld hl,BUF_58_013
042E66 01 05 00 00 4068*  	ld bc,5
042E6A 11 2B 00 00 4069*  	ld de,43
042E6E DD 21 D7 00 4070*  	ld ix,215
       00          
042E73 CD 3C B9 04 4071*  	call vdu_load_img
042E77 C9          4072*  	ret
042E78             4073*  
042E78             4074*  ld_58_014:
042E78 21 BC 47 04 4075*  	ld hl,F58_014
042E7C 22 C1 B7 04 4076*  	ld (cur_filename),hl
042E80 11 CB C3 04 4077*  	ld de,filedata
042E84 01 00 00 01 4078*  	ld bc,65536
042E88 3E 01       4079*  	ld a,mos_load
042E8A 5B CF       4080*  	RST.LIL 08h
042E8C 21 E7 01 00 4081*  	ld hl,BUF_58_014
042E90 01 0F 00 00 4082*  	ld bc,15
042E94 11 2D 00 00 4083*  	ld de,45
042E98 DD 21 A3 02 4084*  	ld ix,675
       00          
042E9D CD 3C B9 04 4085*  	call vdu_load_img
042EA1 C9          4086*  	ret
042EA2             4087*  
042EA2             4088*  ld_58_015:
042EA2 21 D0 47 04 4089*  	ld hl,F58_015
042EA6 22 C1 B7 04 4090*  	ld (cur_filename),hl
042EAA 11 CB C3 04 4091*  	ld de,filedata
042EAE 01 00 00 01 4092*  	ld bc,65536
042EB2 3E 01       4093*  	ld a,mos_load
042EB4 5B CF       4094*  	RST.LIL 08h
042EB6 21 E8 01 00 4095*  	ld hl,BUF_58_015
042EBA 01 19 00 00 4096*  	ld bc,25
042EBE 11 2D 00 00 4097*  	ld de,45
042EC2 DD 21 65 04 4098*  	ld ix,1125
       00          
042EC7 CD 3C B9 04 4099*  	call vdu_load_img
042ECB C9          4100*  	ret
042ECC             4101*  
042ECC             4102*  ld_58_016:
042ECC 21 E4 47 04 4103*  	ld hl,F58_016
042ED0 22 C1 B7 04 4104*  	ld (cur_filename),hl
042ED4 11 CB C3 04 4105*  	ld de,filedata
042ED8 01 00 00 01 4106*  	ld bc,65536
042EDC 3E 01       4107*  	ld a,mos_load
042EDE 5B CF       4108*  	RST.LIL 08h
042EE0 21 E9 01 00 4109*  	ld hl,BUF_58_016
042EE4 01 23 00 00 4110*  	ld bc,35
042EE8 11 2D 00 00 4111*  	ld de,45
042EEC DD 21 27 06 4112*  	ld ix,1575
       00          
042EF1 CD 3C B9 04 4113*  	call vdu_load_img
042EF5 C9          4114*  	ret
042EF6             4115*  
042EF6             4116*  ld_58_020:
042EF6 21 F8 47 04 4117*  	ld hl,F58_020
042EFA 22 C1 B7 04 4118*  	ld (cur_filename),hl
042EFE 11 CB C3 04 4119*  	ld de,filedata
042F02 01 00 00 01 4120*  	ld bc,65536
042F06 3E 01       4121*  	ld a,mos_load
042F08 5B CF       4122*  	RST.LIL 08h
042F0A 21 EA 01 00 4123*  	ld hl,BUF_58_020
042F0E 01 2E 00 00 4124*  	ld bc,46
042F12 11 2D 00 00 4125*  	ld de,45
042F16 DD 21 16 08 4126*  	ld ix,2070
       00          
042F1B CD 3C B9 04 4127*  	call vdu_load_img
042F1F C9          4128*  	ret
042F20             4129*  
042F20             4130*  ld_58_024:
042F20 21 0C 48 04 4131*  	ld hl,F58_024
042F24 22 C1 B7 04 4132*  	ld (cur_filename),hl
042F28 11 CB C3 04 4133*  	ld de,filedata
042F2C 01 00 00 01 4134*  	ld bc,65536
042F30 3E 01       4135*  	ld a,mos_load
042F32 5B CF       4136*  	RST.LIL 08h
042F34 21 EB 01 00 4137*  	ld hl,BUF_58_024
042F38 01 2E 00 00 4138*  	ld bc,46
042F3C 11 40 00 00 4139*  	ld de,64
042F40 DD 21 80 0B 4140*  	ld ix,2944
       00          
042F45 CD 3C B9 04 4141*  	call vdu_load_img
042F49 C9          4142*  	ret
042F4A             4143*  
042F4A             4144*  ld_58_025:
042F4A 21 20 48 04 4145*  	ld hl,F58_025
042F4E 22 C1 B7 04 4146*  	ld (cur_filename),hl
042F52 11 CB C3 04 4147*  	ld de,filedata
042F56 01 00 00 01 4148*  	ld bc,65536
042F5A 3E 01       4149*  	ld a,mos_load
042F5C 5B CF       4150*  	RST.LIL 08h
042F5E 21 EC 01 00 4151*  	ld hl,BUF_58_025
042F62 01 1C 00 00 4152*  	ld bc,28
042F66 11 40 00 00 4153*  	ld de,64
042F6A DD 21 00 07 4154*  	ld ix,1792
       00          
042F6F CD 3C B9 04 4155*  	call vdu_load_img
042F73 C9          4156*  	ret
042F74             4157*  
042F74             4158*  ld_58_026:
042F74 21 34 48 04 4159*  	ld hl,F58_026
042F78 22 C1 B7 04 4160*  	ld (cur_filename),hl
042F7C 11 CB C3 04 4161*  	ld de,filedata
042F80 01 00 00 01 4162*  	ld bc,65536
042F84 3E 01       4163*  	ld a,mos_load
042F86 5B CF       4164*  	RST.LIL 08h
042F88 21 ED 01 00 4165*  	ld hl,BUF_58_026
042F8C 01 09 00 00 4166*  	ld bc,9
042F90 11 40 00 00 4167*  	ld de,64
042F94 DD 21 40 02 4168*  	ld ix,576
       00          
042F99 CD 3C B9 04 4169*  	call vdu_load_img
042F9D C9          4170*  	ret
042F9E             4171*  
042F9E             4172*  ld_58_027:
042F9E 21 48 48 04 4173*  	ld hl,F58_027
042FA2 22 C1 B7 04 4174*  	ld (cur_filename),hl
042FA6 11 CB C3 04 4175*  	ld de,filedata
042FAA 01 00 00 01 4176*  	ld bc,65536
042FAE 3E 01       4177*  	ld a,mos_load
042FB0 5B CF       4178*  	RST.LIL 08h
042FB2 21 EE 01 00 4179*  	ld hl,BUF_58_027
042FB6 01 0A 00 00 4180*  	ld bc,10
042FBA 11 3E 00 00 4181*  	ld de,62
042FBE DD 21 6C 02 4182*  	ld ix,620
       00          
042FC3 CD 3C B9 04 4183*  	call vdu_load_img
042FC7 C9          4184*  	ret
042FC8             4185*  
042FC8             4186*  ld_58_028:
042FC8 21 5C 48 04 4187*  	ld hl,F58_028
042FCC 22 C1 B7 04 4188*  	ld (cur_filename),hl
042FD0 11 CB C3 04 4189*  	ld de,filedata
042FD4 01 00 00 01 4190*  	ld bc,65536
042FD8 3E 01       4191*  	ld a,mos_load
042FDA 5B CF       4192*  	RST.LIL 08h
042FDC 21 EF 01 00 4193*  	ld hl,BUF_58_028
042FE0 01 1C 00 00 4194*  	ld bc,28
042FE4 11 40 00 00 4195*  	ld de,64
042FE8 DD 21 00 07 4196*  	ld ix,1792
       00          
042FED CD 3C B9 04 4197*  	call vdu_load_img
042FF1 C9          4198*  	ret
042FF2             4199*  
042FF2             4200*  ld_58_029:
042FF2 21 70 48 04 4201*  	ld hl,F58_029
042FF6 22 C1 B7 04 4202*  	ld (cur_filename),hl
042FFA 11 CB C3 04 4203*  	ld de,filedata
042FFE 01 00 00 01 4204*  	ld bc,65536
043002 3E 01       4205*  	ld a,mos_load
043004 5B CF       4206*  	RST.LIL 08h
043006 21 F0 01 00 4207*  	ld hl,BUF_58_029
04300A 01 2F 00 00 4208*  	ld bc,47
04300E 11 40 00 00 4209*  	ld de,64
043012 DD 21 C0 0B 4210*  	ld ix,3008
       00          
043017 CD 3C B9 04 4211*  	call vdu_load_img
04301B C9          4212*  	ret
04301C             4213*  
04301C             4214*  ld_58_032:
04301C 21 84 48 04 4215*  	ld hl,F58_032
043020 22 C1 B7 04 4216*  	ld (cur_filename),hl
043024 11 CB C3 04 4217*  	ld de,filedata
043028 01 00 00 01 4218*  	ld bc,65536
04302C 3E 01       4219*  	ld a,mos_load
04302E 5B CF       4220*  	RST.LIL 08h
043030 21 F1 01 00 4221*  	ld hl,BUF_58_032
043034 01 41 00 00 4222*  	ld bc,65
043038 11 40 00 00 4223*  	ld de,64
04303C DD 21 40 10 4224*  	ld ix,4160
       00          
043041 CD 3C B9 04 4225*  	call vdu_load_img
043045 C9          4226*  	ret
043046             4227*  
043046             4228*  ld_58_035:
043046 21 98 48 04 4229*  	ld hl,F58_035
04304A 22 C1 B7 04 4230*  	ld (cur_filename),hl
04304E 11 CB C3 04 4231*  	ld de,filedata
043052 01 00 00 01 4232*  	ld bc,65536
043056 3E 01       4233*  	ld a,mos_load
043058 5B CF       4234*  	RST.LIL 08h
04305A 21 F2 01 00 4235*  	ld hl,BUF_58_035
04305E 01 3F 00 00 4236*  	ld bc,63
043062 11 6B 00 00 4237*  	ld de,107
043066 DD 21 55 1A 4238*  	ld ix,6741
       00          
04306B CD 3C B9 04 4239*  	call vdu_load_img
04306F C9          4240*  	ret
043070             4241*  
043070             4242*  ld_58_036:
043070 21 AC 48 04 4243*  	ld hl,F58_036
043074 22 C1 B7 04 4244*  	ld (cur_filename),hl
043078 11 CB C3 04 4245*  	ld de,filedata
04307C 01 00 00 01 4246*  	ld bc,65536
043080 3E 01       4247*  	ld a,mos_load
043082 5B CF       4248*  	RST.LIL 08h
043084 21 F3 01 00 4249*  	ld hl,BUF_58_036
043088 01 16 00 00 4250*  	ld bc,22
04308C 11 6B 00 00 4251*  	ld de,107
043090 DD 21 32 09 4252*  	ld ix,2354
       00          
043095 CD 3C B9 04 4253*  	call vdu_load_img
043099 C9          4254*  	ret
04309A             4255*  
04309A             4256*  ld_58_037:
04309A 21 C0 48 04 4257*  	ld hl,F58_037
04309E 22 C1 B7 04 4258*  	ld (cur_filename),hl
0430A2 11 CB C3 04 4259*  	ld de,filedata
0430A6 01 00 00 01 4260*  	ld bc,65536
0430AA 3E 01       4261*  	ld a,mos_load
0430AC 5B CF       4262*  	RST.LIL 08h
0430AE 21 F4 01 00 4263*  	ld hl,BUF_58_037
0430B2 01 15 00 00 4264*  	ld bc,21
0430B6 11 69 00 00 4265*  	ld de,105
0430BA DD 21 9D 08 4266*  	ld ix,2205
       00          
0430BF CD 3C B9 04 4267*  	call vdu_load_img
0430C3 C9          4268*  	ret
0430C4             4269*  
0430C4             4270*  ld_58_038:
0430C4 21 D4 48 04 4271*  	ld hl,F58_038
0430C8 22 C1 B7 04 4272*  	ld (cur_filename),hl
0430CC 11 CB C3 04 4273*  	ld de,filedata
0430D0 01 00 00 01 4274*  	ld bc,65536
0430D4 3E 01       4275*  	ld a,mos_load
0430D6 5B CF       4276*  	RST.LIL 08h
0430D8 21 F5 01 00 4277*  	ld hl,BUF_58_038
0430DC 01 3F 00 00 4278*  	ld bc,63
0430E0 11 6B 00 00 4279*  	ld de,107
0430E4 DD 21 55 1A 4280*  	ld ix,6741
       00          
0430E9 CD 3C B9 04 4281*  	call vdu_load_img
0430ED C9          4282*  	ret
0430EE             4283*  
0430EE             4284*  ld_58_040:
0430EE 21 E8 48 04 4285*  	ld hl,F58_040
0430F2 22 C1 B7 04 4286*  	ld (cur_filename),hl
0430F6 11 CB C3 04 4287*  	ld de,filedata
0430FA 01 00 00 01 4288*  	ld bc,65536
0430FE 3E 01       4289*  	ld a,mos_load
043100 5B CF       4290*  	RST.LIL 08h
043102 21 F6 01 00 4291*  	ld hl,BUF_58_040
043106 01 6C 00 00 4292*  	ld bc,108
04310A 11 6B 00 00 4293*  	ld de,107
04310E DD 21 24 2D 4294*  	ld ix,11556
       00          
043113 CD 3C B9 04 4295*  	call vdu_load_img
043117 C9          4296*  	ret
043118             4297*  
043118             4298*  ld_58_042:
043118 21 FC 48 04 4299*  	ld hl,F58_042
04311C 22 C1 B7 04 4300*  	ld (cur_filename),hl
043120 11 CB C3 04 4301*  	ld de,filedata
043124 01 00 00 01 4302*  	ld bc,65536
043128 3E 01       4303*  	ld a,mos_load
04312A 5B CF       4304*  	RST.LIL 08h
04312C 21 F7 01 00 4305*  	ld hl,BUF_58_042
043130 01 6A 00 00 4306*  	ld bc,106
043134 11 A0 00 00 4307*  	ld de,160
043138 DD 21 40 42 4308*  	ld ix,16960
       00          
04313D CD 3C B9 04 4309*  	call vdu_load_img
043141 C9          4310*  	ret
043142             4311*  
043142             4312*  ld_58_043:
043142 21 10 49 04 4313*  	ld hl,F58_043
043146 22 C1 B7 04 4314*  	ld (cur_filename),hl
04314A 11 CB C3 04 4315*  	ld de,filedata
04314E 01 00 00 01 4316*  	ld bc,65536
043152 3E 01       4317*  	ld a,mos_load
043154 5B CF       4318*  	RST.LIL 08h
043156 21 F8 01 00 4319*  	ld hl,BUF_58_043
04315A 01 6B 00 00 4320*  	ld bc,107
04315E 11 A0 00 00 4321*  	ld de,160
043162 DD 21 E0 42 4322*  	ld ix,17120
       00          
043167 CD 3C B9 04 4323*  	call vdu_load_img
04316B C9          4324*  	ret
04316C             4325*  
04316C             4326*  ld_58_044:
04316C 21 24 49 04 4327*  	ld hl,F58_044
043170 22 C1 B7 04 4328*  	ld (cur_filename),hl
043174 11 CB C3 04 4329*  	ld de,filedata
043178 01 00 00 01 4330*  	ld bc,65536
04317C 3E 01       4331*  	ld a,mos_load
04317E 5B CF       4332*  	RST.LIL 08h
043180 21 F9 01 00 4333*  	ld hl,BUF_58_044
043184 01 40 01 00 4334*  	ld bc,320
043188 11 A0 00 00 4335*  	ld de,160
04318C DD 21 00 C8 4336*  	ld ix,51200
       00          
043191 CD 3C B9 04 4337*  	call vdu_load_img
043195 C9          4338*  	ret
043196             4339*  
043196             4340*  ld_59_004:
043196 21 38 49 04 4341*  	ld hl,F59_004
04319A 22 C1 B7 04 4342*  	ld (cur_filename),hl
04319E 11 CB C3 04 4343*  	ld de,filedata
0431A2 01 00 00 01 4344*  	ld bc,65536
0431A6 3E 01       4345*  	ld a,mos_load
0431A8 5B CF       4346*  	RST.LIL 08h
0431AA 21 FA 01 00 4347*  	ld hl,BUF_59_004
0431AE 01 24 00 00 4348*  	ld bc,36
0431B2 11 23 00 00 4349*  	ld de,35
0431B6 DD 21 EC 04 4350*  	ld ix,1260
       00          
0431BB CD 3C B9 04 4351*  	call vdu_load_img
0431BF C9          4352*  	ret
0431C0             4353*  
0431C0             4354*  ld_59_009:
0431C0 21 4C 49 04 4355*  	ld hl,F59_009
0431C4 22 C1 B7 04 4356*  	ld (cur_filename),hl
0431C8 11 CB C3 04 4357*  	ld de,filedata
0431CC 01 00 00 01 4358*  	ld bc,65536
0431D0 3E 01       4359*  	ld a,mos_load
0431D2 5B CF       4360*  	RST.LIL 08h
0431D4 21 FB 01 00 4361*  	ld hl,BUF_59_009
0431D8 01 23 00 00 4362*  	ld bc,35
0431DC 11 2D 00 00 4363*  	ld de,45
0431E0 DD 21 27 06 4364*  	ld ix,1575
       00          
0431E5 CD 3C B9 04 4365*  	call vdu_load_img
0431E9 C9          4366*  	ret
0431EA             4367*  
0431EA             4368*  ld_59_010:
0431EA 21 60 49 04 4369*  	ld hl,F59_010
0431EE 22 C1 B7 04 4370*  	ld (cur_filename),hl
0431F2 11 CB C3 04 4371*  	ld de,filedata
0431F6 01 00 00 01 4372*  	ld bc,65536
0431FA 3E 01       4373*  	ld a,mos_load
0431FC 5B CF       4374*  	RST.LIL 08h
0431FE 21 FC 01 00 4375*  	ld hl,BUF_59_010
043202 01 19 00 00 4376*  	ld bc,25
043206 11 2D 00 00 4377*  	ld de,45
04320A DD 21 65 04 4378*  	ld ix,1125
       00          
04320F CD 3C B9 04 4379*  	call vdu_load_img
043213 C9          4380*  	ret
043214             4381*  
043214             4382*  ld_59_011:
043214 21 74 49 04 4383*  	ld hl,F59_011
043218 22 C1 B7 04 4384*  	ld (cur_filename),hl
04321C 11 CB C3 04 4385*  	ld de,filedata
043220 01 00 00 01 4386*  	ld bc,65536
043224 3E 01       4387*  	ld a,mos_load
043226 5B CF       4388*  	RST.LIL 08h
043228 21 FD 01 00 4389*  	ld hl,BUF_59_011
04322C 01 0F 00 00 4390*  	ld bc,15
043230 11 2D 00 00 4391*  	ld de,45
043234 DD 21 A3 02 4392*  	ld ix,675
       00          
043239 CD 3C B9 04 4393*  	call vdu_load_img
04323D C9          4394*  	ret
04323E             4395*  
04323E             4396*  ld_59_012:
04323E 21 88 49 04 4397*  	ld hl,F59_012
043242 22 C1 B7 04 4398*  	ld (cur_filename),hl
043246 11 CB C3 04 4399*  	ld de,filedata
04324A 01 00 00 01 4400*  	ld bc,65536
04324E 3E 01       4401*  	ld a,mos_load
043250 5B CF       4402*  	RST.LIL 08h
043252 21 FE 01 00 4403*  	ld hl,BUF_59_012
043256 01 05 00 00 4404*  	ld bc,5
04325A 11 2D 00 00 4405*  	ld de,45
04325E DD 21 E1 00 4406*  	ld ix,225
       00          
043263 CD 3C B9 04 4407*  	call vdu_load_img
043267 C9          4408*  	ret
043268             4409*  
043268             4410*  ld_59_013:
043268 21 9C 49 04 4411*  	ld hl,F59_013
04326C 22 C1 B7 04 4412*  	ld (cur_filename),hl
043270 11 CB C3 04 4413*  	ld de,filedata
043274 01 00 00 01 4414*  	ld bc,65536
043278 3E 01       4415*  	ld a,mos_load
04327A 5B CF       4416*  	RST.LIL 08h
04327C 21 FF 01 00 4417*  	ld hl,BUF_59_013
043280 01 05 00 00 4418*  	ld bc,5
043284 11 2B 00 00 4419*  	ld de,43
043288 DD 21 D7 00 4420*  	ld ix,215
       00          
04328D CD 3C B9 04 4421*  	call vdu_load_img
043291 C9          4422*  	ret
043292             4423*  
043292             4424*  ld_59_014:
043292 21 B0 49 04 4425*  	ld hl,F59_014
043296 22 C1 B7 04 4426*  	ld (cur_filename),hl
04329A 11 CB C3 04 4427*  	ld de,filedata
04329E 01 00 00 01 4428*  	ld bc,65536
0432A2 3E 01       4429*  	ld a,mos_load
0432A4 5B CF       4430*  	RST.LIL 08h
0432A6 21 00 02 00 4431*  	ld hl,BUF_59_014
0432AA 01 0F 00 00 4432*  	ld bc,15
0432AE 11 2D 00 00 4433*  	ld de,45
0432B2 DD 21 A3 02 4434*  	ld ix,675
       00          
0432B7 CD 3C B9 04 4435*  	call vdu_load_img
0432BB C9          4436*  	ret
0432BC             4437*  
0432BC             4438*  ld_59_015:
0432BC 21 C4 49 04 4439*  	ld hl,F59_015
0432C0 22 C1 B7 04 4440*  	ld (cur_filename),hl
0432C4 11 CB C3 04 4441*  	ld de,filedata
0432C8 01 00 00 01 4442*  	ld bc,65536
0432CC 3E 01       4443*  	ld a,mos_load
0432CE 5B CF       4444*  	RST.LIL 08h
0432D0 21 01 02 00 4445*  	ld hl,BUF_59_015
0432D4 01 19 00 00 4446*  	ld bc,25
0432D8 11 2D 00 00 4447*  	ld de,45
0432DC DD 21 65 04 4448*  	ld ix,1125
       00          
0432E1 CD 3C B9 04 4449*  	call vdu_load_img
0432E5 C9          4450*  	ret
0432E6             4451*  
0432E6             4452*  ld_59_016:
0432E6 21 D8 49 04 4453*  	ld hl,F59_016
0432EA 22 C1 B7 04 4454*  	ld (cur_filename),hl
0432EE 11 CB C3 04 4455*  	ld de,filedata
0432F2 01 00 00 01 4456*  	ld bc,65536
0432F6 3E 01       4457*  	ld a,mos_load
0432F8 5B CF       4458*  	RST.LIL 08h
0432FA 21 02 02 00 4459*  	ld hl,BUF_59_016
0432FE 01 23 00 00 4460*  	ld bc,35
043302 11 2D 00 00 4461*  	ld de,45
043306 DD 21 27 06 4462*  	ld ix,1575
       00          
04330B CD 3C B9 04 4463*  	call vdu_load_img
04330F C9          4464*  	ret
043310             4465*  
043310             4466*  ld_59_020:
043310 21 EC 49 04 4467*  	ld hl,F59_020
043314 22 C1 B7 04 4468*  	ld (cur_filename),hl
043318 11 CB C3 04 4469*  	ld de,filedata
04331C 01 00 00 01 4470*  	ld bc,65536
043320 3E 01       4471*  	ld a,mos_load
043322 5B CF       4472*  	RST.LIL 08h
043324 21 03 02 00 4473*  	ld hl,BUF_59_020
043328 01 2E 00 00 4474*  	ld bc,46
04332C 11 2D 00 00 4475*  	ld de,45
043330 DD 21 16 08 4476*  	ld ix,2070
       00          
043335 CD 3C B9 04 4477*  	call vdu_load_img
043339 C9          4478*  	ret
04333A             4479*  
04333A             4480*  ld_59_024:
04333A 21 00 4A 04 4481*  	ld hl,F59_024
04333E 22 C1 B7 04 4482*  	ld (cur_filename),hl
043342 11 CB C3 04 4483*  	ld de,filedata
043346 01 00 00 01 4484*  	ld bc,65536
04334A 3E 01       4485*  	ld a,mos_load
04334C 5B CF       4486*  	RST.LIL 08h
04334E 21 04 02 00 4487*  	ld hl,BUF_59_024
043352 01 2E 00 00 4488*  	ld bc,46
043356 11 40 00 00 4489*  	ld de,64
04335A DD 21 80 0B 4490*  	ld ix,2944
       00          
04335F CD 3C B9 04 4491*  	call vdu_load_img
043363 C9          4492*  	ret
043364             4493*  
043364             4494*  ld_59_025:
043364 21 14 4A 04 4495*  	ld hl,F59_025
043368 22 C1 B7 04 4496*  	ld (cur_filename),hl
04336C 11 CB C3 04 4497*  	ld de,filedata
043370 01 00 00 01 4498*  	ld bc,65536
043374 3E 01       4499*  	ld a,mos_load
043376 5B CF       4500*  	RST.LIL 08h
043378 21 05 02 00 4501*  	ld hl,BUF_59_025
04337C 01 1C 00 00 4502*  	ld bc,28
043380 11 40 00 00 4503*  	ld de,64
043384 DD 21 00 07 4504*  	ld ix,1792
       00          
043389 CD 3C B9 04 4505*  	call vdu_load_img
04338D C9          4506*  	ret
04338E             4507*  
04338E             4508*  ld_59_026:
04338E 21 28 4A 04 4509*  	ld hl,F59_026
043392 22 C1 B7 04 4510*  	ld (cur_filename),hl
043396 11 CB C3 04 4511*  	ld de,filedata
04339A 01 00 00 01 4512*  	ld bc,65536
04339E 3E 01       4513*  	ld a,mos_load
0433A0 5B CF       4514*  	RST.LIL 08h
0433A2 21 06 02 00 4515*  	ld hl,BUF_59_026
0433A6 01 09 00 00 4516*  	ld bc,9
0433AA 11 40 00 00 4517*  	ld de,64
0433AE DD 21 40 02 4518*  	ld ix,576
       00          
0433B3 CD 3C B9 04 4519*  	call vdu_load_img
0433B7 C9          4520*  	ret
0433B8             4521*  
0433B8             4522*  ld_59_027:
0433B8 21 3C 4A 04 4523*  	ld hl,F59_027
0433BC 22 C1 B7 04 4524*  	ld (cur_filename),hl
0433C0 11 CB C3 04 4525*  	ld de,filedata
0433C4 01 00 00 01 4526*  	ld bc,65536
0433C8 3E 01       4527*  	ld a,mos_load
0433CA 5B CF       4528*  	RST.LIL 08h
0433CC 21 07 02 00 4529*  	ld hl,BUF_59_027
0433D0 01 0A 00 00 4530*  	ld bc,10
0433D4 11 3E 00 00 4531*  	ld de,62
0433D8 DD 21 6C 02 4532*  	ld ix,620
       00          
0433DD CD 3C B9 04 4533*  	call vdu_load_img
0433E1 C9          4534*  	ret
0433E2             4535*  
0433E2             4536*  ld_59_028:
0433E2 21 50 4A 04 4537*  	ld hl,F59_028
0433E6 22 C1 B7 04 4538*  	ld (cur_filename),hl
0433EA 11 CB C3 04 4539*  	ld de,filedata
0433EE 01 00 00 01 4540*  	ld bc,65536
0433F2 3E 01       4541*  	ld a,mos_load
0433F4 5B CF       4542*  	RST.LIL 08h
0433F6 21 08 02 00 4543*  	ld hl,BUF_59_028
0433FA 01 1C 00 00 4544*  	ld bc,28
0433FE 11 40 00 00 4545*  	ld de,64
043402 DD 21 00 07 4546*  	ld ix,1792
       00          
043407 CD 3C B9 04 4547*  	call vdu_load_img
04340B C9          4548*  	ret
04340C             4549*  
04340C             4550*  ld_59_029:
04340C 21 64 4A 04 4551*  	ld hl,F59_029
043410 22 C1 B7 04 4552*  	ld (cur_filename),hl
043414 11 CB C3 04 4553*  	ld de,filedata
043418 01 00 00 01 4554*  	ld bc,65536
04341C 3E 01       4555*  	ld a,mos_load
04341E 5B CF       4556*  	RST.LIL 08h
043420 21 09 02 00 4557*  	ld hl,BUF_59_029
043424 01 2F 00 00 4558*  	ld bc,47
043428 11 40 00 00 4559*  	ld de,64
04342C DD 21 C0 0B 4560*  	ld ix,3008
       00          
043431 CD 3C B9 04 4561*  	call vdu_load_img
043435 C9          4562*  	ret
043436             4563*  
043436             4564*  ld_59_032:
043436 21 78 4A 04 4565*  	ld hl,F59_032
04343A 22 C1 B7 04 4566*  	ld (cur_filename),hl
04343E 11 CB C3 04 4567*  	ld de,filedata
043442 01 00 00 01 4568*  	ld bc,65536
043446 3E 01       4569*  	ld a,mos_load
043448 5B CF       4570*  	RST.LIL 08h
04344A 21 0A 02 00 4571*  	ld hl,BUF_59_032
04344E 01 41 00 00 4572*  	ld bc,65
043452 11 40 00 00 4573*  	ld de,64
043456 DD 21 40 10 4574*  	ld ix,4160
       00          
04345B CD 3C B9 04 4575*  	call vdu_load_img
04345F C9          4576*  	ret
043460             4577*  
043460             4578*  ld_59_035:
043460 21 8C 4A 04 4579*  	ld hl,F59_035
043464 22 C1 B7 04 4580*  	ld (cur_filename),hl
043468 11 CB C3 04 4581*  	ld de,filedata
04346C 01 00 00 01 4582*  	ld bc,65536
043470 3E 01       4583*  	ld a,mos_load
043472 5B CF       4584*  	RST.LIL 08h
043474 21 0B 02 00 4585*  	ld hl,BUF_59_035
043478 01 3F 00 00 4586*  	ld bc,63
04347C 11 6B 00 00 4587*  	ld de,107
043480 DD 21 55 1A 4588*  	ld ix,6741
       00          
043485 CD 3C B9 04 4589*  	call vdu_load_img
043489 C9          4590*  	ret
04348A             4591*  
04348A             4592*  ld_59_036:
04348A 21 A0 4A 04 4593*  	ld hl,F59_036
04348E 22 C1 B7 04 4594*  	ld (cur_filename),hl
043492 11 CB C3 04 4595*  	ld de,filedata
043496 01 00 00 01 4596*  	ld bc,65536
04349A 3E 01       4597*  	ld a,mos_load
04349C 5B CF       4598*  	RST.LIL 08h
04349E 21 0C 02 00 4599*  	ld hl,BUF_59_036
0434A2 01 16 00 00 4600*  	ld bc,22
0434A6 11 6B 00 00 4601*  	ld de,107
0434AA DD 21 32 09 4602*  	ld ix,2354
       00          
0434AF CD 3C B9 04 4603*  	call vdu_load_img
0434B3 C9          4604*  	ret
0434B4             4605*  
0434B4             4606*  ld_59_037:
0434B4 21 B4 4A 04 4607*  	ld hl,F59_037
0434B8 22 C1 B7 04 4608*  	ld (cur_filename),hl
0434BC 11 CB C3 04 4609*  	ld de,filedata
0434C0 01 00 00 01 4610*  	ld bc,65536
0434C4 3E 01       4611*  	ld a,mos_load
0434C6 5B CF       4612*  	RST.LIL 08h
0434C8 21 0D 02 00 4613*  	ld hl,BUF_59_037
0434CC 01 15 00 00 4614*  	ld bc,21
0434D0 11 69 00 00 4615*  	ld de,105
0434D4 DD 21 9D 08 4616*  	ld ix,2205
       00          
0434D9 CD 3C B9 04 4617*  	call vdu_load_img
0434DD C9          4618*  	ret
0434DE             4619*  
0434DE             4620*  ld_59_038:
0434DE 21 C8 4A 04 4621*  	ld hl,F59_038
0434E2 22 C1 B7 04 4622*  	ld (cur_filename),hl
0434E6 11 CB C3 04 4623*  	ld de,filedata
0434EA 01 00 00 01 4624*  	ld bc,65536
0434EE 3E 01       4625*  	ld a,mos_load
0434F0 5B CF       4626*  	RST.LIL 08h
0434F2 21 0E 02 00 4627*  	ld hl,BUF_59_038
0434F6 01 3F 00 00 4628*  	ld bc,63
0434FA 11 6B 00 00 4629*  	ld de,107
0434FE DD 21 55 1A 4630*  	ld ix,6741
       00          
043503 CD 3C B9 04 4631*  	call vdu_load_img
043507 C9          4632*  	ret
043508             4633*  
043508             4634*  ld_59_040:
043508 21 DC 4A 04 4635*  	ld hl,F59_040
04350C 22 C1 B7 04 4636*  	ld (cur_filename),hl
043510 11 CB C3 04 4637*  	ld de,filedata
043514 01 00 00 01 4638*  	ld bc,65536
043518 3E 01       4639*  	ld a,mos_load
04351A 5B CF       4640*  	RST.LIL 08h
04351C 21 0F 02 00 4641*  	ld hl,BUF_59_040
043520 01 6C 00 00 4642*  	ld bc,108
043524 11 6B 00 00 4643*  	ld de,107
043528 DD 21 24 2D 4644*  	ld ix,11556
       00          
04352D CD 3C B9 04 4645*  	call vdu_load_img
043531 C9          4646*  	ret
043532             4647*  
043532             4648*  ld_59_042:
043532 21 F0 4A 04 4649*  	ld hl,F59_042
043536 22 C1 B7 04 4650*  	ld (cur_filename),hl
04353A 11 CB C3 04 4651*  	ld de,filedata
04353E 01 00 00 01 4652*  	ld bc,65536
043542 3E 01       4653*  	ld a,mos_load
043544 5B CF       4654*  	RST.LIL 08h
043546 21 10 02 00 4655*  	ld hl,BUF_59_042
04354A 01 6A 00 00 4656*  	ld bc,106
04354E 11 A0 00 00 4657*  	ld de,160
043552 DD 21 40 42 4658*  	ld ix,16960
       00          
043557 CD 3C B9 04 4659*  	call vdu_load_img
04355B C9          4660*  	ret
04355C             4661*  
04355C             4662*  ld_59_043:
04355C 21 04 4B 04 4663*  	ld hl,F59_043
043560 22 C1 B7 04 4664*  	ld (cur_filename),hl
043564 11 CB C3 04 4665*  	ld de,filedata
043568 01 00 00 01 4666*  	ld bc,65536
04356C 3E 01       4667*  	ld a,mos_load
04356E 5B CF       4668*  	RST.LIL 08h
043570 21 11 02 00 4669*  	ld hl,BUF_59_043
043574 01 6B 00 00 4670*  	ld bc,107
043578 11 A0 00 00 4671*  	ld de,160
04357C DD 21 E0 42 4672*  	ld ix,17120
       00          
043581 CD 3C B9 04 4673*  	call vdu_load_img
043585 C9          4674*  	ret
043586             4675*  
043586             4676*  ld_59_044:
043586 21 18 4B 04 4677*  	ld hl,F59_044
04358A 22 C1 B7 04 4678*  	ld (cur_filename),hl
04358E 11 CB C3 04 4679*  	ld de,filedata
043592 01 00 00 01 4680*  	ld bc,65536
043596 3E 01       4681*  	ld a,mos_load
043598 5B CF       4682*  	RST.LIL 08h
04359A 21 12 02 00 4683*  	ld hl,BUF_59_044
04359E 01 40 01 00 4684*  	ld bc,320
0435A2 11 A0 00 00 4685*  	ld de,160
0435A6 DD 21 00 C8 4686*  	ld ix,51200
       00          
0435AB CD 3C B9 04 4687*  	call vdu_load_img
0435AF C9          4688*  	ret
0435B0             4689*  
0435B0             4690*  ; File name lookups:
0435B0 70 61 6E 65 4691*  F10_004: db "panels/10_004.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0435C4 70 61 6E 65 4692*  F10_009: db "panels/10_009.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0435D8 70 61 6E 65 4693*  F10_010: db "panels/10_010.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0435EC 70 61 6E 65 4694*  F10_011: db "panels/10_011.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043600 70 61 6E 65 4695*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043614 70 61 6E 65 4696*  F10_013: db "panels/10_013.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043628 70 61 6E 65 4697*  F10_014: db "panels/10_014.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
04363C 70 61 6E 65 4698*  F10_015: db "panels/10_015.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043650 70 61 6E 65 4699*  F10_016: db "panels/10_016.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043664 70 61 6E 65 4700*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043678 70 61 6E 65 4701*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04368C 70 61 6E 65 4702*  F10_025: db "panels/10_025.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0436A0 70 61 6E 65 4703*  F10_026: db "panels/10_026.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0436B4 70 61 6E 65 4704*  F10_027: db "panels/10_027.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0436C8 70 61 6E 65 4705*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0436DC 70 61 6E 65 4706*  F10_029: db "panels/10_029.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0436F0 70 61 6E 65 4707*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043704 70 61 6E 65 4708*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043718 70 61 6E 65 4709*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04372C 70 61 6E 65 4710*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043740 70 61 6E 65 4711*  F10_038: db "panels/10_038.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043754 70 61 6E 65 4712*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043768 70 61 6E 65 4713*  F10_042: db "panels/10_042.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04377C 70 61 6E 65 4714*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043790 70 61 6E 65 4715*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0437A4 70 61 6E 65 4716*  F11_004: db "panels/11_004.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0437B8 70 61 6E 65 4717*  F11_009: db "panels/11_009.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0437CC 70 61 6E 65 4718*  F11_010: db "panels/11_010.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0437E0 70 61 6E 65 4719*  F11_011: db "panels/11_011.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0437F4 70 61 6E 65 4720*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043808 70 61 6E 65 4721*  F11_013: db "panels/11_013.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04381C 70 61 6E 65 4722*  F11_014: db "panels/11_014.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043830 70 61 6E 65 4723*  F11_015: db "panels/11_015.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043844 70 61 6E 65 4724*  F11_016: db "panels/11_016.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043858 70 61 6E 65 4725*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04386C 70 61 6E 65 4726*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043880 70 61 6E 65 4727*  F11_025: db "panels/11_025.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043894 70 61 6E 65 4728*  F11_026: db "panels/11_026.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0438A8 70 61 6E 65 4729*  F11_027: db "panels/11_027.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0438BC 70 61 6E 65 4730*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0438D0 70 61 6E 65 4731*  F11_029: db "panels/11_029.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0438E4 70 61 6E 65 4732*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0438F8 70 61 6E 65 4733*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
04390C 70 61 6E 65 4734*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043920 70 61 6E 65 4735*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043934 70 61 6E 65 4736*  F11_038: db "panels/11_038.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043948 70 61 6E 65 4737*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04395C 70 61 6E 65 4738*  F11_042: db "panels/11_042.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043970 70 61 6E 65 4739*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043984 70 61 6E 65 4740*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043998 70 61 6E 65 4741*  F12_004: db "panels/12_004.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0439AC 70 61 6E 65 4742*  F12_009: db "panels/12_009.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0439C0 70 61 6E 65 4743*  F12_010: db "panels/12_010.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0439D4 70 61 6E 65 4744*  F12_011: db "panels/12_011.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0439E8 70 61 6E 65 4745*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0439FC 70 61 6E 65 4746*  F12_013: db "panels/12_013.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043A10 70 61 6E 65 4747*  F12_014: db "panels/12_014.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043A24 70 61 6E 65 4748*  F12_015: db "panels/12_015.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043A38 70 61 6E 65 4749*  F12_016: db "panels/12_016.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043A4C 70 61 6E 65 4750*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043A60 70 61 6E 65 4751*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043A74 70 61 6E 65 4752*  F12_025: db "panels/12_025.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043A88 70 61 6E 65 4753*  F12_026: db "panels/12_026.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043A9C 70 61 6E 65 4754*  F12_027: db "panels/12_027.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043AB0 70 61 6E 65 4755*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043AC4 70 61 6E 65 4756*  F12_029: db "panels/12_029.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043AD8 70 61 6E 65 4757*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043AEC 70 61 6E 65 4758*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043B00 70 61 6E 65 4759*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043B14 70 61 6E 65 4760*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043B28 70 61 6E 65 4761*  F12_038: db "panels/12_038.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043B3C 70 61 6E 65 4762*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043B50 70 61 6E 65 4763*  F12_042: db "panels/12_042.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043B64 70 61 6E 65 4764*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043B78 70 61 6E 65 4765*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043B8C 70 61 6E 65 4766*  F13_004: db "panels/13_004.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043BA0 70 61 6E 65 4767*  F13_009: db "panels/13_009.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043BB4 70 61 6E 65 4768*  F13_010: db "panels/13_010.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043BC8 70 61 6E 65 4769*  F13_011: db "panels/13_011.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043BDC 70 61 6E 65 4770*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043BF0 70 61 6E 65 4771*  F13_013: db "panels/13_013.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043C04 70 61 6E 65 4772*  F13_014: db "panels/13_014.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043C18 70 61 6E 65 4773*  F13_015: db "panels/13_015.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043C2C 70 61 6E 65 4774*  F13_016: db "panels/13_016.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043C40 70 61 6E 65 4775*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043C54 70 61 6E 65 4776*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043C68 70 61 6E 65 4777*  F13_025: db "panels/13_025.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043C7C 70 61 6E 65 4778*  F13_026: db "panels/13_026.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043C90 70 61 6E 65 4779*  F13_027: db "panels/13_027.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043CA4 70 61 6E 65 4780*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043CB8 70 61 6E 65 4781*  F13_029: db "panels/13_029.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043CCC 70 61 6E 65 4782*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043CE0 70 61 6E 65 4783*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043CF4 70 61 6E 65 4784*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043D08 70 61 6E 65 4785*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043D1C 70 61 6E 65 4786*  F13_038: db "panels/13_038.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043D30 70 61 6E 65 4787*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043D44 70 61 6E 65 4788*  F13_042: db "panels/13_042.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043D58 70 61 6E 65 4789*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043D6C 70 61 6E 65 4790*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D80 70 61 6E 65 4791*  F14_004: db "panels/14_004.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043D94 70 61 6E 65 4792*  F14_009: db "panels/14_009.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043DA8 70 61 6E 65 4793*  F14_010: db "panels/14_010.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043DBC 70 61 6E 65 4794*  F14_011: db "panels/14_011.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043DD0 70 61 6E 65 4795*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043DE4 70 61 6E 65 4796*  F14_013: db "panels/14_013.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043DF8 70 61 6E 65 4797*  F14_014: db "panels/14_014.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043E0C 70 61 6E 65 4798*  F14_015: db "panels/14_015.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043E20 70 61 6E 65 4799*  F14_016: db "panels/14_016.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043E34 70 61 6E 65 4800*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043E48 70 61 6E 65 4801*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043E5C 70 61 6E 65 4802*  F14_025: db "panels/14_025.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043E70 70 61 6E 65 4803*  F14_026: db "panels/14_026.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043E84 70 61 6E 65 4804*  F14_027: db "panels/14_027.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043E98 70 61 6E 65 4805*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043EAC 70 61 6E 65 4806*  F14_029: db "panels/14_029.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043EC0 70 61 6E 65 4807*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043ED4 70 61 6E 65 4808*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043EE8 70 61 6E 65 4809*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043EFC 70 61 6E 65 4810*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043F10 70 61 6E 65 4811*  F14_038: db "panels/14_038.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043F24 70 61 6E 65 4812*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043F38 70 61 6E 65 4813*  F14_042: db "panels/14_042.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043F4C 70 61 6E 65 4814*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043F60 70 61 6E 65 4815*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043F74 70 61 6E 65 4816*  F15_004: db "panels/15_004.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043F88 70 61 6E 65 4817*  F15_009: db "panels/15_009.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043F9C 70 61 6E 65 4818*  F15_010: db "panels/15_010.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043FB0 70 61 6E 65 4819*  F15_011: db "panels/15_011.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043FC4 70 61 6E 65 4820*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043FD8 70 61 6E 65 4821*  F15_013: db "panels/15_013.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043FEC 70 61 6E 65 4822*  F15_014: db "panels/15_014.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044000 70 61 6E 65 4823*  F15_015: db "panels/15_015.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044014 70 61 6E 65 4824*  F15_016: db "panels/15_016.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044028 70 61 6E 65 4825*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04403C 70 61 6E 65 4826*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044050 70 61 6E 65 4827*  F15_025: db "panels/15_025.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044064 70 61 6E 65 4828*  F15_026: db "panels/15_026.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044078 70 61 6E 65 4829*  F15_027: db "panels/15_027.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04408C 70 61 6E 65 4830*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0440A0 70 61 6E 65 4831*  F15_029: db "panels/15_029.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0440B4 70 61 6E 65 4832*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0440C8 70 61 6E 65 4833*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0440DC 70 61 6E 65 4834*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0440F0 70 61 6E 65 4835*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044104 70 61 6E 65 4836*  F15_038: db "panels/15_038.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044118 70 61 6E 65 4837*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04412C 70 61 6E 65 4838*  F15_042: db "panels/15_042.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044140 70 61 6E 65 4839*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044154 70 61 6E 65 4840*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044168 70 61 6E 65 4841*  F16_004: db "panels/16_004.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04417C 70 61 6E 65 4842*  F16_009: db "panels/16_009.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044190 70 61 6E 65 4843*  F16_010: db "panels/16_010.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0441A4 70 61 6E 65 4844*  F16_011: db "panels/16_011.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0441B8 70 61 6E 65 4845*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0441CC 70 61 6E 65 4846*  F16_013: db "panels/16_013.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0441E0 70 61 6E 65 4847*  F16_014: db "panels/16_014.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0441F4 70 61 6E 65 4848*  F16_015: db "panels/16_015.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044208 70 61 6E 65 4849*  F16_016: db "panels/16_016.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04421C 70 61 6E 65 4850*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044230 70 61 6E 65 4851*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044244 70 61 6E 65 4852*  F16_025: db "panels/16_025.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044258 70 61 6E 65 4853*  F16_026: db "panels/16_026.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
04426C 70 61 6E 65 4854*  F16_027: db "panels/16_027.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044280 70 61 6E 65 4855*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044294 70 61 6E 65 4856*  F16_029: db "panels/16_029.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0442A8 70 61 6E 65 4857*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0442BC 70 61 6E 65 4858*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0442D0 70 61 6E 65 4859*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0442E4 70 61 6E 65 4860*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0442F8 70 61 6E 65 4861*  F16_038: db "panels/16_038.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
04430C 70 61 6E 65 4862*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044320 70 61 6E 65 4863*  F16_042: db "panels/16_042.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044334 70 61 6E 65 4864*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044348 70 61 6E 65 4865*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04435C 70 61 6E 65 4866*  F17_004: db "panels/17_004.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044370 70 61 6E 65 4867*  F17_009: db "panels/17_009.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044384 70 61 6E 65 4868*  F17_010: db "panels/17_010.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044398 70 61 6E 65 4869*  F17_011: db "panels/17_011.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0443AC 70 61 6E 65 4870*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0443C0 70 61 6E 65 4871*  F17_013: db "panels/17_013.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0443D4 70 61 6E 65 4872*  F17_014: db "panels/17_014.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0443E8 70 61 6E 65 4873*  F17_015: db "panels/17_015.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0443FC 70 61 6E 65 4874*  F17_016: db "panels/17_016.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044410 70 61 6E 65 4875*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044424 70 61 6E 65 4876*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044438 70 61 6E 65 4877*  F17_025: db "panels/17_025.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04444C 70 61 6E 65 4878*  F17_026: db "panels/17_026.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044460 70 61 6E 65 4879*  F17_027: db "panels/17_027.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044474 70 61 6E 65 4880*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044488 70 61 6E 65 4881*  F17_029: db "panels/17_029.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04449C 70 61 6E 65 4882*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0444B0 70 61 6E 65 4883*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0444C4 70 61 6E 65 4884*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0444D8 70 61 6E 65 4885*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0444EC 70 61 6E 65 4886*  F17_038: db "panels/17_038.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044500 70 61 6E 65 4887*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044514 70 61 6E 65 4888*  F17_042: db "panels/17_042.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044528 70 61 6E 65 4889*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04453C 70 61 6E 65 4890*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044550 70 61 6E 65 4891*  F57_004: db "panels/57_004.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044564 70 61 6E 65 4892*  F57_009: db "panels/57_009.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044578 70 61 6E 65 4893*  F57_010: db "panels/57_010.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04458C 70 61 6E 65 4894*  F57_011: db "panels/57_011.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0445A0 70 61 6E 65 4895*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0445B4 70 61 6E 65 4896*  F57_013: db "panels/57_013.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0445C8 70 61 6E 65 4897*  F57_014: db "panels/57_014.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0445DC 70 61 6E 65 4898*  F57_015: db "panels/57_015.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0445F0 70 61 6E 65 4899*  F57_016: db "panels/57_016.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044604 70 61 6E 65 4900*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044618 70 61 6E 65 4901*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04462C 70 61 6E 65 4902*  F57_025: db "panels/57_025.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044640 70 61 6E 65 4903*  F57_026: db "panels/57_026.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044654 70 61 6E 65 4904*  F57_027: db "panels/57_027.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044668 70 61 6E 65 4905*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04467C 70 61 6E 65 4906*  F57_029: db "panels/57_029.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044690 70 61 6E 65 4907*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0446A4 70 61 6E 65 4908*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0446B8 70 61 6E 65 4909*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0446CC 70 61 6E 65 4910*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0446E0 70 61 6E 65 4911*  F57_038: db "panels/57_038.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0446F4 70 61 6E 65 4912*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044708 70 61 6E 65 4913*  F57_042: db "panels/57_042.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04471C 70 61 6E 65 4914*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044730 70 61 6E 65 4915*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044744 70 61 6E 65 4916*  F58_004: db "panels/58_004.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044758 70 61 6E 65 4917*  F58_009: db "panels/58_009.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04476C 70 61 6E 65 4918*  F58_010: db "panels/58_010.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044780 70 61 6E 65 4919*  F58_011: db "panels/58_011.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044794 70 61 6E 65 4920*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0447A8 70 61 6E 65 4921*  F58_013: db "panels/58_013.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0447BC 70 61 6E 65 4922*  F58_014: db "panels/58_014.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0447D0 70 61 6E 65 4923*  F58_015: db "panels/58_015.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0447E4 70 61 6E 65 4924*  F58_016: db "panels/58_016.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0447F8 70 61 6E 65 4925*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04480C 70 61 6E 65 4926*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044820 70 61 6E 65 4927*  F58_025: db "panels/58_025.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044834 70 61 6E 65 4928*  F58_026: db "panels/58_026.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044848 70 61 6E 65 4929*  F58_027: db "panels/58_027.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04485C 70 61 6E 65 4930*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044870 70 61 6E 65 4931*  F58_029: db "panels/58_029.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044884 70 61 6E 65 4932*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044898 70 61 6E 65 4933*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0448AC 70 61 6E 65 4934*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0448C0 70 61 6E 65 4935*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0448D4 70 61 6E 65 4936*  F58_038: db "panels/58_038.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0448E8 70 61 6E 65 4937*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0448FC 70 61 6E 65 4938*  F58_042: db "panels/58_042.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044910 70 61 6E 65 4939*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044924 70 61 6E 65 4940*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044938 70 61 6E 65 4941*  F59_004: db "panels/59_004.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04494C 70 61 6E 65 4942*  F59_009: db "panels/59_009.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044960 70 61 6E 65 4943*  F59_010: db "panels/59_010.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044974 70 61 6E 65 4944*  F59_011: db "panels/59_011.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044988 70 61 6E 65 4945*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04499C 70 61 6E 65 4946*  F59_013: db "panels/59_013.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0449B0 70 61 6E 65 4947*  F59_014: db "panels/59_014.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0449C4 70 61 6E 65 4948*  F59_015: db "panels/59_015.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0449D8 70 61 6E 65 4949*  F59_016: db "panels/59_016.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0449EC 70 61 6E 65 4950*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044A00 70 61 6E 65 4951*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044A14 70 61 6E 65 4952*  F59_025: db "panels/59_025.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044A28 70 61 6E 65 4953*  F59_026: db "panels/59_026.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044A3C 70 61 6E 65 4954*  F59_027: db "panels/59_027.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044A50 70 61 6E 65 4955*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044A64 70 61 6E 65 4956*  F59_029: db "panels/59_029.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044A78 70 61 6E 65 4957*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A8C 70 61 6E 65 4958*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044AA0 70 61 6E 65 4959*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044AB4 70 61 6E 65 4960*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044AC8 70 61 6E 65 4961*  F59_038: db "panels/59_038.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044ADC 70 61 6E 65 4962*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044AF0 70 61 6E 65 4963*  F59_042: db "panels/59_042.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044B04 70 61 6E 65 4964*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044B18 70 61 6E 65 4965*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044B2C             4966*  
044B2C             4967*  ; sprite buffer ids:
044B2C             4968*  BUF_20_004: equ 0x0213
044B2C             4969*  BUF_20_020: equ 0x0214
044B2C             4970*  BUF_20_032: equ 0x0215
044B2C             4971*  BUF_20_040: equ 0x0216
044B2C             4972*  BUF_20_044: equ 0x0217
044B2C             4973*  BUF_21_004: equ 0x0218
044B2C             4974*  BUF_21_020: equ 0x0219
044B2C             4975*  BUF_21_032: equ 0x021A
044B2C             4976*  BUF_21_040: equ 0x021B
044B2C             4977*  BUF_21_044: equ 0x021C
044B2C             4978*  BUF_22_004: equ 0x021D
044B2C             4979*  BUF_22_020: equ 0x021E
044B2C             4980*  BUF_22_032: equ 0x021F
044B2C             4981*  BUF_22_040: equ 0x0220
044B2C             4982*  BUF_22_044: equ 0x0221
044B2C             4983*  BUF_23_004: equ 0x0222
044B2C             4984*  BUF_23_020: equ 0x0223
044B2C             4985*  BUF_23_032: equ 0x0224
044B2C             4986*  BUF_23_040: equ 0x0225
044B2C             4987*  BUF_23_044: equ 0x0226
044B2C             4988*  BUF_24_004: equ 0x0227
044B2C             4989*  BUF_24_020: equ 0x0228
044B2C             4990*  BUF_24_032: equ 0x0229
044B2C             4991*  BUF_24_040: equ 0x022A
044B2C             4992*  BUF_24_044: equ 0x022B
044B2C             4993*  BUF_40_004: equ 0x022C
044B2C             4994*  BUF_40_020: equ 0x022D
044B2C             4995*  BUF_40_032: equ 0x022E
044B2C             4996*  BUF_40_040: equ 0x022F
044B2C             4997*  BUF_40_044: equ 0x0230
044B2C             4998*  BUF_41_004: equ 0x0231
044B2C             4999*  BUF_41_020: equ 0x0232
044B2C             5000*  BUF_41_032: equ 0x0233
044B2C             5001*  BUF_41_040: equ 0x0234
044B2C             5002*  BUF_41_044: equ 0x0235
044B2C             5003*  BUF_42_004: equ 0x0236
044B2C             5004*  BUF_42_020: equ 0x0237
044B2C             5005*  BUF_42_032: equ 0x0238
044B2C             5006*  BUF_42_040: equ 0x0239
044B2C             5007*  BUF_42_044: equ 0x023A
044B2C             5008*  BUF_43_004: equ 0x023B
044B2C             5009*  BUF_43_020: equ 0x023C
044B2C             5010*  BUF_43_032: equ 0x023D
044B2C             5011*  BUF_43_040: equ 0x023E
044B2C             5012*  BUF_43_044: equ 0x023F
044B2C             5013*  BUF_44_004: equ 0x0240
044B2C             5014*  BUF_44_020: equ 0x0241
044B2C             5015*  BUF_44_032: equ 0x0242
044B2C             5016*  BUF_44_040: equ 0x0243
044B2C             5017*  BUF_44_044: equ 0x0244
044B2C             5018*  BUF_45_004: equ 0x0245
044B2C             5019*  BUF_45_020: equ 0x0246
044B2C             5020*  BUF_45_032: equ 0x0247
044B2C             5021*  BUF_45_040: equ 0x0248
044B2C             5022*  BUF_45_044: equ 0x0249
044B2C             5023*  BUF_46_004: equ 0x024A
044B2C             5024*  BUF_46_020: equ 0x024B
044B2C             5025*  BUF_46_032: equ 0x024C
044B2C             5026*  BUF_46_040: equ 0x024D
044B2C             5027*  BUF_46_044: equ 0x024E
044B2C             5028*  BUF_47_004: equ 0x024F
044B2C             5029*  BUF_47_020: equ 0x0250
044B2C             5030*  BUF_47_032: equ 0x0251
044B2C             5031*  BUF_47_040: equ 0x0252
044B2C             5032*  BUF_47_044: equ 0x0253
044B2C             5033*  BUF_48_004: equ 0x0254
044B2C             5034*  BUF_48_020: equ 0x0255
044B2C             5035*  BUF_48_032: equ 0x0256
044B2C             5036*  BUF_48_040: equ 0x0257
044B2C             5037*  BUF_48_044: equ 0x0258
044B2C             5038*  BUF_49_004: equ 0x0259
044B2C             5039*  BUF_49_020: equ 0x025A
044B2C             5040*  BUF_49_032: equ 0x025B
044B2C             5041*  BUF_49_040: equ 0x025C
044B2C             5042*  BUF_49_044: equ 0x025D
044B2C             5043*  BUF_50_004: equ 0x025E
044B2C             5044*  BUF_50_020: equ 0x025F
044B2C             5045*  BUF_50_032: equ 0x0260
044B2C             5046*  BUF_50_040: equ 0x0261
044B2C             5047*  BUF_50_044: equ 0x0262
044B2C             5048*  BUF_51_004: equ 0x0263
044B2C             5049*  BUF_51_020: equ 0x0264
044B2C             5050*  BUF_51_032: equ 0x0265
044B2C             5051*  BUF_51_040: equ 0x0266
044B2C             5052*  BUF_51_044: equ 0x0267
044B2C             5053*  BUF_52_004: equ 0x0268
044B2C             5054*  BUF_52_020: equ 0x0269
044B2C             5055*  BUF_52_032: equ 0x026A
044B2C             5056*  BUF_52_040: equ 0x026B
044B2C             5057*  BUF_52_044: equ 0x026C
044B2C             5058*  
044B2C             5059*  sprite_num_panels: equ 90
044B2C             5060*  
044B2C             5061*  ; sprite buffer id reverse lookup:
044B2C             5062*  sprite_buffer_id_lut:
044B2C 13 02 00    5063*  	dl BUF_20_004
044B2F 14 02 00    5064*  	dl BUF_20_020
044B32 15 02 00    5065*  	dl BUF_20_032
044B35 16 02 00    5066*  	dl BUF_20_040
044B38 17 02 00    5067*  	dl BUF_20_044
044B3B 18 02 00    5068*  	dl BUF_21_004
044B3E 19 02 00    5069*  	dl BUF_21_020
044B41 1A 02 00    5070*  	dl BUF_21_032
044B44 1B 02 00    5071*  	dl BUF_21_040
044B47 1C 02 00    5072*  	dl BUF_21_044
044B4A 1D 02 00    5073*  	dl BUF_22_004
044B4D 1E 02 00    5074*  	dl BUF_22_020
044B50 1F 02 00    5075*  	dl BUF_22_032
044B53 20 02 00    5076*  	dl BUF_22_040
044B56 21 02 00    5077*  	dl BUF_22_044
044B59 22 02 00    5078*  	dl BUF_23_004
044B5C 23 02 00    5079*  	dl BUF_23_020
044B5F 24 02 00    5080*  	dl BUF_23_032
044B62 25 02 00    5081*  	dl BUF_23_040
044B65 26 02 00    5082*  	dl BUF_23_044
044B68 27 02 00    5083*  	dl BUF_24_004
044B6B 28 02 00    5084*  	dl BUF_24_020
044B6E 29 02 00    5085*  	dl BUF_24_032
044B71 2A 02 00    5086*  	dl BUF_24_040
044B74 2B 02 00    5087*  	dl BUF_24_044
044B77 2C 02 00    5088*  	dl BUF_40_004
044B7A 2D 02 00    5089*  	dl BUF_40_020
044B7D 2E 02 00    5090*  	dl BUF_40_032
044B80 2F 02 00    5091*  	dl BUF_40_040
044B83 30 02 00    5092*  	dl BUF_40_044
044B86 31 02 00    5093*  	dl BUF_41_004
044B89 32 02 00    5094*  	dl BUF_41_020
044B8C 33 02 00    5095*  	dl BUF_41_032
044B8F 34 02 00    5096*  	dl BUF_41_040
044B92 35 02 00    5097*  	dl BUF_41_044
044B95 36 02 00    5098*  	dl BUF_42_004
044B98 37 02 00    5099*  	dl BUF_42_020
044B9B 38 02 00    5100*  	dl BUF_42_032
044B9E 39 02 00    5101*  	dl BUF_42_040
044BA1 3A 02 00    5102*  	dl BUF_42_044
044BA4 3B 02 00    5103*  	dl BUF_43_004
044BA7 3C 02 00    5104*  	dl BUF_43_020
044BAA 3D 02 00    5105*  	dl BUF_43_032
044BAD 3E 02 00    5106*  	dl BUF_43_040
044BB0 3F 02 00    5107*  	dl BUF_43_044
044BB3 40 02 00    5108*  	dl BUF_44_004
044BB6 41 02 00    5109*  	dl BUF_44_020
044BB9 42 02 00    5110*  	dl BUF_44_032
044BBC 43 02 00    5111*  	dl BUF_44_040
044BBF 44 02 00    5112*  	dl BUF_44_044
044BC2 45 02 00    5113*  	dl BUF_45_004
044BC5 46 02 00    5114*  	dl BUF_45_020
044BC8 47 02 00    5115*  	dl BUF_45_032
044BCB 48 02 00    5116*  	dl BUF_45_040
044BCE 49 02 00    5117*  	dl BUF_45_044
044BD1 4A 02 00    5118*  	dl BUF_46_004
044BD4 4B 02 00    5119*  	dl BUF_46_020
044BD7 4C 02 00    5120*  	dl BUF_46_032
044BDA 4D 02 00    5121*  	dl BUF_46_040
044BDD 4E 02 00    5122*  	dl BUF_46_044
044BE0 4F 02 00    5123*  	dl BUF_47_004
044BE3 50 02 00    5124*  	dl BUF_47_020
044BE6 51 02 00    5125*  	dl BUF_47_032
044BE9 52 02 00    5126*  	dl BUF_47_040
044BEC 53 02 00    5127*  	dl BUF_47_044
044BEF 54 02 00    5128*  	dl BUF_48_004
044BF2 55 02 00    5129*  	dl BUF_48_020
044BF5 56 02 00    5130*  	dl BUF_48_032
044BF8 57 02 00    5131*  	dl BUF_48_040
044BFB 58 02 00    5132*  	dl BUF_48_044
044BFE 59 02 00    5133*  	dl BUF_49_004
044C01 5A 02 00    5134*  	dl BUF_49_020
044C04 5B 02 00    5135*  	dl BUF_49_032
044C07 5C 02 00    5136*  	dl BUF_49_040
044C0A 5D 02 00    5137*  	dl BUF_49_044
044C0D 5E 02 00    5138*  	dl BUF_50_004
044C10 5F 02 00    5139*  	dl BUF_50_020
044C13 60 02 00    5140*  	dl BUF_50_032
044C16 61 02 00    5141*  	dl BUF_50_040
044C19 62 02 00    5142*  	dl BUF_50_044
044C1C 63 02 00    5143*  	dl BUF_51_004
044C1F 64 02 00    5144*  	dl BUF_51_020
044C22 65 02 00    5145*  	dl BUF_51_032
044C25 66 02 00    5146*  	dl BUF_51_040
044C28 67 02 00    5147*  	dl BUF_51_044
044C2B 68 02 00    5148*  	dl BUF_52_004
044C2E 69 02 00    5149*  	dl BUF_52_020
044C31 6A 02 00    5150*  	dl BUF_52_032
044C34 6B 02 00    5151*  	dl BUF_52_040
044C37 6C 02 00    5152*  	dl BUF_52_044
044C3A             5153*  
044C3A             5154*  ; sprite load routines jump table:
044C3A             5155*  sprite_load_panels_table:
044C3A 48 4D 04    5156*  	dl ld_20_004
044C3D 72 4D 04    5157*  	dl ld_20_020
044C40 9C 4D 04    5158*  	dl ld_20_032
044C43 C6 4D 04    5159*  	dl ld_20_040
044C46 F0 4D 04    5160*  	dl ld_20_044
044C49 1A 4E 04    5161*  	dl ld_21_004
044C4C 44 4E 04    5162*  	dl ld_21_020
044C4F 6E 4E 04    5163*  	dl ld_21_032
044C52 98 4E 04    5164*  	dl ld_21_040
044C55 C2 4E 04    5165*  	dl ld_21_044
044C58 EC 4E 04    5166*  	dl ld_22_004
044C5B 16 4F 04    5167*  	dl ld_22_020
044C5E 40 4F 04    5168*  	dl ld_22_032
044C61 6A 4F 04    5169*  	dl ld_22_040
044C64 94 4F 04    5170*  	dl ld_22_044
044C67 BE 4F 04    5171*  	dl ld_23_004
044C6A E8 4F 04    5172*  	dl ld_23_020
044C6D 12 50 04    5173*  	dl ld_23_032
044C70 3C 50 04    5174*  	dl ld_23_040
044C73 66 50 04    5175*  	dl ld_23_044
044C76 90 50 04    5176*  	dl ld_24_004
044C79 BA 50 04    5177*  	dl ld_24_020
044C7C E4 50 04    5178*  	dl ld_24_032
044C7F 0E 51 04    5179*  	dl ld_24_040
044C82 38 51 04    5180*  	dl ld_24_044
044C85 62 51 04    5181*  	dl ld_40_004
044C88 8C 51 04    5182*  	dl ld_40_020
044C8B B6 51 04    5183*  	dl ld_40_032
044C8E E0 51 04    5184*  	dl ld_40_040
044C91 0A 52 04    5185*  	dl ld_40_044
044C94 34 52 04    5186*  	dl ld_41_004
044C97 5E 52 04    5187*  	dl ld_41_020
044C9A 88 52 04    5188*  	dl ld_41_032
044C9D B2 52 04    5189*  	dl ld_41_040
044CA0 DC 52 04    5190*  	dl ld_41_044
044CA3 06 53 04    5191*  	dl ld_42_004
044CA6 30 53 04    5192*  	dl ld_42_020
044CA9 5A 53 04    5193*  	dl ld_42_032
044CAC 84 53 04    5194*  	dl ld_42_040
044CAF AE 53 04    5195*  	dl ld_42_044
044CB2 D8 53 04    5196*  	dl ld_43_004
044CB5 02 54 04    5197*  	dl ld_43_020
044CB8 2C 54 04    5198*  	dl ld_43_032
044CBB 56 54 04    5199*  	dl ld_43_040
044CBE 80 54 04    5200*  	dl ld_43_044
044CC1 AA 54 04    5201*  	dl ld_44_004
044CC4 D4 54 04    5202*  	dl ld_44_020
044CC7 FE 54 04    5203*  	dl ld_44_032
044CCA 28 55 04    5204*  	dl ld_44_040
044CCD 52 55 04    5205*  	dl ld_44_044
044CD0 7C 55 04    5206*  	dl ld_45_004
044CD3 A6 55 04    5207*  	dl ld_45_020
044CD6 D0 55 04    5208*  	dl ld_45_032
044CD9 FA 55 04    5209*  	dl ld_45_040
044CDC 24 56 04    5210*  	dl ld_45_044
044CDF 4E 56 04    5211*  	dl ld_46_004
044CE2 78 56 04    5212*  	dl ld_46_020
044CE5 A2 56 04    5213*  	dl ld_46_032
044CE8 CC 56 04    5214*  	dl ld_46_040
044CEB F6 56 04    5215*  	dl ld_46_044
044CEE 20 57 04    5216*  	dl ld_47_004
044CF1 4A 57 04    5217*  	dl ld_47_020
044CF4 74 57 04    5218*  	dl ld_47_032
044CF7 9E 57 04    5219*  	dl ld_47_040
044CFA C8 57 04    5220*  	dl ld_47_044
044CFD F2 57 04    5221*  	dl ld_48_004
044D00 1C 58 04    5222*  	dl ld_48_020
044D03 46 58 04    5223*  	dl ld_48_032
044D06 70 58 04    5224*  	dl ld_48_040
044D09 9A 58 04    5225*  	dl ld_48_044
044D0C C4 58 04    5226*  	dl ld_49_004
044D0F EE 58 04    5227*  	dl ld_49_020
044D12 18 59 04    5228*  	dl ld_49_032
044D15 42 59 04    5229*  	dl ld_49_040
044D18 6C 59 04    5230*  	dl ld_49_044
044D1B 96 59 04    5231*  	dl ld_50_004
044D1E C0 59 04    5232*  	dl ld_50_020
044D21 EA 59 04    5233*  	dl ld_50_032
044D24 14 5A 04    5234*  	dl ld_50_040
044D27 3E 5A 04    5235*  	dl ld_50_044
044D2A 68 5A 04    5236*  	dl ld_51_004
044D2D 92 5A 04    5237*  	dl ld_51_020
044D30 BC 5A 04    5238*  	dl ld_51_032
044D33 E6 5A 04    5239*  	dl ld_51_040
044D36 10 5B 04    5240*  	dl ld_51_044
044D39 3A 5B 04    5241*  	dl ld_52_004
044D3C 64 5B 04    5242*  	dl ld_52_020
044D3F 8E 5B 04    5243*  	dl ld_52_032
044D42 B8 5B 04    5244*  	dl ld_52_040
044D45 E2 5B 04    5245*  	dl ld_52_044
044D48             5246*  
044D48             5247*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
044D48             5248*  
044D48             5249*  ld_20_004:
044D48 21 0C 5C 04 5250*  	ld hl,F20_004
044D4C 22 C1 B7 04 5251*  	ld (cur_filename),hl
044D50 11 CB C3 04 5252*  	ld de,filedata
044D54 01 00 00 01 5253*  	ld bc,65536
044D58 3E 01       5254*  	ld a,mos_load
044D5A 5B CF       5255*  	RST.LIL 08h
044D5C 21 13 02 00 5256*  	ld hl,BUF_20_004
044D60 01 13 00 00 5257*  	ld bc,19
044D64 11 12 00 00 5258*  	ld de,18
044D68 DD 21 56 01 5259*  	ld ix,342
       00          
044D6D CD 3C B9 04 5260*  	call vdu_load_img
044D71 C9          5261*  	ret
044D72             5262*  
044D72             5263*  ld_20_020:
044D72 21 20 5C 04 5264*  	ld hl,F20_020
044D76 22 C1 B7 04 5265*  	ld (cur_filename),hl
044D7A 11 CB C3 04 5266*  	ld de,filedata
044D7E 01 00 00 01 5267*  	ld bc,65536
044D82 3E 01       5268*  	ld a,mos_load
044D84 5B CF       5269*  	RST.LIL 08h
044D86 21 14 02 00 5270*  	ld hl,BUF_20_020
044D8A 01 17 00 00 5271*  	ld bc,23
044D8E 11 17 00 00 5272*  	ld de,23
044D92 DD 21 11 02 5273*  	ld ix,529
       00          
044D97 CD 3C B9 04 5274*  	call vdu_load_img
044D9B C9          5275*  	ret
044D9C             5276*  
044D9C             5277*  ld_20_032:
044D9C 21 34 5C 04 5278*  	ld hl,F20_032
044DA0 22 C1 B7 04 5279*  	ld (cur_filename),hl
044DA4 11 CB C3 04 5280*  	ld de,filedata
044DA8 01 00 00 01 5281*  	ld bc,65536
044DAC 3E 01       5282*  	ld a,mos_load
044DAE 5B CF       5283*  	RST.LIL 08h
044DB0 21 15 02 00 5284*  	ld hl,BUF_20_032
044DB4 01 20 00 00 5285*  	ld bc,32
044DB8 11 22 00 00 5286*  	ld de,34
044DBC DD 21 40 04 5287*  	ld ix,1088
       00          
044DC1 CD 3C B9 04 5288*  	call vdu_load_img
044DC5 C9          5289*  	ret
044DC6             5290*  
044DC6             5291*  ld_20_040:
044DC6 21 48 5C 04 5292*  	ld hl,F20_040
044DCA 22 C1 B7 04 5293*  	ld (cur_filename),hl
044DCE 11 CB C3 04 5294*  	ld de,filedata
044DD2 01 00 00 01 5295*  	ld bc,65536
044DD6 3E 01       5296*  	ld a,mos_load
044DD8 5B CF       5297*  	RST.LIL 08h
044DDA 21 16 02 00 5298*  	ld hl,BUF_20_040
044DDE 01 36 00 00 5299*  	ld bc,54
044DE2 11 38 00 00 5300*  	ld de,56
044DE6 DD 21 D0 0B 5301*  	ld ix,3024
       00          
044DEB CD 3C B9 04 5302*  	call vdu_load_img
044DEF C9          5303*  	ret
044DF0             5304*  
044DF0             5305*  ld_20_044:
044DF0 21 5C 5C 04 5306*  	ld hl,F20_044
044DF4 22 C1 B7 04 5307*  	ld (cur_filename),hl
044DF8 11 CB C3 04 5308*  	ld de,filedata
044DFC 01 00 00 01 5309*  	ld bc,65536
044E00 3E 01       5310*  	ld a,mos_load
044E02 5B CF       5311*  	RST.LIL 08h
044E04 21 17 02 00 5312*  	ld hl,BUF_20_044
044E08 01 6B 00 00 5313*  	ld bc,107
044E0C 11 5B 00 00 5314*  	ld de,91
044E10 DD 21 09 26 5315*  	ld ix,9737
       00          
044E15 CD 3C B9 04 5316*  	call vdu_load_img
044E19 C9          5317*  	ret
044E1A             5318*  
044E1A             5319*  ld_21_004:
044E1A 21 70 5C 04 5320*  	ld hl,F21_004
044E1E 22 C1 B7 04 5321*  	ld (cur_filename),hl
044E22 11 CB C3 04 5322*  	ld de,filedata
044E26 01 00 00 01 5323*  	ld bc,65536
044E2A 3E 01       5324*  	ld a,mos_load
044E2C 5B CF       5325*  	RST.LIL 08h
044E2E 21 18 02 00 5326*  	ld hl,BUF_21_004
044E32 01 0B 00 00 5327*  	ld bc,11
044E36 11 0B 00 00 5328*  	ld de,11
044E3A DD 21 79 00 5329*  	ld ix,121
       00          
044E3F CD 3C B9 04 5330*  	call vdu_load_img
044E43 C9          5331*  	ret
044E44             5332*  
044E44             5333*  ld_21_020:
044E44 21 84 5C 04 5334*  	ld hl,F21_020
044E48 22 C1 B7 04 5335*  	ld (cur_filename),hl
044E4C 11 CB C3 04 5336*  	ld de,filedata
044E50 01 00 00 01 5337*  	ld bc,65536
044E54 3E 01       5338*  	ld a,mos_load
044E56 5B CF       5339*  	RST.LIL 08h
044E58 21 19 02 00 5340*  	ld hl,BUF_21_020
044E5C 01 0E 00 00 5341*  	ld bc,14
044E60 11 0E 00 00 5342*  	ld de,14
044E64 DD 21 C4 00 5343*  	ld ix,196
       00          
044E69 CD 3C B9 04 5344*  	call vdu_load_img
044E6D C9          5345*  	ret
044E6E             5346*  
044E6E             5347*  ld_21_032:
044E6E 21 98 5C 04 5348*  	ld hl,F21_032
044E72 22 C1 B7 04 5349*  	ld (cur_filename),hl
044E76 11 CB C3 04 5350*  	ld de,filedata
044E7A 01 00 00 01 5351*  	ld bc,65536
044E7E 3E 01       5352*  	ld a,mos_load
044E80 5B CF       5353*  	RST.LIL 08h
044E82 21 1A 02 00 5354*  	ld hl,BUF_21_032
044E86 01 14 00 00 5355*  	ld bc,20
044E8A 11 16 00 00 5356*  	ld de,22
044E8E DD 21 B8 01 5357*  	ld ix,440
       00          
044E93 CD 3C B9 04 5358*  	call vdu_load_img
044E97 C9          5359*  	ret
044E98             5360*  
044E98             5361*  ld_21_040:
044E98 21 AC 5C 04 5362*  	ld hl,F21_040
044E9C 22 C1 B7 04 5363*  	ld (cur_filename),hl
044EA0 11 CB C3 04 5364*  	ld de,filedata
044EA4 01 00 00 01 5365*  	ld bc,65536
044EA8 3E 01       5366*  	ld a,mos_load
044EAA 5B CF       5367*  	RST.LIL 08h
044EAC 21 1B 02 00 5368*  	ld hl,BUF_21_040
044EB0 01 21 00 00 5369*  	ld bc,33
044EB4 11 24 00 00 5370*  	ld de,36
044EB8 DD 21 A4 04 5371*  	ld ix,1188
       00          
044EBD CD 3C B9 04 5372*  	call vdu_load_img
044EC1 C9          5373*  	ret
044EC2             5374*  
044EC2             5375*  ld_21_044:
044EC2 21 C0 5C 04 5376*  	ld hl,F21_044
044EC6 22 C1 B7 04 5377*  	ld (cur_filename),hl
044ECA 11 CB C3 04 5378*  	ld de,filedata
044ECE 01 00 00 01 5379*  	ld bc,65536
044ED2 3E 01       5380*  	ld a,mos_load
044ED4 5B CF       5381*  	RST.LIL 08h
044ED6 21 1C 02 00 5382*  	ld hl,BUF_21_044
044EDA 01 64 00 00 5383*  	ld bc,100
044EDE 11 1E 00 00 5384*  	ld de,30
044EE2 DD 21 B8 0B 5385*  	ld ix,3000
       00          
044EE7 CD 3C B9 04 5386*  	call vdu_load_img
044EEB C9          5387*  	ret
044EEC             5388*  
044EEC             5389*  ld_22_004:
044EEC 21 D4 5C 04 5390*  	ld hl,F22_004
044EF0 22 C1 B7 04 5391*  	ld (cur_filename),hl
044EF4 11 CB C3 04 5392*  	ld de,filedata
044EF8 01 00 00 01 5393*  	ld bc,65536
044EFC 3E 01       5394*  	ld a,mos_load
044EFE 5B CF       5395*  	RST.LIL 08h
044F00 21 1D 02 00 5396*  	ld hl,BUF_22_004
044F04 01 11 00 00 5397*  	ld bc,17
044F08 11 0B 00 00 5398*  	ld de,11
044F0C DD 21 BB 00 5399*  	ld ix,187
       00          
044F11 CD 3C B9 04 5400*  	call vdu_load_img
044F15 C9          5401*  	ret
044F16             5402*  
044F16             5403*  ld_22_020:
044F16 21 E8 5C 04 5404*  	ld hl,F22_020
044F1A 22 C1 B7 04 5405*  	ld (cur_filename),hl
044F1E 11 CB C3 04 5406*  	ld de,filedata
044F22 01 00 00 01 5407*  	ld bc,65536
044F26 3E 01       5408*  	ld a,mos_load
044F28 5B CF       5409*  	RST.LIL 08h
044F2A 21 1E 02 00 5410*  	ld hl,BUF_22_020
044F2E 01 16 00 00 5411*  	ld bc,22
044F32 11 0E 00 00 5412*  	ld de,14
044F36 DD 21 34 01 5413*  	ld ix,308
       00          
044F3B CD 3C B9 04 5414*  	call vdu_load_img
044F3F C9          5415*  	ret
044F40             5416*  
044F40             5417*  ld_22_032:
044F40 21 FC 5C 04 5418*  	ld hl,F22_032
044F44 22 C1 B7 04 5419*  	ld (cur_filename),hl
044F48 11 CB C3 04 5420*  	ld de,filedata
044F4C 01 00 00 01 5421*  	ld bc,65536
044F50 3E 01       5422*  	ld a,mos_load
044F52 5B CF       5423*  	RST.LIL 08h
044F54 21 1F 02 00 5424*  	ld hl,BUF_22_032
044F58 01 1E 00 00 5425*  	ld bc,30
044F5C 11 16 00 00 5426*  	ld de,22
044F60 DD 21 94 02 5427*  	ld ix,660
       00          
044F65 CD 3C B9 04 5428*  	call vdu_load_img
044F69 C9          5429*  	ret
044F6A             5430*  
044F6A             5431*  ld_22_040:
044F6A 21 10 5D 04 5432*  	ld hl,F22_040
044F6E 22 C1 B7 04 5433*  	ld (cur_filename),hl
044F72 11 CB C3 04 5434*  	ld de,filedata
044F76 01 00 00 01 5435*  	ld bc,65536
044F7A 3E 01       5436*  	ld a,mos_load
044F7C 5B CF       5437*  	RST.LIL 08h
044F7E 21 20 02 00 5438*  	ld hl,BUF_22_040
044F82 01 33 00 00 5439*  	ld bc,51
044F86 11 24 00 00 5440*  	ld de,36
044F8A DD 21 2C 07 5441*  	ld ix,1836
       00          
044F8F CD 3C B9 04 5442*  	call vdu_load_img
044F93 C9          5443*  	ret
044F94             5444*  
044F94             5445*  ld_22_044:
044F94 21 24 5D 04 5446*  	ld hl,F22_044
044F98 22 C1 B7 04 5447*  	ld (cur_filename),hl
044F9C 11 CB C3 04 5448*  	ld de,filedata
044FA0 01 00 00 01 5449*  	ld bc,65536
044FA4 3E 01       5450*  	ld a,mos_load
044FA6 5B CF       5451*  	RST.LIL 08h
044FA8 21 21 02 00 5452*  	ld hl,BUF_22_044
044FAC 01 96 00 00 5453*  	ld bc,150
044FB0 11 1E 00 00 5454*  	ld de,30
044FB4 DD 21 94 11 5455*  	ld ix,4500
       00          
044FB9 CD 3C B9 04 5456*  	call vdu_load_img
044FBD C9          5457*  	ret
044FBE             5458*  
044FBE             5459*  ld_23_004:
044FBE 21 38 5D 04 5460*  	ld hl,F23_004
044FC2 22 C1 B7 04 5461*  	ld (cur_filename),hl
044FC6 11 CB C3 04 5462*  	ld de,filedata
044FCA 01 00 00 01 5463*  	ld bc,65536
044FCE 3E 01       5464*  	ld a,mos_load
044FD0 5B CF       5465*  	RST.LIL 08h
044FD2 21 22 02 00 5466*  	ld hl,BUF_23_004
044FD6 01 0E 00 00 5467*  	ld bc,14
044FDA 11 06 00 00 5468*  	ld de,6
044FDE DD 21 54 00 5469*  	ld ix,84
       00          
044FE3 CD 3C B9 04 5470*  	call vdu_load_img
044FE7 C9          5471*  	ret
044FE8             5472*  
044FE8             5473*  ld_23_020:
044FE8 21 4C 5D 04 5474*  	ld hl,F23_020
044FEC 22 C1 B7 04 5475*  	ld (cur_filename),hl
044FF0 11 CB C3 04 5476*  	ld de,filedata
044FF4 01 00 00 01 5477*  	ld bc,65536
044FF8 3E 01       5478*  	ld a,mos_load
044FFA 5B CF       5479*  	RST.LIL 08h
044FFC 21 23 02 00 5480*  	ld hl,BUF_23_020
045000 01 11 00 00 5481*  	ld bc,17
045004 11 08 00 00 5482*  	ld de,8
045008 DD 21 88 00 5483*  	ld ix,136
       00          
04500D CD 3C B9 04 5484*  	call vdu_load_img
045011 C9          5485*  	ret
045012             5486*  
045012             5487*  ld_23_032:
045012 21 60 5D 04 5488*  	ld hl,F23_032
045016 22 C1 B7 04 5489*  	ld (cur_filename),hl
04501A 11 CB C3 04 5490*  	ld de,filedata
04501E 01 00 00 01 5491*  	ld bc,65536
045022 3E 01       5492*  	ld a,mos_load
045024 5B CF       5493*  	RST.LIL 08h
045026 21 24 02 00 5494*  	ld hl,BUF_23_032
04502A 01 19 00 00 5495*  	ld bc,25
04502E 11 0B 00 00 5496*  	ld de,11
045032 DD 21 13 01 5497*  	ld ix,275
       00          
045037 CD 3C B9 04 5498*  	call vdu_load_img
04503B C9          5499*  	ret
04503C             5500*  
04503C             5501*  ld_23_040:
04503C 21 74 5D 04 5502*  	ld hl,F23_040
045040 22 C1 B7 04 5503*  	ld (cur_filename),hl
045044 11 CB C3 04 5504*  	ld de,filedata
045048 01 00 00 01 5505*  	ld bc,65536
04504C 3E 01       5506*  	ld a,mos_load
04504E 5B CF       5507*  	RST.LIL 08h
045050 21 25 02 00 5508*  	ld hl,BUF_23_040
045054 01 28 00 00 5509*  	ld bc,40
045058 11 12 00 00 5510*  	ld de,18
04505C DD 21 D0 02 5511*  	ld ix,720
       00          
045061 CD 3C B9 04 5512*  	call vdu_load_img
045065 C9          5513*  	ret
045066             5514*  
045066             5515*  ld_23_044:
045066 21 88 5D 04 5516*  	ld hl,F23_044
04506A 22 C1 B7 04 5517*  	ld (cur_filename),hl
04506E 11 CB C3 04 5518*  	ld de,filedata
045072 01 00 00 01 5519*  	ld bc,65536
045076 3E 01       5520*  	ld a,mos_load
045078 5B CF       5521*  	RST.LIL 08h
04507A 21 26 02 00 5522*  	ld hl,BUF_23_044
04507E 01 01 00 00 5523*  	ld bc,1
045082 11 01 00 00 5524*  	ld de,1
045086 DD 21 01 00 5525*  	ld ix,1
       00          
04508B CD 3C B9 04 5526*  	call vdu_load_img
04508F C9          5527*  	ret
045090             5528*  
045090             5529*  ld_24_004:
045090 21 9C 5D 04 5530*  	ld hl,F24_004
045094 22 C1 B7 04 5531*  	ld (cur_filename),hl
045098 11 CB C3 04 5532*  	ld de,filedata
04509C 01 00 00 01 5533*  	ld bc,65536
0450A0 3E 01       5534*  	ld a,mos_load
0450A2 5B CF       5535*  	RST.LIL 08h
0450A4 21 27 02 00 5536*  	ld hl,BUF_24_004
0450A8 01 0B 00 00 5537*  	ld bc,11
0450AC 11 0B 00 00 5538*  	ld de,11
0450B0 DD 21 79 00 5539*  	ld ix,121
       00          
0450B5 CD 3C B9 04 5540*  	call vdu_load_img
0450B9 C9          5541*  	ret
0450BA             5542*  
0450BA             5543*  ld_24_020:
0450BA 21 B0 5D 04 5544*  	ld hl,F24_020
0450BE 22 C1 B7 04 5545*  	ld (cur_filename),hl
0450C2 11 CB C3 04 5546*  	ld de,filedata
0450C6 01 00 00 01 5547*  	ld bc,65536
0450CA 3E 01       5548*  	ld a,mos_load
0450CC 5B CF       5549*  	RST.LIL 08h
0450CE 21 28 02 00 5550*  	ld hl,BUF_24_020
0450D2 01 0E 00 00 5551*  	ld bc,14
0450D6 11 0E 00 00 5552*  	ld de,14
0450DA DD 21 C4 00 5553*  	ld ix,196
       00          
0450DF CD 3C B9 04 5554*  	call vdu_load_img
0450E3 C9          5555*  	ret
0450E4             5556*  
0450E4             5557*  ld_24_032:
0450E4 21 C4 5D 04 5558*  	ld hl,F24_032
0450E8 22 C1 B7 04 5559*  	ld (cur_filename),hl
0450EC 11 CB C3 04 5560*  	ld de,filedata
0450F0 01 00 00 01 5561*  	ld bc,65536
0450F4 3E 01       5562*  	ld a,mos_load
0450F6 5B CF       5563*  	RST.LIL 08h
0450F8 21 29 02 00 5564*  	ld hl,BUF_24_032
0450FC 01 14 00 00 5565*  	ld bc,20
045100 11 16 00 00 5566*  	ld de,22
045104 DD 21 B8 01 5567*  	ld ix,440
       00          
045109 CD 3C B9 04 5568*  	call vdu_load_img
04510D C9          5569*  	ret
04510E             5570*  
04510E             5571*  ld_24_040:
04510E 21 D8 5D 04 5572*  	ld hl,F24_040
045112 22 C1 B7 04 5573*  	ld (cur_filename),hl
045116 11 CB C3 04 5574*  	ld de,filedata
04511A 01 00 00 01 5575*  	ld bc,65536
04511E 3E 01       5576*  	ld a,mos_load
045120 5B CF       5577*  	RST.LIL 08h
045122 21 2A 02 00 5578*  	ld hl,BUF_24_040
045126 01 21 00 00 5579*  	ld bc,33
04512A 11 24 00 00 5580*  	ld de,36
04512E DD 21 A4 04 5581*  	ld ix,1188
       00          
045133 CD 3C B9 04 5582*  	call vdu_load_img
045137 C9          5583*  	ret
045138             5584*  
045138             5585*  ld_24_044:
045138 21 EC 5D 04 5586*  	ld hl,F24_044
04513C 22 C1 B7 04 5587*  	ld (cur_filename),hl
045140 11 CB C3 04 5588*  	ld de,filedata
045144 01 00 00 01 5589*  	ld bc,65536
045148 3E 01       5590*  	ld a,mos_load
04514A 5B CF       5591*  	RST.LIL 08h
04514C 21 2B 02 00 5592*  	ld hl,BUF_24_044
045150 01 64 00 00 5593*  	ld bc,100
045154 11 1E 00 00 5594*  	ld de,30
045158 DD 21 B8 0B 5595*  	ld ix,3000
       00          
04515D CD 3C B9 04 5596*  	call vdu_load_img
045161 C9          5597*  	ret
045162             5598*  
045162             5599*  ld_40_004:
045162 21 00 5E 04 5600*  	ld hl,F40_004
045166 22 C1 B7 04 5601*  	ld (cur_filename),hl
04516A 11 CB C3 04 5602*  	ld de,filedata
04516E 01 00 00 01 5603*  	ld bc,65536
045172 3E 01       5604*  	ld a,mos_load
045174 5B CF       5605*  	RST.LIL 08h
045176 21 2C 02 00 5606*  	ld hl,BUF_40_004
04517A 01 0E 00 00 5607*  	ld bc,14
04517E 11 07 00 00 5608*  	ld de,7
045182 DD 21 62 00 5609*  	ld ix,98
       00          
045187 CD 3C B9 04 5610*  	call vdu_load_img
04518B C9          5611*  	ret
04518C             5612*  
04518C             5613*  ld_40_020:
04518C 21 14 5E 04 5614*  	ld hl,F40_020
045190 22 C1 B7 04 5615*  	ld (cur_filename),hl
045194 11 CB C3 04 5616*  	ld de,filedata
045198 01 00 00 01 5617*  	ld bc,65536
04519C 3E 01       5618*  	ld a,mos_load
04519E 5B CF       5619*  	RST.LIL 08h
0451A0 21 2D 02 00 5620*  	ld hl,BUF_40_020
0451A4 01 12 00 00 5621*  	ld bc,18
0451A8 11 0A 00 00 5622*  	ld de,10
0451AC DD 21 B4 00 5623*  	ld ix,180
       00          
0451B1 CD 3C B9 04 5624*  	call vdu_load_img
0451B5 C9          5625*  	ret
0451B6             5626*  
0451B6             5627*  ld_40_032:
0451B6 21 28 5E 04 5628*  	ld hl,F40_032
0451BA 22 C1 B7 04 5629*  	ld (cur_filename),hl
0451BE 11 CB C3 04 5630*  	ld de,filedata
0451C2 01 00 00 01 5631*  	ld bc,65536
0451C6 3E 01       5632*  	ld a,mos_load
0451C8 5B CF       5633*  	RST.LIL 08h
0451CA 21 2E 02 00 5634*  	ld hl,BUF_40_032
0451CE 01 1A 00 00 5635*  	ld bc,26
0451D2 11 0D 00 00 5636*  	ld de,13
0451D6 DD 21 52 01 5637*  	ld ix,338
       00          
0451DB CD 3C B9 04 5638*  	call vdu_load_img
0451DF C9          5639*  	ret
0451E0             5640*  
0451E0             5641*  ld_40_040:
0451E0 21 3C 5E 04 5642*  	ld hl,F40_040
0451E4 22 C1 B7 04 5643*  	ld (cur_filename),hl
0451E8 11 CB C3 04 5644*  	ld de,filedata
0451EC 01 00 00 01 5645*  	ld bc,65536
0451F0 3E 01       5646*  	ld a,mos_load
0451F2 5B CF       5647*  	RST.LIL 08h
0451F4 21 2F 02 00 5648*  	ld hl,BUF_40_040
0451F8 01 2B 00 00 5649*  	ld bc,43
0451FC 11 17 00 00 5650*  	ld de,23
045200 DD 21 DD 03 5651*  	ld ix,989
       00          
045205 CD 3C B9 04 5652*  	call vdu_load_img
045209 C9          5653*  	ret
04520A             5654*  
04520A             5655*  ld_40_044:
04520A 21 50 5E 04 5656*  	ld hl,F40_044
04520E 22 C1 B7 04 5657*  	ld (cur_filename),hl
045212 11 CB C3 04 5658*  	ld de,filedata
045216 01 00 00 01 5659*  	ld bc,65536
04521A 3E 01       5660*  	ld a,mos_load
04521C 5B CF       5661*  	RST.LIL 08h
04521E 21 30 02 00 5662*  	ld hl,BUF_40_044
045222 01 01 00 00 5663*  	ld bc,1
045226 11 01 00 00 5664*  	ld de,1
04522A DD 21 01 00 5665*  	ld ix,1
       00          
04522F CD 3C B9 04 5666*  	call vdu_load_img
045233 C9          5667*  	ret
045234             5668*  
045234             5669*  ld_41_004:
045234 21 64 5E 04 5670*  	ld hl,F41_004
045238 22 C1 B7 04 5671*  	ld (cur_filename),hl
04523C 11 CB C3 04 5672*  	ld de,filedata
045240 01 00 00 01 5673*  	ld bc,65536
045244 3E 01       5674*  	ld a,mos_load
045246 5B CF       5675*  	RST.LIL 08h
045248 21 31 02 00 5676*  	ld hl,BUF_41_004
04524C 01 0B 00 00 5677*  	ld bc,11
045250 11 0B 00 00 5678*  	ld de,11
045254 DD 21 79 00 5679*  	ld ix,121
       00          
045259 CD 3C B9 04 5680*  	call vdu_load_img
04525D C9          5681*  	ret
04525E             5682*  
04525E             5683*  ld_41_020:
04525E 21 78 5E 04 5684*  	ld hl,F41_020
045262 22 C1 B7 04 5685*  	ld (cur_filename),hl
045266 11 CB C3 04 5686*  	ld de,filedata
04526A 01 00 00 01 5687*  	ld bc,65536
04526E 3E 01       5688*  	ld a,mos_load
045270 5B CF       5689*  	RST.LIL 08h
045272 21 32 02 00 5690*  	ld hl,BUF_41_020
045276 01 10 00 00 5691*  	ld bc,16
04527A 11 0E 00 00 5692*  	ld de,14
04527E DD 21 E0 00 5693*  	ld ix,224
       00          
045283 CD 3C B9 04 5694*  	call vdu_load_img
045287 C9          5695*  	ret
045288             5696*  
045288             5697*  ld_41_032:
045288 21 8C 5E 04 5698*  	ld hl,F41_032
04528C 22 C1 B7 04 5699*  	ld (cur_filename),hl
045290 11 CB C3 04 5700*  	ld de,filedata
045294 01 00 00 01 5701*  	ld bc,65536
045298 3E 01       5702*  	ld a,mos_load
04529A 5B CF       5703*  	RST.LIL 08h
04529C 21 33 02 00 5704*  	ld hl,BUF_41_032
0452A0 01 16 00 00 5705*  	ld bc,22
0452A4 11 14 00 00 5706*  	ld de,20
0452A8 DD 21 B8 01 5707*  	ld ix,440
       00          
0452AD CD 3C B9 04 5708*  	call vdu_load_img
0452B1 C9          5709*  	ret
0452B2             5710*  
0452B2             5711*  ld_41_040:
0452B2 21 A0 5E 04 5712*  	ld hl,F41_040
0452B6 22 C1 B7 04 5713*  	ld (cur_filename),hl
0452BA 11 CB C3 04 5714*  	ld de,filedata
0452BE 01 00 00 01 5715*  	ld bc,65536
0452C2 3E 01       5716*  	ld a,mos_load
0452C4 5B CF       5717*  	RST.LIL 08h
0452C6 21 34 02 00 5718*  	ld hl,BUF_41_040
0452CA 01 25 00 00 5719*  	ld bc,37
0452CE 11 22 00 00 5720*  	ld de,34
0452D2 DD 21 EA 04 5721*  	ld ix,1258
       00          
0452D7 CD 3C B9 04 5722*  	call vdu_load_img
0452DB C9          5723*  	ret
0452DC             5724*  
0452DC             5725*  ld_41_044:
0452DC 21 B4 5E 04 5726*  	ld hl,F41_044
0452E0 22 C1 B7 04 5727*  	ld (cur_filename),hl
0452E4 11 CB C3 04 5728*  	ld de,filedata
0452E8 01 00 00 01 5729*  	ld bc,65536
0452EC 3E 01       5730*  	ld a,mos_load
0452EE 5B CF       5731*  	RST.LIL 08h
0452F0 21 35 02 00 5732*  	ld hl,BUF_41_044
0452F4 01 23 00 00 5733*  	ld bc,35
0452F8 11 19 00 00 5734*  	ld de,25
0452FC DD 21 6B 03 5735*  	ld ix,875
       00          
045301 CD 3C B9 04 5736*  	call vdu_load_img
045305 C9          5737*  	ret
045306             5738*  
045306             5739*  ld_42_004:
045306 21 C8 5E 04 5740*  	ld hl,F42_004
04530A 22 C1 B7 04 5741*  	ld (cur_filename),hl
04530E 11 CB C3 04 5742*  	ld de,filedata
045312 01 00 00 01 5743*  	ld bc,65536
045316 3E 01       5744*  	ld a,mos_load
045318 5B CF       5745*  	RST.LIL 08h
04531A 21 36 02 00 5746*  	ld hl,BUF_42_004
04531E 01 0A 00 00 5747*  	ld bc,10
045322 11 09 00 00 5748*  	ld de,9
045326 DD 21 5A 00 5749*  	ld ix,90
       00          
04532B CD 3C B9 04 5750*  	call vdu_load_img
04532F C9          5751*  	ret
045330             5752*  
045330             5753*  ld_42_020:
045330 21 DC 5E 04 5754*  	ld hl,F42_020
045334 22 C1 B7 04 5755*  	ld (cur_filename),hl
045338 11 CB C3 04 5756*  	ld de,filedata
04533C 01 00 00 01 5757*  	ld bc,65536
045340 3E 01       5758*  	ld a,mos_load
045342 5B CF       5759*  	RST.LIL 08h
045344 21 37 02 00 5760*  	ld hl,BUF_42_020
045348 01 0E 00 00 5761*  	ld bc,14
04534C 11 0B 00 00 5762*  	ld de,11
045350 DD 21 9A 00 5763*  	ld ix,154
       00          
045355 CD 3C B9 04 5764*  	call vdu_load_img
045359 C9          5765*  	ret
04535A             5766*  
04535A             5767*  ld_42_032:
04535A 21 F0 5E 04 5768*  	ld hl,F42_032
04535E 22 C1 B7 04 5769*  	ld (cur_filename),hl
045362 11 CB C3 04 5770*  	ld de,filedata
045366 01 00 00 01 5771*  	ld bc,65536
04536A 3E 01       5772*  	ld a,mos_load
04536C 5B CF       5773*  	RST.LIL 08h
04536E 21 38 02 00 5774*  	ld hl,BUF_42_032
045372 01 13 00 00 5775*  	ld bc,19
045376 11 10 00 00 5776*  	ld de,16
04537A DD 21 30 01 5777*  	ld ix,304
       00          
04537F CD 3C B9 04 5778*  	call vdu_load_img
045383 C9          5779*  	ret
045384             5780*  
045384             5781*  ld_42_040:
045384 21 04 5F 04 5782*  	ld hl,F42_040
045388 22 C1 B7 04 5783*  	ld (cur_filename),hl
04538C 11 CB C3 04 5784*  	ld de,filedata
045390 01 00 00 01 5785*  	ld bc,65536
045394 3E 01       5786*  	ld a,mos_load
045396 5B CF       5787*  	RST.LIL 08h
045398 21 39 02 00 5788*  	ld hl,BUF_42_040
04539C 01 20 00 00 5789*  	ld bc,32
0453A0 11 1B 00 00 5790*  	ld de,27
0453A4 DD 21 60 03 5791*  	ld ix,864
       00          
0453A9 CD 3C B9 04 5792*  	call vdu_load_img
0453AD C9          5793*  	ret
0453AE             5794*  
0453AE             5795*  ld_42_044:
0453AE 21 18 5F 04 5796*  	ld hl,F42_044
0453B2 22 C1 B7 04 5797*  	ld (cur_filename),hl
0453B6 11 CB C3 04 5798*  	ld de,filedata
0453BA 01 00 00 01 5799*  	ld bc,65536
0453BE 3E 01       5800*  	ld a,mos_load
0453C0 5B CF       5801*  	RST.LIL 08h
0453C2 21 3A 02 00 5802*  	ld hl,BUF_42_044
0453C6 01 3F 00 00 5803*  	ld bc,63
0453CA 11 04 00 00 5804*  	ld de,4
0453CE DD 21 FC 00 5805*  	ld ix,252
       00          
0453D3 CD 3C B9 04 5806*  	call vdu_load_img
0453D7 C9          5807*  	ret
0453D8             5808*  
0453D8             5809*  ld_43_004:
0453D8 21 2C 5F 04 5810*  	ld hl,F43_004
0453DC 22 C1 B7 04 5811*  	ld (cur_filename),hl
0453E0 11 CB C3 04 5812*  	ld de,filedata
0453E4 01 00 00 01 5813*  	ld bc,65536
0453E8 3E 01       5814*  	ld a,mos_load
0453EA 5B CF       5815*  	RST.LIL 08h
0453EC 21 3B 02 00 5816*  	ld hl,BUF_43_004
0453F0 01 0B 00 00 5817*  	ld bc,11
0453F4 11 04 00 00 5818*  	ld de,4
0453F8 DD 21 2C 00 5819*  	ld ix,44
       00          
0453FD CD 3C B9 04 5820*  	call vdu_load_img
045401 C9          5821*  	ret
045402             5822*  
045402             5823*  ld_43_020:
045402 21 40 5F 04 5824*  	ld hl,F43_020
045406 22 C1 B7 04 5825*  	ld (cur_filename),hl
04540A 11 CB C3 04 5826*  	ld de,filedata
04540E 01 00 00 01 5827*  	ld bc,65536
045412 3E 01       5828*  	ld a,mos_load
045414 5B CF       5829*  	RST.LIL 08h
045416 21 3C 02 00 5830*  	ld hl,BUF_43_020
04541A 01 0F 00 00 5831*  	ld bc,15
04541E 11 04 00 00 5832*  	ld de,4
045422 DD 21 3C 00 5833*  	ld ix,60
       00          
045427 CD 3C B9 04 5834*  	call vdu_load_img
04542B C9          5835*  	ret
04542C             5836*  
04542C             5837*  ld_43_032:
04542C 21 54 5F 04 5838*  	ld hl,F43_032
045430 22 C1 B7 04 5839*  	ld (cur_filename),hl
045434 11 CB C3 04 5840*  	ld de,filedata
045438 01 00 00 01 5841*  	ld bc,65536
04543C 3E 01       5842*  	ld a,mos_load
04543E 5B CF       5843*  	RST.LIL 08h
045440 21 3D 02 00 5844*  	ld hl,BUF_43_032
045444 01 15 00 00 5845*  	ld bc,21
045448 11 07 00 00 5846*  	ld de,7
04544C DD 21 93 00 5847*  	ld ix,147
       00          
045451 CD 3C B9 04 5848*  	call vdu_load_img
045455 C9          5849*  	ret
045456             5850*  
045456             5851*  ld_43_040:
045456 21 68 5F 04 5852*  	ld hl,F43_040
04545A 22 C1 B7 04 5853*  	ld (cur_filename),hl
04545E 11 CB C3 04 5854*  	ld de,filedata
045462 01 00 00 01 5855*  	ld bc,65536
045466 3E 01       5856*  	ld a,mos_load
045468 5B CF       5857*  	RST.LIL 08h
04546A 21 3E 02 00 5858*  	ld hl,BUF_43_040
04546E 01 23 00 00 5859*  	ld bc,35
045472 11 0D 00 00 5860*  	ld de,13
045476 DD 21 C7 01 5861*  	ld ix,455
       00          
04547B CD 3C B9 04 5862*  	call vdu_load_img
04547F C9          5863*  	ret
045480             5864*  
045480             5865*  ld_43_044:
045480 21 7C 5F 04 5866*  	ld hl,F43_044
045484 22 C1 B7 04 5867*  	ld (cur_filename),hl
045488 11 CB C3 04 5868*  	ld de,filedata
04548C 01 00 00 01 5869*  	ld bc,65536
045490 3E 01       5870*  	ld a,mos_load
045492 5B CF       5871*  	RST.LIL 08h
045494 21 3F 02 00 5872*  	ld hl,BUF_43_044
045498 01 01 00 00 5873*  	ld bc,1
04549C 11 01 00 00 5874*  	ld de,1
0454A0 DD 21 01 00 5875*  	ld ix,1
       00          
0454A5 CD 3C B9 04 5876*  	call vdu_load_img
0454A9 C9          5877*  	ret
0454AA             5878*  
0454AA             5879*  ld_44_004:
0454AA 21 90 5F 04 5880*  	ld hl,F44_004
0454AE 22 C1 B7 04 5881*  	ld (cur_filename),hl
0454B2 11 CB C3 04 5882*  	ld de,filedata
0454B6 01 00 00 01 5883*  	ld bc,65536
0454BA 3E 01       5884*  	ld a,mos_load
0454BC 5B CF       5885*  	RST.LIL 08h
0454BE 21 40 02 00 5886*  	ld hl,BUF_44_004
0454C2 01 05 00 00 5887*  	ld bc,5
0454C6 11 04 00 00 5888*  	ld de,4
0454CA DD 21 14 00 5889*  	ld ix,20
       00          
0454CF CD 3C B9 04 5890*  	call vdu_load_img
0454D3 C9          5891*  	ret
0454D4             5892*  
0454D4             5893*  ld_44_020:
0454D4 21 A4 5F 04 5894*  	ld hl,F44_020
0454D8 22 C1 B7 04 5895*  	ld (cur_filename),hl
0454DC 11 CB C3 04 5896*  	ld de,filedata
0454E0 01 00 00 01 5897*  	ld bc,65536
0454E4 3E 01       5898*  	ld a,mos_load
0454E6 5B CF       5899*  	RST.LIL 08h
0454E8 21 41 02 00 5900*  	ld hl,BUF_44_020
0454EC 01 08 00 00 5901*  	ld bc,8
0454F0 11 06 00 00 5902*  	ld de,6
0454F4 DD 21 30 00 5903*  	ld ix,48
       00          
0454F9 CD 3C B9 04 5904*  	call vdu_load_img
0454FD C9          5905*  	ret
0454FE             5906*  
0454FE             5907*  ld_44_032:
0454FE 21 B8 5F 04 5908*  	ld hl,F44_032
045502 22 C1 B7 04 5909*  	ld (cur_filename),hl
045506 11 CB C3 04 5910*  	ld de,filedata
04550A 01 00 00 01 5911*  	ld bc,65536
04550E 3E 01       5912*  	ld a,mos_load
045510 5B CF       5913*  	RST.LIL 08h
045512 21 42 02 00 5914*  	ld hl,BUF_44_032
045516 01 0D 00 00 5915*  	ld bc,13
04551A 11 0A 00 00 5916*  	ld de,10
04551E DD 21 82 00 5917*  	ld ix,130
       00          
045523 CD 3C B9 04 5918*  	call vdu_load_img
045527 C9          5919*  	ret
045528             5920*  
045528             5921*  ld_44_040:
045528 21 CC 5F 04 5922*  	ld hl,F44_040
04552C 22 C1 B7 04 5923*  	ld (cur_filename),hl
045530 11 CB C3 04 5924*  	ld de,filedata
045534 01 00 00 01 5925*  	ld bc,65536
045538 3E 01       5926*  	ld a,mos_load
04553A 5B CF       5927*  	RST.LIL 08h
04553C 21 43 02 00 5928*  	ld hl,BUF_44_040
045540 01 14 00 00 5929*  	ld bc,20
045544 11 0F 00 00 5930*  	ld de,15
045548 DD 21 2C 01 5931*  	ld ix,300
       00          
04554D CD 3C B9 04 5932*  	call vdu_load_img
045551 C9          5933*  	ret
045552             5934*  
045552             5935*  ld_44_044:
045552 21 E0 5F 04 5936*  	ld hl,F44_044
045556 22 C1 B7 04 5937*  	ld (cur_filename),hl
04555A 11 CB C3 04 5938*  	ld de,filedata
04555E 01 00 00 01 5939*  	ld bc,65536
045562 3E 01       5940*  	ld a,mos_load
045564 5B CF       5941*  	RST.LIL 08h
045566 21 44 02 00 5942*  	ld hl,BUF_44_044
04556A 01 01 00 00 5943*  	ld bc,1
04556E 11 01 00 00 5944*  	ld de,1
045572 DD 21 01 00 5945*  	ld ix,1
       00          
045577 CD 3C B9 04 5946*  	call vdu_load_img
04557B C9          5947*  	ret
04557C             5948*  
04557C             5949*  ld_45_004:
04557C 21 F4 5F 04 5950*  	ld hl,F45_004
045580 22 C1 B7 04 5951*  	ld (cur_filename),hl
045584 11 CB C3 04 5952*  	ld de,filedata
045588 01 00 00 01 5953*  	ld bc,65536
04558C 3E 01       5954*  	ld a,mos_load
04558E 5B CF       5955*  	RST.LIL 08h
045590 21 45 02 00 5956*  	ld hl,BUF_45_004
045594 01 10 00 00 5957*  	ld bc,16
045598 11 0A 00 00 5958*  	ld de,10
04559C DD 21 A0 00 5959*  	ld ix,160
       00          
0455A1 CD 3C B9 04 5960*  	call vdu_load_img
0455A5 C9          5961*  	ret
0455A6             5962*  
0455A6             5963*  ld_45_020:
0455A6 21 08 60 04 5964*  	ld hl,F45_020
0455AA 22 C1 B7 04 5965*  	ld (cur_filename),hl
0455AE 11 CB C3 04 5966*  	ld de,filedata
0455B2 01 00 00 01 5967*  	ld bc,65536
0455B6 3E 01       5968*  	ld a,mos_load
0455B8 5B CF       5969*  	RST.LIL 08h
0455BA 21 46 02 00 5970*  	ld hl,BUF_45_020
0455BE 01 14 00 00 5971*  	ld bc,20
0455C2 11 0D 00 00 5972*  	ld de,13
0455C6 DD 21 04 01 5973*  	ld ix,260
       00          
0455CB CD 3C B9 04 5974*  	call vdu_load_img
0455CF C9          5975*  	ret
0455D0             5976*  
0455D0             5977*  ld_45_032:
0455D0 21 1C 60 04 5978*  	ld hl,F45_032
0455D4 22 C1 B7 04 5979*  	ld (cur_filename),hl
0455D8 11 CB C3 04 5980*  	ld de,filedata
0455DC 01 00 00 01 5981*  	ld bc,65536
0455E0 3E 01       5982*  	ld a,mos_load
0455E2 5B CF       5983*  	RST.LIL 08h
0455E4 21 47 02 00 5984*  	ld hl,BUF_45_032
0455E8 01 1D 00 00 5985*  	ld bc,29
0455EC 11 12 00 00 5986*  	ld de,18
0455F0 DD 21 0A 02 5987*  	ld ix,522
       00          
0455F5 CD 3C B9 04 5988*  	call vdu_load_img
0455F9 C9          5989*  	ret
0455FA             5990*  
0455FA             5991*  ld_45_040:
0455FA 21 30 60 04 5992*  	ld hl,F45_040
0455FE 22 C1 B7 04 5993*  	ld (cur_filename),hl
045602 11 CB C3 04 5994*  	ld de,filedata
045606 01 00 00 01 5995*  	ld bc,65536
04560A 3E 01       5996*  	ld a,mos_load
04560C 5B CF       5997*  	RST.LIL 08h
04560E 21 48 02 00 5998*  	ld hl,BUF_45_040
045612 01 30 00 00 5999*  	ld bc,48
045616 11 21 00 00 6000*  	ld de,33
04561A DD 21 30 06 6001*  	ld ix,1584
       00          
04561F CD 3C B9 04 6002*  	call vdu_load_img
045623 C9          6003*  	ret
045624             6004*  
045624             6005*  ld_45_044:
045624 21 44 60 04 6006*  	ld hl,F45_044
045628 22 C1 B7 04 6007*  	ld (cur_filename),hl
04562C 11 CB C3 04 6008*  	ld de,filedata
045630 01 00 00 01 6009*  	ld bc,65536
045634 3E 01       6010*  	ld a,mos_load
045636 5B CF       6011*  	RST.LIL 08h
045638 21 49 02 00 6012*  	ld hl,BUF_45_044
04563C 01 75 00 00 6013*  	ld bc,117
045640 11 13 00 00 6014*  	ld de,19
045644 DD 21 AF 08 6015*  	ld ix,2223
       00          
045649 CD 3C B9 04 6016*  	call vdu_load_img
04564D C9          6017*  	ret
04564E             6018*  
04564E             6019*  ld_46_004:
04564E 21 58 60 04 6020*  	ld hl,F46_004
045652 22 C1 B7 04 6021*  	ld (cur_filename),hl
045656 11 CB C3 04 6022*  	ld de,filedata
04565A 01 00 00 01 6023*  	ld bc,65536
04565E 3E 01       6024*  	ld a,mos_load
045660 5B CF       6025*  	RST.LIL 08h
045662 21 4A 02 00 6026*  	ld hl,BUF_46_004
045666 01 10 00 00 6027*  	ld bc,16
04566A 11 08 00 00 6028*  	ld de,8
04566E DD 21 80 00 6029*  	ld ix,128
       00          
045673 CD 3C B9 04 6030*  	call vdu_load_img
045677 C9          6031*  	ret
045678             6032*  
045678             6033*  ld_46_020:
045678 21 6C 60 04 6034*  	ld hl,F46_020
04567C 22 C1 B7 04 6035*  	ld (cur_filename),hl
045680 11 CB C3 04 6036*  	ld de,filedata
045684 01 00 00 01 6037*  	ld bc,65536
045688 3E 01       6038*  	ld a,mos_load
04568A 5B CF       6039*  	RST.LIL 08h
04568C 21 4B 02 00 6040*  	ld hl,BUF_46_020
045690 01 14 00 00 6041*  	ld bc,20
045694 11 0B 00 00 6042*  	ld de,11
045698 DD 21 DC 00 6043*  	ld ix,220
       00          
04569D CD 3C B9 04 6044*  	call vdu_load_img
0456A1 C9          6045*  	ret
0456A2             6046*  
0456A2             6047*  ld_46_032:
0456A2 21 80 60 04 6048*  	ld hl,F46_032
0456A6 22 C1 B7 04 6049*  	ld (cur_filename),hl
0456AA 11 CB C3 04 6050*  	ld de,filedata
0456AE 01 00 00 01 6051*  	ld bc,65536
0456B2 3E 01       6052*  	ld a,mos_load
0456B4 5B CF       6053*  	RST.LIL 08h
0456B6 21 4C 02 00 6054*  	ld hl,BUF_46_032
0456BA 01 1D 00 00 6055*  	ld bc,29
0456BE 11 0F 00 00 6056*  	ld de,15
0456C2 DD 21 B3 01 6057*  	ld ix,435
       00          
0456C7 CD 3C B9 04 6058*  	call vdu_load_img
0456CB C9          6059*  	ret
0456CC             6060*  
0456CC             6061*  ld_46_040:
0456CC 21 94 60 04 6062*  	ld hl,F46_040
0456D0 22 C1 B7 04 6063*  	ld (cur_filename),hl
0456D4 11 CB C3 04 6064*  	ld de,filedata
0456D8 01 00 00 01 6065*  	ld bc,65536
0456DC 3E 01       6066*  	ld a,mos_load
0456DE 5B CF       6067*  	RST.LIL 08h
0456E0 21 4D 02 00 6068*  	ld hl,BUF_46_040
0456E4 01 30 00 00 6069*  	ld bc,48
0456E8 11 1B 00 00 6070*  	ld de,27
0456EC DD 21 10 05 6071*  	ld ix,1296
       00          
0456F1 CD 3C B9 04 6072*  	call vdu_load_img
0456F5 C9          6073*  	ret
0456F6             6074*  
0456F6             6075*  ld_46_044:
0456F6 21 A8 60 04 6076*  	ld hl,F46_044
0456FA 22 C1 B7 04 6077*  	ld (cur_filename),hl
0456FE 11 CB C3 04 6078*  	ld de,filedata
045702 01 00 00 01 6079*  	ld bc,65536
045706 3E 01       6080*  	ld a,mos_load
045708 5B CF       6081*  	RST.LIL 08h
04570A 21 4E 02 00 6082*  	ld hl,BUF_46_044
04570E 01 51 00 00 6083*  	ld bc,81
045712 11 01 00 00 6084*  	ld de,1
045716 DD 21 51 00 6085*  	ld ix,81
       00          
04571B CD 3C B9 04 6086*  	call vdu_load_img
04571F C9          6087*  	ret
045720             6088*  
045720             6089*  ld_47_004:
045720 21 BC 60 04 6090*  	ld hl,F47_004
045724 22 C1 B7 04 6091*  	ld (cur_filename),hl
045728 11 CB C3 04 6092*  	ld de,filedata
04572C 01 00 00 01 6093*  	ld bc,65536
045730 3E 01       6094*  	ld a,mos_load
045732 5B CF       6095*  	RST.LIL 08h
045734 21 4F 02 00 6096*  	ld hl,BUF_47_004
045738 01 10 00 00 6097*  	ld bc,16
04573C 11 09 00 00 6098*  	ld de,9
045740 DD 21 90 00 6099*  	ld ix,144
       00          
045745 CD 3C B9 04 6100*  	call vdu_load_img
045749 C9          6101*  	ret
04574A             6102*  
04574A             6103*  ld_47_020:
04574A 21 D0 60 04 6104*  	ld hl,F47_020
04574E 22 C1 B7 04 6105*  	ld (cur_filename),hl
045752 11 CB C3 04 6106*  	ld de,filedata
045756 01 00 00 01 6107*  	ld bc,65536
04575A 3E 01       6108*  	ld a,mos_load
04575C 5B CF       6109*  	RST.LIL 08h
04575E 21 50 02 00 6110*  	ld hl,BUF_47_020
045762 01 14 00 00 6111*  	ld bc,20
045766 11 0B 00 00 6112*  	ld de,11
04576A DD 21 DC 00 6113*  	ld ix,220
       00          
04576F CD 3C B9 04 6114*  	call vdu_load_img
045773 C9          6115*  	ret
045774             6116*  
045774             6117*  ld_47_032:
045774 21 E4 60 04 6118*  	ld hl,F47_032
045778 22 C1 B7 04 6119*  	ld (cur_filename),hl
04577C 11 CB C3 04 6120*  	ld de,filedata
045780 01 00 00 01 6121*  	ld bc,65536
045784 3E 01       6122*  	ld a,mos_load
045786 5B CF       6123*  	RST.LIL 08h
045788 21 51 02 00 6124*  	ld hl,BUF_47_032
04578C 01 1D 00 00 6125*  	ld bc,29
045790 11 11 00 00 6126*  	ld de,17
045794 DD 21 ED 01 6127*  	ld ix,493
       00          
045799 CD 3C B9 04 6128*  	call vdu_load_img
04579D C9          6129*  	ret
04579E             6130*  
04579E             6131*  ld_47_040:
04579E 21 F8 60 04 6132*  	ld hl,F47_040
0457A2 22 C1 B7 04 6133*  	ld (cur_filename),hl
0457A6 11 CB C3 04 6134*  	ld de,filedata
0457AA 01 00 00 01 6135*  	ld bc,65536
0457AE 3E 01       6136*  	ld a,mos_load
0457B0 5B CF       6137*  	RST.LIL 08h
0457B2 21 52 02 00 6138*  	ld hl,BUF_47_040
0457B6 01 30 00 00 6139*  	ld bc,48
0457BA 11 1B 00 00 6140*  	ld de,27
0457BE DD 21 10 05 6141*  	ld ix,1296
       00          
0457C3 CD 3C B9 04 6142*  	call vdu_load_img
0457C7 C9          6143*  	ret
0457C8             6144*  
0457C8             6145*  ld_47_044:
0457C8 21 0C 61 04 6146*  	ld hl,F47_044
0457CC 22 C1 B7 04 6147*  	ld (cur_filename),hl
0457D0 11 CB C3 04 6148*  	ld de,filedata
0457D4 01 00 00 01 6149*  	ld bc,65536
0457D8 3E 01       6150*  	ld a,mos_load
0457DA 5B CF       6151*  	RST.LIL 08h
0457DC 21 53 02 00 6152*  	ld hl,BUF_47_044
0457E0 01 1B 00 00 6153*  	ld bc,27
0457E4 11 0A 00 00 6154*  	ld de,10
0457E8 DD 21 0E 01 6155*  	ld ix,270
       00          
0457ED CD 3C B9 04 6156*  	call vdu_load_img
0457F1 C9          6157*  	ret
0457F2             6158*  
0457F2             6159*  ld_48_004:
0457F2 21 20 61 04 6160*  	ld hl,F48_004
0457F6 22 C1 B7 04 6161*  	ld (cur_filename),hl
0457FA 11 CB C3 04 6162*  	ld de,filedata
0457FE 01 00 00 01 6163*  	ld bc,65536
045802 3E 01       6164*  	ld a,mos_load
045804 5B CF       6165*  	RST.LIL 08h
045806 21 54 02 00 6166*  	ld hl,BUF_48_004
04580A 01 12 00 00 6167*  	ld bc,18
04580E 11 07 00 00 6168*  	ld de,7
045812 DD 21 7E 00 6169*  	ld ix,126
       00          
045817 CD 3C B9 04 6170*  	call vdu_load_img
04581B C9          6171*  	ret
04581C             6172*  
04581C             6173*  ld_48_020:
04581C 21 34 61 04 6174*  	ld hl,F48_020
045820 22 C1 B7 04 6175*  	ld (cur_filename),hl
045824 11 CB C3 04 6176*  	ld de,filedata
045828 01 00 00 01 6177*  	ld bc,65536
04582C 3E 01       6178*  	ld a,mos_load
04582E 5B CF       6179*  	RST.LIL 08h
045830 21 55 02 00 6180*  	ld hl,BUF_48_020
045834 01 17 00 00 6181*  	ld bc,23
045838 11 0A 00 00 6182*  	ld de,10
04583C DD 21 E6 00 6183*  	ld ix,230
       00          
045841 CD 3C B9 04 6184*  	call vdu_load_img
045845 C9          6185*  	ret
045846             6186*  
045846             6187*  ld_48_032:
045846 21 48 61 04 6188*  	ld hl,F48_032
04584A 22 C1 B7 04 6189*  	ld (cur_filename),hl
04584E 11 CB C3 04 6190*  	ld de,filedata
045852 01 00 00 01 6191*  	ld bc,65536
045856 3E 01       6192*  	ld a,mos_load
045858 5B CF       6193*  	RST.LIL 08h
04585A 21 56 02 00 6194*  	ld hl,BUF_48_032
04585E 01 20 00 00 6195*  	ld bc,32
045862 11 0D 00 00 6196*  	ld de,13
045866 DD 21 A0 01 6197*  	ld ix,416
       00          
04586B CD 3C B9 04 6198*  	call vdu_load_img
04586F C9          6199*  	ret
045870             6200*  
045870             6201*  ld_48_040:
045870 21 5C 61 04 6202*  	ld hl,F48_040
045874 22 C1 B7 04 6203*  	ld (cur_filename),hl
045878 11 CB C3 04 6204*  	ld de,filedata
04587C 01 00 00 01 6205*  	ld bc,65536
045880 3E 01       6206*  	ld a,mos_load
045882 5B CF       6207*  	RST.LIL 08h
045884 21 57 02 00 6208*  	ld hl,BUF_48_040
045888 01 35 00 00 6209*  	ld bc,53
04588C 11 18 00 00 6210*  	ld de,24
045890 DD 21 F8 04 6211*  	ld ix,1272
       00          
045895 CD 3C B9 04 6212*  	call vdu_load_img
045899 C9          6213*  	ret
04589A             6214*  
04589A             6215*  ld_48_044:
04589A 21 70 61 04 6216*  	ld hl,F48_044
04589E 22 C1 B7 04 6217*  	ld (cur_filename),hl
0458A2 11 CB C3 04 6218*  	ld de,filedata
0458A6 01 00 00 01 6219*  	ld bc,65536
0458AA 3E 01       6220*  	ld a,mos_load
0458AC 5B CF       6221*  	RST.LIL 08h
0458AE 21 58 02 00 6222*  	ld hl,BUF_48_044
0458B2 01 01 00 00 6223*  	ld bc,1
0458B6 11 01 00 00 6224*  	ld de,1
0458BA DD 21 01 00 6225*  	ld ix,1
       00          
0458BF CD 3C B9 04 6226*  	call vdu_load_img
0458C3 C9          6227*  	ret
0458C4             6228*  
0458C4             6229*  ld_49_004:
0458C4 21 84 61 04 6230*  	ld hl,F49_004
0458C8 22 C1 B7 04 6231*  	ld (cur_filename),hl
0458CC 11 CB C3 04 6232*  	ld de,filedata
0458D0 01 00 00 01 6233*  	ld bc,65536
0458D4 3E 01       6234*  	ld a,mos_load
0458D6 5B CF       6235*  	RST.LIL 08h
0458D8 21 59 02 00 6236*  	ld hl,BUF_49_004
0458DC 01 0E 00 00 6237*  	ld bc,14
0458E0 11 06 00 00 6238*  	ld de,6
0458E4 DD 21 54 00 6239*  	ld ix,84
       00          
0458E9 CD 3C B9 04 6240*  	call vdu_load_img
0458ED C9          6241*  	ret
0458EE             6242*  
0458EE             6243*  ld_49_020:
0458EE 21 98 61 04 6244*  	ld hl,F49_020
0458F2 22 C1 B7 04 6245*  	ld (cur_filename),hl
0458F6 11 CB C3 04 6246*  	ld de,filedata
0458FA 01 00 00 01 6247*  	ld bc,65536
0458FE 3E 01       6248*  	ld a,mos_load
045900 5B CF       6249*  	RST.LIL 08h
045902 21 5A 02 00 6250*  	ld hl,BUF_49_020
045906 01 12 00 00 6251*  	ld bc,18
04590A 11 08 00 00 6252*  	ld de,8
04590E DD 21 90 00 6253*  	ld ix,144
       00          
045913 CD 3C B9 04 6254*  	call vdu_load_img
045917 C9          6255*  	ret
045918             6256*  
045918             6257*  ld_49_032:
045918 21 AC 61 04 6258*  	ld hl,F49_032
04591C 22 C1 B7 04 6259*  	ld (cur_filename),hl
045920 11 CB C3 04 6260*  	ld de,filedata
045924 01 00 00 01 6261*  	ld bc,65536
045928 3E 01       6262*  	ld a,mos_load
04592A 5B CF       6263*  	RST.LIL 08h
04592C 21 5B 02 00 6264*  	ld hl,BUF_49_032
045930 01 1A 00 00 6265*  	ld bc,26
045934 11 0B 00 00 6266*  	ld de,11
045938 DD 21 1E 01 6267*  	ld ix,286
       00          
04593D CD 3C B9 04 6268*  	call vdu_load_img
045941 C9          6269*  	ret
045942             6270*  
045942             6271*  ld_49_040:
045942 21 C0 61 04 6272*  	ld hl,F49_040
045946 22 C1 B7 04 6273*  	ld (cur_filename),hl
04594A 11 CB C3 04 6274*  	ld de,filedata
04594E 01 00 00 01 6275*  	ld bc,65536
045952 3E 01       6276*  	ld a,mos_load
045954 5B CF       6277*  	RST.LIL 08h
045956 21 5C 02 00 6278*  	ld hl,BUF_49_040
04595A 01 2B 00 00 6279*  	ld bc,43
04595E 11 12 00 00 6280*  	ld de,18
045962 DD 21 06 03 6281*  	ld ix,774
       00          
045967 CD 3C B9 04 6282*  	call vdu_load_img
04596B C9          6283*  	ret
04596C             6284*  
04596C             6285*  ld_49_044:
04596C 21 D4 61 04 6286*  	ld hl,F49_044
045970 22 C1 B7 04 6287*  	ld (cur_filename),hl
045974 11 CB C3 04 6288*  	ld de,filedata
045978 01 00 00 01 6289*  	ld bc,65536
04597C 3E 01       6290*  	ld a,mos_load
04597E 5B CF       6291*  	RST.LIL 08h
045980 21 5D 02 00 6292*  	ld hl,BUF_49_044
045984 01 01 00 00 6293*  	ld bc,1
045988 11 01 00 00 6294*  	ld de,1
04598C DD 21 01 00 6295*  	ld ix,1
       00          
045991 CD 3C B9 04 6296*  	call vdu_load_img
045995 C9          6297*  	ret
045996             6298*  
045996             6299*  ld_50_004:
045996 21 E8 61 04 6300*  	ld hl,F50_004
04599A 22 C1 B7 04 6301*  	ld (cur_filename),hl
04599E 11 CB C3 04 6302*  	ld de,filedata
0459A2 01 00 00 01 6303*  	ld bc,65536
0459A6 3E 01       6304*  	ld a,mos_load
0459A8 5B CF       6305*  	RST.LIL 08h
0459AA 21 5E 02 00 6306*  	ld hl,BUF_50_004
0459AE 01 0A 00 00 6307*  	ld bc,10
0459B2 11 0D 00 00 6308*  	ld de,13
0459B6 DD 21 82 00 6309*  	ld ix,130
       00          
0459BB CD 3C B9 04 6310*  	call vdu_load_img
0459BF C9          6311*  	ret
0459C0             6312*  
0459C0             6313*  ld_50_020:
0459C0 21 FC 61 04 6314*  	ld hl,F50_020
0459C4 22 C1 B7 04 6315*  	ld (cur_filename),hl
0459C8 11 CB C3 04 6316*  	ld de,filedata
0459CC 01 00 00 01 6317*  	ld bc,65536
0459D0 3E 01       6318*  	ld a,mos_load
0459D2 5B CF       6319*  	RST.LIL 08h
0459D4 21 5F 02 00 6320*  	ld hl,BUF_50_020
0459D8 01 0D 00 00 6321*  	ld bc,13
0459DC 11 11 00 00 6322*  	ld de,17
0459E0 DD 21 DD 00 6323*  	ld ix,221
       00          
0459E5 CD 3C B9 04 6324*  	call vdu_load_img
0459E9 C9          6325*  	ret
0459EA             6326*  
0459EA             6327*  ld_50_032:
0459EA 21 10 62 04 6328*  	ld hl,F50_032
0459EE 22 C1 B7 04 6329*  	ld (cur_filename),hl
0459F2 11 CB C3 04 6330*  	ld de,filedata
0459F6 01 00 00 01 6331*  	ld bc,65536
0459FA 3E 01       6332*  	ld a,mos_load
0459FC 5B CF       6333*  	RST.LIL 08h
0459FE 21 60 02 00 6334*  	ld hl,BUF_50_032
045A02 01 12 00 00 6335*  	ld bc,18
045A06 11 1A 00 00 6336*  	ld de,26
045A0A DD 21 D4 01 6337*  	ld ix,468
       00          
045A0F CD 3C B9 04 6338*  	call vdu_load_img
045A13 C9          6339*  	ret
045A14             6340*  
045A14             6341*  ld_50_040:
045A14 21 24 62 04 6342*  	ld hl,F50_040
045A18 22 C1 B7 04 6343*  	ld (cur_filename),hl
045A1C 11 CB C3 04 6344*  	ld de,filedata
045A20 01 00 00 01 6345*  	ld bc,65536
045A24 3E 01       6346*  	ld a,mos_load
045A26 5B CF       6347*  	RST.LIL 08h
045A28 21 61 02 00 6348*  	ld hl,BUF_50_040
045A2C 01 1E 00 00 6349*  	ld bc,30
045A30 11 2A 00 00 6350*  	ld de,42
045A34 DD 21 EC 04 6351*  	ld ix,1260
       00          
045A39 CD 3C B9 04 6352*  	call vdu_load_img
045A3D C9          6353*  	ret
045A3E             6354*  
045A3E             6355*  ld_50_044:
045A3E 21 38 62 04 6356*  	ld hl,F50_044
045A42 22 C1 B7 04 6357*  	ld (cur_filename),hl
045A46 11 CB C3 04 6358*  	ld de,filedata
045A4A 01 00 00 01 6359*  	ld bc,65536
045A4E 3E 01       6360*  	ld a,mos_load
045A50 5B CF       6361*  	RST.LIL 08h
045A52 21 62 02 00 6362*  	ld hl,BUF_50_044
045A56 01 46 00 00 6363*  	ld bc,70
045A5A 11 32 00 00 6364*  	ld de,50
045A5E DD 21 AC 0D 6365*  	ld ix,3500
       00          
045A63 CD 3C B9 04 6366*  	call vdu_load_img
045A67 C9          6367*  	ret
045A68             6368*  
045A68             6369*  ld_51_004:
045A68 21 4C 62 04 6370*  	ld hl,F51_004
045A6C 22 C1 B7 04 6371*  	ld (cur_filename),hl
045A70 11 CB C3 04 6372*  	ld de,filedata
045A74 01 00 00 01 6373*  	ld bc,65536
045A78 3E 01       6374*  	ld a,mos_load
045A7A 5B CF       6375*  	RST.LIL 08h
045A7C 21 63 02 00 6376*  	ld hl,BUF_51_004
045A80 01 11 00 00 6377*  	ld bc,17
045A84 11 17 00 00 6378*  	ld de,23
045A88 DD 21 87 01 6379*  	ld ix,391
       00          
045A8D CD 3C B9 04 6380*  	call vdu_load_img
045A91 C9          6381*  	ret
045A92             6382*  
045A92             6383*  ld_51_020:
045A92 21 60 62 04 6384*  	ld hl,F51_020
045A96 22 C1 B7 04 6385*  	ld (cur_filename),hl
045A9A 11 CB C3 04 6386*  	ld de,filedata
045A9E 01 00 00 01 6387*  	ld bc,65536
045AA2 3E 01       6388*  	ld a,mos_load
045AA4 5B CF       6389*  	RST.LIL 08h
045AA6 21 64 02 00 6390*  	ld hl,BUF_51_020
045AAA 01 15 00 00 6391*  	ld bc,21
045AAE 11 1D 00 00 6392*  	ld de,29
045AB2 DD 21 61 02 6393*  	ld ix,609
       00          
045AB7 CD 3C B9 04 6394*  	call vdu_load_img
045ABB C9          6395*  	ret
045ABC             6396*  
045ABC             6397*  ld_51_032:
045ABC 21 74 62 04 6398*  	ld hl,F51_032
045AC0 22 C1 B7 04 6399*  	ld (cur_filename),hl
045AC4 11 CB C3 04 6400*  	ld de,filedata
045AC8 01 00 00 01 6401*  	ld bc,65536
045ACC 3E 01       6402*  	ld a,mos_load
045ACE 5B CF       6403*  	RST.LIL 08h
045AD0 21 65 02 00 6404*  	ld hl,BUF_51_032
045AD4 01 1E 00 00 6405*  	ld bc,30
045AD8 11 2A 00 00 6406*  	ld de,42
045ADC DD 21 EC 04 6407*  	ld ix,1260
       00          
045AE1 CD 3C B9 04 6408*  	call vdu_load_img
045AE5 C9          6409*  	ret
045AE6             6410*  
045AE6             6411*  ld_51_040:
045AE6 21 88 62 04 6412*  	ld hl,F51_040
045AEA 22 C1 B7 04 6413*  	ld (cur_filename),hl
045AEE 11 CB C3 04 6414*  	ld de,filedata
045AF2 01 00 00 01 6415*  	ld bc,65536
045AF6 3E 01       6416*  	ld a,mos_load
045AF8 5B CF       6417*  	RST.LIL 08h
045AFA 21 66 02 00 6418*  	ld hl,BUF_51_040
045AFE 01 31 00 00 6419*  	ld bc,49
045B02 11 46 00 00 6420*  	ld de,70
045B06 DD 21 66 0D 6421*  	ld ix,3430
       00          
045B0B CD 3C B9 04 6422*  	call vdu_load_img
045B0F C9          6423*  	ret
045B10             6424*  
045B10             6425*  ld_51_044:
045B10 21 9C 62 04 6426*  	ld hl,F51_044
045B14 22 C1 B7 04 6427*  	ld (cur_filename),hl
045B18 11 CB C3 04 6428*  	ld de,filedata
045B1C 01 00 00 01 6429*  	ld bc,65536
045B20 3E 01       6430*  	ld a,mos_load
045B22 5B CF       6431*  	RST.LIL 08h
045B24 21 67 02 00 6432*  	ld hl,BUF_51_044
045B28 01 92 00 00 6433*  	ld bc,146
045B2C 11 83 00 00 6434*  	ld de,131
045B30 DD 21 B6 4A 6435*  	ld ix,19126
       00          
045B35 CD 3C B9 04 6436*  	call vdu_load_img
045B39 C9          6437*  	ret
045B3A             6438*  
045B3A             6439*  ld_52_004:
045B3A 21 B0 62 04 6440*  	ld hl,F52_004
045B3E 22 C1 B7 04 6441*  	ld (cur_filename),hl
045B42 11 CB C3 04 6442*  	ld de,filedata
045B46 01 00 00 01 6443*  	ld bc,65536
045B4A 3E 01       6444*  	ld a,mos_load
045B4C 5B CF       6445*  	RST.LIL 08h
045B4E 21 68 02 00 6446*  	ld hl,BUF_52_004
045B52 01 0E 00 00 6447*  	ld bc,14
045B56 11 17 00 00 6448*  	ld de,23
045B5A DD 21 42 01 6449*  	ld ix,322
       00          
045B5F CD 3C B9 04 6450*  	call vdu_load_img
045B63 C9          6451*  	ret
045B64             6452*  
045B64             6453*  ld_52_020:
045B64 21 C4 62 04 6454*  	ld hl,F52_020
045B68 22 C1 B7 04 6455*  	ld (cur_filename),hl
045B6C 11 CB C3 04 6456*  	ld de,filedata
045B70 01 00 00 01 6457*  	ld bc,65536
045B74 3E 01       6458*  	ld a,mos_load
045B76 5B CF       6459*  	RST.LIL 08h
045B78 21 69 02 00 6460*  	ld hl,BUF_52_020
045B7C 01 11 00 00 6461*  	ld bc,17
045B80 11 1D 00 00 6462*  	ld de,29
045B84 DD 21 ED 01 6463*  	ld ix,493
       00          
045B89 CD 3C B9 04 6464*  	call vdu_load_img
045B8D C9          6465*  	ret
045B8E             6466*  
045B8E             6467*  ld_52_032:
045B8E 21 D8 62 04 6468*  	ld hl,F52_032
045B92 22 C1 B7 04 6469*  	ld (cur_filename),hl
045B96 11 CB C3 04 6470*  	ld de,filedata
045B9A 01 00 00 01 6471*  	ld bc,65536
045B9E 3E 01       6472*  	ld a,mos_load
045BA0 5B CF       6473*  	RST.LIL 08h
045BA2 21 6A 02 00 6474*  	ld hl,BUF_52_032
045BA6 01 19 00 00 6475*  	ld bc,25
045BAA 11 2A 00 00 6476*  	ld de,42
045BAE DD 21 1A 04 6477*  	ld ix,1050
       00          
045BB3 CD 3C B9 04 6478*  	call vdu_load_img
045BB7 C9          6479*  	ret
045BB8             6480*  
045BB8             6481*  ld_52_040:
045BB8 21 EC 62 04 6482*  	ld hl,F52_040
045BBC 22 C1 B7 04 6483*  	ld (cur_filename),hl
045BC0 11 CB C3 04 6484*  	ld de,filedata
045BC4 01 00 00 01 6485*  	ld bc,65536
045BC8 3E 01       6486*  	ld a,mos_load
045BCA 5B CF       6487*  	RST.LIL 08h
045BCC 21 6B 02 00 6488*  	ld hl,BUF_52_040
045BD0 01 28 00 00 6489*  	ld bc,40
045BD4 11 46 00 00 6490*  	ld de,70
045BD8 DD 21 F0 0A 6491*  	ld ix,2800
       00          
045BDD CD 3C B9 04 6492*  	call vdu_load_img
045BE1 C9          6493*  	ret
045BE2             6494*  
045BE2             6495*  ld_52_044:
045BE2 21 00 63 04 6496*  	ld hl,F52_044
045BE6 22 C1 B7 04 6497*  	ld (cur_filename),hl
045BEA 11 CB C3 04 6498*  	ld de,filedata
045BEE 01 00 00 01 6499*  	ld bc,65536
045BF2 3E 01       6500*  	ld a,mos_load
045BF4 5B CF       6501*  	RST.LIL 08h
045BF6 21 6C 02 00 6502*  	ld hl,BUF_52_044
045BFA 01 78 00 00 6503*  	ld bc,120
045BFE 11 83 00 00 6504*  	ld de,131
045C02 DD 21 68 3D 6505*  	ld ix,15720
       00          
045C07 CD 3C B9 04 6506*  	call vdu_load_img
045C0B C9          6507*  	ret
045C0C             6508*  
045C0C             6509*  ; File name lookups:
045C0C 70 61 6E 65 6510*  F20_004: db "panels/20_004.rgba2",0
       6C 73 2F 32 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C20 70 61 6E 65 6511*  F20_020: db "panels/20_020.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C34 70 61 6E 65 6512*  F20_032: db "panels/20_032.rgba2",0
       6C 73 2F 32 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045C48 70 61 6E 65 6513*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045C5C 70 61 6E 65 6514*  F20_044: db "panels/20_044.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045C70 70 61 6E 65 6515*  F21_004: db "panels/21_004.rgba2",0
       6C 73 2F 32 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045C84 70 61 6E 65 6516*  F21_020: db "panels/21_020.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045C98 70 61 6E 65 6517*  F21_032: db "panels/21_032.rgba2",0
       6C 73 2F 32 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045CAC 70 61 6E 65 6518*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045CC0 70 61 6E 65 6519*  F21_044: db "panels/21_044.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045CD4 70 61 6E 65 6520*  F22_004: db "panels/22_004.rgba2",0
       6C 73 2F 32 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045CE8 70 61 6E 65 6521*  F22_020: db "panels/22_020.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045CFC 70 61 6E 65 6522*  F22_032: db "panels/22_032.rgba2",0
       6C 73 2F 32 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D10 70 61 6E 65 6523*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D24 70 61 6E 65 6524*  F22_044: db "panels/22_044.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D38 70 61 6E 65 6525*  F23_004: db "panels/23_004.rgba2",0
       6C 73 2F 32 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045D4C 70 61 6E 65 6526*  F23_020: db "panels/23_020.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045D60 70 61 6E 65 6527*  F23_032: db "panels/23_032.rgba2",0
       6C 73 2F 32 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045D74 70 61 6E 65 6528*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045D88 70 61 6E 65 6529*  F23_044: db "panels/23_044.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045D9C 70 61 6E 65 6530*  F24_004: db "panels/24_004.rgba2",0
       6C 73 2F 32 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045DB0 70 61 6E 65 6531*  F24_020: db "panels/24_020.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045DC4 70 61 6E 65 6532*  F24_032: db "panels/24_032.rgba2",0
       6C 73 2F 32 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045DD8 70 61 6E 65 6533*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045DEC 70 61 6E 65 6534*  F24_044: db "panels/24_044.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E00 70 61 6E 65 6535*  F40_004: db "panels/40_004.rgba2",0
       6C 73 2F 34 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E14 70 61 6E 65 6536*  F40_020: db "panels/40_020.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E28 70 61 6E 65 6537*  F40_032: db "panels/40_032.rgba2",0
       6C 73 2F 34 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E3C 70 61 6E 65 6538*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E50 70 61 6E 65 6539*  F40_044: db "panels/40_044.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E64 70 61 6E 65 6540*  F41_004: db "panels/41_004.rgba2",0
       6C 73 2F 34 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E78 70 61 6E 65 6541*  F41_020: db "panels/41_020.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E8C 70 61 6E 65 6542*  F41_032: db "panels/41_032.rgba2",0
       6C 73 2F 34 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045EA0 70 61 6E 65 6543*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045EB4 70 61 6E 65 6544*  F41_044: db "panels/41_044.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045EC8 70 61 6E 65 6545*  F42_004: db "panels/42_004.rgba2",0
       6C 73 2F 34 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045EDC 70 61 6E 65 6546*  F42_020: db "panels/42_020.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045EF0 70 61 6E 65 6547*  F42_032: db "panels/42_032.rgba2",0
       6C 73 2F 34 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F04 70 61 6E 65 6548*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F18 70 61 6E 65 6549*  F42_044: db "panels/42_044.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F2C 70 61 6E 65 6550*  F43_004: db "panels/43_004.rgba2",0
       6C 73 2F 34 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F40 70 61 6E 65 6551*  F43_020: db "panels/43_020.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F54 70 61 6E 65 6552*  F43_032: db "panels/43_032.rgba2",0
       6C 73 2F 34 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F68 70 61 6E 65 6553*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F7C 70 61 6E 65 6554*  F43_044: db "panels/43_044.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F90 70 61 6E 65 6555*  F44_004: db "panels/44_004.rgba2",0
       6C 73 2F 34 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045FA4 70 61 6E 65 6556*  F44_020: db "panels/44_020.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045FB8 70 61 6E 65 6557*  F44_032: db "panels/44_032.rgba2",0
       6C 73 2F 34 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045FCC 70 61 6E 65 6558*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045FE0 70 61 6E 65 6559*  F44_044: db "panels/44_044.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045FF4 70 61 6E 65 6560*  F45_004: db "panels/45_004.rgba2",0
       6C 73 2F 34 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046008 70 61 6E 65 6561*  F45_020: db "panels/45_020.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04601C 70 61 6E 65 6562*  F45_032: db "panels/45_032.rgba2",0
       6C 73 2F 34 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046030 70 61 6E 65 6563*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046044 70 61 6E 65 6564*  F45_044: db "panels/45_044.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046058 70 61 6E 65 6565*  F46_004: db "panels/46_004.rgba2",0
       6C 73 2F 34 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04606C 70 61 6E 65 6566*  F46_020: db "panels/46_020.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046080 70 61 6E 65 6567*  F46_032: db "panels/46_032.rgba2",0
       6C 73 2F 34 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046094 70 61 6E 65 6568*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0460A8 70 61 6E 65 6569*  F46_044: db "panels/46_044.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0460BC 70 61 6E 65 6570*  F47_004: db "panels/47_004.rgba2",0
       6C 73 2F 34 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0460D0 70 61 6E 65 6571*  F47_020: db "panels/47_020.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0460E4 70 61 6E 65 6572*  F47_032: db "panels/47_032.rgba2",0
       6C 73 2F 34 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0460F8 70 61 6E 65 6573*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04610C 70 61 6E 65 6574*  F47_044: db "panels/47_044.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046120 70 61 6E 65 6575*  F48_004: db "panels/48_004.rgba2",0
       6C 73 2F 34 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046134 70 61 6E 65 6576*  F48_020: db "panels/48_020.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046148 70 61 6E 65 6577*  F48_032: db "panels/48_032.rgba2",0
       6C 73 2F 34 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04615C 70 61 6E 65 6578*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046170 70 61 6E 65 6579*  F48_044: db "panels/48_044.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046184 70 61 6E 65 6580*  F49_004: db "panels/49_004.rgba2",0
       6C 73 2F 34 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046198 70 61 6E 65 6581*  F49_020: db "panels/49_020.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0461AC 70 61 6E 65 6582*  F49_032: db "panels/49_032.rgba2",0
       6C 73 2F 34 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0461C0 70 61 6E 65 6583*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0461D4 70 61 6E 65 6584*  F49_044: db "panels/49_044.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0461E8 70 61 6E 65 6585*  F50_004: db "panels/50_004.rgba2",0
       6C 73 2F 35 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0461FC 70 61 6E 65 6586*  F50_020: db "panels/50_020.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046210 70 61 6E 65 6587*  F50_032: db "panels/50_032.rgba2",0
       6C 73 2F 35 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046224 70 61 6E 65 6588*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046238 70 61 6E 65 6589*  F50_044: db "panels/50_044.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04624C 70 61 6E 65 6590*  F51_004: db "panels/51_004.rgba2",0
       6C 73 2F 35 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046260 70 61 6E 65 6591*  F51_020: db "panels/51_020.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046274 70 61 6E 65 6592*  F51_032: db "panels/51_032.rgba2",0
       6C 73 2F 35 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046288 70 61 6E 65 6593*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04629C 70 61 6E 65 6594*  F51_044: db "panels/51_044.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0462B0 70 61 6E 65 6595*  F52_004: db "panels/52_004.rgba2",0
       6C 73 2F 35 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0462C4 70 61 6E 65 6596*  F52_020: db "panels/52_020.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0462D8 70 61 6E 65 6597*  F52_032: db "panels/52_032.rgba2",0
       6C 73 2F 35 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0462EC 70 61 6E 65 6598*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046300 70 61 6E 65 6599*  F52_044: db "panels/52_044.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046314             6600*  
046314             6601*  ; dws buffer ids:
046314             6602*  BUF_DW_6: equ 0x026D
046314             6603*  BUF_DW_7: equ 0x026E
046314             6604*  BUF_DW_8: equ 0x026F
046314             6605*  BUF_DW_9: equ 0x0270
046314             6606*  BUF_DW_10: equ 0x0271
046314             6607*  BUF_DW_11: equ 0x0272
046314             6608*  BUF_DW_12: equ 0x0273
046314             6609*  BUF_DW_13: equ 0x0274
046314             6610*  BUF_DW_14: equ 0x0275
046314             6611*  
046314             6612*  dws_num_panels: equ 9
046314             6613*  
046314             6614*  ; dws buffer id reverse lookup:
046314             6615*  dws_buffer_id_lut:
046314 6D 02 00    6616*  	dl BUF_DW_6
046317 6E 02 00    6617*  	dl BUF_DW_7
04631A 6F 02 00    6618*  	dl BUF_DW_8
04631D 70 02 00    6619*  	dl BUF_DW_9
046320 71 02 00    6620*  	dl BUF_DW_10
046323 72 02 00    6621*  	dl BUF_DW_11
046326 73 02 00    6622*  	dl BUF_DW_12
046329 74 02 00    6623*  	dl BUF_DW_13
04632C 75 02 00    6624*  	dl BUF_DW_14
04632F             6625*  
04632F             6626*  ; dws load routines jump table:
04632F             6627*  dws_load_panels_table:
04632F 4A 63 04    6628*  	dl ld_dw_6
046332 74 63 04    6629*  	dl ld_dw_7
046335 9E 63 04    6630*  	dl ld_dw_8
046338 C8 63 04    6631*  	dl ld_dw_9
04633B F2 63 04    6632*  	dl ld_dw_10
04633E 1C 64 04    6633*  	dl ld_dw_11
046341 46 64 04    6634*  	dl ld_dw_12
046344 70 64 04    6635*  	dl ld_dw_13
046347 9A 64 04    6636*  	dl ld_dw_14
04634A             6637*  
04634A             6638*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
04634A             6639*  
04634A             6640*  ld_dw_6:
04634A 21 C4 64 04 6641*  	ld hl,Fdw_6
04634E 22 C1 B7 04 6642*  	ld (cur_filename),hl
046352 11 CB C3 04 6643*  	ld de,filedata
046356 01 00 00 01 6644*  	ld bc,65536
04635A 3E 01       6645*  	ld a,mos_load
04635C 5B CF       6646*  	RST.LIL 08h
04635E 21 6D 02 00 6647*  	ld hl,BUF_DW_6
046362 01 40 01 00 6648*  	ld bc,320
046366 11 1E 00 00 6649*  	ld de,30
04636A DD 21 80 25 6650*  	ld ix,9600
       00          
04636F CD 3C B9 04 6651*  	call vdu_load_img
046373 C9          6652*  	ret
046374             6653*  
046374             6654*  ld_dw_7:
046374 21 D3 64 04 6655*  	ld hl,Fdw_7
046378 22 C1 B7 04 6656*  	ld (cur_filename),hl
04637C 11 CB C3 04 6657*  	ld de,filedata
046380 01 00 00 01 6658*  	ld bc,65536
046384 3E 01       6659*  	ld a,mos_load
046386 5B CF       6660*  	RST.LIL 08h
046388 21 6E 02 00 6661*  	ld hl,BUF_DW_7
04638C 01 40 01 00 6662*  	ld bc,320
046390 11 18 00 00 6663*  	ld de,24
046394 DD 21 00 1E 6664*  	ld ix,7680
       00          
046399 CD 3C B9 04 6665*  	call vdu_load_img
04639D C9          6666*  	ret
04639E             6667*  
04639E             6668*  ld_dw_8:
04639E 21 E2 64 04 6669*  	ld hl,Fdw_8
0463A2 22 C1 B7 04 6670*  	ld (cur_filename),hl
0463A6 11 CB C3 04 6671*  	ld de,filedata
0463AA 01 00 00 01 6672*  	ld bc,65536
0463AE 3E 01       6673*  	ld a,mos_load
0463B0 5B CF       6674*  	RST.LIL 08h
0463B2 21 6F 02 00 6675*  	ld hl,BUF_DW_8
0463B6 01 40 01 00 6676*  	ld bc,320
0463BA 11 12 00 00 6677*  	ld de,18
0463BE DD 21 80 16 6678*  	ld ix,5760
       00          
0463C3 CD 3C B9 04 6679*  	call vdu_load_img
0463C7 C9          6680*  	ret
0463C8             6681*  
0463C8             6682*  ld_dw_9:
0463C8 21 F1 64 04 6683*  	ld hl,Fdw_9
0463CC 22 C1 B7 04 6684*  	ld (cur_filename),hl
0463D0 11 CB C3 04 6685*  	ld de,filedata
0463D4 01 00 00 01 6686*  	ld bc,65536
0463D8 3E 01       6687*  	ld a,mos_load
0463DA 5B CF       6688*  	RST.LIL 08h
0463DC 21 70 02 00 6689*  	ld hl,BUF_DW_9
0463E0 01 40 01 00 6690*  	ld bc,320
0463E4 11 10 00 00 6691*  	ld de,16
0463E8 DD 21 00 14 6692*  	ld ix,5120
       00          
0463ED CD 3C B9 04 6693*  	call vdu_load_img
0463F1 C9          6694*  	ret
0463F2             6695*  
0463F2             6696*  ld_dw_10:
0463F2 21 00 65 04 6697*  	ld hl,Fdw_10
0463F6 22 C1 B7 04 6698*  	ld (cur_filename),hl
0463FA 11 CB C3 04 6699*  	ld de,filedata
0463FE 01 00 00 01 6700*  	ld bc,65536
046402 3E 01       6701*  	ld a,mos_load
046404 5B CF       6702*  	RST.LIL 08h
046406 21 71 02 00 6703*  	ld hl,BUF_DW_10
04640A 01 40 01 00 6704*  	ld bc,320
04640E 11 10 00 00 6705*  	ld de,16
046412 DD 21 00 14 6706*  	ld ix,5120
       00          
046417 CD 3C B9 04 6707*  	call vdu_load_img
04641B C9          6708*  	ret
04641C             6709*  
04641C             6710*  ld_dw_11:
04641C 21 10 65 04 6711*  	ld hl,Fdw_11
046420 22 C1 B7 04 6712*  	ld (cur_filename),hl
046424 11 CB C3 04 6713*  	ld de,filedata
046428 01 00 00 01 6714*  	ld bc,65536
04642C 3E 01       6715*  	ld a,mos_load
04642E 5B CF       6716*  	RST.LIL 08h
046430 21 72 02 00 6717*  	ld hl,BUF_DW_11
046434 01 40 01 00 6718*  	ld bc,320
046438 11 0E 00 00 6719*  	ld de,14
04643C DD 21 80 11 6720*  	ld ix,4480
       00          
046441 CD 3C B9 04 6721*  	call vdu_load_img
046445 C9          6722*  	ret
046446             6723*  
046446             6724*  ld_dw_12:
046446 21 20 65 04 6725*  	ld hl,Fdw_12
04644A 22 C1 B7 04 6726*  	ld (cur_filename),hl
04644E 11 CB C3 04 6727*  	ld de,filedata
046452 01 00 00 01 6728*  	ld bc,65536
046456 3E 01       6729*  	ld a,mos_load
046458 5B CF       6730*  	RST.LIL 08h
04645A 21 73 02 00 6731*  	ld hl,BUF_DW_12
04645E 01 40 01 00 6732*  	ld bc,320
046462 11 0C 00 00 6733*  	ld de,12
046466 DD 21 00 0F 6734*  	ld ix,3840
       00          
04646B CD 3C B9 04 6735*  	call vdu_load_img
04646F C9          6736*  	ret
046470             6737*  
046470             6738*  ld_dw_13:
046470 21 30 65 04 6739*  	ld hl,Fdw_13
046474 22 C1 B7 04 6740*  	ld (cur_filename),hl
046478 11 CB C3 04 6741*  	ld de,filedata
04647C 01 00 00 01 6742*  	ld bc,65536
046480 3E 01       6743*  	ld a,mos_load
046482 5B CF       6744*  	RST.LIL 08h
046484 21 74 02 00 6745*  	ld hl,BUF_DW_13
046488 01 40 01 00 6746*  	ld bc,320
04648C 11 0C 00 00 6747*  	ld de,12
046490 DD 21 00 0F 6748*  	ld ix,3840
       00          
046495 CD 3C B9 04 6749*  	call vdu_load_img
046499 C9          6750*  	ret
04649A             6751*  
04649A             6752*  ld_dw_14:
04649A 21 40 65 04 6753*  	ld hl,Fdw_14
04649E 22 C1 B7 04 6754*  	ld (cur_filename),hl
0464A2 11 CB C3 04 6755*  	ld de,filedata
0464A6 01 00 00 01 6756*  	ld bc,65536
0464AA 3E 01       6757*  	ld a,mos_load
0464AC 5B CF       6758*  	RST.LIL 08h
0464AE 21 75 02 00 6759*  	ld hl,BUF_DW_14
0464B2 01 40 01 00 6760*  	ld bc,320
0464B6 11 0C 00 00 6761*  	ld de,12
0464BA DD 21 00 0F 6762*  	ld ix,3840
       00          
0464BF CD 3C B9 04 6763*  	call vdu_load_img
0464C3 C9          6764*  	ret
0464C4             6765*  
0464C4             6766*  ; File name lookups:
0464C4 64 77 73 2F 6767*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
0464D3 64 77 73 2F 6768*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
0464E2 64 77 73 2F 6769*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
0464F1 64 77 73 2F 6770*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
046500 64 77 73 2F 6771*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
046510 64 77 73 2F 6772*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
046520 64 77 73 2F 6773*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
046530 64 77 73 2F 6774*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
046540 64 77 73 2F 6775*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
046550             0014   	include "src/asm/fonts_bmp.asm"
046550             0001*  ; plots a bitmap character to the screen
046550             0002*  ; inputs: a; ascii character to plot
046550             0003*  ;      bc,de = x,y screen coordinates in pixels
046550             0004*  ;      ix pointed at the font definition lut
046550             0005*  ; returns: bc as the next x coordinate to plot
046550             0006*  ;          pretty pixels which hopefully resemble readable text
046550             0007*  ; destroys: lotsa stuff
046550             0008*  font_bmp_plot:
046550             0009*  ; back up bc,de
046550 C5          0010*      push bc
046551 D5          0011*      push de
046552             0012*  ; get the buffer id of the character
046552 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
046554 06 06       0014*      ld b,6 ; six bytes per lookup record
046556 4F          0015*      ld c,a
046557 ED 4C       0016*      mlt bc
046559 DD 09       0017*      add ix,bc ; now ix points to the character definition
04655B DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
04655E CD 16 AA 04 0019*      call vdu_buff_select
046562             0020*  ; plot the character
046562 D1          0021*      pop de
046563 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
046566 83          0023*      add a,e ; add the y-coordinate
046567 5F          0024*      ld e,a
046568 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04656A 8A          0026*      adc a,d
04656B 57          0027*      ld d,a ; plot_y now correct for the character
04656C C1          0028*      pop bc ; plot_x
04656D C5          0029*      push bc ; we want it back after the plot
04656E CD E7 AB 04 0030*      call vdu_plot_bmp
046572             0031*  ; now set bc to the next x coordinate
046572 C1          0032*      pop bc
046573 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
046576 C6 02       0034*      add a,2 ; add a little padding between characters
046578 81          0035*      add a,c ; bump the original x-coordinate
046579 4F          0036*      ld c,a
04657A 3E 00       0037*      ld a,0 ; can't xor it because we need carry
04657C 88          0038*      adc a,b
04657D 47          0039*      ld b,a ; plot_x now correct for the next character
04657E C9          0040*      ret
04657F             0041*  
04657F             0042*  ; plots a zero-terminated string of bitmap characters to the screen
04657F             0043*  ; inputs: hl; pointer to the string
04657F             0044*  ;       bc,de = x,y screen coordinates in pixels
04657F             0045*  ;       ix pointed at the font definition lut
04657F             0046*  ; returns: bc as the next x coordinate to plot
04657F             0047*  ;          de as the next y coordinate to plot
04657F             0048*  ;          pretty pixels which hopefully resemble readable text
04657F             0049*  font_bmp_print:
04657F             0050*  @next_char:
04657F             0051*  ; fetch the next character in the string
04657F 7E          0052*      ld a,(hl) ; a has the ascii value of the character
046580 FE 00       0053*      cp 0 ; is it zero?
046582 C8          0054*      ret z ; if so, we're done
046583 23          0055*      inc hl ; point to the next character
046584 E5          0056*      push hl ; save the pointer
046585 D5          0057*      push de ; save our y-coordinate
046586 DD E5       0058*      push ix ; save the font lut pointer
046588 CD 50 65 04 0059*      call font_bmp_plot ; plot the character
04658C DD E1       0060*      pop ix ; restore the font lut pointer
04658E D1          0061*      pop de ; restore our y-coordinate
04658F E1          0062*      pop hl ; restore the pointer
046590 C3 7F 65 04 0063*      jp @next_char ; loop
046594             0015   	include "src/asm/maps.asm"
046594             0001*  ; ############# MAP CONSTANTS #############
046594             0002*  ; map tables addresses
046594             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
046594             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
046594             0005*  
046594             0006*  ; map status/type flags
046594             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
046594             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
046594             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
046594             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
046594             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
046594             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
046594             0013*  ; bits 1 and 0 are the render_type mask
046594             0014*  render_type_cube:   equ %00000000  ; 0
046594             0015*  render_type_floor:  equ %00000001  ; 1
046594             0016*  render_type_null:   equ %00000010  ; 2
046594             0017*  render_type_sprite: equ %00000011  ; 3
046594             0018*  
046594             0019*  ; HOW THE MAP TABLE IS LAID OUT
046594             0020*  ; map table field offset constants
046594             0021*  ; (mind the little-endianess)
046594             0022*  map_type_status: 	equ 0
046594             0023*  map_img_idx: 		equ 1
046594             0024*  map_obj_id: 		equ 2
046594             0025*  map_sprite_id: 		equ 3
046594             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
046594             0027*  
046594             0028*  ; gets cell info from a directional displacement from a given map location
046594             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
046594             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
046594             0031*  ; calls: get_dx_dy, get_cell_from_coords
046594             0032*  get_neighbor:
046594             0033*  ; modulo 4 on orientation
046594 7B          0034*      ld a,e
046595 E6 03       0035*      and 0x03
046597 5F          0036*      ld e,a
046598 CD C7 65 04 0037*  	call get_dx_dy ; d,e = dy,dx
04659C             0038*  ; add add b,c to the deltas in d,e
04659C 79          0039*  	ld a,c
04659D 83          0040*  	add a,e
04659E 5F          0041*  	ld e,a
04659F 78          0042*  	ld a,b
0465A0 82          0043*  	add a,d
0465A1 57          0044*  	ld d,a
0465A2             0045*  ; fall through to get_cell_from_coords
0465A2             0046*  
0465A2             0047*  ; gets cell info from a given x,y map coordinate
0465A2             0048*  ; inputs: ; d,e = map_y,map_x
0465A2             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
0465A2             0050*  get_cell_from_coords:
0465A2             0051*  ; modulo 16 on input coords
0465A2 7B          0052*  	ld a,e
0465A3 E6 0F       0053*  	and 0x0F
0465A5 5F          0054*  	ld e,a
0465A6 7A          0055*  	ld a,d
0465A7 E6 0F       0056*  	and 0x0F
0465A9 57          0057*  	ld d,a
0465AA             0058*  ; get cell_id from x,y
0465AA 42          0059*  	ld b,d ; y
0465AB 0E 10       0060*  	ld c,16 ; number of cells in a column
0465AD ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
0465AF 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0465B3 6B          0063*  	ld l,e ; x
0465B4 09          0064*  	add hl,bc ; hl = cell_id of x,y
0465B5 E5          0065*  	push hl ; so we can return cell_id
0465B6 4D          0066*  	ld c,l ; c = cell_id
0465B7             0067*  ; get address of cell record in cell_status table
0465B7 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0465B9 ED 4C       0069*  	mlt bc ; bc = offset to cell record
0465BB DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0465C0 DD 09       0071*  	add ix,bc ; ix = address of cell record
0465C2 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0465C5 C1          0073*  	pop bc ; bc = cell_id
0465C6 C9          0074*  	ret
0465C7             0075*  
0465C7             0076*  ; gets dx,dy from orientation and distance
0465C7             0077*  ; d = distance ; e = orientation
0465C7             0078*  ; returns: d,e = dy,dx
0465C7             0079*  get_dx_dy:
0465C7             0080*  ; make sure deu is zero
0465C7 E5          0081*  	push hl
0465C8 21 00 00 00 0082*  	ld hl,0
0465CC 62          0083*  	ld h,d
0465CD 6B          0084*  	ld l,e
0465CE EB          0085*  	ex de,hl
0465CF E1          0086*  	pop hl
0465D0             0087*  ; modulo 4 on orientation
0465D0 7B          0088*  	ld a,e
0465D1 E6 03       0089*  	and 0x03
0465D3 FE 00       0090*  	cp 0
0465D5 28 11       0091*  	jr z,@north
0465D7 FE 01       0092*  	cp 1
0465D9 28 14       0093*  	jr z,@east
0465DB FE 02       0094*  	cp 2
0465DD 28 14       0095*  	jr z,@south
0465DF FE 03       0096*  	cp 3
0465E1 28 13       0097*  	jr z,@west
0465E3             0098*  ; if none of those, return zeroes
0465E3 11 00 00 00 0099*  	ld de,0
0465E7 C9          0100*  	ret
0465E8             0101*  @north:
0465E8             0102*  ; x = 0, y = -d
0465E8 1E 00       0103*  	ld e,0
0465EA 7A          0104*  	ld a,d
0465EB ED 44       0105*  	neg
0465ED 57          0106*  	ld d,a
0465EE C9          0107*  	ret
0465EF             0108*  @east:
0465EF             0109*  ; x = d, y = 0
0465EF 5A          0110*  	ld e,d
0465F0 16 00       0111*  	ld d,0
0465F2 C9          0112*  	ret
0465F3             0113*  @south:
0465F3             0114*  ; x = 0, y = d
0465F3 1E 00       0115*  	ld e,0
0465F5 C9          0116*  	ret
0465F6             0117*  @west:
0465F6             0118*  ; x = -d, y = 0
0465F6 7A          0119*  	ld a,d
0465F7 ED 44       0120*  	neg
0465F9 5F          0121*  	ld e,a
0465FA 16 00       0122*  	ld d,0
0465FC C9          0123*  	ret
0465FD             0124*  
0465FD             0125*  ; gets the direction from a dy,dx pair
0465FD             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
0465FD             0127*  ; inputs: ; d = dy ; e = dx
0465FD             0128*  ; returns: a = orientation
0465FD             0129*  get_dir_from_dy_dx:
0465FD AF          0130*  	xor a
0465FE 93          0131*  	sub e
0465FF 28 06       0132*  	jr z,@not_x
046601 3E 01       0133*  	ld a,1
046603 F8          0134*  	ret m
046604 3E 03       0135*  	ld a,3
046606 C9          0136*  	ret
046607             0137*  @not_x:
046607 AF          0138*  	xor a
046608 92          0139*  	sub d
046609 C8          0140*  	ret z
04660A 3E 02       0141*  	ld a,2
04660C F8          0142*  	ret m
04660D AF          0143*  	xor a
04660E C9          0144*  	ret
04660F             0145*  
04660F             0146*  
04660F             0147*  ; translate camera relative x,y deltas to map x,y deltas
04660F             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
04660F             0149*  ; returns:	d = map_dy ; e = map_dx
04660F             0150*  trans_dx_dy:
04660F             0151*  ; modulo 4 on orientation
04660F E6 03       0152*  	and 0x03
046611 28 11       0153*  	jr z,@north
046613 FE 01       0154*  	cp 1 ; east
046615 28 12       0155*  	jr z,@east
046617 FE 02       0156*  	cp 2 ; south
046619 28 12       0157*  	jr z,@south
04661B FE 03       0158*  	cp 3 ; west
04661D 28 13       0159*  	jr z,@west
04661F             0160*  ; if none of those, return zeroes
04661F 11 00 00 00 0161*  	ld de,0
046623 C9          0162*  	ret
046624             0163*  @north: ; invert y axis, x unnchanged
046624 7A          0164*  	ld a,d
046625 ED 44       0165*  	neg
046627 57          0166*  	ld d,a
046628 C9          0167*  	ret
046629             0168*  @east: ; +x = +y, +y = +x
046629 7A          0169*  	ld a,d
04662A 53          0170*  	ld d,e
04662B 5F          0171*  	ld e,a
04662C C9          0172*  	ret
04662D             0173*  @south: ; invert x axis, y unchanged
04662D 7B          0174*  	ld a,e
04662E ED 44       0175*  	neg
046630 5F          0176*  	ld e,a
046631 C9          0177*  	ret
046632             0178*  @west: ; +x = -y, +y = -x
046632 7A          0179*  	ld a,d ; y
046633 ED 44       0180*  	neg ; -y
046635 53          0181*  	ld d,e ; x
046636 5F          0182*  	ld e,a ; -y
046637 7A          0183*  	ld a,d ; x
046638 ED 44       0184*  	neg ; -x
04663A 57          0185*  	ld d,a ; -x
04663B C9          0186*  	ret
04663C             0187*  
04663C             0188*  ; initialize map variables and load map file
04663C             0189*  ; inputs: none
04663C             0190*  map_init:
04663C AF          0191*  	xor a
04663D 32 B5 B2 04 0192*  	ld (cur_floor),a
046641 32 B6 B2 04 0193*  	ld (cur_room),a
046645             0194*  ; load room file
046645 CD 4A 66 04 0195*  	call map_load
046649             0196*  ; set player initial position
046649 C9          0197*  	ret
04664A             0198*  
04664A             0199*  ; load map file
04664A             0200*  ; inputs: cur_floor, cur_room set
04664A             0201*  map_load:
04664A 21 02 67 04 0202*  	ld hl,floors ; address of floors lut
04664E 3A B5 B2 04 0203*  	ld a,(cur_floor)
046652 5F          0204*  	ld e,a
046653 16 03       0205*  	ld d,3 ; three bytes per lookup record
046655 ED 5C       0206*  	mlt de ; de = offset to floor lut entry
046657 19          0207*  	add hl,de ; hl = address of floor lut entry
046658 ED 27       0208*  	ld hl,(hl) ; hl = base address of rooms for given floor
04665A 3A B6 B2 04 0209*  	ld a,(cur_room)
04665E 5F          0210*  	ld e,a
04665F 16 03       0211*  	ld d,3 ; three bytes per lookup record
046661 ED 5C       0212*  	mlt de ; de = offset to room lut entry
046663 19          0213*  	add hl,de ; hl = address of room lut entry
046664 ED 27       0214*  	ld hl,(hl) ; hl = address of room file name
046666 22 C1 B7 04 0215*  	ld (cur_filename),hl ; DEBUG
04666A 11 00 E0 B7 0216*  	ld de,cell_status ; address to load map data
04666E 01 00 20 00 0217*  	ld bc,8*1024 ; size of map data in bytes
046672 3E 01       0218*  	ld a,mos_load
046674 5B CF       0219*  	RST.LIL 08h
046676             0220*  ; DEBUG: print filename
046676 2A C1 B7 04 0221*  	ld hl,(cur_filename)
04667A CD AC AE 04 0222*  	call printString
04667E             0223*  ; load sprite data
04667E CD 83 66 04 0224*  	call map_init_sprites
046682 C9          0225*  	ret
046683             0226*  
046683             0227*  ; initialize sprite data for the current room into sprite table
046683             0228*  ; inputs: map data loaded
046683             0229*  map_init_sprites:
046683             0230*  ; initialize pointers
046683 DD 21 00 E0 0231*  	ld ix,cell_status
       B7          
046688 FD 21 00 FC 0232*  	ld iy,sprite_table_base
       B7          
04668D AF          0233*  	xor a
04668E 32 D2 66 04 0234*  	ld (@cell_id),a
046692             0235*  @loop:
046692 FD 22 1E 9F 0236*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
046697 DD 7E 03    0237*  	ld a,(ix+map_sprite_id)
04669A FE FF       0238*  	cp 255 ; check for no sprite
04669C 28 1B       0239*  	jr z,@next_cell
04669E FD 77 00    0240*  	ld (iy+sprite_id),a
0466A1 DD 7E 01    0241*  	ld a,(ix+map_img_idx)
0466A4 FD 77 01    0242*  	ld (iy+sprite_obj),a
0466A7 CD 78 A0 04 0243*  	call sprite_init_data
0466AB 3A D2 66 04 0244*  	ld a,(@cell_id)
0466AF CD D3 66 04 0245*  	call cell_id_to_coords ; d = map_y, e = map_x
0466B3 FD 1F 04    0246*  	ld (iy+sprite_x),de ; set sprite x,y
0466B6 ED 33 10    0247*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
0466B9             0248*  @next_cell:
0466B9 ED 32 04    0249*  	lea ix,ix+map_record_size ; advance pointer to next cell
0466BC             0250*  ; check if we've reached the end of the map data
0466BC 3A D2 66 04 0251*  	ld a,(@cell_id)
0466C0 3C          0252*  	inc a
0466C1 32 D2 66 04 0253*  	ld (@cell_id),a
0466C5 20 CB       0254*  	jr nz,@loop ; still more to do
0466C7             0255*  ; cleanup and return
0466C7 FD 21 00 FC 0256*  	ld iy,sprite_table_base ; reset pointer
       B7          
0466CC FD 22 1E 9F 0257*  	ld (sprite_table_pointer),iy
       04          
0466D1 C9          0258*  	ret
0466D2 00          0259*  @cell_id: db 0
0466D3             0260*  
0466D3             0261*  ; get the x,y map coordinates from a cell_id
0466D3             0262*  ; inputs: a = cell_id
0466D3             0263*  ; returns: a = cell_id, d = map_y, e = map_x
0466D3             0264*  cell_id_to_coords:
0466D3 F5          0265*  	push af	; Save the cell id
0466D4             0266*  ; Calculate the y coordinate by dividing the index by 16
0466D4 57          0267*  	ld d,a      ; Move index into d
0466D5 CB 3A       0268*  	srl d        ; Shift right once (d = d / 2)
0466D7 CB 3A       0269*  	srl d        ; Shift right again (d = d / 4)
0466D9 CB 3A       0270*  	srl d        ; Shift right again (d = d / 8)
0466DB CB 3A       0271*  	srl d        ; Shift right again (d = d / 16)
0466DD             0272*  ; Calculate the x coordinate by taking the index modulo 16
0466DD E6 0F       0273*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
0466DF 5F          0274*  	ld e,a      ; e is now the x coordinate
0466E0 F1          0275*  	pop af	; a is cell id
0466E1 C9          0276*  	ret
0466E2             0277*  
0466E2             0278*  ; get starting position based on the start flag
0466E2             0279*  ; inputs: none
0466E2             0280*  ; returns: a = cell_id, d = map_y, e = map_x
0466E2             0281*  get_start_pos:
0466E2 11 00 00 00 0282*  	ld de,0 ; initialize to 0,0 as a default
0466E6 DD 21 00 E0 0283*  	ld ix,cell_status ; ix points to the start of the map data
       B7          
0466EB AF          0284*  	xor a ; start at cell 0
0466EC             0285*  @loop:
0466EC F5          0286*  	push af ; save cell_id
0466ED DD 7E 00    0287*  	ld a,(ix+map_type_status) ; a is the cell status bitmmask
0466F0 E6 08       0288*  	and cell_is_start ; testing whether the cell start bit is lit
0466F2 28 06       0289*  	jr z,@not_start ; go to the next cell if not
0466F4 F1          0290*  	pop	af ; a is cell_id
0466F5 CD D3 66 04 0291*  	call cell_id_to_coords ; d = map_y, e = map_x
0466F9 C9          0292*  	ret
0466FA             0293*  @not_start:
0466FA F1          0294*  	pop	af ; a is cell_id
0466FB 3C          0295*  	inc a ; bump cell id
0466FC C8          0296*  	ret z ; if zero we've wrapped around so we return 0,0 in de and 0 in a as cell_id
0466FD ED 32 04    0297*  	lea ix,ix+map_record_size ; otherwise bump pointer to next map record
046700 18 EA       0298*  	jr @loop
046702             0299*  
046702             0300*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
046702             0301*  
046702             0302*  floors:
046702 05 67 04    0303*  	dl floor_00
046705             0304*  
046705             0305*  ; map room filename labels
046705             0306*  room_files:
046705             0307*  floor_00:
046705 0B 67 04    0308*  	dl room_00_0
046708 1D 67 04    0309*  	dl room_00_1
04670B             0310*  
04670B             0311*  ; map data filenames
04670B 6D 61 70 73 0312*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
04671D 6D 61 70 73 0313*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
04672F             0016   	include "src/asm/render.asm"
04672F             0001*  ; #### RENDERING SCRATCH VARIABLES ####
04672F             0002*  ; first three bytes of cell_status record in little-endian order
04672F             0003*  to_cell_status:
04672F             0004*  to_map_type_status: ds 1
046730             0005*  to_img_idx: ds 1
046731             0006*  to_obj_id: ds 1
046732             0007*  ; fourth byte of cell_status record
046732             0008*  to_sprite_id: ds 1
046733             0009*  
046733             0010*  to_poly_id: ds 1
046734             0011*  to_buffer_id: ds 3
046737             0012*  
046737             0013*  cur_cell_views: ds 3
04673A             0014*  
04673A             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
04673A             0016*  
04673A             0017*  ; render background as a prelude to rendering panels and sprites
04673A             0018*  ; hl is the buffer id, bc and de are plot_x and plot_y
04673A             0019*  render_background:
04673A             0020*  ; back up everything
04673A C5          0021*      push bc
04673B D5          0022*      push de
04673C E5          0023*      push hl
04673D             0024*  ; plot background
04673D AF          0025*      xor a ; color mode
04673E 0E 08       0026*      ld c,c_grey_dk ; color
046740 CD D7 A8 04 0027*      call vdu_gcol_fg
046744 01 00 00 00 0028*      ld bc,0 ; x0
046748 11 00 00 00 0029*      ld de,0 ; y0
04674C DD 21 3F 01 0030*      ld ix,319
       00          
046751 FD 21 50 00 0031*      ld iy,80
       00          
046756 CD 24 AC 04 0032*      call vdu_plot_rf
04675A AF          0033*      xor a ; color mode
04675B 0E 07       0034*      ld c,c_grey ; color
04675D CD D7 A8 04 0035*      call vdu_gcol_fg
046761 01 00 00 00 0036*      ld bc,0 ; x0
046765 11 50 00 00 0037*      ld de,80 ; y0
046769 DD 21 3F 01 0038*      ld ix,319
       00          
04676E FD 21 9F 00 0039*      ld iy,159
       00          
046773 CD 24 AC 04 0040*      call vdu_plot_rf
046777             0041*  ; plot the background
046777 E1          0042*      pop hl ; get back the buffer id
046778 CD 16 AA 04 0043*      call vdu_buff_select
04677C D1          0044*      pop de ; get back plot_y
04677D C1          0045*      pop bc ; get back plot_x
04677E CD E7 AB 04 0046*      call vdu_plot_bmp
046782 C9          0047*      ret
046783             0048*  
046783             0049*  ; render a 3D panel
046783             0050*  ; inputs: to_poly_id set, to_buffer_id set
046783             0051*  render_panel:
046783             0052*  ; make the bitmap buffer active
046783 2A 34 67 04 0053*      ld hl,(to_buffer_id)
046787 CD 16 AA 04 0054*      call vdu_buff_select
04678B             0055*  ; get the coordinates of the panel
04678B DD 21 87 69 0056*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
046790             0057*  ; get the panel's poly_id
046790 3A 33 67 04 0058*      ld a,(to_poly_id)
046794             0059*  ; multiply a by 6 to get the offset
046794 47          0060*      ld b,a
046795 0E 06       0061*      ld c,6
046797 ED 4C       0062*      mlt bc
046799             0063*  ; add the offset to the lookup table
046799 DD 09       0064*      add ix,bc
04679B             0065*  ; get the panel coordinates
04679B DD 07 00    0066*      ld bc,(ix) ; plot_x
04679E DD 17 03    0067*      ld de,(ix+3) ; plot_y
0467A1             0068*  ; plot that mofo and go home
0467A1 CD E7 AB 04 0069*      call vdu_plot_bmp
0467A5 C9          0070*      ret
0467A6             0071*  
0467A6             0072*  ; render a 3D sprite
0467A6             0073*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
0467A6             0074*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
0467A6             0075*  render_sprite:
0467A6             0076*  ; look up sprite_obj in sprite table
0467A6 FD 21 00 FC 0077*      ld iy,sprite_table_base
       B7          
0467AB 47          0078*      ld b,a ; sprite id
0467AC 0E 10       0079*      ld c,sprite_record_size
0467AE ED 4C       0080*      mlt bc
0467B0 FD 09       0081*      add iy,bc ; iy points to sprite record
0467B2 FD 22 1E 9F 0082*      ld (sprite_table_pointer),iy
       04          
0467B7             0083*  ; get sprite imgs lookup
0467B7 FD 7E 01    0084*      ld a,(iy+sprite_obj) ; a is sprite_obj
0467BA FD 21 78 6C 0085*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
0467BF 47          0086*      ld b,a
0467C0 0E 03       0087*      ld c,3 ; 3 bytes per record
0467C2 ED 4C       0088*      mlt bc
0467C4 FD 09       0089*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
0467C6 FD 37 00    0090*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
0467C9             0091*  ; convert to_poly_id to sprite_poly
0467C9 21 4B 6C 04 0092*      ld hl,sprite_polys_lookup
0467CD 3A 33 67 04 0093*      ld a,(to_poly_id)
0467D1 01 00 00 00 0094*      ld bc,0  ; make sure bcu and b are zero
0467D5 4F          0095*      ld c,a
0467D6 09          0096*      add hl,bc ; hl points to the sprite's poly id
0467D7             0097*  ; get the sprites image defs for the particular poly id
0467D7 7E          0098*      ld a,(hl)
0467D8 47          0099*      ld b,a
0467D9 0E 09       0100*      ld c,9  ; 9 bytes per record
0467DB ED 4C       0101*      mlt bc
0467DD FD 09       0102*      add iy,bc ; iy is the offset to the sprite's image def
0467DF             0103*  ; select buffer
0467DF FD 27 06    0104*      ld hl,(iy+6)
0467E2 CD 16 AA 04 0105*      call vdu_buff_select
0467E6             0106*  ; plot sprite
0467E6 FD 07 00    0107*      ld bc,(iy+0) ; plot_x
0467E9 FD 17 03    0108*      ld de,(iy+3) ; plot_y
0467EC CD E7 AB 04 0109*      call vdu_plot_bmp
0467F0 C9          0110*      ret
0467F1             0111*  
0467F1             0112*  ; render the object in a given cell and poly_id
0467F1             0113*  ; inputs: to_poly_id set, d,e are the cell coords
0467F1             0114*  render_cell:
0467F1             0115*  ; get the cell to render's cell_status data and store it in scratch
0467F1 CD A2 65 04 0116*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
0467F5 DD 27 00    0117*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
0467F8 22 2F 67 04 0118*      ld (to_cell_status),hl
0467FC             0119*  ; get sprite_id from cell_status lut
0467FC DD 7E 03    0120*      ld a,(ix+map_sprite_id)
0467FF FE FF       0121*      cp 255 ; value if no sprite present
046801 C2 A6 67 04 0122*      jp nz,render_sprite
046805             0123*  ; get cell's render_type
046805 7D          0124*      ld a,l ; map_type_status
046806 E6 02       0125*      and 2 ; mask off everything but lowest two bits
046808 28 02       0126*      jr z,@cube ; render_type_cube is 0
04680A 18 32       0127*      jr @nodraw ; placeholder for future implementation TODO
04680C             0128*  @cube:
04680C             0129*      ; get map_img_idx from cell_status lut
04680C 3A 30 67 04 0130*      ld a,(to_img_idx)
046810 FE FF       0131*      cp 255 ; value for cell with nothing to draw
046812 28 2A       0132*      jr z,@nodraw
046814             0133*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
046814 21 C2 6A 04 0134*      ld hl,cube_img_idx_lookup
046818 47          0135*      ld b,a
046819 0E 03       0136*      ld c,3 ; three bytes per record
04681B ED 4C       0137*      mlt bc
04681D 09          0138*      add hl,bc ; hl points to the cube's base buffer id
04681E ED 27       0139*      ld hl,(hl) ; hl is the base buffer id
046820 EB          0140*      ex de,hl ; stash the base buffer id in de for later
046821 21 95 6A 04 0141*      ld hl,cube_poly_idx_lookup
046825 3A 33 67 04 0142*      ld a,(to_poly_id)
046829 01 00 00 00 0143*      ld bc,0 ; make sure bcu is zero
04682D 4F          0144*      ld c,a
04682E 09          0145*      add hl,bc ; hl is the buffer id index address
04682F 7E          0146*      ld a,(hl) ; a is the buffer id index value
046830 21 00 00 00 0147*      ld hl,0 ; make sure hlu is zero
046834 6F          0148*      ld l,a ; hl is the buffer id index value
046835 19          0149*      add hl,de ; hl is the buffer id
046836 22 34 67 04 0150*      ld (to_buffer_id),hl
04683A C3 83 67 04 0151*      jp render_panel
04683E             0152*  @nodraw:
04683E C9          0153*      ret
04683F             0154*  
04683F             0155*  ; render a full 3d scene
04683F             0156*  ; inputs: cur_x, cur_y, orientation set
04683F             0157*  ; outputs: pretty pictures
04683F             0158*  ; destroys: everything
04683F             0159*  render_scene:
04683F             0160*  ; clear the screen
04683F CD 3A 67 04 0161*      call render_background
046843             0162*  ; get current map position and camera orientation
046843 ED 5B BB B2 0163*      ld de,(cur_x) ; d,e = cur_y,x
       04          
046848 CD A2 65 04 0164*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04684C             0165*  ; get cell_views address for this cell and orientation
04684C 3A BA B2 04 0166*      ld a,(orientation)
046850 5F          0167*      ld e,a
046851 16 06       0168*      ld d,6 ; 6 bytes per orientation
046853 ED 5C       0169*      mlt de ; de = orientation offset
046855 EB          0170*      ex de,hl ; hl = orientation offset
046856 06 18       0171*      ld b,24 ; 24 bytes per cell in cell_views lut
046858 ED 4C       0172*      mlt bc ; bc = offset from base address of cell_views lut
04685A 09          0173*      add hl,bc ; hl = total offset from cell_views base address
04685B EB          0174*      ex de,hl ; becaue we can't add iy to hl
04685C FD 21 00 E4 0175*      ld iy,cell_views ; base address of cell_views lut
       B7          
046861 FD 19       0176*      add iy,de ; iy = cell_views address
046863 FD 22 37 67 0177*      ld (cur_cell_views),iy
       04          
046868             0178*  ; cycle through the cell views masks and render the appropriate objects
046868 01 00 46 28 0179*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04686C AF          0180*      xor a ; poly_id
04686D 32 33 67 04 0181*      ld (to_poly_id),a
046871             0182*  @loop:
046871 ED 43 7D 68 0183*      ld (@bit_iy+2),bc
       04          
046876 FD 2A 37 67 0184*      ld iy,(cur_cell_views)
       04          
04687B             0185*  @bit_iy:
04687B FD CB 00 46 0186*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04687F 28 21       0187*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
046881             0188*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
046881 3A 33 67 04 0189*      ld a,(to_poly_id)
046885 4F          0190*      ld c,a ; poly_id
046886 3A BA B2 04 0191*      ld a,(orientation)
04688A CD 54 69 04 0192*      call get_polys_deltas ; d,e = y,x deltas
04688E 3A BB B2 04 0193*      ld a,(cur_x)
046892 83          0194*      add a,e
046893 5F          0195*      ld e,a
046894 3A BC B2 04 0196*      ld a,(cur_y)
046898 82          0197*      add a,d
046899 57          0198*      ld d,a
04689A 3A 33 67 04 0199*      ld a,(to_poly_id)
04689E CD F1 67 04 0200*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
0468A2             0201*  @next_poly:
0468A2 ED 4B 7D 68 0202*      ld bc,(@bit_iy+2)
       04          
0468A7 3A 33 67 04 0203*      ld a,(to_poly_id)
0468AB 3C          0204*      inc a ; a is next poly_id
0468AC 32 33 67 04 0205*      ld (to_poly_id),a
0468B0 FE 2D       0206*      cp num_polys
0468B2 28 0D       0207*      jr z,@end
0468B4 3E 08       0208*      ld a,8
0468B6 80          0209*      add a,b
0468B7 47          0210*      ld b,a ; bit tested codes to 0x46 + b/8
0468B8 FE 86       0211*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
0468BA 20 B5       0212*      jr nz,@loop
0468BC 06 46       0213*      ld b,0x46
0468BE 0C          0214*      inc c ; iy address offset
0468BF 18 B0       0215*      jr @loop
0468C1             0216*  @end:
0468C1             0217*  ; draw the graphic portions of the ui
0468C1 21 01 20 00 0218*  	ld hl,BUF_UI_LOWER_PANEL
0468C5 CD 16 AA 04 0219*      call vdu_buff_select
0468C9 01 00 00 00 0220*  	ld bc,0 ; x
0468CD 11 A0 00 00 0221*  	ld de,160 ; y
0468D1 CD E7 AB 04 0222*  	call vdu_plot_bmp
0468D5             0223*  
0468D5 2A D6 B2 04 0224*      ld hl,(plyr_wpn_ui_lg)
0468D9 ED 5B E8 B2 0225*      ld de,(plyr_wpn_anim_fr)
       04          
0468DE 19          0226*      add hl,de
0468DF CD 16 AA 04 0227*      call vdu_buff_select
0468E3 01 80 00 00 0228*      ld bc,128 ; x
0468E7 11 60 00 00 0229*      ld de,96 ; y
0468EB CD E7 AB 04 0230*      call vdu_plot_bmp
0468EF             0231*  
0468EF 2A D3 B2 04 0232*      ld hl,(plyr_wpn_ui_sm)
0468F3 CD 16 AA 04 0233*      call vdu_buff_select
0468F7 01 0A 01 00 0234*      ld bc,266 ; x
0468FB 11 B2 00 00 0235*      ld de,178 ; y
0468FF CD E7 AB 04 0236*      call vdu_plot_bmp
046903             0237*  
046903             0238*  ; draw the text portions of the ui
046903 0E 16       0239*      ld c,22 ; x
046905 06 03       0240*      ld b,3 ; y
046907 CD EA A9 04 0241*      call vdu_move_cursor
04690B 2A EB B2 04 0242*      ld hl,(plyr_ammo)
04690F CD FA AE 04 0243*      call printDec
046913             0244*  
046913 0E 11       0245*      ld c,17 ; x
046915 06 03       0246*      ld b,3 ; y
046917 CD EA A9 04 0247*      call vdu_move_cursor
04691B 2A AC B2 04 0248*      ld hl,(plyr_health)
04691F CD FA AE 04 0249*      call printDec
046923             0250*  
046923 0E 07       0251*      ld c,7; x
046925 06 03       0252*      ld b,3 ; y
046927 CD EA A9 04 0253*      call vdu_move_cursor
04692B 2A B2 B2 04 0254*      ld hl,(plyr_lives)
04692F CD FA AE 04 0255*      call printDec
046933             0256*  
046933 0E 03       0257*      ld c,3 ; x
046935 06 03       0258*      ld b,3 ; y
046937 CD EA A9 04 0259*      call vdu_move_cursor
04693B 2A A9 B2 04 0260*      ld hl,(plyr_score)
04693F CD FA AE 04 0261*      call printDec
046943             0262*  
046943 0E 01       0263*      ld c,1 ; x
046945 06 03       0264*      ld b,3 ; y
046947 CD EA A9 04 0265*      call vdu_move_cursor
04694B 3A B5 B2 04 0266*      ld a,(cur_floor)
04694F CD DC AE 04 0267*      call printHex8
046953             0268*  
046953             0269*  ; ; DEBUG
046953             0270*  ;     ld c,1 ; x
046953             0271*  ;     ld b,7 ; y
046953             0272*  ;     call vdu_move_cursor
046953             0273*  ;     ld hl,sprite_new_x
046953             0274*  ;     ld a,3
046953             0275*  ;     call dumpMemoryHex
046953             0276*  
046953             0277*  ;     ld c,1 ; x
046953             0278*  ;     ld b,8 ; y
046953             0279*  ;     call vdu_move_cursor
046953             0280*  ;     ld hl,cur_x
046953             0281*  ;     ld a,3
046953             0282*  ;     call dumpMemoryHex
046953             0283*  ; ; END DEBUG
046953             0284*  
046953             0285*  ; all done
046953 C9          0286*      ret
046954             0287*  
046954             0288*  ; get the map coordinates deltas for a given orientation and poly_id
046954             0289*  ; inputs: a is the orientation, c is the poly_id
046954             0290*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
046954             0291*  get_polys_deltas:
046954             0292*  ; get the base address of the orientation-specific deltas lookup table
046954 FE 00       0293*      cp 0
046956 28 11       0294*      jr z,@orientation_0
046958 FE 01       0295*      cp 1
04695A 28 13       0296*      jr z,@orientation_1
04695C FE 02       0297*      cp 2
04695E 28 15       0298*      jr z,@orientation_2
046960 FE 03       0299*      cp 3
046962 28 17       0300*      jr z,@orientation_3
046964             0301*  ; return zeros if not found
046964 11 00 00 00 0302*      ld de,0
046968 C9          0303*      ret
046969             0304*  @orientation_0: ; north
046969 21 E3 6A 04 0305*      ld hl,polys_map_deltas_0
04696D 18 10       0306*      jr @get_deltas
04696F             0307*  @orientation_1: ; east
04696F 21 3D 6B 04 0308*      ld hl,polys_map_deltas_1
046973 18 0A       0309*      jr @get_deltas
046975             0310*  @orientation_2: ; south
046975 21 97 6B 04 0311*      ld hl,polys_map_deltas_2
046979 18 04       0312*      jr @get_deltas
04697B             0313*  @orientation_3: ; west
04697B 21 F1 6B 04 0314*      ld hl,polys_map_deltas_3
04697F             0315*  @get_deltas:
04697F 06 02       0316*      ld b,2 ; 2 bytes per record
046981 ED 4C       0317*      mlt bc ; poly_id * 2
046983 09          0318*      add hl,bc ; hl points to the deltas
046984 ED 17       0319*      ld de,(hl) ;d,e = dy,dx
046986 C9          0320*      ret
046987             0017   	include "src/asm/polys.asm"
046987             0001*  num_polys: equ 45
046987             0002*  
046987             0003*  polys_lookup_plot:
046987             0004*  ;	   plot_x,  plot_y:
046987 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
04698D 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
046993 47 00 00 3E 0007*  	dl 0x000047,0x00003E ; poly_id:2 02
       00 00       
046999 6A 00 00 3E 0008*  	dl 0x00006A,0x00003E ; poly_id:3 03
       00 00       
04699F 8E 00 00 3E 0009*  	dl 0x00008E,0x00003E ; poly_id:4 04
       00 00       
0469A5 B1 00 00 3E 0010*  	dl 0x0000B1,0x00003E ; poly_id:5 05
       00 00       
0469AB D5 00 00 3E 0011*  	dl 0x0000D5,0x00003E ; poly_id:6 06
       00 00       
0469B1 F8 00 00 3E 0012*  	dl 0x0000F8,0x00003E ; poly_id:7 07
       00 00       
0469B7 1C 01 00 3E 0013*  	dl 0x00011C,0x00003E ; poly_id:8 08
       00 00       
0469BD 00 00 00 39 0014*  	dl 0x000000,0x000039 ; poly_id:9 09
       00 00       
0469C3 2E 00 00 39 0015*  	dl 0x00002E,0x000039 ; poly_id:10 0A
       00 00       
0469C9 5B 00 00 39 0016*  	dl 0x00005B,0x000039 ; poly_id:11 0B
       00 00       
0469CF 89 00 00 39 0017*  	dl 0x000089,0x000039 ; poly_id:12 0C
       00 00       
0469D5 B1 00 00 39 0018*  	dl 0x0000B1,0x000039 ; poly_id:13 0D
       00 00       
0469DB D5 00 00 39 0019*  	dl 0x0000D5,0x000039 ; poly_id:14 0E
       00 00       
0469E1 F8 00 00 39 0020*  	dl 0x0000F8,0x000039 ; poly_id:15 0F
       00 00       
0469E7 1C 01 00 39 0021*  	dl 0x00011C,0x000039 ; poly_id:16 10
       00 00       
0469ED 00 00 00 39 0022*  	dl 0x000000,0x000039 ; poly_id:17 11
       00 00       
0469F3 2E 00 00 39 0023*  	dl 0x00002E,0x000039 ; poly_id:18 12
       00 00       
0469F9 5B 00 00 39 0024*  	dl 0x00005B,0x000039 ; poly_id:19 13
       00 00       
0469FF 89 00 00 39 0025*  	dl 0x000089,0x000039 ; poly_id:20 14
       00 00       
046A05 B6 00 00 39 0026*  	dl 0x0000B6,0x000039 ; poly_id:21 15
       00 00       
046A0B E4 00 00 39 0027*  	dl 0x0000E4,0x000039 ; poly_id:22 16
       00 00       
046A11 11 01 00 39 0028*  	dl 0x000111,0x000039 ; poly_id:23 17
       00 00       
046A17 00 00 00 30 0029*  	dl 0x000000,0x000030 ; poly_id:24 18
       00 00       
046A1D 3F 00 00 30 0030*  	dl 0x00003F,0x000030 ; poly_id:25 19
       00 00       
046A23 80 00 00 30 0031*  	dl 0x000080,0x000030 ; poly_id:26 1A
       00 00       
046A29 B6 00 00 30 0032*  	dl 0x0000B6,0x000030 ; poly_id:27 1B
       00 00       
046A2F E4 00 00 30 0033*  	dl 0x0000E4,0x000030 ; poly_id:28 1C
       00 00       
046A35 11 01 00 30 0034*  	dl 0x000111,0x000030 ; poly_id:29 1D
       00 00       
046A3B 00 00 00 30 0035*  	dl 0x000000,0x000030 ; poly_id:30 1E
       00 00       
046A41 3F 00 00 30 0036*  	dl 0x00003F,0x000030 ; poly_id:31 1F
       00 00       
046A47 80 00 00 30 0037*  	dl 0x000080,0x000030 ; poly_id:32 20
       00 00       
046A4D C0 00 00 30 0038*  	dl 0x0000C0,0x000030 ; poly_id:33 21
       00 00       
046A53 00 01 00 30 0039*  	dl 0x000100,0x000030 ; poly_id:34 22
       00 00       
046A59 00 00 00 1A 0040*  	dl 0x000000,0x00001A ; poly_id:35 23
       00 00       
046A5F 6A 00 00 1A 0041*  	dl 0x00006A,0x00001A ; poly_id:36 24
       00 00       
046A65 C0 00 00 1A 0042*  	dl 0x0000C0,0x00001A ; poly_id:37 25
       00 00       
046A6B 00 01 00 1A 0043*  	dl 0x000100,0x00001A ; poly_id:38 26
       00 00       
046A71 00 00 00 1A 0044*  	dl 0x000000,0x00001A ; poly_id:39 27
       00 00       
046A77 6A 00 00 1A 0045*  	dl 0x00006A,0x00001A ; poly_id:40 28
       00 00       
046A7D D5 00 00 1A 0046*  	dl 0x0000D5,0x00001A ; poly_id:41 29
       00 00       
046A83 00 00 00 00 0047*  	dl 0x000000,0x000000 ; poly_id:42 2A
       00 00       
046A89 D5 00 00 00 0048*  	dl 0x0000D5,0x000000 ; poly_id:43 2B
       00 00       
046A8F 00 00 00 00 0049*  	dl 0x000000,0x000000 ; poly_id:44 2C
       00 00       
046A95             0050*  
046A95             0051*  cube_poly_idx_lookup:
046A95             0052*  ;	 img_idx,  poly_id
046A95 00          0053*  	db 0 ; poly_id:0 0
046A96 00          0054*  	db 0 ; poly_id:1 1
046A97 00          0055*  	db 0 ; poly_id:2 2
046A98 00          0056*  	db 0 ; poly_id:3 3
046A99 00          0057*  	db 0 ; poly_id:4 4
046A9A 00          0058*  	db 0 ; poly_id:5 5
046A9B 00          0059*  	db 0 ; poly_id:6 6
046A9C 00          0060*  	db 0 ; poly_id:7 7
046A9D 00          0061*  	db 0 ; poly_id:8 8
046A9E 01          0062*  	db 1 ; poly_id:9 9
046A9F 02          0063*  	db 2 ; poly_id:10 10
046AA0 03          0064*  	db 3 ; poly_id:11 11
046AA1 04          0065*  	db 4 ; poly_id:12 12
046AA2 05          0066*  	db 5 ; poly_id:13 13
046AA3 06          0067*  	db 6 ; poly_id:14 14
046AA4 07          0068*  	db 7 ; poly_id:15 15
046AA5 08          0069*  	db 8 ; poly_id:16 16
046AA6 09          0070*  	db 9 ; poly_id:17 17
046AA7 09          0071*  	db 9 ; poly_id:18 18
046AA8 09          0072*  	db 9 ; poly_id:19 19
046AA9 09          0073*  	db 9 ; poly_id:20 20
046AAA 09          0074*  	db 9 ; poly_id:21 21
046AAB 09          0075*  	db 9 ; poly_id:22 22
046AAC 09          0076*  	db 9 ; poly_id:23 23
046AAD 0A          0077*  	db 10 ; poly_id:24 24
046AAE 0B          0078*  	db 11 ; poly_id:25 25
046AAF 0C          0079*  	db 12 ; poly_id:26 26
046AB0 0D          0080*  	db 13 ; poly_id:27 27
046AB1 0E          0081*  	db 14 ; poly_id:28 28
046AB2 0F          0082*  	db 15 ; poly_id:29 29
046AB3 10          0083*  	db 16 ; poly_id:30 30
046AB4 10          0084*  	db 16 ; poly_id:31 31
046AB5 10          0085*  	db 16 ; poly_id:32 32
046AB6 10          0086*  	db 16 ; poly_id:33 33
046AB7 10          0087*  	db 16 ; poly_id:34 34
046AB8 11          0088*  	db 17 ; poly_id:35 35
046AB9 12          0089*  	db 18 ; poly_id:36 36
046ABA 13          0090*  	db 19 ; poly_id:37 37
046ABB 14          0091*  	db 20 ; poly_id:38 38
046ABC 15          0092*  	db 21 ; poly_id:39 39
046ABD 15          0093*  	db 21 ; poly_id:40 40
046ABE 15          0094*  	db 21 ; poly_id:41 41
046ABF 16          0095*  	db 22 ; poly_id:42 42
046AC0 17          0096*  	db 23 ; poly_id:43 43
046AC1 18          0097*  	db 24 ; poly_id:44 44
046AC2             0098*  
046AC2             0099*  cube_img_idx_lookup:
046AC2             0100*  ;	 img_idx,  bank_id,  obj_id,  tile_name
046AC2 00 01 00    0101*  	dl BUF_10_004 ; idx:0 render_obj_id:10 LIGHT GREY WALL
046AC5 19 01 00    0102*  	dl BUF_11_004 ; idx:1 render_obj_id:11 JAIL CELL
046AC8 32 01 00    0103*  	dl BUF_12_004 ; idx:2 render_obj_id:12 STONE ARCH BIRD
046ACB 4B 01 00    0104*  	dl BUF_13_004 ; idx:3 render_obj_id:13 DARK GREY WALL
046ACE 64 01 00    0105*  	dl BUF_14_004 ; idx:4 render_obj_id:14 WOOD WALL
046AD1 7D 01 00    0106*  	dl BUF_15_004 ; idx:5 render_obj_id:15 HANGING FLAG
046AD4 96 01 00    0107*  	dl BUF_16_004 ; idx:6 render_obj_id:16 WOOD EAGLE
046AD7 AF 01 00    0108*  	dl BUF_17_004 ; idx:7 render_obj_id:17 BLUE WALL
046ADA C8 01 00    0109*  	dl BUF_57_004 ; idx:8 render_obj_id:57 REGULAR DOOR
046ADD E1 01 00    0110*  	dl BUF_58_004 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
046AE0 FA 01 00    0111*  	dl BUF_59_004 ; idx:10 render_obj_id:59 ELEVATOR DOOR
046AE3             0112*  
046AE3             0113*  ; map_delta_x,  map_delta_y
046AE3             0114*  polys_map_deltas_0: ; north orientation
046AE3 FC FB       0115*  	db 0xFC,0xFB ; poly_id:0 00
046AE5 FD FB       0116*  	db 0xFD,0xFB ; poly_id:1 01
046AE7 FE FB       0117*  	db 0xFE,0xFB ; poly_id:2 02
046AE9 FF FB       0118*  	db 0xFF,0xFB ; poly_id:3 03
046AEB 00 FB       0119*  	db 0x00,0xFB ; poly_id:4 04
046AED 01 FB       0120*  	db 0x01,0xFB ; poly_id:5 05
046AEF 02 FB       0121*  	db 0x02,0xFB ; poly_id:6 06
046AF1 03 FB       0122*  	db 0x03,0xFB ; poly_id:7 07
046AF3 04 FB       0123*  	db 0x04,0xFB ; poly_id:8 08
046AF5 FC FC       0124*  	db 0xFC,0xFC ; poly_id:9 09
046AF7 FD FC       0125*  	db 0xFD,0xFC ; poly_id:10 0A
046AF9 FE FC       0126*  	db 0xFE,0xFC ; poly_id:11 0B
046AFB FF FC       0127*  	db 0xFF,0xFC ; poly_id:12 0C
046AFD 01 FC       0128*  	db 0x01,0xFC ; poly_id:13 0D
046AFF 02 FC       0129*  	db 0x02,0xFC ; poly_id:14 0E
046B01 03 FC       0130*  	db 0x03,0xFC ; poly_id:15 0F
046B03 04 FC       0131*  	db 0x04,0xFC ; poly_id:16 10
046B05 FD FC       0132*  	db 0xFD,0xFC ; poly_id:17 11
046B07 FE FC       0133*  	db 0xFE,0xFC ; poly_id:18 12
046B09 FF FC       0134*  	db 0xFF,0xFC ; poly_id:19 13
046B0B 00 FC       0135*  	db 0x00,0xFC ; poly_id:20 14
046B0D 01 FC       0136*  	db 0x01,0xFC ; poly_id:21 15
046B0F 02 FC       0137*  	db 0x02,0xFC ; poly_id:22 16
046B11 03 FC       0138*  	db 0x03,0xFC ; poly_id:23 17
046B13 FD FD       0139*  	db 0xFD,0xFD ; poly_id:24 18
046B15 FE FD       0140*  	db 0xFE,0xFD ; poly_id:25 19
046B17 FF FD       0141*  	db 0xFF,0xFD ; poly_id:26 1A
046B19 01 FD       0142*  	db 0x01,0xFD ; poly_id:27 1B
046B1B 02 FD       0143*  	db 0x02,0xFD ; poly_id:28 1C
046B1D 03 FD       0144*  	db 0x03,0xFD ; poly_id:29 1D
046B1F FE FD       0145*  	db 0xFE,0xFD ; poly_id:30 1E
046B21 FF FD       0146*  	db 0xFF,0xFD ; poly_id:31 1F
046B23 00 FD       0147*  	db 0x00,0xFD ; poly_id:32 20
046B25 01 FD       0148*  	db 0x01,0xFD ; poly_id:33 21
046B27 02 FD       0149*  	db 0x02,0xFD ; poly_id:34 22
046B29 FE FE       0150*  	db 0xFE,0xFE ; poly_id:35 23
046B2B FF FE       0151*  	db 0xFF,0xFE ; poly_id:36 24
046B2D 01 FE       0152*  	db 0x01,0xFE ; poly_id:37 25
046B2F 02 FE       0153*  	db 0x02,0xFE ; poly_id:38 26
046B31 FF FE       0154*  	db 0xFF,0xFE ; poly_id:39 27
046B33 00 FE       0155*  	db 0x00,0xFE ; poly_id:40 28
046B35 01 FE       0156*  	db 0x01,0xFE ; poly_id:41 29
046B37 FF FF       0157*  	db 0xFF,0xFF ; poly_id:42 2A
046B39 01 FF       0158*  	db 0x01,0xFF ; poly_id:43 2B
046B3B 00 FF       0159*  	db 0x00,0xFF ; poly_id:44 2C
046B3D             0160*  
046B3D             0161*  polys_map_deltas_1: ; east orientation
046B3D 05 FC       0162*  	db 0x05,0xFC ; poly_id:0 00
046B3F 05 FD       0163*  	db 0x05,0xFD ; poly_id:1 01
046B41 05 FE       0164*  	db 0x05,0xFE ; poly_id:2 02
046B43 05 FF       0165*  	db 0x05,0xFF ; poly_id:3 03
046B45 05 00       0166*  	db 0x05,0x00 ; poly_id:4 04
046B47 05 01       0167*  	db 0x05,0x01 ; poly_id:5 05
046B49 05 02       0168*  	db 0x05,0x02 ; poly_id:6 06
046B4B 05 03       0169*  	db 0x05,0x03 ; poly_id:7 07
046B4D 05 04       0170*  	db 0x05,0x04 ; poly_id:8 08
046B4F 04 FC       0171*  	db 0x04,0xFC ; poly_id:9 09
046B51 04 FD       0172*  	db 0x04,0xFD ; poly_id:10 0A
046B53 04 FE       0173*  	db 0x04,0xFE ; poly_id:11 0B
046B55 04 FF       0174*  	db 0x04,0xFF ; poly_id:12 0C
046B57 04 01       0175*  	db 0x04,0x01 ; poly_id:13 0D
046B59 04 02       0176*  	db 0x04,0x02 ; poly_id:14 0E
046B5B 04 03       0177*  	db 0x04,0x03 ; poly_id:15 0F
046B5D 04 04       0178*  	db 0x04,0x04 ; poly_id:16 10
046B5F 04 FD       0179*  	db 0x04,0xFD ; poly_id:17 11
046B61 04 FE       0180*  	db 0x04,0xFE ; poly_id:18 12
046B63 04 FF       0181*  	db 0x04,0xFF ; poly_id:19 13
046B65 04 00       0182*  	db 0x04,0x00 ; poly_id:20 14
046B67 04 01       0183*  	db 0x04,0x01 ; poly_id:21 15
046B69 04 02       0184*  	db 0x04,0x02 ; poly_id:22 16
046B6B 04 03       0185*  	db 0x04,0x03 ; poly_id:23 17
046B6D 03 FD       0186*  	db 0x03,0xFD ; poly_id:24 18
046B6F 03 FE       0187*  	db 0x03,0xFE ; poly_id:25 19
046B71 03 FF       0188*  	db 0x03,0xFF ; poly_id:26 1A
046B73 03 01       0189*  	db 0x03,0x01 ; poly_id:27 1B
046B75 03 02       0190*  	db 0x03,0x02 ; poly_id:28 1C
046B77 03 03       0191*  	db 0x03,0x03 ; poly_id:29 1D
046B79 03 FE       0192*  	db 0x03,0xFE ; poly_id:30 1E
046B7B 03 FF       0193*  	db 0x03,0xFF ; poly_id:31 1F
046B7D 03 00       0194*  	db 0x03,0x00 ; poly_id:32 20
046B7F 03 01       0195*  	db 0x03,0x01 ; poly_id:33 21
046B81 03 02       0196*  	db 0x03,0x02 ; poly_id:34 22
046B83 02 FE       0197*  	db 0x02,0xFE ; poly_id:35 23
046B85 02 FF       0198*  	db 0x02,0xFF ; poly_id:36 24
046B87 02 01       0199*  	db 0x02,0x01 ; poly_id:37 25
046B89 02 02       0200*  	db 0x02,0x02 ; poly_id:38 26
046B8B 02 FF       0201*  	db 0x02,0xFF ; poly_id:39 27
046B8D 02 00       0202*  	db 0x02,0x00 ; poly_id:40 28
046B8F 02 01       0203*  	db 0x02,0x01 ; poly_id:41 29
046B91 01 FF       0204*  	db 0x01,0xFF ; poly_id:42 2A
046B93 01 01       0205*  	db 0x01,0x01 ; poly_id:43 2B
046B95 01 00       0206*  	db 0x01,0x00 ; poly_id:44 2C
046B97             0207*  
046B97             0208*  polys_map_deltas_2: ; south orientation
046B97 04 05       0209*  	db 0x04,0x05 ; poly_id:0 00
046B99 03 05       0210*  	db 0x03,0x05 ; poly_id:1 01
046B9B 02 05       0211*  	db 0x02,0x05 ; poly_id:2 02
046B9D 01 05       0212*  	db 0x01,0x05 ; poly_id:3 03
046B9F 00 05       0213*  	db 0x00,0x05 ; poly_id:4 04
046BA1 FF 05       0214*  	db 0xFF,0x05 ; poly_id:5 05
046BA3 FE 05       0215*  	db 0xFE,0x05 ; poly_id:6 06
046BA5 FD 05       0216*  	db 0xFD,0x05 ; poly_id:7 07
046BA7 FC 05       0217*  	db 0xFC,0x05 ; poly_id:8 08
046BA9 04 04       0218*  	db 0x04,0x04 ; poly_id:9 09
046BAB 03 04       0219*  	db 0x03,0x04 ; poly_id:10 0A
046BAD 02 04       0220*  	db 0x02,0x04 ; poly_id:11 0B
046BAF 01 04       0221*  	db 0x01,0x04 ; poly_id:12 0C
046BB1 FF 04       0222*  	db 0xFF,0x04 ; poly_id:13 0D
046BB3 FE 04       0223*  	db 0xFE,0x04 ; poly_id:14 0E
046BB5 FD 04       0224*  	db 0xFD,0x04 ; poly_id:15 0F
046BB7 FC 04       0225*  	db 0xFC,0x04 ; poly_id:16 10
046BB9 03 04       0226*  	db 0x03,0x04 ; poly_id:17 11
046BBB 02 04       0227*  	db 0x02,0x04 ; poly_id:18 12
046BBD 01 04       0228*  	db 0x01,0x04 ; poly_id:19 13
046BBF 00 04       0229*  	db 0x00,0x04 ; poly_id:20 14
046BC1 FF 04       0230*  	db 0xFF,0x04 ; poly_id:21 15
046BC3 FE 04       0231*  	db 0xFE,0x04 ; poly_id:22 16
046BC5 FD 04       0232*  	db 0xFD,0x04 ; poly_id:23 17
046BC7 03 03       0233*  	db 0x03,0x03 ; poly_id:24 18
046BC9 02 03       0234*  	db 0x02,0x03 ; poly_id:25 19
046BCB 01 03       0235*  	db 0x01,0x03 ; poly_id:26 1A
046BCD FF 03       0236*  	db 0xFF,0x03 ; poly_id:27 1B
046BCF FE 03       0237*  	db 0xFE,0x03 ; poly_id:28 1C
046BD1 FD 03       0238*  	db 0xFD,0x03 ; poly_id:29 1D
046BD3 02 03       0239*  	db 0x02,0x03 ; poly_id:30 1E
046BD5 01 03       0240*  	db 0x01,0x03 ; poly_id:31 1F
046BD7 00 03       0241*  	db 0x00,0x03 ; poly_id:32 20
046BD9 FF 03       0242*  	db 0xFF,0x03 ; poly_id:33 21
046BDB FE 03       0243*  	db 0xFE,0x03 ; poly_id:34 22
046BDD 02 02       0244*  	db 0x02,0x02 ; poly_id:35 23
046BDF 01 02       0245*  	db 0x01,0x02 ; poly_id:36 24
046BE1 FF 02       0246*  	db 0xFF,0x02 ; poly_id:37 25
046BE3 FE 02       0247*  	db 0xFE,0x02 ; poly_id:38 26
046BE5 01 02       0248*  	db 0x01,0x02 ; poly_id:39 27
046BE7 00 02       0249*  	db 0x00,0x02 ; poly_id:40 28
046BE9 FF 02       0250*  	db 0xFF,0x02 ; poly_id:41 29
046BEB 01 01       0251*  	db 0x01,0x01 ; poly_id:42 2A
046BED FF 01       0252*  	db 0xFF,0x01 ; poly_id:43 2B
046BEF 00 01       0253*  	db 0x00,0x01 ; poly_id:44 2C
046BF1             0254*  
046BF1             0255*  polys_map_deltas_3: ; west orientation
046BF1 FB 04       0256*  	db 0xFB,0x04 ; poly_id:0 00
046BF3 FB 03       0257*  	db 0xFB,0x03 ; poly_id:1 01
046BF5 FB 02       0258*  	db 0xFB,0x02 ; poly_id:2 02
046BF7 FB 01       0259*  	db 0xFB,0x01 ; poly_id:3 03
046BF9 FB 00       0260*  	db 0xFB,0x00 ; poly_id:4 04
046BFB FB FF       0261*  	db 0xFB,0xFF ; poly_id:5 05
046BFD FB FE       0262*  	db 0xFB,0xFE ; poly_id:6 06
046BFF FB FD       0263*  	db 0xFB,0xFD ; poly_id:7 07
046C01 FB FC       0264*  	db 0xFB,0xFC ; poly_id:8 08
046C03 FC 04       0265*  	db 0xFC,0x04 ; poly_id:9 09
046C05 FC 03       0266*  	db 0xFC,0x03 ; poly_id:10 0A
046C07 FC 02       0267*  	db 0xFC,0x02 ; poly_id:11 0B
046C09 FC 01       0268*  	db 0xFC,0x01 ; poly_id:12 0C
046C0B FC FF       0269*  	db 0xFC,0xFF ; poly_id:13 0D
046C0D FC FE       0270*  	db 0xFC,0xFE ; poly_id:14 0E
046C0F FC FD       0271*  	db 0xFC,0xFD ; poly_id:15 0F
046C11 FC FC       0272*  	db 0xFC,0xFC ; poly_id:16 10
046C13 FC 03       0273*  	db 0xFC,0x03 ; poly_id:17 11
046C15 FC 02       0274*  	db 0xFC,0x02 ; poly_id:18 12
046C17 FC 01       0275*  	db 0xFC,0x01 ; poly_id:19 13
046C19 FC 00       0276*  	db 0xFC,0x00 ; poly_id:20 14
046C1B FC FF       0277*  	db 0xFC,0xFF ; poly_id:21 15
046C1D FC FE       0278*  	db 0xFC,0xFE ; poly_id:22 16
046C1F FC FD       0279*  	db 0xFC,0xFD ; poly_id:23 17
046C21 FD 03       0280*  	db 0xFD,0x03 ; poly_id:24 18
046C23 FD 02       0281*  	db 0xFD,0x02 ; poly_id:25 19
046C25 FD 01       0282*  	db 0xFD,0x01 ; poly_id:26 1A
046C27 FD FF       0283*  	db 0xFD,0xFF ; poly_id:27 1B
046C29 FD FE       0284*  	db 0xFD,0xFE ; poly_id:28 1C
046C2B FD FD       0285*  	db 0xFD,0xFD ; poly_id:29 1D
046C2D FD 02       0286*  	db 0xFD,0x02 ; poly_id:30 1E
046C2F FD 01       0287*  	db 0xFD,0x01 ; poly_id:31 1F
046C31 FD 00       0288*  	db 0xFD,0x00 ; poly_id:32 20
046C33 FD FF       0289*  	db 0xFD,0xFF ; poly_id:33 21
046C35 FD FE       0290*  	db 0xFD,0xFE ; poly_id:34 22
046C37 FE 02       0291*  	db 0xFE,0x02 ; poly_id:35 23
046C39 FE 01       0292*  	db 0xFE,0x01 ; poly_id:36 24
046C3B FE FF       0293*  	db 0xFE,0xFF ; poly_id:37 25
046C3D FE FE       0294*  	db 0xFE,0xFE ; poly_id:38 26
046C3F FE 01       0295*  	db 0xFE,0x01 ; poly_id:39 27
046C41 FE 00       0296*  	db 0xFE,0x00 ; poly_id:40 28
046C43 FE FF       0297*  	db 0xFE,0xFF ; poly_id:41 29
046C45 FF 01       0298*  	db 0xFF,0x01 ; poly_id:42 2A
046C47 FF FF       0299*  	db 0xFF,0xFF ; poly_id:43 2B
046C49 FF 00       0300*  	db 0xFF,0x00 ; poly_id:44 2C
046C4B             0301*  
046C4B             0302*  num_sprite_polys: equ 25
046C4B             0303*  
046C4B             0304*  sprite_polys_lookup:
046C4B             0305*  ;south_id 	; poly_id
046C4B 00          0306*  	db 0	; 0
046C4C 01          0307*  	db 1	; 1
046C4D 02          0308*  	db 2	; 2
046C4E 03          0309*  	db 3	; 3
046C4F 04          0310*  	db 4	; 4
046C50 05          0311*  	db 5	; 5
046C51 06          0312*  	db 6	; 6
046C52 07          0313*  	db 7	; 7
046C53 08          0314*  	db 8	; 8
046C54 FF          0315*  	db 255	; 9
046C55 FF          0316*  	db 255	; 10
046C56 FF          0317*  	db 255	; 11
046C57 FF          0318*  	db 255	; 12
046C58 FF          0319*  	db 255	; 13
046C59 FF          0320*  	db 255	; 14
046C5A FF          0321*  	db 255	; 15
046C5B FF          0322*  	db 255	; 16
046C5C 09          0323*  	db 9	; 17
046C5D 0A          0324*  	db 10	; 18
046C5E 0B          0325*  	db 11	; 19
046C5F 0C          0326*  	db 12	; 20
046C60 0D          0327*  	db 13	; 21
046C61 0E          0328*  	db 14	; 22
046C62 0F          0329*  	db 15	; 23
046C63 FF          0330*  	db 255	; 24
046C64 FF          0331*  	db 255	; 25
046C65 FF          0332*  	db 255	; 26
046C66 FF          0333*  	db 255	; 27
046C67 FF          0334*  	db 255	; 28
046C68 FF          0335*  	db 255	; 29
046C69 10          0336*  	db 16	; 30
046C6A 11          0337*  	db 17	; 31
046C6B 12          0338*  	db 18	; 32
046C6C 13          0339*  	db 19	; 33
046C6D 14          0340*  	db 20	; 34
046C6E FF          0341*  	db 255	; 35
046C6F FF          0342*  	db 255	; 36
046C70 FF          0343*  	db 255	; 37
046C71 FF          0344*  	db 255	; 38
046C72 15          0345*  	db 21	; 39
046C73 16          0346*  	db 22	; 40
046C74 17          0347*  	db 23	; 41
046C75 FF          0348*  	db 255	; 42
046C76 FF          0349*  	db 255	; 43
046C77 18          0350*  	db 24	; 44
046C78             0351*  
046C78             0352*  sprite_imgs_lookup:
046C78             0353*  ;	 sprite_obj; render_obj_id
046C78 AE 6C 04    0354*  	dl sprite_obj_000 ; render_obj_id:20
046C7B 8F 6D 04    0355*  	dl sprite_obj_001 ; render_obj_id:21
046C7E 70 6E 04    0356*  	dl sprite_obj_002 ; render_obj_id:22
046C81 51 6F 04    0357*  	dl sprite_obj_003 ; render_obj_id:23
046C84 32 70 04    0358*  	dl sprite_obj_004 ; render_obj_id:24
046C87 13 71 04    0359*  	dl sprite_obj_005 ; render_obj_id:40
046C8A F4 71 04    0360*  	dl sprite_obj_006 ; render_obj_id:41
046C8D D5 72 04    0361*  	dl sprite_obj_007 ; render_obj_id:42
046C90 B6 73 04    0362*  	dl sprite_obj_008 ; render_obj_id:43
046C93 97 74 04    0363*  	dl sprite_obj_009 ; render_obj_id:44
046C96 78 75 04    0364*  	dl sprite_obj_010 ; render_obj_id:45
046C99 59 76 04    0365*  	dl sprite_obj_011 ; render_obj_id:46
046C9C 3A 77 04    0366*  	dl sprite_obj_012 ; render_obj_id:47
046C9F 1B 78 04    0367*  	dl sprite_obj_013 ; render_obj_id:48
046CA2 FC 78 04    0368*  	dl sprite_obj_014 ; render_obj_id:49
046CA5 DD 79 04    0369*  	dl sprite_obj_015 ; render_obj_id:50
046CA8 BE 7A 04    0370*  	dl sprite_obj_016 ; render_obj_id:51
046CAB 9F 7B 04    0371*  	dl sprite_obj_017 ; render_obj_id:52
046CAE             0372*  ;	 plot_x,  plot_y, buffer_label
046CAE             0373*  
046CAE             0374*  ; render_obj_id:20
046CAE             0375*  sprite_obj_000:
046CAE 09 00 00 4E 0376*  	dl 0x000009,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CB7 2C 00 00 4E 0377*  	dl 0x00002C,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CC0 50 00 00 4E 0378*  	dl 0x000050,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CC9 73 00 00 4E 0379*  	dl 0x000073,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CD2 97 00 00 4E 0380*  	dl 0x000097,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CDB BA 00 00 4E 0381*  	dl 0x0000BA,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CE4 DE 00 00 4E 0382*  	dl 0x0000DE,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CED 01 01 00 4E 0383*  	dl 0x000101,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CF6 25 01 00 4E 0384*  	dl 0x000125,0x00004E,BUF_20_004
       00 00 13 02 
       00          
046CFF 0B 00 00 4E 0385*  	dl 0x00000B,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D08 39 00 00 4E 0386*  	dl 0x000039,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D11 66 00 00 4E 0387*  	dl 0x000066,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D1A 94 00 00 4E 0388*  	dl 0x000094,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D23 C1 00 00 4E 0389*  	dl 0x0000C1,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D2C EF 00 00 4E 0390*  	dl 0x0000EF,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D35 1C 01 00 4E 0391*  	dl 0x00011C,0x00004E,BUF_20_020
       00 00 14 02 
       00          
046D3E 11 00 00 4D 0392*  	dl 0x000011,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D47 50 00 00 4D 0393*  	dl 0x000050,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D50 91 00 00 4D 0394*  	dl 0x000091,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D59 D1 00 00 4D 0395*  	dl 0x0000D1,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D62 11 01 00 4D 0396*  	dl 0x000111,0x00004D,BUF_20_032
       00 00 15 02 
       00          
046D6B 1B 00 00 4C 0397*  	dl 0x00001B,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D74 85 00 00 4C 0398*  	dl 0x000085,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D7D F0 00 00 4C 0399*  	dl 0x0000F0,0x00004C,BUF_20_040
       00 00 16 02 
       00          
046D86 6B 00 00 44 0400*  	dl 0x00006B,0x000044,BUF_20_044
       00 00 17 02 
       00          
046D8F             0401*  
046D8F             0402*  ; render_obj_id:21
046D8F             0403*  sprite_obj_001:
046D8F 0D 00 00 55 0404*  	dl 0x00000D,0x000055,BUF_21_004
       00 00 18 02 
       00          
046D98 30 00 00 55 0405*  	dl 0x000030,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DA1 54 00 00 55 0406*  	dl 0x000054,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DAA 77 00 00 55 0407*  	dl 0x000077,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DB3 9B 00 00 55 0408*  	dl 0x00009B,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DBC BE 00 00 55 0409*  	dl 0x0000BE,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DC5 E2 00 00 55 0410*  	dl 0x0000E2,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DCE 05 01 00 55 0411*  	dl 0x000105,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DD7 29 01 00 55 0412*  	dl 0x000129,0x000055,BUF_21_004
       00 00 18 02 
       00          
046DE0 10 00 00 57 0413*  	dl 0x000010,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DE9 3E 00 00 57 0414*  	dl 0x00003E,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DF2 6B 00 00 57 0415*  	dl 0x00006B,0x000057,BUF_21_020
       00 00 19 02 
       00          
046DFB 99 00 00 57 0416*  	dl 0x000099,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E04 C6 00 00 57 0417*  	dl 0x0000C6,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E0D F4 00 00 57 0418*  	dl 0x0000F4,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E16 21 01 00 57 0419*  	dl 0x000121,0x000057,BUF_21_020
       00 00 19 02 
       00          
046E1F 16 00 00 5A 0420*  	dl 0x000016,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E28 55 00 00 5A 0421*  	dl 0x000055,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E31 96 00 00 5A 0422*  	dl 0x000096,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E3A D6 00 00 5A 0423*  	dl 0x0000D6,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E43 16 01 00 5A 0424*  	dl 0x000116,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
046E4C 26 00 00 60 0425*  	dl 0x000026,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E55 90 00 00 60 0426*  	dl 0x000090,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E5E FB 00 00 60 0427*  	dl 0x0000FB,0x000060,BUF_21_040
       00 00 1B 02 
       00          
046E67 6E 00 00 82 0428*  	dl 0x00006E,0x000082,BUF_21_044
       00 00 1C 02 
       00          
046E70             0429*  
046E70             0430*  ; render_obj_id:22
046E70             0431*  sprite_obj_002:
046E70 09 00 00 55 0432*  	dl 0x000009,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E79 2C 00 00 55 0433*  	dl 0x00002C,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E82 50 00 00 55 0434*  	dl 0x000050,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E8B 73 00 00 55 0435*  	dl 0x000073,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E94 97 00 00 55 0436*  	dl 0x000097,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046E9D BA 00 00 55 0437*  	dl 0x0000BA,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EA6 DE 00 00 55 0438*  	dl 0x0000DE,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EAF 01 01 00 55 0439*  	dl 0x000101,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EB8 25 01 00 55 0440*  	dl 0x000125,0x000055,BUF_22_004
       00 00 1D 02 
       00          
046EC1 0B 00 00 57 0441*  	dl 0x00000B,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046ECA 39 00 00 57 0442*  	dl 0x000039,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046ED3 66 00 00 57 0443*  	dl 0x000066,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EDC 94 00 00 57 0444*  	dl 0x000094,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EE5 C1 00 00 57 0445*  	dl 0x0000C1,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EEE EF 00 00 57 0446*  	dl 0x0000EF,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046EF7 1C 01 00 57 0447*  	dl 0x00011C,0x000057,BUF_22_020
       00 00 1E 02 
       00          
046F00 10 00 00 5A 0448*  	dl 0x000010,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F09 4F 00 00 5A 0449*  	dl 0x00004F,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F12 90 00 00 5A 0450*  	dl 0x000090,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F1B D0 00 00 5A 0451*  	dl 0x0000D0,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F24 10 01 00 5A 0452*  	dl 0x000110,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
046F2D 1B 00 00 60 0453*  	dl 0x00001B,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F36 85 00 00 60 0454*  	dl 0x000085,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F3F F0 00 00 60 0455*  	dl 0x0000F0,0x000060,BUF_22_040
       00 00 20 02 
       00          
046F48 50 00 00 82 0456*  	dl 0x000050,0x000082,BUF_22_044
       00 00 21 02 
       00          
046F51             0457*  
046F51             0458*  ; render_obj_id:23
046F51             0459*  sprite_obj_003:
046F51 0C 00 00 3E 0460*  	dl 0x00000C,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F5A 2F 00 00 3E 0461*  	dl 0x00002F,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F63 53 00 00 3E 0462*  	dl 0x000053,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F6C 76 00 00 3E 0463*  	dl 0x000076,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F75 9A 00 00 3E 0464*  	dl 0x00009A,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F7E BD 00 00 3E 0465*  	dl 0x0000BD,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F87 E1 00 00 3E 0466*  	dl 0x0000E1,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F90 04 01 00 3E 0467*  	dl 0x000104,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046F99 28 01 00 3E 0468*  	dl 0x000128,0x00003E,BUF_23_004
       00 00 22 02 
       00          
046FA2 0F 00 00 39 0469*  	dl 0x00000F,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FAB 3D 00 00 39 0470*  	dl 0x00003D,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FB4 6A 00 00 39 0471*  	dl 0x00006A,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FBD 98 00 00 39 0472*  	dl 0x000098,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FC6 C5 00 00 39 0473*  	dl 0x0000C5,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FCF F3 00 00 39 0474*  	dl 0x0000F3,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FD8 20 01 00 39 0475*  	dl 0x000120,0x000039,BUF_23_020
       00 00 23 02 
       00          
046FE1 16 00 00 30 0476*  	dl 0x000016,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FEA 55 00 00 30 0477*  	dl 0x000055,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FF3 96 00 00 30 0478*  	dl 0x000096,0x000030,BUF_23_032
       00 00 24 02 
       00          
046FFC D6 00 00 30 0479*  	dl 0x0000D6,0x000030,BUF_23_032
       00 00 24 02 
       00          
047005 16 01 00 30 0480*  	dl 0x000116,0x000030,BUF_23_032
       00 00 24 02 
       00          
04700E 24 00 00 1A 0481*  	dl 0x000024,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047017 8E 00 00 1A 0482*  	dl 0x00008E,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047020 F9 00 00 1A 0483*  	dl 0x0000F9,0x00001A,BUF_23_040
       00 00 25 02 
       00          
047029 09 01 00 83 0484*  	dl 0x000109,0x000083,BUF_23_044
       00 00 26 02 
       00          
047032             0485*  
047032             0486*  ; render_obj_id:24
047032             0487*  sprite_obj_004:
047032 0D 00 00 55 0488*  	dl 0x00000D,0x000055,BUF_24_004
       00 00 27 02 
       00          
04703B 30 00 00 55 0489*  	dl 0x000030,0x000055,BUF_24_004
       00 00 27 02 
       00          
047044 54 00 00 55 0490*  	dl 0x000054,0x000055,BUF_24_004
       00 00 27 02 
       00          
04704D 77 00 00 55 0491*  	dl 0x000077,0x000055,BUF_24_004
       00 00 27 02 
       00          
047056 9B 00 00 55 0492*  	dl 0x00009B,0x000055,BUF_24_004
       00 00 27 02 
       00          
04705F BE 00 00 55 0493*  	dl 0x0000BE,0x000055,BUF_24_004
       00 00 27 02 
       00          
047068 E2 00 00 55 0494*  	dl 0x0000E2,0x000055,BUF_24_004
       00 00 27 02 
       00          
047071 05 01 00 55 0495*  	dl 0x000105,0x000055,BUF_24_004
       00 00 27 02 
       00          
04707A 29 01 00 55 0496*  	dl 0x000129,0x000055,BUF_24_004
       00 00 27 02 
       00          
047083 10 00 00 57 0497*  	dl 0x000010,0x000057,BUF_24_020
       00 00 28 02 
       00          
04708C 3E 00 00 57 0498*  	dl 0x00003E,0x000057,BUF_24_020
       00 00 28 02 
       00          
047095 6B 00 00 57 0499*  	dl 0x00006B,0x000057,BUF_24_020
       00 00 28 02 
       00          
04709E 99 00 00 57 0500*  	dl 0x000099,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470A7 C6 00 00 57 0501*  	dl 0x0000C6,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470B0 F4 00 00 57 0502*  	dl 0x0000F4,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470B9 21 01 00 57 0503*  	dl 0x000121,0x000057,BUF_24_020
       00 00 28 02 
       00          
0470C2 16 00 00 5A 0504*  	dl 0x000016,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470CB 55 00 00 5A 0505*  	dl 0x000055,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470D4 96 00 00 5A 0506*  	dl 0x000096,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470DD D6 00 00 5A 0507*  	dl 0x0000D6,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470E6 16 01 00 5A 0508*  	dl 0x000116,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0470EF 26 00 00 60 0509*  	dl 0x000026,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0470F8 90 00 00 60 0510*  	dl 0x000090,0x000060,BUF_24_040
       00 00 2A 02 
       00          
047101 FB 00 00 60 0511*  	dl 0x0000FB,0x000060,BUF_24_040
       00 00 2A 02 
       00          
04710A 6E 00 00 82 0512*  	dl 0x00006E,0x000082,BUF_24_044
       00 00 2B 02 
       00          
047113             0513*  
047113             0514*  ; render_obj_id:40
047113             0515*  sprite_obj_005:
047113 0A 00 00 5A 0516*  	dl 0x00000A,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04711C 2D 00 00 5A 0517*  	dl 0x00002D,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047125 51 00 00 5A 0518*  	dl 0x000051,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04712E 74 00 00 5A 0519*  	dl 0x000074,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047137 98 00 00 5A 0520*  	dl 0x000098,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047140 BB 00 00 5A 0521*  	dl 0x0000BB,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047149 DF 00 00 5A 0522*  	dl 0x0000DF,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047152 02 01 00 5A 0523*  	dl 0x000102,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04715B 26 01 00 5A 0524*  	dl 0x000126,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047164 0D 00 00 5C 0525*  	dl 0x00000D,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04716D 3B 00 00 5C 0526*  	dl 0x00003B,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047176 68 00 00 5C 0527*  	dl 0x000068,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04717F 96 00 00 5C 0528*  	dl 0x000096,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047188 C3 00 00 5C 0529*  	dl 0x0000C3,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047191 F1 00 00 5C 0530*  	dl 0x0000F1,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04719A 1E 01 00 5C 0531*  	dl 0x00011E,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
0471A3 13 00 00 62 0532*  	dl 0x000013,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471AC 52 00 00 62 0533*  	dl 0x000052,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471B5 93 00 00 62 0534*  	dl 0x000093,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471BE D3 00 00 62 0535*  	dl 0x0000D3,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471C7 13 01 00 62 0536*  	dl 0x000113,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0471D0 20 00 00 6D 0537*  	dl 0x000020,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471D9 8A 00 00 6D 0538*  	dl 0x00008A,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471E2 F5 00 00 6D 0539*  	dl 0x0000F5,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0471EB E0 00 00 A0 0540*  	dl 0x0000E0,0x0000A0,BUF_40_044
       00 00 30 02 
       00          
0471F4             0541*  
0471F4             0542*  ; render_obj_id:41
0471F4             0543*  sprite_obj_006:
0471F4 0C 00 00 55 0544*  	dl 0x00000C,0x000055,BUF_41_004
       00 00 31 02 
       00          
0471FD 2F 00 00 55 0545*  	dl 0x00002F,0x000055,BUF_41_004
       00 00 31 02 
       00          
047206 53 00 00 55 0546*  	dl 0x000053,0x000055,BUF_41_004
       00 00 31 02 
       00          
04720F 76 00 00 55 0547*  	dl 0x000076,0x000055,BUF_41_004
       00 00 31 02 
       00          
047218 9A 00 00 55 0548*  	dl 0x00009A,0x000055,BUF_41_004
       00 00 31 02 
       00          
047221 BD 00 00 55 0549*  	dl 0x0000BD,0x000055,BUF_41_004
       00 00 31 02 
       00          
04722A E1 00 00 55 0550*  	dl 0x0000E1,0x000055,BUF_41_004
       00 00 31 02 
       00          
047233 04 01 00 55 0551*  	dl 0x000104,0x000055,BUF_41_004
       00 00 31 02 
       00          
04723C 28 01 00 55 0552*  	dl 0x000128,0x000055,BUF_41_004
       00 00 31 02 
       00          
047245 0E 00 00 57 0553*  	dl 0x00000E,0x000057,BUF_41_020
       00 00 32 02 
       00          
04724E 3C 00 00 57 0554*  	dl 0x00003C,0x000057,BUF_41_020
       00 00 32 02 
       00          
047257 69 00 00 57 0555*  	dl 0x000069,0x000057,BUF_41_020
       00 00 32 02 
       00          
047260 97 00 00 57 0556*  	dl 0x000097,0x000057,BUF_41_020
       00 00 32 02 
       00          
047269 C4 00 00 57 0557*  	dl 0x0000C4,0x000057,BUF_41_020
       00 00 32 02 
       00          
047272 F2 00 00 57 0558*  	dl 0x0000F2,0x000057,BUF_41_020
       00 00 32 02 
       00          
04727B 1F 01 00 57 0559*  	dl 0x00011F,0x000057,BUF_41_020
       00 00 32 02 
       00          
047284 15 00 00 5B 0560*  	dl 0x000015,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04728D 54 00 00 5B 0561*  	dl 0x000054,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047296 95 00 00 5B 0562*  	dl 0x000095,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04729F D5 00 00 5B 0563*  	dl 0x0000D5,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0472A8 15 01 00 5B 0564*  	dl 0x000115,0x00005B,BUF_41_032
       00 00 33 02 
       00          
0472B1 23 00 00 62 0565*  	dl 0x000023,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472BA 8D 00 00 62 0566*  	dl 0x00008D,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472C3 F8 00 00 62 0567*  	dl 0x0000F8,0x000062,BUF_41_040
       00 00 34 02 
       00          
0472CC 84 00 00 87 0568*  	dl 0x000084,0x000087,BUF_41_044
       00 00 35 02 
       00          
0472D5             0569*  
0472D5             0570*  ; render_obj_id:42
0472D5             0571*  sprite_obj_007:
0472D5 0D 00 00 57 0572*  	dl 0x00000D,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472DE 30 00 00 57 0573*  	dl 0x000030,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472E7 54 00 00 57 0574*  	dl 0x000054,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472F0 77 00 00 57 0575*  	dl 0x000077,0x000057,BUF_42_004
       00 00 36 02 
       00          
0472F9 9B 00 00 57 0576*  	dl 0x00009B,0x000057,BUF_42_004
       00 00 36 02 
       00          
047302 BE 00 00 57 0577*  	dl 0x0000BE,0x000057,BUF_42_004
       00 00 36 02 
       00          
04730B E2 00 00 57 0578*  	dl 0x0000E2,0x000057,BUF_42_004
       00 00 36 02 
       00          
047314 05 01 00 57 0579*  	dl 0x000105,0x000057,BUF_42_004
       00 00 36 02 
       00          
04731D 29 01 00 57 0580*  	dl 0x000129,0x000057,BUF_42_004
       00 00 36 02 
       00          
047326 10 00 00 5A 0581*  	dl 0x000010,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04732F 3E 00 00 5A 0582*  	dl 0x00003E,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047338 6B 00 00 5A 0583*  	dl 0x00006B,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047341 99 00 00 5A 0584*  	dl 0x000099,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04734A C6 00 00 5A 0585*  	dl 0x0000C6,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047353 F4 00 00 5A 0586*  	dl 0x0000F4,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04735C 21 01 00 5A 0587*  	dl 0x000121,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047365 18 00 00 5F 0588*  	dl 0x000018,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04736E 57 00 00 5F 0589*  	dl 0x000057,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047377 98 00 00 5F 0590*  	dl 0x000098,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047380 D8 00 00 5F 0591*  	dl 0x0000D8,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047389 18 01 00 5F 0592*  	dl 0x000118,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047392 28 00 00 69 0593*  	dl 0x000028,0x000069,BUF_42_040
       00 00 39 02 
       00          
04739B 92 00 00 69 0594*  	dl 0x000092,0x000069,BUF_42_040
       00 00 39 02 
       00          
0473A4 FD 00 00 69 0595*  	dl 0x0000FD,0x000069,BUF_42_040
       00 00 39 02 
       00          
0473AD 7D 00 00 9C 0596*  	dl 0x00007D,0x00009C,BUF_42_044
       00 00 3A 02 
       00          
0473B6             0597*  
0473B6             0598*  ; render_obj_id:43
0473B6             0599*  sprite_obj_008:
0473B6 0C 00 00 5C 0600*  	dl 0x00000C,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473BF 2F 00 00 5C 0601*  	dl 0x00002F,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473C8 53 00 00 5C 0602*  	dl 0x000053,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473D1 76 00 00 5C 0603*  	dl 0x000076,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473DA 9A 00 00 5C 0604*  	dl 0x00009A,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473E3 BD 00 00 5C 0605*  	dl 0x0000BD,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473EC E1 00 00 5C 0606*  	dl 0x0000E1,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473F5 04 01 00 5C 0607*  	dl 0x000104,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0473FE 28 01 00 5C 0608*  	dl 0x000128,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047407 0F 00 00 61 0609*  	dl 0x00000F,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047410 3D 00 00 61 0610*  	dl 0x00003D,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047419 6A 00 00 61 0611*  	dl 0x00006A,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047422 98 00 00 61 0612*  	dl 0x000098,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04742B C5 00 00 61 0613*  	dl 0x0000C5,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047434 F3 00 00 61 0614*  	dl 0x0000F3,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04743D 20 01 00 61 0615*  	dl 0x000120,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047446 15 00 00 68 0616*  	dl 0x000015,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04744F 54 00 00 68 0617*  	dl 0x000054,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047458 95 00 00 68 0618*  	dl 0x000095,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047461 D5 00 00 68 0619*  	dl 0x0000D5,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04746A 15 01 00 68 0620*  	dl 0x000115,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047473 24 00 00 77 0621*  	dl 0x000024,0x000077,BUF_43_040
       00 00 3E 02 
       00          
04747C 8E 00 00 77 0622*  	dl 0x00008E,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047485 F9 00 00 77 0623*  	dl 0x0000F9,0x000077,BUF_43_040
       00 00 3E 02 
       00          
04748E D4 00 00 9F 0624*  	dl 0x0000D4,0x00009F,BUF_43_044
       00 00 3F 02 
       00          
047497             0625*  
047497             0626*  ; render_obj_id:44
047497             0627*  sprite_obj_009:
047497 0F 00 00 5C 0628*  	dl 0x00000F,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474A0 32 00 00 5C 0629*  	dl 0x000032,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474A9 56 00 00 5C 0630*  	dl 0x000056,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474B2 79 00 00 5C 0631*  	dl 0x000079,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474BB 9D 00 00 5C 0632*  	dl 0x00009D,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474C4 C0 00 00 5C 0633*  	dl 0x0000C0,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474CD E4 00 00 5C 0634*  	dl 0x0000E4,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474D6 07 01 00 5C 0635*  	dl 0x000107,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474DF 2B 01 00 5C 0636*  	dl 0x00012B,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0474E8 14 00 00 5F 0637*  	dl 0x000014,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474F1 42 00 00 5F 0638*  	dl 0x000042,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0474FA 6F 00 00 5F 0639*  	dl 0x00006F,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047503 9D 00 00 5F 0640*  	dl 0x00009D,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04750C CA 00 00 5F 0641*  	dl 0x0000CA,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047515 F8 00 00 5F 0642*  	dl 0x0000F8,0x00005F,BUF_44_020
       00 00 41 02 
       00          
04751E 25 01 00 5F 0643*  	dl 0x000125,0x00005F,BUF_44_020
       00 00 41 02 
       00          
047527 1B 00 00 66 0644*  	dl 0x00001B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047530 5A 00 00 66 0645*  	dl 0x00005A,0x000066,BUF_44_032
       00 00 42 02 
       00          
047539 9B 00 00 66 0646*  	dl 0x00009B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047542 DB 00 00 66 0647*  	dl 0x0000DB,0x000066,BUF_44_032
       00 00 42 02 
       00          
04754B 1B 01 00 66 0648*  	dl 0x00011B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047554 2E 00 00 75 0649*  	dl 0x00002E,0x000075,BUF_44_040
       00 00 43 02 
       00          
04755D 98 00 00 75 0650*  	dl 0x000098,0x000075,BUF_44_040
       00 00 43 02 
       00          
047566 03 01 00 75 0651*  	dl 0x000103,0x000075,BUF_44_040
       00 00 43 02 
       00          
04756F C8 00 00 A1 0652*  	dl 0x0000C8,0x0000A1,BUF_44_044
       00 00 44 02 
       00          
047578             0653*  
047578             0654*  ; render_obj_id:45
047578             0655*  sprite_obj_010:
047578 09 00 00 56 0656*  	dl 0x000009,0x000056,BUF_45_004
       00 00 45 02 
       00          
047581 2C 00 00 56 0657*  	dl 0x00002C,0x000056,BUF_45_004
       00 00 45 02 
       00          
04758A 50 00 00 56 0658*  	dl 0x000050,0x000056,BUF_45_004
       00 00 45 02 
       00          
047593 73 00 00 56 0659*  	dl 0x000073,0x000056,BUF_45_004
       00 00 45 02 
       00          
04759C 97 00 00 56 0660*  	dl 0x000097,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475A5 BA 00 00 56 0661*  	dl 0x0000BA,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475AE DE 00 00 56 0662*  	dl 0x0000DE,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475B7 01 01 00 56 0663*  	dl 0x000101,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475C0 25 01 00 56 0664*  	dl 0x000125,0x000056,BUF_45_004
       00 00 45 02 
       00          
0475C9 0C 00 00 58 0665*  	dl 0x00000C,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475D2 3A 00 00 58 0666*  	dl 0x00003A,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475DB 67 00 00 58 0667*  	dl 0x000067,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475E4 95 00 00 58 0668*  	dl 0x000095,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475ED C2 00 00 58 0669*  	dl 0x0000C2,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475F6 F0 00 00 58 0670*  	dl 0x0000F0,0x000058,BUF_45_020
       00 00 46 02 
       00          
0475FF 1D 01 00 58 0671*  	dl 0x00011D,0x000058,BUF_45_020
       00 00 46 02 
       00          
047608 11 00 00 5D 0672*  	dl 0x000011,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047611 50 00 00 5D 0673*  	dl 0x000050,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04761A 91 00 00 5D 0674*  	dl 0x000091,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047623 D1 00 00 5D 0675*  	dl 0x0000D1,0x00005D,BUF_45_032
       00 00 47 02 
       00          
04762C 11 01 00 5D 0676*  	dl 0x000111,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047635 1D 00 00 63 0677*  	dl 0x00001D,0x000063,BUF_45_040
       00 00 48 02 
       00          
04763E 87 00 00 63 0678*  	dl 0x000087,0x000063,BUF_45_040
       00 00 48 02 
       00          
047647 F2 00 00 63 0679*  	dl 0x0000F2,0x000063,BUF_45_040
       00 00 48 02 
       00          
047650 58 00 00 8D 0680*  	dl 0x000058,0x00008D,BUF_45_044
       00 00 49 02 
       00          
047659             0681*  
047659             0682*  ; render_obj_id:46
047659             0683*  sprite_obj_011:
047659 09 00 00 58 0684*  	dl 0x000009,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047662 2C 00 00 58 0685*  	dl 0x00002C,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04766B 50 00 00 58 0686*  	dl 0x000050,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047674 73 00 00 58 0687*  	dl 0x000073,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04767D 97 00 00 58 0688*  	dl 0x000097,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047686 BA 00 00 58 0689*  	dl 0x0000BA,0x000058,BUF_46_004
       00 00 4A 02 
       00          
04768F DE 00 00 58 0690*  	dl 0x0000DE,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047698 01 01 00 58 0691*  	dl 0x000101,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0476A1 25 01 00 58 0692*  	dl 0x000125,0x000058,BUF_46_004
       00 00 4A 02 
       00          
0476AA 0C 00 00 5A 0693*  	dl 0x00000C,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476B3 3A 00 00 5A 0694*  	dl 0x00003A,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476BC 67 00 00 5A 0695*  	dl 0x000067,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476C5 95 00 00 5A 0696*  	dl 0x000095,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476CE C2 00 00 5A 0697*  	dl 0x0000C2,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476D7 F0 00 00 5A 0698*  	dl 0x0000F0,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476E0 1D 01 00 5A 0699*  	dl 0x00011D,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
0476E9 11 00 00 60 0700*  	dl 0x000011,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476F2 50 00 00 60 0701*  	dl 0x000050,0x000060,BUF_46_032
       00 00 4C 02 
       00          
0476FB 91 00 00 60 0702*  	dl 0x000091,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047704 D1 00 00 60 0703*  	dl 0x0000D1,0x000060,BUF_46_032
       00 00 4C 02 
       00          
04770D 11 01 00 60 0704*  	dl 0x000111,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047716 1D 00 00 69 0705*  	dl 0x00001D,0x000069,BUF_46_040
       00 00 4D 02 
       00          
04771F 87 00 00 69 0706*  	dl 0x000087,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047728 F2 00 00 69 0707*  	dl 0x0000F2,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047731 8E 00 00 9F 0708*  	dl 0x00008E,0x00009F,BUF_46_044
       00 00 4E 02 
       00          
04773A             0709*  
04773A             0710*  ; render_obj_id:47
04773A             0711*  sprite_obj_012:
04773A 09 00 00 57 0712*  	dl 0x000009,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047743 2C 00 00 57 0713*  	dl 0x00002C,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04774C 50 00 00 57 0714*  	dl 0x000050,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047755 73 00 00 57 0715*  	dl 0x000073,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04775E 97 00 00 57 0716*  	dl 0x000097,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047767 BA 00 00 57 0717*  	dl 0x0000BA,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047770 DE 00 00 57 0718*  	dl 0x0000DE,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047779 01 01 00 57 0719*  	dl 0x000101,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047782 25 01 00 57 0720*  	dl 0x000125,0x000057,BUF_47_004
       00 00 4F 02 
       00          
04778B 0C 00 00 59 0721*  	dl 0x00000C,0x000059,BUF_47_020
       00 00 50 02 
       00          
047794 3A 00 00 59 0722*  	dl 0x00003A,0x000059,BUF_47_020
       00 00 50 02 
       00          
04779D 67 00 00 59 0723*  	dl 0x000067,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477A6 95 00 00 59 0724*  	dl 0x000095,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477AF C2 00 00 59 0725*  	dl 0x0000C2,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477B8 F0 00 00 59 0726*  	dl 0x0000F0,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477C1 1D 01 00 59 0727*  	dl 0x00011D,0x000059,BUF_47_020
       00 00 50 02 
       00          
0477CA 11 00 00 5E 0728*  	dl 0x000011,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477D3 50 00 00 5E 0729*  	dl 0x000050,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477DC 91 00 00 5E 0730*  	dl 0x000091,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477E5 D1 00 00 5E 0731*  	dl 0x0000D1,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477EE 11 01 00 5E 0732*  	dl 0x000111,0x00005E,BUF_47_032
       00 00 51 02 
       00          
0477F7 1D 00 00 66 0733*  	dl 0x00001D,0x000066,BUF_47_040
       00 00 52 02 
       00          
047800 87 00 00 66 0734*  	dl 0x000087,0x000066,BUF_47_040
       00 00 52 02 
       00          
047809 F2 00 00 66 0735*  	dl 0x0000F2,0x000066,BUF_47_040
       00 00 52 02 
       00          
047812 B2 00 00 96 0736*  	dl 0x0000B2,0x000096,BUF_47_044
       00 00 53 02 
       00          
04781B             0737*  
04781B             0738*  ; render_obj_id:48
04781B             0739*  sprite_obj_013:
04781B 0A 00 00 5A 0740*  	dl 0x00000A,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047824 2D 00 00 5A 0741*  	dl 0x00002D,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04782D 51 00 00 5A 0742*  	dl 0x000051,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047836 74 00 00 5A 0743*  	dl 0x000074,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04783F 98 00 00 5A 0744*  	dl 0x000098,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047848 BB 00 00 5A 0745*  	dl 0x0000BB,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047851 DF 00 00 5A 0746*  	dl 0x0000DF,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04785A 02 01 00 5A 0747*  	dl 0x000102,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047863 26 01 00 5A 0748*  	dl 0x000126,0x00005A,BUF_48_004
       00 00 54 02 
       00          
04786C 0D 00 00 5C 0749*  	dl 0x00000D,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047875 3B 00 00 5C 0750*  	dl 0x00003B,0x00005C,BUF_48_020
       00 00 55 02 
       00          
04787E 68 00 00 5C 0751*  	dl 0x000068,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047887 96 00 00 5C 0752*  	dl 0x000096,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047890 C3 00 00 5C 0753*  	dl 0x0000C3,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047899 F1 00 00 5C 0754*  	dl 0x0000F1,0x00005C,BUF_48_020
       00 00 55 02 
       00          
0478A2 1E 01 00 5C 0755*  	dl 0x00011E,0x00005C,BUF_48_020
       00 00 55 02 
       00          
0478AB 12 00 00 62 0756*  	dl 0x000012,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478B4 51 00 00 62 0757*  	dl 0x000051,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478BD 92 00 00 62 0758*  	dl 0x000092,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478C6 D2 00 00 62 0759*  	dl 0x0000D2,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478CF 12 01 00 62 0760*  	dl 0x000112,0x000062,BUF_48_032
       00 00 56 02 
       00          
0478D8 1D 00 00 6C 0761*  	dl 0x00001D,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478E1 87 00 00 6C 0762*  	dl 0x000087,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478EA F2 00 00 6C 0763*  	dl 0x0000F2,0x00006C,BUF_48_040
       00 00 57 02 
       00          
0478F3 00 01 00 A0 0764*  	dl 0x000100,0x0000A0,BUF_48_044
       00 00 58 02 
       00          
0478FC             0765*  
0478FC             0766*  ; render_obj_id:49
0478FC             0767*  sprite_obj_014:
0478FC 0A 00 00 59 0768*  	dl 0x00000A,0x000059,BUF_49_004
       00 00 59 02 
       00          
047905 2D 00 00 59 0769*  	dl 0x00002D,0x000059,BUF_49_004
       00 00 59 02 
       00          
04790E 51 00 00 59 0770*  	dl 0x000051,0x000059,BUF_49_004
       00 00 59 02 
       00          
047917 74 00 00 59 0771*  	dl 0x000074,0x000059,BUF_49_004
       00 00 59 02 
       00          
047920 98 00 00 59 0772*  	dl 0x000098,0x000059,BUF_49_004
       00 00 59 02 
       00          
047929 BB 00 00 59 0773*  	dl 0x0000BB,0x000059,BUF_49_004
       00 00 59 02 
       00          
047932 DF 00 00 59 0774*  	dl 0x0000DF,0x000059,BUF_49_004
       00 00 59 02 
       00          
04793B 02 01 00 59 0775*  	dl 0x000102,0x000059,BUF_49_004
       00 00 59 02 
       00          
047944 26 01 00 59 0776*  	dl 0x000126,0x000059,BUF_49_004
       00 00 59 02 
       00          
04794D 0E 00 00 5B 0777*  	dl 0x00000E,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047956 3C 00 00 5B 0778*  	dl 0x00003C,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04795F 69 00 00 5B 0779*  	dl 0x000069,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047968 97 00 00 5B 0780*  	dl 0x000097,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047971 C4 00 00 5B 0781*  	dl 0x0000C4,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04797A F2 00 00 5B 0782*  	dl 0x0000F2,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047983 1F 01 00 5B 0783*  	dl 0x00011F,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
04798C 13 00 00 62 0784*  	dl 0x000013,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047995 52 00 00 62 0785*  	dl 0x000052,0x000062,BUF_49_032
       00 00 5B 02 
       00          
04799E 93 00 00 62 0786*  	dl 0x000093,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479A7 D3 00 00 62 0787*  	dl 0x0000D3,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479B0 13 01 00 62 0788*  	dl 0x000113,0x000062,BUF_49_032
       00 00 5B 02 
       00          
0479B9 20 00 00 6C 0789*  	dl 0x000020,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479C2 8A 00 00 6C 0790*  	dl 0x00008A,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479CB F5 00 00 6C 0791*  	dl 0x0000F5,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
0479D4 E8 00 00 A0 0792*  	dl 0x0000E8,0x0000A0,BUF_49_044
       00 00 5D 02 
       00          
0479DD             0793*  
0479DD             0794*  ; render_obj_id:50
0479DD             0795*  sprite_obj_015:
0479DD 0D 00 00 53 0796*  	dl 0x00000D,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479E6 30 00 00 53 0797*  	dl 0x000030,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479EF 54 00 00 53 0798*  	dl 0x000054,0x000053,BUF_50_004
       00 00 5E 02 
       00          
0479F8 77 00 00 53 0799*  	dl 0x000077,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A01 9B 00 00 53 0800*  	dl 0x00009B,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A0A BE 00 00 53 0801*  	dl 0x0000BE,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A13 E2 00 00 53 0802*  	dl 0x0000E2,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A1C 05 01 00 53 0803*  	dl 0x000105,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A25 29 01 00 53 0804*  	dl 0x000129,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047A2E 10 00 00 54 0805*  	dl 0x000010,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A37 3E 00 00 54 0806*  	dl 0x00003E,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A40 6B 00 00 54 0807*  	dl 0x00006B,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A49 99 00 00 54 0808*  	dl 0x000099,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A52 C6 00 00 54 0809*  	dl 0x0000C6,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A5B F4 00 00 54 0810*  	dl 0x0000F4,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A64 21 01 00 54 0811*  	dl 0x000121,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047A6D 16 00 00 56 0812*  	dl 0x000016,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A76 55 00 00 56 0813*  	dl 0x000055,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A7F 96 00 00 56 0814*  	dl 0x000096,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A88 D6 00 00 56 0815*  	dl 0x0000D6,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A91 16 01 00 56 0816*  	dl 0x000116,0x000056,BUF_50_032
       00 00 60 02 
       00          
047A9A 26 00 00 5A 0817*  	dl 0x000026,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AA3 90 00 00 5A 0818*  	dl 0x000090,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AAC FB 00 00 5A 0819*  	dl 0x0000FB,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047AB5 78 00 00 6E 0820*  	dl 0x000078,0x00006E,BUF_50_044
       00 00 62 02 
       00          
047ABE             0821*  
047ABE             0822*  ; render_obj_id:51
047ABE             0823*  sprite_obj_016:
047ABE 0B 00 00 49 0824*  	dl 0x00000B,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AC7 2E 00 00 49 0825*  	dl 0x00002E,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AD0 52 00 00 49 0826*  	dl 0x000052,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AD9 75 00 00 49 0827*  	dl 0x000075,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AE2 99 00 00 49 0828*  	dl 0x000099,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AEB BC 00 00 49 0829*  	dl 0x0000BC,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AF4 E0 00 00 49 0830*  	dl 0x0000E0,0x000049,BUF_51_004
       00 00 63 02 
       00          
047AFD 03 01 00 49 0831*  	dl 0x000103,0x000049,BUF_51_004
       00 00 63 02 
       00          
047B06 27 01 00 49 0832*  	dl 0x000127,0x000049,BUF_51_004
       00 00 63 02 
       00          
047B0F 0D 00 00 48 0833*  	dl 0x00000D,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B18 3B 00 00 48 0834*  	dl 0x00003B,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B21 68 00 00 48 0835*  	dl 0x000068,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B2A 96 00 00 48 0836*  	dl 0x000096,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B33 C3 00 00 48 0837*  	dl 0x0000C3,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B3C F1 00 00 48 0838*  	dl 0x0000F1,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B45 1E 01 00 48 0839*  	dl 0x00011E,0x000048,BUF_51_020
       00 00 64 02 
       00          
047B4E 13 00 00 45 0840*  	dl 0x000013,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B57 52 00 00 45 0841*  	dl 0x000052,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B60 93 00 00 45 0842*  	dl 0x000093,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B69 D3 00 00 45 0843*  	dl 0x0000D3,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B72 13 01 00 45 0844*  	dl 0x000113,0x000045,BUF_51_032
       00 00 65 02 
       00          
047B7B 20 00 00 3E 0845*  	dl 0x000020,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B84 8A 00 00 3E 0846*  	dl 0x00008A,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B8D F5 00 00 3E 0847*  	dl 0x0000F5,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047B96 5E 00 00 1C 0848*  	dl 0x00005E,0x00001C,BUF_51_044
       00 00 67 02 
       00          
047B9F             0849*  
047B9F             0850*  ; render_obj_id:52
047B9F             0851*  sprite_obj_017:
047B9F 0C 00 00 49 0852*  	dl 0x00000C,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BA8 2F 00 00 49 0853*  	dl 0x00002F,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BB1 53 00 00 49 0854*  	dl 0x000053,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BBA 76 00 00 49 0855*  	dl 0x000076,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BC3 9A 00 00 49 0856*  	dl 0x00009A,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BCC BD 00 00 49 0857*  	dl 0x0000BD,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BD5 E1 00 00 49 0858*  	dl 0x0000E1,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BDE 04 01 00 49 0859*  	dl 0x000104,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BE7 28 01 00 49 0860*  	dl 0x000128,0x000049,BUF_52_004
       00 00 68 02 
       00          
047BF0 0F 00 00 48 0861*  	dl 0x00000F,0x000048,BUF_52_020
       00 00 69 02 
       00          
047BF9 3D 00 00 48 0862*  	dl 0x00003D,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C02 6A 00 00 48 0863*  	dl 0x00006A,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C0B 98 00 00 48 0864*  	dl 0x000098,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C14 C5 00 00 48 0865*  	dl 0x0000C5,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C1D F3 00 00 48 0866*  	dl 0x0000F3,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C26 20 01 00 48 0867*  	dl 0x000120,0x000048,BUF_52_020
       00 00 69 02 
       00          
047C2F 16 00 00 45 0868*  	dl 0x000016,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C38 55 00 00 45 0869*  	dl 0x000055,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C41 96 00 00 45 0870*  	dl 0x000096,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C4A D6 00 00 45 0871*  	dl 0x0000D6,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C53 16 01 00 45 0872*  	dl 0x000116,0x000045,BUF_52_032
       00 00 6A 02 
       00          
047C5C 24 00 00 3E 0873*  	dl 0x000024,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C65 8E 00 00 3E 0874*  	dl 0x00008E,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C6E F9 00 00 3E 0875*  	dl 0x0000F9,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
047C77 6B 00 00 1C 0876*  	dl 0x00006B,0x00001C,BUF_52_044
       00 00 6C 02 
       00          
047C80             0877*  
047C80             0878*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
047C80             0018   	include "src/asm/font_itc_honda.asm"
047C80             0001*  ; Bitmap indices:
047C80             0002*  BUF_4384: equ 0x1120 ; 32
047C80             0003*  ; Missing character 33 !
047C80             0004*  ; Missing character 34 "
047C80             0005*  ; Missing character 35 #
047C80             0006*  ; Missing character 36 $
047C80             0007*  ; Missing character 37 %
047C80             0008*  ; Missing character 38 &
047C80             0009*  ; Missing character 39 '
047C80             0010*  ; Missing character 40 (
047C80             0011*  ; Missing character 41 )
047C80             0012*  ; Missing character 42 *
047C80             0013*  ; Missing character 43 +
047C80             0014*  ; Missing character 44 ,
047C80             0015*  ; Missing character 45 -
047C80             0016*  BUF_4398: equ 0x112E ; 46 .
047C80             0017*  ; Missing character 47 /
047C80             0018*  BUF_4400: equ 0x1130 ; 48 0
047C80             0019*  BUF_4401: equ 0x1131 ; 49 1
047C80             0020*  BUF_4402: equ 0x1132 ; 50 2
047C80             0021*  BUF_4403: equ 0x1133 ; 51 3
047C80             0022*  BUF_4404: equ 0x1134 ; 52 4
047C80             0023*  BUF_4405: equ 0x1135 ; 53 5
047C80             0024*  BUF_4406: equ 0x1136 ; 54 6
047C80             0025*  BUF_4407: equ 0x1137 ; 55 7
047C80             0026*  BUF_4408: equ 0x1138 ; 56 8
047C80             0027*  BUF_4409: equ 0x1139 ; 57 9
047C80             0028*  ; Missing character 58 :
047C80             0029*  ; Missing character 59 ;
047C80             0030*  ; Missing character 60 <
047C80             0031*  ; Missing character 61 =
047C80             0032*  ; Missing character 62 >
047C80             0033*  ; Missing character 63 ?
047C80             0034*  ; Missing character 64 @
047C80             0035*  BUF_4417: equ 0x1141 ; 65 A
047C80             0036*  BUF_4418: equ 0x1142 ; 66 B
047C80             0037*  BUF_4419: equ 0x1143 ; 67 C
047C80             0038*  BUF_4420: equ 0x1144 ; 68 D
047C80             0039*  BUF_4421: equ 0x1145 ; 69 E
047C80             0040*  BUF_4422: equ 0x1146 ; 70 F
047C80             0041*  BUF_4423: equ 0x1147 ; 71 G
047C80             0042*  BUF_4424: equ 0x1148 ; 72 H
047C80             0043*  BUF_4425: equ 0x1149 ; 73 I
047C80             0044*  BUF_4426: equ 0x114A ; 74 J
047C80             0045*  BUF_4427: equ 0x114B ; 75 K
047C80             0046*  BUF_4428: equ 0x114C ; 76 L
047C80             0047*  BUF_4429: equ 0x114D ; 77 M
047C80             0048*  BUF_4430: equ 0x114E ; 78 N
047C80             0049*  BUF_4431: equ 0x114F ; 79 O
047C80             0050*  BUF_4432: equ 0x1150 ; 80 P
047C80             0051*  BUF_4433: equ 0x1151 ; 81 Q
047C80             0052*  BUF_4434: equ 0x1152 ; 82 R
047C80             0053*  BUF_4435: equ 0x1153 ; 83 S
047C80             0054*  BUF_4436: equ 0x1154 ; 84 T
047C80             0055*  BUF_4437: equ 0x1155 ; 85 U
047C80             0056*  BUF_4438: equ 0x1156 ; 86 V
047C80             0057*  BUF_4439: equ 0x1157 ; 87 W
047C80             0058*  BUF_4440: equ 0x1158 ; 88 X
047C80             0059*  BUF_4441: equ 0x1159 ; 89 Y
047C80             0060*  BUF_4442: equ 0x115A ; 90 Z
047C80             0061*  ; Missing character 91 [
047C80             0062*  ; Missing character 92 \
047C80             0063*  ; Missing character 93 ]
047C80             0064*  ; Missing character 94 ^
047C80             0065*  ; Missing character 95 _
047C80             0066*  ; Missing character 96 `
047C80             0067*  BUF_4449: equ 0x1161 ; 97 a
047C80             0068*  BUF_4450: equ 0x1162 ; 98 b
047C80             0069*  BUF_4451: equ 0x1163 ; 99 c
047C80             0070*  BUF_4452: equ 0x1164 ; 100 d
047C80             0071*  BUF_4453: equ 0x1165 ; 101 e
047C80             0072*  BUF_4454: equ 0x1166 ; 102 f
047C80             0073*  BUF_4455: equ 0x1167 ; 103 g
047C80             0074*  BUF_4456: equ 0x1168 ; 104 h
047C80             0075*  BUF_4457: equ 0x1169 ; 105 i
047C80             0076*  BUF_4458: equ 0x116A ; 106 j
047C80             0077*  BUF_4459: equ 0x116B ; 107 k
047C80             0078*  BUF_4460: equ 0x116C ; 108 l
047C80             0079*  BUF_4461: equ 0x116D ; 109 m
047C80             0080*  BUF_4462: equ 0x116E ; 110 n
047C80             0081*  BUF_4463: equ 0x116F ; 111 o
047C80             0082*  BUF_4464: equ 0x1170 ; 112 p
047C80             0083*  BUF_4465: equ 0x1171 ; 113 q
047C80             0084*  BUF_4466: equ 0x1172 ; 114 r
047C80             0085*  BUF_4467: equ 0x1173 ; 115 s
047C80             0086*  BUF_4468: equ 0x1174 ; 116 t
047C80             0087*  BUF_4469: equ 0x1175 ; 117 u
047C80             0088*  BUF_4470: equ 0x1176 ; 118 v
047C80             0089*  BUF_4471: equ 0x1177 ; 119 w
047C80             0090*  BUF_4472: equ 0x1178 ; 120 x
047C80             0091*  BUF_4473: equ 0x1179 ; 121 y
047C80             0092*  BUF_4474: equ 0x117A ; 122 z
047C80             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
047C80             0094*  font_itc_honda:
047C80 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
047C86 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
047C8C 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
047C92 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
047C98 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
047C9E 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
047CA4 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
047CAA 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
047CB0 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
047CB6 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
047CBC 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
047CC2 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
047CC8 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
047CCE 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
047CD4 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
047CDA 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
047CE0 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
047CE6 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
047CEC 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
047CF2 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
047CF8 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
047CFE 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
047D04 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
047D0A 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
047D10 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
047D16 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
047D1C 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
047D22 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
047D28 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
047D2E 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
047D34 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
047D3A 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
047D40 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
047D46 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
047D4C 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
047D52 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
047D58 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
047D5E 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
047D64 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
047D6A 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
047D70 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
047D76 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
047D7C 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
047D82 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
047D88 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
047D8E 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
047D94 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
047D9A 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
047DA0 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
047DA6 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
047DAC 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
047DB2 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
047DB8 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
047DBE 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
047DC4 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
047DCA 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
047DD0 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
047DD6 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
047DDC 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
047DE2 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
047DE8 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
047DEE 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
047DF4 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
047DFA 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
047E00 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
047E06 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
047E0C 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
047E12 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
047E18 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
047E1E 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
047E24 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
047E2A 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
047E30 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
047E36 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
047E3C 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
047E42 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
047E48 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
047E4E 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
047E54 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
047E5A 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
047E60 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
047E66 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
047E6C 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
047E72 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
047E78 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
047E7E 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
047E84 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
047E8A 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
047E90 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
047E96 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
047E9C 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
047EA2             0186*  
047EA2             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
047EA2             0188*  load_font_itc_honda:
047EA2             0189*  
047EA2 21 E3 87 04 0190*  	ld hl,Fhonda032
047EA6 11 CB C3 04 0191*  	ld de,filedata
047EAA 01 00 00 01 0192*  	ld bc,65536
047EAE 3E 01       0193*  	ld a,mos_load
047EB0 5B CF       0194*  	RST.LIL 08h
047EB2 21 20 11 00 0195*  	ld hl,BUF_4384
047EB6 01 06 00 00 0196*  	ld bc,6
047EBA 11 01 00 00 0197*  	ld de,1
047EBE DD 21 06 00 0198*  	ld ix,6
       00          
047EC3 CD 3C B9 04 0199*  	call vdu_load_img
047EC7             0200*  ; Missing character 33
047EC7             0201*  ; Missing character 34
047EC7             0202*  ; Missing character 35
047EC7             0203*  ; Missing character 36
047EC7             0204*  ; Missing character 37
047EC7             0205*  ; Missing character 38
047EC7             0206*  ; Missing character 39
047EC7             0207*  ; Missing character 40
047EC7             0208*  ; Missing character 41
047EC7             0209*  ; Missing character 42
047EC7             0210*  ; Missing character 43
047EC7             0211*  ; Missing character 44
047EC7             0212*  ; Missing character 45
047EC7             0213*  
047EC7 21 F9 87 04 0214*  	ld hl,Fhonda046
047ECB 11 CB C3 04 0215*  	ld de,filedata
047ECF 01 00 00 01 0216*  	ld bc,65536
047ED3 3E 01       0217*  	ld a,mos_load
047ED5 5B CF       0218*  	RST.LIL 08h
047ED7 21 2E 11 00 0219*  	ld hl,BUF_4398
047EDB 01 05 00 00 0220*  	ld bc,5
047EDF 11 05 00 00 0221*  	ld de,5
047EE3 DD 21 19 00 0222*  	ld ix,25
       00          
047EE8 CD 3C B9 04 0223*  	call vdu_load_img
047EEC             0224*  ; Missing character 47
047EEC             0225*  
047EEC 21 0F 88 04 0226*  	ld hl,Fhonda048
047EF0 11 CB C3 04 0227*  	ld de,filedata
047EF4 01 00 00 01 0228*  	ld bc,65536
047EF8 3E 01       0229*  	ld a,mos_load
047EFA 5B CF       0230*  	RST.LIL 08h
047EFC 21 30 11 00 0231*  	ld hl,BUF_4400
047F00 01 0A 00 00 0232*  	ld bc,10
047F04 11 12 00 00 0233*  	ld de,18
047F08 DD 21 B4 00 0234*  	ld ix,180
       00          
047F0D CD 3C B9 04 0235*  	call vdu_load_img
047F11             0236*  
047F11 21 25 88 04 0237*  	ld hl,Fhonda049
047F15 11 CB C3 04 0238*  	ld de,filedata
047F19 01 00 00 01 0239*  	ld bc,65536
047F1D 3E 01       0240*  	ld a,mos_load
047F1F 5B CF       0241*  	RST.LIL 08h
047F21 21 31 11 00 0242*  	ld hl,BUF_4401
047F25 01 04 00 00 0243*  	ld bc,4
047F29 11 12 00 00 0244*  	ld de,18
047F2D DD 21 48 00 0245*  	ld ix,72
       00          
047F32 CD 3C B9 04 0246*  	call vdu_load_img
047F36             0247*  
047F36 21 3B 88 04 0248*  	ld hl,Fhonda050
047F3A 11 CB C3 04 0249*  	ld de,filedata
047F3E 01 00 00 01 0250*  	ld bc,65536
047F42 3E 01       0251*  	ld a,mos_load
047F44 5B CF       0252*  	RST.LIL 08h
047F46 21 32 11 00 0253*  	ld hl,BUF_4402
047F4A 01 09 00 00 0254*  	ld bc,9
047F4E 11 12 00 00 0255*  	ld de,18
047F52 DD 21 A2 00 0256*  	ld ix,162
       00          
047F57 CD 3C B9 04 0257*  	call vdu_load_img
047F5B             0258*  
047F5B 21 51 88 04 0259*  	ld hl,Fhonda051
047F5F 11 CB C3 04 0260*  	ld de,filedata
047F63 01 00 00 01 0261*  	ld bc,65536
047F67 3E 01       0262*  	ld a,mos_load
047F69 5B CF       0263*  	RST.LIL 08h
047F6B 21 33 11 00 0264*  	ld hl,BUF_4403
047F6F 01 0A 00 00 0265*  	ld bc,10
047F73 11 12 00 00 0266*  	ld de,18
047F77 DD 21 B4 00 0267*  	ld ix,180
       00          
047F7C CD 3C B9 04 0268*  	call vdu_load_img
047F80             0269*  
047F80 21 67 88 04 0270*  	ld hl,Fhonda052
047F84 11 CB C3 04 0271*  	ld de,filedata
047F88 01 00 00 01 0272*  	ld bc,65536
047F8C 3E 01       0273*  	ld a,mos_load
047F8E 5B CF       0274*  	RST.LIL 08h
047F90 21 34 11 00 0275*  	ld hl,BUF_4404
047F94 01 0C 00 00 0276*  	ld bc,12
047F98 11 12 00 00 0277*  	ld de,18
047F9C DD 21 D8 00 0278*  	ld ix,216
       00          
047FA1 CD 3C B9 04 0279*  	call vdu_load_img
047FA5             0280*  
047FA5 21 7D 88 04 0281*  	ld hl,Fhonda053
047FA9 11 CB C3 04 0282*  	ld de,filedata
047FAD 01 00 00 01 0283*  	ld bc,65536
047FB1 3E 01       0284*  	ld a,mos_load
047FB3 5B CF       0285*  	RST.LIL 08h
047FB5 21 35 11 00 0286*  	ld hl,BUF_4405
047FB9 01 0A 00 00 0287*  	ld bc,10
047FBD 11 12 00 00 0288*  	ld de,18
047FC1 DD 21 B4 00 0289*  	ld ix,180
       00          
047FC6 CD 3C B9 04 0290*  	call vdu_load_img
047FCA             0291*  
047FCA 21 93 88 04 0292*  	ld hl,Fhonda054
047FCE 11 CB C3 04 0293*  	ld de,filedata
047FD2 01 00 00 01 0294*  	ld bc,65536
047FD6 3E 01       0295*  	ld a,mos_load
047FD8 5B CF       0296*  	RST.LIL 08h
047FDA 21 36 11 00 0297*  	ld hl,BUF_4406
047FDE 01 0A 00 00 0298*  	ld bc,10
047FE2 11 12 00 00 0299*  	ld de,18
047FE6 DD 21 B4 00 0300*  	ld ix,180
       00          
047FEB CD 3C B9 04 0301*  	call vdu_load_img
047FEF             0302*  
047FEF 21 A9 88 04 0303*  	ld hl,Fhonda055
047FF3 11 CB C3 04 0304*  	ld de,filedata
047FF7 01 00 00 01 0305*  	ld bc,65536
047FFB 3E 01       0306*  	ld a,mos_load
047FFD 5B CF       0307*  	RST.LIL 08h
047FFF 21 37 11 00 0308*  	ld hl,BUF_4407
048003 01 08 00 00 0309*  	ld bc,8
048007 11 12 00 00 0310*  	ld de,18
04800B DD 21 90 00 0311*  	ld ix,144
       00          
048010 CD 3C B9 04 0312*  	call vdu_load_img
048014             0313*  
048014 21 BF 88 04 0314*  	ld hl,Fhonda056
048018 11 CB C3 04 0315*  	ld de,filedata
04801C 01 00 00 01 0316*  	ld bc,65536
048020 3E 01       0317*  	ld a,mos_load
048022 5B CF       0318*  	RST.LIL 08h
048024 21 38 11 00 0319*  	ld hl,BUF_4408
048028 01 0A 00 00 0320*  	ld bc,10
04802C 11 12 00 00 0321*  	ld de,18
048030 DD 21 B4 00 0322*  	ld ix,180
       00          
048035 CD 3C B9 04 0323*  	call vdu_load_img
048039             0324*  
048039 21 D5 88 04 0325*  	ld hl,Fhonda057
04803D 11 CB C3 04 0326*  	ld de,filedata
048041 01 00 00 01 0327*  	ld bc,65536
048045 3E 01       0328*  	ld a,mos_load
048047 5B CF       0329*  	RST.LIL 08h
048049 21 39 11 00 0330*  	ld hl,BUF_4409
04804D 01 0A 00 00 0331*  	ld bc,10
048051 11 12 00 00 0332*  	ld de,18
048055 DD 21 B4 00 0333*  	ld ix,180
       00          
04805A CD 3C B9 04 0334*  	call vdu_load_img
04805E             0335*  ; Missing character 58
04805E             0336*  ; Missing character 59
04805E             0337*  ; Missing character 60
04805E             0338*  ; Missing character 61
04805E             0339*  ; Missing character 62
04805E             0340*  ; Missing character 63
04805E             0341*  ; Missing character 64
04805E             0342*  
04805E 21 EB 88 04 0343*  	ld hl,Fhonda065
048062 11 CB C3 04 0344*  	ld de,filedata
048066 01 00 00 01 0345*  	ld bc,65536
04806A 3E 01       0346*  	ld a,mos_load
04806C 5B CF       0347*  	RST.LIL 08h
04806E 21 41 11 00 0348*  	ld hl,BUF_4417
048072 01 0A 00 00 0349*  	ld bc,10
048076 11 12 00 00 0350*  	ld de,18
04807A DD 21 B4 00 0351*  	ld ix,180
       00          
04807F CD 3C B9 04 0352*  	call vdu_load_img
048083             0353*  
048083 21 01 89 04 0354*  	ld hl,Fhonda066
048087 11 CB C3 04 0355*  	ld de,filedata
04808B 01 00 00 01 0356*  	ld bc,65536
04808F 3E 01       0357*  	ld a,mos_load
048091 5B CF       0358*  	RST.LIL 08h
048093 21 42 11 00 0359*  	ld hl,BUF_4418
048097 01 0A 00 00 0360*  	ld bc,10
04809B 11 12 00 00 0361*  	ld de,18
04809F DD 21 B4 00 0362*  	ld ix,180
       00          
0480A4 CD 3C B9 04 0363*  	call vdu_load_img
0480A8             0364*  
0480A8 21 17 89 04 0365*  	ld hl,Fhonda067
0480AC 11 CB C3 04 0366*  	ld de,filedata
0480B0 01 00 00 01 0367*  	ld bc,65536
0480B4 3E 01       0368*  	ld a,mos_load
0480B6 5B CF       0369*  	RST.LIL 08h
0480B8 21 43 11 00 0370*  	ld hl,BUF_4419
0480BC 01 08 00 00 0371*  	ld bc,8
0480C0 11 13 00 00 0372*  	ld de,19
0480C4 DD 21 98 00 0373*  	ld ix,152
       00          
0480C9 CD 3C B9 04 0374*  	call vdu_load_img
0480CD             0375*  
0480CD 21 2D 89 04 0376*  	ld hl,Fhonda068
0480D1 11 CB C3 04 0377*  	ld de,filedata
0480D5 01 00 00 01 0378*  	ld bc,65536
0480D9 3E 01       0379*  	ld a,mos_load
0480DB 5B CF       0380*  	RST.LIL 08h
0480DD 21 44 11 00 0381*  	ld hl,BUF_4420
0480E1 01 0A 00 00 0382*  	ld bc,10
0480E5 11 12 00 00 0383*  	ld de,18
0480E9 DD 21 B4 00 0384*  	ld ix,180
       00          
0480EE CD 3C B9 04 0385*  	call vdu_load_img
0480F2             0386*  
0480F2 21 43 89 04 0387*  	ld hl,Fhonda069
0480F6 11 CB C3 04 0388*  	ld de,filedata
0480FA 01 00 00 01 0389*  	ld bc,65536
0480FE 3E 01       0390*  	ld a,mos_load
048100 5B CF       0391*  	RST.LIL 08h
048102 21 45 11 00 0392*  	ld hl,BUF_4421
048106 01 08 00 00 0393*  	ld bc,8
04810A 11 12 00 00 0394*  	ld de,18
04810E DD 21 90 00 0395*  	ld ix,144
       00          
048113 CD 3C B9 04 0396*  	call vdu_load_img
048117             0397*  
048117 21 59 89 04 0398*  	ld hl,Fhonda070
04811B 11 CB C3 04 0399*  	ld de,filedata
04811F 01 00 00 01 0400*  	ld bc,65536
048123 3E 01       0401*  	ld a,mos_load
048125 5B CF       0402*  	RST.LIL 08h
048127 21 46 11 00 0403*  	ld hl,BUF_4422
04812B 01 08 00 00 0404*  	ld bc,8
04812F 11 12 00 00 0405*  	ld de,18
048133 DD 21 90 00 0406*  	ld ix,144
       00          
048138 CD 3C B9 04 0407*  	call vdu_load_img
04813C             0408*  
04813C 21 6F 89 04 0409*  	ld hl,Fhonda071
048140 11 CB C3 04 0410*  	ld de,filedata
048144 01 00 00 01 0411*  	ld bc,65536
048148 3E 01       0412*  	ld a,mos_load
04814A 5B CF       0413*  	RST.LIL 08h
04814C 21 47 11 00 0414*  	ld hl,BUF_4423
048150 01 0A 00 00 0415*  	ld bc,10
048154 11 12 00 00 0416*  	ld de,18
048158 DD 21 B4 00 0417*  	ld ix,180
       00          
04815D CD 3C B9 04 0418*  	call vdu_load_img
048161             0419*  
048161 21 85 89 04 0420*  	ld hl,Fhonda072
048165 11 CB C3 04 0421*  	ld de,filedata
048169 01 00 00 01 0422*  	ld bc,65536
04816D 3E 01       0423*  	ld a,mos_load
04816F 5B CF       0424*  	RST.LIL 08h
048171 21 48 11 00 0425*  	ld hl,BUF_4424
048175 01 0A 00 00 0426*  	ld bc,10
048179 11 12 00 00 0427*  	ld de,18
04817D DD 21 B4 00 0428*  	ld ix,180
       00          
048182 CD 3C B9 04 0429*  	call vdu_load_img
048186             0430*  
048186 21 9B 89 04 0431*  	ld hl,Fhonda073
04818A 11 CB C3 04 0432*  	ld de,filedata
04818E 01 00 00 01 0433*  	ld bc,65536
048192 3E 01       0434*  	ld a,mos_load
048194 5B CF       0435*  	RST.LIL 08h
048196 21 49 11 00 0436*  	ld hl,BUF_4425
04819A 01 03 00 00 0437*  	ld bc,3
04819E 11 12 00 00 0438*  	ld de,18
0481A2 DD 21 36 00 0439*  	ld ix,54
       00          
0481A7 CD 3C B9 04 0440*  	call vdu_load_img
0481AB             0441*  
0481AB 21 B1 89 04 0442*  	ld hl,Fhonda074
0481AF 11 CB C3 04 0443*  	ld de,filedata
0481B3 01 00 00 01 0444*  	ld bc,65536
0481B7 3E 01       0445*  	ld a,mos_load
0481B9 5B CF       0446*  	RST.LIL 08h
0481BB 21 4A 11 00 0447*  	ld hl,BUF_4426
0481BF 01 06 00 00 0448*  	ld bc,6
0481C3 11 12 00 00 0449*  	ld de,18
0481C7 DD 21 6C 00 0450*  	ld ix,108
       00          
0481CC CD 3C B9 04 0451*  	call vdu_load_img
0481D0             0452*  
0481D0 21 C7 89 04 0453*  	ld hl,Fhonda075
0481D4 11 CB C3 04 0454*  	ld de,filedata
0481D8 01 00 00 01 0455*  	ld bc,65536
0481DC 3E 01       0456*  	ld a,mos_load
0481DE 5B CF       0457*  	RST.LIL 08h
0481E0 21 4B 11 00 0458*  	ld hl,BUF_4427
0481E4 01 0A 00 00 0459*  	ld bc,10
0481E8 11 12 00 00 0460*  	ld de,18
0481EC DD 21 B4 00 0461*  	ld ix,180
       00          
0481F1 CD 3C B9 04 0462*  	call vdu_load_img
0481F5             0463*  
0481F5 21 DD 89 04 0464*  	ld hl,Fhonda076
0481F9 11 CB C3 04 0465*  	ld de,filedata
0481FD 01 00 00 01 0466*  	ld bc,65536
048201 3E 01       0467*  	ld a,mos_load
048203 5B CF       0468*  	RST.LIL 08h
048205 21 4C 11 00 0469*  	ld hl,BUF_4428
048209 01 08 00 00 0470*  	ld bc,8
04820D 11 12 00 00 0471*  	ld de,18
048211 DD 21 90 00 0472*  	ld ix,144
       00          
048216 CD 3C B9 04 0473*  	call vdu_load_img
04821A             0474*  
04821A 21 F3 89 04 0475*  	ld hl,Fhonda077
04821E 11 CB C3 04 0476*  	ld de,filedata
048222 01 00 00 01 0477*  	ld bc,65536
048226 3E 01       0478*  	ld a,mos_load
048228 5B CF       0479*  	RST.LIL 08h
04822A 21 4D 11 00 0480*  	ld hl,BUF_4429
04822E 01 0E 00 00 0481*  	ld bc,14
048232 11 12 00 00 0482*  	ld de,18
048236 DD 21 FC 00 0483*  	ld ix,252
       00          
04823B CD 3C B9 04 0484*  	call vdu_load_img
04823F             0485*  
04823F 21 09 8A 04 0486*  	ld hl,Fhonda078
048243 11 CB C3 04 0487*  	ld de,filedata
048247 01 00 00 01 0488*  	ld bc,65536
04824B 3E 01       0489*  	ld a,mos_load
04824D 5B CF       0490*  	RST.LIL 08h
04824F 21 4E 11 00 0491*  	ld hl,BUF_4430
048253 01 0A 00 00 0492*  	ld bc,10
048257 11 12 00 00 0493*  	ld de,18
04825B DD 21 B4 00 0494*  	ld ix,180
       00          
048260 CD 3C B9 04 0495*  	call vdu_load_img
048264             0496*  
048264 21 1F 8A 04 0497*  	ld hl,Fhonda079
048268 11 CB C3 04 0498*  	ld de,filedata
04826C 01 00 00 01 0499*  	ld bc,65536
048270 3E 01       0500*  	ld a,mos_load
048272 5B CF       0501*  	RST.LIL 08h
048274 21 4F 11 00 0502*  	ld hl,BUF_4431
048278 01 0A 00 00 0503*  	ld bc,10
04827C 11 12 00 00 0504*  	ld de,18
048280 DD 21 B4 00 0505*  	ld ix,180
       00          
048285 CD 3C B9 04 0506*  	call vdu_load_img
048289             0507*  
048289 21 35 8A 04 0508*  	ld hl,Fhonda080
04828D 11 CB C3 04 0509*  	ld de,filedata
048291 01 00 00 01 0510*  	ld bc,65536
048295 3E 01       0511*  	ld a,mos_load
048297 5B CF       0512*  	RST.LIL 08h
048299 21 50 11 00 0513*  	ld hl,BUF_4432
04829D 01 0A 00 00 0514*  	ld bc,10
0482A1 11 12 00 00 0515*  	ld de,18
0482A5 DD 21 B4 00 0516*  	ld ix,180
       00          
0482AA CD 3C B9 04 0517*  	call vdu_load_img
0482AE             0518*  
0482AE 21 4B 8A 04 0519*  	ld hl,Fhonda081
0482B2 11 CB C3 04 0520*  	ld de,filedata
0482B6 01 00 00 01 0521*  	ld bc,65536
0482BA 3E 01       0522*  	ld a,mos_load
0482BC 5B CF       0523*  	RST.LIL 08h
0482BE 21 51 11 00 0524*  	ld hl,BUF_4433
0482C2 01 0A 00 00 0525*  	ld bc,10
0482C6 11 15 00 00 0526*  	ld de,21
0482CA DD 21 D2 00 0527*  	ld ix,210
       00          
0482CF CD 3C B9 04 0528*  	call vdu_load_img
0482D3             0529*  
0482D3 21 61 8A 04 0530*  	ld hl,Fhonda082
0482D7 11 CB C3 04 0531*  	ld de,filedata
0482DB 01 00 00 01 0532*  	ld bc,65536
0482DF 3E 01       0533*  	ld a,mos_load
0482E1 5B CF       0534*  	RST.LIL 08h
0482E3 21 52 11 00 0535*  	ld hl,BUF_4434
0482E7 01 0A 00 00 0536*  	ld bc,10
0482EB 11 12 00 00 0537*  	ld de,18
0482EF DD 21 B4 00 0538*  	ld ix,180
       00          
0482F4 CD 3C B9 04 0539*  	call vdu_load_img
0482F8             0540*  
0482F8 21 77 8A 04 0541*  	ld hl,Fhonda083
0482FC 11 CB C3 04 0542*  	ld de,filedata
048300 01 00 00 01 0543*  	ld bc,65536
048304 3E 01       0544*  	ld a,mos_load
048306 5B CF       0545*  	RST.LIL 08h
048308 21 53 11 00 0546*  	ld hl,BUF_4435
04830C 01 09 00 00 0547*  	ld bc,9
048310 11 13 00 00 0548*  	ld de,19
048314 DD 21 AB 00 0549*  	ld ix,171
       00          
048319 CD 3C B9 04 0550*  	call vdu_load_img
04831D             0551*  
04831D 21 8D 8A 04 0552*  	ld hl,Fhonda084
048321 11 CB C3 04 0553*  	ld de,filedata
048325 01 00 00 01 0554*  	ld bc,65536
048329 3E 01       0555*  	ld a,mos_load
04832B 5B CF       0556*  	RST.LIL 08h
04832D 21 54 11 00 0557*  	ld hl,BUF_4436
048331 01 0A 00 00 0558*  	ld bc,10
048335 11 12 00 00 0559*  	ld de,18
048339 DD 21 B4 00 0560*  	ld ix,180
       00          
04833E CD 3C B9 04 0561*  	call vdu_load_img
048342             0562*  
048342 21 A3 8A 04 0563*  	ld hl,Fhonda085
048346 11 CB C3 04 0564*  	ld de,filedata
04834A 01 00 00 01 0565*  	ld bc,65536
04834E 3E 01       0566*  	ld a,mos_load
048350 5B CF       0567*  	RST.LIL 08h
048352 21 55 11 00 0568*  	ld hl,BUF_4437
048356 01 0A 00 00 0569*  	ld bc,10
04835A 11 12 00 00 0570*  	ld de,18
04835E DD 21 B4 00 0571*  	ld ix,180
       00          
048363 CD 3C B9 04 0572*  	call vdu_load_img
048367             0573*  
048367 21 B9 8A 04 0574*  	ld hl,Fhonda086
04836B 11 CB C3 04 0575*  	ld de,filedata
04836F 01 00 00 01 0576*  	ld bc,65536
048373 3E 01       0577*  	ld a,mos_load
048375 5B CF       0578*  	RST.LIL 08h
048377 21 56 11 00 0579*  	ld hl,BUF_4438
04837B 01 0A 00 00 0580*  	ld bc,10
04837F 11 12 00 00 0581*  	ld de,18
048383 DD 21 B4 00 0582*  	ld ix,180
       00          
048388 CD 3C B9 04 0583*  	call vdu_load_img
04838C             0584*  
04838C 21 CF 8A 04 0585*  	ld hl,Fhonda087
048390 11 CB C3 04 0586*  	ld de,filedata
048394 01 00 00 01 0587*  	ld bc,65536
048398 3E 01       0588*  	ld a,mos_load
04839A 5B CF       0589*  	RST.LIL 08h
04839C 21 57 11 00 0590*  	ld hl,BUF_4439
0483A0 01 10 00 00 0591*  	ld bc,16
0483A4 11 12 00 00 0592*  	ld de,18
0483A8 DD 21 20 01 0593*  	ld ix,288
       00          
0483AD CD 3C B9 04 0594*  	call vdu_load_img
0483B1             0595*  
0483B1 21 E5 8A 04 0596*  	ld hl,Fhonda088
0483B5 11 CB C3 04 0597*  	ld de,filedata
0483B9 01 00 00 01 0598*  	ld bc,65536
0483BD 3E 01       0599*  	ld a,mos_load
0483BF 5B CF       0600*  	RST.LIL 08h
0483C1 21 58 11 00 0601*  	ld hl,BUF_4440
0483C5 01 0A 00 00 0602*  	ld bc,10
0483C9 11 12 00 00 0603*  	ld de,18
0483CD DD 21 B4 00 0604*  	ld ix,180
       00          
0483D2 CD 3C B9 04 0605*  	call vdu_load_img
0483D6             0606*  
0483D6 21 FB 8A 04 0607*  	ld hl,Fhonda089
0483DA 11 CB C3 04 0608*  	ld de,filedata
0483DE 01 00 00 01 0609*  	ld bc,65536
0483E2 3E 01       0610*  	ld a,mos_load
0483E4 5B CF       0611*  	RST.LIL 08h
0483E6 21 59 11 00 0612*  	ld hl,BUF_4441
0483EA 01 0A 00 00 0613*  	ld bc,10
0483EE 11 12 00 00 0614*  	ld de,18
0483F2 DD 21 B4 00 0615*  	ld ix,180
       00          
0483F7 CD 3C B9 04 0616*  	call vdu_load_img
0483FB             0617*  
0483FB 21 11 8B 04 0618*  	ld hl,Fhonda090
0483FF 11 CB C3 04 0619*  	ld de,filedata
048403 01 00 00 01 0620*  	ld bc,65536
048407 3E 01       0621*  	ld a,mos_load
048409 5B CF       0622*  	RST.LIL 08h
04840B 21 5A 11 00 0623*  	ld hl,BUF_4442
04840F 01 09 00 00 0624*  	ld bc,9
048413 11 12 00 00 0625*  	ld de,18
048417 DD 21 A2 00 0626*  	ld ix,162
       00          
04841C CD 3C B9 04 0627*  	call vdu_load_img
048420             0628*  ; Missing character 91
048420             0629*  ; Missing character 92
048420             0630*  ; Missing character 93
048420             0631*  ; Missing character 94
048420             0632*  ; Missing character 95
048420             0633*  ; Missing character 96
048420             0634*  
048420 21 27 8B 04 0635*  	ld hl,Fhonda097
048424 11 CB C3 04 0636*  	ld de,filedata
048428 01 00 00 01 0637*  	ld bc,65536
04842C 3E 01       0638*  	ld a,mos_load
04842E 5B CF       0639*  	RST.LIL 08h
048430 21 61 11 00 0640*  	ld hl,BUF_4449
048434 01 08 00 00 0641*  	ld bc,8
048438 11 0C 00 00 0642*  	ld de,12
04843C DD 21 60 00 0643*  	ld ix,96
       00          
048441 CD 3C B9 04 0644*  	call vdu_load_img
048445             0645*  
048445 21 3D 8B 04 0646*  	ld hl,Fhonda098
048449 11 CB C3 04 0647*  	ld de,filedata
04844D 01 00 00 01 0648*  	ld bc,65536
048451 3E 01       0649*  	ld a,mos_load
048453 5B CF       0650*  	RST.LIL 08h
048455 21 62 11 00 0651*  	ld hl,BUF_4450
048459 01 09 00 00 0652*  	ld bc,9
04845D 11 12 00 00 0653*  	ld de,18
048461 DD 21 A2 00 0654*  	ld ix,162
       00          
048466 CD 3C B9 04 0655*  	call vdu_load_img
04846A             0656*  
04846A 21 53 8B 04 0657*  	ld hl,Fhonda099
04846E 11 CB C3 04 0658*  	ld de,filedata
048472 01 00 00 01 0659*  	ld bc,65536
048476 3E 01       0660*  	ld a,mos_load
048478 5B CF       0661*  	RST.LIL 08h
04847A 21 63 11 00 0662*  	ld hl,BUF_4451
04847E 01 07 00 00 0663*  	ld bc,7
048482 11 0C 00 00 0664*  	ld de,12
048486 DD 21 54 00 0665*  	ld ix,84
       00          
04848B CD 3C B9 04 0666*  	call vdu_load_img
04848F             0667*  
04848F 21 69 8B 04 0668*  	ld hl,Fhonda100
048493 11 CB C3 04 0669*  	ld de,filedata
048497 01 00 00 01 0670*  	ld bc,65536
04849B 3E 01       0671*  	ld a,mos_load
04849D 5B CF       0672*  	RST.LIL 08h
04849F 21 64 11 00 0673*  	ld hl,BUF_4452
0484A3 01 09 00 00 0674*  	ld bc,9
0484A7 11 12 00 00 0675*  	ld de,18
0484AB DD 21 A2 00 0676*  	ld ix,162
       00          
0484B0 CD 3C B9 04 0677*  	call vdu_load_img
0484B4             0678*  
0484B4 21 7F 8B 04 0679*  	ld hl,Fhonda101
0484B8 11 CB C3 04 0680*  	ld de,filedata
0484BC 01 00 00 01 0681*  	ld bc,65536
0484C0 3E 01       0682*  	ld a,mos_load
0484C2 5B CF       0683*  	RST.LIL 08h
0484C4 21 65 11 00 0684*  	ld hl,BUF_4453
0484C8 01 08 00 00 0685*  	ld bc,8
0484CC 11 0C 00 00 0686*  	ld de,12
0484D0 DD 21 60 00 0687*  	ld ix,96
       00          
0484D5 CD 3C B9 04 0688*  	call vdu_load_img
0484D9             0689*  
0484D9 21 95 8B 04 0690*  	ld hl,Fhonda102
0484DD 11 CB C3 04 0691*  	ld de,filedata
0484E1 01 00 00 01 0692*  	ld bc,65536
0484E5 3E 01       0693*  	ld a,mos_load
0484E7 5B CF       0694*  	RST.LIL 08h
0484E9 21 66 11 00 0695*  	ld hl,BUF_4454
0484ED 01 09 00 00 0696*  	ld bc,9
0484F1 11 12 00 00 0697*  	ld de,18
0484F5 DD 21 A2 00 0698*  	ld ix,162
       00          
0484FA CD 3C B9 04 0699*  	call vdu_load_img
0484FE             0700*  
0484FE 21 AB 8B 04 0701*  	ld hl,Fhonda103
048502 11 CB C3 04 0702*  	ld de,filedata
048506 01 00 00 01 0703*  	ld bc,65536
04850A 3E 01       0704*  	ld a,mos_load
04850C 5B CF       0705*  	RST.LIL 08h
04850E 21 67 11 00 0706*  	ld hl,BUF_4455
048512 01 09 00 00 0707*  	ld bc,9
048516 11 12 00 00 0708*  	ld de,18
04851A DD 21 A2 00 0709*  	ld ix,162
       00          
04851F CD 3C B9 04 0710*  	call vdu_load_img
048523             0711*  
048523 21 C1 8B 04 0712*  	ld hl,Fhonda104
048527 11 CB C3 04 0713*  	ld de,filedata
04852B 01 00 00 01 0714*  	ld bc,65536
04852F 3E 01       0715*  	ld a,mos_load
048531 5B CF       0716*  	RST.LIL 08h
048533 21 68 11 00 0717*  	ld hl,BUF_4456
048537 01 09 00 00 0718*  	ld bc,9
04853B 11 12 00 00 0719*  	ld de,18
04853F DD 21 A2 00 0720*  	ld ix,162
       00          
048544 CD 3C B9 04 0721*  	call vdu_load_img
048548             0722*  
048548 21 D7 8B 04 0723*  	ld hl,Fhonda105
04854C 11 CB C3 04 0724*  	ld de,filedata
048550 01 00 00 01 0725*  	ld bc,65536
048554 3E 01       0726*  	ld a,mos_load
048556 5B CF       0727*  	RST.LIL 08h
048558 21 69 11 00 0728*  	ld hl,BUF_4457
04855C 01 04 00 00 0729*  	ld bc,4
048560 11 12 00 00 0730*  	ld de,18
048564 DD 21 48 00 0731*  	ld ix,72
       00          
048569 CD 3C B9 04 0732*  	call vdu_load_img
04856D             0733*  
04856D 21 ED 8B 04 0734*  	ld hl,Fhonda106
048571 11 CB C3 04 0735*  	ld de,filedata
048575 01 00 00 01 0736*  	ld bc,65536
048579 3E 01       0737*  	ld a,mos_load
04857B 5B CF       0738*  	RST.LIL 08h
04857D 21 6A 11 00 0739*  	ld hl,BUF_4458
048581 01 08 00 00 0740*  	ld bc,8
048585 11 18 00 00 0741*  	ld de,24
048589 DD 21 C0 00 0742*  	ld ix,192
       00          
04858E CD 3C B9 04 0743*  	call vdu_load_img
048592             0744*  
048592 21 03 8C 04 0745*  	ld hl,Fhonda107
048596 11 CB C3 04 0746*  	ld de,filedata
04859A 01 00 00 01 0747*  	ld bc,65536
04859E 3E 01       0748*  	ld a,mos_load
0485A0 5B CF       0749*  	RST.LIL 08h
0485A2 21 6B 11 00 0750*  	ld hl,BUF_4459
0485A6 01 09 00 00 0751*  	ld bc,9
0485AA 11 12 00 00 0752*  	ld de,18
0485AE DD 21 A2 00 0753*  	ld ix,162
       00          
0485B3 CD 3C B9 04 0754*  	call vdu_load_img
0485B7             0755*  
0485B7 21 19 8C 04 0756*  	ld hl,Fhonda108
0485BB 11 CB C3 04 0757*  	ld de,filedata
0485BF 01 00 00 01 0758*  	ld bc,65536
0485C3 3E 01       0759*  	ld a,mos_load
0485C5 5B CF       0760*  	RST.LIL 08h
0485C7 21 6C 11 00 0761*  	ld hl,BUF_4460
0485CB 01 03 00 00 0762*  	ld bc,3
0485CF 11 12 00 00 0763*  	ld de,18
0485D3 DD 21 36 00 0764*  	ld ix,54
       00          
0485D8 CD 3C B9 04 0765*  	call vdu_load_img
0485DC             0766*  
0485DC 21 2F 8C 04 0767*  	ld hl,Fhonda109
0485E0 11 CB C3 04 0768*  	ld de,filedata
0485E4 01 00 00 01 0769*  	ld bc,65536
0485E8 3E 01       0770*  	ld a,mos_load
0485EA 5B CF       0771*  	RST.LIL 08h
0485EC 21 6D 11 00 0772*  	ld hl,BUF_4461
0485F0 01 0E 00 00 0773*  	ld bc,14
0485F4 11 0D 00 00 0774*  	ld de,13
0485F8 DD 21 B6 00 0775*  	ld ix,182
       00          
0485FD CD 3C B9 04 0776*  	call vdu_load_img
048601             0777*  
048601 21 45 8C 04 0778*  	ld hl,Fhonda110
048605 11 CB C3 04 0779*  	ld de,filedata
048609 01 00 00 01 0780*  	ld bc,65536
04860D 3E 01       0781*  	ld a,mos_load
04860F 5B CF       0782*  	RST.LIL 08h
048611 21 6E 11 00 0783*  	ld hl,BUF_4462
048615 01 09 00 00 0784*  	ld bc,9
048619 11 0C 00 00 0785*  	ld de,12
04861D DD 21 6C 00 0786*  	ld ix,108
       00          
048622 CD 3C B9 04 0787*  	call vdu_load_img
048626             0788*  
048626 21 5B 8C 04 0789*  	ld hl,Fhonda111
04862A 11 CB C3 04 0790*  	ld de,filedata
04862E 01 00 00 01 0791*  	ld bc,65536
048632 3E 01       0792*  	ld a,mos_load
048634 5B CF       0793*  	RST.LIL 08h
048636 21 6F 11 00 0794*  	ld hl,BUF_4463
04863A 01 09 00 00 0795*  	ld bc,9
04863E 11 0C 00 00 0796*  	ld de,12
048642 DD 21 6C 00 0797*  	ld ix,108
       00          
048647 CD 3C B9 04 0798*  	call vdu_load_img
04864B             0799*  
04864B 21 71 8C 04 0800*  	ld hl,Fhonda112
04864F 11 CB C3 04 0801*  	ld de,filedata
048653 01 00 00 01 0802*  	ld bc,65536
048657 3E 01       0803*  	ld a,mos_load
048659 5B CF       0804*  	RST.LIL 08h
04865B 21 70 11 00 0805*  	ld hl,BUF_4464
04865F 01 09 00 00 0806*  	ld bc,9
048663 11 12 00 00 0807*  	ld de,18
048667 DD 21 A2 00 0808*  	ld ix,162
       00          
04866C CD 3C B9 04 0809*  	call vdu_load_img
048670             0810*  
048670 21 87 8C 04 0811*  	ld hl,Fhonda113
048674 11 CB C3 04 0812*  	ld de,filedata
048678 01 00 00 01 0813*  	ld bc,65536
04867C 3E 01       0814*  	ld a,mos_load
04867E 5B CF       0815*  	RST.LIL 08h
048680 21 71 11 00 0816*  	ld hl,BUF_4465
048684 01 09 00 00 0817*  	ld bc,9
048688 11 12 00 00 0818*  	ld de,18
04868C DD 21 A2 00 0819*  	ld ix,162
       00          
048691 CD 3C B9 04 0820*  	call vdu_load_img
048695             0821*  
048695 21 9D 8C 04 0822*  	ld hl,Fhonda114
048699 11 CB C3 04 0823*  	ld de,filedata
04869D 01 00 00 01 0824*  	ld bc,65536
0486A1 3E 01       0825*  	ld a,mos_load
0486A3 5B CF       0826*  	RST.LIL 08h
0486A5 21 72 11 00 0827*  	ld hl,BUF_4466
0486A9 01 06 00 00 0828*  	ld bc,6
0486AD 11 0D 00 00 0829*  	ld de,13
0486B1 DD 21 4E 00 0830*  	ld ix,78
       00          
0486B6 CD 3C B9 04 0831*  	call vdu_load_img
0486BA             0832*  
0486BA 21 B3 8C 04 0833*  	ld hl,Fhonda115
0486BE 11 CB C3 04 0834*  	ld de,filedata
0486C2 01 00 00 01 0835*  	ld bc,65536
0486C6 3E 01       0836*  	ld a,mos_load
0486C8 5B CF       0837*  	RST.LIL 08h
0486CA 21 73 11 00 0838*  	ld hl,BUF_4467
0486CE 01 08 00 00 0839*  	ld bc,8
0486D2 11 0D 00 00 0840*  	ld de,13
0486D6 DD 21 68 00 0841*  	ld ix,104
       00          
0486DB CD 3C B9 04 0842*  	call vdu_load_img
0486DF             0843*  
0486DF 21 C9 8C 04 0844*  	ld hl,Fhonda116
0486E3 11 CB C3 04 0845*  	ld de,filedata
0486E7 01 00 00 01 0846*  	ld bc,65536
0486EB 3E 01       0847*  	ld a,mos_load
0486ED 5B CF       0848*  	RST.LIL 08h
0486EF 21 74 11 00 0849*  	ld hl,BUF_4468
0486F3 01 07 00 00 0850*  	ld bc,7
0486F7 11 0F 00 00 0851*  	ld de,15
0486FB DD 21 69 00 0852*  	ld ix,105
       00          
048700 CD 3C B9 04 0853*  	call vdu_load_img
048704             0854*  
048704 21 DF 8C 04 0855*  	ld hl,Fhonda117
048708 11 CB C3 04 0856*  	ld de,filedata
04870C 01 00 00 01 0857*  	ld bc,65536
048710 3E 01       0858*  	ld a,mos_load
048712 5B CF       0859*  	RST.LIL 08h
048714 21 75 11 00 0860*  	ld hl,BUF_4469
048718 01 09 00 00 0861*  	ld bc,9
04871C 11 0C 00 00 0862*  	ld de,12
048720 DD 21 6C 00 0863*  	ld ix,108
       00          
048725 CD 3C B9 04 0864*  	call vdu_load_img
048729             0865*  
048729 21 F5 8C 04 0866*  	ld hl,Fhonda118
04872D 11 CB C3 04 0867*  	ld de,filedata
048731 01 00 00 01 0868*  	ld bc,65536
048735 3E 01       0869*  	ld a,mos_load
048737 5B CF       0870*  	RST.LIL 08h
048739 21 76 11 00 0871*  	ld hl,BUF_4470
04873D 01 09 00 00 0872*  	ld bc,9
048741 11 0C 00 00 0873*  	ld de,12
048745 DD 21 6C 00 0874*  	ld ix,108
       00          
04874A CD 3C B9 04 0875*  	call vdu_load_img
04874E             0876*  
04874E 21 0B 8D 04 0877*  	ld hl,Fhonda119
048752 11 CB C3 04 0878*  	ld de,filedata
048756 01 00 00 01 0879*  	ld bc,65536
04875A 3E 01       0880*  	ld a,mos_load
04875C 5B CF       0881*  	RST.LIL 08h
04875E 21 77 11 00 0882*  	ld hl,BUF_4471
048762 01 0E 00 00 0883*  	ld bc,14
048766 11 0C 00 00 0884*  	ld de,12
04876A DD 21 A8 00 0885*  	ld ix,168
       00          
04876F CD 3C B9 04 0886*  	call vdu_load_img
048773             0887*  
048773 21 21 8D 04 0888*  	ld hl,Fhonda120
048777 11 CB C3 04 0889*  	ld de,filedata
04877B 01 00 00 01 0890*  	ld bc,65536
04877F 3E 01       0891*  	ld a,mos_load
048781 5B CF       0892*  	RST.LIL 08h
048783 21 78 11 00 0893*  	ld hl,BUF_4472
048787 01 09 00 00 0894*  	ld bc,9
04878B 11 0C 00 00 0895*  	ld de,12
04878F DD 21 6C 00 0896*  	ld ix,108
       00          
048794 CD 3C B9 04 0897*  	call vdu_load_img
048798             0898*  
048798 21 37 8D 04 0899*  	ld hl,Fhonda121
04879C 11 CB C3 04 0900*  	ld de,filedata
0487A0 01 00 00 01 0901*  	ld bc,65536
0487A4 3E 01       0902*  	ld a,mos_load
0487A6 5B CF       0903*  	RST.LIL 08h
0487A8 21 79 11 00 0904*  	ld hl,BUF_4473
0487AC 01 09 00 00 0905*  	ld bc,9
0487B0 11 11 00 00 0906*  	ld de,17
0487B4 DD 21 99 00 0907*  	ld ix,153
       00          
0487B9 CD 3C B9 04 0908*  	call vdu_load_img
0487BD             0909*  
0487BD 21 4D 8D 04 0910*  	ld hl,Fhonda122
0487C1 11 CB C3 04 0911*  	ld de,filedata
0487C5 01 00 00 01 0912*  	ld bc,65536
0487C9 3E 01       0913*  	ld a,mos_load
0487CB 5B CF       0914*  	RST.LIL 08h
0487CD 21 7A 11 00 0915*  	ld hl,BUF_4474
0487D1 01 09 00 00 0916*  	ld bc,9
0487D5 11 0C 00 00 0917*  	ld de,12
0487D9 DD 21 6C 00 0918*  	ld ix,108
       00          
0487DE CD 3C B9 04 0919*  	call vdu_load_img
0487E2             0920*  
0487E2 C9          0921*  	ret
0487E3             0922*  
0487E3 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
0487F9 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
04880F 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
048825 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
04883B 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
048851 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
048867 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
04887D 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
048893 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
0488A9 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0488BF 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
0488D5 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
0488EB 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
048901 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
048917 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
04892D 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
048943 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
048959 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
04896F 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
048985 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
04899B 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0489B1 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
0489C7 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
0489DD 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
0489F3 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
048A09 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
048A1F 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
048A35 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
048A4B 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
048A61 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
048A77 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
048A8D 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
048AA3 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
048AB9 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
048ACF 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
048AE5 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
048AFB 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
048B11 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
048B27 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
048B3D 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
048B53 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
048B69 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
048B7F 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
048B95 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
048BAB 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
048BC1 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
048BD7 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
048BED 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
048C03 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
048C19 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
048C2F 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
048C45 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
048C5B 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
048C71 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
048C87 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
048C9D 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
048CB3 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
048CC9 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
048CDF 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
048CF5 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
048D0B 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
048D21 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
048D37 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
048D4D 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
048D63             0019   	include "src/asm/font_retro_computer.asm"
048D63             0001*  ; Bitmap indices:
048D63             0002*  BUF_4128: equ 0x1020 ; 32
048D63             0003*  BUF_4129: equ 0x1021 ; 33 !
048D63             0004*  ; Missing character 34 "
048D63             0005*  ; Missing character 35 #
048D63             0006*  ; Missing character 36 $
048D63             0007*  ; Missing character 37 %
048D63             0008*  ; Missing character 38 &
048D63             0009*  ; Missing character 39 '
048D63             0010*  ; Missing character 40 (
048D63             0011*  ; Missing character 41 )
048D63             0012*  ; Missing character 42 *
048D63             0013*  ; Missing character 43 +
048D63             0014*  ; Missing character 44 ,
048D63             0015*  ; Missing character 45 -
048D63             0016*  ; Missing character 46 .
048D63             0017*  ; Missing character 47 /
048D63             0018*  BUF_4144: equ 0x1030 ; 48 0
048D63             0019*  BUF_4145: equ 0x1031 ; 49 1
048D63             0020*  BUF_4146: equ 0x1032 ; 50 2
048D63             0021*  BUF_4147: equ 0x1033 ; 51 3
048D63             0022*  BUF_4148: equ 0x1034 ; 52 4
048D63             0023*  BUF_4149: equ 0x1035 ; 53 5
048D63             0024*  BUF_4150: equ 0x1036 ; 54 6
048D63             0025*  BUF_4151: equ 0x1037 ; 55 7
048D63             0026*  BUF_4152: equ 0x1038 ; 56 8
048D63             0027*  BUF_4153: equ 0x1039 ; 57 9
048D63             0028*  ; Missing character 58 :
048D63             0029*  ; Missing character 59 ;
048D63             0030*  ; Missing character 60 <
048D63             0031*  ; Missing character 61 =
048D63             0032*  ; Missing character 62 >
048D63             0033*  BUF_4159: equ 0x103F ; 63 ?
048D63             0034*  ; Missing character 64 @
048D63             0035*  BUF_4161: equ 0x1041 ; 65 A
048D63             0036*  BUF_4162: equ 0x1042 ; 66 B
048D63             0037*  BUF_4163: equ 0x1043 ; 67 C
048D63             0038*  BUF_4164: equ 0x1044 ; 68 D
048D63             0039*  BUF_4165: equ 0x1045 ; 69 E
048D63             0040*  BUF_4166: equ 0x1046 ; 70 F
048D63             0041*  BUF_4167: equ 0x1047 ; 71 G
048D63             0042*  BUF_4168: equ 0x1048 ; 72 H
048D63             0043*  BUF_4169: equ 0x1049 ; 73 I
048D63             0044*  BUF_4170: equ 0x104A ; 74 J
048D63             0045*  BUF_4171: equ 0x104B ; 75 K
048D63             0046*  BUF_4172: equ 0x104C ; 76 L
048D63             0047*  BUF_4173: equ 0x104D ; 77 M
048D63             0048*  BUF_4174: equ 0x104E ; 78 N
048D63             0049*  BUF_4175: equ 0x104F ; 79 O
048D63             0050*  BUF_4176: equ 0x1050 ; 80 P
048D63             0051*  BUF_4177: equ 0x1051 ; 81 Q
048D63             0052*  BUF_4178: equ 0x1052 ; 82 R
048D63             0053*  BUF_4179: equ 0x1053 ; 83 S
048D63             0054*  BUF_4180: equ 0x1054 ; 84 T
048D63             0055*  BUF_4181: equ 0x1055 ; 85 U
048D63             0056*  BUF_4182: equ 0x1056 ; 86 V
048D63             0057*  BUF_4183: equ 0x1057 ; 87 W
048D63             0058*  BUF_4184: equ 0x1058 ; 88 X
048D63             0059*  BUF_4185: equ 0x1059 ; 89 Y
048D63             0060*  BUF_4186: equ 0x105A ; 90 Z
048D63             0061*  ; Missing character 91 [
048D63             0062*  ; Missing character 92 \
048D63             0063*  ; Missing character 93 ]
048D63             0064*  ; Missing character 94 ^
048D63             0065*  ; Missing character 95 _
048D63             0066*  ; Missing character 96 `
048D63             0067*  ; Missing character 97 a
048D63             0068*  ; Missing character 98 b
048D63             0069*  ; Missing character 99 c
048D63             0070*  ; Missing character 100 d
048D63             0071*  ; Missing character 101 e
048D63             0072*  ; Missing character 102 f
048D63             0073*  ; Missing character 103 g
048D63             0074*  ; Missing character 104 h
048D63             0075*  ; Missing character 105 i
048D63             0076*  ; Missing character 106 j
048D63             0077*  ; Missing character 107 k
048D63             0078*  ; Missing character 108 l
048D63             0079*  ; Missing character 109 m
048D63             0080*  ; Missing character 110 n
048D63             0081*  ; Missing character 111 o
048D63             0082*  ; Missing character 112 p
048D63             0083*  ; Missing character 113 q
048D63             0084*  ; Missing character 114 r
048D63             0085*  ; Missing character 115 s
048D63             0086*  ; Missing character 116 t
048D63             0087*  ; Missing character 117 u
048D63             0088*  ; Missing character 118 v
048D63             0089*  ; Missing character 119 w
048D63             0090*  ; Missing character 120 x
048D63             0091*  ; Missing character 121 y
048D63             0092*  ; Missing character 122 z
048D63             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
048D63             0094*  font_retro_computer:
048D63 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
048D69 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
048D6F 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
048D75 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
048D7B 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
048D81 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
048D87 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
048D8D 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
048D93 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
048D99 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
048D9F 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
048DA5 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
048DAB 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
048DB1 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
048DB7 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
048DBD 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
048DC3 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
048DC9 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
048DCF 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
048DD5 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
048DDB 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
048DE1 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
048DE7 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
048DED 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
048DF3 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
048DF9 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
048DFF 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
048E05 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
048E0B 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
048E11 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
048E17 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
048E1D 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
048E23 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
048E29 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
048E2F 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
048E35 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
048E3B 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
048E41 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
048E47 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
048E4D 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
048E53 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
048E59 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
048E5F 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
048E65 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
048E6B 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
048E71 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
048E77 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
048E7D 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
048E83 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
048E89 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
048E8F 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
048E95 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
048E9B 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
048EA1 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
048EA7 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
048EAD 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
048EB3 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
048EB9 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
048EBF 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
048EC5 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
048ECB 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
048ED1 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
048ED7 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
048EDD 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
048EE3 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
048EE9 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
048EEF 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
048EF5 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
048EFB 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
048F01 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
048F07 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
048F0D 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
048F13 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
048F19 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
048F1F 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
048F25 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
048F2B 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
048F31 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
048F37 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
048F3D 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
048F43 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
048F49 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
048F4F 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
048F55 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
048F5B 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
048F61 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
048F67 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
048F6D 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
048F73 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
048F79 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
048F7F 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
048F85             0186*  
048F85             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
048F85             0188*  load_font_retro_computer:
048F85             0189*  
048F85 21 29 95 04 0190*  	ld hl,Frc032
048F89 11 CB C3 04 0191*  	ld de,filedata
048F8D 01 00 00 01 0192*  	ld bc,65536
048F91 3E 01       0193*  	ld a,mos_load
048F93 5B CF       0194*  	RST.LIL 08h
048F95 21 20 10 00 0195*  	ld hl,BUF_4128
048F99 01 06 00 00 0196*  	ld bc,6
048F9D 11 01 00 00 0197*  	ld de,1
048FA1 DD 21 06 00 0198*  	ld ix,6
       00          
048FA6 CD 3C B9 04 0199*  	call vdu_load_img
048FAA             0200*  
048FAA 21 3C 95 04 0201*  	ld hl,Frc033
048FAE 11 CB C3 04 0202*  	ld de,filedata
048FB2 01 00 00 01 0203*  	ld bc,65536
048FB6 3E 01       0204*  	ld a,mos_load
048FB8 5B CF       0205*  	RST.LIL 08h
048FBA 21 21 10 00 0206*  	ld hl,BUF_4129
048FBE 01 03 00 00 0207*  	ld bc,3
048FC2 11 0E 00 00 0208*  	ld de,14
048FC6 DD 21 2A 00 0209*  	ld ix,42
       00          
048FCB CD 3C B9 04 0210*  	call vdu_load_img
048FCF             0211*  ; Missing character 34
048FCF             0212*  ; Missing character 35
048FCF             0213*  ; Missing character 36
048FCF             0214*  ; Missing character 37
048FCF             0215*  ; Missing character 38
048FCF             0216*  ; Missing character 39
048FCF             0217*  ; Missing character 40
048FCF             0218*  ; Missing character 41
048FCF             0219*  ; Missing character 42
048FCF             0220*  ; Missing character 43
048FCF             0221*  ; Missing character 44
048FCF             0222*  ; Missing character 45
048FCF             0223*  ; Missing character 46
048FCF             0224*  ; Missing character 47
048FCF             0225*  
048FCF 21 4F 95 04 0226*  	ld hl,Frc048
048FD3 11 CB C3 04 0227*  	ld de,filedata
048FD7 01 00 00 01 0228*  	ld bc,65536
048FDB 3E 01       0229*  	ld a,mos_load
048FDD 5B CF       0230*  	RST.LIL 08h
048FDF 21 30 10 00 0231*  	ld hl,BUF_4144
048FE3 01 08 00 00 0232*  	ld bc,8
048FE7 11 0E 00 00 0233*  	ld de,14
048FEB DD 21 70 00 0234*  	ld ix,112
       00          
048FF0 CD 3C B9 04 0235*  	call vdu_load_img
048FF4             0236*  
048FF4 21 62 95 04 0237*  	ld hl,Frc049
048FF8 11 CB C3 04 0238*  	ld de,filedata
048FFC 01 00 00 01 0239*  	ld bc,65536
049000 3E 01       0240*  	ld a,mos_load
049002 5B CF       0241*  	RST.LIL 08h
049004 21 31 10 00 0242*  	ld hl,BUF_4145
049008 01 08 00 00 0243*  	ld bc,8
04900C 11 0E 00 00 0244*  	ld de,14
049010 DD 21 70 00 0245*  	ld ix,112
       00          
049015 CD 3C B9 04 0246*  	call vdu_load_img
049019             0247*  
049019 21 75 95 04 0248*  	ld hl,Frc050
04901D 11 CB C3 04 0249*  	ld de,filedata
049021 01 00 00 01 0250*  	ld bc,65536
049025 3E 01       0251*  	ld a,mos_load
049027 5B CF       0252*  	RST.LIL 08h
049029 21 32 10 00 0253*  	ld hl,BUF_4146
04902D 01 08 00 00 0254*  	ld bc,8
049031 11 0E 00 00 0255*  	ld de,14
049035 DD 21 70 00 0256*  	ld ix,112
       00          
04903A CD 3C B9 04 0257*  	call vdu_load_img
04903E             0258*  
04903E 21 88 95 04 0259*  	ld hl,Frc051
049042 11 CB C3 04 0260*  	ld de,filedata
049046 01 00 00 01 0261*  	ld bc,65536
04904A 3E 01       0262*  	ld a,mos_load
04904C 5B CF       0263*  	RST.LIL 08h
04904E 21 33 10 00 0264*  	ld hl,BUF_4147
049052 01 08 00 00 0265*  	ld bc,8
049056 11 0E 00 00 0266*  	ld de,14
04905A DD 21 70 00 0267*  	ld ix,112
       00          
04905F CD 3C B9 04 0268*  	call vdu_load_img
049063             0269*  
049063 21 9B 95 04 0270*  	ld hl,Frc052
049067 11 CB C3 04 0271*  	ld de,filedata
04906B 01 00 00 01 0272*  	ld bc,65536
04906F 3E 01       0273*  	ld a,mos_load
049071 5B CF       0274*  	RST.LIL 08h
049073 21 34 10 00 0275*  	ld hl,BUF_4148
049077 01 08 00 00 0276*  	ld bc,8
04907B 11 0E 00 00 0277*  	ld de,14
04907F DD 21 70 00 0278*  	ld ix,112
       00          
049084 CD 3C B9 04 0279*  	call vdu_load_img
049088             0280*  
049088 21 AE 95 04 0281*  	ld hl,Frc053
04908C 11 CB C3 04 0282*  	ld de,filedata
049090 01 00 00 01 0283*  	ld bc,65536
049094 3E 01       0284*  	ld a,mos_load
049096 5B CF       0285*  	RST.LIL 08h
049098 21 35 10 00 0286*  	ld hl,BUF_4149
04909C 01 08 00 00 0287*  	ld bc,8
0490A0 11 0E 00 00 0288*  	ld de,14
0490A4 DD 21 70 00 0289*  	ld ix,112
       00          
0490A9 CD 3C B9 04 0290*  	call vdu_load_img
0490AD             0291*  
0490AD 21 C1 95 04 0292*  	ld hl,Frc054
0490B1 11 CB C3 04 0293*  	ld de,filedata
0490B5 01 00 00 01 0294*  	ld bc,65536
0490B9 3E 01       0295*  	ld a,mos_load
0490BB 5B CF       0296*  	RST.LIL 08h
0490BD 21 36 10 00 0297*  	ld hl,BUF_4150
0490C1 01 08 00 00 0298*  	ld bc,8
0490C5 11 0E 00 00 0299*  	ld de,14
0490C9 DD 21 70 00 0300*  	ld ix,112
       00          
0490CE CD 3C B9 04 0301*  	call vdu_load_img
0490D2             0302*  
0490D2 21 D4 95 04 0303*  	ld hl,Frc055
0490D6 11 CB C3 04 0304*  	ld de,filedata
0490DA 01 00 00 01 0305*  	ld bc,65536
0490DE 3E 01       0306*  	ld a,mos_load
0490E0 5B CF       0307*  	RST.LIL 08h
0490E2 21 37 10 00 0308*  	ld hl,BUF_4151
0490E6 01 08 00 00 0309*  	ld bc,8
0490EA 11 0E 00 00 0310*  	ld de,14
0490EE DD 21 70 00 0311*  	ld ix,112
       00          
0490F3 CD 3C B9 04 0312*  	call vdu_load_img
0490F7             0313*  
0490F7 21 E7 95 04 0314*  	ld hl,Frc056
0490FB 11 CB C3 04 0315*  	ld de,filedata
0490FF 01 00 00 01 0316*  	ld bc,65536
049103 3E 01       0317*  	ld a,mos_load
049105 5B CF       0318*  	RST.LIL 08h
049107 21 38 10 00 0319*  	ld hl,BUF_4152
04910B 01 08 00 00 0320*  	ld bc,8
04910F 11 0E 00 00 0321*  	ld de,14
049113 DD 21 70 00 0322*  	ld ix,112
       00          
049118 CD 3C B9 04 0323*  	call vdu_load_img
04911C             0324*  
04911C 21 FA 95 04 0325*  	ld hl,Frc057
049120 11 CB C3 04 0326*  	ld de,filedata
049124 01 00 00 01 0327*  	ld bc,65536
049128 3E 01       0328*  	ld a,mos_load
04912A 5B CF       0329*  	RST.LIL 08h
04912C 21 39 10 00 0330*  	ld hl,BUF_4153
049130 01 08 00 00 0331*  	ld bc,8
049134 11 0E 00 00 0332*  	ld de,14
049138 DD 21 70 00 0333*  	ld ix,112
       00          
04913D CD 3C B9 04 0334*  	call vdu_load_img
049141             0335*  ; Missing character 58
049141             0336*  ; Missing character 59
049141             0337*  ; Missing character 60
049141             0338*  ; Missing character 61
049141             0339*  ; Missing character 62
049141             0340*  
049141 21 0D 96 04 0341*  	ld hl,Frc063
049145 11 CB C3 04 0342*  	ld de,filedata
049149 01 00 00 01 0343*  	ld bc,65536
04914D 3E 01       0344*  	ld a,mos_load
04914F 5B CF       0345*  	RST.LIL 08h
049151 21 3F 10 00 0346*  	ld hl,BUF_4159
049155 01 08 00 00 0347*  	ld bc,8
049159 11 0E 00 00 0348*  	ld de,14
04915D DD 21 70 00 0349*  	ld ix,112
       00          
049162 CD 3C B9 04 0350*  	call vdu_load_img
049166             0351*  ; Missing character 64
049166             0352*  
049166 21 20 96 04 0353*  	ld hl,Frc065
04916A 11 CB C3 04 0354*  	ld de,filedata
04916E 01 00 00 01 0355*  	ld bc,65536
049172 3E 01       0356*  	ld a,mos_load
049174 5B CF       0357*  	RST.LIL 08h
049176 21 41 10 00 0358*  	ld hl,BUF_4161
04917A 01 07 00 00 0359*  	ld bc,7
04917E 11 0E 00 00 0360*  	ld de,14
049182 DD 21 62 00 0361*  	ld ix,98
       00          
049187 CD 3C B9 04 0362*  	call vdu_load_img
04918B             0363*  
04918B 21 33 96 04 0364*  	ld hl,Frc066
04918F 11 CB C3 04 0365*  	ld de,filedata
049193 01 00 00 01 0366*  	ld bc,65536
049197 3E 01       0367*  	ld a,mos_load
049199 5B CF       0368*  	RST.LIL 08h
04919B 21 42 10 00 0369*  	ld hl,BUF_4162
04919F 01 08 00 00 0370*  	ld bc,8
0491A3 11 0E 00 00 0371*  	ld de,14
0491A7 DD 21 70 00 0372*  	ld ix,112
       00          
0491AC CD 3C B9 04 0373*  	call vdu_load_img
0491B0             0374*  
0491B0 21 46 96 04 0375*  	ld hl,Frc067
0491B4 11 CB C3 04 0376*  	ld de,filedata
0491B8 01 00 00 01 0377*  	ld bc,65536
0491BC 3E 01       0378*  	ld a,mos_load
0491BE 5B CF       0379*  	RST.LIL 08h
0491C0 21 43 10 00 0380*  	ld hl,BUF_4163
0491C4 01 07 00 00 0381*  	ld bc,7
0491C8 11 0E 00 00 0382*  	ld de,14
0491CC DD 21 62 00 0383*  	ld ix,98
       00          
0491D1 CD 3C B9 04 0384*  	call vdu_load_img
0491D5             0385*  
0491D5 21 59 96 04 0386*  	ld hl,Frc068
0491D9 11 CB C3 04 0387*  	ld de,filedata
0491DD 01 00 00 01 0388*  	ld bc,65536
0491E1 3E 01       0389*  	ld a,mos_load
0491E3 5B CF       0390*  	RST.LIL 08h
0491E5 21 44 10 00 0391*  	ld hl,BUF_4164
0491E9 01 08 00 00 0392*  	ld bc,8
0491ED 11 0E 00 00 0393*  	ld de,14
0491F1 DD 21 70 00 0394*  	ld ix,112
       00          
0491F6 CD 3C B9 04 0395*  	call vdu_load_img
0491FA             0396*  
0491FA 21 6C 96 04 0397*  	ld hl,Frc069
0491FE 11 CB C3 04 0398*  	ld de,filedata
049202 01 00 00 01 0399*  	ld bc,65536
049206 3E 01       0400*  	ld a,mos_load
049208 5B CF       0401*  	RST.LIL 08h
04920A 21 45 10 00 0402*  	ld hl,BUF_4165
04920E 01 08 00 00 0403*  	ld bc,8
049212 11 0E 00 00 0404*  	ld de,14
049216 DD 21 70 00 0405*  	ld ix,112
       00          
04921B CD 3C B9 04 0406*  	call vdu_load_img
04921F             0407*  
04921F 21 7F 96 04 0408*  	ld hl,Frc070
049223 11 CB C3 04 0409*  	ld de,filedata
049227 01 00 00 01 0410*  	ld bc,65536
04922B 3E 01       0411*  	ld a,mos_load
04922D 5B CF       0412*  	RST.LIL 08h
04922F 21 46 10 00 0413*  	ld hl,BUF_4166
049233 01 07 00 00 0414*  	ld bc,7
049237 11 0E 00 00 0415*  	ld de,14
04923B DD 21 62 00 0416*  	ld ix,98
       00          
049240 CD 3C B9 04 0417*  	call vdu_load_img
049244             0418*  
049244 21 92 96 04 0419*  	ld hl,Frc071
049248 11 CB C3 04 0420*  	ld de,filedata
04924C 01 00 00 01 0421*  	ld bc,65536
049250 3E 01       0422*  	ld a,mos_load
049252 5B CF       0423*  	RST.LIL 08h
049254 21 47 10 00 0424*  	ld hl,BUF_4167
049258 01 08 00 00 0425*  	ld bc,8
04925C 11 0E 00 00 0426*  	ld de,14
049260 DD 21 70 00 0427*  	ld ix,112
       00          
049265 CD 3C B9 04 0428*  	call vdu_load_img
049269             0429*  
049269 21 A5 96 04 0430*  	ld hl,Frc072
04926D 11 CB C3 04 0431*  	ld de,filedata
049271 01 00 00 01 0432*  	ld bc,65536
049275 3E 01       0433*  	ld a,mos_load
049277 5B CF       0434*  	RST.LIL 08h
049279 21 48 10 00 0435*  	ld hl,BUF_4168
04927D 01 07 00 00 0436*  	ld bc,7
049281 11 0E 00 00 0437*  	ld de,14
049285 DD 21 62 00 0438*  	ld ix,98
       00          
04928A CD 3C B9 04 0439*  	call vdu_load_img
04928E             0440*  
04928E 21 B8 96 04 0441*  	ld hl,Frc073
049292 11 CB C3 04 0442*  	ld de,filedata
049296 01 00 00 01 0443*  	ld bc,65536
04929A 3E 01       0444*  	ld a,mos_load
04929C 5B CF       0445*  	RST.LIL 08h
04929E 21 49 10 00 0446*  	ld hl,BUF_4169
0492A2 01 07 00 00 0447*  	ld bc,7
0492A6 11 0E 00 00 0448*  	ld de,14
0492AA DD 21 62 00 0449*  	ld ix,98
       00          
0492AF CD 3C B9 04 0450*  	call vdu_load_img
0492B3             0451*  
0492B3 21 CB 96 04 0452*  	ld hl,Frc074
0492B7 11 CB C3 04 0453*  	ld de,filedata
0492BB 01 00 00 01 0454*  	ld bc,65536
0492BF 3E 01       0455*  	ld a,mos_load
0492C1 5B CF       0456*  	RST.LIL 08h
0492C3 21 4A 10 00 0457*  	ld hl,BUF_4170
0492C7 01 08 00 00 0458*  	ld bc,8
0492CB 11 0E 00 00 0459*  	ld de,14
0492CF DD 21 70 00 0460*  	ld ix,112
       00          
0492D4 CD 3C B9 04 0461*  	call vdu_load_img
0492D8             0462*  
0492D8 21 DE 96 04 0463*  	ld hl,Frc075
0492DC 11 CB C3 04 0464*  	ld de,filedata
0492E0 01 00 00 01 0465*  	ld bc,65536
0492E4 3E 01       0466*  	ld a,mos_load
0492E6 5B CF       0467*  	RST.LIL 08h
0492E8 21 4B 10 00 0468*  	ld hl,BUF_4171
0492EC 01 07 00 00 0469*  	ld bc,7
0492F0 11 0E 00 00 0470*  	ld de,14
0492F4 DD 21 62 00 0471*  	ld ix,98
       00          
0492F9 CD 3C B9 04 0472*  	call vdu_load_img
0492FD             0473*  
0492FD 21 F1 96 04 0474*  	ld hl,Frc076
049301 11 CB C3 04 0475*  	ld de,filedata
049305 01 00 00 01 0476*  	ld bc,65536
049309 3E 01       0477*  	ld a,mos_load
04930B 5B CF       0478*  	RST.LIL 08h
04930D 21 4C 10 00 0479*  	ld hl,BUF_4172
049311 01 08 00 00 0480*  	ld bc,8
049315 11 0E 00 00 0481*  	ld de,14
049319 DD 21 70 00 0482*  	ld ix,112
       00          
04931E CD 3C B9 04 0483*  	call vdu_load_img
049322             0484*  
049322 21 04 97 04 0485*  	ld hl,Frc077
049326 11 CB C3 04 0486*  	ld de,filedata
04932A 01 00 00 01 0487*  	ld bc,65536
04932E 3E 01       0488*  	ld a,mos_load
049330 5B CF       0489*  	RST.LIL 08h
049332 21 4D 10 00 0490*  	ld hl,BUF_4173
049336 01 09 00 00 0491*  	ld bc,9
04933A 11 0E 00 00 0492*  	ld de,14
04933E DD 21 7E 00 0493*  	ld ix,126
       00          
049343 CD 3C B9 04 0494*  	call vdu_load_img
049347             0495*  
049347 21 17 97 04 0496*  	ld hl,Frc078
04934B 11 CB C3 04 0497*  	ld de,filedata
04934F 01 00 00 01 0498*  	ld bc,65536
049353 3E 01       0499*  	ld a,mos_load
049355 5B CF       0500*  	RST.LIL 08h
049357 21 4E 10 00 0501*  	ld hl,BUF_4174
04935B 01 07 00 00 0502*  	ld bc,7
04935F 11 0E 00 00 0503*  	ld de,14
049363 DD 21 62 00 0504*  	ld ix,98
       00          
049368 CD 3C B9 04 0505*  	call vdu_load_img
04936C             0506*  
04936C 21 2A 97 04 0507*  	ld hl,Frc079
049370 11 CB C3 04 0508*  	ld de,filedata
049374 01 00 00 01 0509*  	ld bc,65536
049378 3E 01       0510*  	ld a,mos_load
04937A 5B CF       0511*  	RST.LIL 08h
04937C 21 4F 10 00 0512*  	ld hl,BUF_4175
049380 01 08 00 00 0513*  	ld bc,8
049384 11 0E 00 00 0514*  	ld de,14
049388 DD 21 70 00 0515*  	ld ix,112
       00          
04938D CD 3C B9 04 0516*  	call vdu_load_img
049391             0517*  
049391 21 3D 97 04 0518*  	ld hl,Frc080
049395 11 CB C3 04 0519*  	ld de,filedata
049399 01 00 00 01 0520*  	ld bc,65536
04939D 3E 01       0521*  	ld a,mos_load
04939F 5B CF       0522*  	RST.LIL 08h
0493A1 21 50 10 00 0523*  	ld hl,BUF_4176
0493A5 01 07 00 00 0524*  	ld bc,7
0493A9 11 0E 00 00 0525*  	ld de,14
0493AD DD 21 62 00 0526*  	ld ix,98
       00          
0493B2 CD 3C B9 04 0527*  	call vdu_load_img
0493B6             0528*  
0493B6 21 50 97 04 0529*  	ld hl,Frc081
0493BA 11 CB C3 04 0530*  	ld de,filedata
0493BE 01 00 00 01 0531*  	ld bc,65536
0493C2 3E 01       0532*  	ld a,mos_load
0493C4 5B CF       0533*  	RST.LIL 08h
0493C6 21 51 10 00 0534*  	ld hl,BUF_4177
0493CA 01 08 00 00 0535*  	ld bc,8
0493CE 11 0F 00 00 0536*  	ld de,15
0493D2 DD 21 78 00 0537*  	ld ix,120
       00          
0493D7 CD 3C B9 04 0538*  	call vdu_load_img
0493DB             0539*  
0493DB 21 63 97 04 0540*  	ld hl,Frc082
0493DF 11 CB C3 04 0541*  	ld de,filedata
0493E3 01 00 00 01 0542*  	ld bc,65536
0493E7 3E 01       0543*  	ld a,mos_load
0493E9 5B CF       0544*  	RST.LIL 08h
0493EB 21 52 10 00 0545*  	ld hl,BUF_4178
0493EF 01 08 00 00 0546*  	ld bc,8
0493F3 11 0E 00 00 0547*  	ld de,14
0493F7 DD 21 70 00 0548*  	ld ix,112
       00          
0493FC CD 3C B9 04 0549*  	call vdu_load_img
049400             0550*  
049400 21 76 97 04 0551*  	ld hl,Frc083
049404 11 CB C3 04 0552*  	ld de,filedata
049408 01 00 00 01 0553*  	ld bc,65536
04940C 3E 01       0554*  	ld a,mos_load
04940E 5B CF       0555*  	RST.LIL 08h
049410 21 53 10 00 0556*  	ld hl,BUF_4179
049414 01 08 00 00 0557*  	ld bc,8
049418 11 0E 00 00 0558*  	ld de,14
04941C DD 21 70 00 0559*  	ld ix,112
       00          
049421 CD 3C B9 04 0560*  	call vdu_load_img
049425             0561*  
049425 21 89 97 04 0562*  	ld hl,Frc084
049429 11 CB C3 04 0563*  	ld de,filedata
04942D 01 00 00 01 0564*  	ld bc,65536
049431 3E 01       0565*  	ld a,mos_load
049433 5B CF       0566*  	RST.LIL 08h
049435 21 54 10 00 0567*  	ld hl,BUF_4180
049439 01 07 00 00 0568*  	ld bc,7
04943D 11 0E 00 00 0569*  	ld de,14
049441 DD 21 62 00 0570*  	ld ix,98
       00          
049446 CD 3C B9 04 0571*  	call vdu_load_img
04944A             0572*  
04944A 21 9C 97 04 0573*  	ld hl,Frc085
04944E 11 CB C3 04 0574*  	ld de,filedata
049452 01 00 00 01 0575*  	ld bc,65536
049456 3E 01       0576*  	ld a,mos_load
049458 5B CF       0577*  	RST.LIL 08h
04945A 21 55 10 00 0578*  	ld hl,BUF_4181
04945E 01 08 00 00 0579*  	ld bc,8
049462 11 0E 00 00 0580*  	ld de,14
049466 DD 21 70 00 0581*  	ld ix,112
       00          
04946B CD 3C B9 04 0582*  	call vdu_load_img
04946F             0583*  
04946F 21 AF 97 04 0584*  	ld hl,Frc086
049473 11 CB C3 04 0585*  	ld de,filedata
049477 01 00 00 01 0586*  	ld bc,65536
04947B 3E 01       0587*  	ld a,mos_load
04947D 5B CF       0588*  	RST.LIL 08h
04947F 21 56 10 00 0589*  	ld hl,BUF_4182
049483 01 07 00 00 0590*  	ld bc,7
049487 11 0E 00 00 0591*  	ld de,14
04948B DD 21 62 00 0592*  	ld ix,98
       00          
049490 CD 3C B9 04 0593*  	call vdu_load_img
049494             0594*  
049494 21 C2 97 04 0595*  	ld hl,Frc087
049498 11 CB C3 04 0596*  	ld de,filedata
04949C 01 00 00 01 0597*  	ld bc,65536
0494A0 3E 01       0598*  	ld a,mos_load
0494A2 5B CF       0599*  	RST.LIL 08h
0494A4 21 57 10 00 0600*  	ld hl,BUF_4183
0494A8 01 0B 00 00 0601*  	ld bc,11
0494AC 11 0E 00 00 0602*  	ld de,14
0494B0 DD 21 9A 00 0603*  	ld ix,154
       00          
0494B5 CD 3C B9 04 0604*  	call vdu_load_img
0494B9             0605*  
0494B9 21 D5 97 04 0606*  	ld hl,Frc088
0494BD 11 CB C3 04 0607*  	ld de,filedata
0494C1 01 00 00 01 0608*  	ld bc,65536
0494C5 3E 01       0609*  	ld a,mos_load
0494C7 5B CF       0610*  	RST.LIL 08h
0494C9 21 58 10 00 0611*  	ld hl,BUF_4184
0494CD 01 07 00 00 0612*  	ld bc,7
0494D1 11 0E 00 00 0613*  	ld de,14
0494D5 DD 21 62 00 0614*  	ld ix,98
       00          
0494DA CD 3C B9 04 0615*  	call vdu_load_img
0494DE             0616*  
0494DE 21 E8 97 04 0617*  	ld hl,Frc089
0494E2 11 CB C3 04 0618*  	ld de,filedata
0494E6 01 00 00 01 0619*  	ld bc,65536
0494EA 3E 01       0620*  	ld a,mos_load
0494EC 5B CF       0621*  	RST.LIL 08h
0494EE 21 59 10 00 0622*  	ld hl,BUF_4185
0494F2 01 08 00 00 0623*  	ld bc,8
0494F6 11 0E 00 00 0624*  	ld de,14
0494FA DD 21 70 00 0625*  	ld ix,112
       00          
0494FF CD 3C B9 04 0626*  	call vdu_load_img
049503             0627*  
049503 21 FB 97 04 0628*  	ld hl,Frc090
049507 11 CB C3 04 0629*  	ld de,filedata
04950B 01 00 00 01 0630*  	ld bc,65536
04950F 3E 01       0631*  	ld a,mos_load
049511 5B CF       0632*  	RST.LIL 08h
049513 21 5A 10 00 0633*  	ld hl,BUF_4186
049517 01 07 00 00 0634*  	ld bc,7
04951B 11 0E 00 00 0635*  	ld de,14
04951F DD 21 62 00 0636*  	ld ix,98
       00          
049524 CD 3C B9 04 0637*  	call vdu_load_img
049528             0638*  ; Missing character 91
049528             0639*  ; Missing character 92
049528             0640*  ; Missing character 93
049528             0641*  ; Missing character 94
049528             0642*  ; Missing character 95
049528             0643*  ; Missing character 96
049528             0644*  ; Missing character 97
049528             0645*  ; Missing character 98
049528             0646*  ; Missing character 99
049528             0647*  ; Missing character 100
049528             0648*  ; Missing character 101
049528             0649*  ; Missing character 102
049528             0650*  ; Missing character 103
049528             0651*  ; Missing character 104
049528             0652*  ; Missing character 105
049528             0653*  ; Missing character 106
049528             0654*  ; Missing character 107
049528             0655*  ; Missing character 108
049528             0656*  ; Missing character 109
049528             0657*  ; Missing character 110
049528             0658*  ; Missing character 111
049528             0659*  ; Missing character 112
049528             0660*  ; Missing character 113
049528             0661*  ; Missing character 114
049528             0662*  ; Missing character 115
049528             0663*  ; Missing character 116
049528             0664*  ; Missing character 117
049528             0665*  ; Missing character 118
049528             0666*  ; Missing character 119
049528             0667*  ; Missing character 120
049528             0668*  ; Missing character 121
049528             0669*  ; Missing character 122
049528             0670*  
049528 C9          0671*  	ret
049529             0672*  
049529 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
04953C 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
04954F 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
049562 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
049575 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
049588 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
04959B 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
0495AE 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
0495C1 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
0495D4 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
0495E7 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
0495FA 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
04960D 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
049620 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
049633 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
049646 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
049659 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
04966C 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
04967F 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
049692 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
0496A5 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
0496B8 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
0496CB 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
0496DE 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
0496F1 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
049704 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
049717 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
04972A 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
04973D 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
049750 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
049763 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
049776 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
049789 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
04979C 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
0497AF 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
0497C2 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
0497D5 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
0497E8 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
0497FB 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
04980E             0020   	include "src/asm/ui.asm"
04980E             0001*  ; ui routines will go here
04980E             0021   	include "src/asm/ui_img.asm"
04980E             0001*  ; Bitmap indices:
04980E             0002*  BUF_UI_BJ_120_120: equ 0x2000
04980E             0003*  BUF_UI_LOWER_PANEL: equ 0x2001
04980E             0004*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2002
04980E             0005*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2003
04980E             0006*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2004
04980E             0007*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2005
04980E             0008*  BUF_UI_SPLASH: equ 0x2006
04980E             0009*  
04980E             0010*  ; Import .rgba2 bitmap files and load them into VDP buffers
04980E             0011*  load_ui_images:
04980E             0012*  
04980E 21 2E 99 04 0013*  	ld hl,F_UI_bj_120_120
049812 11 CB C3 04 0014*  	ld de,filedata
049816 01 00 00 01 0015*  	ld bc,65536
04981A 3E 01       0016*  	ld a,mos_load
04981C 5B CF       0017*  	RST.LIL 08h
04981E 21 00 20 00 0018*  	ld hl,BUF_UI_BJ_120_120
049822 01 78 00 00 0019*  	ld bc,120
049826 11 78 00 00 0020*  	ld de,120
04982A DD 21 40 38 0021*  	ld ix,14400
       00          
04982F CD 3C B9 04 0022*  	call vdu_load_img
049833 3E 2E       0023*  	LD A, '.'
049835 5B D7       0024*  	RST.LIL 10h
049837             0025*  
049837 21 42 99 04 0026*  	ld hl,F_UI_lower_panel
04983B 11 CB C3 04 0027*  	ld de,filedata
04983F 01 00 00 01 0028*  	ld bc,65536
049843 3E 01       0029*  	ld a,mos_load
049845 5B CF       0030*  	RST.LIL 08h
049847 21 01 20 00 0031*  	ld hl,BUF_UI_LOWER_PANEL
04984B 01 40 01 00 0032*  	ld bc,320
04984F 11 50 00 00 0033*  	ld de,80
049853 DD 21 00 64 0034*  	ld ix,25600
       00          
049858 CD 3C B9 04 0035*  	call vdu_load_img
04985C 3E 2E       0036*  	LD A, '.'
04985E 5B D7       0037*  	RST.LIL 10h
049860             0038*  
049860 21 57 99 04 0039*  	ld hl,F_UI_lower_panel_gatling
049864 11 CB C3 04 0040*  	ld de,filedata
049868 01 00 00 01 0041*  	ld bc,65536
04986C 3E 01       0042*  	ld a,mos_load
04986E 5B CF       0043*  	RST.LIL 08h
049870 21 02 20 00 0044*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
049874 01 28 00 00 0045*  	ld bc,40
049878 11 14 00 00 0046*  	ld de,20
04987C DD 21 20 03 0047*  	ld ix,800
       00          
049881 CD 3C B9 04 0048*  	call vdu_load_img
049885 3E 2E       0049*  	LD A, '.'
049887 5B D7       0050*  	RST.LIL 10h
049889             0051*  
049889 21 74 99 04 0052*  	ld hl,F_UI_lower_panel_knife
04988D 11 CB C3 04 0053*  	ld de,filedata
049891 01 00 00 01 0054*  	ld bc,65536
049895 3E 01       0055*  	ld a,mos_load
049897 5B CF       0056*  	RST.LIL 08h
049899 21 03 20 00 0057*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
04989D 01 28 00 00 0058*  	ld bc,40
0498A1 11 14 00 00 0059*  	ld de,20
0498A5 DD 21 20 03 0060*  	ld ix,800
       00          
0498AA CD 3C B9 04 0061*  	call vdu_load_img
0498AE 3E 2E       0062*  	LD A, '.'
0498B0 5B D7       0063*  	RST.LIL 10h
0498B2             0064*  
0498B2 21 8F 99 04 0065*  	ld hl,F_UI_lower_panel_machine_gun
0498B6 11 CB C3 04 0066*  	ld de,filedata
0498BA 01 00 00 01 0067*  	ld bc,65536
0498BE 3E 01       0068*  	ld a,mos_load
0498C0 5B CF       0069*  	RST.LIL 08h
0498C2 21 04 20 00 0070*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
0498C6 01 28 00 00 0071*  	ld bc,40
0498CA 11 14 00 00 0072*  	ld de,20
0498CE DD 21 20 03 0073*  	ld ix,800
       00          
0498D3 CD 3C B9 04 0074*  	call vdu_load_img
0498D7 3E 2E       0075*  	LD A, '.'
0498D9 5B D7       0076*  	RST.LIL 10h
0498DB             0077*  
0498DB 21 B0 99 04 0078*  	ld hl,F_UI_lower_panel_pistol
0498DF 11 CB C3 04 0079*  	ld de,filedata
0498E3 01 00 00 01 0080*  	ld bc,65536
0498E7 3E 01       0081*  	ld a,mos_load
0498E9 5B CF       0082*  	RST.LIL 08h
0498EB 21 05 20 00 0083*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
0498EF 01 28 00 00 0084*  	ld bc,40
0498F3 11 14 00 00 0085*  	ld de,20
0498F7 DD 21 20 03 0086*  	ld ix,800
       00          
0498FC CD 3C B9 04 0087*  	call vdu_load_img
049900 3E 2E       0088*  	LD A, '.'
049902 5B D7       0089*  	RST.LIL 10h
049904             0090*  
049904 21 CC 99 04 0091*  	ld hl,F_UI_splash
049908 11 CB C3 04 0092*  	ld de,filedata
04990C 01 00 00 01 0093*  	ld bc,65536
049910 3E 01       0094*  	ld a,mos_load
049912 5B CF       0095*  	RST.LIL 08h
049914 21 06 20 00 0096*  	ld hl,BUF_UI_SPLASH
049918 01 40 01 00 0097*  	ld bc,320
04991C 11 A0 00 00 0098*  	ld de,160
049920 DD 21 00 C8 0099*  	ld ix,51200
       00          
049925 CD 3C B9 04 0100*  	call vdu_load_img
049929 3E 2E       0101*  	LD A, '.'
04992B 5B D7       0102*  	RST.LIL 10h
04992D             0103*  
04992D C9          0104*  	ret
04992E             0105*  
04992E 75 69 2F 62 0106*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
049942 75 69 2F 6C 0107*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
049957 75 69 2F 6C 0108*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
049974 75 69 2F 6C 0109*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
04998F 75 69 2F 6C 0110*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
0499B0 75 69 2F 6C 0111*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
0499CC 75 69 2F 73 0112*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
0499DC             0022   	include "src/asm/ui_img_bj.asm"
0499DC             0001*  ; Bitmap indices:
0499DC             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
0499DC             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
0499DC             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
0499DC             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
0499DC             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
0499DC             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
0499DC             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
0499DC             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
0499DC             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
0499DC             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
0499DC             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
0499DC             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
0499DC             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
0499DC             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
0499DC             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
0499DC             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
0499DC             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
0499DC             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
0499DC             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
0499DC             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
0499DC             0022*  
0499DC             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
0499DC             0024*  load_ui_images_bj:
0499DC             0025*  
0499DC 21 11 9D 04 0026*  	ld hl,F_UI_bj_gatling_00
0499E0 11 CB C3 04 0027*  	ld de,filedata
0499E4 01 00 00 01 0028*  	ld bc,65536
0499E8 3E 01       0029*  	ld a,mos_load
0499EA 5B CF       0030*  	RST.LIL 08h
0499EC 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
0499F0 01 40 00 00 0032*  	ld bc,64
0499F4 11 40 00 00 0033*  	ld de,64
0499F8 DD 21 00 10 0034*  	ld ix,4096
       00          
0499FD CD 3C B9 04 0035*  	call vdu_load_img
049A01 3E 2E       0036*  	LD A, '.'
049A03 5B D7       0037*  	RST.LIL 10h
049A05             0038*  
049A05 21 2B 9D 04 0039*  	ld hl,F_UI_bj_gatling_01
049A09 11 CB C3 04 0040*  	ld de,filedata
049A0D 01 00 00 01 0041*  	ld bc,65536
049A11 3E 01       0042*  	ld a,mos_load
049A13 5B CF       0043*  	RST.LIL 08h
049A15 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
049A19 01 40 00 00 0045*  	ld bc,64
049A1D 11 40 00 00 0046*  	ld de,64
049A21 DD 21 00 10 0047*  	ld ix,4096
       00          
049A26 CD 3C B9 04 0048*  	call vdu_load_img
049A2A 3E 2E       0049*  	LD A, '.'
049A2C 5B D7       0050*  	RST.LIL 10h
049A2E             0051*  
049A2E 21 45 9D 04 0052*  	ld hl,F_UI_bj_gatling_02
049A32 11 CB C3 04 0053*  	ld de,filedata
049A36 01 00 00 01 0054*  	ld bc,65536
049A3A 3E 01       0055*  	ld a,mos_load
049A3C 5B CF       0056*  	RST.LIL 08h
049A3E 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
049A42 01 40 00 00 0058*  	ld bc,64
049A46 11 40 00 00 0059*  	ld de,64
049A4A DD 21 00 10 0060*  	ld ix,4096
       00          
049A4F CD 3C B9 04 0061*  	call vdu_load_img
049A53 3E 2E       0062*  	LD A, '.'
049A55 5B D7       0063*  	RST.LIL 10h
049A57             0064*  
049A57 21 5F 9D 04 0065*  	ld hl,F_UI_bj_gatling_03
049A5B 11 CB C3 04 0066*  	ld de,filedata
049A5F 01 00 00 01 0067*  	ld bc,65536
049A63 3E 01       0068*  	ld a,mos_load
049A65 5B CF       0069*  	RST.LIL 08h
049A67 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
049A6B 01 40 00 00 0071*  	ld bc,64
049A6F 11 40 00 00 0072*  	ld de,64
049A73 DD 21 00 10 0073*  	ld ix,4096
       00          
049A78 CD 3C B9 04 0074*  	call vdu_load_img
049A7C 3E 2E       0075*  	LD A, '.'
049A7E 5B D7       0076*  	RST.LIL 10h
049A80             0077*  
049A80 21 79 9D 04 0078*  	ld hl,F_UI_bj_gatling_04
049A84 11 CB C3 04 0079*  	ld de,filedata
049A88 01 00 00 01 0080*  	ld bc,65536
049A8C 3E 01       0081*  	ld a,mos_load
049A8E 5B CF       0082*  	RST.LIL 08h
049A90 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
049A94 01 40 00 00 0084*  	ld bc,64
049A98 11 40 00 00 0085*  	ld de,64
049A9C DD 21 00 10 0086*  	ld ix,4096
       00          
049AA1 CD 3C B9 04 0087*  	call vdu_load_img
049AA5 3E 2E       0088*  	LD A, '.'
049AA7 5B D7       0089*  	RST.LIL 10h
049AA9             0090*  
049AA9 21 93 9D 04 0091*  	ld hl,F_UI_bj_knife_00
049AAD 11 CB C3 04 0092*  	ld de,filedata
049AB1 01 00 00 01 0093*  	ld bc,65536
049AB5 3E 01       0094*  	ld a,mos_load
049AB7 5B CF       0095*  	RST.LIL 08h
049AB9 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
049ABD 01 40 00 00 0097*  	ld bc,64
049AC1 11 40 00 00 0098*  	ld de,64
049AC5 DD 21 00 10 0099*  	ld ix,4096
       00          
049ACA CD 3C B9 04 0100*  	call vdu_load_img
049ACE 3E 2E       0101*  	LD A, '.'
049AD0 5B D7       0102*  	RST.LIL 10h
049AD2             0103*  
049AD2 21 AB 9D 04 0104*  	ld hl,F_UI_bj_knife_01
049AD6 11 CB C3 04 0105*  	ld de,filedata
049ADA 01 00 00 01 0106*  	ld bc,65536
049ADE 3E 01       0107*  	ld a,mos_load
049AE0 5B CF       0108*  	RST.LIL 08h
049AE2 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
049AE6 01 40 00 00 0110*  	ld bc,64
049AEA 11 40 00 00 0111*  	ld de,64
049AEE DD 21 00 10 0112*  	ld ix,4096
       00          
049AF3 CD 3C B9 04 0113*  	call vdu_load_img
049AF7 3E 2E       0114*  	LD A, '.'
049AF9 5B D7       0115*  	RST.LIL 10h
049AFB             0116*  
049AFB 21 C3 9D 04 0117*  	ld hl,F_UI_bj_knife_02
049AFF 11 CB C3 04 0118*  	ld de,filedata
049B03 01 00 00 01 0119*  	ld bc,65536
049B07 3E 01       0120*  	ld a,mos_load
049B09 5B CF       0121*  	RST.LIL 08h
049B0B 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
049B0F 01 40 00 00 0123*  	ld bc,64
049B13 11 40 00 00 0124*  	ld de,64
049B17 DD 21 00 10 0125*  	ld ix,4096
       00          
049B1C CD 3C B9 04 0126*  	call vdu_load_img
049B20 3E 2E       0127*  	LD A, '.'
049B22 5B D7       0128*  	RST.LIL 10h
049B24             0129*  
049B24 21 DB 9D 04 0130*  	ld hl,F_UI_bj_knife_03
049B28 11 CB C3 04 0131*  	ld de,filedata
049B2C 01 00 00 01 0132*  	ld bc,65536
049B30 3E 01       0133*  	ld a,mos_load
049B32 5B CF       0134*  	RST.LIL 08h
049B34 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
049B38 01 40 00 00 0136*  	ld bc,64
049B3C 11 40 00 00 0137*  	ld de,64
049B40 DD 21 00 10 0138*  	ld ix,4096
       00          
049B45 CD 3C B9 04 0139*  	call vdu_load_img
049B49 3E 2E       0140*  	LD A, '.'
049B4B 5B D7       0141*  	RST.LIL 10h
049B4D             0142*  
049B4D 21 F3 9D 04 0143*  	ld hl,F_UI_bj_knife_04
049B51 11 CB C3 04 0144*  	ld de,filedata
049B55 01 00 00 01 0145*  	ld bc,65536
049B59 3E 01       0146*  	ld a,mos_load
049B5B 5B CF       0147*  	RST.LIL 08h
049B5D 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
049B61 01 40 00 00 0149*  	ld bc,64
049B65 11 40 00 00 0150*  	ld de,64
049B69 DD 21 00 10 0151*  	ld ix,4096
       00          
049B6E CD 3C B9 04 0152*  	call vdu_load_img
049B72 3E 2E       0153*  	LD A, '.'
049B74 5B D7       0154*  	RST.LIL 10h
049B76             0155*  
049B76 21 0B 9E 04 0156*  	ld hl,F_UI_bj_machine_gun_00
049B7A 11 CB C3 04 0157*  	ld de,filedata
049B7E 01 00 00 01 0158*  	ld bc,65536
049B82 3E 01       0159*  	ld a,mos_load
049B84 5B CF       0160*  	RST.LIL 08h
049B86 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
049B8A 01 40 00 00 0162*  	ld bc,64
049B8E 11 40 00 00 0163*  	ld de,64
049B92 DD 21 00 10 0164*  	ld ix,4096
       00          
049B97 CD 3C B9 04 0165*  	call vdu_load_img
049B9B 3E 2E       0166*  	LD A, '.'
049B9D 5B D7       0167*  	RST.LIL 10h
049B9F             0168*  
049B9F 21 29 9E 04 0169*  	ld hl,F_UI_bj_machine_gun_01
049BA3 11 CB C3 04 0170*  	ld de,filedata
049BA7 01 00 00 01 0171*  	ld bc,65536
049BAB 3E 01       0172*  	ld a,mos_load
049BAD 5B CF       0173*  	RST.LIL 08h
049BAF 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
049BB3 01 40 00 00 0175*  	ld bc,64
049BB7 11 40 00 00 0176*  	ld de,64
049BBB DD 21 00 10 0177*  	ld ix,4096
       00          
049BC0 CD 3C B9 04 0178*  	call vdu_load_img
049BC4 3E 2E       0179*  	LD A, '.'
049BC6 5B D7       0180*  	RST.LIL 10h
049BC8             0181*  
049BC8 21 47 9E 04 0182*  	ld hl,F_UI_bj_machine_gun_02
049BCC 11 CB C3 04 0183*  	ld de,filedata
049BD0 01 00 00 01 0184*  	ld bc,65536
049BD4 3E 01       0185*  	ld a,mos_load
049BD6 5B CF       0186*  	RST.LIL 08h
049BD8 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
049BDC 01 40 00 00 0188*  	ld bc,64
049BE0 11 40 00 00 0189*  	ld de,64
049BE4 DD 21 00 10 0190*  	ld ix,4096
       00          
049BE9 CD 3C B9 04 0191*  	call vdu_load_img
049BED 3E 2E       0192*  	LD A, '.'
049BEF 5B D7       0193*  	RST.LIL 10h
049BF1             0194*  
049BF1 21 65 9E 04 0195*  	ld hl,F_UI_bj_machine_gun_03
049BF5 11 CB C3 04 0196*  	ld de,filedata
049BF9 01 00 00 01 0197*  	ld bc,65536
049BFD 3E 01       0198*  	ld a,mos_load
049BFF 5B CF       0199*  	RST.LIL 08h
049C01 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
049C05 01 40 00 00 0201*  	ld bc,64
049C09 11 40 00 00 0202*  	ld de,64
049C0D DD 21 00 10 0203*  	ld ix,4096
       00          
049C12 CD 3C B9 04 0204*  	call vdu_load_img
049C16 3E 2E       0205*  	LD A, '.'
049C18 5B D7       0206*  	RST.LIL 10h
049C1A             0207*  
049C1A 21 83 9E 04 0208*  	ld hl,F_UI_bj_machine_gun_04
049C1E 11 CB C3 04 0209*  	ld de,filedata
049C22 01 00 00 01 0210*  	ld bc,65536
049C26 3E 01       0211*  	ld a,mos_load
049C28 5B CF       0212*  	RST.LIL 08h
049C2A 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
049C2E 01 40 00 00 0214*  	ld bc,64
049C32 11 40 00 00 0215*  	ld de,64
049C36 DD 21 00 10 0216*  	ld ix,4096
       00          
049C3B CD 3C B9 04 0217*  	call vdu_load_img
049C3F 3E 2E       0218*  	LD A, '.'
049C41 5B D7       0219*  	RST.LIL 10h
049C43             0220*  
049C43 21 A1 9E 04 0221*  	ld hl,F_UI_bj_pistol_00
049C47 11 CB C3 04 0222*  	ld de,filedata
049C4B 01 00 00 01 0223*  	ld bc,65536
049C4F 3E 01       0224*  	ld a,mos_load
049C51 5B CF       0225*  	RST.LIL 08h
049C53 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
049C57 01 40 00 00 0227*  	ld bc,64
049C5B 11 40 00 00 0228*  	ld de,64
049C5F DD 21 00 10 0229*  	ld ix,4096
       00          
049C64 CD 3C B9 04 0230*  	call vdu_load_img
049C68 3E 2E       0231*  	LD A, '.'
049C6A 5B D7       0232*  	RST.LIL 10h
049C6C             0233*  
049C6C 21 BA 9E 04 0234*  	ld hl,F_UI_bj_pistol_01
049C70 11 CB C3 04 0235*  	ld de,filedata
049C74 01 00 00 01 0236*  	ld bc,65536
049C78 3E 01       0237*  	ld a,mos_load
049C7A 5B CF       0238*  	RST.LIL 08h
049C7C 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
049C80 01 40 00 00 0240*  	ld bc,64
049C84 11 40 00 00 0241*  	ld de,64
049C88 DD 21 00 10 0242*  	ld ix,4096
       00          
049C8D CD 3C B9 04 0243*  	call vdu_load_img
049C91 3E 2E       0244*  	LD A, '.'
049C93 5B D7       0245*  	RST.LIL 10h
049C95             0246*  
049C95 21 D3 9E 04 0247*  	ld hl,F_UI_bj_pistol_02
049C99 11 CB C3 04 0248*  	ld de,filedata
049C9D 01 00 00 01 0249*  	ld bc,65536
049CA1 3E 01       0250*  	ld a,mos_load
049CA3 5B CF       0251*  	RST.LIL 08h
049CA5 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
049CA9 01 40 00 00 0253*  	ld bc,64
049CAD 11 40 00 00 0254*  	ld de,64
049CB1 DD 21 00 10 0255*  	ld ix,4096
       00          
049CB6 CD 3C B9 04 0256*  	call vdu_load_img
049CBA 3E 2E       0257*  	LD A, '.'
049CBC 5B D7       0258*  	RST.LIL 10h
049CBE             0259*  
049CBE 21 EC 9E 04 0260*  	ld hl,F_UI_bj_pistol_03
049CC2 11 CB C3 04 0261*  	ld de,filedata
049CC6 01 00 00 01 0262*  	ld bc,65536
049CCA 3E 01       0263*  	ld a,mos_load
049CCC 5B CF       0264*  	RST.LIL 08h
049CCE 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
049CD2 01 40 00 00 0266*  	ld bc,64
049CD6 11 40 00 00 0267*  	ld de,64
049CDA DD 21 00 10 0268*  	ld ix,4096
       00          
049CDF CD 3C B9 04 0269*  	call vdu_load_img
049CE3 3E 2E       0270*  	LD A, '.'
049CE5 5B D7       0271*  	RST.LIL 10h
049CE7             0272*  
049CE7 21 05 9F 04 0273*  	ld hl,F_UI_bj_pistol_04
049CEB 11 CB C3 04 0274*  	ld de,filedata
049CEF 01 00 00 01 0275*  	ld bc,65536
049CF3 3E 01       0276*  	ld a,mos_load
049CF5 5B CF       0277*  	RST.LIL 08h
049CF7 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
049CFB 01 40 00 00 0279*  	ld bc,64
049CFF 11 40 00 00 0280*  	ld de,64
049D03 DD 21 00 10 0281*  	ld ix,4096
       00          
049D08 CD 3C B9 04 0282*  	call vdu_load_img
049D0C 3E 2E       0283*  	LD A, '.'
049D0E 5B D7       0284*  	RST.LIL 10h
049D10             0285*  
049D10 C9          0286*  	ret
049D11             0287*  
049D11 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049D2B 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049D45 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049D5F 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049D79 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049D93 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
049DAB 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
049DC3 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
049DDB 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
049DF3 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
049E0B 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
049E29 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
049E47 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
049E65 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
049E83 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
049EA1 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
049EBA 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
049ED3 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
049EEC 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
049F05 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
049F1E             0023   	include "src/asm/sprites.asm"
049F1E             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
049F1E             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
049F1E             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
049F1E             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
049F1E             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
049F1E             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
049F1E             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
049F1E             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
049F1E             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
049F1E             0010*  sprite_anim_tmr: equ 08 ; 1 byte  - when hits zero, draw next animation frame
049F1E             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
049F1E             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
049F1E             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, BCD
049F1E             0014*  sprite_health_modifier:   equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
049F1E             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
049F1E             0016*  sprite_record_size: equ 16 ; 16 bytes per sprite record
049F1E             0017*  
049F1E             0018*  ; sprite_triggers_mask defs
049F1E             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
049F1E             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
049F1E             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
049F1E             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
049F1E             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
049F1E             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
049F1E             0025*  
049F1E             0026*  ; ###### SPRITE TABLE VARIABLES ######
049F1E             0027*  ; maximum number of sprites
049F1E             0028*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
049F1E             0029*  table_total_bytes:      equ table_max_records*sprite_record_size
049F1E             0030*  
049F1E             0031*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
049F1E             0032*  sprite_table_base:       equ 0xB7FC00
049F1E             0033*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
049F1E             0034*  
049F1E             0035*  ; pointer to top address of current record, initialized to sprite_table_base
049F1E 00 FC B7    0036*  sprite_table_pointer: dl sprite_table_base
049F21             0037*  ; how many active sprites
049F21 00          0038*  table_active_sprites: db 0x00
049F22             0039*  ; flag indicating collision with screen edge
049F22             0040*  ; uses orientation codes to specify which edge(s)
049F22 00          0041*  sprite_screen_edge: db #00
049F23             0042*  ; next sprite id to use
049F23 00          0043*  sprite_next_id: db 0
049F24             0044*  
049F24             0045*  ; ######### COLLISION SPRITE PARAMETERS ##########
049F24             0046*  ; integer coordinates are all that are needed for collision calculations
049F24 00          0047*  collision_x: db 0x00
049F25 00          0048*  collision_y: db 0x00
049F26 00          0049*  collision_dim_x: db 0x00
049F27 00          0050*  collision_dim_y: db 0x00
049F28             0051*  
049F28             0052*  ; scratch variables
049F28 00          0053*  x: db 0x00 ; 8-bit signed integer
049F29 00          0054*  y: db 0x00 ; 8-bit signed integer
049F2A 00 00 00    0055*  x0: dl 0x000000 ; 16.8 signed fixed place
049F2D 00 00 00    0056*  y0: dl 0x000000 ; 16.8 signed fixed place
049F30 00 00 00    0057*  incx1: dl 0x000000 ; 16.8 signed fixed place
049F33 00 00 00    0058*  incy1: dl 0x000000 ; 16.8 signed fixed place
049F36 00 00 00    0059*  incx2: dl 0x000000 ; 16.8 signed fixed place
049F39 00 00 00    0060*  incy2: dl 0x000000 ; 16.8 signed fixed place
049F3C             0061*  
049F3C             0062*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
049F3C 00 00 00    0063*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
049F3F 00 00 00    0064*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F42 00 00 00    0065*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
049F45             0066*  
049F45             0067*  ; gets the next available sprite id
049F45             0068*  ; inputs; none
049F45             0069*  ; returns: if new sprite available, a = sprite id,
049F45             0070*  ;      ix pointing to new sprite vars, carry set
049F45             0071*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
049F45             0072*  ; destroys: a,b,hl,ix
049F45             0073*  ; affects: bumps table_active_sprites by one
049F45             0074*  table_get_next_id:
049F45 DD 21 00 FC 0075*      ld ix,sprite_table_base
       B7          
049F4A 11 10 00 00 0076*      ld de,sprite_record_size
049F4E 06 40       0077*      ld b,table_max_records
049F50             0078*  @loop:
049F50 DD 7E 01    0079*      ld a,(ix+sprite_obj)
049F53 A7          0080*      and a
049F54 28 06       0081*      jr z,@found
049F56 DD 19       0082*      add ix,de
049F58 10 F6       0083*      djnz @loop
049F5A             0084*  @notfound:
049F5A AF          0085*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
049F5B C9          0086*      ret
049F5C             0087*  @found:
049F5C             0088*  ; bump number of active sprites
049F5C 21 21 9F 04 0089*      ld hl,table_active_sprites
049F60 34          0090*      inc (hl)
049F61             0091*  ; return sprite id
049F61 3E 40       0092*      ld a,table_max_records
049F63 90          0093*      sub b
049F64 32 23 9F 04 0094*      ld (sprite_next_id),a
049F68 37          0095*      scf ; sets carry flag indicating we found a free sprite
049F69 C9          0096*      ret ; done
049F6A             0097*  
049F6A             0098*  ; deactivate the sprite with the given id
049F6A             0099*  ; inputs: a = sprite id
049F6A             0100*  ; outputs: nothing
049F6A             0101*  ; destroys: a,ix,de
049F6A             0102*  ; affects: decrements table_active_sprites by one
049F6A             0103*  table_deactivate_sprite:
049F6A F5          0104*      push af ; save sprite id bc we need it later
049F6B CD 88 AC 04 0105*      call vdu_sprite_select
049F6F CD 0C AD 04 0106*      call vdu_sprite_hide
049F73 F1          0107*      pop af ; restore sprite id
049F74 11 00 00 00 0108*      ld de,0 ; clear deu
049F78 57          0109*      ld d,a
049F79 1E 10       0110*      ld e,sprite_record_size
049F7B ED 5C       0111*      mlt de
049F7D DD 21 00 FC 0112*      ld ix,sprite_table_base
       B7          
049F82 DD 19       0113*      add ix,de
049F84 AF          0114*      xor a
049F85 DD 77 01    0115*      ld (ix+sprite_obj),a
049F88 DD 21 21 9F 0116*      ld ix,table_active_sprites
       04          
049F8D DD 35 00    0117*      dec (ix)
049F90 C9          0118*      ret
049F91             0119*  
049F91             0120*  ; sets iy and sprite_table_pointer to the sprite record with the given id
049F91             0121*  ; inputs: a = sprite id
049F91             0122*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
049F91             0123*  ; destroys: bc
049F91             0124*  sprite_set_pointer:
049F91 47          0125*      ld b,a
049F92 0E 10       0126*      ld c,sprite_record_size
049F94 ED 4C       0127*      mlt bc
049F96 FD 21 00 FC 0128*      ld iy,sprite_table_base
       B7          
049F9B FD 09       0129*      add iy,bc
049F9D FD 22 1E 9F 0130*      ld (sprite_table_pointer),iy
       04          
049FA2 C9          0131*      ret
049FA3             0132*  
049FA3             0133*  ; set the active sprite record to no sprite and remove it from the map cell it was in
049FA3             0134*  ; inputs: iy pointed at sprite record to clear
049FA3             0135*  sprite_kill:
049FA3             0136*  ; set sprite table record to no sprite
049FA3 21 FF FF FF 0137*      ld hl,0xFFFFFF ; a string of -1s
049FA7 FD 2F 00    0138*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
049FAA             0139*  
049FAA             0140*  ; set map cell to no sprite and normal floor
049FAA 21 01 FF 1D 0141*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
049FAE DD 2F 00    0142*      ld (ix),hl
049FB1 3E FF       0143*      ld a,0xFF ; no sprite
049FB3 DD 77 03    0144*      ld (ix+map_sprite_id),a ; now sprite is truly dead
049FB6 C9          0145*      ret
049FB7             0146*  
049FB7 00          0147*  sprite_new_x: db 0x00
049FB8 00          0148*  sprite_new_y: db 0x00
049FB9 00          0149*                db 0x00 ; padding
049FBA             0150*  
049FBA             0151*  ; checks if the sprite can move to the new position
049FBA             0152*  ; inputs: iy pointed at sprite record, d,e = new y,x position
049FBA             0153*  ; returns: a = 1 if move legal, 0 if not
049FBA             0154*  ; modifies: sprite_new_x,y populated by de with new y,x position irrespecitve of legality
049FBA             0155*  sprite_check_move:
049FBA ED 53 B7 9F 0156*      ld (sprite_new_x),de ; save new y,x position
       04          
049FBF             0157*  ; check whether target cell is occupied by player
049FBF 2A BB B2 04 0158*      ld hl,(cur_x) ; h,l = player y,x position
049FC3 AF          0159*      xor a ; clear carry
049FC4 ED 52       0160*      sbc hl,de ; zero if player is at target cell
049FC6 C2 D3 9F 04 0161*      jp nz,@not_player
049FCA 3E 01       0162*      ld a,sp_use ; TODO: add melee attack behavior to sprite routines
049FCC CD 88 A0 04 0163*      call do_sprite_behavior
049FD0 3E 01       0164*      ld a,1 ; signals caller that move was legal
049FD2 C9          0165*      ret
049FD3             0166*  @not_player:
049FD3 CD A2 65 04 0167*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FD7             0168*  ; check whether target cell contains a sprite
049FD7 DD 7E 03    0169*      ld a,(ix+map_sprite_id)
049FDA FE FF       0170*      cp 255 ; value if not sprite
049FDC CA E2 9F 04 0171*      jp z,@not_sprite
049FE0 AF          0172*      xor a ; signals caller that move was illegal
049FE1 C9          0173*      ret
049FE2             0174*  @not_sprite:
049FE2             0175*  ; read map type/status mask from target cell
049FE2 DD 7E 00    0176*      ld a,(ix+map_type_status)
049FE5 E6 01       0177*      and render_type_floor
049FE7 C8          0178*      ret z ; target cell is not a floor so we can't move there
049FE8             0179*  ; we are cleared for movement
049FE8 CD EF 9F 04 0180*      call sprite_move
049FEC 3E 01       0181*      ld a,1 ; signals caller that move was legal
049FEE C9          0182*      ret
049FEF             0183*  
049FEF             0184*  ; moves the sprite to the given map position
049FEF             0185*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
049FEF             0186*  sprite_move:
049FEF             0187*  ; update old sprite position to no sprite
049FEF FD 17 04    0188*      ld de,(iy+sprite_x) ; d,e = sprite current y,x position
049FF2 CD A2 65 04 0189*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
049FF6             0190*  ; set map cell to no sprite and normal floor
049FF6 21 01 FF 1D 0191*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dynanmically based on the defs in tiles.txt at some point
049FFA DD 2F 00    0192*      ld (ix),hl
049FFD 3E FF       0193*      ld a,0xFF ; no sprite
049FFF DD 77 03    0194*      ld (ix+map_sprite_id),a
04A002             0195*  ; update sprite record with new position
04A002 ED 5B B7 9F 0196*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
04A007 FD 1F 04    0197*      ld (iy+sprite_x),de
04A00A             0198*  ; update new map cell with sprite id
04A00A CD A2 65 04 0199*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A00E FD 7E 00    0200*      ld a,(iy+sprite_id)
04A011 DD 77 03    0201*      ld (ix+map_sprite_id),a
04A014 C9          0202*      ret
04A015             0203*  
04A015             0204*  ; move a sprite in a random direction
04A015             0205*  ; inputs: iy pointed at sprite record
04A015             0206*  ; destroys: potentially everything
04A015             0207*  sprite_move_random:
04A015             0208*  ; point iy at sprite record
04A015 FD 2A 1E 9F 0209*      ld iy,(sprite_table_pointer)
       04          
04A01A             0210*  ; set number of times to try a random direction before giving up
04A01A 06 08       0211*      ld b,8
04A01C             0212*  @loop:
04A01C C5          0213*      push bc ; save loop counter
04A01D             0214*  ; pick a random direction
04A01D CD A9 B7 04 0215*      call rand_8
04A021 E6 03       0216*      and 3 ; direction between 0 and 3
04A023             0217*  ; get dy,dx for moving once cell in the chosen direction
04A023 5F          0218*      ld e,a
04A024 16 01       0219*      ld d,1 ; distance
04A026 CD C7 65 04 0220*      call get_dx_dy ; d,e = dy,dx
04A02A             0221*  ; calculate new position
04A02A FD 7E 04    0222*      ld a,(iy+sprite_x)
04A02D 83          0223*      add a,e
04A02E E6 0F       0224*      and 15 ; modulo 16
04A030 5F          0225*      ld e,a
04A031 FD 7E 05    0226*      ld a,(iy+sprite_y)
04A034 82          0227*      add a,d
04A035 E6 0F       0228*      and 15 ; modulo 16
04A037 57          0229*      ld d,a
04A038 CD BA 9F 04 0230*      call sprite_check_move
04A03C C1          0231*      pop bc ; get back loop counter
04A03D A7          0232*      and a
04A03E C0          0233*      ret nz ; move was legal so we're done
04A03F 10 DB       0234*      djnz @loop ; try again
04A041 C9          0235*      ret ; no move found in 8 tries, so we're done
04A042             0236*  
04A042             0237*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04A042             0238*  sprite_behavior_lookup:
04A042 A5 A0 04    0239*      dl LAMP
04A045 EE A0 04    0240*      dl BARREL
04A048 4E A1 04    0241*      dl TABLE
04A04B 97 A1 04    0242*      dl OVERHEAD_LIGHT
04A04E E0 A1 04    0243*      dl RADIOACTIVE_BARREL
04A051 40 A2 04    0244*      dl HEALTH_PACK
04A054 8E A2 04    0245*      dl GOLD_CHALISE
04A057 E4 A2 04    0246*      dl GOLD_CROSS
04A05A 3A A3 04    0247*      dl PLATE_OF_FOOD
04A05D 88 A3 04    0248*      dl KEYCARD
04A060 DF A3 04    0249*      dl GOLD_CHEST
04A063 35 A4 04    0250*      dl MACHINE_GUN
04A066 9E A4 04    0251*      dl GATLING_GUN
04A069 07 A5 04    0252*      dl DOG_FOOD
04A06C 55 A5 04    0253*      dl GOLD_KEY
04A06F 9E A5 04    0254*      dl DOG
04A072 41 A6 04    0255*      dl GERMAN_TROOPER
04A075 F6 A6 04    0256*      dl SS_GUARD
04A078             0257*  
04A078             0258*  ; initializes sprite data for a particular sprite type and id
04A078             0259*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A078             0260*  sprite_init_data:
04A078 3E 00       0261*      ld a,sp_init ; index for sprite init routine
04A07A CD 88 A0 04 0262*      call do_sprite_behavior ; hl points at address to copy from
04A07E ED 13 02    0263*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04A081 01 0E 00 00 0264*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04A085 ED B0       0265*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04A087 C9          0266*      ret ; done
04A088             0267*  
04A088             0268*  ; #### SPRITE BEHAVIOR ROUTINES ####
04A088             0269*  ; sprite behavior indices
04A088             0270*  sp_init:   equ 0
04A088             0271*  sp_use:    equ 1
04A088             0272*  sp_hurt:  equ 2
04A088             0273*  sp_kill:   equ 3
04A088             0274*  sp_see:    equ 4
04A088             0275*  sp_move:  equ 5
04A088             0276*  sp_shoot:  equ 6
04A088             0277*  
04A088             0278*  ; calls the sprite behavior routine for the sprite pointed to by iy
04A088             0279*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A088             0280*  ;         a = type index of routine to call
04A088             0281*  do_sprite_behavior:
04A088 FD 22 1E 9F 0282*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04A08D FD 46 01    0283*      ld b,(iy+sprite_obj)
04A090 0E 03       0284*      ld c,3 ; three bytes per lookup record
04A092 ED 4C       0285*      mlt bc ; bc is offset from the base of the lookup table
04A094 21 42 A0 04 0286*      ld hl,sprite_behavior_lookup
04A098 09          0287*      add hl,bc
04A099 ED 27       0288*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04A09B 47          0289*      ld b,a ; b holds the routine index
04A09C 0E 03       0290*      ld c,3 ; three bytes per lookup record
04A09E ED 4C       0291*      mlt bc ; bc is offset from the base of the lookup table
04A0A0 09          0292*      add hl,bc ; hl points to the label of the routine to call
04A0A1 ED 27       0293*      ld hl,(hl) ; hl points to the routine to call
04A0A3 E9          0294*      jp (hl) ; call the behavior routine
04A0A4             0295*  sprite_behavior_return: ; we always return here from a sprite behavior call
04A0A4 C9          0296*      ret
04A0A5             0297*  
04A0A5             0298*  LAMP:
04A0A5             0299*  ; behavior routine address lookup
04A0A5 BA A0 04    0300*      dl @init
04A0A8 D0 A0 04    0301*      dl @use
04A0AB D4 A0 04    0302*      dl @hurt
04A0AE D9 A0 04    0303*      dl @kill
04A0B1 E1 A0 04    0304*      dl @see
04A0B4 E6 A0 04    0305*      dl @move
04A0B7 EA A0 04    0306*      dl @shoot
04A0BA             0307*  @init:
04A0BA 21 C2 A0 04 0308*      ld hl,@data ; address for LDIR to copy from
04A0BE C3 A4 A0 04 0309*      jp sprite_behavior_return
04A0C2             0310*  @data:
04A0C2 64          0311*      db 100 ;sprite_health
04A0C3 00          0312*      db 000 ;sprite_triggers_mask
04A0C4 00          0313*      db 000 ;sprite_x
04A0C5 00          0314*      db 000 ;sprite_y
04A0C6 00          0315*      db 000 ;sprite_orientation
04A0C7 00          0316*      db 000 ;sprite_animation
04A0C8 00          0317*      db 000 ;sprite_anim_tmr
04A0C9 01          0318*      db 001 ;sprite_move_timer
04A0CA 00          0319*      db 000 ;sprite_move_step
04A0CB 00          0320*      db 000 ;sprite_points
04A0CC 00          0321*      db 000 ;sprite_health_modifier
04A0CD 00          0322*      db 000 ;sprite_unassigned_0
04A0CE 00          0323*      db 000 ;sprite_unassigned_1
04A0CF 00          0324*      db 000 ;sprite_unassigned_2
04A0D0             0325*  @use:
04A0D0 C3 A4 A0 04 0326*      jp sprite_behavior_return
04A0D4             0327*  @hurt:
04A0D4 AF          0328*      xor a
04A0D5 C3 A4 A0 04 0329*      jp sprite_behavior_return
04A0D9             0330*  @kill:
04A0D9 CD A3 9F 04 0331*      call sprite_kill
04A0DD C3 A4 A0 04 0332*      jp sprite_behavior_return
04A0E1             0333*  @see:
04A0E1 AF          0334*      xor a
04A0E2 C3 A4 A0 04 0335*      jp sprite_behavior_return
04A0E6             0336*  @move:
04A0E6 C3 A4 A0 04 0337*      jp sprite_behavior_return
04A0EA             0338*  @shoot:
04A0EA C3 A4 A0 04 0339*      jp sprite_behavior_return
04A0EE             0340*  
04A0EE             0341*  BARREL:
04A0EE             0342*  ; behavior routine address lookup
04A0EE 03 A1 04    0343*      dl @init
04A0F1 19 A1 04    0344*      dl @use
04A0F4 1D A1 04    0345*      dl @hurt
04A0F7 31 A1 04    0346*      dl @kill
04A0FA 41 A1 04    0347*      dl @see
04A0FD 46 A1 04    0348*      dl @move
04A100 4A A1 04    0349*      dl @shoot
04A103             0350*  @init:
04A103 21 0B A1 04 0351*      ld hl,@data ; address for LDIR to copy from
04A107 C3 A4 A0 04 0352*      jp sprite_behavior_return
04A10B             0353*  @data:
04A10B 12          0354*      db 018 ;sprite_health
04A10C 00          0355*      db 000 ;sprite_triggers_mask
04A10D 00          0356*      db 000 ;sprite_x
04A10E 00          0357*      db 000 ;sprite_y
04A10F 00          0358*      db 000 ;sprite_orientation
04A110 00          0359*      db 000 ;sprite_animation
04A111 00          0360*      db 000 ;sprite_anim_tmr
04A112 01          0361*      db 001 ;sprite_move_timer
04A113 00          0362*      db 000 ;sprite_move_step
04A114 00          0363*      db 000 ;sprite_points
04A115 CE          0364*      db -50 ;sprite_health_modifier
04A116 00          0365*      db 000 ;sprite_unassigned_0
04A117 00          0366*      db 000 ;sprite_unassigned_1
04A118 00          0367*      db 000 ;sprite_unassigned_2
04A119             0368*  @use:
04A119 C3 A4 A0 04 0369*      jp sprite_behavior_return
04A11D             0370*  @hurt:
04A11D 3E FF       0371*      ld a,255 ; kill player's shot
04A11F 32 CB B2 04 0372*      ld (plyr_shot_status),a
04A123 3A CF B2 04 0373*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A127 FD 86 02    0374*      add a,(iy+sprite_health)
04A12A FD 77 02    0375*      ld (iy+sprite_health),a
04A12D F2 A4 A0 04 0376*      jp p,sprite_behavior_return ; if health is positive, return
04A131             0377*      ; otherwise fall through to kill sprite
04A131             0378*  @kill:
04A131 FD E5       0379*      push iy
04A133 CD E8 BE 04 0380*      call sfx_play_explode
04A137 FD E1       0381*      pop iy
04A139 CD A3 9F 04 0382*      call sprite_kill
04A13D C3 A4 A0 04 0383*      jp sprite_behavior_return
04A141             0384*  @see:
04A141 AF          0385*      xor a
04A142 C3 A4 A0 04 0386*      jp sprite_behavior_return
04A146             0387*  @move:
04A146 C3 A4 A0 04 0388*      jp sprite_behavior_return
04A14A             0389*  @shoot:
04A14A C3 A4 A0 04 0390*      jp sprite_behavior_return
04A14E             0391*  
04A14E             0392*  TABLE:
04A14E             0393*  ; behavior routine address lookup
04A14E 63 A1 04    0394*      dl @init
04A151 79 A1 04    0395*      dl @use
04A154 7D A1 04    0396*      dl @hurt
04A157 82 A1 04    0397*      dl @kill
04A15A 8A A1 04    0398*      dl @see
04A15D 8F A1 04    0399*      dl @move
04A160 93 A1 04    0400*      dl @shoot
04A163             0401*  @init:
04A163 21 6B A1 04 0402*      ld hl,@data ; address for LDIR to copy from
04A167 C3 A4 A0 04 0403*      jp sprite_behavior_return
04A16B             0404*  @data:
04A16B 64          0405*      db 100 ;sprite_health
04A16C 00          0406*      db 000 ;sprite_triggers_mask
04A16D 00          0407*      db 000 ;sprite_x
04A16E 00          0408*      db 000 ;sprite_y
04A16F 00          0409*      db 000 ;sprite_orientation
04A170 00          0410*      db 000 ;sprite_animation
04A171 00          0411*      db 000 ;sprite_anim_tmr
04A172 01          0412*      db 001 ;sprite_move_timer
04A173 00          0413*      db 000 ;sprite_move_step
04A174 00          0414*      db 000 ;sprite_points
04A175 00          0415*      db 000 ;sprite_health_modifier
04A176 00          0416*      db 000 ;sprite_unassigned_0
04A177 00          0417*      db 000 ;sprite_unassigned_1
04A178 00          0418*      db 000 ;sprite_unassigned_2
04A179             0419*  @use:
04A179 C3 A4 A0 04 0420*      jp sprite_behavior_return
04A17D             0421*  @hurt:
04A17D AF          0422*      xor a
04A17E C3 A4 A0 04 0423*      jp sprite_behavior_return
04A182             0424*  @kill:
04A182 CD A3 9F 04 0425*      call sprite_kill
04A186 C3 A4 A0 04 0426*      jp sprite_behavior_return
04A18A             0427*  @see:
04A18A AF          0428*      xor a
04A18B C3 A4 A0 04 0429*      jp sprite_behavior_return
04A18F             0430*  @move:
04A18F C3 A4 A0 04 0431*      jp sprite_behavior_return
04A193             0432*  @shoot:
04A193 C3 A4 A0 04 0433*      jp sprite_behavior_return
04A197             0434*  
04A197             0435*  OVERHEAD_LIGHT:
04A197             0436*  ; behavior routine address lookup
04A197 AC A1 04    0437*      dl @init
04A19A C2 A1 04    0438*      dl @use
04A19D C6 A1 04    0439*      dl @hurt
04A1A0 CB A1 04    0440*      dl @kill
04A1A3 D3 A1 04    0441*      dl @see
04A1A6 D8 A1 04    0442*      dl @move
04A1A9 DC A1 04    0443*      dl @shoot
04A1AC             0444*  @init:
04A1AC 21 B4 A1 04 0445*      ld hl,@data ; address for LDIR to copy from
04A1B0 C3 A4 A0 04 0446*      jp sprite_behavior_return
04A1B4             0447*  @data:
04A1B4 64          0448*      db 100 ;sprite_health
04A1B5 00          0449*      db 000 ;sprite_triggers_mask
04A1B6 00          0450*      db 000 ;sprite_x
04A1B7 00          0451*      db 000 ;sprite_y
04A1B8 00          0452*      db 000 ;sprite_orientation
04A1B9 00          0453*      db 000 ;sprite_animation
04A1BA 00          0454*      db 000 ;sprite_anim_tmr
04A1BB 01          0455*      db 001 ;sprite_move_timer
04A1BC 00          0456*      db 000 ;sprite_move_step
04A1BD 00          0457*      db 000 ;sprite_points
04A1BE 00          0458*      db 000 ;sprite_health_modifier
04A1BF 00          0459*      db 000 ;sprite_unassigned_0
04A1C0 00          0460*      db 000 ;sprite_unassigned_1
04A1C1 00          0461*      db 000 ;sprite_unassigned_2
04A1C2             0462*  @use:
04A1C2 C3 A4 A0 04 0463*      jp sprite_behavior_return
04A1C6             0464*  @hurt:
04A1C6 AF          0465*      xor a
04A1C7 C3 A4 A0 04 0466*      jp sprite_behavior_return
04A1CB             0467*  @kill:
04A1CB CD A3 9F 04 0468*      call sprite_kill
04A1CF C3 A4 A0 04 0469*      jp sprite_behavior_return
04A1D3             0470*  @see:
04A1D3 AF          0471*      xor a
04A1D4 C3 A4 A0 04 0472*      jp sprite_behavior_return
04A1D8             0473*  @move:
04A1D8 C3 A4 A0 04 0474*      jp sprite_behavior_return
04A1DC             0475*  @shoot:
04A1DC C3 A4 A0 04 0476*      jp sprite_behavior_return
04A1E0             0477*  
04A1E0             0478*  RADIOACTIVE_BARREL:
04A1E0             0479*  ; behavior routine address lookup
04A1E0 F5 A1 04    0480*      dl @init
04A1E3 0B A2 04    0481*      dl @use
04A1E6 0F A2 04    0482*      dl @hurt
04A1E9 23 A2 04    0483*      dl @kill
04A1EC 33 A2 04    0484*      dl @see
04A1EF 38 A2 04    0485*      dl @move
04A1F2 3C A2 04    0486*      dl @shoot
04A1F5             0487*  @init:
04A1F5 21 FD A1 04 0488*      ld hl,@data ; address for LDIR to copy from
04A1F9 C3 A4 A0 04 0489*      jp sprite_behavior_return
04A1FD             0490*  @data:
04A1FD 18          0491*      db 024 ;sprite_health
04A1FE 00          0492*      db 000 ;sprite_triggers_mask
04A1FF 00          0493*      db 000 ;sprite_x
04A200 00          0494*      db 000 ;sprite_y
04A201 00          0495*      db 000 ;sprite_orientation
04A202 00          0496*      db 000 ;sprite_animation
04A203 00          0497*      db 000 ;sprite_anim_tmr
04A204 01          0498*      db 001 ;sprite_move_timer
04A205 00          0499*      db 000 ;sprite_move_step
04A206 00          0500*      db 000 ;sprite_points
04A207 B5          0501*      db -75 ;sprite_health_modifier
04A208 00          0502*      db 000 ;sprite_unassigned_0
04A209 00          0503*      db 000 ;sprite_unassigned_1
04A20A 00          0504*      db 000 ;sprite_unassigned_2
04A20B             0505*  @use:
04A20B C3 A4 A0 04 0506*      jp sprite_behavior_return
04A20F             0507*  @hurt:
04A20F 3E FF       0508*      ld a,255 ; kill player's shot
04A211 32 CB B2 04 0509*      ld (plyr_shot_status),a
04A215 3A CF B2 04 0510*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A219 FD 86 02    0511*      add a,(iy+sprite_health)
04A21C FD 77 02    0512*      ld (iy+sprite_health),a
04A21F F2 A4 A0 04 0513*      jp p,sprite_behavior_return ; if health is positive, return
04A223             0514*      ; otherwise fall through to kill sprite
04A223             0515*  @kill:
04A223 FD E5       0516*      push iy
04A225 CD E8 BE 04 0517*      call sfx_play_explode
04A229 FD E1       0518*      pop iy
04A22B CD A3 9F 04 0519*      call sprite_kill
04A22F C3 A4 A0 04 0520*      jp sprite_behavior_return
04A233             0521*  @see:
04A233 AF          0522*      xor a
04A234 C3 A4 A0 04 0523*      jp sprite_behavior_return
04A238             0524*  @move:
04A238 C3 A4 A0 04 0525*      jp sprite_behavior_return
04A23C             0526*  @shoot:
04A23C C3 A4 A0 04 0527*      jp sprite_behavior_return
04A240             0528*  
04A240             0529*  HEALTH_PACK:
04A240             0530*  ; behavior routine address lookup
04A240 55 A2 04    0531*      dl @init
04A243 6B A2 04    0532*      dl @use
04A246 74 A2 04    0533*      dl @hurt
04A249 79 A2 04    0534*      dl @kill
04A24C 81 A2 04    0535*      dl @see
04A24F 86 A2 04    0536*      dl @move
04A252 8A A2 04    0537*      dl @shoot
04A255             0538*  @init:
04A255 21 5D A2 04 0539*      ld hl,@data ; address for LDIR to copy from
04A259 C3 A4 A0 04 0540*      jp sprite_behavior_return
04A25D             0541*  @data:
04A25D 64          0542*      db 100 ;sprite_health
04A25E 00          0543*      db 000 ;sprite_triggers_mask
04A25F 00          0544*      db 000 ;sprite_x
04A260 00          0545*      db 000 ;sprite_y
04A261 00          0546*      db 000 ;sprite_orientation
04A262 00          0547*      db 000 ;sprite_animation
04A263 00          0548*      db 000 ;sprite_anim_tmr
04A264 01          0549*      db 001 ;sprite_move_timer
04A265 00          0550*      db 000 ;sprite_move_step
04A266 00          0551*      db 000 ;sprite_points
04A267 14          0552*      db 020 ;sprite_health_modifier
04A268 00          0553*      db 000 ;sprite_unassigned_0
04A269 00          0554*      db 000 ;sprite_unassigned_1
04A26A 00          0555*      db 000 ;sprite_unassigned_2
04A26B             0556*  @use:
04A26B FD 7E 0C    0557*      ld a,(iy+sprite_health_modifier)
04A26E CD 7A B4 04 0558*      call plyr_add_health
04A272 18 05       0559*      jr @kill
04A274             0560*  @hurt:
04A274 AF          0561*      xor a
04A275 C3 A4 A0 04 0562*      jp sprite_behavior_return
04A279             0563*  @kill:
04A279 CD A3 9F 04 0564*      call sprite_kill
04A27D C3 A4 A0 04 0565*      jp sprite_behavior_return
04A281             0566*  @see:
04A281 AF          0567*      xor a
04A282 C3 A4 A0 04 0568*      jp sprite_behavior_return
04A286             0569*  @move:
04A286 C3 A4 A0 04 0570*      jp sprite_behavior_return
04A28A             0571*  @shoot:
04A28A C3 A4 A0 04 0572*      jp sprite_behavior_return
04A28E             0573*  
04A28E             0574*  GOLD_CHALISE:
04A28E             0575*  ; behavior routine address lookup
04A28E A3 A2 04    0576*      dl @init
04A291 B9 A2 04    0577*      dl @use
04A294 CA A2 04    0578*      dl @hurt
04A297 CF A2 04    0579*      dl @kill
04A29A D7 A2 04    0580*      dl @see
04A29D DC A2 04    0581*      dl @move
04A2A0 E0 A2 04    0582*      dl @shoot
04A2A3             0583*  @init:
04A2A3 21 AB A2 04 0584*      ld hl,@data ; address for LDIR to copy from
04A2A7 C3 A4 A0 04 0585*      jp sprite_behavior_return
04A2AB             0586*  @data:
04A2AB 64          0587*      db 100 ;sprite_health
04A2AC 00          0588*      db 000 ;sprite_triggers_mask
04A2AD 00          0589*      db 000 ;sprite_x
04A2AE 00          0590*      db 000 ;sprite_y
04A2AF 00          0591*      db 000 ;sprite_orientation
04A2B0 00          0592*      db 000 ;sprite_animation
04A2B1 00          0593*      db 000 ;sprite_anim_tmr
04A2B2 01          0594*      db 001 ;sprite_move_timer
04A2B3 00          0595*      db 000 ;sprite_move_step
04A2B4 64          0596*      db 100 ;sprite_points
04A2B5 00          0597*      db 000 ;sprite_health_modifier
04A2B6 00          0598*      db 000 ;sprite_unassigned_0
04A2B7 00          0599*      db 000 ;sprite_unassigned_1
04A2B8 00          0600*      db 000 ;sprite_unassigned_2
04A2B9             0601*  @use:
04A2B9 FD E5       0602*      push iy
04A2BB CD F4 BE 04 0603*      call sfx_play_got_treasure
04A2BF FD E1       0604*      pop iy
04A2C1 FD 7E 0B    0605*      ld a,(iy+sprite_points)
04A2C4 CD 9B B4 04 0606*      call plyr_mod_score
04A2C8 18 05       0607*      jr @kill
04A2CA             0608*  @hurt:
04A2CA AF          0609*      xor a
04A2CB C3 A4 A0 04 0610*      jp sprite_behavior_return
04A2CF             0611*  @kill:
04A2CF CD A3 9F 04 0612*      call sprite_kill
04A2D3 C3 A4 A0 04 0613*      jp sprite_behavior_return
04A2D7             0614*  @see:
04A2D7 AF          0615*      xor a
04A2D8 C3 A4 A0 04 0616*      jp sprite_behavior_return
04A2DC             0617*  @move:
04A2DC C3 A4 A0 04 0618*      jp sprite_behavior_return
04A2E0             0619*  @shoot:
04A2E0 C3 A4 A0 04 0620*      jp sprite_behavior_return
04A2E4             0621*  
04A2E4             0622*  GOLD_CROSS:
04A2E4             0623*  ; behavior routine address lookup
04A2E4 F9 A2 04    0624*      dl @init
04A2E7 0F A3 04    0625*      dl @use
04A2EA 20 A3 04    0626*      dl @hurt
04A2ED 25 A3 04    0627*      dl @kill
04A2F0 2D A3 04    0628*      dl @see
04A2F3 32 A3 04    0629*      dl @move
04A2F6 36 A3 04    0630*      dl @shoot
04A2F9             0631*  @init:
04A2F9 21 01 A3 04 0632*      ld hl,@data ; address for LDIR to copy from
04A2FD C3 A4 A0 04 0633*      jp sprite_behavior_return
04A301             0634*  @data:
04A301 64          0635*      db 100 ;sprite_health
04A302 00          0636*      db 000 ;sprite_triggers_mask
04A303 00          0637*      db 000 ;sprite_x
04A304 00          0638*      db 000 ;sprite_y
04A305 00          0639*      db 000 ;sprite_orientation
04A306 00          0640*      db 000 ;sprite_animation
04A307 00          0641*      db 000 ;sprite_anim_tmr
04A308 01          0642*      db 001 ;sprite_move_timer
04A309 00          0643*      db 000 ;sprite_move_step
04A30A 32          0644*      db 050 ;sprite_points
04A30B 00          0645*      db 000 ;sprite_health_modifier
04A30C 00          0646*      db 000 ;sprite_unassigned_0
04A30D 00          0647*      db 000 ;sprite_unassigned_1
04A30E 00          0648*      db 000 ;sprite_unassigned_2
04A30F             0649*  @use:
04A30F FD E5       0650*      push iy
04A311 CD F4 BE 04 0651*      call sfx_play_got_treasure
04A315 FD E1       0652*      pop iy
04A317 FD 7E 0B    0653*      ld a,(iy+sprite_points)
04A31A CD 9B B4 04 0654*      call plyr_mod_score
04A31E 18 05       0655*      jr @kill
04A320             0656*  @hurt:
04A320 AF          0657*      xor a
04A321 C3 A4 A0 04 0658*      jp sprite_behavior_return
04A325             0659*  @kill:
04A325 CD A3 9F 04 0660*      call sprite_kill
04A329 C3 A4 A0 04 0661*      jp sprite_behavior_return
04A32D             0662*  @see:
04A32D AF          0663*      xor a
04A32E C3 A4 A0 04 0664*      jp sprite_behavior_return
04A332             0665*  @move:
04A332 C3 A4 A0 04 0666*      jp sprite_behavior_return
04A336             0667*  @shoot:
04A336 C3 A4 A0 04 0668*      jp sprite_behavior_return
04A33A             0669*  
04A33A             0670*  PLATE_OF_FOOD:
04A33A             0671*  ; behavior routine address lookup
04A33A 4F A3 04    0672*      dl @init
04A33D 65 A3 04    0673*      dl @use
04A340 6E A3 04    0674*      dl @hurt
04A343 73 A3 04    0675*      dl @kill
04A346 7B A3 04    0676*      dl @see
04A349 80 A3 04    0677*      dl @move
04A34C 84 A3 04    0678*      dl @shoot
04A34F             0679*  @init:
04A34F 21 57 A3 04 0680*      ld hl,@data ; address for LDIR to copy from
04A353 C3 A4 A0 04 0681*      jp sprite_behavior_return
04A357             0682*  @data:
04A357 64          0683*      db 100 ;sprite_health
04A358 00          0684*      db 000 ;sprite_triggers_mask
04A359 00          0685*      db 000 ;sprite_x
04A35A 00          0686*      db 000 ;sprite_y
04A35B 00          0687*      db 000 ;sprite_orientation
04A35C 00          0688*      db 000 ;sprite_animation
04A35D 00          0689*      db 000 ;sprite_anim_tmr
04A35E 01          0690*      db 001 ;sprite_move_timer
04A35F 00          0691*      db 000 ;sprite_move_step
04A360 00          0692*      db 000 ;sprite_points
04A361 0A          0693*      db 010 ;sprite_health_modifier
04A362 00          0694*      db 000 ;sprite_unassigned_0
04A363 00          0695*      db 000 ;sprite_unassigned_1
04A364 00          0696*      db 000 ;sprite_unassigned_2
04A365             0697*  @use:
04A365 FD 7E 0C    0698*      ld a,(iy+sprite_health_modifier)
04A368 CD 7A B4 04 0699*      call plyr_add_health
04A36C 18 05       0700*      jr @kill
04A36E             0701*  @hurt:
04A36E AF          0702*      xor a
04A36F C3 A4 A0 04 0703*      jp sprite_behavior_return
04A373             0704*  @kill:
04A373 CD A3 9F 04 0705*      call sprite_kill
04A377 C3 A4 A0 04 0706*      jp sprite_behavior_return
04A37B             0707*  @see:
04A37B AF          0708*      xor a
04A37C C3 A4 A0 04 0709*      jp sprite_behavior_return
04A380             0710*  @move:
04A380 C3 A4 A0 04 0711*      jp sprite_behavior_return
04A384             0712*  @shoot:
04A384 C3 A4 A0 04 0713*      jp sprite_behavior_return
04A388             0714*  
04A388             0715*  KEYCARD:
04A388             0716*  ; behavior routine address lookup
04A388 9D A3 04    0717*      dl @init
04A38B B3 A3 04    0718*      dl @use
04A38E C5 A3 04    0719*      dl @hurt
04A391 CA A3 04    0720*      dl @kill
04A394 D2 A3 04    0721*      dl @see
04A397 D7 A3 04    0722*      dl @move
04A39A DB A3 04    0723*      dl @shoot
04A39D             0724*  @init:
04A39D 21 A5 A3 04 0725*      ld hl,@data ; address for LDIR to copy from
04A3A1 C3 A4 A0 04 0726*      jp sprite_behavior_return
04A3A5             0727*  @data:
04A3A5 64          0728*      db 100 ;sprite_health
04A3A6 00          0729*      db 000 ;sprite_triggers_mask
04A3A7 00          0730*      db 000 ;sprite_x
04A3A8 00          0731*      db 000 ;sprite_y
04A3A9 00          0732*      db 000 ;sprite_orientation
04A3AA 00          0733*      db 000 ;sprite_animation
04A3AB 00          0734*      db 000 ;sprite_anim_tmr
04A3AC 01          0735*      db 001 ;sprite_move_timer
04A3AD 00          0736*      db 000 ;sprite_move_step
04A3AE 00          0737*      db 000 ;sprite_points
04A3AF 00          0738*      db 000 ;sprite_health_modifier
04A3B0 00          0739*      db 000 ;sprite_unassigned_0
04A3B1 00          0740*      db 000 ;sprite_unassigned_1
04A3B2 00          0741*      db 000 ;sprite_unassigned_2
04A3B3             0742*  @use:
04A3B3 3E 08       0743*      ld a,8
04A3B5 CD AA B4 04 0744*      call plyr_add_ammo
04A3B9 CD 0C BF 04 0745*      call sfx_play_gun_reload
04A3BD CD A3 9F 04 0746*      call sprite_kill
04A3C1 C3 A4 A0 04 0747*      jp sprite_behavior_return
04A3C5             0748*  @hurt:
04A3C5 AF          0749*      xor a
04A3C6 C3 A4 A0 04 0750*      jp sprite_behavior_return
04A3CA             0751*  @kill:
04A3CA CD A3 9F 04 0752*      call sprite_kill
04A3CE C3 A4 A0 04 0753*      jp sprite_behavior_return
04A3D2             0754*  @see:
04A3D2 AF          0755*      xor a
04A3D3 C3 A4 A0 04 0756*      jp sprite_behavior_return
04A3D7             0757*  @move:
04A3D7 C3 A4 A0 04 0758*      jp sprite_behavior_return
04A3DB             0759*  @shoot:
04A3DB C3 A4 A0 04 0760*      jp sprite_behavior_return
04A3DF             0761*  
04A3DF             0762*  GOLD_CHEST:
04A3DF             0763*  ; behavior routine address lookup
04A3DF F4 A3 04    0764*      dl @init
04A3E2 0A A4 04    0765*      dl @use
04A3E5 1B A4 04    0766*      dl @hurt
04A3E8 20 A4 04    0767*      dl @kill
04A3EB 28 A4 04    0768*      dl @see
04A3EE 2D A4 04    0769*      dl @move
04A3F1 31 A4 04    0770*      dl @shoot
04A3F4             0771*  @init:
04A3F4 21 FC A3 04 0772*      ld hl,@data ; address for LDIR to copy from
04A3F8 C3 A4 A0 04 0773*      jp sprite_behavior_return
04A3FC             0774*  @data:
04A3FC 64          0775*      db 100 ;sprite_health
04A3FD 00          0776*      db 000 ;sprite_triggers_mask
04A3FE 00          0777*      db 000 ;sprite_x
04A3FF 00          0778*      db 000 ;sprite_y
04A400 00          0779*      db 000 ;sprite_orientation
04A401 00          0780*      db 000 ;sprite_animation
04A402 00          0781*      db 000 ;sprite_anim_tmr
04A403 01          0782*      db 001 ;sprite_move_timer
04A404 00          0783*      db 000 ;sprite_move_step
04A405 FA          0784*      db 250 ;sprite_points
04A406 00          0785*      db 000 ;sprite_health_modifier
04A407 00          0786*      db 000 ;sprite_unassigned_0
04A408 00          0787*      db 000 ;sprite_unassigned_1
04A409 00          0788*      db 000 ;sprite_unassigned_2
04A40A             0789*  @use:
04A40A FD E5       0790*      push iy
04A40C CD F4 BE 04 0791*      call sfx_play_got_treasure
04A410 FD E1       0792*      pop iy
04A412 FD 7E 0B    0793*      ld a,(iy+sprite_points)
04A415 CD 9B B4 04 0794*      call plyr_mod_score
04A419 18 05       0795*      jr @kill
04A41B             0796*  @hurt:
04A41B AF          0797*      xor a
04A41C C3 A4 A0 04 0798*      jp sprite_behavior_return
04A420             0799*  @kill:
04A420 CD A3 9F 04 0800*      call sprite_kill
04A424 C3 A4 A0 04 0801*      jp sprite_behavior_return
04A428             0802*  @see:
04A428 AF          0803*      xor a
04A429 C3 A4 A0 04 0804*      jp sprite_behavior_return
04A42D             0805*  @move:
04A42D C3 A4 A0 04 0806*      jp sprite_behavior_return
04A431             0807*  @shoot:
04A431 C3 A4 A0 04 0808*      jp sprite_behavior_return
04A435             0809*  
04A435             0810*  MACHINE_GUN:
04A435             0811*  ; behavior routine address lookup
04A435 4A A4 04    0812*      dl @init
04A438 60 A4 04    0813*      dl @use
04A43B 84 A4 04    0814*      dl @hurt
04A43E 89 A4 04    0815*      dl @kill
04A441 91 A4 04    0816*      dl @see
04A444 96 A4 04    0817*      dl @move
04A447 9A A4 04    0818*      dl @shoot
04A44A             0819*  @init:
04A44A 21 52 A4 04 0820*      ld hl,@data ; address for LDIR to copy from
04A44E C3 A4 A0 04 0821*      jp sprite_behavior_return
04A452             0822*  @data:
04A452 64          0823*      db 100 ;sprite_health
04A453 00          0824*      db 000 ;sprite_triggers_mask
04A454 00          0825*      db 000 ;sprite_x
04A455 00          0826*      db 000 ;sprite_y
04A456 00          0827*      db 000 ;sprite_orientation
04A457 00          0828*      db 000 ;sprite_animation
04A458 00          0829*      db 000 ;sprite_anim_tmr
04A459 01          0830*      db 001 ;sprite_move_timer
04A45A 00          0831*      db 000 ;sprite_move_step
04A45B 00          0832*      db 000 ;sprite_points
04A45C 00          0833*      db 000 ;sprite_health_modifier
04A45D 00          0834*      db 000 ;sprite_unassigned_0
04A45E 00          0835*      db 000 ;sprite_unassigned_1
04A45F 00          0836*      db 000 ;sprite_unassigned_2
04A460             0837*  @use:
04A460 3E 10       0838*      ld a,16
04A462 CD AA B4 04 0839*      call plyr_add_ammo
04A466 CD 0C BF 04 0840*      call sfx_play_gun_reload
04A46A 3E 04       0841*      ld a,plyr_wpn_mg
04A46C 21 D0 B2 04 0842*      ld hl,plyr_wpns
04A470 B6          0843*      or (hl)
04A471 77          0844*      ld (hl),a
04A472 3E 04       0845*      ld a,plyr_wpn_mg
04A474 32 D1 B2 04 0846*      ld (plyr_wpn_active),a
04A478 CD C1 B3 04 0847*      call plyr_set_weapon_parameters
04A47C CD A3 9F 04 0848*      call sprite_kill
04A480 C3 A4 A0 04 0849*      jp sprite_behavior_return
04A484             0850*  @hurt:
04A484 AF          0851*      xor a
04A485 C3 A4 A0 04 0852*      jp sprite_behavior_return
04A489             0853*  @kill:
04A489 CD A3 9F 04 0854*      call sprite_kill
04A48D C3 A4 A0 04 0855*      jp sprite_behavior_return
04A491             0856*  @see:
04A491 AF          0857*      xor a
04A492 C3 A4 A0 04 0858*      jp sprite_behavior_return
04A496             0859*  @move:
04A496 C3 A4 A0 04 0860*      jp sprite_behavior_return
04A49A             0861*  @shoot:
04A49A C3 A4 A0 04 0862*      jp sprite_behavior_return
04A49E             0863*  
04A49E             0864*  GATLING_GUN:
04A49E             0865*  ; behavior routine address lookup
04A49E B3 A4 04    0866*      dl @init
04A4A1 C9 A4 04    0867*      dl @use
04A4A4 ED A4 04    0868*      dl @hurt
04A4A7 F2 A4 04    0869*      dl @kill
04A4AA FA A4 04    0870*      dl @see
04A4AD FF A4 04    0871*      dl @move
04A4B0 03 A5 04    0872*      dl @shoot
04A4B3             0873*  @init:
04A4B3 21 BB A4 04 0874*      ld hl,@data ; address for LDIR to copy from
04A4B7 C3 A4 A0 04 0875*      jp sprite_behavior_return
04A4BB             0876*  @data:
04A4BB 64          0877*      db 100 ;sprite_health
04A4BC 00          0878*      db 000 ;sprite_triggers_mask
04A4BD 00          0879*      db 000 ;sprite_x
04A4BE 00          0880*      db 000 ;sprite_y
04A4BF 00          0881*      db 000 ;sprite_orientation
04A4C0 00          0882*      db 000 ;sprite_animation
04A4C1 00          0883*      db 000 ;sprite_anim_tmr
04A4C2 01          0884*      db 001 ;sprite_move_timer
04A4C3 00          0885*      db 000 ;sprite_move_step
04A4C4 00          0886*      db 000 ;sprite_points
04A4C5 00          0887*      db 000 ;sprite_health_modifier
04A4C6 00          0888*      db 000 ;sprite_unassigned_0
04A4C7 00          0889*      db 000 ;sprite_unassigned_1
04A4C8 00          0890*      db 000 ;sprite_unassigned_2
04A4C9             0891*  @use:
04A4C9 3E 20       0892*      ld a,32
04A4CB CD AA B4 04 0893*      call plyr_add_ammo
04A4CF CD 0C BF 04 0894*      call sfx_play_gun_reload
04A4D3 3E 08       0895*      ld a,plyr_wpn_gg
04A4D5 21 D0 B2 04 0896*      ld hl,plyr_wpns
04A4D9 B6          0897*      or (hl)
04A4DA 77          0898*      ld (hl),a
04A4DB 3E 08       0899*      ld a,plyr_wpn_gg
04A4DD 32 D1 B2 04 0900*      ld (plyr_wpn_active),a
04A4E1 CD C1 B3 04 0901*      call plyr_set_weapon_parameters
04A4E5 CD A3 9F 04 0902*      call sprite_kill
04A4E9 C3 A4 A0 04 0903*      jp sprite_behavior_return
04A4ED             0904*  @hurt:
04A4ED AF          0905*      xor a
04A4EE C3 A4 A0 04 0906*      jp sprite_behavior_return
04A4F2             0907*  @kill:
04A4F2 CD A3 9F 04 0908*      call sprite_kill
04A4F6 C3 A4 A0 04 0909*      jp sprite_behavior_return
04A4FA             0910*  @see:
04A4FA AF          0911*      xor a
04A4FB C3 A4 A0 04 0912*      jp sprite_behavior_return
04A4FF             0913*  @move:
04A4FF C3 A4 A0 04 0914*      jp sprite_behavior_return
04A503             0915*  @shoot:
04A503 C3 A4 A0 04 0916*      jp sprite_behavior_return
04A507             0917*  
04A507             0918*  DOG_FOOD:
04A507             0919*  ; behavior routine address lookup
04A507 1C A5 04    0920*      dl @init
04A50A 32 A5 04    0921*      dl @use
04A50D 3B A5 04    0922*      dl @hurt
04A510 40 A5 04    0923*      dl @kill
04A513 48 A5 04    0924*      dl @see
04A516 4D A5 04    0925*      dl @move
04A519 51 A5 04    0926*      dl @shoot
04A51C             0927*  @init:
04A51C 21 24 A5 04 0928*      ld hl,@data ; address for LDIR to copy from
04A520 C3 A4 A0 04 0929*      jp sprite_behavior_return
04A524             0930*  @data:
04A524 64          0931*      db 100 ;sprite_health
04A525 00          0932*      db 000 ;sprite_triggers_mask
04A526 00          0933*      db 000 ;sprite_x
04A527 00          0934*      db 000 ;sprite_y
04A528 00          0935*      db 000 ;sprite_orientation
04A529 00          0936*      db 000 ;sprite_animation
04A52A 00          0937*      db 000 ;sprite_anim_tmr
04A52B 01          0938*      db 001 ;sprite_move_timer
04A52C 00          0939*      db 000 ;sprite_move_step
04A52D 00          0940*      db 000 ;sprite_points
04A52E 05          0941*      db 005 ;sprite_health_modifier
04A52F 00          0942*      db 000 ;sprite_unassigned_0
04A530 00          0943*      db 000 ;sprite_unassigned_1
04A531 00          0944*      db 000 ;sprite_unassigned_2
04A532             0945*  @use:
04A532 FD 7E 0C    0946*      ld a,(iy+sprite_health_modifier)
04A535 CD 7A B4 04 0947*      call plyr_add_health
04A539 18 05       0948*      jr @kill
04A53B             0949*  @hurt:
04A53B AF          0950*      xor a
04A53C C3 A4 A0 04 0951*      jp sprite_behavior_return
04A540             0952*  @kill:
04A540 CD A3 9F 04 0953*      call sprite_kill
04A544 C3 A4 A0 04 0954*      jp sprite_behavior_return
04A548             0955*  @see:
04A548 AF          0956*      xor a
04A549 C3 A4 A0 04 0957*      jp sprite_behavior_return
04A54D             0958*  @move:
04A54D C3 A4 A0 04 0959*      jp sprite_behavior_return
04A551             0960*  @shoot:
04A551 C3 A4 A0 04 0961*      jp sprite_behavior_return
04A555             0962*  
04A555             0963*  GOLD_KEY:
04A555             0964*  ; behavior routine address lookup
04A555 6A A5 04    0965*      dl @init
04A558 80 A5 04    0966*      dl @use
04A55B 84 A5 04    0967*      dl @hurt
04A55E 89 A5 04    0968*      dl @kill
04A561 91 A5 04    0969*      dl @see
04A564 96 A5 04    0970*      dl @move
04A567 9A A5 04    0971*      dl @shoot
04A56A             0972*  @init:
04A56A 21 72 A5 04 0973*      ld hl,@data ; address for LDIR to copy from
04A56E C3 A4 A0 04 0974*      jp sprite_behavior_return
04A572             0975*  @data:
04A572 64          0976*      db 100 ;sprite_health
04A573 00          0977*      db 000 ;sprite_triggers_mask
04A574 00          0978*      db 000 ;sprite_x
04A575 00          0979*      db 000 ;sprite_y
04A576 00          0980*      db 000 ;sprite_orientation
04A577 00          0981*      db 000 ;sprite_animation
04A578 00          0982*      db 000 ;sprite_anim_tmr
04A579 01          0983*      db 001 ;sprite_move_timer
04A57A 00          0984*      db 000 ;sprite_move_step
04A57B 00          0985*      db 000 ;sprite_points
04A57C 00          0986*      db 000 ;sprite_health_modifier
04A57D 00          0987*      db 000 ;sprite_unassigned_0
04A57E 00          0988*      db 000 ;sprite_unassigned_1
04A57F 00          0989*      db 000 ;sprite_unassigned_2
04A580             0990*  @use:
04A580 C3 A4 A0 04 0991*      jp sprite_behavior_return
04A584             0992*  @hurt:
04A584 AF          0993*      xor a
04A585 C3 A4 A0 04 0994*      jp sprite_behavior_return
04A589             0995*  @kill:
04A589 CD A3 9F 04 0996*      call sprite_kill
04A58D C3 A4 A0 04 0997*      jp sprite_behavior_return
04A591             0998*  @see:
04A591 AF          0999*      xor a
04A592 C3 A4 A0 04 1000*      jp sprite_behavior_return
04A596             1001*  @move:
04A596 C3 A4 A0 04 1002*      jp sprite_behavior_return
04A59A             1003*  @shoot:
04A59A C3 A4 A0 04 1004*      jp sprite_behavior_return
04A59E             1005*  
04A59E             1006*  DOG:
04A59E             1007*  ; behavior routine address lookup
04A59E B3 A5 04    1008*      dl @init
04A5A1 C9 A5 04    1009*      dl @use
04A5A4 DC A5 04    1010*      dl @hurt
04A5A7 02 A6 04    1011*      dl @kill
04A5AA 19 A6 04    1012*      dl @see
04A5AD 21 A6 04    1013*      dl @move
04A5B0 3D A6 04    1014*      dl @shoot
04A5B3             1015*  @init:
04A5B3 21 BB A5 04 1016*      ld hl,@data ; address for LDIR to copy from
04A5B7 C3 A4 A0 04 1017*      jp sprite_behavior_return
04A5BB             1018*  @data:
04A5BB 32          1019*      db 050 ;sprite_health
04A5BC 00          1020*      db 000 ;sprite_triggers_mask
04A5BD 00          1021*      db 000 ;sprite_x
04A5BE 00          1022*      db 000 ;sprite_y
04A5BF 00          1023*      db 000 ;sprite_orientation
04A5C0 00          1024*      db 000 ;sprite_animation
04A5C1 00          1025*      db 000 ;sprite_anim_tmr
04A5C2 01          1026*      db 001 ;sprite_move_timer
04A5C3 00          1027*      db 000 ;sprite_move_step
04A5C4 0A          1028*      db 010 ;sprite_points
04A5C5 F6          1029*      db -10 ;sprite_health_modifier
04A5C6 00          1030*      db 000 ;sprite_unassigned_0
04A5C7 00          1031*      db 000 ;sprite_unassigned_1
04A5C8 00          1032*      db 000 ;sprite_unassigned_2
04A5C9             1033*  @use:
04A5C9 FD E5       1034*      push iy
04A5CB CD D0 BE 04 1035*      call sfx_play_dog_woof_single
04A5CF FD E1       1036*      pop iy
04A5D1 FD 7E 0C    1037*      ld a,(iy+sprite_health_modifier)
04A5D4 CD 87 B4 04 1038*      call plyr_sub_health
04A5D8 C3 A4 A0 04 1039*      jp sprite_behavior_return
04A5DC             1040*  @hurt:
04A5DC CD A9 B7 04 1041*      call rand_8
04A5E0 E6 01       1042*      and %00000001
04A5E2 C2 EE A5 04 1043*      jp nz,@nosound
04A5E6 FD E5       1044*      push iy
04A5E8 CD DC BE 04 1045*      call sfx_play_dog_yelp
04A5EC FD E1       1046*      pop iy
04A5EE             1047*  @nosound:
04A5EE 3E FF       1048*      ld a,255 ; kill player's shot
04A5F0 32 CB B2 04 1049*      ld (plyr_shot_status),a
04A5F4 3A CF B2 04 1050*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A5F8 FD 86 02    1051*      add a,(iy+sprite_health)
04A5FB FD 77 02    1052*      ld (iy+sprite_health),a
04A5FE             1053*      ; jp p,sprite_behavior_return ; if health is positive, return
04A5FE F2 28 A6 04 1054*      jp p,@do_move
04A602             1055*      ; otherwise fall through to kill sprite
04A602             1056*  @kill:
04A602 FD E5       1057*      push iy
04A604 CD DC BE 04 1058*      call sfx_play_dog_yelp
04A608 FD E1       1059*      pop iy
04A60A FD 7E 0B    1060*      ld a,(iy+sprite_points)
04A60D CD 9B B4 04 1061*      call plyr_mod_score
04A611 CD A3 9F 04 1062*      call sprite_kill
04A615 C3 A4 A0 04 1063*      jp sprite_behavior_return
04A619             1064*  @see:
04A619 18 06       1065*      jr @move
04A61B             1066*  @seen:
04A61B AF          1067*      xor a
04A61C 3C          1068*      inc a
04A61D C3 A4 A0 04 1069*      jp sprite_behavior_return
04A621             1070*  @move:
04A621 FD 35 09    1071*      dec (iy+sprite_move_timer)
04A624 28 02       1072*      jr z,@do_move
04A626 18 F3       1073*      jr @seen
04A628             1074*  @do_move:
04A628 CD A9 B7 04 1075*      call rand_8
04A62C E6 3F       1076*      and %00111111 ; between 0 and 63
04A62E             1077*      ; or %00100000  ; at least 32
04A62E F6 10       1078*      or %00010000  ; at least 16
04A630 FD 77 09    1079*      ld (iy+sprite_move_timer),a
04A633 CD 15 A0 04 1080*      call sprite_move_random
04A637 CD C4 BE 04 1081*      call sfx_play_dog_woof_double
04A63B 18 DE       1082*      jr @seen
04A63D             1083*  @shoot:
04A63D C3 A4 A0 04 1084*      jp sprite_behavior_return
04A641             1085*  
04A641             1086*  GERMAN_TROOPER:
04A641             1087*  ; behavior routine address lookup
04A641 56 A6 04    1088*      dl @init
04A644 6C A6 04    1089*      dl @use
04A647 7E A6 04    1090*      dl @hurt
04A64A A4 A6 04    1091*      dl @kill
04A64D BB A6 04    1092*      dl @see
04A650 DA A6 04    1093*      dl @move
04A653 F2 A6 04    1094*      dl @shoot
04A656             1095*  @init:
04A656 21 5E A6 04 1096*      ld hl,@data ; address for LDIR to copy from
04A65A C3 A4 A0 04 1097*      jp sprite_behavior_return
04A65E             1098*  @data:
04A65E 4B          1099*      db 075 ;sprite_health
04A65F 00          1100*      db 000 ;sprite_triggers_mask
04A660 00          1101*      db 000 ;sprite_x
04A661 00          1102*      db 000 ;sprite_y
04A662 00          1103*      db 000 ;sprite_orientation
04A663 00          1104*      db 000 ;sprite_animation
04A664 00          1105*      db 000 ;sprite_anim_tmr
04A665 01          1106*      db 001 ;sprite_move_timer
04A666 00          1107*      db 000 ;sprite_move_step
04A667 14          1108*      db 020 ;sprite_points
04A668 EC          1109*      db -20 ;sprite_health_modifier
04A669 00          1110*      db 000 ;sprite_unassigned_0
04A66A 00          1111*      db 000 ;sprite_unassigned_1
04A66B 00          1112*      db 000 ;sprite_unassigned_2
04A66C             1113*  @use:
04A66C FD E5       1114*      push iy
04A66E CD 88 BE 04 1115*      call sfx_play_achtung
04A672 FD E1       1116*      pop iy
04A674 3E FB       1117*      ld a,-5
04A676 CD 87 B4 04 1118*      call plyr_sub_health
04A67A C3 A4 A0 04 1119*      jp sprite_behavior_return
04A67E             1120*  @hurt:
04A67E CD A9 B7 04 1121*      call rand_8
04A682 E6 01       1122*      and %00000001
04A684 C2 90 A6 04 1123*      jp nz,@nosound
04A688 FD E5       1124*      push iy
04A68A CD EB AD 04 1125*      call sfx_play_random_hurt
04A68E FD E1       1126*      pop iy
04A690             1127*  @nosound:
04A690 3E FF       1128*      ld a,255 ; kill player's shot
04A692 32 CB B2 04 1129*      ld (plyr_shot_status),a
04A696 3A CF B2 04 1130*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A69A FD 86 02    1131*      add a,(iy+sprite_health)
04A69D FD 77 02    1132*      ld (iy+sprite_health),a
04A6A0             1133*      ; jp p,sprite_behavior_return ; if health is positive, return
04A6A0 F2 E1 A6 04 1134*      jp p,@do_move
04A6A4             1135*      ; otherwise fall through to kill sprite
04A6A4             1136*  @kill:
04A6A4 FD E5       1137*      push iy
04A6A6 CD 84 BF 04 1138*      call sfx_play_wilhelm
04A6AA FD E1       1139*      pop iy
04A6AC FD 7E 0B    1140*      ld a,(iy+sprite_points)
04A6AF CD 9B B4 04 1141*      call plyr_mod_score
04A6B3 CD A3 9F 04 1142*      call sprite_kill
04A6B7 C3 A4 A0 04 1143*      jp sprite_behavior_return
04A6BB             1144*  @see:
04A6BB FD 7E 03    1145*      ld a,(iy+sprite_triggers_mask)
04A6BE E6 01       1146*      and sprite_trigger_see
04A6C0 C2 DA A6 04 1147*      jp nz,@move
04A6C4 3E 01       1148*      ld a,sprite_trigger_see
04A6C6 FD B6 03    1149*      or a,(iy+sprite_triggers_mask)
04A6C9 FD 77 03    1150*      ld (iy+sprite_triggers_mask),a
04A6CC FD E5       1151*      push iy
04A6CE CD 88 BE 04 1152*      call sfx_play_achtung
04A6D2 FD E1       1153*      pop iy
04A6D4             1154*  @seen:
04A6D4 AF          1155*      xor a
04A6D5 3C          1156*      inc a
04A6D6 C3 A4 A0 04 1157*      jp sprite_behavior_return
04A6DA             1158*  @move:
04A6DA FD 35 09    1159*      dec (iy+sprite_move_timer)
04A6DD 28 02       1160*      jr z,@do_move
04A6DF 18 F3       1161*      jr @seen
04A6E1             1162*  @do_move:
04A6E1 CD A9 B7 04 1163*      call rand_8
04A6E5 E6 3F       1164*      and %00111111 ; between 0 and 63
04A6E7             1165*      ; or %00100000  ; at least 32
04A6E7 F6 10       1166*      or %00010000  ; at least 16
04A6E9 FD 77 09    1167*      ld (iy+sprite_move_timer),a
04A6EC CD 15 A0 04 1168*      call sprite_move_random
04A6F0 18 E2       1169*      jr @seen
04A6F2             1170*  @shoot:
04A6F2 C3 A4 A0 04 1171*      jp sprite_behavior_return
04A6F6             1172*  
04A6F6             1173*  SS_GUARD:
04A6F6             1174*  ; behavior routine address lookup
04A6F6 0B A7 04    1175*      dl @init
04A6F9 21 A7 04    1176*      dl @use
04A6FC 33 A7 04    1177*      dl @hurt
04A6FF 59 A7 04    1178*      dl @kill
04A702 70 A7 04    1179*      dl @see
04A705 8F A7 04    1180*      dl @move
04A708 A7 A7 04    1181*      dl @shoot
04A70B             1182*  @init:
04A70B 21 13 A7 04 1183*      ld hl,@data ; address for LDIR to copy from
04A70F C3 A4 A0 04 1184*      jp sprite_behavior_return
04A713             1185*  @data:
04A713 64          1186*      db 100 ;sprite_health
04A714 00          1187*      db 000 ;sprite_triggers_mask
04A715 00          1188*      db 000 ;sprite_x
04A716 00          1189*      db 000 ;sprite_y
04A717 00          1190*      db 000 ;sprite_orientation
04A718 00          1191*      db 000 ;sprite_animation
04A719 00          1192*      db 000 ;sprite_anim_tmr
04A71A 01          1193*      db 001 ;sprite_move_timer
04A71B 00          1194*      db 000 ;sprite_move_step
04A71C 1E          1195*      db 030 ;sprite_points
04A71D E2          1196*      db -30 ;sprite_health_modifier
04A71E 00          1197*      db 000 ;sprite_unassigned_0
04A71F 00          1198*      db 000 ;sprite_unassigned_1
04A720 00          1199*      db 000 ;sprite_unassigned_2
04A721             1200*  @use:
04A721 FD E5       1201*      push iy
04A723 CD 3C BF 04 1202*      call sfx_play_schusstaffel
04A727 FD E1       1203*      pop iy
04A729 3E F6       1204*      ld a,-10
04A72B CD 87 B4 04 1205*      call plyr_sub_health
04A72F C3 A4 A0 04 1206*      jp sprite_behavior_return
04A733             1207*  @hurt:
04A733 CD A9 B7 04 1208*      call rand_8
04A737 E6 01       1209*      and %00000001
04A739 C2 45 A7 04 1210*      jp nz,@nosound
04A73D FD E5       1211*      push iy
04A73F CD EB AD 04 1212*      call sfx_play_random_hurt
04A743 FD E1       1213*      pop iy
04A745             1214*  @nosound:
04A745 3E FF       1215*      ld a,255 ; kill player's shot
04A747 32 CB B2 04 1216*      ld (plyr_shot_status),a
04A74B 3A CF B2 04 1217*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A74F FD 86 02    1218*      add a,(iy+sprite_health)
04A752 FD 77 02    1219*      ld (iy+sprite_health),a
04A755             1220*      ; jp p,sprite_behavior_return ; if health is positive, return
04A755 F2 96 A7 04 1221*      jp p,@do_move
04A759             1222*      ; otherwise fall through to kill sprite
04A759             1223*  @kill:
04A759 FD E5       1224*      push iy
04A75B CD 24 BF 04 1225*      call sfx_play_mein_leben
04A75F FD E1       1226*      pop iy
04A761 FD 7E 0B    1227*      ld a,(iy+sprite_points)
04A764 CD 9B B4 04 1228*      call plyr_mod_score
04A768 CD A3 9F 04 1229*      call sprite_kill
04A76C C3 A4 A0 04 1230*      jp sprite_behavior_return
04A770             1231*  @see:
04A770 FD 7E 03    1232*      ld a,(iy+sprite_triggers_mask)
04A773 E6 01       1233*      and sprite_trigger_see
04A775 C2 8F A7 04 1234*      jp nz,@move
04A779 3E 01       1235*      ld a,sprite_trigger_see
04A77B FD B6 03    1236*      or a,(iy+sprite_triggers_mask)
04A77E FD 77 03    1237*      ld (iy+sprite_triggers_mask),a
04A781 FD E5       1238*      push iy
04A783 CD 3C BF 04 1239*      call sfx_play_schusstaffel
04A787 FD E1       1240*      pop iy
04A789             1241*  @seen:
04A789 AF          1242*      xor a
04A78A 3C          1243*      inc a
04A78B C3 A4 A0 04 1244*      jp sprite_behavior_return
04A78F             1245*  @move:
04A78F FD 35 09    1246*      dec (iy+sprite_move_timer)
04A792 28 02       1247*      jr z,@do_move
04A794 18 F3       1248*      jr @seen
04A796             1249*  @do_move:
04A796 CD A9 B7 04 1250*      call rand_8
04A79A E6 3F       1251*      and %00111111 ; between 0 and 63
04A79C             1252*      ; or %00100000  ; at least 32
04A79C F6 10       1253*      or %00010000  ; at least 16
04A79E FD 77 09    1254*      ld (iy+sprite_move_timer),a
04A7A1 CD 15 A0 04 1255*      call sprite_move_random
04A7A5 18 E2       1256*      jr @seen
04A7A7             1257*  @shoot:
04A7A7 C3 A4 A0 04 1258*      jp sprite_behavior_return
04A7AB             1259*  
04A7AB 00          1260*  see_orientation: db 0x00
04A7AC             1261*  ; cycle through all cells visible to the player from the current position
04A7AC             1262*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04A7AC             1263*  ; inputs: cur_x, cur_y,
04A7AC             1264*  ; outputs: player-aware enemies
04A7AC             1265*  ; destroys: everything
04A7AC             1266*  sprites_see_plyr:
04A7AC             1267*  ; ; DEBUG: set up loop timer
04A7AC             1268*  ;     call prt_loop_reset
04A7AC             1269*  ; ; END DEBUG
04A7AC             1270*  ; ; DEBUG: start loop timer
04A7AC             1271*  ;     call prt_loop_start
04A7AC             1272*  ; ; END DEBUG
04A7AC             1273*  
04A7AC             1274*  ; intialize orientation
04A7AC AF          1275*      xor a
04A7AD 32 AB A7 04 1276*      ld (see_orientation),a
04A7B1             1277*  @loop_orientation:
04A7B1             1278*  ; get current map position and camera orientation
04A7B1 ED 5B BB B2 1279*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04A7B6             1280*      ; 0-1 prt ticks, 4 loops
04A7B6 CD A2 65 04 1281*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04A7BA             1282*  ; get cell_views address for this cell and orientation
04A7BA 3A AB A7 04 1283*      ld a,(see_orientation)
04A7BE 5F          1284*      ld e,a
04A7BF 16 06       1285*      ld d,6 ; 6 bytes per orientation
04A7C1 ED 5C       1286*      mlt de ; de = orientation offset
04A7C3 EB          1287*      ex de,hl ; hl = orientation offset
04A7C4 06 18       1288*      ld b,24 ; 24 bytes per cell in cell_views lut
04A7C6 ED 4C       1289*      mlt bc ; bc = offset from base address of cell_views lut
04A7C8 09          1290*      add hl,bc ; hl = total offset from cell_views base address
04A7C9 EB          1291*      ex de,hl ; because we can't add iy to hl
04A7CA FD 21 00 E4 1292*      ld iy,cell_views ; base address of cell_views lut
       B7          
04A7CF FD 19       1293*      add iy,de ; iy = cell_views address
04A7D1 FD 22 37 67 1294*      ld (cur_cell_views),iy
       04          
04A7D6             1295*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04A7D6 01 00 46 28 1296*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04A7DA AF          1297*      xor a ; poly_id
04A7DB 32 33 67 04 1298*      ld (to_poly_id),a
04A7DF             1299*  @loop:
04A7DF ED 43 EB A7 1300*      ld (@bit_iy+2),bc
       04          
04A7E4 FD 2A 37 67 1301*      ld iy,(cur_cell_views)
       04          
04A7E9             1302*  @bit_iy:
04A7E9 FD CB 00 46 1303*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04A7ED 28 2E       1304*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04A7EF             1305*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04A7EF 3A 33 67 04 1306*      ld a,(to_poly_id)
04A7F3 4F          1307*      ld c,a ; poly_id
04A7F4 3A AB A7 04 1308*      ld a,(see_orientation)
04A7F8 CD 54 69 04 1309*      call get_polys_deltas ; d,e = y,x deltas
04A7FC 3A BB B2 04 1310*      ld a,(cur_x)
04A800 83          1311*      add a,e
04A801 5F          1312*      ld e,a
04A802 3A BC B2 04 1313*      ld a,(cur_y)
04A806 82          1314*      add a,d
04A807 57          1315*      ld d,a
04A808 CD A2 65 04 1316*      call get_cell_from_coords
04A80C DD 7E 03    1317*      ld a,(ix+map_sprite_id)
04A80F FE FF       1318*      cp 0xFF ; no sprite
04A811 28 0A       1319*      jr z,@next_poly
04A813 CD 91 9F 04 1320*      call sprite_set_pointer
04A817 3E 04       1321*      ld a,sp_see
04A819 CD 88 A0 04 1322*      call do_sprite_behavior
04A81D             1323*  @next_poly:
04A81D ED 4B EB A7 1324*      ld bc,(@bit_iy+2)
       04          
04A822 3A 33 67 04 1325*      ld a,(to_poly_id)
04A826 3C          1326*      inc a ; a is next poly_id
04A827 32 33 67 04 1327*      ld (to_poly_id),a
04A82B FE 2D       1328*      cp num_polys
04A82D 28 0F       1329*      jr z,@next_orientation
04A82F 3E 08       1330*      ld a,8
04A831 80          1331*      add a,b
04A832 47          1332*      ld b,a ; bit tested codes to 0x46 + b/8
04A833 FE 86       1333*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04A835 C2 DF A7 04 1334*      jp nz,@loop
04A839 06 46       1335*      ld b,0x46
04A83B 0C          1336*      inc c ; iy address offset
04A83C 18 A1       1337*      jr @loop
04A83E             1338*  @next_orientation:
04A83E 3A AB A7 04 1339*      ld a,(see_orientation)
04A842 3C          1340*      inc a
04A843 E6 03       1341*      and 3 ; modulo 4
04A845 32 AB A7 04 1342*      ld (see_orientation),a
04A849 C2 B1 A7 04 1343*      jp nz,@loop_orientation
04A84D             1344*  
04A84D             1345*  ; full loop 1-2 prt ticks
04A84D             1346*  ; ; DEBUG: stop loop timer
04A84D             1347*  ;     call prt_loop_stop
04A84D             1348*  ; ; END DEBUG
04A84D C9          1349*      ret
04A84E             0024   	include "src/asm/vdu.asm"
04A84E             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04A84E             0002*  ; VDU 0: Null (no operation)
04A84E             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A84E             0004*  ; VDU 2: Enable “printer” §§
04A84E             0005*  ; VDU 3: Disable “printer” §§
04A84E             0006*  ; VDU 4: Write text at text cursor
04A84E             0007*  ; VDU 5: Write text at graphics cursor
04A84E             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A84E             0009*  ; VDU 7: Make a short beep (BEL)
04A84E             0010*  ; VDU 8: Move cursor back one character
04A84E             0011*  ; VDU 9: Move cursor forward one character
04A84E             0012*  ; VDU 10: Move cursor down one line
04A84E             0013*  ; VDU 11: Move cursor up one line
04A84E             0014*  ; VDU 12: Clear text area (CLS)
04A84E             0015*  ; VDU 13: Carriage return
04A84E             0016*  ; VDU 14: Page mode On *
04A84E             0017*  ; VDU 15: Page mode Off *
04A84E             0018*  ; VDU 16: Clear graphics area (CLG)
04A84E             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04A84E             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04A84E             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A84E             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A84E             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04A84E             0024*  ; VDU 22, n: Select screen mode (MODE n)
04A84E             0025*  ; VDU 23, n: Re-program display character / System Commands
04A84E             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04A84E             0027*  ; VDU 25, mode, x; y;: PLOT command
04A84E             0028*  ; VDU 26: Reset graphics and text viewports **
04A84E             0029*  ; VDU 27, char: Output character to screen §
04A84E             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A84E             0031*  ; VDU 29, x; y;: Set graphics origin
04A84E             0032*  ; VDU 30: Home cursor
04A84E             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A84E             0034*  ; VDU 127: Backspace
04A84E             0035*  
04A84E             0036*  ; VDU 0: Null (no operation)
04A84E             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04A84E             0038*  ;     This may be useful for padding out a VDU command sequence,
04A84E             0039*  ;     or for inserting a placeholder for a command that will be added later.
04A84E             0040*  ; inputs: none
04A84E             0041*  ; outputs: an empty byte somewhere in VDU
04A84E             0042*  ; destroys: a
04A84E             0043*  vdu_null:
04A84E AF          0044*      xor a
04A84F 5B D7       0045*  	rst.lil $10
04A851 C9          0046*  	ret
04A852             0047*  
04A852             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04A852             0049*  ;     Ensures that the next character received by the VDP is sent through to
04A852             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04A852             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04A852             0052*  ;     intended to be displayed on the screen. It allows characters that would
04A852             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04A852             0054*  ;     If the “printer” has not been enabled then this command will just discard
04A852             0055*  ;     the next byte sent to the VDP.
04A852             0056*  ; inputs: a is the ascii code of the character to send
04A852             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04A852             0058*  ; outputs: a character on the serial terminal connected to the USB port
04A852             0059*  ;           and the same character on the screen at the current text cursor location
04A852             0060*  ; QUESTION: does it also advance the text cursor?
04A852             0061*  ; destroys: hl, bc
04A852             0062*  vdu_char_to_printer:
04A852 32 62 A8 04 0063*  	ld (@arg),a
04A856 21 61 A8 04 0064*  	ld hl,@cmd
04A85A 01 02 00 00 0065*  	ld bc,@end-@cmd
04A85E 5B DF       0066*  	rst.lil $18
04A860 C9          0067*  	ret
04A861 01          0068*  @cmd: db 1
04A862 00          0069*  @arg: db 0
04A863             0070*  @end:
04A863             0071*  
04A863             0072*  ; VDU 2: Enable “printer” §§
04A863             0073*  ;     Enables the “printer”.
04A863             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04A863             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04A863             0076*  ;     this port is used for power, but it can also be used to send and
04A863             0077*  ;     receive data to and from the VDP.
04A863             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04A863             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04A863             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04A863             0081*  ;     use the VDU 1 command.
04A863             0082*  ;     The VDP will not send through other control codes to the printer,
04A863             0083*  ;     and will will not send through data it receives as part of other commands.
04A863             0084*  vdu_enable_printer:
04A863 3E 02       0085*      ld a,2
04A865 5B D7       0086*  	rst.lil $10
04A867 C9          0087*  	ret
04A868             0088*  
04A868             0089*  ; VDU 3: Disable “printer” §§
04A868             0090*  ; inputs: none
04A868             0091*  ; outputs: a USB port bereft of communication with the VDP
04A868             0092*  ; destroys: a
04A868             0093*  vdu_disable_printer:
04A868 3E 03       0094*      ld a,3
04A86A 5B D7       0095*  	rst.lil $10
04A86C C9          0096*  	ret
04A86D             0097*  
04A86D             0098*  ; VDU 4: Write text at text cursor
04A86D             0099*  ;     This causes text to be written at the current text cursor position.
04A86D             0100*  ;     This is the default mode for text display.
04A86D             0101*  ;     Text is written using the current text foreground and background colours.
04A86D             0102*  ; inputs: a is the character to write to the screen
04A86D             0103*  ; prerequisites: the text cursor at the intended position on screen
04A86D             0104*  ; outputs: prints the character and moves text cursor right one position
04A86D             0105*  ; destroys: a, hl, bc
04A86D             0106*  vdu_char_to_text_cursor:
04A86D 32 7D A8 04 0107*  	ld (@arg),a
04A871 21 7C A8 04 0108*  	ld hl,@cmd
04A875 01 02 00 00 0109*  	ld bc,@end-@cmd
04A879 5B DF       0110*  	rst.lil $18
04A87B C9          0111*  	ret
04A87C 04          0112*  @cmd: db 4
04A87D 00          0113*  @arg: db 0
04A87E             0114*  @end:
04A87E             0115*  
04A87E             0116*  ; VDU 5: Write text at graphics cursor
04A87E             0117*  ;     This causes text to be written at the current graphics cursor position.
04A87E             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04A87E             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04A87E             0120*  ;     or for positioning text at a specific location on the screen.
04A87E             0121*  ;     Characters are plotted using the current graphics foreground colour,
04A87E             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04A87E             0123*  ;     The character background is transparent, and will not overwrite any
04A87E             0124*  ;     graphics that are already present at the character’s location.
04A87E             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04A87E             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04A87E             0127*  ;     graphics background colour.
04A87E             0128*  ; inputs: a is the character to write to the screen
04A87E             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04A87E             0130*  ; outputs: see the name of the function
04A87E             0131*  ; destroys: a, hl, bc
04A87E             0132*  vdu_char_to_gfx_cursor:
04A87E 32 8E A8 04 0133*  	ld (@arg),a
04A882 21 8D A8 04 0134*  	ld hl,@cmd
04A886 01 02 00 00 0135*  	ld bc,@end-@cmd
04A88A 5B DF       0136*  	rst.lil $18
04A88C C9          0137*  	ret
04A88D 05          0138*  @cmd: db 5
04A88E 00          0139*  @arg: db 0
04A88F             0140*  @end:
04A88F             0141*  
04A88F             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04A88F             0143*  ;     This enables the screen, and re-enables VDU command processing,
04A88F             0144*  ;     reversing the effect of VDU 21.
04A88F             0145*  ; inputs: none
04A88F             0146*  ; outputs: a functioning screen and VDU
04A88F             0147*  ; destroys: a
04A88F             0148*  vdu_enable_screen:
04A88F 3E 06       0149*      ld a,6
04A891 5B D7       0150*  	rst.lil $10
04A893 C9          0151*  	ret
04A894             0152*  
04A894             0153*  ; PASSES
04A894             0154*  ; VDU 7: Make a short beep (BEL)
04A894             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04A894             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04A894             0157*  ; inputs: none
04A894             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04A894             0159*  ; destroys: a
04A894             0160*  vdu_beep:
04A894 3E 07       0161*      ld a,7
04A896 5B D7       0162*  	rst.lil $10
04A898 C9          0163*  	ret
04A899             0164*  
04A899             0165*  ; VDU 8: Move cursor back one character
04A899             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04A899             0167*  ;     By default, when at the start of a line it will move to the end of
04A899             0168*  ;     the previous line (as defined by the current text viewport).
04A899             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04A899             0170*  ;     The cursor remains constrained to the current text viewport.
04A899             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04A899             0172*  ;     The cursor is just moved left by one character width.
04A899             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04A899             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04A899             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04A899             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04A899             0177*  vdu_cursor_back:
04A899 3E 08       0178*      ld a,8
04A89B 5B D7       0179*  	rst.lil $10
04A89D C9          0180*  	ret
04A89E             0181*  
04A89E             0182*  ; VDU 9: Move cursor forward one character
04A89E             0183*  vdu_cursor_forward:
04A89E 3E 09       0184*      ld a,9
04A8A0 5B D7       0185*  	rst.lil $10
04A8A2 C9          0186*  	ret
04A8A3             0187*  
04A8A3             0188*  ; VDU 10: Move cursor down one line
04A8A3             0189*  vdu_cursor_down:
04A8A3 3E 0A       0190*      ld a,10
04A8A5 5B D7       0191*  	rst.lil $10
04A8A7 C9          0192*  	ret
04A8A8             0193*  
04A8A8             0194*  ; VDU 11: Move cursor up one line
04A8A8             0195*  vdu_cursor_up:
04A8A8 3E 0B       0196*      ld a,11
04A8AA 5B D7       0197*  	rst.lil $10
04A8AC C9          0198*  	ret
04A8AD             0199*  
04A8AD             0200*  ; VDU 12: Clear text area (CLS)
04A8AD             0201*  vdu_cls:
04A8AD 3E 0C       0202*      ld a,12
04A8AF 5B D7       0203*  	rst.lil $10
04A8B1 C9          0204*  	ret
04A8B2             0205*  
04A8B2             0206*  ; VDU 13: Carriage return
04A8B2             0207*  vdu_cr:
04A8B2 3E 0D       0208*      ld a,13
04A8B4 5B D7       0209*  	rst.lil $10
04A8B6 C9          0210*  	ret
04A8B7             0211*  
04A8B7             0212*  ; VDU 14: Page mode On *
04A8B7             0213*  vdu_page_on:
04A8B7 3E 0E       0214*      ld a,14
04A8B9 5B D7       0215*  	rst.lil $10
04A8BB C9          0216*  	ret
04A8BC             0217*  
04A8BC             0218*  ; VDU 15: Page mode Off *
04A8BC             0219*  vdu_page_off:
04A8BC 3E 0F       0220*      ld a,15
04A8BE 5B D7       0221*  	rst.lil $10
04A8C0 C9          0222*  	ret
04A8C1             0223*  
04A8C1             0224*  ; VDU 16: Clear graphics area (CLG)
04A8C1             0225*  vdu_clg:
04A8C1 3E 10       0226*      ld a,16
04A8C3 5B D7       0227*  	rst.lil $10
04A8C5 C9          0228*  	ret
04A8C6             0229*  
04A8C6             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04A8C6             0231*  vdu_colour_text:
04A8C6 32 D6 A8 04 0232*  	ld (@arg),a
04A8CA 21 D5 A8 04 0233*  	ld hl,@cmd
04A8CE 01 02 00 00 0234*  	ld bc,@end-@cmd
04A8D2 5B DF       0235*  	rst.lil $18
04A8D4 C9          0236*  	ret
04A8D5 11          0237*  @cmd: db 17
04A8D6 00          0238*  @arg: db 0
04A8D7             0239*  @end:
04A8D7             0240*  
04A8D7             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04A8D7             0242*  ; inputs: a is the plotting mode, c is the colour
04A8D7             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04A8D7             0244*  vdu_gcol_fg:
04A8D7             0245*  ; This command will set both the current graphics colour,
04A8D7             0246*  ; and the current graphics plotting mode.
04A8D7             0247*  ; As with VDU 17 the colour number will set the foreground colour
04A8D7             0248*  ; if it is in the range 0-127, or the background colour if it is
04A8D7             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04A8D7             0250*  ; Support for different plotting modes on Agon is currently very limited.
04A8D7             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04A8D7             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04A8D7             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04A8D7             0254*  ; very limited support for mode 4, which will invert the colour of any
04A8D7             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04A8D7             0256*  ; and may not work as expected.
04A8D7             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04A8D7             0258*  ; original VDU system, may be added in the future.
04A8D7             0259*  ; This command is identical to the BASIC GCOL keyword.
04A8D7 32 EC A8 04 0260*  	ld (@mode),a
04A8DB 79          0261*      ld a,c
04A8DC 32 ED A8 04 0262*      ld (@col),a
04A8E0 21 EB A8 04 0263*  	ld hl,@cmd
04A8E4 01 03 00 00 0264*  	ld bc,@end-@cmd
04A8E8 5B DF       0265*  	rst.lil $18
04A8EA C9          0266*  	ret
04A8EB 12          0267*  @cmd: db 18
04A8EC 00          0268*  @mode: db 0
04A8ED 00          0269*  @col: db 0
04A8EE             0270*  @end:
04A8EE             0271*  
04A8EE             0272*  vdu_gcol_bg:
04A8EE 32 05 A9 04 0273*  	ld (@mode),a
04A8F2 79          0274*      ld a,c
04A8F3 C6 80       0275*      add a,128
04A8F5 32 06 A9 04 0276*      ld (@col),a
04A8F9 21 04 A9 04 0277*  	ld hl,@cmd
04A8FD 01 03 00 00 0278*  	ld bc,@end-@cmd
04A901 5B DF       0279*  	rst.lil $18
04A903 C9          0280*  	ret
04A904 12          0281*  @cmd:  db 18
04A905 00          0282*  @mode: db 0
04A906 00          0283*  @col:  db 0
04A907             0284*  @end:
04A907             0285*  
04A907             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04A907             0287*  ;     This command sets the colour palette, by mapping a logical colour
04A907             0288*  ;     to a physical colour. This is useful for defining custom colours,
04A907             0289*  ;     or for redefining the default colours.
04A907             0290*  ;     If the physical colour number is given as 255 then the colour will
04A907             0291*  ;     be defined using the red, green, and blue values given. If the physical
04A907             0292*  ;     colour number is given as any other value then the colour will be defined
04A907             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04A907             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04A907             0295*  ;     must still be provided, but will be ignored.
04A907             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04A907             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04A907             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04A907             0299*  ;     requested. The nearest colour will be chosen.
04A907             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04A907             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04A907             0302*  vdu_def_log_colour:
04A907 32 2C A9 04 0303*  	ld (@physical),a
04A90B 47          0304*      ld b,a
04A90C 32 2B A9 04 0305*      ld (@logical),a
04A910 79          0306*      ld a,c
04A911 32 2D A9 04 0307*      ld (@red),a
04A915 7C          0308*      ld a,h
04A916 32 2E A9 04 0309*      ld (@green),a
04A91A 7D          0310*      ld a,l
04A91B 32 2F A9 04 0311*      ld (@blue),a
04A91F 21 2A A9 04 0312*  	ld hl,@cmd
04A923 01 06 00 00 0313*  	ld bc,@end-@cmd
04A927 5B DF       0314*  	rst.lil $18
04A929 C9          0315*  	ret
04A92A 13          0316*  @cmd: db 19
04A92B 00          0317*  @logical: db 0
04A92C 00          0318*  @physical: db 0
04A92D 00          0319*  @red: db 0
04A92E 00          0320*  @green: db 0
04A92F 00          0321*  @blue: db 0
04A930             0322*  @end:
04A930             0323*  
04A930             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04A930             0325*  vdu_reset_gfx:
04A930 3E 14       0326*      ld a,20
04A932 5B D7       0327*  	rst.lil $10
04A934 C9          0328*  	ret
04A935             0329*  
04A935             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04A935             0331*  ; except for VDU 1 and VDU 6) §§
04A935             0332*  vdu_disable_screen:
04A935 3E 15       0333*      ld a,21
04A937 5B D7       0334*  	rst.lil $10
04A939 C9          0335*  	ret
04A93A             0336*  
04A93A             0337*  ; VDU 22, n: Select screen mode (MODE n)
04A93A             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04A93A             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04A93A             0340*  ; Screen modes
04A93A             0341*  ; Modes over 128 are double-buffered
04A93A             0342*  ; From Version 1.04 or greater
04A93A             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04A93A             0344*  ; 0 	640 	480 	16 	    60hz
04A93A             0345*  ; * 1 	640 	480 	4 	    60hz
04A93A             0346*  ; 2 	640 	480 	2 	    60hz
04A93A             0347*  ; 3 	640 	240 	64 	    60hz
04A93A             0348*  ; 4 	640 	240 	16 	    60hz
04A93A             0349*  ; 5 	640 	240 	4 	    60hz
04A93A             0350*  ; 6 	640 	240 	2 	    60hz
04A93A             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04A93A             0352*  ; 8 	320 	240 	64 	    60hz
04A93A             0353*  ; 9 	320 	240 	16 	    60hz
04A93A             0354*  ; 10 	320 	240 	4 	    60hz
04A93A             0355*  ; 11 	320 	240 	2 	    60hz
04A93A             0356*  ; 12 	320 	200 	64 	    70hz
04A93A             0357*  ; 13 	320 	200 	16 	    70hz
04A93A             0358*  ; 14 	320 	200 	4 	    70hz
04A93A             0359*  ; 15 	320 	200 	2 	    70hz
04A93A             0360*  ; 16 	800 	600 	4 	    60hz
04A93A             0361*  ; 17 	800 	600 	2 	    60hz
04A93A             0362*  ; 18 	1024 	768 	2 	    60hz
04A93A             0363*  ; 129 	640 	480 	4 	    60hz
04A93A             0364*  ; 130 	640 	480 	2 	    60hz
04A93A             0365*  ; 132 	640 	240 	16 	    60hz
04A93A             0366*  ; 133 	640 	240 	4 	    60hz
04A93A             0367*  ; 134 	640 	240 	2 	    60hz
04A93A             0368*  ; 136 	320 	240 	64 	    60hz
04A93A             0369*  ; 137 	320 	240 	16 	    60hz
04A93A             0370*  ; 138 	320 	240 	4 	    60hz
04A93A             0371*  ; 139 	320 	240 	2 	    60hz
04A93A             0372*  ; 140 	320 	200 	64 	    70hz
04A93A             0373*  ; 141 	320 	200 	16 	    70hz
04A93A             0374*  ; 142 	320 	200 	4 	    70hz
04A93A             0375*  ; 143 	320 	200 	2 	    70hz
04A93A             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04A93A             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04A93A             0378*  ; change to the requested mode.
04A93A             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04A93A             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04A93A             0381*  vdu_set_screen_mode:
04A93A 32 4A A9 04 0382*  	ld (@arg),a
04A93E 21 49 A9 04 0383*  	ld hl,@cmd
04A942 01 02 00 00 0384*  	ld bc,@end-@cmd
04A946 5B DF       0385*  	rst.lil $18
04A948 C9          0386*  	ret
04A949 16          0387*  @cmd: db 22 ; set screen mode
04A94A 00          0388*  @arg: db 0  ; screen mode parameter
04A94B             0389*  @end:
04A94B             0390*  
04A94B             0391*  ; VDU 23, n: Re-program display character / System Commands
04A94B             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04A94B             0393*  vdu_define_character:
04A94B 32 67 A9 04 0394*  	ld (@ascii),a
04A94F 11 68 A9 04 0395*  	ld de,@data
04A953 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04A955             0397*  @loop:
04A955 7E          0398*  	ld a,(hl)
04A956 12          0399*  	ld (de),a
04A957 23          0400*  	inc hl
04A958 13          0401*  	inc de
04A959 10 FA       0402*  	djnz @loop
04A95B 21 66 A9 04 0403*  	ld hl,@cmd
04A95F 01 0A 00 00 0404*  	ld bc,@end-@cmd
04A963 5B DF       0405*  	rst.lil $18
04A965 C9          0406*  	ret
04A966 17          0407*  @cmd:   db 23
04A967 00          0408*  @ascii: db 0
04A968             0409*  @data:  ds 8
04A970             0410*  @end:
04A970             0411*  
04A970             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04A970             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04A970             0414*  ; 	because we have turned off logical screen scaling
04A970             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04A970             0416*  ; outputs; nothing
04A970             0417*  ; destroys: a might make it out alive
04A970             0418*  vdu_set_gfx_viewport:
04A970 ED 43 90 A9 0419*      ld (@x0),bc
       04          
04A975 FD 22 92 A9 0420*      ld (@y1),iy
       04          
04A97A DD 22 94 A9 0421*  	ld (@x1),ix
       04          
04A97F ED 53 96 A9 0422*  	ld (@y0),de
       04          
04A984 21 8F A9 04 0423*  	ld hl,@cmd
04A988 01 09 00 00 0424*  	ld bc,@end-@cmd
04A98C 5B DF       0425*  	rst.lil $18
04A98E C9          0426*  	ret
04A98F 18          0427*  @cmd:   db 24 ; set graphics viewport command
04A990 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04A992 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04A994 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04A996 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04A998 00          0432*  @end:   db 0x00	  ; padding
04A999             0433*  
04A999             0434*  ; VDU 25, mode, x; y;: PLOT command
04A999             0435*  ; Implemented in vdu_plot.asm
04A999             0436*  
04A999             0437*  ; VDU 26: Reset graphics and text viewports **
04A999             0438*  vdu_reset_txt_gfx_view:
04A999 3E 1A       0439*      ld a,26
04A99B 5B D7       0440*  	rst.lil $10
04A99D C9          0441*  	ret
04A99E             0442*  
04A99E             0443*  ; PASSES
04A99E             0444*  ; VDU 27, char: Output character to screen §
04A99E             0445*  ; inputs: a is the ascii code of the character to draw
04A99E             0446*  vdu_draw_char:
04A99E 32 AE A9 04 0447*  	ld (@arg),a
04A9A2 21 AD A9 04 0448*  	ld hl,@cmd
04A9A6 01 02 00 00 0449*  	ld bc,@end-@cmd
04A9AA 5B DF       0450*  	rst.lil $18
04A9AC C9          0451*  	ret
04A9AD 1B          0452*  @cmd: db 27
04A9AE 00          0453*  @arg: db 0  ; ascii code of character to draw
04A9AF             0454*  @end:
04A9AF             0455*  
04A9AF             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04A9AF             0457*  ; MIND THE LITTLE-ENDIANESS
04A9AF             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04A9AF             0459*  ; outputs; nothing
04A9AF             0460*  ; destroys: a might make it out alive
04A9AF             0461*  vdu_set_txt_viewport:
04A9AF ED 43 C5 A9 0462*      ld (@lb),bc
       04          
04A9B4 ED 53 C7 A9 0463*  	ld (@rt),de
       04          
04A9B9 21 C4 A9 04 0464*  	ld hl,@cmd
04A9BD 01 05 00 00 0465*  	ld bc,@end-@cmd
04A9C1 5B DF       0466*  	rst.lil $18
04A9C3 C9          0467*  	ret
04A9C4 1C          0468*  @cmd:   db 28 ; set text viewport command
04A9C5 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04A9C7 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04A9C9 00          0471*  @end:   db 0x00	  ; padding
04A9CA             0472*  
04A9CA             0473*  ; PASSES
04A9CA             0474*  ; VDU 29, x; y;: Set graphics origin
04A9CA             0475*  ; inputs: bc,de x,y coordinates
04A9CA             0476*  vdu_set_gfx_origin:
04A9CA ED 43 E0 A9 0477*      ld (@x0),bc
       04          
04A9CF ED 53 E2 A9 0478*      ld (@y0),de
       04          
04A9D4 21 DF A9 04 0479*  	ld hl,@cmd
04A9D8 01 05 00 00 0480*  	ld bc,@end-@cmd
04A9DC 5B DF       0481*  	rst.lil $18
04A9DE C9          0482*  	ret
04A9DF 1D          0483*  @cmd:	db 29
04A9E0 00 00       0484*  @x0: 	dw 0
04A9E2 00 00       0485*  @y0: 	dw 0
04A9E4 00          0486*  @end: 	db 0 ; padding
04A9E5             0487*  
04A9E5             0488*  ; PASSES
04A9E5             0489*  ; VDU 30: Home cursor
04A9E5             0490*  vdu_home_cursor:
04A9E5 3E 1E       0491*      ld a,30
04A9E7 5B D7       0492*  	rst.lil $10
04A9E9 C9          0493*  	ret
04A9EA             0494*  
04A9EA             0495*  ; PASSES
04A9EA             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04A9EA             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04A9EA             0498*  vdu_move_cursor:
04A9EA ED 43 FB A9 0499*      ld (@x0),bc
       04          
04A9EF 21 FA A9 04 0500*  	ld hl,@cmd
04A9F3 01 03 00 00 0501*  	ld bc,@end-@cmd
04A9F7 5B DF       0502*  	rst.lil $18
04A9F9 C9          0503*  	ret
04A9FA 1F          0504*  @cmd: 	db 31
04A9FB 00          0505*  @x0:	db 0
04A9FC 00          0506*  @y0: 	db 0
04A9FD 00          0507*  @end: 	db 0 ; padding
04A9FE             0508*  
04A9FE             0509*  
04A9FE             0510*  ; VDU 127: Backspace
04A9FE             0511*  vdu_bksp:
04A9FE 3E 7F       0512*      ld a,127
04AA00 5B D7       0513*  	rst.lil $10
04AA02 C9          0514*  	ret
04AA03             0515*  
04AA03             0516*  ; activate a bitmap in preparation to draw it
04AA03             0517*  ; inputs: a holding the bitmap index
04AA03             0518*  vdu_bmp_select:
04AA03 32 15 AA 04 0519*  	ld (@bmp),a
04AA07 21 12 AA 04 0520*  	ld hl,@cmd
04AA0B 01 04 00 00 0521*  	ld bc,@end-@cmd
04AA0F 5B DF       0522*  	rst.lil $18
04AA11 C9          0523*  	ret
04AA12 17 1B 00    0524*  @cmd: db 23,27,0
04AA15 00          0525*  @bmp: db 0
04AA16             0526*  @end:
04AA16             0527*  
04AA16             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AA16             0529*  ; inputs: hl=bufferId
04AA16             0530*  vdu_buff_select:
04AA16 22 28 AA 04 0531*  	ld (@bufferId),hl
04AA1A 21 25 AA 04 0532*  	ld hl,@cmd
04AA1E 01 05 00 00 0533*  	ld bc,@end-@cmd
04AA22 5B DF       0534*  	rst.lil $18
04AA24 C9          0535*  	ret
04AA25 17 1B 20    0536*  @cmd: db 23,27,0x20
04AA28 00 00       0537*  @bufferId: dw 0x0000
04AA2A 00          0538*  @end: db 0x00 ; padding
04AA2B             0539*  
04AA2B             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04AA2B             0541*  ; inputs: a=format; bc=width; de=height
04AA2B             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04AA2B             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04AA2B             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04AA2B             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04AA2B             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04AA2B             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04AA2B             0548*  vdu_bmp_create:
04AA2B ED 43 47 AA 0549*      ld (@width),bc
       04          
04AA30 ED 53 49 AA 0550*      ld (@height),de
       04          
04AA35 32 4B AA 04 0551*      ld (@fmt),a
04AA39 21 44 AA 04 0552*  	ld hl,@cmd
04AA3D 01 08 00 00 0553*  	ld bc,@end-@cmd
04AA41 5B DF       0554*  	rst.lil $18
04AA43 C9          0555*  	ret
04AA44 17 1B 21    0556*  @cmd:       db 23,27,0x21
04AA47 00 00       0557*  @width:     dw 0x0000
04AA49 00 00       0558*  @height:    dw 0x0000
04AA4B 00          0559*  @fmt:       db 0x00
04AA4C             0560*  @end:
04AA4C             0561*  
04AA4C             0562*  ; Draw a bitmap on the screen
04AA4C             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04AA4C             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04AA4C             0565*  vdu_bmp_draw:
04AA4C ED 43 64 AA 0566*      ld (@x0),bc
       04          
04AA51 ED 53 66 AA 0567*      ld (@y0),de
       04          
04AA56 21 61 AA 04 0568*  	ld hl,@cmd
04AA5A 01 07 00 00 0569*  	ld bc,@end-@cmd
04AA5E 5B DF       0570*  	rst.lil $18
04AA60 C9          0571*  	ret
04AA61 17 1B 03    0572*  @cmd: db 23,27,3
04AA64 00 00       0573*  @x0:  dw 0x0000
04AA66 00 00       0574*  @y0:  dw 0x0000
04AA68 00          0575*  @end: db 0x00 ; padding
04AA69             0576*  
04AA69             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04AA69             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04AA69             0579*  ; note: default setting on boot is scaling ON
04AA69             0580*  vdu_set_scaling:
04AA69 32 7B AA 04 0581*  	ld (@arg),a
04AA6D 21 78 AA 04 0582*  	ld hl,@cmd
04AA71 01 04 00 00 0583*  	ld bc,@end-@cmd
04AA75 5B DF       0584*  	rst.lil $18
04AA77 C9          0585*  	ret
04AA78 17 00 C0    0586*  @cmd: db 23,0,0xC0
04AA7B 00          0587*  @arg: db 0  ; scaling on/off
04AA7C             0588*  @end:
04AA7C             0589*  
04AA7C             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04AA7C             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04AA7C             0592*  ; 	(all modes).
04AA7C             0593*  
04AA7C             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04AA7C             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04AA7C             0596*  ; 	mode is not double-buffered then this command will wait for the next
04AA7C             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04AA7C             0598*  ; 	screen with the vertical refresh rate of the monitor.
04AA7C             0599*  
04AA7C             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04AA7C             0601*  ; 	as it will prevent tearing of the screen.
04AA7C             0602*  ; inputs: none
04AA7C             0603*  ; outputs: none
04AA7C             0604*  ; destroys: hl, bc
04AA7C             0605*  vdu_flip:
04AA7C 21 87 AA 04 0606*  	ld hl,@cmd
04AA80 01 03 00 00 0607*  	ld bc,@end-@cmd
04AA84 5B DF       0608*  	rst.lil $18
04AA86 C9          0609*  	ret
04AA87 17 00 C3    0610*  @cmd: db 23,0,0xC3
04AA8A             0611*  @end:
04AA8A             0612*  
04AA8A             0613*  ; Command 64: Compress a buffer
04AA8A             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04AA8A             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA8A             0616*  
04AA8A             0617*  
04AA8A             0618*  ; Command 65: Decompress a buffer
04AA8A             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AA8A             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AA8A             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04AA8A             0622*  vdu_decompress_buffer:
04AA8A 22 A6 AA 04 0623*  	ld (@targetBufferId),hl
04AA8E 22 A9 AA 04 0624*  	ld (@sourceBufferId),hl
04AA92 3E 41       0625*  	ld a,65
04AA94 32 A8 AA 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AA98 21 A3 AA 04 0627*  	ld hl,@cmd
04AA9C 01 08 00 00 0628*  	ld bc,@end-@cmd
04AAA0 5B DF       0629*  	rst.lil $18
04AAA2 C9          0630*  	ret
04AAA3 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04AAA6 00 00       0632*  @targetBufferId: dw 0x0000
04AAA8 41          0633*  @cmd1:	db 65
04AAA9 00 00       0634*  @sourceBufferId: dw 0x0000
04AAAB 00          0635*  @end: 	db 0x00 ; padding
04AAAC             0636*  
04AAAC             0637*  ; Command 65: Decompress a buffer
04AAAC             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04AAAC             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04AAAC             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04AAAC             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04AAAC             0642*  vdu_decompress_buffer_different:
04AAAC 22 CC AA 04 0643*  	ld (@targetBufferId),hl
04AAB0 21 FF 7F 00 0644*      ld hl,0x7FFF
04AAB4 22 CF AA 04 0645*  	ld (@sourceBufferId),hl
04AAB8 3E 41       0646*  	ld a,65
04AABA 32 CE AA 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04AABE 21 C9 AA 04 0648*  	ld hl,@cmd
04AAC2 01 08 00 00 0649*  	ld bc,@end-@cmd
04AAC6 5B DF       0650*  	rst.lil $18
04AAC8 C9          0651*  	ret
04AAC9 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04AACC 00 00       0653*  @targetBufferId: dw 0x0000
04AACE 41          0654*  @cmd1:	db 65
04AACF 00 00       0655*  @sourceBufferId: dw 0x0000
04AAD1 00          0656*  @end: 	db 0x00 ; padding
04AAD2             0657*  
04AAD2             0658*  ; #### from vdp.asm ####
04AAD2             0659*  
04AAD2             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04AAD2             0661*  ; VDU 23, 7: Scrolling
04AAD2             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04AAD2             0663*  ; inputs: a, extent; l, direction; h; speed
04AAD2             0664*  vdu_scroll_down:
04AAD2 32 E7 AA 04 0665*  	ld (@extent),a
04AAD6 22 E8 AA 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04AADA 21 E5 AA 04 0667*  	ld hl,@cmd
04AADE 01 05 00 00 0668*  	ld bc,@end-@cmd
04AAE2 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04AAE4 C9          0670*  	ret
04AAE5 17 07       0671*  @cmd:       db 23,7
04AAE7 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04AAE8 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04AAE9 00          0674*  @speed:     db 0x00 ; pixels
04AAEA 00          0675*  @end:		db 0x00 ; padding
04AAEB             0676*  
04AAEB             0677*  cursor_on:
04AAEB 21 F6 AA 04 0678*  	ld hl,@cmd
04AAEF 01 03 00 00 0679*  	ld bc,@end-@cmd
04AAF3 5B DF       0680*  	rst.lil $18
04AAF5 C9          0681*  	ret
04AAF6             0682*  @cmd:
04AAF6 17 01 01    0683*  	db 23,1,1
04AAF9             0684*  @end:
04AAF9             0685*  
04AAF9             0686*  cursor_off:
04AAF9 21 04 AB 04 0687*  	ld hl,@cmd
04AAFD 01 03 00 00 0688*  	ld bc,@end-@cmd
04AB01 5B DF       0689*  	rst.lil $18
04AB03 C9          0690*  	ret
04AB04             0691*  @cmd:
04AB04 17 01 00    0692*  	db 23,1,0
04AB07             0693*  @end:
04AB07             0694*  
04AB07 DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04AB09             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04AB09 3E 08       0001*M 			LD	A, function
04AB0B 5B CF       0002*M 			RST.LIL	08h
04AB0D DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04AB10 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04AB13 28 FB       0699*  			JR	Z, @wait
04AB15 DD E1       0700*  			POP	IX
04AB17 C9          0701*  			RET
04AB18             0702*  
04AB18             0703*  ; #### from vdu_bmp.asm ####
04AB18             0704*  ; =========================================================================
04AB18             0705*  ; Bitmaps
04AB18             0706*  ; -------------------------------------------------------------------------
04AB18             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04AB18             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04AB18             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04AB18             0710*  
04AB18             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04AB18             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04AB18             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04AB18             0714*  ; typically "move" style plot commands are used to define the rectangle.
04AB18             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04AB18             0716*  ; inputs: hl; target bufferId
04AB18             0717*  ; all the following are in 16.8 fixed point format
04AB18             0718*  ;   ub.c; top-left x coordinate
04AB18             0719*  ;   ud.e; top-left y coordinate
04AB18             0720*  ;   ui.x; width
04AB18             0721*  ;   ui.y; height
04AB18             0722*  vdu_buff_screen_capture168:
04AB18 ED 53 4F AB 0723*          ld (@y0-1),de
       04          
04AB1D ED 43 4D AB 0724*          ld (@x0-1),bc
       04          
04AB22 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04AB24 32 4D AB 04 0726*          ld (@x0-1),a
04AB28             0727*  
04AB28 DD 22 54 AB 0728*          ld (@x1),ix
       04          
04AB2D FD 22 56 AB 0729*          ld (@y1),iy
       04          
04AB32 3E 17       0730*          ld a,23
04AB34 32 58 AB 04 0731*          ld (@y1+2),a
04AB38             0732*  
04AB38 22 5B AB 04 0733*          ld (@bufId),hl
04AB3C AF          0734*          xor a
04AB3D 32 5D AB 04 0735*          ld (@bufId+2),a
04AB41             0736*  
04AB41 21 4C AB 04 0737*          ld hl,@begin
04AB45 01 13 00 00 0738*          ld bc,@end-@begin
04AB49 5B DF       0739*          rst.lil $18
04AB4B C9          0740*          ret
04AB4C             0741*  @begin:
04AB4C             0742*  ; absolute move gfx cursor to top-left screen coordinate
04AB4C             0743*  ; VDU 25, mode, x; y;: PLOT command
04AB4C 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04AB4E 40 00       0745*  @x0: 	dw 64
04AB50 40 00       0746*  @y0: 	dw 64
04AB52             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04AB52             0748*  ; VDU 25, mode, x; y;: PLOT command
04AB52 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04AB54 0F 00       0750*  @x1: 	dw 15
04AB56 0F 00       0751*  @y1: 	dw 15
04AB58             0752*  ; now the main event
04AB58             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04AB58 17 1B 21    0754*          db 23,27,0x21
04AB5B 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04AB5F             0756*  @end: ; no padding required
04AB5F             0757*  
04AB5F             0758*  vdu_buff_screen_capture_full:
04AB5F 21 6A AB 04 0759*          ld hl,@begin
04AB63 01 13 00 00 0760*          ld bc,@end-@begin
04AB67 5B DF       0761*          rst.lil $18
04AB69 C9          0762*          ret
04AB6A             0763*  @begin:
04AB6A             0764*  ; absolute move gfx cursor to top-left screen coordinate
04AB6A             0765*  ; VDU 25, mode, x; y;: PLOT command
04AB6A 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04AB6C 00 00       0767*  @x0: 	dw 0
04AB6E 00 00       0768*  @y0: 	dw 0
04AB70             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04AB70             0770*  ; VDU 25, mode, x; y;: PLOT command
04AB70 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04AB72 3F 01       0772*  @x1: 	dw 319
04AB74 EF 00       0773*  @y1: 	dw 239
04AB76             0774*  ; now the main event
04AB76             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04AB76 17 1B 21    0776*          db 23,27,0x21
04AB79 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04AB7D             0778*  @end: ; no padding required
04AB7D             0779*  
04AB7D             0780*  vdu_buff_screen_paste_full:
04AB7D 21 88 AB 04 0781*          ld hl,@begin
04AB81 01 0B 00 00 0782*          ld bc,@end-@begin
04AB85 5B DF       0783*          rst.lil $18
04AB87 C9          0784*          ret
04AB88             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04AB88 17 1B 20    0786*  @begin:    db 23,27,0x20
04AB8B 00 20       0787*  @bufferId: dw 0x2000
04AB8D             0788*  ; VDU 25, mode, x; y;: PLOT command
04AB8D 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04AB8F 00 00 00 00 0790*             dw 0x0000,0x0000
04AB93             0791*  @end: ; no padding required
04AB93             0792*  
04AB93             0793*  vdu_buff_screen_capture_tiles:
04AB93 21 9E AB 04 0794*          ld hl,@begin
04AB97 01 13 00 00 0795*          ld bc,@end-@begin
04AB9B 5B DF       0796*          rst.lil $18
04AB9D C9          0797*          ret
04AB9E             0798*  @begin:
04AB9E             0799*  ; absolute move gfx cursor to top-left screen coordinate
04AB9E             0800*  ; VDU 25, mode, x; y;: PLOT command
04AB9E 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04ABA0 00 00       0802*  @x0: 	dw 0
04ABA2 00 00       0803*  @y0: 	dw 0
04ABA4             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04ABA4             0805*  ; VDU 25, mode, x; y;: PLOT command
04ABA4 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04ABA6 FF 00       0807*  @x1: 	dw 319-64
04ABA8 EF 00       0808*  @y1: 	dw 239
04ABAA             0809*  ; now the main event
04ABAA             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04ABAA 17 1B 21    0811*          db 23,27,0x21
04ABAD 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04ABB1             0813*  @end: ; no padding required
04ABB1             0814*  
04ABB1             0815*  vdu_buff_screen_paste_tiles:
04ABB1 21 BC AB 04 0816*          ld hl,@begin
04ABB5 01 0B 00 00 0817*          ld bc,@end-@begin
04ABB9 5B DF       0818*          rst.lil $18
04ABBB C9          0819*          ret
04ABBC             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04ABBC 17 1B 20    0821*  @begin:    db 23,27,0x20
04ABBF 00 20       0822*  @bufferId: dw 0x2000
04ABC1             0823*  ; VDU 25, mode, x; y;: PLOT command
04ABC1 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04ABC3 00 00 01 00 0825*             dw 0x0000,0x0001
04ABC7             0826*  @end: ; no padding required
04ABC7             0827*  
04ABC7             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04ABC7             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04ABC7             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04ABC7             0831*  ; Value	Meaning
04ABC7             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04ABC7             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04ABC7             0834*  ; 2	Mono/Mask (1-bit per pixel)
04ABC7             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04ABC7             0836*  ;     They have some significant limitations, and are not intended for general use.
04ABC7             0837*  
04ABC7             0838*  ; =========================================================================
04ABC7             0839*  ; Sprites
04ABC7             0840*  ; -------------------------------------------------------------------------
04ABC7             0841*  ; VDU 23, 27, 4, n: Select sprite n
04ABC7             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04ABC7             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04ABC7             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04ABC7             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04ABC7             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04ABC7             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04ABC7             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04ABC7             0849*  ; VDU 23, 27, 11: Show current sprite
04ABC7             0850*  ; VDU 23, 27, 12: Hide current sprite
04ABC7             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04ABC7             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04ABC7             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04ABC7             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04ABC7             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04ABC7             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04ABC7             0857*  
04ABC7             0858*  ; =========================================================================
04ABC7             0859*  ; Mouse cursor
04ABC7             0860*  ; -------------------------------------------------------------------------
04ABC7             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04ABC7             0862*  
04ABC7             0863*  ; #### from vdu_plot.asm ####
04ABC7             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABC7             0865*  ; PLOT code 	(Decimal) 	Effect
04ABC7             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04ABC7             0867*  plot_sl_both: equ 0x00
04ABC7             0868*  
04ABC7             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04ABC7             0870*  plot_sl_first: equ 0x08
04ABC7             0871*  
04ABC7             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04ABC7             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04ABC7             0874*  
04ABC7             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04ABC7             0876*  plot_sl_last: equ 0x20
04ABC7             0877*  
04ABC7             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04ABC7             0879*  plot_sl_none: equ 0x28
04ABC7             0880*  
04ABC7             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04ABC7             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04ABC7             0883*  
04ABC7             0884*  ; &40-&47 	64-71 	Point plot
04ABC7             0885*  plot_pt: equ 0x40
04ABC7             0886*  
04ABC7             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04ABC7             0888*  plot_lf_lr_non_bg: equ 0x48
04ABC7             0889*  
04ABC7             0890*  ; &50-&57 	80-87 	Triangle fill
04ABC7             0891*  plot_tf: equ 0x50
04ABC7             0892*  
04ABC7             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04ABC7             0894*  plot_lf_r_bg: equ 0x58
04ABC7             0895*  
04ABC7             0896*  ; &60-&67 	96-103 	Rectangle fill
04ABC7             0897*  plot_rf: equ 0x60
04ABC7             0898*  
04ABC7             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04ABC7             0900*  plot_lf_lr_fg: equ 0x60
04ABC7             0901*  
04ABC7             0902*  ; &70-&77 	112-119 	Parallelogram fill
04ABC7             0903*  plot_pf: equ 0x70
04ABC7             0904*  
04ABC7             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04ABC7             0906*  plot_lf_r_non_fg: equ 0x78
04ABC7             0907*  
04ABC7             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04ABC7             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04ABC7             0910*  
04ABC7             0911*  ; &90-&97 	144-151 	Circle outline
04ABC7             0912*  plot_co: equ 0x90
04ABC7             0913*  
04ABC7             0914*  ; &98-&9F 	152-159 	Circle fill
04ABC7             0915*  plot_cf: equ 0x98
04ABC7             0916*  
04ABC7             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04ABC7             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04ABC7             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04ABC7             0920*  
04ABC7             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04ABC7             0922*  plot_rcm: equ 0xB8
04ABC7             0923*  
04ABC7             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04ABC7             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04ABC7             0926*  ; &D0-&D7 	208-215 	Not defined
04ABC7             0927*  ; &D8-&DF 	216-223 	Not defined
04ABC7             0928*  ; &E0-&E7 	224-231 	Not defined
04ABC7             0929*  
04ABC7             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABC7             0931*  plot_bmp: equ 0xE8
04ABC7             0932*  
04ABC7             0933*  ; &F0-&F7 	240-247 	Not defined
04ABC7             0934*  ; &F8-&FF 	248-255 	Not defined
04ABC7             0935*  
04ABC7             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04ABC7             0937*  ; Agon Console8 VDP 2.2.0
04ABC7             0938*  
04ABC7             0939*  ; Within each group of eight plot codes, the effects are as follows:
04ABC7             0940*  ; Plot code 	Effect
04ABC7             0941*  ; 0 	Move relative
04ABC7             0942*  mv_rel: equ 0
04ABC7             0943*  
04ABC7             0944*  ; 1 	Plot relative in current foreground colour
04ABC7             0945*  dr_rel_fg: equ 1
04ABC7             0946*  
04ABC7             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04ABC7             0948*  ; 3 	Plot relative in current background colour
04ABC7             0949*  dr_rel_bg: equ 3
04ABC7             0950*  
04ABC7             0951*  ; 4 	Move absolute
04ABC7             0952*  mv_abs: equ 4
04ABC7             0953*  
04ABC7             0954*  ; 5 	Plot absolute in current foreground colour
04ABC7             0955*  dr_abs_fg: equ 5
04ABC7             0956*  
04ABC7             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04ABC7             0958*  ; 7 	Plot absolute in current background colour
04ABC7             0959*  dr_abs_bg: equ 7
04ABC7             0960*  
04ABC7             0961*  ; Codes 0-3 use the position data provided as part of the command
04ABC7             0962*  ; as a relative position, adding the position given to the current
04ABC7             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04ABC7             0964*  ; as part of the command as an absolute position, setting the current
04ABC7             0965*  ; graphical cursor position to the position given.
04ABC7             0966*  
04ABC7             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04ABC7             0968*  ; current pixel colour. These operations cannot currently be supported
04ABC7             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04ABC7             0970*  ; supported. Support for these codes may be added in a future version
04ABC7             0971*  ; of the VDP firmware.
04ABC7             0972*  
04ABC7             0973*  ; 16 colour palette constants
04ABC7             0974*  c_black: equ 0
04ABC7             0975*  c_red_dk: equ 1
04ABC7             0976*  c_green_dk: equ 2
04ABC7             0977*  c_yellow_dk: equ 3
04ABC7             0978*  c_blue_dk: equ 4
04ABC7             0979*  c_magenta_dk: equ 5
04ABC7             0980*  c_cyan_dk: equ 6
04ABC7             0981*  c_grey: equ 7
04ABC7             0982*  c_grey_dk: equ 8
04ABC7             0983*  c_red: equ 9
04ABC7             0984*  c_green: equ 10
04ABC7             0985*  c_yellow: equ 11
04ABC7             0986*  c_blue: equ 12
04ABC7             0987*  c_magenta: equ 13
04ABC7             0988*  c_cyan: equ 14
04ABC7             0989*  c_white: equ 15
04ABC7             0990*  
04ABC7             0991*  ; VDU 25, mode, x; y;: PLOT command
04ABC7             0992*  ; inputs: a=mode, bc=x0, de=y0
04ABC7             0993*  vdu_plot:
04ABC7 32 E1 AB 04 0994*      ld (@mode),a
04ABCB ED 43 E2 AB 0995*      ld (@x0),bc
       04          
04ABD0 ED 53 E4 AB 0996*      ld (@y0),de
       04          
04ABD5 21 E0 AB 04 0997*  	ld hl,@cmd
04ABD9 01 06 00 00 0998*  	ld bc,@end-@cmd
04ABDD 5B DF       0999*  	rst.lil $18
04ABDF C9          1000*  	ret
04ABE0 19          1001*  @cmd:   db 25
04ABE1 00          1002*  @mode:  db 0
04ABE2 00 00       1003*  @x0: 	dw 0
04ABE4 00 00       1004*  @y0: 	dw 0
04ABE6 00          1005*  @end:   db 0 ; extra byte to soak up deu
04ABE7             1006*  
04ABE7             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04ABE7             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04ABE7             1009*  ; VDU 25, mode, x; y;: PLOT command
04ABE7             1010*  ; inputs: bc=x0, de=y0
04ABE7             1011*  ; prerequisites: vdu_buff_select
04ABE7             1012*  vdu_plot_bmp:
04ABE7 ED 43 FE AB 1013*      ld (@x0),bc
       04          
04ABEC ED 53 00 AC 1014*      ld (@y0),de
       04          
04ABF1 21 FC AB 04 1015*  	ld hl,@cmd
04ABF5 01 06 00 00 1016*  	ld bc,@end-@cmd
04ABF9 5B DF       1017*  	rst.lil $18
04ABFB C9          1018*  	ret
04ABFC 19          1019*  @cmd:   db 25
04ABFD ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04ABFE 00 00       1021*  @x0: 	dw 0x0000
04AC00 00 00       1022*  @y0: 	dw 0x0000
04AC02 00          1023*  @end:   db 0x00 ; padding
04AC03             1024*  
04AC03             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04AC03             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04AC03             1027*  ; VDU 25, mode, x; y;: PLOT command
04AC03             1028*  ; inputs: bc=x0, de=y0
04AC03             1029*  ; USING 16.8 FIXED POINT COORDINATES
04AC03             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AC03             1031*  ;   the fractional portiion of the inputs are truncated
04AC03             1032*  ;   leaving only the 16-bit integer portion
04AC03             1033*  ; prerequisites: vdu_buff_select
04AC03             1034*  vdu_plot_bmp168:
04AC03             1035*  ; populate in the reverse of normal to keep the
04AC03             1036*  ; inputs from stomping on each other
04AC03 ED 53 21 AC 1037*      ld (@y0-1),de
       04          
04AC08 ED 43 1F AC 1038*      ld (@x0-1),bc
       04          
04AC0D 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04AC0F 32 1F AC 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04AC13 21 1E AC 04 1041*  	ld hl,@cmd
04AC17 01 06 00 00 1042*  	ld bc,@end-@cmd
04AC1B 5B DF       1043*  	rst.lil $18
04AC1D C9          1044*  	ret
04AC1E 19          1045*  @cmd:   db 25
04AC1F ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04AC20 00 00       1047*  @x0: 	dw 0x0000
04AC22 00 00       1048*  @y0: 	dw 0x0000
04AC24             1049*  @end:  ; no padding required b/c we shifted de right
04AC24             1050*  
04AC24             1051*  ; draw a filled rectangle
04AC24             1052*  vdu_plot_rf:
04AC24 ED 43 4B AC 1053*      ld (@x0),bc
       04          
04AC29 ED 53 4D AC 1054*      ld (@y0),de
       04          
04AC2E DD 22 51 AC 1055*      ld (@x1),ix
       04          
04AC33 FD 22 53 AC 1056*      ld (@y1),iy
       04          
04AC38 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04AC3A 32 4F AC 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AC3E 21 49 AC 04 1059*  	ld hl,@cmd0
04AC42 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04AC46 5B DF       1061*  	rst.lil $18
04AC48 C9          1062*      ret
04AC49 19          1063*  @cmd0:  db 25 ; plot
04AC4A 04          1064*  @arg0:  db plot_sl_both+mv_abs
04AC4B 00 00       1065*  @x0:    dw 0x0000
04AC4D 00 00       1066*  @y0:    dw 0x0000
04AC4F 19          1067*  @cmd1:  db 25 ; plot
04AC50 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04AC51 00 00       1069*  @x1:    dw 0x0000
04AC53 00 00       1070*  @y1:    dw 0x0000
04AC55 00          1071*  @end:   db 0x00 ; padding
04AC56             1072*  
04AC56             1073*  ; draw a filled circle
04AC56             1074*  vdu_plot_cf:
04AC56 ED 43 7D AC 1075*      ld (@x0),bc
       04          
04AC5B ED 53 7F AC 1076*      ld (@y0),de
       04          
04AC60 DD 22 83 AC 1077*      ld (@x1),ix
       04          
04AC65 FD 22 85 AC 1078*      ld (@y1),iy
       04          
04AC6A 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04AC6C 32 81 AC 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04AC70 21 7B AC 04 1081*  	ld hl,@cmd0
04AC74 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04AC78 5B DF       1083*  	rst.lil $18
04AC7A C9          1084*      ret
04AC7B 19          1085*  @cmd0:  db 25 ; plot
04AC7C 04          1086*  @arg0:  db plot_sl_both+mv_abs
04AC7D 00 00       1087*  @x0:    dw 0x0000
04AC7F 00 00       1088*  @y0:    dw 0x0000
04AC81 19          1089*  @cmd1:  db 25 ; plot
04AC82 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04AC83 00 00       1091*  @x1:    dw 0x0000
04AC85 00 00       1092*  @y1:    dw 0x0000
04AC87 00          1093*  @end:   db 0x00 ; padding
04AC88             1094*  
04AC88             1095*  ; #### from vdu_sprites.asm ####
04AC88             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04AC88             1097*  ; the VDP can support up to 256 sprites. They must be defined
04AC88             1098*  ; contiguously, and so the first sprite is sprite 0.
04AC88             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04AC88             1100*  ; Once a selection of sprites have been defined, you can activate
04AC88             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04AC88             1102*  ; of sprites to activate. This will activate the first n sprites,
04AC88             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04AC88             1104*  
04AC88             1105*  ; A single sprite can have multiple "frames", referring to
04AC88             1106*  ; different bitmaps.
04AC88             1107*  ; (These bitmaps do not need to be the same size.)
04AC88             1108*  ; This allows a sprite to include an animation sequence,
04AC88             1109*  ; which can be stepped through one frame at a time, or picked
04AC88             1110*  ; in any order.
04AC88             1111*  
04AC88             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04AC88             1113*  ; be noted however that "native" format bitmaps are not
04AC88             1114*  ; recommended for use as sprite frames, as they cannot get
04AC88             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04AC88             1116*  ; format is not really intended for general use.) This is part
04AC88             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04AC88             1118*  ; screen are now stored in RGBA2222 format.
04AC88             1119*  
04AC88             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04AC88             1121*  ; and then later shown again.
04AC88             1122*  
04AC88             1123*  ; Moving sprites around the screen is done by changing the
04AC88             1124*  ; position of the sprite. This can be done either by setting
04AC88             1125*  ; the absolute position of the sprite, or by moving the sprite
04AC88             1126*  ; by a given number of pixels. (Sprites are positioned using
04AC88             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04AC88             1128*  ; In the current sprite system, sprites will not update their
04AC88             1129*  ; position on-screen until either another drawing operation is
04AC88             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04AC88             1131*  
04AC88             1132*  ; Here are the sprite commands:
04AC88             1133*  ;
04AC88             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04AC88             1135*  ; inputs: a is the 8-bit sprite id
04AC88             1136*  ; vdu_sprite_select:
04AC88             1137*  
04AC88             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04AC88             1139*  ; inputs: none
04AC88             1140*  ; prerequisites: vdu_sprite_select
04AC88             1141*  ; vdu_sprite_clear_frames:
04AC88             1142*  
04AC88             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04AC88             1144*  ; inputs: a is the 8-bit bitmap number
04AC88             1145*  ; prerequisites: vdu_sprite_select
04AC88             1146*  ; vdu_sprite_add_bmp:
04AC88             1147*  
04AC88             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04AC88             1149*  ; inputs: a is the number of sprites to activate
04AC88             1150*  ; vdu_sprite_activate:
04AC88             1151*  
04AC88             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04AC88             1153*  ; inputs: none
04AC88             1154*  ; prerequisites: vdu_sprite_select
04AC88             1155*  ; vdu_sprite_next_frame:
04AC88             1156*  
04AC88             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04AC88             1158*  ; inputs: none
04AC88             1159*  ; prerequisites: vdu_sprite_select
04AC88             1160*  ; vdu_sprite_prev_frame:
04AC88             1161*  
04AC88             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04AC88             1163*  ; inputs: a is frame number to select
04AC88             1164*  ; prerequisites: vdu_sprite_select
04AC88             1165*  ; vdu_sprite_select_frame:
04AC88             1166*  
04AC88             1167*  ; VDU 23, 27, 11: Show current sprite
04AC88             1168*  ; inputs: none
04AC88             1169*  ; prerequisites: vdu_sprite_select
04AC88             1170*  ; vdu_sprite_show:
04AC88             1171*  
04AC88             1172*  ; VDU 23, 27, 12: Hide current sprite
04AC88             1173*  ; inputs: none
04AC88             1174*  ; prerequisites: vdu_sprite_select
04AC88             1175*  ; vdu_sprite_hide:
04AC88             1176*  
04AC88             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AC88             1178*  ; inputs: bc is x coordinate, de is y coordinate
04AC88             1179*  ; prerequisites: vdu_sprite_select
04AC88             1180*  ; vdu_sprite_move_abs:
04AC88             1181*  ;
04AC88             1182*  ; USING 16.8 FIXED POINT COORDINATES
04AC88             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AC88             1184*  ;   the fractional portiion of the inputs are truncated
04AC88             1185*  ;   leaving only the 16-bit integer portion
04AC88             1186*  ; prerequisites: vdu_sprite_select
04AC88             1187*  ; vdu_sprite_move_abs168:
04AC88             1188*  
04AC88             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AC88             1190*  ; inputs: bc is x coordinate, de is y coordinate
04AC88             1191*  ; prerequisites: vdu_sprite_select
04AC88             1192*  ; vdu_sprite_move_rel:
04AC88             1193*  ;
04AC88             1194*  ; USING 16.8 FIXED POINT COORDINATES
04AC88             1195*  ; inputs: ub.c is dx, ud.e is dy
04AC88             1196*  ;   the fractional portiion of the inputs are truncated
04AC88             1197*  ;   leaving only the 16-bit integer portion
04AC88             1198*  ; prerequisites: vdu_sprite_select
04AC88             1199*  ; vdu_sprite_move_rel168:
04AC88             1200*  
04AC88             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AC88             1202*  ; inputs: none
04AC88             1203*  ; vdu_sprite_update:
04AC88             1204*  
04AC88             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04AC88             1206*  ; inputs: none
04AC88             1207*  ; vdu_sprite_bmp_reset:
04AC88             1208*  
04AC88             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04AC88             1210*  ; inputs: none
04AC88             1211*  ; vdu_sprite_reset:
04AC88             1212*  
04AC88             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04AC88             1214*  ; inputs: a is the GCOL paint mode
04AC88             1215*  ; prerequisites: vdu_sprite_select
04AC88             1216*  ; vdu_sprite_set_gcol:
04AC88             1217*  
04AC88             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04AC88             1219*  ; inputs: hl=bufferId
04AC88             1220*  ; prerequisites: vdu_sprite_select
04AC88             1221*  ; vdu_sprite_add_buff:
04AC88             1222*  
04AC88             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04AC88             1224*  
04AC88             1225*  ; VDU 23, 27, 4, n: Select sprite n
04AC88             1226*  ; inputs: a is the 8-bit sprite id
04AC88             1227*  vdu_sprite_select:
04AC88 32 9A AC 04 1228*      ld (@sprite),a
04AC8C 21 97 AC 04 1229*      ld hl,@cmd
04AC90 01 04 00 00 1230*      ld bc,@end-@cmd
04AC94 5B DF       1231*      rst.lil $18
04AC96 C9          1232*      ret
04AC97 17 1B 04    1233*  @cmd:    db 23,27,4
04AC9A 00          1234*  @sprite: db 0x00
04AC9B             1235*  @end:
04AC9B             1236*  
04AC9B             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04AC9B             1238*  ; inputs: none
04AC9B             1239*  ; prerequisites: vdu_sprite_select
04AC9B             1240*  vdu_sprite_clear_frames:
04AC9B 21 A6 AC 04 1241*      ld hl,@cmd
04AC9F 01 03 00 00 1242*      ld bc,@end-@cmd
04ACA3 5B DF       1243*      rst.lil $18
04ACA5 C9          1244*      ret
04ACA6 17 1B 05    1245*  @cmd: db 23,27,5
04ACA9             1246*  @end:
04ACA9             1247*  
04ACA9             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04ACA9             1249*  ; inputs: a is the 8-bit bitmap number
04ACA9             1250*  ; prerequisites: vdu_sprite_select
04ACA9             1251*  vdu_sprite_add_bmp:
04ACA9 32 BB AC 04 1252*      ld (@bmp),a
04ACAD 21 B8 AC 04 1253*      ld hl,@cmd
04ACB1 01 04 00 00 1254*      ld bc,@end-@cmd
04ACB5 5B DF       1255*      rst.lil $18
04ACB7 C9          1256*      ret
04ACB8 17 1B 06    1257*  @cmd: db 23,27,6
04ACBB 00          1258*  @bmp: db 0x00
04ACBC             1259*  @end:
04ACBC             1260*  
04ACBC             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04ACBC             1262*  ; inputs: a is the number of sprites to activate
04ACBC             1263*  vdu_sprite_activate:
04ACBC 32 CE AC 04 1264*      ld (@num),a
04ACC0 21 CB AC 04 1265*      ld hl,@cmd
04ACC4 01 04 00 00 1266*      ld bc,@end-@cmd
04ACC8 5B DF       1267*      rst.lil $18
04ACCA C9          1268*      ret
04ACCB 17 1B 07    1269*  @cmd: db 23,27,7
04ACCE 00          1270*  @num: db 0x00
04ACCF             1271*  @end:
04ACCF             1272*  
04ACCF             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04ACCF             1274*  ; inputs: none
04ACCF             1275*  ; prerequisites: vdu_sprite_select
04ACCF             1276*  vdu_sprite_next_frame:
04ACCF 21 DA AC 04 1277*      ld hl,@cmd
04ACD3 01 03 00 00 1278*      ld bc,@end-@cmd
04ACD7 5B DF       1279*      rst.lil $18
04ACD9 C9          1280*      ret
04ACDA 17 1B 08    1281*  @cmd: db 23,27,8
04ACDD             1282*  @end:
04ACDD             1283*  
04ACDD             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04ACDD             1285*  ; inputs: none
04ACDD             1286*  ; prerequisites: vdu_sprite_select
04ACDD             1287*  vdu_sprite_prev_frame:
04ACDD 21 E8 AC 04 1288*      ld hl,@cmd
04ACE1 01 03 00 00 1289*      ld bc,@end-@cmd
04ACE5 5B DF       1290*      rst.lil $18
04ACE7 C9          1291*      ret
04ACE8 17 1B 09    1292*  @cmd: db 23,27,9
04ACEB             1293*  @end:
04ACEB             1294*  
04ACEB             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04ACEB             1296*  ; inputs: a is frame number to select
04ACEB             1297*  ; prerequisites: vdu_sprite_select
04ACEB             1298*  vdu_sprite_select_frame:
04ACEB 32 FD AC 04 1299*      ld (@frame),a
04ACEF 21 FA AC 04 1300*      ld hl,@cmd
04ACF3 01 04 00 00 1301*      ld bc,@end-@cmd
04ACF7 5B DF       1302*      rst.lil $18
04ACF9 C9          1303*      ret
04ACFA 17 1B 0A    1304*  @cmd:    db 23,27,10
04ACFD 00          1305*  @frame:  db 0x00
04ACFE             1306*  @end:
04ACFE             1307*  
04ACFE             1308*  ; VDU 23, 27, 11: Show current sprite
04ACFE             1309*  ; inputs: none
04ACFE             1310*  ; prerequisites: vdu_sprite_select
04ACFE             1311*  vdu_sprite_show:
04ACFE 21 09 AD 04 1312*      ld hl,@cmd
04AD02 01 03 00 00 1313*      ld bc,@end-@cmd
04AD06 5B DF       1314*      rst.lil $18
04AD08 C9          1315*      ret
04AD09 17 1B 0B    1316*  @cmd: db 23,27,11
04AD0C             1317*  @end:
04AD0C             1318*  
04AD0C             1319*  ; VDU 23, 27, 12: Hide current sprite
04AD0C             1320*  ; inputs: none
04AD0C             1321*  ; prerequisites: vdu_sprite_select
04AD0C             1322*  vdu_sprite_hide:
04AD0C 21 17 AD 04 1323*      ld hl,@cmd
04AD10 01 03 00 00 1324*      ld bc,@end-@cmd
04AD14 5B DF       1325*      rst.lil $18
04AD16 C9          1326*      ret
04AD17 17 1B 0C    1327*  @cmd: db 23,27,12
04AD1A             1328*  @end:
04AD1A             1329*  
04AD1A             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AD1A             1331*  ; inputs: bc is x coordinate, de is y coordinate
04AD1A             1332*  ; prerequisites: vdu_sprite_select
04AD1A             1333*  vdu_sprite_move_abs:
04AD1A ED 43 32 AD 1334*      ld (@xpos),bc
       04          
04AD1F ED 53 34 AD 1335*      ld (@ypos),de
       04          
04AD24 21 2F AD 04 1336*      ld hl,@cmd
04AD28 01 07 00 00 1337*      ld bc,@end-@cmd
04AD2C 5B DF       1338*      rst.lil $18
04AD2E C9          1339*      ret
04AD2F 17 1B 0D    1340*  @cmd:  db 23,27,13
04AD32 00 00       1341*  @xpos: dw 0x0000
04AD34 00 00       1342*  @ypos: dw 0x0000
04AD36 00          1343*  @end:  db 0x00 ; padding
04AD37             1344*  
04AD37             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AD37             1346*  ; inputs: bc is x coordinate, de is y coordinate
04AD37             1347*  ; prerequisites: vdu_sprite_select
04AD37             1348*  vdu_sprite_move_rel:
04AD37 ED 43 4F AD 1349*      ld (@dx),bc
       04          
04AD3C ED 53 51 AD 1350*      ld (@dy),de
       04          
04AD41 21 4C AD 04 1351*      ld hl,@cmd
04AD45 01 07 00 00 1352*      ld bc,@end-@cmd
04AD49 5B DF       1353*      rst.lil $18
04AD4B C9          1354*      ret
04AD4C 17 1B 0E    1355*  @cmd: db 23,27,14
04AD4F 00 00       1356*  @dx:  dw 0x0000
04AD51 00 00       1357*  @dy:  dw 0x0000
04AD53 00          1358*  @end: db 0x00 ; padding
04AD54             1359*  
04AD54             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04AD54             1361*  ; USING 16.8 FIXED POINT COORDINATES
04AD54             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04AD54             1363*  ;   the fractional portiion of the inputs are truncated
04AD54             1364*  ;   leaving only the 16-bit integer portion
04AD54             1365*  ; prerequisites: vdu_sprite_select
04AD54             1366*  vdu_sprite_move_abs168:
04AD54             1367*  ; populate in the reverse of normal to keep the
04AD54             1368*  ; inputs from stomping on each other
04AD54 ED 53 73 AD 1369*      ld (@ypos-1),de
       04          
04AD59 ED 43 71 AD 1370*      ld (@xpos-1),bc
       04          
04AD5E 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04AD60 32 71 AD 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD64 21 6F AD 04 1373*      ld hl,@cmd
04AD68 01 07 00 00 1374*      ld bc,@end-@cmd
04AD6C 5B DF       1375*      rst.lil $18
04AD6E C9          1376*      ret
04AD6F 17 1B 0D    1377*  @cmd:  db 23,27,13
04AD72 00 00       1378*  @xpos: dw 0x0000
04AD74 00 00       1379*  @ypos: dw 0x0000
04AD76             1380*  @end:  ; no padding required b/c we shifted de right
04AD76             1381*  
04AD76             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04AD76             1383*  ; USING 16.8 FIXED POINT COORDINATES
04AD76             1384*  ; inputs: ub.c is dx, ud.e is dy
04AD76             1385*  ;   the fractional portiion of the inputs are truncated
04AD76             1386*  ;   leaving only the 16-bit integer portion
04AD76             1387*  ; prerequisites: vdu_sprite_select
04AD76             1388*  vdu_sprite_move_rel168:
04AD76             1389*  ; populate in the reverse of normal to keep the
04AD76             1390*  ; inputs from stomping on each other
04AD76 ED 53 95 AD 1391*      ld (@dy-1),de
       04          
04AD7B ED 43 93 AD 1392*      ld (@dx-1),bc
       04          
04AD80 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04AD82 32 93 AD 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04AD86 21 91 AD 04 1395*      ld hl,@cmd
04AD8A 01 07 00 00 1396*      ld bc,@end-@cmd
04AD8E 5B DF       1397*      rst.lil $18
04AD90 C9          1398*      ret
04AD91 17 1B 0E    1399*  @cmd:  db 23,27,14
04AD94 00 00       1400*  @dx: dw 0x0000
04AD96 00 00       1401*  @dy: dw 0x0000
04AD98             1402*  @end:  ; no padding required b/c we shifted de right
04AD98             1403*  
04AD98             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04AD98             1405*  ; inputs: none
04AD98             1406*  vdu_sprite_update:
04AD98 21 A3 AD 04 1407*      ld hl,@cmd
04AD9C 01 03 00 00 1408*      ld bc,@end-@cmd
04ADA0 5B DF       1409*      rst.lil $18
04ADA2 C9          1410*      ret
04ADA3 17 1B 0F    1411*  @cmd: db 23,27,15
04ADA6             1412*  @end:
04ADA6             1413*  
04ADA6             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04ADA6             1415*  ; inputs: none
04ADA6             1416*  vdu_sprite_bmp_reset:
04ADA6 21 B1 AD 04 1417*      ld hl,@cmd
04ADAA 01 03 00 00 1418*      ld bc,@end-@cmd
04ADAE 5B DF       1419*      rst.lil $18
04ADB0 C9          1420*      ret
04ADB1 17 1B 10    1421*  @cmd: db 23,27,16
04ADB4             1422*  @end:
04ADB4             1423*  
04ADB4             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04ADB4             1425*  ; inputs: none
04ADB4             1426*  vdu_sprite_reset:
04ADB4 21 BF AD 04 1427*      ld hl,@cmd
04ADB8 01 03 00 00 1428*      ld bc,@end-@cmd
04ADBC 5B DF       1429*      rst.lil $18
04ADBE C9          1430*      ret
04ADBF 17 1B 11    1431*  @cmd: db 23,27,17
04ADC2             1432*  @end:
04ADC2             1433*  
04ADC2             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04ADC2             1435*  ; inputs: a is the GCOL paint mode
04ADC2             1436*  ; prerequisites: vdu_sprite_select
04ADC2             1437*  vdu_sprite_set_gcol:
04ADC2 32 D4 AD 04 1438*      ld (@mode),a
04ADC6 21 D1 AD 04 1439*      ld hl,@cmd
04ADCA 01 04 00 00 1440*      ld bc,@end-@cmd
04ADCE 5B DF       1441*      rst.lil $18
04ADD0 C9          1442*      ret
04ADD1 17 1B 12    1443*  @cmd:  db 23,27,18
04ADD4 00          1444*  @mode: db 0x00
04ADD5             1445*  @end:
04ADD5             1446*  
04ADD5             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04ADD5             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04ADD5             1449*  ; inputs: hl=bufferId
04ADD5             1450*  ; prerequisites: vdu_sprite_select
04ADD5             1451*  vdu_sprite_add_buff:
04ADD5 22 E7 AD 04 1452*      ld (@bufferId),hl
04ADD9 21 E4 AD 04 1453*      ld hl,@cmd
04ADDD 01 05 00 00 1454*      ld bc,@end-@cmd
04ADE1 5B DF       1455*      rst.lil $18
04ADE3 C9          1456*      ret
04ADE4 17 1B 26    1457*  @cmd:      db 23,27,0x26
04ADE7 00 00       1458*  @bufferId: dw 0x0000
04ADE9 00          1459*  @end:      db 0x00 ; padding
04ADEA             1460*  
04ADEA             1461*  
04ADEA             1462*  ; #### from sfx.asm ####
04ADEA 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04ADEB             1464*  
04ADEB             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04ADEB             1466*  ; ; inputs: hl = bufferId
04ADEB             1467*  ; sfx_play:
04ADEB             1468*  ; 	ld iy,sfx_last_channel
04ADEB             1469*  ; 	ld a,(iy+0)
04ADEB             1470*  ; 	ld (@bufferId),hl
04ADEB             1471*  ; @find_next_channel:
04ADEB             1472*  ; 	inc a ; bump to next channel
04ADEB             1473*  ; 	and 31 ; modulo 32 channel
04ADEB             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04ADEB             1475*  ; 	ret z ; so we return to caller without doing anything
04ADEB             1476*  ; 	push af ; back up channel
04ADEB             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04ADEB             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04ADEB             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04ADEB             1480*  ; 	pop af ; restore channel
04ADEB             1481*  ; 	jr @find_next_channel ; try the next channel
04ADEB             1482*  ; @play_sfx:
04ADEB             1483*  ; 	pop af ; restore channel
04ADEB             1484*  ; 	ld (iy+0),a ; store channel
04ADEB             1485*  ; 	ld hl,(@bufferId)
04ADEB             1486*  ; 	ld c,a ; channel
04ADEB             1487*  ; 	ld b,127 ; full volume
04ADEB             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04ADEB             1489*  ; 	jp vdu_play_sample
04ADEB             1490*  ; @bufferId:
04ADEB             1491*  ; 	dw 0x0000 ; 16-bit value
04ADEB             1492*  
04ADEB             1493*  sfx_play_random_hurt:
04ADEB CD A9 B7 04 1494*  	call rand_8
04ADEF E6 03       1495*  	and 3
04ADF1 FE 00       1496*  	cp 0
04ADF3 CA 94 BE 04 1497*  	jp z,sfx_play_ahh
04ADF7 FE 01       1498*  	cp 1
04ADF9 CA A0 BE 04 1499*  	jp z,sfx_play_augh
04ADFD FE 02       1500*  	cp 2
04ADFF CA AC BE 04 1501*  	jp z,sfx_play_ayee
04AE03 C3 78 BF 04 1502*  	jp sfx_play_ugh
04AE07             1503*  
04AE07             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04AE07             1505*  sfx_load_main:
04AE07 21 00 00 00 1506*      ld hl,0
04AE0B 22 BE B7 04 1507*      ld (cur_file_idx),hl
04AE0F             1508*  sfx_load_main_loop:
04AE0F             1509*  ; back up loop counter
04AE0F C5          1510*      push bc
04AE10             1511*  ; load the next sound
04AE10 CD 64 AE 04 1512*      call load_next_sound
04AE14             1513*  ; draw all the things
04AE14 CD 27 B9 04 1514*      call tmp_draw_all_the_things
04AE18             1515*  ; move bj
04AE18 CD AF B8 04 1516*  	call move_bj
04AE1C             1517*  ; print welcome message
04AE1C DD 21 80 7C 1518*  	ld ix,font_itc_honda
       04          
04AE21 21 91 C1 04 1519*  	ld hl,hello_world
04AE25 01 20 00 00 1520*  	ld bc,32
04AE29 11 02 00 00 1521*  	ld de,2
04AE2D CD 7F 65 04 1522*  	call font_bmp_print
04AE31             1523*  ; print current filename
04AE31 CD AD A8 04 1524*  	call vdu_cls
04AE35 2A C1 B7 04 1525*  	ld hl,(cur_filename)
04AE39 CD AC AE 04 1526*  	call printString
04AE3D CD C1 AE 04 1527*  	call printNewLine
04AE41             1528*  
04AE41             1529*  ; print current load stopwatch
04AE41 21 B3 C1 04 1530*  	ld hl,loading_time
04AE45 CD AC AE 04 1531*  	call printString
04AE49 CD 43 C1 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04AE4D CD FA AE 04 1533*  	call printDec
04AE51             1534*  
04AE51             1535*  ; flip screen
04AE51 CD 7C AA 04 1536*      call vdu_flip
04AE55             1537*  ; ; delay for a bit so sound can play
04AE55             1538*  ;     ld a,%10000000 ; 1 second delay
04AE55             1539*  ;     call multiPurposeDelay
04AE55             1540*  ; decrement loop counter
04AE55 C1          1541*      pop bc
04AE56 0B          1542*  	dec bc
04AE57             1543*  ; ; DEBUG: DUMP REGISTERS
04AE57             1544*  ; 	push bc
04AE57             1545*  ; 	call dumpRegistersHex
04AE57             1546*  ; 	call vdu_flip
04AE57             1547*  ; 	pop bc
04AE57             1548*  ; ; END DEBUG
04AE57 79          1549*      ld a,c
04AE58 B7          1550*      or a
04AE59 C2 0F AE 04 1551*      jp nz,sfx_load_main_loop
04AE5D 78          1552*      ld a,b
04AE5E B7          1553*      or a
04AE5F C2 0F AE 04 1554*      jp nz,sfx_load_main_loop
04AE63 C9          1555*      ret
04AE64             1556*  
04AE64             1557*  load_next_sound:
04AE64             1558*  ; look up the load routine for the current file index
04AE64 2A BE B7 04 1559*  	ld hl,(cur_file_idx)
04AE68 29          1560*  	add hl,hl ; multiply current index by 2 ...
04AE69 ED 5B BE B7 1561*  	ld de,(cur_file_idx)
       04          
04AE6E 19          1562*  	add hl,de ; ... now by 3
04AE6F ED 5B CA B7 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04AE74 19          1564*  	add hl,de
04AE75 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04AE77 22 7C AE 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04AE7B             1567*  @jump_addr:
04AE7B CD 00 00 00 1568*  	call 0 ; call the sound load routine
04AE7F             1569*  ; look up the buffer id for the current file
04AE7F 2A BE B7 04 1570*  	ld hl,(cur_file_idx)
04AE83 29          1571*  	add hl,hl ; multiply current index by 2 ...
04AE84 ED 5B BE B7 1572*  	ld de,(cur_file_idx)
       04          
04AE89 19          1573*  	add hl,de ; ... now by 3
04AE8A ED 5B C7 B7 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04AE8F 19          1575*  	add hl,de
04AE90 ED 27       1576*  	ld hl,(hl)
04AE92 22 C4 B7 04 1577*  	ld (cur_buffer_id),hl
04AE96             1578*  ; bump the current file index
04AE96 2A BE B7 04 1579*  	ld hl,(cur_file_idx)
04AE9A 23          1580*  	inc hl
04AE9B 22 BE B7 04 1581*  	ld (cur_file_idx),hl
04AE9F C9          1582*  	ret
04AEA0             1583*  
04AEA0             1584*  ; load a sound file to a buffer
04AEA0             1585*  ; inputs: hl = bufferId ; ix = file size
04AEA0             1586*  vdu_load_sfx:
04AEA0             1587*  ; back up input parameters
04AEA0 E5          1588*      push hl ; bufferId
04AEA1             1589*  ; load the sound
04AEA1 CD 7E C3 04 1590*  	call vdu_load_buffer_from_file
04AEA5             1591*  ; now make the buffer a sound sample
04AEA5 E1          1592*      pop hl ; bufferId
04AEA6 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04AEA7             1594*      ; push hl ; bufferId
04AEA7 CD 2D 01 04 1595*  	call vdu_buffer_to_sound
04AEAB             1596*  ; ; play the loaded sound
04AEAB             1597*  ;     ld c,0 ; channel
04AEAB             1598*  ;     ld b,127 ; full volume
04AEAB             1599*  ;     ld de,1000 ; 1 second duration
04AEAB             1600*  ;     pop hl ; bufferId
04AEAB             1601*  ;     call vdu_play_sample
04AEAB C9          1602*      ret
04AEAC             0025       include "src/asm/functions.asm"
04AEAC             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04AEAC             0002*  ; Print a zero-terminated string
04AEAC             0003*  ; HL: Pointer to string
04AEAC             0004*  printString:
04AEAC C5          0005*  	PUSH	BC
04AEAD 01 00 00 00 0006*  	LD		BC,0
04AEB1 3E 00       0007*  	LD 	 	A,0
04AEB3 5B DF       0008*  	RST.LIL 18h
04AEB5 C1          0009*  	POP		BC
04AEB6 C9          0010*  	RET
04AEB7             0011*  ; print a VDU sequence
04AEB7             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04AEB7             0013*  sendVDUsequence:
04AEB7 C5          0014*  	PUSH	BC
04AEB8 01 00 00 00 0015*  	LD		BC, 0
04AEBC 4E          0016*  	LD		C, (HL)
04AEBD 5B DF       0017*  	RST.LIL	18h
04AEBF C1          0018*  	POP		BC
04AEC0 C9          0019*  	RET
04AEC1             0020*  ; Print Newline sequence to VDP
04AEC1             0021*  printNewLine:
04AEC1 3E 0D       0022*  	LD	A, '\r'
04AEC3 5B D7       0023*  	RST.LIL 10h
04AEC5 3E 0A       0024*  	LD	A, '\n'
04AEC7 5B D7       0025*  	RST.LIL 10h
04AEC9 C9          0026*  	RET
04AECA             0027*  ; Print a 24-bit HEX number
04AECA             0028*  ; HLU: Number to print
04AECA             0029*  printHex24:
04AECA E5          0030*  	PUSH	HL
04AECB 21 02 00 00 0031*  	LD		HL, 2
04AECF 39          0032*  	ADD		HL, SP
04AED0 7E          0033*  	LD		A, (HL)
04AED1 E1          0034*  	POP		HL
04AED2 CD DC AE 04 0035*  	CALL	printHex8
04AED6             0036*  ; Print a 16-bit HEX number
04AED6             0037*  ; HL: Number to print
04AED6             0038*  printHex16:
04AED6 7C          0039*  	LD		A,H
04AED7 CD DC AE 04 0040*  	CALL	printHex8
04AEDB 7D          0041*  	LD		A,L
04AEDC             0042*  ; Print an 8-bit HEX number
04AEDC             0043*  ; A: Number to print
04AEDC             0044*  printHex8:
04AEDC 4F          0045*  	LD		C,A
04AEDD 1F          0046*  	RRA
04AEDE 1F          0047*  	RRA
04AEDF 1F          0048*  	RRA
04AEE0 1F          0049*  	RRA
04AEE1 CD E6 AE 04 0050*  	CALL	@F
04AEE5 79          0051*  	LD		A,C
04AEE6             0052*  @@:
04AEE6 E6 0F       0053*  	AND		0Fh
04AEE8 C6 90       0054*  	ADD		A,90h
04AEEA 27          0055*  	DAA
04AEEB CE 40       0056*  	ADC		A,40h
04AEED 27          0057*  	DAA
04AEEE 5B D7       0058*  	RST.LIL	10h
04AEF0 C9          0059*  	RET
04AEF1             0060*  
04AEF1             0061*  ; Print a 0x HEX prefix
04AEF1             0062*  DisplayHexPrefix:
04AEF1 3E 30       0063*  	LD	A, '0'
04AEF3 5B D7       0064*  	RST.LIL 10h
04AEF5 3E 78       0065*  	LD	A, 'x'
04AEF7 5B D7       0066*  	RST.LIL 10h
04AEF9 C9          0067*  	RET
04AEFA             0068*  
04AEFA             0069*  
04AEFA             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04AEFA             0071*  ; HL : Value to print
04AEFA             0072*  printDec:
04AEFA 11 1E AF 04 0073*  	LD	 DE, _printDecBuffer
04AEFE CD 27 AF 04 0074*  	CALL Num2String
04AF02             0075*  ; BEGIN MY CODE
04AF02             0076*  ; replace leading zeroes with spaces
04AF02 21 1E AF 04 0077*      LD	 HL, _printDecBuffer
04AF06 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04AF08             0079*  @loop:
04AF08 7E          0080*      LD	 A, (HL)
04AF09 FE 30       0081*      CP	 '0'
04AF0B C2 19 AF 04 0082*      JP	 NZ, @done
04AF0F 3E 20       0083*      LD   A, ' '
04AF11 77          0084*      LD	 (HL), A
04AF12 23          0085*      INC	 HL
04AF13 CD 9E A8 04 0086*      CALL vdu_cursor_forward
04AF17 10 EF       0087*      DJNZ @loop
04AF19             0088*  @done:
04AF19             0089*  ; END MY CODE
04AF19             0090*  	; LD	 HL, _printDecBuffer
04AF19 CD AC AE 04 0091*  	CALL printString
04AF1D C9          0092*  	RET
04AF1E 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04AF27             0094*  
04AF27             0095*  ; This routine converts the value from HL into it's ASCII representation,
04AF27             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04AF27             0097*  ; so it will allways be 8 characters length
04AF27             0098*  ; HL : Value to convert to string
04AF27             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04AF27             0100*  Num2String:
04AF27 01 80 69 67 0101*  	LD	 BC,-10000000
04AF2B CD 5E AF 04 0102*  	CALL OneDigit
04AF2F 01 C0 BD F0 0103*  	LD	 BC,-1000000
04AF33 CD 5E AF 04 0104*  	CALL OneDigit
04AF37 01 60 79 FE 0105*  	LD	 BC,-100000
04AF3B CD 5E AF 04 0106*  	CALL OneDigit
04AF3F 01 F0 D8 FF 0107*  	LD   BC,-10000
04AF43 CD 5E AF 04 0108*  	CALL OneDigit
04AF47 01 18 FC FF 0109*  	LD   BC,-1000
04AF4B CD 5E AF 04 0110*  	CALL OneDigit
04AF4F 01 9C FF FF 0111*  	LD   BC,-100
04AF53 CD 5E AF 04 0112*  	CALL OneDigit
04AF57 0E F6       0113*  	LD   C,-10
04AF59 CD 5E AF 04 0114*  	CALL OneDigit
04AF5D 48          0115*  	LD   C,B
04AF5E             0116*  OneDigit:
04AF5E 3E 2F       0117*  	LD   A,'0'-1
04AF60             0118*  DivideMe:
04AF60 3C          0119*  	INC  A
04AF61 09          0120*  	ADD  HL,BC
04AF62 38 FC       0121*  	JR   C,DivideMe
04AF64 ED 42       0122*  	SBC  HL,BC
04AF66 12          0123*  	LD   (DE),A
04AF67 13          0124*  	INC  DE
04AF68 C9          0125*  	RET
04AF69             0126*  
04AF69             0127*  
04AF69             0128*  ; #### new functions added by Brandon R. Gates ####
04AF69             0129*  
04AF69             0130*  ; print the binary representation of the 8-bit value in a
04AF69             0131*  ; destroys a, hl, bc
04AF69             0132*  printBin8:
04AF69 06 08       0133*      ld b,8      ; loop counter for 8 bits
04AF6B 21 86 AF 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04AF6F             0135*                  ; (which will be the high bit of the value in a)
04AF6F             0136*  @loop:
04AF6F 07          0137*      rlca ; put the next highest bit into carry
04AF70 38 04       0138*      jr c,@one
04AF72 36 30       0139*      ld (hl),'0'
04AF74 18 02       0140*      jr @next_bit
04AF76             0141*  @one:
04AF76 36 31       0142*      ld (hl),'1'
04AF78             0143*  @next_bit:
04AF78 23          0144*      inc hl
04AF79 10 F4       0145*      djnz @loop
04AF7B             0146*  ; print it
04AF7B 21 86 AF 04 0147*  	ld hl,@cmd
04AF7F 01 08 00 00 0148*  	ld bc,@end-@cmd
04AF83 5B DF       0149*  	rst.lil $18
04AF85 C9          0150*  	ret
04AF86             0151*  @cmd: ds 8 ; eight bytes for eight bits
04AF8E             0152*  @end:
04AF8E             0153*  
04AF8E             0154*  ; print the binary representation of the 8-bit value in a
04AF8E             0155*  ; in reverse order (lsb first)
04AF8E             0156*  ; destroys a, hl, bc
04AF8E             0157*  printBin8Rev:
04AF8E 06 08       0158*      ld b,8      ; loop counter for 8 bits
04AF90 21 AB AF 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
04AF94             0160*                  ; (which will be the high bit of the value in a)
04AF94             0161*  @loop:
04AF94 0F          0162*      rrca ; put the next lowest bit into carry
04AF95 38 04       0163*      jr c,@one
04AF97 36 30       0164*      ld (hl),'0'
04AF99 18 02       0165*      jr @next_bit
04AF9B             0166*  @one:
04AF9B 36 31       0167*      ld (hl),'1'
04AF9D             0168*  @next_bit:
04AF9D 23          0169*      inc hl
04AF9E 10 F4       0170*      djnz @loop
04AFA0             0171*  ; print it
04AFA0 21 AB AF 04 0172*  	ld hl,@cmd
04AFA4 01 08 00 00 0173*  	ld bc,@end-@cmd
04AFA8 5B DF       0174*  	rst.lil $18
04AFAA C9          0175*  	ret
04AFAB             0176*  @cmd: ds 8 ; eight bytes for eight bits
04AFB3             0177*  @end:
04AFB3             0178*  
04AFB3             0179*  ; print registers to screen in hexidecimal format
04AFB3             0180*  ; inputs: none
04AFB3             0181*  ; outputs: values of every register printed to screen
04AFB3             0182*  ;    values of each register in global scratch memory
04AFB3             0183*  ; destroys: nothing
04AFB3             0184*  stepRegistersHex:
04AFB3             0185*  ; store everything in scratch
04AFB3 22 B6 B1 04 0186*      ld (uhl),hl
04AFB7 ED 43 B9 B1 0187*      ld (ubc),bc
       04          
04AFBC ED 53 BC B1 0188*      ld (ude),de
       04          
04AFC1 DD 22 BF B1 0189*      ld (uix),ix
       04          
04AFC6 FD 22 C2 B1 0190*      ld (uiy),iy
       04          
04AFCB F5          0191*      push af ; fml
04AFCC E1          0192*      pop hl  ; thanks, zilog
04AFCD 22 B3 B1 04 0193*      ld (uaf),hl
04AFD1 F5          0194*      push af ; dammit
04AFD2             0195*  
04AFD2             0196*  ; home the cursor
04AFD2 CD E5 A9 04 0197*      call vdu_home_cursor
04AFD6             0198*  
04AFD6             0199*  ; print each register
04AFD6 21 3F B1 04 0200*      ld hl,str_afu
04AFDA CD AC AE 04 0201*      call printString
04AFDE 2A B3 B1 04 0202*      ld hl,(uaf)
04AFE2 CD CA AE 04 0203*      call printHex24
04AFE6 CD C1 AE 04 0204*      call printNewLine
04AFEA             0205*  
04AFEA 21 43 B1 04 0206*      ld hl,str_hlu
04AFEE CD AC AE 04 0207*      call printString
04AFF2 2A B6 B1 04 0208*      ld hl,(uhl)
04AFF6 CD CA AE 04 0209*      call printHex24
04AFFA CD C1 AE 04 0210*      call printNewLine
04AFFE             0211*  
04AFFE 21 47 B1 04 0212*      ld hl,str_bcu
04B002 CD AC AE 04 0213*      call printString
04B006 2A B9 B1 04 0214*      ld hl,(ubc)
04B00A CD CA AE 04 0215*      call printHex24
04B00E CD C1 AE 04 0216*      call printNewLine
04B012             0217*  
04B012 21 4B B1 04 0218*      ld hl,str_deu
04B016 CD AC AE 04 0219*      call printString
04B01A 2A BC B1 04 0220*      ld hl,(ude)
04B01E CD CA AE 04 0221*      call printHex24
04B022 CD C1 AE 04 0222*      call printNewLine
04B026             0223*  
04B026 21 4F B1 04 0224*      ld hl,str_ixu
04B02A CD AC AE 04 0225*      call printString
04B02E 2A BF B1 04 0226*      ld hl,(uix)
04B032 CD CA AE 04 0227*      call printHex24
04B036 CD C1 AE 04 0228*      call printNewLine
04B03A             0229*  
04B03A 21 53 B1 04 0230*      ld hl,str_iyu
04B03E CD AC AE 04 0231*      call printString
04B042 2A C2 B1 04 0232*      ld hl,(uiy)
04B046 CD CA AE 04 0233*      call printHex24
04B04A CD C1 AE 04 0234*      call printNewLine
04B04E             0235*  
04B04E             0236*      ; call vsync
04B04E             0237*  
04B04E CD C1 AE 04 0238*      call printNewLine
04B052             0239*  
04B052             0240*  ; check for right shift key and quit if pressed
04B052             0241*  	MOSCALL mos_getkbmap
04B052 3E 1E       0001*M 			LD	A, function
04B054 5B CF       0002*M 			RST.LIL	08h
04B056             0242*  @stayhere:
04B056             0243*  ; 7 RightShift
04B056 DD CB 00 76 0244*      bit 6,(ix+0)
04B05A 20 02       0245*      jr nz,@RightShift
04B05C 18 F8       0246*      jr @stayhere
04B05E             0247*  @RightShift:
04B05E DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
04B062 3E 80       0249*      ld a,%10000000
04B064 CD 56 C1 04 0250*      call multiPurposeDelay
04B068             0251*  
04B068             0252*  ; restore everything
04B068 2A B6 B1 04 0253*      ld hl, (uhl)
04B06C ED 4B B9 B1 0254*      ld bc, (ubc)
       04          
04B071 ED 5B BC B1 0255*      ld de, (ude)
       04          
04B076 DD 2A BF B1 0256*      ld ix, (uix)
       04          
04B07B FD 2A C2 B1 0257*      ld iy, (uiy)
       04          
04B080 F1          0258*      pop af
04B081             0259*  ; all done
04B081 C9          0260*      ret
04B082             0261*  
04B082             0262*  ; print registers to screen in hexidecimal format
04B082             0263*  ; inputs: none
04B082             0264*  ; outputs: values of every register printed to screen
04B082             0265*  ;    values of each register in global scratch memory
04B082             0266*  ; destroys: nothing
04B082             0267*  dumpRegistersHex:
04B082             0268*  ; store everything in scratch
04B082 22 B6 B1 04 0269*      ld (uhl),hl
04B086 ED 43 B9 B1 0270*      ld (ubc),bc
       04          
04B08B ED 53 BC B1 0271*      ld (ude),de
       04          
04B090 DD 22 BF B1 0272*      ld (uix),ix
       04          
04B095 FD 22 C2 B1 0273*      ld (uiy),iy
       04          
04B09A F5          0274*      push af ; fml
04B09B E1          0275*      pop hl  ; thanks, zilog
04B09C 22 B3 B1 04 0276*      ld (uaf),hl
04B0A0 F5          0277*      push af ; dammit
04B0A1             0278*  
04B0A1             0279*  ; home the cursor
04B0A1 CD E5 A9 04 0280*      call vdu_home_cursor
04B0A5             0281*  
04B0A5             0282*  ; print each register
04B0A5 21 3F B1 04 0283*      ld hl,str_afu
04B0A9 CD AC AE 04 0284*      call printString
04B0AD 2A B3 B1 04 0285*      ld hl,(uaf)
04B0B1 CD CA AE 04 0286*      call printHex24
04B0B5 CD C1 AE 04 0287*      call printNewLine
04B0B9             0288*  
04B0B9 21 43 B1 04 0289*      ld hl,str_hlu
04B0BD CD AC AE 04 0290*      call printString
04B0C1 2A B6 B1 04 0291*      ld hl,(uhl)
04B0C5 CD CA AE 04 0292*      call printHex24
04B0C9 CD C1 AE 04 0293*      call printNewLine
04B0CD             0294*  
04B0CD 21 47 B1 04 0295*      ld hl,str_bcu
04B0D1 CD AC AE 04 0296*      call printString
04B0D5 2A B9 B1 04 0297*      ld hl,(ubc)
04B0D9 CD CA AE 04 0298*      call printHex24
04B0DD CD C1 AE 04 0299*      call printNewLine
04B0E1             0300*  
04B0E1 21 4B B1 04 0301*      ld hl,str_deu
04B0E5 CD AC AE 04 0302*      call printString
04B0E9 2A BC B1 04 0303*      ld hl,(ude)
04B0ED CD CA AE 04 0304*      call printHex24
04B0F1 CD C1 AE 04 0305*      call printNewLine
04B0F5             0306*  
04B0F5 21 4F B1 04 0307*      ld hl,str_ixu
04B0F9 CD AC AE 04 0308*      call printString
04B0FD 2A BF B1 04 0309*      ld hl,(uix)
04B101 CD CA AE 04 0310*      call printHex24
04B105 CD C1 AE 04 0311*      call printNewLine
04B109             0312*  
04B109 21 53 B1 04 0313*      ld hl,str_iyu
04B10D CD AC AE 04 0314*      call printString
04B111 2A C2 B1 04 0315*      ld hl,(uiy)
04B115 CD CA AE 04 0316*      call printHex24
04B119 CD C1 AE 04 0317*      call printNewLine
04B11D             0318*  
04B11D CD 07 AB 04 0319*      call vdu_vblank
04B121             0320*  
04B121 CD C1 AE 04 0321*      call printNewLine
04B125             0322*  ; restore everything
04B125 2A B6 B1 04 0323*      ld hl, (uhl)
04B129 ED 4B B9 B1 0324*      ld bc, (ubc)
       04          
04B12E ED 5B BC B1 0325*      ld de, (ude)
       04          
04B133 DD 2A BF B1 0326*      ld ix, (uix)
       04          
04B138 FD 2A C2 B1 0327*      ld iy, (uiy)
       04          
04B13D F1          0328*      pop af
04B13E             0329*  ; all done
04B13E C9          0330*      ret
04B13F             0331*  
04B13F 61 66 3D 00 0332*  str_afu: db "af=",0
04B143 68 6C 3D 00 0333*  str_hlu: db "hl=",0
04B147 62 63 3D 00 0334*  str_bcu: db "bc=",0
04B14B 64 65 3D 00 0335*  str_deu: db "de=",0
04B14F 69 78 3D 00 0336*  str_ixu: db "ix=",0
04B153 69 79 3D 00 0337*  str_iyu: db "iy=",0
04B157             0338*  
04B157             0339*  ; print udeuhl to screen in hexidecimal format
04B157             0340*  ; inputs: none
04B157             0341*  ; outputs: concatenated hexidecimal udeuhl
04B157             0342*  ; destroys: nothing
04B157             0343*  dumpUDEUHLHex:
04B157             0344*  ; store everything in scratch
04B157 22 B6 B1 04 0345*      ld (uhl),hl
04B15B ED 43 B9 B1 0346*      ld (ubc),bc
       04          
04B160 ED 53 BC B1 0347*      ld (ude),de
       04          
04B165 DD 22 BF B1 0348*      ld (uix),ix
       04          
04B16A FD 22 C2 B1 0349*      ld (uiy),iy
       04          
04B16F F5          0350*      push af
04B170             0351*  
04B170             0352*  ; print each register
04B170             0353*  
04B170 21 AA B1 04 0354*      ld hl,str_udeuhl
04B174 CD AC AE 04 0355*      call printString
04B178 2A BC B1 04 0356*      ld hl,(ude)
04B17C CD CA AE 04 0357*      call printHex24
04B180 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
04B182 5B D7       0359*  	rst.lil 10h
04B184 2A B6 B1 04 0360*      ld hl,(uhl)
04B188 CD CA AE 04 0361*      call printHex24
04B18C CD C1 AE 04 0362*      call printNewLine
04B190             0363*  
04B190             0364*  ; restore everything
04B190 2A B6 B1 04 0365*      ld hl, (uhl)
04B194 ED 4B B9 B1 0366*      ld bc, (ubc)
       04          
04B199 ED 5B BC B1 0367*      ld de, (ude)
       04          
04B19E DD 2A BF B1 0368*      ld ix, (uix)
       04          
04B1A3 FD 2A C2 B1 0369*      ld iy, (uiy)
       04          
04B1A8 F1          0370*      pop af
04B1A9             0371*  ; all done
04B1A9 C9          0372*      ret
04B1AA             0373*  
04B1AA 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04B1B3             0375*  
04B1B3             0376*  ; global scratch memory for registers
04B1B3 00 00 00    0377*  uaf: dl 0
04B1B6 00 00 00    0378*  uhl: dl 0
04B1B9 00 00 00    0379*  ubc: dl 0
04B1BC 00 00 00    0380*  ude: dl 0
04B1BF 00 00 00    0381*  uix: dl 0
04B1C2 00 00 00    0382*  uiy: dl 0
04B1C5 00 00 00    0383*  usp: dl 0
04B1C8 00 00 00    0384*  upc: dl 0
04B1CB             0385*  
04B1CB             0386*  ; inputs: whatever is in the flags register
04B1CB             0387*  ; outputs: binary representation of flags
04B1CB             0388*  ;          with a header so we know which is what
04B1CB             0389*  ; destroys: nothing
04B1CB             0390*  ; preserves: everything
04B1CB             0391*  dumpFlags:
04B1CB             0392*  ; first we curse zilog for not giving direct access to flags
04B1CB F5          0393*      push af ; this is so we can send it back unharmed
04B1CC F5          0394*      push af ; this is so we can pop it to hl
04B1CD             0395*  ; store everything in scratch
04B1CD 22 B6 B1 04 0396*      ld (uhl),hl
04B1D1 ED 43 B9 B1 0397*      ld (ubc),bc
       04          
04B1D6 ED 53 BC B1 0398*      ld (ude),de
       04          
04B1DB DD 22 BF B1 0399*      ld (uix),ix
       04          
04B1E0 FD 22 C2 B1 0400*      ld (uiy),iy
       04          
04B1E5             0401*  ; next we print the header
04B1E5 21 11 B2 04 0402*      ld hl,@header
04B1E9 CD AC AE 04 0403*      call printString
04B1ED E1          0404*      pop hl ; flags are now in l
04B1EE 7D          0405*      ld a,l ; flags are now in a
04B1EF CD 69 AF 04 0406*      call printBin8
04B1F3 CD C1 AE 04 0407*  	call printNewLine
04B1F7             0408*  ; restore everything
04B1F7 2A B6 B1 04 0409*      ld hl, (uhl)
04B1FB ED 4B B9 B1 0410*      ld bc, (ubc)
       04          
04B200 ED 5B BC B1 0411*      ld de, (ude)
       04          
04B205 DD 2A BF B1 0412*      ld ix, (uix)
       04          
04B20A FD 2A C2 B1 0413*      ld iy, (uiy)
       04          
04B20F F1          0414*      pop af ; send her home the way she came
04B210 C9          0415*      ret
04B211             0416*  ; Bit 7 (S): Sign flag
04B211             0417*  ; Bit 6 (Z): Zero flag
04B211             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04B211             0419*  ; Bit 4 (H): Half Carry flag
04B211             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04B211             0421*  ; Bit 2 (PV): Parity/Overflow flag
04B211             0422*  ; Bit 1 (N): Subtract flag
04B211             0423*  ; Bit 0 (C): Carry flag
04B211 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04B21C             0425*  
04B21C             0426*  ; set all the bits in the flag register
04B21C             0427*  ; more of an academic exercise than anything useful
04B21C             0428*  ; inputs; none
04B21C             0429*  ; outputs; a=0,f=255
04B21C             0430*  ; destroys: flags, hl
04B21C             0431*  ; preserves: a, because why not
04B21C             0432*  setAllFlags:
04B21C 21 FF 00 00 0433*      ld hl,255
04B220 67          0434*      ld h,a ; four cycles to preserve a is cheap
04B221 E5          0435*      push hl
04B222 F1          0436*      pop af
04B223 C9          0437*      ret
04B224             0438*  
04B224             0439*  ; reset all the bits in the flag register
04B224             0440*  ; unlike its inverse counterpart, this may actually be useful
04B224             0441*  ; inputs; none
04B224             0442*  ; outputs; a=0,f=0
04B224             0443*  ; destroys: flags, hl
04B224             0444*  ; preserves: a, because why not
04B224             0445*  resetAllFlags:
04B224 21 00 00 00 0446*      ld hl,0
04B228 67          0447*      ld h,a ; four cycles to preserve a is cheap
04B229 E5          0448*      push hl
04B22A F1          0449*      pop af
04B22B C9          0450*      ret
04B22C             0451*  
04B22C             0452*  ; wait until user presses a key
04B22C             0453*  ; inputs: none
04B22C             0454*  ; outputs: none
04B22C             0455*  ; destroys: af,ix
04B22C             0456*  waitKeypress:
04B22C             0457*      MOSCALL mos_sysvars
04B22C 3E 08       0001*M 			LD	A, function
04B22E 5B CF       0002*M 			RST.LIL	08h
04B230 AF          0458*      xor a ; zero out any prior keypresses
04B231 DD 77 05    0459*      ld (ix+sysvar_keyascii),a
04B234             0460*  @loop:
04B234 DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
04B237 A7          0462*      and a
04B238 C0          0463*      ret nz
04B239 18 F9       0464*      jr @loop
04B23B             0465*  
04B23B             0466*  
04B23B             0467*  ; print bytes from an address to the screen in hexidecimal format
04B23B             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B23B             0469*  ; outputs: values of each byte printed to screen separated by spaces
04B23B             0470*  ; destroys: nothing
04B23B             0471*  dumpMemoryHex:
04B23B             0472*  ; save all registers to the stack
04B23B F5          0473*      push af
04B23C C5          0474*      push bc
04B23D D5          0475*      push de
04B23E E5          0476*      push hl
04B23F DD E5       0477*      push ix
04B241 FD E5       0478*      push iy
04B243             0479*  
04B243             0480*  ; set b to be our loop counter
04B243 47          0481*      ld b,a
04B244             0482*  @loop:
04B244             0483*  ; print the byte
04B244 7E          0484*      ld a,(hl)
04B245 CD DC AE 04 0485*      call printHex8
04B249             0486*  ; print a space
04B249 3E 20       0487*      ld a,' '
04B24B 5B D7       0488*      rst.lil 10h
04B24D 23          0489*      inc hl
04B24E 10 F4       0490*      djnz @loop
04B250 CD C1 AE 04 0491*      call printNewLine
04B254             0492*  
04B254             0493*  ; restore everything
04B254 FD E1       0494*      pop iy
04B256 DD E1       0495*      pop ix
04B258 E1          0496*      pop hl
04B259 D1          0497*      pop de
04B25A C1          0498*      pop bc
04B25B F1          0499*      pop af
04B25C             0500*  ; all done
04B25C C9          0501*      ret
04B25D             0502*  
04B25D             0503*  
04B25D             0504*  ; print bytes from an address to the screen in binary format
04B25D             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B25D             0506*  ; outputs: values of each byte printed to screen separated by spaces
04B25D             0507*  ; destroys: nothing
04B25D             0508*  dumpMemoryBin:
04B25D             0509*  ; save all registers to the stack
04B25D F5          0510*      push af
04B25E C5          0511*      push bc
04B25F D5          0512*      push de
04B260 E5          0513*      push hl
04B261 DD E5       0514*      push ix
04B263 FD E5       0515*      push iy
04B265             0516*  
04B265             0517*  ; set b to be our loop counter
04B265 47          0518*      ld b,a
04B266             0519*  @loop:
04B266             0520*  ; print the byte
04B266 7E          0521*      ld a,(hl)
04B267 E5          0522*      push hl
04B268 C5          0523*      push bc
04B269 CD 69 AF 04 0524*      call printBin8
04B26D C1          0525*      pop bc
04B26E             0526*  ; print a space
04B26E 3E 20       0527*      ld a,' '
04B270 5B D7       0528*      rst.lil 10h
04B272 E1          0529*      pop hl
04B273 23          0530*      inc hl
04B274 10 F0       0531*      djnz @loop
04B276 CD C1 AE 04 0532*      call printNewLine
04B27A             0533*  
04B27A             0534*  ; restore everything
04B27A FD E1       0535*      pop iy
04B27C DD E1       0536*      pop ix
04B27E E1          0537*      pop hl
04B27F D1          0538*      pop de
04B280 C1          0539*      pop bc
04B281 F1          0540*      pop af
04B282             0541*  ; all done
04B282 C9          0542*      ret
04B283             0543*  
04B283             0544*  ; print bytes from an address to the screen in binary format
04B283             0545*  ; with the bits of each byte in reverse order (lsb first)
04B283             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B283             0547*  ; outputs: values of each byte printed to screen separated by spaces
04B283             0548*  ; destroys: nothing
04B283             0549*  dumpMemoryBinRev:
04B283             0550*  ; save all registers to the stack
04B283 F5          0551*      push af
04B284 C5          0552*      push bc
04B285 D5          0553*      push de
04B286 E5          0554*      push hl
04B287 DD E5       0555*      push ix
04B289 FD E5       0556*      push iy
04B28B             0557*  
04B28B             0558*  ; set b to be our loop counter
04B28B 47          0559*      ld b,a
04B28C             0560*  @loop:
04B28C             0561*  ; print the byte
04B28C 7E          0562*      ld a,(hl)
04B28D E5          0563*      push hl
04B28E C5          0564*      push bc
04B28F CD 8E AF 04 0565*      call printBin8Rev
04B293 C1          0566*      pop bc
04B294             0567*  ; print a space
04B294 3E 20       0568*      ld a,' '
04B296 5B D7       0569*      rst.lil 10h
04B298 E1          0570*      pop hl
04B299 23          0571*      inc hl
04B29A 10 F0       0572*      djnz @loop
04B29C CD C1 AE 04 0573*      call printNewLine
04B2A0             0574*  
04B2A0             0575*  ; restore everything
04B2A0 FD E1       0576*      pop iy
04B2A2 DD E1       0577*      pop ix
04B2A4 E1          0578*      pop hl
04B2A5 D1          0579*      pop de
04B2A6 C1          0580*      pop bc
04B2A7 F1          0581*      pop af
04B2A8             0582*  ; all done
04B2A8 C9          0583*      ret
04B2A9             0026   	include "src/asm/player.asm"
04B2A9             0001*  ; ######## GAME STATE VARIABLES #######
04B2A9             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04B2A9 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04B2AC             0004*  ; player current health,binary
04B2AC             0005*  ; when < 0 player splodes
04B2AC             0006*  ; restores to plyr_max_health when new ship spawns
04B2AC 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04B2AF             0008*  ; max player health,binary
04B2AF             0009*  ; can increase with power-ups (todo)
04B2AF 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04B2B2             0011*  ; when reaches zero,game ends
04B2B2             0012*  ; can increase based on TODO
04B2B2 03 00 00    0013*  plyr_lives: dl 3 ; binary
04B2B5             0014*  
04B2B5             0015*  ; ######### Player Variables ##########
04B2B5             0016*  ; player position on the map and orientation
04B2B5 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B2B6 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B2B7 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04B2B8 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B2B9 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B2BA 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04B2BB 00          0023*  cur_x: db 0x00
04B2BC 00          0024*  cur_y: db 0x00
04B2BD 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04B2BE 00          0026*  xvel:  db 0x00
04B2BF 00          0027*  yvel:  db 0x00
04B2C0 00          0028*         db 0x00 ; padding
04B2C1 00          0029*  dy:    db 0x00
04B2C2 00          0030*  dx:    db 0x00
04B2C3 00          0031*         db 0x00 ; padding
04B2C4 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04B2C5             0033*  
04B2C5 00          0034*  plyr_shot_x:      db 0x00
04B2C6 00          0035*  plyr_shot_y:      db 0x00
04B2C7 00          0036*                      db 0x00 ; padding
04B2C8 00          0037*  plyr_shot_xvel:   db 0x00
04B2C9 00          0038*  plyr_shot_yvel:   db 0x00
04B2CA 00          0039*                      db 0x00 ; padding
04B2CB FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04B2CC 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04B2CF 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04B2D0             0043*  
04B2D0 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04B2D1 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04B2D2             0046*  plyr_wpn_knife: equ %00000001
04B2D2             0047*  plyr_wpn_pistol: equ %00000010
04B2D2             0048*  plyr_wpn_mg: equ %00000100
04B2D2             0049*  plyr_wpn_gg: equ %00001000
04B2D2 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04B2D3 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04B2D6 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04B2D9             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04B2DF             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04B2E5 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04B2E8             0056*  
04B2E8             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04B2E8 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04B2EB             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04B2EB             0060*  
04B2EB             0061*  
04B2EB 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04B2EE             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04B2F6 00          0064*                   db 0 ; string terminator
04B2F7             0065*  
04B2F7             0066*  ; ######### PLAYER CONSTANTS ##########
04B2F7             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04B2F7             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04B2FD             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04B2FD             0070*  
04B2FD             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04B2FD             0072*  ; uses the same offsets from its table base as the main sprite table:
04B2FD             0073*  plyr_start_variables: ; label marking beginning of table
04B2FD 40          0074*  plyr_id:               db table_max_records
04B2FE 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04B2FF 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04B302 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04B305 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04B306 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04B307 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04B308 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04B30B 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04B30E 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04B311 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04B314 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04B317 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04B31A 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04B31D 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04B31E 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04B31F             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04B31F 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04B320 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04B321 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04B322             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04B322             0095*  
04B322             0096*  
04B322             0097*  ; set initial player position
04B322             0098*  ; inputs: none,everything is hardcoded
04B322             0099*  ; outputs: player set to the first valid position on the map
04B322             0100*  ; destroys: a
04B322             0101*  plyr_init:
04B322 CD E2 66 04 0102*      call get_start_pos ; a = cell_id, d = map_y, e = map_x
04B326 32 B7 B2 04 0103*      ld (cur_cell),a
04B32A ED 53 BB B2 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B32F AF          0105*      xor a ; north is default orientation
04B330 3E 03       0106*      ld a,3 ; DEBUG
04B332 32 BA B2 04 0107*      ld (orientation),a
04B336 21 1E 00 00 0108*      ld hl,plyr_move_rate
04B33A FD 21 F7 B2 0109*      ld iy,plyr_move_timer
       04          
04B33F CD 1A C1 04 0110*      call timestamp_tmr_set
04B343 3E 03       0111*      ld a,3
04B345 32 B2 B2 04 0112*      ld (plyr_lives),a
04B349 3E 64       0113*      ld a,100
04B34B 32 AC B2 04 0114*      ld (plyr_health),a
04B34F 3E 08       0115*      ld a,8
04B351 32 EB B2 04 0116*      ld (plyr_ammo),a
04B355 3E 01       0117*      ld a,plyr_wpn_knife
04B357 F6 02       0118*      or plyr_wpn_pistol
04B359 32 D0 B2 04 0119*      ld (plyr_wpns),a
04B35D 3E 01       0120*      ld a,plyr_wpn_knife
04B35F 32 D1 B2 04 0121*      ld (plyr_wpn_active),a
04B363 CD C1 B3 04 0122*      call plyr_set_weapon_parameters
04B367 FD 21 D9 B2 0123*      ld iy,plyr_wpn_select_tmr
       04          
04B36C 21 00 00 00 0124*      ld hl,0
04B370 CD 1A C1 04 0125*      call timestamp_tmr_set
04B374 C9          0126*      ret
04B375             0127*  
04B375             0128*  plyr_next_weapon:
04B375             0129*  ; check if select weapons timer has expired
04B375 FD 21 D9 B2 0130*      ld iy,plyr_wpn_select_tmr
       04          
04B37A CD 25 C1 04 0131*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B37E F0          0132*      ret p ; time left on timer so no weapon select
04B37F             0133*  ; reset weapon select timer
04B37F 21 14 00 00 0134*      ld hl,120/6 ; 1/6 second
04B383 CD 1A C1 04 0135*      call timestamp_tmr_set
04B387             0136*  ; select next weapon
04B387 21 D0 B2 04 0137*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B38B ED 07       0138*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B38D             0139*  @loop:
04B38D 3A D1 B2 04 0140*      ld a,(plyr_wpn_active)
04B391 07          0141*      rlca ; rotate left
04B392 32 D1 B2 04 0142*      ld (plyr_wpn_active),a
04B396 A6          0143*      and (hl) ; check inventory mask
04B397 28 F4       0144*      jr z,@loop
04B399 C3 C1 B3 04 0145*      jp plyr_set_weapon_parameters
04B39D             0146*  
04B39D             0147*  plyr_previous_weapon:
04B39D             0148*  ; check if select weapons timer has expired
04B39D FD 21 D9 B2 0149*      ld iy,plyr_wpn_select_tmr
       04          
04B3A2 CD 25 C1 04 0150*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B3A6 F0          0151*      ret p ; time left on timer so no weapon select
04B3A7             0152*  ; reset weapon select timer
04B3A7 21 14 00 00 0153*      ld hl,120/6 ; 1/6 second
04B3AB CD 1A C1 04 0154*      call timestamp_tmr_set
04B3AF             0155*  ; select next weapon
04B3AF 21 D0 B2 04 0156*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04B3B3 ED 07       0157*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04B3B5             0158*  @loop:
04B3B5 3A D1 B2 04 0159*      ld a,(plyr_wpn_active)
04B3B9 0F          0160*      rrca ; rotate right
04B3BA 32 D1 B2 04 0161*      ld (plyr_wpn_active),a
04B3BE A6          0162*      and (hl) ; check inventory mask
04B3BF 28 F4       0163*      jr z,@loop
04B3C1             0164*      ; fall through to plyr_set_weapon_parameters
04B3C1             0165*  
04B3C1             0166*  plyr_set_weapon_parameters:
04B3C1 FE 01       0167*      cp %00000001 ; knife
04B3C3 CA DA B3 04 0168*      jp z,@knife
04B3C7 FE 02       0169*      cp %00000010 ; pistol
04B3C9 CA 02 B4 04 0170*      jp z,@pistol
04B3CD FE 04       0171*      cp %00000100 ; machine gun
04B3CF CA 2A B4 04 0172*      jp z,@machine_gun
04B3D3 FE 08       0173*      cp %00001000 ; gatling gun
04B3D5 CA 52 B4 04 0174*      jp z,@gatling_gun
04B3D9 C9          0175*      ret ; if none of the above do nothing
04B3DA             0176*  @knife:
04B3DA 21 05 21 00 0177*      ld hl,BUF_UI_BJ_KNIFE_00
04B3DE 22 D6 B2 04 0178*      ld (plyr_wpn_ui_lg),hl
04B3E2 21 03 20 00 0179*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04B3E6 22 D3 B2 04 0180*      ld (plyr_wpn_ui_sm),hl
04B3EA 3E 14       0181*      ld a,20 ; dps = 60
04B3EC 32 D2 B2 04 0182*      ld (plyr_wpn_damage),a
04B3F0 21 3C 00 00 0183*      ld hl,120/2 ; 3 times/second
04B3F4 22 E5 B2 04 0184*      ld (plyr_wpn_fire_rate),hl
04B3F8 FD 21 DF B2 0185*      ld iy,plyr_wpn_fire_tmr
       04          
04B3FD CD 1A C1 04 0186*      call timestamp_tmr_set
04B401 C9          0187*      ret
04B402             0188*  @pistol:
04B402 21 0F 21 00 0189*      ld hl,BUF_UI_BJ_PISTOL_00
04B406 22 D6 B2 04 0190*      ld (plyr_wpn_ui_lg),hl
04B40A 21 05 20 00 0191*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04B40E 22 D3 B2 04 0192*      ld (plyr_wpn_ui_sm),hl
04B412             0193*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04B412 3E 1E       0194*      ld a,30 ; damage/burst
04B414 32 D2 B2 04 0195*      ld (plyr_wpn_damage),a
04B418 21 28 00 00 0196*      ld hl,120/3 ; 3 bursts/second
04B41C 22 E5 B2 04 0197*      ld (plyr_wpn_fire_rate),hl
04B420 FD 21 DF B2 0198*      ld iy,plyr_wpn_fire_tmr
       04          
04B425 CD 1A C1 04 0199*      call timestamp_tmr_set
04B429 C9          0200*      ret
04B42A             0201*  @machine_gun:
04B42A 21 0A 21 00 0202*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04B42E 22 D6 B2 04 0203*      ld (plyr_wpn_ui_lg),hl
04B432 21 04 20 00 0204*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04B436 22 D3 B2 04 0205*      ld (plyr_wpn_ui_sm),hl
04B43A             0206*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04B43A 3E 50       0207*      ld a,80 ; damage/burst
04B43C 32 D2 B2 04 0208*      ld (plyr_wpn_damage),a
04B440 21 28 00 00 0209*      ld hl,120/3 ; 3 bursts/second
04B444 22 E5 B2 04 0210*      ld (plyr_wpn_fire_rate),hl
04B448 FD 21 DF B2 0211*      ld iy,plyr_wpn_fire_tmr
       04          
04B44D CD 1A C1 04 0212*      call timestamp_tmr_set
04B451 C9          0213*      ret
04B452             0214*  @gatling_gun:
04B452 21 00 21 00 0215*      ld hl,BUF_UI_BJ_GATLING_00
04B456 22 D6 B2 04 0216*      ld (plyr_wpn_ui_lg),hl
04B45A 21 02 20 00 0217*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04B45E 22 D3 B2 04 0218*      ld (plyr_wpn_ui_sm),hl
04B462             0219*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04B462 3E 78       0220*      ld a,120 ; damage/burst
04B464 32 D2 B2 04 0221*      ld (plyr_wpn_damage),a
04B468 21 28 00 00 0222*      ld hl,120/3 ; 3 bursts/second
04B46C 22 E5 B2 04 0223*      ld (plyr_wpn_fire_rate),hl
04B470 FD 21 DF B2 0224*      ld iy,plyr_wpn_fire_tmr
       04          
04B475 CD 1A C1 04 0225*      call timestamp_tmr_set
04B479 C9          0226*      ret
04B47A             0227*  
04B47A             0228*  ; adds to player's health by a set amount
04B47A             0229*  ; inputs: a is the signed amount to modify health
04B47A             0230*  ; outputs: a will contain amount of health remaining
04B47A             0231*  ;          carry will be set if health maxes out to 255
04B47A             0232*  plyr_add_health:
04B47A 21 AC B2 04 0233*      ld hl,plyr_health
04B47E 86          0234*      add a,(hl)
04B47F D2 85 B4 04 0235*      jp nc,@update ; if we roll over to zero when adding
04B483 3E FF       0236*      ld a,255 ; ... set health remaining to max
04B485             0237*  @update:
04B485 77          0238*      ld (hl),a
04B486 C9          0239*      ret
04B487             0240*  
04B487             0241*  ; subtracts from player's health by a set amount
04B487             0242*  ; inputs: a is the signed amount to modify health
04B487             0243*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04B487             0244*  ;        a contains remaining health
04B487             0245*  plyr_sub_health:
04B487 21 AC B2 04 0246*      ld hl,plyr_health
04B48B 86          0247*      add a,(hl)
04B48C CA 94 B4 04 0248*      jp z,@zero
04B490 DA 99 B4 04 0249*      jp c,@update
04B494             0250*  @zero:
04B494 AF          0251*      xor a ; clear carry, set health to zero
04B495 21 AC B2 04 0252*      ld hl,plyr_health
04B499             0253*  @update:
04B499 77          0254*      ld (hl),a
04B49A C9          0255*      ret
04B49B             0256*  
04B49B             0257*  ; modifies the players score by a set amount
04B49B             0258*  ; inputs: a is the signed amount to modify score
04B49B             0259*  plyr_mod_score:
04B49B 11 00 00 00 0260*      ld de,0 ; make sure deu is zero
04B49F 5F          0261*      ld e,a
04B4A0 2A A9 B2 04 0262*      ld hl,(plyr_score)
04B4A4 19          0263*      add hl,de
04B4A5 22 A9 B2 04 0264*      ld (plyr_score),hl
04B4A9 C9          0265*      ret
04B4AA             0266*  
04B4AA             0267*  ; adds to player's ammo by a set amount
04B4AA             0268*  ; inputs: a is the signed amount to modify ammo
04B4AA             0269*  ; outputs: a will contain amount of ammo remaining
04B4AA             0270*  ;          carry will be set if ammo maxes out to 255
04B4AA             0271*  plyr_add_ammo:
04B4AA 21 EB B2 04 0272*      ld hl,plyr_ammo
04B4AE 86          0273*      add a,(hl)
04B4AF D2 B5 B4 04 0274*      jp nc,@update ; if we roll over to zero when adding
04B4B3 3E FF       0275*      ld a,255 ; ... set ammo remaining to max
04B4B5             0276*  @update:
04B4B5 77          0277*      ld (hl),a
04B4B6 C9          0278*      ret
04B4B7             0279*  
04B4B7             0280*  ; subtracts from player's ammo by a set amount
04B4B7             0281*  ; inputs: a is the signed amount to modify ammo
04B4B7             0282*  ; outputs: carry reset if player was out of ammo before firing
04B4B7             0283*  ;          a will also contain amount of ammo remaining after shot
04B4B7             0284*  plyr_sub_ammo:
04B4B7 21 EB B2 04 0285*      ld hl,plyr_ammo
04B4BB 86          0286*      add a,(hl)
04B4BC DA CF B4 04 0287*      jp c,@update
04B4C0 3E 01       0288*      ld a,%00000001 ; knife
04B4C2 32 D1 B2 04 0289*      ld (plyr_wpn_active),a
04B4C6 CD C1 B3 04 0290*      call plyr_set_weapon_parameters
04B4CA AF          0291*      xor a ; clear carry, set ammo to zero
04B4CB 21 EB B2 04 0292*      ld hl,plyr_ammo
04B4CF             0293*  @update:
04B4CF 77          0294*      ld (hl),a
04B4D0 C9          0295*      ret
04B4D1             0296*  
04B4D1             0297*  plyr_shoot_knife:
04B4D1 CD 18 BF 04 0298*      call sfx_play_knife
04B4D5             0299*      ; check whether the player hit anything
04B4D5 3A BA B2 04 0300*      ld a,(orientation) ; direction knife is moving
04B4D9 5F          0301*      ld e,a
04B4DA 16 01       0302*      ld d,1 ; shot "velocity" in map units
04B4DC CD C7 65 04 0303*      call get_dx_dy ; d,e = dy,dx
04B4E0 ED 53 C8 B2 0304*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B4E5 2A BB B2 04 0305*      ld hl,(cur_x) ; h,l = player y,x
04B4E9 22 C5 B2 04 0306*      ld (plyr_shot_x),hl ; initial shot position
04B4ED ED 5B C8 B2 0307*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B4F2 2A C5 B2 04 0308*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B4F6             0309*      ; bump bullet position one map unit in direction of travel
04B4F6 7D          0310*      ld a,l ; player shot x
04B4F7 83          0311*      add a,e ; add xvel
04B4F8 6F          0312*      ld l,a ; save new x
04B4F9 7C          0313*      ld a,h ; player shot y
04B4FA 82          0314*      add a,d ; add yvel
04B4FB 67          0315*      ld h,a ; save new y
04B4FC 22 C5 B2 04 0316*      ld (plyr_shot_x),hl ; and save that position
04B500 EB          0317*      ex de,hl ; d,e = bullet y,x
04B501 CD A2 65 04 0318*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B505             0319*  ; check whether target cell contains a sprite
04B505 DD 7E 03    0320*      ld a,(ix+map_sprite_id)
04B508 FE FF       0321*      cp 255 ; value if not sprite
04B50A C8          0322*      ret z ; if we hit a non-sprite, we're done
04B50B             0323*  ; is a sprite so run its "hurt" behavior routine
04B50B CD 91 9F 04 0324*      call sprite_set_pointer
04B50F 3E 02       0325*      ld a,sp_hurt
04B511 CD 88 A0 04 0326*      call do_sprite_behavior ; a = sprite behavior return code
04B515 C9          0327*      ret
04B516             0328*  
04B516             0329*  plyr_shoot_pistol:
04B516 3E FF       0330*      ld a,-1
04B518 CD B7 B4 04 0331*      call plyr_sub_ammo
04B51C DA 25 B5 04 0332*      jp c,@shoot
04B520 CD 00 BF 04 0333*      call sfx_play_gun_empty
04B524 C9          0334*      ret
04B525             0335*  @shoot:
04B525 CD 6C BF 04 0336*      call sfx_play_shot_pistol
04B529 C3 5B B5 04 0337*      jp plyr_move_bullet
04B52D             0338*  
04B52D             0339*  plyr_shoot_machine_gun:
04B52D 3E FC       0340*      ld a,-4
04B52F CD B7 B4 04 0341*      call plyr_sub_ammo
04B533 DA 3C B5 04 0342*      jp c,@shoot
04B537 CD 00 BF 04 0343*      call sfx_play_gun_empty
04B53B C9          0344*      ret
04B53C             0345*  @shoot:
04B53C CD 60 BF 04 0346*      call sfx_play_shot_machine_gun_burst
04B540 C3 5B B5 04 0347*      jp plyr_move_bullet
04B544             0348*  
04B544             0349*  plyr_shoot_gatling_gun:
04B544 3E F8       0350*      ld a,-8
04B546 CD B7 B4 04 0351*      call plyr_sub_ammo
04B54A DA 53 B5 04 0352*      jp c,@shoot
04B54E CD 00 BF 04 0353*      call sfx_play_gun_empty
04B552 C9          0354*      ret
04B553             0355*  @shoot:
04B553 CD 54 BF 04 0356*      call sfx_play_shot_gatling_burst
04B557 C3 5B B5 04 0357*      jp plyr_move_bullet
04B55B             0358*  
04B55B             0359*  plyr_move_bullet:
04B55B             0360*      ; check whether the player hit anything
04B55B 3A BA B2 04 0361*      ld a,(orientation) ; direction shot is moving
04B55F 32 CB B2 04 0362*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04B563 5F          0363*      ld e,a
04B564 16 01       0364*      ld d,1 ; shot "velocity" in map units
04B566 CD C7 65 04 0365*      call get_dx_dy ; d,e = dy,dx
04B56A ED 53 C8 B2 0366*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04B56F 2A BB B2 04 0367*      ld hl,(cur_x) ; h,l = player y,x
04B573 22 C5 B2 04 0368*      ld (plyr_shot_x),hl ; initial shot position
04B577 06 05       0369*      ld b,view_distance ; loop counter so player can't shoot past view distance
04B579             0370*  @loop:
04B579 C5          0371*      push bc ; save loop counter
04B57A ED 5B C8 B2 0372*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04B57F 2A C5 B2 04 0373*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04B583             0374*      ; bump bullet position one map unit in direction of travel
04B583 7D          0375*      ld a,l ; player shot x
04B584 83          0376*      add a,e ; add xvel
04B585 6F          0377*      ld l,a ; save new x
04B586 7C          0378*      ld a,h ; player shot y
04B587 82          0379*      add a,d ; add yvel
04B588 67          0380*      ld h,a ; save new y
04B589 22 C5 B2 04 0381*      ld (plyr_shot_x),hl ; and save that position
04B58D EB          0382*      ex de,hl ; d,e = bullet y,x
04B58E CD A2 65 04 0383*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04B592             0384*  ; check whether target cell contains a sprite
04B592 DD 7E 03    0385*      ld a,(ix+map_sprite_id)
04B595 FE FF       0386*      cp 255 ; value if not sprite
04B597 28 14       0387*      jr z,@not_sprite
04B599             0388*  ; is a sprite so run its "hurt" behavior routine
04B599 CD 91 9F 04 0389*      call sprite_set_pointer
04B59D 3E 02       0390*      ld a,sp_hurt
04B59F CD 88 A0 04 0391*      call do_sprite_behavior ; a = sprite behavior return code
04B5A3 3A CB B2 04 0392*      ld a,(plyr_shot_status)
04B5A7 FE FF       0393*      cp 255 ; value if shot hit a shootable sprite
04B5A9 28 10       0394*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04B5AB 18 16       0395*      jr @move_bullet ; otherwise keep moving bullet
04B5AD             0396*  @not_sprite:
04B5AD ED 5B C8 B2 0397*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04B5B2             0398*  ; read map type/status mask from target cell
04B5B2 DD 7E 00    0399*      ld a,(ix+map_type_status)
04B5B5 E6 03       0400*      and %00000011 ; mask off everything but the render type mask bits
04B5B7             0401*  ; branch on the values in the bitmask
04B5B7 FE 01       0402*      cp render_type_floor
04B5B9 28 08       0403*      jr z,@move_bullet ; keep going if map cell is a floor
04B5BB             0404*  @stop_bullet:
04B5BB C1          0405*      pop bc ; dummy pop to balance stack
04B5BC 3E FF       0406*      ld a,255
04B5BE 32 CB B2 04 0407*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B5C2 C9          0408*      ret ; combat ended
04B5C3             0409*  @move_bullet:
04B5C3 C1          0410*      pop bc ; restore loop counter
04B5C4 10 B3       0411*      djnz @loop ; keep moving bullet if we have more distance to cover
04B5C6 3E FF       0412*      ld a,255
04B5C8 32 CB B2 04 0413*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04B5CC C9          0414*      ret ; combat ended
04B5CD             0415*  
04B5CD             0416*  plyr_shoot:
04B5CD             0417*  ; check if fire weapons timer has expired
04B5CD FD 21 DF B2 0418*      ld iy,plyr_wpn_fire_tmr
       04          
04B5D2 CD 25 C1 04 0419*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B5D6 CA DF B5 04 0420*      jp z,@time_up ; timer zero so fire weapon
04B5DA FA DF B5 04 0421*      jp m,@time_up ; timer negative so fire weapon
04B5DE C9          0422*      ret ; timer not expired so don't fire weapon
04B5DF             0423*  @time_up:
04B5DF             0424*  ; reset fire weapon timer
04B5DF FD 21 DF B2 0425*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04B5E4 2A E5 B2 04 0426*      ld hl,(plyr_wpn_fire_rate)
04B5E8 CD 1A C1 04 0427*      call timestamp_tmr_set
04B5EC             0428*  ; check animation frame for zero
04B5EC 21 E8 B2 04 0429*      ld hl,plyr_wpn_anim_fr
04B5F0 7E          0430*      ld a,(hl)
04B5F1 A7          0431*      and a
04B5F2 20 01       0432*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04B5F4 34          0433*      inc (hl) ; is zero so bump to first animation frame
04B5F5             0434*  @shoot:
04B5F5             0435*  ; roll for damage modifier
04B5F5 CD A9 B7 04 0436*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04B5F9 21 D2 B2 04 0437*      ld hl,plyr_wpn_damage
04B5FD A6          0438*      and a,(hl) ; a contains modified damage value
04B5FE ED 44       0439*      neg ; so we can add the negative
04B600 32 CF B2 04 0440*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04B604             0441*  ; determine active weapon and shoot it
04B604 3A D1 B2 04 0442*      ld a,(plyr_wpn_active)
04B608 FE 02       0443*      cp plyr_wpn_pistol
04B60A CA 16 B5 04 0444*      jp z,plyr_shoot_pistol
04B60E FE 04       0445*      cp plyr_wpn_mg
04B610 CA 2D B5 04 0446*      jp z,plyr_shoot_machine_gun
04B614 FE 08       0447*      cp plyr_wpn_gg
04B616 CA 44 B5 04 0448*      jp z,plyr_shoot_gatling_gun
04B61A FE 01       0449*      cp plyr_wpn_knife
04B61C CA D1 B4 04 0450*      jp z,plyr_shoot_knife
04B620 C9          0451*      ret
04B621             0452*  
04B621             0453*  ; process player keyboard input
04B621             0454*  ; Inputs: plyr_x/y set at desired position
04B621             0455*  ; Returns: player position updated
04B621             0456*  ; Destroys: probably everything
04B621             0457*  plyr_input:
04B621             0458*  ; check weapon anmation frame for zero
04B621 3A E8 B2 04 0459*      ld a,(plyr_wpn_anim_fr)
04B625 E6 03       0460*      and 3 ; modulo 4
04B627 32 E8 B2 04 0461*      ld (plyr_wpn_anim_fr),a
04B62B 28 05       0462*      jr z,@get_input
04B62D             0463*  ; ; animation frame is not zero so check animation timer
04B62D             0464*  ;     ld iy,plyr_wpn_anim_tmr
04B62D             0465*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B62D             0466*  ;     jp z,@animate ; timer zero so animate
04B62D             0467*  ;     jp m,@animate ; timer negative so animate
04B62D             0468*  ;     jp @get_input ; time left on timer so no animation
04B62D             0469*  ; bump animation frame
04B62D             0470*  @animate:
04B62D 21 E8 B2 04 0471*      ld hl,plyr_wpn_anim_fr
04B631 34          0472*      inc (hl) ; next frame
04B632             0473*  ; ; reset animation timer
04B632             0474*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04B632             0475*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04B632             0476*  ;     call timestamp_tmr_set
04B632             0477*  
04B632             0478*  @get_input:
04B632             0479*  ; reset player component velocities to zero as the default
04B632 21 00 00 00 0480*      ld hl,0
04B636 22 BE B2 04 0481*      ld (xvel),hl ; implicitly sets yvel
04B63A AF          0482*      xor a ;
04B63B 32 C4 B2 04 0483*      ld (avel),a ; set player angular velocity to zero as default
04B63F             0484*  
04B63F             0485*  ; check for keypresses and branch accordingly
04B63F             0486*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04B63F 3E 1E       0001*M 			LD	A, function
04B641 5B CF       0002*M 			RST.LIL	08h
04B643             0487*  
04B643             0488*  ; CHECK WEAPON CONTROL KEYS
04B643             0489*  ; 58 Up player selects next weapon
04B643 DD CB 07 4E 0490*      bit 1,(ix+7)
04B647 28 08       0491*      jr z,@Up
04B649 DD E5       0492*      push ix ; it gets clobbered by the weapon select routine
04B64B CD 75 B3 04 0493*      call plyr_next_weapon
04B64F DD E1       0494*      pop ix
04B651             0495*  @Up:
04B651             0496*  
04B651             0497*  ; 42 Down
04B651 DD CB 05 4E 0498*      bit 1,(ix+5)
04B655 28 08       0499*      jr z,@Down
04B657 DD E5       0500*      push ix ; it gets clobbered by the weapon select routine
04B659 CD 9D B3 04 0501*      call plyr_previous_weapon
04B65D DD E1       0502*      pop ix
04B65F             0503*  @Down:
04B65F             0504*  
04B65F             0505*  ; =====================
04B65F             0506*  ; 99 Space FIRE ZEE MISSILES!!!111
04B65F DD CB 0C 56 0507*      bit 2,(ix+12)
04B663 28 08       0508*      jr z,@Space
04B665 DD E5       0509*      push ix ; it gets clobbered by the weapon firing
04B667 CD CD B5 04 0510*      call plyr_shoot
04B66B DD E1       0511*      pop ix ; restore ix
04B66D             0512*  @Space:
04B66D             0513*  
04B66D             0514*  ; CHECK MOVEMENT KEYS
04B66D             0515*  ; non-zero means no movement key was pressed
04B66D 3E FF       0516*      ld a,-1
04B66F             0517*  
04B66F             0518*  ; 34 W player moves forward
04B66F DD CB 04 4E 0519*      bit 1,(ix+4)
04B673 28 07       0520*      jr z,@W
04B675 3E 01       0521*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B677 32 BF B2 04 0522*      ld (yvel),a
04B67B AF          0523*      xor a
04B67C             0524*  @W:
04B67C             0525*  
04B67C             0526*  ; 82 S player moves backward
04B67C DD CB 0A 4E 0527*      bit 1,(ix+10)
04B680 28 0C       0528*      jr z,@S
04B682 16 FF       0529*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04B684 3A BF B2 04 0530*      ld a,(yvel)
04B688 82          0531*      add a,d
04B689 32 BF B2 04 0532*      ld (yvel),a
04B68D AF          0533*      xor a
04B68E             0534*  @S:
04B68E             0535*  
04B68E             0536*  ; 66 A plyer moves left
04B68E DD CB 08 4E 0537*      bit 1,(ix+8)
04B692 28 07       0538*      jr z,@A
04B694 3E FF       0539*      ld a,-speed_plyr ; no funky axis conversion here
04B696 32 BE B2 04 0540*      ld (xvel),a
04B69A AF          0541*      xor a
04B69B             0542*  @A:
04B69B             0543*  
04B69B             0544*  ; 51 D player moves right
04B69B DD CB 06 56 0545*      bit 2,(ix+6)
04B69F 28 0C       0546*      jr z,@D
04B6A1 16 01       0547*      ld d,speed_plyr ; no funky axis conversion here
04B6A3 3A BE B2 04 0548*      ld a,(xvel)
04B6A7 82          0549*      add a,d
04B6A8 32 BE B2 04 0550*      ld (xvel),a
04B6AC AF          0551*      xor a
04B6AD             0552*  @D:
04B6AD             0553*  
04B6AD             0554*  ; 26 Left player rotates anti-clockwise
04B6AD DD CB 03 4E 0555*      bit 1,(ix+3)
04B6B1 28 06       0556*      jr z,@Left
04B6B3 21 C4 B2 04 0557*      ld hl,avel
04B6B7 35          0558*      dec (hl)
04B6B8 AF          0559*      xor a
04B6B9             0560*  @Left:
04B6B9             0561*  
04B6B9             0562*  ; 122 Right player rotates clockwise
04B6B9 DD CB 0F 4E 0563*      bit 1,(ix+15)
04B6BD 28 06       0564*      jr z,@Right
04B6BF 21 C4 B2 04 0565*      ld hl,avel
04B6C3 34          0566*      inc (hl)
04B6C4 AF          0567*      xor a
04B6C5             0568*  @Right:
04B6C5             0569*  
04B6C5             0570*  ; KEYPRESS DETECTION DONE
04B6C5 A7          0571*      and a ; this will zero if player pressed a movement key
04B6C6 C0          0572*      ret nz ; non zero so no key pressed
04B6C7             0573*  ; check move timer
04B6C7 FD 21 F7 B2 0574*      ld iy,plyr_move_timer
       04          
04B6CC CD 25 C1 04 0575*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04B6D0 F0          0576*      ret p ; time left on timer so no movement
04B6D1             0577*  ; reset_move_timer
04B6D1 21 1E 00 00 0578*      ld hl,plyr_move_rate
04B6D5 FD 21 F7 B2 0579*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04B6DA CD 1A C1 04 0580*      call timestamp_tmr_set
04B6DE             0581*  ; move player according to velocities set by keypresses
04B6DE ED 5B BE B2 0582*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04B6E3 3A C4 B2 04 0583*      ld a,(avel)
04B6E7 21 BA B2 04 0584*      ld hl,orientation
04B6EB 86          0585*      add a,(hl)
04B6EC E6 03       0586*      and 0x03 ; modulo 4
04B6EE 77          0587*      ld (hl),a
04B6EF CD 0F 66 04 0588*      call trans_dx_dy ; d = dy, e = dx
04B6F3 ED 53 C2 B2 0589*      ld (dx),de
       04          
04B6F8 3A BB B2 04 0590*      ld a,(cur_x)
04B6FC 83          0591*      add a,e
04B6FD 5F          0592*      ld e,a
04B6FE 3A BC B2 04 0593*      ld a,(cur_y)
04B702 82          0594*      add a,d
04B703 57          0595*      ld d,a
04B704 ED 53 BE B2 0596*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04B709 CD A2 65 04 0597*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04B70D             0598*  ; check whether target cell contains a sprite
04B70D DD 7E 03    0599*      ld a,(ix+map_sprite_id)
04B710 FE FF       0600*      cp 255 ; value if not sprite
04B712 28 0A       0601*      jr z,@not_sprite
04B714             0602*  ; is a sprite so run its "use" behavior routine
04B714 CD 91 9F 04 0603*      call sprite_set_pointer
04B718 3E 01       0604*      ld a,sp_use
04B71A CD 88 A0 04 0605*      call do_sprite_behavior
04B71E             0606*  ; fall through because we still need to check out what's going on in the target cell
04B71E             0607*  @not_sprite:
04B71E ED 5B BE B2 0608*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04B723             0609*  ; read map type/status mask from target cell
04B723 DD 7E 00    0610*      ld a,(ix+map_type_status)
04B726 47          0611*      ld b,a ; b = target cell type/status
04B727             0612*  ; branch on the values in the bitmask
04B727 3E 80       0613*      ld a,cell_is_door
04B729 A0          0614*      and b
04B72A 20 06       0615*      jr nz,@door
04B72C 3E 40       0616*      ld a,cell_is_wall
04B72E A0          0617*      and b
04B72F C0          0618*      ret nz ; can't move thru walls
04B730 18 2B       0619*      jr @move_it ; if it wasn't a wall or door, move as normal
04B732             0620*  @door:
04B732 ED 5B C2 B2 0621*      ld de,(dx) ; d = dy, e = dx
       04          
04B737 CD FD 65 04 0622*      call get_dir_from_dy_dx ; a is direction of attempted movement
04B73B F5          0623*      push af
04B73C 16 02       0624*      ld d,2 ; 1 past the door in the movement direction
04B73E 5F          0625*      ld e,a
04B73F CD C7 65 04 0626*      call get_dx_dy
04B743 ED 53 C2 B2 0627*      ld (dx),de
       04          
04B748 F1          0628*      pop af
04B749 5F          0629*      ld e,a
04B74A 16 02       0630*      ld d,2
04B74C ED 4B BB B2 0631*      ld bc,(cur_x)
       04          
04B751 CD 94 65 04 0632*      call get_neighbor ; ix points to cell defs/status, a is target cell current obj_id
04B755 DD 7E 00    0633*      ld a,(ix+map_type_status)
04B758 47          0634*      ld b,a ; b = target cell type/status
04B759 3E 40       0635*      ld a,cell_is_wall
04B75B A0          0636*      and b
04B75C C0          0637*      ret nz ; can't move thru walls
04B75D             0638*      ; fall through to @move_it
04B75D             0639*  @move_it:
04B75D             0640*  ; we are cleared for movement so update player position
04B75D 11 00 00 00 0641*      ld de,0 ; make sure deu is zero
04B761 ED 4B C2 B2 0642*      ld bc,(dx) ; b = dy, c = dx
       04          
04B766 3A BB B2 04 0643*      ld a,(cur_x)
04B76A 81          0644*      add a,c
04B76B 5F          0645*      ld e,a
04B76C 32 BB B2 04 0646*      ld (cur_x),a
04B770 3A BC B2 04 0647*      ld a,(cur_y)
04B774 80          0648*      add a,b
04B775 57          0649*      ld d,a
04B776 32 BC B2 04 0650*      ld (cur_y),a
04B77A C9          0651*      ret
04B77B             0027   	include "src/asm/maths.asm"
04B77B 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04B77F 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04B783             0003*  
04B783             0004*  ; set bcd values in a scratch memory address from registers bcde
04B783             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04B783             0006*  ; destroys ; hl
04B783             0007*  set_bcd:
04B783 73          0008*      ld (hl),e
04B784 23          0009*      inc hl
04B785 72          0010*      ld (hl),d
04B786 23          0011*      inc hl
04B787 71          0012*      ld (hl),c
04B788 23          0013*      inc hl
04B789 70          0014*      ld (hl),b
04B78A C9          0015*      ret
04B78B             0016*  
04B78B             0017*  ; load bcd values from a scratch memory address to bcde
04B78B             0018*  ; input: hl; scratch address
04B78B             0019*  ; output: bcde; 8-place bcd number
04B78B             0020*  ; destroys: hl
04B78B             0021*  get_bcd:
04B78B 5E          0022*      ld e,(hl)
04B78C 23          0023*      inc hl
04B78D 56          0024*      ld d,(hl)
04B78E 23          0025*      inc hl
04B78F 4E          0026*      ld c,(hl)
04B790 23          0027*      inc hl
04B791 46          0028*      ld b,(hl)
04B792 C9          0029*      ret
04B793             0030*  
04B793             0031*  ; BCD addition
04B793             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B793             0033*  ;       a is the number of bytes holding each number (number of places/2)
04B793             0034*  ; outputs: (hl) + (de) --> (hl)
04B793             0035*  ; destroys: a,b,de,hl
04B793             0036*  add_bcd:
04B793 47          0037*      ld b,a ; loop counter
04B794 AF          0038*      xor a ; reset a, clear carry flag
04B795             0039*  adcec:
04B795 1A          0040*      ld a,(de) ; addend to acc
04B796 8E          0041*      adc a,(hl) ; add (hl) to acc
04B797 27          0042*      daa ; adjust result to bcd
04B798 77          0043*      ld (hl),a ; store result
04B799 23          0044*      inc hl ; advance memory pointers
04B79A 13          0045*      inc de
04B79B 10 F8       0046*      djnz adcec ; loop until b == 0
04B79D C9          0047*      ret
04B79E             0048*  
04B79E             0049*  ; BCD subtraction
04B79E             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04B79E             0051*  ;       a is the number of bytes holding each number (number of places/2)
04B79E             0052*  ; outputs: (hl) - (de) --> (hl)
04B79E             0053*  ; destroys: a,b,de,hl
04B79E             0054*  sub_bcd:
04B79E 47          0055*      ld b,a ; loop counter
04B79F AF          0056*      xor a ; reset a,clear carry flag
04B7A0             0057*  subdec:
04B7A0 1A          0058*      ld a,(de) ; subtrahend to acc
04B7A1 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04B7A2 27          0060*      daa ; adjust result to bcd
04B7A3 77          0061*      ld (hl),a ; store result
04B7A4 23          0062*      inc hl ; advance memory pointers
04B7A5 13          0063*      inc de
04B7A6 10 F8       0064*      djnz subdec ; loop until b == 0
04B7A8 C9          0065*      ret
04B7A9             0066*  
04B7A9             0067*  ; http://www.z80.info/pseudo-random.txt
04B7A9             0068*  rand_8:
04B7A9 C5          0069*      push bc
04B7AA 3A BD B7 04 0070*      ld a,(r_seed)
04B7AE 4F          0071*      ld c,a
04B7AF             0072*  
04B7AF 0F          0073*      rrca ; multiply by 32
04B7B0 0F          0074*      rrca
04B7B1 0F          0075*      rrca
04B7B2 EE 1F       0076*      xor 0x1f
04B7B4             0077*  
04B7B4 81          0078*      add a,c
04B7B5 DE FF       0079*      sbc a,255 ; carry
04B7B7             0080*  
04B7B7 32 BD B7 04 0081*      ld (r_seed),a
04B7BB C1          0082*      pop bc
04B7BC C9          0083*      ret
04B7BD 50          0084*  r_seed: defb $50
04B7BE             0028   	include "src/asm/img_load.asm"
04B7BE 00 00 00    0001*  cur_file_idx: dl 0
04B7C1 00 00 00    0002*  cur_filename: dl 0
04B7C4 00 00 00    0003*  cur_buffer_id: dl 0
04B7C7 00 00 00    0004*  cur_buffer_id_lut: dl 0
04B7CA 00 00 00    0005*  cur_load_jump_table: dl 0
04B7CD             0006*  
04B7CD             0007*  img_load_init:
04B7CD             0008*  ; initialize bj's position parameters
04B7CD 21 00 00 00 0009*  	ld hl,0
04B7D1 22 1B B9 04 0010*  	ld (bj_yvel),hl
04B7D5             0011*  
04B7D5 21 2D 00 00 0012*      ld hl,45
04B7D9 22 1E B9 04 0013*  	ld (bj_y_cur),hl
04B7DD 22 21 B9 04 0014*  	ld (bj_y_min),hl
04B7E1 22 24 B9 04 0015*      ld (bj_y_max),hl
04B7E5             0016*  
04B7E5 21 01 00 00 0017*  	ld hl,1
04B7E9 22 0F B9 04 0018*  	ld (bj_xvel),hl
04B7ED             0019*  
04B7ED 21 0A 00 00 0020*  	ld hl,10
04B7F1 22 12 B9 04 0021*  	ld (bj_x_cur),hl
04B7F5 22 15 B9 04 0022*  	ld (bj_x_min),hl
04B7F9             0023*  
04B7F9 21 C8 00 00 0024*  	ld hl,320-120
04B7FD 22 18 B9 04 0025*  	ld (bj_x_max),hl
04B801             0026*  
04B801 C9          0027*      ret
04B802             0028*  
04B802             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04B802             0030*  img_load_main:
04B802 21 00 00 00 0031*      ld hl,0
04B806 22 BE B7 04 0032*      ld (cur_file_idx),hl
04B80A             0033*  img_load_main_loop:
04B80A             0034*  ; back up loop counter
04B80A C5          0035*      push bc
04B80B             0036*  ; load the next panel
04B80B CD 73 B8 04 0037*      call load_next_panel
04B80F             0038*  ; draw all the things
04B80F CD 27 B9 04 0039*      call tmp_draw_all_the_things
04B813             0040*  ; draw the most recently loaded panel
04B813 2A C4 B7 04 0041*  	ld hl,(cur_buffer_id)
04B817 CD 16 AA 04 0042*  	call vdu_buff_select
04B81B 01 00 00 00 0043*  	ld bc,0
04B81F 11 00 00 00 0044*  	ld de,0
04B823 CD E7 AB 04 0045*  	call vdu_plot_bmp
04B827             0046*  ; move bj
04B827 CD AF B8 04 0047*  	call move_bj
04B82B             0048*  ; print welcome message
04B82B DD 21 80 7C 0049*  	ld ix,font_itc_honda
       04          
04B830 21 91 C1 04 0050*  	ld hl,hello_world
04B834 01 20 00 00 0051*  	ld bc,32
04B838 11 02 00 00 0052*  	ld de,2
04B83C CD 7F 65 04 0053*  	call font_bmp_print
04B840             0054*  ; print current filename
04B840 CD AD A8 04 0055*  	call vdu_cls
04B844 2A C1 B7 04 0056*  	ld hl,(cur_filename)
04B848 CD AC AE 04 0057*  	call printString
04B84C CD C1 AE 04 0058*  	call printNewLine
04B850             0059*  
04B850             0060*  ; print current load stopwatch
04B850 21 B3 C1 04 0061*  	ld hl,loading_time
04B854 CD AC AE 04 0062*  	call printString
04B858 CD 43 C1 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04B85C CD FA AE 04 0064*  	call printDec
04B860             0065*  
04B860             0066*  ; flip screen
04B860 CD 7C AA 04 0067*      call vdu_flip
04B864             0068*  ; decrement loop counter
04B864 C1          0069*      pop bc
04B865 0B          0070*  	dec bc
04B866             0071*  ; ; DEBUG: DUMP REGISTERS
04B866             0072*  ; 	push bc
04B866             0073*  ; 	call dumpRegistersHex
04B866             0074*  ; 	call vdu_flip
04B866             0075*  ; 	pop bc
04B866             0076*  ; ; END DEBUG
04B866 79          0077*      ld a,c
04B867 B7          0078*      or a
04B868 C2 0A B8 04 0079*      jp nz,img_load_main_loop
04B86C 78          0080*      ld a,b
04B86D B7          0081*      or a
04B86E C2 0A B8 04 0082*      jp nz,img_load_main_loop
04B872 C9          0083*      ret
04B873             0084*  
04B873             0085*  load_next_panel:
04B873             0086*  ; look up the load routine for the current file index
04B873 2A BE B7 04 0087*  	ld hl,(cur_file_idx)
04B877 29          0088*  	add hl,hl ; multiply current index by 2 ...
04B878 ED 5B BE B7 0089*  	ld de,(cur_file_idx)
       04          
04B87D 19          0090*  	add hl,de ; ... now by 3
04B87E ED 5B CA B7 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04B883 19          0092*  	add hl,de
04B884 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04B886 22 8B B8 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04B88A             0095*  @jump_addr:
04B88A CD 00 00 00 0096*  	call 0 ; call the panel load routine
04B88E             0097*  ; look up the buffer id for the current file
04B88E 2A BE B7 04 0098*  	ld hl,(cur_file_idx)
04B892 29          0099*  	add hl,hl ; multiply current index by 2 ...
04B893 ED 5B BE B7 0100*  	ld de,(cur_file_idx)
       04          
04B898 19          0101*  	add hl,de ; ... now by 3
04B899 ED 5B C7 B7 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04B89E 19          0103*  	add hl,de
04B89F ED 27       0104*  	ld hl,(hl)
04B8A1 22 C4 B7 04 0105*  	ld (cur_buffer_id),hl
04B8A5             0106*  ; bump the current file index
04B8A5 2A BE B7 04 0107*  	ld hl,(cur_file_idx)
04B8A9 23          0108*  	inc hl
04B8AA 22 BE B7 04 0109*  	ld (cur_file_idx),hl
04B8AE C9          0110*  	ret
04B8AF             0111*  
04B8AF             0112*  move_bj:
04B8AF             0113*  ; activate bj bitmap
04B8AF 21 00 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04B8B3 CD 16 AA 04 0115*  	call vdu_buff_select
04B8B7             0116*  ; update position based on velocity parameters
04B8B7 2A 12 B9 04 0117*  	ld hl, (bj_x_cur)
04B8BB ED 5B 0F B9 0118*  	ld de, (bj_xvel)
       04          
04B8C0 19          0119*  	add hl, de
04B8C1 22 12 B9 04 0120*  	ld (bj_x_cur), hl
04B8C5 EB          0121*  	ex de,hl ; store x_cur in de
04B8C6             0122*  ; check if we're < x_min
04B8C6 2A 15 B9 04 0123*  	ld hl,(bj_x_min)
04B8CA AF          0124*  	xor a ; clear carry
04B8CB ED 52       0125*  	sbc hl,de ; x_min - x_cur
04B8CD F2 EB B8 04 0126*  	jp p, move_bj_x_min
04B8D1             0127*  ; check if we're > x_max
04B8D1 2A 18 B9 04 0128*  	ld hl,(bj_x_max)
04B8D5 AF          0129*  	xor a ; clear carry
04B8D6 ED 52       0130*  	sbc hl,de ; x_max - x_cur
04B8D8 FA FD B8 04 0131*  	jp m, move_bj_x_max
04B8DC             0132*  ; if not at either boundary, fall through to draw bj's
04B8DC             0133*  draw_bj:
04B8DC ED 4B 12 B9 0134*  	ld bc,(bj_x_cur)
       04          
04B8E1 ED 5B 1E B9 0135*  	ld de,(bj_y_cur)
       04          
04B8E6 CD E7 AB 04 0136*  	call vdu_plot_bmp
04B8EA C9          0137*  	ret
04B8EB             0138*  move_bj_x_min:
04B8EB 21 01 00 00 0139*  	ld hl,1
04B8EF 22 0F B9 04 0140*  	ld (bj_xvel),hl
04B8F3 2A 15 B9 04 0141*  	ld hl,(bj_x_min)
04B8F7 22 12 B9 04 0142*  	ld (bj_x_cur),hl
04B8FB 18 DF       0143*  	jr draw_bj
04B8FD             0144*  move_bj_x_max:
04B8FD 21 FF FF FF 0145*  	ld hl,-1
04B901 22 0F B9 04 0146*  	ld (bj_xvel),hl
04B905 2A 18 B9 04 0147*  	ld hl,(bj_x_max)
04B909 22 12 B9 04 0148*  	ld (bj_x_cur),hl
04B90D 18 CD       0149*  	jr draw_bj
04B90F 00 00 00    0150*  bj_xvel: dl 0
04B912 00 00 00    0151*  bj_x_cur: dl 0
04B915 00 00 00    0152*  bj_x_min: dl 0
04B918 00 00 00    0153*  bj_x_max: dl 0
04B91B             0154*  
04B91B 00 00 00    0155*  bj_yvel: dl 0
04B91E 00 00 00    0156*  bj_y_cur: dl 0
04B921 00 00 00    0157*  bj_y_min: dl 0
04B924 00 00 00    0158*  bj_y_max: dl 0
04B927             0159*  
04B927             0160*  tmp_draw_all_the_things:
04B927 21 06 20 00 0161*      ld hl,BUF_UI_SPLASH
04B92B CD 16 AA 04 0162*      call vdu_buff_select
04B92F 01 00 00 00 0163*      ld bc,0
04B933 11 00 00 00 0164*      ld de,0
04B937 CD E7 AB 04 0165*      call vdu_plot_bmp
04B93B C9          0166*  	ret
04B93C             0167*  
04B93C             0168*  ; load an uncompressed rgba2222 image file to a buffer
04B93C             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B93C             0170*  vdu_load_img:
04B93C             0171*  ; back up image dimension parameters
04B93C C5          0172*  	push bc
04B93D D5          0173*  	push de
04B93E             0174*  ; load the image
04B93E CD 7E C3 04 0175*  	call vdu_load_buffer_from_file
04B942             0176*  ; now make it a bitmap
04B942 D1          0177*  	pop de
04B943 C1          0178*  	pop bc
04B944 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04B946 C3 2B AA 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04B94A             0181*  
04B94A             0182*  ; load a compressed rgba2222 image file to a buffer
04B94A             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04B94A             0184*  vdu_load_img_cmp:
04B94A             0185*  ; back up image dimension parameters
04B94A C5          0186*  	push bc
04B94B D5          0187*  	push de
04B94C             0188*  ; back up the buffer id
04B94C E5          0189*  	push hl
04B94D             0190*  ; load the image
04B94D CD 7E C3 04 0191*  	call vdu_load_buffer_from_file
04B951             0192*  ; decompress the buffer
04B951 E1          0193*  	pop hl ; bufferId
04B952 CD 8A AA 04 0194*  	call vdu_decompress_buffer
04B956             0195*  ; now make it a bitmap
04B956 D1          0196*  	pop de ; image height
04B957 C1          0197*  	pop bc ; image width
04B958 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04B95A C3 2B AA 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04B95E             0029   	include "src/asm/sfx.asm"
04B95E             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04B95E             0002*  
04B95E             0003*  SFX_num_buffers: equ 22
04B95E             0004*  ; SFX buffer ids:
04B95E             0005*  BUF_ACHTUNG: equ 0xFB00
04B95E             0006*  BUF_AHH: equ 0xFB01
04B95E             0007*  BUF_AUGH: equ 0xFB02
04B95E             0008*  BUF_AYEE: equ 0xFB03
04B95E             0009*  BUF_AYEE_HIGH: equ 0xFB04
04B95E             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04B95E             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04B95E             0012*  BUF_DOG_YELP: equ 0xFB07
04B95E             0013*  BUF_EXPLODE: equ 0xFB08
04B95E             0014*  BUF_GOT_TREASURE: equ 0xFB09
04B95E             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04B95E             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04B95E             0017*  BUF_KNIFE: equ 0xFB0C
04B95E             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04B95E             0019*  BUF_OOF: equ 0xFB0E
04B95E             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04B95E             0021*  BUF_SCREAM: equ 0xFB10
04B95E             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04B95E             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04B95E             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04B95E             0025*  BUF_UGH: equ 0xFB14
04B95E             0026*  BUF_WILHELM: equ 0xFB15
04B95E             0027*  
04B95E             0028*  ; SFX buffer id reverse lookup:
04B95E             0029*  SFX_buffer_id_lut:
04B95E 00 FB 00    0030*  	dl BUF_ACHTUNG
04B961 01 FB 00    0031*  	dl BUF_AHH
04B964 02 FB 00    0032*  	dl BUF_AUGH
04B967 03 FB 00    0033*  	dl BUF_AYEE
04B96A 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04B96D 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04B970 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04B973 07 FB 00    0037*  	dl BUF_DOG_YELP
04B976 08 FB 00    0038*  	dl BUF_EXPLODE
04B979 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04B97C 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04B97F 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04B982 0C FB 00    0042*  	dl BUF_KNIFE
04B985 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04B988 0E FB 00    0044*  	dl BUF_OOF
04B98B 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04B98E 10 FB 00    0046*  	dl BUF_SCREAM
04B991 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04B994 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04B997 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04B99A 14 FB 00    0050*  	dl BUF_UGH
04B99D 15 FB 00    0051*  	dl BUF_WILHELM
04B9A0             0052*  
04B9A0             0053*  ; SFX duration lookup:
04B9A0             0054*  SFX_duration_lut:
04B9A0 58 03       0055*  	dw 856 ; ACHTUNG
04B9A2 91 01       0056*  	dw 401 ; AHH
04B9A4 FC 02       0057*  	dw 764 ; AUGH
04B9A6 E6 01       0058*  	dw 486 ; AYEE
04B9A8 40 04       0059*  	dw 1088 ; AYEE_HIGH
04B9AA 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04B9AC 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04B9AE B0 01       0062*  	dw 432 ; DOG_YELP
04B9B0 13 05       0063*  	dw 1299 ; EXPLODE
04B9B2 A7 05       0064*  	dw 1447 ; GOT_TREASURE
04B9B4 24 01       0065*  	dw 292 ; GUN_EMPTY
04B9B6 BA 01       0066*  	dw 442 ; GUN_RELOAD
04B9B8 F2 00       0067*  	dw 242 ; KNIFE
04B9BA 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04B9BC CE 03       0069*  	dw 974 ; OOF
04B9BE 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04B9C0 E0 02       0071*  	dw 736 ; SCREAM
04B9C2 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04B9C4 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04B9C6 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04B9C8 77 01       0075*  	dw 375 ; UGH
04B9CA FD 04       0076*  	dw 1277 ; WILHELM
04B9CC             0077*  
04B9CC             0078*  ; SFX load routines jump table:
04B9CC             0079*  SFX_load_routines_table:
04B9CC 0E BA 04    0080*  	dl load_sfx_ACHTUNG
04B9CF 30 BA 04    0081*  	dl load_sfx_AHH
04B9D2 52 BA 04    0082*  	dl load_sfx_AUGH
04B9D5 74 BA 04    0083*  	dl load_sfx_AYEE
04B9D8 96 BA 04    0084*  	dl load_sfx_AYEE_HIGH
04B9DB B8 BA 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04B9DE DA BA 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04B9E1 FC BA 04    0087*  	dl load_sfx_DOG_YELP
04B9E4 1E BB 04    0088*  	dl load_sfx_EXPLODE
04B9E7 40 BB 04    0089*  	dl load_sfx_GOT_TREASURE
04B9EA 62 BB 04    0090*  	dl load_sfx_GUN_EMPTY
04B9ED 84 BB 04    0091*  	dl load_sfx_GUN_RELOAD
04B9F0 A6 BB 04    0092*  	dl load_sfx_KNIFE
04B9F3 C8 BB 04    0093*  	dl load_sfx_MEIN_LEBEN
04B9F6 EA BB 04    0094*  	dl load_sfx_OOF
04B9F9 0C BC 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04B9FC 2E BC 04    0096*  	dl load_sfx_SCREAM
04B9FF 50 BC 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04BA02 72 BC 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04BA05 94 BC 04    0099*  	dl load_sfx_SHOT_PISTOL
04BA08 B6 BC 04    0100*  	dl load_sfx_UGH
04BA0B D8 BC 04    0101*  	dl load_sfx_WILHELM
04BA0E             0102*  
04BA0E             0103*  ; Import sfx .raw files and load them into VDP buffers
04BA0E             0104*  
04BA0E             0105*  load_sfx_ACHTUNG:
04BA0E 21 FA BC 04 0106*  	ld hl,FACHTUNG
04BA12 22 C1 B7 04 0107*  	ld (cur_filename),hl
04BA16 11 CB C3 04 0108*  	ld de,filedata
04BA1A 01 00 00 01 0109*  	ld bc,65536
04BA1E 3E 01       0110*  	ld a,mos_load
04BA20 5B CF       0111*  	RST.LIL 08h
04BA22 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04BA26 DD 21 3A 38 0113*  	ld ix,14394
       00          
04BA2B CD A0 AE 04 0114*  	call vdu_load_sfx
04BA2F C9          0115*  	ret
04BA30             0116*  
04BA30             0117*  load_sfx_AHH:
04BA30 21 0A BD 04 0118*  	ld hl,FAHH
04BA34 22 C1 B7 04 0119*  	ld (cur_filename),hl
04BA38 11 CB C3 04 0120*  	ld de,filedata
04BA3C 01 00 00 01 0121*  	ld bc,65536
04BA40 3E 01       0122*  	ld a,mos_load
04BA42 5B CF       0123*  	RST.LIL 08h
04BA44 21 01 FB 00 0124*  	ld hl,BUF_AHH
04BA48 DD 21 63 1A 0125*  	ld ix,6755
       00          
04BA4D CD A0 AE 04 0126*  	call vdu_load_sfx
04BA51 C9          0127*  	ret
04BA52             0128*  
04BA52             0129*  load_sfx_AUGH:
04BA52 21 16 BD 04 0130*  	ld hl,FAUGH
04BA56 22 C1 B7 04 0131*  	ld (cur_filename),hl
04BA5A 11 CB C3 04 0132*  	ld de,filedata
04BA5E 01 00 00 01 0133*  	ld bc,65536
04BA62 3E 01       0134*  	ld a,mos_load
04BA64 5B CF       0135*  	RST.LIL 08h
04BA66 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04BA6A DD 21 39 32 0137*  	ld ix,12857
       00          
04BA6F CD A0 AE 04 0138*  	call vdu_load_sfx
04BA73 C9          0139*  	ret
04BA74             0140*  
04BA74             0141*  load_sfx_AYEE:
04BA74 21 23 BD 04 0142*  	ld hl,FAYEE
04BA78 22 C1 B7 04 0143*  	ld (cur_filename),hl
04BA7C 11 CB C3 04 0144*  	ld de,filedata
04BA80 01 00 00 01 0145*  	ld bc,65536
04BA84 3E 01       0146*  	ld a,mos_load
04BA86 5B CF       0147*  	RST.LIL 08h
04BA88 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04BA8C DD 21 00 20 0149*  	ld ix,8192
       00          
04BA91 CD A0 AE 04 0150*  	call vdu_load_sfx
04BA95 C9          0151*  	ret
04BA96             0152*  
04BA96             0153*  load_sfx_AYEE_HIGH:
04BA96 21 30 BD 04 0154*  	ld hl,FAYEE_HIGH
04BA9A 22 C1 B7 04 0155*  	ld (cur_filename),hl
04BA9E 11 CB C3 04 0156*  	ld de,filedata
04BAA2 01 00 00 01 0157*  	ld bc,65536
04BAA6 3E 01       0158*  	ld a,mos_load
04BAA8 5B CF       0159*  	RST.LIL 08h
04BAAA 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04BAAE DD 21 77 47 0161*  	ld ix,18295
       00          
04BAB3 CD A0 AE 04 0162*  	call vdu_load_sfx
04BAB7 C9          0163*  	ret
04BAB8             0164*  
04BAB8             0165*  load_sfx_DOG_WOOF_DOUBLE:
04BAB8 21 42 BD 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04BABC 22 C1 B7 04 0167*  	ld (cur_filename),hl
04BAC0 11 CB C3 04 0168*  	ld de,filedata
04BAC4 01 00 00 01 0169*  	ld bc,65536
04BAC8 3E 01       0170*  	ld a,mos_load
04BACA 5B CF       0171*  	RST.LIL 08h
04BACC 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BAD0 DD 21 24 28 0173*  	ld ix,10276
       00          
04BAD5 CD A0 AE 04 0174*  	call vdu_load_sfx
04BAD9 C9          0175*  	ret
04BADA             0176*  
04BADA             0177*  load_sfx_DOG_WOOF_SINGLE:
04BADA 21 5A BD 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04BADE 22 C1 B7 04 0179*  	ld (cur_filename),hl
04BAE2 11 CB C3 04 0180*  	ld de,filedata
04BAE6 01 00 00 01 0181*  	ld bc,65536
04BAEA 3E 01       0182*  	ld a,mos_load
04BAEC 5B CF       0183*  	RST.LIL 08h
04BAEE 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04BAF2 DD 21 10 23 0185*  	ld ix,8976
       00          
04BAF7 CD A0 AE 04 0186*  	call vdu_load_sfx
04BAFB C9          0187*  	ret
04BAFC             0188*  
04BAFC             0189*  load_sfx_DOG_YELP:
04BAFC 21 72 BD 04 0190*  	ld hl,FDOG_YELP
04BB00 22 C1 B7 04 0191*  	ld (cur_filename),hl
04BB04 11 CB C3 04 0192*  	ld de,filedata
04BB08 01 00 00 01 0193*  	ld bc,65536
04BB0C 3E 01       0194*  	ld a,mos_load
04BB0E 5B CF       0195*  	RST.LIL 08h
04BB10 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04BB14 DD 21 60 1C 0197*  	ld ix,7264
       00          
04BB19 CD A0 AE 04 0198*  	call vdu_load_sfx
04BB1D C9          0199*  	ret
04BB1E             0200*  
04BB1E             0201*  load_sfx_EXPLODE:
04BB1E 21 83 BD 04 0202*  	ld hl,FEXPLODE
04BB22 22 C1 B7 04 0203*  	ld (cur_filename),hl
04BB26 11 CB C3 04 0204*  	ld de,filedata
04BB2A 01 00 00 01 0205*  	ld bc,65536
04BB2E 3E 01       0206*  	ld a,mos_load
04BB30 5B CF       0207*  	RST.LIL 08h
04BB32 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04BB36 DD 21 48 55 0209*  	ld ix,21832
       00          
04BB3B CD A0 AE 04 0210*  	call vdu_load_sfx
04BB3F C9          0211*  	ret
04BB40             0212*  
04BB40             0213*  load_sfx_GOT_TREASURE:
04BB40 21 93 BD 04 0214*  	ld hl,FGOT_TREASURE
04BB44 22 C1 B7 04 0215*  	ld (cur_filename),hl
04BB48 11 CB C3 04 0216*  	ld de,filedata
04BB4C 01 00 00 01 0217*  	ld bc,65536
04BB50 3E 01       0218*  	ld a,mos_load
04BB52 5B CF       0219*  	RST.LIL 08h
04BB54 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04BB58 DD 21 07 5F 0221*  	ld ix,24327
       00          
04BB5D CD A0 AE 04 0222*  	call vdu_load_sfx
04BB61 C9          0223*  	ret
04BB62             0224*  
04BB62             0225*  load_sfx_GUN_EMPTY:
04BB62 21 A8 BD 04 0226*  	ld hl,FGUN_EMPTY
04BB66 22 C1 B7 04 0227*  	ld (cur_filename),hl
04BB6A 11 CB C3 04 0228*  	ld de,filedata
04BB6E 01 00 00 01 0229*  	ld bc,65536
04BB72 3E 01       0230*  	ld a,mos_load
04BB74 5B CF       0231*  	RST.LIL 08h
04BB76 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04BB7A DD 21 3F 13 0233*  	ld ix,4927
       00          
04BB7F CD A0 AE 04 0234*  	call vdu_load_sfx
04BB83 C9          0235*  	ret
04BB84             0236*  
04BB84             0237*  load_sfx_GUN_RELOAD:
04BB84 21 BA BD 04 0238*  	ld hl,FGUN_RELOAD
04BB88 22 C1 B7 04 0239*  	ld (cur_filename),hl
04BB8C 11 CB C3 04 0240*  	ld de,filedata
04BB90 01 00 00 01 0241*  	ld bc,65536
04BB94 3E 01       0242*  	ld a,mos_load
04BB96 5B CF       0243*  	RST.LIL 08h
04BB98 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04BB9C DD 21 0F 1D 0245*  	ld ix,7439
       00          
04BBA1 CD A0 AE 04 0246*  	call vdu_load_sfx
04BBA5 C9          0247*  	ret
04BBA6             0248*  
04BBA6             0249*  load_sfx_KNIFE:
04BBA6 21 CD BD 04 0250*  	ld hl,FKNIFE
04BBAA 22 C1 B7 04 0251*  	ld (cur_filename),hl
04BBAE 11 CB C3 04 0252*  	ld de,filedata
04BBB2 01 00 00 01 0253*  	ld bc,65536
04BBB6 3E 01       0254*  	ld a,mos_load
04BBB8 5B CF       0255*  	RST.LIL 08h
04BBBA 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04BBBE DD 21 F3 0F 0257*  	ld ix,4083
       00          
04BBC3 CD A0 AE 04 0258*  	call vdu_load_sfx
04BBC7 C9          0259*  	ret
04BBC8             0260*  
04BBC8             0261*  load_sfx_MEIN_LEBEN:
04BBC8 21 DB BD 04 0262*  	ld hl,FMEIN_LEBEN
04BBCC 22 C1 B7 04 0263*  	ld (cur_filename),hl
04BBD0 11 CB C3 04 0264*  	ld de,filedata
04BBD4 01 00 00 01 0265*  	ld bc,65536
04BBD8 3E 01       0266*  	ld a,mos_load
04BBDA 5B CF       0267*  	RST.LIL 08h
04BBDC 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04BBE0 DD 21 81 35 0269*  	ld ix,13697
       00          
04BBE5 CD A0 AE 04 0270*  	call vdu_load_sfx
04BBE9 C9          0271*  	ret
04BBEA             0272*  
04BBEA             0273*  load_sfx_OOF:
04BBEA 21 EE BD 04 0274*  	ld hl,FOOF
04BBEE 22 C1 B7 04 0275*  	ld (cur_filename),hl
04BBF2 11 CB C3 04 0276*  	ld de,filedata
04BBF6 01 00 00 01 0277*  	ld bc,65536
04BBFA 3E 01       0278*  	ld a,mos_load
04BBFC 5B CF       0279*  	RST.LIL 08h
04BBFE 21 0E FB 00 0280*  	ld hl,BUF_OOF
04BC02 DD 21 00 40 0281*  	ld ix,16384
       00          
04BC07 CD A0 AE 04 0282*  	call vdu_load_sfx
04BC0B C9          0283*  	ret
04BC0C             0284*  
04BC0C             0285*  load_sfx_SCHUSSTAFFEL:
04BC0C 21 FA BD 04 0286*  	ld hl,FSCHUSSTAFFEL
04BC10 22 C1 B7 04 0287*  	ld (cur_filename),hl
04BC14 11 CB C3 04 0288*  	ld de,filedata
04BC18 01 00 00 01 0289*  	ld bc,65536
04BC1C 3E 01       0290*  	ld a,mos_load
04BC1E 5B CF       0291*  	RST.LIL 08h
04BC20 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04BC24 DD 21 63 26 0293*  	ld ix,9827
       00          
04BC29 CD A0 AE 04 0294*  	call vdu_load_sfx
04BC2D C9          0295*  	ret
04BC2E             0296*  
04BC2E             0297*  load_sfx_SCREAM:
04BC2E 21 0F BE 04 0298*  	ld hl,FSCREAM
04BC32 22 C1 B7 04 0299*  	ld (cur_filename),hl
04BC36 11 CB C3 04 0300*  	ld de,filedata
04BC3A 01 00 00 01 0301*  	ld bc,65536
04BC3E 3E 01       0302*  	ld a,mos_load
04BC40 5B CF       0303*  	RST.LIL 08h
04BC42 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04BC46 DD 21 5E 30 0305*  	ld ix,12382
       00          
04BC4B CD A0 AE 04 0306*  	call vdu_load_sfx
04BC4F C9          0307*  	ret
04BC50             0308*  
04BC50             0309*  load_sfx_SHOT_GATLING_BURST:
04BC50 21 1E BE 04 0310*  	ld hl,FSHOT_GATLING_BURST
04BC54 22 C1 B7 04 0311*  	ld (cur_filename),hl
04BC58 11 CB C3 04 0312*  	ld de,filedata
04BC5C 01 00 00 01 0313*  	ld bc,65536
04BC60 3E 01       0314*  	ld a,mos_load
04BC62 5B CF       0315*  	RST.LIL 08h
04BC64 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04BC68 DD 21 00 60 0317*  	ld ix,24576
       00          
04BC6D CD A0 AE 04 0318*  	call vdu_load_sfx
04BC71 C9          0319*  	ret
04BC72             0320*  
04BC72             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04BC72 21 39 BE 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04BC76 22 C1 B7 04 0323*  	ld (cur_filename),hl
04BC7A 11 CB C3 04 0324*  	ld de,filedata
04BC7E 01 00 00 01 0325*  	ld bc,65536
04BC82 3E 01       0326*  	ld a,mos_load
04BC84 5B CF       0327*  	RST.LIL 08h
04BC86 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BC8A DD 21 C4 42 0329*  	ld ix,17092
       00          
04BC8F CD A0 AE 04 0330*  	call vdu_load_sfx
04BC93 C9          0331*  	ret
04BC94             0332*  
04BC94             0333*  load_sfx_SHOT_PISTOL:
04BC94 21 58 BE 04 0334*  	ld hl,FSHOT_PISTOL
04BC98 22 C1 B7 04 0335*  	ld (cur_filename),hl
04BC9C 11 CB C3 04 0336*  	ld de,filedata
04BCA0 01 00 00 01 0337*  	ld bc,65536
04BCA4 3E 01       0338*  	ld a,mos_load
04BCA6 5B CF       0339*  	RST.LIL 08h
04BCA8 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04BCAC DD 21 61 4B 0341*  	ld ix,19297
       00          
04BCB1 CD A0 AE 04 0342*  	call vdu_load_sfx
04BCB5 C9          0343*  	ret
04BCB6             0344*  
04BCB6             0345*  load_sfx_UGH:
04BCB6 21 6C BE 04 0346*  	ld hl,FUGH
04BCBA 22 C1 B7 04 0347*  	ld (cur_filename),hl
04BCBE 11 CB C3 04 0348*  	ld de,filedata
04BCC2 01 00 00 01 0349*  	ld bc,65536
04BCC6 3E 01       0350*  	ld a,mos_load
04BCC8 5B CF       0351*  	RST.LIL 08h
04BCCA 21 14 FB 00 0352*  	ld hl,BUF_UGH
04BCCE DD 21 A9 18 0353*  	ld ix,6313
       00          
04BCD3 CD A0 AE 04 0354*  	call vdu_load_sfx
04BCD7 C9          0355*  	ret
04BCD8             0356*  
04BCD8             0357*  load_sfx_WILHELM:
04BCD8 21 78 BE 04 0358*  	ld hl,FWILHELM
04BCDC 22 C1 B7 04 0359*  	ld (cur_filename),hl
04BCE0 11 CB C3 04 0360*  	ld de,filedata
04BCE4 01 00 00 01 0361*  	ld bc,65536
04BCE8 3E 01       0362*  	ld a,mos_load
04BCEA 5B CF       0363*  	RST.LIL 08h
04BCEC 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04BCF0 DD 21 D7 53 0365*  	ld ix,21463
       00          
04BCF5 CD A0 AE 04 0366*  	call vdu_load_sfx
04BCF9 C9          0367*  	ret
04BCFA             0368*  
04BCFA             0369*  ; File name lookups:
04BCFA 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04BD0A 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04BD16 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04BD23 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04BD30 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04BD42 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04BD5A 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04BD72 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04BD83 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04BD93 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04BDA8 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04BDBA 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04BDCD 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04BDDB 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04BDEE 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04BDFA 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04BE0F 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04BE1E 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BE39 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04BE58 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04BE6C 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04BE78 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04BE88             0392*  
04BE88             0393*  ; Play sfx routines
04BE88             0394*  
04BE88             0395*  sfx_play_achtung:
04BE88 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04BE8C 01 58 03 00 0397*  	ld bc,856
04BE90 C3 46 00 04 0398*  	jp vdu_play_sfx
04BE94             0399*  
04BE94             0400*  sfx_play_ahh:
04BE94 21 01 FB 00 0401*  	ld hl,BUF_AHH
04BE98 01 91 01 00 0402*  	ld bc,401
04BE9C C3 46 00 04 0403*  	jp vdu_play_sfx
04BEA0             0404*  
04BEA0             0405*  sfx_play_augh:
04BEA0 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04BEA4 01 FC 02 00 0407*  	ld bc,764
04BEA8 C3 46 00 04 0408*  	jp vdu_play_sfx
04BEAC             0409*  
04BEAC             0410*  sfx_play_ayee:
04BEAC 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04BEB0 01 E6 01 00 0412*  	ld bc,486
04BEB4 C3 46 00 04 0413*  	jp vdu_play_sfx
04BEB8             0414*  
04BEB8             0415*  sfx_play_ayee_high:
04BEB8 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04BEBC 01 40 04 00 0417*  	ld bc,1088
04BEC0 C3 46 00 04 0418*  	jp vdu_play_sfx
04BEC4             0419*  
04BEC4             0420*  sfx_play_dog_woof_double:
04BEC4 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04BEC8 01 63 02 00 0422*  	ld bc,611
04BECC C3 46 00 04 0423*  	jp vdu_play_sfx
04BED0             0424*  
04BED0             0425*  sfx_play_dog_woof_single:
04BED0 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04BED4 01 15 02 00 0427*  	ld bc,533
04BED8 C3 46 00 04 0428*  	jp vdu_play_sfx
04BEDC             0429*  
04BEDC             0430*  sfx_play_dog_yelp:
04BEDC 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04BEE0 01 B0 01 00 0432*  	ld bc,432
04BEE4 C3 46 00 04 0433*  	jp vdu_play_sfx
04BEE8             0434*  
04BEE8             0435*  sfx_play_explode:
04BEE8 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04BEEC 01 13 05 00 0437*  	ld bc,1299
04BEF0 C3 46 00 04 0438*  	jp vdu_play_sfx
04BEF4             0439*  
04BEF4             0440*  sfx_play_got_treasure:
04BEF4 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04BEF8 01 A7 05 00 0442*  	ld bc,1447
04BEFC C3 46 00 04 0443*  	jp vdu_play_sfx
04BF00             0444*  
04BF00             0445*  sfx_play_gun_empty:
04BF00 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04BF04 01 24 01 00 0447*  	ld bc,292
04BF08 C3 46 00 04 0448*  	jp vdu_play_sfx
04BF0C             0449*  
04BF0C             0450*  sfx_play_gun_reload:
04BF0C 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04BF10 01 BA 01 00 0452*  	ld bc,442
04BF14 C3 46 00 04 0453*  	jp vdu_play_sfx
04BF18             0454*  
04BF18             0455*  sfx_play_knife:
04BF18 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04BF1C 01 F2 00 00 0457*  	ld bc,242
04BF20 C3 46 00 04 0458*  	jp vdu_play_sfx
04BF24             0459*  
04BF24             0460*  sfx_play_mein_leben:
04BF24 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04BF28 01 2E 03 00 0462*  	ld bc,814
04BF2C C3 46 00 04 0463*  	jp vdu_play_sfx
04BF30             0464*  
04BF30             0465*  sfx_play_oof:
04BF30 21 0E FB 00 0466*  	ld hl,BUF_OOF
04BF34 01 CE 03 00 0467*  	ld bc,974
04BF38 C3 46 00 04 0468*  	jp vdu_play_sfx
04BF3C             0469*  
04BF3C             0470*  sfx_play_schusstaffel:
04BF3C 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04BF40 01 48 02 00 0472*  	ld bc,584
04BF44 C3 46 00 04 0473*  	jp vdu_play_sfx
04BF48             0474*  
04BF48             0475*  sfx_play_scream:
04BF48 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04BF4C 01 E0 02 00 0477*  	ld bc,736
04BF50 C3 46 00 04 0478*  	jp vdu_play_sfx
04BF54             0479*  
04BF54             0480*  sfx_play_shot_gatling_burst:
04BF54 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04BF58 01 B6 05 00 0482*  	ld bc,1462
04BF5C C3 46 00 04 0483*  	jp vdu_play_sfx
04BF60             0484*  
04BF60             0485*  sfx_play_shot_machine_gun_burst:
04BF60 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04BF64 01 F9 03 00 0487*  	ld bc,1017
04BF68 C3 46 00 04 0488*  	jp vdu_play_sfx
04BF6C             0489*  
04BF6C             0490*  sfx_play_shot_pistol:
04BF6C 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04BF70 01 7C 04 00 0492*  	ld bc,1148
04BF74 C3 46 00 04 0493*  	jp vdu_play_sfx
04BF78             0494*  
04BF78             0495*  sfx_play_ugh:
04BF78 21 14 FB 00 0496*  	ld hl,BUF_UGH
04BF7C 01 77 01 00 0497*  	ld bc,375
04BF80 C3 46 00 04 0498*  	jp vdu_play_sfx
04BF84             0499*  
04BF84             0500*  sfx_play_wilhelm:
04BF84 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04BF88 01 FD 04 00 0502*  	ld bc,1277
04BF8C C3 46 00 04 0503*  	jp vdu_play_sfx
04BF90             0030   	include "src/asm/timer.asm"
04BF90             0001*  ; Table 32. Timer Control Registers
04BF90             0002*  ; this constant is the base address of the timer control registers
04BF90             0003*  ; each timer takes three bytes:
04BF90             0004*  ;   0: control register
04BF90             0005*  ;   1: low byte of timer reset value
04BF90             0006*  ;   2: high byte of timer reset value
04BF90             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04BF90             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04BF90             0009*  TMR_CTL:     equ 80h
04BF90             0010*  
04BF90             0011*  ; Timer Control Register Bit Definitions
04BF90             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04BF90             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04BF90             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04BF90             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04BF90             0016*                              ; the TMRx_CTL register is read.
04BF90             0017*  
04BF90             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04BF90             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04BF90             0020*  
04BF90             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04BF90             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04BF90             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04BF90             0024*                              ; written to the counter when the end-of-count value is reached.
04BF90             0025*  
04BF90             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04BF90             0027*  CLK_DIV_256:  equ %00001100 ;
04BF90             0028*  CLK_DIV_64:   equ %00001000 ;
04BF90             0029*  CLK_DIV_16:   equ %00000100 ;
04BF90             0030*  CLK_DIV_4:    equ %00000000 ;
04BF90             0031*  
04BF90             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04BF90             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04BF90             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04BF90             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04BF90             0036*                              ; programmer must ensure that this bit is set to 1 each time
04BF90             0037*                              ; SINGLE-PASS mode is used.
04BF90             0038*  
04BF90             0039*  ; disable/enable the programmable reload timer
04BF90             0040*  PRT_EN_0:     equ %00000000 ;
04BF90             0041*  PRT_EN_1:     equ %00000001 ;
04BF90             0042*  
04BF90             0043*  ; Table 37. Timer Input Source Select Register
04BF90             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04BF90             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04BF90             0046*  ;   00: System clock / CLK_DIV
04BF90             0047*  ;   01: RTC / CLK_DIV
04BF90             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04BF90             0049*  ;   10: GPIO port B pin 1.
04BF90             0050*  ;   11: GPIO port B pin 1.
04BF90             0051*  TMR_ISS:   equ 92h ; register address
04BF90             0052*  
04BF90             0053*  ; Table 51. Real-Time Clock Control Register
04BF90             0054*  RTC_CTRL: equ EDh ; register address
04BF90             0055*  
04BF90             0056*  ; alarm interrupt disable/enable
04BF90             0057*  RTC_ALARM_0:    equ %00000000
04BF90             0058*  RTC_ALARM_1:    equ %10000000
04BF90             0059*  
04BF90             0060*  ; interrupt on alarm disable/enable
04BF90             0061*  RTC_INT_ENT_0:  equ %00000000
04BF90             0062*  RTC_INT_ENT_1:  equ %01000000
04BF90             0063*  
04BF90             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04BF90             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04BF90             0066*  
04BF90             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04BF90             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04BF90             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04BF90             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04BF90             0071*  
04BF90             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04BF90             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04BF90             0074*  
04BF90             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04BF90             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04BF90             0077*  
04BF90             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04BF90             0079*                                  ; RTC counter is enabled.
04BF90             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04BF90             0081*                                  ; RTC counter is disabled.
04BF90             0082*  
04BF90             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04BF90             0084*  
04BF90             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04BF90             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04BF90 00 00 00    0087*  prt_reload: dl 0x000000
04BF93             0088*  
04BF93             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04BF93             0090*  ;          de = number PRT interrupts during test interval
04BF93             0091*  prt_calibrate:
04BF93 CD 07 AB 04 0092*      call vdu_vblank
04BF97             0093*  ; set a MOS timer
04BF97 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04BF9B FD 21 EE C0 0095*      ld iy,tmr_test
       04          
04BFA0 CD CC C0 04 0096*      call tmr_set
04BFA4             0097*  ; set a PRT timer
04BFA4             0098*      ; ld hl,prt_reload_hardware
04BFA4             0099*      ; ld hl,prt_reload_emulator
04BFA4 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04BFA8 22 90 BF 04 0101*      ld (prt_reload),hl
04BFAC CD 07 C0 04 0102*      call prt_set
04BFB0             0103*  @loop:
04BFB0             0104*  ; check time remaining on MOS timer
04BFB0 CD DA C0 04 0105*      call tmr_get
04BFB4 CA BE BF 04 0106*      jp z,@done ; time expired,so quit
04BFB8 FA BE BF 04 0107*      jp m,@done ; time past expiration (negative),so quit
04BFBC 18 F2       0108*      jr @loop
04BFBE             0109*  @done:
04BFBE ED 5B 55 C0 0110*      ld de,(prt_irq_counter)
       04          
04BFC3 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04BFC7 ED 43 90 BF 0112*      ld (prt_reload),bc
       04          
04BFCC 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04BFD0 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04BFD1 32 DE C1 04 0115*      ld (is_emulator),a
04BFD5 ED 52       0116*      sbc hl,de
04BFD7 21 F6 C1 04 0117*      ld hl,on_hardware ; default message for running on hardware
04BFDB CA 93 BF 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04BFDF F8          0119*      ret m ; negative result means we're on hardware
04BFE0 3C          0120*      inc a ; we're on emulator
04BFE1 32 DE C1 04 0121*      ld (is_emulator),a
04BFE5 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04BFE9 ED 43 90 BF 0123*      ld (prt_reload),bc
       04          
04BFEE 21 DF C1 04 0124*      ld hl,on_emulator
04BFF2 C9          0125*      ret
04BFF3             0126*  
04BFF3 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04C007             0128*  
04C007             0129*  ; set PRT timer
04C007             0130*  prt_set:
04C007 21 00 00 00 0131*      ld hl,0
04C00B 22 55 C0 04 0132*      ld (prt_irq_counter),hl
04C00F 2A 90 BF 04 0133*      ld hl,(prt_reload)
04C013 ED 29 84    0134*      out0 ($84),l
04C016 ED 21 85    0135*  	out0 ($85),h
04C019             0136*  ; disable timer
04C019 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04C01B ED 39 83    0138*  	out0 ($83),a
04C01E             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04C01E 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04C020 ED 39 83    0141*  	out0 ($83),a
04C023 C9          0142*      ret
04C024             0143*  
04C024             0144*  ; ===============================================
04C024             0145*  ; PRT Timer Interrupt Handling
04C024             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04C024             0147*  ; -----------------------------------------------
04C024             0148*  prt_irq_init:
04C024             0149*      ; set up interrupt vector table 2
04C024 21 00 00 00 0150*  	ld hl,0
04C028 3A 0C 01 00 0151*  	ld a,($10c)
04C02C 6F          0152*  	ld l,a
04C02D 3A 0D 01 00 0153*  	ld a,($10d)
04C031 67          0154*  	ld h,a
04C032             0155*  
04C032             0156*  	; skip over CALL ($c3)
04C032 23          0157*  	inc hl
04C033             0158*  	; load address of jump into vector table 2 (in ram)
04C033 ED 27       0159*  	ld hl,(hl)
04C035             0160*  
04C035             0161*  	; write CALL prt_irq_handler to vector table 2
04C035 3E C3       0162*  	ld a,$c3
04C037 77          0163*  	ld (hl),a
04C038 23          0164*  	inc hl
04C039 11 40 C0 04 0165*  	ld de,prt_irq_handler
04C03D ED 1F       0166*  	ld (hl),de
04C03F             0167*  
04C03F C9          0168*      ret
04C040             0169*  
04C040             0170*  prt_irq_handler:
04C040 F3          0171*  	di
04C041 F5          0172*  	push af
04C042 E5          0173*      push hl
04C043 ED 38 83    0174*  	in0 a,($83)
04C046 2A 55 C0 04 0175*  	ld hl,(prt_irq_counter)
04C04A 23          0176*  	inc hl
04C04B 22 55 C0 04 0177*  	ld (prt_irq_counter),hl
04C04F E1          0178*      pop hl
04C050 F1          0179*  	pop af
04C051 FB          0180*  	ei
04C052 5B ED 4D    0181*  	reti.l
04C055             0182*  
04C055             0183*  prt_irq_counter:
04C055 00 00 00    0184*  	.dl 0
04C058             0185*  prt_irq_counter_saved:
04C058 00 00 00    0186*      .dl 0
04C05B             0187*  
04C05B             0188*  prt_loop_reset:
04C05B E5          0189*      push hl
04C05C 21 00 00 00 0190*  	ld hl,0
04C060 22 55 C0 04 0191*  	ld (prt_irq_counter),hl
04C064 22 C6 C0 04 0192*      ld (prt_loop_counter),hl
04C068 22 C9 C0 04 0193*      ld (prt_loops),hl
04C06C CD 07 C0 04 0194*      call prt_set
04C070 E1          0195*      pop hl
04C071 C9          0196*      ret
04C072             0197*  
04C072             0198*  prt_loop_start:
04C072 E5          0199*      push hl
04C073 21 00 00 00 0200*  	ld hl,0
04C077 22 55 C0 04 0201*  	ld (prt_irq_counter),hl
04C07B E1          0202*      pop hl
04C07C C9          0203*      ret
04C07D             0204*  
04C07D             0205*  prt_loop_stop:
04C07D E5          0206*      push hl
04C07E D5          0207*      push de
04C07F 2A 55 C0 04 0208*      ld hl,(prt_irq_counter)
04C083 ED 5B C6 C0 0209*      ld de,(prt_loop_counter)
       04          
04C088 19          0210*      add hl,de
04C089 22 C6 C0 04 0211*      ld (prt_loop_counter),hl
04C08D 21 00 00 00 0212*      ld hl,0
04C091 22 55 C0 04 0213*      ld (prt_irq_counter),hl
04C095 2A C9 C0 04 0214*      ld hl,(prt_loops)
04C099 23          0215*      inc hl
04C09A 22 C9 C0 04 0216*      ld (prt_loops),hl
04C09E D1          0217*      pop de
04C09F E1          0218*      pop hl
04C0A0 C9          0219*      ret
04C0A1             0220*  
04C0A1             0221*  ; inputs: bc = y,x text coordinates to print
04C0A1             0222*  prt_loop_print:
04C0A1 F5          0223*      push af
04C0A2 E5          0224*      push hl
04C0A3 C5          0225*      push bc
04C0A4 D5          0226*      push de
04C0A5 DD E5       0227*      push ix
04C0A7 FD E5       0228*      push iy
04C0A9 CD EA A9 04 0229*      call vdu_move_cursor
04C0AD             0230*  
04C0AD 2A C6 C0 04 0231*      ld hl,(prt_loop_counter)
04C0B1 CD FA AE 04 0232*      call printDec
04C0B5             0233*  
04C0B5 2A C9 C0 04 0234*      ld hl,(prt_loops)
04C0B9 CD FA AE 04 0235*      call printDec
04C0BD             0236*  
04C0BD FD E1       0237*      pop iy
04C0BF DD E1       0238*      pop ix
04C0C1 D1          0239*      pop de
04C0C2 C1          0240*      pop bc
04C0C3 E1          0241*      pop hl
04C0C4 F1          0242*      pop af
04C0C5 C9          0243*      ret
04C0C6             0244*  
04C0C6             0245*  prt_loop_counter:
04C0C6 00 00 00    0246*      .dl 0
04C0C9             0247*  prt_loops:
04C0C9 00 00 00    0248*      .dl 0
04C0CC             0249*  
04C0CC             0250*  ; ===============================================
04C0CC             0251*  ; Timer functions
04C0CC             0252*  ; -----------------------------------------------
04C0CC             0253*  ; set a countdown timer
04C0CC             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C0CC             0255*  ; returns: hl = current time
04C0CC             0256*  tmr_set:
04C0CC FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04C0CF             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04C0CF 3E 08       0001*M 			LD	A, function
04C0D1 5B CF       0002*M 			RST.LIL	08h
04C0D3 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04C0D6 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04C0D9 C9          0261*      ret
04C0DA             0262*  
04C0DA             0263*  ; gets time remaining on a countdown timer
04C0DA             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C0DA             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C0DA             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C0DA             0267*  tmr_get:
04C0DA             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04C0DA 3E 08       0001*M 			LD	A, function
04C0DC 5B CF       0002*M 			RST.LIL	08h
04C0DE DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04C0E1 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04C0E4 AF          0271*      xor a                   ; clear carry
04C0E5 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C0E7 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04C0EA AF          0274*      xor a                   ; clear carry
04C0EB ED 5A       0275*      adc hl,de               ; hl = time remaining
04C0ED             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C0ED C9          0277*      ret
04C0EE             0278*  
04C0EE             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04C0F4             0280*  
04C0F4 00 00 00    0281*  timestamp_now: dl 0
04C0F7 00 00 00    0282*  timestamp_old: dl 0
04C0FA 00 00 00    0283*  timestamp_chg: dl 0
04C0FD             0284*  
04C0FD             0285*  ; update the global timestamp from the system clock
04C0FD             0286*  ; inputs: none
04C0FD             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04C0FD             0288*  ;          de = current time
04C0FD             0289*  ;          ix = pointer to syvars table
04C0FD             0290*  ; destroys: af,hl,de,ix
04C0FD             0291*  timestamp_tick:
04C0FD ED 5B F4 C0 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04C102 ED 53 F7 C0 0293*      ld (timestamp_old),de   ; save previous time
       04          
04C107             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04C107 3E 08       0001*M 			LD	A, function
04C109 5B CF       0002*M 			RST.LIL	08h
04C10B DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04C10E 22 F4 C0 04 0296*      ld (timestamp_now),hl   ; save current time
04C112 AF          0297*      xor a                   ; clear carry
04C113 ED 52       0298*      sbc hl,de               ; hl = time elapsed
04C115 22 FA C0 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04C119 C9          0300*      ret
04C11A             0301*  
04C11A             0302*  ; set a countdown timer
04C11A             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C11A             0304*  ; requires: timestamp_tick to be called at least once before this function
04C11A             0305*  ; returns: hl = current time
04C11A             0306*  ; destroys: hl
04C11A             0307*  timestamp_tmr_set:
04C11A FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04C11D 2A F4 C0 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04C121 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04C124 C9          0311*      ret
04C125             0312*  
04C125             0313*  ; gets time remaining on a countdown timer following the global timestamp
04C125             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C125             0315*  ; requires: timestamp_tick to be called at least once before this function
04C125             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C125             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C125             0318*  ; destroys: af,hl,de
04C125             0319*  timestamp_tmr_get:
04C125 ED 5B F4 C0 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04C12A FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04C12D AF          0322*      xor a                   ; clear carry
04C12E ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C130 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04C133 AF          0325*      xor a                   ; clear carry
04C134 ED 5A       0326*      adc hl,de               ; hl = time remaining
04C136             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C136 C9          0328*      ret
04C137             0329*  
04C137             0330*  ; set a stopwatch
04C137             0331*  ; returns: hl = start time
04C137             0332*  ; destroys: hl,ix
04C137             0333*  stopwatch_set:
04C137             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04C137 3E 08       0001*M 			LD	A, function
04C139 5B CF       0002*M 			RST.LIL	08h
04C13B DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04C13E 22 53 C1 04 0336*      ld (stopwatch_started),hl            ; set start time
04C142 C9          0337*      ret
04C143             0338*  
04C143             0339*  ; gets time elapsed on a stopwatch
04C143             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04C143             0341*  ; destroys: af,hl,de,ix
04C143             0342*  stopwatch_get:
04C143             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04C143 3E 08       0001*M 			LD	A, function
04C145 5B CF       0002*M 			RST.LIL	08h
04C147 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04C14A ED 5B 53 C1 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04C14F AF          0346*      xor a                   ; clear carry
04C150 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04C152 C9          0348*      ret
04C153             0349*  
04C153             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04C156             0351*  
04C156             0352*  ; ------------------
04C156             0353*  ; delay routine
04C156             0354*  ; Author: Richard Turrnidge
04C156             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04C156             0356*  ; routine waits a fixed time,then returns
04C156             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04C156             0358*  ; eg. ld A,00000100b
04C156             0359*  
04C156             0360*  multiPurposeDelay:
04C156 F5          0361*      push af
04C157 C5          0362*      push bc
04C158 DD E5       0363*      push ix
04C15A 47          0364*      ld b,a
04C15B 3E 08       0365*      ld a,$08
04C15D 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04C15F             0367*  
04C15F             0368*  waitLoop:
04C15F             0369*  
04C15F DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04C162             0371*  
04C162             0372*                                  ;   we check if bit set is same as last time we checked.
04C162             0373*                                  ;   bit 0 - don't use
04C162             0374*                                  ;   bit 1 - changes 64 times per second
04C162             0375*                                  ;   bit 2 - changes 32 times per second
04C162             0376*                                  ;   bit 3 - changes 16 times per second
04C162             0377*  
04C162             0378*                                  ;   bit 4 - changes 8 times per second
04C162             0379*                                  ;   bit 5 - changes 4 times per second
04C162             0380*                                  ;   bit 6 - changes 2 times per second
04C162             0381*                                  ;   bit 7 - changes 1 times per second
04C162 A0          0382*      and b
04C163 4F          0383*      ld c,a
04C164 3A 75 C1 04 0384*      ld a,(oldTimeStamp)
04C168 B9          0385*      cp c                        ; is A same as last value?
04C169 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04C16B 79          0387*      ld a,c
04C16C 32 75 C1 04 0388*      ld (oldTimeStamp),a        ; set new value
04C170             0389*  
04C170 DD E1       0390*      pop ix
04C172 C1          0391*      pop bc
04C173 F1          0392*      pop af
04C174 C9          0393*      ret
04C175             0394*  
04C175 00          0395*  oldTimeStamp:   .db 00h
04C176             0031   
04C176             0032   
04C176             0033   start:
04C176 F5          0034       push af
04C177 C5          0035       push bc
04C178 D5          0036       push de
04C179 DD E5       0037       push ix
04C17B FD E5       0038       push iy
04C17D             0039   
04C17D CD 0D C2 04 0040   	call init ; Initialization code
04C181 CD 2A C3 04 0041       call main ; Call the main function
04C185             0042   
04C185             0043   exit:
04C185             0044   
04C185 FD E1       0045       pop iy
04C187 DD E1       0046       pop ix
04C189 D1          0047       pop de
04C18A C1          0048       pop bc
04C18B F1          0049       pop af
04C18C 21 00 00 00 0050       ld hl,0
04C190             0051   
04C190 C9          0052       ret
04C191             0053   
04C191 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04C1A8 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04C1B3 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04C1C1 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04C1DE 00          0058   is_emulator: defb 0
04C1DF 52 75 6E 6E 0059   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04C1F6 52 75 6E 6E 0060   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
04C20D             0061   
04C20D             0062   init:
04C20D             0063   ; start generic stopwatch to time setup loop
04C20D             0064   ; so we can determine if we're running on emulator or hardware
04C20D CD 37 C1 04 0065   	call stopwatch_set
04C211             0066   
04C211             0067   ; initialize global timestamp
04C211 DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04C214 22 F4 C0 04 0069       ld (timestamp_now),hl
04C218             0070   
04C218             0071   ; set the cursor off
04C218 CD F9 AA 04 0072   	call cursor_off
04C21C             0073   
04C21C             0074   ; print loading ui message
04C21C 21 A8 C1 04 0075   	ld hl,loading_ui
04C220 CD AC AE 04 0076   	call printString
04C224             0077   
04C224             0078   ; load fonts
04C224 CD A2 7E 04 0079   	call load_font_itc_honda
04C228 CD 85 8F 04 0080   	call load_font_retro_computer
04C22C             0081   
04C22C             0082   ; load UI images
04C22C CD 0E 98 04 0083   	call load_ui_images
04C230 CD DC 99 04 0084   	call load_ui_images_bj
04C234             0085   
04C234             0086   ; set up the display
04C234 3E 88       0087       ld a,8+128 ; 320x240x64 double-buffered
04C236 CD 3A A9 04 0088       call vdu_set_screen_mode
04C23A AF          0089       xor a
04C23B CD 69 AA 04 0090       call vdu_set_scaling
04C23F             0091   
04C23F             0092   ; set text background color
04C23F 3E 84       0093   	ld a,4 + 128
04C241 CD C6 A8 04 0094   	call vdu_colour_text
04C245             0095   
04C245             0096   ; set gfx bg color
04C245 AF          0097   	xor a ; plotting mode 0
04C246 0E 04       0098   	ld c,4 ; dark blue
04C248 CD EE A8 04 0099   	call vdu_gcol_bg
04C24C CD C1 A8 04 0100   	call vdu_clg
04C250             0101   
04C250             0102   ; set the cursor off again since we changed screen modes
04C250 CD F9 AA 04 0103   	call cursor_off
04C254             0104   
04C254             0105   ; VDU 28, left, bottom, right, top: Set text viewport **
04C254             0106   ; MIND THE LITTLE-ENDIANESS
04C254             0107   ; inputs: c=left,b=bottom,e=right,d=top
04C254 0E 00       0108   	ld c,0 ; left
04C256 16 14       0109   	ld d,20 ; top
04C258 1E 27       0110   	ld e,39 ; right
04C25A 06 1D       0111   	ld b,29; bottom
04C25C CD AF A9 04 0112   	call vdu_set_txt_viewport
04C260             0113   
04C260             0114   ; initialize image load routine
04C260 CD CD B7 04 0115   	call img_load_init
04C264             0116   
04C264             0117   ; load panels
04C264 01 13 01 00 0118   	ld bc,cube_num_panels
04C268 21 20 02 04 0119   	ld hl,cube_buffer_id_lut
04C26C 22 C7 B7 04 0120   	ld (cur_buffer_id_lut),hl
04C270 21 59 05 04 0121   	ld hl,cube_load_panels_table
04C274 22 CA B7 04 0122   	ld (cur_load_jump_table),hl
04C278 CD 02 B8 04 0123   	call img_load_main
04C27C             0124   
04C27C             0125   ; load sprites
04C27C 01 5A 00 00 0126   	ld bc,sprite_num_panels
04C280 21 2C 4B 04 0127   	ld hl,sprite_buffer_id_lut
04C284 22 C7 B7 04 0128   	ld (cur_buffer_id_lut),hl
04C288 21 3A 4C 04 0129   	ld hl,sprite_load_panels_table
04C28C 22 CA B7 04 0130   	ld (cur_load_jump_table),hl
04C290 CD 02 B8 04 0131   	call img_load_main
04C294             0132   
04C294             0133   ; load distance walls
04C294 01 09 00 00 0134   	ld bc,dws_num_panels
04C298 21 14 63 04 0135   	ld hl,dws_buffer_id_lut
04C29C 22 C7 B7 04 0136   	ld (cur_buffer_id_lut),hl
04C2A0 21 2F 63 04 0137   	ld hl,dws_load_panels_table
04C2A4 22 CA B7 04 0138   	ld (cur_load_jump_table),hl
04C2A8 CD 02 B8 04 0139   	call img_load_main
04C2AC             0140   
04C2AC             0141   ; load sound effects
04C2AC 01 16 00 00 0142   	ld bc,SFX_num_buffers
04C2B0 21 5E B9 04 0143   	ld hl,SFX_buffer_id_lut
04C2B4 22 C7 B7 04 0144   	ld (cur_buffer_id_lut),hl
04C2B8 21 CC B9 04 0145   	ld hl,SFX_load_routines_table
04C2BC 22 CA B7 04 0146   	ld (cur_load_jump_table),hl
04C2C0 CD 07 AE 04 0147   	call sfx_load_main
04C2C4             0148   
04C2C4             0149   ; self modify vdu_play_sfx to enable sound
04C2C4 AF          0150   	xor a
04C2C5 32 46 00 04 0151   	ld (vdu_play_sfx_disable),a
04C2C9             0152   
04C2C9             0153   ; use loading time to determine if we're running on emulator or hardware
04C2C9 CD 43 C1 04 0154   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C2CD 11 40 1F 00 0155   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04C2D1 AF          0156   	xor a ; clear carry, default is running on hardware
04C2D2 32 DE C1 04 0157   	ld (is_emulator),a
04C2D6 ED 52       0158   	sbc hl,de
04C2D8 FA EC C2 04 0159   	jp m,@on_emulator
04C2DC CD E5 A9 04 0160   	call vdu_home_cursor
04C2E0 21 F6 C1 04 0161   	ld hl,on_hardware
04C2E4 CD AC AE 04 0162   	call printString
04C2E8 C3 FE C2 04 0163   	jp @test_done
04C2EC             0164   
04C2EC             0165   @on_emulator:
04C2EC             0166   ; print emulator message
04C2EC 3E 01       0167   	ld a,1
04C2EE 32 DE C1 04 0168   	ld (is_emulator),a
04C2F2 CD E5 A9 04 0169   	call vdu_home_cursor
04C2F6 21 DF C1 04 0170   	ld hl,on_emulator
04C2FA CD AC AE 04 0171   	call printString
04C2FE             0172   
04C2FE             0173   @test_done:
04C2FE             0174   ; print final loading time
04C2FE 21 B3 C1 04 0175   	ld hl,loading_time
04C302 CD AC AE 04 0176   	call printString
04C306 CD 43 C1 04 0177   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C30A CD FA AE 04 0178   	call printDec
04C30E CD C1 AE 04 0179   	call printNewLine
04C312             0180   
04C312             0181   ; print loading complete message and wait for user keypress
04C312 21 C1 C1 04 0182   	ld hl,loading_complete
04C316 CD AC AE 04 0183   	call printString
04C31A CD 7C AA 04 0184   	call vdu_flip
04C31E CD 2C B2 04 0185   	call waitKeypress
04C322             0186   
04C322             0187   ; initialization done
04C322 C9          0188   	ret
04C323             0189   
04C323             0190   ; DEBUG: set up a simple countdown timer
04C323 01          0191   debug_timer: db 0x01
04C324             0192   
04C324             0193   main_loop_tmr: ds 6
04C32A             0194   framerate: equ 30
04C32A             0195   
04C32A             0196   main:
04C32A             0197   ; set map variables and load initial map file
04C32A CD 3C 66 04 0198   	call map_init
04C32E             0199   ; initialize player position
04C32E CD 22 B3 04 0200   	call plyr_init
04C332             0201   
04C332             0202   main_loop:
04C332             0203   ; update global timestamp
04C332 CD FD C0 04 0204       call timestamp_tick
04C336             0205   
04C336             0206   ; move enemies
04C336 CD AC A7 04 0207   	call sprites_see_plyr ; 220-285  prt ticks
04C33A             0208   
04C33A             0209   ; get player input and update sprite position
04C33A             0210   	; 0-1 prt ticks
04C33A CD 21 B6 04 0211   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04C33E             0212   
04C33E             0213   ; render the updated scene
04C33E CD 3F 68 04 0214   	call render_scene ; 6-12 prt ticks
04C342             0215   ; full loop 12-16 prt ticks
04C342             0216   
04C342             0217   ; flip the screen
04C342 CD 7C AA 04 0218   	call vdu_flip
04C346             0219   
04C346             0220   @wait:
04C346 FD 21 24 C3 0221   	ld iy,main_loop_tmr
       04          
04C34B CD DA C0 04 0222   	call tmr_get
04C34F CA 5B C3 04 0223   	jp z,@continue
04C353 FA 5B C3 04 0224   	jp m,@continue
04C357 C3 46 C3 04 0225   	jp @wait
04C35B             0226   @continue:
04C35B             0227   
04C35B             0228   ; reset main loop timer
04C35B FD 21 24 C3 0229   	ld iy,main_loop_tmr
       04          
04C360 21 04 00 00 0230   	ld hl,120/framerate
04C364 CD CC C0 04 0231   	call tmr_set
04C368             0232   
04C368             0233   ; check for escape key and quit if pressed
04C368             0234   	MOSCALL mos_getkbmap
04C368 3E 1E       0001M  			LD	A, function
04C36A 5B CF       0002M  			RST.LIL	08h
04C36C             0235   ; 113 Escape
04C36C DD CB 0E 46 0236       bit 0,(ix+14)
04C370 20 02       0237   	jr nz,main_end
04C372             0238   @Escape:
04C372 18 BE       0239   	jr main_loop
04C374             0240   
04C374             0241   main_end:
04C374             0242   	; call do_outro
04C374             0243   ; restore screen to something normalish
04C374 AF          0244   	xor a
04C375 CD 3A A9 04 0245   	call vdu_set_screen_mode
04C379 CD EB AA 04 0246   	call cursor_on
04C37D C9          0247   	ret
04C37E             0248   
04C37E             0249   ; files.asm must go here so that filedata doesn't stomp on program data
04C37E             0250   	include "src/asm/files.asm"
04C37E             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04C37E             0002*  ; inputs: hl = bufferId, ix = file size
04C37E             0003*  vdu_load_buffer_from_file:
04C37E             0004*  	; load buffer ids
04C37E 22 BB C3 04 0005*  		ld (@id0),hl
04C382 22 C1 C3 04 0006*  		ld (@id1),hl
04C386 22 C6 C3 04 0007*  		ld (@id2),hl
04C38A             0008*  	; clean up bytes that got stomped on by the ID loads
04C38A 3E 02       0009*  		ld a,2
04C38C 32 BD C3 04 0010*  		ld (@id0+2),a
04C390 3E 17       0011*  		ld a,23
04C392 32 C3 C3 04 0012*  		ld (@id1+2),a
04C396 AF          0013*  		xor a
04C397 32 C8 C3 04 0014*  		ld (@id2+2),a
04C39B             0015*  	; read size from ix
04C39B DD 7D       0016*  		ld a,ixl
04C39D 32 C9 C3 04 0017*  		ld (@size),a
04C3A1 DD 7C       0018*  		ld a,ixh
04C3A3 32 CA C3 04 0019*  		ld (@size+1),a
04C3A7             0020*  	; get all the ducks in a row for the vdu call
04C3A7 01 13 00 00 0021*  		ld bc,filedata-@start
04C3AB DD 09       0022*  		add ix,bc
04C3AD DD 44       0023*  		ld b,ixh
04C3AF DD 4D       0024*  		ld c,ixl
04C3B1 21 B8 C3 04 0025*  		ld hl,@start
04C3B5             0026*  	; push the button
04C3B5 5B DF       0027*  		rst.lil $18
04C3B7             0028*  	; back to caller
04C3B7 C9          0029*  		ret
04C3B8             0030*  ; vdp command string:
04C3B8 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04C3BB 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04C3BD 02          0033*  		db 2
04C3BE             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04C3BE 17 1B 20    0035*  		db 23,27,0x20
04C3C1 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04C3C3             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04C3C3 17 00 A0    0038*  		db 23,0,0xA0
04C3C6 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04C3C8 00          0040*  		db 0
04C3C9             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04C3C9 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04C3CB             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04C3CB             0044*  	; ds 65536 ; placeholder for file data	DEBUG
