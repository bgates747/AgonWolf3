PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 BC 37 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.inc" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.inc
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.inc
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.inc" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  max_channels: equ 6
040046             0003*  
040046             0004*  vdu_play_sfx:
040046 C9          0005*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0006*      ld (@bufferId),hl
04004B ED 43 89 00 0007*      ld (@duration),bc
       04          
040050 3E 17       0008*      ld a,23
040052 32 81 00 04 0009*      ld (@bufferId+2),a
040056 3A 45 00 04 0010*      ld a,(last_channel)
04005A 3C          0011*      inc a
04005B             0012*      ; and 31 ; modulo 32
04005B FE 06       0013*      cp max_channels
04005D C2 62 00 04 0014*      jp nz,@load_channel
040061 AF          0015*      xor a
040062             0016*  @load_channel:
040062 32 45 00 04 0017*      ld (last_channel),a
040066 32 7C 00 04 0018*      ld (@channel0),a
04006A 32 84 00 04 0019*      ld (@channel1),a
04006E 21 79 00 04 0020*      ld hl, @sample
040072 01 12 00 00 0021*      ld bc, @sample_end - @sample
040076 5B DF       0022*      rst.lil $18
040078 C9          0023*      ret
040079             0024*  @sample:
040079             0025*  ; Command 4: Set waveform
040079             0026*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0027*      .db 23,0,$85                        ; do sound
04007C             0028*  @channel0:
04007C 00 04 08    0029*      .db 0,4,8 ; channel, command, waveform
04007F             0030*  @bufferId:
04007F 00 00       0031*      .dw 0x0000
040081             0032*  ; Command 0: Play note
040081             0033*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0034*      .db 23,0,$85                        ; do sound
040084             0035*  @channel1:
040084 00 00 7F    0036*      .db 0,0,127                ; channel, volume
040087 00 00       0037*      .dw 0
040089             0038*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0039*      .dw 0x0000                        ; duration
04008B             0040*  @sample_end:
04008B 00          0041*      .db 0x00 ; padding
04008C             0042*  
04008C             0043*  ; enable enough additional channels so that total enabled = max_channels
04008C             0044*  ; inputs: max_channels set
04008C             0045*  ; returns: nothing
04008C             0046*  ; destroys: af, bc, hl
04008C             0047*  vdu_enable_channels:
04008C 3E 06       0048*      ld a,max_channels
04008E D6 03       0049*      sub 3 ; subtract number of default channels already enabled
040090 F2 97 00 04 0050*      jp p,@loop
040094 C9          0051*      ret
040095 3E 03       0052*      ld a,3 ; first non-default channel
040097             0053*  @loop:
040097 32 B2 00 04 0054*      ld (@channel),a
04009B 21 AF 00 04 0055*      ld hl,@beg
04009F 01 05 00 00 0056*      ld bc,@end-@beg
0400A3 F5          0057*      push af
0400A4 5B DF       0058*      rst.lil $18
0400A6 F1          0059*      pop af
0400A7 3C          0060*      inc a
0400A8 FE 06       0061*      cp max_channels
0400AA C2 97 00 04 0062*      jp nz,@loop
0400AE C9          0063*      ret
0400AF             0064*  @beg:
0400AF 17 00 85    0065*              db 23, 0, $85
0400B2 00          0066*  @channel:   db 0
0400B3 08          0067*              db 8 ; command 8: enable channel
0400B4             0068*  @end:
0400B4             0069*  
0400B4             0070*  ; disable all but the three default sound channels
0400B4             0071*  ; inputs: max_channels set
0400B4             0072*  ; outputs: none
0400B4             0073*  ; destroys: ah,hl,bc
0400B4             0074*  vdu_disable_channels:
0400B4 3E 06       0075*      ld a,max_channels
0400B6 D6 03       0076*      sub 3 ; subtract number of default channels already enabled
0400B8 F2 BF 00 04 0077*      jp p,@loop
0400BC C9          0078*      ret
0400BD 3E 03       0079*      ld a,3 ; first non-default channel
0400BF             0080*  @loop:
0400BF 32 DA 00 04 0081*      ld (@channel),a
0400C3 21 D7 00 04 0082*      ld hl,@beg
0400C7 01 05 00 00 0083*      ld bc,@end-@beg
0400CB F5          0084*      push af
0400CC 5B DF       0085*      rst.lil $18
0400CE F1          0086*      pop af
0400CF 3C          0087*      inc a
0400D0 FE 06       0088*      cp max_channels
0400D2 C2 BF 00 04 0089*      jp nz,@loop
0400D6 C9          0090*      ret
0400D7             0091*  @beg:
0400D7 17 00 85    0092*      db 23, 0, $85
0400DA 00          0093*  @channel: db 0
0400DB 09          0094*      db 9 ; command 9: disable channel
0400DC             0095*  @end:
0400DC             0096*  
0400DC             0097*  
0400DC             0098*  ; ############################################################
0400DC             0099*  ; VDU SOUND API
0400DC             0100*  ; ############################################################
0400DC             0101*  ; Command 0: Play note
0400DC             0102*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
0400DC             0103*      MACRO PLAY_NOTE channel, volume, frequency, duration
0400DC             0104*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
0400DC             0105*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
0400DC             0106*      rst.lil $18
0400DC             0107*      jr @PLAY_NOTE_END
0400DC             0108*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
0400DC             0109*                   db channel                  ; Channel, 0 (commented out)
0400DC             0110*                   db 0                        ; Play note command
0400DC             0111*                   db volume                   ; Volume
0400DC             0112*                   dw frequency                ; Frequency
0400DC             0113*                   dw duration                 ; Duration
0400DC             0114*  @PLAY_NOTE_END:
0400DC             0115*      ENDMACRO
0400DC             0116*  
0400DC             0117*      MACRO MUTE_CHANNEL channel
0400DC             0118*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
0400DC             0119*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
0400DC             0120*      rst.lil $18
0400DC             0121*      jr @MUTE_CHANNEL_END
0400DC             0122*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
0400DC             0123*                     db channel                ; Channel, 0 (commented out)
0400DC             0124*                     db 2                      ; Set volume command
0400DC             0125*                     db 0                      ; Volume (mute)
0400DC             0126*  @MUTE_CHANNEL_END:
0400DC             0127*      ENDMACRO
0400DC             0128*  
0400DC             0129*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
0400DC             0130*  vdu_play_note:
0400DC 79          0131*      ld a,c
0400DD 32 FD 00 04 0132*      ld (@channel),a
0400E1 78          0133*      ld a,b
0400E2 32 FF 00 04 0134*      ld (@volume),a
0400E6 22 00 01 04 0135*      ld (@frequency),hl
0400EA ED 53 02 01 0136*      ld (@duration),de
       04          
0400EF 21 FA 00 04 0137*      ld hl,@cmd
0400F3 01 0A 00 00 0138*      ld bc,@end-@cmd
0400F7 5B DF       0139*      rst.lil $18
0400F9 C9          0140*      ret
0400FA 17 00 85    0141*  @cmd:       db 23, 0, 0x85
0400FD 00          0142*  @channel:   db 0x00
0400FE 00          0143*              db 0x00 ; play note command
0400FF 00          0144*  @volume:    db 0x00
040100 00 00       0145*  @frequency: dw 0x0000
040102 00 00       0146*  @duration:  dw 0x0000
040104 00          0147*  @end:       db 0x00 ; padding
040105             0148*  
040105             0149*  ; Command 1: Status
040105             0150*  ; VDU 23, 0, &85, channel, 1
040105             0151*  ; inputs: a = channel
040105             0152*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
040105             0153*  ; Bit 	Name 	Meaning
040105             0154*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
040105             0155*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
040105             0156*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
040105             0157*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
040105             0158*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
040105             0159*  
040105             0160*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
040105             0161*  vdu_channel_status:
040105 32 17 01 04 0162*      ld (@channel),a
040109 21 14 01 04 0163*      ld hl,@cmd
04010D 01 05 00 00 0164*      ld bc,@end-@cmd
040111 5B DF       0165*      rst.lil $18
040113 C9          0166*      ret
040114 17 00 85    0167*  @cmd:       db 23, 0, 0x85
040117 00          0168*  @channel:   db 0x00
040118 01          0169*              db 0x01 ; get channel status command
040119             0170*  @end:
040119             0171*  
040119             0172*  ; VDU 23, 0, &85, channel, 2, volume
040119             0173*  ; inputs: c = channel, b = volume
040119             0174*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
040119             0175*  
040119             0176*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
040119             0177*  
040119             0178*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
040119             0179*  vdu_channel_volume:
040119 79          0180*      ld a,c
04011A 32 31 01 04 0181*      ld (@channel),a
04011E 78          0182*      ld a,b
04011F 32 33 01 04 0183*      ld (@volume),a
040123 21 2E 01 04 0184*      ld hl,@cmd
040127 01 06 00 00 0185*      ld bc,@end-@cmd
04012B 5B DF       0186*      rst.lil $18
04012D C9          0187*      ret
04012E 17 00 85    0188*  @cmd:       db 23, 0, 0x85
040131 00          0189*  @channel:   db 0x00
040132 02          0190*              db 0x02 ; set volume command
040133 00          0191*  @volume:    db 0x00
040134             0192*  @end:
040134             0193*  
040134             0194*  ; VDU 23, 0, &85, channel, 3, frequency;
040134             0195*  
040134             0196*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
040134             0197*  
040134             0198*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
040134             0199*  
040134             0200*  ; Returns 1 on success, 0 for failure.
040134             0201*  vdu_channel_frequency:
040134 79          0202*      ld a,c
040135 32 4C 01 04 0203*      ld (@channel),a
040139 ED 53 4E 01 0204*      ld (@frequency),de
       04          
04013E 21 49 01 04 0205*      ld hl,@cmd
040142 01 07 00 00 0206*      ld bc,@end-@cmd
040146 5B DF       0207*      rst.lil $18
040148 C9          0208*      ret
040149 17 00 85    0209*  @cmd:       db 23, 0, 0x85
04014C 00          0210*  @channel:   db 0x00
04014D 03          0211*              db 0x03 ; set frequency command
04014E 00 00       0212*  @frequency: dw 0x0000
040150 00          0213*  @end:       db 0x00 ; padding
040151             0214*  
040151             0215*  
040151             0216*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040151             0217*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040151             0218*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040151             0219*  
040151             0220*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040151             0221*  
040151             0222*  ; By default a channel is set to use waveform 0 (square wave).
040151             0223*  
040151             0224*  ; Valid waveform values are as follows:
040151             0225*  ; Value 	Waveform
040151             0226*  ; 0 	Square wave
040151             0227*  ; 1 	Triangle wave
040151             0228*  ; 2 	Sawtooth wave
040151             0229*  ; 3 	Sine wave
040151             0230*  ; 4 	Noise (simple white noise with no frequency support)
040151             0231*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040151             0232*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040151             0233*  
040151             0234*  vdu_channel_waveform:
040151 79          0235*      ld a,c
040152 32 77 01 04 0236*      ld (@channel),a
040156 78          0237*      ld a,b
040157 32 79 01 04 0238*      ld (@waveform),a
04015B FE 08       0239*      cp 8 ; check if the waveform is a sample
04015D 28 06       0240*      jr z, @sample
04015F 01 06 00 00 0241*      ld bc,@bufferId-@cmd
040163 18 08       0242*      jr @sendToVdu
040165             0243*  @sample:
040165 22 7A 01 04 0244*      ld (@bufferId),hl
040169 01 08 00 00 0245*      ld bc,@end-@cmd
04016D             0246*  @sendToVdu:
04016D 21 74 01 04 0247*      ld hl,@cmd
040171 5B DF       0248*      rst.lil $18
040173 C9          0249*      ret
040174 17 00 85    0250*  @cmd:       db 23, 0, 0x85
040177 00          0251*  @channel:   db 0x00
040178 04          0252*              db 0x04 ; set waveform command
040179 00          0253*  @waveform:  db 0x00
04017A 00 00       0254*  @bufferId:  dw 0x0000
04017C 00          0255*  @end:       db 0x00 ; padding
04017D             0256*  
04017D             0257*  
04017D             0258*  
04017D             0259*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04017D             0260*  ; inputs: hl = bufferId; a = format
04017D             0261*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04017D             0262*  ; Value 	Description
04017D             0263*  ; 0 	8-bit signed, 16KHz
04017D             0264*  ; 1 	8-bit unsigned, 16KHz
04017D             0265*  vdu_buffer_to_sound:
04017D 22 96 01 04 0266*      ld (@bufferId),hl
040181 32 98 01 04 0267*      ld (@format),a
040185 21 90 01 04 0268*      ld hl,@cmd
040189 01 09 00 00 0269*      ld bc,@end-@cmd
04018D 5B DF       0270*      rst.lil $18
04018F C9          0271*      ret
040190 17 00 85    0272*  @cmd:       db 23, 0, 0x85
040193 00          0273*              db 0x00 ; a magic number that is always 0
040194 05          0274*              db 0x05 ; buffer to sound command
040195 02          0275*              db 0x02 ; a magic number that is always 2
040196 00 00       0276*  @bufferId:  dw 0x0000
040198 00          0277*  @format:    db 0x00
040199             0278*  @end:
040199             0279*  
040199             0280*  
040199             0281*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040199             0282*  vdu_play_sample:
040199             0283*      ; populate input parameters
040199 79          0284*      ld a,c
04019A 32 C4 01 04 0285*      ld (@channel0),a
04019E 32 CC 01 04 0286*      ld (@channel1),a
0401A2 78          0287*      ld a,b
0401A3 32 CE 01 04 0288*      ld (@volume),a
0401A7 ED 53 CF 01 0289*      ld (@frequency),de
       04          
0401AC 22 C7 01 04 0290*      ld (@bufferId),hl
0401B0             0291*      ; clean up byte that got stomped on by bufferId load from hl
0401B0 3E 17       0292*      ld a,23
0401B2 32 C9 01 04 0293*      ld (@cmd1),a
0401B6             0294*      ; prep the vdu command string
0401B6 21 C1 01 04 0295*      ld hl, @cmd0
0401BA 01 12 00 00 0296*      ld bc, @end - @cmd0
0401BE 5B DF       0297*      rst.lil $18
0401C0 C9          0298*      ret
0401C1 17 00 85    0299*  @cmd0:       db 23, 0, 0x85
0401C4 00          0300*  @channel0:   db 0x00
0401C5 04          0301*               db 0x04 ; set waveform command
0401C6 08          0302*  @waveform:   db 0x08 ; sample
0401C7 00 00       0303*  @bufferId:   dw 0x0000
0401C9 17 00 85    0304*  @cmd1:       db 23, 0, 0x85
0401CC 00          0305*  @channel1:   db 0x00
0401CD 00          0306*               db 0x00 ; play note command
0401CE 00          0307*  @volume:     db 0x00
0401CF 00 00       0308*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
0401D1 00 00       0309*  @duration:   dw 0x0000 ; milliseconds
0401D3 00          0310*  @end:        db 0x00 ; padding
0401D4             0013   	include "src/asm/images.inc"
0401D4             0001*  ; This file is created by build_92_asm_load_tiles.py, do not edit it!
0401D4             0002*  
0401D4             0003*  ; cube buffer ids:
0401D4             0004*  BUF_10: equ 0x000A
0401D4             0005*  BUF_11: equ 0x000B
0401D4             0006*  BUF_12: equ 0x000C
0401D4             0007*  BUF_13: equ 0x000D
0401D4             0008*  BUF_14: equ 0x000E
0401D4             0009*  BUF_15: equ 0x000F
0401D4             0010*  BUF_16: equ 0x0010
0401D4             0011*  BUF_17: equ 0x0011
0401D4             0012*  BUF_57: equ 0x0039
0401D4             0013*  BUF_58: equ 0x003A
0401D4             0014*  BUF_59: equ 0x003B
0401D4             0015*  
0401D4             0016*  cube_num_tiles: equ 11
0401D4             0017*  
0401D4             0018*  ; cube buffer id reverse lookup:
0401D4             0019*  cube_buffer_id_lut:
0401D4 0A 00 00    0020*  	dl BUF_10
0401D7 0B 00 00    0021*  	dl BUF_11
0401DA 0C 00 00    0022*  	dl BUF_12
0401DD 0D 00 00    0023*  	dl BUF_13
0401E0 0E 00 00    0024*  	dl BUF_14
0401E3 0F 00 00    0025*  	dl BUF_15
0401E6 10 00 00    0026*  	dl BUF_16
0401E9 11 00 00    0027*  	dl BUF_17
0401EC 39 00 00    0028*  	dl BUF_57
0401EF 3A 00 00    0029*  	dl BUF_58
0401F2 3B 00 00    0030*  	dl BUF_59
0401F5             0031*  
0401F5             0032*  ; cube load routines jump table:
0401F5             0033*  cube_load_tiles_table:
0401F5 58 02 04    0034*  	dl ld_10
0401F8 78 02 04    0035*  	dl ld_11
0401FB 98 02 04    0036*  	dl ld_12
0401FE B8 02 04    0037*  	dl ld_13
040201 D8 02 04    0038*  	dl ld_14
040204 F8 02 04    0039*  	dl ld_15
040207 18 03 04    0040*  	dl ld_16
04020A 38 03 04    0041*  	dl ld_17
04020D 58 03 04    0042*  	dl ld_57
040210 78 03 04    0043*  	dl ld_58
040213 98 03 04    0044*  	dl ld_59
040216             0045*  
040216             0046*  ; TexPanelLut for cube tiles:
040216             0047*  ; typedef struct TexPanel {
040216             0048*  ;     uint8_t img_idx;           // Image Index (handled on the vdp side so no need to load it here.
040216             0049*  ;     uint16_t texture_id;       // Texture ID for the panel
040216             0050*  ;     uint16_t width;            // Texture width
040216             0051*  ;     uint16_t height;           // Texture height
040216             0052*  ; } TexPanel;
040216             0053*  cube_tex_panel_lut:
040216 0A 00 10 00 0054*  	dw 0x000A,16,16
       10 00       
04021C 0B 00 10 00 0055*  	dw 0x000B,16,16
       10 00       
040222 0C 00 10 00 0056*  	dw 0x000C,16,16
       10 00       
040228 0D 00 10 00 0057*  	dw 0x000D,16,16
       10 00       
04022E 0E 00 10 00 0058*  	dw 0x000E,16,16
       10 00       
040234 0F 00 10 00 0059*  	dw 0x000F,16,16
       10 00       
04023A 10 00 10 00 0060*  	dw 0x0010,16,16
       10 00       
040240 11 00 10 00 0061*  	dw 0x0011,16,16
       10 00       
040246 39 00 10 00 0062*  	dw 0x0039,16,16
       10 00       
04024C 3A 00 10 00 0063*  	dw 0x003A,16,16
       10 00       
040252 3B 00 10 00 0064*  	dw 0x003B,16,16
       10 00       
040258             0065*  
040258             0066*  ; Import cube .rgba8 bitmap files and load them into VDP buffers
040258             0067*  
040258             0068*  ld_10:
040258 21 0A 00 00 0069*  	ld hl,BUF_10
04025C 01 10 00 00 0070*  	ld bc,16
040260 11 10 00 00 0071*  	ld de,16
040264 DD 21 00 04 0072*  	ld ix,1024
       00          
040269 FD 21 B8 03 0073*  	ld iy,F10
       04          
04026E FD 22 63 29 0074*  	ld (cur_filename),iy
       04          
040273 CD EE 2A 04 0075*  	call vdu_load_img_8
040277 C9          0076*  	ret
040278             0077*  
040278             0078*  ld_11:
040278 21 0B 00 00 0079*  	ld hl,BUF_11
04027C 01 10 00 00 0080*  	ld bc,16
040280 11 10 00 00 0081*  	ld de,16
040284 DD 21 00 04 0082*  	ld ix,1024
       00          
040289 FD 21 C7 03 0083*  	ld iy,F11
       04          
04028E FD 22 63 29 0084*  	ld (cur_filename),iy
       04          
040293 CD EE 2A 04 0085*  	call vdu_load_img_8
040297 C9          0086*  	ret
040298             0087*  
040298             0088*  ld_12:
040298 21 0C 00 00 0089*  	ld hl,BUF_12
04029C 01 10 00 00 0090*  	ld bc,16
0402A0 11 10 00 00 0091*  	ld de,16
0402A4 DD 21 00 04 0092*  	ld ix,1024
       00          
0402A9 FD 21 D6 03 0093*  	ld iy,F12
       04          
0402AE FD 22 63 29 0094*  	ld (cur_filename),iy
       04          
0402B3 CD EE 2A 04 0095*  	call vdu_load_img_8
0402B7 C9          0096*  	ret
0402B8             0097*  
0402B8             0098*  ld_13:
0402B8 21 0D 00 00 0099*  	ld hl,BUF_13
0402BC 01 10 00 00 0100*  	ld bc,16
0402C0 11 10 00 00 0101*  	ld de,16
0402C4 DD 21 00 04 0102*  	ld ix,1024
       00          
0402C9 FD 21 E5 03 0103*  	ld iy,F13
       04          
0402CE FD 22 63 29 0104*  	ld (cur_filename),iy
       04          
0402D3 CD EE 2A 04 0105*  	call vdu_load_img_8
0402D7 C9          0106*  	ret
0402D8             0107*  
0402D8             0108*  ld_14:
0402D8 21 0E 00 00 0109*  	ld hl,BUF_14
0402DC 01 10 00 00 0110*  	ld bc,16
0402E0 11 10 00 00 0111*  	ld de,16
0402E4 DD 21 00 04 0112*  	ld ix,1024
       00          
0402E9 FD 21 F4 03 0113*  	ld iy,F14
       04          
0402EE FD 22 63 29 0114*  	ld (cur_filename),iy
       04          
0402F3 CD EE 2A 04 0115*  	call vdu_load_img_8
0402F7 C9          0116*  	ret
0402F8             0117*  
0402F8             0118*  ld_15:
0402F8 21 0F 00 00 0119*  	ld hl,BUF_15
0402FC 01 10 00 00 0120*  	ld bc,16
040300 11 10 00 00 0121*  	ld de,16
040304 DD 21 00 04 0122*  	ld ix,1024
       00          
040309 FD 21 03 04 0123*  	ld iy,F15
       04          
04030E FD 22 63 29 0124*  	ld (cur_filename),iy
       04          
040313 CD EE 2A 04 0125*  	call vdu_load_img_8
040317 C9          0126*  	ret
040318             0127*  
040318             0128*  ld_16:
040318 21 10 00 00 0129*  	ld hl,BUF_16
04031C 01 10 00 00 0130*  	ld bc,16
040320 11 10 00 00 0131*  	ld de,16
040324 DD 21 00 04 0132*  	ld ix,1024
       00          
040329 FD 21 12 04 0133*  	ld iy,F16
       04          
04032E FD 22 63 29 0134*  	ld (cur_filename),iy
       04          
040333 CD EE 2A 04 0135*  	call vdu_load_img_8
040337 C9          0136*  	ret
040338             0137*  
040338             0138*  ld_17:
040338 21 11 00 00 0139*  	ld hl,BUF_17
04033C 01 10 00 00 0140*  	ld bc,16
040340 11 10 00 00 0141*  	ld de,16
040344 DD 21 00 04 0142*  	ld ix,1024
       00          
040349 FD 21 21 04 0143*  	ld iy,F17
       04          
04034E FD 22 63 29 0144*  	ld (cur_filename),iy
       04          
040353 CD EE 2A 04 0145*  	call vdu_load_img_8
040357 C9          0146*  	ret
040358             0147*  
040358             0148*  ld_57:
040358 21 39 00 00 0149*  	ld hl,BUF_57
04035C 01 10 00 00 0150*  	ld bc,16
040360 11 10 00 00 0151*  	ld de,16
040364 DD 21 00 04 0152*  	ld ix,1024
       00          
040369 FD 21 30 04 0153*  	ld iy,F57
       04          
04036E FD 22 63 29 0154*  	ld (cur_filename),iy
       04          
040373 CD EE 2A 04 0155*  	call vdu_load_img_8
040377 C9          0156*  	ret
040378             0157*  
040378             0158*  ld_58:
040378 21 3A 00 00 0159*  	ld hl,BUF_58
04037C 01 10 00 00 0160*  	ld bc,16
040380 11 10 00 00 0161*  	ld de,16
040384 DD 21 00 04 0162*  	ld ix,1024
       00          
040389 FD 21 3F 04 0163*  	ld iy,F58
       04          
04038E FD 22 63 29 0164*  	ld (cur_filename),iy
       04          
040393 CD EE 2A 04 0165*  	call vdu_load_img_8
040397 C9          0166*  	ret
040398             0167*  
040398             0168*  ld_59:
040398 21 3B 00 00 0169*  	ld hl,BUF_59
04039C 01 10 00 00 0170*  	ld bc,16
0403A0 11 10 00 00 0171*  	ld de,16
0403A4 DD 21 00 04 0172*  	ld ix,1024
       00          
0403A9 FD 21 4E 04 0173*  	ld iy,F59
       04          
0403AE FD 22 63 29 0174*  	ld (cur_filename),iy
       04          
0403B3 CD EE 2A 04 0175*  	call vdu_load_img_8
0403B7 C9          0176*  	ret
0403B8             0177*  
0403B8             0178*  ; File name lookups:
0403B8 74 69 6C 65 0179*  F10: db "tiles/10.rgba8",0
       73 2F 31 30 
       2E 72 67 62 
       61 38 00    
0403C7 74 69 6C 65 0180*  F11: db "tiles/11.rgba8",0
       73 2F 31 31 
       2E 72 67 62 
       61 38 00    
0403D6 74 69 6C 65 0181*  F12: db "tiles/12.rgba8",0
       73 2F 31 32 
       2E 72 67 62 
       61 38 00    
0403E5 74 69 6C 65 0182*  F13: db "tiles/13.rgba8",0
       73 2F 31 33 
       2E 72 67 62 
       61 38 00    
0403F4 74 69 6C 65 0183*  F14: db "tiles/14.rgba8",0
       73 2F 31 34 
       2E 72 67 62 
       61 38 00    
040403 74 69 6C 65 0184*  F15: db "tiles/15.rgba8",0
       73 2F 31 35 
       2E 72 67 62 
       61 38 00    
040412 74 69 6C 65 0185*  F16: db "tiles/16.rgba8",0
       73 2F 31 36 
       2E 72 67 62 
       61 38 00    
040421 74 69 6C 65 0186*  F17: db "tiles/17.rgba8",0
       73 2F 31 37 
       2E 72 67 62 
       61 38 00    
040430 74 69 6C 65 0187*  F57: db "tiles/57.rgba8",0
       73 2F 35 37 
       2E 72 67 62 
       61 38 00    
04043F 74 69 6C 65 0188*  F58: db "tiles/58.rgba8",0
       73 2F 35 38 
       2E 72 67 62 
       61 38 00    
04044E 74 69 6C 65 0189*  F59: db "tiles/59.rgba8",0
       73 2F 35 39 
       2E 72 67 62 
       61 38 00    
04045D             0190*  
04045D             0191*  ; sprite buffer ids:
04045D             0192*  BUF_20: equ 0x0014
04045D             0193*  BUF_21: equ 0x0015
04045D             0194*  BUF_22: equ 0x0016
04045D             0195*  BUF_23: equ 0x0017
04045D             0196*  BUF_24: equ 0x0018
04045D             0197*  BUF_40: equ 0x0028
04045D             0198*  BUF_41: equ 0x0029
04045D             0199*  BUF_42: equ 0x002A
04045D             0200*  BUF_43: equ 0x002B
04045D             0201*  BUF_44: equ 0x002C
04045D             0202*  BUF_45: equ 0x002D
04045D             0203*  BUF_46: equ 0x002E
04045D             0204*  BUF_47: equ 0x002F
04045D             0205*  BUF_48: equ 0x0030
04045D             0206*  BUF_49: equ 0x0031
04045D             0207*  BUF_50: equ 0x0032
04045D             0208*  BUF_51: equ 0x0033
04045D             0209*  BUF_52: equ 0x0034
04045D             0210*  BUF_56: equ 0x0038
04045D             0211*  BUF_60: equ 0x003C
04045D             0212*  
04045D             0213*  sprite_num_tiles: equ 20
04045D             0214*  
04045D             0215*  ; sprite buffer id reverse lookup:
04045D             0216*  sprite_buffer_id_lut:
04045D 14 00 00    0217*  	dl BUF_20
040460 15 00 00    0218*  	dl BUF_21
040463 16 00 00    0219*  	dl BUF_22
040466 17 00 00    0220*  	dl BUF_23
040469 18 00 00    0221*  	dl BUF_24
04046C 28 00 00    0222*  	dl BUF_40
04046F 29 00 00    0223*  	dl BUF_41
040472 2A 00 00    0224*  	dl BUF_42
040475 2B 00 00    0225*  	dl BUF_43
040478 2C 00 00    0226*  	dl BUF_44
04047B 2D 00 00    0227*  	dl BUF_45
04047E 2E 00 00    0228*  	dl BUF_46
040481 2F 00 00    0229*  	dl BUF_47
040484 30 00 00    0230*  	dl BUF_48
040487 31 00 00    0231*  	dl BUF_49
04048A 32 00 00    0232*  	dl BUF_50
04048D 33 00 00    0233*  	dl BUF_51
040490 34 00 00    0234*  	dl BUF_52
040493 38 00 00    0235*  	dl BUF_56
040496 3C 00 00    0236*  	dl BUF_60
040499             0237*  
040499             0238*  ; sprite load routines jump table:
040499             0239*  sprite_load_tiles_table:
040499 D5 04 04    0240*  	dl ld_20
04049C F5 04 04    0241*  	dl ld_21
04049F 15 05 04    0242*  	dl ld_22
0404A2 35 05 04    0243*  	dl ld_23
0404A5 55 05 04    0244*  	dl ld_24
0404A8 75 05 04    0245*  	dl ld_40
0404AB 95 05 04    0246*  	dl ld_41
0404AE B5 05 04    0247*  	dl ld_42
0404B1 D5 05 04    0248*  	dl ld_43
0404B4 F5 05 04    0249*  	dl ld_44
0404B7 15 06 04    0250*  	dl ld_45
0404BA 35 06 04    0251*  	dl ld_46
0404BD 55 06 04    0252*  	dl ld_47
0404C0 75 06 04    0253*  	dl ld_48
0404C3 95 06 04    0254*  	dl ld_49
0404C6 B5 06 04    0255*  	dl ld_50
0404C9 D5 06 04    0256*  	dl ld_51
0404CC F5 06 04    0257*  	dl ld_52
0404CF 15 07 04    0258*  	dl ld_56
0404D2 35 07 04    0259*  	dl ld_60
0404D5             0260*  
0404D5             0261*  
0404D5             0262*  ; Import sprite .rgba8 bitmap files and load them into VDP buffers
0404D5             0263*  
0404D5             0264*  ld_20:
0404D5 21 14 00 00 0265*  	ld hl,BUF_20
0404D9 01 10 00 00 0266*  	ld bc,16
0404DD 11 10 00 00 0267*  	ld de,16
0404E1 DD 21 00 04 0268*  	ld ix,1024
       00          
0404E6 FD 21 55 07 0269*  	ld iy,F20
       04          
0404EB FD 22 63 29 0270*  	ld (cur_filename),iy
       04          
0404F0 CD EE 2A 04 0271*  	call vdu_load_img_8
0404F4 C9          0272*  	ret
0404F5             0273*  
0404F5             0274*  ld_21:
0404F5 21 15 00 00 0275*  	ld hl,BUF_21
0404F9 01 10 00 00 0276*  	ld bc,16
0404FD 11 10 00 00 0277*  	ld de,16
040501 DD 21 00 04 0278*  	ld ix,1024
       00          
040506 FD 21 64 07 0279*  	ld iy,F21
       04          
04050B FD 22 63 29 0280*  	ld (cur_filename),iy
       04          
040510 CD EE 2A 04 0281*  	call vdu_load_img_8
040514 C9          0282*  	ret
040515             0283*  
040515             0284*  ld_22:
040515 21 16 00 00 0285*  	ld hl,BUF_22
040519 01 10 00 00 0286*  	ld bc,16
04051D 11 10 00 00 0287*  	ld de,16
040521 DD 21 00 04 0288*  	ld ix,1024
       00          
040526 FD 21 73 07 0289*  	ld iy,F22
       04          
04052B FD 22 63 29 0290*  	ld (cur_filename),iy
       04          
040530 CD EE 2A 04 0291*  	call vdu_load_img_8
040534 C9          0292*  	ret
040535             0293*  
040535             0294*  ld_23:
040535 21 17 00 00 0295*  	ld hl,BUF_23
040539 01 10 00 00 0296*  	ld bc,16
04053D 11 10 00 00 0297*  	ld de,16
040541 DD 21 00 04 0298*  	ld ix,1024
       00          
040546 FD 21 82 07 0299*  	ld iy,F23
       04          
04054B FD 22 63 29 0300*  	ld (cur_filename),iy
       04          
040550 CD EE 2A 04 0301*  	call vdu_load_img_8
040554 C9          0302*  	ret
040555             0303*  
040555             0304*  ld_24:
040555 21 18 00 00 0305*  	ld hl,BUF_24
040559 01 10 00 00 0306*  	ld bc,16
04055D 11 10 00 00 0307*  	ld de,16
040561 DD 21 00 04 0308*  	ld ix,1024
       00          
040566 FD 21 91 07 0309*  	ld iy,F24
       04          
04056B FD 22 63 29 0310*  	ld (cur_filename),iy
       04          
040570 CD EE 2A 04 0311*  	call vdu_load_img_8
040574 C9          0312*  	ret
040575             0313*  
040575             0314*  ld_40:
040575 21 28 00 00 0315*  	ld hl,BUF_40
040579 01 10 00 00 0316*  	ld bc,16
04057D 11 10 00 00 0317*  	ld de,16
040581 DD 21 00 04 0318*  	ld ix,1024
       00          
040586 FD 21 A0 07 0319*  	ld iy,F40
       04          
04058B FD 22 63 29 0320*  	ld (cur_filename),iy
       04          
040590 CD EE 2A 04 0321*  	call vdu_load_img_8
040594 C9          0322*  	ret
040595             0323*  
040595             0324*  ld_41:
040595 21 29 00 00 0325*  	ld hl,BUF_41
040599 01 10 00 00 0326*  	ld bc,16
04059D 11 10 00 00 0327*  	ld de,16
0405A1 DD 21 00 04 0328*  	ld ix,1024
       00          
0405A6 FD 21 AF 07 0329*  	ld iy,F41
       04          
0405AB FD 22 63 29 0330*  	ld (cur_filename),iy
       04          
0405B0 CD EE 2A 04 0331*  	call vdu_load_img_8
0405B4 C9          0332*  	ret
0405B5             0333*  
0405B5             0334*  ld_42:
0405B5 21 2A 00 00 0335*  	ld hl,BUF_42
0405B9 01 10 00 00 0336*  	ld bc,16
0405BD 11 10 00 00 0337*  	ld de,16
0405C1 DD 21 00 04 0338*  	ld ix,1024
       00          
0405C6 FD 21 BE 07 0339*  	ld iy,F42
       04          
0405CB FD 22 63 29 0340*  	ld (cur_filename),iy
       04          
0405D0 CD EE 2A 04 0341*  	call vdu_load_img_8
0405D4 C9          0342*  	ret
0405D5             0343*  
0405D5             0344*  ld_43:
0405D5 21 2B 00 00 0345*  	ld hl,BUF_43
0405D9 01 10 00 00 0346*  	ld bc,16
0405DD 11 10 00 00 0347*  	ld de,16
0405E1 DD 21 00 04 0348*  	ld ix,1024
       00          
0405E6 FD 21 CD 07 0349*  	ld iy,F43
       04          
0405EB FD 22 63 29 0350*  	ld (cur_filename),iy
       04          
0405F0 CD EE 2A 04 0351*  	call vdu_load_img_8
0405F4 C9          0352*  	ret
0405F5             0353*  
0405F5             0354*  ld_44:
0405F5 21 2C 00 00 0355*  	ld hl,BUF_44
0405F9 01 10 00 00 0356*  	ld bc,16
0405FD 11 10 00 00 0357*  	ld de,16
040601 DD 21 00 04 0358*  	ld ix,1024
       00          
040606 FD 21 DC 07 0359*  	ld iy,F44
       04          
04060B FD 22 63 29 0360*  	ld (cur_filename),iy
       04          
040610 CD EE 2A 04 0361*  	call vdu_load_img_8
040614 C9          0362*  	ret
040615             0363*  
040615             0364*  ld_45:
040615 21 2D 00 00 0365*  	ld hl,BUF_45
040619 01 10 00 00 0366*  	ld bc,16
04061D 11 10 00 00 0367*  	ld de,16
040621 DD 21 00 04 0368*  	ld ix,1024
       00          
040626 FD 21 EB 07 0369*  	ld iy,F45
       04          
04062B FD 22 63 29 0370*  	ld (cur_filename),iy
       04          
040630 CD EE 2A 04 0371*  	call vdu_load_img_8
040634 C9          0372*  	ret
040635             0373*  
040635             0374*  ld_46:
040635 21 2E 00 00 0375*  	ld hl,BUF_46
040639 01 10 00 00 0376*  	ld bc,16
04063D 11 10 00 00 0377*  	ld de,16
040641 DD 21 00 04 0378*  	ld ix,1024
       00          
040646 FD 21 FA 07 0379*  	ld iy,F46
       04          
04064B FD 22 63 29 0380*  	ld (cur_filename),iy
       04          
040650 CD EE 2A 04 0381*  	call vdu_load_img_8
040654 C9          0382*  	ret
040655             0383*  
040655             0384*  ld_47:
040655 21 2F 00 00 0385*  	ld hl,BUF_47
040659 01 10 00 00 0386*  	ld bc,16
04065D 11 10 00 00 0387*  	ld de,16
040661 DD 21 00 04 0388*  	ld ix,1024
       00          
040666 FD 21 09 08 0389*  	ld iy,F47
       04          
04066B FD 22 63 29 0390*  	ld (cur_filename),iy
       04          
040670 CD EE 2A 04 0391*  	call vdu_load_img_8
040674 C9          0392*  	ret
040675             0393*  
040675             0394*  ld_48:
040675 21 30 00 00 0395*  	ld hl,BUF_48
040679 01 10 00 00 0396*  	ld bc,16
04067D 11 10 00 00 0397*  	ld de,16
040681 DD 21 00 04 0398*  	ld ix,1024
       00          
040686 FD 21 18 08 0399*  	ld iy,F48
       04          
04068B FD 22 63 29 0400*  	ld (cur_filename),iy
       04          
040690 CD EE 2A 04 0401*  	call vdu_load_img_8
040694 C9          0402*  	ret
040695             0403*  
040695             0404*  ld_49:
040695 21 31 00 00 0405*  	ld hl,BUF_49
040699 01 10 00 00 0406*  	ld bc,16
04069D 11 10 00 00 0407*  	ld de,16
0406A1 DD 21 00 04 0408*  	ld ix,1024
       00          
0406A6 FD 21 27 08 0409*  	ld iy,F49
       04          
0406AB FD 22 63 29 0410*  	ld (cur_filename),iy
       04          
0406B0 CD EE 2A 04 0411*  	call vdu_load_img_8
0406B4 C9          0412*  	ret
0406B5             0413*  
0406B5             0414*  ld_50:
0406B5 21 32 00 00 0415*  	ld hl,BUF_50
0406B9 01 10 00 00 0416*  	ld bc,16
0406BD 11 10 00 00 0417*  	ld de,16
0406C1 DD 21 00 04 0418*  	ld ix,1024
       00          
0406C6 FD 21 36 08 0419*  	ld iy,F50
       04          
0406CB FD 22 63 29 0420*  	ld (cur_filename),iy
       04          
0406D0 CD EE 2A 04 0421*  	call vdu_load_img_8
0406D4 C9          0422*  	ret
0406D5             0423*  
0406D5             0424*  ld_51:
0406D5 21 33 00 00 0425*  	ld hl,BUF_51
0406D9 01 10 00 00 0426*  	ld bc,16
0406DD 11 10 00 00 0427*  	ld de,16
0406E1 DD 21 00 04 0428*  	ld ix,1024
       00          
0406E6 FD 21 45 08 0429*  	ld iy,F51
       04          
0406EB FD 22 63 29 0430*  	ld (cur_filename),iy
       04          
0406F0 CD EE 2A 04 0431*  	call vdu_load_img_8
0406F4 C9          0432*  	ret
0406F5             0433*  
0406F5             0434*  ld_52:
0406F5 21 34 00 00 0435*  	ld hl,BUF_52
0406F9 01 10 00 00 0436*  	ld bc,16
0406FD 11 10 00 00 0437*  	ld de,16
040701 DD 21 00 04 0438*  	ld ix,1024
       00          
040706 FD 21 54 08 0439*  	ld iy,F52
       04          
04070B FD 22 63 29 0440*  	ld (cur_filename),iy
       04          
040710 CD EE 2A 04 0441*  	call vdu_load_img_8
040714 C9          0442*  	ret
040715             0443*  
040715             0444*  ld_56:
040715 21 38 00 00 0445*  	ld hl,BUF_56
040719 01 10 00 00 0446*  	ld bc,16
04071D 11 10 00 00 0447*  	ld de,16
040721 DD 21 00 04 0448*  	ld ix,1024
       00          
040726 FD 21 63 08 0449*  	ld iy,F56
       04          
04072B FD 22 63 29 0450*  	ld (cur_filename),iy
       04          
040730 CD EE 2A 04 0451*  	call vdu_load_img_8
040734 C9          0452*  	ret
040735             0453*  
040735             0454*  ld_60:
040735 21 3C 00 00 0455*  	ld hl,BUF_60
040739 01 10 00 00 0456*  	ld bc,16
04073D 11 10 00 00 0457*  	ld de,16
040741 DD 21 00 04 0458*  	ld ix,1024
       00          
040746 FD 21 72 08 0459*  	ld iy,F60
       04          
04074B FD 22 63 29 0460*  	ld (cur_filename),iy
       04          
040750 CD EE 2A 04 0461*  	call vdu_load_img_8
040754 C9          0462*  	ret
040755             0463*  
040755             0464*  ; File name lookups:
040755 74 69 6C 65 0465*  F20: db "tiles/20.rgba8",0
       73 2F 32 30 
       2E 72 67 62 
       61 38 00    
040764 74 69 6C 65 0466*  F21: db "tiles/21.rgba8",0
       73 2F 32 31 
       2E 72 67 62 
       61 38 00    
040773 74 69 6C 65 0467*  F22: db "tiles/22.rgba8",0
       73 2F 32 32 
       2E 72 67 62 
       61 38 00    
040782 74 69 6C 65 0468*  F23: db "tiles/23.rgba8",0
       73 2F 32 33 
       2E 72 67 62 
       61 38 00    
040791 74 69 6C 65 0469*  F24: db "tiles/24.rgba8",0
       73 2F 32 34 
       2E 72 67 62 
       61 38 00    
0407A0 74 69 6C 65 0470*  F40: db "tiles/40.rgba8",0
       73 2F 34 30 
       2E 72 67 62 
       61 38 00    
0407AF 74 69 6C 65 0471*  F41: db "tiles/41.rgba8",0
       73 2F 34 31 
       2E 72 67 62 
       61 38 00    
0407BE 74 69 6C 65 0472*  F42: db "tiles/42.rgba8",0
       73 2F 34 32 
       2E 72 67 62 
       61 38 00    
0407CD 74 69 6C 65 0473*  F43: db "tiles/43.rgba8",0
       73 2F 34 33 
       2E 72 67 62 
       61 38 00    
0407DC 74 69 6C 65 0474*  F44: db "tiles/44.rgba8",0
       73 2F 34 34 
       2E 72 67 62 
       61 38 00    
0407EB 74 69 6C 65 0475*  F45: db "tiles/45.rgba8",0
       73 2F 34 35 
       2E 72 67 62 
       61 38 00    
0407FA 74 69 6C 65 0476*  F46: db "tiles/46.rgba8",0
       73 2F 34 36 
       2E 72 67 62 
       61 38 00    
040809 74 69 6C 65 0477*  F47: db "tiles/47.rgba8",0
       73 2F 34 37 
       2E 72 67 62 
       61 38 00    
040818 74 69 6C 65 0478*  F48: db "tiles/48.rgba8",0
       73 2F 34 38 
       2E 72 67 62 
       61 38 00    
040827 74 69 6C 65 0479*  F49: db "tiles/49.rgba8",0
       73 2F 34 39 
       2E 72 67 62 
       61 38 00    
040836 74 69 6C 65 0480*  F50: db "tiles/50.rgba8",0
       73 2F 35 30 
       2E 72 67 62 
       61 38 00    
040845 74 69 6C 65 0481*  F51: db "tiles/51.rgba8",0
       73 2F 35 31 
       2E 72 67 62 
       61 38 00    
040854 74 69 6C 65 0482*  F52: db "tiles/52.rgba8",0
       73 2F 35 32 
       2E 72 67 62 
       61 38 00    
040863 74 69 6C 65 0483*  F56: db "tiles/56.rgba8",0
       73 2F 35 36 
       2E 72 67 62 
       61 38 00    
040872 74 69 6C 65 0484*  F60: db "tiles/60.rgba8",0
       73 2F 36 30 
       2E 72 67 62 
       61 38 00    
040881             0014   	include "src/asm/fonts_bmp.inc"
040881             0001*  ; plots a bitmap character to the screen
040881             0002*  ; inputs: a; ascii character to plot
040881             0003*  ;      bc,de = x,y screen coordinates in pixels
040881             0004*  ;      ix pointed at the font definition lut
040881             0005*  ; returns: bc as the next x coordinate to plot
040881             0006*  ;          pretty pixels which hopefully resemble readable text
040881             0007*  ; destroys: lotsa stuff
040881             0008*  font_bmp_plot:
040881             0009*  ; back up bc,de
040881 C5          0010*      push bc
040882 D5          0011*      push de
040883             0012*  ; get the buffer id of the character
040883 D6 20       0013*      sub 32 ; lookup table starts at ascii 32
040885 06 06       0014*      ld b,6 ; six bytes per lookup record
040887 4F          0015*      ld c,a
040888 ED 4C       0016*      mlt bc
04088A DD 09       0017*      add ix,bc ; now ix points to the character definition
04088C DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
04088F CD 79 20 04 0019*      call vdu_buff_select
040893             0020*  ; plot the character
040893 D1          0021*      pop de
040894 DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
040897 83          0023*      add a,e ; add the y-coordinate
040898 5F          0024*      ld e,a
040899 3E 00       0025*      ld a,0 ; can't xor it because we need carry
04089B 8A          0026*      adc a,d
04089C 57          0027*      ld d,a ; plot_y now correct for the character
04089D C1          0028*      pop bc ; plot_x
04089E C5          0029*      push bc ; we want it back after the plot
04089F CD 4A 22 04 0030*      call vdu_plot_bmp
0408A3             0031*  ; now set bc to the next x coordinate
0408A3 C1          0032*      pop bc
0408A4 DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
0408A7 C6 02       0034*      add a,2 ; add a little padding between characters
0408A9 81          0035*      add a,c ; bump the original x-coordinate
0408AA 4F          0036*      ld c,a
0408AB 3E 00       0037*      ld a,0 ; can't xor it because we need carry
0408AD 88          0038*      adc a,b
0408AE 47          0039*      ld b,a ; plot_x now correct for the next character
0408AF C9          0040*      ret
0408B0             0041*  
0408B0             0042*  ; plots a zero-terminated string of bitmap characters to the screen
0408B0             0043*  ; inputs: hl; pointer to the string
0408B0             0044*  ;       bc,de = x,y screen coordinates in pixels
0408B0             0045*  ;       ix pointed at the font definition lut
0408B0             0046*  ; returns: bc as the next x coordinate to plot
0408B0             0047*  ;          de as the next y coordinate to plot
0408B0             0048*  ;          pretty pixels which hopefully resemble readable text
0408B0             0049*  font_bmp_print:
0408B0             0050*  @next_char:
0408B0             0051*  ; fetch the next character in the string
0408B0 7E          0052*      ld a,(hl) ; a has the ascii value of the character
0408B1 FE 00       0053*      cp 0 ; is it zero?
0408B3 C8          0054*      ret z ; if so, we're done
0408B4 23          0055*      inc hl ; point to the next character
0408B5 E5          0056*      push hl ; save the pointer
0408B6 D5          0057*      push de ; save our y-coordinate
0408B7 DD E5       0058*      push ix ; save the font lut pointer
0408B9 CD 81 08 04 0059*      call font_bmp_plot ; plot the character
0408BD DD E1       0060*      pop ix ; restore the font lut pointer
0408BF D1          0061*      pop de ; restore our y-coordinate
0408C0 E1          0062*      pop hl ; restore the pointer
0408C1 C3 B0 08 04 0063*      jp @next_char ; loop
0408C5             0015   	include "src/asm/maps.inc"
0408C5             0001*  ; ############# MAP CONSTANTS #############
0408C5             0002*  ; map tables addresses
0408C5             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
0408C5             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
0408C5             0005*  
0408C5             0006*  ; map status/type flags
0408C5             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
0408C5             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
0408C5             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
0408C5             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
0408C5             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
0408C5             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
0408C5             0013*  ; bits 1 and 0 are the render_type mask
0408C5             0014*  render_type_cube:   equ %00000000  ; 0
0408C5             0015*  render_type_floor:  equ %00000001  ; 1
0408C5             0016*  render_type_null:   equ %00000010  ; 2
0408C5             0017*  render_type_sprite: equ %00000011  ; 3
0408C5             0018*  
0408C5             0019*  ; HOW THE MAP TABLE IS LAID OUT
0408C5             0020*  ; map table field offset constants
0408C5             0021*  ; (mind the little-endianess)
0408C5             0022*  map_type_status: 	equ 0
0408C5             0023*  map_img_idx: 		equ 1
0408C5             0024*  map_obj_id: 		equ 2
0408C5             0025*  map_sprite_id: 		equ 3
0408C5             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
0408C5             0027*  
0408C5             0028*  ; gets cell info from a directional displacement from a given map location
0408C5             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
0408C5             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
0408C5             0031*  ; calls: get_dx_dy, get_cell_from_coords
0408C5             0032*  get_neighbor:
0408C5             0033*  ; modulo 4 on orientation
0408C5 7B          0034*      ld a,e
0408C6 E6 03       0035*      and 0x03
0408C8 5F          0036*      ld e,a
0408C9 CD F8 08 04 0037*  	call get_dx_dy ; d,e = dy,dx
0408CD             0038*  ; add add b,c to the deltas in d,e
0408CD 79          0039*  	ld a,c
0408CE 83          0040*  	add a,e
0408CF 5F          0041*  	ld e,a
0408D0 78          0042*  	ld a,b
0408D1 82          0043*  	add a,d
0408D2 57          0044*  	ld d,a
0408D3             0045*  ; fall through to get_cell_from_coords
0408D3             0046*  
0408D3             0047*  ; gets cell info from a given x,y map coordinate
0408D3             0048*  ; inputs: ; d,e = map_y,map_x
0408D3             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
0408D3             0050*  get_cell_from_coords:
0408D3             0051*  ; modulo 16 on input coords
0408D3 7B          0052*  	ld a,e
0408D4 E6 0F       0053*  	and 0x0F
0408D6 5F          0054*  	ld e,a
0408D7 7A          0055*  	ld a,d
0408D8 E6 0F       0056*  	and 0x0F
0408DA 57          0057*  	ld d,a
0408DB             0058*  ; get cell_id from x,y
0408DB 42          0059*  	ld b,d ; y
0408DC 0E 10       0060*  	ld c,16 ; number of cells in a column
0408DE ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
0408E0 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
0408E4 6B          0063*  	ld l,e ; x
0408E5 09          0064*  	add hl,bc ; hl = cell_id of x,y
0408E6 E5          0065*  	push hl ; so we can return cell_id
0408E7 4D          0066*  	ld c,l ; c = cell_id
0408E8             0067*  ; get address of cell record in cell_status table
0408E8 06 04       0068*  	ld b,map_record_size ; b = bytes per record
0408EA ED 4C       0069*  	mlt bc ; bc = offset to cell record
0408EC DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
0408F1 DD 09       0071*  	add ix,bc ; ix = address of cell record
0408F3 DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
0408F6 C1          0073*  	pop bc ; bc = cell_id
0408F7 C9          0074*  	ret
0408F8             0075*  
0408F8             0076*  ; gets dx,dy from orientation and distance
0408F8             0077*  ; d = distance ; e = orientation
0408F8             0078*  ; returns: d,e = dy,dx
0408F8             0079*  get_dx_dy:
0408F8             0080*  ; make sure deu is zero
0408F8 E5          0081*  	push hl
0408F9 21 00 00 00 0082*  	ld hl,0
0408FD 62          0083*  	ld h,d
0408FE 6B          0084*  	ld l,e
0408FF EB          0085*  	ex de,hl
040900 E1          0086*  	pop hl
040901             0087*  ; modulo 4 on orientation
040901 7B          0088*  	ld a,e
040902 E6 03       0089*  	and 0x03
040904 FE 00       0090*  	cp 0
040906 28 11       0091*  	jr z,@north
040908 FE 01       0092*  	cp 1
04090A 28 14       0093*  	jr z,@east
04090C FE 02       0094*  	cp 2
04090E 28 14       0095*  	jr z,@south
040910 FE 03       0096*  	cp 3
040912 28 13       0097*  	jr z,@west
040914             0098*  ; if none of those, return zeroes
040914 11 00 00 00 0099*  	ld de,0
040918 C9          0100*  	ret
040919             0101*  @north:
040919             0102*  ; x = 0, y = -d
040919 1E 00       0103*  	ld e,0
04091B 7A          0104*  	ld a,d
04091C ED 44       0105*  	neg
04091E 57          0106*  	ld d,a
04091F C9          0107*  	ret
040920             0108*  @east:
040920             0109*  ; x = d, y = 0
040920 5A          0110*  	ld e,d
040921 16 00       0111*  	ld d,0
040923 C9          0112*  	ret
040924             0113*  @south:
040924             0114*  ; x = 0, y = d
040924 1E 00       0115*  	ld e,0
040926 C9          0116*  	ret
040927             0117*  @west:
040927             0118*  ; x = -d, y = 0
040927 7A          0119*  	ld a,d
040928 ED 44       0120*  	neg
04092A 5F          0121*  	ld e,a
04092B 16 00       0122*  	ld d,0
04092D C9          0123*  	ret
04092E             0124*  
04092E             0125*  ; gets the direction from a dy,dx pair
04092E             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
04092E             0127*  ; inputs: ; d = dy ; e = dx
04092E             0128*  ; returns: a = orientation
04092E             0129*  get_dir_from_dy_dx:
04092E AF          0130*  	xor a
04092F 93          0131*  	sub e
040930 28 06       0132*  	jr z,@not_x
040932 3E 01       0133*  	ld a,1
040934 F8          0134*  	ret m
040935 3E 03       0135*  	ld a,3
040937 C9          0136*  	ret
040938             0137*  @not_x:
040938 AF          0138*  	xor a
040939 92          0139*  	sub d
04093A C8          0140*  	ret z
04093B 3E 02       0141*  	ld a,2
04093D F8          0142*  	ret m
04093E AF          0143*  	xor a
04093F C9          0144*  	ret
040940             0145*  
040940             0146*  
040940             0147*  ; translate camera relative x,y deltas to map x,y deltas
040940             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
040940             0149*  ; returns:	d = map_dy ; e = map_dx
040940             0150*  trans_dx_dy:
040940             0151*  ; modulo 4 on orientation
040940 E6 03       0152*  	and 0x03
040942 28 11       0153*  	jr z,@north
040944 FE 01       0154*  	cp 1 ; east
040946 28 12       0155*  	jr z,@east
040948 FE 02       0156*  	cp 2 ; south
04094A 28 12       0157*  	jr z,@south
04094C FE 03       0158*  	cp 3 ; west
04094E 28 13       0159*  	jr z,@west
040950             0160*  ; if none of those, return zeroes
040950 11 00 00 00 0161*  	ld de,0
040954 C9          0162*  	ret
040955             0163*  @north: ; invert y axis, x unnchanged
040955 7A          0164*  	ld a,d
040956 ED 44       0165*  	neg
040958 57          0166*  	ld d,a
040959 C9          0167*  	ret
04095A             0168*  @east: ; +x = +y, +y = +x
04095A 7A          0169*  	ld a,d
04095B 53          0170*  	ld d,e
04095C 5F          0171*  	ld e,a
04095D C9          0172*  	ret
04095E             0173*  @south: ; invert x axis, y unchanged
04095E 7B          0174*  	ld a,e
04095F ED 44       0175*  	neg
040961 5F          0176*  	ld e,a
040962 C9          0177*  	ret
040963             0178*  @west: ; +x = -y, +y = -x
040963 7A          0179*  	ld a,d ; y
040964 ED 44       0180*  	neg ; -y
040966 53          0181*  	ld d,e ; x
040967 5F          0182*  	ld e,a ; -y
040968 7A          0183*  	ld a,d ; x
040969 ED 44       0184*  	neg ; -x
04096B 57          0185*  	ld d,a ; -x
04096C C9          0186*  	ret
04096D             0187*  
04096D             0188*  ; initialize map variables and load map file
04096D             0189*  ; inputs: none
04096D             0190*  map_init:
04096D AF          0191*  	xor a
04096E 32 B3 37 04 0192*  	ld (cur_floor),a
040972 32 B4 37 04 0193*  	ld (cur_room),a
040976             0194*  ; load room file
040976 CD 7B 09 04 0195*  	call map_load
04097A C9          0196*  	ret
04097B             0197*  
04097B             0198*  ; load map file
04097B             0199*  ; inputs: cur_floor, cur_room set
04097B             0200*  map_load:
04097B 3A B3 37 04 0201*  	ld a,(cur_floor)
04097F 5F          0202*  	ld e,a
040980 16 03       0203*  	ld d,3 ; three bytes per lookup record
040982 ED 5C       0204*  	mlt de ; de = offset to floor lut entry
040984 21 29 0A 04 0205*  	ld hl,floors ; address of floors lut
040988 19          0206*  	add hl,de ; hl = address of floor lut entry
040989 ED 27       0207*  	ld hl,(hl) ; hl = base address of rooms for given floor
04098B 3A B4 37 04 0208*  	ld a,(cur_room)
04098F 5F          0209*  	ld e,a
040990 16 03       0210*  	ld d,3 ; three bytes per lookup record
040992 ED 5C       0211*  	mlt de ; de = offset to room lut entry
040994 19          0212*  	add hl,de ; hl = address of room lut entry
040995 ED 27       0213*  	ld hl,(hl) ; hl = address of room file name
040997 22 63 29 04 0214*  	ld (cur_filename),hl ; DEBUG
04099B 11 00 E0 B7 0215*  	ld de,cell_status ; address to load map data
04099F 01 00 08 00 0216*  	ld bc,2048 ; size of map data in bytes
0409A3 3E 01       0217*  	ld a,mos_load
0409A5 5B CF       0218*  	RST.LIL 08h
0409A7             0219*  ; ; load sprite data
0409A7             0220*  ; 	call map_init_sprites
0409A7 C9          0221*  	ret
0409A8             0222*  
0409A8             0223*  ; ; initialize sprite data for the current room into sprite table
0409A8             0224*  ; ; inputs: map data loaded
0409A8             0225*  ; map_init_sprites:
0409A8             0226*  ; ; initialize pointers
0409A8             0227*  ; 	ld ix,cell_status
0409A8             0228*  ; 	ld iy,sprite_table_base
0409A8             0229*  ; 	xor a
0409A8             0230*  ; 	ld (@cell_id),a
0409A8             0231*  ; @loop:
0409A8             0232*  ; 	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
0409A8             0233*  ; 	ld a,(ix+map_sprite_id)
0409A8             0234*  ; 	cp 255 ; check for no sprite
0409A8             0235*  ; 	jr z,@next_cell
0409A8             0236*  ; 	ld (iy+sprite_id),a
0409A8             0237*  ; 	ld a,(ix+map_img_idx)
0409A8             0238*  ; 	ld (iy+sprite_obj),a
0409A8             0239*  ; 	call sprite_init_data
0409A8             0240*  ; 	ld a,(@cell_id)
0409A8             0241*  ; 	call cell_id_to_coords ; d = map_y, e = map_x
0409A8             0242*  ; 	ld (iy+sprite_x),de ; set sprite x,y
0409A8             0243*  ; 	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
0409A8             0244*  ; @next_cell:
0409A8             0245*  ; 	lea ix,ix+map_record_size ; advance pointer to next cell
0409A8             0246*  ; ; check if we've reached the end of the map data
0409A8             0247*  ; 	ld a,(@cell_id)
0409A8             0248*  ; 	inc a
0409A8             0249*  ; 	ld (@cell_id),a
0409A8             0250*  ; 	jr nz,@loop ; still more to do
0409A8             0251*  ; ; cleanup and return
0409A8             0252*  ; 	ld iy,sprite_table_base ; reset pointer
0409A8             0253*  ; 	ld (sprite_table_pointer),iy
0409A8             0254*  ; 	ret
0409A8             0255*  ; @cell_id: db 0
0409A8             0256*  
0409A8             0257*  ; get the x,y map coordinates from a cell_id
0409A8             0258*  ; inputs: a = cell_id
0409A8             0259*  ; returns: a = cell_id, d = map_y, e = map_x
0409A8             0260*  cell_id_to_coords:
0409A8 11 00 00 00 0261*  	ld de,0 ; make sure deu is zero
0409AC F5          0262*  	push af	; Save the cell id
0409AD             0263*  ; Calculate the y coordinate by dividing the index by 16
0409AD 57          0264*  	ld d,a      ; Move index into d
0409AE CB 3A       0265*  	srl d        ; Shift right once (d = d / 2)
0409B0 CB 3A       0266*  	srl d        ; Shift right again (d = d / 4)
0409B2 CB 3A       0267*  	srl d        ; Shift right again (d = d / 8)
0409B4 CB 3A       0268*  	srl d        ; Shift right again (d = d / 16)
0409B6             0269*  ; Calculate the x coordinate by taking the index modulo 16
0409B6 E6 0F       0270*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
0409B8 5F          0271*  	ld e,a      ; e is now the x coordinate
0409B9 F1          0272*  	pop af	; a is cell id
0409BA C9          0273*  	ret
0409BB             0274*  
0409BB             0275*  ; get starting position in room 0 of a floor based on is_start flag being set
0409BB             0276*  ; inputs: none
0409BB             0277*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
0409BB             0278*  ; destroys: c,iy
0409BB             0279*  get_floor_start:
0409BB             0280*  ; loop through map data to find the obj_id in a
0409BB DD 21 00 E0 0281*  	ld ix,cell_status
       B7          
0409C0 0E 00       0282*  	ld c,0 ; c will be a loop counter giving us cell_id
0409C2             0283*  @start_cell_loop:
0409C2 DD 7E 00    0284*  	ld a,(ix+map_type_status)
0409C5 E6 08       0285*  	and cell_is_start
0409C7 20 06       0286*  	jr nz,@start_cell_found
0409C9 ED 32 04    0287*  	lea ix,ix+map_record_size
0409CC 0C          0288*  	inc c
0409CD 18 F3       0289*  	jr @start_cell_loop
0409CF             0290*  @start_cell_found:
0409CF 79          0291*  	ld a,c
0409D0 CD A8 09 04 0292*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
0409D4 ED 53 B9 37 0293*  	ld (cur_x),de
       04          
0409D9 C9          0294*  	ret
0409DA             0295*  
0409DA             0296*  ; get starting position based an obj_id
0409DA             0297*  ; inputs: a is the obj_id to search for
0409DA             0298*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
0409DA             0299*  ; destroys: c,iy
0409DA             0300*  get_room_start:
0409DA             0301*  ; loop through map data to find the obj_id in a
0409DA DD 21 00 E0 0302*  	ld ix,cell_status
       B7          
0409DF 0E 00       0303*  	ld c,0 ; c will be a loop counter giving us cell_id
0409E1             0304*  @start_cell_loop:
0409E1 DD BE 02    0305*  	cp (ix+map_obj_id)
0409E4 28 06       0306*  	jr z,@start_cell_found
0409E6 ED 32 04    0307*  	lea ix,ix+map_record_size
0409E9 0C          0308*  	inc c
0409EA 18 F5       0309*  	jr @start_cell_loop
0409EC             0310*  @start_cell_found:
0409EC 79          0311*  	ld a,c
0409ED CD A8 09 04 0312*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
0409F1 ED 53 B9 37 0313*  	ld (cur_x),de
       04          
0409F6 C9          0314*  	ret
0409F7             0315*  
0409F7             0316*  
0409F7             0317*  ; ; moves player to the room indicated by the too room cell they've just entered
0409F7             0318*  ; ; inputs: ix = pointer to the cell containing the too room door
0409F7             0319*  ; change_room:
0409F7             0320*  ; ; set visited flag for old room
0409F7             0321*  ; 	ld a,(cur_room)
0409F7             0322*  ; 	ld hl,room_flags
0409F7             0323*  ; 	ld de,0 ; make sure deu and d are zero
0409F7             0324*  ; 	ld e,a
0409F7             0325*  ; 	add hl,de ; hl = address of room flags entry
0409F7             0326*  ; 	ld a,room_flag_visited
0409F7             0327*  ; 	or (hl)
0409F7             0328*  ; 	ld (hl),a
0409F7             0329*  ; ; update from_room
0409F7             0330*  ; 	ld a,(cur_room)
0409F7             0331*  ; 	ld (from_room),a
0409F7             0332*  ; ; get the new room id from the cell and update cur_room
0409F7             0333*  ; 	ld hl,to_room_obj_lut
0409F7             0334*  ; 	ld a,(ix+map_obj_id)
0409F7             0335*  ; 	sub (hl)
0409F7             0336*  ; 	ld (cur_room),a
0409F7             0337*  ; ; save old room state to room dat memory location
0409F7             0338*  ; 	ld hl,room_dat_lut
0409F7             0339*  ; 	ld a,(from_room)
0409F7             0340*  ; 	ld d,a
0409F7             0341*  ; 	ld e,3 ; three bytes per lookup record
0409F7             0342*  ; 	mlt de ; de = offset to room dat entry
0409F7             0343*  ; 	add hl,de ; hl = address of room dat entry
0409F7             0344*  ; 	ld de,(hl) ; destination address for room data
0409F7             0345*  ; 	ld hl,cell_status ; source address for room data
0409F7             0346*  ; 	ld bc,8*1024 ; size of room data
0409F7             0347*  ; 	ldir
0409F7             0348*  ; ; check room visited flag for target room
0409F7             0349*  ; 	ld hl,room_flags
0409F7             0350*  ; 	ld a,(cur_room)
0409F7             0351*  ; 	ld de,0 ; make sure deu and d are zero
0409F7             0352*  ; 	ld e,a
0409F7             0353*  ; 	add hl,de ; hl = address of room flags entry
0409F7             0354*  ; 	ld a,room_flag_visited
0409F7             0355*  ; 	and (hl)
0409F7             0356*  ; 	jr nz,@room_visited
0409F7             0357*  ; ; room not visited so load room data from file
0409F7             0358*  ; 	call map_load
0409F7             0359*  ; 	call map_init_sprites
0409F7             0360*  ; 	jr @get_room_start
0409F7             0361*  ; @room_visited:
0409F7             0362*  ; ; fetch new room state from room dat memory location
0409F7             0363*  ; 	ld hl,room_dat_lut
0409F7             0364*  ; 	ld a,(cur_room)
0409F7             0365*  ; 	ld d,a
0409F7             0366*  ; 	ld e,3 ; three bytes per lookup record
0409F7             0367*  ; 	mlt de ; de = offset to room dat entry
0409F7             0368*  ; 	add hl,de ; hl = address of room dat entry
0409F7             0369*  ; 	ld hl,(hl) ; source address for room data
0409F7             0370*  ; 	ld de,cell_status ; destination address for room data
0409F7             0371*  ; 	ld bc,8*1024 ; size of room data
0409F7             0372*  ; 	ldir
0409F7             0373*  ; @get_room_start:
0409F7             0374*  ; ; get player starting position from to_room_obj_lut
0409F7             0375*  ; 	ld a,(from_room)
0409F7             0376*  ; 	ld hl,to_room_obj_lut
0409F7             0377*  ; 	ld de,0 ; make sure deu and d are zero
0409F7             0378*  ; 	ld e,a
0409F7             0379*  ; 	add hl,de ; hl = address of to_room_obj_lut entry
0409F7             0380*  ; 	ld a,(hl)
0409F7             0381*  ; 	call get_room_start
0409F7             0382*  ; 	ld (cur_x),de
0409F7             0383*  ; 	ret
0409F7             0384*  
0409F7 1E 1F 20 21 0385*  to_room_obj_lut: db 30,31,32,33,34,35,36,37,38,39
       22 23 24 25 
       26 27       
040A01             0386*  
040A01 00 00 00 00 0387*  room_flags: blkb 10,0
       00 00 00 00 
       00 00       
040A0B             0388*  room_flag_visited: equ %00000001
040A0B             0389*  
040A0B             0390*  room_dat_lut:
040A0B 00 00 0A    0391*  room_00_dat: dl 0x0A0000
040A0E 00 20 0A    0392*  room_01_dat: dl 0x0A2000
040A11 00 40 0A    0393*  room_02_dat: dl 0x0A4000
040A14 00 60 0A    0394*  room_03_dat: dl 0x0A6000
040A17 00 80 0A    0395*  room_04_dat: dl 0x0A8000
040A1A 00 A0 0A    0396*  room_05_dat: dl 0x0AA000
040A1D 00 C0 0A    0397*  room_06_dat: dl 0x0AC000
040A20 00 E0 0A    0398*  room_07_dat: dl 0x0AE000
040A23 00 00 0B    0399*  room_08_dat: dl 0x0B0000
040A26 00 20 0B    0400*  room_09_dat: dl 0x0B2000
040A29             0401*  
040A29             0402*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
040A29             0403*  
040A29             0404*  start_obj_id: equ 28
040A29             0405*  
040A29             0406*  floors:
040A29 2C 0A 04    0407*  	dl floor_00
040A2C             0408*  
040A2C             0409*  room_files:
040A2C             0410*  floor_00:
040A2C 35 0A 04    0411*  	dl room_00_0
040A2F 47 0A 04    0412*  	dl room_00_1
040A32 59 0A 04    0413*  	dl room_00_2
040A35             0414*  
040A35 6D 61 70 73 0415*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
040A47 6D 61 70 73 0416*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
040A59 6D 61 70 73 0417*  room_00_2: db "maps/map_00_2.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       32 2E 62 69 
       6E 00       
040A6B             0016   	; include "src/asm/render.inc"
040A6B             0017   	include "src/asm/font_itc_honda.inc"
040A6B             0001*  ; Bitmap indices:
040A6B             0002*  BUF_0544: equ 0x0220 ; 32
040A6B             0003*  ; Missing character 33 !
040A6B             0004*  ; Missing character 34 "
040A6B             0005*  ; Missing character 35 #
040A6B             0006*  ; Missing character 36 $
040A6B             0007*  ; Missing character 37 %
040A6B             0008*  ; Missing character 38 &
040A6B             0009*  ; Missing character 39 '
040A6B             0010*  ; Missing character 40 (
040A6B             0011*  ; Missing character 41 )
040A6B             0012*  ; Missing character 42 *
040A6B             0013*  ; Missing character 43 +
040A6B             0014*  ; Missing character 44 ,
040A6B             0015*  ; Missing character 45 -
040A6B             0016*  BUF_0558: equ 0x022E ; 46 .
040A6B             0017*  ; Missing character 47 /
040A6B             0018*  BUF_0560: equ 0x0230 ; 48 0
040A6B             0019*  BUF_0561: equ 0x0231 ; 49 1
040A6B             0020*  BUF_0562: equ 0x0232 ; 50 2
040A6B             0021*  BUF_0563: equ 0x0233 ; 51 3
040A6B             0022*  BUF_0564: equ 0x0234 ; 52 4
040A6B             0023*  BUF_0565: equ 0x0235 ; 53 5
040A6B             0024*  BUF_0566: equ 0x0236 ; 54 6
040A6B             0025*  BUF_0567: equ 0x0237 ; 55 7
040A6B             0026*  BUF_0568: equ 0x0238 ; 56 8
040A6B             0027*  BUF_0569: equ 0x0239 ; 57 9
040A6B             0028*  ; Missing character 58 :
040A6B             0029*  ; Missing character 59 ;
040A6B             0030*  ; Missing character 60 <
040A6B             0031*  ; Missing character 61 =
040A6B             0032*  ; Missing character 62 >
040A6B             0033*  ; Missing character 63 ?
040A6B             0034*  ; Missing character 64 @
040A6B             0035*  BUF_0577: equ 0x0241 ; 65 A
040A6B             0036*  BUF_0578: equ 0x0242 ; 66 B
040A6B             0037*  BUF_0579: equ 0x0243 ; 67 C
040A6B             0038*  BUF_0580: equ 0x0244 ; 68 D
040A6B             0039*  BUF_0581: equ 0x0245 ; 69 E
040A6B             0040*  BUF_0582: equ 0x0246 ; 70 F
040A6B             0041*  BUF_0583: equ 0x0247 ; 71 G
040A6B             0042*  BUF_0584: equ 0x0248 ; 72 H
040A6B             0043*  BUF_0585: equ 0x0249 ; 73 I
040A6B             0044*  BUF_0586: equ 0x024A ; 74 J
040A6B             0045*  BUF_0587: equ 0x024B ; 75 K
040A6B             0046*  BUF_0588: equ 0x024C ; 76 L
040A6B             0047*  BUF_0589: equ 0x024D ; 77 M
040A6B             0048*  BUF_0590: equ 0x024E ; 78 N
040A6B             0049*  BUF_0591: equ 0x024F ; 79 O
040A6B             0050*  BUF_0592: equ 0x0250 ; 80 P
040A6B             0051*  BUF_0593: equ 0x0251 ; 81 Q
040A6B             0052*  BUF_0594: equ 0x0252 ; 82 R
040A6B             0053*  BUF_0595: equ 0x0253 ; 83 S
040A6B             0054*  BUF_0596: equ 0x0254 ; 84 T
040A6B             0055*  BUF_0597: equ 0x0255 ; 85 U
040A6B             0056*  BUF_0598: equ 0x0256 ; 86 V
040A6B             0057*  BUF_0599: equ 0x0257 ; 87 W
040A6B             0058*  BUF_0600: equ 0x0258 ; 88 X
040A6B             0059*  BUF_0601: equ 0x0259 ; 89 Y
040A6B             0060*  BUF_0602: equ 0x025A ; 90 Z
040A6B             0061*  ; Missing character 91 [
040A6B             0062*  ; Missing character 92 \
040A6B             0063*  ; Missing character 93 ]
040A6B             0064*  ; Missing character 94 ^
040A6B             0065*  ; Missing character 95 _
040A6B             0066*  ; Missing character 96 `
040A6B             0067*  BUF_0609: equ 0x0261 ; 97 a
040A6B             0068*  BUF_0610: equ 0x0262 ; 98 b
040A6B             0069*  BUF_0611: equ 0x0263 ; 99 c
040A6B             0070*  BUF_0612: equ 0x0264 ; 100 d
040A6B             0071*  BUF_0613: equ 0x0265 ; 101 e
040A6B             0072*  BUF_0614: equ 0x0266 ; 102 f
040A6B             0073*  BUF_0615: equ 0x0267 ; 103 g
040A6B             0074*  BUF_0616: equ 0x0268 ; 104 h
040A6B             0075*  BUF_0617: equ 0x0269 ; 105 i
040A6B             0076*  BUF_0618: equ 0x026A ; 106 j
040A6B             0077*  BUF_0619: equ 0x026B ; 107 k
040A6B             0078*  BUF_0620: equ 0x026C ; 108 l
040A6B             0079*  BUF_0621: equ 0x026D ; 109 m
040A6B             0080*  BUF_0622: equ 0x026E ; 110 n
040A6B             0081*  BUF_0623: equ 0x026F ; 111 o
040A6B             0082*  BUF_0624: equ 0x0270 ; 112 p
040A6B             0083*  BUF_0625: equ 0x0271 ; 113 q
040A6B             0084*  BUF_0626: equ 0x0272 ; 114 r
040A6B             0085*  BUF_0627: equ 0x0273 ; 115 s
040A6B             0086*  BUF_0628: equ 0x0274 ; 116 t
040A6B             0087*  BUF_0629: equ 0x0275 ; 117 u
040A6B             0088*  BUF_0630: equ 0x0276 ; 118 v
040A6B             0089*  BUF_0631: equ 0x0277 ; 119 w
040A6B             0090*  BUF_0632: equ 0x0278 ; 120 x
040A6B             0091*  BUF_0633: equ 0x0279 ; 121 y
040A6B             0092*  BUF_0634: equ 0x027A ; 122 z
040A6B             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
040A6B             0094*  font_itc_honda:
040A6B 06 01 00 20 0095*  	dl 0x000106,BUF_0544
       02 00       
040A71 06 01 00 20 0096*  	dl 0x000106,BUF_0544 ; Missing character 33
       02 00       
040A77 06 01 00 20 0097*  	dl 0x000106,BUF_0544 ; Missing character 34
       02 00       
040A7D 06 01 00 20 0098*  	dl 0x000106,BUF_0544 ; Missing character 35
       02 00       
040A83 06 01 00 20 0099*  	dl 0x000106,BUF_0544 ; Missing character 36
       02 00       
040A89 06 01 00 20 0100*  	dl 0x000106,BUF_0544 ; Missing character 37
       02 00       
040A8F 06 01 00 20 0101*  	dl 0x000106,BUF_0544 ; Missing character 38
       02 00       
040A95 06 01 00 20 0102*  	dl 0x000106,BUF_0544 ; Missing character 39
       02 00       
040A9B 06 01 00 20 0103*  	dl 0x000106,BUF_0544 ; Missing character 40
       02 00       
040AA1 06 01 00 20 0104*  	dl 0x000106,BUF_0544 ; Missing character 41
       02 00       
040AA7 06 01 00 20 0105*  	dl 0x000106,BUF_0544 ; Missing character 42
       02 00       
040AAD 06 01 00 20 0106*  	dl 0x000106,BUF_0544 ; Missing character 43
       02 00       
040AB3 06 01 00 20 0107*  	dl 0x000106,BUF_0544 ; Missing character 44
       02 00       
040AB9 06 01 00 20 0108*  	dl 0x000106,BUF_0544 ; Missing character 45
       02 00       
040ABF 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_0558
       02 00       
040AC5 06 01 00 20 0110*  	dl 0x000106,BUF_0544 ; Missing character 47
       02 00       
040ACB 0A 12 00 30 0111*  	dl 0x00120A,BUF_0560
       02 00       
040AD1 04 12 00 31 0112*  	dl 0x001204,BUF_0561
       02 00       
040AD7 09 12 00 32 0113*  	dl 0x001209,BUF_0562
       02 00       
040ADD 0A 12 00 33 0114*  	dl 0x00120A,BUF_0563
       02 00       
040AE3 0C 12 00 34 0115*  	dl 0x00120C,BUF_0564
       02 00       
040AE9 0A 12 00 35 0116*  	dl 0x00120A,BUF_0565
       02 00       
040AEF 0A 12 00 36 0117*  	dl 0x00120A,BUF_0566
       02 00       
040AF5 08 12 00 37 0118*  	dl 0x001208,BUF_0567
       02 00       
040AFB 0A 12 00 38 0119*  	dl 0x00120A,BUF_0568
       02 00       
040B01 0A 12 00 39 0120*  	dl 0x00120A,BUF_0569
       02 00       
040B07 06 01 00 20 0121*  	dl 0x000106,BUF_0544 ; Missing character 58
       02 00       
040B0D 06 01 00 20 0122*  	dl 0x000106,BUF_0544 ; Missing character 59
       02 00       
040B13 06 01 00 20 0123*  	dl 0x000106,BUF_0544 ; Missing character 60
       02 00       
040B19 06 01 00 20 0124*  	dl 0x000106,BUF_0544 ; Missing character 61
       02 00       
040B1F 06 01 00 20 0125*  	dl 0x000106,BUF_0544 ; Missing character 62
       02 00       
040B25 06 01 00 20 0126*  	dl 0x000106,BUF_0544 ; Missing character 63
       02 00       
040B2B 06 01 00 20 0127*  	dl 0x000106,BUF_0544 ; Missing character 64
       02 00       
040B31 0A 12 01 41 0128*  	dl 0x01120A,BUF_0577
       02 00       
040B37 0A 12 00 42 0129*  	dl 0x00120A,BUF_0578
       02 00       
040B3D 08 13 00 43 0130*  	dl 0x001308,BUF_0579
       02 00       
040B43 0A 12 00 44 0131*  	dl 0x00120A,BUF_0580
       02 00       
040B49 08 12 00 45 0132*  	dl 0x001208,BUF_0581
       02 00       
040B4F 08 12 00 46 0133*  	dl 0x001208,BUF_0582
       02 00       
040B55 0A 12 00 47 0134*  	dl 0x00120A,BUF_0583
       02 00       
040B5B 0A 12 00 48 0135*  	dl 0x00120A,BUF_0584
       02 00       
040B61 03 12 00 49 0136*  	dl 0x001203,BUF_0585
       02 00       
040B67 06 12 00 4A 0137*  	dl 0x001206,BUF_0586
       02 00       
040B6D 0A 12 00 4B 0138*  	dl 0x00120A,BUF_0587
       02 00       
040B73 08 12 01 4C 0139*  	dl 0x011208,BUF_0588
       02 00       
040B79 0E 12 00 4D 0140*  	dl 0x00120E,BUF_0589
       02 00       
040B7F 0A 12 00 4E 0141*  	dl 0x00120A,BUF_0590
       02 00       
040B85 0A 12 00 4F 0142*  	dl 0x00120A,BUF_0591
       02 00       
040B8B 0A 12 00 50 0143*  	dl 0x00120A,BUF_0592
       02 00       
040B91 0A 15 00 51 0144*  	dl 0x00150A,BUF_0593
       02 00       
040B97 0A 12 00 52 0145*  	dl 0x00120A,BUF_0594
       02 00       
040B9D 09 13 00 53 0146*  	dl 0x001309,BUF_0595
       02 00       
040BA3 0A 12 00 54 0147*  	dl 0x00120A,BUF_0596
       02 00       
040BA9 0A 12 00 55 0148*  	dl 0x00120A,BUF_0597
       02 00       
040BAF 0A 12 00 56 0149*  	dl 0x00120A,BUF_0598
       02 00       
040BB5 10 12 00 57 0150*  	dl 0x001210,BUF_0599
       02 00       
040BBB 0A 12 00 58 0151*  	dl 0x00120A,BUF_0600
       02 00       
040BC1 0A 12 01 59 0152*  	dl 0x01120A,BUF_0601
       02 00       
040BC7 09 12 01 5A 0153*  	dl 0x011209,BUF_0602
       02 00       
040BCD 06 01 00 20 0154*  	dl 0x000106,BUF_0544 ; Missing character 91
       02 00       
040BD3 06 01 00 20 0155*  	dl 0x000106,BUF_0544 ; Missing character 92
       02 00       
040BD9 06 01 00 20 0156*  	dl 0x000106,BUF_0544 ; Missing character 93
       02 00       
040BDF 06 01 00 20 0157*  	dl 0x000106,BUF_0544 ; Missing character 94
       02 00       
040BE5 06 01 00 20 0158*  	dl 0x000106,BUF_0544 ; Missing character 95
       02 00       
040BEB 06 01 00 20 0159*  	dl 0x000106,BUF_0544 ; Missing character 96
       02 00       
040BF1 08 0C 06 61 0160*  	dl 0x060C08,BUF_0609
       02 00       
040BF7 09 12 01 62 0161*  	dl 0x011209,BUF_0610
       02 00       
040BFD 07 0C 06 63 0162*  	dl 0x060C07,BUF_0611
       02 00       
040C03 09 12 00 64 0163*  	dl 0x001209,BUF_0612
       02 00       
040C09 08 0C 06 65 0164*  	dl 0x060C08,BUF_0613
       02 00       
040C0F 09 12 00 66 0165*  	dl 0x001209,BUF_0614
       02 00       
040C15 09 12 06 67 0166*  	dl 0x061209,BUF_0615
       02 00       
040C1B 09 12 01 68 0167*  	dl 0x011209,BUF_0616
       02 00       
040C21 04 12 00 69 0168*  	dl 0x001204,BUF_0617
       02 00       
040C27 08 18 00 6A 0169*  	dl 0x001808,BUF_0618
       02 00       
040C2D 09 12 01 6B 0170*  	dl 0x011209,BUF_0619
       02 00       
040C33 03 12 00 6C 0171*  	dl 0x001203,BUF_0620
       02 00       
040C39 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_0621
       02 00       
040C3F 09 0C 06 6E 0173*  	dl 0x060C09,BUF_0622
       02 00       
040C45 09 0C 06 6F 0174*  	dl 0x060C09,BUF_0623
       02 00       
040C4B 09 12 06 70 0175*  	dl 0x061209,BUF_0624
       02 00       
040C51 09 12 06 71 0176*  	dl 0x061209,BUF_0625
       02 00       
040C57 06 0D 06 72 0177*  	dl 0x060D06,BUF_0626
       02 00       
040C5D 08 0D 06 73 0178*  	dl 0x060D08,BUF_0627
       02 00       
040C63 07 0F 03 74 0179*  	dl 0x030F07,BUF_0628
       02 00       
040C69 09 0C 06 75 0180*  	dl 0x060C09,BUF_0629
       02 00       
040C6F 09 0C 06 76 0181*  	dl 0x060C09,BUF_0630
       02 00       
040C75 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_0631
       02 00       
040C7B 09 0C 06 78 0183*  	dl 0x060C09,BUF_0632
       02 00       
040C81 09 11 06 79 0184*  	dl 0x061109,BUF_0633
       02 00       
040C87 09 0C 06 7A 0185*  	dl 0x060C09,BUF_0634
       02 00       
040C8D             0186*  
040C8D             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
040C8D             0188*  load_font_itc_honda:
040C8D             0189*  
040C8D 21 20 02 00 0190*  	ld hl,BUF_0544
040C91 01 06 00 00 0191*  	ld bc,6
040C95 11 01 00 00 0192*  	ld de,1
040C99 DD 21 06 00 0193*  	ld ix,6
       00          
040C9E FD 21 0E 13 0194*  	ld iy,Fhonda032
       04          
040CA3 CD DE 2A 04 0195*  	call vdu_load_img_2
040CA7             0196*  ; Missing character 33
040CA7             0197*  ; Missing character 34
040CA7             0198*  ; Missing character 35
040CA7             0199*  ; Missing character 36
040CA7             0200*  ; Missing character 37
040CA7             0201*  ; Missing character 38
040CA7             0202*  ; Missing character 39
040CA7             0203*  ; Missing character 40
040CA7             0204*  ; Missing character 41
040CA7             0205*  ; Missing character 42
040CA7             0206*  ; Missing character 43
040CA7             0207*  ; Missing character 44
040CA7             0208*  ; Missing character 45
040CA7             0209*  
040CA7 21 2E 02 00 0210*  	ld hl,BUF_0558
040CAB 01 05 00 00 0211*  	ld bc,5
040CAF 11 05 00 00 0212*  	ld de,5
040CB3 DD 21 19 00 0213*  	ld ix,25
       00          
040CB8 FD 21 24 13 0214*  	ld iy,Fhonda046
       04          
040CBD CD DE 2A 04 0215*  	call vdu_load_img_2
040CC1             0216*  ; Missing character 47
040CC1             0217*  
040CC1 21 30 02 00 0218*  	ld hl,BUF_0560
040CC5 01 0A 00 00 0219*  	ld bc,10
040CC9 11 12 00 00 0220*  	ld de,18
040CCD DD 21 B4 00 0221*  	ld ix,180
       00          
040CD2 FD 21 3A 13 0222*  	ld iy,Fhonda048
       04          
040CD7 CD DE 2A 04 0223*  	call vdu_load_img_2
040CDB             0224*  
040CDB 21 31 02 00 0225*  	ld hl,BUF_0561
040CDF 01 04 00 00 0226*  	ld bc,4
040CE3 11 12 00 00 0227*  	ld de,18
040CE7 DD 21 48 00 0228*  	ld ix,72
       00          
040CEC FD 21 50 13 0229*  	ld iy,Fhonda049
       04          
040CF1 CD DE 2A 04 0230*  	call vdu_load_img_2
040CF5             0231*  
040CF5 21 32 02 00 0232*  	ld hl,BUF_0562
040CF9 01 09 00 00 0233*  	ld bc,9
040CFD 11 12 00 00 0234*  	ld de,18
040D01 DD 21 A2 00 0235*  	ld ix,162
       00          
040D06 FD 21 66 13 0236*  	ld iy,Fhonda050
       04          
040D0B CD DE 2A 04 0237*  	call vdu_load_img_2
040D0F             0238*  
040D0F 21 33 02 00 0239*  	ld hl,BUF_0563
040D13 01 0A 00 00 0240*  	ld bc,10
040D17 11 12 00 00 0241*  	ld de,18
040D1B DD 21 B4 00 0242*  	ld ix,180
       00          
040D20 FD 21 7C 13 0243*  	ld iy,Fhonda051
       04          
040D25 CD DE 2A 04 0244*  	call vdu_load_img_2
040D29             0245*  
040D29 21 34 02 00 0246*  	ld hl,BUF_0564
040D2D 01 0C 00 00 0247*  	ld bc,12
040D31 11 12 00 00 0248*  	ld de,18
040D35 DD 21 D8 00 0249*  	ld ix,216
       00          
040D3A FD 21 92 13 0250*  	ld iy,Fhonda052
       04          
040D3F CD DE 2A 04 0251*  	call vdu_load_img_2
040D43             0252*  
040D43 21 35 02 00 0253*  	ld hl,BUF_0565
040D47 01 0A 00 00 0254*  	ld bc,10
040D4B 11 12 00 00 0255*  	ld de,18
040D4F DD 21 B4 00 0256*  	ld ix,180
       00          
040D54 FD 21 A8 13 0257*  	ld iy,Fhonda053
       04          
040D59 CD DE 2A 04 0258*  	call vdu_load_img_2
040D5D             0259*  
040D5D 21 36 02 00 0260*  	ld hl,BUF_0566
040D61 01 0A 00 00 0261*  	ld bc,10
040D65 11 12 00 00 0262*  	ld de,18
040D69 DD 21 B4 00 0263*  	ld ix,180
       00          
040D6E FD 21 BE 13 0264*  	ld iy,Fhonda054
       04          
040D73 CD DE 2A 04 0265*  	call vdu_load_img_2
040D77             0266*  
040D77 21 37 02 00 0267*  	ld hl,BUF_0567
040D7B 01 08 00 00 0268*  	ld bc,8
040D7F 11 12 00 00 0269*  	ld de,18
040D83 DD 21 90 00 0270*  	ld ix,144
       00          
040D88 FD 21 D4 13 0271*  	ld iy,Fhonda055
       04          
040D8D CD DE 2A 04 0272*  	call vdu_load_img_2
040D91             0273*  
040D91 21 38 02 00 0274*  	ld hl,BUF_0568
040D95 01 0A 00 00 0275*  	ld bc,10
040D99 11 12 00 00 0276*  	ld de,18
040D9D DD 21 B4 00 0277*  	ld ix,180
       00          
040DA2 FD 21 EA 13 0278*  	ld iy,Fhonda056
       04          
040DA7 CD DE 2A 04 0279*  	call vdu_load_img_2
040DAB             0280*  
040DAB 21 39 02 00 0281*  	ld hl,BUF_0569
040DAF 01 0A 00 00 0282*  	ld bc,10
040DB3 11 12 00 00 0283*  	ld de,18
040DB7 DD 21 B4 00 0284*  	ld ix,180
       00          
040DBC FD 21 00 14 0285*  	ld iy,Fhonda057
       04          
040DC1 CD DE 2A 04 0286*  	call vdu_load_img_2
040DC5             0287*  ; Missing character 58
040DC5             0288*  ; Missing character 59
040DC5             0289*  ; Missing character 60
040DC5             0290*  ; Missing character 61
040DC5             0291*  ; Missing character 62
040DC5             0292*  ; Missing character 63
040DC5             0293*  ; Missing character 64
040DC5             0294*  
040DC5 21 41 02 00 0295*  	ld hl,BUF_0577
040DC9 01 0A 00 00 0296*  	ld bc,10
040DCD 11 12 00 00 0297*  	ld de,18
040DD1 DD 21 B4 00 0298*  	ld ix,180
       00          
040DD6 FD 21 16 14 0299*  	ld iy,Fhonda065
       04          
040DDB CD DE 2A 04 0300*  	call vdu_load_img_2
040DDF             0301*  
040DDF 21 42 02 00 0302*  	ld hl,BUF_0578
040DE3 01 0A 00 00 0303*  	ld bc,10
040DE7 11 12 00 00 0304*  	ld de,18
040DEB DD 21 B4 00 0305*  	ld ix,180
       00          
040DF0 FD 21 2C 14 0306*  	ld iy,Fhonda066
       04          
040DF5 CD DE 2A 04 0307*  	call vdu_load_img_2
040DF9             0308*  
040DF9 21 43 02 00 0309*  	ld hl,BUF_0579
040DFD 01 08 00 00 0310*  	ld bc,8
040E01 11 13 00 00 0311*  	ld de,19
040E05 DD 21 98 00 0312*  	ld ix,152
       00          
040E0A FD 21 42 14 0313*  	ld iy,Fhonda067
       04          
040E0F CD DE 2A 04 0314*  	call vdu_load_img_2
040E13             0315*  
040E13 21 44 02 00 0316*  	ld hl,BUF_0580
040E17 01 0A 00 00 0317*  	ld bc,10
040E1B 11 12 00 00 0318*  	ld de,18
040E1F DD 21 B4 00 0319*  	ld ix,180
       00          
040E24 FD 21 58 14 0320*  	ld iy,Fhonda068
       04          
040E29 CD DE 2A 04 0321*  	call vdu_load_img_2
040E2D             0322*  
040E2D 21 45 02 00 0323*  	ld hl,BUF_0581
040E31 01 08 00 00 0324*  	ld bc,8
040E35 11 12 00 00 0325*  	ld de,18
040E39 DD 21 90 00 0326*  	ld ix,144
       00          
040E3E FD 21 6E 14 0327*  	ld iy,Fhonda069
       04          
040E43 CD DE 2A 04 0328*  	call vdu_load_img_2
040E47             0329*  
040E47 21 46 02 00 0330*  	ld hl,BUF_0582
040E4B 01 08 00 00 0331*  	ld bc,8
040E4F 11 12 00 00 0332*  	ld de,18
040E53 DD 21 90 00 0333*  	ld ix,144
       00          
040E58 FD 21 84 14 0334*  	ld iy,Fhonda070
       04          
040E5D CD DE 2A 04 0335*  	call vdu_load_img_2
040E61             0336*  
040E61 21 47 02 00 0337*  	ld hl,BUF_0583
040E65 01 0A 00 00 0338*  	ld bc,10
040E69 11 12 00 00 0339*  	ld de,18
040E6D DD 21 B4 00 0340*  	ld ix,180
       00          
040E72 FD 21 9A 14 0341*  	ld iy,Fhonda071
       04          
040E77 CD DE 2A 04 0342*  	call vdu_load_img_2
040E7B             0343*  
040E7B 21 48 02 00 0344*  	ld hl,BUF_0584
040E7F 01 0A 00 00 0345*  	ld bc,10
040E83 11 12 00 00 0346*  	ld de,18
040E87 DD 21 B4 00 0347*  	ld ix,180
       00          
040E8C FD 21 B0 14 0348*  	ld iy,Fhonda072
       04          
040E91 CD DE 2A 04 0349*  	call vdu_load_img_2
040E95             0350*  
040E95 21 49 02 00 0351*  	ld hl,BUF_0585
040E99 01 03 00 00 0352*  	ld bc,3
040E9D 11 12 00 00 0353*  	ld de,18
040EA1 DD 21 36 00 0354*  	ld ix,54
       00          
040EA6 FD 21 C6 14 0355*  	ld iy,Fhonda073
       04          
040EAB CD DE 2A 04 0356*  	call vdu_load_img_2
040EAF             0357*  
040EAF 21 4A 02 00 0358*  	ld hl,BUF_0586
040EB3 01 06 00 00 0359*  	ld bc,6
040EB7 11 12 00 00 0360*  	ld de,18
040EBB DD 21 6C 00 0361*  	ld ix,108
       00          
040EC0 FD 21 DC 14 0362*  	ld iy,Fhonda074
       04          
040EC5 CD DE 2A 04 0363*  	call vdu_load_img_2
040EC9             0364*  
040EC9 21 4B 02 00 0365*  	ld hl,BUF_0587
040ECD 01 0A 00 00 0366*  	ld bc,10
040ED1 11 12 00 00 0367*  	ld de,18
040ED5 DD 21 B4 00 0368*  	ld ix,180
       00          
040EDA FD 21 F2 14 0369*  	ld iy,Fhonda075
       04          
040EDF CD DE 2A 04 0370*  	call vdu_load_img_2
040EE3             0371*  
040EE3 21 4C 02 00 0372*  	ld hl,BUF_0588
040EE7 01 08 00 00 0373*  	ld bc,8
040EEB 11 12 00 00 0374*  	ld de,18
040EEF DD 21 90 00 0375*  	ld ix,144
       00          
040EF4 FD 21 08 15 0376*  	ld iy,Fhonda076
       04          
040EF9 CD DE 2A 04 0377*  	call vdu_load_img_2
040EFD             0378*  
040EFD 21 4D 02 00 0379*  	ld hl,BUF_0589
040F01 01 0E 00 00 0380*  	ld bc,14
040F05 11 12 00 00 0381*  	ld de,18
040F09 DD 21 FC 00 0382*  	ld ix,252
       00          
040F0E FD 21 1E 15 0383*  	ld iy,Fhonda077
       04          
040F13 CD DE 2A 04 0384*  	call vdu_load_img_2
040F17             0385*  
040F17 21 4E 02 00 0386*  	ld hl,BUF_0590
040F1B 01 0A 00 00 0387*  	ld bc,10
040F1F 11 12 00 00 0388*  	ld de,18
040F23 DD 21 B4 00 0389*  	ld ix,180
       00          
040F28 FD 21 34 15 0390*  	ld iy,Fhonda078
       04          
040F2D CD DE 2A 04 0391*  	call vdu_load_img_2
040F31             0392*  
040F31 21 4F 02 00 0393*  	ld hl,BUF_0591
040F35 01 0A 00 00 0394*  	ld bc,10
040F39 11 12 00 00 0395*  	ld de,18
040F3D DD 21 B4 00 0396*  	ld ix,180
       00          
040F42 FD 21 4A 15 0397*  	ld iy,Fhonda079
       04          
040F47 CD DE 2A 04 0398*  	call vdu_load_img_2
040F4B             0399*  
040F4B 21 50 02 00 0400*  	ld hl,BUF_0592
040F4F 01 0A 00 00 0401*  	ld bc,10
040F53 11 12 00 00 0402*  	ld de,18
040F57 DD 21 B4 00 0403*  	ld ix,180
       00          
040F5C FD 21 60 15 0404*  	ld iy,Fhonda080
       04          
040F61 CD DE 2A 04 0405*  	call vdu_load_img_2
040F65             0406*  
040F65 21 51 02 00 0407*  	ld hl,BUF_0593
040F69 01 0A 00 00 0408*  	ld bc,10
040F6D 11 15 00 00 0409*  	ld de,21
040F71 DD 21 D2 00 0410*  	ld ix,210
       00          
040F76 FD 21 76 15 0411*  	ld iy,Fhonda081
       04          
040F7B CD DE 2A 04 0412*  	call vdu_load_img_2
040F7F             0413*  
040F7F 21 52 02 00 0414*  	ld hl,BUF_0594
040F83 01 0A 00 00 0415*  	ld bc,10
040F87 11 12 00 00 0416*  	ld de,18
040F8B DD 21 B4 00 0417*  	ld ix,180
       00          
040F90 FD 21 8C 15 0418*  	ld iy,Fhonda082
       04          
040F95 CD DE 2A 04 0419*  	call vdu_load_img_2
040F99             0420*  
040F99 21 53 02 00 0421*  	ld hl,BUF_0595
040F9D 01 09 00 00 0422*  	ld bc,9
040FA1 11 13 00 00 0423*  	ld de,19
040FA5 DD 21 AB 00 0424*  	ld ix,171
       00          
040FAA FD 21 A2 15 0425*  	ld iy,Fhonda083
       04          
040FAF CD DE 2A 04 0426*  	call vdu_load_img_2
040FB3             0427*  
040FB3 21 54 02 00 0428*  	ld hl,BUF_0596
040FB7 01 0A 00 00 0429*  	ld bc,10
040FBB 11 12 00 00 0430*  	ld de,18
040FBF DD 21 B4 00 0431*  	ld ix,180
       00          
040FC4 FD 21 B8 15 0432*  	ld iy,Fhonda084
       04          
040FC9 CD DE 2A 04 0433*  	call vdu_load_img_2
040FCD             0434*  
040FCD 21 55 02 00 0435*  	ld hl,BUF_0597
040FD1 01 0A 00 00 0436*  	ld bc,10
040FD5 11 12 00 00 0437*  	ld de,18
040FD9 DD 21 B4 00 0438*  	ld ix,180
       00          
040FDE FD 21 CE 15 0439*  	ld iy,Fhonda085
       04          
040FE3 CD DE 2A 04 0440*  	call vdu_load_img_2
040FE7             0441*  
040FE7 21 56 02 00 0442*  	ld hl,BUF_0598
040FEB 01 0A 00 00 0443*  	ld bc,10
040FEF 11 12 00 00 0444*  	ld de,18
040FF3 DD 21 B4 00 0445*  	ld ix,180
       00          
040FF8 FD 21 E4 15 0446*  	ld iy,Fhonda086
       04          
040FFD CD DE 2A 04 0447*  	call vdu_load_img_2
041001             0448*  
041001 21 57 02 00 0449*  	ld hl,BUF_0599
041005 01 10 00 00 0450*  	ld bc,16
041009 11 12 00 00 0451*  	ld de,18
04100D DD 21 20 01 0452*  	ld ix,288
       00          
041012 FD 21 FA 15 0453*  	ld iy,Fhonda087
       04          
041017 CD DE 2A 04 0454*  	call vdu_load_img_2
04101B             0455*  
04101B 21 58 02 00 0456*  	ld hl,BUF_0600
04101F 01 0A 00 00 0457*  	ld bc,10
041023 11 12 00 00 0458*  	ld de,18
041027 DD 21 B4 00 0459*  	ld ix,180
       00          
04102C FD 21 10 16 0460*  	ld iy,Fhonda088
       04          
041031 CD DE 2A 04 0461*  	call vdu_load_img_2
041035             0462*  
041035 21 59 02 00 0463*  	ld hl,BUF_0601
041039 01 0A 00 00 0464*  	ld bc,10
04103D 11 12 00 00 0465*  	ld de,18
041041 DD 21 B4 00 0466*  	ld ix,180
       00          
041046 FD 21 26 16 0467*  	ld iy,Fhonda089
       04          
04104B CD DE 2A 04 0468*  	call vdu_load_img_2
04104F             0469*  
04104F 21 5A 02 00 0470*  	ld hl,BUF_0602
041053 01 09 00 00 0471*  	ld bc,9
041057 11 12 00 00 0472*  	ld de,18
04105B DD 21 A2 00 0473*  	ld ix,162
       00          
041060 FD 21 3C 16 0474*  	ld iy,Fhonda090
       04          
041065 CD DE 2A 04 0475*  	call vdu_load_img_2
041069             0476*  ; Missing character 91
041069             0477*  ; Missing character 92
041069             0478*  ; Missing character 93
041069             0479*  ; Missing character 94
041069             0480*  ; Missing character 95
041069             0481*  ; Missing character 96
041069             0482*  
041069 21 61 02 00 0483*  	ld hl,BUF_0609
04106D 01 08 00 00 0484*  	ld bc,8
041071 11 0C 00 00 0485*  	ld de,12
041075 DD 21 60 00 0486*  	ld ix,96
       00          
04107A FD 21 52 16 0487*  	ld iy,Fhonda097
       04          
04107F CD DE 2A 04 0488*  	call vdu_load_img_2
041083             0489*  
041083 21 62 02 00 0490*  	ld hl,BUF_0610
041087 01 09 00 00 0491*  	ld bc,9
04108B 11 12 00 00 0492*  	ld de,18
04108F DD 21 A2 00 0493*  	ld ix,162
       00          
041094 FD 21 68 16 0494*  	ld iy,Fhonda098
       04          
041099 CD DE 2A 04 0495*  	call vdu_load_img_2
04109D             0496*  
04109D 21 63 02 00 0497*  	ld hl,BUF_0611
0410A1 01 07 00 00 0498*  	ld bc,7
0410A5 11 0C 00 00 0499*  	ld de,12
0410A9 DD 21 54 00 0500*  	ld ix,84
       00          
0410AE FD 21 7E 16 0501*  	ld iy,Fhonda099
       04          
0410B3 CD DE 2A 04 0502*  	call vdu_load_img_2
0410B7             0503*  
0410B7 21 64 02 00 0504*  	ld hl,BUF_0612
0410BB 01 09 00 00 0505*  	ld bc,9
0410BF 11 12 00 00 0506*  	ld de,18
0410C3 DD 21 A2 00 0507*  	ld ix,162
       00          
0410C8 FD 21 94 16 0508*  	ld iy,Fhonda100
       04          
0410CD CD DE 2A 04 0509*  	call vdu_load_img_2
0410D1             0510*  
0410D1 21 65 02 00 0511*  	ld hl,BUF_0613
0410D5 01 08 00 00 0512*  	ld bc,8
0410D9 11 0C 00 00 0513*  	ld de,12
0410DD DD 21 60 00 0514*  	ld ix,96
       00          
0410E2 FD 21 AA 16 0515*  	ld iy,Fhonda101
       04          
0410E7 CD DE 2A 04 0516*  	call vdu_load_img_2
0410EB             0517*  
0410EB 21 66 02 00 0518*  	ld hl,BUF_0614
0410EF 01 09 00 00 0519*  	ld bc,9
0410F3 11 12 00 00 0520*  	ld de,18
0410F7 DD 21 A2 00 0521*  	ld ix,162
       00          
0410FC FD 21 C0 16 0522*  	ld iy,Fhonda102
       04          
041101 CD DE 2A 04 0523*  	call vdu_load_img_2
041105             0524*  
041105 21 67 02 00 0525*  	ld hl,BUF_0615
041109 01 09 00 00 0526*  	ld bc,9
04110D 11 12 00 00 0527*  	ld de,18
041111 DD 21 A2 00 0528*  	ld ix,162
       00          
041116 FD 21 D6 16 0529*  	ld iy,Fhonda103
       04          
04111B CD DE 2A 04 0530*  	call vdu_load_img_2
04111F             0531*  
04111F 21 68 02 00 0532*  	ld hl,BUF_0616
041123 01 09 00 00 0533*  	ld bc,9
041127 11 12 00 00 0534*  	ld de,18
04112B DD 21 A2 00 0535*  	ld ix,162
       00          
041130 FD 21 EC 16 0536*  	ld iy,Fhonda104
       04          
041135 CD DE 2A 04 0537*  	call vdu_load_img_2
041139             0538*  
041139 21 69 02 00 0539*  	ld hl,BUF_0617
04113D 01 04 00 00 0540*  	ld bc,4
041141 11 12 00 00 0541*  	ld de,18
041145 DD 21 48 00 0542*  	ld ix,72
       00          
04114A FD 21 02 17 0543*  	ld iy,Fhonda105
       04          
04114F CD DE 2A 04 0544*  	call vdu_load_img_2
041153             0545*  
041153 21 6A 02 00 0546*  	ld hl,BUF_0618
041157 01 08 00 00 0547*  	ld bc,8
04115B 11 18 00 00 0548*  	ld de,24
04115F DD 21 C0 00 0549*  	ld ix,192
       00          
041164 FD 21 18 17 0550*  	ld iy,Fhonda106
       04          
041169 CD DE 2A 04 0551*  	call vdu_load_img_2
04116D             0552*  
04116D 21 6B 02 00 0553*  	ld hl,BUF_0619
041171 01 09 00 00 0554*  	ld bc,9
041175 11 12 00 00 0555*  	ld de,18
041179 DD 21 A2 00 0556*  	ld ix,162
       00          
04117E FD 21 2E 17 0557*  	ld iy,Fhonda107
       04          
041183 CD DE 2A 04 0558*  	call vdu_load_img_2
041187             0559*  
041187 21 6C 02 00 0560*  	ld hl,BUF_0620
04118B 01 03 00 00 0561*  	ld bc,3
04118F 11 12 00 00 0562*  	ld de,18
041193 DD 21 36 00 0563*  	ld ix,54
       00          
041198 FD 21 44 17 0564*  	ld iy,Fhonda108
       04          
04119D CD DE 2A 04 0565*  	call vdu_load_img_2
0411A1             0566*  
0411A1 21 6D 02 00 0567*  	ld hl,BUF_0621
0411A5 01 0E 00 00 0568*  	ld bc,14
0411A9 11 0D 00 00 0569*  	ld de,13
0411AD DD 21 B6 00 0570*  	ld ix,182
       00          
0411B2 FD 21 5A 17 0571*  	ld iy,Fhonda109
       04          
0411B7 CD DE 2A 04 0572*  	call vdu_load_img_2
0411BB             0573*  
0411BB 21 6E 02 00 0574*  	ld hl,BUF_0622
0411BF 01 09 00 00 0575*  	ld bc,9
0411C3 11 0C 00 00 0576*  	ld de,12
0411C7 DD 21 6C 00 0577*  	ld ix,108
       00          
0411CC FD 21 70 17 0578*  	ld iy,Fhonda110
       04          
0411D1 CD DE 2A 04 0579*  	call vdu_load_img_2
0411D5             0580*  
0411D5 21 6F 02 00 0581*  	ld hl,BUF_0623
0411D9 01 09 00 00 0582*  	ld bc,9
0411DD 11 0C 00 00 0583*  	ld de,12
0411E1 DD 21 6C 00 0584*  	ld ix,108
       00          
0411E6 FD 21 86 17 0585*  	ld iy,Fhonda111
       04          
0411EB CD DE 2A 04 0586*  	call vdu_load_img_2
0411EF             0587*  
0411EF 21 70 02 00 0588*  	ld hl,BUF_0624
0411F3 01 09 00 00 0589*  	ld bc,9
0411F7 11 12 00 00 0590*  	ld de,18
0411FB DD 21 A2 00 0591*  	ld ix,162
       00          
041200 FD 21 9C 17 0592*  	ld iy,Fhonda112
       04          
041205 CD DE 2A 04 0593*  	call vdu_load_img_2
041209             0594*  
041209 21 71 02 00 0595*  	ld hl,BUF_0625
04120D 01 09 00 00 0596*  	ld bc,9
041211 11 12 00 00 0597*  	ld de,18
041215 DD 21 A2 00 0598*  	ld ix,162
       00          
04121A FD 21 B2 17 0599*  	ld iy,Fhonda113
       04          
04121F CD DE 2A 04 0600*  	call vdu_load_img_2
041223             0601*  
041223 21 72 02 00 0602*  	ld hl,BUF_0626
041227 01 06 00 00 0603*  	ld bc,6
04122B 11 0D 00 00 0604*  	ld de,13
04122F DD 21 4E 00 0605*  	ld ix,78
       00          
041234 FD 21 C8 17 0606*  	ld iy,Fhonda114
       04          
041239 CD DE 2A 04 0607*  	call vdu_load_img_2
04123D             0608*  
04123D 21 73 02 00 0609*  	ld hl,BUF_0627
041241 01 08 00 00 0610*  	ld bc,8
041245 11 0D 00 00 0611*  	ld de,13
041249 DD 21 68 00 0612*  	ld ix,104
       00          
04124E FD 21 DE 17 0613*  	ld iy,Fhonda115
       04          
041253 CD DE 2A 04 0614*  	call vdu_load_img_2
041257             0615*  
041257 21 74 02 00 0616*  	ld hl,BUF_0628
04125B 01 07 00 00 0617*  	ld bc,7
04125F 11 0F 00 00 0618*  	ld de,15
041263 DD 21 69 00 0619*  	ld ix,105
       00          
041268 FD 21 F4 17 0620*  	ld iy,Fhonda116
       04          
04126D CD DE 2A 04 0621*  	call vdu_load_img_2
041271             0622*  
041271 21 75 02 00 0623*  	ld hl,BUF_0629
041275 01 09 00 00 0624*  	ld bc,9
041279 11 0C 00 00 0625*  	ld de,12
04127D DD 21 6C 00 0626*  	ld ix,108
       00          
041282 FD 21 0A 18 0627*  	ld iy,Fhonda117
       04          
041287 CD DE 2A 04 0628*  	call vdu_load_img_2
04128B             0629*  
04128B 21 76 02 00 0630*  	ld hl,BUF_0630
04128F 01 09 00 00 0631*  	ld bc,9
041293 11 0C 00 00 0632*  	ld de,12
041297 DD 21 6C 00 0633*  	ld ix,108
       00          
04129C FD 21 20 18 0634*  	ld iy,Fhonda118
       04          
0412A1 CD DE 2A 04 0635*  	call vdu_load_img_2
0412A5             0636*  
0412A5 21 77 02 00 0637*  	ld hl,BUF_0631
0412A9 01 0E 00 00 0638*  	ld bc,14
0412AD 11 0C 00 00 0639*  	ld de,12
0412B1 DD 21 A8 00 0640*  	ld ix,168
       00          
0412B6 FD 21 36 18 0641*  	ld iy,Fhonda119
       04          
0412BB CD DE 2A 04 0642*  	call vdu_load_img_2
0412BF             0643*  
0412BF 21 78 02 00 0644*  	ld hl,BUF_0632
0412C3 01 09 00 00 0645*  	ld bc,9
0412C7 11 0C 00 00 0646*  	ld de,12
0412CB DD 21 6C 00 0647*  	ld ix,108
       00          
0412D0 FD 21 4C 18 0648*  	ld iy,Fhonda120
       04          
0412D5 CD DE 2A 04 0649*  	call vdu_load_img_2
0412D9             0650*  
0412D9 21 79 02 00 0651*  	ld hl,BUF_0633
0412DD 01 09 00 00 0652*  	ld bc,9
0412E1 11 11 00 00 0653*  	ld de,17
0412E5 DD 21 99 00 0654*  	ld ix,153
       00          
0412EA FD 21 62 18 0655*  	ld iy,Fhonda121
       04          
0412EF CD DE 2A 04 0656*  	call vdu_load_img_2
0412F3             0657*  
0412F3 21 7A 02 00 0658*  	ld hl,BUF_0634
0412F7 01 09 00 00 0659*  	ld bc,9
0412FB 11 0C 00 00 0660*  	ld de,12
0412FF DD 21 6C 00 0661*  	ld ix,108
       00          
041304 FD 21 78 18 0662*  	ld iy,Fhonda122
       04          
041309 CD DE 2A 04 0663*  	call vdu_load_img_2
04130D             0664*  
04130D C9          0665*  	ret
04130E             0666*  
04130E 66 6F 6E 74 0667*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
041324 66 6F 6E 74 0668*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
04133A 66 6F 6E 74 0669*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
041350 66 6F 6E 74 0670*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
041366 66 6F 6E 74 0671*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
04137C 66 6F 6E 74 0672*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
041392 66 6F 6E 74 0673*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
0413A8 66 6F 6E 74 0674*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
0413BE 66 6F 6E 74 0675*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
0413D4 66 6F 6E 74 0676*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
0413EA 66 6F 6E 74 0677*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
041400 66 6F 6E 74 0678*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
041416 66 6F 6E 74 0679*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
04142C 66 6F 6E 74 0680*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
041442 66 6F 6E 74 0681*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
041458 66 6F 6E 74 0682*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
04146E 66 6F 6E 74 0683*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
041484 66 6F 6E 74 0684*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
04149A 66 6F 6E 74 0685*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
0414B0 66 6F 6E 74 0686*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
0414C6 66 6F 6E 74 0687*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
0414DC 66 6F 6E 74 0688*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
0414F2 66 6F 6E 74 0689*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
041508 66 6F 6E 74 0690*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
04151E 66 6F 6E 74 0691*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
041534 66 6F 6E 74 0692*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
04154A 66 6F 6E 74 0693*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
041560 66 6F 6E 74 0694*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
041576 66 6F 6E 74 0695*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
04158C 66 6F 6E 74 0696*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
0415A2 66 6F 6E 74 0697*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
0415B8 66 6F 6E 74 0698*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
0415CE 66 6F 6E 74 0699*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
0415E4 66 6F 6E 74 0700*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
0415FA 66 6F 6E 74 0701*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
041610 66 6F 6E 74 0702*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
041626 66 6F 6E 74 0703*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
04163C 66 6F 6E 74 0704*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
041652 66 6F 6E 74 0705*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
041668 66 6F 6E 74 0706*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
04167E 66 6F 6E 74 0707*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
041694 66 6F 6E 74 0708*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
0416AA 66 6F 6E 74 0709*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
0416C0 66 6F 6E 74 0710*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
0416D6 66 6F 6E 74 0711*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
0416EC 66 6F 6E 74 0712*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
041702 66 6F 6E 74 0713*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
041718 66 6F 6E 74 0714*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
04172E 66 6F 6E 74 0715*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
041744 66 6F 6E 74 0716*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
04175A 66 6F 6E 74 0717*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
041770 66 6F 6E 74 0718*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
041786 66 6F 6E 74 0719*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
04179C 66 6F 6E 74 0720*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
0417B2 66 6F 6E 74 0721*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
0417C8 66 6F 6E 74 0722*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
0417DE 66 6F 6E 74 0723*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
0417F4 66 6F 6E 74 0724*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
04180A 66 6F 6E 74 0725*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
041820 66 6F 6E 74 0726*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
041836 66 6F 6E 74 0727*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
04184C 66 6F 6E 74 0728*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
041862 66 6F 6E 74 0729*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
041878 66 6F 6E 74 0730*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
04188E             0018   	; include "src/asm/font_retro_computer.inc"
04188E             0019   	include "src/asm/ui.inc"
04188E             0001*  ; ui routines will go here
04188E             0020   	include "src/asm/ui_img.inc"
04188E             0001*  ; Bitmap indices:
04188E             0002*  BUF_UI_BJ_025: equ 0x0300
04188E             0003*  BUF_UI_BJ_050: equ 0x0301
04188E             0004*  BUF_UI_BJ_075: equ 0x0302
04188E             0005*  BUF_UI_BJ_100: equ 0x0303
04188E             0006*  BUF_UI_BJ_120_120: equ 0x0304
04188E             0007*  BUF_UI_LOWER_PANEL: equ 0x0305
04188E             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x0306
04188E             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x0307
04188E             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x0308
04188E             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x0309
04188E             0012*  BUF_UI_SPLASH: equ 0x030A
04188E             0013*  
04188E             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
04188E             0015*  load_ui_images:
04188E             0016*  
04188E 21 00 03 00 0017*  	ld hl,BUF_UI_BJ_025
041892 01 20 00 00 0018*  	ld bc,32
041896 11 20 00 00 0019*  	ld de,32
04189A DD 21 00 04 0020*  	ld ix,1024
       00          
04189F FD 21 AD 19 0021*  	ld iy,F_UI_bj_025
       04          
0418A4 CD DE 2A 04 0022*  	call vdu_load_img_2
0418A8             0023*  
0418A8 21 01 03 00 0024*  	ld hl,BUF_UI_BJ_050
0418AC 01 20 00 00 0025*  	ld bc,32
0418B0 11 20 00 00 0026*  	ld de,32
0418B4 DD 21 00 04 0027*  	ld ix,1024
       00          
0418B9 FD 21 BD 19 0028*  	ld iy,F_UI_bj_050
       04          
0418BE CD DE 2A 04 0029*  	call vdu_load_img_2
0418C2             0030*  
0418C2 21 02 03 00 0031*  	ld hl,BUF_UI_BJ_075
0418C6 01 20 00 00 0032*  	ld bc,32
0418CA 11 20 00 00 0033*  	ld de,32
0418CE DD 21 00 04 0034*  	ld ix,1024
       00          
0418D3 FD 21 CD 19 0035*  	ld iy,F_UI_bj_075
       04          
0418D8 CD DE 2A 04 0036*  	call vdu_load_img_2
0418DC             0037*  
0418DC 21 03 03 00 0038*  	ld hl,BUF_UI_BJ_100
0418E0 01 20 00 00 0039*  	ld bc,32
0418E4 11 20 00 00 0040*  	ld de,32
0418E8 DD 21 00 04 0041*  	ld ix,1024
       00          
0418ED FD 21 DD 19 0042*  	ld iy,F_UI_bj_100
       04          
0418F2 CD DE 2A 04 0043*  	call vdu_load_img_2
0418F6             0044*  
0418F6 21 04 03 00 0045*  	ld hl,BUF_UI_BJ_120_120
0418FA 01 78 00 00 0046*  	ld bc,120
0418FE 11 78 00 00 0047*  	ld de,120
041902 DD 21 40 38 0048*  	ld ix,14400
       00          
041907 FD 21 ED 19 0049*  	ld iy,F_UI_bj_120_120
       04          
04190C CD DE 2A 04 0050*  	call vdu_load_img_2
041910             0051*  
041910 21 05 03 00 0052*  	ld hl,BUF_UI_LOWER_PANEL
041914 01 40 01 00 0053*  	ld bc,320
041918 11 50 00 00 0054*  	ld de,80
04191C DD 21 00 64 0055*  	ld ix,25600
       00          
041921 FD 21 01 1A 0056*  	ld iy,F_UI_lower_panel
       04          
041926 CD DE 2A 04 0057*  	call vdu_load_img_2
04192A             0058*  
04192A 21 06 03 00 0059*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
04192E 01 28 00 00 0060*  	ld bc,40
041932 11 14 00 00 0061*  	ld de,20
041936 DD 21 20 03 0062*  	ld ix,800
       00          
04193B FD 21 16 1A 0063*  	ld iy,F_UI_lower_panel_gatling
       04          
041940 CD DE 2A 04 0064*  	call vdu_load_img_2
041944             0065*  
041944 21 07 03 00 0066*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
041948 01 28 00 00 0067*  	ld bc,40
04194C 11 14 00 00 0068*  	ld de,20
041950 DD 21 20 03 0069*  	ld ix,800
       00          
041955 FD 21 33 1A 0070*  	ld iy,F_UI_lower_panel_knife
       04          
04195A CD DE 2A 04 0071*  	call vdu_load_img_2
04195E             0072*  
04195E 21 08 03 00 0073*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
041962 01 28 00 00 0074*  	ld bc,40
041966 11 14 00 00 0075*  	ld de,20
04196A DD 21 20 03 0076*  	ld ix,800
       00          
04196F FD 21 4E 1A 0077*  	ld iy,F_UI_lower_panel_machine_gun
       04          
041974 CD DE 2A 04 0078*  	call vdu_load_img_2
041978             0079*  
041978 21 09 03 00 0080*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
04197C 01 28 00 00 0081*  	ld bc,40
041980 11 14 00 00 0082*  	ld de,20
041984 DD 21 20 03 0083*  	ld ix,800
       00          
041989 FD 21 6F 1A 0084*  	ld iy,F_UI_lower_panel_pistol
       04          
04198E CD DE 2A 04 0085*  	call vdu_load_img_2
041992             0086*  
041992 21 0A 03 00 0087*  	ld hl,BUF_UI_SPLASH
041996 01 40 01 00 0088*  	ld bc,320
04199A 11 A0 00 00 0089*  	ld de,160
04199E DD 21 00 C8 0090*  	ld ix,51200
       00          
0419A3 FD 21 8B 1A 0091*  	ld iy,F_UI_splash
       04          
0419A8 CD DE 2A 04 0092*  	call vdu_load_img_2
0419AC             0093*  
0419AC C9          0094*  	ret
0419AD             0095*  
0419AD 75 69 2F 62 0096*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0419BD 75 69 2F 62 0097*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
0419CD 75 69 2F 62 0098*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
0419DD 75 69 2F 62 0099*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
0419ED 75 69 2F 62 0100*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
041A01 75 69 2F 6C 0101*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
041A16 75 69 2F 6C 0102*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
041A33 75 69 2F 6C 0103*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
041A4E 75 69 2F 6C 0104*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
041A6F 75 69 2F 6C 0105*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
041A8B 75 69 2F 73 0106*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
041A9B             0021   	include "src/asm/ui_img_bj.inc"
041A9B             0001*  ; Bitmap indices:
041A9B             0002*  BUF_UI_BJ_GATLING_00: equ 0x0400
041A9B             0003*  BUF_UI_BJ_GATLING_01: equ 0x0401
041A9B             0004*  BUF_UI_BJ_GATLING_02: equ 0x0402
041A9B             0005*  BUF_UI_BJ_GATLING_03: equ 0x0403
041A9B             0006*  BUF_UI_BJ_GATLING_04: equ 0x0404
041A9B             0007*  BUF_UI_BJ_KNIFE_00: equ 0x0405
041A9B             0008*  BUF_UI_BJ_KNIFE_01: equ 0x0406
041A9B             0009*  BUF_UI_BJ_KNIFE_02: equ 0x0407
041A9B             0010*  BUF_UI_BJ_KNIFE_03: equ 0x0408
041A9B             0011*  BUF_UI_BJ_KNIFE_04: equ 0x0409
041A9B             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x040A
041A9B             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x040B
041A9B             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x040C
041A9B             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x040D
041A9B             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x040E
041A9B             0017*  BUF_UI_BJ_PISTOL_00: equ 0x040F
041A9B             0018*  BUF_UI_BJ_PISTOL_01: equ 0x0410
041A9B             0019*  BUF_UI_BJ_PISTOL_02: equ 0x0411
041A9B             0020*  BUF_UI_BJ_PISTOL_03: equ 0x0412
041A9B             0021*  BUF_UI_BJ_PISTOL_04: equ 0x0413
041A9B             0022*  
041A9B             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
041A9B             0024*  load_ui_images_bj:
041A9B             0025*  
041A9B 21 00 04 00 0026*  	ld hl,BUF_UI_BJ_GATLING_00
041A9F 01 40 00 00 0027*  	ld bc,64
041AA3 11 40 00 00 0028*  	ld de,64
041AA7 DD 21 00 10 0029*  	ld ix,4096
       00          
041AAC FD 21 A4 1C 0030*  	ld iy,F_UI_bj_gatling_00
       04          
041AB1 CD DE 2A 04 0031*  	call vdu_load_img_2
041AB5             0032*  
041AB5 21 01 04 00 0033*  	ld hl,BUF_UI_BJ_GATLING_01
041AB9 01 40 00 00 0034*  	ld bc,64
041ABD 11 40 00 00 0035*  	ld de,64
041AC1 DD 21 00 10 0036*  	ld ix,4096
       00          
041AC6 FD 21 BE 1C 0037*  	ld iy,F_UI_bj_gatling_01
       04          
041ACB CD DE 2A 04 0038*  	call vdu_load_img_2
041ACF             0039*  
041ACF 21 02 04 00 0040*  	ld hl,BUF_UI_BJ_GATLING_02
041AD3 01 40 00 00 0041*  	ld bc,64
041AD7 11 40 00 00 0042*  	ld de,64
041ADB DD 21 00 10 0043*  	ld ix,4096
       00          
041AE0 FD 21 D8 1C 0044*  	ld iy,F_UI_bj_gatling_02
       04          
041AE5 CD DE 2A 04 0045*  	call vdu_load_img_2
041AE9             0046*  
041AE9 21 03 04 00 0047*  	ld hl,BUF_UI_BJ_GATLING_03
041AED 01 40 00 00 0048*  	ld bc,64
041AF1 11 40 00 00 0049*  	ld de,64
041AF5 DD 21 00 10 0050*  	ld ix,4096
       00          
041AFA FD 21 F2 1C 0051*  	ld iy,F_UI_bj_gatling_03
       04          
041AFF CD DE 2A 04 0052*  	call vdu_load_img_2
041B03             0053*  
041B03 21 04 04 00 0054*  	ld hl,BUF_UI_BJ_GATLING_04
041B07 01 40 00 00 0055*  	ld bc,64
041B0B 11 40 00 00 0056*  	ld de,64
041B0F DD 21 00 10 0057*  	ld ix,4096
       00          
041B14 FD 21 0C 1D 0058*  	ld iy,F_UI_bj_gatling_04
       04          
041B19 CD DE 2A 04 0059*  	call vdu_load_img_2
041B1D             0060*  
041B1D 21 05 04 00 0061*  	ld hl,BUF_UI_BJ_KNIFE_00
041B21 01 40 00 00 0062*  	ld bc,64
041B25 11 40 00 00 0063*  	ld de,64
041B29 DD 21 00 10 0064*  	ld ix,4096
       00          
041B2E FD 21 26 1D 0065*  	ld iy,F_UI_bj_knife_00
       04          
041B33 CD DE 2A 04 0066*  	call vdu_load_img_2
041B37             0067*  
041B37 21 06 04 00 0068*  	ld hl,BUF_UI_BJ_KNIFE_01
041B3B 01 40 00 00 0069*  	ld bc,64
041B3F 11 40 00 00 0070*  	ld de,64
041B43 DD 21 00 10 0071*  	ld ix,4096
       00          
041B48 FD 21 3E 1D 0072*  	ld iy,F_UI_bj_knife_01
       04          
041B4D CD DE 2A 04 0073*  	call vdu_load_img_2
041B51             0074*  
041B51 21 07 04 00 0075*  	ld hl,BUF_UI_BJ_KNIFE_02
041B55 01 40 00 00 0076*  	ld bc,64
041B59 11 40 00 00 0077*  	ld de,64
041B5D DD 21 00 10 0078*  	ld ix,4096
       00          
041B62 FD 21 56 1D 0079*  	ld iy,F_UI_bj_knife_02
       04          
041B67 CD DE 2A 04 0080*  	call vdu_load_img_2
041B6B             0081*  
041B6B 21 08 04 00 0082*  	ld hl,BUF_UI_BJ_KNIFE_03
041B6F 01 40 00 00 0083*  	ld bc,64
041B73 11 40 00 00 0084*  	ld de,64
041B77 DD 21 00 10 0085*  	ld ix,4096
       00          
041B7C FD 21 6E 1D 0086*  	ld iy,F_UI_bj_knife_03
       04          
041B81 CD DE 2A 04 0087*  	call vdu_load_img_2
041B85             0088*  
041B85 21 09 04 00 0089*  	ld hl,BUF_UI_BJ_KNIFE_04
041B89 01 40 00 00 0090*  	ld bc,64
041B8D 11 40 00 00 0091*  	ld de,64
041B91 DD 21 00 10 0092*  	ld ix,4096
       00          
041B96 FD 21 86 1D 0093*  	ld iy,F_UI_bj_knife_04
       04          
041B9B CD DE 2A 04 0094*  	call vdu_load_img_2
041B9F             0095*  
041B9F 21 0A 04 00 0096*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
041BA3 01 40 00 00 0097*  	ld bc,64
041BA7 11 40 00 00 0098*  	ld de,64
041BAB DD 21 00 10 0099*  	ld ix,4096
       00          
041BB0 FD 21 9E 1D 0100*  	ld iy,F_UI_bj_machine_gun_00
       04          
041BB5 CD DE 2A 04 0101*  	call vdu_load_img_2
041BB9             0102*  
041BB9 21 0B 04 00 0103*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
041BBD 01 40 00 00 0104*  	ld bc,64
041BC1 11 40 00 00 0105*  	ld de,64
041BC5 DD 21 00 10 0106*  	ld ix,4096
       00          
041BCA FD 21 BC 1D 0107*  	ld iy,F_UI_bj_machine_gun_01
       04          
041BCF CD DE 2A 04 0108*  	call vdu_load_img_2
041BD3             0109*  
041BD3 21 0C 04 00 0110*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
041BD7 01 40 00 00 0111*  	ld bc,64
041BDB 11 40 00 00 0112*  	ld de,64
041BDF DD 21 00 10 0113*  	ld ix,4096
       00          
041BE4 FD 21 DA 1D 0114*  	ld iy,F_UI_bj_machine_gun_02
       04          
041BE9 CD DE 2A 04 0115*  	call vdu_load_img_2
041BED             0116*  
041BED 21 0D 04 00 0117*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
041BF1 01 40 00 00 0118*  	ld bc,64
041BF5 11 40 00 00 0119*  	ld de,64
041BF9 DD 21 00 10 0120*  	ld ix,4096
       00          
041BFE FD 21 F8 1D 0121*  	ld iy,F_UI_bj_machine_gun_03
       04          
041C03 CD DE 2A 04 0122*  	call vdu_load_img_2
041C07             0123*  
041C07 21 0E 04 00 0124*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
041C0B 01 40 00 00 0125*  	ld bc,64
041C0F 11 40 00 00 0126*  	ld de,64
041C13 DD 21 00 10 0127*  	ld ix,4096
       00          
041C18 FD 21 16 1E 0128*  	ld iy,F_UI_bj_machine_gun_04
       04          
041C1D CD DE 2A 04 0129*  	call vdu_load_img_2
041C21             0130*  
041C21 21 0F 04 00 0131*  	ld hl,BUF_UI_BJ_PISTOL_00
041C25 01 40 00 00 0132*  	ld bc,64
041C29 11 40 00 00 0133*  	ld de,64
041C2D DD 21 00 10 0134*  	ld ix,4096
       00          
041C32 FD 21 34 1E 0135*  	ld iy,F_UI_bj_pistol_00
       04          
041C37 CD DE 2A 04 0136*  	call vdu_load_img_2
041C3B             0137*  
041C3B 21 10 04 00 0138*  	ld hl,BUF_UI_BJ_PISTOL_01
041C3F 01 40 00 00 0139*  	ld bc,64
041C43 11 40 00 00 0140*  	ld de,64
041C47 DD 21 00 10 0141*  	ld ix,4096
       00          
041C4C FD 21 4D 1E 0142*  	ld iy,F_UI_bj_pistol_01
       04          
041C51 CD DE 2A 04 0143*  	call vdu_load_img_2
041C55             0144*  
041C55 21 11 04 00 0145*  	ld hl,BUF_UI_BJ_PISTOL_02
041C59 01 40 00 00 0146*  	ld bc,64
041C5D 11 40 00 00 0147*  	ld de,64
041C61 DD 21 00 10 0148*  	ld ix,4096
       00          
041C66 FD 21 66 1E 0149*  	ld iy,F_UI_bj_pistol_02
       04          
041C6B CD DE 2A 04 0150*  	call vdu_load_img_2
041C6F             0151*  
041C6F 21 12 04 00 0152*  	ld hl,BUF_UI_BJ_PISTOL_03
041C73 01 40 00 00 0153*  	ld bc,64
041C77 11 40 00 00 0154*  	ld de,64
041C7B DD 21 00 10 0155*  	ld ix,4096
       00          
041C80 FD 21 7F 1E 0156*  	ld iy,F_UI_bj_pistol_03
       04          
041C85 CD DE 2A 04 0157*  	call vdu_load_img_2
041C89             0158*  
041C89 21 13 04 00 0159*  	ld hl,BUF_UI_BJ_PISTOL_04
041C8D 01 40 00 00 0160*  	ld bc,64
041C91 11 40 00 00 0161*  	ld de,64
041C95 DD 21 00 10 0162*  	ld ix,4096
       00          
041C9A FD 21 98 1E 0163*  	ld iy,F_UI_bj_pistol_04
       04          
041C9F CD DE 2A 04 0164*  	call vdu_load_img_2
041CA3             0165*  
041CA3 C9          0166*  	ret
041CA4             0167*  
041CA4 75 69 2F 62 0168*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
041CBE 75 69 2F 62 0169*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
041CD8 75 69 2F 62 0170*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
041CF2 75 69 2F 62 0171*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
041D0C 75 69 2F 62 0172*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
041D26 75 69 2F 62 0173*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
041D3E 75 69 2F 62 0174*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
041D56 75 69 2F 62 0175*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
041D6E 75 69 2F 62 0176*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
041D86 75 69 2F 62 0177*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
041D9E 75 69 2F 62 0178*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
041DBC 75 69 2F 62 0179*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
041DDA 75 69 2F 62 0180*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
041DF8 75 69 2F 62 0181*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
041E16 75 69 2F 62 0182*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
041E34 75 69 2F 62 0183*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
041E4D 75 69 2F 62 0184*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
041E66 75 69 2F 62 0185*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
041E7F 75 69 2F 62 0186*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
041E98 75 69 2F 62 0187*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
041EB1             0022   	; include "src/asm/sprites.inc"
041EB1             0023   	include "src/asm/vdu.inc"
041EB1             0001*  ; The following is a high-level list of the VDU sequences that are supported:
041EB1             0002*  ; VDU 0: Null (no operation)
041EB1             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
041EB1             0004*  ; VDU 2: Enable “printer” §§
041EB1             0005*  ; VDU 3: Disable “printer” §§
041EB1             0006*  ; VDU 4: Write text at text cursor
041EB1             0007*  ; VDU 5: Write text at graphics cursor
041EB1             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
041EB1             0009*  ; VDU 7: Make a short beep (BEL)
041EB1             0010*  ; VDU 8: Move cursor back one character
041EB1             0011*  ; VDU 9: Move cursor forward one character
041EB1             0012*  ; VDU 10: Move cursor down one line
041EB1             0013*  ; VDU 11: Move cursor up one line
041EB1             0014*  ; VDU 12: Clear text area (CLS)
041EB1             0015*  ; VDU 13: Carriage return
041EB1             0016*  ; VDU 14: Page mode On *
041EB1             0017*  ; VDU 15: Page mode Off *
041EB1             0018*  ; VDU 16: Clear graphics area (CLG)
041EB1             0019*  ; VDU 17, colour: Define text colour (COLOUR)
041EB1             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
041EB1             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
041EB1             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
041EB1             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
041EB1             0024*  ; VDU 22, n: Select screen mode (MODE n)
041EB1             0025*  ; VDU 23, n: Re-program display character / System Commands
041EB1             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
041EB1             0027*  ; VDU 25, mode, x; y;: PLOT command
041EB1             0028*  ; VDU 26: Reset graphics and text viewports **
041EB1             0029*  ; VDU 27, char: Output character to screen §
041EB1             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
041EB1             0031*  ; VDU 29, x; y;: Set graphics origin
041EB1             0032*  ; VDU 30: Home cursor
041EB1             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
041EB1             0034*  ; VDU 127: Backspace
041EB1             0035*  
041EB1             0036*  ; VDU 0: Null (no operation)
041EB1             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
041EB1             0038*  ;     This may be useful for padding out a VDU command sequence,
041EB1             0039*  ;     or for inserting a placeholder for a command that will be added later.
041EB1             0040*  ; inputs: none
041EB1             0041*  ; outputs: an empty byte somewhere in VDU
041EB1             0042*  ; destroys: a
041EB1             0043*  vdu_null:
041EB1 AF          0044*      xor a
041EB2 5B D7       0045*  	rst.lil $10
041EB4 C9          0046*  	ret
041EB5             0047*  
041EB5             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
041EB5             0049*  ;     Ensures that the next character received by the VDP is sent through to
041EB5             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
041EB5             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
041EB5             0052*  ;     intended to be displayed on the screen. It allows characters that would
041EB5             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
041EB5             0054*  ;     If the “printer” has not been enabled then this command will just discard
041EB5             0055*  ;     the next byte sent to the VDP.
041EB5             0056*  ; inputs: a is the ascii code of the character to send
041EB5             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
041EB5             0058*  ; outputs: a character on the serial terminal connected to the USB port
041EB5             0059*  ;           and the same character on the screen at the current text cursor location
041EB5             0060*  ; QUESTION: does it also advance the text cursor?
041EB5             0061*  ; destroys: hl, bc
041EB5             0062*  vdu_char_to_printer:
041EB5 32 C5 1E 04 0063*  	ld (@arg),a
041EB9 21 C4 1E 04 0064*  	ld hl,@cmd
041EBD 01 02 00 00 0065*  	ld bc,@end-@cmd
041EC1 5B DF       0066*  	rst.lil $18
041EC3 C9          0067*  	ret
041EC4 01          0068*  @cmd: db 1
041EC5 00          0069*  @arg: db 0
041EC6             0070*  @end:
041EC6             0071*  
041EC6             0072*  ; VDU 2: Enable “printer” §§
041EC6             0073*  ;     Enables the “printer”.
041EC6             0074*  ;     In the context of the Agon platform, the “printer” is a serial
041EC6             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
041EC6             0076*  ;     this port is used for power, but it can also be used to send and
041EC6             0077*  ;     receive data to and from the VDP.
041EC6             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
041EC6             0079*  ;     to the “printer” as well as to the screen. It will additionally send
041EC6             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
041EC6             0081*  ;     use the VDU 1 command.
041EC6             0082*  ;     The VDP will not send through other control codes to the printer,
041EC6             0083*  ;     and will will not send through data it receives as part of other commands.
041EC6             0084*  vdu_enable_printer:
041EC6 3E 02       0085*      ld a,2
041EC8 5B D7       0086*  	rst.lil $10
041ECA C9          0087*  	ret
041ECB             0088*  
041ECB             0089*  ; VDU 3: Disable “printer” §§
041ECB             0090*  ; inputs: none
041ECB             0091*  ; outputs: a USB port bereft of communication with the VDP
041ECB             0092*  ; destroys: a
041ECB             0093*  vdu_disable_printer:
041ECB 3E 03       0094*      ld a,3
041ECD 5B D7       0095*  	rst.lil $10
041ECF C9          0096*  	ret
041ED0             0097*  
041ED0             0098*  ; VDU 4: Write text at text cursor
041ED0             0099*  ;     This causes text to be written at the current text cursor position.
041ED0             0100*  ;     This is the default mode for text display.
041ED0             0101*  ;     Text is written using the current text foreground and background colours.
041ED0             0102*  ; inputs: a is the character to write to the screen
041ED0             0103*  ; prerequisites: the text cursor at the intended position on screen
041ED0             0104*  ; outputs: prints the character and moves text cursor right one position
041ED0             0105*  ; destroys: a, hl, bc
041ED0             0106*  vdu_char_to_text_cursor:
041ED0 32 E0 1E 04 0107*  	ld (@arg),a
041ED4 21 DF 1E 04 0108*  	ld hl,@cmd
041ED8 01 02 00 00 0109*  	ld bc,@end-@cmd
041EDC 5B DF       0110*  	rst.lil $18
041EDE C9          0111*  	ret
041EDF 04          0112*  @cmd: db 4
041EE0 00          0113*  @arg: db 0
041EE1             0114*  @end:
041EE1             0115*  
041EE1             0116*  ; VDU 5: Write text at graphics cursor
041EE1             0117*  ;     This causes text to be written at the current graphics cursor position.
041EE1             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
041EE1             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
041EE1             0120*  ;     or for positioning text at a specific location on the screen.
041EE1             0121*  ;     Characters are plotted using the current graphics foreground colour,
041EE1             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
041EE1             0123*  ;     The character background is transparent, and will not overwrite any
041EE1             0124*  ;     graphics that are already present at the character’s location.
041EE1             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
041EE1             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
041EE1             0127*  ;     graphics background colour.
041EE1             0128*  ; inputs: a is the character to write to the screen
041EE1             0129*  ; prerequisites: the graphics cursor at the intended position on screen
041EE1             0130*  ; outputs: see the name of the function
041EE1             0131*  ; destroys: a, hl, bc
041EE1             0132*  vdu_char_to_gfx_cursor:
041EE1 32 F1 1E 04 0133*  	ld (@arg),a
041EE5 21 F0 1E 04 0134*  	ld hl,@cmd
041EE9 01 02 00 00 0135*  	ld bc,@end-@cmd
041EED 5B DF       0136*  	rst.lil $18
041EEF C9          0137*  	ret
041EF0 05          0138*  @cmd: db 5
041EF1 00          0139*  @arg: db 0
041EF2             0140*  @end:
041EF2             0141*  
041EF2             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
041EF2             0143*  ;     This enables the screen, and re-enables VDU command processing,
041EF2             0144*  ;     reversing the effect of VDU 21.
041EF2             0145*  ; inputs: none
041EF2             0146*  ; outputs: a functioning screen and VDU
041EF2             0147*  ; destroys: a
041EF2             0148*  vdu_enable_screen:
041EF2 3E 06       0149*      ld a,6
041EF4 5B D7       0150*  	rst.lil $10
041EF6 C9          0151*  	ret
041EF7             0152*  
041EF7             0153*  ; PASSES
041EF7             0154*  ; VDU 7: Make a short beep (BEL)
041EF7             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
041EF7             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
041EF7             0157*  ; inputs: none
041EF7             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
041EF7             0159*  ; destroys: a
041EF7             0160*  vdu_beep:
041EF7 3E 07       0161*      ld a,7
041EF9 5B D7       0162*  	rst.lil $10
041EFB C9          0163*  	ret
041EFC             0164*  
041EFC             0165*  ; VDU 8: Move cursor back one character
041EFC             0166*  ;     Moves the text cursor one character in the negative “X” direction.
041EFC             0167*  ;     By default, when at the start of a line it will move to the end of
041EFC             0168*  ;     the previous line (as defined by the current text viewport).
041EFC             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
041EFC             0170*  ;     The cursor remains constrained to the current text viewport.
041EFC             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
041EFC             0172*  ;     The cursor is just moved left by one character width.
041EFC             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
041EFC             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
041EFC             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
041EFC             0176*  ;     will move the cursor to the left. This is likely to change in the future.
041EFC             0177*  vdu_cursor_back:
041EFC 3E 08       0178*      ld a,8
041EFE 5B D7       0179*  	rst.lil $10
041F00 C9          0180*  	ret
041F01             0181*  
041F01             0182*  ; VDU 9: Move cursor forward one character
041F01             0183*  vdu_cursor_forward:
041F01 3E 09       0184*      ld a,9
041F03 5B D7       0185*  	rst.lil $10
041F05 C9          0186*  	ret
041F06             0187*  
041F06             0188*  ; VDU 10: Move cursor down one line
041F06             0189*  vdu_cursor_down:
041F06 3E 0A       0190*      ld a,10
041F08 5B D7       0191*  	rst.lil $10
041F0A C9          0192*  	ret
041F0B             0193*  
041F0B             0194*  ; VDU 11: Move cursor up one line
041F0B             0195*  vdu_cursor_up:
041F0B 3E 0B       0196*      ld a,11
041F0D 5B D7       0197*  	rst.lil $10
041F0F C9          0198*  	ret
041F10             0199*  
041F10             0200*  ; VDU 12: Clear text area (CLS)
041F10             0201*  vdu_cls:
041F10 3E 0C       0202*      ld a,12
041F12 5B D7       0203*  	rst.lil $10
041F14 C9          0204*  	ret
041F15             0205*  
041F15             0206*  ; VDU 13: Carriage return
041F15             0207*  vdu_cr:
041F15 3E 0D       0208*      ld a,13
041F17 5B D7       0209*  	rst.lil $10
041F19 C9          0210*  	ret
041F1A             0211*  
041F1A             0212*  ; VDU 14: Page mode On *
041F1A             0213*  vdu_page_on:
041F1A 3E 0E       0214*      ld a,14
041F1C 5B D7       0215*  	rst.lil $10
041F1E C9          0216*  	ret
041F1F             0217*  
041F1F             0218*  ; VDU 15: Page mode Off *
041F1F             0219*  vdu_page_off:
041F1F 3E 0F       0220*      ld a,15
041F21 5B D7       0221*  	rst.lil $10
041F23 C9          0222*  	ret
041F24             0223*  
041F24             0224*  ; VDU 16: Clear graphics area (CLG)
041F24             0225*  vdu_clg:
041F24 3E 10       0226*      ld a,16
041F26 5B D7       0227*  	rst.lil $10
041F28 C9          0228*  	ret
041F29             0229*  
041F29             0230*  ; VDU 17, colour: Define text colour (COLOUR)
041F29             0231*  vdu_colour_text:
041F29 32 39 1F 04 0232*  	ld (@arg),a
041F2D 21 38 1F 04 0233*  	ld hl,@cmd
041F31 01 02 00 00 0234*  	ld bc,@end-@cmd
041F35 5B DF       0235*  	rst.lil $18
041F37 C9          0236*  	ret
041F38 11          0237*  @cmd: db 17
041F39 00          0238*  @arg: db 0
041F3A             0239*  @end:
041F3A             0240*  
041F3A             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
041F3A             0242*  ; inputs: a is the plotting mode, c is the colour
041F3A             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
041F3A             0244*  vdu_gcol_fg:
041F3A             0245*  ; This command will set both the current graphics colour,
041F3A             0246*  ; and the current graphics plotting mode.
041F3A             0247*  ; As with VDU 17 the colour number will set the foreground colour
041F3A             0248*  ; if it is in the range 0-127, or the background colour if it is
041F3A             0249*  ; in the range 128-255, and will be interpreted in the same manner.
041F3A             0250*  ; Support for different plotting modes on Agon is currently very limited.
041F3A             0251*  ; The only fully supported mode is mode 0, which is the default mode.
041F3A             0252*  ; This mode will plot the given colour at the given graphics coordinate,
041F3A             0253*  ; and will overwrite any existing graphics at that coordinate. There is
041F3A             0254*  ; very limited support for mode 4, which will invert the colour of any
041F3A             0255*  ; existing graphics at the given coordinate, but this is not fully supported
041F3A             0256*  ; and may not work as expected.
041F3A             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
041F3A             0258*  ; original VDU system, may be added in the future.
041F3A             0259*  ; This command is identical to the BASIC GCOL keyword.
041F3A 32 4F 1F 04 0260*  	ld (@mode),a
041F3E 79          0261*      ld a,c
041F3F 32 50 1F 04 0262*      ld (@col),a
041F43 21 4E 1F 04 0263*  	ld hl,@cmd
041F47 01 03 00 00 0264*  	ld bc,@end-@cmd
041F4B 5B DF       0265*  	rst.lil $18
041F4D C9          0266*  	ret
041F4E 12          0267*  @cmd: db 18
041F4F 00          0268*  @mode: db 0
041F50 00          0269*  @col: db 0
041F51             0270*  @end:
041F51             0271*  
041F51             0272*  vdu_gcol_bg:
041F51 32 68 1F 04 0273*  	ld (@mode),a
041F55 79          0274*      ld a,c
041F56 C6 80       0275*      add a,128
041F58 32 69 1F 04 0276*      ld (@col),a
041F5C 21 67 1F 04 0277*  	ld hl,@cmd
041F60 01 03 00 00 0278*  	ld bc,@end-@cmd
041F64 5B DF       0279*  	rst.lil $18
041F66 C9          0280*  	ret
041F67 12          0281*  @cmd:  db 18
041F68 00          0282*  @mode: db 0
041F69 00          0283*  @col:  db 0
041F6A             0284*  @end:
041F6A             0285*  
041F6A             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
041F6A             0287*  ;     This command sets the colour palette, by mapping a logical colour
041F6A             0288*  ;     to a physical colour. This is useful for defining custom colours,
041F6A             0289*  ;     or for redefining the default colours.
041F6A             0290*  ;     If the physical colour number is given as 255 then the colour will
041F6A             0291*  ;     be defined using the red, green, and blue values given. If the physical
041F6A             0292*  ;     colour number is given as any other value then the colour will be defined
041F6A             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
041F6A             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
041F6A             0295*  ;     must still be provided, but will be ignored.
041F6A             0296*  ;     The values for red, green and blue must be given in the range 0-255.
041F6A             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
041F6A             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
041F6A             0299*  ;     requested. The nearest colour will be chosen.
041F6A             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
041F6A             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
041F6A             0302*  vdu_def_log_colour:
041F6A 32 8F 1F 04 0303*  	ld (@physical),a
041F6E 47          0304*      ld b,a
041F6F 32 8E 1F 04 0305*      ld (@logical),a
041F73 79          0306*      ld a,c
041F74 32 90 1F 04 0307*      ld (@red),a
041F78 7C          0308*      ld a,h
041F79 32 91 1F 04 0309*      ld (@green),a
041F7D 7D          0310*      ld a,l
041F7E 32 92 1F 04 0311*      ld (@blue),a
041F82 21 8D 1F 04 0312*  	ld hl,@cmd
041F86 01 06 00 00 0313*  	ld bc,@end-@cmd
041F8A 5B DF       0314*  	rst.lil $18
041F8C C9          0315*  	ret
041F8D 13          0316*  @cmd: db 19
041F8E 00          0317*  @logical: db 0
041F8F 00          0318*  @physical: db 0
041F90 00          0319*  @red: db 0
041F91 00          0320*  @green: db 0
041F92 00          0321*  @blue: db 0
041F93             0322*  @end:
041F93             0323*  
041F93             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
041F93             0325*  vdu_reset_gfx:
041F93 3E 14       0326*      ld a,20
041F95 5B D7       0327*  	rst.lil $10
041F97 C9          0328*  	ret
041F98             0329*  
041F98             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
041F98             0331*  ; except for VDU 1 and VDU 6) §§
041F98             0332*  vdu_disable_screen:
041F98 3E 15       0333*      ld a,21
041F9A 5B D7       0334*  	rst.lil $10
041F9C C9          0335*  	ret
041F9D             0336*  
041F9D             0337*  ; VDU 22, n: Select screen mode (MODE n)
041F9D             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
041F9D             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
041F9D             0340*  ; Screen modes
041F9D             0341*  ; Modes over 128 are double-buffered
041F9D             0342*  ; From Version 1.04 or greater
041F9D             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
041F9D             0344*  ; 0 	640 	480 	16 	    60hz
041F9D             0345*  ; * 1 	640 	480 	4 	    60hz
041F9D             0346*  ; 2 	640 	480 	2 	    60hz
041F9D             0347*  ; 3 	640 	240 	64 	    60hz
041F9D             0348*  ; 4 	640 	240 	16 	    60hz
041F9D             0349*  ; 5 	640 	240 	4 	    60hz
041F9D             0350*  ; 6 	640 	240 	2 	    60hz
041F9D             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
041F9D             0352*  ; 8 	320 	240 	64 	    60hz
041F9D             0353*  ; 9 	320 	240 	16 	    60hz
041F9D             0354*  ; 10 	320 	240 	4 	    60hz
041F9D             0355*  ; 11 	320 	240 	2 	    60hz
041F9D             0356*  ; 12 	320 	200 	64 	    70hz
041F9D             0357*  ; 13 	320 	200 	16 	    70hz
041F9D             0358*  ; 14 	320 	200 	4 	    70hz
041F9D             0359*  ; 15 	320 	200 	2 	    70hz
041F9D             0360*  ; 16 	800 	600 	4 	    60hz
041F9D             0361*  ; 17 	800 	600 	2 	    60hz
041F9D             0362*  ; 18 	1024 	768 	2 	    60hz
041F9D             0363*  ; 129 	640 	480 	4 	    60hz
041F9D             0364*  ; 130 	640 	480 	2 	    60hz
041F9D             0365*  ; 132 	640 	240 	16 	    60hz
041F9D             0366*  ; 133 	640 	240 	4 	    60hz
041F9D             0367*  ; 134 	640 	240 	2 	    60hz
041F9D             0368*  ; 136 	320 	240 	64 	    60hz
041F9D             0369*  ; 137 	320 	240 	16 	    60hz
041F9D             0370*  ; 138 	320 	240 	4 	    60hz
041F9D             0371*  ; 139 	320 	240 	2 	    60hz
041F9D             0372*  ; 140 	320 	200 	64 	    70hz
041F9D             0373*  ; 141 	320 	200 	16 	    70hz
041F9D             0374*  ; 142 	320 	200 	4 	    70hz
041F9D             0375*  ; 143 	320 	200 	2 	    70hz
041F9D             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
041F9D             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
041F9D             0378*  ; change to the requested mode.
041F9D             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
041F9D             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
041F9D             0381*  vdu_set_screen_mode:
041F9D 32 AD 1F 04 0382*  	ld (@arg),a
041FA1 21 AC 1F 04 0383*  	ld hl,@cmd
041FA5 01 02 00 00 0384*  	ld bc,@end-@cmd
041FA9 5B DF       0385*  	rst.lil $18
041FAB C9          0386*  	ret
041FAC 16          0387*  @cmd: db 22 ; set screen mode
041FAD 00          0388*  @arg: db 0  ; screen mode parameter
041FAE             0389*  @end:
041FAE             0390*  
041FAE             0391*  ; VDU 23, n: Re-program display character / System Commands
041FAE             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
041FAE             0393*  vdu_define_character:
041FAE 32 CA 1F 04 0394*  	ld (@ascii),a
041FB2 11 CB 1F 04 0395*  	ld de,@data
041FB6 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
041FB8             0397*  @loop:
041FB8 7E          0398*  	ld a,(hl)
041FB9 12          0399*  	ld (de),a
041FBA 23          0400*  	inc hl
041FBB 13          0401*  	inc de
041FBC 10 FA       0402*  	djnz @loop
041FBE 21 C9 1F 04 0403*  	ld hl,@cmd
041FC2 01 0A 00 00 0404*  	ld bc,@end-@cmd
041FC6 5B DF       0405*  	rst.lil $18
041FC8 C9          0406*  	ret
041FC9 17          0407*  @cmd:   db 23
041FCA 00          0408*  @ascii: db 0
041FCB             0409*  @data:  ds 8
041FD3             0410*  @end:
041FD3             0411*  
041FD3             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
041FD3             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
041FD3             0414*  ; 	because we have turned off logical screen scaling
041FD3             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
041FD3             0416*  ; outputs; nothing
041FD3             0417*  ; destroys: a might make it out alive
041FD3             0418*  vdu_set_gfx_viewport:
041FD3 ED 43 F3 1F 0419*      ld (@x0),bc
       04          
041FD8 FD 22 F5 1F 0420*      ld (@y1),iy
       04          
041FDD DD 22 F7 1F 0421*  	ld (@x1),ix
       04          
041FE2 ED 53 F9 1F 0422*  	ld (@y0),de
       04          
041FE7 21 F2 1F 04 0423*  	ld hl,@cmd
041FEB 01 09 00 00 0424*  	ld bc,@end-@cmd
041FEF 5B DF       0425*  	rst.lil $18
041FF1 C9          0426*  	ret
041FF2 18          0427*  @cmd:   db 24 ; set graphics viewport command
041FF3 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
041FF5 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
041FF7 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
041FF9 00 00       0431*  @y0: 	dw 0x0000 ; set by de
041FFB 00          0432*  @end:   db 0x00	  ; padding
041FFC             0433*  
041FFC             0434*  ; VDU 25, mode, x; y;: PLOT command
041FFC             0435*  ; Implemented in vdu_plot.inc
041FFC             0436*  
041FFC             0437*  ; VDU 26: Reset graphics and text viewports **
041FFC             0438*  vdu_reset_txt_gfx_view:
041FFC 3E 1A       0439*      ld a,26
041FFE 5B D7       0440*  	rst.lil $10
042000 C9          0441*  	ret
042001             0442*  
042001             0443*  ; PASSES
042001             0444*  ; VDU 27, char: Output character to screen §
042001             0445*  ; inputs: a is the ascii code of the character to draw
042001             0446*  vdu_draw_char:
042001 32 11 20 04 0447*  	ld (@arg),a
042005 21 10 20 04 0448*  	ld hl,@cmd
042009 01 02 00 00 0449*  	ld bc,@end-@cmd
04200D 5B DF       0450*  	rst.lil $18
04200F C9          0451*  	ret
042010 1B          0452*  @cmd: db 27
042011 00          0453*  @arg: db 0  ; ascii code of character to draw
042012             0454*  @end:
042012             0455*  
042012             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
042012             0457*  ; MIND THE LITTLE-ENDIANESS
042012             0458*  ; inputs: c=left,b=bottom,e=right,d=top
042012             0459*  ; outputs; nothing
042012             0460*  ; destroys: a might make it out alive
042012             0461*  vdu_set_txt_viewport:
042012 ED 43 28 20 0462*      ld (@lb),bc
       04          
042017 ED 53 2A 20 0463*  	ld (@rt),de
       04          
04201C 21 27 20 04 0464*  	ld hl,@cmd
042020 01 05 00 00 0465*  	ld bc,@end-@cmd
042024 5B DF       0466*  	rst.lil $18
042026 C9          0467*  	ret
042027 1C          0468*  @cmd:   db 28 ; set text viewport command
042028 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04202A 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04202C 00          0471*  @end:   db 0x00	  ; padding
04202D             0472*  
04202D             0473*  ; PASSES
04202D             0474*  ; VDU 29, x; y;: Set graphics origin
04202D             0475*  ; inputs: bc,de x,y coordinates
04202D             0476*  vdu_set_gfx_origin:
04202D ED 43 43 20 0477*      ld (@x0),bc
       04          
042032 ED 53 45 20 0478*      ld (@y0),de
       04          
042037 21 42 20 04 0479*  	ld hl,@cmd
04203B 01 05 00 00 0480*  	ld bc,@end-@cmd
04203F 5B DF       0481*  	rst.lil $18
042041 C9          0482*  	ret
042042 1D          0483*  @cmd:	db 29
042043 00 00       0484*  @x0: 	dw 0
042045 00 00       0485*  @y0: 	dw 0
042047 00          0486*  @end: 	db 0 ; padding
042048             0487*  
042048             0488*  ; PASSES
042048             0489*  ; VDU 30: Home cursor
042048             0490*  vdu_home_cursor:
042048 3E 1E       0491*      ld a,30
04204A 5B D7       0492*  	rst.lil $10
04204C C9          0493*  	ret
04204D             0494*  
04204D             0495*  ; PASSES
04204D             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04204D             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04204D             0498*  vdu_move_cursor:
04204D ED 43 5E 20 0499*      ld (@x0),bc
       04          
042052 21 5D 20 04 0500*  	ld hl,@cmd
042056 01 03 00 00 0501*  	ld bc,@end-@cmd
04205A 5B DF       0502*  	rst.lil $18
04205C C9          0503*  	ret
04205D 1F          0504*  @cmd: 	db 31
04205E 00          0505*  @x0:	db 0
04205F 00          0506*  @y0: 	db 0
042060 00          0507*  @end: 	db 0 ; padding
042061             0508*  
042061             0509*  
042061             0510*  ; VDU 127: Backspace
042061             0511*  vdu_bksp:
042061 3E 7F       0512*      ld a,127
042063 5B D7       0513*  	rst.lil $10
042065 C9          0514*  	ret
042066             0515*  
042066             0516*  ; activate a bitmap in preparation to draw it
042066             0517*  ; inputs: a holding the bitmap index
042066             0518*  vdu_bmp_select:
042066 32 78 20 04 0519*  	ld (@bmp),a
04206A 21 75 20 04 0520*  	ld hl,@cmd
04206E 01 04 00 00 0521*  	ld bc,@end-@cmd
042072 5B DF       0522*  	rst.lil $18
042074 C9          0523*  	ret
042075 17 1B 00    0524*  @cmd: db 23,27,0
042078 00          0525*  @bmp: db 0
042079             0526*  @end:
042079             0527*  
042079             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
042079             0529*  ; inputs: hl=bufferId
042079             0530*  vdu_buff_select:
042079 22 8B 20 04 0531*  	ld (@bufferId),hl
04207D 21 88 20 04 0532*  	ld hl,@cmd
042081 01 05 00 00 0533*  	ld bc,@end-@cmd
042085 5B DF       0534*  	rst.lil $18
042087 C9          0535*  	ret
042088 17 1B 20    0536*  @cmd: db 23,27,0x20
04208B 00 00       0537*  @bufferId: dw 0x0000
04208D 00          0538*  @end: db 0x00 ; padding
04208E             0539*  
04208E             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04208E             0541*  ; inputs: a=format; bc=width; de=height
04208E             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04208E             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04208E             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04208E             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04208E             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04208E             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04208E             0548*  vdu_bmp_create:
04208E ED 43 AA 20 0549*      ld (@width),bc
       04          
042093 ED 53 AC 20 0550*      ld (@height),de
       04          
042098 32 AE 20 04 0551*      ld (@fmt),a
04209C 21 A7 20 04 0552*  	ld hl,@cmd
0420A0 01 08 00 00 0553*  	ld bc,@end-@cmd
0420A4 5B DF       0554*  	rst.lil $18
0420A6 C9          0555*  	ret
0420A7 17 1B 21    0556*  @cmd:       db 23,27,0x21
0420AA 00 00       0557*  @width:     dw 0x0000
0420AC 00 00       0558*  @height:    dw 0x0000
0420AE 00          0559*  @fmt:       db 0x00
0420AF             0560*  @end:
0420AF             0561*  
0420AF             0562*  ; Draw a bitmap on the screen
0420AF             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
0420AF             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
0420AF             0565*  vdu_bmp_draw:
0420AF ED 43 C7 20 0566*      ld (@x0),bc
       04          
0420B4 ED 53 C9 20 0567*      ld (@y0),de
       04          
0420B9 21 C4 20 04 0568*  	ld hl,@cmd
0420BD 01 07 00 00 0569*  	ld bc,@end-@cmd
0420C1 5B DF       0570*  	rst.lil $18
0420C3 C9          0571*  	ret
0420C4 17 1B 03    0572*  @cmd: db 23,27,3
0420C7 00 00       0573*  @x0:  dw 0x0000
0420C9 00 00       0574*  @y0:  dw 0x0000
0420CB 00          0575*  @end: db 0x00 ; padding
0420CC             0576*  
0420CC             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
0420CC             0578*  ; inputs: a is scaling mode, 1=on, 0=off
0420CC             0579*  ; note: default setting on boot is scaling ON
0420CC             0580*  vdu_set_scaling:
0420CC 32 DE 20 04 0581*  	ld (@arg),a
0420D0 21 DB 20 04 0582*  	ld hl,@cmd
0420D4 01 04 00 00 0583*  	ld bc,@end-@cmd
0420D8 5B DF       0584*  	rst.lil $18
0420DA C9          0585*  	ret
0420DB 17 00 C0    0586*  @cmd: db 23,0,0xC0
0420DE 00          0587*  @arg: db 0  ; scaling on/off
0420DF             0588*  @end:
0420DF             0589*  
0420DF             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
0420DF             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
0420DF             0592*  ; 	(all modes).
0420DF             0593*  
0420DF             0594*  ; 	This command will swap the screen buffer, if the current screen mode
0420DF             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
0420DF             0596*  ; 	mode is not double-buffered then this command will wait for the next
0420DF             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
0420DF             0598*  ; 	screen with the vertical refresh rate of the monitor.
0420DF             0599*  
0420DF             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
0420DF             0601*  ; 	as it will prevent tearing of the screen.
0420DF             0602*  ; inputs: none
0420DF             0603*  ; outputs: none
0420DF             0604*  ; destroys: hl, bc
0420DF             0605*  vdu_flip:
0420DF 21 EA 20 04 0606*  	ld hl,@cmd
0420E3 01 03 00 00 0607*  	ld bc,@end-@cmd
0420E7 5B DF       0608*  	rst.lil $18
0420E9 C9          0609*  	ret
0420EA 17 00 C3    0610*  @cmd: db 23,0,0xC3
0420ED             0611*  @end:
0420ED             0612*  
0420ED             0613*  ; Command 64: Compress a buffer
0420ED             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
0420ED             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
0420ED             0616*  
0420ED             0617*  
0420ED             0618*  ; Command 65: Decompress a buffer
0420ED             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
0420ED             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
0420ED             0621*  ; inputs: hl=sourceBufferId/targetBufferId
0420ED             0622*  vdu_decompress_buffer:
0420ED 22 09 21 04 0623*  	ld (@targetBufferId),hl
0420F1 22 0C 21 04 0624*  	ld (@sourceBufferId),hl
0420F5 3E 41       0625*  	ld a,65
0420F7 32 0B 21 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
0420FB 21 06 21 04 0627*  	ld hl,@cmd
0420FF 01 08 00 00 0628*  	ld bc,@end-@cmd
042103 5B DF       0629*  	rst.lil $18
042105 C9          0630*  	ret
042106 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
042109 00 00       0632*  @targetBufferId: dw 0x0000
04210B 41          0633*  @cmd1:	db 65
04210C 00 00       0634*  @sourceBufferId: dw 0x0000
04210E 00          0635*  @end: 	db 0x00 ; padding
04210F             0636*  
04210F             0637*  ; Command 65: Decompress a buffer
04210F             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04210F             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04210F             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04210F             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04210F             0642*  vdu_decompress_buffer_different:
04210F 22 2F 21 04 0643*  	ld (@targetBufferId),hl
042113 21 FF 7F 00 0644*      ld hl,0x7FFF
042117 22 32 21 04 0645*  	ld (@sourceBufferId),hl
04211B 3E 41       0646*  	ld a,65
04211D 32 31 21 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
042121 21 2C 21 04 0648*  	ld hl,@cmd
042125 01 08 00 00 0649*  	ld bc,@end-@cmd
042129 5B DF       0650*  	rst.lil $18
04212B C9          0651*  	ret
04212C 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04212F 00 00       0653*  @targetBufferId: dw 0x0000
042131 41          0654*  @cmd1:	db 65
042132 00 00       0655*  @sourceBufferId: dw 0x0000
042134 00          0656*  @end: 	db 0x00 ; padding
042135             0657*  
042135             0658*  ; #### from vdp.inc ####
042135             0659*  
042135             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
042135             0661*  ; VDU 23, 7: Scrolling
042135             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
042135             0663*  ; inputs: a, extent; l, direction; h; speed
042135             0664*  vdu_scroll_down:
042135 32 4A 21 04 0665*  	ld (@extent),a
042139 22 4B 21 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04213D 21 48 21 04 0667*  	ld hl,@cmd
042141 01 05 00 00 0668*  	ld bc,@end-@cmd
042145 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
042147 C9          0670*  	ret
042148 17 07       0671*  @cmd:       db 23,7
04214A 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04214B 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04214C 00          0674*  @speed:     db 0x00 ; pixels
04214D 00          0675*  @end:		db 0x00 ; padding
04214E             0676*  
04214E             0677*  cursor_on:
04214E 21 59 21 04 0678*  	ld hl,@cmd
042152 01 03 00 00 0679*  	ld bc,@end-@cmd
042156 5B DF       0680*  	rst.lil $18
042158 C9          0681*  	ret
042159             0682*  @cmd:
042159 17 01 01    0683*  	db 23,1,1
04215C             0684*  @end:
04215C             0685*  
04215C             0686*  cursor_off:
04215C 21 67 21 04 0687*  	ld hl,@cmd
042160 01 03 00 00 0688*  	ld bc,@end-@cmd
042164 5B DF       0689*  	rst.lil $18
042166 C9          0690*  	ret
042167             0691*  @cmd:
042167 17 01 00    0692*  	db 23,1,0
04216A             0693*  @end:
04216A             0694*  
04216A DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04216C             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04216C 3E 08       0001*M 			LD	A, function
04216E 5B CF       0002*M 			RST.LIL	08h
042170 DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
042173 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
042176 28 FB       0699*  			JR	Z, @wait
042178 DD E1       0700*  			POP	IX
04217A C9          0701*  			RET
04217B             0702*  
04217B             0703*  ; #### from vdu_bmp.inc ####
04217B             0704*  ; =========================================================================
04217B             0705*  ; Bitmaps
04217B             0706*  ; -------------------------------------------------------------------------
04217B             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04217B             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04217B             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04217B             0710*  
04217B             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04217B             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04217B             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04217B             0714*  ; typically "move" style plot commands are used to define the rectangle.
04217B             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04217B             0716*  ; inputs: hl; target bufferId
04217B             0717*  ; all the following are in 16.8 fixed point format
04217B             0718*  ;   ub.c; top-left x coordinate
04217B             0719*  ;   ud.e; top-left y coordinate
04217B             0720*  ;   ui.x; width
04217B             0721*  ;   ui.y; height
04217B             0722*  vdu_buff_screen_capture168:
04217B ED 53 B2 21 0723*          ld (@y0-1),de
       04          
042180 ED 43 B0 21 0724*          ld (@x0-1),bc
       04          
042185 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
042187 32 B0 21 04 0726*          ld (@x0-1),a
04218B             0727*  
04218B DD 22 B7 21 0728*          ld (@x1),ix
       04          
042190 FD 22 B9 21 0729*          ld (@y1),iy
       04          
042195 3E 17       0730*          ld a,23
042197 32 BB 21 04 0731*          ld (@y1+2),a
04219B             0732*  
04219B 22 BE 21 04 0733*          ld (@bufId),hl
04219F AF          0734*          xor a
0421A0 32 C0 21 04 0735*          ld (@bufId+2),a
0421A4             0736*  
0421A4 21 AF 21 04 0737*          ld hl,@begin
0421A8 01 13 00 00 0738*          ld bc,@end-@begin
0421AC 5B DF       0739*          rst.lil $18
0421AE C9          0740*          ret
0421AF             0741*  @begin:
0421AF             0742*  ; absolute move gfx cursor to top-left screen coordinate
0421AF             0743*  ; VDU 25, mode, x; y;: PLOT command
0421AF 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
0421B1 40 00       0745*  @x0: 	dw 64
0421B3 40 00       0746*  @y0: 	dw 64
0421B5             0747*  ; relative move gfx cursor to bottom-right screen coordinate
0421B5             0748*  ; VDU 25, mode, x; y;: PLOT command
0421B5 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
0421B7 0F 00       0750*  @x1: 	dw 15
0421B9 0F 00       0751*  @y1: 	dw 15
0421BB             0752*  ; now the main event
0421BB             0753*  ; VDU 23, 27, &21, bitmapId; 0;
0421BB 17 1B 21    0754*          db 23,27,0x21
0421BE 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
0421C2             0756*  @end: ; no padding required
0421C2             0757*  
0421C2             0758*  vdu_buff_screen_capture_full:
0421C2 21 CD 21 04 0759*          ld hl,@begin
0421C6 01 13 00 00 0760*          ld bc,@end-@begin
0421CA 5B DF       0761*          rst.lil $18
0421CC C9          0762*          ret
0421CD             0763*  @begin:
0421CD             0764*  ; absolute move gfx cursor to top-left screen coordinate
0421CD             0765*  ; VDU 25, mode, x; y;: PLOT command
0421CD 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
0421CF 00 00       0767*  @x0: 	dw 0
0421D1 00 00       0768*  @y0: 	dw 0
0421D3             0769*  ; relative move gfx cursor to bottom-right screen coordinate
0421D3             0770*  ; VDU 25, mode, x; y;: PLOT command
0421D3 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
0421D5 3F 01       0772*  @x1: 	dw 319
0421D7 EF 00       0773*  @y1: 	dw 239
0421D9             0774*  ; now the main event
0421D9             0775*  ; VDU 23, 27, &21, bitmapId; 0;
0421D9 17 1B 21    0776*          db 23,27,0x21
0421DC 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
0421E0             0778*  @end: ; no padding required
0421E0             0779*  
0421E0             0780*  vdu_buff_screen_paste_full:
0421E0 21 EB 21 04 0781*          ld hl,@begin
0421E4 01 0B 00 00 0782*          ld bc,@end-@begin
0421E8 5B DF       0783*          rst.lil $18
0421EA C9          0784*          ret
0421EB             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
0421EB 17 1B 20    0786*  @begin:    db 23,27,0x20
0421EE 00 20       0787*  @bufferId: dw 0x2000
0421F0             0788*  ; VDU 25, mode, x; y;: PLOT command
0421F0 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
0421F2 00 00 00 00 0790*             dw 0x0000,0x0000
0421F6             0791*  @end: ; no padding required
0421F6             0792*  
0421F6             0793*  vdu_buff_screen_capture_tiles:
0421F6 21 01 22 04 0794*          ld hl,@begin
0421FA 01 13 00 00 0795*          ld bc,@end-@begin
0421FE 5B DF       0796*          rst.lil $18
042200 C9          0797*          ret
042201             0798*  @begin:
042201             0799*  ; absolute move gfx cursor to top-left screen coordinate
042201             0800*  ; VDU 25, mode, x; y;: PLOT command
042201 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
042203 00 00       0802*  @x0: 	dw 0
042205 00 00       0803*  @y0: 	dw 0
042207             0804*  ; relative move gfx cursor to bottom-right screen coordinate
042207             0805*  ; VDU 25, mode, x; y;: PLOT command
042207 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
042209 FF 00       0807*  @x1: 	dw 319-64
04220B EF 00       0808*  @y1: 	dw 239
04220D             0809*  ; now the main event
04220D             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04220D 17 1B 21    0811*          db 23,27,0x21
042210 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
042214             0813*  @end: ; no padding required
042214             0814*  
042214             0815*  vdu_buff_screen_paste_tiles:
042214 21 1F 22 04 0816*          ld hl,@begin
042218 01 0B 00 00 0817*          ld bc,@end-@begin
04221C 5B DF       0818*          rst.lil $18
04221E C9          0819*          ret
04221F             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04221F 17 1B 20    0821*  @begin:    db 23,27,0x20
042222 00 20       0822*  @bufferId: dw 0x2000
042224             0823*  ; VDU 25, mode, x; y;: PLOT command
042224 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
042226 00 00 01 00 0825*             dw 0x0000,0x0001
04222A             0826*  @end: ; no padding required
04222A             0827*  
04222A             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04222A             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04222A             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04222A             0831*  ; Value	Meaning
04222A             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04222A             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04222A             0834*  ; 2	Mono/Mask (1-bit per pixel)
04222A             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04222A             0836*  ;     They have some significant limitations, and are not intended for general use.
04222A             0837*  
04222A             0838*  ; =========================================================================
04222A             0839*  ; Sprites
04222A             0840*  ; -------------------------------------------------------------------------
04222A             0841*  ; VDU 23, 27, 4, n: Select sprite n
04222A             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04222A             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04222A             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04222A             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04222A             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04222A             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04222A             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04222A             0849*  ; VDU 23, 27, 11: Show current sprite
04222A             0850*  ; VDU 23, 27, 12: Hide current sprite
04222A             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04222A             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04222A             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04222A             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04222A             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04222A             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04222A             0857*  
04222A             0858*  ; =========================================================================
04222A             0859*  ; Mouse cursor
04222A             0860*  ; -------------------------------------------------------------------------
04222A             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04222A             0862*  
04222A             0863*  ; #### from vdu_plot.inc ####
04222A             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04222A             0865*  ; PLOT code 	(Decimal) 	Effect
04222A             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04222A             0867*  plot_sl_both: equ 0x00
04222A             0868*  
04222A             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04222A             0870*  plot_sl_first: equ 0x08
04222A             0871*  
04222A             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04222A             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04222A             0874*  
04222A             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04222A             0876*  plot_sl_last: equ 0x20
04222A             0877*  
04222A             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04222A             0879*  plot_sl_none: equ 0x28
04222A             0880*  
04222A             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04222A             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04222A             0883*  
04222A             0884*  ; &40-&47 	64-71 	Point plot
04222A             0885*  plot_pt: equ 0x40
04222A             0886*  
04222A             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04222A             0888*  plot_lf_lr_non_bg: equ 0x48
04222A             0889*  
04222A             0890*  ; &50-&57 	80-87 	Triangle fill
04222A             0891*  plot_tf: equ 0x50
04222A             0892*  
04222A             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04222A             0894*  plot_lf_r_bg: equ 0x58
04222A             0895*  
04222A             0896*  ; &60-&67 	96-103 	Rectangle fill
04222A             0897*  plot_rf: equ 0x60
04222A             0898*  
04222A             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04222A             0900*  plot_lf_lr_fg: equ 0x60
04222A             0901*  
04222A             0902*  ; &70-&77 	112-119 	Parallelogram fill
04222A             0903*  plot_pf: equ 0x70
04222A             0904*  
04222A             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04222A             0906*  plot_lf_r_non_fg: equ 0x78
04222A             0907*  
04222A             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04222A             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04222A             0910*  
04222A             0911*  ; &90-&97 	144-151 	Circle outline
04222A             0912*  plot_co: equ 0x90
04222A             0913*  
04222A             0914*  ; &98-&9F 	152-159 	Circle fill
04222A             0915*  plot_cf: equ 0x98
04222A             0916*  
04222A             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04222A             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04222A             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04222A             0920*  
04222A             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04222A             0922*  plot_rcm: equ 0xB8
04222A             0923*  
04222A             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04222A             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04222A             0926*  ; &D0-&D7 	208-215 	Not defined
04222A             0927*  ; &D8-&DF 	216-223 	Not defined
04222A             0928*  ; &E0-&E7 	224-231 	Not defined
04222A             0929*  
04222A             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04222A             0931*  plot_bmp: equ 0xE8
04222A             0932*  
04222A             0933*  ; &F0-&F7 	240-247 	Not defined
04222A             0934*  ; &F8-&FF 	248-255 	Not defined
04222A             0935*  
04222A             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04222A             0937*  ; Agon Console8 VDP 2.2.0
04222A             0938*  
04222A             0939*  ; Within each group of eight plot codes, the effects are as follows:
04222A             0940*  ; Plot code 	Effect
04222A             0941*  ; 0 	Move relative
04222A             0942*  mv_rel: equ 0
04222A             0943*  
04222A             0944*  ; 1 	Plot relative in current foreground colour
04222A             0945*  dr_rel_fg: equ 1
04222A             0946*  
04222A             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04222A             0948*  ; 3 	Plot relative in current background colour
04222A             0949*  dr_rel_bg: equ 3
04222A             0950*  
04222A             0951*  ; 4 	Move absolute
04222A             0952*  mv_abs: equ 4
04222A             0953*  
04222A             0954*  ; 5 	Plot absolute in current foreground colour
04222A             0955*  dr_abs_fg: equ 5
04222A             0956*  
04222A             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04222A             0958*  ; 7 	Plot absolute in current background colour
04222A             0959*  dr_abs_bg: equ 7
04222A             0960*  
04222A             0961*  ; Codes 0-3 use the position data provided as part of the command
04222A             0962*  ; as a relative position, adding the position given to the current
04222A             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04222A             0964*  ; as part of the command as an absolute position, setting the current
04222A             0965*  ; graphical cursor position to the position given.
04222A             0966*  
04222A             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04222A             0968*  ; current pixel colour. These operations cannot currently be supported
04222A             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04222A             0970*  ; supported. Support for these codes may be added in a future version
04222A             0971*  ; of the VDP firmware.
04222A             0972*  
04222A             0973*  ; 16 colour palette constants
04222A             0974*  c_black: equ 0
04222A             0975*  c_red_dk: equ 1
04222A             0976*  c_green_dk: equ 2
04222A             0977*  c_yellow_dk: equ 3
04222A             0978*  c_blue_dk: equ 4
04222A             0979*  c_magenta_dk: equ 5
04222A             0980*  c_cyan_dk: equ 6
04222A             0981*  c_grey: equ 7
04222A             0982*  c_grey_dk: equ 8
04222A             0983*  c_red: equ 9
04222A             0984*  c_green: equ 10
04222A             0985*  c_yellow: equ 11
04222A             0986*  c_blue: equ 12
04222A             0987*  c_magenta: equ 13
04222A             0988*  c_cyan: equ 14
04222A             0989*  c_white: equ 15
04222A             0990*  
04222A             0991*  ; VDU 25, mode, x; y;: PLOT command
04222A             0992*  ; inputs: a=mode, bc=x0, de=y0
04222A             0993*  vdu_plot:
04222A 32 44 22 04 0994*      ld (@mode),a
04222E ED 43 45 22 0995*      ld (@x0),bc
       04          
042233 ED 53 47 22 0996*      ld (@y0),de
       04          
042238 21 43 22 04 0997*  	ld hl,@cmd
04223C 01 06 00 00 0998*  	ld bc,@end-@cmd
042240 5B DF       0999*  	rst.lil $18
042242 C9          1000*  	ret
042243 19          1001*  @cmd:   db 25
042244 00          1002*  @mode:  db 0
042245 00 00       1003*  @x0: 	dw 0
042247 00 00       1004*  @y0: 	dw 0
042249 00          1005*  @end:   db 0 ; extra byte to soak up deu
04224A             1006*  
04224A             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04224A             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04224A             1009*  ; VDU 25, mode, x; y;: PLOT command
04224A             1010*  ; inputs: bc=x0, de=y0
04224A             1011*  ; prerequisites: vdu_buff_select
04224A             1012*  vdu_plot_bmp:
04224A ED 43 61 22 1013*      ld (@x0),bc
       04          
04224F ED 53 63 22 1014*      ld (@y0),de
       04          
042254 21 5F 22 04 1015*  	ld hl,@cmd
042258 01 06 00 00 1016*  	ld bc,@end-@cmd
04225C 5B DF       1017*  	rst.lil $18
04225E C9          1018*  	ret
04225F 19          1019*  @cmd:   db 25
042260 ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
042261 00 00       1021*  @x0: 	dw 0x0000
042263 00 00       1022*  @y0: 	dw 0x0000
042265 00          1023*  @end:   db 0x00 ; padding
042266             1024*  
042266             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
042266             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
042266             1027*  ; VDU 25, mode, x; y;: PLOT command
042266             1028*  ; inputs: bc=x0, de=y0
042266             1029*  ; USING 16.8 FIXED POINT COORDINATES
042266             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
042266             1031*  ;   the fractional portiion of the inputs are truncated
042266             1032*  ;   leaving only the 16-bit integer portion
042266             1033*  ; prerequisites: vdu_buff_select
042266             1034*  vdu_plot_bmp168:
042266             1035*  ; populate in the reverse of normal to keep the
042266             1036*  ; inputs from stomping on each other
042266 ED 53 84 22 1037*      ld (@y0-1),de
       04          
04226B ED 43 82 22 1038*      ld (@x0-1),bc
       04          
042270 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
042272 32 82 22 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
042276 21 81 22 04 1041*  	ld hl,@cmd
04227A 01 06 00 00 1042*  	ld bc,@end-@cmd
04227E 5B DF       1043*  	rst.lil $18
042280 C9          1044*  	ret
042281 19          1045*  @cmd:   db 25
042282 ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
042283 00 00       1047*  @x0: 	dw 0x0000
042285 00 00       1048*  @y0: 	dw 0x0000
042287             1049*  @end:  ; no padding required b/c we shifted de right
042287             1050*  
042287             1051*  ; draw a filled rectangle
042287             1052*  vdu_plot_rf:
042287 ED 43 AE 22 1053*      ld (@x0),bc
       04          
04228C ED 53 B0 22 1054*      ld (@y0),de
       04          
042291 DD 22 B4 22 1055*      ld (@x1),ix
       04          
042296 FD 22 B6 22 1056*      ld (@y1),iy
       04          
04229B 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04229D 32 B2 22 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0422A1 21 AC 22 04 1059*  	ld hl,@cmd0
0422A5 01 0C 00 00 1060*  	ld bc,@end-@cmd0
0422A9 5B DF       1061*  	rst.lil $18
0422AB C9          1062*      ret
0422AC 19          1063*  @cmd0:  db 25 ; plot
0422AD 04          1064*  @arg0:  db plot_sl_both+mv_abs
0422AE 00 00       1065*  @x0:    dw 0x0000
0422B0 00 00       1066*  @y0:    dw 0x0000
0422B2 19          1067*  @cmd1:  db 25 ; plot
0422B3 65          1068*  @arg1:  db plot_rf+dr_abs_fg
0422B4 00 00       1069*  @x1:    dw 0x0000
0422B6 00 00       1070*  @y1:    dw 0x0000
0422B8 00          1071*  @end:   db 0x00 ; padding
0422B9             1072*  
0422B9             1073*  ; draw a filled circle
0422B9             1074*  vdu_plot_cf:
0422B9 ED 43 E0 22 1075*      ld (@x0),bc
       04          
0422BE ED 53 E2 22 1076*      ld (@y0),de
       04          
0422C3 DD 22 E6 22 1077*      ld (@x1),ix
       04          
0422C8 FD 22 E8 22 1078*      ld (@y1),iy
       04          
0422CD 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
0422CF 32 E4 22 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
0422D3 21 DE 22 04 1081*  	ld hl,@cmd0
0422D7 01 0C 00 00 1082*  	ld bc,@end-@cmd0
0422DB 5B DF       1083*  	rst.lil $18
0422DD C9          1084*      ret
0422DE 19          1085*  @cmd0:  db 25 ; plot
0422DF 04          1086*  @arg0:  db plot_sl_both+mv_abs
0422E0 00 00       1087*  @x0:    dw 0x0000
0422E2 00 00       1088*  @y0:    dw 0x0000
0422E4 19          1089*  @cmd1:  db 25 ; plot
0422E5 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
0422E6 00 00       1091*  @x1:    dw 0x0000
0422E8 00 00       1092*  @y1:    dw 0x0000
0422EA 00          1093*  @end:   db 0x00 ; padding
0422EB             1094*  
0422EB             1095*  ; #### from vdu_sprites.inc ####
0422EB             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
0422EB             1097*  ; the VDP can support up to 256 sprites. They must be defined
0422EB             1098*  ; contiguously, and so the first sprite is sprite 0.
0422EB             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
0422EB             1100*  ; Once a selection of sprites have been defined, you can activate
0422EB             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
0422EB             1102*  ; of sprites to activate. This will activate the first n sprites,
0422EB             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
0422EB             1104*  
0422EB             1105*  ; A single sprite can have multiple "frames", referring to
0422EB             1106*  ; different bitmaps.
0422EB             1107*  ; (These bitmaps do not need to be the same size.)
0422EB             1108*  ; This allows a sprite to include an animation sequence,
0422EB             1109*  ; which can be stepped through one frame at a time, or picked
0422EB             1110*  ; in any order.
0422EB             1111*  
0422EB             1112*  ; Any format of bitmap can be used as a sprite frame. It should
0422EB             1113*  ; be noted however that "native" format bitmaps are not
0422EB             1114*  ; recommended for use as sprite frames, as they cannot get
0422EB             1115*  ; erased from the screen. (As noted above, the "native" bitmap
0422EB             1116*  ; format is not really intended for general use.) This is part
0422EB             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
0422EB             1118*  ; screen are now stored in RGBA2222 format.
0422EB             1119*  
0422EB             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
0422EB             1121*  ; and then later shown again.
0422EB             1122*  
0422EB             1123*  ; Moving sprites around the screen is done by changing the
0422EB             1124*  ; position of the sprite. This can be done either by setting
0422EB             1125*  ; the absolute position of the sprite, or by moving the sprite
0422EB             1126*  ; by a given number of pixels. (Sprites are positioned using
0422EB             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
0422EB             1128*  ; In the current sprite system, sprites will not update their
0422EB             1129*  ; position on-screen until either another drawing operation is
0422EB             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
0422EB             1131*  
0422EB             1132*  ; Here are the sprite commands:
0422EB             1133*  ;
0422EB             1134*  ; VDU 23, 27, 4,  n: Select sprite n
0422EB             1135*  ; inputs: a is the 8-bit sprite id
0422EB             1136*  ; vdu_sprite_select:
0422EB             1137*  
0422EB             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
0422EB             1139*  ; inputs: none
0422EB             1140*  ; prerequisites: vdu_sprite_select
0422EB             1141*  ; vdu_sprite_clear_frames:
0422EB             1142*  
0422EB             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
0422EB             1144*  ; inputs: a is the 8-bit bitmap number
0422EB             1145*  ; prerequisites: vdu_sprite_select
0422EB             1146*  ; vdu_sprite_add_bmp:
0422EB             1147*  
0422EB             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
0422EB             1149*  ; inputs: a is the number of sprites to activate
0422EB             1150*  ; vdu_sprite_activate:
0422EB             1151*  
0422EB             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
0422EB             1153*  ; inputs: none
0422EB             1154*  ; prerequisites: vdu_sprite_select
0422EB             1155*  ; vdu_sprite_next_frame:
0422EB             1156*  
0422EB             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
0422EB             1158*  ; inputs: none
0422EB             1159*  ; prerequisites: vdu_sprite_select
0422EB             1160*  ; vdu_sprite_prev_frame:
0422EB             1161*  
0422EB             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
0422EB             1163*  ; inputs: a is frame number to select
0422EB             1164*  ; prerequisites: vdu_sprite_select
0422EB             1165*  ; vdu_sprite_select_frame:
0422EB             1166*  
0422EB             1167*  ; VDU 23, 27, 11: Show current sprite
0422EB             1168*  ; inputs: none
0422EB             1169*  ; prerequisites: vdu_sprite_select
0422EB             1170*  ; vdu_sprite_show:
0422EB             1171*  
0422EB             1172*  ; VDU 23, 27, 12: Hide current sprite
0422EB             1173*  ; inputs: none
0422EB             1174*  ; prerequisites: vdu_sprite_select
0422EB             1175*  ; vdu_sprite_hide:
0422EB             1176*  
0422EB             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0422EB             1178*  ; inputs: bc is x coordinate, de is y coordinate
0422EB             1179*  ; prerequisites: vdu_sprite_select
0422EB             1180*  ; vdu_sprite_move_abs:
0422EB             1181*  ;
0422EB             1182*  ; USING 16.8 FIXED POINT COORDINATES
0422EB             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0422EB             1184*  ;   the fractional portiion of the inputs are truncated
0422EB             1185*  ;   leaving only the 16-bit integer portion
0422EB             1186*  ; prerequisites: vdu_sprite_select
0422EB             1187*  ; vdu_sprite_move_abs168:
0422EB             1188*  
0422EB             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0422EB             1190*  ; inputs: bc is x coordinate, de is y coordinate
0422EB             1191*  ; prerequisites: vdu_sprite_select
0422EB             1192*  ; vdu_sprite_move_rel:
0422EB             1193*  ;
0422EB             1194*  ; USING 16.8 FIXED POINT COORDINATES
0422EB             1195*  ; inputs: ub.c is dx, ud.e is dy
0422EB             1196*  ;   the fractional portiion of the inputs are truncated
0422EB             1197*  ;   leaving only the 16-bit integer portion
0422EB             1198*  ; prerequisites: vdu_sprite_select
0422EB             1199*  ; vdu_sprite_move_rel168:
0422EB             1200*  
0422EB             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
0422EB             1202*  ; inputs: none
0422EB             1203*  ; vdu_sprite_update:
0422EB             1204*  
0422EB             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
0422EB             1206*  ; inputs: none
0422EB             1207*  ; vdu_sprite_bmp_reset:
0422EB             1208*  
0422EB             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
0422EB             1210*  ; inputs: none
0422EB             1211*  ; vdu_sprite_reset:
0422EB             1212*  
0422EB             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
0422EB             1214*  ; inputs: a is the GCOL paint mode
0422EB             1215*  ; prerequisites: vdu_sprite_select
0422EB             1216*  ; vdu_sprite_set_gcol:
0422EB             1217*  
0422EB             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
0422EB             1219*  ; inputs: hl=bufferId
0422EB             1220*  ; prerequisites: vdu_sprite_select
0422EB             1221*  ; vdu_sprite_add_buff:
0422EB             1222*  
0422EB             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
0422EB             1224*  
0422EB             1225*  ; VDU 23, 27, 4, n: Select sprite n
0422EB             1226*  ; inputs: a is the 8-bit sprite id
0422EB             1227*  vdu_sprite_select:
0422EB 32 FD 22 04 1228*      ld (@sprite),a
0422EF 21 FA 22 04 1229*      ld hl,@cmd
0422F3 01 04 00 00 1230*      ld bc,@end-@cmd
0422F7 5B DF       1231*      rst.lil $18
0422F9 C9          1232*      ret
0422FA 17 1B 04    1233*  @cmd:    db 23,27,4
0422FD 00          1234*  @sprite: db 0x00
0422FE             1235*  @end:
0422FE             1236*  
0422FE             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
0422FE             1238*  ; inputs: none
0422FE             1239*  ; prerequisites: vdu_sprite_select
0422FE             1240*  vdu_sprite_clear_frames:
0422FE 21 09 23 04 1241*      ld hl,@cmd
042302 01 03 00 00 1242*      ld bc,@end-@cmd
042306 5B DF       1243*      rst.lil $18
042308 C9          1244*      ret
042309 17 1B 05    1245*  @cmd: db 23,27,5
04230C             1246*  @end:
04230C             1247*  
04230C             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04230C             1249*  ; inputs: a is the 8-bit bitmap number
04230C             1250*  ; prerequisites: vdu_sprite_select
04230C             1251*  vdu_sprite_add_bmp:
04230C 32 1E 23 04 1252*      ld (@bmp),a
042310 21 1B 23 04 1253*      ld hl,@cmd
042314 01 04 00 00 1254*      ld bc,@end-@cmd
042318 5B DF       1255*      rst.lil $18
04231A C9          1256*      ret
04231B 17 1B 06    1257*  @cmd: db 23,27,6
04231E 00          1258*  @bmp: db 0x00
04231F             1259*  @end:
04231F             1260*  
04231F             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04231F             1262*  ; inputs: a is the number of sprites to activate
04231F             1263*  vdu_sprite_activate:
04231F 32 31 23 04 1264*      ld (@num),a
042323 21 2E 23 04 1265*      ld hl,@cmd
042327 01 04 00 00 1266*      ld bc,@end-@cmd
04232B 5B DF       1267*      rst.lil $18
04232D C9          1268*      ret
04232E 17 1B 07    1269*  @cmd: db 23,27,7
042331 00          1270*  @num: db 0x00
042332             1271*  @end:
042332             1272*  
042332             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
042332             1274*  ; inputs: none
042332             1275*  ; prerequisites: vdu_sprite_select
042332             1276*  vdu_sprite_next_frame:
042332 21 3D 23 04 1277*      ld hl,@cmd
042336 01 03 00 00 1278*      ld bc,@end-@cmd
04233A 5B DF       1279*      rst.lil $18
04233C C9          1280*      ret
04233D 17 1B 08    1281*  @cmd: db 23,27,8
042340             1282*  @end:
042340             1283*  
042340             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
042340             1285*  ; inputs: none
042340             1286*  ; prerequisites: vdu_sprite_select
042340             1287*  vdu_sprite_prev_frame:
042340 21 4B 23 04 1288*      ld hl,@cmd
042344 01 03 00 00 1289*      ld bc,@end-@cmd
042348 5B DF       1290*      rst.lil $18
04234A C9          1291*      ret
04234B 17 1B 09    1292*  @cmd: db 23,27,9
04234E             1293*  @end:
04234E             1294*  
04234E             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04234E             1296*  ; inputs: a is frame number to select
04234E             1297*  ; prerequisites: vdu_sprite_select
04234E             1298*  vdu_sprite_select_frame:
04234E 32 60 23 04 1299*      ld (@frame),a
042352 21 5D 23 04 1300*      ld hl,@cmd
042356 01 04 00 00 1301*      ld bc,@end-@cmd
04235A 5B DF       1302*      rst.lil $18
04235C C9          1303*      ret
04235D 17 1B 0A    1304*  @cmd:    db 23,27,10
042360 00          1305*  @frame:  db 0x00
042361             1306*  @end:
042361             1307*  
042361             1308*  ; VDU 23, 27, 11: Show current sprite
042361             1309*  ; inputs: none
042361             1310*  ; prerequisites: vdu_sprite_select
042361             1311*  vdu_sprite_show:
042361 21 6C 23 04 1312*      ld hl,@cmd
042365 01 03 00 00 1313*      ld bc,@end-@cmd
042369 5B DF       1314*      rst.lil $18
04236B C9          1315*      ret
04236C 17 1B 0B    1316*  @cmd: db 23,27,11
04236F             1317*  @end:
04236F             1318*  
04236F             1319*  ; VDU 23, 27, 12: Hide current sprite
04236F             1320*  ; inputs: none
04236F             1321*  ; prerequisites: vdu_sprite_select
04236F             1322*  vdu_sprite_hide:
04236F 21 7A 23 04 1323*      ld hl,@cmd
042373 01 03 00 00 1324*      ld bc,@end-@cmd
042377 5B DF       1325*      rst.lil $18
042379 C9          1326*      ret
04237A 17 1B 0C    1327*  @cmd: db 23,27,12
04237D             1328*  @end:
04237D             1329*  
04237D             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04237D             1331*  ; inputs: bc is x coordinate, de is y coordinate
04237D             1332*  ; prerequisites: vdu_sprite_select
04237D             1333*  vdu_sprite_move_abs:
04237D ED 43 95 23 1334*      ld (@xpos),bc
       04          
042382 ED 53 97 23 1335*      ld (@ypos),de
       04          
042387 21 92 23 04 1336*      ld hl,@cmd
04238B 01 07 00 00 1337*      ld bc,@end-@cmd
04238F 5B DF       1338*      rst.lil $18
042391 C9          1339*      ret
042392 17 1B 0D    1340*  @cmd:  db 23,27,13
042395 00 00       1341*  @xpos: dw 0x0000
042397 00 00       1342*  @ypos: dw 0x0000
042399 00          1343*  @end:  db 0x00 ; padding
04239A             1344*  
04239A             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04239A             1346*  ; inputs: bc is x coordinate, de is y coordinate
04239A             1347*  ; prerequisites: vdu_sprite_select
04239A             1348*  vdu_sprite_move_rel:
04239A ED 43 B2 23 1349*      ld (@dx),bc
       04          
04239F ED 53 B4 23 1350*      ld (@dy),de
       04          
0423A4 21 AF 23 04 1351*      ld hl,@cmd
0423A8 01 07 00 00 1352*      ld bc,@end-@cmd
0423AC 5B DF       1353*      rst.lil $18
0423AE C9          1354*      ret
0423AF 17 1B 0E    1355*  @cmd: db 23,27,14
0423B2 00 00       1356*  @dx:  dw 0x0000
0423B4 00 00       1357*  @dy:  dw 0x0000
0423B6 00          1358*  @end: db 0x00 ; padding
0423B7             1359*  
0423B7             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
0423B7             1361*  ; USING 16.8 FIXED POINT COORDINATES
0423B7             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
0423B7             1363*  ;   the fractional portiion of the inputs are truncated
0423B7             1364*  ;   leaving only the 16-bit integer portion
0423B7             1365*  ; prerequisites: vdu_sprite_select
0423B7             1366*  vdu_sprite_move_abs168:
0423B7             1367*  ; populate in the reverse of normal to keep the
0423B7             1368*  ; inputs from stomping on each other
0423B7 ED 53 D6 23 1369*      ld (@ypos-1),de
       04          
0423BC ED 43 D4 23 1370*      ld (@xpos-1),bc
       04          
0423C1 3E 0D       1371*      ld a,13       ; restore the final byte of the command
0423C3 32 D4 23 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
0423C7 21 D2 23 04 1373*      ld hl,@cmd
0423CB 01 07 00 00 1374*      ld bc,@end-@cmd
0423CF 5B DF       1375*      rst.lil $18
0423D1 C9          1376*      ret
0423D2 17 1B 0D    1377*  @cmd:  db 23,27,13
0423D5 00 00       1378*  @xpos: dw 0x0000
0423D7 00 00       1379*  @ypos: dw 0x0000
0423D9             1380*  @end:  ; no padding required b/c we shifted de right
0423D9             1381*  
0423D9             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
0423D9             1383*  ; USING 16.8 FIXED POINT COORDINATES
0423D9             1384*  ; inputs: ub.c is dx, ud.e is dy
0423D9             1385*  ;   the fractional portiion of the inputs are truncated
0423D9             1386*  ;   leaving only the 16-bit integer portion
0423D9             1387*  ; prerequisites: vdu_sprite_select
0423D9             1388*  vdu_sprite_move_rel168:
0423D9             1389*  ; populate in the reverse of normal to keep the
0423D9             1390*  ; inputs from stomping on each other
0423D9 ED 53 F8 23 1391*      ld (@dy-1),de
       04          
0423DE ED 43 F6 23 1392*      ld (@dx-1),bc
       04          
0423E3 3E 0E       1393*      ld a,14       ; restore the final byte of the command
0423E5 32 F6 23 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
0423E9 21 F4 23 04 1395*      ld hl,@cmd
0423ED 01 07 00 00 1396*      ld bc,@end-@cmd
0423F1 5B DF       1397*      rst.lil $18
0423F3 C9          1398*      ret
0423F4 17 1B 0E    1399*  @cmd:  db 23,27,14
0423F7 00 00       1400*  @dx: dw 0x0000
0423F9 00 00       1401*  @dy: dw 0x0000
0423FB             1402*  @end:  ; no padding required b/c we shifted de right
0423FB             1403*  
0423FB             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
0423FB             1405*  ; inputs: none
0423FB             1406*  vdu_sprite_update:
0423FB 21 06 24 04 1407*      ld hl,@cmd
0423FF 01 03 00 00 1408*      ld bc,@end-@cmd
042403 5B DF       1409*      rst.lil $18
042405 C9          1410*      ret
042406 17 1B 0F    1411*  @cmd: db 23,27,15
042409             1412*  @end:
042409             1413*  
042409             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
042409             1415*  ; inputs: none
042409             1416*  vdu_sprite_bmp_reset:
042409 21 14 24 04 1417*      ld hl,@cmd
04240D 01 03 00 00 1418*      ld bc,@end-@cmd
042411 5B DF       1419*      rst.lil $18
042413 C9          1420*      ret
042414 17 1B 10    1421*  @cmd: db 23,27,16
042417             1422*  @end:
042417             1423*  
042417             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
042417             1425*  ; inputs: none
042417             1426*  vdu_sprite_reset:
042417 21 22 24 04 1427*      ld hl,@cmd
04241B 01 03 00 00 1428*      ld bc,@end-@cmd
04241F 5B DF       1429*      rst.lil $18
042421 C9          1430*      ret
042422 17 1B 11    1431*  @cmd: db 23,27,17
042425             1432*  @end:
042425             1433*  
042425             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
042425             1435*  ; inputs: a is the GCOL paint mode
042425             1436*  ; prerequisites: vdu_sprite_select
042425             1437*  vdu_sprite_set_gcol:
042425 32 37 24 04 1438*      ld (@mode),a
042429 21 34 24 04 1439*      ld hl,@cmd
04242D 01 04 00 00 1440*      ld bc,@end-@cmd
042431 5B DF       1441*      rst.lil $18
042433 C9          1442*      ret
042434 17 1B 12    1443*  @cmd:  db 23,27,18
042437 00          1444*  @mode: db 0x00
042438             1445*  @end:
042438             1446*  
042438             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
042438             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
042438             1449*  ; inputs: hl=bufferId
042438             1450*  ; prerequisites: vdu_sprite_select
042438             1451*  vdu_sprite_add_buff:
042438 22 4A 24 04 1452*      ld (@bufferId),hl
04243C 21 47 24 04 1453*      ld hl,@cmd
042440 01 05 00 00 1454*      ld bc,@end-@cmd
042444 5B DF       1455*      rst.lil $18
042446 C9          1456*      ret
042447 17 1B 26    1457*  @cmd:      db 23,27,0x26
04244A 00 00       1458*  @bufferId: dw 0x0000
04244C 00          1459*  @end:      db 0x00 ; padding
04244D             1460*  
04244D             1461*  
04244D             1462*  ; #### from sfx.inc ####
04244D 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04244E             1464*  
04244E             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04244E             1466*  ; ; inputs: hl = bufferId
04244E             1467*  ; sfx_play:
04244E             1468*  ; 	ld iy,sfx_last_channel
04244E             1469*  ; 	ld a,(iy+0)
04244E             1470*  ; 	ld (@bufferId),hl
04244E             1471*  ; @find_next_channel:
04244E             1472*  ; 	inc a ; bump to next channel
04244E             1473*  ; 	and 31 ; modulo 32 channel
04244E             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04244E             1475*  ; 	ret z ; so we return to caller without doing anything
04244E             1476*  ; 	push af ; back up channel
04244E             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04244E             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04244E             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04244E             1480*  ; 	pop af ; restore channel
04244E             1481*  ; 	jr @find_next_channel ; try the next channel
04244E             1482*  ; @play_sfx:
04244E             1483*  ; 	pop af ; restore channel
04244E             1484*  ; 	ld (iy+0),a ; store channel
04244E             1485*  ; 	ld hl,(@bufferId)
04244E             1486*  ; 	ld c,a ; channel
04244E             1487*  ; 	ld b,127 ; full volume
04244E             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04244E             1489*  ; 	jp vdu_play_sample
04244E             1490*  ; @bufferId:
04244E             1491*  ; 	dw 0x0000 ; 16-bit value
04244E             1492*  
04244E             1493*  sfx_play_random_hurt:
04244E CD 4B 29 04 1494*  	call rand_8
042452 E6 03       1495*  	and 3
042454 FE 00       1496*  	cp 0
042456 CA 58 2F 04 1497*  	jp z,sfx_play_ahh
04245A FE 01       1498*  	cp 1
04245C CA 64 2F 04 1499*  	jp z,sfx_play_augh
042460 FE 02       1500*  	cp 2
042462 CA 70 2F 04 1501*  	jp z,sfx_play_ayee
042466 C3 3C 30 04 1502*  	jp sfx_play_ugh
04246A             1503*  
04246A             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04246A             1505*  sfx_load_main:
04246A 21 00 00 00 1506*      ld hl,0
04246E 22 60 29 04 1507*      ld (cur_file_idx),hl
042472             1508*  sfx_load_main_loop:
042472             1509*  ; back up loop counter
042472 C5          1510*      push bc
042473             1511*  ; load the next sound
042473 CD C7 24 04 1512*      call load_next_sound
042477             1513*  ; draw all the things
042477 CD C9 2A 04 1514*      call tmp_draw_all_the_things
04247B             1515*  ; move bj
04247B CD 51 2A 04 1516*  	call move_bj
04247F             1517*  ; print welcome message
04247F DD 21 6B 0A 1518*  	ld ix,font_itc_honda
       04          
042484 21 D7 37 04 1519*  	ld hl,hello_world
042488 01 20 00 00 1520*  	ld bc,32
04248C 11 02 00 00 1521*  	ld de,2
042490 CD B0 08 04 1522*  	call font_bmp_print
042494             1523*  ; print current filename
042494 CD 10 1F 04 1524*  	call vdu_cls
042498 2A 63 29 04 1525*  	ld hl,(cur_filename)
04249C CD 20 25 04 1526*  	call printString
0424A0 CD 35 25 04 1527*  	call printNewLine
0424A4             1528*  
0424A4             1529*  ; print current load stopwatch
0424A4 21 14 38 04 1530*  	ld hl,loading_time
0424A8 CD 20 25 04 1531*  	call printString
0424AC CD 07 32 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
0424B0 CD 6E 25 04 1533*  	call printDec
0424B4             1534*  
0424B4             1535*  ; flip screen
0424B4 CD DF 20 04 1536*      call vdu_flip
0424B8             1537*  ; ; delay for a bit so sound can play
0424B8             1538*  ;     ld a,%10000000 ; 1 second delay
0424B8             1539*  ;     call multiPurposeDelay
0424B8             1540*  ; decrement loop counter
0424B8 C1          1541*      pop bc
0424B9 0B          1542*  	dec bc
0424BA             1543*  ; ; DEBUG: DUMP REGISTERS
0424BA             1544*  ; 	push bc
0424BA             1545*  ; 	call dumpRegistersHex
0424BA             1546*  ; 	call vdu_flip
0424BA             1547*  ; 	pop bc
0424BA             1548*  ; ; END DEBUG
0424BA 79          1549*      ld a,c
0424BB B7          1550*      or a
0424BC C2 72 24 04 1551*      jp nz,sfx_load_main_loop
0424C0 78          1552*      ld a,b
0424C1 B7          1553*      or a
0424C2 C2 72 24 04 1554*      jp nz,sfx_load_main_loop
0424C6 C9          1555*      ret
0424C7             1556*  
0424C7             1557*  load_next_sound:
0424C7             1558*  ; look up the load routine for the current file index
0424C7 2A 60 29 04 1559*  	ld hl,(cur_file_idx)
0424CB 29          1560*  	add hl,hl ; multiply current index by 2 ...
0424CC ED 5B 60 29 1561*  	ld de,(cur_file_idx)
       04          
0424D1 19          1562*  	add hl,de ; ... now by 3
0424D2 ED 5B 6C 29 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
0424D7 19          1564*  	add hl,de
0424D8 ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
0424DA 22 DF 24 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
0424DE             1567*  @jump_addr:
0424DE CD 00 00 00 1568*  	call 0 ; call the sound load routine
0424E2             1569*  ; look up the buffer id for the current file
0424E2 2A 60 29 04 1570*  	ld hl,(cur_file_idx)
0424E6 29          1571*  	add hl,hl ; multiply current index by 2 ...
0424E7 ED 5B 60 29 1572*  	ld de,(cur_file_idx)
       04          
0424EC 19          1573*  	add hl,de ; ... now by 3
0424ED ED 5B 69 29 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
0424F2 19          1575*  	add hl,de
0424F3 ED 27       1576*  	ld hl,(hl)
0424F5 22 66 29 04 1577*  	ld (cur_buffer_id),hl
0424F9             1578*  ; bump the current file index
0424F9 2A 60 29 04 1579*  	ld hl,(cur_file_idx)
0424FD 23          1580*  	inc hl
0424FE 22 60 29 04 1581*  	ld (cur_file_idx),hl
042502 C9          1582*  	ret
042503             1583*  
042503             1584*  ; load a sound file to a buffer
042503             1585*  ; inputs: hl = bufferId ; ix = file size ; iy = pointer to filename
042503             1586*  vdu_load_sfx:
042503             1587*  ; back up input parameters
042503 E5          1588*      push hl ; bufferId
042504             1589*  ; load the sound
042504 CD 30 3A 04 1590*  	call vdu_load_buffer_from_file
042508             1591*  ; now make the buffer a sound sample
042508 E1          1592*      pop hl ; bufferId
042509 AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04250A             1594*      ; push hl ; bufferId
04250A CD 7D 01 04 1595*  	call vdu_buffer_to_sound
04250E             1596*  ; ; play the loaded sound
04250E             1597*  ;     ld c,0 ; channel
04250E             1598*  ;     ld b,127 ; full volume
04250E             1599*  ;     ld de,1000 ; 1 second duration
04250E             1600*  ;     pop hl ; bufferId
04250E             1601*  ;     call vdu_play_sample
04250E C9          1602*      ret
04250F             1603*  
04250F             1604*  vdu_clear_all_buffers:
04250F             1605*  ; clear all buffers
04250F 21 1A 25 04 1606*      ld hl,@beg
042513 01 06 00 00 1607*      ld bc,@end-@beg
042517 5B DF       1608*      rst.lil $18
042519 C9          1609*      ret
04251A 17 00 A0    1610*  @beg: db 23,0,$A0
04251D FF FF       1611*        dw -1 ; clear all buffers
04251F 02          1612*        db 2  ; command 2: clear a buffer
042520             1613*  @end:
042520             0024       include "src/asm/functions.inc"
042520             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
042520             0002*  ; Print a zero-terminated string
042520             0003*  ; HL: Pointer to string
042520             0004*  printString:
042520 C5          0005*  	PUSH	BC
042521 01 00 00 00 0006*  	LD		BC,0
042525 3E 00       0007*  	LD 	 	A,0
042527 5B DF       0008*  	RST.LIL 18h
042529 C1          0009*  	POP		BC
04252A C9          0010*  	RET
04252B             0011*  ; print a VDU sequence
04252B             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04252B             0013*  sendVDUsequence:
04252B C5          0014*  	PUSH	BC
04252C 01 00 00 00 0015*  	LD		BC, 0
042530 4E          0016*  	LD		C, (HL)
042531 5B DF       0017*  	RST.LIL	18h
042533 C1          0018*  	POP		BC
042534 C9          0019*  	RET
042535             0020*  ; Print Newline sequence to VDP
042535             0021*  printNewLine:
042535 3E 0D       0022*  	LD	A, '\r'
042537 5B D7       0023*  	RST.LIL 10h
042539 3E 0A       0024*  	LD	A, '\n'
04253B 5B D7       0025*  	RST.LIL 10h
04253D C9          0026*  	RET
04253E             0027*  ; Print a 24-bit HEX number
04253E             0028*  ; HLU: Number to print
04253E             0029*  printHex24:
04253E E5          0030*  	PUSH	HL
04253F 21 02 00 00 0031*  	LD		HL, 2
042543 39          0032*  	ADD		HL, SP
042544 7E          0033*  	LD		A, (HL)
042545 E1          0034*  	POP		HL
042546 CD 50 25 04 0035*  	CALL	printHex8
04254A             0036*  ; Print a 16-bit HEX number
04254A             0037*  ; HL: Number to print
04254A             0038*  printHex16:
04254A 7C          0039*  	LD		A,H
04254B CD 50 25 04 0040*  	CALL	printHex8
04254F 7D          0041*  	LD		A,L
042550             0042*  ; Print an 8-bit HEX number
042550             0043*  ; A: Number to print
042550             0044*  printHex8:
042550 4F          0045*  	LD		C,A
042551 1F          0046*  	RRA
042552 1F          0047*  	RRA
042553 1F          0048*  	RRA
042554 1F          0049*  	RRA
042555 CD 5A 25 04 0050*  	CALL	@F
042559 79          0051*  	LD		A,C
04255A             0052*  @@:
04255A E6 0F       0053*  	AND		0Fh
04255C C6 90       0054*  	ADD		A,90h
04255E 27          0055*  	DAA
04255F CE 40       0056*  	ADC		A,40h
042561 27          0057*  	DAA
042562 5B D7       0058*  	RST.LIL	10h
042564 C9          0059*  	RET
042565             0060*  
042565             0061*  ; Print a 0x HEX prefix
042565             0062*  DisplayHexPrefix:
042565 3E 30       0063*  	LD	A, '0'
042567 5B D7       0064*  	RST.LIL 10h
042569 3E 78       0065*  	LD	A, 'x'
04256B 5B D7       0066*  	RST.LIL 10h
04256D C9          0067*  	RET
04256E             0068*  
04256E             0069*  
04256E             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04256E             0071*  ; HL : Value to print
04256E             0072*  printDec:
04256E 11 92 25 04 0073*  	LD	 DE, _printDecBuffer
042572 CD 9B 25 04 0074*  	CALL Num2String
042576             0075*  ; BEGIN MY CODE
042576             0076*  ; replace leading zeroes with spaces
042576 21 92 25 04 0077*      LD	 HL, _printDecBuffer
04257A 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04257C             0079*  @loop:
04257C 7E          0080*      LD	 A, (HL)
04257D FE 30       0081*      CP	 '0'
04257F C2 8D 25 04 0082*      JP	 NZ, @done
042583 3E 20       0083*      LD   A, ' '
042585 77          0084*      LD	 (HL), A
042586 23          0085*      INC	 HL
042587 CD 01 1F 04 0086*      CALL vdu_cursor_forward
04258B 10 EF       0087*      DJNZ @loop
04258D             0088*  @done:
04258D             0089*  ; END MY CODE
04258D             0090*  	; LD	 HL, _printDecBuffer
04258D CD 20 25 04 0091*  	CALL printString
042591 C9          0092*  	RET
042592 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04259B             0094*  
04259B             0095*  ; This routine converts the value from HL into it's ASCII representation,
04259B             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04259B             0097*  ; so it will allways be 8 characters length
04259B             0098*  ; HL : Value to convert to string
04259B             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04259B             0100*  Num2String:
04259B 01 80 69 67 0101*  	LD	 BC,-10000000
04259F CD D2 25 04 0102*  	CALL OneDigit
0425A3 01 C0 BD F0 0103*  	LD	 BC,-1000000
0425A7 CD D2 25 04 0104*  	CALL OneDigit
0425AB 01 60 79 FE 0105*  	LD	 BC,-100000
0425AF CD D2 25 04 0106*  	CALL OneDigit
0425B3 01 F0 D8 FF 0107*  	LD   BC,-10000
0425B7 CD D2 25 04 0108*  	CALL OneDigit
0425BB 01 18 FC FF 0109*  	LD   BC,-1000
0425BF CD D2 25 04 0110*  	CALL OneDigit
0425C3 01 9C FF FF 0111*  	LD   BC,-100
0425C7 CD D2 25 04 0112*  	CALL OneDigit
0425CB 0E F6       0113*  	LD   C,-10
0425CD CD D2 25 04 0114*  	CALL OneDigit
0425D1 48          0115*  	LD   C,B
0425D2             0116*  OneDigit:
0425D2 3E 2F       0117*  	LD   A,'0'-1
0425D4             0118*  DivideMe:
0425D4 3C          0119*  	INC  A
0425D5 09          0120*  	ADD  HL,BC
0425D6 38 FC       0121*  	JR   C,DivideMe
0425D8 ED 42       0122*  	SBC  HL,BC
0425DA 12          0123*  	LD   (DE),A
0425DB 13          0124*  	INC  DE
0425DC C9          0125*  	RET
0425DD             0126*  
0425DD             0127*  
0425DD             0128*  ; #### new functions added by Brandon R. Gates ####
0425DD             0129*  
0425DD             0130*  ; print the binary representation of the 8-bit value in a
0425DD             0131*  ; destroys a, hl, bc
0425DD             0132*  printBin8:
0425DD 06 08       0133*      ld b,8      ; loop counter for 8 bits
0425DF 21 FA 25 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
0425E3             0135*                  ; (which will be the high bit of the value in a)
0425E3             0136*  @loop:
0425E3 07          0137*      rlca ; put the next highest bit into carry
0425E4 38 04       0138*      jr c,@one
0425E6 36 30       0139*      ld (hl),'0'
0425E8 18 02       0140*      jr @next_bit
0425EA             0141*  @one:
0425EA 36 31       0142*      ld (hl),'1'
0425EC             0143*  @next_bit:
0425EC 23          0144*      inc hl
0425ED 10 F4       0145*      djnz @loop
0425EF             0146*  ; print it
0425EF 21 FA 25 04 0147*  	ld hl,@cmd
0425F3 01 08 00 00 0148*  	ld bc,@end-@cmd
0425F7 5B DF       0149*  	rst.lil $18
0425F9 C9          0150*  	ret
0425FA             0151*  @cmd: ds 8 ; eight bytes for eight bits
042602             0152*  @end:
042602             0153*  
042602             0154*  ; print the binary representation of the 8-bit value in a
042602             0155*  ; in reverse order (lsb first)
042602             0156*  ; destroys a, hl, bc
042602             0157*  printBin8Rev:
042602 06 08       0158*      ld b,8      ; loop counter for 8 bits
042604 21 1F 26 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
042608             0160*                  ; (which will be the high bit of the value in a)
042608             0161*  @loop:
042608 0F          0162*      rrca ; put the next lowest bit into carry
042609 38 04       0163*      jr c,@one
04260B 36 30       0164*      ld (hl),'0'
04260D 18 02       0165*      jr @next_bit
04260F             0166*  @one:
04260F 36 31       0167*      ld (hl),'1'
042611             0168*  @next_bit:
042611 23          0169*      inc hl
042612 10 F4       0170*      djnz @loop
042614             0171*  ; print it
042614 21 1F 26 04 0172*  	ld hl,@cmd
042618 01 08 00 00 0173*  	ld bc,@end-@cmd
04261C 5B DF       0174*  	rst.lil $18
04261E C9          0175*  	ret
04261F             0176*  @cmd: ds 8 ; eight bytes for eight bits
042627             0177*  @end:
042627             0178*  
042627             0179*  ; print registers to screen in hexidecimal format
042627             0180*  ; inputs: none
042627             0181*  ; outputs: values of every register printed to screen
042627             0182*  ;    values of each register in global scratch memory
042627             0183*  ; destroys: nothing
042627             0184*  stepRegistersHex:
042627             0185*  ; store everything in scratch
042627 22 2A 28 04 0186*      ld (uhl),hl
04262B ED 43 2D 28 0187*      ld (ubc),bc
       04          
042630 ED 53 30 28 0188*      ld (ude),de
       04          
042635 DD 22 33 28 0189*      ld (uix),ix
       04          
04263A FD 22 36 28 0190*      ld (uiy),iy
       04          
04263F F5          0191*      push af ; fml
042640 E1          0192*      pop hl  ; thanks, zilog
042641 22 27 28 04 0193*      ld (uaf),hl
042645 F5          0194*      push af ; dammit
042646             0195*  
042646             0196*  ; home the cursor
042646 CD 48 20 04 0197*      call vdu_home_cursor
04264A             0198*  
04264A             0199*  ; print each register
04264A 21 B3 27 04 0200*      ld hl,str_afu
04264E CD 20 25 04 0201*      call printString
042652 2A 27 28 04 0202*      ld hl,(uaf)
042656 CD 3E 25 04 0203*      call printHex24
04265A CD 35 25 04 0204*      call printNewLine
04265E             0205*  
04265E 21 B7 27 04 0206*      ld hl,str_hlu
042662 CD 20 25 04 0207*      call printString
042666 2A 2A 28 04 0208*      ld hl,(uhl)
04266A CD 3E 25 04 0209*      call printHex24
04266E CD 35 25 04 0210*      call printNewLine
042672             0211*  
042672 21 BB 27 04 0212*      ld hl,str_bcu
042676 CD 20 25 04 0213*      call printString
04267A 2A 2D 28 04 0214*      ld hl,(ubc)
04267E CD 3E 25 04 0215*      call printHex24
042682 CD 35 25 04 0216*      call printNewLine
042686             0217*  
042686 21 BF 27 04 0218*      ld hl,str_deu
04268A CD 20 25 04 0219*      call printString
04268E 2A 30 28 04 0220*      ld hl,(ude)
042692 CD 3E 25 04 0221*      call printHex24
042696 CD 35 25 04 0222*      call printNewLine
04269A             0223*  
04269A 21 C3 27 04 0224*      ld hl,str_ixu
04269E CD 20 25 04 0225*      call printString
0426A2 2A 33 28 04 0226*      ld hl,(uix)
0426A6 CD 3E 25 04 0227*      call printHex24
0426AA CD 35 25 04 0228*      call printNewLine
0426AE             0229*  
0426AE 21 C7 27 04 0230*      ld hl,str_iyu
0426B2 CD 20 25 04 0231*      call printString
0426B6 2A 36 28 04 0232*      ld hl,(uiy)
0426BA CD 3E 25 04 0233*      call printHex24
0426BE CD 35 25 04 0234*      call printNewLine
0426C2             0235*  
0426C2             0236*      ; call vsync
0426C2             0237*  
0426C2 CD 35 25 04 0238*      call printNewLine
0426C6             0239*  
0426C6             0240*  ; check for right shift key and quit if pressed
0426C6             0241*  	MOSCALL mos_getkbmap
0426C6 3E 1E       0001*M 			LD	A, function
0426C8 5B CF       0002*M 			RST.LIL	08h
0426CA             0242*  @stayhere:
0426CA             0243*  ; 7 RightShift
0426CA DD CB 00 76 0244*      bit 6,(ix+0)
0426CE 20 02       0245*      jr nz,@RightShift
0426D0 18 F8       0246*      jr @stayhere
0426D2             0247*  @RightShift:
0426D2 DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
0426D6 3E 80       0249*      ld a,%10000000
0426D8 CD 1A 32 04 0250*      call multiPurposeDelay
0426DC             0251*  
0426DC             0252*  ; restore everything
0426DC 2A 2A 28 04 0253*      ld hl, (uhl)
0426E0 ED 4B 2D 28 0254*      ld bc, (ubc)
       04          
0426E5 ED 5B 30 28 0255*      ld de, (ude)
       04          
0426EA DD 2A 33 28 0256*      ld ix, (uix)
       04          
0426EF FD 2A 36 28 0257*      ld iy, (uiy)
       04          
0426F4 F1          0258*      pop af
0426F5             0259*  ; all done
0426F5 C9          0260*      ret
0426F6             0261*  
0426F6             0262*  ; print registers to screen in hexidecimal format
0426F6             0263*  ; inputs: none
0426F6             0264*  ; outputs: values of every register printed to screen
0426F6             0265*  ;    values of each register in global scratch memory
0426F6             0266*  ; destroys: nothing
0426F6             0267*  dumpRegistersHex:
0426F6             0268*  ; store everything in scratch
0426F6 22 2A 28 04 0269*      ld (uhl),hl
0426FA ED 43 2D 28 0270*      ld (ubc),bc
       04          
0426FF ED 53 30 28 0271*      ld (ude),de
       04          
042704 DD 22 33 28 0272*      ld (uix),ix
       04          
042709 FD 22 36 28 0273*      ld (uiy),iy
       04          
04270E F5          0274*      push af ; fml
04270F E1          0275*      pop hl  ; thanks, zilog
042710 22 27 28 04 0276*      ld (uaf),hl
042714 F5          0277*      push af ; dammit
042715             0278*  
042715             0279*  ; home the cursor
042715 CD 48 20 04 0280*      call vdu_home_cursor
042719             0281*  
042719             0282*  ; print each register
042719 21 B3 27 04 0283*      ld hl,str_afu
04271D CD 20 25 04 0284*      call printString
042721 2A 27 28 04 0285*      ld hl,(uaf)
042725 CD 3E 25 04 0286*      call printHex24
042729 CD 35 25 04 0287*      call printNewLine
04272D             0288*  
04272D 21 B7 27 04 0289*      ld hl,str_hlu
042731 CD 20 25 04 0290*      call printString
042735 2A 2A 28 04 0291*      ld hl,(uhl)
042739 CD 3E 25 04 0292*      call printHex24
04273D CD 35 25 04 0293*      call printNewLine
042741             0294*  
042741 21 BB 27 04 0295*      ld hl,str_bcu
042745 CD 20 25 04 0296*      call printString
042749 2A 2D 28 04 0297*      ld hl,(ubc)
04274D CD 3E 25 04 0298*      call printHex24
042751 CD 35 25 04 0299*      call printNewLine
042755             0300*  
042755 21 BF 27 04 0301*      ld hl,str_deu
042759 CD 20 25 04 0302*      call printString
04275D 2A 30 28 04 0303*      ld hl,(ude)
042761 CD 3E 25 04 0304*      call printHex24
042765 CD 35 25 04 0305*      call printNewLine
042769             0306*  
042769 21 C3 27 04 0307*      ld hl,str_ixu
04276D CD 20 25 04 0308*      call printString
042771 2A 33 28 04 0309*      ld hl,(uix)
042775 CD 3E 25 04 0310*      call printHex24
042779 CD 35 25 04 0311*      call printNewLine
04277D             0312*  
04277D 21 C7 27 04 0313*      ld hl,str_iyu
042781 CD 20 25 04 0314*      call printString
042785 2A 36 28 04 0315*      ld hl,(uiy)
042789 CD 3E 25 04 0316*      call printHex24
04278D CD 35 25 04 0317*      call printNewLine
042791             0318*  
042791 CD 6A 21 04 0319*      call vdu_vblank
042795             0320*  
042795 CD 35 25 04 0321*      call printNewLine
042799             0322*  ; restore everything
042799 2A 2A 28 04 0323*      ld hl, (uhl)
04279D ED 4B 2D 28 0324*      ld bc, (ubc)
       04          
0427A2 ED 5B 30 28 0325*      ld de, (ude)
       04          
0427A7 DD 2A 33 28 0326*      ld ix, (uix)
       04          
0427AC FD 2A 36 28 0327*      ld iy, (uiy)
       04          
0427B1 F1          0328*      pop af
0427B2             0329*  ; all done
0427B2 C9          0330*      ret
0427B3             0331*  
0427B3 61 66 3D 00 0332*  str_afu: db "af=",0
0427B7 68 6C 3D 00 0333*  str_hlu: db "hl=",0
0427BB 62 63 3D 00 0334*  str_bcu: db "bc=",0
0427BF 64 65 3D 00 0335*  str_deu: db "de=",0
0427C3 69 78 3D 00 0336*  str_ixu: db "ix=",0
0427C7 69 79 3D 00 0337*  str_iyu: db "iy=",0
0427CB             0338*  
0427CB             0339*  ; print udeuhl to screen in hexidecimal format
0427CB             0340*  ; inputs: none
0427CB             0341*  ; outputs: concatenated hexidecimal udeuhl
0427CB             0342*  ; destroys: nothing
0427CB             0343*  dumpUDEUHLHex:
0427CB             0344*  ; store everything in scratch
0427CB 22 2A 28 04 0345*      ld (uhl),hl
0427CF ED 43 2D 28 0346*      ld (ubc),bc
       04          
0427D4 ED 53 30 28 0347*      ld (ude),de
       04          
0427D9 DD 22 33 28 0348*      ld (uix),ix
       04          
0427DE FD 22 36 28 0349*      ld (uiy),iy
       04          
0427E3 F5          0350*      push af
0427E4             0351*  
0427E4             0352*  ; print each register
0427E4             0353*  
0427E4 21 1E 28 04 0354*      ld hl,str_udeuhl
0427E8 CD 20 25 04 0355*      call printString
0427EC 2A 30 28 04 0356*      ld hl,(ude)
0427F0 CD 3E 25 04 0357*      call printHex24
0427F4 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
0427F6 5B D7       0359*  	rst.lil 10h
0427F8 2A 2A 28 04 0360*      ld hl,(uhl)
0427FC CD 3E 25 04 0361*      call printHex24
042800 CD 35 25 04 0362*      call printNewLine
042804             0363*  
042804             0364*  ; restore everything
042804 2A 2A 28 04 0365*      ld hl, (uhl)
042808 ED 4B 2D 28 0366*      ld bc, (ubc)
       04          
04280D ED 5B 30 28 0367*      ld de, (ude)
       04          
042812 DD 2A 33 28 0368*      ld ix, (uix)
       04          
042817 FD 2A 36 28 0369*      ld iy, (uiy)
       04          
04281C F1          0370*      pop af
04281D             0371*  ; all done
04281D C9          0372*      ret
04281E             0373*  
04281E 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
042827             0375*  
042827             0376*  ; global scratch memory for registers
042827 00 00 00    0377*  uaf: dl 0
04282A 00 00 00    0378*  uhl: dl 0
04282D 00 00 00    0379*  ubc: dl 0
042830 00 00 00    0380*  ude: dl 0
042833 00 00 00    0381*  uix: dl 0
042836 00 00 00    0382*  uiy: dl 0
042839 00 00 00    0383*  usp: dl 0
04283C 00 00 00    0384*  upc: dl 0
04283F             0385*  
04283F             0386*  ; inputs: whatever is in the flags register
04283F             0387*  ; outputs: binary representation of flags
04283F             0388*  ;          with a header so we know which is what
04283F             0389*  ; destroys: nothing
04283F             0390*  ; preserves: everything
04283F             0391*  dumpFlags:
04283F             0392*  ; first we curse zilog for not giving direct access to flags
04283F F5          0393*      push af ; this is so we can send it back unharmed
042840 F5          0394*      push af ; this is so we can pop it to hl
042841             0395*  ; store everything in scratch
042841 22 2A 28 04 0396*      ld (uhl),hl
042845 ED 43 2D 28 0397*      ld (ubc),bc
       04          
04284A ED 53 30 28 0398*      ld (ude),de
       04          
04284F DD 22 33 28 0399*      ld (uix),ix
       04          
042854 FD 22 36 28 0400*      ld (uiy),iy
       04          
042859             0401*  ; next we print the header
042859 21 85 28 04 0402*      ld hl,@header
04285D CD 20 25 04 0403*      call printString
042861 E1          0404*      pop hl ; flags are now in l
042862 7D          0405*      ld a,l ; flags are now in a
042863 CD DD 25 04 0406*      call printBin8
042867 CD 35 25 04 0407*  	call printNewLine
04286B             0408*  ; restore everything
04286B 2A 2A 28 04 0409*      ld hl, (uhl)
04286F ED 4B 2D 28 0410*      ld bc, (ubc)
       04          
042874 ED 5B 30 28 0411*      ld de, (ude)
       04          
042879 DD 2A 33 28 0412*      ld ix, (uix)
       04          
04287E FD 2A 36 28 0413*      ld iy, (uiy)
       04          
042883 F1          0414*      pop af ; send her home the way she came
042884 C9          0415*      ret
042885             0416*  ; Bit 7 (S): Sign flag
042885             0417*  ; Bit 6 (Z): Zero flag
042885             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
042885             0419*  ; Bit 4 (H): Half Carry flag
042885             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
042885             0421*  ; Bit 2 (PV): Parity/Overflow flag
042885             0422*  ; Bit 1 (N): Subtract flag
042885             0423*  ; Bit 0 (C): Carry flag
042885 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
042890             0425*  
042890             0426*  ; set all the bits in the flag register
042890             0427*  ; more of an academic exercise than anything useful
042890             0428*  ; inputs; none
042890             0429*  ; outputs; a=0,f=255
042890             0430*  ; destroys: flags, hl
042890             0431*  ; preserves: a, because why not
042890             0432*  setAllFlags:
042890 21 FF 00 00 0433*      ld hl,255
042894 67          0434*      ld h,a ; four cycles to preserve a is cheap
042895 E5          0435*      push hl
042896 F1          0436*      pop af
042897 C9          0437*      ret
042898             0438*  
042898             0439*  ; reset all the bits in the flag register
042898             0440*  ; unlike its inverse counterpart, this may actually be useful
042898             0441*  ; inputs; none
042898             0442*  ; outputs; a=0,f=0
042898             0443*  ; destroys: flags, hl
042898             0444*  ; preserves: a, because why not
042898             0445*  resetAllFlags:
042898 21 00 00 00 0446*      ld hl,0
04289C 67          0447*      ld h,a ; four cycles to preserve a is cheap
04289D E5          0448*      push hl
04289E F1          0449*      pop af
04289F C9          0450*      ret
0428A0             0451*  
0428A0             0452*  ; wait until user presses a key
0428A0             0453*  ; inputs: none
0428A0             0454*  ; outputs: none
0428A0             0455*  ; destroys: af,ix
0428A0             0456*  waitKeypress:
0428A0             0457*      MOSCALL mos_sysvars
0428A0 3E 08       0001*M 			LD	A, function
0428A2 5B CF       0002*M 			RST.LIL	08h
0428A4 AF          0458*      xor a ; zero out any prior keypresses
0428A5 DD 77 05    0459*      ld (ix+sysvar_keyascii),a
0428A8             0460*  @loop:
0428A8 DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
0428AB A7          0462*      and a
0428AC C0          0463*      ret nz
0428AD 18 F9       0464*      jr @loop
0428AF             0465*  
0428AF             0466*  
0428AF             0467*  ; print bytes from an address to the screen in hexidecimal format
0428AF             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0428AF             0469*  ; outputs: values of each byte printed to screen separated by spaces
0428AF             0470*  ; destroys: nothing
0428AF             0471*  dumpMemoryHex:
0428AF             0472*  ; save all registers to the stack
0428AF F5          0473*      push af
0428B0 C5          0474*      push bc
0428B1 D5          0475*      push de
0428B2 E5          0476*      push hl
0428B3 DD E5       0477*      push ix
0428B5 FD E5       0478*      push iy
0428B7             0479*  
0428B7             0480*  ; set b to be our loop counter
0428B7 47          0481*      ld b,a
0428B8             0482*  @loop:
0428B8             0483*  ; print the byte
0428B8 7E          0484*      ld a,(hl)
0428B9 CD 50 25 04 0485*      call printHex8
0428BD             0486*  ; print a space
0428BD 3E 20       0487*      ld a,' '
0428BF 5B D7       0488*      rst.lil 10h
0428C1 23          0489*      inc hl
0428C2 10 F4       0490*      djnz @loop
0428C4 CD 35 25 04 0491*      call printNewLine
0428C8             0492*  
0428C8             0493*  ; restore everything
0428C8 FD E1       0494*      pop iy
0428CA DD E1       0495*      pop ix
0428CC E1          0496*      pop hl
0428CD D1          0497*      pop de
0428CE C1          0498*      pop bc
0428CF F1          0499*      pop af
0428D0             0500*  ; all done
0428D0 C9          0501*      ret
0428D1             0502*  
0428D1             0503*  
0428D1             0504*  ; print bytes from an address to the screen in binary format
0428D1             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0428D1             0506*  ; outputs: values of each byte printed to screen separated by spaces
0428D1             0507*  ; destroys: nothing
0428D1             0508*  dumpMemoryBin:
0428D1             0509*  ; save all registers to the stack
0428D1 F5          0510*      push af
0428D2 C5          0511*      push bc
0428D3 D5          0512*      push de
0428D4 E5          0513*      push hl
0428D5 DD E5       0514*      push ix
0428D7 FD E5       0515*      push iy
0428D9             0516*  
0428D9             0517*  ; set b to be our loop counter
0428D9 47          0518*      ld b,a
0428DA             0519*  @loop:
0428DA             0520*  ; print the byte
0428DA 7E          0521*      ld a,(hl)
0428DB E5          0522*      push hl
0428DC C5          0523*      push bc
0428DD CD DD 25 04 0524*      call printBin8
0428E1 C1          0525*      pop bc
0428E2             0526*  ; print a space
0428E2 3E 20       0527*      ld a,' '
0428E4 5B D7       0528*      rst.lil 10h
0428E6 E1          0529*      pop hl
0428E7 23          0530*      inc hl
0428E8 10 F0       0531*      djnz @loop
0428EA CD 35 25 04 0532*      call printNewLine
0428EE             0533*  
0428EE             0534*  ; restore everything
0428EE FD E1       0535*      pop iy
0428F0 DD E1       0536*      pop ix
0428F2 E1          0537*      pop hl
0428F3 D1          0538*      pop de
0428F4 C1          0539*      pop bc
0428F5 F1          0540*      pop af
0428F6             0541*  ; all done
0428F6 C9          0542*      ret
0428F7             0543*  
0428F7             0544*  ; print bytes from an address to the screen in binary format
0428F7             0545*  ; with the bits of each byte in reverse order (lsb first)
0428F7             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
0428F7             0547*  ; outputs: values of each byte printed to screen separated by spaces
0428F7             0548*  ; destroys: nothing
0428F7             0549*  dumpMemoryBinRev:
0428F7             0550*  ; save all registers to the stack
0428F7 F5          0551*      push af
0428F8 C5          0552*      push bc
0428F9 D5          0553*      push de
0428FA E5          0554*      push hl
0428FB DD E5       0555*      push ix
0428FD FD E5       0556*      push iy
0428FF             0557*  
0428FF             0558*  ; set b to be our loop counter
0428FF 47          0559*      ld b,a
042900             0560*  @loop:
042900             0561*  ; print the byte
042900 7E          0562*      ld a,(hl)
042901 E5          0563*      push hl
042902 C5          0564*      push bc
042903 CD 02 26 04 0565*      call printBin8Rev
042907 C1          0566*      pop bc
042908             0567*  ; print a space
042908 3E 20       0568*      ld a,' '
04290A 5B D7       0569*      rst.lil 10h
04290C E1          0570*      pop hl
04290D 23          0571*      inc hl
04290E 10 F0       0572*      djnz @loop
042910 CD 35 25 04 0573*      call printNewLine
042914             0574*  
042914             0575*  ; restore everything
042914 FD E1       0576*      pop iy
042916 DD E1       0577*      pop ix
042918 E1          0578*      pop hl
042919 D1          0579*      pop de
04291A C1          0580*      pop bc
04291B F1          0581*      pop af
04291C             0582*  ; all done
04291C C9          0583*      ret
04291D             0025   	; include "src/asm/player.inc"
04291D             0026   	include "src/asm/maths.inc"
04291D 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
042921 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
042925             0003*  
042925             0004*  ; set bcd values in a scratch memory address from registers bcde
042925             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
042925             0006*  ; destroys ; hl
042925             0007*  set_bcd:
042925 73          0008*      ld (hl),e
042926 23          0009*      inc hl
042927 72          0010*      ld (hl),d
042928 23          0011*      inc hl
042929 71          0012*      ld (hl),c
04292A 23          0013*      inc hl
04292B 70          0014*      ld (hl),b
04292C C9          0015*      ret
04292D             0016*  
04292D             0017*  ; load bcd values from a scratch memory address to bcde
04292D             0018*  ; input: hl; scratch address
04292D             0019*  ; output: bcde; 8-place bcd number
04292D             0020*  ; destroys: hl
04292D             0021*  get_bcd:
04292D 5E          0022*      ld e,(hl)
04292E 23          0023*      inc hl
04292F 56          0024*      ld d,(hl)
042930 23          0025*      inc hl
042931 4E          0026*      ld c,(hl)
042932 23          0027*      inc hl
042933 46          0028*      ld b,(hl)
042934 C9          0029*      ret
042935             0030*  
042935             0031*  ; BCD addition
042935             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
042935             0033*  ;       a is the number of bytes holding each number (number of places/2)
042935             0034*  ; outputs: (hl) + (de) --> (hl)
042935             0035*  ; destroys: a,b,de,hl
042935             0036*  add_bcd:
042935 47          0037*      ld b,a ; loop counter
042936 AF          0038*      xor a ; reset a, clear carry flag
042937             0039*  adcec:
042937 1A          0040*      ld a,(de) ; addend to acc
042938 8E          0041*      adc a,(hl) ; add (hl) to acc
042939 27          0042*      daa ; adjust result to bcd
04293A 77          0043*      ld (hl),a ; store result
04293B 23          0044*      inc hl ; advance memory pointers
04293C 13          0045*      inc de
04293D 10 F8       0046*      djnz adcec ; loop until b == 0
04293F C9          0047*      ret
042940             0048*  
042940             0049*  ; BCD subtraction
042940             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
042940             0051*  ;       a is the number of bytes holding each number (number of places/2)
042940             0052*  ; outputs: (hl) - (de) --> (hl)
042940             0053*  ; destroys: a,b,de,hl
042940             0054*  sub_bcd:
042940 47          0055*      ld b,a ; loop counter
042941 AF          0056*      xor a ; reset a,clear carry flag
042942             0057*  subdec:
042942 1A          0058*      ld a,(de) ; subtrahend to acc
042943 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
042944 27          0060*      daa ; adjust result to bcd
042945 77          0061*      ld (hl),a ; store result
042946 23          0062*      inc hl ; advance memory pointers
042947 13          0063*      inc de
042948 10 F8       0064*      djnz subdec ; loop until b == 0
04294A C9          0065*      ret
04294B             0066*  
04294B             0067*  ; http://www.z80.info/pseudo-random.txt
04294B             0068*  rand_8:
04294B C5          0069*      push bc
04294C 3A 5F 29 04 0070*      ld a,(r_seed)
042950 4F          0071*      ld c,a
042951             0072*  
042951 0F          0073*      rrca ; multiply by 32
042952 0F          0074*      rrca
042953 0F          0075*      rrca
042954 EE 1F       0076*      xor 0x1f
042956             0077*  
042956 81          0078*      add a,c
042957 DE FF       0079*      sbc a,255 ; carry
042959             0080*  
042959 32 5F 29 04 0081*      ld (r_seed),a
04295D C1          0082*      pop bc
04295E C9          0083*      ret
04295F 50          0084*  r_seed: defb $50
042960             0027   	include "src/asm/img_load.inc"
042960 00 00 00    0001*  cur_file_idx: dl 0
042963 00 00 00    0002*  cur_filename: dl 0
042966 00 00 00    0003*  cur_buffer_id: dl 0
042969 00 00 00    0004*  cur_buffer_id_lut: dl 0
04296C 00 00 00    0005*  cur_load_jump_table: dl 0
04296F             0006*  
04296F             0007*  img_load_init:
04296F             0008*  ; initialize bj's position parameters
04296F 21 00 00 00 0009*  	ld hl,0
042973 22 BD 2A 04 0010*  	ld (bj_yvel),hl
042977             0011*  
042977 21 2D 00 00 0012*      ld hl,45
04297B 22 C0 2A 04 0013*  	ld (bj_y_cur),hl
04297F 22 C3 2A 04 0014*  	ld (bj_y_min),hl
042983 22 C6 2A 04 0015*      ld (bj_y_max),hl
042987             0016*  
042987 21 01 00 00 0017*  	ld hl,1
04298B 22 B1 2A 04 0018*  	ld (bj_xvel),hl
04298F             0019*  
04298F 21 0A 00 00 0020*  	ld hl,10
042993 22 B4 2A 04 0021*  	ld (bj_x_cur),hl
042997 22 B7 2A 04 0022*  	ld (bj_x_min),hl
04299B             0023*  
04299B 21 C8 00 00 0024*  	ld hl,320-120
04299F 22 BA 2A 04 0025*  	ld (bj_x_max),hl
0429A3             0026*  
0429A3 C9          0027*      ret
0429A4             0028*  
0429A4             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
0429A4             0030*  img_load_main:
0429A4 21 00 00 00 0031*      ld hl,0
0429A8 22 60 29 04 0032*      ld (cur_file_idx),hl
0429AC             0033*  img_load_main_loop:
0429AC             0034*  ; back up loop counter
0429AC C5          0035*      push bc
0429AD             0036*  ; load the next panel
0429AD CD 15 2A 04 0037*      call load_next_panel
0429B1             0038*  ; draw all the things
0429B1 CD C9 2A 04 0039*      call tmp_draw_all_the_things
0429B5             0040*  ; draw the most recently loaded panel
0429B5 2A 66 29 04 0041*  	ld hl,(cur_buffer_id)
0429B9 CD 79 20 04 0042*  	call vdu_buff_select
0429BD 01 00 00 00 0043*  	ld bc,0
0429C1 11 00 00 00 0044*  	ld de,0
0429C5 CD 4A 22 04 0045*  	call vdu_plot_bmp
0429C9             0046*  ; move bj
0429C9 CD 51 2A 04 0047*  	call move_bj
0429CD             0048*  ; print welcome message
0429CD DD 21 6B 0A 0049*  	ld ix,font_itc_honda
       04          
0429D2 21 D7 37 04 0050*  	ld hl,hello_world
0429D6 01 20 00 00 0051*  	ld bc,32
0429DA 11 02 00 00 0052*  	ld de,2
0429DE CD B0 08 04 0053*  	call font_bmp_print
0429E2             0054*  ; print current filename
0429E2 CD 10 1F 04 0055*  	call vdu_cls
0429E6 2A 63 29 04 0056*  	ld hl,(cur_filename)
0429EA CD 20 25 04 0057*  	call printString
0429EE CD 35 25 04 0058*  	call printNewLine
0429F2             0059*  
0429F2             0060*  ; print current load stopwatch
0429F2 21 14 38 04 0061*  	ld hl,loading_time
0429F6 CD 20 25 04 0062*  	call printString
0429FA CD 07 32 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
0429FE CD 6E 25 04 0064*  	call printDec
042A02             0065*  
042A02             0066*  ; flip screen
042A02 CD DF 20 04 0067*      call vdu_flip
042A06             0068*  ; decrement loop counter
042A06 C1          0069*      pop bc
042A07 0B          0070*  	dec bc
042A08             0071*  ; ; DEBUG: DUMP REGISTERS
042A08             0072*  ; 	push bc
042A08             0073*  ; 	call dumpRegistersHex
042A08             0074*  ; 	call vdu_flip
042A08             0075*  ; 	pop bc
042A08             0076*  ; ; END DEBUG
042A08 79          0077*      ld a,c
042A09 B7          0078*      or a
042A0A C2 AC 29 04 0079*      jp nz,img_load_main_loop
042A0E 78          0080*      ld a,b
042A0F B7          0081*      or a
042A10 C2 AC 29 04 0082*      jp nz,img_load_main_loop
042A14 C9          0083*      ret
042A15             0084*  
042A15             0085*  load_next_panel:
042A15             0086*  ; look up the load routine for the current file index
042A15 2A 60 29 04 0087*  	ld hl,(cur_file_idx)
042A19 29          0088*  	add hl,hl ; multiply current index by 2 ...
042A1A ED 5B 60 29 0089*  	ld de,(cur_file_idx)
       04          
042A1F 19          0090*  	add hl,de ; ... now by 3
042A20 ED 5B 6C 29 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
042A25 19          0092*  	add hl,de
042A26 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
042A28 22 2D 2A 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
042A2C             0095*  @jump_addr:
042A2C CD 00 00 00 0096*  	call 0 ; call the panel load routine
042A30             0097*  ; look up the buffer id for the current file
042A30 2A 60 29 04 0098*  	ld hl,(cur_file_idx)
042A34 29          0099*  	add hl,hl ; multiply current index by 2 ...
042A35 ED 5B 60 29 0100*  	ld de,(cur_file_idx)
       04          
042A3A 19          0101*  	add hl,de ; ... now by 3
042A3B ED 5B 69 29 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
042A40 19          0103*  	add hl,de
042A41 ED 27       0104*  	ld hl,(hl)
042A43 22 66 29 04 0105*  	ld (cur_buffer_id),hl
042A47             0106*  ; bump the current file index
042A47 2A 60 29 04 0107*  	ld hl,(cur_file_idx)
042A4B 23          0108*  	inc hl
042A4C 22 60 29 04 0109*  	ld (cur_file_idx),hl
042A50 C9          0110*  	ret
042A51             0111*  
042A51             0112*  move_bj:
042A51             0113*  ; activate bj bitmap
042A51 21 04 03 00 0114*  	ld hl, BUF_UI_BJ_120_120
042A55 CD 79 20 04 0115*  	call vdu_buff_select
042A59             0116*  ; update position based on velocity parameters
042A59 2A B4 2A 04 0117*  	ld hl, (bj_x_cur)
042A5D ED 5B B1 2A 0118*  	ld de, (bj_xvel)
       04          
042A62 19          0119*  	add hl, de
042A63 22 B4 2A 04 0120*  	ld (bj_x_cur), hl
042A67 EB          0121*  	ex de,hl ; store x_cur in de
042A68             0122*  ; check if we're < x_min
042A68 2A B7 2A 04 0123*  	ld hl,(bj_x_min)
042A6C AF          0124*  	xor a ; clear carry
042A6D ED 52       0125*  	sbc hl,de ; x_min - x_cur
042A6F F2 8D 2A 04 0126*  	jp p, move_bj_x_min
042A73             0127*  ; check if we're > x_max
042A73 2A BA 2A 04 0128*  	ld hl,(bj_x_max)
042A77 AF          0129*  	xor a ; clear carry
042A78 ED 52       0130*  	sbc hl,de ; x_max - x_cur
042A7A FA 9F 2A 04 0131*  	jp m, move_bj_x_max
042A7E             0132*  ; if not at either boundary, fall through to draw bj's
042A7E             0133*  draw_bj:
042A7E ED 4B B4 2A 0134*  	ld bc,(bj_x_cur)
       04          
042A83 ED 5B C0 2A 0135*  	ld de,(bj_y_cur)
       04          
042A88 CD 4A 22 04 0136*  	call vdu_plot_bmp
042A8C C9          0137*  	ret
042A8D             0138*  move_bj_x_min:
042A8D 21 01 00 00 0139*  	ld hl,1
042A91 22 B1 2A 04 0140*  	ld (bj_xvel),hl
042A95 2A B7 2A 04 0141*  	ld hl,(bj_x_min)
042A99 22 B4 2A 04 0142*  	ld (bj_x_cur),hl
042A9D 18 DF       0143*  	jr draw_bj
042A9F             0144*  move_bj_x_max:
042A9F 21 FF FF FF 0145*  	ld hl,-1
042AA3 22 B1 2A 04 0146*  	ld (bj_xvel),hl
042AA7 2A BA 2A 04 0147*  	ld hl,(bj_x_max)
042AAB 22 B4 2A 04 0148*  	ld (bj_x_cur),hl
042AAF 18 CD       0149*  	jr draw_bj
042AB1 00 00 00    0150*  bj_xvel: dl 0
042AB4 00 00 00    0151*  bj_x_cur: dl 0
042AB7 00 00 00    0152*  bj_x_min: dl 0
042ABA 00 00 00    0153*  bj_x_max: dl 0
042ABD             0154*  
042ABD 00 00 00    0155*  bj_yvel: dl 0
042AC0 00 00 00    0156*  bj_y_cur: dl 0
042AC3 00 00 00    0157*  bj_y_min: dl 0
042AC6 00 00 00    0158*  bj_y_max: dl 0
042AC9             0159*  
042AC9             0160*  tmp_draw_all_the_things:
042AC9 21 0A 03 00 0161*      ld hl,BUF_UI_SPLASH
042ACD CD 79 20 04 0162*      call vdu_buff_select
042AD1 01 00 00 00 0163*      ld bc,0
042AD5 11 00 00 00 0164*      ld de,0
042AD9 CD 4A 22 04 0165*      call vdu_plot_bmp
042ADD C9          0166*  	ret
042ADE             0167*  
042ADE             0168*  ; load an rgba2222 image file to a buffer
042ADE             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
042ADE             0170*  vdu_load_img_2:
042ADE             0171*  ; back up image dimension parameters and buffer id
042ADE E5          0172*  	push hl
042ADF C5          0173*  	push bc
042AE0 D5          0174*  	push de
042AE1             0175*  ; load the image
042AE1 CD 30 3A 04 0176*  	call vdu_load_buffer_from_file
042AE5             0177*  ; now make it a bitmap
042AE5 D1          0178*  	pop de
042AE6 C1          0179*  	pop bc
042AE7 E1          0180*  	pop hl
042AE8 3E 01       0181*  	ld a,1 ; the magic number for rgba2222
042AEA C3 8E 20 04 0182*  	jp vdu_bmp_create ; will return to caller from there
042AEE             0183*  
042AEE             0184*  ; load an rgba8888 image file to a buffer
042AEE             0185*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size ; iy = pointer to filename
042AEE             0186*  vdu_load_img_8:
042AEE             0187*  ; back up image dimension parameters and buffer id
042AEE E5          0188*  	push hl
042AEF C5          0189*  	push bc
042AF0 D5          0190*  	push de
042AF1             0191*  ; load the image
042AF1 CD 30 3A 04 0192*  	call vdu_load_buffer_from_file
042AF5             0193*  ; now make it a bitmap
042AF5 D1          0194*  	pop de
042AF6 C1          0195*  	pop bc
042AF7 E1          0196*  	pop hl
042AF8 3E 00       0197*  	ld a,0 ; the magic number for rgba8888
042AFA C3 8E 20 04 0198*  	jp vdu_bmp_create ; will return to caller from there
042AFE             0028   	include "src/asm/sfx.inc"
042AFE             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
042AFE             0002*  
042AFE             0003*  SFX_num_buffers: equ 22
042AFE             0004*  ; SFX buffer ids:
042AFE             0005*  BUF_ACHTUNG: equ 0x0500
042AFE             0006*  BUF_AHH: equ 0x0501
042AFE             0007*  BUF_AUGH: equ 0x0502
042AFE             0008*  BUF_AYEE: equ 0x0503
042AFE             0009*  BUF_AYEE_HIGH: equ 0x0504
042AFE             0010*  BUF_DOG_WOOF_DOUBLE: equ 0x0505
042AFE             0011*  BUF_DOG_WOOF_SINGLE: equ 0x0506
042AFE             0012*  BUF_DOG_YELP: equ 0x0507
042AFE             0013*  BUF_EXPLODE: equ 0x0508
042AFE             0014*  BUF_GOT_TREASURE: equ 0x0509
042AFE             0015*  BUF_GUN_EMPTY: equ 0x050A
042AFE             0016*  BUF_GUN_RELOAD: equ 0x050B
042AFE             0017*  BUF_KNIFE: equ 0x050C
042AFE             0018*  BUF_MEIN_LEBEN: equ 0x050D
042AFE             0019*  BUF_OOF: equ 0x050E
042AFE             0020*  BUF_SCHUSSTAFFEL: equ 0x050F
042AFE             0021*  BUF_SCREAM: equ 0x0510
042AFE             0022*  BUF_SHOT_GATLING_BURST: equ 0x0511
042AFE             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0x0512
042AFE             0024*  BUF_SHOT_PISTOL: equ 0x0513
042AFE             0025*  BUF_UGH: equ 0x0514
042AFE             0026*  BUF_WILHELM: equ 0x0515
042AFE             0027*  
042AFE             0028*  ; SFX buffer id reverse lookup:
042AFE             0029*  SFX_buffer_id_lut:
042AFE 00 05 00    0030*  	dl BUF_ACHTUNG
042B01 01 05 00    0031*  	dl BUF_AHH
042B04 02 05 00    0032*  	dl BUF_AUGH
042B07 03 05 00    0033*  	dl BUF_AYEE
042B0A 04 05 00    0034*  	dl BUF_AYEE_HIGH
042B0D 05 05 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
042B10 06 05 00    0036*  	dl BUF_DOG_WOOF_SINGLE
042B13 07 05 00    0037*  	dl BUF_DOG_YELP
042B16 08 05 00    0038*  	dl BUF_EXPLODE
042B19 09 05 00    0039*  	dl BUF_GOT_TREASURE
042B1C 0A 05 00    0040*  	dl BUF_GUN_EMPTY
042B1F 0B 05 00    0041*  	dl BUF_GUN_RELOAD
042B22 0C 05 00    0042*  	dl BUF_KNIFE
042B25 0D 05 00    0043*  	dl BUF_MEIN_LEBEN
042B28 0E 05 00    0044*  	dl BUF_OOF
042B2B 0F 05 00    0045*  	dl BUF_SCHUSSTAFFEL
042B2E 10 05 00    0046*  	dl BUF_SCREAM
042B31 11 05 00    0047*  	dl BUF_SHOT_GATLING_BURST
042B34 12 05 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
042B37 13 05 00    0049*  	dl BUF_SHOT_PISTOL
042B3A 14 05 00    0050*  	dl BUF_UGH
042B3D 15 05 00    0051*  	dl BUF_WILHELM
042B40             0052*  
042B40             0053*  ; SFX duration lookup:
042B40             0054*  SFX_duration_lut:
042B40 58 03       0055*  	dw 856 ; ACHTUNG
042B42 91 01       0056*  	dw 401 ; AHH
042B44 FC 02       0057*  	dw 764 ; AUGH
042B46 E6 01       0058*  	dw 486 ; AYEE
042B48 40 04       0059*  	dw 1088 ; AYEE_HIGH
042B4A 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
042B4C 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
042B4E B0 01       0062*  	dw 432 ; DOG_YELP
042B50 13 05       0063*  	dw 1299 ; EXPLODE
042B52 A7 05       0064*  	dw 1447 ; GOT_TREASURE
042B54 24 01       0065*  	dw 292 ; GUN_EMPTY
042B56 BA 01       0066*  	dw 442 ; GUN_RELOAD
042B58 F2 00       0067*  	dw 242 ; KNIFE
042B5A 2E 03       0068*  	dw 814 ; MEIN_LEBEN
042B5C CE 03       0069*  	dw 974 ; OOF
042B5E 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
042B60 E0 02       0071*  	dw 736 ; SCREAM
042B62 B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
042B64 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
042B66 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
042B68 77 01       0075*  	dw 375 ; UGH
042B6A FD 04       0076*  	dw 1277 ; WILHELM
042B6C             0077*  
042B6C             0078*  ; SFX load routines jump table:
042B6C             0079*  SFX_load_routines_table:
042B6C AE 2B 04    0080*  	dl load_sfx_ACHTUNG
042B6F C6 2B 04    0081*  	dl load_sfx_AHH
042B72 DE 2B 04    0082*  	dl load_sfx_AUGH
042B75 F6 2B 04    0083*  	dl load_sfx_AYEE
042B78 0E 2C 04    0084*  	dl load_sfx_AYEE_HIGH
042B7B 26 2C 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
042B7E 3E 2C 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
042B81 56 2C 04    0087*  	dl load_sfx_DOG_YELP
042B84 6E 2C 04    0088*  	dl load_sfx_EXPLODE
042B87 86 2C 04    0089*  	dl load_sfx_GOT_TREASURE
042B8A 9E 2C 04    0090*  	dl load_sfx_GUN_EMPTY
042B8D B6 2C 04    0091*  	dl load_sfx_GUN_RELOAD
042B90 CE 2C 04    0092*  	dl load_sfx_KNIFE
042B93 E6 2C 04    0093*  	dl load_sfx_MEIN_LEBEN
042B96 FE 2C 04    0094*  	dl load_sfx_OOF
042B99 16 2D 04    0095*  	dl load_sfx_SCHUSSTAFFEL
042B9C 2E 2D 04    0096*  	dl load_sfx_SCREAM
042B9F 46 2D 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
042BA2 5E 2D 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
042BA5 76 2D 04    0099*  	dl load_sfx_SHOT_PISTOL
042BA8 8E 2D 04    0100*  	dl load_sfx_UGH
042BAB A6 2D 04    0101*  	dl load_sfx_WILHELM
042BAE             0102*  
042BAE             0103*  ; Import sfx .raw files and load them into VDP buffers
042BAE             0104*  
042BAE             0105*  load_sfx_ACHTUNG:
042BAE 21 00 05 00 0106*  	ld hl,BUF_ACHTUNG
042BB2 DD 21 3A 38 0107*  	ld ix,14394
       00          
042BB7 FD 21 BE 2D 0108*  	ld iy,FACHTUNG
       04          
042BBC FD 22 63 29 0109*  	ld (cur_filename),iy
       04          
042BC1 CD 03 25 04 0110*  	call vdu_load_sfx
042BC5 C9          0111*  	ret
042BC6             0112*  
042BC6             0113*  load_sfx_AHH:
042BC6 21 01 05 00 0114*  	ld hl,BUF_AHH
042BCA DD 21 63 1A 0115*  	ld ix,6755
       00          
042BCF FD 21 CE 2D 0116*  	ld iy,FAHH
       04          
042BD4 FD 22 63 29 0117*  	ld (cur_filename),iy
       04          
042BD9 CD 03 25 04 0118*  	call vdu_load_sfx
042BDD C9          0119*  	ret
042BDE             0120*  
042BDE             0121*  load_sfx_AUGH:
042BDE 21 02 05 00 0122*  	ld hl,BUF_AUGH
042BE2 DD 21 39 32 0123*  	ld ix,12857
       00          
042BE7 FD 21 DA 2D 0124*  	ld iy,FAUGH
       04          
042BEC FD 22 63 29 0125*  	ld (cur_filename),iy
       04          
042BF1 CD 03 25 04 0126*  	call vdu_load_sfx
042BF5 C9          0127*  	ret
042BF6             0128*  
042BF6             0129*  load_sfx_AYEE:
042BF6 21 03 05 00 0130*  	ld hl,BUF_AYEE
042BFA DD 21 00 20 0131*  	ld ix,8192
       00          
042BFF FD 21 E7 2D 0132*  	ld iy,FAYEE
       04          
042C04 FD 22 63 29 0133*  	ld (cur_filename),iy
       04          
042C09 CD 03 25 04 0134*  	call vdu_load_sfx
042C0D C9          0135*  	ret
042C0E             0136*  
042C0E             0137*  load_sfx_AYEE_HIGH:
042C0E 21 04 05 00 0138*  	ld hl,BUF_AYEE_HIGH
042C12 DD 21 77 47 0139*  	ld ix,18295
       00          
042C17 FD 21 F4 2D 0140*  	ld iy,FAYEE_HIGH
       04          
042C1C FD 22 63 29 0141*  	ld (cur_filename),iy
       04          
042C21 CD 03 25 04 0142*  	call vdu_load_sfx
042C25 C9          0143*  	ret
042C26             0144*  
042C26             0145*  load_sfx_DOG_WOOF_DOUBLE:
042C26 21 05 05 00 0146*  	ld hl,BUF_DOG_WOOF_DOUBLE
042C2A DD 21 24 28 0147*  	ld ix,10276
       00          
042C2F FD 21 06 2E 0148*  	ld iy,FDOG_WOOF_DOUBLE
       04          
042C34 FD 22 63 29 0149*  	ld (cur_filename),iy
       04          
042C39 CD 03 25 04 0150*  	call vdu_load_sfx
042C3D C9          0151*  	ret
042C3E             0152*  
042C3E             0153*  load_sfx_DOG_WOOF_SINGLE:
042C3E 21 06 05 00 0154*  	ld hl,BUF_DOG_WOOF_SINGLE
042C42 DD 21 10 23 0155*  	ld ix,8976
       00          
042C47 FD 21 1E 2E 0156*  	ld iy,FDOG_WOOF_SINGLE
       04          
042C4C FD 22 63 29 0157*  	ld (cur_filename),iy
       04          
042C51 CD 03 25 04 0158*  	call vdu_load_sfx
042C55 C9          0159*  	ret
042C56             0160*  
042C56             0161*  load_sfx_DOG_YELP:
042C56 21 07 05 00 0162*  	ld hl,BUF_DOG_YELP
042C5A DD 21 60 1C 0163*  	ld ix,7264
       00          
042C5F FD 21 36 2E 0164*  	ld iy,FDOG_YELP
       04          
042C64 FD 22 63 29 0165*  	ld (cur_filename),iy
       04          
042C69 CD 03 25 04 0166*  	call vdu_load_sfx
042C6D C9          0167*  	ret
042C6E             0168*  
042C6E             0169*  load_sfx_EXPLODE:
042C6E 21 08 05 00 0170*  	ld hl,BUF_EXPLODE
042C72 DD 21 48 55 0171*  	ld ix,21832
       00          
042C77 FD 21 47 2E 0172*  	ld iy,FEXPLODE
       04          
042C7C FD 22 63 29 0173*  	ld (cur_filename),iy
       04          
042C81 CD 03 25 04 0174*  	call vdu_load_sfx
042C85 C9          0175*  	ret
042C86             0176*  
042C86             0177*  load_sfx_GOT_TREASURE:
042C86 21 09 05 00 0178*  	ld hl,BUF_GOT_TREASURE
042C8A DD 21 07 5F 0179*  	ld ix,24327
       00          
042C8F FD 21 57 2E 0180*  	ld iy,FGOT_TREASURE
       04          
042C94 FD 22 63 29 0181*  	ld (cur_filename),iy
       04          
042C99 CD 03 25 04 0182*  	call vdu_load_sfx
042C9D C9          0183*  	ret
042C9E             0184*  
042C9E             0185*  load_sfx_GUN_EMPTY:
042C9E 21 0A 05 00 0186*  	ld hl,BUF_GUN_EMPTY
042CA2 DD 21 3F 13 0187*  	ld ix,4927
       00          
042CA7 FD 21 6C 2E 0188*  	ld iy,FGUN_EMPTY
       04          
042CAC FD 22 63 29 0189*  	ld (cur_filename),iy
       04          
042CB1 CD 03 25 04 0190*  	call vdu_load_sfx
042CB5 C9          0191*  	ret
042CB6             0192*  
042CB6             0193*  load_sfx_GUN_RELOAD:
042CB6 21 0B 05 00 0194*  	ld hl,BUF_GUN_RELOAD
042CBA DD 21 0F 1D 0195*  	ld ix,7439
       00          
042CBF FD 21 7E 2E 0196*  	ld iy,FGUN_RELOAD
       04          
042CC4 FD 22 63 29 0197*  	ld (cur_filename),iy
       04          
042CC9 CD 03 25 04 0198*  	call vdu_load_sfx
042CCD C9          0199*  	ret
042CCE             0200*  
042CCE             0201*  load_sfx_KNIFE:
042CCE 21 0C 05 00 0202*  	ld hl,BUF_KNIFE
042CD2 DD 21 F3 0F 0203*  	ld ix,4083
       00          
042CD7 FD 21 91 2E 0204*  	ld iy,FKNIFE
       04          
042CDC FD 22 63 29 0205*  	ld (cur_filename),iy
       04          
042CE1 CD 03 25 04 0206*  	call vdu_load_sfx
042CE5 C9          0207*  	ret
042CE6             0208*  
042CE6             0209*  load_sfx_MEIN_LEBEN:
042CE6 21 0D 05 00 0210*  	ld hl,BUF_MEIN_LEBEN
042CEA DD 21 81 35 0211*  	ld ix,13697
       00          
042CEF FD 21 9F 2E 0212*  	ld iy,FMEIN_LEBEN
       04          
042CF4 FD 22 63 29 0213*  	ld (cur_filename),iy
       04          
042CF9 CD 03 25 04 0214*  	call vdu_load_sfx
042CFD C9          0215*  	ret
042CFE             0216*  
042CFE             0217*  load_sfx_OOF:
042CFE 21 0E 05 00 0218*  	ld hl,BUF_OOF
042D02 DD 21 00 40 0219*  	ld ix,16384
       00          
042D07 FD 21 B2 2E 0220*  	ld iy,FOOF
       04          
042D0C FD 22 63 29 0221*  	ld (cur_filename),iy
       04          
042D11 CD 03 25 04 0222*  	call vdu_load_sfx
042D15 C9          0223*  	ret
042D16             0224*  
042D16             0225*  load_sfx_SCHUSSTAFFEL:
042D16 21 0F 05 00 0226*  	ld hl,BUF_SCHUSSTAFFEL
042D1A DD 21 63 26 0227*  	ld ix,9827
       00          
042D1F FD 21 BE 2E 0228*  	ld iy,FSCHUSSTAFFEL
       04          
042D24 FD 22 63 29 0229*  	ld (cur_filename),iy
       04          
042D29 CD 03 25 04 0230*  	call vdu_load_sfx
042D2D C9          0231*  	ret
042D2E             0232*  
042D2E             0233*  load_sfx_SCREAM:
042D2E 21 10 05 00 0234*  	ld hl,BUF_SCREAM
042D32 DD 21 5E 30 0235*  	ld ix,12382
       00          
042D37 FD 21 D3 2E 0236*  	ld iy,FSCREAM
       04          
042D3C FD 22 63 29 0237*  	ld (cur_filename),iy
       04          
042D41 CD 03 25 04 0238*  	call vdu_load_sfx
042D45 C9          0239*  	ret
042D46             0240*  
042D46             0241*  load_sfx_SHOT_GATLING_BURST:
042D46 21 11 05 00 0242*  	ld hl,BUF_SHOT_GATLING_BURST
042D4A DD 21 00 60 0243*  	ld ix,24576
       00          
042D4F FD 21 E2 2E 0244*  	ld iy,FSHOT_GATLING_BURST
       04          
042D54 FD 22 63 29 0245*  	ld (cur_filename),iy
       04          
042D59 CD 03 25 04 0246*  	call vdu_load_sfx
042D5D C9          0247*  	ret
042D5E             0248*  
042D5E             0249*  load_sfx_SHOT_MACHINE_GUN_BURST:
042D5E 21 12 05 00 0250*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
042D62 DD 21 C4 42 0251*  	ld ix,17092
       00          
042D67 FD 21 FD 2E 0252*  	ld iy,FSHOT_MACHINE_GUN_BURST
       04          
042D6C FD 22 63 29 0253*  	ld (cur_filename),iy
       04          
042D71 CD 03 25 04 0254*  	call vdu_load_sfx
042D75 C9          0255*  	ret
042D76             0256*  
042D76             0257*  load_sfx_SHOT_PISTOL:
042D76 21 13 05 00 0258*  	ld hl,BUF_SHOT_PISTOL
042D7A DD 21 61 4B 0259*  	ld ix,19297
       00          
042D7F FD 21 1C 2F 0260*  	ld iy,FSHOT_PISTOL
       04          
042D84 FD 22 63 29 0261*  	ld (cur_filename),iy
       04          
042D89 CD 03 25 04 0262*  	call vdu_load_sfx
042D8D C9          0263*  	ret
042D8E             0264*  
042D8E             0265*  load_sfx_UGH:
042D8E 21 14 05 00 0266*  	ld hl,BUF_UGH
042D92 DD 21 A9 18 0267*  	ld ix,6313
       00          
042D97 FD 21 30 2F 0268*  	ld iy,FUGH
       04          
042D9C FD 22 63 29 0269*  	ld (cur_filename),iy
       04          
042DA1 CD 03 25 04 0270*  	call vdu_load_sfx
042DA5 C9          0271*  	ret
042DA6             0272*  
042DA6             0273*  load_sfx_WILHELM:
042DA6 21 15 05 00 0274*  	ld hl,BUF_WILHELM
042DAA DD 21 D7 53 0275*  	ld ix,21463
       00          
042DAF FD 21 3C 2F 0276*  	ld iy,FWILHELM
       04          
042DB4 FD 22 63 29 0277*  	ld (cur_filename),iy
       04          
042DB9 CD 03 25 04 0278*  	call vdu_load_sfx
042DBD C9          0279*  	ret
042DBE             0280*  
042DBE             0281*  ; File name lookups:
042DBE 73 66 78 2F 0282*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
042DCE 73 66 78 2F 0283*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
042DDA 73 66 78 2F 0284*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
042DE7 73 66 78 2F 0285*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
042DF4 73 66 78 2F 0286*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
042E06 73 66 78 2F 0287*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
042E1E 73 66 78 2F 0288*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
042E36 73 66 78 2F 0289*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
042E47 73 66 78 2F 0290*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
042E57 73 66 78 2F 0291*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
042E6C 73 66 78 2F 0292*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
042E7E 73 66 78 2F 0293*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
042E91 73 66 78 2F 0294*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
042E9F 73 66 78 2F 0295*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
042EB2 73 66 78 2F 0296*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
042EBE 73 66 78 2F 0297*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
042ED3 73 66 78 2F 0298*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
042EE2 73 66 78 2F 0299*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
042EFD 73 66 78 2F 0300*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
042F1C 73 66 78 2F 0301*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
042F30 73 66 78 2F 0302*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
042F3C 73 66 78 2F 0303*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
042F4C             0304*  
042F4C             0305*  ; Play sfx routines
042F4C             0306*  
042F4C             0307*  sfx_play_achtung:
042F4C 21 00 05 00 0308*  	ld hl,BUF_ACHTUNG
042F50 01 58 03 00 0309*  	ld bc,856
042F54 C3 46 00 04 0310*  	jp vdu_play_sfx
042F58             0311*  
042F58             0312*  sfx_play_ahh:
042F58 21 01 05 00 0313*  	ld hl,BUF_AHH
042F5C 01 91 01 00 0314*  	ld bc,401
042F60 C3 46 00 04 0315*  	jp vdu_play_sfx
042F64             0316*  
042F64             0317*  sfx_play_augh:
042F64 21 02 05 00 0318*  	ld hl,BUF_AUGH
042F68 01 FC 02 00 0319*  	ld bc,764
042F6C C3 46 00 04 0320*  	jp vdu_play_sfx
042F70             0321*  
042F70             0322*  sfx_play_ayee:
042F70 21 03 05 00 0323*  	ld hl,BUF_AYEE
042F74 01 E6 01 00 0324*  	ld bc,486
042F78 C3 46 00 04 0325*  	jp vdu_play_sfx
042F7C             0326*  
042F7C             0327*  sfx_play_ayee_high:
042F7C 21 04 05 00 0328*  	ld hl,BUF_AYEE_HIGH
042F80 01 40 04 00 0329*  	ld bc,1088
042F84 C3 46 00 04 0330*  	jp vdu_play_sfx
042F88             0331*  
042F88             0332*  sfx_play_dog_woof_double:
042F88 21 05 05 00 0333*  	ld hl,BUF_DOG_WOOF_DOUBLE
042F8C 01 63 02 00 0334*  	ld bc,611
042F90 C3 46 00 04 0335*  	jp vdu_play_sfx
042F94             0336*  
042F94             0337*  sfx_play_dog_woof_single:
042F94 21 06 05 00 0338*  	ld hl,BUF_DOG_WOOF_SINGLE
042F98 01 15 02 00 0339*  	ld bc,533
042F9C C3 46 00 04 0340*  	jp vdu_play_sfx
042FA0             0341*  
042FA0             0342*  sfx_play_dog_yelp:
042FA0 21 07 05 00 0343*  	ld hl,BUF_DOG_YELP
042FA4 01 B0 01 00 0344*  	ld bc,432
042FA8 C3 46 00 04 0345*  	jp vdu_play_sfx
042FAC             0346*  
042FAC             0347*  sfx_play_explode:
042FAC 21 08 05 00 0348*  	ld hl,BUF_EXPLODE
042FB0 01 13 05 00 0349*  	ld bc,1299
042FB4 C3 46 00 04 0350*  	jp vdu_play_sfx
042FB8             0351*  
042FB8             0352*  sfx_play_got_treasure:
042FB8 21 09 05 00 0353*  	ld hl,BUF_GOT_TREASURE
042FBC 01 A7 05 00 0354*  	ld bc,1447
042FC0 C3 46 00 04 0355*  	jp vdu_play_sfx
042FC4             0356*  
042FC4             0357*  sfx_play_gun_empty:
042FC4 21 0A 05 00 0358*  	ld hl,BUF_GUN_EMPTY
042FC8 01 24 01 00 0359*  	ld bc,292
042FCC C3 46 00 04 0360*  	jp vdu_play_sfx
042FD0             0361*  
042FD0             0362*  sfx_play_gun_reload:
042FD0 21 0B 05 00 0363*  	ld hl,BUF_GUN_RELOAD
042FD4 01 BA 01 00 0364*  	ld bc,442
042FD8 C3 46 00 04 0365*  	jp vdu_play_sfx
042FDC             0366*  
042FDC             0367*  sfx_play_knife:
042FDC 21 0C 05 00 0368*  	ld hl,BUF_KNIFE
042FE0 01 F2 00 00 0369*  	ld bc,242
042FE4 C3 46 00 04 0370*  	jp vdu_play_sfx
042FE8             0371*  
042FE8             0372*  sfx_play_mein_leben:
042FE8 21 0D 05 00 0373*  	ld hl,BUF_MEIN_LEBEN
042FEC 01 2E 03 00 0374*  	ld bc,814
042FF0 C3 46 00 04 0375*  	jp vdu_play_sfx
042FF4             0376*  
042FF4             0377*  sfx_play_oof:
042FF4 21 0E 05 00 0378*  	ld hl,BUF_OOF
042FF8 01 CE 03 00 0379*  	ld bc,974
042FFC C3 46 00 04 0380*  	jp vdu_play_sfx
043000             0381*  
043000             0382*  sfx_play_schusstaffel:
043000 21 0F 05 00 0383*  	ld hl,BUF_SCHUSSTAFFEL
043004 01 48 02 00 0384*  	ld bc,584
043008 C3 46 00 04 0385*  	jp vdu_play_sfx
04300C             0386*  
04300C             0387*  sfx_play_scream:
04300C 21 10 05 00 0388*  	ld hl,BUF_SCREAM
043010 01 E0 02 00 0389*  	ld bc,736
043014 C3 46 00 04 0390*  	jp vdu_play_sfx
043018             0391*  
043018             0392*  sfx_play_shot_gatling_burst:
043018 21 11 05 00 0393*  	ld hl,BUF_SHOT_GATLING_BURST
04301C 01 B6 05 00 0394*  	ld bc,1462
043020 C3 46 00 04 0395*  	jp vdu_play_sfx
043024             0396*  
043024             0397*  sfx_play_shot_machine_gun_burst:
043024 21 12 05 00 0398*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
043028 01 F9 03 00 0399*  	ld bc,1017
04302C C3 46 00 04 0400*  	jp vdu_play_sfx
043030             0401*  
043030             0402*  sfx_play_shot_pistol:
043030 21 13 05 00 0403*  	ld hl,BUF_SHOT_PISTOL
043034 01 7C 04 00 0404*  	ld bc,1148
043038 C3 46 00 04 0405*  	jp vdu_play_sfx
04303C             0406*  
04303C             0407*  sfx_play_ugh:
04303C 21 14 05 00 0408*  	ld hl,BUF_UGH
043040 01 77 01 00 0409*  	ld bc,375
043044 C3 46 00 04 0410*  	jp vdu_play_sfx
043048             0411*  
043048             0412*  sfx_play_wilhelm:
043048 21 15 05 00 0413*  	ld hl,BUF_WILHELM
04304C 01 FD 04 00 0414*  	ld bc,1277
043050 C3 46 00 04 0415*  	jp vdu_play_sfx
043054             0029   	include "src/asm/timer.inc"
043054             0001*  ; Table 32. Timer Control Registers
043054             0002*  ; this constant is the base address of the timer control registers
043054             0003*  ; each timer takes three bytes:
043054             0004*  ;   0: control register
043054             0005*  ;   1: low byte of timer reset value
043054             0006*  ;   2: high byte of timer reset value
043054             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
043054             0008*  ; which correctly force the high and upper bytes of the address bus to zero
043054             0009*  TMR_CTL:     equ 80h
043054             0010*  
043054             0011*  ; Timer Control Register Bit Definitions
043054             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
043054             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
043054             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
043054             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
043054             0016*                              ; the TMRx_CTL register is read.
043054             0017*  
043054             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
043054             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
043054             0020*  
043054             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
043054             0022*                              ;  0,and counting stops when the end-of-count value is reached.
043054             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
043054             0024*                              ; written to the counter when the end-of-count value is reached.
043054             0025*  
043054             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
043054             0027*  CLK_DIV_256:  equ %00001100 ;
043054             0028*  CLK_DIV_64:   equ %00001000 ;
043054             0029*  CLK_DIV_16:   equ %00000100 ;
043054             0030*  CLK_DIV_4:    equ %00000000 ;
043054             0031*  
043054             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
043054             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
043054             0034*                              ; When a 1 is written to this bit,the values in the reload registers
043054             0035*                              ;  are loaded into the downcounter when the timer restarts. The
043054             0036*                              ; programmer must ensure that this bit is set to 1 each time
043054             0037*                              ; SINGLE-PASS mode is used.
043054             0038*  
043054             0039*  ; disable/enable the programmable reload timer
043054             0040*  PRT_EN_0:     equ %00000000 ;
043054             0041*  PRT_EN_1:     equ %00000001 ;
043054             0042*  
043054             0043*  ; Table 37. Timer Input Source Select Register
043054             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
043054             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
043054             0046*  ;   00: System clock / CLK_DIV
043054             0047*  ;   01: RTC / CLK_DIV
043054             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
043054             0049*  ;   10: GPIO port B pin 1.
043054             0050*  ;   11: GPIO port B pin 1.
043054             0051*  TMR_ISS:   equ 92h ; register address
043054             0052*  
043054             0053*  ; Table 51. Real-Time Clock Control Register
043054             0054*  RTC_CTRL: equ EDh ; register address
043054             0055*  
043054             0056*  ; alarm interrupt disable/enable
043054             0057*  RTC_ALARM_0:    equ %00000000
043054             0058*  RTC_ALARM_1:    equ %10000000
043054             0059*  
043054             0060*  ; interrupt on alarm disable/enable
043054             0061*  RTC_INT_ENT_0:  equ %00000000
043054             0062*  RTC_INT_ENT_1:  equ %01000000
043054             0063*  
043054             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
043054             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
043054             0066*  
043054             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
043054             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
043054             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
043054             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
043054             0071*  
043054             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
043054             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
043054             0074*  
043054             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
043054             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
043054             0077*  
043054             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
043054             0079*                                  ; RTC counter is enabled.
043054             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
043054             0081*                                  ; RTC counter is disabled.
043054             0082*  
043054             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
043054             0084*  
043054             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
043054             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
043054 00 00 00    0087*  prt_reload: dl 0x000000
043057             0088*  
043057             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
043057             0090*  ;          de = number PRT interrupts during test interval
043057             0091*  prt_calibrate:
043057 CD 6A 21 04 0092*      call vdu_vblank
04305B             0093*  ; set a MOS timer
04305B 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04305F FD 21 B2 31 0095*      ld iy,tmr_test
       04          
043064 CD 90 31 04 0096*      call tmr_set
043068             0097*  ; set a PRT timer
043068             0098*      ; ld hl,prt_reload_hardware
043068             0099*      ; ld hl,prt_reload_emulator
043068 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04306C 22 54 30 04 0101*      ld (prt_reload),hl
043070 CD CB 30 04 0102*      call prt_set
043074             0103*  @loop:
043074             0104*  ; check time remaining on MOS timer
043074 CD 9E 31 04 0105*      call tmr_get
043078 CA 82 30 04 0106*      jp z,@done ; time expired,so quit
04307C FA 82 30 04 0107*      jp m,@done ; time past expiration (negative),so quit
043080 18 F2       0108*      jr @loop
043082             0109*  @done:
043082 ED 5B 19 31 0110*      ld de,(prt_irq_counter)
       04          
043087 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04308B ED 43 54 30 0112*      ld (prt_reload),bc
       04          
043090 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
043094 AF          0114*      xor a ; clear carry,zero is default value for running on hardware
043095 32 3F 38 04 0115*      ld (is_emulator),a
043099 ED 52       0116*      sbc hl,de
04309B 21 57 38 04 0117*      ld hl,on_hardware ; default message for running on hardware
04309F CA 57 30 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
0430A3 F8          0119*      ret m ; negative result means we're on hardware
0430A4 3C          0120*      inc a ; we're on emulator
0430A5 32 3F 38 04 0121*      ld (is_emulator),a
0430A9 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
0430AD ED 43 54 30 0123*      ld (prt_reload),bc
       04          
0430B2 21 40 38 04 0124*      ld hl,on_emulator
0430B6 C9          0125*      ret
0430B7             0126*  
0430B7 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
0430CB             0128*  
0430CB             0129*  ; set PRT timer
0430CB             0130*  prt_set:
0430CB 21 00 00 00 0131*      ld hl,0
0430CF 22 19 31 04 0132*      ld (prt_irq_counter),hl
0430D3 2A 54 30 04 0133*      ld hl,(prt_reload)
0430D7 ED 29 84    0134*      out0 ($84),l
0430DA ED 21 85    0135*  	out0 ($85),h
0430DD             0136*  ; disable timer
0430DD 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
0430DF ED 39 83    0138*  	out0 ($83),a
0430E2             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
0430E2 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
0430E4 ED 39 83    0141*  	out0 ($83),a
0430E7 C9          0142*      ret
0430E8             0143*  
0430E8             0144*  ; ===============================================
0430E8             0145*  ; PRT Timer Interrupt Handling
0430E8             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.inc
0430E8             0147*  ; -----------------------------------------------
0430E8             0148*  prt_irq_init:
0430E8             0149*      ; set up interrupt vector table 2
0430E8 21 00 00 00 0150*  	ld hl,0
0430EC 3A 0C 01 00 0151*  	ld a,($10c)
0430F0 6F          0152*  	ld l,a
0430F1 3A 0D 01 00 0153*  	ld a,($10d)
0430F5 67          0154*  	ld h,a
0430F6             0155*  
0430F6             0156*  	; skip over CALL ($c3)
0430F6 23          0157*  	inc hl
0430F7             0158*  	; load address of jump into vector table 2 (in ram)
0430F7 ED 27       0159*  	ld hl,(hl)
0430F9             0160*  
0430F9             0161*  	; write CALL prt_irq_handler to vector table 2
0430F9 3E C3       0162*  	ld a,$c3
0430FB 77          0163*  	ld (hl),a
0430FC 23          0164*  	inc hl
0430FD 11 04 31 04 0165*  	ld de,prt_irq_handler
043101 ED 1F       0166*  	ld (hl),de
043103             0167*  
043103 C9          0168*      ret
043104             0169*  
043104             0170*  prt_irq_handler:
043104 F3          0171*  	di
043105 F5          0172*  	push af
043106 E5          0173*      push hl
043107 ED 38 83    0174*  	in0 a,($83)
04310A 2A 19 31 04 0175*  	ld hl,(prt_irq_counter)
04310E 23          0176*  	inc hl
04310F 22 19 31 04 0177*  	ld (prt_irq_counter),hl
043113 E1          0178*      pop hl
043114 F1          0179*  	pop af
043115 FB          0180*  	ei
043116 5B ED 4D    0181*  	reti.l
043119             0182*  
043119             0183*  prt_irq_counter:
043119 00 00 00    0184*  	.dl 0
04311C             0185*  prt_irq_counter_saved:
04311C 00 00 00    0186*      .dl 0
04311F             0187*  
04311F             0188*  prt_loop_reset:
04311F E5          0189*      push hl
043120 21 00 00 00 0190*  	ld hl,0
043124 22 19 31 04 0191*  	ld (prt_irq_counter),hl
043128 22 8A 31 04 0192*      ld (prt_loop_counter),hl
04312C 22 8D 31 04 0193*      ld (prt_loops),hl
043130 CD CB 30 04 0194*      call prt_set
043134 E1          0195*      pop hl
043135 C9          0196*      ret
043136             0197*  
043136             0198*  prt_loop_start:
043136 E5          0199*      push hl
043137 21 00 00 00 0200*  	ld hl,0
04313B 22 19 31 04 0201*  	ld (prt_irq_counter),hl
04313F E1          0202*      pop hl
043140 C9          0203*      ret
043141             0204*  
043141             0205*  prt_loop_stop:
043141 E5          0206*      push hl
043142 D5          0207*      push de
043143 2A 19 31 04 0208*      ld hl,(prt_irq_counter)
043147 ED 5B 8A 31 0209*      ld de,(prt_loop_counter)
       04          
04314C 19          0210*      add hl,de
04314D 22 8A 31 04 0211*      ld (prt_loop_counter),hl
043151 21 00 00 00 0212*      ld hl,0
043155 22 19 31 04 0213*      ld (prt_irq_counter),hl
043159 2A 8D 31 04 0214*      ld hl,(prt_loops)
04315D 23          0215*      inc hl
04315E 22 8D 31 04 0216*      ld (prt_loops),hl
043162 D1          0217*      pop de
043163 E1          0218*      pop hl
043164 C9          0219*      ret
043165             0220*  
043165             0221*  ; inputs: bc = y,x text coordinates to print
043165             0222*  prt_loop_print:
043165 F5          0223*      push af
043166 E5          0224*      push hl
043167 C5          0225*      push bc
043168 D5          0226*      push de
043169 DD E5       0227*      push ix
04316B FD E5       0228*      push iy
04316D CD 4D 20 04 0229*      call vdu_move_cursor
043171             0230*  
043171 2A 8A 31 04 0231*      ld hl,(prt_loop_counter)
043175 CD 6E 25 04 0232*      call printDec
043179             0233*  
043179 2A 8D 31 04 0234*      ld hl,(prt_loops)
04317D CD 6E 25 04 0235*      call printDec
043181             0236*  
043181 FD E1       0237*      pop iy
043183 DD E1       0238*      pop ix
043185 D1          0239*      pop de
043186 C1          0240*      pop bc
043187 E1          0241*      pop hl
043188 F1          0242*      pop af
043189 C9          0243*      ret
04318A             0244*  
04318A             0245*  prt_loop_counter:
04318A 00 00 00    0246*      .dl 0
04318D             0247*  prt_loops:
04318D 00 00 00    0248*      .dl 0
043190             0249*  
043190             0250*  ; ===============================================
043190             0251*  ; Timer functions
043190             0252*  ; -----------------------------------------------
043190             0253*  ; set a countdown timer
043190             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
043190             0255*  ; returns: hl = current time
043190             0256*  tmr_set:
043190 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
043193             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
043193 3E 08       0001*M 			LD	A, function
043195 5B CF       0002*M 			RST.LIL	08h
043197 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04319A FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04319D C9          0261*      ret
04319E             0262*  
04319E             0263*  ; gets time remaining on a countdown timer
04319E             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04319E             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04319E             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04319E             0267*  tmr_get:
04319E             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04319E 3E 08       0001*M 			LD	A, function
0431A0 5B CF       0002*M 			RST.LIL	08h
0431A2 DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
0431A5 FD 27 00    0270*      ld hl,(iy+0)            ; get start time
0431A8 AF          0271*      xor a                   ; clear carry
0431A9 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0431AB FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
0431AE AF          0274*      xor a                   ; clear carry
0431AF ED 5A       0275*      adc hl,de               ; hl = time remaining
0431B1             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0431B1 C9          0277*      ret
0431B2             0278*  
0431B2             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
0431B8             0280*  
0431B8 00 00 00    0281*  timestamp_now: dl 0
0431BB 00 00 00    0282*  timestamp_old: dl 0
0431BE 00 00 00    0283*  timestamp_chg: dl 0
0431C1             0284*  
0431C1             0285*  ; update the global timestamp from the system clock
0431C1             0286*  ; inputs: none
0431C1             0287*  ; returns: hl = time elapsed in 1/120ths of a second
0431C1             0288*  ;          de = current time
0431C1             0289*  ;          ix = pointer to syvars table
0431C1             0290*  ; destroys: af,hl,de,ix
0431C1             0291*  timestamp_tick:
0431C1 ED 5B B8 31 0292*      ld de,(timestamp_now)   ; get previous time
       04          
0431C6 ED 53 BB 31 0293*      ld (timestamp_old),de   ; save previous time
       04          
0431CB             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
0431CB 3E 08       0001*M 			LD	A, function
0431CD 5B CF       0002*M 			RST.LIL	08h
0431CF DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
0431D2 22 B8 31 04 0296*      ld (timestamp_now),hl   ; save current time
0431D6 AF          0297*      xor a                   ; clear carry
0431D7 ED 52       0298*      sbc hl,de               ; hl = time elapsed
0431D9 22 BE 31 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
0431DD C9          0300*      ret
0431DE             0301*  
0431DE             0302*  ; set a countdown timer
0431DE             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0431DE             0304*  ; requires: timestamp_tick to be called at least once before this function
0431DE             0305*  ; returns: hl = current time
0431DE             0306*  ; destroys: hl
0431DE             0307*  timestamp_tmr_set:
0431DE FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
0431E1 2A B8 31 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
0431E5 FD 2F 00    0310*      ld (iy+0),hl            ; set start time
0431E8 C9          0311*      ret
0431E9             0312*  
0431E9             0313*  ; gets time remaining on a countdown timer following the global timestamp
0431E9             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
0431E9             0315*  ; requires: timestamp_tick to be called at least once before this function
0431E9             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
0431E9             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
0431E9             0318*  ; destroys: af,hl,de
0431E9             0319*  timestamp_tmr_get:
0431E9 ED 5B B8 31 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
0431EE FD 27 00    0321*      ld hl,(iy+0)            ; get start time
0431F1 AF          0322*      xor a                   ; clear carry
0431F2 ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
0431F4 FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
0431F7 AF          0325*      xor a                   ; clear carry
0431F8 ED 5A       0326*      adc hl,de               ; hl = time remaining
0431FA             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
0431FA C9          0328*      ret
0431FB             0329*  
0431FB             0330*  ; set a stopwatch
0431FB             0331*  ; returns: hl = start time
0431FB             0332*  ; destroys: hl,ix
0431FB             0333*  stopwatch_set:
0431FB             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
0431FB 3E 08       0001*M 			LD	A, function
0431FD 5B CF       0002*M 			RST.LIL	08h
0431FF DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
043202 22 17 32 04 0336*      ld (stopwatch_started),hl            ; set start time
043206 C9          0337*      ret
043207             0338*  
043207             0339*  ; gets time elapsed on a stopwatch
043207             0340*  ; returns: hl = time elapsed in 1/120ths of a second
043207             0341*  ; destroys: af,hl,de,ix
043207             0342*  stopwatch_get:
043207             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
043207 3E 08       0001*M 			LD	A, function
043209 5B CF       0002*M 			RST.LIL	08h
04320B DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04320E ED 5B 17 32 0345*      ld de,(stopwatch_started)            ; get start time
       04          
043213 AF          0346*      xor a                   ; clear carry
043214 ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
043216 C9          0348*      ret
043217             0349*  
043217             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04321A             0351*  
04321A             0352*  ; ------------------
04321A             0353*  ; delay routine
04321A             0354*  ; Author: Richard Turrnidge
04321A             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.inc
04321A             0356*  ; routine waits a fixed time,then returns
04321A             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04321A             0358*  ; eg. ld A,00000100b
04321A             0359*  
04321A             0360*  multiPurposeDelay:
04321A F5          0361*      push af
04321B C5          0362*      push bc
04321C DD E5       0363*      push ix
04321E 47          0364*      ld b,a
04321F 3E 08       0365*      ld a,$08
043221 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
043223             0367*  
043223             0368*  waitLoop:
043223             0369*  
043223 DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
043226             0371*  
043226             0372*                                  ;   we check if bit set is same as last time we checked.
043226             0373*                                  ;   bit 0 - don't use
043226             0374*                                  ;   bit 1 - changes 64 times per second
043226             0375*                                  ;   bit 2 - changes 32 times per second
043226             0376*                                  ;   bit 3 - changes 16 times per second
043226             0377*  
043226             0378*                                  ;   bit 4 - changes 8 times per second
043226             0379*                                  ;   bit 5 - changes 4 times per second
043226             0380*                                  ;   bit 6 - changes 2 times per second
043226             0381*                                  ;   bit 7 - changes 1 times per second
043226 A0          0382*      and b
043227 4F          0383*      ld c,a
043228 3A 39 32 04 0384*      ld a,(oldTimeStamp)
04322C B9          0385*      cp c                        ; is A same as last value?
04322D 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04322F 79          0387*      ld a,c
043230 32 39 32 04 0388*      ld (oldTimeStamp),a        ; set new value
043234             0389*  
043234 DD E1       0390*      pop ix
043236 C1          0391*      pop bc
043237 F1          0392*      pop af
043238 C9          0393*      ret
043239             0394*  
043239 00          0395*  oldTimeStamp:   .db 00h
04323A             0030   	include "src/asm/vdu_wolf3d.inc"
04323A             0001*  ; global constants and variables
04323A             0002*  sid: equ 0x1000 ; scene id is a 16-bit bufferID holding the wolf3d control structure
04323A             0003*  mid: equ 1 ; model id is a 16-bit unsigned integer used by wolf3d internally
04323A             0004*  oid: equ 1 ; object id is a 16-bit unsigned integer used by wolf3d internally
04323A             0005*  vdu_map_id: equ 1 ; map id is a 16-bit unsigned integer used by wolf3d internally
04323A             0006*  
04323A             0007*  obj_scale: equ 256 * 10
04323A             0008*  objbmid: equ 0x1001
04323A             0009*  tgtbmid: equ 0x1002
04323A             0010*  
04323A             0011*  cstw: equ 240 ; 256
04323A             0012*  csth: equ 160 ; 128
04323A             0013*  cstx: equ 40  ; 32
04323A             0014*  csty: equ 32  ; 20
04323A             0015*  
04323A             0016*  camd: equ 32*1 ; 32767/256 * bar
04323A 00 00 00    0017*  camx: dl  0*camd
04323D 00 00 00    0018*  camy: dl  0*camd
043240 00 00 00    0019*  camz: dl  0*camd
043243             0020*  
043243 00 00 00    0021*  camdx: dl 0x000000
043246 00 00 00    0022*  camdy: dl 0x000000
043249 00 00 00    0023*  camdz: dl 0x000000
04324C             0024*  
04324C             0025*  camdr: equ 91*5 ; 32767/360*foo
04324C 00 00 00    0026*  camrx: dl 0x000000
04324F 00 00 00    0027*  camry: dl 0x000000
043252 00 00 00    0028*  camrz: dl 0x000000
043255             0029*  
043255 00 00 00    0030*  camdrx: dl 0x000000
043258 00 00 00    0031*  camdry: dl 0x000000
04325B 00 00 00    0032*  camdrz: dl 0x000000
04325E             0033*  
04325E             0034*  objdr: equ 91*5 ; 32767/360*foo
04325E 00 00 00    0035*  objdrx: dl 0
043261 00 00 00    0036*  objdry: dl 0
043264 00 00 00    0037*  objdrz: dl 0
043267             0038*  
043267 00 00 00    0039*  objrx: dl 0
04326A 00 00 00    0040*  objry: dl 0
04326D 00 00 00    0041*  objrz: dl 0
043270             0042*  
043270             0043*  objd: equ 32*1 ; 32767/256 * bar
043270 00 00 00    0044*  objx: dl 0*objd
043273 00 00 00    0045*  objy: dl 0 ; -42 ; -1/3*objd
043276 40 FC FF    0046*  objz: dl -30*objd
043279             0047*  
043279 00 00 00    0048*  objdx: dl 0x000000
04327C 00 00 00    0049*  objdy: dl 0x000000
04327F 00 00 00    0050*  objdz: dl 0x000000
043282             0051*  
043282             0052*  filetype: equ 0 ; rgba8
043282             0053*  
043282 00          0054*  dithering_type: db 0x00 ; 0=none, 1=bayer ordered matrix, 2=floyd-steinberg
043283             0055*  
043283             0056*  ; create wolf control structure
043283             0057*      MACRO CCS SID, SCENE_WIDTH, SCENE_HEIGHT
043283             0058*      ld hl,@beg
043283             0059*      ld bc,@end-@beg
043283             0060*      rst.lil $18
043283             0061*      jp @end
043283             0062*  @beg:
043283             0063*  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
043283             0064*      db 23,0,$A0
043283             0065*      dw SID
043283             0066*      db $49,0
043283             0067*      dw SCENE_WIDTH
043283             0068*      dw SCENE_HEIGHT
043283             0069*  @end:
043283             0070*      ENDMACRO
043283             0071*  
043283             0072*  ; DEFINE MESH VERTICES
043283             0073*      MACRO SV SID, MID, VERTICES, VERTICES_N
043283             0074*      ld hl,@beg
043283             0075*      ld bc,@end-@beg
043283             0076*      rst.lil $18
043283             0077*      jp @end
043283             0078*  @beg:
043283             0079*  ;   VDU 23,0, &A0, sid%; &49, 1, mid%; VERTICES%; Define Mesh Vertices
043283             0080*      db 23,0,$A0
043283             0081*      dw SID
043283             0082*      db $49,1
043283             0083*      dw MID, VERTICES_N
043283             0084*  @end:
043283             0085*      ld hl,VERTICES
043283             0086*      ld bc,VERTICES_N*6 ; 3 coordinates per vertex, 2 bytes per coordinate
043283             0087*      rst.lil $18
043283             0088*      ENDMACRO
043283             0089*  
043283             0090*  ; DEFINE MESH VERTEX INDICES
043283             0091*      MACRO SMVI SID, MID, VERTEX_INDICES, INDICES_N
043283             0092*      ld hl,@beg
043283             0093*      ld bc,@end-@beg
043283             0094*      rst.lil $18
043283             0095*      jp @end
043283             0096*  @beg:
043283             0097*  ;   VDU 23,0, &A0, sid%; &49, 2, mid%; model_indices%; Set Mesh Vertex indices
043283             0098*      db 23,0,$A0
043283             0099*      dw SID
043283             0100*      db $49,2
043283             0101*      dw MID, INDICES_N
043283             0102*  @end:
043283             0103*      ld hl,VERTEX_INDICES
043283             0104*      ld bc,INDICES_N*2 ; 2 bytes per index
043283             0105*      rst.lil $18
043283             0106*      ENDMACRO
043283             0107*  
043283             0108*  ; DEFINE MESH TEXTURE COORDINATES
043283             0109*      MACRO STC SID, MID, UVS, UVS_N
043283             0110*      ld hl,@beg
043283             0111*      ld bc,@end-@beg
043283             0112*      rst.lil $18
043283             0113*      jp @end
043283             0114*  @beg:
043283             0115*  ;   VDU 23, 0, &A0, sid; &49, 3, mid; n; u0; v0; ... :  Define Mesh Texture Coordinates
043283             0116*      db 23,0,$A0
043283             0117*      dw SID
043283             0118*      db $49,3
043283             0119*      dw MID, UVS_N
043283             0120*  @end:
043283             0121*      ld hl,UVS
043283             0122*      ld bc,UVS_N*4 ; 2 coordinates per uv, 2 bytes per coordinate
043283             0123*      rst.lil $18
043283             0124*      ENDMACRO
043283             0125*  
043283             0126*  ; SET MESH TEXTURE COORDINATE INDEXES
043283             0127*      MACRO STCI SID, MID, UV_INDICES, INDICES_N
043283             0128*      ld hl,@beg
043283             0129*      ld bc,@end-@beg
043283             0130*      rst.lil $18
043283             0131*      jp @end
043283             0132*  @beg:
043283             0133*  ;   VDU 23, 0, &A0, sid; &49, 4, mid; n; i0; ... :  Set Texture Coordinate Indexes
043283             0134*      db 23,0,$A0
043283             0135*      dw SID
043283             0136*      db $49,4
043283             0137*      dw MID, INDICES_N
043283             0138*  @end:
043283             0139*      ld hl,UV_INDICES
043283             0140*      ld bc,INDICES_N*2 ; 2 bytes per index
043283             0141*      rst.lil $18
043283             0142*      ENDMACRO
043283             0143*  
043283             0144*  ; DEFINE MESH NORMALS
043283             0145*      MACRO SN SID, MID, NORMALS, NORMALS_N
043283             0146*      ld hl,@beg
043283             0147*      ld bc,@end-@beg
043283             0148*      rst.lil $18
043283             0149*      jp @end
043283             0150*  @beg:
043283             0151*  ;   VDU 23, 0, &A0, sid; &49, 129, mid; n; x0; y0; z0; ... :  Define Mesh Normals
043283             0152*      db 23,0,$A0
043283             0153*      dw SID
043283             0154*      db $49,129
043283             0155*      dw MID, NORMALS_N
043283             0156*  @end:
043283             0157*      ld hl,NORMALS
043283             0158*      ld bc,NORMALS_N*6 ; 3 coordinates per normal, 2 bytes per coordinate
043283             0159*      rst.lil $18
043283             0160*      ENDMACRO
043283             0161*  
043283             0162*  ; SET MESH NORMAL INDEXES
043283             0163*      MACRO SMNI SID, MID, NORMAL_INDICES, INDICES_N
043283             0164*      ld hl,@beg
043283             0165*      ld bc,@end-@beg
043283             0166*      rst.lil $18
043283             0167*      jp @end
043283             0168*  @beg:
043283             0169*  ;   VDU 23, 0, &A0, sid; &49, 130, mid; n; i0; ... :  Set Mesh Normal Indexes
043283             0170*      db 23,0,$A0
043283             0171*      dw SID
043283             0172*      db $49,130
043283             0173*      dw MID, INDICES_N
043283             0174*  @end:
043283             0175*      ld hl,NORMAL_INDICES
043283             0176*      ld bc,INDICES_N*2 ; 2 bytes per index
043283             0177*      rst.lil $18
043283             0178*      ENDMACRO
043283             0179*  
043283             0180*  ; CREATE OBJECT
043283             0181*      MACRO CO SID, OID, MID, BMID
043283             0182*      ld hl,@beg
043283             0183*      ld bc,@end-@beg
043283             0184*      rst.lil $18
043283             0185*      jp @end
043283             0186*  @beg:
043283             0187*  ;   VDU 23, 0, &A0, sid; &49, 5, oid; mid; bmid; :  Create Object
043283             0188*      db 23,0,$A0
043283             0189*      dw SID
043283             0190*      db $49,5
043283             0191*      dw OID
043283             0192*      dw MID
043283             0193*      dw BMID
043283             0194*  @end:
043283             0195*      ENDMACRO
043283             0196*  
043283             0197*  ; SET OBJECT XYZ SCALE FACTORS
043283             0198*      MACRO SO SID, OID, SCALEX, SCALEY, SCALEZ
043283             0199*      ld hl,@beg
043283             0200*      ld bc,@end-@beg
043283             0201*      rst.lil $18
043283             0202*      jp @end
043283             0203*  @beg:
043283             0204*  ;   VDU 23, 0, &A0, sid%; &49, 9, oid%; scale; scale; scale; Set Object XYZ Scale Factors
043283             0205*      db 23,0,$A0
043283             0206*      dw SID
043283             0207*      db $49,9
043283             0208*      dw OID
043283             0209*      dw SCALEX
043283             0210*      dw SCALEY
043283             0211*      dw SCALEZ
043283             0212*  @end:
043283             0213*      ENDMACRO
043283             0214*  
043283             0215*  ; CREATE RENDER TARGET BITMAP
043283             0216*      MACRO CTB BMID, SCENE_WIDTH, SCENE_HEIGHT
043283             0217*      ld hl,@beg
043283             0218*      ld bc,@end-@beg
043283             0219*      rst.lil $18
043283             0220*      jp @end
043283             0221*  @beg:
043283             0222*  ;   VDU 23, 27, &20, bmid2% Select output bitmap
043283             0223*      db 23,27,$20
043283             0224*      dw BMID
043283             0225*  ;   VDU 23, 27, 2, cstw%; csth%; &0000; &00C0; Create solid color bitmap
043283             0226*      db 23,27,2
043283             0227*      dw SCENE_WIDTH
043283             0228*      dw SCENE_HEIGHT
043283             0229*      dw $0000
043283             0230*      dw $00C0
043283             0231*  @end:
043283             0232*      ENDMACRO
043283             0233*  
043283             0234*  ; RENDER TO TARGET BITMAP
043283             0235*      MACRO RENDBMP SID, BMID
043283             0236*      ld hl,@beg
043283             0237*      ld bc,@end-@beg
043283             0238*      rst.lil $18
043283             0239*      jp @end
043283             0240*  @beg:
043283             0241*  ;  1040 VDU 23, 0, &A0, sid%; &49, 38, bmid%; Render To Bitmap
043283             0242*      db 23, 0, $A0
043283             0243*      dw SID
043283             0244*      db $49, 38
043283             0245*      dw BMID
043283             0246*  @end:
043283             0247*      ENDMACRO
043283             0248*  
043283             0249*  ; DISPLAY RENDER TARGET BITMAP
043283             0250*      MACRO DISPBMP BMID, X, Y
043283             0251*      ld hl,@beg
043283             0252*      ld bc,@end-@beg
043283             0253*      rst.lil $18
043283             0254*      jp @end
043283             0255*  @beg:
043283             0256*  ;   VDU 23, 27, &20, bmid% Select output bitmap
043283             0257*      db 23,27,$20
043283             0258*      dw BMID
043283             0259*  ;   VDU 23, 27, 3, 0; 0; Display output bitmap
043283             0260*      db 23,27,3
043283             0261*      dw X,Y
043283             0262*  @end:
043283             0263*      ENDMACRO
043283             0264*  
043283             0265*  ; set wolf camera distance
043283             0266*  ; inputs: bc distx, de disty, iy distz
043283             0267*  scdabs:
043283 ED 43 A4 32 0268*      ld (@x),bc
       04          
043288 ED 53 A6 32 0269*      ld (@y),de
       04          
04328D FD 22 A8 32 0270*      ld (@z),iy
       04          
043292 21 9D 32 04 0271*      ld hl,@beg
043296 01 0D 00 00 0272*      ld bc,@end-@beg
04329A 5B DF       0273*      rst.lil $18
04329C C9          0274*      ret
04329D             0275*  @beg:
04329D             0276*  ;   360 VDU 23,0, &A0, sid%; &49, 25, distx; disty; distz; Set Camera XYZ Translation Distances
04329D 17 00 A0    0277*      db 23,0,$A0
0432A0 00 10       0278*      dw sid
0432A2 49 19       0279*      db $49,25
0432A4 00 00       0280*  @x: dw 0x0000
0432A6 00 00       0281*  @y: dw 0x0000
0432A8 00 00       0282*  @z: dw 0x0000
0432AA 00          0283*  @end: db 0x00 ; padding
0432AB             0284*  
0432AB             0285*  ; set wolf camera rotation angkes
0432AB             0286*  ; inputs: bc anglex, de angley, iy anglez
0432AB             0287*  scrabs:
0432AB ED 43 CC 32 0288*      ld (@rx),bc
       04          
0432B0 ED 53 CE 32 0289*      ld (@ry),de
       04          
0432B5 FD 22 D0 32 0290*      ld (@rz),iy
       04          
0432BA 21 C5 32 04 0291*      ld hl,@beg
0432BE 01 0D 00 00 0292*      ld bc,@end-@beg
0432C2 5B DF       0293*      rst.lil $18
0432C4 C9          0294*      ret
0432C5             0295*  @beg:
0432C5             0296*  ; VDU 23, 0, &A0, sid; &49, 21, anglex; angley; anglez; : Set Camera XYZ Rotation Angles
0432C5 17 00 A0    0297*          db 23,0,$A0
0432C8 00 10       0298*          dw sid
0432CA 49 12       0299*          db $49,18
0432CC 00 00       0300*  @rx:    dw 0x0000
0432CE 00 00       0301*  @ry:    dw 0x0000
0432D0 00 00       0302*  @rz:    dw 0x0000
0432D2 00          0303*  @end:   db 0x00 ; padding
0432D3             0304*  
0432D3             0305*  ; set wolf object distance
0432D3             0306*  ; inputs: hl oid, bc distx, de disty, iy distz
0432D3             0307*  sodabs:
0432D3 22 F8 32 04 0308*      ld (@oid),hl
0432D7 ED 43 FA 32 0309*      ld (@x),bc
       04          
0432DC ED 53 FC 32 0310*      ld (@y),de
       04          
0432E1 FD 22 FE 32 0311*      ld (@z),iy
       04          
0432E6 21 F1 32 04 0312*      ld hl,@beg
0432EA 01 0F 00 00 0313*      ld bc,@end-@beg
0432EE 5B DF       0314*      rst.lil $18
0432F0 C9          0315*      ret
0432F1             0316*  @beg:
0432F1             0317*  ; VDU 23, 0, &A0, sid; &49, 17, oid; distx; disty; distz; : Set Object XYZ Translation Distances
0432F1 17 00 A0    0318*          db 23, 0, $A0
0432F4 00 10       0319*          dw sid
0432F6 49 11       0320*          db $49, 17
0432F8 00 00       0321*  @oid:   dw 0
0432FA 00 00       0322*  @x:     dw 0
0432FC 00 00       0323*  @y:     dw 0
0432FE 00 00       0324*  @z:     dw 0
043300 00          0325*  @end:   db 0 ; padding
043301             0326*  
043301             0327*  ; set wolf object rotation angkes
043301             0328*  ; inputs: hl oid, bc anglex, de angley, iy anglez
043301             0329*  sorabs:
043301 22 26 33 04 0330*      ld (@oid),hl
043305 ED 43 28 33 0331*      ld (@rx),bc
       04          
04330A ED 53 2A 33 0332*      ld (@ry),de
       04          
04330F FD 22 2C 33 0333*      ld (@rz),iy
       04          
043314 21 1F 33 04 0334*      ld hl,@beg
043318 01 0F 00 00 0335*      ld bc,@end-@beg
04331C 5B DF       0336*      rst.lil $18
04331E C9          0337*      ret
04331F             0338*  @beg:
04331F             0339*  ;  1120 VDU 23, 0, &A0, sid%; &49, 13, oid%; rx; ry; rz; Set Object XYZ Rotation Angles
04331F 17 00 A0    0340*          db 23, 0, $A0
043322 00 10       0341*          dw sid
043324 49 0D       0342*          db $49, 13
043326 00 00       0343*  @oid:   dw 0
043328 00 00       0344*  @rx:    dw 0
04332A 00 00       0345*  @ry:    dw 0
04332C 00 00       0346*  @rz:    dw 0
04332E 00          0347*  @end:   db 0 ; padding
04332F             0348*  
04332F             0349*  ; set wolf camera distance relative
04332F             0350*  ; inputs: bc distx, de disty, iy distz
04332F             0351*  scdrel:
04332F ED 43 50 33 0352*      ld (@x),bc
       04          
043334 ED 53 52 33 0353*      ld (@y),de
       04          
043339 FD 22 54 33 0354*      ld (@z),iy
       04          
04333E 21 49 33 04 0355*      ld hl,@beg
043342 01 0D 00 00 0356*      ld bc,@end-@beg
043346 5B DF       0357*      rst.lil $18
043348 C9          0358*      ret
043349             0359*  @beg:
043349             0360*  ;   360 VDU 23,0, &A0, sid%; &49, 153, distx; disty; distz; Set Camera XYZ Translation Distances Relative
043349 17 00 A0    0361*      db 23,0,$A0
04334C 00 10       0362*      dw sid
04334E 49 99       0363*      db $49,153
043350 00 00       0364*  @x: dw 0x0000
043352 00 00       0365*  @y: dw 0x0000
043354 00 00       0366*  @z: dw 0x0000
043356 00          0367*  @end: db 0x00 ; padding
043357             0368*  
043357             0369*  ; set wolf camera rotation angkes relative
043357             0370*  ; inputs: bc anglex, de angley, iy anglez
043357             0371*  scrrel:
043357 ED 43 78 33 0372*      ld (@rx),bc
       04          
04335C ED 53 7A 33 0373*      ld (@ry),de
       04          
043361 FD 22 7C 33 0374*      ld (@rz),iy
       04          
043366 21 71 33 04 0375*      ld hl,@beg
04336A 01 0D 00 00 0376*      ld bc,@end-@beg
04336E 5B DF       0377*      rst.lil $18
043370 C9          0378*      ret
043371             0379*  @beg:
043371             0380*  ; VDU 23, 0, &A0, sid; &49, 149, anglex; angley; anglez; : Set Camera XYZ Rotation Angles Relative
043371 17 00 A0    0381*          db 23,0,$A0
043374 00 10       0382*          dw sid
043376 49 95       0383*          db $49,149
043378 00 00       0384*  @rx:    dw 0x0000
04337A 00 00       0385*  @ry:    dw 0x0000
04337C 00 00       0386*  @rz:    dw 0x0000
04337E 00          0387*  @end:   db 0x00 ; padding
04337F             0388*  
04337F             0389*  ; VDU 23, 0, &A0, sid; &49, 42, oid; : Rotate Camera Locally to track a specified object
04337F             0390*  ; inputs: hl oid
04337F             0391*  cto:
04337F 22 95 33 04 0392*      ld (@oid),hl
043383 21 8E 33 04 0393*      ld hl,@beg
043387 01 09 00 00 0394*      ld bc,@end-@beg
04338B 5B DF       0395*      rst.lil $18
04338D C9          0396*      ret
04338E             0397*  @beg:
04338E 17 00 A0    0398*      db 23, 0, $A0
043391 00 10       0399*      dw sid
043393 49 2A       0400*      db $49, 42
043395 00 00       0401*  @oid:   dw 0
043397 00          0402*  @end:   db 0 ; padding
043398             0403*  
043398             0404*  ; set wolf object distance
043398             0405*  ; inputs: hl oid, bc distx, de disty, iy distz
043398             0406*  sodrel:
043398 22 BD 33 04 0407*      ld (@oid),hl
04339C ED 43 BF 33 0408*      ld (@x),bc
       04          
0433A1 ED 53 C1 33 0409*      ld (@y),de
       04          
0433A6 FD 22 C3 33 0410*      ld (@z),iy
       04          
0433AB 21 B6 33 04 0411*      ld hl,@beg
0433AF 01 0F 00 00 0412*      ld bc,@end-@beg
0433B3 5B DF       0413*      rst.lil $18
0433B5 C9          0414*      ret
0433B6             0415*  @beg:
0433B6             0416*  ; VDU 23, 0, &A0, sid; &49, 145, oid; distx; disty; distz; : Set Object XYZ Translation Distances Relative
0433B6 17 00 A0    0417*          db 23, 0, $A0
0433B9 00 10       0418*          dw sid
0433BB 49 91       0419*          db $49, 145
0433BD 00 00       0420*  @oid:   dw 0
0433BF 00 00       0421*  @x:     dw 0
0433C1 00 00       0422*  @y:     dw 0
0433C3 00 00       0423*  @z:     dw 0
0433C5 00          0424*  @end:   db 0 ; padding
0433C6             0425*  
0433C6             0426*  ; set wolf object rotation angkes
0433C6             0427*  ; inputs: hl oid, bc anglex, de angley, iy anglez
0433C6             0428*  sorrel:
0433C6 22 EB 33 04 0429*      ld (@oid),hl
0433CA ED 43 ED 33 0430*      ld (@rx),bc
       04          
0433CF ED 53 EF 33 0431*      ld (@ry),de
       04          
0433D4 FD 22 F1 33 0432*      ld (@rz),iy
       04          
0433D9 21 E4 33 04 0433*      ld hl,@beg
0433DD 01 0F 00 00 0434*      ld bc,@end-@beg
0433E1 5B DF       0435*      rst.lil $18
0433E3 C9          0436*      ret
0433E4             0437*  @beg:
0433E4             0438*  ;  1120 VDU 23, 0, &A0, sid%; &49, 141, oid%; rx; ry; rz; Set Object XYZ Rotation Angles Relative
0433E4 17 00 A0    0439*          db 23, 0, $A0
0433E7 00 10       0440*          dw sid
0433E9 49 8D       0441*          db $49, 141
0433EB 00 00       0442*  @oid:   dw 0
0433ED 00 00       0443*  @rx:    dw 0
0433EF 00 00       0444*  @ry:    dw 0
0433F1 00 00       0445*  @rz:    dw 0
0433F3 00          0446*  @end:   db 0 ; padding
0433F4             0447*  
0433F4             0448*  cycle_dithering:
0433F4 3A 82 32 04 0449*      ld a,(dithering_type)
0433F8 3C          0450*      inc a
0433F9 FE 03       0451*      cp 3
0433FB 20 01       0452*      jr nz,@set
0433FD AF          0453*      xor a
0433FE             0454*  @set:
0433FE 32 82 32 04 0455*      ld (dithering_type),a
043402             0456*  ; fall through to vdu_set_dither
043402             0457*  
043402             0458*  ; set dithering type
043402             0459*  ; inputs: a = dithering type/optons
043402             0460*  ; dithering types bits 0-1: 00 none (default), 01 bayer ordered matrix, 10 floyd-steinberg
043402             0461*  vdu_set_dither:
043402             0462*  ; VDU 23, 0, &A0, sid; &49, 41, type
043402 32 18 34 04 0463*      ld (@dt),a
043406 21 11 34 04 0464*      ld hl,@beg
04340A 01 08 00 00 0465*      ld bc,@end-@beg
04340E 5B DF       0466*      rst.lil $18
043410 C9          0467*      ret
043411             0468*  @beg:
043411 17 00 A0    0469*          db 23,0,$A0
043414 00 10       0470*          dw sid
043416 49 29       0471*          db $49,41
043418 00          0472*  @dt:    db 0x00
043419             0473*  @end:
043419             0474*  
043419             0475*  move_object_abs:
043419 CD 35 25 04 0476*      call printNewLine
04341D             0477*  
04341D 2A 70 32 04 0478*      ld hl,(objx)
043421 ED 5B 79 32 0479*      ld de,(objdx)
       04          
043426 19          0480*      add hl,de
043427 22 73 34 04 0481*      ld (@x),hl
04342B 22 70 32 04 0482*      ld (objx),hl
04342F CD 6E 25 04 0483*      call printDec
043433             0484*  
043433 2A 73 32 04 0485*      ld hl,(objy)
043437 ED 5B 7C 32 0486*      ld de,(objdy)
       04          
04343C 19          0487*      add hl,de
04343D 22 75 34 04 0488*      ld (@y),hl
043441 22 73 32 04 0489*      ld (objy),hl
043445 CD 6E 25 04 0490*      call printDec
043449             0491*  
043449 2A 76 32 04 0492*      ld hl,(objz)
04344D ED 5B 7F 32 0493*      ld de,(objdz)
       04          
043452 19          0494*      add hl,de
043453 22 77 34 04 0495*      ld (@z),hl
043457 22 76 32 04 0496*      ld (objz),hl
04345B CD 6E 25 04 0497*      call printDec
04345F             0498*  
04345F 21 6A 34 04 0499*      ld hl,@beg
043463 01 0F 00 00 0500*      ld bc,@end-@beg
043467 5B DF       0501*      rst.lil $18
043469 C9          0502*      ret
04346A             0503*  @beg:
04346A             0504*  ; VDU 23, 0, &A0, sid; &49, 17, oid; distx; disty; distz; : Set Object XYZ Translation Distances
04346A 17 00 A0    0505*          db 23, 0, $A0
04346D 00 10       0506*          dw sid
04346F 49 11       0507*          db $49, 17
043471 01 00       0508*          dw oid
043473 00 00       0509*  @x:     dw 0
043475 00 00       0510*  @y:     dw 0
043477 00 00       0511*  @z:     dw 0
043479 00          0512*  @end:   db 0 ; padding
04347A             0513*  
04347A             0514*  rotate_object_abs:
04347A             0515*  ;  1080 objrx=objrx+objdrx: IF objrx>=pi2 THEN objrx=objrx-pi2
04347A 2A 67 32 04 0516*      ld hl,(objrx)
04347E ED 5B 5E 32 0517*      ld de,(objdrx)
       04          
043483 19          0518*      add hl,de
043484 22 D0 34 04 0519*      ld (@rx),hl
043488 22 67 32 04 0520*      ld (objrx),hl
04348C CD 6E 25 04 0521*      call printDec
043490             0522*  ;  1090 objry=objry+objdry: IF objry>=pi2 THEN objry=objry-pi2
043490 2A 6A 32 04 0523*      ld hl,(objry)
043494 ED 5B 61 32 0524*      ld de,(objdry)
       04          
043499 19          0525*      add hl,de
04349A 22 D2 34 04 0526*      ld (@ry),hl
04349E 22 6A 32 04 0527*      ld (objry),hl
0434A2 CD 6E 25 04 0528*      call printDec
0434A6             0529*  ;  1100 objrz=objrz+objdrz: IF objrz>=pi2 THEN objrz=objrz-pi2
0434A6 2A 6D 32 04 0530*      ld hl,(objrz)
0434AA ED 5B 64 32 0531*      ld de,(objdrz)
       04          
0434AF 19          0532*      add hl,de
0434B0 22 D4 34 04 0533*      ld (@rz),hl
0434B4 22 6D 32 04 0534*      ld (objrz),hl
0434B8 CD 6E 25 04 0535*      call printDec
0434BC             0536*  
0434BC 21 C7 34 04 0537*      ld hl,@beg
0434C0 01 0F 00 00 0538*      ld bc,@end-@beg
0434C4 5B DF       0539*      rst.lil $18
0434C6 C9          0540*      ret
0434C7             0541*  @beg:
0434C7             0542*  ;  1120 VDU 23, 0, &A0, sid%; &49, 13, oid%; rx; ry; rz; Set Object XYZ Rotation Angles
0434C7 17 00 A0    0543*          db 23, 0, $A0
0434CA 00 10       0544*          dw sid
0434CC 49 0D       0545*          db $49, 13
0434CE 01 00       0546*          dw oid
0434D0 00 00       0547*  @rx:    dw 0
0434D2 00 00       0548*  @ry:    dw 0
0434D4 00 00       0549*  @rz:    dw 0
0434D6 00          0550*  @end:   db 0 ; padding
0434D7             0551*  
0434D7             0552*  rotate_camera_abs:
0434D7 CD 35 25 04 0553*      call printNewLine
0434DB             0554*  
0434DB             0555*  ;  1080 camrx=camrx+camdrx: IF camrx>=pi2 THEN camrx=camrx-pi2
0434DB 2A 4C 32 04 0556*      ld hl,(camrx)
0434DF ED 5B 55 32 0557*      ld de,(camdrx)
       04          
0434E4 19          0558*      add hl,de
0434E5 22 2F 35 04 0559*      ld (@rx),hl
0434E9 22 4C 32 04 0560*      ld (camrx),hl
0434ED CD 6E 25 04 0561*      call printDec
0434F1             0562*  ;  1090 camry=camry+camdry: IF camry>=pi2 THEN camry=camry-pi2
0434F1 2A 4F 32 04 0563*      ld hl,(camry)
0434F5 ED 5B 58 32 0564*      ld de,(camdry)
       04          
0434FA 19          0565*      add hl,de
0434FB 22 31 35 04 0566*      ld (@ry),hl
0434FF 22 4F 32 04 0567*      ld (camry),hl
043503 CD 6E 25 04 0568*      call printDec
043507             0569*  ;  1100 camrz=camrz+camdrz: IF camrz>=pi2 THEN camrz=camrz-pi2
043507 2A 52 32 04 0570*      ld hl,(camrz)
04350B ED 5B 5B 32 0571*      ld de,(camdrz)
       04          
043510 19          0572*      add hl,de
043511 22 33 35 04 0573*      ld (@rz),hl
043515 22 52 32 04 0574*      ld (camrz),hl
043519 CD 6E 25 04 0575*      call printDec
04351D             0576*  
04351D 21 28 35 04 0577*      ld hl,@beg
043521 01 0D 00 00 0578*      ld bc,@end-@beg
043525 5B DF       0579*      rst.lil $18
043527 C9          0580*      ret
043528             0581*  @beg:
043528             0582*  ; VDU 23, 0, &A0, sid; &49, 21, anglex; angley; anglez; : Set Camera XYZ Rotation Angles
043528 17 00 A0    0583*          db 23, 0, $A0
04352B 00 10       0584*          dw sid
04352D 49 15       0585*          db $49, 21
04352F 00 00       0586*  @rx:    dw 0
043531 00 00       0587*  @ry:    dw 0
043533 00 00       0588*  @rz:    dw 0
043535 00          0589*  @end:   db 0 ; padding
043536             0590*  
043536             0591*  move_camera_abs:
043536 CD 35 25 04 0592*      call printNewLine
04353A             0593*  
04353A 2A 3A 32 04 0594*      ld hl,(camx)
04353E ED 5B 43 32 0595*      ld de,(camdx)
       04          
043543 19          0596*      add hl,de
043544 22 8E 35 04 0597*      ld (@x),hl
043548 22 3A 32 04 0598*      ld (camx),hl
04354C CD 6E 25 04 0599*      call printDec
043550             0600*  
043550 2A 3D 32 04 0601*      ld hl,(camy)
043554 ED 5B 46 32 0602*      ld de,(camdy)
       04          
043559 19          0603*      add hl,de
04355A 22 90 35 04 0604*      ld (@y),hl
04355E 22 3D 32 04 0605*      ld (camy),hl
043562 CD 6E 25 04 0606*      call printDec
043566             0607*  
043566 2A 40 32 04 0608*      ld hl,(camz)
04356A ED 5B 49 32 0609*      ld de,(camdz)
       04          
04356F 19          0610*      add hl,de
043570 22 92 35 04 0611*      ld (@z),hl
043574 22 40 32 04 0612*      ld (camz),hl
043578 CD 6E 25 04 0613*      call printDec
04357C             0614*  
04357C 21 87 35 04 0615*      ld hl,@beg
043580 01 0D 00 00 0616*      ld bc,@end-@beg
043584 5B DF       0617*      rst.lil $18
043586 C9          0618*      ret
043587             0619*  @beg:
043587             0620*  ;   VDU 23, 0, &A0, sid; &48, 25; distx; disty; distz :  Set Camera XYZ Translation Distances
043587 17 00 A0    0621*          db 23, 0, $A0
04358A 00 10       0622*          dw sid
04358C 49 19       0623*          db $49, 25
04358E 00 00       0624*  @x:     dw 0
043590 00 00       0625*  @y:     dw 0
043592 00 00       0626*  @z:     dw 0
043594 00          0627*  @end:   db 0 ; padding
043595             0628*  
043595             0629*  
043595             0630*  move_object_loc:
043595 CD 35 25 04 0631*      call printNewLine
043599             0632*  
043599 2A 70 32 04 0633*      ld hl,(objx)
04359D ED 5B 79 32 0634*      ld de,(objdx)
       04          
0435A2 19          0635*      add hl,de
0435A3 ED 53 F2 35 0636*      ld (@x),de
       04          
0435A8 22 70 32 04 0637*      ld (objx),hl
0435AC CD 6E 25 04 0638*      call printDec
0435B0             0639*  
0435B0 2A 73 32 04 0640*      ld hl,(objy)
0435B4 ED 5B 7C 32 0641*      ld de,(objdy)
       04          
0435B9 19          0642*      add hl,de
0435BA ED 53 F4 35 0643*      ld (@y),de
       04          
0435BF 22 73 32 04 0644*      ld (objy),hl
0435C3 CD 6E 25 04 0645*      call printDec
0435C7             0646*  
0435C7 2A 76 32 04 0647*      ld hl,(objz)
0435CB ED 5B 7F 32 0648*      ld de,(objdz)
       04          
0435D0 19          0649*      add hl,de
0435D1 ED 53 F6 35 0650*      ld (@z),de
       04          
0435D6 22 76 32 04 0651*      ld (objz),hl
0435DA CD 6E 25 04 0652*      call printDec
0435DE             0653*  
0435DE 21 E9 35 04 0654*      ld hl,@beg
0435E2 01 0F 00 00 0655*      ld bc,@end-@beg
0435E6 5B DF       0656*      rst.lil $18
0435E8 C9          0657*      ret
0435E9             0658*  @beg:
0435E9             0659*  ; VDU 23, 0, &A0, sid; &49, 145, oid; distx; disty; distz :  Set Object XYZ Translation Distances
0435E9 17 00 A0    0660*          db 23, 0, $A0
0435EC 00 10       0661*          dw sid
0435EE 49 91       0662*          db $49, 145
0435F0 01 00       0663*          dw oid
0435F2 00 00       0664*  @x:     dw 0
0435F4 00 00       0665*  @y:     dw 0
0435F6 00 00       0666*  @z:     dw 0
0435F8 00          0667*  @end:   db 0 ; padding
0435F9             0668*  
0435F9             0669*  rotate_object_loc:
0435F9             0670*  ;  1080 objrx=objrx+objdrx: IF objrx>=pi2 THEN objrx=objrx-pi2
0435F9 2A 67 32 04 0671*      ld hl,(objrx)
0435FD ED 5B 5E 32 0672*      ld de,(objdrx)
       04          
043602 19          0673*      add hl,de
043603 ED 53 52 36 0674*      ld (@rx),de
       04          
043608 22 67 32 04 0675*      ld (objrx),hl
04360C CD 6E 25 04 0676*      call printDec
043610             0677*  ;  1090 objry=objry+objdry: IF objry>=pi2 THEN objry=objry-pi2
043610 2A 6A 32 04 0678*      ld hl,(objry)
043614 ED 5B 61 32 0679*      ld de,(objdry)
       04          
043619 19          0680*      add hl,de
04361A ED 53 54 36 0681*      ld (@ry),de
       04          
04361F 22 6A 32 04 0682*      ld (objry),hl
043623 CD 6E 25 04 0683*      call printDec
043627             0684*  ;  1100 objrz=objrz+objdrz: IF objrz>=pi2 THEN objrz=objrz-pi2
043627 2A 6D 32 04 0685*      ld hl,(objrz)
04362B ED 5B 64 32 0686*      ld de,(objdrz)
       04          
043630 19          0687*      add hl,de
043631 ED 53 56 36 0688*      ld (@rz),de
       04          
043636 22 6D 32 04 0689*      ld (objrz),hl
04363A CD 6E 25 04 0690*      call printDec
04363E             0691*  
04363E 21 49 36 04 0692*      ld hl,@beg
043642 01 0F 00 00 0693*      ld bc,@end-@beg
043646 5B DF       0694*      rst.lil $18
043648 C9          0695*      ret
043649             0696*  @beg:
043649             0697*  ; VDU 23, 0, &A0, sid; &49, 141, oid; anglex; angley; anglez; :  Set Object XYZ Rotation Angles Local
043649 17 00 A0    0698*          db 23, 0, $A0
04364C 00 10       0699*          dw sid
04364E 49 8D       0700*          db $49, 141
043650 01 00       0701*          dw oid
043652 00 00       0702*  @rx:    dw 0
043654 00 00       0703*  @ry:    dw 0
043656 00 00       0704*  @rz:    dw 0
043658 00          0705*  @end:   db 0 ; padding
043659             0706*  
043659             0707*  rotate_camera_loc:
043659 CD 35 25 04 0708*      call printNewLine
04365D             0709*  
04365D 2A 4C 32 04 0710*      ld hl,(camrx)
043661 ED 5B 55 32 0711*      ld de,(camdrx)
       04          
043666 19          0712*      add hl,de
043667 ED 53 B4 36 0713*      ld (@rx),de
       04          
04366C 22 4C 32 04 0714*      ld (camrx),hl
043670 CD 6E 25 04 0715*      call printDec
043674             0716*  
043674 2A 4F 32 04 0717*      ld hl,(camry)
043678 ED 5B 58 32 0718*      ld de,(camdry)
       04          
04367D 19          0719*      add hl,de
04367E ED 53 B6 36 0720*      ld (@ry),de
       04          
043683 22 4F 32 04 0721*      ld (camry),hl
043687 CD 6E 25 04 0722*      call printDec
04368B             0723*  
04368B 2A 52 32 04 0724*      ld hl,(camrz)
04368F ED 5B 5B 32 0725*      ld de,(camdrz)
       04          
043694 19          0726*      add hl,de
043695 ED 53 B8 36 0727*      ld (@rz),de
       04          
04369A 22 52 32 04 0728*      ld (camrz),hl
04369E CD 6E 25 04 0729*      call printDec
0436A2             0730*  
0436A2 21 AD 36 04 0731*      ld hl,@beg
0436A6 01 0D 00 00 0732*      ld bc,@end-@beg
0436AA 5B DF       0733*      rst.lil $18
0436AC C9          0734*      ret
0436AD             0735*  @beg:
0436AD             0736*  ; VDU 23, 0, &A0, sid; &49, 149; anglex; angley; anglez; :  Set Camera XYZ Rotation Angles (Local)
0436AD 17 00 A0    0737*          db 23, 0, $A0
0436B0 00 10       0738*          dw sid
0436B2 49 95       0739*          db $49, 149
0436B4 00 00       0740*  @rx:    dw 0
0436B6 00 00       0741*  @ry:    dw 0
0436B8 00 00       0742*  @rz:    dw 0
0436BA 00          0743*  @end:   db 0 ; padding
0436BB             0744*  
0436BB             0745*  move_camera_loc:
0436BB CD 35 25 04 0746*      call printNewLine
0436BF             0747*  
0436BF 2A 3A 32 04 0748*      ld hl,(camx)
0436C3 ED 5B 43 32 0749*      ld de,(camdx)
       04          
0436C8 19          0750*      add hl,de
0436C9 ED 53 16 37 0751*      ld (@x),de
       04          
0436CE 22 3A 32 04 0752*      ld (camx),hl
0436D2 CD 6E 25 04 0753*      call printDec
0436D6             0754*  
0436D6 2A 3D 32 04 0755*      ld hl,(camy)
0436DA ED 5B 46 32 0756*      ld de,(camdy)
       04          
0436DF 19          0757*      add hl,de
0436E0 ED 53 18 37 0758*      ld (@y),de
       04          
0436E5 22 3D 32 04 0759*      ld (camy),hl
0436E9 CD 6E 25 04 0760*      call printDec
0436ED             0761*  
0436ED 2A 40 32 04 0762*      ld hl,(camz)
0436F1 ED 5B 49 32 0763*      ld de,(camdz)
       04          
0436F6 19          0764*      add hl,de
0436F7 ED 53 1A 37 0765*      ld (@z),de
       04          
0436FC 22 40 32 04 0766*      ld (camz),hl
043700 CD 6E 25 04 0767*      call printDec
043704             0768*  
043704 21 0F 37 04 0769*      ld hl,@beg
043708 01 0D 00 00 0770*      ld bc,@end-@beg
04370C 5B DF       0771*      rst.lil $18
04370E C9          0772*      ret
04370F             0773*  @beg:
04370F             0774*  ;   VDU 23, 0, &A0, sid; &49, 153, distx; disty; distz :  Set Camera XYZ Translation Distances (Local)
04370F 17 00 A0    0775*          db 23, 0, $A0
043712 00 10       0776*          dw sid
043714 49 99       0777*          db $49, 153
043716 00 00       0778*  @x:     dw 0
043718 00 00       0779*  @y:     dw 0
04371A 00 00       0780*  @z:     dw 0
04371C 00          0781*  @end:   db 0 ; padding
04371D             0782*  
04371D             0783*  ; VDU 23, 0, &A0, sid; &49, 128, 0, vdu_map_id; width; height; <cells> :  Load Wolf3D Map Cells
04371D             0784*  ; inputs: map data loaded to cell_status
04371D             0785*  vdu_map_init:
04371D 21 2B 37 04 0786*      ld hl,@beg
043721 01 0E 00 00 0787*      ld bc,@end-@beg
043725 5B DF       0788*      rst.lil $18
043727 C3 39 37 04 0789*      jp @end
04372B             0790*  @beg:
04372B 17 00 A0    0791*      db 23,0,$A0
04372E 00 10       0792*      dw sid
043730 49 80 00    0793*      db $49,128,0
043733 01 00       0794*      dw vdu_map_id
043735 10 00       0795*      dw 16 ; map_width
043737 10 00       0796*      dw 16 ; map_height
043739             0797*  @end:
043739 21 00 E0 B7 0798*      ld hl,cell_status
04373D 01 00 04 00 0799*      ld bc,16*16*map_record_size ; 16x16 map
043741 5B DF       0800*      rst.lil $18
043743 C9          0801*      ret
043744             0802*  
043744             0803*  ; VDU 23, 0, &A0, sid; &49, 128, 1, map_id; num_panels; <texture_id; width; height;> :  Load Wolf3D Map Texture Panel Lookup Table
043744             0804*  ; inputs: none
043744             0805*  vdu_load_tex_lut:
043744 21 52 37 04 0806*      ld hl,@beg
043748 01 0C 00 00 0807*      ld bc,@end-@beg
04374C 5B DF       0808*      rst.lil $18
04374E C3 5E 37 04 0809*      jp @end
043752             0810*  @beg:
043752 17 00 A0    0811*      db 23,0,$A0
043755 00 10       0812*      dw sid
043757 49 80 01    0813*      db $49,128,1
04375A 01 00       0814*      dw vdu_map_id
04375C 0B 00       0815*      dw cube_num_tiles ; num_panels
04375E             0816*  @end:
04375E 21 16 02 04 0817*      ld hl,cube_tex_panel_lut
043762 01 42 00 00 0818*      ld bc,cube_num_tiles*6 ; 6 bytes per panel
043766 5B DF       0819*      rst.lil $18
043768 C9          0820*      ret
043769             0821*  
043769             0822*  ; VDU 23, 0, &A0, sid; &49, 129, 0, x; y; theta; fov; screen_width; screen_height; screen_dist; :  Create Wolf3D Camera
043769             0823*  ; inputs: hl theta, bc x, de y
043769             0824*  vdu_camera_init:
043769 ED 43 90 37 0825*      ld (@x),bc
       04          
04376E ED 53 92 37 0826*      ld (@y),de
       04          
043773 7D          0827*      ld a,l
043774 32 94 37 04 0828*      ld (@theta),a
043778 7C          0829*      ld a,h
043779 32 95 37 04 0830*      ld (@theta+1),a
04377D 21 88 37 04 0831*      ld hl,@beg
043781 01 16 00 00 0832*      ld bc,@end-@beg
043785 5B DF       0833*      rst.lil $18
043787 C9          0834*      ret
043788             0835*  @beg:
043788 17 00 A0    0836*      db 23,0,$A0
04378B 00 10       0837*      dw sid
04378D 49 81 00    0838*      db $49,129,0
043790 00 00       0839*  @x:     dw 0
043792 00 00       0840*  @y:     dw 0
043794 00 00       0841*  @theta: dw 0
043796 00 40       0842*          dw 64*256 ; fov of 90 degrees in 8.8 fixed point deg256
043798 F0 00 A0 00 0843*          dw cstw, csth ; screen height, width
04379C 00 08       0844*          dw 8*256 ; screen_dist of 8 ft in 8.8 fixed point
04379E             0845*  @end:
04379E             0846*  
04379E             0847*  ; VDU 23, 0, &A0, sid; &49, 130, 0, vdu_map_id; : Update Wolf3D ZBuffer
04379E             0848*  ; inputs: none
04379E             0849*  vdu_zbuffer_update:
04379E 21 A9 37 04 0850*      ld hl,@beg
0437A2 01 0A 00 00 0851*      ld bc,@end-@beg
0437A6 5B DF       0852*      rst.lil $18
0437A8 C9          0853*      ret
0437A9             0854*  @beg:
0437A9 17 00 A0    0855*      db 23,0,$A0
0437AC 00 10       0856*      dw sid
0437AE 49 82 00    0857*      db $49,130,0
0437B1 01 00       0858*      dw vdu_map_id
0437B3             0859*  @end:
0437B3             0031   
0437B3             0032   	include "src/asm/tmp.inc"
0437B3             0001*  ; labels and subroutines from various include files
0437B3             0002*  ; which have been temporarily excluded until they can be refactored
0437B3             0003*  
0437B3 00          0004*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
0437B4 00          0005*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
0437B5 00          0006*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
0437B6 00          0007*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
0437B7 00          0008*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
0437B8 00          0009*  orientation: db 0x00 ; 0-3 north,east,south,west
0437B9 00          0010*  cur_x: db 0x00
0437BA 00          0011*  cur_y: db 0x00
0437BB 00          0012*         db 0x00 ; padding so we can read/write 24-bit registers
0437BC             0033   
0437BC             0034   
0437BC             0035   start:
0437BC F5          0036       push af
0437BD C5          0037       push bc
0437BE D5          0038       push de
0437BF DD E5       0039       push ix
0437C1 FD E5       0040       push iy
0437C3             0041   
0437C3 CD 6E 38 04 0042   	call init ; Initialization code
0437C7 CD C2 39 04 0043       call main ; Call the main function
0437CB             0044   
0437CB             0045   exit:
0437CB             0046   
0437CB FD E1       0047       pop iy
0437CD DD E1       0048       pop ix
0437CF D1          0049       pop de
0437D0 C1          0050       pop bc
0437D1 F1          0051       pop af
0437D2 21 00 00 00 0052       ld hl,0
0437D6             0053   
0437D6 C9          0054       ret
0437D7             0055   
0437D7 57 65 6C 63 0056   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
0437EE 4C 6F 61 64 0057   loading_ui: defb "Loading UI\r\nThis takes a few seconds.",0
       69 6E 67 20 
       55 49 0D 0A 
       54 68 69 73 
       20 74 61 6B 
       65 73 20 61 
       20 66 65 77 
       20 73 65 63 
       6F 6E 64 73 
       2E 00       
043814 4C 6F 61 64 0058   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
043822 50 72 65 73 0059   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04383F 00          0060   is_emulator: defb 0
043840 52 75 6E 6E 0061   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
043857 52 75 6E 6E 0062   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
04386E             0063   
04386E             0064   init:
04386E             0065   ; clear all buffers
04386E CD 0F 25 04 0066       call vdu_clear_all_buffers
043872             0067   
043872 CD 0A 3A 04 0068   	call init_display
043876             0069   
043876             0070   ; start generic stopwatch to time setup loop
043876             0071   ; so we can determine if we're running on emulator or hardware
043876 CD FB 31 04 0072   	call stopwatch_set
04387A             0073   
04387A             0074   ; initialize global timestamp
04387A DD 27 00    0075       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04387D 22 B8 31 04 0076       ld (timestamp_now),hl
043881             0077   
043881             0078   ; enable additional audio channels
043881 CD 8C 00 04 0079   	call vdu_enable_channels
043885             0080   
043885             0081   ; set the cursor off
043885 CD 5C 21 04 0082   	call cursor_off
043889             0083   
043889             0084   ; print hello world message
043889 21 D7 37 04 0085   	ld hl,hello_world
04388D CD 20 25 04 0086   	call printString
043891 CD 35 25 04 0087   	call printNewLine
043895             0088   
043895             0089   ; print loading ui message
043895 21 EE 37 04 0090   	ld hl,loading_ui
043899 CD 20 25 04 0091   	call printString
04389D CD DF 20 04 0092   	call vdu_flip
0438A1             0093   
0438A1             0094   ; load fonts
0438A1 CD 8D 0C 04 0095   	call load_font_itc_honda
0438A5             0096   	; call load_font_retro_computer
0438A5             0097   
0438A5             0098   ; load UI images
0438A5 CD 8E 18 04 0099   	call load_ui_images
0438A9 CD 9B 1A 04 0100   	call load_ui_images_bj
0438AD             0101   
0438AD             0102   ; VDU 28, left, bottom, right, top: Set text viewport **
0438AD             0103   ; MIND THE LITTLE-ENDIANESS
0438AD             0104   ; inputs: c=left,b=bottom,e=right,d=top
0438AD 0E 00       0105   	ld c,0 ; left
0438AF 16 14       0106   	ld d,20 ; top
0438B1 1E 27       0107   	ld e,39 ; right
0438B3 06 1D       0108   	ld b,29; bottom
0438B5 CD 12 20 04 0109   	call vdu_set_txt_viewport
0438B9             0110   
0438B9             0111   ; initialize image load routine
0438B9 CD 6F 29 04 0112   	call img_load_init
0438BD             0113   
0438BD             0114   ; load tiles
0438BD 01 0B 00 00 0115   	ld bc,cube_num_tiles
0438C1 21 D4 01 04 0116   	ld hl,cube_buffer_id_lut
0438C5 22 69 29 04 0117   	ld (cur_buffer_id_lut),hl
0438C9 21 F5 01 04 0118   	ld hl,cube_load_tiles_table
0438CD 22 6C 29 04 0119   	ld (cur_load_jump_table),hl
0438D1 CD A4 29 04 0120   	call img_load_main
0438D5             0121   
0438D5             0122   ; load sprites
0438D5 01 14 00 00 0123   	ld bc,sprite_num_tiles
0438D9 21 5D 04 04 0124   	ld hl,sprite_buffer_id_lut
0438DD 22 69 29 04 0125   	ld (cur_buffer_id_lut),hl
0438E1 21 99 04 04 0126   	ld hl,sprite_load_tiles_table
0438E5 22 6C 29 04 0127   	ld (cur_load_jump_table),hl
0438E9 CD A4 29 04 0128   	call img_load_main
0438ED             0129   
0438ED             0130   ; ; load sound effects
0438ED             0131   ; 	ld bc,SFX_num_buffers
0438ED             0132   ; 	ld hl,SFX_buffer_id_lut
0438ED             0133   ; 	ld (cur_buffer_id_lut),hl
0438ED             0134   ; 	ld hl,SFX_load_routines_table
0438ED             0135   ; 	ld (cur_load_jump_table),hl
0438ED             0136   ; 	call sfx_load_main
0438ED             0137   
0438ED             0138   ; self modify vdu_play_sfx to enable sound
0438ED AF          0139   	xor a
0438EE 32 46 00 04 0140   	ld (vdu_play_sfx_disable),a
0438F2             0141   
0438F2             0142   ; use loading time to determine if we're running on emulator or hardware
0438F2 CD 07 32 04 0143   	call stopwatch_get ; hl = elapsed time in 120ths of a second
0438F6 11 40 1F 00 0144   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
0438FA AF          0145   	xor a ; clear carry, default is running on hardware
0438FB 32 3F 38 04 0146   	ld (is_emulator),a
0438FF ED 52       0147   	sbc hl,de
043901 FA 15 39 04 0148   	jp m,@on_emulator
043905 CD 48 20 04 0149   	call vdu_home_cursor
043909 21 57 38 04 0150   	ld hl,on_hardware
04390D CD 20 25 04 0151   	call printString
043911 C3 27 39 04 0152   	jp @test_done
043915             0153   
043915             0154   @on_emulator:
043915             0155   ; print emulator message
043915 3E 01       0156   	ld a,1
043917 32 3F 38 04 0157   	ld (is_emulator),a
04391B CD 48 20 04 0158   	call vdu_home_cursor
04391F 21 40 38 04 0159   	ld hl,on_emulator
043923 CD 20 25 04 0160   	call printString
043927             0161   
043927             0162   @test_done:
043927             0163   ; print final loading time
043927 21 14 38 04 0164   	ld hl,loading_time
04392B CD 20 25 04 0165   	call printString
04392F CD 07 32 04 0166   	call stopwatch_get ; hl = elapsed time in 120ths of a second
043933 CD 6E 25 04 0167   	call printDec
043937 CD 35 25 04 0168   	call printNewLine
04393B             0169   
04393B             0170   ; print loading complete message and wait for user keypress
04393B 21 22 38 04 0171   	ld hl,loading_complete
04393F CD 20 25 04 0172   	call printString
043943 CD DF 20 04 0173   	call vdu_flip
043947 CD A0 28 04 0174   	call waitKeypress
04394B             0175   
04394B             0176   ; initialization done
04394B C9          0177   	ret
04394C             0178   
04394C             0179   ; DEBUG: set up a simple countdown timer
04394C 01          0180   debug_timer: db 0x01
04394D             0181   
04394D             0182   main_loop_tmr: ds 6
043953             0183   framerate: equ 30
043953             0184   
043953             0185   new_game:
043953             0186   ; create wolf3d control structure
043953             0187   ccs:
043953             0188   	CCS sid, cstw, csth
043953 21 61 39 04 0001M      ld hl,@beg
043957 01 0B 00 00 0002M      ld bc,@end-@beg
04395B 5B DF       0003M      rst.lil $18
04395D C3 6C 39 04 0004M      jp @end
043961             0005M  @beg:
043961             0006M  ;   VDU 23,0, &A0, sid%; &49, 0, cstw%; csth%; Create Control Structure
043961 17 00 A0    0007M      db 23,0,$A0
043964 00 10       0008M      dw SID
043966 49 00       0009M      db $49,0
043968 F0 00       0010M      dw SCENE_WIDTH
04396A A0 00       0011M      dw SCENE_HEIGHT
04396C             0012M  @end:
04396C             0189   
04396C             0190   ; create render target bitmap
04396C             0191   ctb:
04396C             0192       CTB tgtbmid, cstw, csth
04396C 21 7A 39 04 0001M      ld hl,@beg
043970 01 10 00 00 0002M      ld bc,@end-@beg
043974 5B DF       0003M      rst.lil $18
043976 C3 8A 39 04 0004M      jp @end
04397A             0005M  @beg:
04397A             0006M  ;   VDU 23, 27, &20, bmid2% Select output bitmap
04397A 17 1B 20    0007M      db 23,27,$20
04397D 02 10       0008M      dw BMID
04397F             0009M  ;   VDU 23, 27, 2, cstw%; csth%; &0000; &00C0; Create solid color bitmap
04397F 17 1B 02    0010M      db 23,27,2
043982 F0 00       0011M      dw SCENE_WIDTH
043984 A0 00       0012M      dw SCENE_HEIGHT
043986 00 00       0013M      dw $0000
043988 C0 00       0014M      dw $00C0
04398A             0015M  @end:
04398A             0193   
04398A             0194   ; set dithering type
04398A 3A 82 32 04 0195       ld a,(dithering_type)
04398E 21 00 10 00 0196       ld hl,sid
043992 CD 02 34 04 0197       call vdu_set_dither
043996             0198   
043996             0199   ; initialize map variables and load map file
043996 21 01 0A 04 0200   	ld hl,room_flags
04399A AF          0201   	xor a
04399B 06 0A       0202   	ld b,10
04399D             0203   @room_flags_loop:
04399D 77          0204   	ld (hl),a
04399E 23          0205   	inc hl
04399F 10 FC       0206   	djnz @room_flags_loop
0439A1             0207   
0439A1             0208   ; load room file
0439A1 CD 6D 09 04 0209   	call map_init
0439A5 CD 1D 37 04 0210   	call vdu_map_init
0439A9 CD 44 37 04 0211   	call vdu_load_tex_lut
0439AD             0212   ; ; initialize sprite data
0439AD             0213   ; 	call map_init_sprites
0439AD             0214   ; ; initialize player position
0439AD             0215   ; 	call plyr_init
0439AD             0216   
0439AD             0217   ; create camera
0439AD 01 00 0F 00 0218       ld bc,15*256
0439B1 11 00 0F 00 0219       ld de,15*256
0439B5 21 00 00 00 0220       ld hl,0*256 ; 0 degrees
0439B9 CD 69 37 04 0221       call vdu_camera_init
0439BD             0222   
0439BD             0223   ; update zbuffer
0439BD CD 9E 37 04 0224   	call vdu_zbuffer_update
0439C1             0225   
0439C1 C9          0226   	ret
0439C2             0227   
0439C2             0228   main:
0439C2 CD 53 39 04 0229   	call new_game
0439C6             0230   
0439C6             0231   main_loop:
0439C6             0232   ; update global timestamp
0439C6 CD C1 31 04 0233       call timestamp_tick
0439CA             0234   
0439CA             0235   ; ; move enemies
0439CA             0236   ; 	call sprites_see_plyr ; 220-285  prt ticks
0439CA             0237   
0439CA             0238   ; ; get player input and update sprite position
0439CA             0239   ; 	; 0-1 prt ticks
0439CA             0240   ; 	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
0439CA             0241   
0439CA             0242   ; ; render the updated scene
0439CA             0243   ; 	call render_scene ; 6-12 prt ticks
0439CA             0244   ; ; full loop 12-16 prt ticks
0439CA             0245   
0439CA             0246   ; ; flip the screen
0439CA             0247   ; 	call vdu_flip
0439CA             0248   
0439CA             0249   @wait:
0439CA FD 21 4D 39 0250   	ld iy,main_loop_tmr
       04          
0439CF CD 9E 31 04 0251   	call tmr_get
0439D3 CA DF 39 04 0252   	jp z,@continue
0439D7 FA DF 39 04 0253   	jp m,@continue
0439DB C3 CA 39 04 0254   	jp @wait
0439DF             0255   @continue:
0439DF             0256   
0439DF             0257   ; reset main loop timer
0439DF FD 21 4D 39 0258   	ld iy,main_loop_tmr
       04          
0439E4 21 04 00 00 0259   	ld hl,120/framerate
0439E8 CD 90 31 04 0260   	call tmr_set
0439EC             0261   
0439EC             0262   ; check for escape key and quit if pressed
0439EC             0263   	MOSCALL mos_getkbmap
0439EC 3E 1E       0001M  			LD	A, function
0439EE 5B CF       0002M  			RST.LIL	08h
0439F0             0264   ; 113 Escape
0439F0 DD CB 0E 46 0265       bit 0,(ix+14)
0439F4 20 02       0266   	jr nz,main_end
0439F6             0267   @Escape:
0439F6 18 CE       0268   	jr main_loop
0439F8             0269   
0439F8             0270   main_end:
0439F8             0271   	; call do_outro
0439F8             0272   
0439F8 CD 0F 25 04 0273       call vdu_clear_all_buffers
0439FC CD B4 00 04 0274   	call vdu_disable_channels
043A00             0275   
043A00             0276   ; restore screen to something normalish
043A00 AF          0277   	xor a
043A01 CD 9D 1F 04 0278   	call vdu_set_screen_mode
043A05 CD 4E 21 04 0279   	call cursor_on
043A09 C9          0280   	ret
043A0A             0281   
043A0A             0282   init_display:
043A0A             0283   ; set up the display
043A0A 3E 88       0284       ld a,8+128 ; 320x240x64 double-buffered
043A0C CD 9D 1F 04 0285       call vdu_set_screen_mode
043A10 AF          0286       xor a
043A11 CD CC 20 04 0287       call vdu_set_scaling
043A15             0288   
043A15             0289   ; set text background color
043A15 3E 84       0290   	ld a,4 + 128
043A17 CD 29 1F 04 0291   	call vdu_colour_text
043A1B             0292   
043A1B             0293   ; set text foreground color
043A1B 3E 2F       0294   	ld a,47 ; aaaaff lavenderish
043A1D CD 29 1F 04 0295   	call vdu_colour_text
043A21             0296   
043A21             0297   ; set gfx bg color
043A21 AF          0298   	xor a ; plotting mode 0
043A22 0E 04       0299   	ld c,4 ; dark blue
043A24 CD 51 1F 04 0300   	call vdu_gcol_bg
043A28 CD 24 1F 04 0301   	call vdu_clg
043A2C             0302   
043A2C             0303   ; set the cursor off again since we changed screen modes
043A2C CD 5C 21 04 0304   	call cursor_off
043A30             0305   
043A30             0306   ; files.inc must go here so that filedata doesn't stomp on program data
043A30             0307   	include "src/asm/files.inc"
043A30             0001*  
043A30             0002*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
043A30             0003*  ; inputs: hl = bufferId, ix = file size
043A30             0004*  vdu_load_buffer_from_file:
043A30             0005*      ; back up buffer id
043A30 E5          0006*          push hl
043A31             0007*      ; load the file from disk into ram
043A31 FD E5       0008*          push iy
043A33 E1          0009*          pop hl ; pointer to filename
043A34 11 8E 3A 04 0010*          ld de,filedata
043A38 3E 01       0011*          ld a,mos_load
043A3A 5B CF       0012*          RST.LIL 08h
043A3C             0013*  	; load buffer ids
043A3C E1          0014*          pop hl
043A3D 22 7E 3A 04 0015*  		ld (@id0),hl
043A41 22 84 3A 04 0016*  		ld (@id1),hl
043A45 22 89 3A 04 0017*  		ld (@id2),hl
043A49             0018*  	; clean up bytes that got stomped on by the ID loads
043A49 3E 02       0019*  		ld a,2
043A4B 32 80 3A 04 0020*  		ld (@id0+2),a
043A4F 3E 17       0021*  		ld a,23
043A51 32 86 3A 04 0022*  		ld (@id1+2),a
043A55 AF          0023*  		xor a
043A56 32 8B 3A 04 0024*  		ld (@id2+2),a
043A5A             0025*  	; read size from ix
043A5A DD 7D       0026*  		ld a,ixl
043A5C 32 8C 3A 04 0027*  		ld (@size),a
043A60 DD 7C       0028*  		ld a,ixh
043A62 32 8D 3A 04 0029*  		ld (@size+1),a
043A66             0030*  	; get all the ducks in a row for the vdu call
043A66 01 13 00 00 0031*  		ld bc,filedata-@start
043A6A DD 09       0032*  		add ix,bc
043A6C DD 44       0033*  		ld b,ixh
043A6E DD 4D       0034*  		ld c,ixl
043A70 21 7B 3A 04 0035*  		ld hl,@start
043A74             0036*  	; push the button
043A74 5B DF       0037*  		rst.lil $18
043A76             0038*      ; print a progress breadcrumb
043A76 3E 2E       0039*          ld a,'.'
043A78 5B D7       0040*          rst.lil 10h
043A7A             0041*  	; back to caller
043A7A C9          0042*  		ret
043A7B             0043*  ; vdp command string:
043A7B 17 00 A0    0044*  @start: db 23,0,0xA0 ; Clear buffer
043A7E 00 00       0045*  @id0:	dw 0x0000 ; bufferId
043A80 02          0046*  		db 2
043A81             0047*  	; select buffer VDU 23, 27, &20, bufferId;
043A81 17 1B 20    0048*  		db 23,27,0x20
043A84 00 00       0049*  @id1:	dw 0x0000 ; bufferId
043A86             0050*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043A86 17 00 A0    0051*  		db 23,0,0xA0
043A89 00 00       0052*  @id2:	dw 0x0000 ; bufferId
043A8B 00          0053*  		db 0
043A8C             0054*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
043A8C 00 00       0055*  @size:	dw 0x0000 ; length of data in bytes
043A8E             0056*  filedata: ; no need to allocate space here if this is the final include of the application
043A8E             0057*  	; ds 65536 ; placeholder for file data	DEBUG
043A8E             0058*  
043A8E             0059*  ; ; TODO: MAKE PROGRESSIVE LOADING WORK
043A8E             0060*  ; ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
043A8E             0061*  ; ; inputs: hl = bufferId, ix = file size ; iy = pointer to filename
043A8E             0062*  ; vdu_load_buffer_from_file:
043A8E             0063*  ; ; load buffer ids
043A8E             0064*  ;     ld (@id0),hl
043A8E             0065*  ;     ld (@id1),hl
043A8E             0066*  ; ; clean up bytes that got stomped on by the ID loads
043A8E             0067*  ;     ld a,2
043A8E             0068*  ;     ld (@id0+2),a
043A8E             0069*  ;     xor a
043A8E             0070*  ;     ld (@id1+2),a
043A8E             0071*  ; ; load the file from disk into ram
043A8E             0072*  ;     ld (@filesize),ix
043A8E             0073*  ;     ld bc,(@filesize) ; for the mos_load call
043A8E             0074*  ;     push iy
043A8E             0075*  ; 	pop hl ; pointer to filename
043A8E             0076*  ; 	ld de,filedata
043A8E             0077*  ; 	ld a,mos_load
043A8E             0078*  ; 	RST.LIL 08h
043A8E             0079*  ; ; clear target buffer
043A8E             0080*  ;     ld hl,@clear0
043A8E             0081*  ;     ld bc,@clear1-@clear0
043A8E             0082*  ;     rst.lil $18
043A8E             0083*  ;     jp @clear1
043A8E             0084*  ; @clear0: db 23,0,0xA0
043A8E             0085*  ; @id0:	dw 0x0000 ; bufferId
043A8E             0086*  ; 		db 2 ; clear buffer
043A8E             0087*  ; @clear1:
043A8E             0088*  ; ; load default chunk size of 256 bytes
043A8E             0089*  ;     xor a
043A8E             0090*  ;     ld (@chunksize),a
043A8E             0091*  ;     ld a,1
043A8E             0092*  ;     ld (@chunksize+1),a
043A8E             0093*  ; ; point hl at the start of the file data
043A8E             0094*  ;     ld hl,filedata
043A8E             0095*  ;     ld (@chunkpointer),hl
043A8E             0096*  ; @loop:
043A8E             0097*  ;     ld hl,(@filesize) ; get the remaining bytes
043A8E             0098*  ;     ld de,256
043A8E             0099*  ;     xor a ; clear carry
043A8E             0100*  ;     sbc hl,de
043A8E             0101*  ;     ld (@filesize),hl ; store remaining bytes
043A8E             0102*  ;     jp z,@loadchunk ; jp means will return to caller from there
043A8E             0103*  ;     jp m,@lastchunk ; ditto
043A8E             0104*  ;     call @loadchunk ; load the next chunk and return here to loop again
043A8E             0105*  ;     jp @loop ; loop back to load the next chunk
043A8E             0106*  ; @lastchunk:
043A8E             0107*  ;     ld de,256
043A8E             0108*  ;     add hl,de
043A8E             0109*  ;     ld a,l
043A8E             0110*  ;     ld (@chunksize),a ; store the remaining bytes
043A8E             0111*  ;     ld a,h
043A8E             0112*  ;     ld (@chunksize+1),a
043A8E             0113*  ;     ; fall through to loadchunk
043A8E             0114*  ; @loadchunk:
043A8E             0115*  ;     ld hl,@chunk0
043A8E             0116*  ;     ld bc,@chunk1-@chunk0
043A8E             0117*  ;     rst.lil $18
043A8E             0118*  ;     jp @chunk1
043A8E             0119*  ; @chunk0:
043A8E             0120*  ; ; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
043A8E             0121*  ; 		db 23,0,0xA0
043A8E             0122*  ; @id1:	dw 0x0000 ; bufferId
043A8E             0123*  ; 		db 0 ; load buffer
043A8E             0124*  ; @chunksize:	dw 0x0000 ; length of data in bytes
043A8E             0125*  ; @chunk1:
043A8E             0126*  ;     ld hl,(@chunkpointer) ; get the file data pointer
043A8E             0127*  ;     ld bc,0 ; make sure bcu is zero
043A8E             0128*  ;     ld a,(@chunksize)
043A8E             0129*  ;     ld c,a
043A8E             0130*  ;     ld a,(@chunksize+1)
043A8E             0131*  ;     ld b,a
043A8E             0132*  ;     rst.lil $18
043A8E             0133*  ;     ld hl,(@chunkpointer) ; get the file data pointer
043A8E             0134*  ;     ld bc,256
043A8E             0135*  ;     add hl,bc ; advance the file data pointer
043A8E             0136*  ;     ld (@chunkpointer),hl ; store pointer to file data
043A8E             0137*  ;     ld a,'.' ; print a progress breadcrumb
043A8E             0138*  ;     rst.lil 10h
043A8E             0139*  ;     ret
043A8E             0140*  ; @filesize: dl 0 ; file size in bytes
043A8E             0141*  ; @chunkpointer: dl 0 ; pointer to current chunk
043A8E             0142*  ; filedata: ; no need to allocate space here if this is the final include of the application
043A8E             0143*  ; 	; ds 65536 ; placeholder for file data	DEBUG
