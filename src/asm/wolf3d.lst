PC     Output      Line
040000             0001       .assume adl=1
040000             0002       .org 0x040000
040000             0003   
040000 C3 93 C8 04 0004       jp start
040004             0005   
040004 FF FF FF FF 0006       .align 64
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
       FF FF FF FF 
040040 4D 4F 53    0007       .db "MOS"
040043 00          0008       .db 00h
040044 01          0009       .db 01h
040045             0010   
040045             0011   	include "src/asm/mos_api.asm" ; wants to be first include b/c it has macros
040045             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/mos_api.asm
040045             0002*  ; Title:	AGON MOS - API for user projects
040045             0003*  ; Author:	Dean Belfield
040045             0004*  ;			Adapted for agon-ez80asm by Jeroen Venema
040045             0005*  ;			Added MOS error codes for return in HL
040045             0006*  ; Created:	03/08/2022
040045             0007*  ; Last Updated:	10/08/2023
040045             0008*  ;
040045             0009*  ; Modinfo:
040045             0010*  ; 05/08/2022:	Added mos_feof
040045             0011*  ; 09/08/2022:	Added system variables: cursorX, cursorY
040045             0012*  ; 18/08/2022:	Added system variables: scrchar, scrpixel, audioChannel, audioSuccess, vpd_pflags
040045             0013*  ; 05/09/2022:	Added mos_ren, vdp_pflag_mode
040045             0014*  ; 24/09/2022:	Added mos_getError, mos_mkdir
040045             0015*  ; 13/10/2022:	Added mos_oscli
040045             0016*  ; 23/02/2023:	Added more sysvars, fixed typo in sysvar_audioSuccess, offsets for sysvar_scrCols, sysvar_scrRows
040045             0017*  ; 04/03/2023:	Added sysvar_scrpixelIndex
040045             0018*  ; 08/03/2023:	Renamed sysvar_keycode to sysvar_keyascii, added sysvar_vkeycode
040045             0019*  ; 15/03/2023:	Added mos_copy, mos_getrtc, mos_setrtc, rtc, vdp_pflag_rtc
040045             0020*  ; 21/03/2023:	Added mos_setintvector, sysvars for keyboard status, vdu codes for vdp
040045             0021*  ; 22/03/2023:	The VDP commands are now indexed from 0x80
040045             0022*  ; 29/03/2023:	Added mos_uopen, mos_uclose, mos_ugetc, mos_uputc
040045             0023*  ; 13/04/2023:	Added FatFS file structures (FFOBJID, FIL, DIR, FILINFO)
040045             0024*  ; 15/04/2023:	Added mos_getfil, mos_fread, mos_fwrite and mos_flseek
040045             0025*  ; 19/05/2023:	Added sysvar_scrMode
040045             0026*  ; 05/06/2023:	Added sysvar_rtcEnable
040045             0027*  ; 03/08/2023:	Added mos_setkbvector
040045             0028*  ; 10/08/2023:	Added mos_getkbmap
040045             0029*  
040045             0030*  ; VDP control (VDU 23, 0, n)
040045             0031*  ;
040045             0032*  vdp_gp:				EQU 80h
040045             0033*  vdp_keycode:		EQU 81h
040045             0034*  vdp_cursor:			EQU	82h
040045             0035*  vdp_scrchar:		EQU	83h
040045             0036*  vdp_scrpixel:		EQU	84h
040045             0037*  vdp_audio:			EQU	85h
040045             0038*  vdp_mode:			EQU	86h
040045             0039*  vdp_rtc:			EQU	87h
040045             0040*  vdp_keystate:		EQU	88h
040045             0041*  vdp_logicalcoords:	EQU	C0h
040045             0042*  vdp_terminalmode:	EQU	FFh
040045             0043*  
040045             0044*  ; MOS high level functions
040045             0045*  ;
040045             0046*  mos_getkey:			EQU	00h
040045             0047*  mos_load:			EQU	01h
040045             0048*  mos_save:			EQU	02h
040045             0049*  mos_cd:				EQU	03h
040045             0050*  mos_dir:			EQU	04h
040045             0051*  mos_del:			EQU	05h
040045             0052*  mos_ren:			EQU	06h
040045             0053*  mos_mkdir:			EQU	07h
040045             0054*  mos_sysvars:		EQU	08h
040045             0055*  mos_editline:		EQU	09h
040045             0056*  mos_fopen:			EQU	0Ah
040045             0057*  mos_fclose:			EQU	0Bh
040045             0058*  mos_fgetc:			EQU	0Ch
040045             0059*  mos_fputc:			EQU	0Dh
040045             0060*  mos_feof:			EQU	0Eh
040045             0061*  mos_getError:		EQU	0Fh
040045             0062*  mos_oscli:			EQU	10h
040045             0063*  mos_copy:			EQU	11h
040045             0064*  mos_getrtc:			EQU	12h
040045             0065*  mos_setrtc:			EQU	13h
040045             0066*  mos_setintvector:	EQU	14h
040045             0067*  mos_uopen:			EQU	15h
040045             0068*  mos_uclose:			EQU	16h
040045             0069*  mos_ugetc:			EQU	17h
040045             0070*  mos_uputc:			EQU	18h
040045             0071*  mos_getfil:			EQU	19h
040045             0072*  mos_fread:			EQU	1Ah
040045             0073*  mos_fwrite:			EQU	1Bh
040045             0074*  mos_flseek:			EQU	1Ch
040045             0075*  mos_setkbvector:	EQU	1Dh
040045             0076*  mos_getkbmap:		EQU	1Eh
040045             0077*  
040045             0078*  ; MOS program exit codes
040045             0079*  ;
040045             0080*  EXIT_OK:				EQU  0;	"OK",
040045             0081*  EXIT_ERROR_SD_ACCESS:	EQU	 1;	"Error accessing SD card",
040045             0082*  EXIT_ERROR_ASSERTION:	EQU  2;	"Assertion failed",
040045             0083*  EXIT_SD_CARDFAILURE:	EQU  3;	"SD card failure",
040045             0084*  EXIT_FILENOTFOUND:		EQU  4;	"Could not find file",
040045             0085*  EXIT_PATHNOTFOUND:		EQU  5;	"Could not find path",
040045             0086*  EXIT_INVALIDPATHNAME:	EQU  6;	"Invalid path name",
040045             0087*  EXIT_ACCESSDENIED_FULL:	EQU  7;	"Access denied or directory full",
040045             0088*  EXIT_ACCESSDENIED:		EQU  8;	"Access denied",
040045             0089*  EXIT_INVALIDOBJECT:		EQU  9;	"Invalid file/directory object",
040045             0090*  EXIT_SD_WRITEPROTECTED:	EQU 10;	"SD card is write protected",
040045             0091*  EXIT_INVALIDDRIVENUMBER:EQU 11;	"Logical drive number is invalid",
040045             0092*  EXIT_NOVOLUMEWORKAREA:	EQU 12;	"Volume has no work area",
040045             0093*  EXIT_NOVALIDFATVOLUME:	EQU 13;	"No valid FAT volume",
040045             0094*  EXIT_ERRORMKFS:			EQU 14;	"Error occurred during mkfs",
040045             0095*  EXIT_VOLUMETIMEOUT:		EQU 15;	"Volume timeout",
040045             0096*  EXIT_VOLUMELOCKED:		EQU 16;	"Volume locked",
040045             0097*  EXIT_LFNALLOCATION:		EQU 17;	"LFN working buffer could not be allocated",
040045             0098*  EXIT_MAXOPENFILES:		EQU 18;	"Too many open files",
040045             0099*  EXIT_INVALIDPARAMETER:	EQU 19;	"Invalid parameter",
040045             0100*  EXIT_INVALIDCOMMAND:	EQU 20;	"Invalid command",
040045             0101*  EXIT_INVALIDEXECUTABLE:	EQU 21;	"Invalid executable",
040045             0102*  ; FatFS file access functions
040045             0103*  ;
040045             0104*  ffs_fopen:			EQU	80h
040045             0105*  ffs_fclose:			EQU	81h
040045             0106*  ffs_fread:			EQU	82h
040045             0107*  ffs_fwrite:			EQU	83h
040045             0108*  ffs_flseek:			EQU	84h
040045             0109*  ffs_ftruncate:		EQU	85h
040045             0110*  ffs_fsync:			EQU	86h
040045             0111*  ffs_fforward:		EQU	87h
040045             0112*  ffs_fexpand:		EQU	88h
040045             0113*  ffs_fgets:			EQU	89h
040045             0114*  ffs_fputc:			EQU	8Ah
040045             0115*  ffs_fputs:			EQU	8Bh
040045             0116*  ffs_fprintf:		EQU	8Ch
040045             0117*  ffs_ftell:			EQU	8Dh
040045             0118*  ffs_feof:			EQU	8Eh
040045             0119*  ffs_fsize:			EQU	8Fh
040045             0120*  ffs_ferror:			EQU	90h
040045             0121*  
040045             0122*  ; FatFS directory access functions
040045             0123*  ;
040045             0124*  ffs_dopen:			EQU	91h
040045             0125*  ffs_dclose:			EQU	92h
040045             0126*  ffs_dread:			EQU	93h
040045             0127*  ffs_dfindfirst:		EQU	94h
040045             0128*  ffs_dfindnext:		EQU	95h
040045             0129*  
040045             0130*  ; FatFS file and directory management functions
040045             0131*  ;
040045             0132*  ffs_stat:			EQU	96h
040045             0133*  ffs_unlink:			EQU	97h
040045             0134*  ffs_rename:			EQU	98h
040045             0135*  ffs_chmod:			EQU	99h
040045             0136*  ffs_utime:			EQU	9Ah
040045             0137*  ffs_mkdir:			EQU	9Bh
040045             0138*  ffs_chdir:			EQU	9Ch
040045             0139*  ffs_chdrive:		EQU	9Dh
040045             0140*  ffs_getcwd:			EQU	9Eh
040045             0141*  
040045             0142*  ; FatFS volume management and system configuration functions
040045             0143*  ;
040045             0144*  ffs_mount:			EQU	9Fh
040045             0145*  ffs_mkfs:			EQU	A0h
040045             0146*  ffs_fdisk:			EQU	A1h
040045             0147*  ffs_getfree:		EQU	A2h
040045             0148*  ffs_getlabel:		EQU	A3h
040045             0149*  ffs_setlabel:		EQU	A4h
040045             0150*  ffs_setcp:			EQU	A5h
040045             0151*  
040045             0152*  ; File access modes
040045             0153*  ;
040045             0154*  fa_read:			EQU	01h
040045             0155*  fa_write:			EQU	02h
040045             0156*  fa_open_existing:	EQU	00h
040045             0157*  fa_create_new:		EQU	04h
040045             0158*  fa_create_always:	EQU	08h
040045             0159*  fa_open_always:		EQU	10h
040045             0160*  fa_open_append:		EQU	30h
040045             0161*  
040045             0162*  ; System variable indexes for api_sysvars
040045             0163*  ; Index into _sysvars in globals.asm
040045             0164*  ;
040045             0165*  sysvar_time:			EQU	00h	; 4: Clock timer in centiseconds (incremented by 2 every VBLANK)
040045             0166*  sysvar_vpd_pflags:		EQU	04h	; 1: Flags to indicate completion of VDP commands
040045             0167*  sysvar_keyascii:		EQU	05h	; 1: ASCII keycode, or 0 if no key is pressed
040045             0168*  sysvar_keymods:			EQU	06h	; 1: Keycode modifiers
040045             0169*  sysvar_cursorX:			EQU	07h	; 1: Cursor X position
040045             0170*  sysvar_cursorY:			EQU	08h	; 1: Cursor Y position
040045             0171*  sysvar_scrchar:			EQU	09h	; 1: Character read from screen
040045             0172*  sysvar_scrpixel:		EQU	0Ah	; 3: Pixel data read from screen (R,B,G)
040045             0173*  sysvar_audioChannel:	EQU	0Dh	; 1: Audio channel
040045             0174*  sysvar_audioSuccess:	EQU	0Eh	; 1: Audio channel note queued (0 = no, 1 = yes)
040045             0175*  sysvar_scrWidth:		EQU	0Fh	; 2: Screen width in pixels
040045             0176*  sysvar_scrHeight:		EQU	11h	; 2: Screen height in pixels
040045             0177*  sysvar_scrCols:			EQU	13h	; 1: Screen columns in characters
040045             0178*  sysvar_scrRows:			EQU	14h	; 1: Screen rows in characters
040045             0179*  sysvar_scrColours:		EQU	15h	; 1: Number of colours displayed
040045             0180*  sysvar_scrpixelIndex:	EQU	16h	; 1: Index of pixel data read from screen
040045             0181*  sysvar_vkeycode:		EQU	17h	; 1: Virtual key code from FabGL
040045             0182*  sysvar_vkeydown:		EQU	18h	; 1: Virtual key state from FabGL (0=up, 1=down)
040045             0183*  sysvar_vkeycount:		EQU	19h	; 1: Incremented every time a key packet is received
040045             0184*  sysvar_rtc:				EQU	1Ah	; 6: Real time clock data
040045             0185*  sysvar_spare:			EQU	20h	; 2: Spare, previously used by rtc
040045             0186*  sysvar_keydelay:		EQU	22h	; 2: Keyboard repeat delay
040045             0187*  sysvar_keyrate:			EQU	24h	; 2: Keyboard repeat reat
040045             0188*  sysvar_keyled:			EQU	26h	; 1: Keyboard LED status
040045             0189*  sysvar_scrMode:			EQU	27h	; 1: Screen mode
040045             0190*  sysvar_rtcEnable:		EQU	28h	; 1: RTC enable flag (0: disabled, 1: use ESP32 RTC)
040045             0191*  
040045             0192*  ; Flags for the VPD protocol
040045             0193*  ;
040045             0194*  vdp_pflag_cursor:		EQU	00000001b
040045             0195*  vdp_pflag_scrchar:		EQU	00000010b
040045             0196*  vdp_pflag_point:		EQU	00000100b
040045             0197*  vdp_pflag_audio:		EQU	00001000b
040045             0198*  vdp_pflag_mode:			EQU	00010000b
040045             0199*  vdp_pflag_rtc:			EQU	00100000b
040045             0200*  
040045             0201*  ;
040045             0202*  ; FatFS structures
040045             0203*  ; These mirror the structures contained in src_fatfs/ff.h in the MOS project
040045             0204*  ;
040045             0205*  ; Object ID and allocation information (FFOBJID)
040045             0206*  ;
040045             0207*  ; Indexes into FFOBJID structure
040045             0208*  ffobjid_fs:			EQU	0	; 3: Pointer to the hosting volume of this object
040045             0209*  ffobjid_id:			EQU	3	; 2: Hosting volume mount ID
040045             0210*  ffobjid_attr:		EQU	5	; 1: Object attribute
040045             0211*  ffobjid_stat:		EQU	6	; 1: Object chain status (b1-0: =0:not contiguous, =2:contiguous, =3:fragmented in this session, b2:sub-directory stretched)
040045             0212*  ffobjid_sclust:		EQU	7	; 4: Object data start cluster (0:no cluster or root directory)
040045             0213*  ffobjid_objsize:	EQU	11	; 4: Object size (valid when sclust != 0)
040045             0214*  ;
040045             0215*  ; File object structure (FIL)
040045             0216*  ;
040045             0217*  ; Indexes into FIL structure
040045             0218*  fil_obj:		EQU 0	; 15: Object identifier
040045             0219*  fil_flag:		EQU	15 	;  1: File status flags
040045             0220*  fil_err:		EQU	16	;  1: Abort flag (error code)
040045             0221*  fil_fptr:		EQU	17	;  4: File read/write pointer (Zeroed on file open)
040045             0222*  fil_clust:		EQU	21	;  4: Current cluster of fpter (invalid when fptr is 0)
040045             0223*  fil_sect:		EQU	25	;  4: Sector number appearing in buf[] (0:invalid)
040045             0224*  fil_dir_sect:	EQU	29	;  4: Sector number containing the directory entry
040045             0225*  fil_dir_ptr:	EQU	33	;  3: Pointer to the directory entry in the win[]
040045             0226*  ;
040045             0227*  ; Directory object structure (DIR)
040045             0228*  ; Indexes into DIR structure
040045             0229*  dir_obj:		EQU  0	; 15: Object identifier
040045             0230*  dir_dptr:		EQU	15	;  4: Current read/write offset
040045             0231*  dir_clust:		EQU	19	;  4: Current cluster
040045             0232*  dir_sect:		EQU	23	;  4: Current sector (0:Read operation has terminated)
040045             0233*  dir_dir:		EQU	27	;  3: Pointer to the directory item in the win[]
040045             0234*  dir_fn:			EQU	30	; 12: SFN (in/out) {body[8],ext[3],status[1]}
040045             0235*  dir_blk_ofs:	EQU	42	;  4: Offset of current entry block being processed (0xFFFFFFFF:Invalid)
040045             0236*  ;
040045             0237*  ; File information structure (FILINFO)
040045             0238*  ;
040045             0239*  ; Indexes into FILINFO structure
040045             0240*  filinfo_fsize:		EQU 0	;   4: File size
040045             0241*  filinfo_fdate:		EQU	4	;   2: Modified date
040045             0242*  filinfo_ftime:		EQU	6	;   2: Modified time
040045             0243*  filinfo_fattrib:	EQU	8	;   1: File attribute
040045             0244*  filinfo_altname:	EQU	9	;  13: Alternative file name
040045             0245*  filinfo_fname:		EQU	22	; 256: Primary file name
040045             0246*  ;
040045             0247*  ; Macro for calling the API
040045             0248*  ; Parameters:
040045             0249*  ; - function: One of the function numbers listed above
040045             0250*  ;
040045             0251*  	MACRO	MOSCALL	function
040045             0252*  			LD	A, function
040045             0253*  			RST.LIL	08h
040045             0254*  	ENDMACRO
040045             0012   	include "src/asm/vdu_sound.asm" ; also has macros
040045 00          0001*  last_channel: db 0
040046             0002*  
040046             0003*  vdu_play_sfx:
040046 C9          0004*  vdu_play_sfx_disable: ret ; disabled by default, set to nop to enable
040047 22 7F 00 04 0005*      ld (@bufferId),hl
04004B ED 43 89 00 0006*      ld (@duration),bc
       04          
040050 3E 17       0007*      ld a,23
040052 32 81 00 04 0008*      ld (@bufferId+2),a
040056 3A 45 00 04 0009*      ld a,(last_channel)
04005A 3C          0010*      inc a
04005B             0011*      ; and 31 ; modulo 32
04005B FE 03       0012*      cp 3
04005D C2 62 00 04 0013*      jp nz,@load_channel
040061 AF          0014*      xor a
040062             0015*  @load_channel:
040062 32 45 00 04 0016*      ld (last_channel),a
040066 32 7C 00 04 0017*      ld (@channel0),a
04006A 32 84 00 04 0018*      ld (@channel1),a
04006E 21 79 00 04 0019*      ld hl, @sample
040072 01 12 00 00 0020*      ld bc, @sample_end - @sample
040076 5B DF       0021*      rst.lil $18
040078 C9          0022*      ret
040079             0023*  @sample:
040079             0024*  ; Command 4: Set waveform
040079             0025*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040079 17 00 85    0026*      .db 23,0,$85                        ; do sound
04007C             0027*  @channel0:
04007C 00 04 08    0028*      .db 0,4,8 ; channel, command, waveform
04007F             0029*  @bufferId:
04007F 00 00       0030*      .dw 0x0000
040081             0031*  ; Command 0: Play note
040081             0032*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
040081 17 00 85    0033*      .db 23,0,$85                        ; do sound
040084             0034*  @channel1:
040084 00 00 7F    0035*      .db 0,0,127                ; channel, volume
040087 00 00       0036*      .dw 0
040089             0037*  @duration:                              ; freq (tuneable samples only)
040089 00 00       0038*      .dw 0x0000                        ; duration
04008B             0039*  @sample_end:
04008B 00          0040*      .db 0x00 ; padding
04008C             0041*  
04008C             0042*  ; ############################################################
04008C             0043*  ; VDU SOUND API
04008C             0044*  ; ############################################################
04008C             0045*  ; Command 0: Play note
04008C             0046*  ; VDU 23, 0, &85, channel, 0, volume, frequency; duration;
04008C             0047*      MACRO PLAY_NOTE channel, volume, frequency, duration
04008C             0048*      ld hl, @PLAY_NOTE_CMD        ; Start of command block
04008C             0049*      ld bc, @PLAY_NOTE_END - @PLAY_NOTE_CMD  ; Command block size
04008C             0050*      rst.lil $18
04008C             0051*      jr @PLAY_NOTE_END
04008C             0052*  @PLAY_NOTE_CMD:  db 23, 0, 0x85               ; Command header
04008C             0053*                   db channel                  ; Channel, 0 (commented out)
04008C             0054*                   db 0                        ; Play note command
04008C             0055*                   db volume                   ; Volume
04008C             0056*                   dw frequency                ; Frequency
04008C             0057*                   dw duration                 ; Duration
04008C             0058*  @PLAY_NOTE_END:
04008C             0059*      ENDMACRO
04008C             0060*  
04008C             0061*      MACRO MUTE_CHANNEL channel
04008C             0062*      ld hl, @MUTE_CHANNEL_CMD     ; Start of command block
04008C             0063*      ld bc, @MUTE_CHANNEL_END - @MUTE_CHANNEL_CMD  ; Command block size
04008C             0064*      rst.lil $18
04008C             0065*      jr @MUTE_CHANNEL_END
04008C             0066*  @MUTE_CHANNEL_CMD: db 23, 0, 0x85             ; Command header
04008C             0067*                     db channel                ; Channel, 0 (commented out)
04008C             0068*                     db 2                      ; Set volume command
04008C             0069*                     db 0                      ; Volume (mute)
04008C             0070*  @MUTE_CHANNEL_END:
04008C             0071*      ENDMACRO
04008C             0072*  
04008C             0073*  ; inputs: c = channel, b = volume, hl = frequency; de = duration;
04008C             0074*  vdu_play_note:
04008C 79          0075*      ld a,c
04008D 32 AD 00 04 0076*      ld (@channel),a
040091 78          0077*      ld a,b
040092 32 AF 00 04 0078*      ld (@volume),a
040096 22 B0 00 04 0079*      ld (@frequency),hl
04009A ED 53 B2 00 0080*      ld (@duration),de
       04          
04009F 21 AA 00 04 0081*      ld hl,@cmd
0400A3 01 0A 00 00 0082*      ld bc,@end-@cmd
0400A7 5B DF       0083*      rst.lil $18
0400A9 C9          0084*      ret
0400AA 17 00 85    0085*  @cmd:       db 23, 0, 0x85
0400AD 00          0086*  @channel:   db 0x00
0400AE 00          0087*              db 0x00 ; play note command
0400AF 00          0088*  @volume:    db 0x00
0400B0 00 00       0089*  @frequency: dw 0x0000
0400B2 00 00       0090*  @duration:  dw 0x0000
0400B4 00          0091*  @end:       db 0x00 ; padding
0400B5             0092*  
0400B5             0093*  ; Command 1: Status
0400B5             0094*  ; VDU 23, 0, &85, channel, 1
0400B5             0095*  ; inputs: a = channel
0400B5             0096*  ; Returns a bit mask indicating the status of the specified channel, or 255 if the channel is not valid, or has been disabled. The bit mask is as follows:
0400B5             0097*  ; Bit 	Name 	Meaning
0400B5             0098*  ; 0 	Active 	When set this indicates the channel is in use (has an active waveform)
0400B5             0099*  ; 1 	Playing 	Indicates the channel is actively playing a note, and thus will reject calls to play a new note
0400B5             0100*  ; 2 	Indefinite 	Set if the channel is playing an indefinite duration note
0400B5             0101*  ; 3 	Has Volume Envelope 	Set if the channel has a volume envelope
0400B5             0102*  ; 4 	Has Frequency Envelope 	Set if the channel has a frequency envelope
0400B5             0103*  
0400B5             0104*  ; Bits 5-7 are reserved for future use and, for enabled channels, will currently always be zero.
0400B5             0105*  vdu_channel_status:
0400B5 32 C7 00 04 0106*      ld (@channel),a
0400B9 21 C4 00 04 0107*      ld hl,@cmd
0400BD 01 05 00 00 0108*      ld bc,@end-@cmd
0400C1 5B DF       0109*      rst.lil $18
0400C3 C9          0110*      ret
0400C4 17 00 85    0111*  @cmd:       db 23, 0, 0x85
0400C7 00          0112*  @channel:   db 0x00
0400C8 01          0113*              db 0x01 ; get channel status command
0400C9             0114*  @end:
0400C9             0115*  
0400C9             0116*  ; VDU 23, 0, &85, channel, 2, volume
0400C9             0117*  ; inputs: c = channel, b = volume
0400C9             0118*  ; Sets the volume of the specified channel. The volume is a value from 0 to 127, where 0 is silent and 127 is full volume. Values over 127 will be treated as 127 (with one exception described later).
0400C9             0119*  
0400C9             0120*  ; Specifying a channel of -1 (or 255) will set the global sound system volume level. (Requires Console8 VDP 2.5.0 or later.)
0400C9             0121*  
0400C9             0122*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the volume of a channel that is already playing a note.
0400C9             0123*  vdu_channel_volume:
0400C9 79          0124*      ld a,c
0400CA 32 E1 00 04 0125*      ld (@channel),a
0400CE 78          0126*      ld a,b
0400CF 32 E3 00 04 0127*      ld (@volume),a
0400D3 21 DE 00 04 0128*      ld hl,@cmd
0400D7 01 06 00 00 0129*      ld bc,@end-@cmd
0400DB 5B DF       0130*      rst.lil $18
0400DD C9          0131*      ret
0400DE 17 00 85    0132*  @cmd:       db 23, 0, 0x85
0400E1 00          0133*  @channel:   db 0x00
0400E2 02          0134*              db 0x02 ; set volume command
0400E3 00          0135*  @volume:    db 0x00
0400E4             0136*  @end:
0400E4             0137*  
0400E4             0138*  ; VDU 23, 0, &85, channel, 3, frequency;
0400E4             0139*  
0400E4             0140*  ; Sets the frequency of the specified channel. The frequency is a 16-bit value specifying in Hz the frequency of the note to be played.
0400E4             0141*  
0400E4             0142*  ; Using this command provides more direct control over a channel than the play note command. It can be used to adjust the frequency of a channel that is already playing a note.
0400E4             0143*  
0400E4             0144*  ; Returns 1 on success, 0 for failure.
0400E4             0145*  vdu_channel_frequency:
0400E4 79          0146*      ld a,c
0400E5 32 FC 00 04 0147*      ld (@channel),a
0400E9 ED 53 FE 00 0148*      ld (@frequency),de
       04          
0400EE 21 F9 00 04 0149*      ld hl,@cmd
0400F2 01 07 00 00 0150*      ld bc,@end-@cmd
0400F6 5B DF       0151*      rst.lil $18
0400F8 C9          0152*      ret
0400F9 17 00 85    0153*  @cmd:       db 23, 0, 0x85
0400FC 00          0154*  @channel:   db 0x00
0400FD 03          0155*              db 0x03 ; set frequency command
0400FE 00 00       0156*  @frequency: dw 0x0000
040100 00          0157*  @end:       db 0x00 ; padding
040101             0158*  
040101             0159*  
040101             0160*  ; VDU 23, 0, &85, channel, 4, waveformOrSample, [bufferId;]
040101             0161*  ; inputs: c = channel, b = waveformOrSample, [hl = bufferId]
040101             0162*  ; Sets the waveform type for a channel to use. The waveformOrSample value is a single byte treated as a signed value.
040101             0163*  
040101             0164*  ; Using a negative value for the waveform indicates that a sample should be used instead. For more information see the documentation for the sample command.
040101             0165*  
040101             0166*  ; By default a channel is set to use waveform 0 (square wave).
040101             0167*  
040101             0168*  ; Valid waveform values are as follows:
040101             0169*  ; Value 	Waveform
040101             0170*  ; 0 	Square wave
040101             0171*  ; 1 	Triangle wave
040101             0172*  ; 2 	Sawtooth wave
040101             0173*  ; 3 	Sine wave
040101             0174*  ; 4 	Noise (simple white noise with no frequency support)
040101             0175*  ; 5 	VIC Noise (emulates a VIC6561; supports frequency)
040101             0176*  ; 8 	Sample (specifying a 16-bit buffer ID for sample data)
040101             0177*  
040101             0178*  vdu_channel_waveform:
040101 79          0179*      ld a,c
040102 32 27 01 04 0180*      ld (@channel),a
040106 78          0181*      ld a,b
040107 32 29 01 04 0182*      ld (@waveform),a
04010B FE 08       0183*      cp 8 ; check if the waveform is a sample
04010D 28 06       0184*      jr z, @sample
04010F 01 06 00 00 0185*      ld bc,@bufferId-@cmd
040113 18 08       0186*      jr @sendToVdu
040115             0187*  @sample:
040115 22 2A 01 04 0188*      ld (@bufferId),hl
040119 01 08 00 00 0189*      ld bc,@end-@cmd
04011D             0190*  @sendToVdu:
04011D 21 24 01 04 0191*      ld hl,@cmd
040121 5B DF       0192*      rst.lil $18
040123 C9          0193*      ret
040124 17 00 85    0194*  @cmd:       db 23, 0, 0x85
040127 00          0195*  @channel:   db 0x00
040128 04          0196*              db 0x04 ; set waveform command
040129 00          0197*  @waveform:  db 0x00
04012A 00 00       0198*  @bufferId:  dw 0x0000
04012C 00          0199*  @end:       db 0x00 ; padding
04012D             0200*  
04012D             0201*  
04012D             0202*  
04012D             0203*  ; VDU 23, 0, &85, 0, 5, 2, bufferId; format
04012D             0204*  ; inputs: hl = bufferId; a = format
04012D             0205*  ; The format parameter is an 8-bit value that indicates the format of the sample data. The following values are supported:
04012D             0206*  ; Value 	Description
04012D             0207*  ; 0 	8-bit signed, 16KHz
04012D             0208*  ; 1 	8-bit unsigned, 16KHz
04012D             0209*  vdu_buffer_to_sound:
04012D 22 46 01 04 0210*      ld (@bufferId),hl
040131 32 48 01 04 0211*      ld (@format),a
040135 21 40 01 04 0212*      ld hl,@cmd
040139 01 09 00 00 0213*      ld bc,@end-@cmd
04013D 5B DF       0214*      rst.lil $18
04013F C9          0215*      ret
040140 17 00 85    0216*  @cmd:       db 23, 0, 0x85
040143 00          0217*              db 0x00 ; a magic number that is always 0
040144 05          0218*              db 0x05 ; buffer to sound command
040145 02          0219*              db 0x02 ; a magic number that is always 2
040146 00 00       0220*  @bufferId:  dw 0x0000
040148 00          0221*  @format:    db 0x00
040149             0222*  @end:
040149             0223*  
040149             0224*  
040149             0225*  ; inputs: c = channel, b = volume, de = duration; hl = bufferId
040149             0226*  vdu_play_sample:
040149             0227*      ; populate input parameters
040149 79          0228*      ld a,c
04014A 32 74 01 04 0229*      ld (@channel0),a
04014E 32 7C 01 04 0230*      ld (@channel1),a
040152 78          0231*      ld a,b
040153 32 7E 01 04 0232*      ld (@volume),a
040157 ED 53 7F 01 0233*      ld (@frequency),de
       04          
04015C 22 77 01 04 0234*      ld (@bufferId),hl
040160             0235*      ; clean up byte that got stomped on by bufferId load from hl
040160 3E 17       0236*      ld a,23
040162 32 79 01 04 0237*      ld (@cmd1),a
040166             0238*      ; prep the vdu command string
040166 21 71 01 04 0239*      ld hl, @cmd0
04016A 01 12 00 00 0240*      ld bc, @end - @cmd0
04016E 5B DF       0241*      rst.lil $18
040170 C9          0242*      ret
040171 17 00 85    0243*  @cmd0:       db 23, 0, 0x85
040174 00          0244*  @channel0:   db 0x00
040175 04          0245*               db 0x04 ; set waveform command
040176 08          0246*  @waveform:   db 0x08 ; sample
040177 00 00       0247*  @bufferId:   dw 0x0000
040179 17 00 85    0248*  @cmd1:       db 23, 0, 0x85
04017C 00          0249*  @channel1:   db 0x00
04017D 00          0250*               db 0x00 ; play note command
04017E 00          0251*  @volume:     db 0x00
04017F 00 00       0252*  @frequency:  dw 0x00 ; no effect unless buffer has been set to tuneable sample
040181 00 00       0253*  @duration:   dw 0x0000 ; milliseconds
040183 00          0254*  @end:        db 0x00 ; padding
040184             0255*  
040184             0256*  
040184             0257*  vdu_enable_channels:
040184             0258*  ; enable all the channels
040184 21 8F 01 04 0259*      ld hl, enable_channels_cmd
040188 01 91 00 00 0260*      ld bc, enable_channels_end - enable_channels_cmd
04018C 5B DF       0261*      rst.lil $18
04018E C9          0262*      ret
04018F             0263*  enable_channels_cmd:
04018F 17 00 85 03 0264*      db 23, 0, $85, 3, 8
       08          
040194 17 00 85 04 0265*      db 23, 0, $85, 4, 8
       08          
040199 17 00 85 05 0266*      db 23, 0, $85, 5, 8
       08          
04019E 17 00 85 06 0267*      db 23, 0, $85, 6, 8
       08          
0401A3 17 00 85 07 0268*      db 23, 0, $85, 7, 8
       08          
0401A8 17 00 85 08 0269*      db 23, 0, $85, 8, 8
       08          
0401AD 17 00 85 09 0270*      db 23, 0, $85, 9, 8
       08          
0401B2 17 00 85 0A 0271*      db 23, 0, $85, 10, 8
       08          
0401B7 17 00 85 0B 0272*      db 23, 0, $85, 11, 8
       08          
0401BC 17 00 85 0C 0273*      db 23, 0, $85, 12, 8
       08          
0401C1 17 00 85 0D 0274*      db 23, 0, $85, 13, 8
       08          
0401C6 17 00 85 0E 0275*      db 23, 0, $85, 14, 8
       08          
0401CB 17 00 85 0F 0276*      db 23, 0, $85, 15, 8
       08          
0401D0 17 00 85 10 0277*      db 23, 0, $85, 16, 8
       08          
0401D5 17 00 85 11 0278*      db 23, 0, $85, 17, 8
       08          
0401DA 17 00 85 12 0279*      db 23, 0, $85, 18, 8
       08          
0401DF 17 00 85 13 0280*      db 23, 0, $85, 19, 8
       08          
0401E4 17 00 85 14 0281*      db 23, 0, $85, 20, 8
       08          
0401E9 17 00 85 15 0282*      db 23, 0, $85, 21, 8
       08          
0401EE 17 00 85 16 0283*      db 23, 0, $85, 22, 8
       08          
0401F3 17 00 85 17 0284*      db 23, 0, $85, 23, 8
       08          
0401F8 17 00 85 18 0285*      db 23, 0, $85, 24, 8
       08          
0401FD 17 00 85 19 0286*      db 23, 0, $85, 25, 8
       08          
040202 17 00 85 1A 0287*      db 23, 0, $85, 26, 8
       08          
040207 17 00 85 1B 0288*      db 23, 0, $85, 27, 8
       08          
04020C 17 00 85 1C 0289*      db 23, 0, $85, 28, 8
       08          
040211 17 00 85 1D 0290*      db 23, 0, $85, 29, 8
       08          
040216 17 00 85 1E 0291*      db 23, 0, $85, 30, 8
       08          
04021B 17 00 85 1F 0292*      db 23, 0, $85, 31, 8
       08          
040220             0293*  enable_channels_end:
040220             0013   	include "src/asm/images.asm"
040220             0001*  ; This file is created by build_91_asm_img_looad.py, do not edit it!
040220             0002*  
040220             0003*  ; cube buffer ids:
040220             0004*  BUF_10_004: equ 0x0100
040220             0005*  BUF_10_009: equ 0x0101
040220             0006*  BUF_10_010: equ 0x0102
040220             0007*  BUF_10_011: equ 0x0103
040220             0008*  BUF_10_012: equ 0x0104
040220             0009*  BUF_10_013: equ 0x0105
040220             0010*  BUF_10_014: equ 0x0106
040220             0011*  BUF_10_015: equ 0x0107
040220             0012*  BUF_10_016: equ 0x0108
040220             0013*  BUF_10_020: equ 0x0109
040220             0014*  BUF_10_024: equ 0x010A
040220             0015*  BUF_10_025: equ 0x010B
040220             0016*  BUF_10_026: equ 0x010C
040220             0017*  BUF_10_027: equ 0x010D
040220             0018*  BUF_10_028: equ 0x010E
040220             0019*  BUF_10_029: equ 0x010F
040220             0020*  BUF_10_032: equ 0x0110
040220             0021*  BUF_10_035: equ 0x0111
040220             0022*  BUF_10_036: equ 0x0112
040220             0023*  BUF_10_037: equ 0x0113
040220             0024*  BUF_10_038: equ 0x0114
040220             0025*  BUF_10_040: equ 0x0115
040220             0026*  BUF_10_042: equ 0x0116
040220             0027*  BUF_10_043: equ 0x0117
040220             0028*  BUF_10_044: equ 0x0118
040220             0029*  BUF_11_004: equ 0x0119
040220             0030*  BUF_11_009: equ 0x011A
040220             0031*  BUF_11_010: equ 0x011B
040220             0032*  BUF_11_011: equ 0x011C
040220             0033*  BUF_11_012: equ 0x011D
040220             0034*  BUF_11_013: equ 0x011E
040220             0035*  BUF_11_014: equ 0x011F
040220             0036*  BUF_11_015: equ 0x0120
040220             0037*  BUF_11_016: equ 0x0121
040220             0038*  BUF_11_020: equ 0x0122
040220             0039*  BUF_11_024: equ 0x0123
040220             0040*  BUF_11_025: equ 0x0124
040220             0041*  BUF_11_026: equ 0x0125
040220             0042*  BUF_11_027: equ 0x0126
040220             0043*  BUF_11_028: equ 0x0127
040220             0044*  BUF_11_029: equ 0x0128
040220             0045*  BUF_11_032: equ 0x0129
040220             0046*  BUF_11_035: equ 0x012A
040220             0047*  BUF_11_036: equ 0x012B
040220             0048*  BUF_11_037: equ 0x012C
040220             0049*  BUF_11_038: equ 0x012D
040220             0050*  BUF_11_040: equ 0x012E
040220             0051*  BUF_11_042: equ 0x012F
040220             0052*  BUF_11_043: equ 0x0130
040220             0053*  BUF_11_044: equ 0x0131
040220             0054*  BUF_12_004: equ 0x0132
040220             0055*  BUF_12_009: equ 0x0133
040220             0056*  BUF_12_010: equ 0x0134
040220             0057*  BUF_12_011: equ 0x0135
040220             0058*  BUF_12_012: equ 0x0136
040220             0059*  BUF_12_013: equ 0x0137
040220             0060*  BUF_12_014: equ 0x0138
040220             0061*  BUF_12_015: equ 0x0139
040220             0062*  BUF_12_016: equ 0x013A
040220             0063*  BUF_12_020: equ 0x013B
040220             0064*  BUF_12_024: equ 0x013C
040220             0065*  BUF_12_025: equ 0x013D
040220             0066*  BUF_12_026: equ 0x013E
040220             0067*  BUF_12_027: equ 0x013F
040220             0068*  BUF_12_028: equ 0x0140
040220             0069*  BUF_12_029: equ 0x0141
040220             0070*  BUF_12_032: equ 0x0142
040220             0071*  BUF_12_035: equ 0x0143
040220             0072*  BUF_12_036: equ 0x0144
040220             0073*  BUF_12_037: equ 0x0145
040220             0074*  BUF_12_038: equ 0x0146
040220             0075*  BUF_12_040: equ 0x0147
040220             0076*  BUF_12_042: equ 0x0148
040220             0077*  BUF_12_043: equ 0x0149
040220             0078*  BUF_12_044: equ 0x014A
040220             0079*  BUF_13_004: equ 0x014B
040220             0080*  BUF_13_009: equ 0x014C
040220             0081*  BUF_13_010: equ 0x014D
040220             0082*  BUF_13_011: equ 0x014E
040220             0083*  BUF_13_012: equ 0x014F
040220             0084*  BUF_13_013: equ 0x0150
040220             0085*  BUF_13_014: equ 0x0151
040220             0086*  BUF_13_015: equ 0x0152
040220             0087*  BUF_13_016: equ 0x0153
040220             0088*  BUF_13_020: equ 0x0154
040220             0089*  BUF_13_024: equ 0x0155
040220             0090*  BUF_13_025: equ 0x0156
040220             0091*  BUF_13_026: equ 0x0157
040220             0092*  BUF_13_027: equ 0x0158
040220             0093*  BUF_13_028: equ 0x0159
040220             0094*  BUF_13_029: equ 0x015A
040220             0095*  BUF_13_032: equ 0x015B
040220             0096*  BUF_13_035: equ 0x015C
040220             0097*  BUF_13_036: equ 0x015D
040220             0098*  BUF_13_037: equ 0x015E
040220             0099*  BUF_13_038: equ 0x015F
040220             0100*  BUF_13_040: equ 0x0160
040220             0101*  BUF_13_042: equ 0x0161
040220             0102*  BUF_13_043: equ 0x0162
040220             0103*  BUF_13_044: equ 0x0163
040220             0104*  BUF_14_004: equ 0x0164
040220             0105*  BUF_14_009: equ 0x0165
040220             0106*  BUF_14_010: equ 0x0166
040220             0107*  BUF_14_011: equ 0x0167
040220             0108*  BUF_14_012: equ 0x0168
040220             0109*  BUF_14_013: equ 0x0169
040220             0110*  BUF_14_014: equ 0x016A
040220             0111*  BUF_14_015: equ 0x016B
040220             0112*  BUF_14_016: equ 0x016C
040220             0113*  BUF_14_020: equ 0x016D
040220             0114*  BUF_14_024: equ 0x016E
040220             0115*  BUF_14_025: equ 0x016F
040220             0116*  BUF_14_026: equ 0x0170
040220             0117*  BUF_14_027: equ 0x0171
040220             0118*  BUF_14_028: equ 0x0172
040220             0119*  BUF_14_029: equ 0x0173
040220             0120*  BUF_14_032: equ 0x0174
040220             0121*  BUF_14_035: equ 0x0175
040220             0122*  BUF_14_036: equ 0x0176
040220             0123*  BUF_14_037: equ 0x0177
040220             0124*  BUF_14_038: equ 0x0178
040220             0125*  BUF_14_040: equ 0x0179
040220             0126*  BUF_14_042: equ 0x017A
040220             0127*  BUF_14_043: equ 0x017B
040220             0128*  BUF_14_044: equ 0x017C
040220             0129*  BUF_15_004: equ 0x017D
040220             0130*  BUF_15_009: equ 0x017E
040220             0131*  BUF_15_010: equ 0x017F
040220             0132*  BUF_15_011: equ 0x0180
040220             0133*  BUF_15_012: equ 0x0181
040220             0134*  BUF_15_013: equ 0x0182
040220             0135*  BUF_15_014: equ 0x0183
040220             0136*  BUF_15_015: equ 0x0184
040220             0137*  BUF_15_016: equ 0x0185
040220             0138*  BUF_15_020: equ 0x0186
040220             0139*  BUF_15_024: equ 0x0187
040220             0140*  BUF_15_025: equ 0x0188
040220             0141*  BUF_15_026: equ 0x0189
040220             0142*  BUF_15_027: equ 0x018A
040220             0143*  BUF_15_028: equ 0x018B
040220             0144*  BUF_15_029: equ 0x018C
040220             0145*  BUF_15_032: equ 0x018D
040220             0146*  BUF_15_035: equ 0x018E
040220             0147*  BUF_15_036: equ 0x018F
040220             0148*  BUF_15_037: equ 0x0190
040220             0149*  BUF_15_038: equ 0x0191
040220             0150*  BUF_15_040: equ 0x0192
040220             0151*  BUF_15_042: equ 0x0193
040220             0152*  BUF_15_043: equ 0x0194
040220             0153*  BUF_15_044: equ 0x0195
040220             0154*  BUF_16_004: equ 0x0196
040220             0155*  BUF_16_009: equ 0x0197
040220             0156*  BUF_16_010: equ 0x0198
040220             0157*  BUF_16_011: equ 0x0199
040220             0158*  BUF_16_012: equ 0x019A
040220             0159*  BUF_16_013: equ 0x019B
040220             0160*  BUF_16_014: equ 0x019C
040220             0161*  BUF_16_015: equ 0x019D
040220             0162*  BUF_16_016: equ 0x019E
040220             0163*  BUF_16_020: equ 0x019F
040220             0164*  BUF_16_024: equ 0x01A0
040220             0165*  BUF_16_025: equ 0x01A1
040220             0166*  BUF_16_026: equ 0x01A2
040220             0167*  BUF_16_027: equ 0x01A3
040220             0168*  BUF_16_028: equ 0x01A4
040220             0169*  BUF_16_029: equ 0x01A5
040220             0170*  BUF_16_032: equ 0x01A6
040220             0171*  BUF_16_035: equ 0x01A7
040220             0172*  BUF_16_036: equ 0x01A8
040220             0173*  BUF_16_037: equ 0x01A9
040220             0174*  BUF_16_038: equ 0x01AA
040220             0175*  BUF_16_040: equ 0x01AB
040220             0176*  BUF_16_042: equ 0x01AC
040220             0177*  BUF_16_043: equ 0x01AD
040220             0178*  BUF_16_044: equ 0x01AE
040220             0179*  BUF_17_004: equ 0x01AF
040220             0180*  BUF_17_009: equ 0x01B0
040220             0181*  BUF_17_010: equ 0x01B1
040220             0182*  BUF_17_011: equ 0x01B2
040220             0183*  BUF_17_012: equ 0x01B3
040220             0184*  BUF_17_013: equ 0x01B4
040220             0185*  BUF_17_014: equ 0x01B5
040220             0186*  BUF_17_015: equ 0x01B6
040220             0187*  BUF_17_016: equ 0x01B7
040220             0188*  BUF_17_020: equ 0x01B8
040220             0189*  BUF_17_024: equ 0x01B9
040220             0190*  BUF_17_025: equ 0x01BA
040220             0191*  BUF_17_026: equ 0x01BB
040220             0192*  BUF_17_027: equ 0x01BC
040220             0193*  BUF_17_028: equ 0x01BD
040220             0194*  BUF_17_029: equ 0x01BE
040220             0195*  BUF_17_032: equ 0x01BF
040220             0196*  BUF_17_035: equ 0x01C0
040220             0197*  BUF_17_036: equ 0x01C1
040220             0198*  BUF_17_037: equ 0x01C2
040220             0199*  BUF_17_038: equ 0x01C3
040220             0200*  BUF_17_040: equ 0x01C4
040220             0201*  BUF_17_042: equ 0x01C5
040220             0202*  BUF_17_043: equ 0x01C6
040220             0203*  BUF_17_044: equ 0x01C7
040220             0204*  BUF_57_004: equ 0x01C8
040220             0205*  BUF_57_009: equ 0x01C9
040220             0206*  BUF_57_010: equ 0x01CA
040220             0207*  BUF_57_011: equ 0x01CB
040220             0208*  BUF_57_012: equ 0x01CC
040220             0209*  BUF_57_013: equ 0x01CD
040220             0210*  BUF_57_014: equ 0x01CE
040220             0211*  BUF_57_015: equ 0x01CF
040220             0212*  BUF_57_016: equ 0x01D0
040220             0213*  BUF_57_020: equ 0x01D1
040220             0214*  BUF_57_024: equ 0x01D2
040220             0215*  BUF_57_025: equ 0x01D3
040220             0216*  BUF_57_026: equ 0x01D4
040220             0217*  BUF_57_027: equ 0x01D5
040220             0218*  BUF_57_028: equ 0x01D6
040220             0219*  BUF_57_029: equ 0x01D7
040220             0220*  BUF_57_032: equ 0x01D8
040220             0221*  BUF_57_035: equ 0x01D9
040220             0222*  BUF_57_036: equ 0x01DA
040220             0223*  BUF_57_037: equ 0x01DB
040220             0224*  BUF_57_038: equ 0x01DC
040220             0225*  BUF_57_040: equ 0x01DD
040220             0226*  BUF_57_042: equ 0x01DE
040220             0227*  BUF_57_043: equ 0x01DF
040220             0228*  BUF_57_044: equ 0x01E0
040220             0229*  BUF_58_004: equ 0x01E1
040220             0230*  BUF_58_009: equ 0x01E2
040220             0231*  BUF_58_010: equ 0x01E3
040220             0232*  BUF_58_011: equ 0x01E4
040220             0233*  BUF_58_012: equ 0x01E5
040220             0234*  BUF_58_013: equ 0x01E6
040220             0235*  BUF_58_014: equ 0x01E7
040220             0236*  BUF_58_015: equ 0x01E8
040220             0237*  BUF_58_016: equ 0x01E9
040220             0238*  BUF_58_020: equ 0x01EA
040220             0239*  BUF_58_024: equ 0x01EB
040220             0240*  BUF_58_025: equ 0x01EC
040220             0241*  BUF_58_026: equ 0x01ED
040220             0242*  BUF_58_027: equ 0x01EE
040220             0243*  BUF_58_028: equ 0x01EF
040220             0244*  BUF_58_029: equ 0x01F0
040220             0245*  BUF_58_032: equ 0x01F1
040220             0246*  BUF_58_035: equ 0x01F2
040220             0247*  BUF_58_036: equ 0x01F3
040220             0248*  BUF_58_037: equ 0x01F4
040220             0249*  BUF_58_038: equ 0x01F5
040220             0250*  BUF_58_040: equ 0x01F6
040220             0251*  BUF_58_042: equ 0x01F7
040220             0252*  BUF_58_043: equ 0x01F8
040220             0253*  BUF_58_044: equ 0x01F9
040220             0254*  BUF_59_004: equ 0x01FA
040220             0255*  BUF_59_009: equ 0x01FB
040220             0256*  BUF_59_010: equ 0x01FC
040220             0257*  BUF_59_011: equ 0x01FD
040220             0258*  BUF_59_012: equ 0x01FE
040220             0259*  BUF_59_013: equ 0x01FF
040220             0260*  BUF_59_014: equ 0x0200
040220             0261*  BUF_59_015: equ 0x0201
040220             0262*  BUF_59_016: equ 0x0202
040220             0263*  BUF_59_020: equ 0x0203
040220             0264*  BUF_59_024: equ 0x0204
040220             0265*  BUF_59_025: equ 0x0205
040220             0266*  BUF_59_026: equ 0x0206
040220             0267*  BUF_59_027: equ 0x0207
040220             0268*  BUF_59_028: equ 0x0208
040220             0269*  BUF_59_029: equ 0x0209
040220             0270*  BUF_59_032: equ 0x020A
040220             0271*  BUF_59_035: equ 0x020B
040220             0272*  BUF_59_036: equ 0x020C
040220             0273*  BUF_59_037: equ 0x020D
040220             0274*  BUF_59_038: equ 0x020E
040220             0275*  BUF_59_040: equ 0x020F
040220             0276*  BUF_59_042: equ 0x0210
040220             0277*  BUF_59_043: equ 0x0211
040220             0278*  BUF_59_044: equ 0x0212
040220             0279*  
040220             0280*  cube_num_panels: equ 275
040220             0281*  
040220             0282*  ; cube buffer id reverse lookup:
040220             0283*  cube_buffer_id_lut:
040220 00 01 00    0284*  	dl BUF_10_004
040223 01 01 00    0285*  	dl BUF_10_009
040226 02 01 00    0286*  	dl BUF_10_010
040229 03 01 00    0287*  	dl BUF_10_011
04022C 04 01 00    0288*  	dl BUF_10_012
04022F 05 01 00    0289*  	dl BUF_10_013
040232 06 01 00    0290*  	dl BUF_10_014
040235 07 01 00    0291*  	dl BUF_10_015
040238 08 01 00    0292*  	dl BUF_10_016
04023B 09 01 00    0293*  	dl BUF_10_020
04023E 0A 01 00    0294*  	dl BUF_10_024
040241 0B 01 00    0295*  	dl BUF_10_025
040244 0C 01 00    0296*  	dl BUF_10_026
040247 0D 01 00    0297*  	dl BUF_10_027
04024A 0E 01 00    0298*  	dl BUF_10_028
04024D 0F 01 00    0299*  	dl BUF_10_029
040250 10 01 00    0300*  	dl BUF_10_032
040253 11 01 00    0301*  	dl BUF_10_035
040256 12 01 00    0302*  	dl BUF_10_036
040259 13 01 00    0303*  	dl BUF_10_037
04025C 14 01 00    0304*  	dl BUF_10_038
04025F 15 01 00    0305*  	dl BUF_10_040
040262 16 01 00    0306*  	dl BUF_10_042
040265 17 01 00    0307*  	dl BUF_10_043
040268 18 01 00    0308*  	dl BUF_10_044
04026B 19 01 00    0309*  	dl BUF_11_004
04026E 1A 01 00    0310*  	dl BUF_11_009
040271 1B 01 00    0311*  	dl BUF_11_010
040274 1C 01 00    0312*  	dl BUF_11_011
040277 1D 01 00    0313*  	dl BUF_11_012
04027A 1E 01 00    0314*  	dl BUF_11_013
04027D 1F 01 00    0315*  	dl BUF_11_014
040280 20 01 00    0316*  	dl BUF_11_015
040283 21 01 00    0317*  	dl BUF_11_016
040286 22 01 00    0318*  	dl BUF_11_020
040289 23 01 00    0319*  	dl BUF_11_024
04028C 24 01 00    0320*  	dl BUF_11_025
04028F 25 01 00    0321*  	dl BUF_11_026
040292 26 01 00    0322*  	dl BUF_11_027
040295 27 01 00    0323*  	dl BUF_11_028
040298 28 01 00    0324*  	dl BUF_11_029
04029B 29 01 00    0325*  	dl BUF_11_032
04029E 2A 01 00    0326*  	dl BUF_11_035
0402A1 2B 01 00    0327*  	dl BUF_11_036
0402A4 2C 01 00    0328*  	dl BUF_11_037
0402A7 2D 01 00    0329*  	dl BUF_11_038
0402AA 2E 01 00    0330*  	dl BUF_11_040
0402AD 2F 01 00    0331*  	dl BUF_11_042
0402B0 30 01 00    0332*  	dl BUF_11_043
0402B3 31 01 00    0333*  	dl BUF_11_044
0402B6 32 01 00    0334*  	dl BUF_12_004
0402B9 33 01 00    0335*  	dl BUF_12_009
0402BC 34 01 00    0336*  	dl BUF_12_010
0402BF 35 01 00    0337*  	dl BUF_12_011
0402C2 36 01 00    0338*  	dl BUF_12_012
0402C5 37 01 00    0339*  	dl BUF_12_013
0402C8 38 01 00    0340*  	dl BUF_12_014
0402CB 39 01 00    0341*  	dl BUF_12_015
0402CE 3A 01 00    0342*  	dl BUF_12_016
0402D1 3B 01 00    0343*  	dl BUF_12_020
0402D4 3C 01 00    0344*  	dl BUF_12_024
0402D7 3D 01 00    0345*  	dl BUF_12_025
0402DA 3E 01 00    0346*  	dl BUF_12_026
0402DD 3F 01 00    0347*  	dl BUF_12_027
0402E0 40 01 00    0348*  	dl BUF_12_028
0402E3 41 01 00    0349*  	dl BUF_12_029
0402E6 42 01 00    0350*  	dl BUF_12_032
0402E9 43 01 00    0351*  	dl BUF_12_035
0402EC 44 01 00    0352*  	dl BUF_12_036
0402EF 45 01 00    0353*  	dl BUF_12_037
0402F2 46 01 00    0354*  	dl BUF_12_038
0402F5 47 01 00    0355*  	dl BUF_12_040
0402F8 48 01 00    0356*  	dl BUF_12_042
0402FB 49 01 00    0357*  	dl BUF_12_043
0402FE 4A 01 00    0358*  	dl BUF_12_044
040301 4B 01 00    0359*  	dl BUF_13_004
040304 4C 01 00    0360*  	dl BUF_13_009
040307 4D 01 00    0361*  	dl BUF_13_010
04030A 4E 01 00    0362*  	dl BUF_13_011
04030D 4F 01 00    0363*  	dl BUF_13_012
040310 50 01 00    0364*  	dl BUF_13_013
040313 51 01 00    0365*  	dl BUF_13_014
040316 52 01 00    0366*  	dl BUF_13_015
040319 53 01 00    0367*  	dl BUF_13_016
04031C 54 01 00    0368*  	dl BUF_13_020
04031F 55 01 00    0369*  	dl BUF_13_024
040322 56 01 00    0370*  	dl BUF_13_025
040325 57 01 00    0371*  	dl BUF_13_026
040328 58 01 00    0372*  	dl BUF_13_027
04032B 59 01 00    0373*  	dl BUF_13_028
04032E 5A 01 00    0374*  	dl BUF_13_029
040331 5B 01 00    0375*  	dl BUF_13_032
040334 5C 01 00    0376*  	dl BUF_13_035
040337 5D 01 00    0377*  	dl BUF_13_036
04033A 5E 01 00    0378*  	dl BUF_13_037
04033D 5F 01 00    0379*  	dl BUF_13_038
040340 60 01 00    0380*  	dl BUF_13_040
040343 61 01 00    0381*  	dl BUF_13_042
040346 62 01 00    0382*  	dl BUF_13_043
040349 63 01 00    0383*  	dl BUF_13_044
04034C 64 01 00    0384*  	dl BUF_14_004
04034F 65 01 00    0385*  	dl BUF_14_009
040352 66 01 00    0386*  	dl BUF_14_010
040355 67 01 00    0387*  	dl BUF_14_011
040358 68 01 00    0388*  	dl BUF_14_012
04035B 69 01 00    0389*  	dl BUF_14_013
04035E 6A 01 00    0390*  	dl BUF_14_014
040361 6B 01 00    0391*  	dl BUF_14_015
040364 6C 01 00    0392*  	dl BUF_14_016
040367 6D 01 00    0393*  	dl BUF_14_020
04036A 6E 01 00    0394*  	dl BUF_14_024
04036D 6F 01 00    0395*  	dl BUF_14_025
040370 70 01 00    0396*  	dl BUF_14_026
040373 71 01 00    0397*  	dl BUF_14_027
040376 72 01 00    0398*  	dl BUF_14_028
040379 73 01 00    0399*  	dl BUF_14_029
04037C 74 01 00    0400*  	dl BUF_14_032
04037F 75 01 00    0401*  	dl BUF_14_035
040382 76 01 00    0402*  	dl BUF_14_036
040385 77 01 00    0403*  	dl BUF_14_037
040388 78 01 00    0404*  	dl BUF_14_038
04038B 79 01 00    0405*  	dl BUF_14_040
04038E 7A 01 00    0406*  	dl BUF_14_042
040391 7B 01 00    0407*  	dl BUF_14_043
040394 7C 01 00    0408*  	dl BUF_14_044
040397 7D 01 00    0409*  	dl BUF_15_004
04039A 7E 01 00    0410*  	dl BUF_15_009
04039D 7F 01 00    0411*  	dl BUF_15_010
0403A0 80 01 00    0412*  	dl BUF_15_011
0403A3 81 01 00    0413*  	dl BUF_15_012
0403A6 82 01 00    0414*  	dl BUF_15_013
0403A9 83 01 00    0415*  	dl BUF_15_014
0403AC 84 01 00    0416*  	dl BUF_15_015
0403AF 85 01 00    0417*  	dl BUF_15_016
0403B2 86 01 00    0418*  	dl BUF_15_020
0403B5 87 01 00    0419*  	dl BUF_15_024
0403B8 88 01 00    0420*  	dl BUF_15_025
0403BB 89 01 00    0421*  	dl BUF_15_026
0403BE 8A 01 00    0422*  	dl BUF_15_027
0403C1 8B 01 00    0423*  	dl BUF_15_028
0403C4 8C 01 00    0424*  	dl BUF_15_029
0403C7 8D 01 00    0425*  	dl BUF_15_032
0403CA 8E 01 00    0426*  	dl BUF_15_035
0403CD 8F 01 00    0427*  	dl BUF_15_036
0403D0 90 01 00    0428*  	dl BUF_15_037
0403D3 91 01 00    0429*  	dl BUF_15_038
0403D6 92 01 00    0430*  	dl BUF_15_040
0403D9 93 01 00    0431*  	dl BUF_15_042
0403DC 94 01 00    0432*  	dl BUF_15_043
0403DF 95 01 00    0433*  	dl BUF_15_044
0403E2 96 01 00    0434*  	dl BUF_16_004
0403E5 97 01 00    0435*  	dl BUF_16_009
0403E8 98 01 00    0436*  	dl BUF_16_010
0403EB 99 01 00    0437*  	dl BUF_16_011
0403EE 9A 01 00    0438*  	dl BUF_16_012
0403F1 9B 01 00    0439*  	dl BUF_16_013
0403F4 9C 01 00    0440*  	dl BUF_16_014
0403F7 9D 01 00    0441*  	dl BUF_16_015
0403FA 9E 01 00    0442*  	dl BUF_16_016
0403FD 9F 01 00    0443*  	dl BUF_16_020
040400 A0 01 00    0444*  	dl BUF_16_024
040403 A1 01 00    0445*  	dl BUF_16_025
040406 A2 01 00    0446*  	dl BUF_16_026
040409 A3 01 00    0447*  	dl BUF_16_027
04040C A4 01 00    0448*  	dl BUF_16_028
04040F A5 01 00    0449*  	dl BUF_16_029
040412 A6 01 00    0450*  	dl BUF_16_032
040415 A7 01 00    0451*  	dl BUF_16_035
040418 A8 01 00    0452*  	dl BUF_16_036
04041B A9 01 00    0453*  	dl BUF_16_037
04041E AA 01 00    0454*  	dl BUF_16_038
040421 AB 01 00    0455*  	dl BUF_16_040
040424 AC 01 00    0456*  	dl BUF_16_042
040427 AD 01 00    0457*  	dl BUF_16_043
04042A AE 01 00    0458*  	dl BUF_16_044
04042D AF 01 00    0459*  	dl BUF_17_004
040430 B0 01 00    0460*  	dl BUF_17_009
040433 B1 01 00    0461*  	dl BUF_17_010
040436 B2 01 00    0462*  	dl BUF_17_011
040439 B3 01 00    0463*  	dl BUF_17_012
04043C B4 01 00    0464*  	dl BUF_17_013
04043F B5 01 00    0465*  	dl BUF_17_014
040442 B6 01 00    0466*  	dl BUF_17_015
040445 B7 01 00    0467*  	dl BUF_17_016
040448 B8 01 00    0468*  	dl BUF_17_020
04044B B9 01 00    0469*  	dl BUF_17_024
04044E BA 01 00    0470*  	dl BUF_17_025
040451 BB 01 00    0471*  	dl BUF_17_026
040454 BC 01 00    0472*  	dl BUF_17_027
040457 BD 01 00    0473*  	dl BUF_17_028
04045A BE 01 00    0474*  	dl BUF_17_029
04045D BF 01 00    0475*  	dl BUF_17_032
040460 C0 01 00    0476*  	dl BUF_17_035
040463 C1 01 00    0477*  	dl BUF_17_036
040466 C2 01 00    0478*  	dl BUF_17_037
040469 C3 01 00    0479*  	dl BUF_17_038
04046C C4 01 00    0480*  	dl BUF_17_040
04046F C5 01 00    0481*  	dl BUF_17_042
040472 C6 01 00    0482*  	dl BUF_17_043
040475 C7 01 00    0483*  	dl BUF_17_044
040478 C8 01 00    0484*  	dl BUF_57_004
04047B C9 01 00    0485*  	dl BUF_57_009
04047E CA 01 00    0486*  	dl BUF_57_010
040481 CB 01 00    0487*  	dl BUF_57_011
040484 CC 01 00    0488*  	dl BUF_57_012
040487 CD 01 00    0489*  	dl BUF_57_013
04048A CE 01 00    0490*  	dl BUF_57_014
04048D CF 01 00    0491*  	dl BUF_57_015
040490 D0 01 00    0492*  	dl BUF_57_016
040493 D1 01 00    0493*  	dl BUF_57_020
040496 D2 01 00    0494*  	dl BUF_57_024
040499 D3 01 00    0495*  	dl BUF_57_025
04049C D4 01 00    0496*  	dl BUF_57_026
04049F D5 01 00    0497*  	dl BUF_57_027
0404A2 D6 01 00    0498*  	dl BUF_57_028
0404A5 D7 01 00    0499*  	dl BUF_57_029
0404A8 D8 01 00    0500*  	dl BUF_57_032
0404AB D9 01 00    0501*  	dl BUF_57_035
0404AE DA 01 00    0502*  	dl BUF_57_036
0404B1 DB 01 00    0503*  	dl BUF_57_037
0404B4 DC 01 00    0504*  	dl BUF_57_038
0404B7 DD 01 00    0505*  	dl BUF_57_040
0404BA DE 01 00    0506*  	dl BUF_57_042
0404BD DF 01 00    0507*  	dl BUF_57_043
0404C0 E0 01 00    0508*  	dl BUF_57_044
0404C3 E1 01 00    0509*  	dl BUF_58_004
0404C6 E2 01 00    0510*  	dl BUF_58_009
0404C9 E3 01 00    0511*  	dl BUF_58_010
0404CC E4 01 00    0512*  	dl BUF_58_011
0404CF E5 01 00    0513*  	dl BUF_58_012
0404D2 E6 01 00    0514*  	dl BUF_58_013
0404D5 E7 01 00    0515*  	dl BUF_58_014
0404D8 E8 01 00    0516*  	dl BUF_58_015
0404DB E9 01 00    0517*  	dl BUF_58_016
0404DE EA 01 00    0518*  	dl BUF_58_020
0404E1 EB 01 00    0519*  	dl BUF_58_024
0404E4 EC 01 00    0520*  	dl BUF_58_025
0404E7 ED 01 00    0521*  	dl BUF_58_026
0404EA EE 01 00    0522*  	dl BUF_58_027
0404ED EF 01 00    0523*  	dl BUF_58_028
0404F0 F0 01 00    0524*  	dl BUF_58_029
0404F3 F1 01 00    0525*  	dl BUF_58_032
0404F6 F2 01 00    0526*  	dl BUF_58_035
0404F9 F3 01 00    0527*  	dl BUF_58_036
0404FC F4 01 00    0528*  	dl BUF_58_037
0404FF F5 01 00    0529*  	dl BUF_58_038
040502 F6 01 00    0530*  	dl BUF_58_040
040505 F7 01 00    0531*  	dl BUF_58_042
040508 F8 01 00    0532*  	dl BUF_58_043
04050B F9 01 00    0533*  	dl BUF_58_044
04050E FA 01 00    0534*  	dl BUF_59_004
040511 FB 01 00    0535*  	dl BUF_59_009
040514 FC 01 00    0536*  	dl BUF_59_010
040517 FD 01 00    0537*  	dl BUF_59_011
04051A FE 01 00    0538*  	dl BUF_59_012
04051D FF 01 00    0539*  	dl BUF_59_013
040520 00 02 00    0540*  	dl BUF_59_014
040523 01 02 00    0541*  	dl BUF_59_015
040526 02 02 00    0542*  	dl BUF_59_016
040529 03 02 00    0543*  	dl BUF_59_020
04052C 04 02 00    0544*  	dl BUF_59_024
04052F 05 02 00    0545*  	dl BUF_59_025
040532 06 02 00    0546*  	dl BUF_59_026
040535 07 02 00    0547*  	dl BUF_59_027
040538 08 02 00    0548*  	dl BUF_59_028
04053B 09 02 00    0549*  	dl BUF_59_029
04053E 0A 02 00    0550*  	dl BUF_59_032
040541 0B 02 00    0551*  	dl BUF_59_035
040544 0C 02 00    0552*  	dl BUF_59_036
040547 0D 02 00    0553*  	dl BUF_59_037
04054A 0E 02 00    0554*  	dl BUF_59_038
04054D 0F 02 00    0555*  	dl BUF_59_040
040550 10 02 00    0556*  	dl BUF_59_042
040553 11 02 00    0557*  	dl BUF_59_043
040556 12 02 00    0558*  	dl BUF_59_044
040559             0559*  
040559             0560*  ; cube load routines jump table:
040559             0561*  cube_load_panels_table:
040559 92 08 04    0562*  	dl ld_10_004
04055C BC 08 04    0563*  	dl ld_10_009
04055F E6 08 04    0564*  	dl ld_10_010
040562 10 09 04    0565*  	dl ld_10_011
040565 3A 09 04    0566*  	dl ld_10_012
040568 64 09 04    0567*  	dl ld_10_013
04056B 8E 09 04    0568*  	dl ld_10_014
04056E B8 09 04    0569*  	dl ld_10_015
040571 E2 09 04    0570*  	dl ld_10_016
040574 0C 0A 04    0571*  	dl ld_10_020
040577 36 0A 04    0572*  	dl ld_10_024
04057A 60 0A 04    0573*  	dl ld_10_025
04057D 8A 0A 04    0574*  	dl ld_10_026
040580 B4 0A 04    0575*  	dl ld_10_027
040583 DE 0A 04    0576*  	dl ld_10_028
040586 08 0B 04    0577*  	dl ld_10_029
040589 32 0B 04    0578*  	dl ld_10_032
04058C 5C 0B 04    0579*  	dl ld_10_035
04058F 86 0B 04    0580*  	dl ld_10_036
040592 B0 0B 04    0581*  	dl ld_10_037
040595 DA 0B 04    0582*  	dl ld_10_038
040598 04 0C 04    0583*  	dl ld_10_040
04059B 2E 0C 04    0584*  	dl ld_10_042
04059E 58 0C 04    0585*  	dl ld_10_043
0405A1 82 0C 04    0586*  	dl ld_10_044
0405A4 AC 0C 04    0587*  	dl ld_11_004
0405A7 D6 0C 04    0588*  	dl ld_11_009
0405AA 00 0D 04    0589*  	dl ld_11_010
0405AD 2A 0D 04    0590*  	dl ld_11_011
0405B0 54 0D 04    0591*  	dl ld_11_012
0405B3 7E 0D 04    0592*  	dl ld_11_013
0405B6 A8 0D 04    0593*  	dl ld_11_014
0405B9 D2 0D 04    0594*  	dl ld_11_015
0405BC FC 0D 04    0595*  	dl ld_11_016
0405BF 26 0E 04    0596*  	dl ld_11_020
0405C2 50 0E 04    0597*  	dl ld_11_024
0405C5 7A 0E 04    0598*  	dl ld_11_025
0405C8 A4 0E 04    0599*  	dl ld_11_026
0405CB CE 0E 04    0600*  	dl ld_11_027
0405CE F8 0E 04    0601*  	dl ld_11_028
0405D1 22 0F 04    0602*  	dl ld_11_029
0405D4 4C 0F 04    0603*  	dl ld_11_032
0405D7 76 0F 04    0604*  	dl ld_11_035
0405DA A0 0F 04    0605*  	dl ld_11_036
0405DD CA 0F 04    0606*  	dl ld_11_037
0405E0 F4 0F 04    0607*  	dl ld_11_038
0405E3 1E 10 04    0608*  	dl ld_11_040
0405E6 48 10 04    0609*  	dl ld_11_042
0405E9 72 10 04    0610*  	dl ld_11_043
0405EC 9C 10 04    0611*  	dl ld_11_044
0405EF C6 10 04    0612*  	dl ld_12_004
0405F2 F0 10 04    0613*  	dl ld_12_009
0405F5 1A 11 04    0614*  	dl ld_12_010
0405F8 44 11 04    0615*  	dl ld_12_011
0405FB 6E 11 04    0616*  	dl ld_12_012
0405FE 98 11 04    0617*  	dl ld_12_013
040601 C2 11 04    0618*  	dl ld_12_014
040604 EC 11 04    0619*  	dl ld_12_015
040607 16 12 04    0620*  	dl ld_12_016
04060A 40 12 04    0621*  	dl ld_12_020
04060D 6A 12 04    0622*  	dl ld_12_024
040610 94 12 04    0623*  	dl ld_12_025
040613 BE 12 04    0624*  	dl ld_12_026
040616 E8 12 04    0625*  	dl ld_12_027
040619 12 13 04    0626*  	dl ld_12_028
04061C 3C 13 04    0627*  	dl ld_12_029
04061F 66 13 04    0628*  	dl ld_12_032
040622 90 13 04    0629*  	dl ld_12_035
040625 BA 13 04    0630*  	dl ld_12_036
040628 E4 13 04    0631*  	dl ld_12_037
04062B 0E 14 04    0632*  	dl ld_12_038
04062E 38 14 04    0633*  	dl ld_12_040
040631 62 14 04    0634*  	dl ld_12_042
040634 8C 14 04    0635*  	dl ld_12_043
040637 B6 14 04    0636*  	dl ld_12_044
04063A E0 14 04    0637*  	dl ld_13_004
04063D 0A 15 04    0638*  	dl ld_13_009
040640 34 15 04    0639*  	dl ld_13_010
040643 5E 15 04    0640*  	dl ld_13_011
040646 88 15 04    0641*  	dl ld_13_012
040649 B2 15 04    0642*  	dl ld_13_013
04064C DC 15 04    0643*  	dl ld_13_014
04064F 06 16 04    0644*  	dl ld_13_015
040652 30 16 04    0645*  	dl ld_13_016
040655 5A 16 04    0646*  	dl ld_13_020
040658 84 16 04    0647*  	dl ld_13_024
04065B AE 16 04    0648*  	dl ld_13_025
04065E D8 16 04    0649*  	dl ld_13_026
040661 02 17 04    0650*  	dl ld_13_027
040664 2C 17 04    0651*  	dl ld_13_028
040667 56 17 04    0652*  	dl ld_13_029
04066A 80 17 04    0653*  	dl ld_13_032
04066D AA 17 04    0654*  	dl ld_13_035
040670 D4 17 04    0655*  	dl ld_13_036
040673 FE 17 04    0656*  	dl ld_13_037
040676 28 18 04    0657*  	dl ld_13_038
040679 52 18 04    0658*  	dl ld_13_040
04067C 7C 18 04    0659*  	dl ld_13_042
04067F A6 18 04    0660*  	dl ld_13_043
040682 D0 18 04    0661*  	dl ld_13_044
040685 FA 18 04    0662*  	dl ld_14_004
040688 24 19 04    0663*  	dl ld_14_009
04068B 4E 19 04    0664*  	dl ld_14_010
04068E 78 19 04    0665*  	dl ld_14_011
040691 A2 19 04    0666*  	dl ld_14_012
040694 CC 19 04    0667*  	dl ld_14_013
040697 F6 19 04    0668*  	dl ld_14_014
04069A 20 1A 04    0669*  	dl ld_14_015
04069D 4A 1A 04    0670*  	dl ld_14_016
0406A0 74 1A 04    0671*  	dl ld_14_020
0406A3 9E 1A 04    0672*  	dl ld_14_024
0406A6 C8 1A 04    0673*  	dl ld_14_025
0406A9 F2 1A 04    0674*  	dl ld_14_026
0406AC 1C 1B 04    0675*  	dl ld_14_027
0406AF 46 1B 04    0676*  	dl ld_14_028
0406B2 70 1B 04    0677*  	dl ld_14_029
0406B5 9A 1B 04    0678*  	dl ld_14_032
0406B8 C4 1B 04    0679*  	dl ld_14_035
0406BB EE 1B 04    0680*  	dl ld_14_036
0406BE 18 1C 04    0681*  	dl ld_14_037
0406C1 42 1C 04    0682*  	dl ld_14_038
0406C4 6C 1C 04    0683*  	dl ld_14_040
0406C7 96 1C 04    0684*  	dl ld_14_042
0406CA C0 1C 04    0685*  	dl ld_14_043
0406CD EA 1C 04    0686*  	dl ld_14_044
0406D0 14 1D 04    0687*  	dl ld_15_004
0406D3 3E 1D 04    0688*  	dl ld_15_009
0406D6 68 1D 04    0689*  	dl ld_15_010
0406D9 92 1D 04    0690*  	dl ld_15_011
0406DC BC 1D 04    0691*  	dl ld_15_012
0406DF E6 1D 04    0692*  	dl ld_15_013
0406E2 10 1E 04    0693*  	dl ld_15_014
0406E5 3A 1E 04    0694*  	dl ld_15_015
0406E8 64 1E 04    0695*  	dl ld_15_016
0406EB 8E 1E 04    0696*  	dl ld_15_020
0406EE B8 1E 04    0697*  	dl ld_15_024
0406F1 E2 1E 04    0698*  	dl ld_15_025
0406F4 0C 1F 04    0699*  	dl ld_15_026
0406F7 36 1F 04    0700*  	dl ld_15_027
0406FA 60 1F 04    0701*  	dl ld_15_028
0406FD 8A 1F 04    0702*  	dl ld_15_029
040700 B4 1F 04    0703*  	dl ld_15_032
040703 DE 1F 04    0704*  	dl ld_15_035
040706 08 20 04    0705*  	dl ld_15_036
040709 32 20 04    0706*  	dl ld_15_037
04070C 5C 20 04    0707*  	dl ld_15_038
04070F 86 20 04    0708*  	dl ld_15_040
040712 B0 20 04    0709*  	dl ld_15_042
040715 DA 20 04    0710*  	dl ld_15_043
040718 04 21 04    0711*  	dl ld_15_044
04071B 2E 21 04    0712*  	dl ld_16_004
04071E 58 21 04    0713*  	dl ld_16_009
040721 82 21 04    0714*  	dl ld_16_010
040724 AC 21 04    0715*  	dl ld_16_011
040727 D6 21 04    0716*  	dl ld_16_012
04072A 00 22 04    0717*  	dl ld_16_013
04072D 2A 22 04    0718*  	dl ld_16_014
040730 54 22 04    0719*  	dl ld_16_015
040733 7E 22 04    0720*  	dl ld_16_016
040736 A8 22 04    0721*  	dl ld_16_020
040739 D2 22 04    0722*  	dl ld_16_024
04073C FC 22 04    0723*  	dl ld_16_025
04073F 26 23 04    0724*  	dl ld_16_026
040742 50 23 04    0725*  	dl ld_16_027
040745 7A 23 04    0726*  	dl ld_16_028
040748 A4 23 04    0727*  	dl ld_16_029
04074B CE 23 04    0728*  	dl ld_16_032
04074E F8 23 04    0729*  	dl ld_16_035
040751 22 24 04    0730*  	dl ld_16_036
040754 4C 24 04    0731*  	dl ld_16_037
040757 76 24 04    0732*  	dl ld_16_038
04075A A0 24 04    0733*  	dl ld_16_040
04075D CA 24 04    0734*  	dl ld_16_042
040760 F4 24 04    0735*  	dl ld_16_043
040763 1E 25 04    0736*  	dl ld_16_044
040766 48 25 04    0737*  	dl ld_17_004
040769 72 25 04    0738*  	dl ld_17_009
04076C 9C 25 04    0739*  	dl ld_17_010
04076F C6 25 04    0740*  	dl ld_17_011
040772 F0 25 04    0741*  	dl ld_17_012
040775 1A 26 04    0742*  	dl ld_17_013
040778 44 26 04    0743*  	dl ld_17_014
04077B 6E 26 04    0744*  	dl ld_17_015
04077E 98 26 04    0745*  	dl ld_17_016
040781 C2 26 04    0746*  	dl ld_17_020
040784 EC 26 04    0747*  	dl ld_17_024
040787 16 27 04    0748*  	dl ld_17_025
04078A 40 27 04    0749*  	dl ld_17_026
04078D 6A 27 04    0750*  	dl ld_17_027
040790 94 27 04    0751*  	dl ld_17_028
040793 BE 27 04    0752*  	dl ld_17_029
040796 E8 27 04    0753*  	dl ld_17_032
040799 12 28 04    0754*  	dl ld_17_035
04079C 3C 28 04    0755*  	dl ld_17_036
04079F 66 28 04    0756*  	dl ld_17_037
0407A2 90 28 04    0757*  	dl ld_17_038
0407A5 BA 28 04    0758*  	dl ld_17_040
0407A8 E4 28 04    0759*  	dl ld_17_042
0407AB 0E 29 04    0760*  	dl ld_17_043
0407AE 38 29 04    0761*  	dl ld_17_044
0407B1 62 29 04    0762*  	dl ld_57_004
0407B4 8C 29 04    0763*  	dl ld_57_009
0407B7 B6 29 04    0764*  	dl ld_57_010
0407BA E0 29 04    0765*  	dl ld_57_011
0407BD 0A 2A 04    0766*  	dl ld_57_012
0407C0 34 2A 04    0767*  	dl ld_57_013
0407C3 5E 2A 04    0768*  	dl ld_57_014
0407C6 88 2A 04    0769*  	dl ld_57_015
0407C9 B2 2A 04    0770*  	dl ld_57_016
0407CC DC 2A 04    0771*  	dl ld_57_020
0407CF 06 2B 04    0772*  	dl ld_57_024
0407D2 30 2B 04    0773*  	dl ld_57_025
0407D5 5A 2B 04    0774*  	dl ld_57_026
0407D8 84 2B 04    0775*  	dl ld_57_027
0407DB AE 2B 04    0776*  	dl ld_57_028
0407DE D8 2B 04    0777*  	dl ld_57_029
0407E1 02 2C 04    0778*  	dl ld_57_032
0407E4 2C 2C 04    0779*  	dl ld_57_035
0407E7 56 2C 04    0780*  	dl ld_57_036
0407EA 80 2C 04    0781*  	dl ld_57_037
0407ED AA 2C 04    0782*  	dl ld_57_038
0407F0 D4 2C 04    0783*  	dl ld_57_040
0407F3 FE 2C 04    0784*  	dl ld_57_042
0407F6 28 2D 04    0785*  	dl ld_57_043
0407F9 52 2D 04    0786*  	dl ld_57_044
0407FC 7C 2D 04    0787*  	dl ld_58_004
0407FF A6 2D 04    0788*  	dl ld_58_009
040802 D0 2D 04    0789*  	dl ld_58_010
040805 FA 2D 04    0790*  	dl ld_58_011
040808 24 2E 04    0791*  	dl ld_58_012
04080B 4E 2E 04    0792*  	dl ld_58_013
04080E 78 2E 04    0793*  	dl ld_58_014
040811 A2 2E 04    0794*  	dl ld_58_015
040814 CC 2E 04    0795*  	dl ld_58_016
040817 F6 2E 04    0796*  	dl ld_58_020
04081A 20 2F 04    0797*  	dl ld_58_024
04081D 4A 2F 04    0798*  	dl ld_58_025
040820 74 2F 04    0799*  	dl ld_58_026
040823 9E 2F 04    0800*  	dl ld_58_027
040826 C8 2F 04    0801*  	dl ld_58_028
040829 F2 2F 04    0802*  	dl ld_58_029
04082C 1C 30 04    0803*  	dl ld_58_032
04082F 46 30 04    0804*  	dl ld_58_035
040832 70 30 04    0805*  	dl ld_58_036
040835 9A 30 04    0806*  	dl ld_58_037
040838 C4 30 04    0807*  	dl ld_58_038
04083B EE 30 04    0808*  	dl ld_58_040
04083E 18 31 04    0809*  	dl ld_58_042
040841 42 31 04    0810*  	dl ld_58_043
040844 6C 31 04    0811*  	dl ld_58_044
040847 96 31 04    0812*  	dl ld_59_004
04084A C0 31 04    0813*  	dl ld_59_009
04084D EA 31 04    0814*  	dl ld_59_010
040850 14 32 04    0815*  	dl ld_59_011
040853 3E 32 04    0816*  	dl ld_59_012
040856 68 32 04    0817*  	dl ld_59_013
040859 92 32 04    0818*  	dl ld_59_014
04085C BC 32 04    0819*  	dl ld_59_015
04085F E6 32 04    0820*  	dl ld_59_016
040862 10 33 04    0821*  	dl ld_59_020
040865 3A 33 04    0822*  	dl ld_59_024
040868 64 33 04    0823*  	dl ld_59_025
04086B 8E 33 04    0824*  	dl ld_59_026
04086E B8 33 04    0825*  	dl ld_59_027
040871 E2 33 04    0826*  	dl ld_59_028
040874 0C 34 04    0827*  	dl ld_59_029
040877 36 34 04    0828*  	dl ld_59_032
04087A 60 34 04    0829*  	dl ld_59_035
04087D 8A 34 04    0830*  	dl ld_59_036
040880 B4 34 04    0831*  	dl ld_59_037
040883 DE 34 04    0832*  	dl ld_59_038
040886 08 35 04    0833*  	dl ld_59_040
040889 32 35 04    0834*  	dl ld_59_042
04088C 5C 35 04    0835*  	dl ld_59_043
04088F 86 35 04    0836*  	dl ld_59_044
040892             0837*  
040892             0838*  ; Import cube .rgba2 bitmap files and load them into VDP buffers
040892             0839*  
040892             0840*  ld_10_004:
040892 21 B0 35 04 0841*  	ld hl,F10_004
040896 22 DE BE 04 0842*  	ld (cur_filename),hl
04089A 11 0A CB 04 0843*  	ld de,filedata
04089E 01 00 00 01 0844*  	ld bc,65536
0408A2 3E 01       0845*  	ld a,mos_load
0408A4 5B CF       0846*  	RST.LIL 08h
0408A6 21 00 01 00 0847*  	ld hl,BUF_10_004
0408AA 01 24 00 00 0848*  	ld bc,36
0408AE 11 23 00 00 0849*  	ld de,35
0408B2 DD 21 EC 04 0850*  	ld ix,1260
       00          
0408B7 CD 59 C0 04 0851*  	call vdu_load_img
0408BB C9          0852*  	ret
0408BC             0853*  
0408BC             0854*  ld_10_009:
0408BC 21 C4 35 04 0855*  	ld hl,F10_009
0408C0 22 DE BE 04 0856*  	ld (cur_filename),hl
0408C4 11 0A CB 04 0857*  	ld de,filedata
0408C8 01 00 00 01 0858*  	ld bc,65536
0408CC 3E 01       0859*  	ld a,mos_load
0408CE 5B CF       0860*  	RST.LIL 08h
0408D0 21 01 01 00 0861*  	ld hl,BUF_10_009
0408D4 01 23 00 00 0862*  	ld bc,35
0408D8 11 2D 00 00 0863*  	ld de,45
0408DC DD 21 27 06 0864*  	ld ix,1575
       00          
0408E1 CD 59 C0 04 0865*  	call vdu_load_img
0408E5 C9          0866*  	ret
0408E6             0867*  
0408E6             0868*  ld_10_010:
0408E6 21 D8 35 04 0869*  	ld hl,F10_010
0408EA 22 DE BE 04 0870*  	ld (cur_filename),hl
0408EE 11 0A CB 04 0871*  	ld de,filedata
0408F2 01 00 00 01 0872*  	ld bc,65536
0408F6 3E 01       0873*  	ld a,mos_load
0408F8 5B CF       0874*  	RST.LIL 08h
0408FA 21 02 01 00 0875*  	ld hl,BUF_10_010
0408FE 01 19 00 00 0876*  	ld bc,25
040902 11 2D 00 00 0877*  	ld de,45
040906 DD 21 65 04 0878*  	ld ix,1125
       00          
04090B CD 59 C0 04 0879*  	call vdu_load_img
04090F C9          0880*  	ret
040910             0881*  
040910             0882*  ld_10_011:
040910 21 EC 35 04 0883*  	ld hl,F10_011
040914 22 DE BE 04 0884*  	ld (cur_filename),hl
040918 11 0A CB 04 0885*  	ld de,filedata
04091C 01 00 00 01 0886*  	ld bc,65536
040920 3E 01       0887*  	ld a,mos_load
040922 5B CF       0888*  	RST.LIL 08h
040924 21 03 01 00 0889*  	ld hl,BUF_10_011
040928 01 0F 00 00 0890*  	ld bc,15
04092C 11 2D 00 00 0891*  	ld de,45
040930 DD 21 A3 02 0892*  	ld ix,675
       00          
040935 CD 59 C0 04 0893*  	call vdu_load_img
040939 C9          0894*  	ret
04093A             0895*  
04093A             0896*  ld_10_012:
04093A 21 00 36 04 0897*  	ld hl,F10_012
04093E 22 DE BE 04 0898*  	ld (cur_filename),hl
040942 11 0A CB 04 0899*  	ld de,filedata
040946 01 00 00 01 0900*  	ld bc,65536
04094A 3E 01       0901*  	ld a,mos_load
04094C 5B CF       0902*  	RST.LIL 08h
04094E 21 04 01 00 0903*  	ld hl,BUF_10_012
040952 01 05 00 00 0904*  	ld bc,5
040956 11 2D 00 00 0905*  	ld de,45
04095A DD 21 E1 00 0906*  	ld ix,225
       00          
04095F CD 59 C0 04 0907*  	call vdu_load_img
040963 C9          0908*  	ret
040964             0909*  
040964             0910*  ld_10_013:
040964 21 14 36 04 0911*  	ld hl,F10_013
040968 22 DE BE 04 0912*  	ld (cur_filename),hl
04096C 11 0A CB 04 0913*  	ld de,filedata
040970 01 00 00 01 0914*  	ld bc,65536
040974 3E 01       0915*  	ld a,mos_load
040976 5B CF       0916*  	RST.LIL 08h
040978 21 05 01 00 0917*  	ld hl,BUF_10_013
04097C 01 05 00 00 0918*  	ld bc,5
040980 11 2B 00 00 0919*  	ld de,43
040984 DD 21 D7 00 0920*  	ld ix,215
       00          
040989 CD 59 C0 04 0921*  	call vdu_load_img
04098D C9          0922*  	ret
04098E             0923*  
04098E             0924*  ld_10_014:
04098E 21 28 36 04 0925*  	ld hl,F10_014
040992 22 DE BE 04 0926*  	ld (cur_filename),hl
040996 11 0A CB 04 0927*  	ld de,filedata
04099A 01 00 00 01 0928*  	ld bc,65536
04099E 3E 01       0929*  	ld a,mos_load
0409A0 5B CF       0930*  	RST.LIL 08h
0409A2 21 06 01 00 0931*  	ld hl,BUF_10_014
0409A6 01 0F 00 00 0932*  	ld bc,15
0409AA 11 2D 00 00 0933*  	ld de,45
0409AE DD 21 A3 02 0934*  	ld ix,675
       00          
0409B3 CD 59 C0 04 0935*  	call vdu_load_img
0409B7 C9          0936*  	ret
0409B8             0937*  
0409B8             0938*  ld_10_015:
0409B8 21 3C 36 04 0939*  	ld hl,F10_015
0409BC 22 DE BE 04 0940*  	ld (cur_filename),hl
0409C0 11 0A CB 04 0941*  	ld de,filedata
0409C4 01 00 00 01 0942*  	ld bc,65536
0409C8 3E 01       0943*  	ld a,mos_load
0409CA 5B CF       0944*  	RST.LIL 08h
0409CC 21 07 01 00 0945*  	ld hl,BUF_10_015
0409D0 01 19 00 00 0946*  	ld bc,25
0409D4 11 2D 00 00 0947*  	ld de,45
0409D8 DD 21 65 04 0948*  	ld ix,1125
       00          
0409DD CD 59 C0 04 0949*  	call vdu_load_img
0409E1 C9          0950*  	ret
0409E2             0951*  
0409E2             0952*  ld_10_016:
0409E2 21 50 36 04 0953*  	ld hl,F10_016
0409E6 22 DE BE 04 0954*  	ld (cur_filename),hl
0409EA 11 0A CB 04 0955*  	ld de,filedata
0409EE 01 00 00 01 0956*  	ld bc,65536
0409F2 3E 01       0957*  	ld a,mos_load
0409F4 5B CF       0958*  	RST.LIL 08h
0409F6 21 08 01 00 0959*  	ld hl,BUF_10_016
0409FA 01 23 00 00 0960*  	ld bc,35
0409FE 11 2D 00 00 0961*  	ld de,45
040A02 DD 21 27 06 0962*  	ld ix,1575
       00          
040A07 CD 59 C0 04 0963*  	call vdu_load_img
040A0B C9          0964*  	ret
040A0C             0965*  
040A0C             0966*  ld_10_020:
040A0C 21 64 36 04 0967*  	ld hl,F10_020
040A10 22 DE BE 04 0968*  	ld (cur_filename),hl
040A14 11 0A CB 04 0969*  	ld de,filedata
040A18 01 00 00 01 0970*  	ld bc,65536
040A1C 3E 01       0971*  	ld a,mos_load
040A1E 5B CF       0972*  	RST.LIL 08h
040A20 21 09 01 00 0973*  	ld hl,BUF_10_020
040A24 01 2E 00 00 0974*  	ld bc,46
040A28 11 2D 00 00 0975*  	ld de,45
040A2C DD 21 16 08 0976*  	ld ix,2070
       00          
040A31 CD 59 C0 04 0977*  	call vdu_load_img
040A35 C9          0978*  	ret
040A36             0979*  
040A36             0980*  ld_10_024:
040A36 21 78 36 04 0981*  	ld hl,F10_024
040A3A 22 DE BE 04 0982*  	ld (cur_filename),hl
040A3E 11 0A CB 04 0983*  	ld de,filedata
040A42 01 00 00 01 0984*  	ld bc,65536
040A46 3E 01       0985*  	ld a,mos_load
040A48 5B CF       0986*  	RST.LIL 08h
040A4A 21 0A 01 00 0987*  	ld hl,BUF_10_024
040A4E 01 2E 00 00 0988*  	ld bc,46
040A52 11 40 00 00 0989*  	ld de,64
040A56 DD 21 80 0B 0990*  	ld ix,2944
       00          
040A5B CD 59 C0 04 0991*  	call vdu_load_img
040A5F C9          0992*  	ret
040A60             0993*  
040A60             0994*  ld_10_025:
040A60 21 8C 36 04 0995*  	ld hl,F10_025
040A64 22 DE BE 04 0996*  	ld (cur_filename),hl
040A68 11 0A CB 04 0997*  	ld de,filedata
040A6C 01 00 00 01 0998*  	ld bc,65536
040A70 3E 01       0999*  	ld a,mos_load
040A72 5B CF       1000*  	RST.LIL 08h
040A74 21 0B 01 00 1001*  	ld hl,BUF_10_025
040A78 01 1C 00 00 1002*  	ld bc,28
040A7C 11 40 00 00 1003*  	ld de,64
040A80 DD 21 00 07 1004*  	ld ix,1792
       00          
040A85 CD 59 C0 04 1005*  	call vdu_load_img
040A89 C9          1006*  	ret
040A8A             1007*  
040A8A             1008*  ld_10_026:
040A8A 21 A0 36 04 1009*  	ld hl,F10_026
040A8E 22 DE BE 04 1010*  	ld (cur_filename),hl
040A92 11 0A CB 04 1011*  	ld de,filedata
040A96 01 00 00 01 1012*  	ld bc,65536
040A9A 3E 01       1013*  	ld a,mos_load
040A9C 5B CF       1014*  	RST.LIL 08h
040A9E 21 0C 01 00 1015*  	ld hl,BUF_10_026
040AA2 01 09 00 00 1016*  	ld bc,9
040AA6 11 40 00 00 1017*  	ld de,64
040AAA DD 21 40 02 1018*  	ld ix,576
       00          
040AAF CD 59 C0 04 1019*  	call vdu_load_img
040AB3 C9          1020*  	ret
040AB4             1021*  
040AB4             1022*  ld_10_027:
040AB4 21 B4 36 04 1023*  	ld hl,F10_027
040AB8 22 DE BE 04 1024*  	ld (cur_filename),hl
040ABC 11 0A CB 04 1025*  	ld de,filedata
040AC0 01 00 00 01 1026*  	ld bc,65536
040AC4 3E 01       1027*  	ld a,mos_load
040AC6 5B CF       1028*  	RST.LIL 08h
040AC8 21 0D 01 00 1029*  	ld hl,BUF_10_027
040ACC 01 0A 00 00 1030*  	ld bc,10
040AD0 11 3E 00 00 1031*  	ld de,62
040AD4 DD 21 6C 02 1032*  	ld ix,620
       00          
040AD9 CD 59 C0 04 1033*  	call vdu_load_img
040ADD C9          1034*  	ret
040ADE             1035*  
040ADE             1036*  ld_10_028:
040ADE 21 C8 36 04 1037*  	ld hl,F10_028
040AE2 22 DE BE 04 1038*  	ld (cur_filename),hl
040AE6 11 0A CB 04 1039*  	ld de,filedata
040AEA 01 00 00 01 1040*  	ld bc,65536
040AEE 3E 01       1041*  	ld a,mos_load
040AF0 5B CF       1042*  	RST.LIL 08h
040AF2 21 0E 01 00 1043*  	ld hl,BUF_10_028
040AF6 01 1C 00 00 1044*  	ld bc,28
040AFA 11 40 00 00 1045*  	ld de,64
040AFE DD 21 00 07 1046*  	ld ix,1792
       00          
040B03 CD 59 C0 04 1047*  	call vdu_load_img
040B07 C9          1048*  	ret
040B08             1049*  
040B08             1050*  ld_10_029:
040B08 21 DC 36 04 1051*  	ld hl,F10_029
040B0C 22 DE BE 04 1052*  	ld (cur_filename),hl
040B10 11 0A CB 04 1053*  	ld de,filedata
040B14 01 00 00 01 1054*  	ld bc,65536
040B18 3E 01       1055*  	ld a,mos_load
040B1A 5B CF       1056*  	RST.LIL 08h
040B1C 21 0F 01 00 1057*  	ld hl,BUF_10_029
040B20 01 2F 00 00 1058*  	ld bc,47
040B24 11 40 00 00 1059*  	ld de,64
040B28 DD 21 C0 0B 1060*  	ld ix,3008
       00          
040B2D CD 59 C0 04 1061*  	call vdu_load_img
040B31 C9          1062*  	ret
040B32             1063*  
040B32             1064*  ld_10_032:
040B32 21 F0 36 04 1065*  	ld hl,F10_032
040B36 22 DE BE 04 1066*  	ld (cur_filename),hl
040B3A 11 0A CB 04 1067*  	ld de,filedata
040B3E 01 00 00 01 1068*  	ld bc,65536
040B42 3E 01       1069*  	ld a,mos_load
040B44 5B CF       1070*  	RST.LIL 08h
040B46 21 10 01 00 1071*  	ld hl,BUF_10_032
040B4A 01 41 00 00 1072*  	ld bc,65
040B4E 11 40 00 00 1073*  	ld de,64
040B52 DD 21 40 10 1074*  	ld ix,4160
       00          
040B57 CD 59 C0 04 1075*  	call vdu_load_img
040B5B C9          1076*  	ret
040B5C             1077*  
040B5C             1078*  ld_10_035:
040B5C 21 04 37 04 1079*  	ld hl,F10_035
040B60 22 DE BE 04 1080*  	ld (cur_filename),hl
040B64 11 0A CB 04 1081*  	ld de,filedata
040B68 01 00 00 01 1082*  	ld bc,65536
040B6C 3E 01       1083*  	ld a,mos_load
040B6E 5B CF       1084*  	RST.LIL 08h
040B70 21 11 01 00 1085*  	ld hl,BUF_10_035
040B74 01 3F 00 00 1086*  	ld bc,63
040B78 11 6B 00 00 1087*  	ld de,107
040B7C DD 21 55 1A 1088*  	ld ix,6741
       00          
040B81 CD 59 C0 04 1089*  	call vdu_load_img
040B85 C9          1090*  	ret
040B86             1091*  
040B86             1092*  ld_10_036:
040B86 21 18 37 04 1093*  	ld hl,F10_036
040B8A 22 DE BE 04 1094*  	ld (cur_filename),hl
040B8E 11 0A CB 04 1095*  	ld de,filedata
040B92 01 00 00 01 1096*  	ld bc,65536
040B96 3E 01       1097*  	ld a,mos_load
040B98 5B CF       1098*  	RST.LIL 08h
040B9A 21 12 01 00 1099*  	ld hl,BUF_10_036
040B9E 01 16 00 00 1100*  	ld bc,22
040BA2 11 6B 00 00 1101*  	ld de,107
040BA6 DD 21 32 09 1102*  	ld ix,2354
       00          
040BAB CD 59 C0 04 1103*  	call vdu_load_img
040BAF C9          1104*  	ret
040BB0             1105*  
040BB0             1106*  ld_10_037:
040BB0 21 2C 37 04 1107*  	ld hl,F10_037
040BB4 22 DE BE 04 1108*  	ld (cur_filename),hl
040BB8 11 0A CB 04 1109*  	ld de,filedata
040BBC 01 00 00 01 1110*  	ld bc,65536
040BC0 3E 01       1111*  	ld a,mos_load
040BC2 5B CF       1112*  	RST.LIL 08h
040BC4 21 13 01 00 1113*  	ld hl,BUF_10_037
040BC8 01 15 00 00 1114*  	ld bc,21
040BCC 11 69 00 00 1115*  	ld de,105
040BD0 DD 21 9D 08 1116*  	ld ix,2205
       00          
040BD5 CD 59 C0 04 1117*  	call vdu_load_img
040BD9 C9          1118*  	ret
040BDA             1119*  
040BDA             1120*  ld_10_038:
040BDA 21 40 37 04 1121*  	ld hl,F10_038
040BDE 22 DE BE 04 1122*  	ld (cur_filename),hl
040BE2 11 0A CB 04 1123*  	ld de,filedata
040BE6 01 00 00 01 1124*  	ld bc,65536
040BEA 3E 01       1125*  	ld a,mos_load
040BEC 5B CF       1126*  	RST.LIL 08h
040BEE 21 14 01 00 1127*  	ld hl,BUF_10_038
040BF2 01 3F 00 00 1128*  	ld bc,63
040BF6 11 6B 00 00 1129*  	ld de,107
040BFA DD 21 55 1A 1130*  	ld ix,6741
       00          
040BFF CD 59 C0 04 1131*  	call vdu_load_img
040C03 C9          1132*  	ret
040C04             1133*  
040C04             1134*  ld_10_040:
040C04 21 54 37 04 1135*  	ld hl,F10_040
040C08 22 DE BE 04 1136*  	ld (cur_filename),hl
040C0C 11 0A CB 04 1137*  	ld de,filedata
040C10 01 00 00 01 1138*  	ld bc,65536
040C14 3E 01       1139*  	ld a,mos_load
040C16 5B CF       1140*  	RST.LIL 08h
040C18 21 15 01 00 1141*  	ld hl,BUF_10_040
040C1C 01 6C 00 00 1142*  	ld bc,108
040C20 11 6B 00 00 1143*  	ld de,107
040C24 DD 21 24 2D 1144*  	ld ix,11556
       00          
040C29 CD 59 C0 04 1145*  	call vdu_load_img
040C2D C9          1146*  	ret
040C2E             1147*  
040C2E             1148*  ld_10_042:
040C2E 21 68 37 04 1149*  	ld hl,F10_042
040C32 22 DE BE 04 1150*  	ld (cur_filename),hl
040C36 11 0A CB 04 1151*  	ld de,filedata
040C3A 01 00 00 01 1152*  	ld bc,65536
040C3E 3E 01       1153*  	ld a,mos_load
040C40 5B CF       1154*  	RST.LIL 08h
040C42 21 16 01 00 1155*  	ld hl,BUF_10_042
040C46 01 6A 00 00 1156*  	ld bc,106
040C4A 11 A0 00 00 1157*  	ld de,160
040C4E DD 21 40 42 1158*  	ld ix,16960
       00          
040C53 CD 59 C0 04 1159*  	call vdu_load_img
040C57 C9          1160*  	ret
040C58             1161*  
040C58             1162*  ld_10_043:
040C58 21 7C 37 04 1163*  	ld hl,F10_043
040C5C 22 DE BE 04 1164*  	ld (cur_filename),hl
040C60 11 0A CB 04 1165*  	ld de,filedata
040C64 01 00 00 01 1166*  	ld bc,65536
040C68 3E 01       1167*  	ld a,mos_load
040C6A 5B CF       1168*  	RST.LIL 08h
040C6C 21 17 01 00 1169*  	ld hl,BUF_10_043
040C70 01 6B 00 00 1170*  	ld bc,107
040C74 11 A0 00 00 1171*  	ld de,160
040C78 DD 21 E0 42 1172*  	ld ix,17120
       00          
040C7D CD 59 C0 04 1173*  	call vdu_load_img
040C81 C9          1174*  	ret
040C82             1175*  
040C82             1176*  ld_10_044:
040C82 21 90 37 04 1177*  	ld hl,F10_044
040C86 22 DE BE 04 1178*  	ld (cur_filename),hl
040C8A 11 0A CB 04 1179*  	ld de,filedata
040C8E 01 00 00 01 1180*  	ld bc,65536
040C92 3E 01       1181*  	ld a,mos_load
040C94 5B CF       1182*  	RST.LIL 08h
040C96 21 18 01 00 1183*  	ld hl,BUF_10_044
040C9A 01 40 01 00 1184*  	ld bc,320
040C9E 11 A0 00 00 1185*  	ld de,160
040CA2 DD 21 00 C8 1186*  	ld ix,51200
       00          
040CA7 CD 59 C0 04 1187*  	call vdu_load_img
040CAB C9          1188*  	ret
040CAC             1189*  
040CAC             1190*  ld_11_004:
040CAC 21 A4 37 04 1191*  	ld hl,F11_004
040CB0 22 DE BE 04 1192*  	ld (cur_filename),hl
040CB4 11 0A CB 04 1193*  	ld de,filedata
040CB8 01 00 00 01 1194*  	ld bc,65536
040CBC 3E 01       1195*  	ld a,mos_load
040CBE 5B CF       1196*  	RST.LIL 08h
040CC0 21 19 01 00 1197*  	ld hl,BUF_11_004
040CC4 01 24 00 00 1198*  	ld bc,36
040CC8 11 23 00 00 1199*  	ld de,35
040CCC DD 21 EC 04 1200*  	ld ix,1260
       00          
040CD1 CD 59 C0 04 1201*  	call vdu_load_img
040CD5 C9          1202*  	ret
040CD6             1203*  
040CD6             1204*  ld_11_009:
040CD6 21 B8 37 04 1205*  	ld hl,F11_009
040CDA 22 DE BE 04 1206*  	ld (cur_filename),hl
040CDE 11 0A CB 04 1207*  	ld de,filedata
040CE2 01 00 00 01 1208*  	ld bc,65536
040CE6 3E 01       1209*  	ld a,mos_load
040CE8 5B CF       1210*  	RST.LIL 08h
040CEA 21 1A 01 00 1211*  	ld hl,BUF_11_009
040CEE 01 23 00 00 1212*  	ld bc,35
040CF2 11 2D 00 00 1213*  	ld de,45
040CF6 DD 21 27 06 1214*  	ld ix,1575
       00          
040CFB CD 59 C0 04 1215*  	call vdu_load_img
040CFF C9          1216*  	ret
040D00             1217*  
040D00             1218*  ld_11_010:
040D00 21 CC 37 04 1219*  	ld hl,F11_010
040D04 22 DE BE 04 1220*  	ld (cur_filename),hl
040D08 11 0A CB 04 1221*  	ld de,filedata
040D0C 01 00 00 01 1222*  	ld bc,65536
040D10 3E 01       1223*  	ld a,mos_load
040D12 5B CF       1224*  	RST.LIL 08h
040D14 21 1B 01 00 1225*  	ld hl,BUF_11_010
040D18 01 19 00 00 1226*  	ld bc,25
040D1C 11 2D 00 00 1227*  	ld de,45
040D20 DD 21 65 04 1228*  	ld ix,1125
       00          
040D25 CD 59 C0 04 1229*  	call vdu_load_img
040D29 C9          1230*  	ret
040D2A             1231*  
040D2A             1232*  ld_11_011:
040D2A 21 E0 37 04 1233*  	ld hl,F11_011
040D2E 22 DE BE 04 1234*  	ld (cur_filename),hl
040D32 11 0A CB 04 1235*  	ld de,filedata
040D36 01 00 00 01 1236*  	ld bc,65536
040D3A 3E 01       1237*  	ld a,mos_load
040D3C 5B CF       1238*  	RST.LIL 08h
040D3E 21 1C 01 00 1239*  	ld hl,BUF_11_011
040D42 01 0F 00 00 1240*  	ld bc,15
040D46 11 2D 00 00 1241*  	ld de,45
040D4A DD 21 A3 02 1242*  	ld ix,675
       00          
040D4F CD 59 C0 04 1243*  	call vdu_load_img
040D53 C9          1244*  	ret
040D54             1245*  
040D54             1246*  ld_11_012:
040D54 21 F4 37 04 1247*  	ld hl,F11_012
040D58 22 DE BE 04 1248*  	ld (cur_filename),hl
040D5C 11 0A CB 04 1249*  	ld de,filedata
040D60 01 00 00 01 1250*  	ld bc,65536
040D64 3E 01       1251*  	ld a,mos_load
040D66 5B CF       1252*  	RST.LIL 08h
040D68 21 1D 01 00 1253*  	ld hl,BUF_11_012
040D6C 01 05 00 00 1254*  	ld bc,5
040D70 11 2D 00 00 1255*  	ld de,45
040D74 DD 21 E1 00 1256*  	ld ix,225
       00          
040D79 CD 59 C0 04 1257*  	call vdu_load_img
040D7D C9          1258*  	ret
040D7E             1259*  
040D7E             1260*  ld_11_013:
040D7E 21 08 38 04 1261*  	ld hl,F11_013
040D82 22 DE BE 04 1262*  	ld (cur_filename),hl
040D86 11 0A CB 04 1263*  	ld de,filedata
040D8A 01 00 00 01 1264*  	ld bc,65536
040D8E 3E 01       1265*  	ld a,mos_load
040D90 5B CF       1266*  	RST.LIL 08h
040D92 21 1E 01 00 1267*  	ld hl,BUF_11_013
040D96 01 05 00 00 1268*  	ld bc,5
040D9A 11 2B 00 00 1269*  	ld de,43
040D9E DD 21 D7 00 1270*  	ld ix,215
       00          
040DA3 CD 59 C0 04 1271*  	call vdu_load_img
040DA7 C9          1272*  	ret
040DA8             1273*  
040DA8             1274*  ld_11_014:
040DA8 21 1C 38 04 1275*  	ld hl,F11_014
040DAC 22 DE BE 04 1276*  	ld (cur_filename),hl
040DB0 11 0A CB 04 1277*  	ld de,filedata
040DB4 01 00 00 01 1278*  	ld bc,65536
040DB8 3E 01       1279*  	ld a,mos_load
040DBA 5B CF       1280*  	RST.LIL 08h
040DBC 21 1F 01 00 1281*  	ld hl,BUF_11_014
040DC0 01 0F 00 00 1282*  	ld bc,15
040DC4 11 2D 00 00 1283*  	ld de,45
040DC8 DD 21 A3 02 1284*  	ld ix,675
       00          
040DCD CD 59 C0 04 1285*  	call vdu_load_img
040DD1 C9          1286*  	ret
040DD2             1287*  
040DD2             1288*  ld_11_015:
040DD2 21 30 38 04 1289*  	ld hl,F11_015
040DD6 22 DE BE 04 1290*  	ld (cur_filename),hl
040DDA 11 0A CB 04 1291*  	ld de,filedata
040DDE 01 00 00 01 1292*  	ld bc,65536
040DE2 3E 01       1293*  	ld a,mos_load
040DE4 5B CF       1294*  	RST.LIL 08h
040DE6 21 20 01 00 1295*  	ld hl,BUF_11_015
040DEA 01 19 00 00 1296*  	ld bc,25
040DEE 11 2D 00 00 1297*  	ld de,45
040DF2 DD 21 65 04 1298*  	ld ix,1125
       00          
040DF7 CD 59 C0 04 1299*  	call vdu_load_img
040DFB C9          1300*  	ret
040DFC             1301*  
040DFC             1302*  ld_11_016:
040DFC 21 44 38 04 1303*  	ld hl,F11_016
040E00 22 DE BE 04 1304*  	ld (cur_filename),hl
040E04 11 0A CB 04 1305*  	ld de,filedata
040E08 01 00 00 01 1306*  	ld bc,65536
040E0C 3E 01       1307*  	ld a,mos_load
040E0E 5B CF       1308*  	RST.LIL 08h
040E10 21 21 01 00 1309*  	ld hl,BUF_11_016
040E14 01 23 00 00 1310*  	ld bc,35
040E18 11 2D 00 00 1311*  	ld de,45
040E1C DD 21 27 06 1312*  	ld ix,1575
       00          
040E21 CD 59 C0 04 1313*  	call vdu_load_img
040E25 C9          1314*  	ret
040E26             1315*  
040E26             1316*  ld_11_020:
040E26 21 58 38 04 1317*  	ld hl,F11_020
040E2A 22 DE BE 04 1318*  	ld (cur_filename),hl
040E2E 11 0A CB 04 1319*  	ld de,filedata
040E32 01 00 00 01 1320*  	ld bc,65536
040E36 3E 01       1321*  	ld a,mos_load
040E38 5B CF       1322*  	RST.LIL 08h
040E3A 21 22 01 00 1323*  	ld hl,BUF_11_020
040E3E 01 2E 00 00 1324*  	ld bc,46
040E42 11 2D 00 00 1325*  	ld de,45
040E46 DD 21 16 08 1326*  	ld ix,2070
       00          
040E4B CD 59 C0 04 1327*  	call vdu_load_img
040E4F C9          1328*  	ret
040E50             1329*  
040E50             1330*  ld_11_024:
040E50 21 6C 38 04 1331*  	ld hl,F11_024
040E54 22 DE BE 04 1332*  	ld (cur_filename),hl
040E58 11 0A CB 04 1333*  	ld de,filedata
040E5C 01 00 00 01 1334*  	ld bc,65536
040E60 3E 01       1335*  	ld a,mos_load
040E62 5B CF       1336*  	RST.LIL 08h
040E64 21 23 01 00 1337*  	ld hl,BUF_11_024
040E68 01 2E 00 00 1338*  	ld bc,46
040E6C 11 40 00 00 1339*  	ld de,64
040E70 DD 21 80 0B 1340*  	ld ix,2944
       00          
040E75 CD 59 C0 04 1341*  	call vdu_load_img
040E79 C9          1342*  	ret
040E7A             1343*  
040E7A             1344*  ld_11_025:
040E7A 21 80 38 04 1345*  	ld hl,F11_025
040E7E 22 DE BE 04 1346*  	ld (cur_filename),hl
040E82 11 0A CB 04 1347*  	ld de,filedata
040E86 01 00 00 01 1348*  	ld bc,65536
040E8A 3E 01       1349*  	ld a,mos_load
040E8C 5B CF       1350*  	RST.LIL 08h
040E8E 21 24 01 00 1351*  	ld hl,BUF_11_025
040E92 01 1C 00 00 1352*  	ld bc,28
040E96 11 40 00 00 1353*  	ld de,64
040E9A DD 21 00 07 1354*  	ld ix,1792
       00          
040E9F CD 59 C0 04 1355*  	call vdu_load_img
040EA3 C9          1356*  	ret
040EA4             1357*  
040EA4             1358*  ld_11_026:
040EA4 21 94 38 04 1359*  	ld hl,F11_026
040EA8 22 DE BE 04 1360*  	ld (cur_filename),hl
040EAC 11 0A CB 04 1361*  	ld de,filedata
040EB0 01 00 00 01 1362*  	ld bc,65536
040EB4 3E 01       1363*  	ld a,mos_load
040EB6 5B CF       1364*  	RST.LIL 08h
040EB8 21 25 01 00 1365*  	ld hl,BUF_11_026
040EBC 01 09 00 00 1366*  	ld bc,9
040EC0 11 40 00 00 1367*  	ld de,64
040EC4 DD 21 40 02 1368*  	ld ix,576
       00          
040EC9 CD 59 C0 04 1369*  	call vdu_load_img
040ECD C9          1370*  	ret
040ECE             1371*  
040ECE             1372*  ld_11_027:
040ECE 21 A8 38 04 1373*  	ld hl,F11_027
040ED2 22 DE BE 04 1374*  	ld (cur_filename),hl
040ED6 11 0A CB 04 1375*  	ld de,filedata
040EDA 01 00 00 01 1376*  	ld bc,65536
040EDE 3E 01       1377*  	ld a,mos_load
040EE0 5B CF       1378*  	RST.LIL 08h
040EE2 21 26 01 00 1379*  	ld hl,BUF_11_027
040EE6 01 0A 00 00 1380*  	ld bc,10
040EEA 11 3E 00 00 1381*  	ld de,62
040EEE DD 21 6C 02 1382*  	ld ix,620
       00          
040EF3 CD 59 C0 04 1383*  	call vdu_load_img
040EF7 C9          1384*  	ret
040EF8             1385*  
040EF8             1386*  ld_11_028:
040EF8 21 BC 38 04 1387*  	ld hl,F11_028
040EFC 22 DE BE 04 1388*  	ld (cur_filename),hl
040F00 11 0A CB 04 1389*  	ld de,filedata
040F04 01 00 00 01 1390*  	ld bc,65536
040F08 3E 01       1391*  	ld a,mos_load
040F0A 5B CF       1392*  	RST.LIL 08h
040F0C 21 27 01 00 1393*  	ld hl,BUF_11_028
040F10 01 1C 00 00 1394*  	ld bc,28
040F14 11 40 00 00 1395*  	ld de,64
040F18 DD 21 00 07 1396*  	ld ix,1792
       00          
040F1D CD 59 C0 04 1397*  	call vdu_load_img
040F21 C9          1398*  	ret
040F22             1399*  
040F22             1400*  ld_11_029:
040F22 21 D0 38 04 1401*  	ld hl,F11_029
040F26 22 DE BE 04 1402*  	ld (cur_filename),hl
040F2A 11 0A CB 04 1403*  	ld de,filedata
040F2E 01 00 00 01 1404*  	ld bc,65536
040F32 3E 01       1405*  	ld a,mos_load
040F34 5B CF       1406*  	RST.LIL 08h
040F36 21 28 01 00 1407*  	ld hl,BUF_11_029
040F3A 01 2F 00 00 1408*  	ld bc,47
040F3E 11 40 00 00 1409*  	ld de,64
040F42 DD 21 C0 0B 1410*  	ld ix,3008
       00          
040F47 CD 59 C0 04 1411*  	call vdu_load_img
040F4B C9          1412*  	ret
040F4C             1413*  
040F4C             1414*  ld_11_032:
040F4C 21 E4 38 04 1415*  	ld hl,F11_032
040F50 22 DE BE 04 1416*  	ld (cur_filename),hl
040F54 11 0A CB 04 1417*  	ld de,filedata
040F58 01 00 00 01 1418*  	ld bc,65536
040F5C 3E 01       1419*  	ld a,mos_load
040F5E 5B CF       1420*  	RST.LIL 08h
040F60 21 29 01 00 1421*  	ld hl,BUF_11_032
040F64 01 41 00 00 1422*  	ld bc,65
040F68 11 40 00 00 1423*  	ld de,64
040F6C DD 21 40 10 1424*  	ld ix,4160
       00          
040F71 CD 59 C0 04 1425*  	call vdu_load_img
040F75 C9          1426*  	ret
040F76             1427*  
040F76             1428*  ld_11_035:
040F76 21 F8 38 04 1429*  	ld hl,F11_035
040F7A 22 DE BE 04 1430*  	ld (cur_filename),hl
040F7E 11 0A CB 04 1431*  	ld de,filedata
040F82 01 00 00 01 1432*  	ld bc,65536
040F86 3E 01       1433*  	ld a,mos_load
040F88 5B CF       1434*  	RST.LIL 08h
040F8A 21 2A 01 00 1435*  	ld hl,BUF_11_035
040F8E 01 3F 00 00 1436*  	ld bc,63
040F92 11 6B 00 00 1437*  	ld de,107
040F96 DD 21 55 1A 1438*  	ld ix,6741
       00          
040F9B CD 59 C0 04 1439*  	call vdu_load_img
040F9F C9          1440*  	ret
040FA0             1441*  
040FA0             1442*  ld_11_036:
040FA0 21 0C 39 04 1443*  	ld hl,F11_036
040FA4 22 DE BE 04 1444*  	ld (cur_filename),hl
040FA8 11 0A CB 04 1445*  	ld de,filedata
040FAC 01 00 00 01 1446*  	ld bc,65536
040FB0 3E 01       1447*  	ld a,mos_load
040FB2 5B CF       1448*  	RST.LIL 08h
040FB4 21 2B 01 00 1449*  	ld hl,BUF_11_036
040FB8 01 16 00 00 1450*  	ld bc,22
040FBC 11 6B 00 00 1451*  	ld de,107
040FC0 DD 21 32 09 1452*  	ld ix,2354
       00          
040FC5 CD 59 C0 04 1453*  	call vdu_load_img
040FC9 C9          1454*  	ret
040FCA             1455*  
040FCA             1456*  ld_11_037:
040FCA 21 20 39 04 1457*  	ld hl,F11_037
040FCE 22 DE BE 04 1458*  	ld (cur_filename),hl
040FD2 11 0A CB 04 1459*  	ld de,filedata
040FD6 01 00 00 01 1460*  	ld bc,65536
040FDA 3E 01       1461*  	ld a,mos_load
040FDC 5B CF       1462*  	RST.LIL 08h
040FDE 21 2C 01 00 1463*  	ld hl,BUF_11_037
040FE2 01 15 00 00 1464*  	ld bc,21
040FE6 11 69 00 00 1465*  	ld de,105
040FEA DD 21 9D 08 1466*  	ld ix,2205
       00          
040FEF CD 59 C0 04 1467*  	call vdu_load_img
040FF3 C9          1468*  	ret
040FF4             1469*  
040FF4             1470*  ld_11_038:
040FF4 21 34 39 04 1471*  	ld hl,F11_038
040FF8 22 DE BE 04 1472*  	ld (cur_filename),hl
040FFC 11 0A CB 04 1473*  	ld de,filedata
041000 01 00 00 01 1474*  	ld bc,65536
041004 3E 01       1475*  	ld a,mos_load
041006 5B CF       1476*  	RST.LIL 08h
041008 21 2D 01 00 1477*  	ld hl,BUF_11_038
04100C 01 3F 00 00 1478*  	ld bc,63
041010 11 6B 00 00 1479*  	ld de,107
041014 DD 21 55 1A 1480*  	ld ix,6741
       00          
041019 CD 59 C0 04 1481*  	call vdu_load_img
04101D C9          1482*  	ret
04101E             1483*  
04101E             1484*  ld_11_040:
04101E 21 48 39 04 1485*  	ld hl,F11_040
041022 22 DE BE 04 1486*  	ld (cur_filename),hl
041026 11 0A CB 04 1487*  	ld de,filedata
04102A 01 00 00 01 1488*  	ld bc,65536
04102E 3E 01       1489*  	ld a,mos_load
041030 5B CF       1490*  	RST.LIL 08h
041032 21 2E 01 00 1491*  	ld hl,BUF_11_040
041036 01 6C 00 00 1492*  	ld bc,108
04103A 11 6B 00 00 1493*  	ld de,107
04103E DD 21 24 2D 1494*  	ld ix,11556
       00          
041043 CD 59 C0 04 1495*  	call vdu_load_img
041047 C9          1496*  	ret
041048             1497*  
041048             1498*  ld_11_042:
041048 21 5C 39 04 1499*  	ld hl,F11_042
04104C 22 DE BE 04 1500*  	ld (cur_filename),hl
041050 11 0A CB 04 1501*  	ld de,filedata
041054 01 00 00 01 1502*  	ld bc,65536
041058 3E 01       1503*  	ld a,mos_load
04105A 5B CF       1504*  	RST.LIL 08h
04105C 21 2F 01 00 1505*  	ld hl,BUF_11_042
041060 01 6A 00 00 1506*  	ld bc,106
041064 11 A0 00 00 1507*  	ld de,160
041068 DD 21 40 42 1508*  	ld ix,16960
       00          
04106D CD 59 C0 04 1509*  	call vdu_load_img
041071 C9          1510*  	ret
041072             1511*  
041072             1512*  ld_11_043:
041072 21 70 39 04 1513*  	ld hl,F11_043
041076 22 DE BE 04 1514*  	ld (cur_filename),hl
04107A 11 0A CB 04 1515*  	ld de,filedata
04107E 01 00 00 01 1516*  	ld bc,65536
041082 3E 01       1517*  	ld a,mos_load
041084 5B CF       1518*  	RST.LIL 08h
041086 21 30 01 00 1519*  	ld hl,BUF_11_043
04108A 01 6B 00 00 1520*  	ld bc,107
04108E 11 A0 00 00 1521*  	ld de,160
041092 DD 21 E0 42 1522*  	ld ix,17120
       00          
041097 CD 59 C0 04 1523*  	call vdu_load_img
04109B C9          1524*  	ret
04109C             1525*  
04109C             1526*  ld_11_044:
04109C 21 84 39 04 1527*  	ld hl,F11_044
0410A0 22 DE BE 04 1528*  	ld (cur_filename),hl
0410A4 11 0A CB 04 1529*  	ld de,filedata
0410A8 01 00 00 01 1530*  	ld bc,65536
0410AC 3E 01       1531*  	ld a,mos_load
0410AE 5B CF       1532*  	RST.LIL 08h
0410B0 21 31 01 00 1533*  	ld hl,BUF_11_044
0410B4 01 40 01 00 1534*  	ld bc,320
0410B8 11 A0 00 00 1535*  	ld de,160
0410BC DD 21 00 C8 1536*  	ld ix,51200
       00          
0410C1 CD 59 C0 04 1537*  	call vdu_load_img
0410C5 C9          1538*  	ret
0410C6             1539*  
0410C6             1540*  ld_12_004:
0410C6 21 98 39 04 1541*  	ld hl,F12_004
0410CA 22 DE BE 04 1542*  	ld (cur_filename),hl
0410CE 11 0A CB 04 1543*  	ld de,filedata
0410D2 01 00 00 01 1544*  	ld bc,65536
0410D6 3E 01       1545*  	ld a,mos_load
0410D8 5B CF       1546*  	RST.LIL 08h
0410DA 21 32 01 00 1547*  	ld hl,BUF_12_004
0410DE 01 24 00 00 1548*  	ld bc,36
0410E2 11 23 00 00 1549*  	ld de,35
0410E6 DD 21 EC 04 1550*  	ld ix,1260
       00          
0410EB CD 59 C0 04 1551*  	call vdu_load_img
0410EF C9          1552*  	ret
0410F0             1553*  
0410F0             1554*  ld_12_009:
0410F0 21 AC 39 04 1555*  	ld hl,F12_009
0410F4 22 DE BE 04 1556*  	ld (cur_filename),hl
0410F8 11 0A CB 04 1557*  	ld de,filedata
0410FC 01 00 00 01 1558*  	ld bc,65536
041100 3E 01       1559*  	ld a,mos_load
041102 5B CF       1560*  	RST.LIL 08h
041104 21 33 01 00 1561*  	ld hl,BUF_12_009
041108 01 23 00 00 1562*  	ld bc,35
04110C 11 2D 00 00 1563*  	ld de,45
041110 DD 21 27 06 1564*  	ld ix,1575
       00          
041115 CD 59 C0 04 1565*  	call vdu_load_img
041119 C9          1566*  	ret
04111A             1567*  
04111A             1568*  ld_12_010:
04111A 21 C0 39 04 1569*  	ld hl,F12_010
04111E 22 DE BE 04 1570*  	ld (cur_filename),hl
041122 11 0A CB 04 1571*  	ld de,filedata
041126 01 00 00 01 1572*  	ld bc,65536
04112A 3E 01       1573*  	ld a,mos_load
04112C 5B CF       1574*  	RST.LIL 08h
04112E 21 34 01 00 1575*  	ld hl,BUF_12_010
041132 01 19 00 00 1576*  	ld bc,25
041136 11 2D 00 00 1577*  	ld de,45
04113A DD 21 65 04 1578*  	ld ix,1125
       00          
04113F CD 59 C0 04 1579*  	call vdu_load_img
041143 C9          1580*  	ret
041144             1581*  
041144             1582*  ld_12_011:
041144 21 D4 39 04 1583*  	ld hl,F12_011
041148 22 DE BE 04 1584*  	ld (cur_filename),hl
04114C 11 0A CB 04 1585*  	ld de,filedata
041150 01 00 00 01 1586*  	ld bc,65536
041154 3E 01       1587*  	ld a,mos_load
041156 5B CF       1588*  	RST.LIL 08h
041158 21 35 01 00 1589*  	ld hl,BUF_12_011
04115C 01 0F 00 00 1590*  	ld bc,15
041160 11 2D 00 00 1591*  	ld de,45
041164 DD 21 A3 02 1592*  	ld ix,675
       00          
041169 CD 59 C0 04 1593*  	call vdu_load_img
04116D C9          1594*  	ret
04116E             1595*  
04116E             1596*  ld_12_012:
04116E 21 E8 39 04 1597*  	ld hl,F12_012
041172 22 DE BE 04 1598*  	ld (cur_filename),hl
041176 11 0A CB 04 1599*  	ld de,filedata
04117A 01 00 00 01 1600*  	ld bc,65536
04117E 3E 01       1601*  	ld a,mos_load
041180 5B CF       1602*  	RST.LIL 08h
041182 21 36 01 00 1603*  	ld hl,BUF_12_012
041186 01 05 00 00 1604*  	ld bc,5
04118A 11 2D 00 00 1605*  	ld de,45
04118E DD 21 E1 00 1606*  	ld ix,225
       00          
041193 CD 59 C0 04 1607*  	call vdu_load_img
041197 C9          1608*  	ret
041198             1609*  
041198             1610*  ld_12_013:
041198 21 FC 39 04 1611*  	ld hl,F12_013
04119C 22 DE BE 04 1612*  	ld (cur_filename),hl
0411A0 11 0A CB 04 1613*  	ld de,filedata
0411A4 01 00 00 01 1614*  	ld bc,65536
0411A8 3E 01       1615*  	ld a,mos_load
0411AA 5B CF       1616*  	RST.LIL 08h
0411AC 21 37 01 00 1617*  	ld hl,BUF_12_013
0411B0 01 05 00 00 1618*  	ld bc,5
0411B4 11 2B 00 00 1619*  	ld de,43
0411B8 DD 21 D7 00 1620*  	ld ix,215
       00          
0411BD CD 59 C0 04 1621*  	call vdu_load_img
0411C1 C9          1622*  	ret
0411C2             1623*  
0411C2             1624*  ld_12_014:
0411C2 21 10 3A 04 1625*  	ld hl,F12_014
0411C6 22 DE BE 04 1626*  	ld (cur_filename),hl
0411CA 11 0A CB 04 1627*  	ld de,filedata
0411CE 01 00 00 01 1628*  	ld bc,65536
0411D2 3E 01       1629*  	ld a,mos_load
0411D4 5B CF       1630*  	RST.LIL 08h
0411D6 21 38 01 00 1631*  	ld hl,BUF_12_014
0411DA 01 0F 00 00 1632*  	ld bc,15
0411DE 11 2D 00 00 1633*  	ld de,45
0411E2 DD 21 A3 02 1634*  	ld ix,675
       00          
0411E7 CD 59 C0 04 1635*  	call vdu_load_img
0411EB C9          1636*  	ret
0411EC             1637*  
0411EC             1638*  ld_12_015:
0411EC 21 24 3A 04 1639*  	ld hl,F12_015
0411F0 22 DE BE 04 1640*  	ld (cur_filename),hl
0411F4 11 0A CB 04 1641*  	ld de,filedata
0411F8 01 00 00 01 1642*  	ld bc,65536
0411FC 3E 01       1643*  	ld a,mos_load
0411FE 5B CF       1644*  	RST.LIL 08h
041200 21 39 01 00 1645*  	ld hl,BUF_12_015
041204 01 19 00 00 1646*  	ld bc,25
041208 11 2D 00 00 1647*  	ld de,45
04120C DD 21 65 04 1648*  	ld ix,1125
       00          
041211 CD 59 C0 04 1649*  	call vdu_load_img
041215 C9          1650*  	ret
041216             1651*  
041216             1652*  ld_12_016:
041216 21 38 3A 04 1653*  	ld hl,F12_016
04121A 22 DE BE 04 1654*  	ld (cur_filename),hl
04121E 11 0A CB 04 1655*  	ld de,filedata
041222 01 00 00 01 1656*  	ld bc,65536
041226 3E 01       1657*  	ld a,mos_load
041228 5B CF       1658*  	RST.LIL 08h
04122A 21 3A 01 00 1659*  	ld hl,BUF_12_016
04122E 01 23 00 00 1660*  	ld bc,35
041232 11 2D 00 00 1661*  	ld de,45
041236 DD 21 27 06 1662*  	ld ix,1575
       00          
04123B CD 59 C0 04 1663*  	call vdu_load_img
04123F C9          1664*  	ret
041240             1665*  
041240             1666*  ld_12_020:
041240 21 4C 3A 04 1667*  	ld hl,F12_020
041244 22 DE BE 04 1668*  	ld (cur_filename),hl
041248 11 0A CB 04 1669*  	ld de,filedata
04124C 01 00 00 01 1670*  	ld bc,65536
041250 3E 01       1671*  	ld a,mos_load
041252 5B CF       1672*  	RST.LIL 08h
041254 21 3B 01 00 1673*  	ld hl,BUF_12_020
041258 01 2E 00 00 1674*  	ld bc,46
04125C 11 2D 00 00 1675*  	ld de,45
041260 DD 21 16 08 1676*  	ld ix,2070
       00          
041265 CD 59 C0 04 1677*  	call vdu_load_img
041269 C9          1678*  	ret
04126A             1679*  
04126A             1680*  ld_12_024:
04126A 21 60 3A 04 1681*  	ld hl,F12_024
04126E 22 DE BE 04 1682*  	ld (cur_filename),hl
041272 11 0A CB 04 1683*  	ld de,filedata
041276 01 00 00 01 1684*  	ld bc,65536
04127A 3E 01       1685*  	ld a,mos_load
04127C 5B CF       1686*  	RST.LIL 08h
04127E 21 3C 01 00 1687*  	ld hl,BUF_12_024
041282 01 2E 00 00 1688*  	ld bc,46
041286 11 40 00 00 1689*  	ld de,64
04128A DD 21 80 0B 1690*  	ld ix,2944
       00          
04128F CD 59 C0 04 1691*  	call vdu_load_img
041293 C9          1692*  	ret
041294             1693*  
041294             1694*  ld_12_025:
041294 21 74 3A 04 1695*  	ld hl,F12_025
041298 22 DE BE 04 1696*  	ld (cur_filename),hl
04129C 11 0A CB 04 1697*  	ld de,filedata
0412A0 01 00 00 01 1698*  	ld bc,65536
0412A4 3E 01       1699*  	ld a,mos_load
0412A6 5B CF       1700*  	RST.LIL 08h
0412A8 21 3D 01 00 1701*  	ld hl,BUF_12_025
0412AC 01 1C 00 00 1702*  	ld bc,28
0412B0 11 40 00 00 1703*  	ld de,64
0412B4 DD 21 00 07 1704*  	ld ix,1792
       00          
0412B9 CD 59 C0 04 1705*  	call vdu_load_img
0412BD C9          1706*  	ret
0412BE             1707*  
0412BE             1708*  ld_12_026:
0412BE 21 88 3A 04 1709*  	ld hl,F12_026
0412C2 22 DE BE 04 1710*  	ld (cur_filename),hl
0412C6 11 0A CB 04 1711*  	ld de,filedata
0412CA 01 00 00 01 1712*  	ld bc,65536
0412CE 3E 01       1713*  	ld a,mos_load
0412D0 5B CF       1714*  	RST.LIL 08h
0412D2 21 3E 01 00 1715*  	ld hl,BUF_12_026
0412D6 01 09 00 00 1716*  	ld bc,9
0412DA 11 40 00 00 1717*  	ld de,64
0412DE DD 21 40 02 1718*  	ld ix,576
       00          
0412E3 CD 59 C0 04 1719*  	call vdu_load_img
0412E7 C9          1720*  	ret
0412E8             1721*  
0412E8             1722*  ld_12_027:
0412E8 21 9C 3A 04 1723*  	ld hl,F12_027
0412EC 22 DE BE 04 1724*  	ld (cur_filename),hl
0412F0 11 0A CB 04 1725*  	ld de,filedata
0412F4 01 00 00 01 1726*  	ld bc,65536
0412F8 3E 01       1727*  	ld a,mos_load
0412FA 5B CF       1728*  	RST.LIL 08h
0412FC 21 3F 01 00 1729*  	ld hl,BUF_12_027
041300 01 0A 00 00 1730*  	ld bc,10
041304 11 3E 00 00 1731*  	ld de,62
041308 DD 21 6C 02 1732*  	ld ix,620
       00          
04130D CD 59 C0 04 1733*  	call vdu_load_img
041311 C9          1734*  	ret
041312             1735*  
041312             1736*  ld_12_028:
041312 21 B0 3A 04 1737*  	ld hl,F12_028
041316 22 DE BE 04 1738*  	ld (cur_filename),hl
04131A 11 0A CB 04 1739*  	ld de,filedata
04131E 01 00 00 01 1740*  	ld bc,65536
041322 3E 01       1741*  	ld a,mos_load
041324 5B CF       1742*  	RST.LIL 08h
041326 21 40 01 00 1743*  	ld hl,BUF_12_028
04132A 01 1C 00 00 1744*  	ld bc,28
04132E 11 40 00 00 1745*  	ld de,64
041332 DD 21 00 07 1746*  	ld ix,1792
       00          
041337 CD 59 C0 04 1747*  	call vdu_load_img
04133B C9          1748*  	ret
04133C             1749*  
04133C             1750*  ld_12_029:
04133C 21 C4 3A 04 1751*  	ld hl,F12_029
041340 22 DE BE 04 1752*  	ld (cur_filename),hl
041344 11 0A CB 04 1753*  	ld de,filedata
041348 01 00 00 01 1754*  	ld bc,65536
04134C 3E 01       1755*  	ld a,mos_load
04134E 5B CF       1756*  	RST.LIL 08h
041350 21 41 01 00 1757*  	ld hl,BUF_12_029
041354 01 2F 00 00 1758*  	ld bc,47
041358 11 40 00 00 1759*  	ld de,64
04135C DD 21 C0 0B 1760*  	ld ix,3008
       00          
041361 CD 59 C0 04 1761*  	call vdu_load_img
041365 C9          1762*  	ret
041366             1763*  
041366             1764*  ld_12_032:
041366 21 D8 3A 04 1765*  	ld hl,F12_032
04136A 22 DE BE 04 1766*  	ld (cur_filename),hl
04136E 11 0A CB 04 1767*  	ld de,filedata
041372 01 00 00 01 1768*  	ld bc,65536
041376 3E 01       1769*  	ld a,mos_load
041378 5B CF       1770*  	RST.LIL 08h
04137A 21 42 01 00 1771*  	ld hl,BUF_12_032
04137E 01 41 00 00 1772*  	ld bc,65
041382 11 40 00 00 1773*  	ld de,64
041386 DD 21 40 10 1774*  	ld ix,4160
       00          
04138B CD 59 C0 04 1775*  	call vdu_load_img
04138F C9          1776*  	ret
041390             1777*  
041390             1778*  ld_12_035:
041390 21 EC 3A 04 1779*  	ld hl,F12_035
041394 22 DE BE 04 1780*  	ld (cur_filename),hl
041398 11 0A CB 04 1781*  	ld de,filedata
04139C 01 00 00 01 1782*  	ld bc,65536
0413A0 3E 01       1783*  	ld a,mos_load
0413A2 5B CF       1784*  	RST.LIL 08h
0413A4 21 43 01 00 1785*  	ld hl,BUF_12_035
0413A8 01 3F 00 00 1786*  	ld bc,63
0413AC 11 6B 00 00 1787*  	ld de,107
0413B0 DD 21 55 1A 1788*  	ld ix,6741
       00          
0413B5 CD 59 C0 04 1789*  	call vdu_load_img
0413B9 C9          1790*  	ret
0413BA             1791*  
0413BA             1792*  ld_12_036:
0413BA 21 00 3B 04 1793*  	ld hl,F12_036
0413BE 22 DE BE 04 1794*  	ld (cur_filename),hl
0413C2 11 0A CB 04 1795*  	ld de,filedata
0413C6 01 00 00 01 1796*  	ld bc,65536
0413CA 3E 01       1797*  	ld a,mos_load
0413CC 5B CF       1798*  	RST.LIL 08h
0413CE 21 44 01 00 1799*  	ld hl,BUF_12_036
0413D2 01 16 00 00 1800*  	ld bc,22
0413D6 11 6B 00 00 1801*  	ld de,107
0413DA DD 21 32 09 1802*  	ld ix,2354
       00          
0413DF CD 59 C0 04 1803*  	call vdu_load_img
0413E3 C9          1804*  	ret
0413E4             1805*  
0413E4             1806*  ld_12_037:
0413E4 21 14 3B 04 1807*  	ld hl,F12_037
0413E8 22 DE BE 04 1808*  	ld (cur_filename),hl
0413EC 11 0A CB 04 1809*  	ld de,filedata
0413F0 01 00 00 01 1810*  	ld bc,65536
0413F4 3E 01       1811*  	ld a,mos_load
0413F6 5B CF       1812*  	RST.LIL 08h
0413F8 21 45 01 00 1813*  	ld hl,BUF_12_037
0413FC 01 15 00 00 1814*  	ld bc,21
041400 11 69 00 00 1815*  	ld de,105
041404 DD 21 9D 08 1816*  	ld ix,2205
       00          
041409 CD 59 C0 04 1817*  	call vdu_load_img
04140D C9          1818*  	ret
04140E             1819*  
04140E             1820*  ld_12_038:
04140E 21 28 3B 04 1821*  	ld hl,F12_038
041412 22 DE BE 04 1822*  	ld (cur_filename),hl
041416 11 0A CB 04 1823*  	ld de,filedata
04141A 01 00 00 01 1824*  	ld bc,65536
04141E 3E 01       1825*  	ld a,mos_load
041420 5B CF       1826*  	RST.LIL 08h
041422 21 46 01 00 1827*  	ld hl,BUF_12_038
041426 01 3F 00 00 1828*  	ld bc,63
04142A 11 6B 00 00 1829*  	ld de,107
04142E DD 21 55 1A 1830*  	ld ix,6741
       00          
041433 CD 59 C0 04 1831*  	call vdu_load_img
041437 C9          1832*  	ret
041438             1833*  
041438             1834*  ld_12_040:
041438 21 3C 3B 04 1835*  	ld hl,F12_040
04143C 22 DE BE 04 1836*  	ld (cur_filename),hl
041440 11 0A CB 04 1837*  	ld de,filedata
041444 01 00 00 01 1838*  	ld bc,65536
041448 3E 01       1839*  	ld a,mos_load
04144A 5B CF       1840*  	RST.LIL 08h
04144C 21 47 01 00 1841*  	ld hl,BUF_12_040
041450 01 6C 00 00 1842*  	ld bc,108
041454 11 6B 00 00 1843*  	ld de,107
041458 DD 21 24 2D 1844*  	ld ix,11556
       00          
04145D CD 59 C0 04 1845*  	call vdu_load_img
041461 C9          1846*  	ret
041462             1847*  
041462             1848*  ld_12_042:
041462 21 50 3B 04 1849*  	ld hl,F12_042
041466 22 DE BE 04 1850*  	ld (cur_filename),hl
04146A 11 0A CB 04 1851*  	ld de,filedata
04146E 01 00 00 01 1852*  	ld bc,65536
041472 3E 01       1853*  	ld a,mos_load
041474 5B CF       1854*  	RST.LIL 08h
041476 21 48 01 00 1855*  	ld hl,BUF_12_042
04147A 01 6A 00 00 1856*  	ld bc,106
04147E 11 A0 00 00 1857*  	ld de,160
041482 DD 21 40 42 1858*  	ld ix,16960
       00          
041487 CD 59 C0 04 1859*  	call vdu_load_img
04148B C9          1860*  	ret
04148C             1861*  
04148C             1862*  ld_12_043:
04148C 21 64 3B 04 1863*  	ld hl,F12_043
041490 22 DE BE 04 1864*  	ld (cur_filename),hl
041494 11 0A CB 04 1865*  	ld de,filedata
041498 01 00 00 01 1866*  	ld bc,65536
04149C 3E 01       1867*  	ld a,mos_load
04149E 5B CF       1868*  	RST.LIL 08h
0414A0 21 49 01 00 1869*  	ld hl,BUF_12_043
0414A4 01 6B 00 00 1870*  	ld bc,107
0414A8 11 A0 00 00 1871*  	ld de,160
0414AC DD 21 E0 42 1872*  	ld ix,17120
       00          
0414B1 CD 59 C0 04 1873*  	call vdu_load_img
0414B5 C9          1874*  	ret
0414B6             1875*  
0414B6             1876*  ld_12_044:
0414B6 21 78 3B 04 1877*  	ld hl,F12_044
0414BA 22 DE BE 04 1878*  	ld (cur_filename),hl
0414BE 11 0A CB 04 1879*  	ld de,filedata
0414C2 01 00 00 01 1880*  	ld bc,65536
0414C6 3E 01       1881*  	ld a,mos_load
0414C8 5B CF       1882*  	RST.LIL 08h
0414CA 21 4A 01 00 1883*  	ld hl,BUF_12_044
0414CE 01 40 01 00 1884*  	ld bc,320
0414D2 11 A0 00 00 1885*  	ld de,160
0414D6 DD 21 00 C8 1886*  	ld ix,51200
       00          
0414DB CD 59 C0 04 1887*  	call vdu_load_img
0414DF C9          1888*  	ret
0414E0             1889*  
0414E0             1890*  ld_13_004:
0414E0 21 8C 3B 04 1891*  	ld hl,F13_004
0414E4 22 DE BE 04 1892*  	ld (cur_filename),hl
0414E8 11 0A CB 04 1893*  	ld de,filedata
0414EC 01 00 00 01 1894*  	ld bc,65536
0414F0 3E 01       1895*  	ld a,mos_load
0414F2 5B CF       1896*  	RST.LIL 08h
0414F4 21 4B 01 00 1897*  	ld hl,BUF_13_004
0414F8 01 24 00 00 1898*  	ld bc,36
0414FC 11 23 00 00 1899*  	ld de,35
041500 DD 21 EC 04 1900*  	ld ix,1260
       00          
041505 CD 59 C0 04 1901*  	call vdu_load_img
041509 C9          1902*  	ret
04150A             1903*  
04150A             1904*  ld_13_009:
04150A 21 A0 3B 04 1905*  	ld hl,F13_009
04150E 22 DE BE 04 1906*  	ld (cur_filename),hl
041512 11 0A CB 04 1907*  	ld de,filedata
041516 01 00 00 01 1908*  	ld bc,65536
04151A 3E 01       1909*  	ld a,mos_load
04151C 5B CF       1910*  	RST.LIL 08h
04151E 21 4C 01 00 1911*  	ld hl,BUF_13_009
041522 01 23 00 00 1912*  	ld bc,35
041526 11 2D 00 00 1913*  	ld de,45
04152A DD 21 27 06 1914*  	ld ix,1575
       00          
04152F CD 59 C0 04 1915*  	call vdu_load_img
041533 C9          1916*  	ret
041534             1917*  
041534             1918*  ld_13_010:
041534 21 B4 3B 04 1919*  	ld hl,F13_010
041538 22 DE BE 04 1920*  	ld (cur_filename),hl
04153C 11 0A CB 04 1921*  	ld de,filedata
041540 01 00 00 01 1922*  	ld bc,65536
041544 3E 01       1923*  	ld a,mos_load
041546 5B CF       1924*  	RST.LIL 08h
041548 21 4D 01 00 1925*  	ld hl,BUF_13_010
04154C 01 19 00 00 1926*  	ld bc,25
041550 11 2D 00 00 1927*  	ld de,45
041554 DD 21 65 04 1928*  	ld ix,1125
       00          
041559 CD 59 C0 04 1929*  	call vdu_load_img
04155D C9          1930*  	ret
04155E             1931*  
04155E             1932*  ld_13_011:
04155E 21 C8 3B 04 1933*  	ld hl,F13_011
041562 22 DE BE 04 1934*  	ld (cur_filename),hl
041566 11 0A CB 04 1935*  	ld de,filedata
04156A 01 00 00 01 1936*  	ld bc,65536
04156E 3E 01       1937*  	ld a,mos_load
041570 5B CF       1938*  	RST.LIL 08h
041572 21 4E 01 00 1939*  	ld hl,BUF_13_011
041576 01 0F 00 00 1940*  	ld bc,15
04157A 11 2D 00 00 1941*  	ld de,45
04157E DD 21 A3 02 1942*  	ld ix,675
       00          
041583 CD 59 C0 04 1943*  	call vdu_load_img
041587 C9          1944*  	ret
041588             1945*  
041588             1946*  ld_13_012:
041588 21 DC 3B 04 1947*  	ld hl,F13_012
04158C 22 DE BE 04 1948*  	ld (cur_filename),hl
041590 11 0A CB 04 1949*  	ld de,filedata
041594 01 00 00 01 1950*  	ld bc,65536
041598 3E 01       1951*  	ld a,mos_load
04159A 5B CF       1952*  	RST.LIL 08h
04159C 21 4F 01 00 1953*  	ld hl,BUF_13_012
0415A0 01 05 00 00 1954*  	ld bc,5
0415A4 11 2D 00 00 1955*  	ld de,45
0415A8 DD 21 E1 00 1956*  	ld ix,225
       00          
0415AD CD 59 C0 04 1957*  	call vdu_load_img
0415B1 C9          1958*  	ret
0415B2             1959*  
0415B2             1960*  ld_13_013:
0415B2 21 F0 3B 04 1961*  	ld hl,F13_013
0415B6 22 DE BE 04 1962*  	ld (cur_filename),hl
0415BA 11 0A CB 04 1963*  	ld de,filedata
0415BE 01 00 00 01 1964*  	ld bc,65536
0415C2 3E 01       1965*  	ld a,mos_load
0415C4 5B CF       1966*  	RST.LIL 08h
0415C6 21 50 01 00 1967*  	ld hl,BUF_13_013
0415CA 01 05 00 00 1968*  	ld bc,5
0415CE 11 2B 00 00 1969*  	ld de,43
0415D2 DD 21 D7 00 1970*  	ld ix,215
       00          
0415D7 CD 59 C0 04 1971*  	call vdu_load_img
0415DB C9          1972*  	ret
0415DC             1973*  
0415DC             1974*  ld_13_014:
0415DC 21 04 3C 04 1975*  	ld hl,F13_014
0415E0 22 DE BE 04 1976*  	ld (cur_filename),hl
0415E4 11 0A CB 04 1977*  	ld de,filedata
0415E8 01 00 00 01 1978*  	ld bc,65536
0415EC 3E 01       1979*  	ld a,mos_load
0415EE 5B CF       1980*  	RST.LIL 08h
0415F0 21 51 01 00 1981*  	ld hl,BUF_13_014
0415F4 01 0F 00 00 1982*  	ld bc,15
0415F8 11 2D 00 00 1983*  	ld de,45
0415FC DD 21 A3 02 1984*  	ld ix,675
       00          
041601 CD 59 C0 04 1985*  	call vdu_load_img
041605 C9          1986*  	ret
041606             1987*  
041606             1988*  ld_13_015:
041606 21 18 3C 04 1989*  	ld hl,F13_015
04160A 22 DE BE 04 1990*  	ld (cur_filename),hl
04160E 11 0A CB 04 1991*  	ld de,filedata
041612 01 00 00 01 1992*  	ld bc,65536
041616 3E 01       1993*  	ld a,mos_load
041618 5B CF       1994*  	RST.LIL 08h
04161A 21 52 01 00 1995*  	ld hl,BUF_13_015
04161E 01 19 00 00 1996*  	ld bc,25
041622 11 2D 00 00 1997*  	ld de,45
041626 DD 21 65 04 1998*  	ld ix,1125
       00          
04162B CD 59 C0 04 1999*  	call vdu_load_img
04162F C9          2000*  	ret
041630             2001*  
041630             2002*  ld_13_016:
041630 21 2C 3C 04 2003*  	ld hl,F13_016
041634 22 DE BE 04 2004*  	ld (cur_filename),hl
041638 11 0A CB 04 2005*  	ld de,filedata
04163C 01 00 00 01 2006*  	ld bc,65536
041640 3E 01       2007*  	ld a,mos_load
041642 5B CF       2008*  	RST.LIL 08h
041644 21 53 01 00 2009*  	ld hl,BUF_13_016
041648 01 23 00 00 2010*  	ld bc,35
04164C 11 2D 00 00 2011*  	ld de,45
041650 DD 21 27 06 2012*  	ld ix,1575
       00          
041655 CD 59 C0 04 2013*  	call vdu_load_img
041659 C9          2014*  	ret
04165A             2015*  
04165A             2016*  ld_13_020:
04165A 21 40 3C 04 2017*  	ld hl,F13_020
04165E 22 DE BE 04 2018*  	ld (cur_filename),hl
041662 11 0A CB 04 2019*  	ld de,filedata
041666 01 00 00 01 2020*  	ld bc,65536
04166A 3E 01       2021*  	ld a,mos_load
04166C 5B CF       2022*  	RST.LIL 08h
04166E 21 54 01 00 2023*  	ld hl,BUF_13_020
041672 01 2E 00 00 2024*  	ld bc,46
041676 11 2D 00 00 2025*  	ld de,45
04167A DD 21 16 08 2026*  	ld ix,2070
       00          
04167F CD 59 C0 04 2027*  	call vdu_load_img
041683 C9          2028*  	ret
041684             2029*  
041684             2030*  ld_13_024:
041684 21 54 3C 04 2031*  	ld hl,F13_024
041688 22 DE BE 04 2032*  	ld (cur_filename),hl
04168C 11 0A CB 04 2033*  	ld de,filedata
041690 01 00 00 01 2034*  	ld bc,65536
041694 3E 01       2035*  	ld a,mos_load
041696 5B CF       2036*  	RST.LIL 08h
041698 21 55 01 00 2037*  	ld hl,BUF_13_024
04169C 01 2E 00 00 2038*  	ld bc,46
0416A0 11 40 00 00 2039*  	ld de,64
0416A4 DD 21 80 0B 2040*  	ld ix,2944
       00          
0416A9 CD 59 C0 04 2041*  	call vdu_load_img
0416AD C9          2042*  	ret
0416AE             2043*  
0416AE             2044*  ld_13_025:
0416AE 21 68 3C 04 2045*  	ld hl,F13_025
0416B2 22 DE BE 04 2046*  	ld (cur_filename),hl
0416B6 11 0A CB 04 2047*  	ld de,filedata
0416BA 01 00 00 01 2048*  	ld bc,65536
0416BE 3E 01       2049*  	ld a,mos_load
0416C0 5B CF       2050*  	RST.LIL 08h
0416C2 21 56 01 00 2051*  	ld hl,BUF_13_025
0416C6 01 1C 00 00 2052*  	ld bc,28
0416CA 11 40 00 00 2053*  	ld de,64
0416CE DD 21 00 07 2054*  	ld ix,1792
       00          
0416D3 CD 59 C0 04 2055*  	call vdu_load_img
0416D7 C9          2056*  	ret
0416D8             2057*  
0416D8             2058*  ld_13_026:
0416D8 21 7C 3C 04 2059*  	ld hl,F13_026
0416DC 22 DE BE 04 2060*  	ld (cur_filename),hl
0416E0 11 0A CB 04 2061*  	ld de,filedata
0416E4 01 00 00 01 2062*  	ld bc,65536
0416E8 3E 01       2063*  	ld a,mos_load
0416EA 5B CF       2064*  	RST.LIL 08h
0416EC 21 57 01 00 2065*  	ld hl,BUF_13_026
0416F0 01 09 00 00 2066*  	ld bc,9
0416F4 11 40 00 00 2067*  	ld de,64
0416F8 DD 21 40 02 2068*  	ld ix,576
       00          
0416FD CD 59 C0 04 2069*  	call vdu_load_img
041701 C9          2070*  	ret
041702             2071*  
041702             2072*  ld_13_027:
041702 21 90 3C 04 2073*  	ld hl,F13_027
041706 22 DE BE 04 2074*  	ld (cur_filename),hl
04170A 11 0A CB 04 2075*  	ld de,filedata
04170E 01 00 00 01 2076*  	ld bc,65536
041712 3E 01       2077*  	ld a,mos_load
041714 5B CF       2078*  	RST.LIL 08h
041716 21 58 01 00 2079*  	ld hl,BUF_13_027
04171A 01 0A 00 00 2080*  	ld bc,10
04171E 11 3E 00 00 2081*  	ld de,62
041722 DD 21 6C 02 2082*  	ld ix,620
       00          
041727 CD 59 C0 04 2083*  	call vdu_load_img
04172B C9          2084*  	ret
04172C             2085*  
04172C             2086*  ld_13_028:
04172C 21 A4 3C 04 2087*  	ld hl,F13_028
041730 22 DE BE 04 2088*  	ld (cur_filename),hl
041734 11 0A CB 04 2089*  	ld de,filedata
041738 01 00 00 01 2090*  	ld bc,65536
04173C 3E 01       2091*  	ld a,mos_load
04173E 5B CF       2092*  	RST.LIL 08h
041740 21 59 01 00 2093*  	ld hl,BUF_13_028
041744 01 1C 00 00 2094*  	ld bc,28
041748 11 40 00 00 2095*  	ld de,64
04174C DD 21 00 07 2096*  	ld ix,1792
       00          
041751 CD 59 C0 04 2097*  	call vdu_load_img
041755 C9          2098*  	ret
041756             2099*  
041756             2100*  ld_13_029:
041756 21 B8 3C 04 2101*  	ld hl,F13_029
04175A 22 DE BE 04 2102*  	ld (cur_filename),hl
04175E 11 0A CB 04 2103*  	ld de,filedata
041762 01 00 00 01 2104*  	ld bc,65536
041766 3E 01       2105*  	ld a,mos_load
041768 5B CF       2106*  	RST.LIL 08h
04176A 21 5A 01 00 2107*  	ld hl,BUF_13_029
04176E 01 2F 00 00 2108*  	ld bc,47
041772 11 40 00 00 2109*  	ld de,64
041776 DD 21 C0 0B 2110*  	ld ix,3008
       00          
04177B CD 59 C0 04 2111*  	call vdu_load_img
04177F C9          2112*  	ret
041780             2113*  
041780             2114*  ld_13_032:
041780 21 CC 3C 04 2115*  	ld hl,F13_032
041784 22 DE BE 04 2116*  	ld (cur_filename),hl
041788 11 0A CB 04 2117*  	ld de,filedata
04178C 01 00 00 01 2118*  	ld bc,65536
041790 3E 01       2119*  	ld a,mos_load
041792 5B CF       2120*  	RST.LIL 08h
041794 21 5B 01 00 2121*  	ld hl,BUF_13_032
041798 01 41 00 00 2122*  	ld bc,65
04179C 11 40 00 00 2123*  	ld de,64
0417A0 DD 21 40 10 2124*  	ld ix,4160
       00          
0417A5 CD 59 C0 04 2125*  	call vdu_load_img
0417A9 C9          2126*  	ret
0417AA             2127*  
0417AA             2128*  ld_13_035:
0417AA 21 E0 3C 04 2129*  	ld hl,F13_035
0417AE 22 DE BE 04 2130*  	ld (cur_filename),hl
0417B2 11 0A CB 04 2131*  	ld de,filedata
0417B6 01 00 00 01 2132*  	ld bc,65536
0417BA 3E 01       2133*  	ld a,mos_load
0417BC 5B CF       2134*  	RST.LIL 08h
0417BE 21 5C 01 00 2135*  	ld hl,BUF_13_035
0417C2 01 3F 00 00 2136*  	ld bc,63
0417C6 11 6B 00 00 2137*  	ld de,107
0417CA DD 21 55 1A 2138*  	ld ix,6741
       00          
0417CF CD 59 C0 04 2139*  	call vdu_load_img
0417D3 C9          2140*  	ret
0417D4             2141*  
0417D4             2142*  ld_13_036:
0417D4 21 F4 3C 04 2143*  	ld hl,F13_036
0417D8 22 DE BE 04 2144*  	ld (cur_filename),hl
0417DC 11 0A CB 04 2145*  	ld de,filedata
0417E0 01 00 00 01 2146*  	ld bc,65536
0417E4 3E 01       2147*  	ld a,mos_load
0417E6 5B CF       2148*  	RST.LIL 08h
0417E8 21 5D 01 00 2149*  	ld hl,BUF_13_036
0417EC 01 16 00 00 2150*  	ld bc,22
0417F0 11 6B 00 00 2151*  	ld de,107
0417F4 DD 21 32 09 2152*  	ld ix,2354
       00          
0417F9 CD 59 C0 04 2153*  	call vdu_load_img
0417FD C9          2154*  	ret
0417FE             2155*  
0417FE             2156*  ld_13_037:
0417FE 21 08 3D 04 2157*  	ld hl,F13_037
041802 22 DE BE 04 2158*  	ld (cur_filename),hl
041806 11 0A CB 04 2159*  	ld de,filedata
04180A 01 00 00 01 2160*  	ld bc,65536
04180E 3E 01       2161*  	ld a,mos_load
041810 5B CF       2162*  	RST.LIL 08h
041812 21 5E 01 00 2163*  	ld hl,BUF_13_037
041816 01 15 00 00 2164*  	ld bc,21
04181A 11 69 00 00 2165*  	ld de,105
04181E DD 21 9D 08 2166*  	ld ix,2205
       00          
041823 CD 59 C0 04 2167*  	call vdu_load_img
041827 C9          2168*  	ret
041828             2169*  
041828             2170*  ld_13_038:
041828 21 1C 3D 04 2171*  	ld hl,F13_038
04182C 22 DE BE 04 2172*  	ld (cur_filename),hl
041830 11 0A CB 04 2173*  	ld de,filedata
041834 01 00 00 01 2174*  	ld bc,65536
041838 3E 01       2175*  	ld a,mos_load
04183A 5B CF       2176*  	RST.LIL 08h
04183C 21 5F 01 00 2177*  	ld hl,BUF_13_038
041840 01 3F 00 00 2178*  	ld bc,63
041844 11 6B 00 00 2179*  	ld de,107
041848 DD 21 55 1A 2180*  	ld ix,6741
       00          
04184D CD 59 C0 04 2181*  	call vdu_load_img
041851 C9          2182*  	ret
041852             2183*  
041852             2184*  ld_13_040:
041852 21 30 3D 04 2185*  	ld hl,F13_040
041856 22 DE BE 04 2186*  	ld (cur_filename),hl
04185A 11 0A CB 04 2187*  	ld de,filedata
04185E 01 00 00 01 2188*  	ld bc,65536
041862 3E 01       2189*  	ld a,mos_load
041864 5B CF       2190*  	RST.LIL 08h
041866 21 60 01 00 2191*  	ld hl,BUF_13_040
04186A 01 6C 00 00 2192*  	ld bc,108
04186E 11 6B 00 00 2193*  	ld de,107
041872 DD 21 24 2D 2194*  	ld ix,11556
       00          
041877 CD 59 C0 04 2195*  	call vdu_load_img
04187B C9          2196*  	ret
04187C             2197*  
04187C             2198*  ld_13_042:
04187C 21 44 3D 04 2199*  	ld hl,F13_042
041880 22 DE BE 04 2200*  	ld (cur_filename),hl
041884 11 0A CB 04 2201*  	ld de,filedata
041888 01 00 00 01 2202*  	ld bc,65536
04188C 3E 01       2203*  	ld a,mos_load
04188E 5B CF       2204*  	RST.LIL 08h
041890 21 61 01 00 2205*  	ld hl,BUF_13_042
041894 01 6A 00 00 2206*  	ld bc,106
041898 11 A0 00 00 2207*  	ld de,160
04189C DD 21 40 42 2208*  	ld ix,16960
       00          
0418A1 CD 59 C0 04 2209*  	call vdu_load_img
0418A5 C9          2210*  	ret
0418A6             2211*  
0418A6             2212*  ld_13_043:
0418A6 21 58 3D 04 2213*  	ld hl,F13_043
0418AA 22 DE BE 04 2214*  	ld (cur_filename),hl
0418AE 11 0A CB 04 2215*  	ld de,filedata
0418B2 01 00 00 01 2216*  	ld bc,65536
0418B6 3E 01       2217*  	ld a,mos_load
0418B8 5B CF       2218*  	RST.LIL 08h
0418BA 21 62 01 00 2219*  	ld hl,BUF_13_043
0418BE 01 6B 00 00 2220*  	ld bc,107
0418C2 11 A0 00 00 2221*  	ld de,160
0418C6 DD 21 E0 42 2222*  	ld ix,17120
       00          
0418CB CD 59 C0 04 2223*  	call vdu_load_img
0418CF C9          2224*  	ret
0418D0             2225*  
0418D0             2226*  ld_13_044:
0418D0 21 6C 3D 04 2227*  	ld hl,F13_044
0418D4 22 DE BE 04 2228*  	ld (cur_filename),hl
0418D8 11 0A CB 04 2229*  	ld de,filedata
0418DC 01 00 00 01 2230*  	ld bc,65536
0418E0 3E 01       2231*  	ld a,mos_load
0418E2 5B CF       2232*  	RST.LIL 08h
0418E4 21 63 01 00 2233*  	ld hl,BUF_13_044
0418E8 01 40 01 00 2234*  	ld bc,320
0418EC 11 A0 00 00 2235*  	ld de,160
0418F0 DD 21 00 C8 2236*  	ld ix,51200
       00          
0418F5 CD 59 C0 04 2237*  	call vdu_load_img
0418F9 C9          2238*  	ret
0418FA             2239*  
0418FA             2240*  ld_14_004:
0418FA 21 80 3D 04 2241*  	ld hl,F14_004
0418FE 22 DE BE 04 2242*  	ld (cur_filename),hl
041902 11 0A CB 04 2243*  	ld de,filedata
041906 01 00 00 01 2244*  	ld bc,65536
04190A 3E 01       2245*  	ld a,mos_load
04190C 5B CF       2246*  	RST.LIL 08h
04190E 21 64 01 00 2247*  	ld hl,BUF_14_004
041912 01 24 00 00 2248*  	ld bc,36
041916 11 23 00 00 2249*  	ld de,35
04191A DD 21 EC 04 2250*  	ld ix,1260
       00          
04191F CD 59 C0 04 2251*  	call vdu_load_img
041923 C9          2252*  	ret
041924             2253*  
041924             2254*  ld_14_009:
041924 21 94 3D 04 2255*  	ld hl,F14_009
041928 22 DE BE 04 2256*  	ld (cur_filename),hl
04192C 11 0A CB 04 2257*  	ld de,filedata
041930 01 00 00 01 2258*  	ld bc,65536
041934 3E 01       2259*  	ld a,mos_load
041936 5B CF       2260*  	RST.LIL 08h
041938 21 65 01 00 2261*  	ld hl,BUF_14_009
04193C 01 23 00 00 2262*  	ld bc,35
041940 11 2D 00 00 2263*  	ld de,45
041944 DD 21 27 06 2264*  	ld ix,1575
       00          
041949 CD 59 C0 04 2265*  	call vdu_load_img
04194D C9          2266*  	ret
04194E             2267*  
04194E             2268*  ld_14_010:
04194E 21 A8 3D 04 2269*  	ld hl,F14_010
041952 22 DE BE 04 2270*  	ld (cur_filename),hl
041956 11 0A CB 04 2271*  	ld de,filedata
04195A 01 00 00 01 2272*  	ld bc,65536
04195E 3E 01       2273*  	ld a,mos_load
041960 5B CF       2274*  	RST.LIL 08h
041962 21 66 01 00 2275*  	ld hl,BUF_14_010
041966 01 19 00 00 2276*  	ld bc,25
04196A 11 2D 00 00 2277*  	ld de,45
04196E DD 21 65 04 2278*  	ld ix,1125
       00          
041973 CD 59 C0 04 2279*  	call vdu_load_img
041977 C9          2280*  	ret
041978             2281*  
041978             2282*  ld_14_011:
041978 21 BC 3D 04 2283*  	ld hl,F14_011
04197C 22 DE BE 04 2284*  	ld (cur_filename),hl
041980 11 0A CB 04 2285*  	ld de,filedata
041984 01 00 00 01 2286*  	ld bc,65536
041988 3E 01       2287*  	ld a,mos_load
04198A 5B CF       2288*  	RST.LIL 08h
04198C 21 67 01 00 2289*  	ld hl,BUF_14_011
041990 01 0F 00 00 2290*  	ld bc,15
041994 11 2D 00 00 2291*  	ld de,45
041998 DD 21 A3 02 2292*  	ld ix,675
       00          
04199D CD 59 C0 04 2293*  	call vdu_load_img
0419A1 C9          2294*  	ret
0419A2             2295*  
0419A2             2296*  ld_14_012:
0419A2 21 D0 3D 04 2297*  	ld hl,F14_012
0419A6 22 DE BE 04 2298*  	ld (cur_filename),hl
0419AA 11 0A CB 04 2299*  	ld de,filedata
0419AE 01 00 00 01 2300*  	ld bc,65536
0419B2 3E 01       2301*  	ld a,mos_load
0419B4 5B CF       2302*  	RST.LIL 08h
0419B6 21 68 01 00 2303*  	ld hl,BUF_14_012
0419BA 01 05 00 00 2304*  	ld bc,5
0419BE 11 2D 00 00 2305*  	ld de,45
0419C2 DD 21 E1 00 2306*  	ld ix,225
       00          
0419C7 CD 59 C0 04 2307*  	call vdu_load_img
0419CB C9          2308*  	ret
0419CC             2309*  
0419CC             2310*  ld_14_013:
0419CC 21 E4 3D 04 2311*  	ld hl,F14_013
0419D0 22 DE BE 04 2312*  	ld (cur_filename),hl
0419D4 11 0A CB 04 2313*  	ld de,filedata
0419D8 01 00 00 01 2314*  	ld bc,65536
0419DC 3E 01       2315*  	ld a,mos_load
0419DE 5B CF       2316*  	RST.LIL 08h
0419E0 21 69 01 00 2317*  	ld hl,BUF_14_013
0419E4 01 05 00 00 2318*  	ld bc,5
0419E8 11 2B 00 00 2319*  	ld de,43
0419EC DD 21 D7 00 2320*  	ld ix,215
       00          
0419F1 CD 59 C0 04 2321*  	call vdu_load_img
0419F5 C9          2322*  	ret
0419F6             2323*  
0419F6             2324*  ld_14_014:
0419F6 21 F8 3D 04 2325*  	ld hl,F14_014
0419FA 22 DE BE 04 2326*  	ld (cur_filename),hl
0419FE 11 0A CB 04 2327*  	ld de,filedata
041A02 01 00 00 01 2328*  	ld bc,65536
041A06 3E 01       2329*  	ld a,mos_load
041A08 5B CF       2330*  	RST.LIL 08h
041A0A 21 6A 01 00 2331*  	ld hl,BUF_14_014
041A0E 01 0F 00 00 2332*  	ld bc,15
041A12 11 2D 00 00 2333*  	ld de,45
041A16 DD 21 A3 02 2334*  	ld ix,675
       00          
041A1B CD 59 C0 04 2335*  	call vdu_load_img
041A1F C9          2336*  	ret
041A20             2337*  
041A20             2338*  ld_14_015:
041A20 21 0C 3E 04 2339*  	ld hl,F14_015
041A24 22 DE BE 04 2340*  	ld (cur_filename),hl
041A28 11 0A CB 04 2341*  	ld de,filedata
041A2C 01 00 00 01 2342*  	ld bc,65536
041A30 3E 01       2343*  	ld a,mos_load
041A32 5B CF       2344*  	RST.LIL 08h
041A34 21 6B 01 00 2345*  	ld hl,BUF_14_015
041A38 01 19 00 00 2346*  	ld bc,25
041A3C 11 2D 00 00 2347*  	ld de,45
041A40 DD 21 65 04 2348*  	ld ix,1125
       00          
041A45 CD 59 C0 04 2349*  	call vdu_load_img
041A49 C9          2350*  	ret
041A4A             2351*  
041A4A             2352*  ld_14_016:
041A4A 21 20 3E 04 2353*  	ld hl,F14_016
041A4E 22 DE BE 04 2354*  	ld (cur_filename),hl
041A52 11 0A CB 04 2355*  	ld de,filedata
041A56 01 00 00 01 2356*  	ld bc,65536
041A5A 3E 01       2357*  	ld a,mos_load
041A5C 5B CF       2358*  	RST.LIL 08h
041A5E 21 6C 01 00 2359*  	ld hl,BUF_14_016
041A62 01 23 00 00 2360*  	ld bc,35
041A66 11 2D 00 00 2361*  	ld de,45
041A6A DD 21 27 06 2362*  	ld ix,1575
       00          
041A6F CD 59 C0 04 2363*  	call vdu_load_img
041A73 C9          2364*  	ret
041A74             2365*  
041A74             2366*  ld_14_020:
041A74 21 34 3E 04 2367*  	ld hl,F14_020
041A78 22 DE BE 04 2368*  	ld (cur_filename),hl
041A7C 11 0A CB 04 2369*  	ld de,filedata
041A80 01 00 00 01 2370*  	ld bc,65536
041A84 3E 01       2371*  	ld a,mos_load
041A86 5B CF       2372*  	RST.LIL 08h
041A88 21 6D 01 00 2373*  	ld hl,BUF_14_020
041A8C 01 2E 00 00 2374*  	ld bc,46
041A90 11 2D 00 00 2375*  	ld de,45
041A94 DD 21 16 08 2376*  	ld ix,2070
       00          
041A99 CD 59 C0 04 2377*  	call vdu_load_img
041A9D C9          2378*  	ret
041A9E             2379*  
041A9E             2380*  ld_14_024:
041A9E 21 48 3E 04 2381*  	ld hl,F14_024
041AA2 22 DE BE 04 2382*  	ld (cur_filename),hl
041AA6 11 0A CB 04 2383*  	ld de,filedata
041AAA 01 00 00 01 2384*  	ld bc,65536
041AAE 3E 01       2385*  	ld a,mos_load
041AB0 5B CF       2386*  	RST.LIL 08h
041AB2 21 6E 01 00 2387*  	ld hl,BUF_14_024
041AB6 01 2E 00 00 2388*  	ld bc,46
041ABA 11 40 00 00 2389*  	ld de,64
041ABE DD 21 80 0B 2390*  	ld ix,2944
       00          
041AC3 CD 59 C0 04 2391*  	call vdu_load_img
041AC7 C9          2392*  	ret
041AC8             2393*  
041AC8             2394*  ld_14_025:
041AC8 21 5C 3E 04 2395*  	ld hl,F14_025
041ACC 22 DE BE 04 2396*  	ld (cur_filename),hl
041AD0 11 0A CB 04 2397*  	ld de,filedata
041AD4 01 00 00 01 2398*  	ld bc,65536
041AD8 3E 01       2399*  	ld a,mos_load
041ADA 5B CF       2400*  	RST.LIL 08h
041ADC 21 6F 01 00 2401*  	ld hl,BUF_14_025
041AE0 01 1C 00 00 2402*  	ld bc,28
041AE4 11 40 00 00 2403*  	ld de,64
041AE8 DD 21 00 07 2404*  	ld ix,1792
       00          
041AED CD 59 C0 04 2405*  	call vdu_load_img
041AF1 C9          2406*  	ret
041AF2             2407*  
041AF2             2408*  ld_14_026:
041AF2 21 70 3E 04 2409*  	ld hl,F14_026
041AF6 22 DE BE 04 2410*  	ld (cur_filename),hl
041AFA 11 0A CB 04 2411*  	ld de,filedata
041AFE 01 00 00 01 2412*  	ld bc,65536
041B02 3E 01       2413*  	ld a,mos_load
041B04 5B CF       2414*  	RST.LIL 08h
041B06 21 70 01 00 2415*  	ld hl,BUF_14_026
041B0A 01 09 00 00 2416*  	ld bc,9
041B0E 11 40 00 00 2417*  	ld de,64
041B12 DD 21 40 02 2418*  	ld ix,576
       00          
041B17 CD 59 C0 04 2419*  	call vdu_load_img
041B1B C9          2420*  	ret
041B1C             2421*  
041B1C             2422*  ld_14_027:
041B1C 21 84 3E 04 2423*  	ld hl,F14_027
041B20 22 DE BE 04 2424*  	ld (cur_filename),hl
041B24 11 0A CB 04 2425*  	ld de,filedata
041B28 01 00 00 01 2426*  	ld bc,65536
041B2C 3E 01       2427*  	ld a,mos_load
041B2E 5B CF       2428*  	RST.LIL 08h
041B30 21 71 01 00 2429*  	ld hl,BUF_14_027
041B34 01 0A 00 00 2430*  	ld bc,10
041B38 11 3E 00 00 2431*  	ld de,62
041B3C DD 21 6C 02 2432*  	ld ix,620
       00          
041B41 CD 59 C0 04 2433*  	call vdu_load_img
041B45 C9          2434*  	ret
041B46             2435*  
041B46             2436*  ld_14_028:
041B46 21 98 3E 04 2437*  	ld hl,F14_028
041B4A 22 DE BE 04 2438*  	ld (cur_filename),hl
041B4E 11 0A CB 04 2439*  	ld de,filedata
041B52 01 00 00 01 2440*  	ld bc,65536
041B56 3E 01       2441*  	ld a,mos_load
041B58 5B CF       2442*  	RST.LIL 08h
041B5A 21 72 01 00 2443*  	ld hl,BUF_14_028
041B5E 01 1C 00 00 2444*  	ld bc,28
041B62 11 40 00 00 2445*  	ld de,64
041B66 DD 21 00 07 2446*  	ld ix,1792
       00          
041B6B CD 59 C0 04 2447*  	call vdu_load_img
041B6F C9          2448*  	ret
041B70             2449*  
041B70             2450*  ld_14_029:
041B70 21 AC 3E 04 2451*  	ld hl,F14_029
041B74 22 DE BE 04 2452*  	ld (cur_filename),hl
041B78 11 0A CB 04 2453*  	ld de,filedata
041B7C 01 00 00 01 2454*  	ld bc,65536
041B80 3E 01       2455*  	ld a,mos_load
041B82 5B CF       2456*  	RST.LIL 08h
041B84 21 73 01 00 2457*  	ld hl,BUF_14_029
041B88 01 2F 00 00 2458*  	ld bc,47
041B8C 11 40 00 00 2459*  	ld de,64
041B90 DD 21 C0 0B 2460*  	ld ix,3008
       00          
041B95 CD 59 C0 04 2461*  	call vdu_load_img
041B99 C9          2462*  	ret
041B9A             2463*  
041B9A             2464*  ld_14_032:
041B9A 21 C0 3E 04 2465*  	ld hl,F14_032
041B9E 22 DE BE 04 2466*  	ld (cur_filename),hl
041BA2 11 0A CB 04 2467*  	ld de,filedata
041BA6 01 00 00 01 2468*  	ld bc,65536
041BAA 3E 01       2469*  	ld a,mos_load
041BAC 5B CF       2470*  	RST.LIL 08h
041BAE 21 74 01 00 2471*  	ld hl,BUF_14_032
041BB2 01 41 00 00 2472*  	ld bc,65
041BB6 11 40 00 00 2473*  	ld de,64
041BBA DD 21 40 10 2474*  	ld ix,4160
       00          
041BBF CD 59 C0 04 2475*  	call vdu_load_img
041BC3 C9          2476*  	ret
041BC4             2477*  
041BC4             2478*  ld_14_035:
041BC4 21 D4 3E 04 2479*  	ld hl,F14_035
041BC8 22 DE BE 04 2480*  	ld (cur_filename),hl
041BCC 11 0A CB 04 2481*  	ld de,filedata
041BD0 01 00 00 01 2482*  	ld bc,65536
041BD4 3E 01       2483*  	ld a,mos_load
041BD6 5B CF       2484*  	RST.LIL 08h
041BD8 21 75 01 00 2485*  	ld hl,BUF_14_035
041BDC 01 3F 00 00 2486*  	ld bc,63
041BE0 11 6B 00 00 2487*  	ld de,107
041BE4 DD 21 55 1A 2488*  	ld ix,6741
       00          
041BE9 CD 59 C0 04 2489*  	call vdu_load_img
041BED C9          2490*  	ret
041BEE             2491*  
041BEE             2492*  ld_14_036:
041BEE 21 E8 3E 04 2493*  	ld hl,F14_036
041BF2 22 DE BE 04 2494*  	ld (cur_filename),hl
041BF6 11 0A CB 04 2495*  	ld de,filedata
041BFA 01 00 00 01 2496*  	ld bc,65536
041BFE 3E 01       2497*  	ld a,mos_load
041C00 5B CF       2498*  	RST.LIL 08h
041C02 21 76 01 00 2499*  	ld hl,BUF_14_036
041C06 01 16 00 00 2500*  	ld bc,22
041C0A 11 6B 00 00 2501*  	ld de,107
041C0E DD 21 32 09 2502*  	ld ix,2354
       00          
041C13 CD 59 C0 04 2503*  	call vdu_load_img
041C17 C9          2504*  	ret
041C18             2505*  
041C18             2506*  ld_14_037:
041C18 21 FC 3E 04 2507*  	ld hl,F14_037
041C1C 22 DE BE 04 2508*  	ld (cur_filename),hl
041C20 11 0A CB 04 2509*  	ld de,filedata
041C24 01 00 00 01 2510*  	ld bc,65536
041C28 3E 01       2511*  	ld a,mos_load
041C2A 5B CF       2512*  	RST.LIL 08h
041C2C 21 77 01 00 2513*  	ld hl,BUF_14_037
041C30 01 15 00 00 2514*  	ld bc,21
041C34 11 69 00 00 2515*  	ld de,105
041C38 DD 21 9D 08 2516*  	ld ix,2205
       00          
041C3D CD 59 C0 04 2517*  	call vdu_load_img
041C41 C9          2518*  	ret
041C42             2519*  
041C42             2520*  ld_14_038:
041C42 21 10 3F 04 2521*  	ld hl,F14_038
041C46 22 DE BE 04 2522*  	ld (cur_filename),hl
041C4A 11 0A CB 04 2523*  	ld de,filedata
041C4E 01 00 00 01 2524*  	ld bc,65536
041C52 3E 01       2525*  	ld a,mos_load
041C54 5B CF       2526*  	RST.LIL 08h
041C56 21 78 01 00 2527*  	ld hl,BUF_14_038
041C5A 01 3F 00 00 2528*  	ld bc,63
041C5E 11 6B 00 00 2529*  	ld de,107
041C62 DD 21 55 1A 2530*  	ld ix,6741
       00          
041C67 CD 59 C0 04 2531*  	call vdu_load_img
041C6B C9          2532*  	ret
041C6C             2533*  
041C6C             2534*  ld_14_040:
041C6C 21 24 3F 04 2535*  	ld hl,F14_040
041C70 22 DE BE 04 2536*  	ld (cur_filename),hl
041C74 11 0A CB 04 2537*  	ld de,filedata
041C78 01 00 00 01 2538*  	ld bc,65536
041C7C 3E 01       2539*  	ld a,mos_load
041C7E 5B CF       2540*  	RST.LIL 08h
041C80 21 79 01 00 2541*  	ld hl,BUF_14_040
041C84 01 6C 00 00 2542*  	ld bc,108
041C88 11 6B 00 00 2543*  	ld de,107
041C8C DD 21 24 2D 2544*  	ld ix,11556
       00          
041C91 CD 59 C0 04 2545*  	call vdu_load_img
041C95 C9          2546*  	ret
041C96             2547*  
041C96             2548*  ld_14_042:
041C96 21 38 3F 04 2549*  	ld hl,F14_042
041C9A 22 DE BE 04 2550*  	ld (cur_filename),hl
041C9E 11 0A CB 04 2551*  	ld de,filedata
041CA2 01 00 00 01 2552*  	ld bc,65536
041CA6 3E 01       2553*  	ld a,mos_load
041CA8 5B CF       2554*  	RST.LIL 08h
041CAA 21 7A 01 00 2555*  	ld hl,BUF_14_042
041CAE 01 6A 00 00 2556*  	ld bc,106
041CB2 11 A0 00 00 2557*  	ld de,160
041CB6 DD 21 40 42 2558*  	ld ix,16960
       00          
041CBB CD 59 C0 04 2559*  	call vdu_load_img
041CBF C9          2560*  	ret
041CC0             2561*  
041CC0             2562*  ld_14_043:
041CC0 21 4C 3F 04 2563*  	ld hl,F14_043
041CC4 22 DE BE 04 2564*  	ld (cur_filename),hl
041CC8 11 0A CB 04 2565*  	ld de,filedata
041CCC 01 00 00 01 2566*  	ld bc,65536
041CD0 3E 01       2567*  	ld a,mos_load
041CD2 5B CF       2568*  	RST.LIL 08h
041CD4 21 7B 01 00 2569*  	ld hl,BUF_14_043
041CD8 01 6B 00 00 2570*  	ld bc,107
041CDC 11 A0 00 00 2571*  	ld de,160
041CE0 DD 21 E0 42 2572*  	ld ix,17120
       00          
041CE5 CD 59 C0 04 2573*  	call vdu_load_img
041CE9 C9          2574*  	ret
041CEA             2575*  
041CEA             2576*  ld_14_044:
041CEA 21 60 3F 04 2577*  	ld hl,F14_044
041CEE 22 DE BE 04 2578*  	ld (cur_filename),hl
041CF2 11 0A CB 04 2579*  	ld de,filedata
041CF6 01 00 00 01 2580*  	ld bc,65536
041CFA 3E 01       2581*  	ld a,mos_load
041CFC 5B CF       2582*  	RST.LIL 08h
041CFE 21 7C 01 00 2583*  	ld hl,BUF_14_044
041D02 01 40 01 00 2584*  	ld bc,320
041D06 11 A0 00 00 2585*  	ld de,160
041D0A DD 21 00 C8 2586*  	ld ix,51200
       00          
041D0F CD 59 C0 04 2587*  	call vdu_load_img
041D13 C9          2588*  	ret
041D14             2589*  
041D14             2590*  ld_15_004:
041D14 21 74 3F 04 2591*  	ld hl,F15_004
041D18 22 DE BE 04 2592*  	ld (cur_filename),hl
041D1C 11 0A CB 04 2593*  	ld de,filedata
041D20 01 00 00 01 2594*  	ld bc,65536
041D24 3E 01       2595*  	ld a,mos_load
041D26 5B CF       2596*  	RST.LIL 08h
041D28 21 7D 01 00 2597*  	ld hl,BUF_15_004
041D2C 01 24 00 00 2598*  	ld bc,36
041D30 11 23 00 00 2599*  	ld de,35
041D34 DD 21 EC 04 2600*  	ld ix,1260
       00          
041D39 CD 59 C0 04 2601*  	call vdu_load_img
041D3D C9          2602*  	ret
041D3E             2603*  
041D3E             2604*  ld_15_009:
041D3E 21 88 3F 04 2605*  	ld hl,F15_009
041D42 22 DE BE 04 2606*  	ld (cur_filename),hl
041D46 11 0A CB 04 2607*  	ld de,filedata
041D4A 01 00 00 01 2608*  	ld bc,65536
041D4E 3E 01       2609*  	ld a,mos_load
041D50 5B CF       2610*  	RST.LIL 08h
041D52 21 7E 01 00 2611*  	ld hl,BUF_15_009
041D56 01 23 00 00 2612*  	ld bc,35
041D5A 11 2D 00 00 2613*  	ld de,45
041D5E DD 21 27 06 2614*  	ld ix,1575
       00          
041D63 CD 59 C0 04 2615*  	call vdu_load_img
041D67 C9          2616*  	ret
041D68             2617*  
041D68             2618*  ld_15_010:
041D68 21 9C 3F 04 2619*  	ld hl,F15_010
041D6C 22 DE BE 04 2620*  	ld (cur_filename),hl
041D70 11 0A CB 04 2621*  	ld de,filedata
041D74 01 00 00 01 2622*  	ld bc,65536
041D78 3E 01       2623*  	ld a,mos_load
041D7A 5B CF       2624*  	RST.LIL 08h
041D7C 21 7F 01 00 2625*  	ld hl,BUF_15_010
041D80 01 19 00 00 2626*  	ld bc,25
041D84 11 2D 00 00 2627*  	ld de,45
041D88 DD 21 65 04 2628*  	ld ix,1125
       00          
041D8D CD 59 C0 04 2629*  	call vdu_load_img
041D91 C9          2630*  	ret
041D92             2631*  
041D92             2632*  ld_15_011:
041D92 21 B0 3F 04 2633*  	ld hl,F15_011
041D96 22 DE BE 04 2634*  	ld (cur_filename),hl
041D9A 11 0A CB 04 2635*  	ld de,filedata
041D9E 01 00 00 01 2636*  	ld bc,65536
041DA2 3E 01       2637*  	ld a,mos_load
041DA4 5B CF       2638*  	RST.LIL 08h
041DA6 21 80 01 00 2639*  	ld hl,BUF_15_011
041DAA 01 0F 00 00 2640*  	ld bc,15
041DAE 11 2D 00 00 2641*  	ld de,45
041DB2 DD 21 A3 02 2642*  	ld ix,675
       00          
041DB7 CD 59 C0 04 2643*  	call vdu_load_img
041DBB C9          2644*  	ret
041DBC             2645*  
041DBC             2646*  ld_15_012:
041DBC 21 C4 3F 04 2647*  	ld hl,F15_012
041DC0 22 DE BE 04 2648*  	ld (cur_filename),hl
041DC4 11 0A CB 04 2649*  	ld de,filedata
041DC8 01 00 00 01 2650*  	ld bc,65536
041DCC 3E 01       2651*  	ld a,mos_load
041DCE 5B CF       2652*  	RST.LIL 08h
041DD0 21 81 01 00 2653*  	ld hl,BUF_15_012
041DD4 01 05 00 00 2654*  	ld bc,5
041DD8 11 2D 00 00 2655*  	ld de,45
041DDC DD 21 E1 00 2656*  	ld ix,225
       00          
041DE1 CD 59 C0 04 2657*  	call vdu_load_img
041DE5 C9          2658*  	ret
041DE6             2659*  
041DE6             2660*  ld_15_013:
041DE6 21 D8 3F 04 2661*  	ld hl,F15_013
041DEA 22 DE BE 04 2662*  	ld (cur_filename),hl
041DEE 11 0A CB 04 2663*  	ld de,filedata
041DF2 01 00 00 01 2664*  	ld bc,65536
041DF6 3E 01       2665*  	ld a,mos_load
041DF8 5B CF       2666*  	RST.LIL 08h
041DFA 21 82 01 00 2667*  	ld hl,BUF_15_013
041DFE 01 05 00 00 2668*  	ld bc,5
041E02 11 2B 00 00 2669*  	ld de,43
041E06 DD 21 D7 00 2670*  	ld ix,215
       00          
041E0B CD 59 C0 04 2671*  	call vdu_load_img
041E0F C9          2672*  	ret
041E10             2673*  
041E10             2674*  ld_15_014:
041E10 21 EC 3F 04 2675*  	ld hl,F15_014
041E14 22 DE BE 04 2676*  	ld (cur_filename),hl
041E18 11 0A CB 04 2677*  	ld de,filedata
041E1C 01 00 00 01 2678*  	ld bc,65536
041E20 3E 01       2679*  	ld a,mos_load
041E22 5B CF       2680*  	RST.LIL 08h
041E24 21 83 01 00 2681*  	ld hl,BUF_15_014
041E28 01 0F 00 00 2682*  	ld bc,15
041E2C 11 2D 00 00 2683*  	ld de,45
041E30 DD 21 A3 02 2684*  	ld ix,675
       00          
041E35 CD 59 C0 04 2685*  	call vdu_load_img
041E39 C9          2686*  	ret
041E3A             2687*  
041E3A             2688*  ld_15_015:
041E3A 21 00 40 04 2689*  	ld hl,F15_015
041E3E 22 DE BE 04 2690*  	ld (cur_filename),hl
041E42 11 0A CB 04 2691*  	ld de,filedata
041E46 01 00 00 01 2692*  	ld bc,65536
041E4A 3E 01       2693*  	ld a,mos_load
041E4C 5B CF       2694*  	RST.LIL 08h
041E4E 21 84 01 00 2695*  	ld hl,BUF_15_015
041E52 01 19 00 00 2696*  	ld bc,25
041E56 11 2D 00 00 2697*  	ld de,45
041E5A DD 21 65 04 2698*  	ld ix,1125
       00          
041E5F CD 59 C0 04 2699*  	call vdu_load_img
041E63 C9          2700*  	ret
041E64             2701*  
041E64             2702*  ld_15_016:
041E64 21 14 40 04 2703*  	ld hl,F15_016
041E68 22 DE BE 04 2704*  	ld (cur_filename),hl
041E6C 11 0A CB 04 2705*  	ld de,filedata
041E70 01 00 00 01 2706*  	ld bc,65536
041E74 3E 01       2707*  	ld a,mos_load
041E76 5B CF       2708*  	RST.LIL 08h
041E78 21 85 01 00 2709*  	ld hl,BUF_15_016
041E7C 01 23 00 00 2710*  	ld bc,35
041E80 11 2D 00 00 2711*  	ld de,45
041E84 DD 21 27 06 2712*  	ld ix,1575
       00          
041E89 CD 59 C0 04 2713*  	call vdu_load_img
041E8D C9          2714*  	ret
041E8E             2715*  
041E8E             2716*  ld_15_020:
041E8E 21 28 40 04 2717*  	ld hl,F15_020
041E92 22 DE BE 04 2718*  	ld (cur_filename),hl
041E96 11 0A CB 04 2719*  	ld de,filedata
041E9A 01 00 00 01 2720*  	ld bc,65536
041E9E 3E 01       2721*  	ld a,mos_load
041EA0 5B CF       2722*  	RST.LIL 08h
041EA2 21 86 01 00 2723*  	ld hl,BUF_15_020
041EA6 01 2E 00 00 2724*  	ld bc,46
041EAA 11 2D 00 00 2725*  	ld de,45
041EAE DD 21 16 08 2726*  	ld ix,2070
       00          
041EB3 CD 59 C0 04 2727*  	call vdu_load_img
041EB7 C9          2728*  	ret
041EB8             2729*  
041EB8             2730*  ld_15_024:
041EB8 21 3C 40 04 2731*  	ld hl,F15_024
041EBC 22 DE BE 04 2732*  	ld (cur_filename),hl
041EC0 11 0A CB 04 2733*  	ld de,filedata
041EC4 01 00 00 01 2734*  	ld bc,65536
041EC8 3E 01       2735*  	ld a,mos_load
041ECA 5B CF       2736*  	RST.LIL 08h
041ECC 21 87 01 00 2737*  	ld hl,BUF_15_024
041ED0 01 2E 00 00 2738*  	ld bc,46
041ED4 11 40 00 00 2739*  	ld de,64
041ED8 DD 21 80 0B 2740*  	ld ix,2944
       00          
041EDD CD 59 C0 04 2741*  	call vdu_load_img
041EE1 C9          2742*  	ret
041EE2             2743*  
041EE2             2744*  ld_15_025:
041EE2 21 50 40 04 2745*  	ld hl,F15_025
041EE6 22 DE BE 04 2746*  	ld (cur_filename),hl
041EEA 11 0A CB 04 2747*  	ld de,filedata
041EEE 01 00 00 01 2748*  	ld bc,65536
041EF2 3E 01       2749*  	ld a,mos_load
041EF4 5B CF       2750*  	RST.LIL 08h
041EF6 21 88 01 00 2751*  	ld hl,BUF_15_025
041EFA 01 1C 00 00 2752*  	ld bc,28
041EFE 11 40 00 00 2753*  	ld de,64
041F02 DD 21 00 07 2754*  	ld ix,1792
       00          
041F07 CD 59 C0 04 2755*  	call vdu_load_img
041F0B C9          2756*  	ret
041F0C             2757*  
041F0C             2758*  ld_15_026:
041F0C 21 64 40 04 2759*  	ld hl,F15_026
041F10 22 DE BE 04 2760*  	ld (cur_filename),hl
041F14 11 0A CB 04 2761*  	ld de,filedata
041F18 01 00 00 01 2762*  	ld bc,65536
041F1C 3E 01       2763*  	ld a,mos_load
041F1E 5B CF       2764*  	RST.LIL 08h
041F20 21 89 01 00 2765*  	ld hl,BUF_15_026
041F24 01 09 00 00 2766*  	ld bc,9
041F28 11 40 00 00 2767*  	ld de,64
041F2C DD 21 40 02 2768*  	ld ix,576
       00          
041F31 CD 59 C0 04 2769*  	call vdu_load_img
041F35 C9          2770*  	ret
041F36             2771*  
041F36             2772*  ld_15_027:
041F36 21 78 40 04 2773*  	ld hl,F15_027
041F3A 22 DE BE 04 2774*  	ld (cur_filename),hl
041F3E 11 0A CB 04 2775*  	ld de,filedata
041F42 01 00 00 01 2776*  	ld bc,65536
041F46 3E 01       2777*  	ld a,mos_load
041F48 5B CF       2778*  	RST.LIL 08h
041F4A 21 8A 01 00 2779*  	ld hl,BUF_15_027
041F4E 01 0A 00 00 2780*  	ld bc,10
041F52 11 3E 00 00 2781*  	ld de,62
041F56 DD 21 6C 02 2782*  	ld ix,620
       00          
041F5B CD 59 C0 04 2783*  	call vdu_load_img
041F5F C9          2784*  	ret
041F60             2785*  
041F60             2786*  ld_15_028:
041F60 21 8C 40 04 2787*  	ld hl,F15_028
041F64 22 DE BE 04 2788*  	ld (cur_filename),hl
041F68 11 0A CB 04 2789*  	ld de,filedata
041F6C 01 00 00 01 2790*  	ld bc,65536
041F70 3E 01       2791*  	ld a,mos_load
041F72 5B CF       2792*  	RST.LIL 08h
041F74 21 8B 01 00 2793*  	ld hl,BUF_15_028
041F78 01 1C 00 00 2794*  	ld bc,28
041F7C 11 40 00 00 2795*  	ld de,64
041F80 DD 21 00 07 2796*  	ld ix,1792
       00          
041F85 CD 59 C0 04 2797*  	call vdu_load_img
041F89 C9          2798*  	ret
041F8A             2799*  
041F8A             2800*  ld_15_029:
041F8A 21 A0 40 04 2801*  	ld hl,F15_029
041F8E 22 DE BE 04 2802*  	ld (cur_filename),hl
041F92 11 0A CB 04 2803*  	ld de,filedata
041F96 01 00 00 01 2804*  	ld bc,65536
041F9A 3E 01       2805*  	ld a,mos_load
041F9C 5B CF       2806*  	RST.LIL 08h
041F9E 21 8C 01 00 2807*  	ld hl,BUF_15_029
041FA2 01 2F 00 00 2808*  	ld bc,47
041FA6 11 40 00 00 2809*  	ld de,64
041FAA DD 21 C0 0B 2810*  	ld ix,3008
       00          
041FAF CD 59 C0 04 2811*  	call vdu_load_img
041FB3 C9          2812*  	ret
041FB4             2813*  
041FB4             2814*  ld_15_032:
041FB4 21 B4 40 04 2815*  	ld hl,F15_032
041FB8 22 DE BE 04 2816*  	ld (cur_filename),hl
041FBC 11 0A CB 04 2817*  	ld de,filedata
041FC0 01 00 00 01 2818*  	ld bc,65536
041FC4 3E 01       2819*  	ld a,mos_load
041FC6 5B CF       2820*  	RST.LIL 08h
041FC8 21 8D 01 00 2821*  	ld hl,BUF_15_032
041FCC 01 41 00 00 2822*  	ld bc,65
041FD0 11 40 00 00 2823*  	ld de,64
041FD4 DD 21 40 10 2824*  	ld ix,4160
       00          
041FD9 CD 59 C0 04 2825*  	call vdu_load_img
041FDD C9          2826*  	ret
041FDE             2827*  
041FDE             2828*  ld_15_035:
041FDE 21 C8 40 04 2829*  	ld hl,F15_035
041FE2 22 DE BE 04 2830*  	ld (cur_filename),hl
041FE6 11 0A CB 04 2831*  	ld de,filedata
041FEA 01 00 00 01 2832*  	ld bc,65536
041FEE 3E 01       2833*  	ld a,mos_load
041FF0 5B CF       2834*  	RST.LIL 08h
041FF2 21 8E 01 00 2835*  	ld hl,BUF_15_035
041FF6 01 3F 00 00 2836*  	ld bc,63
041FFA 11 6B 00 00 2837*  	ld de,107
041FFE DD 21 55 1A 2838*  	ld ix,6741
       00          
042003 CD 59 C0 04 2839*  	call vdu_load_img
042007 C9          2840*  	ret
042008             2841*  
042008             2842*  ld_15_036:
042008 21 DC 40 04 2843*  	ld hl,F15_036
04200C 22 DE BE 04 2844*  	ld (cur_filename),hl
042010 11 0A CB 04 2845*  	ld de,filedata
042014 01 00 00 01 2846*  	ld bc,65536
042018 3E 01       2847*  	ld a,mos_load
04201A 5B CF       2848*  	RST.LIL 08h
04201C 21 8F 01 00 2849*  	ld hl,BUF_15_036
042020 01 16 00 00 2850*  	ld bc,22
042024 11 6B 00 00 2851*  	ld de,107
042028 DD 21 32 09 2852*  	ld ix,2354
       00          
04202D CD 59 C0 04 2853*  	call vdu_load_img
042031 C9          2854*  	ret
042032             2855*  
042032             2856*  ld_15_037:
042032 21 F0 40 04 2857*  	ld hl,F15_037
042036 22 DE BE 04 2858*  	ld (cur_filename),hl
04203A 11 0A CB 04 2859*  	ld de,filedata
04203E 01 00 00 01 2860*  	ld bc,65536
042042 3E 01       2861*  	ld a,mos_load
042044 5B CF       2862*  	RST.LIL 08h
042046 21 90 01 00 2863*  	ld hl,BUF_15_037
04204A 01 15 00 00 2864*  	ld bc,21
04204E 11 69 00 00 2865*  	ld de,105
042052 DD 21 9D 08 2866*  	ld ix,2205
       00          
042057 CD 59 C0 04 2867*  	call vdu_load_img
04205B C9          2868*  	ret
04205C             2869*  
04205C             2870*  ld_15_038:
04205C 21 04 41 04 2871*  	ld hl,F15_038
042060 22 DE BE 04 2872*  	ld (cur_filename),hl
042064 11 0A CB 04 2873*  	ld de,filedata
042068 01 00 00 01 2874*  	ld bc,65536
04206C 3E 01       2875*  	ld a,mos_load
04206E 5B CF       2876*  	RST.LIL 08h
042070 21 91 01 00 2877*  	ld hl,BUF_15_038
042074 01 3F 00 00 2878*  	ld bc,63
042078 11 6B 00 00 2879*  	ld de,107
04207C DD 21 55 1A 2880*  	ld ix,6741
       00          
042081 CD 59 C0 04 2881*  	call vdu_load_img
042085 C9          2882*  	ret
042086             2883*  
042086             2884*  ld_15_040:
042086 21 18 41 04 2885*  	ld hl,F15_040
04208A 22 DE BE 04 2886*  	ld (cur_filename),hl
04208E 11 0A CB 04 2887*  	ld de,filedata
042092 01 00 00 01 2888*  	ld bc,65536
042096 3E 01       2889*  	ld a,mos_load
042098 5B CF       2890*  	RST.LIL 08h
04209A 21 92 01 00 2891*  	ld hl,BUF_15_040
04209E 01 6C 00 00 2892*  	ld bc,108
0420A2 11 6B 00 00 2893*  	ld de,107
0420A6 DD 21 24 2D 2894*  	ld ix,11556
       00          
0420AB CD 59 C0 04 2895*  	call vdu_load_img
0420AF C9          2896*  	ret
0420B0             2897*  
0420B0             2898*  ld_15_042:
0420B0 21 2C 41 04 2899*  	ld hl,F15_042
0420B4 22 DE BE 04 2900*  	ld (cur_filename),hl
0420B8 11 0A CB 04 2901*  	ld de,filedata
0420BC 01 00 00 01 2902*  	ld bc,65536
0420C0 3E 01       2903*  	ld a,mos_load
0420C2 5B CF       2904*  	RST.LIL 08h
0420C4 21 93 01 00 2905*  	ld hl,BUF_15_042
0420C8 01 6A 00 00 2906*  	ld bc,106
0420CC 11 A0 00 00 2907*  	ld de,160
0420D0 DD 21 40 42 2908*  	ld ix,16960
       00          
0420D5 CD 59 C0 04 2909*  	call vdu_load_img
0420D9 C9          2910*  	ret
0420DA             2911*  
0420DA             2912*  ld_15_043:
0420DA 21 40 41 04 2913*  	ld hl,F15_043
0420DE 22 DE BE 04 2914*  	ld (cur_filename),hl
0420E2 11 0A CB 04 2915*  	ld de,filedata
0420E6 01 00 00 01 2916*  	ld bc,65536
0420EA 3E 01       2917*  	ld a,mos_load
0420EC 5B CF       2918*  	RST.LIL 08h
0420EE 21 94 01 00 2919*  	ld hl,BUF_15_043
0420F2 01 6B 00 00 2920*  	ld bc,107
0420F6 11 A0 00 00 2921*  	ld de,160
0420FA DD 21 E0 42 2922*  	ld ix,17120
       00          
0420FF CD 59 C0 04 2923*  	call vdu_load_img
042103 C9          2924*  	ret
042104             2925*  
042104             2926*  ld_15_044:
042104 21 54 41 04 2927*  	ld hl,F15_044
042108 22 DE BE 04 2928*  	ld (cur_filename),hl
04210C 11 0A CB 04 2929*  	ld de,filedata
042110 01 00 00 01 2930*  	ld bc,65536
042114 3E 01       2931*  	ld a,mos_load
042116 5B CF       2932*  	RST.LIL 08h
042118 21 95 01 00 2933*  	ld hl,BUF_15_044
04211C 01 40 01 00 2934*  	ld bc,320
042120 11 A0 00 00 2935*  	ld de,160
042124 DD 21 00 C8 2936*  	ld ix,51200
       00          
042129 CD 59 C0 04 2937*  	call vdu_load_img
04212D C9          2938*  	ret
04212E             2939*  
04212E             2940*  ld_16_004:
04212E 21 68 41 04 2941*  	ld hl,F16_004
042132 22 DE BE 04 2942*  	ld (cur_filename),hl
042136 11 0A CB 04 2943*  	ld de,filedata
04213A 01 00 00 01 2944*  	ld bc,65536
04213E 3E 01       2945*  	ld a,mos_load
042140 5B CF       2946*  	RST.LIL 08h
042142 21 96 01 00 2947*  	ld hl,BUF_16_004
042146 01 24 00 00 2948*  	ld bc,36
04214A 11 23 00 00 2949*  	ld de,35
04214E DD 21 EC 04 2950*  	ld ix,1260
       00          
042153 CD 59 C0 04 2951*  	call vdu_load_img
042157 C9          2952*  	ret
042158             2953*  
042158             2954*  ld_16_009:
042158 21 7C 41 04 2955*  	ld hl,F16_009
04215C 22 DE BE 04 2956*  	ld (cur_filename),hl
042160 11 0A CB 04 2957*  	ld de,filedata
042164 01 00 00 01 2958*  	ld bc,65536
042168 3E 01       2959*  	ld a,mos_load
04216A 5B CF       2960*  	RST.LIL 08h
04216C 21 97 01 00 2961*  	ld hl,BUF_16_009
042170 01 23 00 00 2962*  	ld bc,35
042174 11 2D 00 00 2963*  	ld de,45
042178 DD 21 27 06 2964*  	ld ix,1575
       00          
04217D CD 59 C0 04 2965*  	call vdu_load_img
042181 C9          2966*  	ret
042182             2967*  
042182             2968*  ld_16_010:
042182 21 90 41 04 2969*  	ld hl,F16_010
042186 22 DE BE 04 2970*  	ld (cur_filename),hl
04218A 11 0A CB 04 2971*  	ld de,filedata
04218E 01 00 00 01 2972*  	ld bc,65536
042192 3E 01       2973*  	ld a,mos_load
042194 5B CF       2974*  	RST.LIL 08h
042196 21 98 01 00 2975*  	ld hl,BUF_16_010
04219A 01 19 00 00 2976*  	ld bc,25
04219E 11 2D 00 00 2977*  	ld de,45
0421A2 DD 21 65 04 2978*  	ld ix,1125
       00          
0421A7 CD 59 C0 04 2979*  	call vdu_load_img
0421AB C9          2980*  	ret
0421AC             2981*  
0421AC             2982*  ld_16_011:
0421AC 21 A4 41 04 2983*  	ld hl,F16_011
0421B0 22 DE BE 04 2984*  	ld (cur_filename),hl
0421B4 11 0A CB 04 2985*  	ld de,filedata
0421B8 01 00 00 01 2986*  	ld bc,65536
0421BC 3E 01       2987*  	ld a,mos_load
0421BE 5B CF       2988*  	RST.LIL 08h
0421C0 21 99 01 00 2989*  	ld hl,BUF_16_011
0421C4 01 0F 00 00 2990*  	ld bc,15
0421C8 11 2D 00 00 2991*  	ld de,45
0421CC DD 21 A3 02 2992*  	ld ix,675
       00          
0421D1 CD 59 C0 04 2993*  	call vdu_load_img
0421D5 C9          2994*  	ret
0421D6             2995*  
0421D6             2996*  ld_16_012:
0421D6 21 B8 41 04 2997*  	ld hl,F16_012
0421DA 22 DE BE 04 2998*  	ld (cur_filename),hl
0421DE 11 0A CB 04 2999*  	ld de,filedata
0421E2 01 00 00 01 3000*  	ld bc,65536
0421E6 3E 01       3001*  	ld a,mos_load
0421E8 5B CF       3002*  	RST.LIL 08h
0421EA 21 9A 01 00 3003*  	ld hl,BUF_16_012
0421EE 01 05 00 00 3004*  	ld bc,5
0421F2 11 2D 00 00 3005*  	ld de,45
0421F6 DD 21 E1 00 3006*  	ld ix,225
       00          
0421FB CD 59 C0 04 3007*  	call vdu_load_img
0421FF C9          3008*  	ret
042200             3009*  
042200             3010*  ld_16_013:
042200 21 CC 41 04 3011*  	ld hl,F16_013
042204 22 DE BE 04 3012*  	ld (cur_filename),hl
042208 11 0A CB 04 3013*  	ld de,filedata
04220C 01 00 00 01 3014*  	ld bc,65536
042210 3E 01       3015*  	ld a,mos_load
042212 5B CF       3016*  	RST.LIL 08h
042214 21 9B 01 00 3017*  	ld hl,BUF_16_013
042218 01 05 00 00 3018*  	ld bc,5
04221C 11 2B 00 00 3019*  	ld de,43
042220 DD 21 D7 00 3020*  	ld ix,215
       00          
042225 CD 59 C0 04 3021*  	call vdu_load_img
042229 C9          3022*  	ret
04222A             3023*  
04222A             3024*  ld_16_014:
04222A 21 E0 41 04 3025*  	ld hl,F16_014
04222E 22 DE BE 04 3026*  	ld (cur_filename),hl
042232 11 0A CB 04 3027*  	ld de,filedata
042236 01 00 00 01 3028*  	ld bc,65536
04223A 3E 01       3029*  	ld a,mos_load
04223C 5B CF       3030*  	RST.LIL 08h
04223E 21 9C 01 00 3031*  	ld hl,BUF_16_014
042242 01 0F 00 00 3032*  	ld bc,15
042246 11 2D 00 00 3033*  	ld de,45
04224A DD 21 A3 02 3034*  	ld ix,675
       00          
04224F CD 59 C0 04 3035*  	call vdu_load_img
042253 C9          3036*  	ret
042254             3037*  
042254             3038*  ld_16_015:
042254 21 F4 41 04 3039*  	ld hl,F16_015
042258 22 DE BE 04 3040*  	ld (cur_filename),hl
04225C 11 0A CB 04 3041*  	ld de,filedata
042260 01 00 00 01 3042*  	ld bc,65536
042264 3E 01       3043*  	ld a,mos_load
042266 5B CF       3044*  	RST.LIL 08h
042268 21 9D 01 00 3045*  	ld hl,BUF_16_015
04226C 01 19 00 00 3046*  	ld bc,25
042270 11 2D 00 00 3047*  	ld de,45
042274 DD 21 65 04 3048*  	ld ix,1125
       00          
042279 CD 59 C0 04 3049*  	call vdu_load_img
04227D C9          3050*  	ret
04227E             3051*  
04227E             3052*  ld_16_016:
04227E 21 08 42 04 3053*  	ld hl,F16_016
042282 22 DE BE 04 3054*  	ld (cur_filename),hl
042286 11 0A CB 04 3055*  	ld de,filedata
04228A 01 00 00 01 3056*  	ld bc,65536
04228E 3E 01       3057*  	ld a,mos_load
042290 5B CF       3058*  	RST.LIL 08h
042292 21 9E 01 00 3059*  	ld hl,BUF_16_016
042296 01 23 00 00 3060*  	ld bc,35
04229A 11 2D 00 00 3061*  	ld de,45
04229E DD 21 27 06 3062*  	ld ix,1575
       00          
0422A3 CD 59 C0 04 3063*  	call vdu_load_img
0422A7 C9          3064*  	ret
0422A8             3065*  
0422A8             3066*  ld_16_020:
0422A8 21 1C 42 04 3067*  	ld hl,F16_020
0422AC 22 DE BE 04 3068*  	ld (cur_filename),hl
0422B0 11 0A CB 04 3069*  	ld de,filedata
0422B4 01 00 00 01 3070*  	ld bc,65536
0422B8 3E 01       3071*  	ld a,mos_load
0422BA 5B CF       3072*  	RST.LIL 08h
0422BC 21 9F 01 00 3073*  	ld hl,BUF_16_020
0422C0 01 2E 00 00 3074*  	ld bc,46
0422C4 11 2D 00 00 3075*  	ld de,45
0422C8 DD 21 16 08 3076*  	ld ix,2070
       00          
0422CD CD 59 C0 04 3077*  	call vdu_load_img
0422D1 C9          3078*  	ret
0422D2             3079*  
0422D2             3080*  ld_16_024:
0422D2 21 30 42 04 3081*  	ld hl,F16_024
0422D6 22 DE BE 04 3082*  	ld (cur_filename),hl
0422DA 11 0A CB 04 3083*  	ld de,filedata
0422DE 01 00 00 01 3084*  	ld bc,65536
0422E2 3E 01       3085*  	ld a,mos_load
0422E4 5B CF       3086*  	RST.LIL 08h
0422E6 21 A0 01 00 3087*  	ld hl,BUF_16_024
0422EA 01 2E 00 00 3088*  	ld bc,46
0422EE 11 40 00 00 3089*  	ld de,64
0422F2 DD 21 80 0B 3090*  	ld ix,2944
       00          
0422F7 CD 59 C0 04 3091*  	call vdu_load_img
0422FB C9          3092*  	ret
0422FC             3093*  
0422FC             3094*  ld_16_025:
0422FC 21 44 42 04 3095*  	ld hl,F16_025
042300 22 DE BE 04 3096*  	ld (cur_filename),hl
042304 11 0A CB 04 3097*  	ld de,filedata
042308 01 00 00 01 3098*  	ld bc,65536
04230C 3E 01       3099*  	ld a,mos_load
04230E 5B CF       3100*  	RST.LIL 08h
042310 21 A1 01 00 3101*  	ld hl,BUF_16_025
042314 01 1C 00 00 3102*  	ld bc,28
042318 11 40 00 00 3103*  	ld de,64
04231C DD 21 00 07 3104*  	ld ix,1792
       00          
042321 CD 59 C0 04 3105*  	call vdu_load_img
042325 C9          3106*  	ret
042326             3107*  
042326             3108*  ld_16_026:
042326 21 58 42 04 3109*  	ld hl,F16_026
04232A 22 DE BE 04 3110*  	ld (cur_filename),hl
04232E 11 0A CB 04 3111*  	ld de,filedata
042332 01 00 00 01 3112*  	ld bc,65536
042336 3E 01       3113*  	ld a,mos_load
042338 5B CF       3114*  	RST.LIL 08h
04233A 21 A2 01 00 3115*  	ld hl,BUF_16_026
04233E 01 09 00 00 3116*  	ld bc,9
042342 11 40 00 00 3117*  	ld de,64
042346 DD 21 40 02 3118*  	ld ix,576
       00          
04234B CD 59 C0 04 3119*  	call vdu_load_img
04234F C9          3120*  	ret
042350             3121*  
042350             3122*  ld_16_027:
042350 21 6C 42 04 3123*  	ld hl,F16_027
042354 22 DE BE 04 3124*  	ld (cur_filename),hl
042358 11 0A CB 04 3125*  	ld de,filedata
04235C 01 00 00 01 3126*  	ld bc,65536
042360 3E 01       3127*  	ld a,mos_load
042362 5B CF       3128*  	RST.LIL 08h
042364 21 A3 01 00 3129*  	ld hl,BUF_16_027
042368 01 0A 00 00 3130*  	ld bc,10
04236C 11 3E 00 00 3131*  	ld de,62
042370 DD 21 6C 02 3132*  	ld ix,620
       00          
042375 CD 59 C0 04 3133*  	call vdu_load_img
042379 C9          3134*  	ret
04237A             3135*  
04237A             3136*  ld_16_028:
04237A 21 80 42 04 3137*  	ld hl,F16_028
04237E 22 DE BE 04 3138*  	ld (cur_filename),hl
042382 11 0A CB 04 3139*  	ld de,filedata
042386 01 00 00 01 3140*  	ld bc,65536
04238A 3E 01       3141*  	ld a,mos_load
04238C 5B CF       3142*  	RST.LIL 08h
04238E 21 A4 01 00 3143*  	ld hl,BUF_16_028
042392 01 1C 00 00 3144*  	ld bc,28
042396 11 40 00 00 3145*  	ld de,64
04239A DD 21 00 07 3146*  	ld ix,1792
       00          
04239F CD 59 C0 04 3147*  	call vdu_load_img
0423A3 C9          3148*  	ret
0423A4             3149*  
0423A4             3150*  ld_16_029:
0423A4 21 94 42 04 3151*  	ld hl,F16_029
0423A8 22 DE BE 04 3152*  	ld (cur_filename),hl
0423AC 11 0A CB 04 3153*  	ld de,filedata
0423B0 01 00 00 01 3154*  	ld bc,65536
0423B4 3E 01       3155*  	ld a,mos_load
0423B6 5B CF       3156*  	RST.LIL 08h
0423B8 21 A5 01 00 3157*  	ld hl,BUF_16_029
0423BC 01 2F 00 00 3158*  	ld bc,47
0423C0 11 40 00 00 3159*  	ld de,64
0423C4 DD 21 C0 0B 3160*  	ld ix,3008
       00          
0423C9 CD 59 C0 04 3161*  	call vdu_load_img
0423CD C9          3162*  	ret
0423CE             3163*  
0423CE             3164*  ld_16_032:
0423CE 21 A8 42 04 3165*  	ld hl,F16_032
0423D2 22 DE BE 04 3166*  	ld (cur_filename),hl
0423D6 11 0A CB 04 3167*  	ld de,filedata
0423DA 01 00 00 01 3168*  	ld bc,65536
0423DE 3E 01       3169*  	ld a,mos_load
0423E0 5B CF       3170*  	RST.LIL 08h
0423E2 21 A6 01 00 3171*  	ld hl,BUF_16_032
0423E6 01 41 00 00 3172*  	ld bc,65
0423EA 11 40 00 00 3173*  	ld de,64
0423EE DD 21 40 10 3174*  	ld ix,4160
       00          
0423F3 CD 59 C0 04 3175*  	call vdu_load_img
0423F7 C9          3176*  	ret
0423F8             3177*  
0423F8             3178*  ld_16_035:
0423F8 21 BC 42 04 3179*  	ld hl,F16_035
0423FC 22 DE BE 04 3180*  	ld (cur_filename),hl
042400 11 0A CB 04 3181*  	ld de,filedata
042404 01 00 00 01 3182*  	ld bc,65536
042408 3E 01       3183*  	ld a,mos_load
04240A 5B CF       3184*  	RST.LIL 08h
04240C 21 A7 01 00 3185*  	ld hl,BUF_16_035
042410 01 3F 00 00 3186*  	ld bc,63
042414 11 6B 00 00 3187*  	ld de,107
042418 DD 21 55 1A 3188*  	ld ix,6741
       00          
04241D CD 59 C0 04 3189*  	call vdu_load_img
042421 C9          3190*  	ret
042422             3191*  
042422             3192*  ld_16_036:
042422 21 D0 42 04 3193*  	ld hl,F16_036
042426 22 DE BE 04 3194*  	ld (cur_filename),hl
04242A 11 0A CB 04 3195*  	ld de,filedata
04242E 01 00 00 01 3196*  	ld bc,65536
042432 3E 01       3197*  	ld a,mos_load
042434 5B CF       3198*  	RST.LIL 08h
042436 21 A8 01 00 3199*  	ld hl,BUF_16_036
04243A 01 16 00 00 3200*  	ld bc,22
04243E 11 6B 00 00 3201*  	ld de,107
042442 DD 21 32 09 3202*  	ld ix,2354
       00          
042447 CD 59 C0 04 3203*  	call vdu_load_img
04244B C9          3204*  	ret
04244C             3205*  
04244C             3206*  ld_16_037:
04244C 21 E4 42 04 3207*  	ld hl,F16_037
042450 22 DE BE 04 3208*  	ld (cur_filename),hl
042454 11 0A CB 04 3209*  	ld de,filedata
042458 01 00 00 01 3210*  	ld bc,65536
04245C 3E 01       3211*  	ld a,mos_load
04245E 5B CF       3212*  	RST.LIL 08h
042460 21 A9 01 00 3213*  	ld hl,BUF_16_037
042464 01 15 00 00 3214*  	ld bc,21
042468 11 69 00 00 3215*  	ld de,105
04246C DD 21 9D 08 3216*  	ld ix,2205
       00          
042471 CD 59 C0 04 3217*  	call vdu_load_img
042475 C9          3218*  	ret
042476             3219*  
042476             3220*  ld_16_038:
042476 21 F8 42 04 3221*  	ld hl,F16_038
04247A 22 DE BE 04 3222*  	ld (cur_filename),hl
04247E 11 0A CB 04 3223*  	ld de,filedata
042482 01 00 00 01 3224*  	ld bc,65536
042486 3E 01       3225*  	ld a,mos_load
042488 5B CF       3226*  	RST.LIL 08h
04248A 21 AA 01 00 3227*  	ld hl,BUF_16_038
04248E 01 3F 00 00 3228*  	ld bc,63
042492 11 6B 00 00 3229*  	ld de,107
042496 DD 21 55 1A 3230*  	ld ix,6741
       00          
04249B CD 59 C0 04 3231*  	call vdu_load_img
04249F C9          3232*  	ret
0424A0             3233*  
0424A0             3234*  ld_16_040:
0424A0 21 0C 43 04 3235*  	ld hl,F16_040
0424A4 22 DE BE 04 3236*  	ld (cur_filename),hl
0424A8 11 0A CB 04 3237*  	ld de,filedata
0424AC 01 00 00 01 3238*  	ld bc,65536
0424B0 3E 01       3239*  	ld a,mos_load
0424B2 5B CF       3240*  	RST.LIL 08h
0424B4 21 AB 01 00 3241*  	ld hl,BUF_16_040
0424B8 01 6C 00 00 3242*  	ld bc,108
0424BC 11 6B 00 00 3243*  	ld de,107
0424C0 DD 21 24 2D 3244*  	ld ix,11556
       00          
0424C5 CD 59 C0 04 3245*  	call vdu_load_img
0424C9 C9          3246*  	ret
0424CA             3247*  
0424CA             3248*  ld_16_042:
0424CA 21 20 43 04 3249*  	ld hl,F16_042
0424CE 22 DE BE 04 3250*  	ld (cur_filename),hl
0424D2 11 0A CB 04 3251*  	ld de,filedata
0424D6 01 00 00 01 3252*  	ld bc,65536
0424DA 3E 01       3253*  	ld a,mos_load
0424DC 5B CF       3254*  	RST.LIL 08h
0424DE 21 AC 01 00 3255*  	ld hl,BUF_16_042
0424E2 01 6A 00 00 3256*  	ld bc,106
0424E6 11 A0 00 00 3257*  	ld de,160
0424EA DD 21 40 42 3258*  	ld ix,16960
       00          
0424EF CD 59 C0 04 3259*  	call vdu_load_img
0424F3 C9          3260*  	ret
0424F4             3261*  
0424F4             3262*  ld_16_043:
0424F4 21 34 43 04 3263*  	ld hl,F16_043
0424F8 22 DE BE 04 3264*  	ld (cur_filename),hl
0424FC 11 0A CB 04 3265*  	ld de,filedata
042500 01 00 00 01 3266*  	ld bc,65536
042504 3E 01       3267*  	ld a,mos_load
042506 5B CF       3268*  	RST.LIL 08h
042508 21 AD 01 00 3269*  	ld hl,BUF_16_043
04250C 01 6B 00 00 3270*  	ld bc,107
042510 11 A0 00 00 3271*  	ld de,160
042514 DD 21 E0 42 3272*  	ld ix,17120
       00          
042519 CD 59 C0 04 3273*  	call vdu_load_img
04251D C9          3274*  	ret
04251E             3275*  
04251E             3276*  ld_16_044:
04251E 21 48 43 04 3277*  	ld hl,F16_044
042522 22 DE BE 04 3278*  	ld (cur_filename),hl
042526 11 0A CB 04 3279*  	ld de,filedata
04252A 01 00 00 01 3280*  	ld bc,65536
04252E 3E 01       3281*  	ld a,mos_load
042530 5B CF       3282*  	RST.LIL 08h
042532 21 AE 01 00 3283*  	ld hl,BUF_16_044
042536 01 40 01 00 3284*  	ld bc,320
04253A 11 A0 00 00 3285*  	ld de,160
04253E DD 21 00 C8 3286*  	ld ix,51200
       00          
042543 CD 59 C0 04 3287*  	call vdu_load_img
042547 C9          3288*  	ret
042548             3289*  
042548             3290*  ld_17_004:
042548 21 5C 43 04 3291*  	ld hl,F17_004
04254C 22 DE BE 04 3292*  	ld (cur_filename),hl
042550 11 0A CB 04 3293*  	ld de,filedata
042554 01 00 00 01 3294*  	ld bc,65536
042558 3E 01       3295*  	ld a,mos_load
04255A 5B CF       3296*  	RST.LIL 08h
04255C 21 AF 01 00 3297*  	ld hl,BUF_17_004
042560 01 24 00 00 3298*  	ld bc,36
042564 11 23 00 00 3299*  	ld de,35
042568 DD 21 EC 04 3300*  	ld ix,1260
       00          
04256D CD 59 C0 04 3301*  	call vdu_load_img
042571 C9          3302*  	ret
042572             3303*  
042572             3304*  ld_17_009:
042572 21 70 43 04 3305*  	ld hl,F17_009
042576 22 DE BE 04 3306*  	ld (cur_filename),hl
04257A 11 0A CB 04 3307*  	ld de,filedata
04257E 01 00 00 01 3308*  	ld bc,65536
042582 3E 01       3309*  	ld a,mos_load
042584 5B CF       3310*  	RST.LIL 08h
042586 21 B0 01 00 3311*  	ld hl,BUF_17_009
04258A 01 23 00 00 3312*  	ld bc,35
04258E 11 2D 00 00 3313*  	ld de,45
042592 DD 21 27 06 3314*  	ld ix,1575
       00          
042597 CD 59 C0 04 3315*  	call vdu_load_img
04259B C9          3316*  	ret
04259C             3317*  
04259C             3318*  ld_17_010:
04259C 21 84 43 04 3319*  	ld hl,F17_010
0425A0 22 DE BE 04 3320*  	ld (cur_filename),hl
0425A4 11 0A CB 04 3321*  	ld de,filedata
0425A8 01 00 00 01 3322*  	ld bc,65536
0425AC 3E 01       3323*  	ld a,mos_load
0425AE 5B CF       3324*  	RST.LIL 08h
0425B0 21 B1 01 00 3325*  	ld hl,BUF_17_010
0425B4 01 19 00 00 3326*  	ld bc,25
0425B8 11 2D 00 00 3327*  	ld de,45
0425BC DD 21 65 04 3328*  	ld ix,1125
       00          
0425C1 CD 59 C0 04 3329*  	call vdu_load_img
0425C5 C9          3330*  	ret
0425C6             3331*  
0425C6             3332*  ld_17_011:
0425C6 21 98 43 04 3333*  	ld hl,F17_011
0425CA 22 DE BE 04 3334*  	ld (cur_filename),hl
0425CE 11 0A CB 04 3335*  	ld de,filedata
0425D2 01 00 00 01 3336*  	ld bc,65536
0425D6 3E 01       3337*  	ld a,mos_load
0425D8 5B CF       3338*  	RST.LIL 08h
0425DA 21 B2 01 00 3339*  	ld hl,BUF_17_011
0425DE 01 0F 00 00 3340*  	ld bc,15
0425E2 11 2D 00 00 3341*  	ld de,45
0425E6 DD 21 A3 02 3342*  	ld ix,675
       00          
0425EB CD 59 C0 04 3343*  	call vdu_load_img
0425EF C9          3344*  	ret
0425F0             3345*  
0425F0             3346*  ld_17_012:
0425F0 21 AC 43 04 3347*  	ld hl,F17_012
0425F4 22 DE BE 04 3348*  	ld (cur_filename),hl
0425F8 11 0A CB 04 3349*  	ld de,filedata
0425FC 01 00 00 01 3350*  	ld bc,65536
042600 3E 01       3351*  	ld a,mos_load
042602 5B CF       3352*  	RST.LIL 08h
042604 21 B3 01 00 3353*  	ld hl,BUF_17_012
042608 01 05 00 00 3354*  	ld bc,5
04260C 11 2D 00 00 3355*  	ld de,45
042610 DD 21 E1 00 3356*  	ld ix,225
       00          
042615 CD 59 C0 04 3357*  	call vdu_load_img
042619 C9          3358*  	ret
04261A             3359*  
04261A             3360*  ld_17_013:
04261A 21 C0 43 04 3361*  	ld hl,F17_013
04261E 22 DE BE 04 3362*  	ld (cur_filename),hl
042622 11 0A CB 04 3363*  	ld de,filedata
042626 01 00 00 01 3364*  	ld bc,65536
04262A 3E 01       3365*  	ld a,mos_load
04262C 5B CF       3366*  	RST.LIL 08h
04262E 21 B4 01 00 3367*  	ld hl,BUF_17_013
042632 01 05 00 00 3368*  	ld bc,5
042636 11 2B 00 00 3369*  	ld de,43
04263A DD 21 D7 00 3370*  	ld ix,215
       00          
04263F CD 59 C0 04 3371*  	call vdu_load_img
042643 C9          3372*  	ret
042644             3373*  
042644             3374*  ld_17_014:
042644 21 D4 43 04 3375*  	ld hl,F17_014
042648 22 DE BE 04 3376*  	ld (cur_filename),hl
04264C 11 0A CB 04 3377*  	ld de,filedata
042650 01 00 00 01 3378*  	ld bc,65536
042654 3E 01       3379*  	ld a,mos_load
042656 5B CF       3380*  	RST.LIL 08h
042658 21 B5 01 00 3381*  	ld hl,BUF_17_014
04265C 01 0F 00 00 3382*  	ld bc,15
042660 11 2D 00 00 3383*  	ld de,45
042664 DD 21 A3 02 3384*  	ld ix,675
       00          
042669 CD 59 C0 04 3385*  	call vdu_load_img
04266D C9          3386*  	ret
04266E             3387*  
04266E             3388*  ld_17_015:
04266E 21 E8 43 04 3389*  	ld hl,F17_015
042672 22 DE BE 04 3390*  	ld (cur_filename),hl
042676 11 0A CB 04 3391*  	ld de,filedata
04267A 01 00 00 01 3392*  	ld bc,65536
04267E 3E 01       3393*  	ld a,mos_load
042680 5B CF       3394*  	RST.LIL 08h
042682 21 B6 01 00 3395*  	ld hl,BUF_17_015
042686 01 19 00 00 3396*  	ld bc,25
04268A 11 2D 00 00 3397*  	ld de,45
04268E DD 21 65 04 3398*  	ld ix,1125
       00          
042693 CD 59 C0 04 3399*  	call vdu_load_img
042697 C9          3400*  	ret
042698             3401*  
042698             3402*  ld_17_016:
042698 21 FC 43 04 3403*  	ld hl,F17_016
04269C 22 DE BE 04 3404*  	ld (cur_filename),hl
0426A0 11 0A CB 04 3405*  	ld de,filedata
0426A4 01 00 00 01 3406*  	ld bc,65536
0426A8 3E 01       3407*  	ld a,mos_load
0426AA 5B CF       3408*  	RST.LIL 08h
0426AC 21 B7 01 00 3409*  	ld hl,BUF_17_016
0426B0 01 23 00 00 3410*  	ld bc,35
0426B4 11 2D 00 00 3411*  	ld de,45
0426B8 DD 21 27 06 3412*  	ld ix,1575
       00          
0426BD CD 59 C0 04 3413*  	call vdu_load_img
0426C1 C9          3414*  	ret
0426C2             3415*  
0426C2             3416*  ld_17_020:
0426C2 21 10 44 04 3417*  	ld hl,F17_020
0426C6 22 DE BE 04 3418*  	ld (cur_filename),hl
0426CA 11 0A CB 04 3419*  	ld de,filedata
0426CE 01 00 00 01 3420*  	ld bc,65536
0426D2 3E 01       3421*  	ld a,mos_load
0426D4 5B CF       3422*  	RST.LIL 08h
0426D6 21 B8 01 00 3423*  	ld hl,BUF_17_020
0426DA 01 2E 00 00 3424*  	ld bc,46
0426DE 11 2D 00 00 3425*  	ld de,45
0426E2 DD 21 16 08 3426*  	ld ix,2070
       00          
0426E7 CD 59 C0 04 3427*  	call vdu_load_img
0426EB C9          3428*  	ret
0426EC             3429*  
0426EC             3430*  ld_17_024:
0426EC 21 24 44 04 3431*  	ld hl,F17_024
0426F0 22 DE BE 04 3432*  	ld (cur_filename),hl
0426F4 11 0A CB 04 3433*  	ld de,filedata
0426F8 01 00 00 01 3434*  	ld bc,65536
0426FC 3E 01       3435*  	ld a,mos_load
0426FE 5B CF       3436*  	RST.LIL 08h
042700 21 B9 01 00 3437*  	ld hl,BUF_17_024
042704 01 2E 00 00 3438*  	ld bc,46
042708 11 40 00 00 3439*  	ld de,64
04270C DD 21 80 0B 3440*  	ld ix,2944
       00          
042711 CD 59 C0 04 3441*  	call vdu_load_img
042715 C9          3442*  	ret
042716             3443*  
042716             3444*  ld_17_025:
042716 21 38 44 04 3445*  	ld hl,F17_025
04271A 22 DE BE 04 3446*  	ld (cur_filename),hl
04271E 11 0A CB 04 3447*  	ld de,filedata
042722 01 00 00 01 3448*  	ld bc,65536
042726 3E 01       3449*  	ld a,mos_load
042728 5B CF       3450*  	RST.LIL 08h
04272A 21 BA 01 00 3451*  	ld hl,BUF_17_025
04272E 01 1C 00 00 3452*  	ld bc,28
042732 11 40 00 00 3453*  	ld de,64
042736 DD 21 00 07 3454*  	ld ix,1792
       00          
04273B CD 59 C0 04 3455*  	call vdu_load_img
04273F C9          3456*  	ret
042740             3457*  
042740             3458*  ld_17_026:
042740 21 4C 44 04 3459*  	ld hl,F17_026
042744 22 DE BE 04 3460*  	ld (cur_filename),hl
042748 11 0A CB 04 3461*  	ld de,filedata
04274C 01 00 00 01 3462*  	ld bc,65536
042750 3E 01       3463*  	ld a,mos_load
042752 5B CF       3464*  	RST.LIL 08h
042754 21 BB 01 00 3465*  	ld hl,BUF_17_026
042758 01 09 00 00 3466*  	ld bc,9
04275C 11 40 00 00 3467*  	ld de,64
042760 DD 21 40 02 3468*  	ld ix,576
       00          
042765 CD 59 C0 04 3469*  	call vdu_load_img
042769 C9          3470*  	ret
04276A             3471*  
04276A             3472*  ld_17_027:
04276A 21 60 44 04 3473*  	ld hl,F17_027
04276E 22 DE BE 04 3474*  	ld (cur_filename),hl
042772 11 0A CB 04 3475*  	ld de,filedata
042776 01 00 00 01 3476*  	ld bc,65536
04277A 3E 01       3477*  	ld a,mos_load
04277C 5B CF       3478*  	RST.LIL 08h
04277E 21 BC 01 00 3479*  	ld hl,BUF_17_027
042782 01 0A 00 00 3480*  	ld bc,10
042786 11 3E 00 00 3481*  	ld de,62
04278A DD 21 6C 02 3482*  	ld ix,620
       00          
04278F CD 59 C0 04 3483*  	call vdu_load_img
042793 C9          3484*  	ret
042794             3485*  
042794             3486*  ld_17_028:
042794 21 74 44 04 3487*  	ld hl,F17_028
042798 22 DE BE 04 3488*  	ld (cur_filename),hl
04279C 11 0A CB 04 3489*  	ld de,filedata
0427A0 01 00 00 01 3490*  	ld bc,65536
0427A4 3E 01       3491*  	ld a,mos_load
0427A6 5B CF       3492*  	RST.LIL 08h
0427A8 21 BD 01 00 3493*  	ld hl,BUF_17_028
0427AC 01 1C 00 00 3494*  	ld bc,28
0427B0 11 40 00 00 3495*  	ld de,64
0427B4 DD 21 00 07 3496*  	ld ix,1792
       00          
0427B9 CD 59 C0 04 3497*  	call vdu_load_img
0427BD C9          3498*  	ret
0427BE             3499*  
0427BE             3500*  ld_17_029:
0427BE 21 88 44 04 3501*  	ld hl,F17_029
0427C2 22 DE BE 04 3502*  	ld (cur_filename),hl
0427C6 11 0A CB 04 3503*  	ld de,filedata
0427CA 01 00 00 01 3504*  	ld bc,65536
0427CE 3E 01       3505*  	ld a,mos_load
0427D0 5B CF       3506*  	RST.LIL 08h
0427D2 21 BE 01 00 3507*  	ld hl,BUF_17_029
0427D6 01 2F 00 00 3508*  	ld bc,47
0427DA 11 40 00 00 3509*  	ld de,64
0427DE DD 21 C0 0B 3510*  	ld ix,3008
       00          
0427E3 CD 59 C0 04 3511*  	call vdu_load_img
0427E7 C9          3512*  	ret
0427E8             3513*  
0427E8             3514*  ld_17_032:
0427E8 21 9C 44 04 3515*  	ld hl,F17_032
0427EC 22 DE BE 04 3516*  	ld (cur_filename),hl
0427F0 11 0A CB 04 3517*  	ld de,filedata
0427F4 01 00 00 01 3518*  	ld bc,65536
0427F8 3E 01       3519*  	ld a,mos_load
0427FA 5B CF       3520*  	RST.LIL 08h
0427FC 21 BF 01 00 3521*  	ld hl,BUF_17_032
042800 01 41 00 00 3522*  	ld bc,65
042804 11 40 00 00 3523*  	ld de,64
042808 DD 21 40 10 3524*  	ld ix,4160
       00          
04280D CD 59 C0 04 3525*  	call vdu_load_img
042811 C9          3526*  	ret
042812             3527*  
042812             3528*  ld_17_035:
042812 21 B0 44 04 3529*  	ld hl,F17_035
042816 22 DE BE 04 3530*  	ld (cur_filename),hl
04281A 11 0A CB 04 3531*  	ld de,filedata
04281E 01 00 00 01 3532*  	ld bc,65536
042822 3E 01       3533*  	ld a,mos_load
042824 5B CF       3534*  	RST.LIL 08h
042826 21 C0 01 00 3535*  	ld hl,BUF_17_035
04282A 01 3F 00 00 3536*  	ld bc,63
04282E 11 6B 00 00 3537*  	ld de,107
042832 DD 21 55 1A 3538*  	ld ix,6741
       00          
042837 CD 59 C0 04 3539*  	call vdu_load_img
04283B C9          3540*  	ret
04283C             3541*  
04283C             3542*  ld_17_036:
04283C 21 C4 44 04 3543*  	ld hl,F17_036
042840 22 DE BE 04 3544*  	ld (cur_filename),hl
042844 11 0A CB 04 3545*  	ld de,filedata
042848 01 00 00 01 3546*  	ld bc,65536
04284C 3E 01       3547*  	ld a,mos_load
04284E 5B CF       3548*  	RST.LIL 08h
042850 21 C1 01 00 3549*  	ld hl,BUF_17_036
042854 01 16 00 00 3550*  	ld bc,22
042858 11 6B 00 00 3551*  	ld de,107
04285C DD 21 32 09 3552*  	ld ix,2354
       00          
042861 CD 59 C0 04 3553*  	call vdu_load_img
042865 C9          3554*  	ret
042866             3555*  
042866             3556*  ld_17_037:
042866 21 D8 44 04 3557*  	ld hl,F17_037
04286A 22 DE BE 04 3558*  	ld (cur_filename),hl
04286E 11 0A CB 04 3559*  	ld de,filedata
042872 01 00 00 01 3560*  	ld bc,65536
042876 3E 01       3561*  	ld a,mos_load
042878 5B CF       3562*  	RST.LIL 08h
04287A 21 C2 01 00 3563*  	ld hl,BUF_17_037
04287E 01 15 00 00 3564*  	ld bc,21
042882 11 69 00 00 3565*  	ld de,105
042886 DD 21 9D 08 3566*  	ld ix,2205
       00          
04288B CD 59 C0 04 3567*  	call vdu_load_img
04288F C9          3568*  	ret
042890             3569*  
042890             3570*  ld_17_038:
042890 21 EC 44 04 3571*  	ld hl,F17_038
042894 22 DE BE 04 3572*  	ld (cur_filename),hl
042898 11 0A CB 04 3573*  	ld de,filedata
04289C 01 00 00 01 3574*  	ld bc,65536
0428A0 3E 01       3575*  	ld a,mos_load
0428A2 5B CF       3576*  	RST.LIL 08h
0428A4 21 C3 01 00 3577*  	ld hl,BUF_17_038
0428A8 01 3F 00 00 3578*  	ld bc,63
0428AC 11 6B 00 00 3579*  	ld de,107
0428B0 DD 21 55 1A 3580*  	ld ix,6741
       00          
0428B5 CD 59 C0 04 3581*  	call vdu_load_img
0428B9 C9          3582*  	ret
0428BA             3583*  
0428BA             3584*  ld_17_040:
0428BA 21 00 45 04 3585*  	ld hl,F17_040
0428BE 22 DE BE 04 3586*  	ld (cur_filename),hl
0428C2 11 0A CB 04 3587*  	ld de,filedata
0428C6 01 00 00 01 3588*  	ld bc,65536
0428CA 3E 01       3589*  	ld a,mos_load
0428CC 5B CF       3590*  	RST.LIL 08h
0428CE 21 C4 01 00 3591*  	ld hl,BUF_17_040
0428D2 01 6C 00 00 3592*  	ld bc,108
0428D6 11 6B 00 00 3593*  	ld de,107
0428DA DD 21 24 2D 3594*  	ld ix,11556
       00          
0428DF CD 59 C0 04 3595*  	call vdu_load_img
0428E3 C9          3596*  	ret
0428E4             3597*  
0428E4             3598*  ld_17_042:
0428E4 21 14 45 04 3599*  	ld hl,F17_042
0428E8 22 DE BE 04 3600*  	ld (cur_filename),hl
0428EC 11 0A CB 04 3601*  	ld de,filedata
0428F0 01 00 00 01 3602*  	ld bc,65536
0428F4 3E 01       3603*  	ld a,mos_load
0428F6 5B CF       3604*  	RST.LIL 08h
0428F8 21 C5 01 00 3605*  	ld hl,BUF_17_042
0428FC 01 6A 00 00 3606*  	ld bc,106
042900 11 A0 00 00 3607*  	ld de,160
042904 DD 21 40 42 3608*  	ld ix,16960
       00          
042909 CD 59 C0 04 3609*  	call vdu_load_img
04290D C9          3610*  	ret
04290E             3611*  
04290E             3612*  ld_17_043:
04290E 21 28 45 04 3613*  	ld hl,F17_043
042912 22 DE BE 04 3614*  	ld (cur_filename),hl
042916 11 0A CB 04 3615*  	ld de,filedata
04291A 01 00 00 01 3616*  	ld bc,65536
04291E 3E 01       3617*  	ld a,mos_load
042920 5B CF       3618*  	RST.LIL 08h
042922 21 C6 01 00 3619*  	ld hl,BUF_17_043
042926 01 6B 00 00 3620*  	ld bc,107
04292A 11 A0 00 00 3621*  	ld de,160
04292E DD 21 E0 42 3622*  	ld ix,17120
       00          
042933 CD 59 C0 04 3623*  	call vdu_load_img
042937 C9          3624*  	ret
042938             3625*  
042938             3626*  ld_17_044:
042938 21 3C 45 04 3627*  	ld hl,F17_044
04293C 22 DE BE 04 3628*  	ld (cur_filename),hl
042940 11 0A CB 04 3629*  	ld de,filedata
042944 01 00 00 01 3630*  	ld bc,65536
042948 3E 01       3631*  	ld a,mos_load
04294A 5B CF       3632*  	RST.LIL 08h
04294C 21 C7 01 00 3633*  	ld hl,BUF_17_044
042950 01 40 01 00 3634*  	ld bc,320
042954 11 A0 00 00 3635*  	ld de,160
042958 DD 21 00 C8 3636*  	ld ix,51200
       00          
04295D CD 59 C0 04 3637*  	call vdu_load_img
042961 C9          3638*  	ret
042962             3639*  
042962             3640*  ld_57_004:
042962 21 50 45 04 3641*  	ld hl,F57_004
042966 22 DE BE 04 3642*  	ld (cur_filename),hl
04296A 11 0A CB 04 3643*  	ld de,filedata
04296E 01 00 00 01 3644*  	ld bc,65536
042972 3E 01       3645*  	ld a,mos_load
042974 5B CF       3646*  	RST.LIL 08h
042976 21 C8 01 00 3647*  	ld hl,BUF_57_004
04297A 01 24 00 00 3648*  	ld bc,36
04297E 11 23 00 00 3649*  	ld de,35
042982 DD 21 EC 04 3650*  	ld ix,1260
       00          
042987 CD 59 C0 04 3651*  	call vdu_load_img
04298B C9          3652*  	ret
04298C             3653*  
04298C             3654*  ld_57_009:
04298C 21 64 45 04 3655*  	ld hl,F57_009
042990 22 DE BE 04 3656*  	ld (cur_filename),hl
042994 11 0A CB 04 3657*  	ld de,filedata
042998 01 00 00 01 3658*  	ld bc,65536
04299C 3E 01       3659*  	ld a,mos_load
04299E 5B CF       3660*  	RST.LIL 08h
0429A0 21 C9 01 00 3661*  	ld hl,BUF_57_009
0429A4 01 23 00 00 3662*  	ld bc,35
0429A8 11 2D 00 00 3663*  	ld de,45
0429AC DD 21 27 06 3664*  	ld ix,1575
       00          
0429B1 CD 59 C0 04 3665*  	call vdu_load_img
0429B5 C9          3666*  	ret
0429B6             3667*  
0429B6             3668*  ld_57_010:
0429B6 21 78 45 04 3669*  	ld hl,F57_010
0429BA 22 DE BE 04 3670*  	ld (cur_filename),hl
0429BE 11 0A CB 04 3671*  	ld de,filedata
0429C2 01 00 00 01 3672*  	ld bc,65536
0429C6 3E 01       3673*  	ld a,mos_load
0429C8 5B CF       3674*  	RST.LIL 08h
0429CA 21 CA 01 00 3675*  	ld hl,BUF_57_010
0429CE 01 19 00 00 3676*  	ld bc,25
0429D2 11 2D 00 00 3677*  	ld de,45
0429D6 DD 21 65 04 3678*  	ld ix,1125
       00          
0429DB CD 59 C0 04 3679*  	call vdu_load_img
0429DF C9          3680*  	ret
0429E0             3681*  
0429E0             3682*  ld_57_011:
0429E0 21 8C 45 04 3683*  	ld hl,F57_011
0429E4 22 DE BE 04 3684*  	ld (cur_filename),hl
0429E8 11 0A CB 04 3685*  	ld de,filedata
0429EC 01 00 00 01 3686*  	ld bc,65536
0429F0 3E 01       3687*  	ld a,mos_load
0429F2 5B CF       3688*  	RST.LIL 08h
0429F4 21 CB 01 00 3689*  	ld hl,BUF_57_011
0429F8 01 0F 00 00 3690*  	ld bc,15
0429FC 11 2D 00 00 3691*  	ld de,45
042A00 DD 21 A3 02 3692*  	ld ix,675
       00          
042A05 CD 59 C0 04 3693*  	call vdu_load_img
042A09 C9          3694*  	ret
042A0A             3695*  
042A0A             3696*  ld_57_012:
042A0A 21 A0 45 04 3697*  	ld hl,F57_012
042A0E 22 DE BE 04 3698*  	ld (cur_filename),hl
042A12 11 0A CB 04 3699*  	ld de,filedata
042A16 01 00 00 01 3700*  	ld bc,65536
042A1A 3E 01       3701*  	ld a,mos_load
042A1C 5B CF       3702*  	RST.LIL 08h
042A1E 21 CC 01 00 3703*  	ld hl,BUF_57_012
042A22 01 05 00 00 3704*  	ld bc,5
042A26 11 2D 00 00 3705*  	ld de,45
042A2A DD 21 E1 00 3706*  	ld ix,225
       00          
042A2F CD 59 C0 04 3707*  	call vdu_load_img
042A33 C9          3708*  	ret
042A34             3709*  
042A34             3710*  ld_57_013:
042A34 21 B4 45 04 3711*  	ld hl,F57_013
042A38 22 DE BE 04 3712*  	ld (cur_filename),hl
042A3C 11 0A CB 04 3713*  	ld de,filedata
042A40 01 00 00 01 3714*  	ld bc,65536
042A44 3E 01       3715*  	ld a,mos_load
042A46 5B CF       3716*  	RST.LIL 08h
042A48 21 CD 01 00 3717*  	ld hl,BUF_57_013
042A4C 01 05 00 00 3718*  	ld bc,5
042A50 11 2B 00 00 3719*  	ld de,43
042A54 DD 21 D7 00 3720*  	ld ix,215
       00          
042A59 CD 59 C0 04 3721*  	call vdu_load_img
042A5D C9          3722*  	ret
042A5E             3723*  
042A5E             3724*  ld_57_014:
042A5E 21 C8 45 04 3725*  	ld hl,F57_014
042A62 22 DE BE 04 3726*  	ld (cur_filename),hl
042A66 11 0A CB 04 3727*  	ld de,filedata
042A6A 01 00 00 01 3728*  	ld bc,65536
042A6E 3E 01       3729*  	ld a,mos_load
042A70 5B CF       3730*  	RST.LIL 08h
042A72 21 CE 01 00 3731*  	ld hl,BUF_57_014
042A76 01 0F 00 00 3732*  	ld bc,15
042A7A 11 2D 00 00 3733*  	ld de,45
042A7E DD 21 A3 02 3734*  	ld ix,675
       00          
042A83 CD 59 C0 04 3735*  	call vdu_load_img
042A87 C9          3736*  	ret
042A88             3737*  
042A88             3738*  ld_57_015:
042A88 21 DC 45 04 3739*  	ld hl,F57_015
042A8C 22 DE BE 04 3740*  	ld (cur_filename),hl
042A90 11 0A CB 04 3741*  	ld de,filedata
042A94 01 00 00 01 3742*  	ld bc,65536
042A98 3E 01       3743*  	ld a,mos_load
042A9A 5B CF       3744*  	RST.LIL 08h
042A9C 21 CF 01 00 3745*  	ld hl,BUF_57_015
042AA0 01 19 00 00 3746*  	ld bc,25
042AA4 11 2D 00 00 3747*  	ld de,45
042AA8 DD 21 65 04 3748*  	ld ix,1125
       00          
042AAD CD 59 C0 04 3749*  	call vdu_load_img
042AB1 C9          3750*  	ret
042AB2             3751*  
042AB2             3752*  ld_57_016:
042AB2 21 F0 45 04 3753*  	ld hl,F57_016
042AB6 22 DE BE 04 3754*  	ld (cur_filename),hl
042ABA 11 0A CB 04 3755*  	ld de,filedata
042ABE 01 00 00 01 3756*  	ld bc,65536
042AC2 3E 01       3757*  	ld a,mos_load
042AC4 5B CF       3758*  	RST.LIL 08h
042AC6 21 D0 01 00 3759*  	ld hl,BUF_57_016
042ACA 01 23 00 00 3760*  	ld bc,35
042ACE 11 2D 00 00 3761*  	ld de,45
042AD2 DD 21 27 06 3762*  	ld ix,1575
       00          
042AD7 CD 59 C0 04 3763*  	call vdu_load_img
042ADB C9          3764*  	ret
042ADC             3765*  
042ADC             3766*  ld_57_020:
042ADC 21 04 46 04 3767*  	ld hl,F57_020
042AE0 22 DE BE 04 3768*  	ld (cur_filename),hl
042AE4 11 0A CB 04 3769*  	ld de,filedata
042AE8 01 00 00 01 3770*  	ld bc,65536
042AEC 3E 01       3771*  	ld a,mos_load
042AEE 5B CF       3772*  	RST.LIL 08h
042AF0 21 D1 01 00 3773*  	ld hl,BUF_57_020
042AF4 01 2E 00 00 3774*  	ld bc,46
042AF8 11 2D 00 00 3775*  	ld de,45
042AFC DD 21 16 08 3776*  	ld ix,2070
       00          
042B01 CD 59 C0 04 3777*  	call vdu_load_img
042B05 C9          3778*  	ret
042B06             3779*  
042B06             3780*  ld_57_024:
042B06 21 18 46 04 3781*  	ld hl,F57_024
042B0A 22 DE BE 04 3782*  	ld (cur_filename),hl
042B0E 11 0A CB 04 3783*  	ld de,filedata
042B12 01 00 00 01 3784*  	ld bc,65536
042B16 3E 01       3785*  	ld a,mos_load
042B18 5B CF       3786*  	RST.LIL 08h
042B1A 21 D2 01 00 3787*  	ld hl,BUF_57_024
042B1E 01 2E 00 00 3788*  	ld bc,46
042B22 11 40 00 00 3789*  	ld de,64
042B26 DD 21 80 0B 3790*  	ld ix,2944
       00          
042B2B CD 59 C0 04 3791*  	call vdu_load_img
042B2F C9          3792*  	ret
042B30             3793*  
042B30             3794*  ld_57_025:
042B30 21 2C 46 04 3795*  	ld hl,F57_025
042B34 22 DE BE 04 3796*  	ld (cur_filename),hl
042B38 11 0A CB 04 3797*  	ld de,filedata
042B3C 01 00 00 01 3798*  	ld bc,65536
042B40 3E 01       3799*  	ld a,mos_load
042B42 5B CF       3800*  	RST.LIL 08h
042B44 21 D3 01 00 3801*  	ld hl,BUF_57_025
042B48 01 1C 00 00 3802*  	ld bc,28
042B4C 11 40 00 00 3803*  	ld de,64
042B50 DD 21 00 07 3804*  	ld ix,1792
       00          
042B55 CD 59 C0 04 3805*  	call vdu_load_img
042B59 C9          3806*  	ret
042B5A             3807*  
042B5A             3808*  ld_57_026:
042B5A 21 40 46 04 3809*  	ld hl,F57_026
042B5E 22 DE BE 04 3810*  	ld (cur_filename),hl
042B62 11 0A CB 04 3811*  	ld de,filedata
042B66 01 00 00 01 3812*  	ld bc,65536
042B6A 3E 01       3813*  	ld a,mos_load
042B6C 5B CF       3814*  	RST.LIL 08h
042B6E 21 D4 01 00 3815*  	ld hl,BUF_57_026
042B72 01 09 00 00 3816*  	ld bc,9
042B76 11 40 00 00 3817*  	ld de,64
042B7A DD 21 40 02 3818*  	ld ix,576
       00          
042B7F CD 59 C0 04 3819*  	call vdu_load_img
042B83 C9          3820*  	ret
042B84             3821*  
042B84             3822*  ld_57_027:
042B84 21 54 46 04 3823*  	ld hl,F57_027
042B88 22 DE BE 04 3824*  	ld (cur_filename),hl
042B8C 11 0A CB 04 3825*  	ld de,filedata
042B90 01 00 00 01 3826*  	ld bc,65536
042B94 3E 01       3827*  	ld a,mos_load
042B96 5B CF       3828*  	RST.LIL 08h
042B98 21 D5 01 00 3829*  	ld hl,BUF_57_027
042B9C 01 0A 00 00 3830*  	ld bc,10
042BA0 11 3E 00 00 3831*  	ld de,62
042BA4 DD 21 6C 02 3832*  	ld ix,620
       00          
042BA9 CD 59 C0 04 3833*  	call vdu_load_img
042BAD C9          3834*  	ret
042BAE             3835*  
042BAE             3836*  ld_57_028:
042BAE 21 68 46 04 3837*  	ld hl,F57_028
042BB2 22 DE BE 04 3838*  	ld (cur_filename),hl
042BB6 11 0A CB 04 3839*  	ld de,filedata
042BBA 01 00 00 01 3840*  	ld bc,65536
042BBE 3E 01       3841*  	ld a,mos_load
042BC0 5B CF       3842*  	RST.LIL 08h
042BC2 21 D6 01 00 3843*  	ld hl,BUF_57_028
042BC6 01 1C 00 00 3844*  	ld bc,28
042BCA 11 40 00 00 3845*  	ld de,64
042BCE DD 21 00 07 3846*  	ld ix,1792
       00          
042BD3 CD 59 C0 04 3847*  	call vdu_load_img
042BD7 C9          3848*  	ret
042BD8             3849*  
042BD8             3850*  ld_57_029:
042BD8 21 7C 46 04 3851*  	ld hl,F57_029
042BDC 22 DE BE 04 3852*  	ld (cur_filename),hl
042BE0 11 0A CB 04 3853*  	ld de,filedata
042BE4 01 00 00 01 3854*  	ld bc,65536
042BE8 3E 01       3855*  	ld a,mos_load
042BEA 5B CF       3856*  	RST.LIL 08h
042BEC 21 D7 01 00 3857*  	ld hl,BUF_57_029
042BF0 01 2F 00 00 3858*  	ld bc,47
042BF4 11 40 00 00 3859*  	ld de,64
042BF8 DD 21 C0 0B 3860*  	ld ix,3008
       00          
042BFD CD 59 C0 04 3861*  	call vdu_load_img
042C01 C9          3862*  	ret
042C02             3863*  
042C02             3864*  ld_57_032:
042C02 21 90 46 04 3865*  	ld hl,F57_032
042C06 22 DE BE 04 3866*  	ld (cur_filename),hl
042C0A 11 0A CB 04 3867*  	ld de,filedata
042C0E 01 00 00 01 3868*  	ld bc,65536
042C12 3E 01       3869*  	ld a,mos_load
042C14 5B CF       3870*  	RST.LIL 08h
042C16 21 D8 01 00 3871*  	ld hl,BUF_57_032
042C1A 01 41 00 00 3872*  	ld bc,65
042C1E 11 40 00 00 3873*  	ld de,64
042C22 DD 21 40 10 3874*  	ld ix,4160
       00          
042C27 CD 59 C0 04 3875*  	call vdu_load_img
042C2B C9          3876*  	ret
042C2C             3877*  
042C2C             3878*  ld_57_035:
042C2C 21 A4 46 04 3879*  	ld hl,F57_035
042C30 22 DE BE 04 3880*  	ld (cur_filename),hl
042C34 11 0A CB 04 3881*  	ld de,filedata
042C38 01 00 00 01 3882*  	ld bc,65536
042C3C 3E 01       3883*  	ld a,mos_load
042C3E 5B CF       3884*  	RST.LIL 08h
042C40 21 D9 01 00 3885*  	ld hl,BUF_57_035
042C44 01 3F 00 00 3886*  	ld bc,63
042C48 11 6B 00 00 3887*  	ld de,107
042C4C DD 21 55 1A 3888*  	ld ix,6741
       00          
042C51 CD 59 C0 04 3889*  	call vdu_load_img
042C55 C9          3890*  	ret
042C56             3891*  
042C56             3892*  ld_57_036:
042C56 21 B8 46 04 3893*  	ld hl,F57_036
042C5A 22 DE BE 04 3894*  	ld (cur_filename),hl
042C5E 11 0A CB 04 3895*  	ld de,filedata
042C62 01 00 00 01 3896*  	ld bc,65536
042C66 3E 01       3897*  	ld a,mos_load
042C68 5B CF       3898*  	RST.LIL 08h
042C6A 21 DA 01 00 3899*  	ld hl,BUF_57_036
042C6E 01 16 00 00 3900*  	ld bc,22
042C72 11 6B 00 00 3901*  	ld de,107
042C76 DD 21 32 09 3902*  	ld ix,2354
       00          
042C7B CD 59 C0 04 3903*  	call vdu_load_img
042C7F C9          3904*  	ret
042C80             3905*  
042C80             3906*  ld_57_037:
042C80 21 CC 46 04 3907*  	ld hl,F57_037
042C84 22 DE BE 04 3908*  	ld (cur_filename),hl
042C88 11 0A CB 04 3909*  	ld de,filedata
042C8C 01 00 00 01 3910*  	ld bc,65536
042C90 3E 01       3911*  	ld a,mos_load
042C92 5B CF       3912*  	RST.LIL 08h
042C94 21 DB 01 00 3913*  	ld hl,BUF_57_037
042C98 01 15 00 00 3914*  	ld bc,21
042C9C 11 69 00 00 3915*  	ld de,105
042CA0 DD 21 9D 08 3916*  	ld ix,2205
       00          
042CA5 CD 59 C0 04 3917*  	call vdu_load_img
042CA9 C9          3918*  	ret
042CAA             3919*  
042CAA             3920*  ld_57_038:
042CAA 21 E0 46 04 3921*  	ld hl,F57_038
042CAE 22 DE BE 04 3922*  	ld (cur_filename),hl
042CB2 11 0A CB 04 3923*  	ld de,filedata
042CB6 01 00 00 01 3924*  	ld bc,65536
042CBA 3E 01       3925*  	ld a,mos_load
042CBC 5B CF       3926*  	RST.LIL 08h
042CBE 21 DC 01 00 3927*  	ld hl,BUF_57_038
042CC2 01 3F 00 00 3928*  	ld bc,63
042CC6 11 6B 00 00 3929*  	ld de,107
042CCA DD 21 55 1A 3930*  	ld ix,6741
       00          
042CCF CD 59 C0 04 3931*  	call vdu_load_img
042CD3 C9          3932*  	ret
042CD4             3933*  
042CD4             3934*  ld_57_040:
042CD4 21 F4 46 04 3935*  	ld hl,F57_040
042CD8 22 DE BE 04 3936*  	ld (cur_filename),hl
042CDC 11 0A CB 04 3937*  	ld de,filedata
042CE0 01 00 00 01 3938*  	ld bc,65536
042CE4 3E 01       3939*  	ld a,mos_load
042CE6 5B CF       3940*  	RST.LIL 08h
042CE8 21 DD 01 00 3941*  	ld hl,BUF_57_040
042CEC 01 6C 00 00 3942*  	ld bc,108
042CF0 11 6B 00 00 3943*  	ld de,107
042CF4 DD 21 24 2D 3944*  	ld ix,11556
       00          
042CF9 CD 59 C0 04 3945*  	call vdu_load_img
042CFD C9          3946*  	ret
042CFE             3947*  
042CFE             3948*  ld_57_042:
042CFE 21 08 47 04 3949*  	ld hl,F57_042
042D02 22 DE BE 04 3950*  	ld (cur_filename),hl
042D06 11 0A CB 04 3951*  	ld de,filedata
042D0A 01 00 00 01 3952*  	ld bc,65536
042D0E 3E 01       3953*  	ld a,mos_load
042D10 5B CF       3954*  	RST.LIL 08h
042D12 21 DE 01 00 3955*  	ld hl,BUF_57_042
042D16 01 6A 00 00 3956*  	ld bc,106
042D1A 11 A0 00 00 3957*  	ld de,160
042D1E DD 21 40 42 3958*  	ld ix,16960
       00          
042D23 CD 59 C0 04 3959*  	call vdu_load_img
042D27 C9          3960*  	ret
042D28             3961*  
042D28             3962*  ld_57_043:
042D28 21 1C 47 04 3963*  	ld hl,F57_043
042D2C 22 DE BE 04 3964*  	ld (cur_filename),hl
042D30 11 0A CB 04 3965*  	ld de,filedata
042D34 01 00 00 01 3966*  	ld bc,65536
042D38 3E 01       3967*  	ld a,mos_load
042D3A 5B CF       3968*  	RST.LIL 08h
042D3C 21 DF 01 00 3969*  	ld hl,BUF_57_043
042D40 01 6B 00 00 3970*  	ld bc,107
042D44 11 A0 00 00 3971*  	ld de,160
042D48 DD 21 E0 42 3972*  	ld ix,17120
       00          
042D4D CD 59 C0 04 3973*  	call vdu_load_img
042D51 C9          3974*  	ret
042D52             3975*  
042D52             3976*  ld_57_044:
042D52 21 30 47 04 3977*  	ld hl,F57_044
042D56 22 DE BE 04 3978*  	ld (cur_filename),hl
042D5A 11 0A CB 04 3979*  	ld de,filedata
042D5E 01 00 00 01 3980*  	ld bc,65536
042D62 3E 01       3981*  	ld a,mos_load
042D64 5B CF       3982*  	RST.LIL 08h
042D66 21 E0 01 00 3983*  	ld hl,BUF_57_044
042D6A 01 40 01 00 3984*  	ld bc,320
042D6E 11 A0 00 00 3985*  	ld de,160
042D72 DD 21 00 C8 3986*  	ld ix,51200
       00          
042D77 CD 59 C0 04 3987*  	call vdu_load_img
042D7B C9          3988*  	ret
042D7C             3989*  
042D7C             3990*  ld_58_004:
042D7C 21 44 47 04 3991*  	ld hl,F58_004
042D80 22 DE BE 04 3992*  	ld (cur_filename),hl
042D84 11 0A CB 04 3993*  	ld de,filedata
042D88 01 00 00 01 3994*  	ld bc,65536
042D8C 3E 01       3995*  	ld a,mos_load
042D8E 5B CF       3996*  	RST.LIL 08h
042D90 21 E1 01 00 3997*  	ld hl,BUF_58_004
042D94 01 24 00 00 3998*  	ld bc,36
042D98 11 23 00 00 3999*  	ld de,35
042D9C DD 21 EC 04 4000*  	ld ix,1260
       00          
042DA1 CD 59 C0 04 4001*  	call vdu_load_img
042DA5 C9          4002*  	ret
042DA6             4003*  
042DA6             4004*  ld_58_009:
042DA6 21 58 47 04 4005*  	ld hl,F58_009
042DAA 22 DE BE 04 4006*  	ld (cur_filename),hl
042DAE 11 0A CB 04 4007*  	ld de,filedata
042DB2 01 00 00 01 4008*  	ld bc,65536
042DB6 3E 01       4009*  	ld a,mos_load
042DB8 5B CF       4010*  	RST.LIL 08h
042DBA 21 E2 01 00 4011*  	ld hl,BUF_58_009
042DBE 01 23 00 00 4012*  	ld bc,35
042DC2 11 2D 00 00 4013*  	ld de,45
042DC6 DD 21 27 06 4014*  	ld ix,1575
       00          
042DCB CD 59 C0 04 4015*  	call vdu_load_img
042DCF C9          4016*  	ret
042DD0             4017*  
042DD0             4018*  ld_58_010:
042DD0 21 6C 47 04 4019*  	ld hl,F58_010
042DD4 22 DE BE 04 4020*  	ld (cur_filename),hl
042DD8 11 0A CB 04 4021*  	ld de,filedata
042DDC 01 00 00 01 4022*  	ld bc,65536
042DE0 3E 01       4023*  	ld a,mos_load
042DE2 5B CF       4024*  	RST.LIL 08h
042DE4 21 E3 01 00 4025*  	ld hl,BUF_58_010
042DE8 01 19 00 00 4026*  	ld bc,25
042DEC 11 2D 00 00 4027*  	ld de,45
042DF0 DD 21 65 04 4028*  	ld ix,1125
       00          
042DF5 CD 59 C0 04 4029*  	call vdu_load_img
042DF9 C9          4030*  	ret
042DFA             4031*  
042DFA             4032*  ld_58_011:
042DFA 21 80 47 04 4033*  	ld hl,F58_011
042DFE 22 DE BE 04 4034*  	ld (cur_filename),hl
042E02 11 0A CB 04 4035*  	ld de,filedata
042E06 01 00 00 01 4036*  	ld bc,65536
042E0A 3E 01       4037*  	ld a,mos_load
042E0C 5B CF       4038*  	RST.LIL 08h
042E0E 21 E4 01 00 4039*  	ld hl,BUF_58_011
042E12 01 0F 00 00 4040*  	ld bc,15
042E16 11 2D 00 00 4041*  	ld de,45
042E1A DD 21 A3 02 4042*  	ld ix,675
       00          
042E1F CD 59 C0 04 4043*  	call vdu_load_img
042E23 C9          4044*  	ret
042E24             4045*  
042E24             4046*  ld_58_012:
042E24 21 94 47 04 4047*  	ld hl,F58_012
042E28 22 DE BE 04 4048*  	ld (cur_filename),hl
042E2C 11 0A CB 04 4049*  	ld de,filedata
042E30 01 00 00 01 4050*  	ld bc,65536
042E34 3E 01       4051*  	ld a,mos_load
042E36 5B CF       4052*  	RST.LIL 08h
042E38 21 E5 01 00 4053*  	ld hl,BUF_58_012
042E3C 01 05 00 00 4054*  	ld bc,5
042E40 11 2D 00 00 4055*  	ld de,45
042E44 DD 21 E1 00 4056*  	ld ix,225
       00          
042E49 CD 59 C0 04 4057*  	call vdu_load_img
042E4D C9          4058*  	ret
042E4E             4059*  
042E4E             4060*  ld_58_013:
042E4E 21 A8 47 04 4061*  	ld hl,F58_013
042E52 22 DE BE 04 4062*  	ld (cur_filename),hl
042E56 11 0A CB 04 4063*  	ld de,filedata
042E5A 01 00 00 01 4064*  	ld bc,65536
042E5E 3E 01       4065*  	ld a,mos_load
042E60 5B CF       4066*  	RST.LIL 08h
042E62 21 E6 01 00 4067*  	ld hl,BUF_58_013
042E66 01 05 00 00 4068*  	ld bc,5
042E6A 11 2B 00 00 4069*  	ld de,43
042E6E DD 21 D7 00 4070*  	ld ix,215
       00          
042E73 CD 59 C0 04 4071*  	call vdu_load_img
042E77 C9          4072*  	ret
042E78             4073*  
042E78             4074*  ld_58_014:
042E78 21 BC 47 04 4075*  	ld hl,F58_014
042E7C 22 DE BE 04 4076*  	ld (cur_filename),hl
042E80 11 0A CB 04 4077*  	ld de,filedata
042E84 01 00 00 01 4078*  	ld bc,65536
042E88 3E 01       4079*  	ld a,mos_load
042E8A 5B CF       4080*  	RST.LIL 08h
042E8C 21 E7 01 00 4081*  	ld hl,BUF_58_014
042E90 01 0F 00 00 4082*  	ld bc,15
042E94 11 2D 00 00 4083*  	ld de,45
042E98 DD 21 A3 02 4084*  	ld ix,675
       00          
042E9D CD 59 C0 04 4085*  	call vdu_load_img
042EA1 C9          4086*  	ret
042EA2             4087*  
042EA2             4088*  ld_58_015:
042EA2 21 D0 47 04 4089*  	ld hl,F58_015
042EA6 22 DE BE 04 4090*  	ld (cur_filename),hl
042EAA 11 0A CB 04 4091*  	ld de,filedata
042EAE 01 00 00 01 4092*  	ld bc,65536
042EB2 3E 01       4093*  	ld a,mos_load
042EB4 5B CF       4094*  	RST.LIL 08h
042EB6 21 E8 01 00 4095*  	ld hl,BUF_58_015
042EBA 01 19 00 00 4096*  	ld bc,25
042EBE 11 2D 00 00 4097*  	ld de,45
042EC2 DD 21 65 04 4098*  	ld ix,1125
       00          
042EC7 CD 59 C0 04 4099*  	call vdu_load_img
042ECB C9          4100*  	ret
042ECC             4101*  
042ECC             4102*  ld_58_016:
042ECC 21 E4 47 04 4103*  	ld hl,F58_016
042ED0 22 DE BE 04 4104*  	ld (cur_filename),hl
042ED4 11 0A CB 04 4105*  	ld de,filedata
042ED8 01 00 00 01 4106*  	ld bc,65536
042EDC 3E 01       4107*  	ld a,mos_load
042EDE 5B CF       4108*  	RST.LIL 08h
042EE0 21 E9 01 00 4109*  	ld hl,BUF_58_016
042EE4 01 23 00 00 4110*  	ld bc,35
042EE8 11 2D 00 00 4111*  	ld de,45
042EEC DD 21 27 06 4112*  	ld ix,1575
       00          
042EF1 CD 59 C0 04 4113*  	call vdu_load_img
042EF5 C9          4114*  	ret
042EF6             4115*  
042EF6             4116*  ld_58_020:
042EF6 21 F8 47 04 4117*  	ld hl,F58_020
042EFA 22 DE BE 04 4118*  	ld (cur_filename),hl
042EFE 11 0A CB 04 4119*  	ld de,filedata
042F02 01 00 00 01 4120*  	ld bc,65536
042F06 3E 01       4121*  	ld a,mos_load
042F08 5B CF       4122*  	RST.LIL 08h
042F0A 21 EA 01 00 4123*  	ld hl,BUF_58_020
042F0E 01 2E 00 00 4124*  	ld bc,46
042F12 11 2D 00 00 4125*  	ld de,45
042F16 DD 21 16 08 4126*  	ld ix,2070
       00          
042F1B CD 59 C0 04 4127*  	call vdu_load_img
042F1F C9          4128*  	ret
042F20             4129*  
042F20             4130*  ld_58_024:
042F20 21 0C 48 04 4131*  	ld hl,F58_024
042F24 22 DE BE 04 4132*  	ld (cur_filename),hl
042F28 11 0A CB 04 4133*  	ld de,filedata
042F2C 01 00 00 01 4134*  	ld bc,65536
042F30 3E 01       4135*  	ld a,mos_load
042F32 5B CF       4136*  	RST.LIL 08h
042F34 21 EB 01 00 4137*  	ld hl,BUF_58_024
042F38 01 2E 00 00 4138*  	ld bc,46
042F3C 11 40 00 00 4139*  	ld de,64
042F40 DD 21 80 0B 4140*  	ld ix,2944
       00          
042F45 CD 59 C0 04 4141*  	call vdu_load_img
042F49 C9          4142*  	ret
042F4A             4143*  
042F4A             4144*  ld_58_025:
042F4A 21 20 48 04 4145*  	ld hl,F58_025
042F4E 22 DE BE 04 4146*  	ld (cur_filename),hl
042F52 11 0A CB 04 4147*  	ld de,filedata
042F56 01 00 00 01 4148*  	ld bc,65536
042F5A 3E 01       4149*  	ld a,mos_load
042F5C 5B CF       4150*  	RST.LIL 08h
042F5E 21 EC 01 00 4151*  	ld hl,BUF_58_025
042F62 01 1C 00 00 4152*  	ld bc,28
042F66 11 40 00 00 4153*  	ld de,64
042F6A DD 21 00 07 4154*  	ld ix,1792
       00          
042F6F CD 59 C0 04 4155*  	call vdu_load_img
042F73 C9          4156*  	ret
042F74             4157*  
042F74             4158*  ld_58_026:
042F74 21 34 48 04 4159*  	ld hl,F58_026
042F78 22 DE BE 04 4160*  	ld (cur_filename),hl
042F7C 11 0A CB 04 4161*  	ld de,filedata
042F80 01 00 00 01 4162*  	ld bc,65536
042F84 3E 01       4163*  	ld a,mos_load
042F86 5B CF       4164*  	RST.LIL 08h
042F88 21 ED 01 00 4165*  	ld hl,BUF_58_026
042F8C 01 09 00 00 4166*  	ld bc,9
042F90 11 40 00 00 4167*  	ld de,64
042F94 DD 21 40 02 4168*  	ld ix,576
       00          
042F99 CD 59 C0 04 4169*  	call vdu_load_img
042F9D C9          4170*  	ret
042F9E             4171*  
042F9E             4172*  ld_58_027:
042F9E 21 48 48 04 4173*  	ld hl,F58_027
042FA2 22 DE BE 04 4174*  	ld (cur_filename),hl
042FA6 11 0A CB 04 4175*  	ld de,filedata
042FAA 01 00 00 01 4176*  	ld bc,65536
042FAE 3E 01       4177*  	ld a,mos_load
042FB0 5B CF       4178*  	RST.LIL 08h
042FB2 21 EE 01 00 4179*  	ld hl,BUF_58_027
042FB6 01 0A 00 00 4180*  	ld bc,10
042FBA 11 3E 00 00 4181*  	ld de,62
042FBE DD 21 6C 02 4182*  	ld ix,620
       00          
042FC3 CD 59 C0 04 4183*  	call vdu_load_img
042FC7 C9          4184*  	ret
042FC8             4185*  
042FC8             4186*  ld_58_028:
042FC8 21 5C 48 04 4187*  	ld hl,F58_028
042FCC 22 DE BE 04 4188*  	ld (cur_filename),hl
042FD0 11 0A CB 04 4189*  	ld de,filedata
042FD4 01 00 00 01 4190*  	ld bc,65536
042FD8 3E 01       4191*  	ld a,mos_load
042FDA 5B CF       4192*  	RST.LIL 08h
042FDC 21 EF 01 00 4193*  	ld hl,BUF_58_028
042FE0 01 1C 00 00 4194*  	ld bc,28
042FE4 11 40 00 00 4195*  	ld de,64
042FE8 DD 21 00 07 4196*  	ld ix,1792
       00          
042FED CD 59 C0 04 4197*  	call vdu_load_img
042FF1 C9          4198*  	ret
042FF2             4199*  
042FF2             4200*  ld_58_029:
042FF2 21 70 48 04 4201*  	ld hl,F58_029
042FF6 22 DE BE 04 4202*  	ld (cur_filename),hl
042FFA 11 0A CB 04 4203*  	ld de,filedata
042FFE 01 00 00 01 4204*  	ld bc,65536
043002 3E 01       4205*  	ld a,mos_load
043004 5B CF       4206*  	RST.LIL 08h
043006 21 F0 01 00 4207*  	ld hl,BUF_58_029
04300A 01 2F 00 00 4208*  	ld bc,47
04300E 11 40 00 00 4209*  	ld de,64
043012 DD 21 C0 0B 4210*  	ld ix,3008
       00          
043017 CD 59 C0 04 4211*  	call vdu_load_img
04301B C9          4212*  	ret
04301C             4213*  
04301C             4214*  ld_58_032:
04301C 21 84 48 04 4215*  	ld hl,F58_032
043020 22 DE BE 04 4216*  	ld (cur_filename),hl
043024 11 0A CB 04 4217*  	ld de,filedata
043028 01 00 00 01 4218*  	ld bc,65536
04302C 3E 01       4219*  	ld a,mos_load
04302E 5B CF       4220*  	RST.LIL 08h
043030 21 F1 01 00 4221*  	ld hl,BUF_58_032
043034 01 41 00 00 4222*  	ld bc,65
043038 11 40 00 00 4223*  	ld de,64
04303C DD 21 40 10 4224*  	ld ix,4160
       00          
043041 CD 59 C0 04 4225*  	call vdu_load_img
043045 C9          4226*  	ret
043046             4227*  
043046             4228*  ld_58_035:
043046 21 98 48 04 4229*  	ld hl,F58_035
04304A 22 DE BE 04 4230*  	ld (cur_filename),hl
04304E 11 0A CB 04 4231*  	ld de,filedata
043052 01 00 00 01 4232*  	ld bc,65536
043056 3E 01       4233*  	ld a,mos_load
043058 5B CF       4234*  	RST.LIL 08h
04305A 21 F2 01 00 4235*  	ld hl,BUF_58_035
04305E 01 3F 00 00 4236*  	ld bc,63
043062 11 6B 00 00 4237*  	ld de,107
043066 DD 21 55 1A 4238*  	ld ix,6741
       00          
04306B CD 59 C0 04 4239*  	call vdu_load_img
04306F C9          4240*  	ret
043070             4241*  
043070             4242*  ld_58_036:
043070 21 AC 48 04 4243*  	ld hl,F58_036
043074 22 DE BE 04 4244*  	ld (cur_filename),hl
043078 11 0A CB 04 4245*  	ld de,filedata
04307C 01 00 00 01 4246*  	ld bc,65536
043080 3E 01       4247*  	ld a,mos_load
043082 5B CF       4248*  	RST.LIL 08h
043084 21 F3 01 00 4249*  	ld hl,BUF_58_036
043088 01 16 00 00 4250*  	ld bc,22
04308C 11 6B 00 00 4251*  	ld de,107
043090 DD 21 32 09 4252*  	ld ix,2354
       00          
043095 CD 59 C0 04 4253*  	call vdu_load_img
043099 C9          4254*  	ret
04309A             4255*  
04309A             4256*  ld_58_037:
04309A 21 C0 48 04 4257*  	ld hl,F58_037
04309E 22 DE BE 04 4258*  	ld (cur_filename),hl
0430A2 11 0A CB 04 4259*  	ld de,filedata
0430A6 01 00 00 01 4260*  	ld bc,65536
0430AA 3E 01       4261*  	ld a,mos_load
0430AC 5B CF       4262*  	RST.LIL 08h
0430AE 21 F4 01 00 4263*  	ld hl,BUF_58_037
0430B2 01 15 00 00 4264*  	ld bc,21
0430B6 11 69 00 00 4265*  	ld de,105
0430BA DD 21 9D 08 4266*  	ld ix,2205
       00          
0430BF CD 59 C0 04 4267*  	call vdu_load_img
0430C3 C9          4268*  	ret
0430C4             4269*  
0430C4             4270*  ld_58_038:
0430C4 21 D4 48 04 4271*  	ld hl,F58_038
0430C8 22 DE BE 04 4272*  	ld (cur_filename),hl
0430CC 11 0A CB 04 4273*  	ld de,filedata
0430D0 01 00 00 01 4274*  	ld bc,65536
0430D4 3E 01       4275*  	ld a,mos_load
0430D6 5B CF       4276*  	RST.LIL 08h
0430D8 21 F5 01 00 4277*  	ld hl,BUF_58_038
0430DC 01 3F 00 00 4278*  	ld bc,63
0430E0 11 6B 00 00 4279*  	ld de,107
0430E4 DD 21 55 1A 4280*  	ld ix,6741
       00          
0430E9 CD 59 C0 04 4281*  	call vdu_load_img
0430ED C9          4282*  	ret
0430EE             4283*  
0430EE             4284*  ld_58_040:
0430EE 21 E8 48 04 4285*  	ld hl,F58_040
0430F2 22 DE BE 04 4286*  	ld (cur_filename),hl
0430F6 11 0A CB 04 4287*  	ld de,filedata
0430FA 01 00 00 01 4288*  	ld bc,65536
0430FE 3E 01       4289*  	ld a,mos_load
043100 5B CF       4290*  	RST.LIL 08h
043102 21 F6 01 00 4291*  	ld hl,BUF_58_040
043106 01 6C 00 00 4292*  	ld bc,108
04310A 11 6B 00 00 4293*  	ld de,107
04310E DD 21 24 2D 4294*  	ld ix,11556
       00          
043113 CD 59 C0 04 4295*  	call vdu_load_img
043117 C9          4296*  	ret
043118             4297*  
043118             4298*  ld_58_042:
043118 21 FC 48 04 4299*  	ld hl,F58_042
04311C 22 DE BE 04 4300*  	ld (cur_filename),hl
043120 11 0A CB 04 4301*  	ld de,filedata
043124 01 00 00 01 4302*  	ld bc,65536
043128 3E 01       4303*  	ld a,mos_load
04312A 5B CF       4304*  	RST.LIL 08h
04312C 21 F7 01 00 4305*  	ld hl,BUF_58_042
043130 01 6A 00 00 4306*  	ld bc,106
043134 11 A0 00 00 4307*  	ld de,160
043138 DD 21 40 42 4308*  	ld ix,16960
       00          
04313D CD 59 C0 04 4309*  	call vdu_load_img
043141 C9          4310*  	ret
043142             4311*  
043142             4312*  ld_58_043:
043142 21 10 49 04 4313*  	ld hl,F58_043
043146 22 DE BE 04 4314*  	ld (cur_filename),hl
04314A 11 0A CB 04 4315*  	ld de,filedata
04314E 01 00 00 01 4316*  	ld bc,65536
043152 3E 01       4317*  	ld a,mos_load
043154 5B CF       4318*  	RST.LIL 08h
043156 21 F8 01 00 4319*  	ld hl,BUF_58_043
04315A 01 6B 00 00 4320*  	ld bc,107
04315E 11 A0 00 00 4321*  	ld de,160
043162 DD 21 E0 42 4322*  	ld ix,17120
       00          
043167 CD 59 C0 04 4323*  	call vdu_load_img
04316B C9          4324*  	ret
04316C             4325*  
04316C             4326*  ld_58_044:
04316C 21 24 49 04 4327*  	ld hl,F58_044
043170 22 DE BE 04 4328*  	ld (cur_filename),hl
043174 11 0A CB 04 4329*  	ld de,filedata
043178 01 00 00 01 4330*  	ld bc,65536
04317C 3E 01       4331*  	ld a,mos_load
04317E 5B CF       4332*  	RST.LIL 08h
043180 21 F9 01 00 4333*  	ld hl,BUF_58_044
043184 01 40 01 00 4334*  	ld bc,320
043188 11 A0 00 00 4335*  	ld de,160
04318C DD 21 00 C8 4336*  	ld ix,51200
       00          
043191 CD 59 C0 04 4337*  	call vdu_load_img
043195 C9          4338*  	ret
043196             4339*  
043196             4340*  ld_59_004:
043196 21 38 49 04 4341*  	ld hl,F59_004
04319A 22 DE BE 04 4342*  	ld (cur_filename),hl
04319E 11 0A CB 04 4343*  	ld de,filedata
0431A2 01 00 00 01 4344*  	ld bc,65536
0431A6 3E 01       4345*  	ld a,mos_load
0431A8 5B CF       4346*  	RST.LIL 08h
0431AA 21 FA 01 00 4347*  	ld hl,BUF_59_004
0431AE 01 24 00 00 4348*  	ld bc,36
0431B2 11 23 00 00 4349*  	ld de,35
0431B6 DD 21 EC 04 4350*  	ld ix,1260
       00          
0431BB CD 59 C0 04 4351*  	call vdu_load_img
0431BF C9          4352*  	ret
0431C0             4353*  
0431C0             4354*  ld_59_009:
0431C0 21 4C 49 04 4355*  	ld hl,F59_009
0431C4 22 DE BE 04 4356*  	ld (cur_filename),hl
0431C8 11 0A CB 04 4357*  	ld de,filedata
0431CC 01 00 00 01 4358*  	ld bc,65536
0431D0 3E 01       4359*  	ld a,mos_load
0431D2 5B CF       4360*  	RST.LIL 08h
0431D4 21 FB 01 00 4361*  	ld hl,BUF_59_009
0431D8 01 23 00 00 4362*  	ld bc,35
0431DC 11 2D 00 00 4363*  	ld de,45
0431E0 DD 21 27 06 4364*  	ld ix,1575
       00          
0431E5 CD 59 C0 04 4365*  	call vdu_load_img
0431E9 C9          4366*  	ret
0431EA             4367*  
0431EA             4368*  ld_59_010:
0431EA 21 60 49 04 4369*  	ld hl,F59_010
0431EE 22 DE BE 04 4370*  	ld (cur_filename),hl
0431F2 11 0A CB 04 4371*  	ld de,filedata
0431F6 01 00 00 01 4372*  	ld bc,65536
0431FA 3E 01       4373*  	ld a,mos_load
0431FC 5B CF       4374*  	RST.LIL 08h
0431FE 21 FC 01 00 4375*  	ld hl,BUF_59_010
043202 01 19 00 00 4376*  	ld bc,25
043206 11 2D 00 00 4377*  	ld de,45
04320A DD 21 65 04 4378*  	ld ix,1125
       00          
04320F CD 59 C0 04 4379*  	call vdu_load_img
043213 C9          4380*  	ret
043214             4381*  
043214             4382*  ld_59_011:
043214 21 74 49 04 4383*  	ld hl,F59_011
043218 22 DE BE 04 4384*  	ld (cur_filename),hl
04321C 11 0A CB 04 4385*  	ld de,filedata
043220 01 00 00 01 4386*  	ld bc,65536
043224 3E 01       4387*  	ld a,mos_load
043226 5B CF       4388*  	RST.LIL 08h
043228 21 FD 01 00 4389*  	ld hl,BUF_59_011
04322C 01 0F 00 00 4390*  	ld bc,15
043230 11 2D 00 00 4391*  	ld de,45
043234 DD 21 A3 02 4392*  	ld ix,675
       00          
043239 CD 59 C0 04 4393*  	call vdu_load_img
04323D C9          4394*  	ret
04323E             4395*  
04323E             4396*  ld_59_012:
04323E 21 88 49 04 4397*  	ld hl,F59_012
043242 22 DE BE 04 4398*  	ld (cur_filename),hl
043246 11 0A CB 04 4399*  	ld de,filedata
04324A 01 00 00 01 4400*  	ld bc,65536
04324E 3E 01       4401*  	ld a,mos_load
043250 5B CF       4402*  	RST.LIL 08h
043252 21 FE 01 00 4403*  	ld hl,BUF_59_012
043256 01 05 00 00 4404*  	ld bc,5
04325A 11 2D 00 00 4405*  	ld de,45
04325E DD 21 E1 00 4406*  	ld ix,225
       00          
043263 CD 59 C0 04 4407*  	call vdu_load_img
043267 C9          4408*  	ret
043268             4409*  
043268             4410*  ld_59_013:
043268 21 9C 49 04 4411*  	ld hl,F59_013
04326C 22 DE BE 04 4412*  	ld (cur_filename),hl
043270 11 0A CB 04 4413*  	ld de,filedata
043274 01 00 00 01 4414*  	ld bc,65536
043278 3E 01       4415*  	ld a,mos_load
04327A 5B CF       4416*  	RST.LIL 08h
04327C 21 FF 01 00 4417*  	ld hl,BUF_59_013
043280 01 05 00 00 4418*  	ld bc,5
043284 11 2B 00 00 4419*  	ld de,43
043288 DD 21 D7 00 4420*  	ld ix,215
       00          
04328D CD 59 C0 04 4421*  	call vdu_load_img
043291 C9          4422*  	ret
043292             4423*  
043292             4424*  ld_59_014:
043292 21 B0 49 04 4425*  	ld hl,F59_014
043296 22 DE BE 04 4426*  	ld (cur_filename),hl
04329A 11 0A CB 04 4427*  	ld de,filedata
04329E 01 00 00 01 4428*  	ld bc,65536
0432A2 3E 01       4429*  	ld a,mos_load
0432A4 5B CF       4430*  	RST.LIL 08h
0432A6 21 00 02 00 4431*  	ld hl,BUF_59_014
0432AA 01 0F 00 00 4432*  	ld bc,15
0432AE 11 2D 00 00 4433*  	ld de,45
0432B2 DD 21 A3 02 4434*  	ld ix,675
       00          
0432B7 CD 59 C0 04 4435*  	call vdu_load_img
0432BB C9          4436*  	ret
0432BC             4437*  
0432BC             4438*  ld_59_015:
0432BC 21 C4 49 04 4439*  	ld hl,F59_015
0432C0 22 DE BE 04 4440*  	ld (cur_filename),hl
0432C4 11 0A CB 04 4441*  	ld de,filedata
0432C8 01 00 00 01 4442*  	ld bc,65536
0432CC 3E 01       4443*  	ld a,mos_load
0432CE 5B CF       4444*  	RST.LIL 08h
0432D0 21 01 02 00 4445*  	ld hl,BUF_59_015
0432D4 01 19 00 00 4446*  	ld bc,25
0432D8 11 2D 00 00 4447*  	ld de,45
0432DC DD 21 65 04 4448*  	ld ix,1125
       00          
0432E1 CD 59 C0 04 4449*  	call vdu_load_img
0432E5 C9          4450*  	ret
0432E6             4451*  
0432E6             4452*  ld_59_016:
0432E6 21 D8 49 04 4453*  	ld hl,F59_016
0432EA 22 DE BE 04 4454*  	ld (cur_filename),hl
0432EE 11 0A CB 04 4455*  	ld de,filedata
0432F2 01 00 00 01 4456*  	ld bc,65536
0432F6 3E 01       4457*  	ld a,mos_load
0432F8 5B CF       4458*  	RST.LIL 08h
0432FA 21 02 02 00 4459*  	ld hl,BUF_59_016
0432FE 01 23 00 00 4460*  	ld bc,35
043302 11 2D 00 00 4461*  	ld de,45
043306 DD 21 27 06 4462*  	ld ix,1575
       00          
04330B CD 59 C0 04 4463*  	call vdu_load_img
04330F C9          4464*  	ret
043310             4465*  
043310             4466*  ld_59_020:
043310 21 EC 49 04 4467*  	ld hl,F59_020
043314 22 DE BE 04 4468*  	ld (cur_filename),hl
043318 11 0A CB 04 4469*  	ld de,filedata
04331C 01 00 00 01 4470*  	ld bc,65536
043320 3E 01       4471*  	ld a,mos_load
043322 5B CF       4472*  	RST.LIL 08h
043324 21 03 02 00 4473*  	ld hl,BUF_59_020
043328 01 2E 00 00 4474*  	ld bc,46
04332C 11 2D 00 00 4475*  	ld de,45
043330 DD 21 16 08 4476*  	ld ix,2070
       00          
043335 CD 59 C0 04 4477*  	call vdu_load_img
043339 C9          4478*  	ret
04333A             4479*  
04333A             4480*  ld_59_024:
04333A 21 00 4A 04 4481*  	ld hl,F59_024
04333E 22 DE BE 04 4482*  	ld (cur_filename),hl
043342 11 0A CB 04 4483*  	ld de,filedata
043346 01 00 00 01 4484*  	ld bc,65536
04334A 3E 01       4485*  	ld a,mos_load
04334C 5B CF       4486*  	RST.LIL 08h
04334E 21 04 02 00 4487*  	ld hl,BUF_59_024
043352 01 2E 00 00 4488*  	ld bc,46
043356 11 40 00 00 4489*  	ld de,64
04335A DD 21 80 0B 4490*  	ld ix,2944
       00          
04335F CD 59 C0 04 4491*  	call vdu_load_img
043363 C9          4492*  	ret
043364             4493*  
043364             4494*  ld_59_025:
043364 21 14 4A 04 4495*  	ld hl,F59_025
043368 22 DE BE 04 4496*  	ld (cur_filename),hl
04336C 11 0A CB 04 4497*  	ld de,filedata
043370 01 00 00 01 4498*  	ld bc,65536
043374 3E 01       4499*  	ld a,mos_load
043376 5B CF       4500*  	RST.LIL 08h
043378 21 05 02 00 4501*  	ld hl,BUF_59_025
04337C 01 1C 00 00 4502*  	ld bc,28
043380 11 40 00 00 4503*  	ld de,64
043384 DD 21 00 07 4504*  	ld ix,1792
       00          
043389 CD 59 C0 04 4505*  	call vdu_load_img
04338D C9          4506*  	ret
04338E             4507*  
04338E             4508*  ld_59_026:
04338E 21 28 4A 04 4509*  	ld hl,F59_026
043392 22 DE BE 04 4510*  	ld (cur_filename),hl
043396 11 0A CB 04 4511*  	ld de,filedata
04339A 01 00 00 01 4512*  	ld bc,65536
04339E 3E 01       4513*  	ld a,mos_load
0433A0 5B CF       4514*  	RST.LIL 08h
0433A2 21 06 02 00 4515*  	ld hl,BUF_59_026
0433A6 01 09 00 00 4516*  	ld bc,9
0433AA 11 40 00 00 4517*  	ld de,64
0433AE DD 21 40 02 4518*  	ld ix,576
       00          
0433B3 CD 59 C0 04 4519*  	call vdu_load_img
0433B7 C9          4520*  	ret
0433B8             4521*  
0433B8             4522*  ld_59_027:
0433B8 21 3C 4A 04 4523*  	ld hl,F59_027
0433BC 22 DE BE 04 4524*  	ld (cur_filename),hl
0433C0 11 0A CB 04 4525*  	ld de,filedata
0433C4 01 00 00 01 4526*  	ld bc,65536
0433C8 3E 01       4527*  	ld a,mos_load
0433CA 5B CF       4528*  	RST.LIL 08h
0433CC 21 07 02 00 4529*  	ld hl,BUF_59_027
0433D0 01 0A 00 00 4530*  	ld bc,10
0433D4 11 3E 00 00 4531*  	ld de,62
0433D8 DD 21 6C 02 4532*  	ld ix,620
       00          
0433DD CD 59 C0 04 4533*  	call vdu_load_img
0433E1 C9          4534*  	ret
0433E2             4535*  
0433E2             4536*  ld_59_028:
0433E2 21 50 4A 04 4537*  	ld hl,F59_028
0433E6 22 DE BE 04 4538*  	ld (cur_filename),hl
0433EA 11 0A CB 04 4539*  	ld de,filedata
0433EE 01 00 00 01 4540*  	ld bc,65536
0433F2 3E 01       4541*  	ld a,mos_load
0433F4 5B CF       4542*  	RST.LIL 08h
0433F6 21 08 02 00 4543*  	ld hl,BUF_59_028
0433FA 01 1C 00 00 4544*  	ld bc,28
0433FE 11 40 00 00 4545*  	ld de,64
043402 DD 21 00 07 4546*  	ld ix,1792
       00          
043407 CD 59 C0 04 4547*  	call vdu_load_img
04340B C9          4548*  	ret
04340C             4549*  
04340C             4550*  ld_59_029:
04340C 21 64 4A 04 4551*  	ld hl,F59_029
043410 22 DE BE 04 4552*  	ld (cur_filename),hl
043414 11 0A CB 04 4553*  	ld de,filedata
043418 01 00 00 01 4554*  	ld bc,65536
04341C 3E 01       4555*  	ld a,mos_load
04341E 5B CF       4556*  	RST.LIL 08h
043420 21 09 02 00 4557*  	ld hl,BUF_59_029
043424 01 2F 00 00 4558*  	ld bc,47
043428 11 40 00 00 4559*  	ld de,64
04342C DD 21 C0 0B 4560*  	ld ix,3008
       00          
043431 CD 59 C0 04 4561*  	call vdu_load_img
043435 C9          4562*  	ret
043436             4563*  
043436             4564*  ld_59_032:
043436 21 78 4A 04 4565*  	ld hl,F59_032
04343A 22 DE BE 04 4566*  	ld (cur_filename),hl
04343E 11 0A CB 04 4567*  	ld de,filedata
043442 01 00 00 01 4568*  	ld bc,65536
043446 3E 01       4569*  	ld a,mos_load
043448 5B CF       4570*  	RST.LIL 08h
04344A 21 0A 02 00 4571*  	ld hl,BUF_59_032
04344E 01 41 00 00 4572*  	ld bc,65
043452 11 40 00 00 4573*  	ld de,64
043456 DD 21 40 10 4574*  	ld ix,4160
       00          
04345B CD 59 C0 04 4575*  	call vdu_load_img
04345F C9          4576*  	ret
043460             4577*  
043460             4578*  ld_59_035:
043460 21 8C 4A 04 4579*  	ld hl,F59_035
043464 22 DE BE 04 4580*  	ld (cur_filename),hl
043468 11 0A CB 04 4581*  	ld de,filedata
04346C 01 00 00 01 4582*  	ld bc,65536
043470 3E 01       4583*  	ld a,mos_load
043472 5B CF       4584*  	RST.LIL 08h
043474 21 0B 02 00 4585*  	ld hl,BUF_59_035
043478 01 3F 00 00 4586*  	ld bc,63
04347C 11 6B 00 00 4587*  	ld de,107
043480 DD 21 55 1A 4588*  	ld ix,6741
       00          
043485 CD 59 C0 04 4589*  	call vdu_load_img
043489 C9          4590*  	ret
04348A             4591*  
04348A             4592*  ld_59_036:
04348A 21 A0 4A 04 4593*  	ld hl,F59_036
04348E 22 DE BE 04 4594*  	ld (cur_filename),hl
043492 11 0A CB 04 4595*  	ld de,filedata
043496 01 00 00 01 4596*  	ld bc,65536
04349A 3E 01       4597*  	ld a,mos_load
04349C 5B CF       4598*  	RST.LIL 08h
04349E 21 0C 02 00 4599*  	ld hl,BUF_59_036
0434A2 01 16 00 00 4600*  	ld bc,22
0434A6 11 6B 00 00 4601*  	ld de,107
0434AA DD 21 32 09 4602*  	ld ix,2354
       00          
0434AF CD 59 C0 04 4603*  	call vdu_load_img
0434B3 C9          4604*  	ret
0434B4             4605*  
0434B4             4606*  ld_59_037:
0434B4 21 B4 4A 04 4607*  	ld hl,F59_037
0434B8 22 DE BE 04 4608*  	ld (cur_filename),hl
0434BC 11 0A CB 04 4609*  	ld de,filedata
0434C0 01 00 00 01 4610*  	ld bc,65536
0434C4 3E 01       4611*  	ld a,mos_load
0434C6 5B CF       4612*  	RST.LIL 08h
0434C8 21 0D 02 00 4613*  	ld hl,BUF_59_037
0434CC 01 15 00 00 4614*  	ld bc,21
0434D0 11 69 00 00 4615*  	ld de,105
0434D4 DD 21 9D 08 4616*  	ld ix,2205
       00          
0434D9 CD 59 C0 04 4617*  	call vdu_load_img
0434DD C9          4618*  	ret
0434DE             4619*  
0434DE             4620*  ld_59_038:
0434DE 21 C8 4A 04 4621*  	ld hl,F59_038
0434E2 22 DE BE 04 4622*  	ld (cur_filename),hl
0434E6 11 0A CB 04 4623*  	ld de,filedata
0434EA 01 00 00 01 4624*  	ld bc,65536
0434EE 3E 01       4625*  	ld a,mos_load
0434F0 5B CF       4626*  	RST.LIL 08h
0434F2 21 0E 02 00 4627*  	ld hl,BUF_59_038
0434F6 01 3F 00 00 4628*  	ld bc,63
0434FA 11 6B 00 00 4629*  	ld de,107
0434FE DD 21 55 1A 4630*  	ld ix,6741
       00          
043503 CD 59 C0 04 4631*  	call vdu_load_img
043507 C9          4632*  	ret
043508             4633*  
043508             4634*  ld_59_040:
043508 21 DC 4A 04 4635*  	ld hl,F59_040
04350C 22 DE BE 04 4636*  	ld (cur_filename),hl
043510 11 0A CB 04 4637*  	ld de,filedata
043514 01 00 00 01 4638*  	ld bc,65536
043518 3E 01       4639*  	ld a,mos_load
04351A 5B CF       4640*  	RST.LIL 08h
04351C 21 0F 02 00 4641*  	ld hl,BUF_59_040
043520 01 6C 00 00 4642*  	ld bc,108
043524 11 6B 00 00 4643*  	ld de,107
043528 DD 21 24 2D 4644*  	ld ix,11556
       00          
04352D CD 59 C0 04 4645*  	call vdu_load_img
043531 C9          4646*  	ret
043532             4647*  
043532             4648*  ld_59_042:
043532 21 F0 4A 04 4649*  	ld hl,F59_042
043536 22 DE BE 04 4650*  	ld (cur_filename),hl
04353A 11 0A CB 04 4651*  	ld de,filedata
04353E 01 00 00 01 4652*  	ld bc,65536
043542 3E 01       4653*  	ld a,mos_load
043544 5B CF       4654*  	RST.LIL 08h
043546 21 10 02 00 4655*  	ld hl,BUF_59_042
04354A 01 6A 00 00 4656*  	ld bc,106
04354E 11 A0 00 00 4657*  	ld de,160
043552 DD 21 40 42 4658*  	ld ix,16960
       00          
043557 CD 59 C0 04 4659*  	call vdu_load_img
04355B C9          4660*  	ret
04355C             4661*  
04355C             4662*  ld_59_043:
04355C 21 04 4B 04 4663*  	ld hl,F59_043
043560 22 DE BE 04 4664*  	ld (cur_filename),hl
043564 11 0A CB 04 4665*  	ld de,filedata
043568 01 00 00 01 4666*  	ld bc,65536
04356C 3E 01       4667*  	ld a,mos_load
04356E 5B CF       4668*  	RST.LIL 08h
043570 21 11 02 00 4669*  	ld hl,BUF_59_043
043574 01 6B 00 00 4670*  	ld bc,107
043578 11 A0 00 00 4671*  	ld de,160
04357C DD 21 E0 42 4672*  	ld ix,17120
       00          
043581 CD 59 C0 04 4673*  	call vdu_load_img
043585 C9          4674*  	ret
043586             4675*  
043586             4676*  ld_59_044:
043586 21 18 4B 04 4677*  	ld hl,F59_044
04358A 22 DE BE 04 4678*  	ld (cur_filename),hl
04358E 11 0A CB 04 4679*  	ld de,filedata
043592 01 00 00 01 4680*  	ld bc,65536
043596 3E 01       4681*  	ld a,mos_load
043598 5B CF       4682*  	RST.LIL 08h
04359A 21 12 02 00 4683*  	ld hl,BUF_59_044
04359E 01 40 01 00 4684*  	ld bc,320
0435A2 11 A0 00 00 4685*  	ld de,160
0435A6 DD 21 00 C8 4686*  	ld ix,51200
       00          
0435AB CD 59 C0 04 4687*  	call vdu_load_img
0435AF C9          4688*  	ret
0435B0             4689*  
0435B0             4690*  ; File name lookups:
0435B0 70 61 6E 65 4691*  F10_004: db "panels/10_004.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0435C4 70 61 6E 65 4692*  F10_009: db "panels/10_009.rgba2",0
       6C 73 2F 31 
       30 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0435D8 70 61 6E 65 4693*  F10_010: db "panels/10_010.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0435EC 70 61 6E 65 4694*  F10_011: db "panels/10_011.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043600 70 61 6E 65 4695*  F10_012: db "panels/10_012.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043614 70 61 6E 65 4696*  F10_013: db "panels/10_013.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043628 70 61 6E 65 4697*  F10_014: db "panels/10_014.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
04363C 70 61 6E 65 4698*  F10_015: db "panels/10_015.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043650 70 61 6E 65 4699*  F10_016: db "panels/10_016.rgba2",0
       6C 73 2F 31 
       30 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043664 70 61 6E 65 4700*  F10_020: db "panels/10_020.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043678 70 61 6E 65 4701*  F10_024: db "panels/10_024.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04368C 70 61 6E 65 4702*  F10_025: db "panels/10_025.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
0436A0 70 61 6E 65 4703*  F10_026: db "panels/10_026.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0436B4 70 61 6E 65 4704*  F10_027: db "panels/10_027.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0436C8 70 61 6E 65 4705*  F10_028: db "panels/10_028.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0436DC 70 61 6E 65 4706*  F10_029: db "panels/10_029.rgba2",0
       6C 73 2F 31 
       30 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0436F0 70 61 6E 65 4707*  F10_032: db "panels/10_032.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043704 70 61 6E 65 4708*  F10_035: db "panels/10_035.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043718 70 61 6E 65 4709*  F10_036: db "panels/10_036.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
04372C 70 61 6E 65 4710*  F10_037: db "panels/10_037.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043740 70 61 6E 65 4711*  F10_038: db "panels/10_038.rgba2",0
       6C 73 2F 31 
       30 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043754 70 61 6E 65 4712*  F10_040: db "panels/10_040.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043768 70 61 6E 65 4713*  F10_042: db "panels/10_042.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04377C 70 61 6E 65 4714*  F10_043: db "panels/10_043.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043790 70 61 6E 65 4715*  F10_044: db "panels/10_044.rgba2",0
       6C 73 2F 31 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0437A4 70 61 6E 65 4716*  F11_004: db "panels/11_004.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0437B8 70 61 6E 65 4717*  F11_009: db "panels/11_009.rgba2",0
       6C 73 2F 31 
       31 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0437CC 70 61 6E 65 4718*  F11_010: db "panels/11_010.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0437E0 70 61 6E 65 4719*  F11_011: db "panels/11_011.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0437F4 70 61 6E 65 4720*  F11_012: db "panels/11_012.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043808 70 61 6E 65 4721*  F11_013: db "panels/11_013.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
04381C 70 61 6E 65 4722*  F11_014: db "panels/11_014.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043830 70 61 6E 65 4723*  F11_015: db "panels/11_015.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043844 70 61 6E 65 4724*  F11_016: db "panels/11_016.rgba2",0
       6C 73 2F 31 
       31 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043858 70 61 6E 65 4725*  F11_020: db "panels/11_020.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04386C 70 61 6E 65 4726*  F11_024: db "panels/11_024.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043880 70 61 6E 65 4727*  F11_025: db "panels/11_025.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043894 70 61 6E 65 4728*  F11_026: db "panels/11_026.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
0438A8 70 61 6E 65 4729*  F11_027: db "panels/11_027.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
0438BC 70 61 6E 65 4730*  F11_028: db "panels/11_028.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0438D0 70 61 6E 65 4731*  F11_029: db "panels/11_029.rgba2",0
       6C 73 2F 31 
       31 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0438E4 70 61 6E 65 4732*  F11_032: db "panels/11_032.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0438F8 70 61 6E 65 4733*  F11_035: db "panels/11_035.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
04390C 70 61 6E 65 4734*  F11_036: db "panels/11_036.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043920 70 61 6E 65 4735*  F11_037: db "panels/11_037.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043934 70 61 6E 65 4736*  F11_038: db "panels/11_038.rgba2",0
       6C 73 2F 31 
       31 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043948 70 61 6E 65 4737*  F11_040: db "panels/11_040.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04395C 70 61 6E 65 4738*  F11_042: db "panels/11_042.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043970 70 61 6E 65 4739*  F11_043: db "panels/11_043.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043984 70 61 6E 65 4740*  F11_044: db "panels/11_044.rgba2",0
       6C 73 2F 31 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043998 70 61 6E 65 4741*  F12_004: db "panels/12_004.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0439AC 70 61 6E 65 4742*  F12_009: db "panels/12_009.rgba2",0
       6C 73 2F 31 
       32 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
0439C0 70 61 6E 65 4743*  F12_010: db "panels/12_010.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0439D4 70 61 6E 65 4744*  F12_011: db "panels/12_011.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0439E8 70 61 6E 65 4745*  F12_012: db "panels/12_012.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0439FC 70 61 6E 65 4746*  F12_013: db "panels/12_013.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043A10 70 61 6E 65 4747*  F12_014: db "panels/12_014.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043A24 70 61 6E 65 4748*  F12_015: db "panels/12_015.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043A38 70 61 6E 65 4749*  F12_016: db "panels/12_016.rgba2",0
       6C 73 2F 31 
       32 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043A4C 70 61 6E 65 4750*  F12_020: db "panels/12_020.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043A60 70 61 6E 65 4751*  F12_024: db "panels/12_024.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043A74 70 61 6E 65 4752*  F12_025: db "panels/12_025.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043A88 70 61 6E 65 4753*  F12_026: db "panels/12_026.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043A9C 70 61 6E 65 4754*  F12_027: db "panels/12_027.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043AB0 70 61 6E 65 4755*  F12_028: db "panels/12_028.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043AC4 70 61 6E 65 4756*  F12_029: db "panels/12_029.rgba2",0
       6C 73 2F 31 
       32 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043AD8 70 61 6E 65 4757*  F12_032: db "panels/12_032.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043AEC 70 61 6E 65 4758*  F12_035: db "panels/12_035.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043B00 70 61 6E 65 4759*  F12_036: db "panels/12_036.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043B14 70 61 6E 65 4760*  F12_037: db "panels/12_037.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043B28 70 61 6E 65 4761*  F12_038: db "panels/12_038.rgba2",0
       6C 73 2F 31 
       32 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043B3C 70 61 6E 65 4762*  F12_040: db "panels/12_040.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043B50 70 61 6E 65 4763*  F12_042: db "panels/12_042.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043B64 70 61 6E 65 4764*  F12_043: db "panels/12_043.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043B78 70 61 6E 65 4765*  F12_044: db "panels/12_044.rgba2",0
       6C 73 2F 31 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043B8C 70 61 6E 65 4766*  F13_004: db "panels/13_004.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043BA0 70 61 6E 65 4767*  F13_009: db "panels/13_009.rgba2",0
       6C 73 2F 31 
       33 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043BB4 70 61 6E 65 4768*  F13_010: db "panels/13_010.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043BC8 70 61 6E 65 4769*  F13_011: db "panels/13_011.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043BDC 70 61 6E 65 4770*  F13_012: db "panels/13_012.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043BF0 70 61 6E 65 4771*  F13_013: db "panels/13_013.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043C04 70 61 6E 65 4772*  F13_014: db "panels/13_014.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043C18 70 61 6E 65 4773*  F13_015: db "panels/13_015.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043C2C 70 61 6E 65 4774*  F13_016: db "panels/13_016.rgba2",0
       6C 73 2F 31 
       33 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043C40 70 61 6E 65 4775*  F13_020: db "panels/13_020.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043C54 70 61 6E 65 4776*  F13_024: db "panels/13_024.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043C68 70 61 6E 65 4777*  F13_025: db "panels/13_025.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043C7C 70 61 6E 65 4778*  F13_026: db "panels/13_026.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043C90 70 61 6E 65 4779*  F13_027: db "panels/13_027.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043CA4 70 61 6E 65 4780*  F13_028: db "panels/13_028.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043CB8 70 61 6E 65 4781*  F13_029: db "panels/13_029.rgba2",0
       6C 73 2F 31 
       33 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043CCC 70 61 6E 65 4782*  F13_032: db "panels/13_032.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043CE0 70 61 6E 65 4783*  F13_035: db "panels/13_035.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043CF4 70 61 6E 65 4784*  F13_036: db "panels/13_036.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043D08 70 61 6E 65 4785*  F13_037: db "panels/13_037.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043D1C 70 61 6E 65 4786*  F13_038: db "panels/13_038.rgba2",0
       6C 73 2F 31 
       33 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043D30 70 61 6E 65 4787*  F13_040: db "panels/13_040.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043D44 70 61 6E 65 4788*  F13_042: db "panels/13_042.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043D58 70 61 6E 65 4789*  F13_043: db "panels/13_043.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043D6C 70 61 6E 65 4790*  F13_044: db "panels/13_044.rgba2",0
       6C 73 2F 31 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043D80 70 61 6E 65 4791*  F14_004: db "panels/14_004.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043D94 70 61 6E 65 4792*  F14_009: db "panels/14_009.rgba2",0
       6C 73 2F 31 
       34 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043DA8 70 61 6E 65 4793*  F14_010: db "panels/14_010.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043DBC 70 61 6E 65 4794*  F14_011: db "panels/14_011.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043DD0 70 61 6E 65 4795*  F14_012: db "panels/14_012.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043DE4 70 61 6E 65 4796*  F14_013: db "panels/14_013.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043DF8 70 61 6E 65 4797*  F14_014: db "panels/14_014.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
043E0C 70 61 6E 65 4798*  F14_015: db "panels/14_015.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
043E20 70 61 6E 65 4799*  F14_016: db "panels/14_016.rgba2",0
       6C 73 2F 31 
       34 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
043E34 70 61 6E 65 4800*  F14_020: db "panels/14_020.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
043E48 70 61 6E 65 4801*  F14_024: db "panels/14_024.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
043E5C 70 61 6E 65 4802*  F14_025: db "panels/14_025.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
043E70 70 61 6E 65 4803*  F14_026: db "panels/14_026.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
043E84 70 61 6E 65 4804*  F14_027: db "panels/14_027.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
043E98 70 61 6E 65 4805*  F14_028: db "panels/14_028.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
043EAC 70 61 6E 65 4806*  F14_029: db "panels/14_029.rgba2",0
       6C 73 2F 31 
       34 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
043EC0 70 61 6E 65 4807*  F14_032: db "panels/14_032.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
043ED4 70 61 6E 65 4808*  F14_035: db "panels/14_035.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
043EE8 70 61 6E 65 4809*  F14_036: db "panels/14_036.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
043EFC 70 61 6E 65 4810*  F14_037: db "panels/14_037.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
043F10 70 61 6E 65 4811*  F14_038: db "panels/14_038.rgba2",0
       6C 73 2F 31 
       34 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
043F24 70 61 6E 65 4812*  F14_040: db "panels/14_040.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
043F38 70 61 6E 65 4813*  F14_042: db "panels/14_042.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
043F4C 70 61 6E 65 4814*  F14_043: db "panels/14_043.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
043F60 70 61 6E 65 4815*  F14_044: db "panels/14_044.rgba2",0
       6C 73 2F 31 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
043F74 70 61 6E 65 4816*  F15_004: db "panels/15_004.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
043F88 70 61 6E 65 4817*  F15_009: db "panels/15_009.rgba2",0
       6C 73 2F 31 
       35 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
043F9C 70 61 6E 65 4818*  F15_010: db "panels/15_010.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
043FB0 70 61 6E 65 4819*  F15_011: db "panels/15_011.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
043FC4 70 61 6E 65 4820*  F15_012: db "panels/15_012.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
043FD8 70 61 6E 65 4821*  F15_013: db "panels/15_013.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
043FEC 70 61 6E 65 4822*  F15_014: db "panels/15_014.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
044000 70 61 6E 65 4823*  F15_015: db "panels/15_015.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044014 70 61 6E 65 4824*  F15_016: db "panels/15_016.rgba2",0
       6C 73 2F 31 
       35 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044028 70 61 6E 65 4825*  F15_020: db "panels/15_020.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04403C 70 61 6E 65 4826*  F15_024: db "panels/15_024.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044050 70 61 6E 65 4827*  F15_025: db "panels/15_025.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044064 70 61 6E 65 4828*  F15_026: db "panels/15_026.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044078 70 61 6E 65 4829*  F15_027: db "panels/15_027.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04408C 70 61 6E 65 4830*  F15_028: db "panels/15_028.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
0440A0 70 61 6E 65 4831*  F15_029: db "panels/15_029.rgba2",0
       6C 73 2F 31 
       35 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0440B4 70 61 6E 65 4832*  F15_032: db "panels/15_032.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0440C8 70 61 6E 65 4833*  F15_035: db "panels/15_035.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0440DC 70 61 6E 65 4834*  F15_036: db "panels/15_036.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0440F0 70 61 6E 65 4835*  F15_037: db "panels/15_037.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044104 70 61 6E 65 4836*  F15_038: db "panels/15_038.rgba2",0
       6C 73 2F 31 
       35 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044118 70 61 6E 65 4837*  F15_040: db "panels/15_040.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04412C 70 61 6E 65 4838*  F15_042: db "panels/15_042.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044140 70 61 6E 65 4839*  F15_043: db "panels/15_043.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044154 70 61 6E 65 4840*  F15_044: db "panels/15_044.rgba2",0
       6C 73 2F 31 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044168 70 61 6E 65 4841*  F16_004: db "panels/16_004.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04417C 70 61 6E 65 4842*  F16_009: db "panels/16_009.rgba2",0
       6C 73 2F 31 
       36 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044190 70 61 6E 65 4843*  F16_010: db "panels/16_010.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
0441A4 70 61 6E 65 4844*  F16_011: db "panels/16_011.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0441B8 70 61 6E 65 4845*  F16_012: db "panels/16_012.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0441CC 70 61 6E 65 4846*  F16_013: db "panels/16_013.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0441E0 70 61 6E 65 4847*  F16_014: db "panels/16_014.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0441F4 70 61 6E 65 4848*  F16_015: db "panels/16_015.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
044208 70 61 6E 65 4849*  F16_016: db "panels/16_016.rgba2",0
       6C 73 2F 31 
       36 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
04421C 70 61 6E 65 4850*  F16_020: db "panels/16_020.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044230 70 61 6E 65 4851*  F16_024: db "panels/16_024.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044244 70 61 6E 65 4852*  F16_025: db "panels/16_025.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044258 70 61 6E 65 4853*  F16_026: db "panels/16_026.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
04426C 70 61 6E 65 4854*  F16_027: db "panels/16_027.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044280 70 61 6E 65 4855*  F16_028: db "panels/16_028.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044294 70 61 6E 65 4856*  F16_029: db "panels/16_029.rgba2",0
       6C 73 2F 31 
       36 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
0442A8 70 61 6E 65 4857*  F16_032: db "panels/16_032.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0442BC 70 61 6E 65 4858*  F16_035: db "panels/16_035.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0442D0 70 61 6E 65 4859*  F16_036: db "panels/16_036.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0442E4 70 61 6E 65 4860*  F16_037: db "panels/16_037.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0442F8 70 61 6E 65 4861*  F16_038: db "panels/16_038.rgba2",0
       6C 73 2F 31 
       36 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
04430C 70 61 6E 65 4862*  F16_040: db "panels/16_040.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044320 70 61 6E 65 4863*  F16_042: db "panels/16_042.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044334 70 61 6E 65 4864*  F16_043: db "panels/16_043.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044348 70 61 6E 65 4865*  F16_044: db "panels/16_044.rgba2",0
       6C 73 2F 31 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04435C 70 61 6E 65 4866*  F17_004: db "panels/17_004.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044370 70 61 6E 65 4867*  F17_009: db "panels/17_009.rgba2",0
       6C 73 2F 31 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044384 70 61 6E 65 4868*  F17_010: db "panels/17_010.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044398 70 61 6E 65 4869*  F17_011: db "panels/17_011.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0443AC 70 61 6E 65 4870*  F17_012: db "panels/17_012.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0443C0 70 61 6E 65 4871*  F17_013: db "panels/17_013.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0443D4 70 61 6E 65 4872*  F17_014: db "panels/17_014.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0443E8 70 61 6E 65 4873*  F17_015: db "panels/17_015.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0443FC 70 61 6E 65 4874*  F17_016: db "panels/17_016.rgba2",0
       6C 73 2F 31 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044410 70 61 6E 65 4875*  F17_020: db "panels/17_020.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044424 70 61 6E 65 4876*  F17_024: db "panels/17_024.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044438 70 61 6E 65 4877*  F17_025: db "panels/17_025.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04444C 70 61 6E 65 4878*  F17_026: db "panels/17_026.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044460 70 61 6E 65 4879*  F17_027: db "panels/17_027.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044474 70 61 6E 65 4880*  F17_028: db "panels/17_028.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044488 70 61 6E 65 4881*  F17_029: db "panels/17_029.rgba2",0
       6C 73 2F 31 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
04449C 70 61 6E 65 4882*  F17_032: db "panels/17_032.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0444B0 70 61 6E 65 4883*  F17_035: db "panels/17_035.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0444C4 70 61 6E 65 4884*  F17_036: db "panels/17_036.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0444D8 70 61 6E 65 4885*  F17_037: db "panels/17_037.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0444EC 70 61 6E 65 4886*  F17_038: db "panels/17_038.rgba2",0
       6C 73 2F 31 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044500 70 61 6E 65 4887*  F17_040: db "panels/17_040.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044514 70 61 6E 65 4888*  F17_042: db "panels/17_042.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044528 70 61 6E 65 4889*  F17_043: db "panels/17_043.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
04453C 70 61 6E 65 4890*  F17_044: db "panels/17_044.rgba2",0
       6C 73 2F 31 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044550 70 61 6E 65 4891*  F57_004: db "panels/57_004.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044564 70 61 6E 65 4892*  F57_009: db "panels/57_009.rgba2",0
       6C 73 2F 35 
       37 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044578 70 61 6E 65 4893*  F57_010: db "panels/57_010.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
04458C 70 61 6E 65 4894*  F57_011: db "panels/57_011.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
0445A0 70 61 6E 65 4895*  F57_012: db "panels/57_012.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0445B4 70 61 6E 65 4896*  F57_013: db "panels/57_013.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0445C8 70 61 6E 65 4897*  F57_014: db "panels/57_014.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0445DC 70 61 6E 65 4898*  F57_015: db "panels/57_015.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0445F0 70 61 6E 65 4899*  F57_016: db "panels/57_016.rgba2",0
       6C 73 2F 35 
       37 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
044604 70 61 6E 65 4900*  F57_020: db "panels/57_020.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044618 70 61 6E 65 4901*  F57_024: db "panels/57_024.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
04462C 70 61 6E 65 4902*  F57_025: db "panels/57_025.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044640 70 61 6E 65 4903*  F57_026: db "panels/57_026.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044654 70 61 6E 65 4904*  F57_027: db "panels/57_027.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044668 70 61 6E 65 4905*  F57_028: db "panels/57_028.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
04467C 70 61 6E 65 4906*  F57_029: db "panels/57_029.rgba2",0
       6C 73 2F 35 
       37 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044690 70 61 6E 65 4907*  F57_032: db "panels/57_032.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0446A4 70 61 6E 65 4908*  F57_035: db "panels/57_035.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0446B8 70 61 6E 65 4909*  F57_036: db "panels/57_036.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0446CC 70 61 6E 65 4910*  F57_037: db "panels/57_037.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0446E0 70 61 6E 65 4911*  F57_038: db "panels/57_038.rgba2",0
       6C 73 2F 35 
       37 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0446F4 70 61 6E 65 4912*  F57_040: db "panels/57_040.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044708 70 61 6E 65 4913*  F57_042: db "panels/57_042.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
04471C 70 61 6E 65 4914*  F57_043: db "panels/57_043.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044730 70 61 6E 65 4915*  F57_044: db "panels/57_044.rgba2",0
       6C 73 2F 35 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044744 70 61 6E 65 4916*  F58_004: db "panels/58_004.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
044758 70 61 6E 65 4917*  F58_009: db "panels/58_009.rgba2",0
       6C 73 2F 35 
       38 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
04476C 70 61 6E 65 4918*  F58_010: db "panels/58_010.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044780 70 61 6E 65 4919*  F58_011: db "panels/58_011.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044794 70 61 6E 65 4920*  F58_012: db "panels/58_012.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
0447A8 70 61 6E 65 4921*  F58_013: db "panels/58_013.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0447BC 70 61 6E 65 4922*  F58_014: db "panels/58_014.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0447D0 70 61 6E 65 4923*  F58_015: db "panels/58_015.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0447E4 70 61 6E 65 4924*  F58_016: db "panels/58_016.rgba2",0
       6C 73 2F 35 
       38 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0447F8 70 61 6E 65 4925*  F58_020: db "panels/58_020.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04480C 70 61 6E 65 4926*  F58_024: db "panels/58_024.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044820 70 61 6E 65 4927*  F58_025: db "panels/58_025.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044834 70 61 6E 65 4928*  F58_026: db "panels/58_026.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044848 70 61 6E 65 4929*  F58_027: db "panels/58_027.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
04485C 70 61 6E 65 4930*  F58_028: db "panels/58_028.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044870 70 61 6E 65 4931*  F58_029: db "panels/58_029.rgba2",0
       6C 73 2F 35 
       38 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044884 70 61 6E 65 4932*  F58_032: db "panels/58_032.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044898 70 61 6E 65 4933*  F58_035: db "panels/58_035.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
0448AC 70 61 6E 65 4934*  F58_036: db "panels/58_036.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
0448C0 70 61 6E 65 4935*  F58_037: db "panels/58_037.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
0448D4 70 61 6E 65 4936*  F58_038: db "panels/58_038.rgba2",0
       6C 73 2F 35 
       38 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
0448E8 70 61 6E 65 4937*  F58_040: db "panels/58_040.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0448FC 70 61 6E 65 4938*  F58_042: db "panels/58_042.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044910 70 61 6E 65 4939*  F58_043: db "panels/58_043.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044924 70 61 6E 65 4940*  F58_044: db "panels/58_044.rgba2",0
       6C 73 2F 35 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044938 70 61 6E 65 4941*  F59_004: db "panels/59_004.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04494C 70 61 6E 65 4942*  F59_009: db "panels/59_009.rgba2",0
       6C 73 2F 35 
       39 5F 30 30 
       39 2E 72 67 
       62 61 32 00 
044960 70 61 6E 65 4943*  F59_010: db "panels/59_010.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       30 2E 72 67 
       62 61 32 00 
044974 70 61 6E 65 4944*  F59_011: db "panels/59_011.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       31 2E 72 67 
       62 61 32 00 
044988 70 61 6E 65 4945*  F59_012: db "panels/59_012.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       32 2E 72 67 
       62 61 32 00 
04499C 70 61 6E 65 4946*  F59_013: db "panels/59_013.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       33 2E 72 67 
       62 61 32 00 
0449B0 70 61 6E 65 4947*  F59_014: db "panels/59_014.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       34 2E 72 67 
       62 61 32 00 
0449C4 70 61 6E 65 4948*  F59_015: db "panels/59_015.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       35 2E 72 67 
       62 61 32 00 
0449D8 70 61 6E 65 4949*  F59_016: db "panels/59_016.rgba2",0
       6C 73 2F 35 
       39 5F 30 31 
       36 2E 72 67 
       62 61 32 00 
0449EC 70 61 6E 65 4950*  F59_020: db "panels/59_020.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
044A00 70 61 6E 65 4951*  F59_024: db "panels/59_024.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       34 2E 72 67 
       62 61 32 00 
044A14 70 61 6E 65 4952*  F59_025: db "panels/59_025.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
044A28 70 61 6E 65 4953*  F59_026: db "panels/59_026.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       36 2E 72 67 
       62 61 32 00 
044A3C 70 61 6E 65 4954*  F59_027: db "panels/59_027.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       37 2E 72 67 
       62 61 32 00 
044A50 70 61 6E 65 4955*  F59_028: db "panels/59_028.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       38 2E 72 67 
       62 61 32 00 
044A64 70 61 6E 65 4956*  F59_029: db "panels/59_029.rgba2",0
       6C 73 2F 35 
       39 5F 30 32 
       39 2E 72 67 
       62 61 32 00 
044A78 70 61 6E 65 4957*  F59_032: db "panels/59_032.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
044A8C 70 61 6E 65 4958*  F59_035: db "panels/59_035.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       35 2E 72 67 
       62 61 32 00 
044AA0 70 61 6E 65 4959*  F59_036: db "panels/59_036.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       36 2E 72 67 
       62 61 32 00 
044AB4 70 61 6E 65 4960*  F59_037: db "panels/59_037.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       37 2E 72 67 
       62 61 32 00 
044AC8 70 61 6E 65 4961*  F59_038: db "panels/59_038.rgba2",0
       6C 73 2F 35 
       39 5F 30 33 
       38 2E 72 67 
       62 61 32 00 
044ADC 70 61 6E 65 4962*  F59_040: db "panels/59_040.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
044AF0 70 61 6E 65 4963*  F59_042: db "panels/59_042.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       32 2E 72 67 
       62 61 32 00 
044B04 70 61 6E 65 4964*  F59_043: db "panels/59_043.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       33 2E 72 67 
       62 61 32 00 
044B18 70 61 6E 65 4965*  F59_044: db "panels/59_044.rgba2",0
       6C 73 2F 35 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
044B2C             4966*  
044B2C             4967*  ; sprite buffer ids:
044B2C             4968*  BUF_20_004: equ 0x0213
044B2C             4969*  BUF_20_020: equ 0x0214
044B2C             4970*  BUF_20_032: equ 0x0215
044B2C             4971*  BUF_20_040: equ 0x0216
044B2C             4972*  BUF_20_044: equ 0x0217
044B2C             4973*  BUF_21_004: equ 0x0218
044B2C             4974*  BUF_21_020: equ 0x0219
044B2C             4975*  BUF_21_032: equ 0x021A
044B2C             4976*  BUF_21_040: equ 0x021B
044B2C             4977*  BUF_21_044: equ 0x021C
044B2C             4978*  BUF_22_004: equ 0x021D
044B2C             4979*  BUF_22_020: equ 0x021E
044B2C             4980*  BUF_22_032: equ 0x021F
044B2C             4981*  BUF_22_040: equ 0x0220
044B2C             4982*  BUF_22_044: equ 0x0221
044B2C             4983*  BUF_23_004: equ 0x0222
044B2C             4984*  BUF_23_020: equ 0x0223
044B2C             4985*  BUF_23_032: equ 0x0224
044B2C             4986*  BUF_23_040: equ 0x0225
044B2C             4987*  BUF_23_044: equ 0x0226
044B2C             4988*  BUF_24_004: equ 0x0227
044B2C             4989*  BUF_24_020: equ 0x0228
044B2C             4990*  BUF_24_032: equ 0x0229
044B2C             4991*  BUF_24_040: equ 0x022A
044B2C             4992*  BUF_24_044: equ 0x022B
044B2C             4993*  BUF_40_004: equ 0x022C
044B2C             4994*  BUF_40_020: equ 0x022D
044B2C             4995*  BUF_40_032: equ 0x022E
044B2C             4996*  BUF_40_040: equ 0x022F
044B2C             4997*  BUF_40_044: equ 0x0230
044B2C             4998*  BUF_41_004: equ 0x0231
044B2C             4999*  BUF_41_020: equ 0x0232
044B2C             5000*  BUF_41_032: equ 0x0233
044B2C             5001*  BUF_41_040: equ 0x0234
044B2C             5002*  BUF_41_044: equ 0x0235
044B2C             5003*  BUF_42_004: equ 0x0236
044B2C             5004*  BUF_42_020: equ 0x0237
044B2C             5005*  BUF_42_032: equ 0x0238
044B2C             5006*  BUF_42_040: equ 0x0239
044B2C             5007*  BUF_42_044: equ 0x023A
044B2C             5008*  BUF_43_004: equ 0x023B
044B2C             5009*  BUF_43_020: equ 0x023C
044B2C             5010*  BUF_43_032: equ 0x023D
044B2C             5011*  BUF_43_040: equ 0x023E
044B2C             5012*  BUF_43_044: equ 0x023F
044B2C             5013*  BUF_44_004: equ 0x0240
044B2C             5014*  BUF_44_020: equ 0x0241
044B2C             5015*  BUF_44_032: equ 0x0242
044B2C             5016*  BUF_44_040: equ 0x0243
044B2C             5017*  BUF_44_044: equ 0x0244
044B2C             5018*  BUF_45_004: equ 0x0245
044B2C             5019*  BUF_45_020: equ 0x0246
044B2C             5020*  BUF_45_032: equ 0x0247
044B2C             5021*  BUF_45_040: equ 0x0248
044B2C             5022*  BUF_45_044: equ 0x0249
044B2C             5023*  BUF_46_004: equ 0x024A
044B2C             5024*  BUF_46_020: equ 0x024B
044B2C             5025*  BUF_46_032: equ 0x024C
044B2C             5026*  BUF_46_040: equ 0x024D
044B2C             5027*  BUF_46_044: equ 0x024E
044B2C             5028*  BUF_47_004: equ 0x024F
044B2C             5029*  BUF_47_020: equ 0x0250
044B2C             5030*  BUF_47_032: equ 0x0251
044B2C             5031*  BUF_47_040: equ 0x0252
044B2C             5032*  BUF_47_044: equ 0x0253
044B2C             5033*  BUF_48_004: equ 0x0254
044B2C             5034*  BUF_48_020: equ 0x0255
044B2C             5035*  BUF_48_032: equ 0x0256
044B2C             5036*  BUF_48_040: equ 0x0257
044B2C             5037*  BUF_48_044: equ 0x0258
044B2C             5038*  BUF_49_004: equ 0x0259
044B2C             5039*  BUF_49_020: equ 0x025A
044B2C             5040*  BUF_49_032: equ 0x025B
044B2C             5041*  BUF_49_040: equ 0x025C
044B2C             5042*  BUF_49_044: equ 0x025D
044B2C             5043*  BUF_50_004: equ 0x025E
044B2C             5044*  BUF_50_020: equ 0x025F
044B2C             5045*  BUF_50_032: equ 0x0260
044B2C             5046*  BUF_50_040: equ 0x0261
044B2C             5047*  BUF_50_044: equ 0x0262
044B2C             5048*  BUF_51_004: equ 0x0263
044B2C             5049*  BUF_51_020: equ 0x0264
044B2C             5050*  BUF_51_032: equ 0x0265
044B2C             5051*  BUF_51_040: equ 0x0266
044B2C             5052*  BUF_51_044: equ 0x0267
044B2C             5053*  BUF_52_004: equ 0x0268
044B2C             5054*  BUF_52_020: equ 0x0269
044B2C             5055*  BUF_52_032: equ 0x026A
044B2C             5056*  BUF_52_040: equ 0x026B
044B2C             5057*  BUF_52_044: equ 0x026C
044B2C             5058*  BUF_56_004: equ 0x026D
044B2C             5059*  BUF_56_020: equ 0x026E
044B2C             5060*  BUF_56_032: equ 0x026F
044B2C             5061*  BUF_56_040: equ 0x0270
044B2C             5062*  BUF_56_044: equ 0x0271
044B2C             5063*  BUF_60_004: equ 0x0272
044B2C             5064*  BUF_60_020: equ 0x0273
044B2C             5065*  BUF_60_032: equ 0x0274
044B2C             5066*  BUF_60_040: equ 0x0275
044B2C             5067*  BUF_60_044: equ 0x0276
044B2C             5068*  
044B2C             5069*  sprite_num_panels: equ 100
044B2C             5070*  
044B2C             5071*  ; sprite buffer id reverse lookup:
044B2C             5072*  sprite_buffer_id_lut:
044B2C 13 02 00    5073*  	dl BUF_20_004
044B2F 14 02 00    5074*  	dl BUF_20_020
044B32 15 02 00    5075*  	dl BUF_20_032
044B35 16 02 00    5076*  	dl BUF_20_040
044B38 17 02 00    5077*  	dl BUF_20_044
044B3B 18 02 00    5078*  	dl BUF_21_004
044B3E 19 02 00    5079*  	dl BUF_21_020
044B41 1A 02 00    5080*  	dl BUF_21_032
044B44 1B 02 00    5081*  	dl BUF_21_040
044B47 1C 02 00    5082*  	dl BUF_21_044
044B4A 1D 02 00    5083*  	dl BUF_22_004
044B4D 1E 02 00    5084*  	dl BUF_22_020
044B50 1F 02 00    5085*  	dl BUF_22_032
044B53 20 02 00    5086*  	dl BUF_22_040
044B56 21 02 00    5087*  	dl BUF_22_044
044B59 22 02 00    5088*  	dl BUF_23_004
044B5C 23 02 00    5089*  	dl BUF_23_020
044B5F 24 02 00    5090*  	dl BUF_23_032
044B62 25 02 00    5091*  	dl BUF_23_040
044B65 26 02 00    5092*  	dl BUF_23_044
044B68 27 02 00    5093*  	dl BUF_24_004
044B6B 28 02 00    5094*  	dl BUF_24_020
044B6E 29 02 00    5095*  	dl BUF_24_032
044B71 2A 02 00    5096*  	dl BUF_24_040
044B74 2B 02 00    5097*  	dl BUF_24_044
044B77 2C 02 00    5098*  	dl BUF_40_004
044B7A 2D 02 00    5099*  	dl BUF_40_020
044B7D 2E 02 00    5100*  	dl BUF_40_032
044B80 2F 02 00    5101*  	dl BUF_40_040
044B83 30 02 00    5102*  	dl BUF_40_044
044B86 31 02 00    5103*  	dl BUF_41_004
044B89 32 02 00    5104*  	dl BUF_41_020
044B8C 33 02 00    5105*  	dl BUF_41_032
044B8F 34 02 00    5106*  	dl BUF_41_040
044B92 35 02 00    5107*  	dl BUF_41_044
044B95 36 02 00    5108*  	dl BUF_42_004
044B98 37 02 00    5109*  	dl BUF_42_020
044B9B 38 02 00    5110*  	dl BUF_42_032
044B9E 39 02 00    5111*  	dl BUF_42_040
044BA1 3A 02 00    5112*  	dl BUF_42_044
044BA4 3B 02 00    5113*  	dl BUF_43_004
044BA7 3C 02 00    5114*  	dl BUF_43_020
044BAA 3D 02 00    5115*  	dl BUF_43_032
044BAD 3E 02 00    5116*  	dl BUF_43_040
044BB0 3F 02 00    5117*  	dl BUF_43_044
044BB3 40 02 00    5118*  	dl BUF_44_004
044BB6 41 02 00    5119*  	dl BUF_44_020
044BB9 42 02 00    5120*  	dl BUF_44_032
044BBC 43 02 00    5121*  	dl BUF_44_040
044BBF 44 02 00    5122*  	dl BUF_44_044
044BC2 45 02 00    5123*  	dl BUF_45_004
044BC5 46 02 00    5124*  	dl BUF_45_020
044BC8 47 02 00    5125*  	dl BUF_45_032
044BCB 48 02 00    5126*  	dl BUF_45_040
044BCE 49 02 00    5127*  	dl BUF_45_044
044BD1 4A 02 00    5128*  	dl BUF_46_004
044BD4 4B 02 00    5129*  	dl BUF_46_020
044BD7 4C 02 00    5130*  	dl BUF_46_032
044BDA 4D 02 00    5131*  	dl BUF_46_040
044BDD 4E 02 00    5132*  	dl BUF_46_044
044BE0 4F 02 00    5133*  	dl BUF_47_004
044BE3 50 02 00    5134*  	dl BUF_47_020
044BE6 51 02 00    5135*  	dl BUF_47_032
044BE9 52 02 00    5136*  	dl BUF_47_040
044BEC 53 02 00    5137*  	dl BUF_47_044
044BEF 54 02 00    5138*  	dl BUF_48_004
044BF2 55 02 00    5139*  	dl BUF_48_020
044BF5 56 02 00    5140*  	dl BUF_48_032
044BF8 57 02 00    5141*  	dl BUF_48_040
044BFB 58 02 00    5142*  	dl BUF_48_044
044BFE 59 02 00    5143*  	dl BUF_49_004
044C01 5A 02 00    5144*  	dl BUF_49_020
044C04 5B 02 00    5145*  	dl BUF_49_032
044C07 5C 02 00    5146*  	dl BUF_49_040
044C0A 5D 02 00    5147*  	dl BUF_49_044
044C0D 5E 02 00    5148*  	dl BUF_50_004
044C10 5F 02 00    5149*  	dl BUF_50_020
044C13 60 02 00    5150*  	dl BUF_50_032
044C16 61 02 00    5151*  	dl BUF_50_040
044C19 62 02 00    5152*  	dl BUF_50_044
044C1C 63 02 00    5153*  	dl BUF_51_004
044C1F 64 02 00    5154*  	dl BUF_51_020
044C22 65 02 00    5155*  	dl BUF_51_032
044C25 66 02 00    5156*  	dl BUF_51_040
044C28 67 02 00    5157*  	dl BUF_51_044
044C2B 68 02 00    5158*  	dl BUF_52_004
044C2E 69 02 00    5159*  	dl BUF_52_020
044C31 6A 02 00    5160*  	dl BUF_52_032
044C34 6B 02 00    5161*  	dl BUF_52_040
044C37 6C 02 00    5162*  	dl BUF_52_044
044C3A 6D 02 00    5163*  	dl BUF_56_004
044C3D 6E 02 00    5164*  	dl BUF_56_020
044C40 6F 02 00    5165*  	dl BUF_56_032
044C43 70 02 00    5166*  	dl BUF_56_040
044C46 71 02 00    5167*  	dl BUF_56_044
044C49 72 02 00    5168*  	dl BUF_60_004
044C4C 73 02 00    5169*  	dl BUF_60_020
044C4F 74 02 00    5170*  	dl BUF_60_032
044C52 75 02 00    5171*  	dl BUF_60_040
044C55 76 02 00    5172*  	dl BUF_60_044
044C58             5173*  
044C58             5174*  ; sprite load routines jump table:
044C58             5175*  sprite_load_panels_table:
044C58 84 4D 04    5176*  	dl ld_20_004
044C5B AE 4D 04    5177*  	dl ld_20_020
044C5E D8 4D 04    5178*  	dl ld_20_032
044C61 02 4E 04    5179*  	dl ld_20_040
044C64 2C 4E 04    5180*  	dl ld_20_044
044C67 56 4E 04    5181*  	dl ld_21_004
044C6A 80 4E 04    5182*  	dl ld_21_020
044C6D AA 4E 04    5183*  	dl ld_21_032
044C70 D4 4E 04    5184*  	dl ld_21_040
044C73 FE 4E 04    5185*  	dl ld_21_044
044C76 28 4F 04    5186*  	dl ld_22_004
044C79 52 4F 04    5187*  	dl ld_22_020
044C7C 7C 4F 04    5188*  	dl ld_22_032
044C7F A6 4F 04    5189*  	dl ld_22_040
044C82 D0 4F 04    5190*  	dl ld_22_044
044C85 FA 4F 04    5191*  	dl ld_23_004
044C88 24 50 04    5192*  	dl ld_23_020
044C8B 4E 50 04    5193*  	dl ld_23_032
044C8E 78 50 04    5194*  	dl ld_23_040
044C91 A2 50 04    5195*  	dl ld_23_044
044C94 CC 50 04    5196*  	dl ld_24_004
044C97 F6 50 04    5197*  	dl ld_24_020
044C9A 20 51 04    5198*  	dl ld_24_032
044C9D 4A 51 04    5199*  	dl ld_24_040
044CA0 74 51 04    5200*  	dl ld_24_044
044CA3 9E 51 04    5201*  	dl ld_40_004
044CA6 C8 51 04    5202*  	dl ld_40_020
044CA9 F2 51 04    5203*  	dl ld_40_032
044CAC 1C 52 04    5204*  	dl ld_40_040
044CAF 46 52 04    5205*  	dl ld_40_044
044CB2 70 52 04    5206*  	dl ld_41_004
044CB5 9A 52 04    5207*  	dl ld_41_020
044CB8 C4 52 04    5208*  	dl ld_41_032
044CBB EE 52 04    5209*  	dl ld_41_040
044CBE 18 53 04    5210*  	dl ld_41_044
044CC1 42 53 04    5211*  	dl ld_42_004
044CC4 6C 53 04    5212*  	dl ld_42_020
044CC7 96 53 04    5213*  	dl ld_42_032
044CCA C0 53 04    5214*  	dl ld_42_040
044CCD EA 53 04    5215*  	dl ld_42_044
044CD0 14 54 04    5216*  	dl ld_43_004
044CD3 3E 54 04    5217*  	dl ld_43_020
044CD6 68 54 04    5218*  	dl ld_43_032
044CD9 92 54 04    5219*  	dl ld_43_040
044CDC BC 54 04    5220*  	dl ld_43_044
044CDF E6 54 04    5221*  	dl ld_44_004
044CE2 10 55 04    5222*  	dl ld_44_020
044CE5 3A 55 04    5223*  	dl ld_44_032
044CE8 64 55 04    5224*  	dl ld_44_040
044CEB 8E 55 04    5225*  	dl ld_44_044
044CEE B8 55 04    5226*  	dl ld_45_004
044CF1 E2 55 04    5227*  	dl ld_45_020
044CF4 0C 56 04    5228*  	dl ld_45_032
044CF7 36 56 04    5229*  	dl ld_45_040
044CFA 60 56 04    5230*  	dl ld_45_044
044CFD 8A 56 04    5231*  	dl ld_46_004
044D00 B4 56 04    5232*  	dl ld_46_020
044D03 DE 56 04    5233*  	dl ld_46_032
044D06 08 57 04    5234*  	dl ld_46_040
044D09 32 57 04    5235*  	dl ld_46_044
044D0C 5C 57 04    5236*  	dl ld_47_004
044D0F 86 57 04    5237*  	dl ld_47_020
044D12 B0 57 04    5238*  	dl ld_47_032
044D15 DA 57 04    5239*  	dl ld_47_040
044D18 04 58 04    5240*  	dl ld_47_044
044D1B 2E 58 04    5241*  	dl ld_48_004
044D1E 58 58 04    5242*  	dl ld_48_020
044D21 82 58 04    5243*  	dl ld_48_032
044D24 AC 58 04    5244*  	dl ld_48_040
044D27 D6 58 04    5245*  	dl ld_48_044
044D2A 00 59 04    5246*  	dl ld_49_004
044D2D 2A 59 04    5247*  	dl ld_49_020
044D30 54 59 04    5248*  	dl ld_49_032
044D33 7E 59 04    5249*  	dl ld_49_040
044D36 A8 59 04    5250*  	dl ld_49_044
044D39 D2 59 04    5251*  	dl ld_50_004
044D3C FC 59 04    5252*  	dl ld_50_020
044D3F 26 5A 04    5253*  	dl ld_50_032
044D42 50 5A 04    5254*  	dl ld_50_040
044D45 7A 5A 04    5255*  	dl ld_50_044
044D48 A4 5A 04    5256*  	dl ld_51_004
044D4B CE 5A 04    5257*  	dl ld_51_020
044D4E F8 5A 04    5258*  	dl ld_51_032
044D51 22 5B 04    5259*  	dl ld_51_040
044D54 4C 5B 04    5260*  	dl ld_51_044
044D57 76 5B 04    5261*  	dl ld_52_004
044D5A A0 5B 04    5262*  	dl ld_52_020
044D5D CA 5B 04    5263*  	dl ld_52_032
044D60 F4 5B 04    5264*  	dl ld_52_040
044D63 1E 5C 04    5265*  	dl ld_52_044
044D66 48 5C 04    5266*  	dl ld_56_004
044D69 72 5C 04    5267*  	dl ld_56_020
044D6C 9C 5C 04    5268*  	dl ld_56_032
044D6F C6 5C 04    5269*  	dl ld_56_040
044D72 F0 5C 04    5270*  	dl ld_56_044
044D75 1A 5D 04    5271*  	dl ld_60_004
044D78 44 5D 04    5272*  	dl ld_60_020
044D7B 6E 5D 04    5273*  	dl ld_60_032
044D7E 98 5D 04    5274*  	dl ld_60_040
044D81 C2 5D 04    5275*  	dl ld_60_044
044D84             5276*  
044D84             5277*  ; Import sprite .rgba2 bitmap files and load them into VDP buffers
044D84             5278*  
044D84             5279*  ld_20_004:
044D84 21 EC 5D 04 5280*  	ld hl,F20_004
044D88 22 DE BE 04 5281*  	ld (cur_filename),hl
044D8C 11 0A CB 04 5282*  	ld de,filedata
044D90 01 00 00 01 5283*  	ld bc,65536
044D94 3E 01       5284*  	ld a,mos_load
044D96 5B CF       5285*  	RST.LIL 08h
044D98 21 13 02 00 5286*  	ld hl,BUF_20_004
044D9C 01 13 00 00 5287*  	ld bc,19
044DA0 11 12 00 00 5288*  	ld de,18
044DA4 DD 21 56 01 5289*  	ld ix,342
       00          
044DA9 CD 59 C0 04 5290*  	call vdu_load_img
044DAD C9          5291*  	ret
044DAE             5292*  
044DAE             5293*  ld_20_020:
044DAE 21 00 5E 04 5294*  	ld hl,F20_020
044DB2 22 DE BE 04 5295*  	ld (cur_filename),hl
044DB6 11 0A CB 04 5296*  	ld de,filedata
044DBA 01 00 00 01 5297*  	ld bc,65536
044DBE 3E 01       5298*  	ld a,mos_load
044DC0 5B CF       5299*  	RST.LIL 08h
044DC2 21 14 02 00 5300*  	ld hl,BUF_20_020
044DC6 01 17 00 00 5301*  	ld bc,23
044DCA 11 17 00 00 5302*  	ld de,23
044DCE DD 21 11 02 5303*  	ld ix,529
       00          
044DD3 CD 59 C0 04 5304*  	call vdu_load_img
044DD7 C9          5305*  	ret
044DD8             5306*  
044DD8             5307*  ld_20_032:
044DD8 21 14 5E 04 5308*  	ld hl,F20_032
044DDC 22 DE BE 04 5309*  	ld (cur_filename),hl
044DE0 11 0A CB 04 5310*  	ld de,filedata
044DE4 01 00 00 01 5311*  	ld bc,65536
044DE8 3E 01       5312*  	ld a,mos_load
044DEA 5B CF       5313*  	RST.LIL 08h
044DEC 21 15 02 00 5314*  	ld hl,BUF_20_032
044DF0 01 20 00 00 5315*  	ld bc,32
044DF4 11 22 00 00 5316*  	ld de,34
044DF8 DD 21 40 04 5317*  	ld ix,1088
       00          
044DFD CD 59 C0 04 5318*  	call vdu_load_img
044E01 C9          5319*  	ret
044E02             5320*  
044E02             5321*  ld_20_040:
044E02 21 28 5E 04 5322*  	ld hl,F20_040
044E06 22 DE BE 04 5323*  	ld (cur_filename),hl
044E0A 11 0A CB 04 5324*  	ld de,filedata
044E0E 01 00 00 01 5325*  	ld bc,65536
044E12 3E 01       5326*  	ld a,mos_load
044E14 5B CF       5327*  	RST.LIL 08h
044E16 21 16 02 00 5328*  	ld hl,BUF_20_040
044E1A 01 36 00 00 5329*  	ld bc,54
044E1E 11 38 00 00 5330*  	ld de,56
044E22 DD 21 D0 0B 5331*  	ld ix,3024
       00          
044E27 CD 59 C0 04 5332*  	call vdu_load_img
044E2B C9          5333*  	ret
044E2C             5334*  
044E2C             5335*  ld_20_044:
044E2C 21 3C 5E 04 5336*  	ld hl,F20_044
044E30 22 DE BE 04 5337*  	ld (cur_filename),hl
044E34 11 0A CB 04 5338*  	ld de,filedata
044E38 01 00 00 01 5339*  	ld bc,65536
044E3C 3E 01       5340*  	ld a,mos_load
044E3E 5B CF       5341*  	RST.LIL 08h
044E40 21 17 02 00 5342*  	ld hl,BUF_20_044
044E44 01 6B 00 00 5343*  	ld bc,107
044E48 11 5B 00 00 5344*  	ld de,91
044E4C DD 21 09 26 5345*  	ld ix,9737
       00          
044E51 CD 59 C0 04 5346*  	call vdu_load_img
044E55 C9          5347*  	ret
044E56             5348*  
044E56             5349*  ld_21_004:
044E56 21 50 5E 04 5350*  	ld hl,F21_004
044E5A 22 DE BE 04 5351*  	ld (cur_filename),hl
044E5E 11 0A CB 04 5352*  	ld de,filedata
044E62 01 00 00 01 5353*  	ld bc,65536
044E66 3E 01       5354*  	ld a,mos_load
044E68 5B CF       5355*  	RST.LIL 08h
044E6A 21 18 02 00 5356*  	ld hl,BUF_21_004
044E6E 01 0B 00 00 5357*  	ld bc,11
044E72 11 0B 00 00 5358*  	ld de,11
044E76 DD 21 79 00 5359*  	ld ix,121
       00          
044E7B CD 59 C0 04 5360*  	call vdu_load_img
044E7F C9          5361*  	ret
044E80             5362*  
044E80             5363*  ld_21_020:
044E80 21 64 5E 04 5364*  	ld hl,F21_020
044E84 22 DE BE 04 5365*  	ld (cur_filename),hl
044E88 11 0A CB 04 5366*  	ld de,filedata
044E8C 01 00 00 01 5367*  	ld bc,65536
044E90 3E 01       5368*  	ld a,mos_load
044E92 5B CF       5369*  	RST.LIL 08h
044E94 21 19 02 00 5370*  	ld hl,BUF_21_020
044E98 01 0E 00 00 5371*  	ld bc,14
044E9C 11 0E 00 00 5372*  	ld de,14
044EA0 DD 21 C4 00 5373*  	ld ix,196
       00          
044EA5 CD 59 C0 04 5374*  	call vdu_load_img
044EA9 C9          5375*  	ret
044EAA             5376*  
044EAA             5377*  ld_21_032:
044EAA 21 78 5E 04 5378*  	ld hl,F21_032
044EAE 22 DE BE 04 5379*  	ld (cur_filename),hl
044EB2 11 0A CB 04 5380*  	ld de,filedata
044EB6 01 00 00 01 5381*  	ld bc,65536
044EBA 3E 01       5382*  	ld a,mos_load
044EBC 5B CF       5383*  	RST.LIL 08h
044EBE 21 1A 02 00 5384*  	ld hl,BUF_21_032
044EC2 01 14 00 00 5385*  	ld bc,20
044EC6 11 16 00 00 5386*  	ld de,22
044ECA DD 21 B8 01 5387*  	ld ix,440
       00          
044ECF CD 59 C0 04 5388*  	call vdu_load_img
044ED3 C9          5389*  	ret
044ED4             5390*  
044ED4             5391*  ld_21_040:
044ED4 21 8C 5E 04 5392*  	ld hl,F21_040
044ED8 22 DE BE 04 5393*  	ld (cur_filename),hl
044EDC 11 0A CB 04 5394*  	ld de,filedata
044EE0 01 00 00 01 5395*  	ld bc,65536
044EE4 3E 01       5396*  	ld a,mos_load
044EE6 5B CF       5397*  	RST.LIL 08h
044EE8 21 1B 02 00 5398*  	ld hl,BUF_21_040
044EEC 01 21 00 00 5399*  	ld bc,33
044EF0 11 24 00 00 5400*  	ld de,36
044EF4 DD 21 A4 04 5401*  	ld ix,1188
       00          
044EF9 CD 59 C0 04 5402*  	call vdu_load_img
044EFD C9          5403*  	ret
044EFE             5404*  
044EFE             5405*  ld_21_044:
044EFE 21 A0 5E 04 5406*  	ld hl,F21_044
044F02 22 DE BE 04 5407*  	ld (cur_filename),hl
044F06 11 0A CB 04 5408*  	ld de,filedata
044F0A 01 00 00 01 5409*  	ld bc,65536
044F0E 3E 01       5410*  	ld a,mos_load
044F10 5B CF       5411*  	RST.LIL 08h
044F12 21 1C 02 00 5412*  	ld hl,BUF_21_044
044F16 01 64 00 00 5413*  	ld bc,100
044F1A 11 1E 00 00 5414*  	ld de,30
044F1E DD 21 B8 0B 5415*  	ld ix,3000
       00          
044F23 CD 59 C0 04 5416*  	call vdu_load_img
044F27 C9          5417*  	ret
044F28             5418*  
044F28             5419*  ld_22_004:
044F28 21 B4 5E 04 5420*  	ld hl,F22_004
044F2C 22 DE BE 04 5421*  	ld (cur_filename),hl
044F30 11 0A CB 04 5422*  	ld de,filedata
044F34 01 00 00 01 5423*  	ld bc,65536
044F38 3E 01       5424*  	ld a,mos_load
044F3A 5B CF       5425*  	RST.LIL 08h
044F3C 21 1D 02 00 5426*  	ld hl,BUF_22_004
044F40 01 11 00 00 5427*  	ld bc,17
044F44 11 0B 00 00 5428*  	ld de,11
044F48 DD 21 BB 00 5429*  	ld ix,187
       00          
044F4D CD 59 C0 04 5430*  	call vdu_load_img
044F51 C9          5431*  	ret
044F52             5432*  
044F52             5433*  ld_22_020:
044F52 21 C8 5E 04 5434*  	ld hl,F22_020
044F56 22 DE BE 04 5435*  	ld (cur_filename),hl
044F5A 11 0A CB 04 5436*  	ld de,filedata
044F5E 01 00 00 01 5437*  	ld bc,65536
044F62 3E 01       5438*  	ld a,mos_load
044F64 5B CF       5439*  	RST.LIL 08h
044F66 21 1E 02 00 5440*  	ld hl,BUF_22_020
044F6A 01 16 00 00 5441*  	ld bc,22
044F6E 11 0E 00 00 5442*  	ld de,14
044F72 DD 21 34 01 5443*  	ld ix,308
       00          
044F77 CD 59 C0 04 5444*  	call vdu_load_img
044F7B C9          5445*  	ret
044F7C             5446*  
044F7C             5447*  ld_22_032:
044F7C 21 DC 5E 04 5448*  	ld hl,F22_032
044F80 22 DE BE 04 5449*  	ld (cur_filename),hl
044F84 11 0A CB 04 5450*  	ld de,filedata
044F88 01 00 00 01 5451*  	ld bc,65536
044F8C 3E 01       5452*  	ld a,mos_load
044F8E 5B CF       5453*  	RST.LIL 08h
044F90 21 1F 02 00 5454*  	ld hl,BUF_22_032
044F94 01 1E 00 00 5455*  	ld bc,30
044F98 11 16 00 00 5456*  	ld de,22
044F9C DD 21 94 02 5457*  	ld ix,660
       00          
044FA1 CD 59 C0 04 5458*  	call vdu_load_img
044FA5 C9          5459*  	ret
044FA6             5460*  
044FA6             5461*  ld_22_040:
044FA6 21 F0 5E 04 5462*  	ld hl,F22_040
044FAA 22 DE BE 04 5463*  	ld (cur_filename),hl
044FAE 11 0A CB 04 5464*  	ld de,filedata
044FB2 01 00 00 01 5465*  	ld bc,65536
044FB6 3E 01       5466*  	ld a,mos_load
044FB8 5B CF       5467*  	RST.LIL 08h
044FBA 21 20 02 00 5468*  	ld hl,BUF_22_040
044FBE 01 33 00 00 5469*  	ld bc,51
044FC2 11 24 00 00 5470*  	ld de,36
044FC6 DD 21 2C 07 5471*  	ld ix,1836
       00          
044FCB CD 59 C0 04 5472*  	call vdu_load_img
044FCF C9          5473*  	ret
044FD0             5474*  
044FD0             5475*  ld_22_044:
044FD0 21 04 5F 04 5476*  	ld hl,F22_044
044FD4 22 DE BE 04 5477*  	ld (cur_filename),hl
044FD8 11 0A CB 04 5478*  	ld de,filedata
044FDC 01 00 00 01 5479*  	ld bc,65536
044FE0 3E 01       5480*  	ld a,mos_load
044FE2 5B CF       5481*  	RST.LIL 08h
044FE4 21 21 02 00 5482*  	ld hl,BUF_22_044
044FE8 01 96 00 00 5483*  	ld bc,150
044FEC 11 1E 00 00 5484*  	ld de,30
044FF0 DD 21 94 11 5485*  	ld ix,4500
       00          
044FF5 CD 59 C0 04 5486*  	call vdu_load_img
044FF9 C9          5487*  	ret
044FFA             5488*  
044FFA             5489*  ld_23_004:
044FFA 21 18 5F 04 5490*  	ld hl,F23_004
044FFE 22 DE BE 04 5491*  	ld (cur_filename),hl
045002 11 0A CB 04 5492*  	ld de,filedata
045006 01 00 00 01 5493*  	ld bc,65536
04500A 3E 01       5494*  	ld a,mos_load
04500C 5B CF       5495*  	RST.LIL 08h
04500E 21 22 02 00 5496*  	ld hl,BUF_23_004
045012 01 0E 00 00 5497*  	ld bc,14
045016 11 06 00 00 5498*  	ld de,6
04501A DD 21 54 00 5499*  	ld ix,84
       00          
04501F CD 59 C0 04 5500*  	call vdu_load_img
045023 C9          5501*  	ret
045024             5502*  
045024             5503*  ld_23_020:
045024 21 2C 5F 04 5504*  	ld hl,F23_020
045028 22 DE BE 04 5505*  	ld (cur_filename),hl
04502C 11 0A CB 04 5506*  	ld de,filedata
045030 01 00 00 01 5507*  	ld bc,65536
045034 3E 01       5508*  	ld a,mos_load
045036 5B CF       5509*  	RST.LIL 08h
045038 21 23 02 00 5510*  	ld hl,BUF_23_020
04503C 01 11 00 00 5511*  	ld bc,17
045040 11 08 00 00 5512*  	ld de,8
045044 DD 21 88 00 5513*  	ld ix,136
       00          
045049 CD 59 C0 04 5514*  	call vdu_load_img
04504D C9          5515*  	ret
04504E             5516*  
04504E             5517*  ld_23_032:
04504E 21 40 5F 04 5518*  	ld hl,F23_032
045052 22 DE BE 04 5519*  	ld (cur_filename),hl
045056 11 0A CB 04 5520*  	ld de,filedata
04505A 01 00 00 01 5521*  	ld bc,65536
04505E 3E 01       5522*  	ld a,mos_load
045060 5B CF       5523*  	RST.LIL 08h
045062 21 24 02 00 5524*  	ld hl,BUF_23_032
045066 01 19 00 00 5525*  	ld bc,25
04506A 11 0B 00 00 5526*  	ld de,11
04506E DD 21 13 01 5527*  	ld ix,275
       00          
045073 CD 59 C0 04 5528*  	call vdu_load_img
045077 C9          5529*  	ret
045078             5530*  
045078             5531*  ld_23_040:
045078 21 54 5F 04 5532*  	ld hl,F23_040
04507C 22 DE BE 04 5533*  	ld (cur_filename),hl
045080 11 0A CB 04 5534*  	ld de,filedata
045084 01 00 00 01 5535*  	ld bc,65536
045088 3E 01       5536*  	ld a,mos_load
04508A 5B CF       5537*  	RST.LIL 08h
04508C 21 25 02 00 5538*  	ld hl,BUF_23_040
045090 01 28 00 00 5539*  	ld bc,40
045094 11 12 00 00 5540*  	ld de,18
045098 DD 21 D0 02 5541*  	ld ix,720
       00          
04509D CD 59 C0 04 5542*  	call vdu_load_img
0450A1 C9          5543*  	ret
0450A2             5544*  
0450A2             5545*  ld_23_044:
0450A2 21 68 5F 04 5546*  	ld hl,F23_044
0450A6 22 DE BE 04 5547*  	ld (cur_filename),hl
0450AA 11 0A CB 04 5548*  	ld de,filedata
0450AE 01 00 00 01 5549*  	ld bc,65536
0450B2 3E 01       5550*  	ld a,mos_load
0450B4 5B CF       5551*  	RST.LIL 08h
0450B6 21 26 02 00 5552*  	ld hl,BUF_23_044
0450BA 01 01 00 00 5553*  	ld bc,1
0450BE 11 01 00 00 5554*  	ld de,1
0450C2 DD 21 01 00 5555*  	ld ix,1
       00          
0450C7 CD 59 C0 04 5556*  	call vdu_load_img
0450CB C9          5557*  	ret
0450CC             5558*  
0450CC             5559*  ld_24_004:
0450CC 21 7C 5F 04 5560*  	ld hl,F24_004
0450D0 22 DE BE 04 5561*  	ld (cur_filename),hl
0450D4 11 0A CB 04 5562*  	ld de,filedata
0450D8 01 00 00 01 5563*  	ld bc,65536
0450DC 3E 01       5564*  	ld a,mos_load
0450DE 5B CF       5565*  	RST.LIL 08h
0450E0 21 27 02 00 5566*  	ld hl,BUF_24_004
0450E4 01 0B 00 00 5567*  	ld bc,11
0450E8 11 0B 00 00 5568*  	ld de,11
0450EC DD 21 79 00 5569*  	ld ix,121
       00          
0450F1 CD 59 C0 04 5570*  	call vdu_load_img
0450F5 C9          5571*  	ret
0450F6             5572*  
0450F6             5573*  ld_24_020:
0450F6 21 90 5F 04 5574*  	ld hl,F24_020
0450FA 22 DE BE 04 5575*  	ld (cur_filename),hl
0450FE 11 0A CB 04 5576*  	ld de,filedata
045102 01 00 00 01 5577*  	ld bc,65536
045106 3E 01       5578*  	ld a,mos_load
045108 5B CF       5579*  	RST.LIL 08h
04510A 21 28 02 00 5580*  	ld hl,BUF_24_020
04510E 01 0E 00 00 5581*  	ld bc,14
045112 11 0E 00 00 5582*  	ld de,14
045116 DD 21 C4 00 5583*  	ld ix,196
       00          
04511B CD 59 C0 04 5584*  	call vdu_load_img
04511F C9          5585*  	ret
045120             5586*  
045120             5587*  ld_24_032:
045120 21 A4 5F 04 5588*  	ld hl,F24_032
045124 22 DE BE 04 5589*  	ld (cur_filename),hl
045128 11 0A CB 04 5590*  	ld de,filedata
04512C 01 00 00 01 5591*  	ld bc,65536
045130 3E 01       5592*  	ld a,mos_load
045132 5B CF       5593*  	RST.LIL 08h
045134 21 29 02 00 5594*  	ld hl,BUF_24_032
045138 01 14 00 00 5595*  	ld bc,20
04513C 11 16 00 00 5596*  	ld de,22
045140 DD 21 B8 01 5597*  	ld ix,440
       00          
045145 CD 59 C0 04 5598*  	call vdu_load_img
045149 C9          5599*  	ret
04514A             5600*  
04514A             5601*  ld_24_040:
04514A 21 B8 5F 04 5602*  	ld hl,F24_040
04514E 22 DE BE 04 5603*  	ld (cur_filename),hl
045152 11 0A CB 04 5604*  	ld de,filedata
045156 01 00 00 01 5605*  	ld bc,65536
04515A 3E 01       5606*  	ld a,mos_load
04515C 5B CF       5607*  	RST.LIL 08h
04515E 21 2A 02 00 5608*  	ld hl,BUF_24_040
045162 01 21 00 00 5609*  	ld bc,33
045166 11 24 00 00 5610*  	ld de,36
04516A DD 21 A4 04 5611*  	ld ix,1188
       00          
04516F CD 59 C0 04 5612*  	call vdu_load_img
045173 C9          5613*  	ret
045174             5614*  
045174             5615*  ld_24_044:
045174 21 CC 5F 04 5616*  	ld hl,F24_044
045178 22 DE BE 04 5617*  	ld (cur_filename),hl
04517C 11 0A CB 04 5618*  	ld de,filedata
045180 01 00 00 01 5619*  	ld bc,65536
045184 3E 01       5620*  	ld a,mos_load
045186 5B CF       5621*  	RST.LIL 08h
045188 21 2B 02 00 5622*  	ld hl,BUF_24_044
04518C 01 64 00 00 5623*  	ld bc,100
045190 11 1E 00 00 5624*  	ld de,30
045194 DD 21 B8 0B 5625*  	ld ix,3000
       00          
045199 CD 59 C0 04 5626*  	call vdu_load_img
04519D C9          5627*  	ret
04519E             5628*  
04519E             5629*  ld_40_004:
04519E 21 E0 5F 04 5630*  	ld hl,F40_004
0451A2 22 DE BE 04 5631*  	ld (cur_filename),hl
0451A6 11 0A CB 04 5632*  	ld de,filedata
0451AA 01 00 00 01 5633*  	ld bc,65536
0451AE 3E 01       5634*  	ld a,mos_load
0451B0 5B CF       5635*  	RST.LIL 08h
0451B2 21 2C 02 00 5636*  	ld hl,BUF_40_004
0451B6 01 0E 00 00 5637*  	ld bc,14
0451BA 11 07 00 00 5638*  	ld de,7
0451BE DD 21 62 00 5639*  	ld ix,98
       00          
0451C3 CD 59 C0 04 5640*  	call vdu_load_img
0451C7 C9          5641*  	ret
0451C8             5642*  
0451C8             5643*  ld_40_020:
0451C8 21 F4 5F 04 5644*  	ld hl,F40_020
0451CC 22 DE BE 04 5645*  	ld (cur_filename),hl
0451D0 11 0A CB 04 5646*  	ld de,filedata
0451D4 01 00 00 01 5647*  	ld bc,65536
0451D8 3E 01       5648*  	ld a,mos_load
0451DA 5B CF       5649*  	RST.LIL 08h
0451DC 21 2D 02 00 5650*  	ld hl,BUF_40_020
0451E0 01 12 00 00 5651*  	ld bc,18
0451E4 11 0A 00 00 5652*  	ld de,10
0451E8 DD 21 B4 00 5653*  	ld ix,180
       00          
0451ED CD 59 C0 04 5654*  	call vdu_load_img
0451F1 C9          5655*  	ret
0451F2             5656*  
0451F2             5657*  ld_40_032:
0451F2 21 08 60 04 5658*  	ld hl,F40_032
0451F6 22 DE BE 04 5659*  	ld (cur_filename),hl
0451FA 11 0A CB 04 5660*  	ld de,filedata
0451FE 01 00 00 01 5661*  	ld bc,65536
045202 3E 01       5662*  	ld a,mos_load
045204 5B CF       5663*  	RST.LIL 08h
045206 21 2E 02 00 5664*  	ld hl,BUF_40_032
04520A 01 1A 00 00 5665*  	ld bc,26
04520E 11 0D 00 00 5666*  	ld de,13
045212 DD 21 52 01 5667*  	ld ix,338
       00          
045217 CD 59 C0 04 5668*  	call vdu_load_img
04521B C9          5669*  	ret
04521C             5670*  
04521C             5671*  ld_40_040:
04521C 21 1C 60 04 5672*  	ld hl,F40_040
045220 22 DE BE 04 5673*  	ld (cur_filename),hl
045224 11 0A CB 04 5674*  	ld de,filedata
045228 01 00 00 01 5675*  	ld bc,65536
04522C 3E 01       5676*  	ld a,mos_load
04522E 5B CF       5677*  	RST.LIL 08h
045230 21 2F 02 00 5678*  	ld hl,BUF_40_040
045234 01 2B 00 00 5679*  	ld bc,43
045238 11 17 00 00 5680*  	ld de,23
04523C DD 21 DD 03 5681*  	ld ix,989
       00          
045241 CD 59 C0 04 5682*  	call vdu_load_img
045245 C9          5683*  	ret
045246             5684*  
045246             5685*  ld_40_044:
045246 21 30 60 04 5686*  	ld hl,F40_044
04524A 22 DE BE 04 5687*  	ld (cur_filename),hl
04524E 11 0A CB 04 5688*  	ld de,filedata
045252 01 00 00 01 5689*  	ld bc,65536
045256 3E 01       5690*  	ld a,mos_load
045258 5B CF       5691*  	RST.LIL 08h
04525A 21 30 02 00 5692*  	ld hl,BUF_40_044
04525E 01 01 00 00 5693*  	ld bc,1
045262 11 01 00 00 5694*  	ld de,1
045266 DD 21 01 00 5695*  	ld ix,1
       00          
04526B CD 59 C0 04 5696*  	call vdu_load_img
04526F C9          5697*  	ret
045270             5698*  
045270             5699*  ld_41_004:
045270 21 44 60 04 5700*  	ld hl,F41_004
045274 22 DE BE 04 5701*  	ld (cur_filename),hl
045278 11 0A CB 04 5702*  	ld de,filedata
04527C 01 00 00 01 5703*  	ld bc,65536
045280 3E 01       5704*  	ld a,mos_load
045282 5B CF       5705*  	RST.LIL 08h
045284 21 31 02 00 5706*  	ld hl,BUF_41_004
045288 01 0B 00 00 5707*  	ld bc,11
04528C 11 0B 00 00 5708*  	ld de,11
045290 DD 21 79 00 5709*  	ld ix,121
       00          
045295 CD 59 C0 04 5710*  	call vdu_load_img
045299 C9          5711*  	ret
04529A             5712*  
04529A             5713*  ld_41_020:
04529A 21 58 60 04 5714*  	ld hl,F41_020
04529E 22 DE BE 04 5715*  	ld (cur_filename),hl
0452A2 11 0A CB 04 5716*  	ld de,filedata
0452A6 01 00 00 01 5717*  	ld bc,65536
0452AA 3E 01       5718*  	ld a,mos_load
0452AC 5B CF       5719*  	RST.LIL 08h
0452AE 21 32 02 00 5720*  	ld hl,BUF_41_020
0452B2 01 10 00 00 5721*  	ld bc,16
0452B6 11 0E 00 00 5722*  	ld de,14
0452BA DD 21 E0 00 5723*  	ld ix,224
       00          
0452BF CD 59 C0 04 5724*  	call vdu_load_img
0452C3 C9          5725*  	ret
0452C4             5726*  
0452C4             5727*  ld_41_032:
0452C4 21 6C 60 04 5728*  	ld hl,F41_032
0452C8 22 DE BE 04 5729*  	ld (cur_filename),hl
0452CC 11 0A CB 04 5730*  	ld de,filedata
0452D0 01 00 00 01 5731*  	ld bc,65536
0452D4 3E 01       5732*  	ld a,mos_load
0452D6 5B CF       5733*  	RST.LIL 08h
0452D8 21 33 02 00 5734*  	ld hl,BUF_41_032
0452DC 01 16 00 00 5735*  	ld bc,22
0452E0 11 14 00 00 5736*  	ld de,20
0452E4 DD 21 B8 01 5737*  	ld ix,440
       00          
0452E9 CD 59 C0 04 5738*  	call vdu_load_img
0452ED C9          5739*  	ret
0452EE             5740*  
0452EE             5741*  ld_41_040:
0452EE 21 80 60 04 5742*  	ld hl,F41_040
0452F2 22 DE BE 04 5743*  	ld (cur_filename),hl
0452F6 11 0A CB 04 5744*  	ld de,filedata
0452FA 01 00 00 01 5745*  	ld bc,65536
0452FE 3E 01       5746*  	ld a,mos_load
045300 5B CF       5747*  	RST.LIL 08h
045302 21 34 02 00 5748*  	ld hl,BUF_41_040
045306 01 25 00 00 5749*  	ld bc,37
04530A 11 22 00 00 5750*  	ld de,34
04530E DD 21 EA 04 5751*  	ld ix,1258
       00          
045313 CD 59 C0 04 5752*  	call vdu_load_img
045317 C9          5753*  	ret
045318             5754*  
045318             5755*  ld_41_044:
045318 21 94 60 04 5756*  	ld hl,F41_044
04531C 22 DE BE 04 5757*  	ld (cur_filename),hl
045320 11 0A CB 04 5758*  	ld de,filedata
045324 01 00 00 01 5759*  	ld bc,65536
045328 3E 01       5760*  	ld a,mos_load
04532A 5B CF       5761*  	RST.LIL 08h
04532C 21 35 02 00 5762*  	ld hl,BUF_41_044
045330 01 23 00 00 5763*  	ld bc,35
045334 11 19 00 00 5764*  	ld de,25
045338 DD 21 6B 03 5765*  	ld ix,875
       00          
04533D CD 59 C0 04 5766*  	call vdu_load_img
045341 C9          5767*  	ret
045342             5768*  
045342             5769*  ld_42_004:
045342 21 A8 60 04 5770*  	ld hl,F42_004
045346 22 DE BE 04 5771*  	ld (cur_filename),hl
04534A 11 0A CB 04 5772*  	ld de,filedata
04534E 01 00 00 01 5773*  	ld bc,65536
045352 3E 01       5774*  	ld a,mos_load
045354 5B CF       5775*  	RST.LIL 08h
045356 21 36 02 00 5776*  	ld hl,BUF_42_004
04535A 01 0A 00 00 5777*  	ld bc,10
04535E 11 09 00 00 5778*  	ld de,9
045362 DD 21 5A 00 5779*  	ld ix,90
       00          
045367 CD 59 C0 04 5780*  	call vdu_load_img
04536B C9          5781*  	ret
04536C             5782*  
04536C             5783*  ld_42_020:
04536C 21 BC 60 04 5784*  	ld hl,F42_020
045370 22 DE BE 04 5785*  	ld (cur_filename),hl
045374 11 0A CB 04 5786*  	ld de,filedata
045378 01 00 00 01 5787*  	ld bc,65536
04537C 3E 01       5788*  	ld a,mos_load
04537E 5B CF       5789*  	RST.LIL 08h
045380 21 37 02 00 5790*  	ld hl,BUF_42_020
045384 01 0E 00 00 5791*  	ld bc,14
045388 11 0B 00 00 5792*  	ld de,11
04538C DD 21 9A 00 5793*  	ld ix,154
       00          
045391 CD 59 C0 04 5794*  	call vdu_load_img
045395 C9          5795*  	ret
045396             5796*  
045396             5797*  ld_42_032:
045396 21 D0 60 04 5798*  	ld hl,F42_032
04539A 22 DE BE 04 5799*  	ld (cur_filename),hl
04539E 11 0A CB 04 5800*  	ld de,filedata
0453A2 01 00 00 01 5801*  	ld bc,65536
0453A6 3E 01       5802*  	ld a,mos_load
0453A8 5B CF       5803*  	RST.LIL 08h
0453AA 21 38 02 00 5804*  	ld hl,BUF_42_032
0453AE 01 13 00 00 5805*  	ld bc,19
0453B2 11 10 00 00 5806*  	ld de,16
0453B6 DD 21 30 01 5807*  	ld ix,304
       00          
0453BB CD 59 C0 04 5808*  	call vdu_load_img
0453BF C9          5809*  	ret
0453C0             5810*  
0453C0             5811*  ld_42_040:
0453C0 21 E4 60 04 5812*  	ld hl,F42_040
0453C4 22 DE BE 04 5813*  	ld (cur_filename),hl
0453C8 11 0A CB 04 5814*  	ld de,filedata
0453CC 01 00 00 01 5815*  	ld bc,65536
0453D0 3E 01       5816*  	ld a,mos_load
0453D2 5B CF       5817*  	RST.LIL 08h
0453D4 21 39 02 00 5818*  	ld hl,BUF_42_040
0453D8 01 20 00 00 5819*  	ld bc,32
0453DC 11 1B 00 00 5820*  	ld de,27
0453E0 DD 21 60 03 5821*  	ld ix,864
       00          
0453E5 CD 59 C0 04 5822*  	call vdu_load_img
0453E9 C9          5823*  	ret
0453EA             5824*  
0453EA             5825*  ld_42_044:
0453EA 21 F8 60 04 5826*  	ld hl,F42_044
0453EE 22 DE BE 04 5827*  	ld (cur_filename),hl
0453F2 11 0A CB 04 5828*  	ld de,filedata
0453F6 01 00 00 01 5829*  	ld bc,65536
0453FA 3E 01       5830*  	ld a,mos_load
0453FC 5B CF       5831*  	RST.LIL 08h
0453FE 21 3A 02 00 5832*  	ld hl,BUF_42_044
045402 01 3F 00 00 5833*  	ld bc,63
045406 11 04 00 00 5834*  	ld de,4
04540A DD 21 FC 00 5835*  	ld ix,252
       00          
04540F CD 59 C0 04 5836*  	call vdu_load_img
045413 C9          5837*  	ret
045414             5838*  
045414             5839*  ld_43_004:
045414 21 0C 61 04 5840*  	ld hl,F43_004
045418 22 DE BE 04 5841*  	ld (cur_filename),hl
04541C 11 0A CB 04 5842*  	ld de,filedata
045420 01 00 00 01 5843*  	ld bc,65536
045424 3E 01       5844*  	ld a,mos_load
045426 5B CF       5845*  	RST.LIL 08h
045428 21 3B 02 00 5846*  	ld hl,BUF_43_004
04542C 01 0B 00 00 5847*  	ld bc,11
045430 11 04 00 00 5848*  	ld de,4
045434 DD 21 2C 00 5849*  	ld ix,44
       00          
045439 CD 59 C0 04 5850*  	call vdu_load_img
04543D C9          5851*  	ret
04543E             5852*  
04543E             5853*  ld_43_020:
04543E 21 20 61 04 5854*  	ld hl,F43_020
045442 22 DE BE 04 5855*  	ld (cur_filename),hl
045446 11 0A CB 04 5856*  	ld de,filedata
04544A 01 00 00 01 5857*  	ld bc,65536
04544E 3E 01       5858*  	ld a,mos_load
045450 5B CF       5859*  	RST.LIL 08h
045452 21 3C 02 00 5860*  	ld hl,BUF_43_020
045456 01 0F 00 00 5861*  	ld bc,15
04545A 11 04 00 00 5862*  	ld de,4
04545E DD 21 3C 00 5863*  	ld ix,60
       00          
045463 CD 59 C0 04 5864*  	call vdu_load_img
045467 C9          5865*  	ret
045468             5866*  
045468             5867*  ld_43_032:
045468 21 34 61 04 5868*  	ld hl,F43_032
04546C 22 DE BE 04 5869*  	ld (cur_filename),hl
045470 11 0A CB 04 5870*  	ld de,filedata
045474 01 00 00 01 5871*  	ld bc,65536
045478 3E 01       5872*  	ld a,mos_load
04547A 5B CF       5873*  	RST.LIL 08h
04547C 21 3D 02 00 5874*  	ld hl,BUF_43_032
045480 01 15 00 00 5875*  	ld bc,21
045484 11 07 00 00 5876*  	ld de,7
045488 DD 21 93 00 5877*  	ld ix,147
       00          
04548D CD 59 C0 04 5878*  	call vdu_load_img
045491 C9          5879*  	ret
045492             5880*  
045492             5881*  ld_43_040:
045492 21 48 61 04 5882*  	ld hl,F43_040
045496 22 DE BE 04 5883*  	ld (cur_filename),hl
04549A 11 0A CB 04 5884*  	ld de,filedata
04549E 01 00 00 01 5885*  	ld bc,65536
0454A2 3E 01       5886*  	ld a,mos_load
0454A4 5B CF       5887*  	RST.LIL 08h
0454A6 21 3E 02 00 5888*  	ld hl,BUF_43_040
0454AA 01 23 00 00 5889*  	ld bc,35
0454AE 11 0D 00 00 5890*  	ld de,13
0454B2 DD 21 C7 01 5891*  	ld ix,455
       00          
0454B7 CD 59 C0 04 5892*  	call vdu_load_img
0454BB C9          5893*  	ret
0454BC             5894*  
0454BC             5895*  ld_43_044:
0454BC 21 5C 61 04 5896*  	ld hl,F43_044
0454C0 22 DE BE 04 5897*  	ld (cur_filename),hl
0454C4 11 0A CB 04 5898*  	ld de,filedata
0454C8 01 00 00 01 5899*  	ld bc,65536
0454CC 3E 01       5900*  	ld a,mos_load
0454CE 5B CF       5901*  	RST.LIL 08h
0454D0 21 3F 02 00 5902*  	ld hl,BUF_43_044
0454D4 01 01 00 00 5903*  	ld bc,1
0454D8 11 01 00 00 5904*  	ld de,1
0454DC DD 21 01 00 5905*  	ld ix,1
       00          
0454E1 CD 59 C0 04 5906*  	call vdu_load_img
0454E5 C9          5907*  	ret
0454E6             5908*  
0454E6             5909*  ld_44_004:
0454E6 21 70 61 04 5910*  	ld hl,F44_004
0454EA 22 DE BE 04 5911*  	ld (cur_filename),hl
0454EE 11 0A CB 04 5912*  	ld de,filedata
0454F2 01 00 00 01 5913*  	ld bc,65536
0454F6 3E 01       5914*  	ld a,mos_load
0454F8 5B CF       5915*  	RST.LIL 08h
0454FA 21 40 02 00 5916*  	ld hl,BUF_44_004
0454FE 01 05 00 00 5917*  	ld bc,5
045502 11 04 00 00 5918*  	ld de,4
045506 DD 21 14 00 5919*  	ld ix,20
       00          
04550B CD 59 C0 04 5920*  	call vdu_load_img
04550F C9          5921*  	ret
045510             5922*  
045510             5923*  ld_44_020:
045510 21 84 61 04 5924*  	ld hl,F44_020
045514 22 DE BE 04 5925*  	ld (cur_filename),hl
045518 11 0A CB 04 5926*  	ld de,filedata
04551C 01 00 00 01 5927*  	ld bc,65536
045520 3E 01       5928*  	ld a,mos_load
045522 5B CF       5929*  	RST.LIL 08h
045524 21 41 02 00 5930*  	ld hl,BUF_44_020
045528 01 08 00 00 5931*  	ld bc,8
04552C 11 06 00 00 5932*  	ld de,6
045530 DD 21 30 00 5933*  	ld ix,48
       00          
045535 CD 59 C0 04 5934*  	call vdu_load_img
045539 C9          5935*  	ret
04553A             5936*  
04553A             5937*  ld_44_032:
04553A 21 98 61 04 5938*  	ld hl,F44_032
04553E 22 DE BE 04 5939*  	ld (cur_filename),hl
045542 11 0A CB 04 5940*  	ld de,filedata
045546 01 00 00 01 5941*  	ld bc,65536
04554A 3E 01       5942*  	ld a,mos_load
04554C 5B CF       5943*  	RST.LIL 08h
04554E 21 42 02 00 5944*  	ld hl,BUF_44_032
045552 01 0D 00 00 5945*  	ld bc,13
045556 11 0A 00 00 5946*  	ld de,10
04555A DD 21 82 00 5947*  	ld ix,130
       00          
04555F CD 59 C0 04 5948*  	call vdu_load_img
045563 C9          5949*  	ret
045564             5950*  
045564             5951*  ld_44_040:
045564 21 AC 61 04 5952*  	ld hl,F44_040
045568 22 DE BE 04 5953*  	ld (cur_filename),hl
04556C 11 0A CB 04 5954*  	ld de,filedata
045570 01 00 00 01 5955*  	ld bc,65536
045574 3E 01       5956*  	ld a,mos_load
045576 5B CF       5957*  	RST.LIL 08h
045578 21 43 02 00 5958*  	ld hl,BUF_44_040
04557C 01 14 00 00 5959*  	ld bc,20
045580 11 0F 00 00 5960*  	ld de,15
045584 DD 21 2C 01 5961*  	ld ix,300
       00          
045589 CD 59 C0 04 5962*  	call vdu_load_img
04558D C9          5963*  	ret
04558E             5964*  
04558E             5965*  ld_44_044:
04558E 21 C0 61 04 5966*  	ld hl,F44_044
045592 22 DE BE 04 5967*  	ld (cur_filename),hl
045596 11 0A CB 04 5968*  	ld de,filedata
04559A 01 00 00 01 5969*  	ld bc,65536
04559E 3E 01       5970*  	ld a,mos_load
0455A0 5B CF       5971*  	RST.LIL 08h
0455A2 21 44 02 00 5972*  	ld hl,BUF_44_044
0455A6 01 01 00 00 5973*  	ld bc,1
0455AA 11 01 00 00 5974*  	ld de,1
0455AE DD 21 01 00 5975*  	ld ix,1
       00          
0455B3 CD 59 C0 04 5976*  	call vdu_load_img
0455B7 C9          5977*  	ret
0455B8             5978*  
0455B8             5979*  ld_45_004:
0455B8 21 D4 61 04 5980*  	ld hl,F45_004
0455BC 22 DE BE 04 5981*  	ld (cur_filename),hl
0455C0 11 0A CB 04 5982*  	ld de,filedata
0455C4 01 00 00 01 5983*  	ld bc,65536
0455C8 3E 01       5984*  	ld a,mos_load
0455CA 5B CF       5985*  	RST.LIL 08h
0455CC 21 45 02 00 5986*  	ld hl,BUF_45_004
0455D0 01 10 00 00 5987*  	ld bc,16
0455D4 11 0A 00 00 5988*  	ld de,10
0455D8 DD 21 A0 00 5989*  	ld ix,160
       00          
0455DD CD 59 C0 04 5990*  	call vdu_load_img
0455E1 C9          5991*  	ret
0455E2             5992*  
0455E2             5993*  ld_45_020:
0455E2 21 E8 61 04 5994*  	ld hl,F45_020
0455E6 22 DE BE 04 5995*  	ld (cur_filename),hl
0455EA 11 0A CB 04 5996*  	ld de,filedata
0455EE 01 00 00 01 5997*  	ld bc,65536
0455F2 3E 01       5998*  	ld a,mos_load
0455F4 5B CF       5999*  	RST.LIL 08h
0455F6 21 46 02 00 6000*  	ld hl,BUF_45_020
0455FA 01 14 00 00 6001*  	ld bc,20
0455FE 11 0D 00 00 6002*  	ld de,13
045602 DD 21 04 01 6003*  	ld ix,260
       00          
045607 CD 59 C0 04 6004*  	call vdu_load_img
04560B C9          6005*  	ret
04560C             6006*  
04560C             6007*  ld_45_032:
04560C 21 FC 61 04 6008*  	ld hl,F45_032
045610 22 DE BE 04 6009*  	ld (cur_filename),hl
045614 11 0A CB 04 6010*  	ld de,filedata
045618 01 00 00 01 6011*  	ld bc,65536
04561C 3E 01       6012*  	ld a,mos_load
04561E 5B CF       6013*  	RST.LIL 08h
045620 21 47 02 00 6014*  	ld hl,BUF_45_032
045624 01 1D 00 00 6015*  	ld bc,29
045628 11 12 00 00 6016*  	ld de,18
04562C DD 21 0A 02 6017*  	ld ix,522
       00          
045631 CD 59 C0 04 6018*  	call vdu_load_img
045635 C9          6019*  	ret
045636             6020*  
045636             6021*  ld_45_040:
045636 21 10 62 04 6022*  	ld hl,F45_040
04563A 22 DE BE 04 6023*  	ld (cur_filename),hl
04563E 11 0A CB 04 6024*  	ld de,filedata
045642 01 00 00 01 6025*  	ld bc,65536
045646 3E 01       6026*  	ld a,mos_load
045648 5B CF       6027*  	RST.LIL 08h
04564A 21 48 02 00 6028*  	ld hl,BUF_45_040
04564E 01 30 00 00 6029*  	ld bc,48
045652 11 21 00 00 6030*  	ld de,33
045656 DD 21 30 06 6031*  	ld ix,1584
       00          
04565B CD 59 C0 04 6032*  	call vdu_load_img
04565F C9          6033*  	ret
045660             6034*  
045660             6035*  ld_45_044:
045660 21 24 62 04 6036*  	ld hl,F45_044
045664 22 DE BE 04 6037*  	ld (cur_filename),hl
045668 11 0A CB 04 6038*  	ld de,filedata
04566C 01 00 00 01 6039*  	ld bc,65536
045670 3E 01       6040*  	ld a,mos_load
045672 5B CF       6041*  	RST.LIL 08h
045674 21 49 02 00 6042*  	ld hl,BUF_45_044
045678 01 75 00 00 6043*  	ld bc,117
04567C 11 13 00 00 6044*  	ld de,19
045680 DD 21 AF 08 6045*  	ld ix,2223
       00          
045685 CD 59 C0 04 6046*  	call vdu_load_img
045689 C9          6047*  	ret
04568A             6048*  
04568A             6049*  ld_46_004:
04568A 21 38 62 04 6050*  	ld hl,F46_004
04568E 22 DE BE 04 6051*  	ld (cur_filename),hl
045692 11 0A CB 04 6052*  	ld de,filedata
045696 01 00 00 01 6053*  	ld bc,65536
04569A 3E 01       6054*  	ld a,mos_load
04569C 5B CF       6055*  	RST.LIL 08h
04569E 21 4A 02 00 6056*  	ld hl,BUF_46_004
0456A2 01 10 00 00 6057*  	ld bc,16
0456A6 11 08 00 00 6058*  	ld de,8
0456AA DD 21 80 00 6059*  	ld ix,128
       00          
0456AF CD 59 C0 04 6060*  	call vdu_load_img
0456B3 C9          6061*  	ret
0456B4             6062*  
0456B4             6063*  ld_46_020:
0456B4 21 4C 62 04 6064*  	ld hl,F46_020
0456B8 22 DE BE 04 6065*  	ld (cur_filename),hl
0456BC 11 0A CB 04 6066*  	ld de,filedata
0456C0 01 00 00 01 6067*  	ld bc,65536
0456C4 3E 01       6068*  	ld a,mos_load
0456C6 5B CF       6069*  	RST.LIL 08h
0456C8 21 4B 02 00 6070*  	ld hl,BUF_46_020
0456CC 01 14 00 00 6071*  	ld bc,20
0456D0 11 0B 00 00 6072*  	ld de,11
0456D4 DD 21 DC 00 6073*  	ld ix,220
       00          
0456D9 CD 59 C0 04 6074*  	call vdu_load_img
0456DD C9          6075*  	ret
0456DE             6076*  
0456DE             6077*  ld_46_032:
0456DE 21 60 62 04 6078*  	ld hl,F46_032
0456E2 22 DE BE 04 6079*  	ld (cur_filename),hl
0456E6 11 0A CB 04 6080*  	ld de,filedata
0456EA 01 00 00 01 6081*  	ld bc,65536
0456EE 3E 01       6082*  	ld a,mos_load
0456F0 5B CF       6083*  	RST.LIL 08h
0456F2 21 4C 02 00 6084*  	ld hl,BUF_46_032
0456F6 01 1D 00 00 6085*  	ld bc,29
0456FA 11 0F 00 00 6086*  	ld de,15
0456FE DD 21 B3 01 6087*  	ld ix,435
       00          
045703 CD 59 C0 04 6088*  	call vdu_load_img
045707 C9          6089*  	ret
045708             6090*  
045708             6091*  ld_46_040:
045708 21 74 62 04 6092*  	ld hl,F46_040
04570C 22 DE BE 04 6093*  	ld (cur_filename),hl
045710 11 0A CB 04 6094*  	ld de,filedata
045714 01 00 00 01 6095*  	ld bc,65536
045718 3E 01       6096*  	ld a,mos_load
04571A 5B CF       6097*  	RST.LIL 08h
04571C 21 4D 02 00 6098*  	ld hl,BUF_46_040
045720 01 30 00 00 6099*  	ld bc,48
045724 11 1B 00 00 6100*  	ld de,27
045728 DD 21 10 05 6101*  	ld ix,1296
       00          
04572D CD 59 C0 04 6102*  	call vdu_load_img
045731 C9          6103*  	ret
045732             6104*  
045732             6105*  ld_46_044:
045732 21 88 62 04 6106*  	ld hl,F46_044
045736 22 DE BE 04 6107*  	ld (cur_filename),hl
04573A 11 0A CB 04 6108*  	ld de,filedata
04573E 01 00 00 01 6109*  	ld bc,65536
045742 3E 01       6110*  	ld a,mos_load
045744 5B CF       6111*  	RST.LIL 08h
045746 21 4E 02 00 6112*  	ld hl,BUF_46_044
04574A 01 51 00 00 6113*  	ld bc,81
04574E 11 01 00 00 6114*  	ld de,1
045752 DD 21 51 00 6115*  	ld ix,81
       00          
045757 CD 59 C0 04 6116*  	call vdu_load_img
04575B C9          6117*  	ret
04575C             6118*  
04575C             6119*  ld_47_004:
04575C 21 9C 62 04 6120*  	ld hl,F47_004
045760 22 DE BE 04 6121*  	ld (cur_filename),hl
045764 11 0A CB 04 6122*  	ld de,filedata
045768 01 00 00 01 6123*  	ld bc,65536
04576C 3E 01       6124*  	ld a,mos_load
04576E 5B CF       6125*  	RST.LIL 08h
045770 21 4F 02 00 6126*  	ld hl,BUF_47_004
045774 01 10 00 00 6127*  	ld bc,16
045778 11 09 00 00 6128*  	ld de,9
04577C DD 21 90 00 6129*  	ld ix,144
       00          
045781 CD 59 C0 04 6130*  	call vdu_load_img
045785 C9          6131*  	ret
045786             6132*  
045786             6133*  ld_47_020:
045786 21 B0 62 04 6134*  	ld hl,F47_020
04578A 22 DE BE 04 6135*  	ld (cur_filename),hl
04578E 11 0A CB 04 6136*  	ld de,filedata
045792 01 00 00 01 6137*  	ld bc,65536
045796 3E 01       6138*  	ld a,mos_load
045798 5B CF       6139*  	RST.LIL 08h
04579A 21 50 02 00 6140*  	ld hl,BUF_47_020
04579E 01 14 00 00 6141*  	ld bc,20
0457A2 11 0B 00 00 6142*  	ld de,11
0457A6 DD 21 DC 00 6143*  	ld ix,220
       00          
0457AB CD 59 C0 04 6144*  	call vdu_load_img
0457AF C9          6145*  	ret
0457B0             6146*  
0457B0             6147*  ld_47_032:
0457B0 21 C4 62 04 6148*  	ld hl,F47_032
0457B4 22 DE BE 04 6149*  	ld (cur_filename),hl
0457B8 11 0A CB 04 6150*  	ld de,filedata
0457BC 01 00 00 01 6151*  	ld bc,65536
0457C0 3E 01       6152*  	ld a,mos_load
0457C2 5B CF       6153*  	RST.LIL 08h
0457C4 21 51 02 00 6154*  	ld hl,BUF_47_032
0457C8 01 1D 00 00 6155*  	ld bc,29
0457CC 11 11 00 00 6156*  	ld de,17
0457D0 DD 21 ED 01 6157*  	ld ix,493
       00          
0457D5 CD 59 C0 04 6158*  	call vdu_load_img
0457D9 C9          6159*  	ret
0457DA             6160*  
0457DA             6161*  ld_47_040:
0457DA 21 D8 62 04 6162*  	ld hl,F47_040
0457DE 22 DE BE 04 6163*  	ld (cur_filename),hl
0457E2 11 0A CB 04 6164*  	ld de,filedata
0457E6 01 00 00 01 6165*  	ld bc,65536
0457EA 3E 01       6166*  	ld a,mos_load
0457EC 5B CF       6167*  	RST.LIL 08h
0457EE 21 52 02 00 6168*  	ld hl,BUF_47_040
0457F2 01 30 00 00 6169*  	ld bc,48
0457F6 11 1B 00 00 6170*  	ld de,27
0457FA DD 21 10 05 6171*  	ld ix,1296
       00          
0457FF CD 59 C0 04 6172*  	call vdu_load_img
045803 C9          6173*  	ret
045804             6174*  
045804             6175*  ld_47_044:
045804 21 EC 62 04 6176*  	ld hl,F47_044
045808 22 DE BE 04 6177*  	ld (cur_filename),hl
04580C 11 0A CB 04 6178*  	ld de,filedata
045810 01 00 00 01 6179*  	ld bc,65536
045814 3E 01       6180*  	ld a,mos_load
045816 5B CF       6181*  	RST.LIL 08h
045818 21 53 02 00 6182*  	ld hl,BUF_47_044
04581C 01 1B 00 00 6183*  	ld bc,27
045820 11 0A 00 00 6184*  	ld de,10
045824 DD 21 0E 01 6185*  	ld ix,270
       00          
045829 CD 59 C0 04 6186*  	call vdu_load_img
04582D C9          6187*  	ret
04582E             6188*  
04582E             6189*  ld_48_004:
04582E 21 00 63 04 6190*  	ld hl,F48_004
045832 22 DE BE 04 6191*  	ld (cur_filename),hl
045836 11 0A CB 04 6192*  	ld de,filedata
04583A 01 00 00 01 6193*  	ld bc,65536
04583E 3E 01       6194*  	ld a,mos_load
045840 5B CF       6195*  	RST.LIL 08h
045842 21 54 02 00 6196*  	ld hl,BUF_48_004
045846 01 12 00 00 6197*  	ld bc,18
04584A 11 07 00 00 6198*  	ld de,7
04584E DD 21 7E 00 6199*  	ld ix,126
       00          
045853 CD 59 C0 04 6200*  	call vdu_load_img
045857 C9          6201*  	ret
045858             6202*  
045858             6203*  ld_48_020:
045858 21 14 63 04 6204*  	ld hl,F48_020
04585C 22 DE BE 04 6205*  	ld (cur_filename),hl
045860 11 0A CB 04 6206*  	ld de,filedata
045864 01 00 00 01 6207*  	ld bc,65536
045868 3E 01       6208*  	ld a,mos_load
04586A 5B CF       6209*  	RST.LIL 08h
04586C 21 55 02 00 6210*  	ld hl,BUF_48_020
045870 01 17 00 00 6211*  	ld bc,23
045874 11 0A 00 00 6212*  	ld de,10
045878 DD 21 E6 00 6213*  	ld ix,230
       00          
04587D CD 59 C0 04 6214*  	call vdu_load_img
045881 C9          6215*  	ret
045882             6216*  
045882             6217*  ld_48_032:
045882 21 28 63 04 6218*  	ld hl,F48_032
045886 22 DE BE 04 6219*  	ld (cur_filename),hl
04588A 11 0A CB 04 6220*  	ld de,filedata
04588E 01 00 00 01 6221*  	ld bc,65536
045892 3E 01       6222*  	ld a,mos_load
045894 5B CF       6223*  	RST.LIL 08h
045896 21 56 02 00 6224*  	ld hl,BUF_48_032
04589A 01 20 00 00 6225*  	ld bc,32
04589E 11 0D 00 00 6226*  	ld de,13
0458A2 DD 21 A0 01 6227*  	ld ix,416
       00          
0458A7 CD 59 C0 04 6228*  	call vdu_load_img
0458AB C9          6229*  	ret
0458AC             6230*  
0458AC             6231*  ld_48_040:
0458AC 21 3C 63 04 6232*  	ld hl,F48_040
0458B0 22 DE BE 04 6233*  	ld (cur_filename),hl
0458B4 11 0A CB 04 6234*  	ld de,filedata
0458B8 01 00 00 01 6235*  	ld bc,65536
0458BC 3E 01       6236*  	ld a,mos_load
0458BE 5B CF       6237*  	RST.LIL 08h
0458C0 21 57 02 00 6238*  	ld hl,BUF_48_040
0458C4 01 35 00 00 6239*  	ld bc,53
0458C8 11 18 00 00 6240*  	ld de,24
0458CC DD 21 F8 04 6241*  	ld ix,1272
       00          
0458D1 CD 59 C0 04 6242*  	call vdu_load_img
0458D5 C9          6243*  	ret
0458D6             6244*  
0458D6             6245*  ld_48_044:
0458D6 21 50 63 04 6246*  	ld hl,F48_044
0458DA 22 DE BE 04 6247*  	ld (cur_filename),hl
0458DE 11 0A CB 04 6248*  	ld de,filedata
0458E2 01 00 00 01 6249*  	ld bc,65536
0458E6 3E 01       6250*  	ld a,mos_load
0458E8 5B CF       6251*  	RST.LIL 08h
0458EA 21 58 02 00 6252*  	ld hl,BUF_48_044
0458EE 01 01 00 00 6253*  	ld bc,1
0458F2 11 01 00 00 6254*  	ld de,1
0458F6 DD 21 01 00 6255*  	ld ix,1
       00          
0458FB CD 59 C0 04 6256*  	call vdu_load_img
0458FF C9          6257*  	ret
045900             6258*  
045900             6259*  ld_49_004:
045900 21 64 63 04 6260*  	ld hl,F49_004
045904 22 DE BE 04 6261*  	ld (cur_filename),hl
045908 11 0A CB 04 6262*  	ld de,filedata
04590C 01 00 00 01 6263*  	ld bc,65536
045910 3E 01       6264*  	ld a,mos_load
045912 5B CF       6265*  	RST.LIL 08h
045914 21 59 02 00 6266*  	ld hl,BUF_49_004
045918 01 0E 00 00 6267*  	ld bc,14
04591C 11 06 00 00 6268*  	ld de,6
045920 DD 21 54 00 6269*  	ld ix,84
       00          
045925 CD 59 C0 04 6270*  	call vdu_load_img
045929 C9          6271*  	ret
04592A             6272*  
04592A             6273*  ld_49_020:
04592A 21 78 63 04 6274*  	ld hl,F49_020
04592E 22 DE BE 04 6275*  	ld (cur_filename),hl
045932 11 0A CB 04 6276*  	ld de,filedata
045936 01 00 00 01 6277*  	ld bc,65536
04593A 3E 01       6278*  	ld a,mos_load
04593C 5B CF       6279*  	RST.LIL 08h
04593E 21 5A 02 00 6280*  	ld hl,BUF_49_020
045942 01 12 00 00 6281*  	ld bc,18
045946 11 08 00 00 6282*  	ld de,8
04594A DD 21 90 00 6283*  	ld ix,144
       00          
04594F CD 59 C0 04 6284*  	call vdu_load_img
045953 C9          6285*  	ret
045954             6286*  
045954             6287*  ld_49_032:
045954 21 8C 63 04 6288*  	ld hl,F49_032
045958 22 DE BE 04 6289*  	ld (cur_filename),hl
04595C 11 0A CB 04 6290*  	ld de,filedata
045960 01 00 00 01 6291*  	ld bc,65536
045964 3E 01       6292*  	ld a,mos_load
045966 5B CF       6293*  	RST.LIL 08h
045968 21 5B 02 00 6294*  	ld hl,BUF_49_032
04596C 01 1A 00 00 6295*  	ld bc,26
045970 11 0B 00 00 6296*  	ld de,11
045974 DD 21 1E 01 6297*  	ld ix,286
       00          
045979 CD 59 C0 04 6298*  	call vdu_load_img
04597D C9          6299*  	ret
04597E             6300*  
04597E             6301*  ld_49_040:
04597E 21 A0 63 04 6302*  	ld hl,F49_040
045982 22 DE BE 04 6303*  	ld (cur_filename),hl
045986 11 0A CB 04 6304*  	ld de,filedata
04598A 01 00 00 01 6305*  	ld bc,65536
04598E 3E 01       6306*  	ld a,mos_load
045990 5B CF       6307*  	RST.LIL 08h
045992 21 5C 02 00 6308*  	ld hl,BUF_49_040
045996 01 2B 00 00 6309*  	ld bc,43
04599A 11 12 00 00 6310*  	ld de,18
04599E DD 21 06 03 6311*  	ld ix,774
       00          
0459A3 CD 59 C0 04 6312*  	call vdu_load_img
0459A7 C9          6313*  	ret
0459A8             6314*  
0459A8             6315*  ld_49_044:
0459A8 21 B4 63 04 6316*  	ld hl,F49_044
0459AC 22 DE BE 04 6317*  	ld (cur_filename),hl
0459B0 11 0A CB 04 6318*  	ld de,filedata
0459B4 01 00 00 01 6319*  	ld bc,65536
0459B8 3E 01       6320*  	ld a,mos_load
0459BA 5B CF       6321*  	RST.LIL 08h
0459BC 21 5D 02 00 6322*  	ld hl,BUF_49_044
0459C0 01 01 00 00 6323*  	ld bc,1
0459C4 11 01 00 00 6324*  	ld de,1
0459C8 DD 21 01 00 6325*  	ld ix,1
       00          
0459CD CD 59 C0 04 6326*  	call vdu_load_img
0459D1 C9          6327*  	ret
0459D2             6328*  
0459D2             6329*  ld_50_004:
0459D2 21 C8 63 04 6330*  	ld hl,F50_004
0459D6 22 DE BE 04 6331*  	ld (cur_filename),hl
0459DA 11 0A CB 04 6332*  	ld de,filedata
0459DE 01 00 00 01 6333*  	ld bc,65536
0459E2 3E 01       6334*  	ld a,mos_load
0459E4 5B CF       6335*  	RST.LIL 08h
0459E6 21 5E 02 00 6336*  	ld hl,BUF_50_004
0459EA 01 0A 00 00 6337*  	ld bc,10
0459EE 11 0D 00 00 6338*  	ld de,13
0459F2 DD 21 82 00 6339*  	ld ix,130
       00          
0459F7 CD 59 C0 04 6340*  	call vdu_load_img
0459FB C9          6341*  	ret
0459FC             6342*  
0459FC             6343*  ld_50_020:
0459FC 21 DC 63 04 6344*  	ld hl,F50_020
045A00 22 DE BE 04 6345*  	ld (cur_filename),hl
045A04 11 0A CB 04 6346*  	ld de,filedata
045A08 01 00 00 01 6347*  	ld bc,65536
045A0C 3E 01       6348*  	ld a,mos_load
045A0E 5B CF       6349*  	RST.LIL 08h
045A10 21 5F 02 00 6350*  	ld hl,BUF_50_020
045A14 01 0D 00 00 6351*  	ld bc,13
045A18 11 11 00 00 6352*  	ld de,17
045A1C DD 21 DD 00 6353*  	ld ix,221
       00          
045A21 CD 59 C0 04 6354*  	call vdu_load_img
045A25 C9          6355*  	ret
045A26             6356*  
045A26             6357*  ld_50_032:
045A26 21 F0 63 04 6358*  	ld hl,F50_032
045A2A 22 DE BE 04 6359*  	ld (cur_filename),hl
045A2E 11 0A CB 04 6360*  	ld de,filedata
045A32 01 00 00 01 6361*  	ld bc,65536
045A36 3E 01       6362*  	ld a,mos_load
045A38 5B CF       6363*  	RST.LIL 08h
045A3A 21 60 02 00 6364*  	ld hl,BUF_50_032
045A3E 01 12 00 00 6365*  	ld bc,18
045A42 11 1A 00 00 6366*  	ld de,26
045A46 DD 21 D4 01 6367*  	ld ix,468
       00          
045A4B CD 59 C0 04 6368*  	call vdu_load_img
045A4F C9          6369*  	ret
045A50             6370*  
045A50             6371*  ld_50_040:
045A50 21 04 64 04 6372*  	ld hl,F50_040
045A54 22 DE BE 04 6373*  	ld (cur_filename),hl
045A58 11 0A CB 04 6374*  	ld de,filedata
045A5C 01 00 00 01 6375*  	ld bc,65536
045A60 3E 01       6376*  	ld a,mos_load
045A62 5B CF       6377*  	RST.LIL 08h
045A64 21 61 02 00 6378*  	ld hl,BUF_50_040
045A68 01 1E 00 00 6379*  	ld bc,30
045A6C 11 2A 00 00 6380*  	ld de,42
045A70 DD 21 EC 04 6381*  	ld ix,1260
       00          
045A75 CD 59 C0 04 6382*  	call vdu_load_img
045A79 C9          6383*  	ret
045A7A             6384*  
045A7A             6385*  ld_50_044:
045A7A 21 18 64 04 6386*  	ld hl,F50_044
045A7E 22 DE BE 04 6387*  	ld (cur_filename),hl
045A82 11 0A CB 04 6388*  	ld de,filedata
045A86 01 00 00 01 6389*  	ld bc,65536
045A8A 3E 01       6390*  	ld a,mos_load
045A8C 5B CF       6391*  	RST.LIL 08h
045A8E 21 62 02 00 6392*  	ld hl,BUF_50_044
045A92 01 46 00 00 6393*  	ld bc,70
045A96 11 32 00 00 6394*  	ld de,50
045A9A DD 21 AC 0D 6395*  	ld ix,3500
       00          
045A9F CD 59 C0 04 6396*  	call vdu_load_img
045AA3 C9          6397*  	ret
045AA4             6398*  
045AA4             6399*  ld_51_004:
045AA4 21 2C 64 04 6400*  	ld hl,F51_004
045AA8 22 DE BE 04 6401*  	ld (cur_filename),hl
045AAC 11 0A CB 04 6402*  	ld de,filedata
045AB0 01 00 00 01 6403*  	ld bc,65536
045AB4 3E 01       6404*  	ld a,mos_load
045AB6 5B CF       6405*  	RST.LIL 08h
045AB8 21 63 02 00 6406*  	ld hl,BUF_51_004
045ABC 01 11 00 00 6407*  	ld bc,17
045AC0 11 17 00 00 6408*  	ld de,23
045AC4 DD 21 87 01 6409*  	ld ix,391
       00          
045AC9 CD 59 C0 04 6410*  	call vdu_load_img
045ACD C9          6411*  	ret
045ACE             6412*  
045ACE             6413*  ld_51_020:
045ACE 21 40 64 04 6414*  	ld hl,F51_020
045AD2 22 DE BE 04 6415*  	ld (cur_filename),hl
045AD6 11 0A CB 04 6416*  	ld de,filedata
045ADA 01 00 00 01 6417*  	ld bc,65536
045ADE 3E 01       6418*  	ld a,mos_load
045AE0 5B CF       6419*  	RST.LIL 08h
045AE2 21 64 02 00 6420*  	ld hl,BUF_51_020
045AE6 01 15 00 00 6421*  	ld bc,21
045AEA 11 1D 00 00 6422*  	ld de,29
045AEE DD 21 61 02 6423*  	ld ix,609
       00          
045AF3 CD 59 C0 04 6424*  	call vdu_load_img
045AF7 C9          6425*  	ret
045AF8             6426*  
045AF8             6427*  ld_51_032:
045AF8 21 54 64 04 6428*  	ld hl,F51_032
045AFC 22 DE BE 04 6429*  	ld (cur_filename),hl
045B00 11 0A CB 04 6430*  	ld de,filedata
045B04 01 00 00 01 6431*  	ld bc,65536
045B08 3E 01       6432*  	ld a,mos_load
045B0A 5B CF       6433*  	RST.LIL 08h
045B0C 21 65 02 00 6434*  	ld hl,BUF_51_032
045B10 01 1E 00 00 6435*  	ld bc,30
045B14 11 2A 00 00 6436*  	ld de,42
045B18 DD 21 EC 04 6437*  	ld ix,1260
       00          
045B1D CD 59 C0 04 6438*  	call vdu_load_img
045B21 C9          6439*  	ret
045B22             6440*  
045B22             6441*  ld_51_040:
045B22 21 68 64 04 6442*  	ld hl,F51_040
045B26 22 DE BE 04 6443*  	ld (cur_filename),hl
045B2A 11 0A CB 04 6444*  	ld de,filedata
045B2E 01 00 00 01 6445*  	ld bc,65536
045B32 3E 01       6446*  	ld a,mos_load
045B34 5B CF       6447*  	RST.LIL 08h
045B36 21 66 02 00 6448*  	ld hl,BUF_51_040
045B3A 01 31 00 00 6449*  	ld bc,49
045B3E 11 46 00 00 6450*  	ld de,70
045B42 DD 21 66 0D 6451*  	ld ix,3430
       00          
045B47 CD 59 C0 04 6452*  	call vdu_load_img
045B4B C9          6453*  	ret
045B4C             6454*  
045B4C             6455*  ld_51_044:
045B4C 21 7C 64 04 6456*  	ld hl,F51_044
045B50 22 DE BE 04 6457*  	ld (cur_filename),hl
045B54 11 0A CB 04 6458*  	ld de,filedata
045B58 01 00 00 01 6459*  	ld bc,65536
045B5C 3E 01       6460*  	ld a,mos_load
045B5E 5B CF       6461*  	RST.LIL 08h
045B60 21 67 02 00 6462*  	ld hl,BUF_51_044
045B64 01 92 00 00 6463*  	ld bc,146
045B68 11 83 00 00 6464*  	ld de,131
045B6C DD 21 B6 4A 6465*  	ld ix,19126
       00          
045B71 CD 59 C0 04 6466*  	call vdu_load_img
045B75 C9          6467*  	ret
045B76             6468*  
045B76             6469*  ld_52_004:
045B76 21 90 64 04 6470*  	ld hl,F52_004
045B7A 22 DE BE 04 6471*  	ld (cur_filename),hl
045B7E 11 0A CB 04 6472*  	ld de,filedata
045B82 01 00 00 01 6473*  	ld bc,65536
045B86 3E 01       6474*  	ld a,mos_load
045B88 5B CF       6475*  	RST.LIL 08h
045B8A 21 68 02 00 6476*  	ld hl,BUF_52_004
045B8E 01 0E 00 00 6477*  	ld bc,14
045B92 11 17 00 00 6478*  	ld de,23
045B96 DD 21 42 01 6479*  	ld ix,322
       00          
045B9B CD 59 C0 04 6480*  	call vdu_load_img
045B9F C9          6481*  	ret
045BA0             6482*  
045BA0             6483*  ld_52_020:
045BA0 21 A4 64 04 6484*  	ld hl,F52_020
045BA4 22 DE BE 04 6485*  	ld (cur_filename),hl
045BA8 11 0A CB 04 6486*  	ld de,filedata
045BAC 01 00 00 01 6487*  	ld bc,65536
045BB0 3E 01       6488*  	ld a,mos_load
045BB2 5B CF       6489*  	RST.LIL 08h
045BB4 21 69 02 00 6490*  	ld hl,BUF_52_020
045BB8 01 11 00 00 6491*  	ld bc,17
045BBC 11 1D 00 00 6492*  	ld de,29
045BC0 DD 21 ED 01 6493*  	ld ix,493
       00          
045BC5 CD 59 C0 04 6494*  	call vdu_load_img
045BC9 C9          6495*  	ret
045BCA             6496*  
045BCA             6497*  ld_52_032:
045BCA 21 B8 64 04 6498*  	ld hl,F52_032
045BCE 22 DE BE 04 6499*  	ld (cur_filename),hl
045BD2 11 0A CB 04 6500*  	ld de,filedata
045BD6 01 00 00 01 6501*  	ld bc,65536
045BDA 3E 01       6502*  	ld a,mos_load
045BDC 5B CF       6503*  	RST.LIL 08h
045BDE 21 6A 02 00 6504*  	ld hl,BUF_52_032
045BE2 01 19 00 00 6505*  	ld bc,25
045BE6 11 2A 00 00 6506*  	ld de,42
045BEA DD 21 1A 04 6507*  	ld ix,1050
       00          
045BEF CD 59 C0 04 6508*  	call vdu_load_img
045BF3 C9          6509*  	ret
045BF4             6510*  
045BF4             6511*  ld_52_040:
045BF4 21 CC 64 04 6512*  	ld hl,F52_040
045BF8 22 DE BE 04 6513*  	ld (cur_filename),hl
045BFC 11 0A CB 04 6514*  	ld de,filedata
045C00 01 00 00 01 6515*  	ld bc,65536
045C04 3E 01       6516*  	ld a,mos_load
045C06 5B CF       6517*  	RST.LIL 08h
045C08 21 6B 02 00 6518*  	ld hl,BUF_52_040
045C0C 01 28 00 00 6519*  	ld bc,40
045C10 11 46 00 00 6520*  	ld de,70
045C14 DD 21 F0 0A 6521*  	ld ix,2800
       00          
045C19 CD 59 C0 04 6522*  	call vdu_load_img
045C1D C9          6523*  	ret
045C1E             6524*  
045C1E             6525*  ld_52_044:
045C1E 21 E0 64 04 6526*  	ld hl,F52_044
045C22 22 DE BE 04 6527*  	ld (cur_filename),hl
045C26 11 0A CB 04 6528*  	ld de,filedata
045C2A 01 00 00 01 6529*  	ld bc,65536
045C2E 3E 01       6530*  	ld a,mos_load
045C30 5B CF       6531*  	RST.LIL 08h
045C32 21 6C 02 00 6532*  	ld hl,BUF_52_044
045C36 01 78 00 00 6533*  	ld bc,120
045C3A 11 83 00 00 6534*  	ld de,131
045C3E DD 21 68 3D 6535*  	ld ix,15720
       00          
045C43 CD 59 C0 04 6536*  	call vdu_load_img
045C47 C9          6537*  	ret
045C48             6538*  
045C48             6539*  ld_56_004:
045C48 21 F4 64 04 6540*  	ld hl,F56_004
045C4C 22 DE BE 04 6541*  	ld (cur_filename),hl
045C50 11 0A CB 04 6542*  	ld de,filedata
045C54 01 00 00 01 6543*  	ld bc,65536
045C58 3E 01       6544*  	ld a,mos_load
045C5A 5B CF       6545*  	RST.LIL 08h
045C5C 21 6D 02 00 6546*  	ld hl,BUF_56_004
045C60 01 15 00 00 6547*  	ld bc,21
045C64 11 0A 00 00 6548*  	ld de,10
045C68 DD 21 D2 00 6549*  	ld ix,210
       00          
045C6D CD 59 C0 04 6550*  	call vdu_load_img
045C71 C9          6551*  	ret
045C72             6552*  
045C72             6553*  ld_56_020:
045C72 21 08 65 04 6554*  	ld hl,F56_020
045C76 22 DE BE 04 6555*  	ld (cur_filename),hl
045C7A 11 0A CB 04 6556*  	ld de,filedata
045C7E 01 00 00 01 6557*  	ld bc,65536
045C82 3E 01       6558*  	ld a,mos_load
045C84 5B CF       6559*  	RST.LIL 08h
045C86 21 6E 02 00 6560*  	ld hl,BUF_56_020
045C8A 01 1A 00 00 6561*  	ld bc,26
045C8E 11 0C 00 00 6562*  	ld de,12
045C92 DD 21 38 01 6563*  	ld ix,312
       00          
045C97 CD 59 C0 04 6564*  	call vdu_load_img
045C9B C9          6565*  	ret
045C9C             6566*  
045C9C             6567*  ld_56_032:
045C9C 21 1C 65 04 6568*  	ld hl,F56_032
045CA0 22 DE BE 04 6569*  	ld (cur_filename),hl
045CA4 11 0A CB 04 6570*  	ld de,filedata
045CA8 01 00 00 01 6571*  	ld bc,65536
045CAC 3E 01       6572*  	ld a,mos_load
045CAE 5B CF       6573*  	RST.LIL 08h
045CB0 21 6F 02 00 6574*  	ld hl,BUF_56_032
045CB4 01 27 00 00 6575*  	ld bc,39
045CB8 11 12 00 00 6576*  	ld de,18
045CBC DD 21 BE 02 6577*  	ld ix,702
       00          
045CC1 CD 59 C0 04 6578*  	call vdu_load_img
045CC5 C9          6579*  	ret
045CC6             6580*  
045CC6             6581*  ld_56_040:
045CC6 21 30 65 04 6582*  	ld hl,F56_040
045CCA 22 DE BE 04 6583*  	ld (cur_filename),hl
045CCE 11 0A CB 04 6584*  	ld de,filedata
045CD2 01 00 00 01 6585*  	ld bc,65536
045CD6 3E 01       6586*  	ld a,mos_load
045CD8 5B CF       6587*  	RST.LIL 08h
045CDA 21 70 02 00 6588*  	ld hl,BUF_56_040
045CDE 01 42 00 00 6589*  	ld bc,66
045CE2 11 1E 00 00 6590*  	ld de,30
045CE6 DD 21 BC 07 6591*  	ld ix,1980
       00          
045CEB CD 59 C0 04 6592*  	call vdu_load_img
045CEF C9          6593*  	ret
045CF0             6594*  
045CF0             6595*  ld_56_044:
045CF0 21 44 65 04 6596*  	ld hl,F56_044
045CF4 22 DE BE 04 6597*  	ld (cur_filename),hl
045CF8 11 0A CB 04 6598*  	ld de,filedata
045CFC 01 00 00 01 6599*  	ld bc,65536
045D00 3E 01       6600*  	ld a,mos_load
045D02 5B CF       6601*  	RST.LIL 08h
045D04 21 71 02 00 6602*  	ld hl,BUF_56_044
045D08 01 36 00 00 6603*  	ld bc,54
045D0C 11 0C 00 00 6604*  	ld de,12
045D10 DD 21 88 02 6605*  	ld ix,648
       00          
045D15 CD 59 C0 04 6606*  	call vdu_load_img
045D19 C9          6607*  	ret
045D1A             6608*  
045D1A             6609*  ld_60_004:
045D1A 21 58 65 04 6610*  	ld hl,F60_004
045D1E 22 DE BE 04 6611*  	ld (cur_filename),hl
045D22 11 0A CB 04 6612*  	ld de,filedata
045D26 01 00 00 01 6613*  	ld bc,65536
045D2A 3E 01       6614*  	ld a,mos_load
045D2C 5B CF       6615*  	RST.LIL 08h
045D2E 21 72 02 00 6616*  	ld hl,BUF_60_004
045D32 01 1F 00 00 6617*  	ld bc,31
045D36 11 20 00 00 6618*  	ld de,32
045D3A DD 21 E0 03 6619*  	ld ix,992
       00          
045D3F CD 59 C0 04 6620*  	call vdu_load_img
045D43 C9          6621*  	ret
045D44             6622*  
045D44             6623*  ld_60_020:
045D44 21 6C 65 04 6624*  	ld hl,F60_020
045D48 22 DE BE 04 6625*  	ld (cur_filename),hl
045D4C 11 0A CB 04 6626*  	ld de,filedata
045D50 01 00 00 01 6627*  	ld bc,65536
045D54 3E 01       6628*  	ld a,mos_load
045D56 5B CF       6629*  	RST.LIL 08h
045D58 21 73 02 00 6630*  	ld hl,BUF_60_020
045D5C 01 29 00 00 6631*  	ld bc,41
045D60 11 2A 00 00 6632*  	ld de,42
045D64 DD 21 BA 06 6633*  	ld ix,1722
       00          
045D69 CD 59 C0 04 6634*  	call vdu_load_img
045D6D C9          6635*  	ret
045D6E             6636*  
045D6E             6637*  ld_60_032:
045D6E 21 80 65 04 6638*  	ld hl,F60_032
045D72 22 DE BE 04 6639*  	ld (cur_filename),hl
045D76 11 0A CB 04 6640*  	ld de,filedata
045D7A 01 00 00 01 6641*  	ld bc,65536
045D7E 3E 01       6642*  	ld a,mos_load
045D80 5B CF       6643*  	RST.LIL 08h
045D82 21 74 02 00 6644*  	ld hl,BUF_60_032
045D86 01 38 00 00 6645*  	ld bc,56
045D8A 11 3B 00 00 6646*  	ld de,59
045D8E DD 21 E8 0C 6647*  	ld ix,3304
       00          
045D93 CD 59 C0 04 6648*  	call vdu_load_img
045D97 C9          6649*  	ret
045D98             6650*  
045D98             6651*  ld_60_040:
045D98 21 94 65 04 6652*  	ld hl,F60_040
045D9C 22 DE BE 04 6653*  	ld (cur_filename),hl
045DA0 11 0A CB 04 6654*  	ld de,filedata
045DA4 01 00 00 01 6655*  	ld bc,65536
045DA8 3E 01       6656*  	ld a,mos_load
045DAA 5B CF       6657*  	RST.LIL 08h
045DAC 21 75 02 00 6658*  	ld hl,BUF_60_040
045DB0 01 5F 00 00 6659*  	ld bc,95
045DB4 11 64 00 00 6660*  	ld de,100
045DB8 DD 21 1C 25 6661*  	ld ix,9500
       00          
045DBD CD 59 C0 04 6662*  	call vdu_load_img
045DC1 C9          6663*  	ret
045DC2             6664*  
045DC2             6665*  ld_60_044:
045DC2 21 A8 65 04 6666*  	ld hl,F60_044
045DC6 22 DE BE 04 6667*  	ld (cur_filename),hl
045DCA 11 0A CB 04 6668*  	ld de,filedata
045DCE 01 00 00 01 6669*  	ld bc,65536
045DD2 3E 01       6670*  	ld a,mos_load
045DD4 5B CF       6671*  	RST.LIL 08h
045DD6 21 76 02 00 6672*  	ld hl,BUF_60_044
045DDA 01 18 01 00 6673*  	ld bc,280
045DDE 11 A0 00 00 6674*  	ld de,160
045DE2 DD 21 00 AF 6675*  	ld ix,44800
       00          
045DE7 CD 59 C0 04 6676*  	call vdu_load_img
045DEB C9          6677*  	ret
045DEC             6678*  
045DEC             6679*  ; File name lookups:
045DEC 70 61 6E 65 6680*  F20_004: db "panels/20_004.rgba2",0
       6C 73 2F 32 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E00 70 61 6E 65 6681*  F20_020: db "panels/20_020.rgba2",0
       6C 73 2F 32 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E14 70 61 6E 65 6682*  F20_032: db "panels/20_032.rgba2",0
       6C 73 2F 32 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E28 70 61 6E 65 6683*  F20_040: db "panels/20_040.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045E3C 70 61 6E 65 6684*  F20_044: db "panels/20_044.rgba2",0
       6C 73 2F 32 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045E50 70 61 6E 65 6685*  F21_004: db "panels/21_004.rgba2",0
       6C 73 2F 32 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045E64 70 61 6E 65 6686*  F21_020: db "panels/21_020.rgba2",0
       6C 73 2F 32 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045E78 70 61 6E 65 6687*  F21_032: db "panels/21_032.rgba2",0
       6C 73 2F 32 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045E8C 70 61 6E 65 6688*  F21_040: db "panels/21_040.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045EA0 70 61 6E 65 6689*  F21_044: db "panels/21_044.rgba2",0
       6C 73 2F 32 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045EB4 70 61 6E 65 6690*  F22_004: db "panels/22_004.rgba2",0
       6C 73 2F 32 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045EC8 70 61 6E 65 6691*  F22_020: db "panels/22_020.rgba2",0
       6C 73 2F 32 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045EDC 70 61 6E 65 6692*  F22_032: db "panels/22_032.rgba2",0
       6C 73 2F 32 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045EF0 70 61 6E 65 6693*  F22_040: db "panels/22_040.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F04 70 61 6E 65 6694*  F22_044: db "panels/22_044.rgba2",0
       6C 73 2F 32 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F18 70 61 6E 65 6695*  F23_004: db "panels/23_004.rgba2",0
       6C 73 2F 32 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F2C 70 61 6E 65 6696*  F23_020: db "panels/23_020.rgba2",0
       6C 73 2F 32 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045F40 70 61 6E 65 6697*  F23_032: db "panels/23_032.rgba2",0
       6C 73 2F 32 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045F54 70 61 6E 65 6698*  F23_040: db "panels/23_040.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045F68 70 61 6E 65 6699*  F23_044: db "panels/23_044.rgba2",0
       6C 73 2F 32 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045F7C 70 61 6E 65 6700*  F24_004: db "panels/24_004.rgba2",0
       6C 73 2F 32 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045F90 70 61 6E 65 6701*  F24_020: db "panels/24_020.rgba2",0
       6C 73 2F 32 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
045FA4 70 61 6E 65 6702*  F24_032: db "panels/24_032.rgba2",0
       6C 73 2F 32 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
045FB8 70 61 6E 65 6703*  F24_040: db "panels/24_040.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
045FCC 70 61 6E 65 6704*  F24_044: db "panels/24_044.rgba2",0
       6C 73 2F 32 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
045FE0 70 61 6E 65 6705*  F40_004: db "panels/40_004.rgba2",0
       6C 73 2F 34 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
045FF4 70 61 6E 65 6706*  F40_020: db "panels/40_020.rgba2",0
       6C 73 2F 34 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046008 70 61 6E 65 6707*  F40_032: db "panels/40_032.rgba2",0
       6C 73 2F 34 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04601C 70 61 6E 65 6708*  F40_040: db "panels/40_040.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046030 70 61 6E 65 6709*  F40_044: db "panels/40_044.rgba2",0
       6C 73 2F 34 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046044 70 61 6E 65 6710*  F41_004: db "panels/41_004.rgba2",0
       6C 73 2F 34 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046058 70 61 6E 65 6711*  F41_020: db "panels/41_020.rgba2",0
       6C 73 2F 34 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04606C 70 61 6E 65 6712*  F41_032: db "panels/41_032.rgba2",0
       6C 73 2F 34 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046080 70 61 6E 65 6713*  F41_040: db "panels/41_040.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046094 70 61 6E 65 6714*  F41_044: db "panels/41_044.rgba2",0
       6C 73 2F 34 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0460A8 70 61 6E 65 6715*  F42_004: db "panels/42_004.rgba2",0
       6C 73 2F 34 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0460BC 70 61 6E 65 6716*  F42_020: db "panels/42_020.rgba2",0
       6C 73 2F 34 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0460D0 70 61 6E 65 6717*  F42_032: db "panels/42_032.rgba2",0
       6C 73 2F 34 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0460E4 70 61 6E 65 6718*  F42_040: db "panels/42_040.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0460F8 70 61 6E 65 6719*  F42_044: db "panels/42_044.rgba2",0
       6C 73 2F 34 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04610C 70 61 6E 65 6720*  F43_004: db "panels/43_004.rgba2",0
       6C 73 2F 34 
       33 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046120 70 61 6E 65 6721*  F43_020: db "panels/43_020.rgba2",0
       6C 73 2F 34 
       33 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046134 70 61 6E 65 6722*  F43_032: db "panels/43_032.rgba2",0
       6C 73 2F 34 
       33 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046148 70 61 6E 65 6723*  F43_040: db "panels/43_040.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04615C 70 61 6E 65 6724*  F43_044: db "panels/43_044.rgba2",0
       6C 73 2F 34 
       33 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046170 70 61 6E 65 6725*  F44_004: db "panels/44_004.rgba2",0
       6C 73 2F 34 
       34 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046184 70 61 6E 65 6726*  F44_020: db "panels/44_020.rgba2",0
       6C 73 2F 34 
       34 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046198 70 61 6E 65 6727*  F44_032: db "panels/44_032.rgba2",0
       6C 73 2F 34 
       34 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0461AC 70 61 6E 65 6728*  F44_040: db "panels/44_040.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0461C0 70 61 6E 65 6729*  F44_044: db "panels/44_044.rgba2",0
       6C 73 2F 34 
       34 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0461D4 70 61 6E 65 6730*  F45_004: db "panels/45_004.rgba2",0
       6C 73 2F 34 
       35 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0461E8 70 61 6E 65 6731*  F45_020: db "panels/45_020.rgba2",0
       6C 73 2F 34 
       35 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0461FC 70 61 6E 65 6732*  F45_032: db "panels/45_032.rgba2",0
       6C 73 2F 34 
       35 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046210 70 61 6E 65 6733*  F45_040: db "panels/45_040.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046224 70 61 6E 65 6734*  F45_044: db "panels/45_044.rgba2",0
       6C 73 2F 34 
       35 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046238 70 61 6E 65 6735*  F46_004: db "panels/46_004.rgba2",0
       6C 73 2F 34 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04624C 70 61 6E 65 6736*  F46_020: db "panels/46_020.rgba2",0
       6C 73 2F 34 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046260 70 61 6E 65 6737*  F46_032: db "panels/46_032.rgba2",0
       6C 73 2F 34 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046274 70 61 6E 65 6738*  F46_040: db "panels/46_040.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046288 70 61 6E 65 6739*  F46_044: db "panels/46_044.rgba2",0
       6C 73 2F 34 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04629C 70 61 6E 65 6740*  F47_004: db "panels/47_004.rgba2",0
       6C 73 2F 34 
       37 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0462B0 70 61 6E 65 6741*  F47_020: db "panels/47_020.rgba2",0
       6C 73 2F 34 
       37 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0462C4 70 61 6E 65 6742*  F47_032: db "panels/47_032.rgba2",0
       6C 73 2F 34 
       37 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0462D8 70 61 6E 65 6743*  F47_040: db "panels/47_040.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0462EC 70 61 6E 65 6744*  F47_044: db "panels/47_044.rgba2",0
       6C 73 2F 34 
       37 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046300 70 61 6E 65 6745*  F48_004: db "panels/48_004.rgba2",0
       6C 73 2F 34 
       38 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046314 70 61 6E 65 6746*  F48_020: db "panels/48_020.rgba2",0
       6C 73 2F 34 
       38 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046328 70 61 6E 65 6747*  F48_032: db "panels/48_032.rgba2",0
       6C 73 2F 34 
       38 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
04633C 70 61 6E 65 6748*  F48_040: db "panels/48_040.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046350 70 61 6E 65 6749*  F48_044: db "panels/48_044.rgba2",0
       6C 73 2F 34 
       38 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046364 70 61 6E 65 6750*  F49_004: db "panels/49_004.rgba2",0
       6C 73 2F 34 
       39 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046378 70 61 6E 65 6751*  F49_020: db "panels/49_020.rgba2",0
       6C 73 2F 34 
       39 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04638C 70 61 6E 65 6752*  F49_032: db "panels/49_032.rgba2",0
       6C 73 2F 34 
       39 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0463A0 70 61 6E 65 6753*  F49_040: db "panels/49_040.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0463B4 70 61 6E 65 6754*  F49_044: db "panels/49_044.rgba2",0
       6C 73 2F 34 
       39 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0463C8 70 61 6E 65 6755*  F50_004: db "panels/50_004.rgba2",0
       6C 73 2F 35 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0463DC 70 61 6E 65 6756*  F50_020: db "panels/50_020.rgba2",0
       6C 73 2F 35 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0463F0 70 61 6E 65 6757*  F50_032: db "panels/50_032.rgba2",0
       6C 73 2F 35 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046404 70 61 6E 65 6758*  F50_040: db "panels/50_040.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046418 70 61 6E 65 6759*  F50_044: db "panels/50_044.rgba2",0
       6C 73 2F 35 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
04642C 70 61 6E 65 6760*  F51_004: db "panels/51_004.rgba2",0
       6C 73 2F 35 
       31 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046440 70 61 6E 65 6761*  F51_020: db "panels/51_020.rgba2",0
       6C 73 2F 35 
       31 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046454 70 61 6E 65 6762*  F51_032: db "panels/51_032.rgba2",0
       6C 73 2F 35 
       31 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046468 70 61 6E 65 6763*  F51_040: db "panels/51_040.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
04647C 70 61 6E 65 6764*  F51_044: db "panels/51_044.rgba2",0
       6C 73 2F 35 
       31 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046490 70 61 6E 65 6765*  F52_004: db "panels/52_004.rgba2",0
       6C 73 2F 35 
       32 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
0464A4 70 61 6E 65 6766*  F52_020: db "panels/52_020.rgba2",0
       6C 73 2F 35 
       32 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
0464B8 70 61 6E 65 6767*  F52_032: db "panels/52_032.rgba2",0
       6C 73 2F 35 
       32 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
0464CC 70 61 6E 65 6768*  F52_040: db "panels/52_040.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0464E0 70 61 6E 65 6769*  F52_044: db "panels/52_044.rgba2",0
       6C 73 2F 35 
       32 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0464F4 70 61 6E 65 6770*  F56_004: db "panels/56_004.rgba2",0
       6C 73 2F 35 
       36 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
046508 70 61 6E 65 6771*  F56_020: db "panels/56_020.rgba2",0
       6C 73 2F 35 
       36 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
04651C 70 61 6E 65 6772*  F56_032: db "panels/56_032.rgba2",0
       6C 73 2F 35 
       36 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046530 70 61 6E 65 6773*  F56_040: db "panels/56_040.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
046544 70 61 6E 65 6774*  F56_044: db "panels/56_044.rgba2",0
       6C 73 2F 35 
       36 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
046558 70 61 6E 65 6775*  F60_004: db "panels/60_004.rgba2",0
       6C 73 2F 36 
       30 5F 30 30 
       34 2E 72 67 
       62 61 32 00 
04656C 70 61 6E 65 6776*  F60_020: db "panels/60_020.rgba2",0
       6C 73 2F 36 
       30 5F 30 32 
       30 2E 72 67 
       62 61 32 00 
046580 70 61 6E 65 6777*  F60_032: db "panels/60_032.rgba2",0
       6C 73 2F 36 
       30 5F 30 33 
       32 2E 72 67 
       62 61 32 00 
046594 70 61 6E 65 6778*  F60_040: db "panels/60_040.rgba2",0
       6C 73 2F 36 
       30 5F 30 34 
       30 2E 72 67 
       62 61 32 00 
0465A8 70 61 6E 65 6779*  F60_044: db "panels/60_044.rgba2",0
       6C 73 2F 36 
       30 5F 30 34 
       34 2E 72 67 
       62 61 32 00 
0465BC             6780*  
0465BC             6781*  ; dws buffer ids:
0465BC             6782*  BUF_DW_6: equ 0x0277
0465BC             6783*  BUF_DW_7: equ 0x0278
0465BC             6784*  BUF_DW_8: equ 0x0279
0465BC             6785*  BUF_DW_9: equ 0x027A
0465BC             6786*  BUF_DW_10: equ 0x027B
0465BC             6787*  BUF_DW_11: equ 0x027C
0465BC             6788*  BUF_DW_12: equ 0x027D
0465BC             6789*  BUF_DW_13: equ 0x027E
0465BC             6790*  BUF_DW_14: equ 0x027F
0465BC             6791*  
0465BC             6792*  dws_num_panels: equ 9
0465BC             6793*  
0465BC             6794*  ; dws buffer id reverse lookup:
0465BC             6795*  dws_buffer_id_lut:
0465BC 77 02 00    6796*  	dl BUF_DW_6
0465BF 78 02 00    6797*  	dl BUF_DW_7
0465C2 79 02 00    6798*  	dl BUF_DW_8
0465C5 7A 02 00    6799*  	dl BUF_DW_9
0465C8 7B 02 00    6800*  	dl BUF_DW_10
0465CB 7C 02 00    6801*  	dl BUF_DW_11
0465CE 7D 02 00    6802*  	dl BUF_DW_12
0465D1 7E 02 00    6803*  	dl BUF_DW_13
0465D4 7F 02 00    6804*  	dl BUF_DW_14
0465D7             6805*  
0465D7             6806*  ; dws load routines jump table:
0465D7             6807*  dws_load_panels_table:
0465D7 F2 65 04    6808*  	dl ld_dw_6
0465DA 1C 66 04    6809*  	dl ld_dw_7
0465DD 46 66 04    6810*  	dl ld_dw_8
0465E0 70 66 04    6811*  	dl ld_dw_9
0465E3 9A 66 04    6812*  	dl ld_dw_10
0465E6 C4 66 04    6813*  	dl ld_dw_11
0465E9 EE 66 04    6814*  	dl ld_dw_12
0465EC 18 67 04    6815*  	dl ld_dw_13
0465EF 42 67 04    6816*  	dl ld_dw_14
0465F2             6817*  
0465F2             6818*  ; Import dws .rgba2 bitmap files and load them into VDP buffers
0465F2             6819*  
0465F2             6820*  ld_dw_6:
0465F2 21 6C 67 04 6821*  	ld hl,Fdw_6
0465F6 22 DE BE 04 6822*  	ld (cur_filename),hl
0465FA 11 0A CB 04 6823*  	ld de,filedata
0465FE 01 00 00 01 6824*  	ld bc,65536
046602 3E 01       6825*  	ld a,mos_load
046604 5B CF       6826*  	RST.LIL 08h
046606 21 77 02 00 6827*  	ld hl,BUF_DW_6
04660A 01 40 01 00 6828*  	ld bc,320
04660E 11 1E 00 00 6829*  	ld de,30
046612 DD 21 80 25 6830*  	ld ix,9600
       00          
046617 CD 59 C0 04 6831*  	call vdu_load_img
04661B C9          6832*  	ret
04661C             6833*  
04661C             6834*  ld_dw_7:
04661C 21 7B 67 04 6835*  	ld hl,Fdw_7
046620 22 DE BE 04 6836*  	ld (cur_filename),hl
046624 11 0A CB 04 6837*  	ld de,filedata
046628 01 00 00 01 6838*  	ld bc,65536
04662C 3E 01       6839*  	ld a,mos_load
04662E 5B CF       6840*  	RST.LIL 08h
046630 21 78 02 00 6841*  	ld hl,BUF_DW_7
046634 01 40 01 00 6842*  	ld bc,320
046638 11 18 00 00 6843*  	ld de,24
04663C DD 21 00 1E 6844*  	ld ix,7680
       00          
046641 CD 59 C0 04 6845*  	call vdu_load_img
046645 C9          6846*  	ret
046646             6847*  
046646             6848*  ld_dw_8:
046646 21 8A 67 04 6849*  	ld hl,Fdw_8
04664A 22 DE BE 04 6850*  	ld (cur_filename),hl
04664E 11 0A CB 04 6851*  	ld de,filedata
046652 01 00 00 01 6852*  	ld bc,65536
046656 3E 01       6853*  	ld a,mos_load
046658 5B CF       6854*  	RST.LIL 08h
04665A 21 79 02 00 6855*  	ld hl,BUF_DW_8
04665E 01 40 01 00 6856*  	ld bc,320
046662 11 12 00 00 6857*  	ld de,18
046666 DD 21 80 16 6858*  	ld ix,5760
       00          
04666B CD 59 C0 04 6859*  	call vdu_load_img
04666F C9          6860*  	ret
046670             6861*  
046670             6862*  ld_dw_9:
046670 21 99 67 04 6863*  	ld hl,Fdw_9
046674 22 DE BE 04 6864*  	ld (cur_filename),hl
046678 11 0A CB 04 6865*  	ld de,filedata
04667C 01 00 00 01 6866*  	ld bc,65536
046680 3E 01       6867*  	ld a,mos_load
046682 5B CF       6868*  	RST.LIL 08h
046684 21 7A 02 00 6869*  	ld hl,BUF_DW_9
046688 01 40 01 00 6870*  	ld bc,320
04668C 11 10 00 00 6871*  	ld de,16
046690 DD 21 00 14 6872*  	ld ix,5120
       00          
046695 CD 59 C0 04 6873*  	call vdu_load_img
046699 C9          6874*  	ret
04669A             6875*  
04669A             6876*  ld_dw_10:
04669A 21 A8 67 04 6877*  	ld hl,Fdw_10
04669E 22 DE BE 04 6878*  	ld (cur_filename),hl
0466A2 11 0A CB 04 6879*  	ld de,filedata
0466A6 01 00 00 01 6880*  	ld bc,65536
0466AA 3E 01       6881*  	ld a,mos_load
0466AC 5B CF       6882*  	RST.LIL 08h
0466AE 21 7B 02 00 6883*  	ld hl,BUF_DW_10
0466B2 01 40 01 00 6884*  	ld bc,320
0466B6 11 10 00 00 6885*  	ld de,16
0466BA DD 21 00 14 6886*  	ld ix,5120
       00          
0466BF CD 59 C0 04 6887*  	call vdu_load_img
0466C3 C9          6888*  	ret
0466C4             6889*  
0466C4             6890*  ld_dw_11:
0466C4 21 B8 67 04 6891*  	ld hl,Fdw_11
0466C8 22 DE BE 04 6892*  	ld (cur_filename),hl
0466CC 11 0A CB 04 6893*  	ld de,filedata
0466D0 01 00 00 01 6894*  	ld bc,65536
0466D4 3E 01       6895*  	ld a,mos_load
0466D6 5B CF       6896*  	RST.LIL 08h
0466D8 21 7C 02 00 6897*  	ld hl,BUF_DW_11
0466DC 01 40 01 00 6898*  	ld bc,320
0466E0 11 0E 00 00 6899*  	ld de,14
0466E4 DD 21 80 11 6900*  	ld ix,4480
       00          
0466E9 CD 59 C0 04 6901*  	call vdu_load_img
0466ED C9          6902*  	ret
0466EE             6903*  
0466EE             6904*  ld_dw_12:
0466EE 21 C8 67 04 6905*  	ld hl,Fdw_12
0466F2 22 DE BE 04 6906*  	ld (cur_filename),hl
0466F6 11 0A CB 04 6907*  	ld de,filedata
0466FA 01 00 00 01 6908*  	ld bc,65536
0466FE 3E 01       6909*  	ld a,mos_load
046700 5B CF       6910*  	RST.LIL 08h
046702 21 7D 02 00 6911*  	ld hl,BUF_DW_12
046706 01 40 01 00 6912*  	ld bc,320
04670A 11 0C 00 00 6913*  	ld de,12
04670E DD 21 00 0F 6914*  	ld ix,3840
       00          
046713 CD 59 C0 04 6915*  	call vdu_load_img
046717 C9          6916*  	ret
046718             6917*  
046718             6918*  ld_dw_13:
046718 21 D8 67 04 6919*  	ld hl,Fdw_13
04671C 22 DE BE 04 6920*  	ld (cur_filename),hl
046720 11 0A CB 04 6921*  	ld de,filedata
046724 01 00 00 01 6922*  	ld bc,65536
046728 3E 01       6923*  	ld a,mos_load
04672A 5B CF       6924*  	RST.LIL 08h
04672C 21 7E 02 00 6925*  	ld hl,BUF_DW_13
046730 01 40 01 00 6926*  	ld bc,320
046734 11 0C 00 00 6927*  	ld de,12
046738 DD 21 00 0F 6928*  	ld ix,3840
       00          
04673D CD 59 C0 04 6929*  	call vdu_load_img
046741 C9          6930*  	ret
046742             6931*  
046742             6932*  ld_dw_14:
046742 21 E8 67 04 6933*  	ld hl,Fdw_14
046746 22 DE BE 04 6934*  	ld (cur_filename),hl
04674A 11 0A CB 04 6935*  	ld de,filedata
04674E 01 00 00 01 6936*  	ld bc,65536
046752 3E 01       6937*  	ld a,mos_load
046754 5B CF       6938*  	RST.LIL 08h
046756 21 7F 02 00 6939*  	ld hl,BUF_DW_14
04675A 01 40 01 00 6940*  	ld bc,320
04675E 11 0C 00 00 6941*  	ld de,12
046762 DD 21 00 0F 6942*  	ld ix,3840
       00          
046767 CD 59 C0 04 6943*  	call vdu_load_img
04676B C9          6944*  	ret
04676C             6945*  
04676C             6946*  ; File name lookups:
04676C 64 77 73 2F 6947*  Fdw_6: db "dws/dw_6.rgba2",0
       64 77 5F 36 
       2E 72 67 62 
       61 32 00    
04677B 64 77 73 2F 6948*  Fdw_7: db "dws/dw_7.rgba2",0
       64 77 5F 37 
       2E 72 67 62 
       61 32 00    
04678A 64 77 73 2F 6949*  Fdw_8: db "dws/dw_8.rgba2",0
       64 77 5F 38 
       2E 72 67 62 
       61 32 00    
046799 64 77 73 2F 6950*  Fdw_9: db "dws/dw_9.rgba2",0
       64 77 5F 39 
       2E 72 67 62 
       61 32 00    
0467A8 64 77 73 2F 6951*  Fdw_10: db "dws/dw_10.rgba2",0
       64 77 5F 31 
       30 2E 72 67 
       62 61 32 00 
0467B8 64 77 73 2F 6952*  Fdw_11: db "dws/dw_11.rgba2",0
       64 77 5F 31 
       31 2E 72 67 
       62 61 32 00 
0467C8 64 77 73 2F 6953*  Fdw_12: db "dws/dw_12.rgba2",0
       64 77 5F 31 
       32 2E 72 67 
       62 61 32 00 
0467D8 64 77 73 2F 6954*  Fdw_13: db "dws/dw_13.rgba2",0
       64 77 5F 31 
       33 2E 72 67 
       62 61 32 00 
0467E8 64 77 73 2F 6955*  Fdw_14: db "dws/dw_14.rgba2",0
       64 77 5F 31 
       34 2E 72 67 
       62 61 32 00 
0467F8             0014   	include "src/asm/fonts_bmp.asm"
0467F8             0001*  ; plots a bitmap character to the screen
0467F8             0002*  ; inputs: a; ascii character to plot
0467F8             0003*  ;      bc,de = x,y screen coordinates in pixels
0467F8             0004*  ;      ix pointed at the font definition lut
0467F8             0005*  ; returns: bc as the next x coordinate to plot
0467F8             0006*  ;          pretty pixels which hopefully resemble readable text
0467F8             0007*  ; destroys: lotsa stuff
0467F8             0008*  font_bmp_plot:
0467F8             0009*  ; back up bc,de
0467F8 C5          0010*      push bc
0467F9 D5          0011*      push de
0467FA             0012*  ; get the buffer id of the character
0467FA D6 20       0013*      sub 32 ; lookup table starts at ascii 32
0467FC 06 06       0014*      ld b,6 ; six bytes per lookup record
0467FE 4F          0015*      ld c,a
0467FF ED 4C       0016*      mlt bc
046801 DD 09       0017*      add ix,bc ; now ix points to the character definition
046803 DD 27 03    0018*      ld hl,(ix+3) ; hl has the buffer id
046806 CD AD B0 04 0019*      call vdu_buff_select
04680A             0020*  ; plot the character
04680A D1          0021*      pop de
04680B DD 7E 02    0022*      ld a,(ix+2) ; a has the y-offset of the character
04680E 83          0023*      add a,e ; add the y-coordinate
04680F 5F          0024*      ld e,a
046810 3E 00       0025*      ld a,0 ; can't xor it because we need carry
046812 8A          0026*      adc a,d
046813 57          0027*      ld d,a ; plot_y now correct for the character
046814 C1          0028*      pop bc ; plot_x
046815 C5          0029*      push bc ; we want it back after the plot
046816 CD 7E B2 04 0030*      call vdu_plot_bmp
04681A             0031*  ; now set bc to the next x coordinate
04681A C1          0032*      pop bc
04681B DD 7E 00    0033*      ld a,(ix+0) ; a has the width of the character
04681E C6 02       0034*      add a,2 ; add a little padding between characters
046820 81          0035*      add a,c ; bump the original x-coordinate
046821 4F          0036*      ld c,a
046822 3E 00       0037*      ld a,0 ; can't xor it because we need carry
046824 88          0038*      adc a,b
046825 47          0039*      ld b,a ; plot_x now correct for the next character
046826 C9          0040*      ret
046827             0041*  
046827             0042*  ; plots a zero-terminated string of bitmap characters to the screen
046827             0043*  ; inputs: hl; pointer to the string
046827             0044*  ;       bc,de = x,y screen coordinates in pixels
046827             0045*  ;       ix pointed at the font definition lut
046827             0046*  ; returns: bc as the next x coordinate to plot
046827             0047*  ;          de as the next y coordinate to plot
046827             0048*  ;          pretty pixels which hopefully resemble readable text
046827             0049*  font_bmp_print:
046827             0050*  @next_char:
046827             0051*  ; fetch the next character in the string
046827 7E          0052*      ld a,(hl) ; a has the ascii value of the character
046828 FE 00       0053*      cp 0 ; is it zero?
04682A C8          0054*      ret z ; if so, we're done
04682B 23          0055*      inc hl ; point to the next character
04682C E5          0056*      push hl ; save the pointer
04682D D5          0057*      push de ; save our y-coordinate
04682E DD E5       0058*      push ix ; save the font lut pointer
046830 CD F8 67 04 0059*      call font_bmp_plot ; plot the character
046834 DD E1       0060*      pop ix ; restore the font lut pointer
046836 D1          0061*      pop de ; restore our y-coordinate
046837 E1          0062*      pop hl ; restore the pointer
046838 C3 27 68 04 0063*      jp @next_char ; loop
04683C             0015   	include "src/asm/maps.asm"
04683C             0001*  ; ############# MAP CONSTANTS #############
04683C             0002*  ; map tables addresses
04683C             0003*  cell_status: 		equ 0xB7E000 ; base of on-chip high speed SRAM
04683C             0004*  cell_views: 		equ 0xB7E400 ; cell_status + 256*4
04683C             0005*  
04683C             0006*  ; map status/type flags
04683C             0007*  cell_is_door:     	equ %10000000  ; Bit 7: door flag
04683C             0008*  cell_is_wall:     	equ %01000000  ; Bit 6: wall flag
04683C             0009*  cell_is_trigger:  	equ %00100000  ; Bit 5: trigger flag
04683C             0010*  cell_is_blocking: 	equ %00010000  ; Bit 4: blocking flag
04683C             0011*  cell_is_start:		equ %00001000  ; Bit 3: start flag
04683C             0012*  cell_is_to_room:    equ %00000100  ; Bit 2: to room flag
04683C             0013*  ; bits 1 and 0 are the render_type mask
04683C             0014*  render_type_cube:   equ %00000000  ; 0
04683C             0015*  render_type_floor:  equ %00000001  ; 1
04683C             0016*  render_type_null:   equ %00000010  ; 2
04683C             0017*  render_type_sprite: equ %00000011  ; 3
04683C             0018*  
04683C             0019*  ; HOW THE MAP TABLE IS LAID OUT
04683C             0020*  ; map table field offset constants
04683C             0021*  ; (mind the little-endianess)
04683C             0022*  map_type_status: 	equ 0
04683C             0023*  map_img_idx: 		equ 1
04683C             0024*  map_obj_id: 		equ 2
04683C             0025*  map_sprite_id: 		equ 3
04683C             0026*  map_record_size: 	equ 4 ; bytes per cell_status record
04683C             0027*  
04683C             0028*  ; gets cell info from a directional displacement from a given map location
04683C             0029*  ; inputs: ; d = distance ; e = direction, b,c = y,x
04683C             0030*  ; returns: ix = pointer to cell_status lut; a = obj_id; hl = address of cell base render routine
04683C             0031*  ; calls: get_dx_dy, get_cell_from_coords
04683C             0032*  get_neighbor:
04683C             0033*  ; modulo 4 on orientation
04683C 7B          0034*      ld a,e
04683D E6 03       0035*      and 0x03
04683F 5F          0036*      ld e,a
046840 CD 6F 68 04 0037*  	call get_dx_dy ; d,e = dy,dx
046844             0038*  ; add add b,c to the deltas in d,e
046844 79          0039*  	ld a,c
046845 83          0040*  	add a,e
046846 5F          0041*  	ld e,a
046847 78          0042*  	ld a,b
046848 82          0043*  	add a,d
046849 57          0044*  	ld d,a
04684A             0045*  ; fall through to get_cell_from_coords
04684A             0046*  
04684A             0047*  ; gets cell info from a given x,y map coordinate
04684A             0048*  ; inputs: ; d,e = map_y,map_x
04684A             0049*  ; returns: ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04684A             0050*  get_cell_from_coords:
04684A             0051*  ; modulo 16 on input coords
04684A 7B          0052*  	ld a,e
04684B E6 0F       0053*  	and 0x0F
04684D 5F          0054*  	ld e,a
04684E 7A          0055*  	ld a,d
04684F E6 0F       0056*  	and 0x0F
046851 57          0057*  	ld d,a
046852             0058*  ; get cell_id from x,y
046852 42          0059*  	ld b,d ; y
046853 0E 10       0060*  	ld c,16 ; number of cells in a column
046855 ED 4C       0061*  	mlt bc ; bc = cell_id of y,0
046857 21 00 00 00 0062*  	ld hl,0 ; make sure uhl is zero
04685B 6B          0063*  	ld l,e ; x
04685C 09          0064*  	add hl,bc ; hl = cell_id of x,y
04685D E5          0065*  	push hl ; so we can return cell_id
04685E 4D          0066*  	ld c,l ; c = cell_id
04685F             0067*  ; get address of cell record in cell_status table
04685F 06 04       0068*  	ld b,map_record_size ; b = bytes per record
046861 ED 4C       0069*  	mlt bc ; bc = offset to cell record
046863 DD 21 00 E0 0070*  	ld ix,cell_status ; base address of lookup table
       B7          
046868 DD 09       0071*  	add ix,bc ; ix = address of cell record
04686A DD 7E 02    0072*  	ld a,(ix+map_obj_id) ; a = obj_id
04686D C1          0073*  	pop bc ; bc = cell_id
04686E C9          0074*  	ret
04686F             0075*  
04686F             0076*  ; gets dx,dy from orientation and distance
04686F             0077*  ; d = distance ; e = orientation
04686F             0078*  ; returns: d,e = dy,dx
04686F             0079*  get_dx_dy:
04686F             0080*  ; make sure deu is zero
04686F E5          0081*  	push hl
046870 21 00 00 00 0082*  	ld hl,0
046874 62          0083*  	ld h,d
046875 6B          0084*  	ld l,e
046876 EB          0085*  	ex de,hl
046877 E1          0086*  	pop hl
046878             0087*  ; modulo 4 on orientation
046878 7B          0088*  	ld a,e
046879 E6 03       0089*  	and 0x03
04687B FE 00       0090*  	cp 0
04687D 28 11       0091*  	jr z,@north
04687F FE 01       0092*  	cp 1
046881 28 14       0093*  	jr z,@east
046883 FE 02       0094*  	cp 2
046885 28 14       0095*  	jr z,@south
046887 FE 03       0096*  	cp 3
046889 28 13       0097*  	jr z,@west
04688B             0098*  ; if none of those, return zeroes
04688B 11 00 00 00 0099*  	ld de,0
04688F C9          0100*  	ret
046890             0101*  @north:
046890             0102*  ; x = 0, y = -d
046890 1E 00       0103*  	ld e,0
046892 7A          0104*  	ld a,d
046893 ED 44       0105*  	neg
046895 57          0106*  	ld d,a
046896 C9          0107*  	ret
046897             0108*  @east:
046897             0109*  ; x = d, y = 0
046897 5A          0110*  	ld e,d
046898 16 00       0111*  	ld d,0
04689A C9          0112*  	ret
04689B             0113*  @south:
04689B             0114*  ; x = 0, y = d
04689B 1E 00       0115*  	ld e,0
04689D C9          0116*  	ret
04689E             0117*  @west:
04689E             0118*  ; x = -d, y = 0
04689E 7A          0119*  	ld a,d
04689F ED 44       0120*  	neg
0468A1 5F          0121*  	ld e,a
0468A2 16 00       0122*  	ld d,0
0468A4 C9          0123*  	ret
0468A5             0124*  
0468A5             0125*  ; gets the direction from a dy,dx pair
0468A5             0126*  ; basically atan2(dy,dx) but for only the 4 cardinal directions
0468A5             0127*  ; inputs: ; d = dy ; e = dx
0468A5             0128*  ; returns: a = orientation
0468A5             0129*  get_dir_from_dy_dx:
0468A5 AF          0130*  	xor a
0468A6 93          0131*  	sub e
0468A7 28 06       0132*  	jr z,@not_x
0468A9 3E 01       0133*  	ld a,1
0468AB F8          0134*  	ret m
0468AC 3E 03       0135*  	ld a,3
0468AE C9          0136*  	ret
0468AF             0137*  @not_x:
0468AF AF          0138*  	xor a
0468B0 92          0139*  	sub d
0468B1 C8          0140*  	ret z
0468B2 3E 02       0141*  	ld a,2
0468B4 F8          0142*  	ret m
0468B5 AF          0143*  	xor a
0468B6 C9          0144*  	ret
0468B7             0145*  
0468B7             0146*  
0468B7             0147*  ; translate camera relative x,y deltas to map x,y deltas
0468B7             0148*  ; inputs: ; d = dy ; e = dx ; a = camera orientation
0468B7             0149*  ; returns:	d = map_dy ; e = map_dx
0468B7             0150*  trans_dx_dy:
0468B7             0151*  ; modulo 4 on orientation
0468B7 E6 03       0152*  	and 0x03
0468B9 28 11       0153*  	jr z,@north
0468BB FE 01       0154*  	cp 1 ; east
0468BD 28 12       0155*  	jr z,@east
0468BF FE 02       0156*  	cp 2 ; south
0468C1 28 12       0157*  	jr z,@south
0468C3 FE 03       0158*  	cp 3 ; west
0468C5 28 13       0159*  	jr z,@west
0468C7             0160*  ; if none of those, return zeroes
0468C7 11 00 00 00 0161*  	ld de,0
0468CB C9          0162*  	ret
0468CC             0163*  @north: ; invert y axis, x unnchanged
0468CC 7A          0164*  	ld a,d
0468CD ED 44       0165*  	neg
0468CF 57          0166*  	ld d,a
0468D0 C9          0167*  	ret
0468D1             0168*  @east: ; +x = +y, +y = +x
0468D1 7A          0169*  	ld a,d
0468D2 53          0170*  	ld d,e
0468D3 5F          0171*  	ld e,a
0468D4 C9          0172*  	ret
0468D5             0173*  @south: ; invert x axis, y unchanged
0468D5 7B          0174*  	ld a,e
0468D6 ED 44       0175*  	neg
0468D8 5F          0176*  	ld e,a
0468D9 C9          0177*  	ret
0468DA             0178*  @west: ; +x = -y, +y = -x
0468DA 7A          0179*  	ld a,d ; y
0468DB ED 44       0180*  	neg ; -y
0468DD 53          0181*  	ld d,e ; x
0468DE 5F          0182*  	ld e,a ; -y
0468DF 7A          0183*  	ld a,d ; x
0468E0 ED 44       0184*  	neg ; -x
0468E2 57          0185*  	ld d,a ; -x
0468E3 C9          0186*  	ret
0468E4             0187*  
0468E4             0188*  ; initialize map variables and load map file
0468E4             0189*  ; inputs: none
0468E4             0190*  map_init:
0468E4 AF          0191*  	xor a
0468E5 32 4C B9 04 0192*  	ld (cur_floor),a
0468E9 32 4D B9 04 0193*  	ld (cur_room),a
0468ED             0194*  ; load room file
0468ED CD F2 68 04 0195*  	call map_load
0468F1             0196*  ; set player initial position
0468F1 C9          0197*  	ret
0468F2             0198*  
0468F2             0199*  ; load map file
0468F2             0200*  ; inputs: cur_floor, cur_room set
0468F2             0201*  map_load:
0468F2 21 84 6A 04 0202*  	ld hl,floors ; address of floors lut
0468F6 3A 4C B9 04 0203*  	ld a,(cur_floor)
0468FA 5F          0204*  	ld e,a
0468FB 16 03       0205*  	ld d,3 ; three bytes per lookup record
0468FD ED 5C       0206*  	mlt de ; de = offset to floor lut entry
0468FF 19          0207*  	add hl,de ; hl = address of floor lut entry
046900 ED 27       0208*  	ld hl,(hl) ; hl = base address of rooms for given floor
046902 3A 4D B9 04 0209*  	ld a,(cur_room)
046906 5F          0210*  	ld e,a
046907 16 03       0211*  	ld d,3 ; three bytes per lookup record
046909 ED 5C       0212*  	mlt de ; de = offset to room lut entry
04690B 19          0213*  	add hl,de ; hl = address of room lut entry
04690C ED 27       0214*  	ld hl,(hl) ; hl = address of room file name
04690E 22 DE BE 04 0215*  	ld (cur_filename),hl ; DEBUG
046912 11 00 E0 B7 0216*  	ld de,cell_status ; address to load map data
046916 01 00 20 00 0217*  	ld bc,8*1024 ; size of map data in bytes
04691A 3E 01       0218*  	ld a,mos_load
04691C 5B CF       0219*  	RST.LIL 08h
04691E             0220*  ; load sprite data
04691E CD 23 69 04 0221*  	call map_init_sprites
046922 C9          0222*  	ret
046923             0223*  
046923             0224*  ; initialize sprite data for the current room into sprite table
046923             0225*  ; inputs: map data loaded
046923             0226*  map_init_sprites:
046923             0227*  ; initialize pointers
046923 DD 21 00 E0 0228*  	ld ix,cell_status
       B7          
046928 FD 21 00 FC 0229*  	ld iy,sprite_table_base
       B7          
04692D AF          0230*  	xor a
04692E 32 72 69 04 0231*  	ld (@cell_id),a
046932             0232*  @loop:
046932 FD 22 4C A6 0233*  	ld (sprite_table_pointer),iy ; probably don't strictly need this but why not
       04          
046937 DD 7E 03    0234*  	ld a,(ix+map_sprite_id)
04693A FE FF       0235*  	cp 255 ; check for no sprite
04693C 28 1B       0236*  	jr z,@next_cell
04693E FD 77 00    0237*  	ld (iy+sprite_id),a
046941 DD 7E 01    0238*  	ld a,(ix+map_img_idx)
046944 FD 77 01    0239*  	ld (iy+sprite_obj),a
046947 CD EC A7 04 0240*  	call sprite_init_data
04694B 3A 72 69 04 0241*  	ld a,(@cell_id)
04694F CD 73 69 04 0242*  	call cell_id_to_coords ; d = map_y, e = map_x
046953 FD 1F 04    0243*  	ld (iy+sprite_x),de ; set sprite x,y
046956 ED 33 10    0244*  	lea iy,iy+sprite_record_size ; advance pointer to next sprite record
046959             0245*  @next_cell:
046959 ED 32 04    0246*  	lea ix,ix+map_record_size ; advance pointer to next cell
04695C             0247*  ; check if we've reached the end of the map data
04695C 3A 72 69 04 0248*  	ld a,(@cell_id)
046960 3C          0249*  	inc a
046961 32 72 69 04 0250*  	ld (@cell_id),a
046965 20 CB       0251*  	jr nz,@loop ; still more to do
046967             0252*  ; cleanup and return
046967 FD 21 00 FC 0253*  	ld iy,sprite_table_base ; reset pointer
       B7          
04696C FD 22 4C A6 0254*  	ld (sprite_table_pointer),iy
       04          
046971 C9          0255*  	ret
046972 00          0256*  @cell_id: db 0
046973             0257*  
046973             0258*  ; get the x,y map coordinates from a cell_id
046973             0259*  ; inputs: a = cell_id
046973             0260*  ; returns: a = cell_id, d = map_y, e = map_x
046973             0261*  cell_id_to_coords:
046973 11 00 00 00 0262*  	ld de,0 ; make sure deu is zero
046977 F5          0263*  	push af	; Save the cell id
046978             0264*  ; Calculate the y coordinate by dividing the index by 16
046978 57          0265*  	ld d,a      ; Move index into d
046979 CB 3A       0266*  	srl d        ; Shift right once (d = d / 2)
04697B CB 3A       0267*  	srl d        ; Shift right again (d = d / 4)
04697D CB 3A       0268*  	srl d        ; Shift right again (d = d / 8)
04697F CB 3A       0269*  	srl d        ; Shift right again (d = d / 16)
046981             0270*  ; Calculate the x coordinate by taking the index modulo 16
046981 E6 0F       0271*  	and 15       ; e = e & 15 (retain the lower 4 bits of the cell id, which is modulo 16)
046983 5F          0272*  	ld e,a      ; e is now the x coordinate
046984 F1          0273*  	pop af	; a is cell id
046985 C9          0274*  	ret
046986             0275*  
046986             0276*  ; get starting position in room 0 of a floor based on is_start flag being set
046986             0277*  ; inputs: none
046986             0278*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
046986             0279*  ; destroys: c,iy
046986             0280*  get_floor_start:
046986             0281*  ; loop through map data to find the obj_id in a
046986 DD 21 00 E0 0282*  	ld ix,cell_status
       B7          
04698B 0E 00       0283*  	ld c,0 ; c will be a loop counter giving us cell_id
04698D             0284*  @start_cell_loop:
04698D DD 7E 00    0285*  	ld a,(ix+map_type_status)
046990 E6 08       0286*  	and cell_is_start
046992 20 06       0287*  	jr nz,@start_cell_found
046994 ED 32 04    0288*  	lea ix,ix+map_record_size
046997 0C          0289*  	inc c
046998 18 F3       0290*  	jr @start_cell_loop
04699A             0291*  @start_cell_found:
04699A 79          0292*  	ld a,c
04699B CD 73 69 04 0293*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
04699F ED 53 52 B9 0294*  	ld (cur_x),de
       04          
0469A4 C9          0295*  	ret
0469A5             0296*  
0469A5             0297*  ; get starting position based an obj_id
0469A5             0298*  ; inputs: a is the obj_id to search for
0469A5             0299*  ; returns: a = cell_id, d = map_y, e = map_x, ix pointed to cell address
0469A5             0300*  ; destroys: c,iy
0469A5             0301*  get_room_start:
0469A5             0302*  ; loop through map data to find the obj_id in a
0469A5 DD 21 00 E0 0303*  	ld ix,cell_status
       B7          
0469AA 0E 00       0304*  	ld c,0 ; c will be a loop counter giving us cell_id
0469AC             0305*  @start_cell_loop:
0469AC DD BE 02    0306*  	cp (ix+map_obj_id)
0469AF 28 06       0307*  	jr z,@start_cell_found
0469B1 ED 32 04    0308*  	lea ix,ix+map_record_size
0469B4 0C          0309*  	inc c
0469B5 18 F5       0310*  	jr @start_cell_loop
0469B7             0311*  @start_cell_found:
0469B7 79          0312*  	ld a,c
0469B8 CD 73 69 04 0313*  	call cell_id_to_coords ; d = map_y, e = map_x, a = cell_id
0469BC ED 53 52 B9 0314*  	ld (cur_x),de
       04          
0469C1 C9          0315*  	ret
0469C2             0316*  
0469C2             0317*  
0469C2             0318*  ; moves player to the room indicated by the too room cell they've just entered
0469C2             0319*  ; inputs: ix = pointer to the cell containing the too room door
0469C2             0320*  change_room:
0469C2             0321*  ; set visited flag for old room
0469C2 3A 4D B9 04 0322*  	ld a,(cur_room)
0469C6 21 5C 6A 04 0323*  	ld hl,room_flags
0469CA 11 00 00 00 0324*  	ld de,0 ; make sure deu and d are zero
0469CE 5F          0325*  	ld e,a
0469CF 19          0326*  	add hl,de ; hl = address of room flags entry
0469D0 3E 01       0327*  	ld a,room_flag_visited
0469D2 B6          0328*  	or (hl)
0469D3 77          0329*  	ld (hl),a
0469D4             0330*  ; update from_room
0469D4 3A 4D B9 04 0331*  	ld a,(cur_room)
0469D8 32 50 B9 04 0332*  	ld (from_room),a
0469DC             0333*  ; get the new room id from the cell and update cur_room
0469DC 21 52 6A 04 0334*  	ld hl,to_room_obj_lut
0469E0 DD 7E 02    0335*  	ld a,(ix+map_obj_id)
0469E3 96          0336*  	sub (hl)
0469E4 32 4D B9 04 0337*  	ld (cur_room),a
0469E8             0338*  ; save old room state to room dat memory location
0469E8 21 66 6A 04 0339*  	ld hl,room_dat_lut
0469EC 3A 50 B9 04 0340*  	ld a,(from_room)
0469F0 57          0341*  	ld d,a
0469F1 1E 03       0342*  	ld e,3 ; three bytes per lookup record
0469F3 ED 5C       0343*  	mlt de ; de = offset to room dat entry
0469F5 19          0344*  	add hl,de ; hl = address of room dat entry
0469F6 ED 17       0345*  	ld de,(hl) ; destination address for room data
0469F8 21 00 E0 B7 0346*  	ld hl,cell_status ; source address for room data
0469FC 01 00 20 00 0347*  	ld bc,8*1024 ; size of room data
046A00 ED B0       0348*  	ldir
046A02             0349*  ; check room visited flag for target room
046A02 21 5C 6A 04 0350*  	ld hl,room_flags
046A06 3A 4D B9 04 0351*  	ld a,(cur_room)
046A0A 11 00 00 00 0352*  	ld de,0 ; make sure deu and d are zero
046A0E 5F          0353*  	ld e,a
046A0F 19          0354*  	add hl,de ; hl = address of room flags entry
046A10 3E 01       0355*  	ld a,room_flag_visited
046A12 A6          0356*  	and (hl)
046A13 20 0A       0357*  	jr nz,@room_visited
046A15             0358*  ; room not visited so load room data from file
046A15 CD F2 68 04 0359*  	call map_load
046A19 CD 23 69 04 0360*  	call map_init_sprites
046A1D 18 1A       0361*  	jr @get_room_start
046A1F             0362*  @room_visited:
046A1F             0363*  ; fetch new room state from room dat memory location
046A1F 21 66 6A 04 0364*  	ld hl,room_dat_lut
046A23 3A 4D B9 04 0365*  	ld a,(cur_room)
046A27 57          0366*  	ld d,a
046A28 1E 03       0367*  	ld e,3 ; three bytes per lookup record
046A2A ED 5C       0368*  	mlt de ; de = offset to room dat entry
046A2C 19          0369*  	add hl,de ; hl = address of room dat entry
046A2D ED 27       0370*  	ld hl,(hl) ; source address for room data
046A2F 11 00 E0 B7 0371*  	ld de,cell_status ; destination address for room data
046A33 01 00 20 00 0372*  	ld bc,8*1024 ; size of room data
046A37 ED B0       0373*  	ldir
046A39             0374*  @get_room_start:
046A39             0375*  ; get player starting position from to_room_obj_lut
046A39 3A 50 B9 04 0376*  	ld a,(from_room)
046A3D 21 52 6A 04 0377*  	ld hl,to_room_obj_lut
046A41 11 00 00 00 0378*  	ld de,0 ; make sure deu and d are zero
046A45 5F          0379*  	ld e,a
046A46 19          0380*  	add hl,de ; hl = address of to_room_obj_lut entry
046A47 7E          0381*  	ld a,(hl)
046A48 CD A5 69 04 0382*  	call get_room_start
046A4C ED 53 52 B9 0383*  	ld (cur_x),de
       04          
046A51 C9          0384*  	ret
046A52             0385*  
046A52 1E 1F 20 21 0386*  to_room_obj_lut: db 30,31,32,33,34,35,36,37,38,39
       22 23 24 25 
       26 27       
046A5C             0387*  
046A5C 00 00 00 00 0388*  room_flags: blkb 10,0
       00 00 00 00 
       00 00       
046A66             0389*  room_flag_visited: equ %00000001
046A66             0390*  
046A66             0391*  room_dat_lut:
046A66 00 00 0A    0392*  room_00_dat: dl 0x0A0000
046A69 00 20 0A    0393*  room_01_dat: dl 0x0A2000
046A6C 00 40 0A    0394*  room_02_dat: dl 0x0A4000
046A6F 00 60 0A    0395*  room_03_dat: dl 0x0A6000
046A72 00 80 0A    0396*  room_04_dat: dl 0x0A8000
046A75 00 A0 0A    0397*  room_05_dat: dl 0x0AA000
046A78 00 C0 0A    0398*  room_06_dat: dl 0x0AC000
046A7B 00 E0 0A    0399*  room_07_dat: dl 0x0AE000
046A7E 00 00 0B    0400*  room_08_dat: dl 0x0B0000
046A81 00 20 0B    0401*  room_09_dat: dl 0x0B2000
046A84             0402*  
046A84             0403*  ; #### AUTO-GENERATED MAP DATA BELOW THIS LINE DO NOT EDIT ####
046A84             0404*  
046A84             0405*  start_obj_id: equ 28
046A84             0406*  
046A84             0407*  floors:
046A84 87 6A 04    0408*  	dl floor_00
046A87             0409*  
046A87             0410*  room_files:
046A87             0411*  floor_00:
046A87 90 6A 04    0412*  	dl room_00_0
046A8A A2 6A 04    0413*  	dl room_00_1
046A8D B4 6A 04    0414*  	dl room_00_2
046A90             0415*  
046A90 6D 61 70 73 0416*  room_00_0: db "maps/map_00_0.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       30 2E 62 69 
       6E 00       
046AA2 6D 61 70 73 0417*  room_00_1: db "maps/map_00_1.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       31 2E 62 69 
       6E 00       
046AB4 6D 61 70 73 0418*  room_00_2: db "maps/map_00_2.bin",0
       2F 6D 61 70 
       5F 30 30 5F 
       32 2E 62 69 
       6E 00       
046AC6             0016   	include "src/asm/render.asm"
046AC6             0001*  ; #### RENDERING SCRATCH VARIABLES ####
046AC6             0002*  ; first three bytes of cell_status record in little-endian order
046AC6             0003*  to_cell_status:
046AC6             0004*  to_map_type_status: ds 1
046AC7             0005*  to_img_idx: ds 1
046AC8             0006*  to_obj_id: ds 1
046AC9             0007*  ; fourth byte of cell_status record
046AC9             0008*  to_sprite_id: ds 1
046ACA             0009*  
046ACA             0010*  to_poly_id: ds 1
046ACB             0011*  to_buffer_id: ds 3
046ACE             0012*  
046ACE             0013*  cur_cell_views: ds 3
046AD1             0014*  
046AD1             0015*  view_distance: equ 5 ; furthest player can see or be seen in map units
046AD1             0016*  
046AD1 03 20 00    0017*  bj_health_image: dl BUF_UI_BJ_100 ; 100% health default
046AD4             0018*  
046AD4             0019*  ; render background as a prelude to rendering panels and sprites
046AD4             0020*  ; hl is the buffer id, bc and de are plot_x and plot_y
046AD4             0021*  render_background:
046AD4             0022*  ; back up everything
046AD4 C5          0023*      push bc
046AD5 D5          0024*      push de
046AD6 E5          0025*      push hl
046AD7             0026*  ; plot background
046AD7 AF          0027*      xor a ; color mode
046AD8 0E 08       0028*      ld c,c_grey_dk ; color
046ADA CD 6E AF 04 0029*      call vdu_gcol_fg
046ADE 01 00 00 00 0030*      ld bc,0 ; x0
046AE2 11 00 00 00 0031*      ld de,0 ; y0
046AE6 DD 21 3F 01 0032*      ld ix,319
       00          
046AEB FD 21 50 00 0033*      ld iy,80
       00          
046AF0 CD BB B2 04 0034*      call vdu_plot_rf
046AF4 AF          0035*      xor a ; color mode
046AF5 0E 07       0036*      ld c,c_grey ; color
046AF7 CD 6E AF 04 0037*      call vdu_gcol_fg
046AFB 01 00 00 00 0038*      ld bc,0 ; x0
046AFF 11 50 00 00 0039*      ld de,80 ; y0
046B03 DD 21 3F 01 0040*      ld ix,319
       00          
046B08 FD 21 9F 00 0041*      ld iy,159
       00          
046B0D CD BB B2 04 0042*      call vdu_plot_rf
046B11             0043*  ; plot the background
046B11 E1          0044*      pop hl ; get back the buffer id
046B12 CD AD B0 04 0045*      call vdu_buff_select
046B16 D1          0046*      pop de ; get back plot_y
046B17 C1          0047*      pop bc ; get back plot_x
046B18 CD 7E B2 04 0048*      call vdu_plot_bmp
046B1C C9          0049*      ret
046B1D             0050*  
046B1D             0051*  ; render a 3D panel
046B1D             0052*  ; inputs: to_poly_id set, to_buffer_id set
046B1D             0053*  render_panel:
046B1D             0054*  ; make the bitmap buffer active
046B1D 2A CB 6A 04 0055*      ld hl,(to_buffer_id)
046B21 CD AD B0 04 0056*      call vdu_buff_select
046B25             0057*  ; get the coordinates of the panel
046B25 DD 21 55 6D 0058*      ld ix,polys_lookup_plot ; pointer to polys lookup table
       04          
046B2A             0059*  ; get the panel's poly_id
046B2A 3A CA 6A 04 0060*      ld a,(to_poly_id)
046B2E             0061*  ; multiply a by 6 to get the offset
046B2E 47          0062*      ld b,a
046B2F 0E 06       0063*      ld c,6
046B31 ED 4C       0064*      mlt bc
046B33             0065*  ; add the offset to the lookup table
046B33 DD 09       0066*      add ix,bc
046B35             0067*  ; get the panel coordinates
046B35 DD 07 00    0068*      ld bc,(ix) ; plot_x
046B38 DD 17 03    0069*      ld de,(ix+3) ; plot_y
046B3B             0070*  ; plot that mofo and go home
046B3B CD 7E B2 04 0071*      call vdu_plot_bmp
046B3F C9          0072*      ret
046B40             0073*  
046B40             0074*  ; render a 3D sprite
046B40             0075*  ; inputs: a is sprite_id, to_poly_id set, to_cell_status fields set
046B40             0076*  ; (ix should also be pointed to cell_status record but we don't depend on it for the time being)
046B40             0077*  render_sprite:
046B40             0078*  ; look up sprite_obj in sprite table
046B40 FD 21 00 FC 0079*      ld iy,sprite_table_base
       B7          
046B45 47          0080*      ld b,a ; sprite id
046B46 0E 10       0081*      ld c,sprite_record_size
046B48 ED 4C       0082*      mlt bc
046B4A FD 09       0083*      add iy,bc ; iy points to sprite record
046B4C FD 22 4C A6 0084*      ld (sprite_table_pointer),iy
       04          
046B51             0085*  ; get sprite imgs lookup
046B51 FD 7E 01    0086*      ld a,(iy+sprite_obj) ; a is sprite_obj
046B54 FD 21 46 70 0087*      ld iy,sprite_imgs_lookup ; base address of sprite_imgs lookup table
       04          
046B59 47          0088*      ld b,a
046B5A 0E 03       0089*      ld c,3 ; 3 bytes per record
046B5C ED 4C       0090*      mlt bc
046B5E FD 09       0091*      add iy,bc ; iy points to the sprite's sprite_imgs_lookup record
046B60 FD 37 00    0092*      ld iy,(iy) ; iy is the base address of the sprite's image defs lookup
046B63             0093*  ; convert to_poly_id to sprite_poly
046B63 21 19 70 04 0094*      ld hl,sprite_polys_lookup
046B67 3A CA 6A 04 0095*      ld a,(to_poly_id)
046B6B 01 00 00 00 0096*      ld bc,0  ; make sure bcu and b are zero
046B6F 4F          0097*      ld c,a
046B70 09          0098*      add hl,bc ; hl points to the sprite's poly id
046B71             0099*  ; get the sprites image defs for the particular poly id
046B71 7E          0100*      ld a,(hl)
046B72 47          0101*      ld b,a
046B73 0E 09       0102*      ld c,9  ; 9 bytes per record
046B75 ED 4C       0103*      mlt bc
046B77 FD 09       0104*      add iy,bc ; iy is the offset to the sprite's image def
046B79             0105*  ; select buffer
046B79 FD 27 06    0106*      ld hl,(iy+6)
046B7C CD AD B0 04 0107*      call vdu_buff_select
046B80             0108*  ; plot sprite
046B80 FD 07 00    0109*      ld bc,(iy+0) ; plot_x
046B83 FD 17 03    0110*      ld de,(iy+3) ; plot_y
046B86 CD 7E B2 04 0111*      call vdu_plot_bmp
046B8A C9          0112*      ret
046B8B             0113*  
046B8B             0114*  ; render the object in a given cell and poly_id
046B8B             0115*  ; inputs: to_poly_id set, d,e are the cell coords
046B8B             0116*  render_cell:
046B8B             0117*  ; get the cell to render's cell_status data and store it in scratch
046B8B CD 4A 68 04 0118*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
046B8F DD 27 00    0119*      ld hl,(ix) ; l = to_map_type_status, h = to_img_idx, hlu = to_obj_id
046B92 22 C6 6A 04 0120*      ld (to_cell_status),hl
046B96             0121*  ; get sprite_id from cell_status lut
046B96 DD 7E 03    0122*      ld a,(ix+map_sprite_id)
046B99 FE FF       0123*      cp 255 ; value if no sprite present
046B9B C2 40 6B 04 0124*      jp nz,render_sprite
046B9F             0125*  ; get cell's render_type
046B9F 7D          0126*      ld a,l ; map_type_status
046BA0 E6 02       0127*      and 2 ; mask off everything but lowest two bits
046BA2 28 02       0128*      jr z,@cube ; render_type_cube is 0
046BA4 18 32       0129*      jr @nodraw ; placeholder for future implementation TODO
046BA6             0130*  @cube:
046BA6             0131*      ; get map_img_idx from cell_status lut
046BA6 3A C7 6A 04 0132*      ld a,(to_img_idx)
046BAA FE FF       0133*      cp 255 ; value for cell with nothing to draw
046BAC 28 2A       0134*      jr z,@nodraw
046BAE             0135*  ; prepare render_panel ; inputs: to_poly_id set, to_buffer_id set
046BAE 21 90 6E 04 0136*      ld hl,cube_img_idx_lookup
046BB2 47          0137*      ld b,a
046BB3 0E 03       0138*      ld c,3 ; three bytes per record
046BB5 ED 4C       0139*      mlt bc
046BB7 09          0140*      add hl,bc ; hl points to the cube's base buffer id
046BB8 ED 27       0141*      ld hl,(hl) ; hl is the base buffer id
046BBA EB          0142*      ex de,hl ; stash the base buffer id in de for later
046BBB 21 63 6E 04 0143*      ld hl,cube_poly_idx_lookup
046BBF 3A CA 6A 04 0144*      ld a,(to_poly_id)
046BC3 01 00 00 00 0145*      ld bc,0 ; make sure bcu is zero
046BC7 4F          0146*      ld c,a
046BC8 09          0147*      add hl,bc ; hl is the buffer id index address
046BC9 7E          0148*      ld a,(hl) ; a is the buffer id index value
046BCA 21 00 00 00 0149*      ld hl,0 ; make sure hlu is zero
046BCE 6F          0150*      ld l,a ; hl is the buffer id index value
046BCF 19          0151*      add hl,de ; hl is the buffer id
046BD0 22 CB 6A 04 0152*      ld (to_buffer_id),hl
046BD4 C3 1D 6B 04 0153*      jp render_panel
046BD8             0154*  @nodraw:
046BD8 C9          0155*      ret
046BD9             0156*  
046BD9             0157*  ; render a full 3d scene
046BD9             0158*  ; inputs: cur_x, cur_y, orientation set
046BD9             0159*  ; outputs: pretty pictures
046BD9             0160*  ; destroys: everything
046BD9             0161*  render_scene:
046BD9             0162*  ; clear the screen
046BD9 CD D4 6A 04 0163*      call render_background
046BDD             0164*  ; get current map position and camera orientation
046BDD ED 5B 52 B9 0165*      ld de,(cur_x) ; d,e = cur_y,x
       04          
046BE2 CD 4A 68 04 0166*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
046BE6             0167*  ; get cell_views address for this cell and orientation
046BE6 3A 51 B9 04 0168*      ld a,(orientation)
046BEA 5F          0169*      ld e,a
046BEB 16 06       0170*      ld d,6 ; 6 bytes per orientation
046BED ED 5C       0171*      mlt de ; de = orientation offset
046BEF EB          0172*      ex de,hl ; hl = orientation offset
046BF0 06 18       0173*      ld b,24 ; 24 bytes per cell in cell_views lut
046BF2 ED 4C       0174*      mlt bc ; bc = offset from base address of cell_views lut
046BF4 09          0175*      add hl,bc ; hl = total offset from cell_views base address
046BF5 EB          0176*      ex de,hl ; becaue we can't add iy to hl
046BF6 FD 21 00 E4 0177*      ld iy,cell_views ; base address of cell_views lut
       B7          
046BFB FD 19       0178*      add iy,de ; iy = cell_views address
046BFD FD 22 CE 6A 0179*      ld (cur_cell_views),iy
       04          
046C02             0180*  ; cycle through the cell views masks and render the appropriate objects
046C02 01 00 46 28 0181*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
046C06 AF          0182*      xor a ; poly_id
046C07 32 CA 6A 04 0183*      ld (to_poly_id),a
046C0B             0184*  @loop:
046C0B ED 43 17 6C 0185*      ld (@bit_iy+2),bc
       04          
046C10 FD 2A CE 6A 0186*      ld iy,(cur_cell_views)
       04          
046C15             0187*  @bit_iy:
046C15 FD CB 00 46 0188*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
046C19 28 21       0189*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
046C1B             0190*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
046C1B 3A CA 6A 04 0191*      ld a,(to_poly_id)
046C1F 4F          0192*      ld c,a ; poly_id
046C20 3A 51 B9 04 0193*      ld a,(orientation)
046C24 CD 22 6D 04 0194*      call get_polys_deltas ; d,e = y,x deltas
046C28 3A 52 B9 04 0195*      ld a,(cur_x)
046C2C 83          0196*      add a,e
046C2D 5F          0197*      ld e,a
046C2E 3A 53 B9 04 0198*      ld a,(cur_y)
046C32 82          0199*      add a,d
046C33 57          0200*      ld d,a
046C34 3A CA 6A 04 0201*      ld a,(to_poly_id)
046C38 CD 8B 6B 04 0202*      call render_cell ; d,e = to_render y,x coords, we don't need to worry about the modulo 16
046C3C             0203*  @next_poly:
046C3C ED 4B 17 6C 0204*      ld bc,(@bit_iy+2)
       04          
046C41 3A CA 6A 04 0205*      ld a,(to_poly_id)
046C45 3C          0206*      inc a ; a is next poly_id
046C46 32 CA 6A 04 0207*      ld (to_poly_id),a
046C4A FE 2D       0208*      cp num_polys
046C4C 28 0D       0209*      jr z,@end
046C4E 3E 08       0210*      ld a,8
046C50 80          0211*      add a,b
046C51 47          0212*      ld b,a ; bit tested codes to 0x46 + b/8
046C52 FE 86       0213*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
046C54 20 B5       0214*      jr nz,@loop
046C56 06 46       0215*      ld b,0x46
046C58 0C          0216*      inc c ; iy address offset
046C59 18 B0       0217*      jr @loop
046C5B             0218*  @end:
046C5B             0219*  ; draw the graphic portions of the ui
046C5B 21 05 20 00 0220*  	ld hl,BUF_UI_LOWER_PANEL
046C5F CD AD B0 04 0221*      call vdu_buff_select
046C63 01 00 00 00 0222*  	ld bc,0 ; x
046C67 11 A0 00 00 0223*  	ld de,160 ; y
046C6B CD 7E B2 04 0224*  	call vdu_plot_bmp
046C6F             0225*  
046C6F 2A 6D B9 04 0226*      ld hl,(plyr_wpn_ui_lg)
046C73 ED 5B 7F B9 0227*      ld de,(plyr_wpn_anim_fr)
       04          
046C78 19          0228*      add hl,de
046C79 CD AD B0 04 0229*      call vdu_buff_select
046C7D 01 80 00 00 0230*      ld bc,128 ; x
046C81 11 60 00 00 0231*      ld de,96 ; y
046C85 CD 7E B2 04 0232*      call vdu_plot_bmp
046C89             0233*  
046C89 2A 6A B9 04 0234*      ld hl,(plyr_wpn_ui_sm)
046C8D CD AD B0 04 0235*      call vdu_buff_select
046C91 01 0A 01 00 0236*      ld bc,266 ; x
046C95 11 B2 00 00 0237*      ld de,178 ; y
046C99 CD 7E B2 04 0238*      call vdu_plot_bmp
046C9D             0239*  
046C9D 2A D1 6A 04 0240*      ld hl,(bj_health_image)
046CA1 CD AD B0 04 0241*      call vdu_buff_select
046CA5 01 84 00 00 0242*      ld bc,132 ; x
046CA9 11 AA 00 00 0243*      ld de,170 ; y
046CAD CD 7E B2 04 0244*      call vdu_plot_bmp
046CB1             0245*  
046CB1             0246*  ; draw the text portions of the ui
046CB1 0E 16       0247*      ld c,22 ; x
046CB3 06 03       0248*      ld b,3 ; y
046CB5 CD 81 B0 04 0249*      call vdu_move_cursor
046CB9 2A 82 B9 04 0250*      ld hl,(plyr_ammo)
046CBD CD 91 B5 04 0251*      call printDec
046CC1             0252*  
046CC1 0E 11       0253*      ld c,17 ; x
046CC3 06 03       0254*      ld b,3 ; y
046CC5 CD 81 B0 04 0255*      call vdu_move_cursor
046CC9 2A 43 B9 04 0256*      ld hl,(plyr_health)
046CCD CD 91 B5 04 0257*      call printDec
046CD1             0258*  
046CD1             0259*  ; DEBUG
046CD1 0E 11       0260*      ld c,17 ; x
046CD3 06 04       0261*      ld b,4  ; y
046CD5 CD 81 B0 04 0262*      call vdu_move_cursor
046CD9 2A E0 BB 04 0263*      ld hl,(last_damage)
046CDD CD 91 B5 04 0264*      call printDec
046CE1             0265*  ; END DEBUG
046CE1             0266*  
046CE1 0E 07       0267*      ld c,7; x
046CE3 06 03       0268*      ld b,3 ; y
046CE5 CD 81 B0 04 0269*      call vdu_move_cursor
046CE9 2A 49 B9 04 0270*      ld hl,(plyr_lives)
046CED CD 91 B5 04 0271*      call printDec
046CF1             0272*  
046CF1 0E 03       0273*      ld c,3 ; x
046CF3 06 03       0274*      ld b,3 ; y
046CF5 CD 81 B0 04 0275*      call vdu_move_cursor
046CF9 2A 40 B9 04 0276*      ld hl,(plyr_score)
046CFD CD 91 B5 04 0277*      call printDec
046D01             0278*  
046D01 0E 01       0279*      ld c,1 ; x
046D03 06 03       0280*      ld b,3 ; y
046D05 CD 81 B0 04 0281*      call vdu_move_cursor
046D09 3A 4C B9 04 0282*      ld a,(cur_floor)
046D0D CD 73 B5 04 0283*      call printHex8
046D11             0284*  
046D11 0E 01       0285*      ld c,1 ; x
046D13 06 04       0286*      ld b,4 ; y
046D15 CD 81 B0 04 0287*      call vdu_move_cursor
046D19 3A 4D B9 04 0288*      ld a,(cur_room)
046D1D CD 73 B5 04 0289*      call printHex8
046D21             0290*  
046D21             0291*  ; ; DEBUG
046D21             0292*      ; ld c,1 ; x
046D21             0293*      ; ld b,5 ; y
046D21             0294*      ; call vdu_move_cursor
046D21             0295*      ; ld hl,cur_x
046D21             0296*      ; ld a,5
046D21             0297*      ; call dumpMemoryHex
046D21             0298*  
046D21             0299*      ; ld c,1 ; x
046D21             0300*      ; ld b,7 ; y
046D21             0301*      ; call vdu_move_cursor
046D21             0302*      ; ld hl,room_flags
046D21             0303*      ; ld a,10
046D21             0304*      ; call dumpMemoryHex
046D21             0305*  
046D21             0306*  ;     ld c,1 ; x
046D21             0307*  ;     ld b,7 ; y
046D21             0308*  ;     call vdu_move_cursor
046D21             0309*  ;     ld hl,sprite_new_x
046D21             0310*  ;     ld a,3
046D21             0311*  ;     call dumpMemoryHex
046D21             0312*  
046D21             0313*  ;     ld c,1 ; x
046D21             0314*  ;     ld b,8 ; y
046D21             0315*  ;     call vdu_move_cursor
046D21             0316*  ;     ld hl,cur_x
046D21             0317*  ;     ld a,3
046D21             0318*  ;     call dumpMemoryHex
046D21             0319*  ; ; END DEBUG
046D21             0320*  
046D21             0321*  ; all done
046D21 C9          0322*      ret
046D22             0323*  
046D22             0324*  ; get the map coordinates deltas for a given orientation and poly_id
046D22             0325*  ; inputs: a is the orientation, c is the poly_id
046D22             0326*  ; returns: d,e are the y,x deltas, deu will be the next byte in the lookup table and should be ignored
046D22             0327*  get_polys_deltas:
046D22             0328*  ; get the base address of the orientation-specific deltas lookup table
046D22 FE 00       0329*      cp 0
046D24 28 11       0330*      jr z,@orientation_0
046D26 FE 01       0331*      cp 1
046D28 28 13       0332*      jr z,@orientation_1
046D2A FE 02       0333*      cp 2
046D2C 28 15       0334*      jr z,@orientation_2
046D2E FE 03       0335*      cp 3
046D30 28 17       0336*      jr z,@orientation_3
046D32             0337*  ; return zeros if not found
046D32 11 00 00 00 0338*      ld de,0
046D36 C9          0339*      ret
046D37             0340*  @orientation_0: ; north
046D37 21 B1 6E 04 0341*      ld hl,polys_map_deltas_0
046D3B 18 10       0342*      jr @get_deltas
046D3D             0343*  @orientation_1: ; east
046D3D 21 0B 6F 04 0344*      ld hl,polys_map_deltas_1
046D41 18 0A       0345*      jr @get_deltas
046D43             0346*  @orientation_2: ; south
046D43 21 65 6F 04 0347*      ld hl,polys_map_deltas_2
046D47 18 04       0348*      jr @get_deltas
046D49             0349*  @orientation_3: ; west
046D49 21 BF 6F 04 0350*      ld hl,polys_map_deltas_3
046D4D             0351*  @get_deltas:
046D4D 06 02       0352*      ld b,2 ; 2 bytes per record
046D4F ED 4C       0353*      mlt bc ; poly_id * 2
046D51 09          0354*      add hl,bc ; hl points to the deltas
046D52 ED 17       0355*      ld de,(hl) ;d,e = dy,dx
046D54 C9          0356*      ret
046D55             0017   	include "src/asm/polys.asm"
046D55             0001*  num_polys: equ 45
046D55             0002*  
046D55             0003*  polys_lookup_plot:
046D55             0004*  ;	   plot_x,  plot_y:
046D55 00 00 00 3E 0005*  	dl 0x000000,0x00003E ; poly_id:0 00
       00 00       
046D5B 23 00 00 3E 0006*  	dl 0x000023,0x00003E ; poly_id:1 01
       00 00       
046D61 47 00 00 3E 0007*  	dl 0x000047,0x00003E ; poly_id:2 02
       00 00       
046D67 6A 00 00 3E 0008*  	dl 0x00006A,0x00003E ; poly_id:3 03
       00 00       
046D6D 8E 00 00 3E 0009*  	dl 0x00008E,0x00003E ; poly_id:4 04
       00 00       
046D73 B1 00 00 3E 0010*  	dl 0x0000B1,0x00003E ; poly_id:5 05
       00 00       
046D79 D5 00 00 3E 0011*  	dl 0x0000D5,0x00003E ; poly_id:6 06
       00 00       
046D7F F8 00 00 3E 0012*  	dl 0x0000F8,0x00003E ; poly_id:7 07
       00 00       
046D85 1C 01 00 3E 0013*  	dl 0x00011C,0x00003E ; poly_id:8 08
       00 00       
046D8B 00 00 00 39 0014*  	dl 0x000000,0x000039 ; poly_id:9 09
       00 00       
046D91 2E 00 00 39 0015*  	dl 0x00002E,0x000039 ; poly_id:10 0A
       00 00       
046D97 5B 00 00 39 0016*  	dl 0x00005B,0x000039 ; poly_id:11 0B
       00 00       
046D9D 89 00 00 39 0017*  	dl 0x000089,0x000039 ; poly_id:12 0C
       00 00       
046DA3 B1 00 00 39 0018*  	dl 0x0000B1,0x000039 ; poly_id:13 0D
       00 00       
046DA9 D5 00 00 39 0019*  	dl 0x0000D5,0x000039 ; poly_id:14 0E
       00 00       
046DAF F8 00 00 39 0020*  	dl 0x0000F8,0x000039 ; poly_id:15 0F
       00 00       
046DB5 1C 01 00 39 0021*  	dl 0x00011C,0x000039 ; poly_id:16 10
       00 00       
046DBB 00 00 00 39 0022*  	dl 0x000000,0x000039 ; poly_id:17 11
       00 00       
046DC1 2E 00 00 39 0023*  	dl 0x00002E,0x000039 ; poly_id:18 12
       00 00       
046DC7 5B 00 00 39 0024*  	dl 0x00005B,0x000039 ; poly_id:19 13
       00 00       
046DCD 89 00 00 39 0025*  	dl 0x000089,0x000039 ; poly_id:20 14
       00 00       
046DD3 B6 00 00 39 0026*  	dl 0x0000B6,0x000039 ; poly_id:21 15
       00 00       
046DD9 E4 00 00 39 0027*  	dl 0x0000E4,0x000039 ; poly_id:22 16
       00 00       
046DDF 11 01 00 39 0028*  	dl 0x000111,0x000039 ; poly_id:23 17
       00 00       
046DE5 00 00 00 30 0029*  	dl 0x000000,0x000030 ; poly_id:24 18
       00 00       
046DEB 3F 00 00 30 0030*  	dl 0x00003F,0x000030 ; poly_id:25 19
       00 00       
046DF1 80 00 00 30 0031*  	dl 0x000080,0x000030 ; poly_id:26 1A
       00 00       
046DF7 B6 00 00 30 0032*  	dl 0x0000B6,0x000030 ; poly_id:27 1B
       00 00       
046DFD E4 00 00 30 0033*  	dl 0x0000E4,0x000030 ; poly_id:28 1C
       00 00       
046E03 11 01 00 30 0034*  	dl 0x000111,0x000030 ; poly_id:29 1D
       00 00       
046E09 00 00 00 30 0035*  	dl 0x000000,0x000030 ; poly_id:30 1E
       00 00       
046E0F 3F 00 00 30 0036*  	dl 0x00003F,0x000030 ; poly_id:31 1F
       00 00       
046E15 80 00 00 30 0037*  	dl 0x000080,0x000030 ; poly_id:32 20
       00 00       
046E1B C0 00 00 30 0038*  	dl 0x0000C0,0x000030 ; poly_id:33 21
       00 00       
046E21 00 01 00 30 0039*  	dl 0x000100,0x000030 ; poly_id:34 22
       00 00       
046E27 00 00 00 1A 0040*  	dl 0x000000,0x00001A ; poly_id:35 23
       00 00       
046E2D 6A 00 00 1A 0041*  	dl 0x00006A,0x00001A ; poly_id:36 24
       00 00       
046E33 C0 00 00 1A 0042*  	dl 0x0000C0,0x00001A ; poly_id:37 25
       00 00       
046E39 00 01 00 1A 0043*  	dl 0x000100,0x00001A ; poly_id:38 26
       00 00       
046E3F 00 00 00 1A 0044*  	dl 0x000000,0x00001A ; poly_id:39 27
       00 00       
046E45 6A 00 00 1A 0045*  	dl 0x00006A,0x00001A ; poly_id:40 28
       00 00       
046E4B D5 00 00 1A 0046*  	dl 0x0000D5,0x00001A ; poly_id:41 29
       00 00       
046E51 00 00 00 00 0047*  	dl 0x000000,0x000000 ; poly_id:42 2A
       00 00       
046E57 D5 00 00 00 0048*  	dl 0x0000D5,0x000000 ; poly_id:43 2B
       00 00       
046E5D 00 00 00 00 0049*  	dl 0x000000,0x000000 ; poly_id:44 2C
       00 00       
046E63             0050*  
046E63             0051*  cube_poly_idx_lookup:
046E63             0052*  ;	 img_idx,  poly_id
046E63 00          0053*  	db 0 ; poly_id:0 0
046E64 00          0054*  	db 0 ; poly_id:1 1
046E65 00          0055*  	db 0 ; poly_id:2 2
046E66 00          0056*  	db 0 ; poly_id:3 3
046E67 00          0057*  	db 0 ; poly_id:4 4
046E68 00          0058*  	db 0 ; poly_id:5 5
046E69 00          0059*  	db 0 ; poly_id:6 6
046E6A 00          0060*  	db 0 ; poly_id:7 7
046E6B 00          0061*  	db 0 ; poly_id:8 8
046E6C 01          0062*  	db 1 ; poly_id:9 9
046E6D 02          0063*  	db 2 ; poly_id:10 10
046E6E 03          0064*  	db 3 ; poly_id:11 11
046E6F 04          0065*  	db 4 ; poly_id:12 12
046E70 05          0066*  	db 5 ; poly_id:13 13
046E71 06          0067*  	db 6 ; poly_id:14 14
046E72 07          0068*  	db 7 ; poly_id:15 15
046E73 08          0069*  	db 8 ; poly_id:16 16
046E74 09          0070*  	db 9 ; poly_id:17 17
046E75 09          0071*  	db 9 ; poly_id:18 18
046E76 09          0072*  	db 9 ; poly_id:19 19
046E77 09          0073*  	db 9 ; poly_id:20 20
046E78 09          0074*  	db 9 ; poly_id:21 21
046E79 09          0075*  	db 9 ; poly_id:22 22
046E7A 09          0076*  	db 9 ; poly_id:23 23
046E7B 0A          0077*  	db 10 ; poly_id:24 24
046E7C 0B          0078*  	db 11 ; poly_id:25 25
046E7D 0C          0079*  	db 12 ; poly_id:26 26
046E7E 0D          0080*  	db 13 ; poly_id:27 27
046E7F 0E          0081*  	db 14 ; poly_id:28 28
046E80 0F          0082*  	db 15 ; poly_id:29 29
046E81 10          0083*  	db 16 ; poly_id:30 30
046E82 10          0084*  	db 16 ; poly_id:31 31
046E83 10          0085*  	db 16 ; poly_id:32 32
046E84 10          0086*  	db 16 ; poly_id:33 33
046E85 10          0087*  	db 16 ; poly_id:34 34
046E86 11          0088*  	db 17 ; poly_id:35 35
046E87 12          0089*  	db 18 ; poly_id:36 36
046E88 13          0090*  	db 19 ; poly_id:37 37
046E89 14          0091*  	db 20 ; poly_id:38 38
046E8A 15          0092*  	db 21 ; poly_id:39 39
046E8B 15          0093*  	db 21 ; poly_id:40 40
046E8C 15          0094*  	db 21 ; poly_id:41 41
046E8D 16          0095*  	db 22 ; poly_id:42 42
046E8E 17          0096*  	db 23 ; poly_id:43 43
046E8F 18          0097*  	db 24 ; poly_id:44 44
046E90             0098*  
046E90             0099*  cube_img_idx_lookup:
046E90             0100*  ;	 img_idx,  bank_id,  obj_id,  tile_name
046E90 00 01 00    0101*  	dl BUF_10_004 ; idx:0 render_obj_id:10 LIGHT GREY WALL
046E93 19 01 00    0102*  	dl BUF_11_004 ; idx:1 render_obj_id:11 JAIL CELL
046E96 32 01 00    0103*  	dl BUF_12_004 ; idx:2 render_obj_id:12 STONE ARCH BIRD
046E99 4B 01 00    0104*  	dl BUF_13_004 ; idx:3 render_obj_id:13 DARK GREY WALL
046E9C 64 01 00    0105*  	dl BUF_14_004 ; idx:4 render_obj_id:14 WOOD WALL
046E9F 7D 01 00    0106*  	dl BUF_15_004 ; idx:5 render_obj_id:15 HANGING FLAG
046EA2 96 01 00    0107*  	dl BUF_16_004 ; idx:6 render_obj_id:16 WOOD EAGLE
046EA5 AF 01 00    0108*  	dl BUF_17_004 ; idx:7 render_obj_id:17 BLUE WALL
046EA8 C8 01 00    0109*  	dl BUF_57_004 ; idx:8 render_obj_id:57 REGULAR DOOR
046EAB E1 01 00    0110*  	dl BUF_58_004 ; idx:9 render_obj_id:58 ELEVATOR SWITCH
046EAE FA 01 00    0111*  	dl BUF_59_004 ; idx:10 render_obj_id:59 ELEVATOR DOOR
046EB1             0112*  
046EB1             0113*  ; map_delta_x,  map_delta_y
046EB1             0114*  polys_map_deltas_0: ; north orientation
046EB1 FC FB       0115*  	db 0xFC,0xFB ; poly_id:0 00
046EB3 FD FB       0116*  	db 0xFD,0xFB ; poly_id:1 01
046EB5 FE FB       0117*  	db 0xFE,0xFB ; poly_id:2 02
046EB7 FF FB       0118*  	db 0xFF,0xFB ; poly_id:3 03
046EB9 00 FB       0119*  	db 0x00,0xFB ; poly_id:4 04
046EBB 01 FB       0120*  	db 0x01,0xFB ; poly_id:5 05
046EBD 02 FB       0121*  	db 0x02,0xFB ; poly_id:6 06
046EBF 03 FB       0122*  	db 0x03,0xFB ; poly_id:7 07
046EC1 04 FB       0123*  	db 0x04,0xFB ; poly_id:8 08
046EC3 FC FC       0124*  	db 0xFC,0xFC ; poly_id:9 09
046EC5 FD FC       0125*  	db 0xFD,0xFC ; poly_id:10 0A
046EC7 FE FC       0126*  	db 0xFE,0xFC ; poly_id:11 0B
046EC9 FF FC       0127*  	db 0xFF,0xFC ; poly_id:12 0C
046ECB 01 FC       0128*  	db 0x01,0xFC ; poly_id:13 0D
046ECD 02 FC       0129*  	db 0x02,0xFC ; poly_id:14 0E
046ECF 03 FC       0130*  	db 0x03,0xFC ; poly_id:15 0F
046ED1 04 FC       0131*  	db 0x04,0xFC ; poly_id:16 10
046ED3 FD FC       0132*  	db 0xFD,0xFC ; poly_id:17 11
046ED5 FE FC       0133*  	db 0xFE,0xFC ; poly_id:18 12
046ED7 FF FC       0134*  	db 0xFF,0xFC ; poly_id:19 13
046ED9 00 FC       0135*  	db 0x00,0xFC ; poly_id:20 14
046EDB 01 FC       0136*  	db 0x01,0xFC ; poly_id:21 15
046EDD 02 FC       0137*  	db 0x02,0xFC ; poly_id:22 16
046EDF 03 FC       0138*  	db 0x03,0xFC ; poly_id:23 17
046EE1 FD FD       0139*  	db 0xFD,0xFD ; poly_id:24 18
046EE3 FE FD       0140*  	db 0xFE,0xFD ; poly_id:25 19
046EE5 FF FD       0141*  	db 0xFF,0xFD ; poly_id:26 1A
046EE7 01 FD       0142*  	db 0x01,0xFD ; poly_id:27 1B
046EE9 02 FD       0143*  	db 0x02,0xFD ; poly_id:28 1C
046EEB 03 FD       0144*  	db 0x03,0xFD ; poly_id:29 1D
046EED FE FD       0145*  	db 0xFE,0xFD ; poly_id:30 1E
046EEF FF FD       0146*  	db 0xFF,0xFD ; poly_id:31 1F
046EF1 00 FD       0147*  	db 0x00,0xFD ; poly_id:32 20
046EF3 01 FD       0148*  	db 0x01,0xFD ; poly_id:33 21
046EF5 02 FD       0149*  	db 0x02,0xFD ; poly_id:34 22
046EF7 FE FE       0150*  	db 0xFE,0xFE ; poly_id:35 23
046EF9 FF FE       0151*  	db 0xFF,0xFE ; poly_id:36 24
046EFB 01 FE       0152*  	db 0x01,0xFE ; poly_id:37 25
046EFD 02 FE       0153*  	db 0x02,0xFE ; poly_id:38 26
046EFF FF FE       0154*  	db 0xFF,0xFE ; poly_id:39 27
046F01 00 FE       0155*  	db 0x00,0xFE ; poly_id:40 28
046F03 01 FE       0156*  	db 0x01,0xFE ; poly_id:41 29
046F05 FF FF       0157*  	db 0xFF,0xFF ; poly_id:42 2A
046F07 01 FF       0158*  	db 0x01,0xFF ; poly_id:43 2B
046F09 00 FF       0159*  	db 0x00,0xFF ; poly_id:44 2C
046F0B             0160*  
046F0B             0161*  polys_map_deltas_1: ; east orientation
046F0B 05 FC       0162*  	db 0x05,0xFC ; poly_id:0 00
046F0D 05 FD       0163*  	db 0x05,0xFD ; poly_id:1 01
046F0F 05 FE       0164*  	db 0x05,0xFE ; poly_id:2 02
046F11 05 FF       0165*  	db 0x05,0xFF ; poly_id:3 03
046F13 05 00       0166*  	db 0x05,0x00 ; poly_id:4 04
046F15 05 01       0167*  	db 0x05,0x01 ; poly_id:5 05
046F17 05 02       0168*  	db 0x05,0x02 ; poly_id:6 06
046F19 05 03       0169*  	db 0x05,0x03 ; poly_id:7 07
046F1B 05 04       0170*  	db 0x05,0x04 ; poly_id:8 08
046F1D 04 FC       0171*  	db 0x04,0xFC ; poly_id:9 09
046F1F 04 FD       0172*  	db 0x04,0xFD ; poly_id:10 0A
046F21 04 FE       0173*  	db 0x04,0xFE ; poly_id:11 0B
046F23 04 FF       0174*  	db 0x04,0xFF ; poly_id:12 0C
046F25 04 01       0175*  	db 0x04,0x01 ; poly_id:13 0D
046F27 04 02       0176*  	db 0x04,0x02 ; poly_id:14 0E
046F29 04 03       0177*  	db 0x04,0x03 ; poly_id:15 0F
046F2B 04 04       0178*  	db 0x04,0x04 ; poly_id:16 10
046F2D 04 FD       0179*  	db 0x04,0xFD ; poly_id:17 11
046F2F 04 FE       0180*  	db 0x04,0xFE ; poly_id:18 12
046F31 04 FF       0181*  	db 0x04,0xFF ; poly_id:19 13
046F33 04 00       0182*  	db 0x04,0x00 ; poly_id:20 14
046F35 04 01       0183*  	db 0x04,0x01 ; poly_id:21 15
046F37 04 02       0184*  	db 0x04,0x02 ; poly_id:22 16
046F39 04 03       0185*  	db 0x04,0x03 ; poly_id:23 17
046F3B 03 FD       0186*  	db 0x03,0xFD ; poly_id:24 18
046F3D 03 FE       0187*  	db 0x03,0xFE ; poly_id:25 19
046F3F 03 FF       0188*  	db 0x03,0xFF ; poly_id:26 1A
046F41 03 01       0189*  	db 0x03,0x01 ; poly_id:27 1B
046F43 03 02       0190*  	db 0x03,0x02 ; poly_id:28 1C
046F45 03 03       0191*  	db 0x03,0x03 ; poly_id:29 1D
046F47 03 FE       0192*  	db 0x03,0xFE ; poly_id:30 1E
046F49 03 FF       0193*  	db 0x03,0xFF ; poly_id:31 1F
046F4B 03 00       0194*  	db 0x03,0x00 ; poly_id:32 20
046F4D 03 01       0195*  	db 0x03,0x01 ; poly_id:33 21
046F4F 03 02       0196*  	db 0x03,0x02 ; poly_id:34 22
046F51 02 FE       0197*  	db 0x02,0xFE ; poly_id:35 23
046F53 02 FF       0198*  	db 0x02,0xFF ; poly_id:36 24
046F55 02 01       0199*  	db 0x02,0x01 ; poly_id:37 25
046F57 02 02       0200*  	db 0x02,0x02 ; poly_id:38 26
046F59 02 FF       0201*  	db 0x02,0xFF ; poly_id:39 27
046F5B 02 00       0202*  	db 0x02,0x00 ; poly_id:40 28
046F5D 02 01       0203*  	db 0x02,0x01 ; poly_id:41 29
046F5F 01 FF       0204*  	db 0x01,0xFF ; poly_id:42 2A
046F61 01 01       0205*  	db 0x01,0x01 ; poly_id:43 2B
046F63 01 00       0206*  	db 0x01,0x00 ; poly_id:44 2C
046F65             0207*  
046F65             0208*  polys_map_deltas_2: ; south orientation
046F65 04 05       0209*  	db 0x04,0x05 ; poly_id:0 00
046F67 03 05       0210*  	db 0x03,0x05 ; poly_id:1 01
046F69 02 05       0211*  	db 0x02,0x05 ; poly_id:2 02
046F6B 01 05       0212*  	db 0x01,0x05 ; poly_id:3 03
046F6D 00 05       0213*  	db 0x00,0x05 ; poly_id:4 04
046F6F FF 05       0214*  	db 0xFF,0x05 ; poly_id:5 05
046F71 FE 05       0215*  	db 0xFE,0x05 ; poly_id:6 06
046F73 FD 05       0216*  	db 0xFD,0x05 ; poly_id:7 07
046F75 FC 05       0217*  	db 0xFC,0x05 ; poly_id:8 08
046F77 04 04       0218*  	db 0x04,0x04 ; poly_id:9 09
046F79 03 04       0219*  	db 0x03,0x04 ; poly_id:10 0A
046F7B 02 04       0220*  	db 0x02,0x04 ; poly_id:11 0B
046F7D 01 04       0221*  	db 0x01,0x04 ; poly_id:12 0C
046F7F FF 04       0222*  	db 0xFF,0x04 ; poly_id:13 0D
046F81 FE 04       0223*  	db 0xFE,0x04 ; poly_id:14 0E
046F83 FD 04       0224*  	db 0xFD,0x04 ; poly_id:15 0F
046F85 FC 04       0225*  	db 0xFC,0x04 ; poly_id:16 10
046F87 03 04       0226*  	db 0x03,0x04 ; poly_id:17 11
046F89 02 04       0227*  	db 0x02,0x04 ; poly_id:18 12
046F8B 01 04       0228*  	db 0x01,0x04 ; poly_id:19 13
046F8D 00 04       0229*  	db 0x00,0x04 ; poly_id:20 14
046F8F FF 04       0230*  	db 0xFF,0x04 ; poly_id:21 15
046F91 FE 04       0231*  	db 0xFE,0x04 ; poly_id:22 16
046F93 FD 04       0232*  	db 0xFD,0x04 ; poly_id:23 17
046F95 03 03       0233*  	db 0x03,0x03 ; poly_id:24 18
046F97 02 03       0234*  	db 0x02,0x03 ; poly_id:25 19
046F99 01 03       0235*  	db 0x01,0x03 ; poly_id:26 1A
046F9B FF 03       0236*  	db 0xFF,0x03 ; poly_id:27 1B
046F9D FE 03       0237*  	db 0xFE,0x03 ; poly_id:28 1C
046F9F FD 03       0238*  	db 0xFD,0x03 ; poly_id:29 1D
046FA1 02 03       0239*  	db 0x02,0x03 ; poly_id:30 1E
046FA3 01 03       0240*  	db 0x01,0x03 ; poly_id:31 1F
046FA5 00 03       0241*  	db 0x00,0x03 ; poly_id:32 20
046FA7 FF 03       0242*  	db 0xFF,0x03 ; poly_id:33 21
046FA9 FE 03       0243*  	db 0xFE,0x03 ; poly_id:34 22
046FAB 02 02       0244*  	db 0x02,0x02 ; poly_id:35 23
046FAD 01 02       0245*  	db 0x01,0x02 ; poly_id:36 24
046FAF FF 02       0246*  	db 0xFF,0x02 ; poly_id:37 25
046FB1 FE 02       0247*  	db 0xFE,0x02 ; poly_id:38 26
046FB3 01 02       0248*  	db 0x01,0x02 ; poly_id:39 27
046FB5 00 02       0249*  	db 0x00,0x02 ; poly_id:40 28
046FB7 FF 02       0250*  	db 0xFF,0x02 ; poly_id:41 29
046FB9 01 01       0251*  	db 0x01,0x01 ; poly_id:42 2A
046FBB FF 01       0252*  	db 0xFF,0x01 ; poly_id:43 2B
046FBD 00 01       0253*  	db 0x00,0x01 ; poly_id:44 2C
046FBF             0254*  
046FBF             0255*  polys_map_deltas_3: ; west orientation
046FBF FB 04       0256*  	db 0xFB,0x04 ; poly_id:0 00
046FC1 FB 03       0257*  	db 0xFB,0x03 ; poly_id:1 01
046FC3 FB 02       0258*  	db 0xFB,0x02 ; poly_id:2 02
046FC5 FB 01       0259*  	db 0xFB,0x01 ; poly_id:3 03
046FC7 FB 00       0260*  	db 0xFB,0x00 ; poly_id:4 04
046FC9 FB FF       0261*  	db 0xFB,0xFF ; poly_id:5 05
046FCB FB FE       0262*  	db 0xFB,0xFE ; poly_id:6 06
046FCD FB FD       0263*  	db 0xFB,0xFD ; poly_id:7 07
046FCF FB FC       0264*  	db 0xFB,0xFC ; poly_id:8 08
046FD1 FC 04       0265*  	db 0xFC,0x04 ; poly_id:9 09
046FD3 FC 03       0266*  	db 0xFC,0x03 ; poly_id:10 0A
046FD5 FC 02       0267*  	db 0xFC,0x02 ; poly_id:11 0B
046FD7 FC 01       0268*  	db 0xFC,0x01 ; poly_id:12 0C
046FD9 FC FF       0269*  	db 0xFC,0xFF ; poly_id:13 0D
046FDB FC FE       0270*  	db 0xFC,0xFE ; poly_id:14 0E
046FDD FC FD       0271*  	db 0xFC,0xFD ; poly_id:15 0F
046FDF FC FC       0272*  	db 0xFC,0xFC ; poly_id:16 10
046FE1 FC 03       0273*  	db 0xFC,0x03 ; poly_id:17 11
046FE3 FC 02       0274*  	db 0xFC,0x02 ; poly_id:18 12
046FE5 FC 01       0275*  	db 0xFC,0x01 ; poly_id:19 13
046FE7 FC 00       0276*  	db 0xFC,0x00 ; poly_id:20 14
046FE9 FC FF       0277*  	db 0xFC,0xFF ; poly_id:21 15
046FEB FC FE       0278*  	db 0xFC,0xFE ; poly_id:22 16
046FED FC FD       0279*  	db 0xFC,0xFD ; poly_id:23 17
046FEF FD 03       0280*  	db 0xFD,0x03 ; poly_id:24 18
046FF1 FD 02       0281*  	db 0xFD,0x02 ; poly_id:25 19
046FF3 FD 01       0282*  	db 0xFD,0x01 ; poly_id:26 1A
046FF5 FD FF       0283*  	db 0xFD,0xFF ; poly_id:27 1B
046FF7 FD FE       0284*  	db 0xFD,0xFE ; poly_id:28 1C
046FF9 FD FD       0285*  	db 0xFD,0xFD ; poly_id:29 1D
046FFB FD 02       0286*  	db 0xFD,0x02 ; poly_id:30 1E
046FFD FD 01       0287*  	db 0xFD,0x01 ; poly_id:31 1F
046FFF FD 00       0288*  	db 0xFD,0x00 ; poly_id:32 20
047001 FD FF       0289*  	db 0xFD,0xFF ; poly_id:33 21
047003 FD FE       0290*  	db 0xFD,0xFE ; poly_id:34 22
047005 FE 02       0291*  	db 0xFE,0x02 ; poly_id:35 23
047007 FE 01       0292*  	db 0xFE,0x01 ; poly_id:36 24
047009 FE FF       0293*  	db 0xFE,0xFF ; poly_id:37 25
04700B FE FE       0294*  	db 0xFE,0xFE ; poly_id:38 26
04700D FE 01       0295*  	db 0xFE,0x01 ; poly_id:39 27
04700F FE 00       0296*  	db 0xFE,0x00 ; poly_id:40 28
047011 FE FF       0297*  	db 0xFE,0xFF ; poly_id:41 29
047013 FF 01       0298*  	db 0xFF,0x01 ; poly_id:42 2A
047015 FF FF       0299*  	db 0xFF,0xFF ; poly_id:43 2B
047017 FF 00       0300*  	db 0xFF,0x00 ; poly_id:44 2C
047019             0301*  
047019             0302*  num_sprite_polys: equ 25
047019             0303*  
047019             0304*  sprite_polys_lookup:
047019             0305*  ;south_id 	; poly_id
047019 00          0306*  	db 0	; 0
04701A 01          0307*  	db 1	; 1
04701B 02          0308*  	db 2	; 2
04701C 03          0309*  	db 3	; 3
04701D 04          0310*  	db 4	; 4
04701E 05          0311*  	db 5	; 5
04701F 06          0312*  	db 6	; 6
047020 07          0313*  	db 7	; 7
047021 08          0314*  	db 8	; 8
047022 FF          0315*  	db 255	; 9
047023 FF          0316*  	db 255	; 10
047024 FF          0317*  	db 255	; 11
047025 FF          0318*  	db 255	; 12
047026 FF          0319*  	db 255	; 13
047027 FF          0320*  	db 255	; 14
047028 FF          0321*  	db 255	; 15
047029 FF          0322*  	db 255	; 16
04702A 09          0323*  	db 9	; 17
04702B 0A          0324*  	db 10	; 18
04702C 0B          0325*  	db 11	; 19
04702D 0C          0326*  	db 12	; 20
04702E 0D          0327*  	db 13	; 21
04702F 0E          0328*  	db 14	; 22
047030 0F          0329*  	db 15	; 23
047031 FF          0330*  	db 255	; 24
047032 FF          0331*  	db 255	; 25
047033 FF          0332*  	db 255	; 26
047034 FF          0333*  	db 255	; 27
047035 FF          0334*  	db 255	; 28
047036 FF          0335*  	db 255	; 29
047037 10          0336*  	db 16	; 30
047038 11          0337*  	db 17	; 31
047039 12          0338*  	db 18	; 32
04703A 13          0339*  	db 19	; 33
04703B 14          0340*  	db 20	; 34
04703C FF          0341*  	db 255	; 35
04703D FF          0342*  	db 255	; 36
04703E FF          0343*  	db 255	; 37
04703F FF          0344*  	db 255	; 38
047040 15          0345*  	db 21	; 39
047041 16          0346*  	db 22	; 40
047042 17          0347*  	db 23	; 41
047043 FF          0348*  	db 255	; 42
047044 FF          0349*  	db 255	; 43
047045 18          0350*  	db 24	; 44
047046             0351*  
047046             0352*  sprite_imgs_lookup:
047046             0353*  ;	 sprite_obj; render_obj_id
047046 82 70 04    0354*  	dl sprite_obj_000 ; render_obj_id:20
047049 63 71 04    0355*  	dl sprite_obj_001 ; render_obj_id:21
04704C 44 72 04    0356*  	dl sprite_obj_002 ; render_obj_id:22
04704F 25 73 04    0357*  	dl sprite_obj_003 ; render_obj_id:23
047052 06 74 04    0358*  	dl sprite_obj_004 ; render_obj_id:24
047055 E7 74 04    0359*  	dl sprite_obj_005 ; render_obj_id:40
047058 C8 75 04    0360*  	dl sprite_obj_006 ; render_obj_id:41
04705B A9 76 04    0361*  	dl sprite_obj_007 ; render_obj_id:42
04705E 8A 77 04    0362*  	dl sprite_obj_008 ; render_obj_id:43
047061 6B 78 04    0363*  	dl sprite_obj_009 ; render_obj_id:44
047064 4C 79 04    0364*  	dl sprite_obj_010 ; render_obj_id:45
047067 2D 7A 04    0365*  	dl sprite_obj_011 ; render_obj_id:46
04706A 0E 7B 04    0366*  	dl sprite_obj_012 ; render_obj_id:47
04706D EF 7B 04    0367*  	dl sprite_obj_013 ; render_obj_id:48
047070 D0 7C 04    0368*  	dl sprite_obj_014 ; render_obj_id:49
047073 B1 7D 04    0369*  	dl sprite_obj_015 ; render_obj_id:50
047076 92 7E 04    0370*  	dl sprite_obj_016 ; render_obj_id:51
047079 73 7F 04    0371*  	dl sprite_obj_017 ; render_obj_id:52
04707C 54 80 04    0372*  	dl sprite_obj_018 ; render_obj_id:56
04707F 35 81 04    0373*  	dl sprite_obj_019 ; render_obj_id:60
047082             0374*  ;	 plot_x,  plot_y, buffer_label
047082             0375*  
047082             0376*  ; render_obj_id:20
047082             0377*  sprite_obj_000:
047082 09 00 00 4E 0378*  	dl 0x000009,0x00004E,BUF_20_004
       00 00 13 02 
       00          
04708B 2C 00 00 4E 0379*  	dl 0x00002C,0x00004E,BUF_20_004
       00 00 13 02 
       00          
047094 50 00 00 4E 0380*  	dl 0x000050,0x00004E,BUF_20_004
       00 00 13 02 
       00          
04709D 73 00 00 4E 0381*  	dl 0x000073,0x00004E,BUF_20_004
       00 00 13 02 
       00          
0470A6 97 00 00 4E 0382*  	dl 0x000097,0x00004E,BUF_20_004
       00 00 13 02 
       00          
0470AF BA 00 00 4E 0383*  	dl 0x0000BA,0x00004E,BUF_20_004
       00 00 13 02 
       00          
0470B8 DE 00 00 4E 0384*  	dl 0x0000DE,0x00004E,BUF_20_004
       00 00 13 02 
       00          
0470C1 01 01 00 4E 0385*  	dl 0x000101,0x00004E,BUF_20_004
       00 00 13 02 
       00          
0470CA 25 01 00 4E 0386*  	dl 0x000125,0x00004E,BUF_20_004
       00 00 13 02 
       00          
0470D3 0B 00 00 4E 0387*  	dl 0x00000B,0x00004E,BUF_20_020
       00 00 14 02 
       00          
0470DC 39 00 00 4E 0388*  	dl 0x000039,0x00004E,BUF_20_020
       00 00 14 02 
       00          
0470E5 66 00 00 4E 0389*  	dl 0x000066,0x00004E,BUF_20_020
       00 00 14 02 
       00          
0470EE 94 00 00 4E 0390*  	dl 0x000094,0x00004E,BUF_20_020
       00 00 14 02 
       00          
0470F7 C1 00 00 4E 0391*  	dl 0x0000C1,0x00004E,BUF_20_020
       00 00 14 02 
       00          
047100 EF 00 00 4E 0392*  	dl 0x0000EF,0x00004E,BUF_20_020
       00 00 14 02 
       00          
047109 1C 01 00 4E 0393*  	dl 0x00011C,0x00004E,BUF_20_020
       00 00 14 02 
       00          
047112 11 00 00 4D 0394*  	dl 0x000011,0x00004D,BUF_20_032
       00 00 15 02 
       00          
04711B 50 00 00 4D 0395*  	dl 0x000050,0x00004D,BUF_20_032
       00 00 15 02 
       00          
047124 91 00 00 4D 0396*  	dl 0x000091,0x00004D,BUF_20_032
       00 00 15 02 
       00          
04712D D1 00 00 4D 0397*  	dl 0x0000D1,0x00004D,BUF_20_032
       00 00 15 02 
       00          
047136 11 01 00 4D 0398*  	dl 0x000111,0x00004D,BUF_20_032
       00 00 15 02 
       00          
04713F 1B 00 00 4C 0399*  	dl 0x00001B,0x00004C,BUF_20_040
       00 00 16 02 
       00          
047148 85 00 00 4C 0400*  	dl 0x000085,0x00004C,BUF_20_040
       00 00 16 02 
       00          
047151 F0 00 00 4C 0401*  	dl 0x0000F0,0x00004C,BUF_20_040
       00 00 16 02 
       00          
04715A 6B 00 00 44 0402*  	dl 0x00006B,0x000044,BUF_20_044
       00 00 17 02 
       00          
047163             0403*  
047163             0404*  ; render_obj_id:21
047163             0405*  sprite_obj_001:
047163 0D 00 00 55 0406*  	dl 0x00000D,0x000055,BUF_21_004
       00 00 18 02 
       00          
04716C 30 00 00 55 0407*  	dl 0x000030,0x000055,BUF_21_004
       00 00 18 02 
       00          
047175 54 00 00 55 0408*  	dl 0x000054,0x000055,BUF_21_004
       00 00 18 02 
       00          
04717E 77 00 00 55 0409*  	dl 0x000077,0x000055,BUF_21_004
       00 00 18 02 
       00          
047187 9B 00 00 55 0410*  	dl 0x00009B,0x000055,BUF_21_004
       00 00 18 02 
       00          
047190 BE 00 00 55 0411*  	dl 0x0000BE,0x000055,BUF_21_004
       00 00 18 02 
       00          
047199 E2 00 00 55 0412*  	dl 0x0000E2,0x000055,BUF_21_004
       00 00 18 02 
       00          
0471A2 05 01 00 55 0413*  	dl 0x000105,0x000055,BUF_21_004
       00 00 18 02 
       00          
0471AB 29 01 00 55 0414*  	dl 0x000129,0x000055,BUF_21_004
       00 00 18 02 
       00          
0471B4 10 00 00 57 0415*  	dl 0x000010,0x000057,BUF_21_020
       00 00 19 02 
       00          
0471BD 3E 00 00 57 0416*  	dl 0x00003E,0x000057,BUF_21_020
       00 00 19 02 
       00          
0471C6 6B 00 00 57 0417*  	dl 0x00006B,0x000057,BUF_21_020
       00 00 19 02 
       00          
0471CF 99 00 00 57 0418*  	dl 0x000099,0x000057,BUF_21_020
       00 00 19 02 
       00          
0471D8 C6 00 00 57 0419*  	dl 0x0000C6,0x000057,BUF_21_020
       00 00 19 02 
       00          
0471E1 F4 00 00 57 0420*  	dl 0x0000F4,0x000057,BUF_21_020
       00 00 19 02 
       00          
0471EA 21 01 00 57 0421*  	dl 0x000121,0x000057,BUF_21_020
       00 00 19 02 
       00          
0471F3 16 00 00 5A 0422*  	dl 0x000016,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
0471FC 55 00 00 5A 0423*  	dl 0x000055,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
047205 96 00 00 5A 0424*  	dl 0x000096,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
04720E D6 00 00 5A 0425*  	dl 0x0000D6,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
047217 16 01 00 5A 0426*  	dl 0x000116,0x00005A,BUF_21_032
       00 00 1A 02 
       00          
047220 26 00 00 60 0427*  	dl 0x000026,0x000060,BUF_21_040
       00 00 1B 02 
       00          
047229 90 00 00 60 0428*  	dl 0x000090,0x000060,BUF_21_040
       00 00 1B 02 
       00          
047232 FB 00 00 60 0429*  	dl 0x0000FB,0x000060,BUF_21_040
       00 00 1B 02 
       00          
04723B 6E 00 00 82 0430*  	dl 0x00006E,0x000082,BUF_21_044
       00 00 1C 02 
       00          
047244             0431*  
047244             0432*  ; render_obj_id:22
047244             0433*  sprite_obj_002:
047244 09 00 00 55 0434*  	dl 0x000009,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04724D 2C 00 00 55 0435*  	dl 0x00002C,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047256 50 00 00 55 0436*  	dl 0x000050,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04725F 73 00 00 55 0437*  	dl 0x000073,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047268 97 00 00 55 0438*  	dl 0x000097,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047271 BA 00 00 55 0439*  	dl 0x0000BA,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04727A DE 00 00 55 0440*  	dl 0x0000DE,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047283 01 01 00 55 0441*  	dl 0x000101,0x000055,BUF_22_004
       00 00 1D 02 
       00          
04728C 25 01 00 55 0442*  	dl 0x000125,0x000055,BUF_22_004
       00 00 1D 02 
       00          
047295 0B 00 00 57 0443*  	dl 0x00000B,0x000057,BUF_22_020
       00 00 1E 02 
       00          
04729E 39 00 00 57 0444*  	dl 0x000039,0x000057,BUF_22_020
       00 00 1E 02 
       00          
0472A7 66 00 00 57 0445*  	dl 0x000066,0x000057,BUF_22_020
       00 00 1E 02 
       00          
0472B0 94 00 00 57 0446*  	dl 0x000094,0x000057,BUF_22_020
       00 00 1E 02 
       00          
0472B9 C1 00 00 57 0447*  	dl 0x0000C1,0x000057,BUF_22_020
       00 00 1E 02 
       00          
0472C2 EF 00 00 57 0448*  	dl 0x0000EF,0x000057,BUF_22_020
       00 00 1E 02 
       00          
0472CB 1C 01 00 57 0449*  	dl 0x00011C,0x000057,BUF_22_020
       00 00 1E 02 
       00          
0472D4 10 00 00 5A 0450*  	dl 0x000010,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
0472DD 4F 00 00 5A 0451*  	dl 0x00004F,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
0472E6 90 00 00 5A 0452*  	dl 0x000090,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
0472EF D0 00 00 5A 0453*  	dl 0x0000D0,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
0472F8 10 01 00 5A 0454*  	dl 0x000110,0x00005A,BUF_22_032
       00 00 1F 02 
       00          
047301 1B 00 00 60 0455*  	dl 0x00001B,0x000060,BUF_22_040
       00 00 20 02 
       00          
04730A 85 00 00 60 0456*  	dl 0x000085,0x000060,BUF_22_040
       00 00 20 02 
       00          
047313 F0 00 00 60 0457*  	dl 0x0000F0,0x000060,BUF_22_040
       00 00 20 02 
       00          
04731C 50 00 00 82 0458*  	dl 0x000050,0x000082,BUF_22_044
       00 00 21 02 
       00          
047325             0459*  
047325             0460*  ; render_obj_id:23
047325             0461*  sprite_obj_003:
047325 0C 00 00 3E 0462*  	dl 0x00000C,0x00003E,BUF_23_004
       00 00 22 02 
       00          
04732E 2F 00 00 3E 0463*  	dl 0x00002F,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047337 53 00 00 3E 0464*  	dl 0x000053,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047340 76 00 00 3E 0465*  	dl 0x000076,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047349 9A 00 00 3E 0466*  	dl 0x00009A,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047352 BD 00 00 3E 0467*  	dl 0x0000BD,0x00003E,BUF_23_004
       00 00 22 02 
       00          
04735B E1 00 00 3E 0468*  	dl 0x0000E1,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047364 04 01 00 3E 0469*  	dl 0x000104,0x00003E,BUF_23_004
       00 00 22 02 
       00          
04736D 28 01 00 3E 0470*  	dl 0x000128,0x00003E,BUF_23_004
       00 00 22 02 
       00          
047376 0F 00 00 39 0471*  	dl 0x00000F,0x000039,BUF_23_020
       00 00 23 02 
       00          
04737F 3D 00 00 39 0472*  	dl 0x00003D,0x000039,BUF_23_020
       00 00 23 02 
       00          
047388 6A 00 00 39 0473*  	dl 0x00006A,0x000039,BUF_23_020
       00 00 23 02 
       00          
047391 98 00 00 39 0474*  	dl 0x000098,0x000039,BUF_23_020
       00 00 23 02 
       00          
04739A C5 00 00 39 0475*  	dl 0x0000C5,0x000039,BUF_23_020
       00 00 23 02 
       00          
0473A3 F3 00 00 39 0476*  	dl 0x0000F3,0x000039,BUF_23_020
       00 00 23 02 
       00          
0473AC 20 01 00 39 0477*  	dl 0x000120,0x000039,BUF_23_020
       00 00 23 02 
       00          
0473B5 16 00 00 30 0478*  	dl 0x000016,0x000030,BUF_23_032
       00 00 24 02 
       00          
0473BE 55 00 00 30 0479*  	dl 0x000055,0x000030,BUF_23_032
       00 00 24 02 
       00          
0473C7 96 00 00 30 0480*  	dl 0x000096,0x000030,BUF_23_032
       00 00 24 02 
       00          
0473D0 D6 00 00 30 0481*  	dl 0x0000D6,0x000030,BUF_23_032
       00 00 24 02 
       00          
0473D9 16 01 00 30 0482*  	dl 0x000116,0x000030,BUF_23_032
       00 00 24 02 
       00          
0473E2 24 00 00 1A 0483*  	dl 0x000024,0x00001A,BUF_23_040
       00 00 25 02 
       00          
0473EB 8E 00 00 1A 0484*  	dl 0x00008E,0x00001A,BUF_23_040
       00 00 25 02 
       00          
0473F4 F9 00 00 1A 0485*  	dl 0x0000F9,0x00001A,BUF_23_040
       00 00 25 02 
       00          
0473FD 09 01 00 83 0486*  	dl 0x000109,0x000083,BUF_23_044
       00 00 26 02 
       00          
047406             0487*  
047406             0488*  ; render_obj_id:24
047406             0489*  sprite_obj_004:
047406 0D 00 00 55 0490*  	dl 0x00000D,0x000055,BUF_24_004
       00 00 27 02 
       00          
04740F 30 00 00 55 0491*  	dl 0x000030,0x000055,BUF_24_004
       00 00 27 02 
       00          
047418 54 00 00 55 0492*  	dl 0x000054,0x000055,BUF_24_004
       00 00 27 02 
       00          
047421 77 00 00 55 0493*  	dl 0x000077,0x000055,BUF_24_004
       00 00 27 02 
       00          
04742A 9B 00 00 55 0494*  	dl 0x00009B,0x000055,BUF_24_004
       00 00 27 02 
       00          
047433 BE 00 00 55 0495*  	dl 0x0000BE,0x000055,BUF_24_004
       00 00 27 02 
       00          
04743C E2 00 00 55 0496*  	dl 0x0000E2,0x000055,BUF_24_004
       00 00 27 02 
       00          
047445 05 01 00 55 0497*  	dl 0x000105,0x000055,BUF_24_004
       00 00 27 02 
       00          
04744E 29 01 00 55 0498*  	dl 0x000129,0x000055,BUF_24_004
       00 00 27 02 
       00          
047457 10 00 00 57 0499*  	dl 0x000010,0x000057,BUF_24_020
       00 00 28 02 
       00          
047460 3E 00 00 57 0500*  	dl 0x00003E,0x000057,BUF_24_020
       00 00 28 02 
       00          
047469 6B 00 00 57 0501*  	dl 0x00006B,0x000057,BUF_24_020
       00 00 28 02 
       00          
047472 99 00 00 57 0502*  	dl 0x000099,0x000057,BUF_24_020
       00 00 28 02 
       00          
04747B C6 00 00 57 0503*  	dl 0x0000C6,0x000057,BUF_24_020
       00 00 28 02 
       00          
047484 F4 00 00 57 0504*  	dl 0x0000F4,0x000057,BUF_24_020
       00 00 28 02 
       00          
04748D 21 01 00 57 0505*  	dl 0x000121,0x000057,BUF_24_020
       00 00 28 02 
       00          
047496 16 00 00 5A 0506*  	dl 0x000016,0x00005A,BUF_24_032
       00 00 29 02 
       00          
04749F 55 00 00 5A 0507*  	dl 0x000055,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0474A8 96 00 00 5A 0508*  	dl 0x000096,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0474B1 D6 00 00 5A 0509*  	dl 0x0000D6,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0474BA 16 01 00 5A 0510*  	dl 0x000116,0x00005A,BUF_24_032
       00 00 29 02 
       00          
0474C3 26 00 00 60 0511*  	dl 0x000026,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0474CC 90 00 00 60 0512*  	dl 0x000090,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0474D5 FB 00 00 60 0513*  	dl 0x0000FB,0x000060,BUF_24_040
       00 00 2A 02 
       00          
0474DE 6E 00 00 82 0514*  	dl 0x00006E,0x000082,BUF_24_044
       00 00 2B 02 
       00          
0474E7             0515*  
0474E7             0516*  ; render_obj_id:40
0474E7             0517*  sprite_obj_005:
0474E7 0A 00 00 5A 0518*  	dl 0x00000A,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0474F0 2D 00 00 5A 0519*  	dl 0x00002D,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
0474F9 51 00 00 5A 0520*  	dl 0x000051,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047502 74 00 00 5A 0521*  	dl 0x000074,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04750B 98 00 00 5A 0522*  	dl 0x000098,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047514 BB 00 00 5A 0523*  	dl 0x0000BB,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04751D DF 00 00 5A 0524*  	dl 0x0000DF,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047526 02 01 00 5A 0525*  	dl 0x000102,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
04752F 26 01 00 5A 0526*  	dl 0x000126,0x00005A,BUF_40_004
       00 00 2C 02 
       00          
047538 0D 00 00 5C 0527*  	dl 0x00000D,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047541 3B 00 00 5C 0528*  	dl 0x00003B,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04754A 68 00 00 5C 0529*  	dl 0x000068,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047553 96 00 00 5C 0530*  	dl 0x000096,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04755C C3 00 00 5C 0531*  	dl 0x0000C3,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047565 F1 00 00 5C 0532*  	dl 0x0000F1,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
04756E 1E 01 00 5C 0533*  	dl 0x00011E,0x00005C,BUF_40_020
       00 00 2D 02 
       00          
047577 13 00 00 62 0534*  	dl 0x000013,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047580 52 00 00 62 0535*  	dl 0x000052,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047589 93 00 00 62 0536*  	dl 0x000093,0x000062,BUF_40_032
       00 00 2E 02 
       00          
047592 D3 00 00 62 0537*  	dl 0x0000D3,0x000062,BUF_40_032
       00 00 2E 02 
       00          
04759B 13 01 00 62 0538*  	dl 0x000113,0x000062,BUF_40_032
       00 00 2E 02 
       00          
0475A4 20 00 00 6D 0539*  	dl 0x000020,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0475AD 8A 00 00 6D 0540*  	dl 0x00008A,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0475B6 F5 00 00 6D 0541*  	dl 0x0000F5,0x00006D,BUF_40_040
       00 00 2F 02 
       00          
0475BF E0 00 00 A0 0542*  	dl 0x0000E0,0x0000A0,BUF_40_044
       00 00 30 02 
       00          
0475C8             0543*  
0475C8             0544*  ; render_obj_id:41
0475C8             0545*  sprite_obj_006:
0475C8 0C 00 00 55 0546*  	dl 0x00000C,0x000055,BUF_41_004
       00 00 31 02 
       00          
0475D1 2F 00 00 55 0547*  	dl 0x00002F,0x000055,BUF_41_004
       00 00 31 02 
       00          
0475DA 53 00 00 55 0548*  	dl 0x000053,0x000055,BUF_41_004
       00 00 31 02 
       00          
0475E3 76 00 00 55 0549*  	dl 0x000076,0x000055,BUF_41_004
       00 00 31 02 
       00          
0475EC 9A 00 00 55 0550*  	dl 0x00009A,0x000055,BUF_41_004
       00 00 31 02 
       00          
0475F5 BD 00 00 55 0551*  	dl 0x0000BD,0x000055,BUF_41_004
       00 00 31 02 
       00          
0475FE E1 00 00 55 0552*  	dl 0x0000E1,0x000055,BUF_41_004
       00 00 31 02 
       00          
047607 04 01 00 55 0553*  	dl 0x000104,0x000055,BUF_41_004
       00 00 31 02 
       00          
047610 28 01 00 55 0554*  	dl 0x000128,0x000055,BUF_41_004
       00 00 31 02 
       00          
047619 0E 00 00 57 0555*  	dl 0x00000E,0x000057,BUF_41_020
       00 00 32 02 
       00          
047622 3C 00 00 57 0556*  	dl 0x00003C,0x000057,BUF_41_020
       00 00 32 02 
       00          
04762B 69 00 00 57 0557*  	dl 0x000069,0x000057,BUF_41_020
       00 00 32 02 
       00          
047634 97 00 00 57 0558*  	dl 0x000097,0x000057,BUF_41_020
       00 00 32 02 
       00          
04763D C4 00 00 57 0559*  	dl 0x0000C4,0x000057,BUF_41_020
       00 00 32 02 
       00          
047646 F2 00 00 57 0560*  	dl 0x0000F2,0x000057,BUF_41_020
       00 00 32 02 
       00          
04764F 1F 01 00 57 0561*  	dl 0x00011F,0x000057,BUF_41_020
       00 00 32 02 
       00          
047658 15 00 00 5B 0562*  	dl 0x000015,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047661 54 00 00 5B 0563*  	dl 0x000054,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04766A 95 00 00 5B 0564*  	dl 0x000095,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047673 D5 00 00 5B 0565*  	dl 0x0000D5,0x00005B,BUF_41_032
       00 00 33 02 
       00          
04767C 15 01 00 5B 0566*  	dl 0x000115,0x00005B,BUF_41_032
       00 00 33 02 
       00          
047685 23 00 00 62 0567*  	dl 0x000023,0x000062,BUF_41_040
       00 00 34 02 
       00          
04768E 8D 00 00 62 0568*  	dl 0x00008D,0x000062,BUF_41_040
       00 00 34 02 
       00          
047697 F8 00 00 62 0569*  	dl 0x0000F8,0x000062,BUF_41_040
       00 00 34 02 
       00          
0476A0 84 00 00 87 0570*  	dl 0x000084,0x000087,BUF_41_044
       00 00 35 02 
       00          
0476A9             0571*  
0476A9             0572*  ; render_obj_id:42
0476A9             0573*  sprite_obj_007:
0476A9 0D 00 00 57 0574*  	dl 0x00000D,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476B2 30 00 00 57 0575*  	dl 0x000030,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476BB 54 00 00 57 0576*  	dl 0x000054,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476C4 77 00 00 57 0577*  	dl 0x000077,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476CD 9B 00 00 57 0578*  	dl 0x00009B,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476D6 BE 00 00 57 0579*  	dl 0x0000BE,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476DF E2 00 00 57 0580*  	dl 0x0000E2,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476E8 05 01 00 57 0581*  	dl 0x000105,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476F1 29 01 00 57 0582*  	dl 0x000129,0x000057,BUF_42_004
       00 00 36 02 
       00          
0476FA 10 00 00 5A 0583*  	dl 0x000010,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047703 3E 00 00 5A 0584*  	dl 0x00003E,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04770C 6B 00 00 5A 0585*  	dl 0x00006B,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047715 99 00 00 5A 0586*  	dl 0x000099,0x00005A,BUF_42_020
       00 00 37 02 
       00          
04771E C6 00 00 5A 0587*  	dl 0x0000C6,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047727 F4 00 00 5A 0588*  	dl 0x0000F4,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047730 21 01 00 5A 0589*  	dl 0x000121,0x00005A,BUF_42_020
       00 00 37 02 
       00          
047739 18 00 00 5F 0590*  	dl 0x000018,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047742 57 00 00 5F 0591*  	dl 0x000057,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04774B 98 00 00 5F 0592*  	dl 0x000098,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047754 D8 00 00 5F 0593*  	dl 0x0000D8,0x00005F,BUF_42_032
       00 00 38 02 
       00          
04775D 18 01 00 5F 0594*  	dl 0x000118,0x00005F,BUF_42_032
       00 00 38 02 
       00          
047766 28 00 00 69 0595*  	dl 0x000028,0x000069,BUF_42_040
       00 00 39 02 
       00          
04776F 92 00 00 69 0596*  	dl 0x000092,0x000069,BUF_42_040
       00 00 39 02 
       00          
047778 FD 00 00 69 0597*  	dl 0x0000FD,0x000069,BUF_42_040
       00 00 39 02 
       00          
047781 7D 00 00 9C 0598*  	dl 0x00007D,0x00009C,BUF_42_044
       00 00 3A 02 
       00          
04778A             0599*  
04778A             0600*  ; render_obj_id:43
04778A             0601*  sprite_obj_008:
04778A 0C 00 00 5C 0602*  	dl 0x00000C,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
047793 2F 00 00 5C 0603*  	dl 0x00002F,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
04779C 53 00 00 5C 0604*  	dl 0x000053,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0477A5 76 00 00 5C 0605*  	dl 0x000076,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0477AE 9A 00 00 5C 0606*  	dl 0x00009A,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0477B7 BD 00 00 5C 0607*  	dl 0x0000BD,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0477C0 E1 00 00 5C 0608*  	dl 0x0000E1,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0477C9 04 01 00 5C 0609*  	dl 0x000104,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0477D2 28 01 00 5C 0610*  	dl 0x000128,0x00005C,BUF_43_004
       00 00 3B 02 
       00          
0477DB 0F 00 00 61 0611*  	dl 0x00000F,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0477E4 3D 00 00 61 0612*  	dl 0x00003D,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0477ED 6A 00 00 61 0613*  	dl 0x00006A,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0477F6 98 00 00 61 0614*  	dl 0x000098,0x000061,BUF_43_020
       00 00 3C 02 
       00          
0477FF C5 00 00 61 0615*  	dl 0x0000C5,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047808 F3 00 00 61 0616*  	dl 0x0000F3,0x000061,BUF_43_020
       00 00 3C 02 
       00          
047811 20 01 00 61 0617*  	dl 0x000120,0x000061,BUF_43_020
       00 00 3C 02 
       00          
04781A 15 00 00 68 0618*  	dl 0x000015,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047823 54 00 00 68 0619*  	dl 0x000054,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04782C 95 00 00 68 0620*  	dl 0x000095,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047835 D5 00 00 68 0621*  	dl 0x0000D5,0x000068,BUF_43_032
       00 00 3D 02 
       00          
04783E 15 01 00 68 0622*  	dl 0x000115,0x000068,BUF_43_032
       00 00 3D 02 
       00          
047847 24 00 00 77 0623*  	dl 0x000024,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047850 8E 00 00 77 0624*  	dl 0x00008E,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047859 F9 00 00 77 0625*  	dl 0x0000F9,0x000077,BUF_43_040
       00 00 3E 02 
       00          
047862 D4 00 00 9F 0626*  	dl 0x0000D4,0x00009F,BUF_43_044
       00 00 3F 02 
       00          
04786B             0627*  
04786B             0628*  ; render_obj_id:44
04786B             0629*  sprite_obj_009:
04786B 0F 00 00 5C 0630*  	dl 0x00000F,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047874 32 00 00 5C 0631*  	dl 0x000032,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04787D 56 00 00 5C 0632*  	dl 0x000056,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047886 79 00 00 5C 0633*  	dl 0x000079,0x00005C,BUF_44_004
       00 00 40 02 
       00          
04788F 9D 00 00 5C 0634*  	dl 0x00009D,0x00005C,BUF_44_004
       00 00 40 02 
       00          
047898 C0 00 00 5C 0635*  	dl 0x0000C0,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0478A1 E4 00 00 5C 0636*  	dl 0x0000E4,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0478AA 07 01 00 5C 0637*  	dl 0x000107,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0478B3 2B 01 00 5C 0638*  	dl 0x00012B,0x00005C,BUF_44_004
       00 00 40 02 
       00          
0478BC 14 00 00 5F 0639*  	dl 0x000014,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0478C5 42 00 00 5F 0640*  	dl 0x000042,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0478CE 6F 00 00 5F 0641*  	dl 0x00006F,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0478D7 9D 00 00 5F 0642*  	dl 0x00009D,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0478E0 CA 00 00 5F 0643*  	dl 0x0000CA,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0478E9 F8 00 00 5F 0644*  	dl 0x0000F8,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0478F2 25 01 00 5F 0645*  	dl 0x000125,0x00005F,BUF_44_020
       00 00 41 02 
       00          
0478FB 1B 00 00 66 0646*  	dl 0x00001B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047904 5A 00 00 66 0647*  	dl 0x00005A,0x000066,BUF_44_032
       00 00 42 02 
       00          
04790D 9B 00 00 66 0648*  	dl 0x00009B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047916 DB 00 00 66 0649*  	dl 0x0000DB,0x000066,BUF_44_032
       00 00 42 02 
       00          
04791F 1B 01 00 66 0650*  	dl 0x00011B,0x000066,BUF_44_032
       00 00 42 02 
       00          
047928 2E 00 00 75 0651*  	dl 0x00002E,0x000075,BUF_44_040
       00 00 43 02 
       00          
047931 98 00 00 75 0652*  	dl 0x000098,0x000075,BUF_44_040
       00 00 43 02 
       00          
04793A 03 01 00 75 0653*  	dl 0x000103,0x000075,BUF_44_040
       00 00 43 02 
       00          
047943 C8 00 00 A1 0654*  	dl 0x0000C8,0x0000A1,BUF_44_044
       00 00 44 02 
       00          
04794C             0655*  
04794C             0656*  ; render_obj_id:45
04794C             0657*  sprite_obj_010:
04794C 09 00 00 56 0658*  	dl 0x000009,0x000056,BUF_45_004
       00 00 45 02 
       00          
047955 2C 00 00 56 0659*  	dl 0x00002C,0x000056,BUF_45_004
       00 00 45 02 
       00          
04795E 50 00 00 56 0660*  	dl 0x000050,0x000056,BUF_45_004
       00 00 45 02 
       00          
047967 73 00 00 56 0661*  	dl 0x000073,0x000056,BUF_45_004
       00 00 45 02 
       00          
047970 97 00 00 56 0662*  	dl 0x000097,0x000056,BUF_45_004
       00 00 45 02 
       00          
047979 BA 00 00 56 0663*  	dl 0x0000BA,0x000056,BUF_45_004
       00 00 45 02 
       00          
047982 DE 00 00 56 0664*  	dl 0x0000DE,0x000056,BUF_45_004
       00 00 45 02 
       00          
04798B 01 01 00 56 0665*  	dl 0x000101,0x000056,BUF_45_004
       00 00 45 02 
       00          
047994 25 01 00 56 0666*  	dl 0x000125,0x000056,BUF_45_004
       00 00 45 02 
       00          
04799D 0C 00 00 58 0667*  	dl 0x00000C,0x000058,BUF_45_020
       00 00 46 02 
       00          
0479A6 3A 00 00 58 0668*  	dl 0x00003A,0x000058,BUF_45_020
       00 00 46 02 
       00          
0479AF 67 00 00 58 0669*  	dl 0x000067,0x000058,BUF_45_020
       00 00 46 02 
       00          
0479B8 95 00 00 58 0670*  	dl 0x000095,0x000058,BUF_45_020
       00 00 46 02 
       00          
0479C1 C2 00 00 58 0671*  	dl 0x0000C2,0x000058,BUF_45_020
       00 00 46 02 
       00          
0479CA F0 00 00 58 0672*  	dl 0x0000F0,0x000058,BUF_45_020
       00 00 46 02 
       00          
0479D3 1D 01 00 58 0673*  	dl 0x00011D,0x000058,BUF_45_020
       00 00 46 02 
       00          
0479DC 11 00 00 5D 0674*  	dl 0x000011,0x00005D,BUF_45_032
       00 00 47 02 
       00          
0479E5 50 00 00 5D 0675*  	dl 0x000050,0x00005D,BUF_45_032
       00 00 47 02 
       00          
0479EE 91 00 00 5D 0676*  	dl 0x000091,0x00005D,BUF_45_032
       00 00 47 02 
       00          
0479F7 D1 00 00 5D 0677*  	dl 0x0000D1,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047A00 11 01 00 5D 0678*  	dl 0x000111,0x00005D,BUF_45_032
       00 00 47 02 
       00          
047A09 1D 00 00 63 0679*  	dl 0x00001D,0x000063,BUF_45_040
       00 00 48 02 
       00          
047A12 87 00 00 63 0680*  	dl 0x000087,0x000063,BUF_45_040
       00 00 48 02 
       00          
047A1B F2 00 00 63 0681*  	dl 0x0000F2,0x000063,BUF_45_040
       00 00 48 02 
       00          
047A24 58 00 00 8D 0682*  	dl 0x000058,0x00008D,BUF_45_044
       00 00 49 02 
       00          
047A2D             0683*  
047A2D             0684*  ; render_obj_id:46
047A2D             0685*  sprite_obj_011:
047A2D 09 00 00 58 0686*  	dl 0x000009,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A36 2C 00 00 58 0687*  	dl 0x00002C,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A3F 50 00 00 58 0688*  	dl 0x000050,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A48 73 00 00 58 0689*  	dl 0x000073,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A51 97 00 00 58 0690*  	dl 0x000097,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A5A BA 00 00 58 0691*  	dl 0x0000BA,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A63 DE 00 00 58 0692*  	dl 0x0000DE,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A6C 01 01 00 58 0693*  	dl 0x000101,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A75 25 01 00 58 0694*  	dl 0x000125,0x000058,BUF_46_004
       00 00 4A 02 
       00          
047A7E 0C 00 00 5A 0695*  	dl 0x00000C,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A87 3A 00 00 5A 0696*  	dl 0x00003A,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A90 67 00 00 5A 0697*  	dl 0x000067,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047A99 95 00 00 5A 0698*  	dl 0x000095,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047AA2 C2 00 00 5A 0699*  	dl 0x0000C2,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047AAB F0 00 00 5A 0700*  	dl 0x0000F0,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047AB4 1D 01 00 5A 0701*  	dl 0x00011D,0x00005A,BUF_46_020
       00 00 4B 02 
       00          
047ABD 11 00 00 60 0702*  	dl 0x000011,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047AC6 50 00 00 60 0703*  	dl 0x000050,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047ACF 91 00 00 60 0704*  	dl 0x000091,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047AD8 D1 00 00 60 0705*  	dl 0x0000D1,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047AE1 11 01 00 60 0706*  	dl 0x000111,0x000060,BUF_46_032
       00 00 4C 02 
       00          
047AEA 1D 00 00 69 0707*  	dl 0x00001D,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047AF3 87 00 00 69 0708*  	dl 0x000087,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047AFC F2 00 00 69 0709*  	dl 0x0000F2,0x000069,BUF_46_040
       00 00 4D 02 
       00          
047B05 8E 00 00 9F 0710*  	dl 0x00008E,0x00009F,BUF_46_044
       00 00 4E 02 
       00          
047B0E             0711*  
047B0E             0712*  ; render_obj_id:47
047B0E             0713*  sprite_obj_012:
047B0E 09 00 00 57 0714*  	dl 0x000009,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B17 2C 00 00 57 0715*  	dl 0x00002C,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B20 50 00 00 57 0716*  	dl 0x000050,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B29 73 00 00 57 0717*  	dl 0x000073,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B32 97 00 00 57 0718*  	dl 0x000097,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B3B BA 00 00 57 0719*  	dl 0x0000BA,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B44 DE 00 00 57 0720*  	dl 0x0000DE,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B4D 01 01 00 57 0721*  	dl 0x000101,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B56 25 01 00 57 0722*  	dl 0x000125,0x000057,BUF_47_004
       00 00 4F 02 
       00          
047B5F 0C 00 00 59 0723*  	dl 0x00000C,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B68 3A 00 00 59 0724*  	dl 0x00003A,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B71 67 00 00 59 0725*  	dl 0x000067,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B7A 95 00 00 59 0726*  	dl 0x000095,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B83 C2 00 00 59 0727*  	dl 0x0000C2,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B8C F0 00 00 59 0728*  	dl 0x0000F0,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B95 1D 01 00 59 0729*  	dl 0x00011D,0x000059,BUF_47_020
       00 00 50 02 
       00          
047B9E 11 00 00 5E 0730*  	dl 0x000011,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047BA7 50 00 00 5E 0731*  	dl 0x000050,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047BB0 91 00 00 5E 0732*  	dl 0x000091,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047BB9 D1 00 00 5E 0733*  	dl 0x0000D1,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047BC2 11 01 00 5E 0734*  	dl 0x000111,0x00005E,BUF_47_032
       00 00 51 02 
       00          
047BCB 1D 00 00 66 0735*  	dl 0x00001D,0x000066,BUF_47_040
       00 00 52 02 
       00          
047BD4 87 00 00 66 0736*  	dl 0x000087,0x000066,BUF_47_040
       00 00 52 02 
       00          
047BDD F2 00 00 66 0737*  	dl 0x0000F2,0x000066,BUF_47_040
       00 00 52 02 
       00          
047BE6 B2 00 00 96 0738*  	dl 0x0000B2,0x000096,BUF_47_044
       00 00 53 02 
       00          
047BEF             0739*  
047BEF             0740*  ; render_obj_id:48
047BEF             0741*  sprite_obj_013:
047BEF 0A 00 00 5A 0742*  	dl 0x00000A,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047BF8 2D 00 00 5A 0743*  	dl 0x00002D,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C01 51 00 00 5A 0744*  	dl 0x000051,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C0A 74 00 00 5A 0745*  	dl 0x000074,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C13 98 00 00 5A 0746*  	dl 0x000098,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C1C BB 00 00 5A 0747*  	dl 0x0000BB,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C25 DF 00 00 5A 0748*  	dl 0x0000DF,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C2E 02 01 00 5A 0749*  	dl 0x000102,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C37 26 01 00 5A 0750*  	dl 0x000126,0x00005A,BUF_48_004
       00 00 54 02 
       00          
047C40 0D 00 00 5C 0751*  	dl 0x00000D,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C49 3B 00 00 5C 0752*  	dl 0x00003B,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C52 68 00 00 5C 0753*  	dl 0x000068,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C5B 96 00 00 5C 0754*  	dl 0x000096,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C64 C3 00 00 5C 0755*  	dl 0x0000C3,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C6D F1 00 00 5C 0756*  	dl 0x0000F1,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C76 1E 01 00 5C 0757*  	dl 0x00011E,0x00005C,BUF_48_020
       00 00 55 02 
       00          
047C7F 12 00 00 62 0758*  	dl 0x000012,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C88 51 00 00 62 0759*  	dl 0x000051,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C91 92 00 00 62 0760*  	dl 0x000092,0x000062,BUF_48_032
       00 00 56 02 
       00          
047C9A D2 00 00 62 0761*  	dl 0x0000D2,0x000062,BUF_48_032
       00 00 56 02 
       00          
047CA3 12 01 00 62 0762*  	dl 0x000112,0x000062,BUF_48_032
       00 00 56 02 
       00          
047CAC 1D 00 00 6C 0763*  	dl 0x00001D,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047CB5 87 00 00 6C 0764*  	dl 0x000087,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047CBE F2 00 00 6C 0765*  	dl 0x0000F2,0x00006C,BUF_48_040
       00 00 57 02 
       00          
047CC7 00 01 00 A0 0766*  	dl 0x000100,0x0000A0,BUF_48_044
       00 00 58 02 
       00          
047CD0             0767*  
047CD0             0768*  ; render_obj_id:49
047CD0             0769*  sprite_obj_014:
047CD0 0A 00 00 59 0770*  	dl 0x00000A,0x000059,BUF_49_004
       00 00 59 02 
       00          
047CD9 2D 00 00 59 0771*  	dl 0x00002D,0x000059,BUF_49_004
       00 00 59 02 
       00          
047CE2 51 00 00 59 0772*  	dl 0x000051,0x000059,BUF_49_004
       00 00 59 02 
       00          
047CEB 74 00 00 59 0773*  	dl 0x000074,0x000059,BUF_49_004
       00 00 59 02 
       00          
047CF4 98 00 00 59 0774*  	dl 0x000098,0x000059,BUF_49_004
       00 00 59 02 
       00          
047CFD BB 00 00 59 0775*  	dl 0x0000BB,0x000059,BUF_49_004
       00 00 59 02 
       00          
047D06 DF 00 00 59 0776*  	dl 0x0000DF,0x000059,BUF_49_004
       00 00 59 02 
       00          
047D0F 02 01 00 59 0777*  	dl 0x000102,0x000059,BUF_49_004
       00 00 59 02 
       00          
047D18 26 01 00 59 0778*  	dl 0x000126,0x000059,BUF_49_004
       00 00 59 02 
       00          
047D21 0E 00 00 5B 0779*  	dl 0x00000E,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047D2A 3C 00 00 5B 0780*  	dl 0x00003C,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047D33 69 00 00 5B 0781*  	dl 0x000069,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047D3C 97 00 00 5B 0782*  	dl 0x000097,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047D45 C4 00 00 5B 0783*  	dl 0x0000C4,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047D4E F2 00 00 5B 0784*  	dl 0x0000F2,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047D57 1F 01 00 5B 0785*  	dl 0x00011F,0x00005B,BUF_49_020
       00 00 5A 02 
       00          
047D60 13 00 00 62 0786*  	dl 0x000013,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D69 52 00 00 62 0787*  	dl 0x000052,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D72 93 00 00 62 0788*  	dl 0x000093,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D7B D3 00 00 62 0789*  	dl 0x0000D3,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D84 13 01 00 62 0790*  	dl 0x000113,0x000062,BUF_49_032
       00 00 5B 02 
       00          
047D8D 20 00 00 6C 0791*  	dl 0x000020,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047D96 8A 00 00 6C 0792*  	dl 0x00008A,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047D9F F5 00 00 6C 0793*  	dl 0x0000F5,0x00006C,BUF_49_040
       00 00 5C 02 
       00          
047DA8 E8 00 00 A0 0794*  	dl 0x0000E8,0x0000A0,BUF_49_044
       00 00 5D 02 
       00          
047DB1             0795*  
047DB1             0796*  ; render_obj_id:50
047DB1             0797*  sprite_obj_015:
047DB1 0D 00 00 53 0798*  	dl 0x00000D,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DBA 30 00 00 53 0799*  	dl 0x000030,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DC3 54 00 00 53 0800*  	dl 0x000054,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DCC 77 00 00 53 0801*  	dl 0x000077,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DD5 9B 00 00 53 0802*  	dl 0x00009B,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DDE BE 00 00 53 0803*  	dl 0x0000BE,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DE7 E2 00 00 53 0804*  	dl 0x0000E2,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DF0 05 01 00 53 0805*  	dl 0x000105,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047DF9 29 01 00 53 0806*  	dl 0x000129,0x000053,BUF_50_004
       00 00 5E 02 
       00          
047E02 10 00 00 54 0807*  	dl 0x000010,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047E0B 3E 00 00 54 0808*  	dl 0x00003E,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047E14 6B 00 00 54 0809*  	dl 0x00006B,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047E1D 99 00 00 54 0810*  	dl 0x000099,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047E26 C6 00 00 54 0811*  	dl 0x0000C6,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047E2F F4 00 00 54 0812*  	dl 0x0000F4,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047E38 21 01 00 54 0813*  	dl 0x000121,0x000054,BUF_50_020
       00 00 5F 02 
       00          
047E41 16 00 00 56 0814*  	dl 0x000016,0x000056,BUF_50_032
       00 00 60 02 
       00          
047E4A 55 00 00 56 0815*  	dl 0x000055,0x000056,BUF_50_032
       00 00 60 02 
       00          
047E53 96 00 00 56 0816*  	dl 0x000096,0x000056,BUF_50_032
       00 00 60 02 
       00          
047E5C D6 00 00 56 0817*  	dl 0x0000D6,0x000056,BUF_50_032
       00 00 60 02 
       00          
047E65 16 01 00 56 0818*  	dl 0x000116,0x000056,BUF_50_032
       00 00 60 02 
       00          
047E6E 26 00 00 5A 0819*  	dl 0x000026,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047E77 90 00 00 5A 0820*  	dl 0x000090,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047E80 FB 00 00 5A 0821*  	dl 0x0000FB,0x00005A,BUF_50_040
       00 00 61 02 
       00          
047E89 78 00 00 6E 0822*  	dl 0x000078,0x00006E,BUF_50_044
       00 00 62 02 
       00          
047E92             0823*  
047E92             0824*  ; render_obj_id:51
047E92             0825*  sprite_obj_016:
047E92 0B 00 00 49 0826*  	dl 0x00000B,0x000049,BUF_51_004
       00 00 63 02 
       00          
047E9B 2E 00 00 49 0827*  	dl 0x00002E,0x000049,BUF_51_004
       00 00 63 02 
       00          
047EA4 52 00 00 49 0828*  	dl 0x000052,0x000049,BUF_51_004
       00 00 63 02 
       00          
047EAD 75 00 00 49 0829*  	dl 0x000075,0x000049,BUF_51_004
       00 00 63 02 
       00          
047EB6 99 00 00 49 0830*  	dl 0x000099,0x000049,BUF_51_004
       00 00 63 02 
       00          
047EBF BC 00 00 49 0831*  	dl 0x0000BC,0x000049,BUF_51_004
       00 00 63 02 
       00          
047EC8 E0 00 00 49 0832*  	dl 0x0000E0,0x000049,BUF_51_004
       00 00 63 02 
       00          
047ED1 03 01 00 49 0833*  	dl 0x000103,0x000049,BUF_51_004
       00 00 63 02 
       00          
047EDA 27 01 00 49 0834*  	dl 0x000127,0x000049,BUF_51_004
       00 00 63 02 
       00          
047EE3 0D 00 00 48 0835*  	dl 0x00000D,0x000048,BUF_51_020
       00 00 64 02 
       00          
047EEC 3B 00 00 48 0836*  	dl 0x00003B,0x000048,BUF_51_020
       00 00 64 02 
       00          
047EF5 68 00 00 48 0837*  	dl 0x000068,0x000048,BUF_51_020
       00 00 64 02 
       00          
047EFE 96 00 00 48 0838*  	dl 0x000096,0x000048,BUF_51_020
       00 00 64 02 
       00          
047F07 C3 00 00 48 0839*  	dl 0x0000C3,0x000048,BUF_51_020
       00 00 64 02 
       00          
047F10 F1 00 00 48 0840*  	dl 0x0000F1,0x000048,BUF_51_020
       00 00 64 02 
       00          
047F19 1E 01 00 48 0841*  	dl 0x00011E,0x000048,BUF_51_020
       00 00 64 02 
       00          
047F22 13 00 00 45 0842*  	dl 0x000013,0x000045,BUF_51_032
       00 00 65 02 
       00          
047F2B 52 00 00 45 0843*  	dl 0x000052,0x000045,BUF_51_032
       00 00 65 02 
       00          
047F34 93 00 00 45 0844*  	dl 0x000093,0x000045,BUF_51_032
       00 00 65 02 
       00          
047F3D D3 00 00 45 0845*  	dl 0x0000D3,0x000045,BUF_51_032
       00 00 65 02 
       00          
047F46 13 01 00 45 0846*  	dl 0x000113,0x000045,BUF_51_032
       00 00 65 02 
       00          
047F4F 20 00 00 3E 0847*  	dl 0x000020,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047F58 8A 00 00 3E 0848*  	dl 0x00008A,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047F61 F5 00 00 3E 0849*  	dl 0x0000F5,0x00003E,BUF_51_040
       00 00 66 02 
       00          
047F6A 5E 00 00 1C 0850*  	dl 0x00005E,0x00001C,BUF_51_044
       00 00 67 02 
       00          
047F73             0851*  
047F73             0852*  ; render_obj_id:52
047F73             0853*  sprite_obj_017:
047F73 0C 00 00 49 0854*  	dl 0x00000C,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F7C 2F 00 00 49 0855*  	dl 0x00002F,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F85 53 00 00 49 0856*  	dl 0x000053,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F8E 76 00 00 49 0857*  	dl 0x000076,0x000049,BUF_52_004
       00 00 68 02 
       00          
047F97 9A 00 00 49 0858*  	dl 0x00009A,0x000049,BUF_52_004
       00 00 68 02 
       00          
047FA0 BD 00 00 49 0859*  	dl 0x0000BD,0x000049,BUF_52_004
       00 00 68 02 
       00          
047FA9 E1 00 00 49 0860*  	dl 0x0000E1,0x000049,BUF_52_004
       00 00 68 02 
       00          
047FB2 04 01 00 49 0861*  	dl 0x000104,0x000049,BUF_52_004
       00 00 68 02 
       00          
047FBB 28 01 00 49 0862*  	dl 0x000128,0x000049,BUF_52_004
       00 00 68 02 
       00          
047FC4 0F 00 00 48 0863*  	dl 0x00000F,0x000048,BUF_52_020
       00 00 69 02 
       00          
047FCD 3D 00 00 48 0864*  	dl 0x00003D,0x000048,BUF_52_020
       00 00 69 02 
       00          
047FD6 6A 00 00 48 0865*  	dl 0x00006A,0x000048,BUF_52_020
       00 00 69 02 
       00          
047FDF 98 00 00 48 0866*  	dl 0x000098,0x000048,BUF_52_020
       00 00 69 02 
       00          
047FE8 C5 00 00 48 0867*  	dl 0x0000C5,0x000048,BUF_52_020
       00 00 69 02 
       00          
047FF1 F3 00 00 48 0868*  	dl 0x0000F3,0x000048,BUF_52_020
       00 00 69 02 
       00          
047FFA 20 01 00 48 0869*  	dl 0x000120,0x000048,BUF_52_020
       00 00 69 02 
       00          
048003 16 00 00 45 0870*  	dl 0x000016,0x000045,BUF_52_032
       00 00 6A 02 
       00          
04800C 55 00 00 45 0871*  	dl 0x000055,0x000045,BUF_52_032
       00 00 6A 02 
       00          
048015 96 00 00 45 0872*  	dl 0x000096,0x000045,BUF_52_032
       00 00 6A 02 
       00          
04801E D6 00 00 45 0873*  	dl 0x0000D6,0x000045,BUF_52_032
       00 00 6A 02 
       00          
048027 16 01 00 45 0874*  	dl 0x000116,0x000045,BUF_52_032
       00 00 6A 02 
       00          
048030 24 00 00 3E 0875*  	dl 0x000024,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
048039 8E 00 00 3E 0876*  	dl 0x00008E,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
048042 F9 00 00 3E 0877*  	dl 0x0000F9,0x00003E,BUF_52_040
       00 00 6B 02 
       00          
04804B 6B 00 00 1C 0878*  	dl 0x00006B,0x00001C,BUF_52_044
       00 00 6C 02 
       00          
048054             0879*  
048054             0880*  ; render_obj_id:56
048054             0881*  sprite_obj_018:
048054 08 00 00 56 0882*  	dl 0x000008,0x000056,BUF_56_004
       00 00 6D 02 
       00          
04805D 2B 00 00 56 0883*  	dl 0x00002B,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048066 4F 00 00 56 0884*  	dl 0x00004F,0x000056,BUF_56_004
       00 00 6D 02 
       00          
04806F 72 00 00 56 0885*  	dl 0x000072,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048078 96 00 00 56 0886*  	dl 0x000096,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048081 B9 00 00 56 0887*  	dl 0x0000B9,0x000056,BUF_56_004
       00 00 6D 02 
       00          
04808A DD 00 00 56 0888*  	dl 0x0000DD,0x000056,BUF_56_004
       00 00 6D 02 
       00          
048093 00 01 00 56 0889*  	dl 0x000100,0x000056,BUF_56_004
       00 00 6D 02 
       00          
04809C 24 01 00 56 0890*  	dl 0x000124,0x000056,BUF_56_004
       00 00 6D 02 
       00          
0480A5 0B 00 00 59 0891*  	dl 0x00000B,0x000059,BUF_56_020
       00 00 6E 02 
       00          
0480AE 39 00 00 59 0892*  	dl 0x000039,0x000059,BUF_56_020
       00 00 6E 02 
       00          
0480B7 66 00 00 59 0893*  	dl 0x000066,0x000059,BUF_56_020
       00 00 6E 02 
       00          
0480C0 94 00 00 59 0894*  	dl 0x000094,0x000059,BUF_56_020
       00 00 6E 02 
       00          
0480C9 C1 00 00 59 0895*  	dl 0x0000C1,0x000059,BUF_56_020
       00 00 6E 02 
       00          
0480D2 EF 00 00 59 0896*  	dl 0x0000EF,0x000059,BUF_56_020
       00 00 6E 02 
       00          
0480DB 1C 01 00 59 0897*  	dl 0x00011C,0x000059,BUF_56_020
       00 00 6E 02 
       00          
0480E4 0E 00 00 5D 0898*  	dl 0x00000E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
0480ED 4D 00 00 5D 0899*  	dl 0x00004D,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
0480F6 8E 00 00 5D 0900*  	dl 0x00008E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
0480FF CE 00 00 5D 0901*  	dl 0x0000CE,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
048108 0E 01 00 5D 0902*  	dl 0x00010E,0x00005D,BUF_56_032
       00 00 6F 02 
       00          
048111 17 00 00 66 0903*  	dl 0x000017,0x000066,BUF_56_040
       00 00 70 02 
       00          
04811A 81 00 00 66 0904*  	dl 0x000081,0x000066,BUF_56_040
       00 00 70 02 
       00          
048123 EC 00 00 66 0905*  	dl 0x0000EC,0x000066,BUF_56_040
       00 00 70 02 
       00          
04812C A0 00 00 93 0906*  	dl 0x0000A0,0x000093,BUF_56_044
       00 00 71 02 
       00          
048135             0907*  
048135             0908*  ; render_obj_id:60
048135             0909*  sprite_obj_019:
048135 03 00 00 41 0910*  	dl 0x000003,0x000041,BUF_60_004
       00 00 72 02 
       00          
04813E 26 00 00 41 0911*  	dl 0x000026,0x000041,BUF_60_004
       00 00 72 02 
       00          
048147 4A 00 00 41 0912*  	dl 0x00004A,0x000041,BUF_60_004
       00 00 72 02 
       00          
048150 6D 00 00 41 0913*  	dl 0x00006D,0x000041,BUF_60_004
       00 00 72 02 
       00          
048159 91 00 00 41 0914*  	dl 0x000091,0x000041,BUF_60_004
       00 00 72 02 
       00          
048162 B4 00 00 41 0915*  	dl 0x0000B4,0x000041,BUF_60_004
       00 00 72 02 
       00          
04816B D8 00 00 41 0916*  	dl 0x0000D8,0x000041,BUF_60_004
       00 00 72 02 
       00          
048174 FB 00 00 41 0917*  	dl 0x0000FB,0x000041,BUF_60_004
       00 00 72 02 
       00          
04817D 1F 01 00 41 0918*  	dl 0x00011F,0x000041,BUF_60_004
       00 00 72 02 
       00          
048186 03 00 00 3C 0919*  	dl 0x000003,0x00003C,BUF_60_020
       00 00 73 02 
       00          
04818F 31 00 00 3C 0920*  	dl 0x000031,0x00003C,BUF_60_020
       00 00 73 02 
       00          
048198 5E 00 00 3C 0921*  	dl 0x00005E,0x00003C,BUF_60_020
       00 00 73 02 
       00          
0481A1 8C 00 00 3C 0922*  	dl 0x00008C,0x00003C,BUF_60_020
       00 00 73 02 
       00          
0481AA B9 00 00 3C 0923*  	dl 0x0000B9,0x00003C,BUF_60_020
       00 00 73 02 
       00          
0481B3 E7 00 00 3C 0924*  	dl 0x0000E7,0x00003C,BUF_60_020
       00 00 73 02 
       00          
0481BC 14 01 00 3C 0925*  	dl 0x000114,0x00003C,BUF_60_020
       00 00 73 02 
       00          
0481C5 05 00 00 35 0926*  	dl 0x000005,0x000035,BUF_60_032
       00 00 74 02 
       00          
0481CE 44 00 00 35 0927*  	dl 0x000044,0x000035,BUF_60_032
       00 00 74 02 
       00          
0481D7 85 00 00 35 0928*  	dl 0x000085,0x000035,BUF_60_032
       00 00 74 02 
       00          
0481E0 C5 00 00 35 0929*  	dl 0x0000C5,0x000035,BUF_60_032
       00 00 74 02 
       00          
0481E9 05 01 00 35 0930*  	dl 0x000105,0x000035,BUF_60_032
       00 00 74 02 
       00          
0481F2 07 00 00 21 0931*  	dl 0x000007,0x000021,BUF_60_040
       00 00 75 02 
       00          
0481FB 71 00 00 21 0932*  	dl 0x000071,0x000021,BUF_60_040
       00 00 75 02 
       00          
048204 DC 00 00 21 0933*  	dl 0x0000DC,0x000021,BUF_60_040
       00 00 75 02 
       00          
04820D 15 00 00 00 0934*  	dl 0x000015,0x000000,BUF_60_044
       00 00 76 02 
       00          
048216             0935*  
048216             0936*  sprite_obj_255: ; placeholder to keep the assembler happy, CANNOT BE A VALID sprite_obj
048216             0937*  
048216             0938*  map_type_status_lut:
048216             0939*  ; {map_type_status}, {sprite_obj} ; {obj_id} ({render_obj_id}) {tile_name} {render_type_idx} {render_type}
048216 50 FF       0940*  	db %01010000, 255 ; 10 (10) LIGHT GREY WALL 0 cube
048218 50 FF       0941*  	db %01010000, 255 ; 11 (11) JAIL CELL 0 cube
04821A 50 FF       0942*  	db %01010000, 255 ; 12 (12) STONE ARCH BIRD 0 cube
04821C 50 FF       0943*  	db %01010000, 255 ; 13 (13) DARK GREY WALL 0 cube
04821E 50 FF       0944*  	db %01010000, 255 ; 14 (14) WOOD WALL 0 cube
048220 50 FF       0945*  	db %01010000, 255 ; 15 (15) HANGING FLAG 0 cube
048222 50 FF       0946*  	db %01010000, 255 ; 16 (16) WOOD EAGLE 0 cube
048224 50 FF       0947*  	db %01010000, 255 ; 17 (17) BLUE WALL 0 cube
048226 02 FF       0948*  	db %00000010, 255 ; 18 (None) PLACEHOLDER 2 null cell
048228 42 FF       0949*  	db %01000010, 255 ; 19 (19) NULL CELL 2 null cell
04822A 43 00       0950*  	db %01000011, 0 ; 20 (20) LAMP 3 sprite
04822C 43 01       0951*  	db %01000011, 1 ; 21 (21) BARREL 3 sprite
04822E 43 02       0952*  	db %01000011, 2 ; 22 (22) TABLE 3 sprite
048230 03 03       0953*  	db %00000011, 3 ; 23 (23) OVERHEAD LIGHT 3 sprite
048232 43 04       0954*  	db %01000011, 4 ; 24 (24) RADIOACTIVE BARREL 3 sprite
048234 00 FF       0955*  	db %00000000, 255 ; 25 (25) BJ 25% 4 ui
048236 00 FF       0956*  	db %00000000, 255 ; 26 (26) BJ 50% 4 ui
048238 00 FF       0957*  	db %00000000, 255 ; 27 (27) BJ 75% 4 ui
04823A 08 FF       0958*  	db %00001000, 255 ; 28 (28) BJ 100%/ START POSITION 4 ui
04823C 01 FF       0959*  	db %00000001, 255 ; 29 (29) GREY FLOOR 1 floor
04823E 34 FF       0960*  	db %00110100, 255 ; 30 (57) DOOR TO ROOM 0 0 cube
048240 34 FF       0961*  	db %00110100, 255 ; 31 (57) DOOR TO ROOM 1 0 cube
048242 34 FF       0962*  	db %00110100, 255 ; 32 (57) DOOR TO ROOM 2 0 cube
048244 34 FF       0963*  	db %00110100, 255 ; 33 (57) DOOR TO ROOM 3 0 cube
048246 34 FF       0964*  	db %00110100, 255 ; 34 (57) DOOR TO ROOM 4 0 cube
048248 34 FF       0965*  	db %00110100, 255 ; 35 (57) DOOR TO ROOM 5 0 cube
04824A 34 FF       0966*  	db %00110100, 255 ; 36 (57) DOOR TO ROOM 6 0 cube
04824C 34 FF       0967*  	db %00110100, 255 ; 37 (57) DOOR TO ROOM 7 0 cube
04824E 34 FF       0968*  	db %00110100, 255 ; 38 (57) DOOR TO ROOM 8 0 cube
048250 34 FF       0969*  	db %00110100, 255 ; 39 (57) DOOR TO ROOM 9 0 cube
048252 03 05       0970*  	db %00000011, 5 ; 40 (40) HEALTH PACK 3 sprite
048254 03 06       0971*  	db %00000011, 6 ; 41 (41) GOLD CHALISE 3 sprite
048256 03 07       0972*  	db %00000011, 7 ; 42 (42) GOLD CROSS 3 sprite
048258 03 08       0973*  	db %00000011, 8 ; 43 (43) PLATE OF FOOD 3 sprite
04825A 03 09       0974*  	db %00000011, 9 ; 44 (44) KEYCARD 3 sprite
04825C 03 0A       0975*  	db %00000011, 10 ; 45 (45) GOLD CHEST 3 sprite
04825E 03 0B       0976*  	db %00000011, 11 ; 46 (46) MACHINE GUN 3 sprite
048260 03 0C       0977*  	db %00000011, 12 ; 47 (47) GATLING GUN 3 sprite
048262 03 0D       0978*  	db %00000011, 13 ; 48 (48) DOG FOOD 3 sprite
048264 03 0E       0979*  	db %00000011, 14 ; 49 (49) GOLD KEY 3 sprite
048266 43 0F       0980*  	db %01000011, 15 ; 50 (50) DOG 3 sprite
048268 43 10       0981*  	db %01000011, 16 ; 51 (51) GERMAN TROOPER 3 sprite
04826A 43 11       0982*  	db %01000011, 17 ; 52 (52) SS GUARD 3 sprite
04826C 02 FF       0983*  	db %00000010, 255 ; 53 (None) PLACEHOLDER 2 null cell
04826E 02 FF       0984*  	db %00000010, 255 ; 54 (None) PLACEHOLDER 2 null cell
048270 02 FF       0985*  	db %00000010, 255 ; 55 (None) PLACEHOLDER 2 null cell
048272 03 12       0986*  	db %00000011, 18 ; 56 (56) DEAD GUARD 3 sprite
048274 90 FF       0987*  	db %10010000, 255 ; 57 (57) REGULAR DOOR 0 cube
048276 70 FF       0988*  	db %01110000, 255 ; 58 (58) ELEVATOR SWITCH 0 cube
048278 90 FF       0989*  	db %10010000, 255 ; 59 (59) ELEVATOR DOOR 0 cube
04827A 43 13       0990*  	db %01000011, 19 ; 60 (60) EXPLOSION 3 sprite
04827C 02 FF       0991*  	db %00000010, 255 ; 61 (None) PLACEHOLDER 2 null cell
04827E 02 FF       0992*  	db %00000010, 255 ; 62 (None) PLACEHOLDER 2 null cell
048280 02 FF       0993*  	db %00000010, 255 ; 63 (None) PLACEHOLDER 2 null cell
048282 02 FF       0994*  	db %00000010, 255 ; 64 (None) PLACEHOLDER 2 null cell
048284 02 FF       0995*  	db %00000010, 255 ; 65 (None) PLACEHOLDER 2 null cell
048286 02 FF       0996*  	db %00000010, 255 ; 66 (None) PLACEHOLDER 2 null cell
048288 02 FF       0997*  	db %00000010, 255 ; 67 (None) PLACEHOLDER 2 null cell
04828A 02 FF       0998*  	db %00000010, 255 ; 68 (None) PLACEHOLDER 2 null cell
04828C 02 FF       0999*  	db %00000010, 255 ; 69 (None) PLACEHOLDER 2 null cell
04828E 02 FF       1000*  	db %00000010, 255 ; 70 (None) PLACEHOLDER 2 null cell
048290 02 FF       1001*  	db %00000010, 255 ; 71 (None) PLACEHOLDER 2 null cell
048292 02 FF       1002*  	db %00000010, 255 ; 72 (None) PLACEHOLDER 2 null cell
048294 02 FF       1003*  	db %00000010, 255 ; 73 (None) PLACEHOLDER 2 null cell
048296 02 FF       1004*  	db %00000010, 255 ; 74 (None) PLACEHOLDER 2 null cell
048298 02 FF       1005*  	db %00000010, 255 ; 75 (None) PLACEHOLDER 2 null cell
04829A 02 FF       1006*  	db %00000010, 255 ; 76 (None) PLACEHOLDER 2 null cell
04829C 02 FF       1007*  	db %00000010, 255 ; 77 (None) PLACEHOLDER 2 null cell
04829E 02 FF       1008*  	db %00000010, 255 ; 78 (None) PLACEHOLDER 2 null cell
0482A0 02 FF       1009*  	db %00000010, 255 ; 79 (None) PLACEHOLDER 2 null cell
0482A2 02 FF       1010*  	db %00000010, 255 ; 80 (None) PLACEHOLDER 2 null cell
0482A4 02 FF       1011*  	db %00000010, 255 ; 81 (None) PLACEHOLDER 2 null cell
0482A6 02 FF       1012*  	db %00000010, 255 ; 82 (None) PLACEHOLDER 2 null cell
0482A8 02 FF       1013*  	db %00000010, 255 ; 83 (None) PLACEHOLDER 2 null cell
0482AA 02 FF       1014*  	db %00000010, 255 ; 84 (None) PLACEHOLDER 2 null cell
0482AC 02 FF       1015*  	db %00000010, 255 ; 85 (None) PLACEHOLDER 2 null cell
0482AE 02 FF       1016*  	db %00000010, 255 ; 86 (None) PLACEHOLDER 2 null cell
0482B0 02 FF       1017*  	db %00000010, 255 ; 87 (None) PLACEHOLDER 2 null cell
0482B2 02 FF       1018*  	db %00000010, 255 ; 88 (None) PLACEHOLDER 2 null cell
0482B4 02 FF       1019*  	db %00000010, 255 ; 89 (None) PLACEHOLDER 2 null cell
0482B6 02 FF       1020*  	db %00000010, 255 ; 90 (None) PLACEHOLDER 2 null cell
0482B8 02 FF       1021*  	db %00000010, 255 ; 91 (None) PLACEHOLDER 2 null cell
0482BA 02 FF       1022*  	db %00000010, 255 ; 92 (None) PLACEHOLDER 2 null cell
0482BC 02 FF       1023*  	db %00000010, 255 ; 93 (None) PLACEHOLDER 2 null cell
0482BE 02 FF       1024*  	db %00000010, 255 ; 94 (None) PLACEHOLDER 2 null cell
0482C0 02 FF       1025*  	db %00000010, 255 ; 95 (None) PLACEHOLDER 2 null cell
0482C2 02 FF       1026*  	db %00000010, 255 ; 96 (None) PLACEHOLDER 2 null cell
0482C4 02 FF       1027*  	db %00000010, 255 ; 97 (None) PLACEHOLDER 2 null cell
0482C6 02 FF       1028*  	db %00000010, 255 ; 98 (None) PLACEHOLDER 2 null cell
0482C8 02 FF       1029*  	db %00000010, 255 ; 99 (None) PLACEHOLDER 2 null cell
0482CA             0018   	include "src/asm/font_itc_honda.asm"
0482CA             0001*  ; Bitmap indices:
0482CA             0002*  BUF_4384: equ 0x1120 ; 32
0482CA             0003*  ; Missing character 33 !
0482CA             0004*  ; Missing character 34 "
0482CA             0005*  ; Missing character 35 #
0482CA             0006*  ; Missing character 36 $
0482CA             0007*  ; Missing character 37 %
0482CA             0008*  ; Missing character 38 &
0482CA             0009*  ; Missing character 39 '
0482CA             0010*  ; Missing character 40 (
0482CA             0011*  ; Missing character 41 )
0482CA             0012*  ; Missing character 42 *
0482CA             0013*  ; Missing character 43 +
0482CA             0014*  ; Missing character 44 ,
0482CA             0015*  ; Missing character 45 -
0482CA             0016*  BUF_4398: equ 0x112E ; 46 .
0482CA             0017*  ; Missing character 47 /
0482CA             0018*  BUF_4400: equ 0x1130 ; 48 0
0482CA             0019*  BUF_4401: equ 0x1131 ; 49 1
0482CA             0020*  BUF_4402: equ 0x1132 ; 50 2
0482CA             0021*  BUF_4403: equ 0x1133 ; 51 3
0482CA             0022*  BUF_4404: equ 0x1134 ; 52 4
0482CA             0023*  BUF_4405: equ 0x1135 ; 53 5
0482CA             0024*  BUF_4406: equ 0x1136 ; 54 6
0482CA             0025*  BUF_4407: equ 0x1137 ; 55 7
0482CA             0026*  BUF_4408: equ 0x1138 ; 56 8
0482CA             0027*  BUF_4409: equ 0x1139 ; 57 9
0482CA             0028*  ; Missing character 58 :
0482CA             0029*  ; Missing character 59 ;
0482CA             0030*  ; Missing character 60 <
0482CA             0031*  ; Missing character 61 =
0482CA             0032*  ; Missing character 62 >
0482CA             0033*  ; Missing character 63 ?
0482CA             0034*  ; Missing character 64 @
0482CA             0035*  BUF_4417: equ 0x1141 ; 65 A
0482CA             0036*  BUF_4418: equ 0x1142 ; 66 B
0482CA             0037*  BUF_4419: equ 0x1143 ; 67 C
0482CA             0038*  BUF_4420: equ 0x1144 ; 68 D
0482CA             0039*  BUF_4421: equ 0x1145 ; 69 E
0482CA             0040*  BUF_4422: equ 0x1146 ; 70 F
0482CA             0041*  BUF_4423: equ 0x1147 ; 71 G
0482CA             0042*  BUF_4424: equ 0x1148 ; 72 H
0482CA             0043*  BUF_4425: equ 0x1149 ; 73 I
0482CA             0044*  BUF_4426: equ 0x114A ; 74 J
0482CA             0045*  BUF_4427: equ 0x114B ; 75 K
0482CA             0046*  BUF_4428: equ 0x114C ; 76 L
0482CA             0047*  BUF_4429: equ 0x114D ; 77 M
0482CA             0048*  BUF_4430: equ 0x114E ; 78 N
0482CA             0049*  BUF_4431: equ 0x114F ; 79 O
0482CA             0050*  BUF_4432: equ 0x1150 ; 80 P
0482CA             0051*  BUF_4433: equ 0x1151 ; 81 Q
0482CA             0052*  BUF_4434: equ 0x1152 ; 82 R
0482CA             0053*  BUF_4435: equ 0x1153 ; 83 S
0482CA             0054*  BUF_4436: equ 0x1154 ; 84 T
0482CA             0055*  BUF_4437: equ 0x1155 ; 85 U
0482CA             0056*  BUF_4438: equ 0x1156 ; 86 V
0482CA             0057*  BUF_4439: equ 0x1157 ; 87 W
0482CA             0058*  BUF_4440: equ 0x1158 ; 88 X
0482CA             0059*  BUF_4441: equ 0x1159 ; 89 Y
0482CA             0060*  BUF_4442: equ 0x115A ; 90 Z
0482CA             0061*  ; Missing character 91 [
0482CA             0062*  ; Missing character 92 \
0482CA             0063*  ; Missing character 93 ]
0482CA             0064*  ; Missing character 94 ^
0482CA             0065*  ; Missing character 95 _
0482CA             0066*  ; Missing character 96 `
0482CA             0067*  BUF_4449: equ 0x1161 ; 97 a
0482CA             0068*  BUF_4450: equ 0x1162 ; 98 b
0482CA             0069*  BUF_4451: equ 0x1163 ; 99 c
0482CA             0070*  BUF_4452: equ 0x1164 ; 100 d
0482CA             0071*  BUF_4453: equ 0x1165 ; 101 e
0482CA             0072*  BUF_4454: equ 0x1166 ; 102 f
0482CA             0073*  BUF_4455: equ 0x1167 ; 103 g
0482CA             0074*  BUF_4456: equ 0x1168 ; 104 h
0482CA             0075*  BUF_4457: equ 0x1169 ; 105 i
0482CA             0076*  BUF_4458: equ 0x116A ; 106 j
0482CA             0077*  BUF_4459: equ 0x116B ; 107 k
0482CA             0078*  BUF_4460: equ 0x116C ; 108 l
0482CA             0079*  BUF_4461: equ 0x116D ; 109 m
0482CA             0080*  BUF_4462: equ 0x116E ; 110 n
0482CA             0081*  BUF_4463: equ 0x116F ; 111 o
0482CA             0082*  BUF_4464: equ 0x1170 ; 112 p
0482CA             0083*  BUF_4465: equ 0x1171 ; 113 q
0482CA             0084*  BUF_4466: equ 0x1172 ; 114 r
0482CA             0085*  BUF_4467: equ 0x1173 ; 115 s
0482CA             0086*  BUF_4468: equ 0x1174 ; 116 t
0482CA             0087*  BUF_4469: equ 0x1175 ; 117 u
0482CA             0088*  BUF_4470: equ 0x1176 ; 118 v
0482CA             0089*  BUF_4471: equ 0x1177 ; 119 w
0482CA             0090*  BUF_4472: equ 0x1178 ; 120 x
0482CA             0091*  BUF_4473: equ 0x1179 ; 121 y
0482CA             0092*  BUF_4474: equ 0x117A ; 122 z
0482CA             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
0482CA             0094*  font_itc_honda:
0482CA 06 01 00 20 0095*  	dl 0x000106,BUF_4384
       11 00       
0482D0 06 01 00 20 0096*  	dl 0x000106,BUF_4384 ; Missing character 33
       11 00       
0482D6 06 01 00 20 0097*  	dl 0x000106,BUF_4384 ; Missing character 34
       11 00       
0482DC 06 01 00 20 0098*  	dl 0x000106,BUF_4384 ; Missing character 35
       11 00       
0482E2 06 01 00 20 0099*  	dl 0x000106,BUF_4384 ; Missing character 36
       11 00       
0482E8 06 01 00 20 0100*  	dl 0x000106,BUF_4384 ; Missing character 37
       11 00       
0482EE 06 01 00 20 0101*  	dl 0x000106,BUF_4384 ; Missing character 38
       11 00       
0482F4 06 01 00 20 0102*  	dl 0x000106,BUF_4384 ; Missing character 39
       11 00       
0482FA 06 01 00 20 0103*  	dl 0x000106,BUF_4384 ; Missing character 40
       11 00       
048300 06 01 00 20 0104*  	dl 0x000106,BUF_4384 ; Missing character 41
       11 00       
048306 06 01 00 20 0105*  	dl 0x000106,BUF_4384 ; Missing character 42
       11 00       
04830C 06 01 00 20 0106*  	dl 0x000106,BUF_4384 ; Missing character 43
       11 00       
048312 06 01 00 20 0107*  	dl 0x000106,BUF_4384 ; Missing character 44
       11 00       
048318 06 01 00 20 0108*  	dl 0x000106,BUF_4384 ; Missing character 45
       11 00       
04831E 05 05 0E 2E 0109*  	dl 0x0E0505,BUF_4398
       11 00       
048324 06 01 00 20 0110*  	dl 0x000106,BUF_4384 ; Missing character 47
       11 00       
04832A 0A 12 00 30 0111*  	dl 0x00120A,BUF_4400
       11 00       
048330 04 12 00 31 0112*  	dl 0x001204,BUF_4401
       11 00       
048336 09 12 00 32 0113*  	dl 0x001209,BUF_4402
       11 00       
04833C 0A 12 00 33 0114*  	dl 0x00120A,BUF_4403
       11 00       
048342 0C 12 00 34 0115*  	dl 0x00120C,BUF_4404
       11 00       
048348 0A 12 00 35 0116*  	dl 0x00120A,BUF_4405
       11 00       
04834E 0A 12 00 36 0117*  	dl 0x00120A,BUF_4406
       11 00       
048354 08 12 00 37 0118*  	dl 0x001208,BUF_4407
       11 00       
04835A 0A 12 00 38 0119*  	dl 0x00120A,BUF_4408
       11 00       
048360 0A 12 00 39 0120*  	dl 0x00120A,BUF_4409
       11 00       
048366 06 01 00 20 0121*  	dl 0x000106,BUF_4384 ; Missing character 58
       11 00       
04836C 06 01 00 20 0122*  	dl 0x000106,BUF_4384 ; Missing character 59
       11 00       
048372 06 01 00 20 0123*  	dl 0x000106,BUF_4384 ; Missing character 60
       11 00       
048378 06 01 00 20 0124*  	dl 0x000106,BUF_4384 ; Missing character 61
       11 00       
04837E 06 01 00 20 0125*  	dl 0x000106,BUF_4384 ; Missing character 62
       11 00       
048384 06 01 00 20 0126*  	dl 0x000106,BUF_4384 ; Missing character 63
       11 00       
04838A 06 01 00 20 0127*  	dl 0x000106,BUF_4384 ; Missing character 64
       11 00       
048390 0A 12 01 41 0128*  	dl 0x01120A,BUF_4417
       11 00       
048396 0A 12 00 42 0129*  	dl 0x00120A,BUF_4418
       11 00       
04839C 08 13 00 43 0130*  	dl 0x001308,BUF_4419
       11 00       
0483A2 0A 12 00 44 0131*  	dl 0x00120A,BUF_4420
       11 00       
0483A8 08 12 00 45 0132*  	dl 0x001208,BUF_4421
       11 00       
0483AE 08 12 00 46 0133*  	dl 0x001208,BUF_4422
       11 00       
0483B4 0A 12 00 47 0134*  	dl 0x00120A,BUF_4423
       11 00       
0483BA 0A 12 00 48 0135*  	dl 0x00120A,BUF_4424
       11 00       
0483C0 03 12 00 49 0136*  	dl 0x001203,BUF_4425
       11 00       
0483C6 06 12 00 4A 0137*  	dl 0x001206,BUF_4426
       11 00       
0483CC 0A 12 00 4B 0138*  	dl 0x00120A,BUF_4427
       11 00       
0483D2 08 12 01 4C 0139*  	dl 0x011208,BUF_4428
       11 00       
0483D8 0E 12 00 4D 0140*  	dl 0x00120E,BUF_4429
       11 00       
0483DE 0A 12 00 4E 0141*  	dl 0x00120A,BUF_4430
       11 00       
0483E4 0A 12 00 4F 0142*  	dl 0x00120A,BUF_4431
       11 00       
0483EA 0A 12 00 50 0143*  	dl 0x00120A,BUF_4432
       11 00       
0483F0 0A 15 00 51 0144*  	dl 0x00150A,BUF_4433
       11 00       
0483F6 0A 12 00 52 0145*  	dl 0x00120A,BUF_4434
       11 00       
0483FC 09 13 00 53 0146*  	dl 0x001309,BUF_4435
       11 00       
048402 0A 12 00 54 0147*  	dl 0x00120A,BUF_4436
       11 00       
048408 0A 12 00 55 0148*  	dl 0x00120A,BUF_4437
       11 00       
04840E 0A 12 00 56 0149*  	dl 0x00120A,BUF_4438
       11 00       
048414 10 12 00 57 0150*  	dl 0x001210,BUF_4439
       11 00       
04841A 0A 12 00 58 0151*  	dl 0x00120A,BUF_4440
       11 00       
048420 0A 12 01 59 0152*  	dl 0x01120A,BUF_4441
       11 00       
048426 09 12 01 5A 0153*  	dl 0x011209,BUF_4442
       11 00       
04842C 06 01 00 20 0154*  	dl 0x000106,BUF_4384 ; Missing character 91
       11 00       
048432 06 01 00 20 0155*  	dl 0x000106,BUF_4384 ; Missing character 92
       11 00       
048438 06 01 00 20 0156*  	dl 0x000106,BUF_4384 ; Missing character 93
       11 00       
04843E 06 01 00 20 0157*  	dl 0x000106,BUF_4384 ; Missing character 94
       11 00       
048444 06 01 00 20 0158*  	dl 0x000106,BUF_4384 ; Missing character 95
       11 00       
04844A 06 01 00 20 0159*  	dl 0x000106,BUF_4384 ; Missing character 96
       11 00       
048450 08 0C 06 61 0160*  	dl 0x060C08,BUF_4449
       11 00       
048456 09 12 01 62 0161*  	dl 0x011209,BUF_4450
       11 00       
04845C 07 0C 06 63 0162*  	dl 0x060C07,BUF_4451
       11 00       
048462 09 12 00 64 0163*  	dl 0x001209,BUF_4452
       11 00       
048468 08 0C 06 65 0164*  	dl 0x060C08,BUF_4453
       11 00       
04846E 09 12 00 66 0165*  	dl 0x001209,BUF_4454
       11 00       
048474 09 12 06 67 0166*  	dl 0x061209,BUF_4455
       11 00       
04847A 09 12 01 68 0167*  	dl 0x011209,BUF_4456
       11 00       
048480 04 12 00 69 0168*  	dl 0x001204,BUF_4457
       11 00       
048486 08 18 00 6A 0169*  	dl 0x001808,BUF_4458
       11 00       
04848C 09 12 01 6B 0170*  	dl 0x011209,BUF_4459
       11 00       
048492 03 12 00 6C 0171*  	dl 0x001203,BUF_4460
       11 00       
048498 0E 0D 06 6D 0172*  	dl 0x060D0E,BUF_4461
       11 00       
04849E 09 0C 06 6E 0173*  	dl 0x060C09,BUF_4462
       11 00       
0484A4 09 0C 06 6F 0174*  	dl 0x060C09,BUF_4463
       11 00       
0484AA 09 12 06 70 0175*  	dl 0x061209,BUF_4464
       11 00       
0484B0 09 12 06 71 0176*  	dl 0x061209,BUF_4465
       11 00       
0484B6 06 0D 06 72 0177*  	dl 0x060D06,BUF_4466
       11 00       
0484BC 08 0D 06 73 0178*  	dl 0x060D08,BUF_4467
       11 00       
0484C2 07 0F 03 74 0179*  	dl 0x030F07,BUF_4468
       11 00       
0484C8 09 0C 06 75 0180*  	dl 0x060C09,BUF_4469
       11 00       
0484CE 09 0C 06 76 0181*  	dl 0x060C09,BUF_4470
       11 00       
0484D4 0E 0C 06 77 0182*  	dl 0x060C0E,BUF_4471
       11 00       
0484DA 09 0C 06 78 0183*  	dl 0x060C09,BUF_4472
       11 00       
0484E0 09 11 06 79 0184*  	dl 0x061109,BUF_4473
       11 00       
0484E6 09 0C 06 7A 0185*  	dl 0x060C09,BUF_4474
       11 00       
0484EC             0186*  
0484EC             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
0484EC             0188*  load_font_itc_honda:
0484EC             0189*  
0484EC 21 2D 8E 04 0190*  	ld hl,Fhonda032
0484F0 11 0A CB 04 0191*  	ld de,filedata
0484F4 01 00 00 01 0192*  	ld bc,65536
0484F8 3E 01       0193*  	ld a,mos_load
0484FA 5B CF       0194*  	RST.LIL 08h
0484FC 21 20 11 00 0195*  	ld hl,BUF_4384
048500 01 06 00 00 0196*  	ld bc,6
048504 11 01 00 00 0197*  	ld de,1
048508 DD 21 06 00 0198*  	ld ix,6
       00          
04850D CD 59 C0 04 0199*  	call vdu_load_img
048511             0200*  ; Missing character 33
048511             0201*  ; Missing character 34
048511             0202*  ; Missing character 35
048511             0203*  ; Missing character 36
048511             0204*  ; Missing character 37
048511             0205*  ; Missing character 38
048511             0206*  ; Missing character 39
048511             0207*  ; Missing character 40
048511             0208*  ; Missing character 41
048511             0209*  ; Missing character 42
048511             0210*  ; Missing character 43
048511             0211*  ; Missing character 44
048511             0212*  ; Missing character 45
048511             0213*  
048511 21 43 8E 04 0214*  	ld hl,Fhonda046
048515 11 0A CB 04 0215*  	ld de,filedata
048519 01 00 00 01 0216*  	ld bc,65536
04851D 3E 01       0217*  	ld a,mos_load
04851F 5B CF       0218*  	RST.LIL 08h
048521 21 2E 11 00 0219*  	ld hl,BUF_4398
048525 01 05 00 00 0220*  	ld bc,5
048529 11 05 00 00 0221*  	ld de,5
04852D DD 21 19 00 0222*  	ld ix,25
       00          
048532 CD 59 C0 04 0223*  	call vdu_load_img
048536             0224*  ; Missing character 47
048536             0225*  
048536 21 59 8E 04 0226*  	ld hl,Fhonda048
04853A 11 0A CB 04 0227*  	ld de,filedata
04853E 01 00 00 01 0228*  	ld bc,65536
048542 3E 01       0229*  	ld a,mos_load
048544 5B CF       0230*  	RST.LIL 08h
048546 21 30 11 00 0231*  	ld hl,BUF_4400
04854A 01 0A 00 00 0232*  	ld bc,10
04854E 11 12 00 00 0233*  	ld de,18
048552 DD 21 B4 00 0234*  	ld ix,180
       00          
048557 CD 59 C0 04 0235*  	call vdu_load_img
04855B             0236*  
04855B 21 6F 8E 04 0237*  	ld hl,Fhonda049
04855F 11 0A CB 04 0238*  	ld de,filedata
048563 01 00 00 01 0239*  	ld bc,65536
048567 3E 01       0240*  	ld a,mos_load
048569 5B CF       0241*  	RST.LIL 08h
04856B 21 31 11 00 0242*  	ld hl,BUF_4401
04856F 01 04 00 00 0243*  	ld bc,4
048573 11 12 00 00 0244*  	ld de,18
048577 DD 21 48 00 0245*  	ld ix,72
       00          
04857C CD 59 C0 04 0246*  	call vdu_load_img
048580             0247*  
048580 21 85 8E 04 0248*  	ld hl,Fhonda050
048584 11 0A CB 04 0249*  	ld de,filedata
048588 01 00 00 01 0250*  	ld bc,65536
04858C 3E 01       0251*  	ld a,mos_load
04858E 5B CF       0252*  	RST.LIL 08h
048590 21 32 11 00 0253*  	ld hl,BUF_4402
048594 01 09 00 00 0254*  	ld bc,9
048598 11 12 00 00 0255*  	ld de,18
04859C DD 21 A2 00 0256*  	ld ix,162
       00          
0485A1 CD 59 C0 04 0257*  	call vdu_load_img
0485A5             0258*  
0485A5 21 9B 8E 04 0259*  	ld hl,Fhonda051
0485A9 11 0A CB 04 0260*  	ld de,filedata
0485AD 01 00 00 01 0261*  	ld bc,65536
0485B1 3E 01       0262*  	ld a,mos_load
0485B3 5B CF       0263*  	RST.LIL 08h
0485B5 21 33 11 00 0264*  	ld hl,BUF_4403
0485B9 01 0A 00 00 0265*  	ld bc,10
0485BD 11 12 00 00 0266*  	ld de,18
0485C1 DD 21 B4 00 0267*  	ld ix,180
       00          
0485C6 CD 59 C0 04 0268*  	call vdu_load_img
0485CA             0269*  
0485CA 21 B1 8E 04 0270*  	ld hl,Fhonda052
0485CE 11 0A CB 04 0271*  	ld de,filedata
0485D2 01 00 00 01 0272*  	ld bc,65536
0485D6 3E 01       0273*  	ld a,mos_load
0485D8 5B CF       0274*  	RST.LIL 08h
0485DA 21 34 11 00 0275*  	ld hl,BUF_4404
0485DE 01 0C 00 00 0276*  	ld bc,12
0485E2 11 12 00 00 0277*  	ld de,18
0485E6 DD 21 D8 00 0278*  	ld ix,216
       00          
0485EB CD 59 C0 04 0279*  	call vdu_load_img
0485EF             0280*  
0485EF 21 C7 8E 04 0281*  	ld hl,Fhonda053
0485F3 11 0A CB 04 0282*  	ld de,filedata
0485F7 01 00 00 01 0283*  	ld bc,65536
0485FB 3E 01       0284*  	ld a,mos_load
0485FD 5B CF       0285*  	RST.LIL 08h
0485FF 21 35 11 00 0286*  	ld hl,BUF_4405
048603 01 0A 00 00 0287*  	ld bc,10
048607 11 12 00 00 0288*  	ld de,18
04860B DD 21 B4 00 0289*  	ld ix,180
       00          
048610 CD 59 C0 04 0290*  	call vdu_load_img
048614             0291*  
048614 21 DD 8E 04 0292*  	ld hl,Fhonda054
048618 11 0A CB 04 0293*  	ld de,filedata
04861C 01 00 00 01 0294*  	ld bc,65536
048620 3E 01       0295*  	ld a,mos_load
048622 5B CF       0296*  	RST.LIL 08h
048624 21 36 11 00 0297*  	ld hl,BUF_4406
048628 01 0A 00 00 0298*  	ld bc,10
04862C 11 12 00 00 0299*  	ld de,18
048630 DD 21 B4 00 0300*  	ld ix,180
       00          
048635 CD 59 C0 04 0301*  	call vdu_load_img
048639             0302*  
048639 21 F3 8E 04 0303*  	ld hl,Fhonda055
04863D 11 0A CB 04 0304*  	ld de,filedata
048641 01 00 00 01 0305*  	ld bc,65536
048645 3E 01       0306*  	ld a,mos_load
048647 5B CF       0307*  	RST.LIL 08h
048649 21 37 11 00 0308*  	ld hl,BUF_4407
04864D 01 08 00 00 0309*  	ld bc,8
048651 11 12 00 00 0310*  	ld de,18
048655 DD 21 90 00 0311*  	ld ix,144
       00          
04865A CD 59 C0 04 0312*  	call vdu_load_img
04865E             0313*  
04865E 21 09 8F 04 0314*  	ld hl,Fhonda056
048662 11 0A CB 04 0315*  	ld de,filedata
048666 01 00 00 01 0316*  	ld bc,65536
04866A 3E 01       0317*  	ld a,mos_load
04866C 5B CF       0318*  	RST.LIL 08h
04866E 21 38 11 00 0319*  	ld hl,BUF_4408
048672 01 0A 00 00 0320*  	ld bc,10
048676 11 12 00 00 0321*  	ld de,18
04867A DD 21 B4 00 0322*  	ld ix,180
       00          
04867F CD 59 C0 04 0323*  	call vdu_load_img
048683             0324*  
048683 21 1F 8F 04 0325*  	ld hl,Fhonda057
048687 11 0A CB 04 0326*  	ld de,filedata
04868B 01 00 00 01 0327*  	ld bc,65536
04868F 3E 01       0328*  	ld a,mos_load
048691 5B CF       0329*  	RST.LIL 08h
048693 21 39 11 00 0330*  	ld hl,BUF_4409
048697 01 0A 00 00 0331*  	ld bc,10
04869B 11 12 00 00 0332*  	ld de,18
04869F DD 21 B4 00 0333*  	ld ix,180
       00          
0486A4 CD 59 C0 04 0334*  	call vdu_load_img
0486A8             0335*  ; Missing character 58
0486A8             0336*  ; Missing character 59
0486A8             0337*  ; Missing character 60
0486A8             0338*  ; Missing character 61
0486A8             0339*  ; Missing character 62
0486A8             0340*  ; Missing character 63
0486A8             0341*  ; Missing character 64
0486A8             0342*  
0486A8 21 35 8F 04 0343*  	ld hl,Fhonda065
0486AC 11 0A CB 04 0344*  	ld de,filedata
0486B0 01 00 00 01 0345*  	ld bc,65536
0486B4 3E 01       0346*  	ld a,mos_load
0486B6 5B CF       0347*  	RST.LIL 08h
0486B8 21 41 11 00 0348*  	ld hl,BUF_4417
0486BC 01 0A 00 00 0349*  	ld bc,10
0486C0 11 12 00 00 0350*  	ld de,18
0486C4 DD 21 B4 00 0351*  	ld ix,180
       00          
0486C9 CD 59 C0 04 0352*  	call vdu_load_img
0486CD             0353*  
0486CD 21 4B 8F 04 0354*  	ld hl,Fhonda066
0486D1 11 0A CB 04 0355*  	ld de,filedata
0486D5 01 00 00 01 0356*  	ld bc,65536
0486D9 3E 01       0357*  	ld a,mos_load
0486DB 5B CF       0358*  	RST.LIL 08h
0486DD 21 42 11 00 0359*  	ld hl,BUF_4418
0486E1 01 0A 00 00 0360*  	ld bc,10
0486E5 11 12 00 00 0361*  	ld de,18
0486E9 DD 21 B4 00 0362*  	ld ix,180
       00          
0486EE CD 59 C0 04 0363*  	call vdu_load_img
0486F2             0364*  
0486F2 21 61 8F 04 0365*  	ld hl,Fhonda067
0486F6 11 0A CB 04 0366*  	ld de,filedata
0486FA 01 00 00 01 0367*  	ld bc,65536
0486FE 3E 01       0368*  	ld a,mos_load
048700 5B CF       0369*  	RST.LIL 08h
048702 21 43 11 00 0370*  	ld hl,BUF_4419
048706 01 08 00 00 0371*  	ld bc,8
04870A 11 13 00 00 0372*  	ld de,19
04870E DD 21 98 00 0373*  	ld ix,152
       00          
048713 CD 59 C0 04 0374*  	call vdu_load_img
048717             0375*  
048717 21 77 8F 04 0376*  	ld hl,Fhonda068
04871B 11 0A CB 04 0377*  	ld de,filedata
04871F 01 00 00 01 0378*  	ld bc,65536
048723 3E 01       0379*  	ld a,mos_load
048725 5B CF       0380*  	RST.LIL 08h
048727 21 44 11 00 0381*  	ld hl,BUF_4420
04872B 01 0A 00 00 0382*  	ld bc,10
04872F 11 12 00 00 0383*  	ld de,18
048733 DD 21 B4 00 0384*  	ld ix,180
       00          
048738 CD 59 C0 04 0385*  	call vdu_load_img
04873C             0386*  
04873C 21 8D 8F 04 0387*  	ld hl,Fhonda069
048740 11 0A CB 04 0388*  	ld de,filedata
048744 01 00 00 01 0389*  	ld bc,65536
048748 3E 01       0390*  	ld a,mos_load
04874A 5B CF       0391*  	RST.LIL 08h
04874C 21 45 11 00 0392*  	ld hl,BUF_4421
048750 01 08 00 00 0393*  	ld bc,8
048754 11 12 00 00 0394*  	ld de,18
048758 DD 21 90 00 0395*  	ld ix,144
       00          
04875D CD 59 C0 04 0396*  	call vdu_load_img
048761             0397*  
048761 21 A3 8F 04 0398*  	ld hl,Fhonda070
048765 11 0A CB 04 0399*  	ld de,filedata
048769 01 00 00 01 0400*  	ld bc,65536
04876D 3E 01       0401*  	ld a,mos_load
04876F 5B CF       0402*  	RST.LIL 08h
048771 21 46 11 00 0403*  	ld hl,BUF_4422
048775 01 08 00 00 0404*  	ld bc,8
048779 11 12 00 00 0405*  	ld de,18
04877D DD 21 90 00 0406*  	ld ix,144
       00          
048782 CD 59 C0 04 0407*  	call vdu_load_img
048786             0408*  
048786 21 B9 8F 04 0409*  	ld hl,Fhonda071
04878A 11 0A CB 04 0410*  	ld de,filedata
04878E 01 00 00 01 0411*  	ld bc,65536
048792 3E 01       0412*  	ld a,mos_load
048794 5B CF       0413*  	RST.LIL 08h
048796 21 47 11 00 0414*  	ld hl,BUF_4423
04879A 01 0A 00 00 0415*  	ld bc,10
04879E 11 12 00 00 0416*  	ld de,18
0487A2 DD 21 B4 00 0417*  	ld ix,180
       00          
0487A7 CD 59 C0 04 0418*  	call vdu_load_img
0487AB             0419*  
0487AB 21 CF 8F 04 0420*  	ld hl,Fhonda072
0487AF 11 0A CB 04 0421*  	ld de,filedata
0487B3 01 00 00 01 0422*  	ld bc,65536
0487B7 3E 01       0423*  	ld a,mos_load
0487B9 5B CF       0424*  	RST.LIL 08h
0487BB 21 48 11 00 0425*  	ld hl,BUF_4424
0487BF 01 0A 00 00 0426*  	ld bc,10
0487C3 11 12 00 00 0427*  	ld de,18
0487C7 DD 21 B4 00 0428*  	ld ix,180
       00          
0487CC CD 59 C0 04 0429*  	call vdu_load_img
0487D0             0430*  
0487D0 21 E5 8F 04 0431*  	ld hl,Fhonda073
0487D4 11 0A CB 04 0432*  	ld de,filedata
0487D8 01 00 00 01 0433*  	ld bc,65536
0487DC 3E 01       0434*  	ld a,mos_load
0487DE 5B CF       0435*  	RST.LIL 08h
0487E0 21 49 11 00 0436*  	ld hl,BUF_4425
0487E4 01 03 00 00 0437*  	ld bc,3
0487E8 11 12 00 00 0438*  	ld de,18
0487EC DD 21 36 00 0439*  	ld ix,54
       00          
0487F1 CD 59 C0 04 0440*  	call vdu_load_img
0487F5             0441*  
0487F5 21 FB 8F 04 0442*  	ld hl,Fhonda074
0487F9 11 0A CB 04 0443*  	ld de,filedata
0487FD 01 00 00 01 0444*  	ld bc,65536
048801 3E 01       0445*  	ld a,mos_load
048803 5B CF       0446*  	RST.LIL 08h
048805 21 4A 11 00 0447*  	ld hl,BUF_4426
048809 01 06 00 00 0448*  	ld bc,6
04880D 11 12 00 00 0449*  	ld de,18
048811 DD 21 6C 00 0450*  	ld ix,108
       00          
048816 CD 59 C0 04 0451*  	call vdu_load_img
04881A             0452*  
04881A 21 11 90 04 0453*  	ld hl,Fhonda075
04881E 11 0A CB 04 0454*  	ld de,filedata
048822 01 00 00 01 0455*  	ld bc,65536
048826 3E 01       0456*  	ld a,mos_load
048828 5B CF       0457*  	RST.LIL 08h
04882A 21 4B 11 00 0458*  	ld hl,BUF_4427
04882E 01 0A 00 00 0459*  	ld bc,10
048832 11 12 00 00 0460*  	ld de,18
048836 DD 21 B4 00 0461*  	ld ix,180
       00          
04883B CD 59 C0 04 0462*  	call vdu_load_img
04883F             0463*  
04883F 21 27 90 04 0464*  	ld hl,Fhonda076
048843 11 0A CB 04 0465*  	ld de,filedata
048847 01 00 00 01 0466*  	ld bc,65536
04884B 3E 01       0467*  	ld a,mos_load
04884D 5B CF       0468*  	RST.LIL 08h
04884F 21 4C 11 00 0469*  	ld hl,BUF_4428
048853 01 08 00 00 0470*  	ld bc,8
048857 11 12 00 00 0471*  	ld de,18
04885B DD 21 90 00 0472*  	ld ix,144
       00          
048860 CD 59 C0 04 0473*  	call vdu_load_img
048864             0474*  
048864 21 3D 90 04 0475*  	ld hl,Fhonda077
048868 11 0A CB 04 0476*  	ld de,filedata
04886C 01 00 00 01 0477*  	ld bc,65536
048870 3E 01       0478*  	ld a,mos_load
048872 5B CF       0479*  	RST.LIL 08h
048874 21 4D 11 00 0480*  	ld hl,BUF_4429
048878 01 0E 00 00 0481*  	ld bc,14
04887C 11 12 00 00 0482*  	ld de,18
048880 DD 21 FC 00 0483*  	ld ix,252
       00          
048885 CD 59 C0 04 0484*  	call vdu_load_img
048889             0485*  
048889 21 53 90 04 0486*  	ld hl,Fhonda078
04888D 11 0A CB 04 0487*  	ld de,filedata
048891 01 00 00 01 0488*  	ld bc,65536
048895 3E 01       0489*  	ld a,mos_load
048897 5B CF       0490*  	RST.LIL 08h
048899 21 4E 11 00 0491*  	ld hl,BUF_4430
04889D 01 0A 00 00 0492*  	ld bc,10
0488A1 11 12 00 00 0493*  	ld de,18
0488A5 DD 21 B4 00 0494*  	ld ix,180
       00          
0488AA CD 59 C0 04 0495*  	call vdu_load_img
0488AE             0496*  
0488AE 21 69 90 04 0497*  	ld hl,Fhonda079
0488B2 11 0A CB 04 0498*  	ld de,filedata
0488B6 01 00 00 01 0499*  	ld bc,65536
0488BA 3E 01       0500*  	ld a,mos_load
0488BC 5B CF       0501*  	RST.LIL 08h
0488BE 21 4F 11 00 0502*  	ld hl,BUF_4431
0488C2 01 0A 00 00 0503*  	ld bc,10
0488C6 11 12 00 00 0504*  	ld de,18
0488CA DD 21 B4 00 0505*  	ld ix,180
       00          
0488CF CD 59 C0 04 0506*  	call vdu_load_img
0488D3             0507*  
0488D3 21 7F 90 04 0508*  	ld hl,Fhonda080
0488D7 11 0A CB 04 0509*  	ld de,filedata
0488DB 01 00 00 01 0510*  	ld bc,65536
0488DF 3E 01       0511*  	ld a,mos_load
0488E1 5B CF       0512*  	RST.LIL 08h
0488E3 21 50 11 00 0513*  	ld hl,BUF_4432
0488E7 01 0A 00 00 0514*  	ld bc,10
0488EB 11 12 00 00 0515*  	ld de,18
0488EF DD 21 B4 00 0516*  	ld ix,180
       00          
0488F4 CD 59 C0 04 0517*  	call vdu_load_img
0488F8             0518*  
0488F8 21 95 90 04 0519*  	ld hl,Fhonda081
0488FC 11 0A CB 04 0520*  	ld de,filedata
048900 01 00 00 01 0521*  	ld bc,65536
048904 3E 01       0522*  	ld a,mos_load
048906 5B CF       0523*  	RST.LIL 08h
048908 21 51 11 00 0524*  	ld hl,BUF_4433
04890C 01 0A 00 00 0525*  	ld bc,10
048910 11 15 00 00 0526*  	ld de,21
048914 DD 21 D2 00 0527*  	ld ix,210
       00          
048919 CD 59 C0 04 0528*  	call vdu_load_img
04891D             0529*  
04891D 21 AB 90 04 0530*  	ld hl,Fhonda082
048921 11 0A CB 04 0531*  	ld de,filedata
048925 01 00 00 01 0532*  	ld bc,65536
048929 3E 01       0533*  	ld a,mos_load
04892B 5B CF       0534*  	RST.LIL 08h
04892D 21 52 11 00 0535*  	ld hl,BUF_4434
048931 01 0A 00 00 0536*  	ld bc,10
048935 11 12 00 00 0537*  	ld de,18
048939 DD 21 B4 00 0538*  	ld ix,180
       00          
04893E CD 59 C0 04 0539*  	call vdu_load_img
048942             0540*  
048942 21 C1 90 04 0541*  	ld hl,Fhonda083
048946 11 0A CB 04 0542*  	ld de,filedata
04894A 01 00 00 01 0543*  	ld bc,65536
04894E 3E 01       0544*  	ld a,mos_load
048950 5B CF       0545*  	RST.LIL 08h
048952 21 53 11 00 0546*  	ld hl,BUF_4435
048956 01 09 00 00 0547*  	ld bc,9
04895A 11 13 00 00 0548*  	ld de,19
04895E DD 21 AB 00 0549*  	ld ix,171
       00          
048963 CD 59 C0 04 0550*  	call vdu_load_img
048967             0551*  
048967 21 D7 90 04 0552*  	ld hl,Fhonda084
04896B 11 0A CB 04 0553*  	ld de,filedata
04896F 01 00 00 01 0554*  	ld bc,65536
048973 3E 01       0555*  	ld a,mos_load
048975 5B CF       0556*  	RST.LIL 08h
048977 21 54 11 00 0557*  	ld hl,BUF_4436
04897B 01 0A 00 00 0558*  	ld bc,10
04897F 11 12 00 00 0559*  	ld de,18
048983 DD 21 B4 00 0560*  	ld ix,180
       00          
048988 CD 59 C0 04 0561*  	call vdu_load_img
04898C             0562*  
04898C 21 ED 90 04 0563*  	ld hl,Fhonda085
048990 11 0A CB 04 0564*  	ld de,filedata
048994 01 00 00 01 0565*  	ld bc,65536
048998 3E 01       0566*  	ld a,mos_load
04899A 5B CF       0567*  	RST.LIL 08h
04899C 21 55 11 00 0568*  	ld hl,BUF_4437
0489A0 01 0A 00 00 0569*  	ld bc,10
0489A4 11 12 00 00 0570*  	ld de,18
0489A8 DD 21 B4 00 0571*  	ld ix,180
       00          
0489AD CD 59 C0 04 0572*  	call vdu_load_img
0489B1             0573*  
0489B1 21 03 91 04 0574*  	ld hl,Fhonda086
0489B5 11 0A CB 04 0575*  	ld de,filedata
0489B9 01 00 00 01 0576*  	ld bc,65536
0489BD 3E 01       0577*  	ld a,mos_load
0489BF 5B CF       0578*  	RST.LIL 08h
0489C1 21 56 11 00 0579*  	ld hl,BUF_4438
0489C5 01 0A 00 00 0580*  	ld bc,10
0489C9 11 12 00 00 0581*  	ld de,18
0489CD DD 21 B4 00 0582*  	ld ix,180
       00          
0489D2 CD 59 C0 04 0583*  	call vdu_load_img
0489D6             0584*  
0489D6 21 19 91 04 0585*  	ld hl,Fhonda087
0489DA 11 0A CB 04 0586*  	ld de,filedata
0489DE 01 00 00 01 0587*  	ld bc,65536
0489E2 3E 01       0588*  	ld a,mos_load
0489E4 5B CF       0589*  	RST.LIL 08h
0489E6 21 57 11 00 0590*  	ld hl,BUF_4439
0489EA 01 10 00 00 0591*  	ld bc,16
0489EE 11 12 00 00 0592*  	ld de,18
0489F2 DD 21 20 01 0593*  	ld ix,288
       00          
0489F7 CD 59 C0 04 0594*  	call vdu_load_img
0489FB             0595*  
0489FB 21 2F 91 04 0596*  	ld hl,Fhonda088
0489FF 11 0A CB 04 0597*  	ld de,filedata
048A03 01 00 00 01 0598*  	ld bc,65536
048A07 3E 01       0599*  	ld a,mos_load
048A09 5B CF       0600*  	RST.LIL 08h
048A0B 21 58 11 00 0601*  	ld hl,BUF_4440
048A0F 01 0A 00 00 0602*  	ld bc,10
048A13 11 12 00 00 0603*  	ld de,18
048A17 DD 21 B4 00 0604*  	ld ix,180
       00          
048A1C CD 59 C0 04 0605*  	call vdu_load_img
048A20             0606*  
048A20 21 45 91 04 0607*  	ld hl,Fhonda089
048A24 11 0A CB 04 0608*  	ld de,filedata
048A28 01 00 00 01 0609*  	ld bc,65536
048A2C 3E 01       0610*  	ld a,mos_load
048A2E 5B CF       0611*  	RST.LIL 08h
048A30 21 59 11 00 0612*  	ld hl,BUF_4441
048A34 01 0A 00 00 0613*  	ld bc,10
048A38 11 12 00 00 0614*  	ld de,18
048A3C DD 21 B4 00 0615*  	ld ix,180
       00          
048A41 CD 59 C0 04 0616*  	call vdu_load_img
048A45             0617*  
048A45 21 5B 91 04 0618*  	ld hl,Fhonda090
048A49 11 0A CB 04 0619*  	ld de,filedata
048A4D 01 00 00 01 0620*  	ld bc,65536
048A51 3E 01       0621*  	ld a,mos_load
048A53 5B CF       0622*  	RST.LIL 08h
048A55 21 5A 11 00 0623*  	ld hl,BUF_4442
048A59 01 09 00 00 0624*  	ld bc,9
048A5D 11 12 00 00 0625*  	ld de,18
048A61 DD 21 A2 00 0626*  	ld ix,162
       00          
048A66 CD 59 C0 04 0627*  	call vdu_load_img
048A6A             0628*  ; Missing character 91
048A6A             0629*  ; Missing character 92
048A6A             0630*  ; Missing character 93
048A6A             0631*  ; Missing character 94
048A6A             0632*  ; Missing character 95
048A6A             0633*  ; Missing character 96
048A6A             0634*  
048A6A 21 71 91 04 0635*  	ld hl,Fhonda097
048A6E 11 0A CB 04 0636*  	ld de,filedata
048A72 01 00 00 01 0637*  	ld bc,65536
048A76 3E 01       0638*  	ld a,mos_load
048A78 5B CF       0639*  	RST.LIL 08h
048A7A 21 61 11 00 0640*  	ld hl,BUF_4449
048A7E 01 08 00 00 0641*  	ld bc,8
048A82 11 0C 00 00 0642*  	ld de,12
048A86 DD 21 60 00 0643*  	ld ix,96
       00          
048A8B CD 59 C0 04 0644*  	call vdu_load_img
048A8F             0645*  
048A8F 21 87 91 04 0646*  	ld hl,Fhonda098
048A93 11 0A CB 04 0647*  	ld de,filedata
048A97 01 00 00 01 0648*  	ld bc,65536
048A9B 3E 01       0649*  	ld a,mos_load
048A9D 5B CF       0650*  	RST.LIL 08h
048A9F 21 62 11 00 0651*  	ld hl,BUF_4450
048AA3 01 09 00 00 0652*  	ld bc,9
048AA7 11 12 00 00 0653*  	ld de,18
048AAB DD 21 A2 00 0654*  	ld ix,162
       00          
048AB0 CD 59 C0 04 0655*  	call vdu_load_img
048AB4             0656*  
048AB4 21 9D 91 04 0657*  	ld hl,Fhonda099
048AB8 11 0A CB 04 0658*  	ld de,filedata
048ABC 01 00 00 01 0659*  	ld bc,65536
048AC0 3E 01       0660*  	ld a,mos_load
048AC2 5B CF       0661*  	RST.LIL 08h
048AC4 21 63 11 00 0662*  	ld hl,BUF_4451
048AC8 01 07 00 00 0663*  	ld bc,7
048ACC 11 0C 00 00 0664*  	ld de,12
048AD0 DD 21 54 00 0665*  	ld ix,84
       00          
048AD5 CD 59 C0 04 0666*  	call vdu_load_img
048AD9             0667*  
048AD9 21 B3 91 04 0668*  	ld hl,Fhonda100
048ADD 11 0A CB 04 0669*  	ld de,filedata
048AE1 01 00 00 01 0670*  	ld bc,65536
048AE5 3E 01       0671*  	ld a,mos_load
048AE7 5B CF       0672*  	RST.LIL 08h
048AE9 21 64 11 00 0673*  	ld hl,BUF_4452
048AED 01 09 00 00 0674*  	ld bc,9
048AF1 11 12 00 00 0675*  	ld de,18
048AF5 DD 21 A2 00 0676*  	ld ix,162
       00          
048AFA CD 59 C0 04 0677*  	call vdu_load_img
048AFE             0678*  
048AFE 21 C9 91 04 0679*  	ld hl,Fhonda101
048B02 11 0A CB 04 0680*  	ld de,filedata
048B06 01 00 00 01 0681*  	ld bc,65536
048B0A 3E 01       0682*  	ld a,mos_load
048B0C 5B CF       0683*  	RST.LIL 08h
048B0E 21 65 11 00 0684*  	ld hl,BUF_4453
048B12 01 08 00 00 0685*  	ld bc,8
048B16 11 0C 00 00 0686*  	ld de,12
048B1A DD 21 60 00 0687*  	ld ix,96
       00          
048B1F CD 59 C0 04 0688*  	call vdu_load_img
048B23             0689*  
048B23 21 DF 91 04 0690*  	ld hl,Fhonda102
048B27 11 0A CB 04 0691*  	ld de,filedata
048B2B 01 00 00 01 0692*  	ld bc,65536
048B2F 3E 01       0693*  	ld a,mos_load
048B31 5B CF       0694*  	RST.LIL 08h
048B33 21 66 11 00 0695*  	ld hl,BUF_4454
048B37 01 09 00 00 0696*  	ld bc,9
048B3B 11 12 00 00 0697*  	ld de,18
048B3F DD 21 A2 00 0698*  	ld ix,162
       00          
048B44 CD 59 C0 04 0699*  	call vdu_load_img
048B48             0700*  
048B48 21 F5 91 04 0701*  	ld hl,Fhonda103
048B4C 11 0A CB 04 0702*  	ld de,filedata
048B50 01 00 00 01 0703*  	ld bc,65536
048B54 3E 01       0704*  	ld a,mos_load
048B56 5B CF       0705*  	RST.LIL 08h
048B58 21 67 11 00 0706*  	ld hl,BUF_4455
048B5C 01 09 00 00 0707*  	ld bc,9
048B60 11 12 00 00 0708*  	ld de,18
048B64 DD 21 A2 00 0709*  	ld ix,162
       00          
048B69 CD 59 C0 04 0710*  	call vdu_load_img
048B6D             0711*  
048B6D 21 0B 92 04 0712*  	ld hl,Fhonda104
048B71 11 0A CB 04 0713*  	ld de,filedata
048B75 01 00 00 01 0714*  	ld bc,65536
048B79 3E 01       0715*  	ld a,mos_load
048B7B 5B CF       0716*  	RST.LIL 08h
048B7D 21 68 11 00 0717*  	ld hl,BUF_4456
048B81 01 09 00 00 0718*  	ld bc,9
048B85 11 12 00 00 0719*  	ld de,18
048B89 DD 21 A2 00 0720*  	ld ix,162
       00          
048B8E CD 59 C0 04 0721*  	call vdu_load_img
048B92             0722*  
048B92 21 21 92 04 0723*  	ld hl,Fhonda105
048B96 11 0A CB 04 0724*  	ld de,filedata
048B9A 01 00 00 01 0725*  	ld bc,65536
048B9E 3E 01       0726*  	ld a,mos_load
048BA0 5B CF       0727*  	RST.LIL 08h
048BA2 21 69 11 00 0728*  	ld hl,BUF_4457
048BA6 01 04 00 00 0729*  	ld bc,4
048BAA 11 12 00 00 0730*  	ld de,18
048BAE DD 21 48 00 0731*  	ld ix,72
       00          
048BB3 CD 59 C0 04 0732*  	call vdu_load_img
048BB7             0733*  
048BB7 21 37 92 04 0734*  	ld hl,Fhonda106
048BBB 11 0A CB 04 0735*  	ld de,filedata
048BBF 01 00 00 01 0736*  	ld bc,65536
048BC3 3E 01       0737*  	ld a,mos_load
048BC5 5B CF       0738*  	RST.LIL 08h
048BC7 21 6A 11 00 0739*  	ld hl,BUF_4458
048BCB 01 08 00 00 0740*  	ld bc,8
048BCF 11 18 00 00 0741*  	ld de,24
048BD3 DD 21 C0 00 0742*  	ld ix,192
       00          
048BD8 CD 59 C0 04 0743*  	call vdu_load_img
048BDC             0744*  
048BDC 21 4D 92 04 0745*  	ld hl,Fhonda107
048BE0 11 0A CB 04 0746*  	ld de,filedata
048BE4 01 00 00 01 0747*  	ld bc,65536
048BE8 3E 01       0748*  	ld a,mos_load
048BEA 5B CF       0749*  	RST.LIL 08h
048BEC 21 6B 11 00 0750*  	ld hl,BUF_4459
048BF0 01 09 00 00 0751*  	ld bc,9
048BF4 11 12 00 00 0752*  	ld de,18
048BF8 DD 21 A2 00 0753*  	ld ix,162
       00          
048BFD CD 59 C0 04 0754*  	call vdu_load_img
048C01             0755*  
048C01 21 63 92 04 0756*  	ld hl,Fhonda108
048C05 11 0A CB 04 0757*  	ld de,filedata
048C09 01 00 00 01 0758*  	ld bc,65536
048C0D 3E 01       0759*  	ld a,mos_load
048C0F 5B CF       0760*  	RST.LIL 08h
048C11 21 6C 11 00 0761*  	ld hl,BUF_4460
048C15 01 03 00 00 0762*  	ld bc,3
048C19 11 12 00 00 0763*  	ld de,18
048C1D DD 21 36 00 0764*  	ld ix,54
       00          
048C22 CD 59 C0 04 0765*  	call vdu_load_img
048C26             0766*  
048C26 21 79 92 04 0767*  	ld hl,Fhonda109
048C2A 11 0A CB 04 0768*  	ld de,filedata
048C2E 01 00 00 01 0769*  	ld bc,65536
048C32 3E 01       0770*  	ld a,mos_load
048C34 5B CF       0771*  	RST.LIL 08h
048C36 21 6D 11 00 0772*  	ld hl,BUF_4461
048C3A 01 0E 00 00 0773*  	ld bc,14
048C3E 11 0D 00 00 0774*  	ld de,13
048C42 DD 21 B6 00 0775*  	ld ix,182
       00          
048C47 CD 59 C0 04 0776*  	call vdu_load_img
048C4B             0777*  
048C4B 21 8F 92 04 0778*  	ld hl,Fhonda110
048C4F 11 0A CB 04 0779*  	ld de,filedata
048C53 01 00 00 01 0780*  	ld bc,65536
048C57 3E 01       0781*  	ld a,mos_load
048C59 5B CF       0782*  	RST.LIL 08h
048C5B 21 6E 11 00 0783*  	ld hl,BUF_4462
048C5F 01 09 00 00 0784*  	ld bc,9
048C63 11 0C 00 00 0785*  	ld de,12
048C67 DD 21 6C 00 0786*  	ld ix,108
       00          
048C6C CD 59 C0 04 0787*  	call vdu_load_img
048C70             0788*  
048C70 21 A5 92 04 0789*  	ld hl,Fhonda111
048C74 11 0A CB 04 0790*  	ld de,filedata
048C78 01 00 00 01 0791*  	ld bc,65536
048C7C 3E 01       0792*  	ld a,mos_load
048C7E 5B CF       0793*  	RST.LIL 08h
048C80 21 6F 11 00 0794*  	ld hl,BUF_4463
048C84 01 09 00 00 0795*  	ld bc,9
048C88 11 0C 00 00 0796*  	ld de,12
048C8C DD 21 6C 00 0797*  	ld ix,108
       00          
048C91 CD 59 C0 04 0798*  	call vdu_load_img
048C95             0799*  
048C95 21 BB 92 04 0800*  	ld hl,Fhonda112
048C99 11 0A CB 04 0801*  	ld de,filedata
048C9D 01 00 00 01 0802*  	ld bc,65536
048CA1 3E 01       0803*  	ld a,mos_load
048CA3 5B CF       0804*  	RST.LIL 08h
048CA5 21 70 11 00 0805*  	ld hl,BUF_4464
048CA9 01 09 00 00 0806*  	ld bc,9
048CAD 11 12 00 00 0807*  	ld de,18
048CB1 DD 21 A2 00 0808*  	ld ix,162
       00          
048CB6 CD 59 C0 04 0809*  	call vdu_load_img
048CBA             0810*  
048CBA 21 D1 92 04 0811*  	ld hl,Fhonda113
048CBE 11 0A CB 04 0812*  	ld de,filedata
048CC2 01 00 00 01 0813*  	ld bc,65536
048CC6 3E 01       0814*  	ld a,mos_load
048CC8 5B CF       0815*  	RST.LIL 08h
048CCA 21 71 11 00 0816*  	ld hl,BUF_4465
048CCE 01 09 00 00 0817*  	ld bc,9
048CD2 11 12 00 00 0818*  	ld de,18
048CD6 DD 21 A2 00 0819*  	ld ix,162
       00          
048CDB CD 59 C0 04 0820*  	call vdu_load_img
048CDF             0821*  
048CDF 21 E7 92 04 0822*  	ld hl,Fhonda114
048CE3 11 0A CB 04 0823*  	ld de,filedata
048CE7 01 00 00 01 0824*  	ld bc,65536
048CEB 3E 01       0825*  	ld a,mos_load
048CED 5B CF       0826*  	RST.LIL 08h
048CEF 21 72 11 00 0827*  	ld hl,BUF_4466
048CF3 01 06 00 00 0828*  	ld bc,6
048CF7 11 0D 00 00 0829*  	ld de,13
048CFB DD 21 4E 00 0830*  	ld ix,78
       00          
048D00 CD 59 C0 04 0831*  	call vdu_load_img
048D04             0832*  
048D04 21 FD 92 04 0833*  	ld hl,Fhonda115
048D08 11 0A CB 04 0834*  	ld de,filedata
048D0C 01 00 00 01 0835*  	ld bc,65536
048D10 3E 01       0836*  	ld a,mos_load
048D12 5B CF       0837*  	RST.LIL 08h
048D14 21 73 11 00 0838*  	ld hl,BUF_4467
048D18 01 08 00 00 0839*  	ld bc,8
048D1C 11 0D 00 00 0840*  	ld de,13
048D20 DD 21 68 00 0841*  	ld ix,104
       00          
048D25 CD 59 C0 04 0842*  	call vdu_load_img
048D29             0843*  
048D29 21 13 93 04 0844*  	ld hl,Fhonda116
048D2D 11 0A CB 04 0845*  	ld de,filedata
048D31 01 00 00 01 0846*  	ld bc,65536
048D35 3E 01       0847*  	ld a,mos_load
048D37 5B CF       0848*  	RST.LIL 08h
048D39 21 74 11 00 0849*  	ld hl,BUF_4468
048D3D 01 07 00 00 0850*  	ld bc,7
048D41 11 0F 00 00 0851*  	ld de,15
048D45 DD 21 69 00 0852*  	ld ix,105
       00          
048D4A CD 59 C0 04 0853*  	call vdu_load_img
048D4E             0854*  
048D4E 21 29 93 04 0855*  	ld hl,Fhonda117
048D52 11 0A CB 04 0856*  	ld de,filedata
048D56 01 00 00 01 0857*  	ld bc,65536
048D5A 3E 01       0858*  	ld a,mos_load
048D5C 5B CF       0859*  	RST.LIL 08h
048D5E 21 75 11 00 0860*  	ld hl,BUF_4469
048D62 01 09 00 00 0861*  	ld bc,9
048D66 11 0C 00 00 0862*  	ld de,12
048D6A DD 21 6C 00 0863*  	ld ix,108
       00          
048D6F CD 59 C0 04 0864*  	call vdu_load_img
048D73             0865*  
048D73 21 3F 93 04 0866*  	ld hl,Fhonda118
048D77 11 0A CB 04 0867*  	ld de,filedata
048D7B 01 00 00 01 0868*  	ld bc,65536
048D7F 3E 01       0869*  	ld a,mos_load
048D81 5B CF       0870*  	RST.LIL 08h
048D83 21 76 11 00 0871*  	ld hl,BUF_4470
048D87 01 09 00 00 0872*  	ld bc,9
048D8B 11 0C 00 00 0873*  	ld de,12
048D8F DD 21 6C 00 0874*  	ld ix,108
       00          
048D94 CD 59 C0 04 0875*  	call vdu_load_img
048D98             0876*  
048D98 21 55 93 04 0877*  	ld hl,Fhonda119
048D9C 11 0A CB 04 0878*  	ld de,filedata
048DA0 01 00 00 01 0879*  	ld bc,65536
048DA4 3E 01       0880*  	ld a,mos_load
048DA6 5B CF       0881*  	RST.LIL 08h
048DA8 21 77 11 00 0882*  	ld hl,BUF_4471
048DAC 01 0E 00 00 0883*  	ld bc,14
048DB0 11 0C 00 00 0884*  	ld de,12
048DB4 DD 21 A8 00 0885*  	ld ix,168
       00          
048DB9 CD 59 C0 04 0886*  	call vdu_load_img
048DBD             0887*  
048DBD 21 6B 93 04 0888*  	ld hl,Fhonda120
048DC1 11 0A CB 04 0889*  	ld de,filedata
048DC5 01 00 00 01 0890*  	ld bc,65536
048DC9 3E 01       0891*  	ld a,mos_load
048DCB 5B CF       0892*  	RST.LIL 08h
048DCD 21 78 11 00 0893*  	ld hl,BUF_4472
048DD1 01 09 00 00 0894*  	ld bc,9
048DD5 11 0C 00 00 0895*  	ld de,12
048DD9 DD 21 6C 00 0896*  	ld ix,108
       00          
048DDE CD 59 C0 04 0897*  	call vdu_load_img
048DE2             0898*  
048DE2 21 81 93 04 0899*  	ld hl,Fhonda121
048DE6 11 0A CB 04 0900*  	ld de,filedata
048DEA 01 00 00 01 0901*  	ld bc,65536
048DEE 3E 01       0902*  	ld a,mos_load
048DF0 5B CF       0903*  	RST.LIL 08h
048DF2 21 79 11 00 0904*  	ld hl,BUF_4473
048DF6 01 09 00 00 0905*  	ld bc,9
048DFA 11 11 00 00 0906*  	ld de,17
048DFE DD 21 99 00 0907*  	ld ix,153
       00          
048E03 CD 59 C0 04 0908*  	call vdu_load_img
048E07             0909*  
048E07 21 97 93 04 0910*  	ld hl,Fhonda122
048E0B 11 0A CB 04 0911*  	ld de,filedata
048E0F 01 00 00 01 0912*  	ld bc,65536
048E13 3E 01       0913*  	ld a,mos_load
048E15 5B CF       0914*  	RST.LIL 08h
048E17 21 7A 11 00 0915*  	ld hl,BUF_4474
048E1B 01 09 00 00 0916*  	ld bc,9
048E1F 11 0C 00 00 0917*  	ld de,12
048E23 DD 21 6C 00 0918*  	ld ix,108
       00          
048E28 CD 59 C0 04 0919*  	call vdu_load_img
048E2C             0920*  
048E2C C9          0921*  	ret
048E2D             0922*  
048E2D 66 6F 6E 74 0923*  Fhonda032: db "fonts/honda/032.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 33 32 2E 
       72 67 62 61 
       32 00       
048E43 66 6F 6E 74 0924*  Fhonda046: db "fonts/honda/046.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 36 2E 
       72 67 62 61 
       32 00       
048E59 66 6F 6E 74 0925*  Fhonda048: db "fonts/honda/048.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 38 2E 
       72 67 62 61 
       32 00       
048E6F 66 6F 6E 74 0926*  Fhonda049: db "fonts/honda/049.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 34 39 2E 
       72 67 62 61 
       32 00       
048E85 66 6F 6E 74 0927*  Fhonda050: db "fonts/honda/050.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 30 2E 
       72 67 62 61 
       32 00       
048E9B 66 6F 6E 74 0928*  Fhonda051: db "fonts/honda/051.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 31 2E 
       72 67 62 61 
       32 00       
048EB1 66 6F 6E 74 0929*  Fhonda052: db "fonts/honda/052.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 32 2E 
       72 67 62 61 
       32 00       
048EC7 66 6F 6E 74 0930*  Fhonda053: db "fonts/honda/053.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 33 2E 
       72 67 62 61 
       32 00       
048EDD 66 6F 6E 74 0931*  Fhonda054: db "fonts/honda/054.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 34 2E 
       72 67 62 61 
       32 00       
048EF3 66 6F 6E 74 0932*  Fhonda055: db "fonts/honda/055.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 35 2E 
       72 67 62 61 
       32 00       
048F09 66 6F 6E 74 0933*  Fhonda056: db "fonts/honda/056.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 36 2E 
       72 67 62 61 
       32 00       
048F1F 66 6F 6E 74 0934*  Fhonda057: db "fonts/honda/057.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 35 37 2E 
       72 67 62 61 
       32 00       
048F35 66 6F 6E 74 0935*  Fhonda065: db "fonts/honda/065.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 35 2E 
       72 67 62 61 
       32 00       
048F4B 66 6F 6E 74 0936*  Fhonda066: db "fonts/honda/066.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 36 2E 
       72 67 62 61 
       32 00       
048F61 66 6F 6E 74 0937*  Fhonda067: db "fonts/honda/067.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 37 2E 
       72 67 62 61 
       32 00       
048F77 66 6F 6E 74 0938*  Fhonda068: db "fonts/honda/068.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 38 2E 
       72 67 62 61 
       32 00       
048F8D 66 6F 6E 74 0939*  Fhonda069: db "fonts/honda/069.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 36 39 2E 
       72 67 62 61 
       32 00       
048FA3 66 6F 6E 74 0940*  Fhonda070: db "fonts/honda/070.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 30 2E 
       72 67 62 61 
       32 00       
048FB9 66 6F 6E 74 0941*  Fhonda071: db "fonts/honda/071.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 31 2E 
       72 67 62 61 
       32 00       
048FCF 66 6F 6E 74 0942*  Fhonda072: db "fonts/honda/072.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 32 2E 
       72 67 62 61 
       32 00       
048FE5 66 6F 6E 74 0943*  Fhonda073: db "fonts/honda/073.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 33 2E 
       72 67 62 61 
       32 00       
048FFB 66 6F 6E 74 0944*  Fhonda074: db "fonts/honda/074.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 34 2E 
       72 67 62 61 
       32 00       
049011 66 6F 6E 74 0945*  Fhonda075: db "fonts/honda/075.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 35 2E 
       72 67 62 61 
       32 00       
049027 66 6F 6E 74 0946*  Fhonda076: db "fonts/honda/076.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 36 2E 
       72 67 62 61 
       32 00       
04903D 66 6F 6E 74 0947*  Fhonda077: db "fonts/honda/077.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 37 2E 
       72 67 62 61 
       32 00       
049053 66 6F 6E 74 0948*  Fhonda078: db "fonts/honda/078.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 38 2E 
       72 67 62 61 
       32 00       
049069 66 6F 6E 74 0949*  Fhonda079: db "fonts/honda/079.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 37 39 2E 
       72 67 62 61 
       32 00       
04907F 66 6F 6E 74 0950*  Fhonda080: db "fonts/honda/080.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 30 2E 
       72 67 62 61 
       32 00       
049095 66 6F 6E 74 0951*  Fhonda081: db "fonts/honda/081.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 31 2E 
       72 67 62 61 
       32 00       
0490AB 66 6F 6E 74 0952*  Fhonda082: db "fonts/honda/082.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 32 2E 
       72 67 62 61 
       32 00       
0490C1 66 6F 6E 74 0953*  Fhonda083: db "fonts/honda/083.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 33 2E 
       72 67 62 61 
       32 00       
0490D7 66 6F 6E 74 0954*  Fhonda084: db "fonts/honda/084.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 34 2E 
       72 67 62 61 
       32 00       
0490ED 66 6F 6E 74 0955*  Fhonda085: db "fonts/honda/085.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 35 2E 
       72 67 62 61 
       32 00       
049103 66 6F 6E 74 0956*  Fhonda086: db "fonts/honda/086.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 36 2E 
       72 67 62 61 
       32 00       
049119 66 6F 6E 74 0957*  Fhonda087: db "fonts/honda/087.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 37 2E 
       72 67 62 61 
       32 00       
04912F 66 6F 6E 74 0958*  Fhonda088: db "fonts/honda/088.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 38 2E 
       72 67 62 61 
       32 00       
049145 66 6F 6E 74 0959*  Fhonda089: db "fonts/honda/089.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 38 39 2E 
       72 67 62 61 
       32 00       
04915B 66 6F 6E 74 0960*  Fhonda090: db "fonts/honda/090.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 30 2E 
       72 67 62 61 
       32 00       
049171 66 6F 6E 74 0961*  Fhonda097: db "fonts/honda/097.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 37 2E 
       72 67 62 61 
       32 00       
049187 66 6F 6E 74 0962*  Fhonda098: db "fonts/honda/098.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 38 2E 
       72 67 62 61 
       32 00       
04919D 66 6F 6E 74 0963*  Fhonda099: db "fonts/honda/099.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       30 39 39 2E 
       72 67 62 61 
       32 00       
0491B3 66 6F 6E 74 0964*  Fhonda100: db "fonts/honda/100.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 30 2E 
       72 67 62 61 
       32 00       
0491C9 66 6F 6E 74 0965*  Fhonda101: db "fonts/honda/101.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 31 2E 
       72 67 62 61 
       32 00       
0491DF 66 6F 6E 74 0966*  Fhonda102: db "fonts/honda/102.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 32 2E 
       72 67 62 61 
       32 00       
0491F5 66 6F 6E 74 0967*  Fhonda103: db "fonts/honda/103.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 33 2E 
       72 67 62 61 
       32 00       
04920B 66 6F 6E 74 0968*  Fhonda104: db "fonts/honda/104.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 34 2E 
       72 67 62 61 
       32 00       
049221 66 6F 6E 74 0969*  Fhonda105: db "fonts/honda/105.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 35 2E 
       72 67 62 61 
       32 00       
049237 66 6F 6E 74 0970*  Fhonda106: db "fonts/honda/106.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 36 2E 
       72 67 62 61 
       32 00       
04924D 66 6F 6E 74 0971*  Fhonda107: db "fonts/honda/107.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 37 2E 
       72 67 62 61 
       32 00       
049263 66 6F 6E 74 0972*  Fhonda108: db "fonts/honda/108.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 38 2E 
       72 67 62 61 
       32 00       
049279 66 6F 6E 74 0973*  Fhonda109: db "fonts/honda/109.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 30 39 2E 
       72 67 62 61 
       32 00       
04928F 66 6F 6E 74 0974*  Fhonda110: db "fonts/honda/110.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 30 2E 
       72 67 62 61 
       32 00       
0492A5 66 6F 6E 74 0975*  Fhonda111: db "fonts/honda/111.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 31 2E 
       72 67 62 61 
       32 00       
0492BB 66 6F 6E 74 0976*  Fhonda112: db "fonts/honda/112.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 32 2E 
       72 67 62 61 
       32 00       
0492D1 66 6F 6E 74 0977*  Fhonda113: db "fonts/honda/113.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 33 2E 
       72 67 62 61 
       32 00       
0492E7 66 6F 6E 74 0978*  Fhonda114: db "fonts/honda/114.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 34 2E 
       72 67 62 61 
       32 00       
0492FD 66 6F 6E 74 0979*  Fhonda115: db "fonts/honda/115.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 35 2E 
       72 67 62 61 
       32 00       
049313 66 6F 6E 74 0980*  Fhonda116: db "fonts/honda/116.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 36 2E 
       72 67 62 61 
       32 00       
049329 66 6F 6E 74 0981*  Fhonda117: db "fonts/honda/117.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 37 2E 
       72 67 62 61 
       32 00       
04933F 66 6F 6E 74 0982*  Fhonda118: db "fonts/honda/118.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 38 2E 
       72 67 62 61 
       32 00       
049355 66 6F 6E 74 0983*  Fhonda119: db "fonts/honda/119.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 31 39 2E 
       72 67 62 61 
       32 00       
04936B 66 6F 6E 74 0984*  Fhonda120: db "fonts/honda/120.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 30 2E 
       72 67 62 61 
       32 00       
049381 66 6F 6E 74 0985*  Fhonda121: db "fonts/honda/121.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 31 2E 
       72 67 62 61 
       32 00       
049397 66 6F 6E 74 0986*  Fhonda122: db "fonts/honda/122.rgba2",0
       73 2F 68 6F 
       6E 64 61 2F 
       31 32 32 2E 
       72 67 62 61 
       32 00       
0493AD             0019   	include "src/asm/font_retro_computer.asm"
0493AD             0001*  ; Bitmap indices:
0493AD             0002*  BUF_4128: equ 0x1020 ; 32
0493AD             0003*  BUF_4129: equ 0x1021 ; 33 !
0493AD             0004*  ; Missing character 34 "
0493AD             0005*  ; Missing character 35 #
0493AD             0006*  ; Missing character 36 $
0493AD             0007*  ; Missing character 37 %
0493AD             0008*  ; Missing character 38 &
0493AD             0009*  ; Missing character 39 '
0493AD             0010*  ; Missing character 40 (
0493AD             0011*  ; Missing character 41 )
0493AD             0012*  ; Missing character 42 *
0493AD             0013*  ; Missing character 43 +
0493AD             0014*  ; Missing character 44 ,
0493AD             0015*  ; Missing character 45 -
0493AD             0016*  ; Missing character 46 .
0493AD             0017*  ; Missing character 47 /
0493AD             0018*  BUF_4144: equ 0x1030 ; 48 0
0493AD             0019*  BUF_4145: equ 0x1031 ; 49 1
0493AD             0020*  BUF_4146: equ 0x1032 ; 50 2
0493AD             0021*  BUF_4147: equ 0x1033 ; 51 3
0493AD             0022*  BUF_4148: equ 0x1034 ; 52 4
0493AD             0023*  BUF_4149: equ 0x1035 ; 53 5
0493AD             0024*  BUF_4150: equ 0x1036 ; 54 6
0493AD             0025*  BUF_4151: equ 0x1037 ; 55 7
0493AD             0026*  BUF_4152: equ 0x1038 ; 56 8
0493AD             0027*  BUF_4153: equ 0x1039 ; 57 9
0493AD             0028*  ; Missing character 58 :
0493AD             0029*  ; Missing character 59 ;
0493AD             0030*  ; Missing character 60 <
0493AD             0031*  ; Missing character 61 =
0493AD             0032*  ; Missing character 62 >
0493AD             0033*  BUF_4159: equ 0x103F ; 63 ?
0493AD             0034*  ; Missing character 64 @
0493AD             0035*  BUF_4161: equ 0x1041 ; 65 A
0493AD             0036*  BUF_4162: equ 0x1042 ; 66 B
0493AD             0037*  BUF_4163: equ 0x1043 ; 67 C
0493AD             0038*  BUF_4164: equ 0x1044 ; 68 D
0493AD             0039*  BUF_4165: equ 0x1045 ; 69 E
0493AD             0040*  BUF_4166: equ 0x1046 ; 70 F
0493AD             0041*  BUF_4167: equ 0x1047 ; 71 G
0493AD             0042*  BUF_4168: equ 0x1048 ; 72 H
0493AD             0043*  BUF_4169: equ 0x1049 ; 73 I
0493AD             0044*  BUF_4170: equ 0x104A ; 74 J
0493AD             0045*  BUF_4171: equ 0x104B ; 75 K
0493AD             0046*  BUF_4172: equ 0x104C ; 76 L
0493AD             0047*  BUF_4173: equ 0x104D ; 77 M
0493AD             0048*  BUF_4174: equ 0x104E ; 78 N
0493AD             0049*  BUF_4175: equ 0x104F ; 79 O
0493AD             0050*  BUF_4176: equ 0x1050 ; 80 P
0493AD             0051*  BUF_4177: equ 0x1051 ; 81 Q
0493AD             0052*  BUF_4178: equ 0x1052 ; 82 R
0493AD             0053*  BUF_4179: equ 0x1053 ; 83 S
0493AD             0054*  BUF_4180: equ 0x1054 ; 84 T
0493AD             0055*  BUF_4181: equ 0x1055 ; 85 U
0493AD             0056*  BUF_4182: equ 0x1056 ; 86 V
0493AD             0057*  BUF_4183: equ 0x1057 ; 87 W
0493AD             0058*  BUF_4184: equ 0x1058 ; 88 X
0493AD             0059*  BUF_4185: equ 0x1059 ; 89 Y
0493AD             0060*  BUF_4186: equ 0x105A ; 90 Z
0493AD             0061*  ; Missing character 91 [
0493AD             0062*  ; Missing character 92 \
0493AD             0063*  ; Missing character 93 ]
0493AD             0064*  ; Missing character 94 ^
0493AD             0065*  ; Missing character 95 _
0493AD             0066*  ; Missing character 96 `
0493AD             0067*  ; Missing character 97 a
0493AD             0068*  ; Missing character 98 b
0493AD             0069*  ; Missing character 99 c
0493AD             0070*  ; Missing character 100 d
0493AD             0071*  ; Missing character 101 e
0493AD             0072*  ; Missing character 102 f
0493AD             0073*  ; Missing character 103 g
0493AD             0074*  ; Missing character 104 h
0493AD             0075*  ; Missing character 105 i
0493AD             0076*  ; Missing character 106 j
0493AD             0077*  ; Missing character 107 k
0493AD             0078*  ; Missing character 108 l
0493AD             0079*  ; Missing character 109 m
0493AD             0080*  ; Missing character 110 n
0493AD             0081*  ; Missing character 111 o
0493AD             0082*  ; Missing character 112 p
0493AD             0083*  ; Missing character 113 q
0493AD             0084*  ; Missing character 114 r
0493AD             0085*  ; Missing character 115 s
0493AD             0086*  ; Missing character 116 t
0493AD             0087*  ; Missing character 117 u
0493AD             0088*  ; Missing character 118 v
0493AD             0089*  ; Missing character 119 w
0493AD             0090*  ; Missing character 120 x
0493AD             0091*  ; Missing character 121 y
0493AD             0092*  ; Missing character 122 z
0493AD             0093*  ; [y_offset, dim_y, dim_x], buffer_id label: ; mind the little-endian order when fetching these!!!
0493AD             0094*  font_retro_computer:
0493AD 06 01 00 20 0095*  	dl 0x000106,BUF_4128
       10 00       
0493B3 03 0E 00 21 0096*  	dl 0x000E03,BUF_4129
       10 00       
0493B9 06 01 00 20 0097*  	dl 0x000106,BUF_4128 ; Missing character 34
       10 00       
0493BF 06 01 00 20 0098*  	dl 0x000106,BUF_4128 ; Missing character 35
       10 00       
0493C5 06 01 00 20 0099*  	dl 0x000106,BUF_4128 ; Missing character 36
       10 00       
0493CB 06 01 00 20 0100*  	dl 0x000106,BUF_4128 ; Missing character 37
       10 00       
0493D1 06 01 00 20 0101*  	dl 0x000106,BUF_4128 ; Missing character 38
       10 00       
0493D7 06 01 00 20 0102*  	dl 0x000106,BUF_4128 ; Missing character 39
       10 00       
0493DD 06 01 00 20 0103*  	dl 0x000106,BUF_4128 ; Missing character 40
       10 00       
0493E3 06 01 00 20 0104*  	dl 0x000106,BUF_4128 ; Missing character 41
       10 00       
0493E9 06 01 00 20 0105*  	dl 0x000106,BUF_4128 ; Missing character 42
       10 00       
0493EF 06 01 00 20 0106*  	dl 0x000106,BUF_4128 ; Missing character 43
       10 00       
0493F5 06 01 00 20 0107*  	dl 0x000106,BUF_4128 ; Missing character 44
       10 00       
0493FB 06 01 00 20 0108*  	dl 0x000106,BUF_4128 ; Missing character 45
       10 00       
049401 06 01 00 20 0109*  	dl 0x000106,BUF_4128 ; Missing character 46
       10 00       
049407 06 01 00 20 0110*  	dl 0x000106,BUF_4128 ; Missing character 47
       10 00       
04940D 08 0E 00 30 0111*  	dl 0x000E08,BUF_4144
       10 00       
049413 08 0E 00 31 0112*  	dl 0x000E08,BUF_4145
       10 00       
049419 08 0E 00 32 0113*  	dl 0x000E08,BUF_4146
       10 00       
04941F 08 0E 00 33 0114*  	dl 0x000E08,BUF_4147
       10 00       
049425 08 0E 00 34 0115*  	dl 0x000E08,BUF_4148
       10 00       
04942B 08 0E 00 35 0116*  	dl 0x000E08,BUF_4149
       10 00       
049431 08 0E 00 36 0117*  	dl 0x000E08,BUF_4150
       10 00       
049437 08 0E 00 37 0118*  	dl 0x000E08,BUF_4151
       10 00       
04943D 08 0E 00 38 0119*  	dl 0x000E08,BUF_4152
       10 00       
049443 08 0E 00 39 0120*  	dl 0x000E08,BUF_4153
       10 00       
049449 06 01 00 20 0121*  	dl 0x000106,BUF_4128 ; Missing character 58
       10 00       
04944F 06 01 00 20 0122*  	dl 0x000106,BUF_4128 ; Missing character 59
       10 00       
049455 06 01 00 20 0123*  	dl 0x000106,BUF_4128 ; Missing character 60
       10 00       
04945B 06 01 00 20 0124*  	dl 0x000106,BUF_4128 ; Missing character 61
       10 00       
049461 06 01 00 20 0125*  	dl 0x000106,BUF_4128 ; Missing character 62
       10 00       
049467 08 0E 00 3F 0126*  	dl 0x000E08,BUF_4159
       10 00       
04946D 06 01 00 20 0127*  	dl 0x000106,BUF_4128 ; Missing character 64
       10 00       
049473 07 0E 00 41 0128*  	dl 0x000E07,BUF_4161
       10 00       
049479 08 0E 00 42 0129*  	dl 0x000E08,BUF_4162
       10 00       
04947F 07 0E 00 43 0130*  	dl 0x000E07,BUF_4163
       10 00       
049485 08 0E 00 44 0131*  	dl 0x000E08,BUF_4164
       10 00       
04948B 08 0E 00 45 0132*  	dl 0x000E08,BUF_4165
       10 00       
049491 07 0E 00 46 0133*  	dl 0x000E07,BUF_4166
       10 00       
049497 08 0E 00 47 0134*  	dl 0x000E08,BUF_4167
       10 00       
04949D 07 0E 00 48 0135*  	dl 0x000E07,BUF_4168
       10 00       
0494A3 07 0E 00 49 0136*  	dl 0x000E07,BUF_4169
       10 00       
0494A9 08 0E 00 4A 0137*  	dl 0x000E08,BUF_4170
       10 00       
0494AF 07 0E 00 4B 0138*  	dl 0x000E07,BUF_4171
       10 00       
0494B5 08 0E 00 4C 0139*  	dl 0x000E08,BUF_4172
       10 00       
0494BB 09 0E 00 4D 0140*  	dl 0x000E09,BUF_4173
       10 00       
0494C1 07 0E 00 4E 0141*  	dl 0x000E07,BUF_4174
       10 00       
0494C7 08 0E 00 4F 0142*  	dl 0x000E08,BUF_4175
       10 00       
0494CD 07 0E 00 50 0143*  	dl 0x000E07,BUF_4176
       10 00       
0494D3 08 0F 00 51 0144*  	dl 0x000F08,BUF_4177
       10 00       
0494D9 08 0E 00 52 0145*  	dl 0x000E08,BUF_4178
       10 00       
0494DF 08 0E 00 53 0146*  	dl 0x000E08,BUF_4179
       10 00       
0494E5 07 0E 00 54 0147*  	dl 0x000E07,BUF_4180
       10 00       
0494EB 08 0E 00 55 0148*  	dl 0x000E08,BUF_4181
       10 00       
0494F1 07 0E 00 56 0149*  	dl 0x000E07,BUF_4182
       10 00       
0494F7 0B 0E 00 57 0150*  	dl 0x000E0B,BUF_4183
       10 00       
0494FD 07 0E 00 58 0151*  	dl 0x000E07,BUF_4184
       10 00       
049503 08 0E 00 59 0152*  	dl 0x000E08,BUF_4185
       10 00       
049509 07 0E 00 5A 0153*  	dl 0x000E07,BUF_4186
       10 00       
04950F 06 01 00 20 0154*  	dl 0x000106,BUF_4128 ; Missing character 91
       10 00       
049515 06 01 00 20 0155*  	dl 0x000106,BUF_4128 ; Missing character 92
       10 00       
04951B 06 01 00 20 0156*  	dl 0x000106,BUF_4128 ; Missing character 93
       10 00       
049521 06 01 00 20 0157*  	dl 0x000106,BUF_4128 ; Missing character 94
       10 00       
049527 06 01 00 20 0158*  	dl 0x000106,BUF_4128 ; Missing character 95
       10 00       
04952D 06 01 00 20 0159*  	dl 0x000106,BUF_4128 ; Missing character 96
       10 00       
049533 06 01 00 20 0160*  	dl 0x000106,BUF_4128 ; Missing character 97
       10 00       
049539 06 01 00 20 0161*  	dl 0x000106,BUF_4128 ; Missing character 98
       10 00       
04953F 06 01 00 20 0162*  	dl 0x000106,BUF_4128 ; Missing character 99
       10 00       
049545 06 01 00 20 0163*  	dl 0x000106,BUF_4128 ; Missing character 100
       10 00       
04954B 06 01 00 20 0164*  	dl 0x000106,BUF_4128 ; Missing character 101
       10 00       
049551 06 01 00 20 0165*  	dl 0x000106,BUF_4128 ; Missing character 102
       10 00       
049557 06 01 00 20 0166*  	dl 0x000106,BUF_4128 ; Missing character 103
       10 00       
04955D 06 01 00 20 0167*  	dl 0x000106,BUF_4128 ; Missing character 104
       10 00       
049563 06 01 00 20 0168*  	dl 0x000106,BUF_4128 ; Missing character 105
       10 00       
049569 06 01 00 20 0169*  	dl 0x000106,BUF_4128 ; Missing character 106
       10 00       
04956F 06 01 00 20 0170*  	dl 0x000106,BUF_4128 ; Missing character 107
       10 00       
049575 06 01 00 20 0171*  	dl 0x000106,BUF_4128 ; Missing character 108
       10 00       
04957B 06 01 00 20 0172*  	dl 0x000106,BUF_4128 ; Missing character 109
       10 00       
049581 06 01 00 20 0173*  	dl 0x000106,BUF_4128 ; Missing character 110
       10 00       
049587 06 01 00 20 0174*  	dl 0x000106,BUF_4128 ; Missing character 111
       10 00       
04958D 06 01 00 20 0175*  	dl 0x000106,BUF_4128 ; Missing character 112
       10 00       
049593 06 01 00 20 0176*  	dl 0x000106,BUF_4128 ; Missing character 113
       10 00       
049599 06 01 00 20 0177*  	dl 0x000106,BUF_4128 ; Missing character 114
       10 00       
04959F 06 01 00 20 0178*  	dl 0x000106,BUF_4128 ; Missing character 115
       10 00       
0495A5 06 01 00 20 0179*  	dl 0x000106,BUF_4128 ; Missing character 116
       10 00       
0495AB 06 01 00 20 0180*  	dl 0x000106,BUF_4128 ; Missing character 117
       10 00       
0495B1 06 01 00 20 0181*  	dl 0x000106,BUF_4128 ; Missing character 118
       10 00       
0495B7 06 01 00 20 0182*  	dl 0x000106,BUF_4128 ; Missing character 119
       10 00       
0495BD 06 01 00 20 0183*  	dl 0x000106,BUF_4128 ; Missing character 120
       10 00       
0495C3 06 01 00 20 0184*  	dl 0x000106,BUF_4128 ; Missing character 121
       10 00       
0495C9 06 01 00 20 0185*  	dl 0x000106,BUF_4128 ; Missing character 122
       10 00       
0495CF             0186*  
0495CF             0187*  ; Import .rgba2 bitmap files and load them into VDP buffers
0495CF             0188*  load_font_retro_computer:
0495CF             0189*  
0495CF 21 73 9B 04 0190*  	ld hl,Frc032
0495D3 11 0A CB 04 0191*  	ld de,filedata
0495D7 01 00 00 01 0192*  	ld bc,65536
0495DB 3E 01       0193*  	ld a,mos_load
0495DD 5B CF       0194*  	RST.LIL 08h
0495DF 21 20 10 00 0195*  	ld hl,BUF_4128
0495E3 01 06 00 00 0196*  	ld bc,6
0495E7 11 01 00 00 0197*  	ld de,1
0495EB DD 21 06 00 0198*  	ld ix,6
       00          
0495F0 CD 59 C0 04 0199*  	call vdu_load_img
0495F4             0200*  
0495F4 21 86 9B 04 0201*  	ld hl,Frc033
0495F8 11 0A CB 04 0202*  	ld de,filedata
0495FC 01 00 00 01 0203*  	ld bc,65536
049600 3E 01       0204*  	ld a,mos_load
049602 5B CF       0205*  	RST.LIL 08h
049604 21 21 10 00 0206*  	ld hl,BUF_4129
049608 01 03 00 00 0207*  	ld bc,3
04960C 11 0E 00 00 0208*  	ld de,14
049610 DD 21 2A 00 0209*  	ld ix,42
       00          
049615 CD 59 C0 04 0210*  	call vdu_load_img
049619             0211*  ; Missing character 34
049619             0212*  ; Missing character 35
049619             0213*  ; Missing character 36
049619             0214*  ; Missing character 37
049619             0215*  ; Missing character 38
049619             0216*  ; Missing character 39
049619             0217*  ; Missing character 40
049619             0218*  ; Missing character 41
049619             0219*  ; Missing character 42
049619             0220*  ; Missing character 43
049619             0221*  ; Missing character 44
049619             0222*  ; Missing character 45
049619             0223*  ; Missing character 46
049619             0224*  ; Missing character 47
049619             0225*  
049619 21 99 9B 04 0226*  	ld hl,Frc048
04961D 11 0A CB 04 0227*  	ld de,filedata
049621 01 00 00 01 0228*  	ld bc,65536
049625 3E 01       0229*  	ld a,mos_load
049627 5B CF       0230*  	RST.LIL 08h
049629 21 30 10 00 0231*  	ld hl,BUF_4144
04962D 01 08 00 00 0232*  	ld bc,8
049631 11 0E 00 00 0233*  	ld de,14
049635 DD 21 70 00 0234*  	ld ix,112
       00          
04963A CD 59 C0 04 0235*  	call vdu_load_img
04963E             0236*  
04963E 21 AC 9B 04 0237*  	ld hl,Frc049
049642 11 0A CB 04 0238*  	ld de,filedata
049646 01 00 00 01 0239*  	ld bc,65536
04964A 3E 01       0240*  	ld a,mos_load
04964C 5B CF       0241*  	RST.LIL 08h
04964E 21 31 10 00 0242*  	ld hl,BUF_4145
049652 01 08 00 00 0243*  	ld bc,8
049656 11 0E 00 00 0244*  	ld de,14
04965A DD 21 70 00 0245*  	ld ix,112
       00          
04965F CD 59 C0 04 0246*  	call vdu_load_img
049663             0247*  
049663 21 BF 9B 04 0248*  	ld hl,Frc050
049667 11 0A CB 04 0249*  	ld de,filedata
04966B 01 00 00 01 0250*  	ld bc,65536
04966F 3E 01       0251*  	ld a,mos_load
049671 5B CF       0252*  	RST.LIL 08h
049673 21 32 10 00 0253*  	ld hl,BUF_4146
049677 01 08 00 00 0254*  	ld bc,8
04967B 11 0E 00 00 0255*  	ld de,14
04967F DD 21 70 00 0256*  	ld ix,112
       00          
049684 CD 59 C0 04 0257*  	call vdu_load_img
049688             0258*  
049688 21 D2 9B 04 0259*  	ld hl,Frc051
04968C 11 0A CB 04 0260*  	ld de,filedata
049690 01 00 00 01 0261*  	ld bc,65536
049694 3E 01       0262*  	ld a,mos_load
049696 5B CF       0263*  	RST.LIL 08h
049698 21 33 10 00 0264*  	ld hl,BUF_4147
04969C 01 08 00 00 0265*  	ld bc,8
0496A0 11 0E 00 00 0266*  	ld de,14
0496A4 DD 21 70 00 0267*  	ld ix,112
       00          
0496A9 CD 59 C0 04 0268*  	call vdu_load_img
0496AD             0269*  
0496AD 21 E5 9B 04 0270*  	ld hl,Frc052
0496B1 11 0A CB 04 0271*  	ld de,filedata
0496B5 01 00 00 01 0272*  	ld bc,65536
0496B9 3E 01       0273*  	ld a,mos_load
0496BB 5B CF       0274*  	RST.LIL 08h
0496BD 21 34 10 00 0275*  	ld hl,BUF_4148
0496C1 01 08 00 00 0276*  	ld bc,8
0496C5 11 0E 00 00 0277*  	ld de,14
0496C9 DD 21 70 00 0278*  	ld ix,112
       00          
0496CE CD 59 C0 04 0279*  	call vdu_load_img
0496D2             0280*  
0496D2 21 F8 9B 04 0281*  	ld hl,Frc053
0496D6 11 0A CB 04 0282*  	ld de,filedata
0496DA 01 00 00 01 0283*  	ld bc,65536
0496DE 3E 01       0284*  	ld a,mos_load
0496E0 5B CF       0285*  	RST.LIL 08h
0496E2 21 35 10 00 0286*  	ld hl,BUF_4149
0496E6 01 08 00 00 0287*  	ld bc,8
0496EA 11 0E 00 00 0288*  	ld de,14
0496EE DD 21 70 00 0289*  	ld ix,112
       00          
0496F3 CD 59 C0 04 0290*  	call vdu_load_img
0496F7             0291*  
0496F7 21 0B 9C 04 0292*  	ld hl,Frc054
0496FB 11 0A CB 04 0293*  	ld de,filedata
0496FF 01 00 00 01 0294*  	ld bc,65536
049703 3E 01       0295*  	ld a,mos_load
049705 5B CF       0296*  	RST.LIL 08h
049707 21 36 10 00 0297*  	ld hl,BUF_4150
04970B 01 08 00 00 0298*  	ld bc,8
04970F 11 0E 00 00 0299*  	ld de,14
049713 DD 21 70 00 0300*  	ld ix,112
       00          
049718 CD 59 C0 04 0301*  	call vdu_load_img
04971C             0302*  
04971C 21 1E 9C 04 0303*  	ld hl,Frc055
049720 11 0A CB 04 0304*  	ld de,filedata
049724 01 00 00 01 0305*  	ld bc,65536
049728 3E 01       0306*  	ld a,mos_load
04972A 5B CF       0307*  	RST.LIL 08h
04972C 21 37 10 00 0308*  	ld hl,BUF_4151
049730 01 08 00 00 0309*  	ld bc,8
049734 11 0E 00 00 0310*  	ld de,14
049738 DD 21 70 00 0311*  	ld ix,112
       00          
04973D CD 59 C0 04 0312*  	call vdu_load_img
049741             0313*  
049741 21 31 9C 04 0314*  	ld hl,Frc056
049745 11 0A CB 04 0315*  	ld de,filedata
049749 01 00 00 01 0316*  	ld bc,65536
04974D 3E 01       0317*  	ld a,mos_load
04974F 5B CF       0318*  	RST.LIL 08h
049751 21 38 10 00 0319*  	ld hl,BUF_4152
049755 01 08 00 00 0320*  	ld bc,8
049759 11 0E 00 00 0321*  	ld de,14
04975D DD 21 70 00 0322*  	ld ix,112
       00          
049762 CD 59 C0 04 0323*  	call vdu_load_img
049766             0324*  
049766 21 44 9C 04 0325*  	ld hl,Frc057
04976A 11 0A CB 04 0326*  	ld de,filedata
04976E 01 00 00 01 0327*  	ld bc,65536
049772 3E 01       0328*  	ld a,mos_load
049774 5B CF       0329*  	RST.LIL 08h
049776 21 39 10 00 0330*  	ld hl,BUF_4153
04977A 01 08 00 00 0331*  	ld bc,8
04977E 11 0E 00 00 0332*  	ld de,14
049782 DD 21 70 00 0333*  	ld ix,112
       00          
049787 CD 59 C0 04 0334*  	call vdu_load_img
04978B             0335*  ; Missing character 58
04978B             0336*  ; Missing character 59
04978B             0337*  ; Missing character 60
04978B             0338*  ; Missing character 61
04978B             0339*  ; Missing character 62
04978B             0340*  
04978B 21 57 9C 04 0341*  	ld hl,Frc063
04978F 11 0A CB 04 0342*  	ld de,filedata
049793 01 00 00 01 0343*  	ld bc,65536
049797 3E 01       0344*  	ld a,mos_load
049799 5B CF       0345*  	RST.LIL 08h
04979B 21 3F 10 00 0346*  	ld hl,BUF_4159
04979F 01 08 00 00 0347*  	ld bc,8
0497A3 11 0E 00 00 0348*  	ld de,14
0497A7 DD 21 70 00 0349*  	ld ix,112
       00          
0497AC CD 59 C0 04 0350*  	call vdu_load_img
0497B0             0351*  ; Missing character 64
0497B0             0352*  
0497B0 21 6A 9C 04 0353*  	ld hl,Frc065
0497B4 11 0A CB 04 0354*  	ld de,filedata
0497B8 01 00 00 01 0355*  	ld bc,65536
0497BC 3E 01       0356*  	ld a,mos_load
0497BE 5B CF       0357*  	RST.LIL 08h
0497C0 21 41 10 00 0358*  	ld hl,BUF_4161
0497C4 01 07 00 00 0359*  	ld bc,7
0497C8 11 0E 00 00 0360*  	ld de,14
0497CC DD 21 62 00 0361*  	ld ix,98
       00          
0497D1 CD 59 C0 04 0362*  	call vdu_load_img
0497D5             0363*  
0497D5 21 7D 9C 04 0364*  	ld hl,Frc066
0497D9 11 0A CB 04 0365*  	ld de,filedata
0497DD 01 00 00 01 0366*  	ld bc,65536
0497E1 3E 01       0367*  	ld a,mos_load
0497E3 5B CF       0368*  	RST.LIL 08h
0497E5 21 42 10 00 0369*  	ld hl,BUF_4162
0497E9 01 08 00 00 0370*  	ld bc,8
0497ED 11 0E 00 00 0371*  	ld de,14
0497F1 DD 21 70 00 0372*  	ld ix,112
       00          
0497F6 CD 59 C0 04 0373*  	call vdu_load_img
0497FA             0374*  
0497FA 21 90 9C 04 0375*  	ld hl,Frc067
0497FE 11 0A CB 04 0376*  	ld de,filedata
049802 01 00 00 01 0377*  	ld bc,65536
049806 3E 01       0378*  	ld a,mos_load
049808 5B CF       0379*  	RST.LIL 08h
04980A 21 43 10 00 0380*  	ld hl,BUF_4163
04980E 01 07 00 00 0381*  	ld bc,7
049812 11 0E 00 00 0382*  	ld de,14
049816 DD 21 62 00 0383*  	ld ix,98
       00          
04981B CD 59 C0 04 0384*  	call vdu_load_img
04981F             0385*  
04981F 21 A3 9C 04 0386*  	ld hl,Frc068
049823 11 0A CB 04 0387*  	ld de,filedata
049827 01 00 00 01 0388*  	ld bc,65536
04982B 3E 01       0389*  	ld a,mos_load
04982D 5B CF       0390*  	RST.LIL 08h
04982F 21 44 10 00 0391*  	ld hl,BUF_4164
049833 01 08 00 00 0392*  	ld bc,8
049837 11 0E 00 00 0393*  	ld de,14
04983B DD 21 70 00 0394*  	ld ix,112
       00          
049840 CD 59 C0 04 0395*  	call vdu_load_img
049844             0396*  
049844 21 B6 9C 04 0397*  	ld hl,Frc069
049848 11 0A CB 04 0398*  	ld de,filedata
04984C 01 00 00 01 0399*  	ld bc,65536
049850 3E 01       0400*  	ld a,mos_load
049852 5B CF       0401*  	RST.LIL 08h
049854 21 45 10 00 0402*  	ld hl,BUF_4165
049858 01 08 00 00 0403*  	ld bc,8
04985C 11 0E 00 00 0404*  	ld de,14
049860 DD 21 70 00 0405*  	ld ix,112
       00          
049865 CD 59 C0 04 0406*  	call vdu_load_img
049869             0407*  
049869 21 C9 9C 04 0408*  	ld hl,Frc070
04986D 11 0A CB 04 0409*  	ld de,filedata
049871 01 00 00 01 0410*  	ld bc,65536
049875 3E 01       0411*  	ld a,mos_load
049877 5B CF       0412*  	RST.LIL 08h
049879 21 46 10 00 0413*  	ld hl,BUF_4166
04987D 01 07 00 00 0414*  	ld bc,7
049881 11 0E 00 00 0415*  	ld de,14
049885 DD 21 62 00 0416*  	ld ix,98
       00          
04988A CD 59 C0 04 0417*  	call vdu_load_img
04988E             0418*  
04988E 21 DC 9C 04 0419*  	ld hl,Frc071
049892 11 0A CB 04 0420*  	ld de,filedata
049896 01 00 00 01 0421*  	ld bc,65536
04989A 3E 01       0422*  	ld a,mos_load
04989C 5B CF       0423*  	RST.LIL 08h
04989E 21 47 10 00 0424*  	ld hl,BUF_4167
0498A2 01 08 00 00 0425*  	ld bc,8
0498A6 11 0E 00 00 0426*  	ld de,14
0498AA DD 21 70 00 0427*  	ld ix,112
       00          
0498AF CD 59 C0 04 0428*  	call vdu_load_img
0498B3             0429*  
0498B3 21 EF 9C 04 0430*  	ld hl,Frc072
0498B7 11 0A CB 04 0431*  	ld de,filedata
0498BB 01 00 00 01 0432*  	ld bc,65536
0498BF 3E 01       0433*  	ld a,mos_load
0498C1 5B CF       0434*  	RST.LIL 08h
0498C3 21 48 10 00 0435*  	ld hl,BUF_4168
0498C7 01 07 00 00 0436*  	ld bc,7
0498CB 11 0E 00 00 0437*  	ld de,14
0498CF DD 21 62 00 0438*  	ld ix,98
       00          
0498D4 CD 59 C0 04 0439*  	call vdu_load_img
0498D8             0440*  
0498D8 21 02 9D 04 0441*  	ld hl,Frc073
0498DC 11 0A CB 04 0442*  	ld de,filedata
0498E0 01 00 00 01 0443*  	ld bc,65536
0498E4 3E 01       0444*  	ld a,mos_load
0498E6 5B CF       0445*  	RST.LIL 08h
0498E8 21 49 10 00 0446*  	ld hl,BUF_4169
0498EC 01 07 00 00 0447*  	ld bc,7
0498F0 11 0E 00 00 0448*  	ld de,14
0498F4 DD 21 62 00 0449*  	ld ix,98
       00          
0498F9 CD 59 C0 04 0450*  	call vdu_load_img
0498FD             0451*  
0498FD 21 15 9D 04 0452*  	ld hl,Frc074
049901 11 0A CB 04 0453*  	ld de,filedata
049905 01 00 00 01 0454*  	ld bc,65536
049909 3E 01       0455*  	ld a,mos_load
04990B 5B CF       0456*  	RST.LIL 08h
04990D 21 4A 10 00 0457*  	ld hl,BUF_4170
049911 01 08 00 00 0458*  	ld bc,8
049915 11 0E 00 00 0459*  	ld de,14
049919 DD 21 70 00 0460*  	ld ix,112
       00          
04991E CD 59 C0 04 0461*  	call vdu_load_img
049922             0462*  
049922 21 28 9D 04 0463*  	ld hl,Frc075
049926 11 0A CB 04 0464*  	ld de,filedata
04992A 01 00 00 01 0465*  	ld bc,65536
04992E 3E 01       0466*  	ld a,mos_load
049930 5B CF       0467*  	RST.LIL 08h
049932 21 4B 10 00 0468*  	ld hl,BUF_4171
049936 01 07 00 00 0469*  	ld bc,7
04993A 11 0E 00 00 0470*  	ld de,14
04993E DD 21 62 00 0471*  	ld ix,98
       00          
049943 CD 59 C0 04 0472*  	call vdu_load_img
049947             0473*  
049947 21 3B 9D 04 0474*  	ld hl,Frc076
04994B 11 0A CB 04 0475*  	ld de,filedata
04994F 01 00 00 01 0476*  	ld bc,65536
049953 3E 01       0477*  	ld a,mos_load
049955 5B CF       0478*  	RST.LIL 08h
049957 21 4C 10 00 0479*  	ld hl,BUF_4172
04995B 01 08 00 00 0480*  	ld bc,8
04995F 11 0E 00 00 0481*  	ld de,14
049963 DD 21 70 00 0482*  	ld ix,112
       00          
049968 CD 59 C0 04 0483*  	call vdu_load_img
04996C             0484*  
04996C 21 4E 9D 04 0485*  	ld hl,Frc077
049970 11 0A CB 04 0486*  	ld de,filedata
049974 01 00 00 01 0487*  	ld bc,65536
049978 3E 01       0488*  	ld a,mos_load
04997A 5B CF       0489*  	RST.LIL 08h
04997C 21 4D 10 00 0490*  	ld hl,BUF_4173
049980 01 09 00 00 0491*  	ld bc,9
049984 11 0E 00 00 0492*  	ld de,14
049988 DD 21 7E 00 0493*  	ld ix,126
       00          
04998D CD 59 C0 04 0494*  	call vdu_load_img
049991             0495*  
049991 21 61 9D 04 0496*  	ld hl,Frc078
049995 11 0A CB 04 0497*  	ld de,filedata
049999 01 00 00 01 0498*  	ld bc,65536
04999D 3E 01       0499*  	ld a,mos_load
04999F 5B CF       0500*  	RST.LIL 08h
0499A1 21 4E 10 00 0501*  	ld hl,BUF_4174
0499A5 01 07 00 00 0502*  	ld bc,7
0499A9 11 0E 00 00 0503*  	ld de,14
0499AD DD 21 62 00 0504*  	ld ix,98
       00          
0499B2 CD 59 C0 04 0505*  	call vdu_load_img
0499B6             0506*  
0499B6 21 74 9D 04 0507*  	ld hl,Frc079
0499BA 11 0A CB 04 0508*  	ld de,filedata
0499BE 01 00 00 01 0509*  	ld bc,65536
0499C2 3E 01       0510*  	ld a,mos_load
0499C4 5B CF       0511*  	RST.LIL 08h
0499C6 21 4F 10 00 0512*  	ld hl,BUF_4175
0499CA 01 08 00 00 0513*  	ld bc,8
0499CE 11 0E 00 00 0514*  	ld de,14
0499D2 DD 21 70 00 0515*  	ld ix,112
       00          
0499D7 CD 59 C0 04 0516*  	call vdu_load_img
0499DB             0517*  
0499DB 21 87 9D 04 0518*  	ld hl,Frc080
0499DF 11 0A CB 04 0519*  	ld de,filedata
0499E3 01 00 00 01 0520*  	ld bc,65536
0499E7 3E 01       0521*  	ld a,mos_load
0499E9 5B CF       0522*  	RST.LIL 08h
0499EB 21 50 10 00 0523*  	ld hl,BUF_4176
0499EF 01 07 00 00 0524*  	ld bc,7
0499F3 11 0E 00 00 0525*  	ld de,14
0499F7 DD 21 62 00 0526*  	ld ix,98
       00          
0499FC CD 59 C0 04 0527*  	call vdu_load_img
049A00             0528*  
049A00 21 9A 9D 04 0529*  	ld hl,Frc081
049A04 11 0A CB 04 0530*  	ld de,filedata
049A08 01 00 00 01 0531*  	ld bc,65536
049A0C 3E 01       0532*  	ld a,mos_load
049A0E 5B CF       0533*  	RST.LIL 08h
049A10 21 51 10 00 0534*  	ld hl,BUF_4177
049A14 01 08 00 00 0535*  	ld bc,8
049A18 11 0F 00 00 0536*  	ld de,15
049A1C DD 21 78 00 0537*  	ld ix,120
       00          
049A21 CD 59 C0 04 0538*  	call vdu_load_img
049A25             0539*  
049A25 21 AD 9D 04 0540*  	ld hl,Frc082
049A29 11 0A CB 04 0541*  	ld de,filedata
049A2D 01 00 00 01 0542*  	ld bc,65536
049A31 3E 01       0543*  	ld a,mos_load
049A33 5B CF       0544*  	RST.LIL 08h
049A35 21 52 10 00 0545*  	ld hl,BUF_4178
049A39 01 08 00 00 0546*  	ld bc,8
049A3D 11 0E 00 00 0547*  	ld de,14
049A41 DD 21 70 00 0548*  	ld ix,112
       00          
049A46 CD 59 C0 04 0549*  	call vdu_load_img
049A4A             0550*  
049A4A 21 C0 9D 04 0551*  	ld hl,Frc083
049A4E 11 0A CB 04 0552*  	ld de,filedata
049A52 01 00 00 01 0553*  	ld bc,65536
049A56 3E 01       0554*  	ld a,mos_load
049A58 5B CF       0555*  	RST.LIL 08h
049A5A 21 53 10 00 0556*  	ld hl,BUF_4179
049A5E 01 08 00 00 0557*  	ld bc,8
049A62 11 0E 00 00 0558*  	ld de,14
049A66 DD 21 70 00 0559*  	ld ix,112
       00          
049A6B CD 59 C0 04 0560*  	call vdu_load_img
049A6F             0561*  
049A6F 21 D3 9D 04 0562*  	ld hl,Frc084
049A73 11 0A CB 04 0563*  	ld de,filedata
049A77 01 00 00 01 0564*  	ld bc,65536
049A7B 3E 01       0565*  	ld a,mos_load
049A7D 5B CF       0566*  	RST.LIL 08h
049A7F 21 54 10 00 0567*  	ld hl,BUF_4180
049A83 01 07 00 00 0568*  	ld bc,7
049A87 11 0E 00 00 0569*  	ld de,14
049A8B DD 21 62 00 0570*  	ld ix,98
       00          
049A90 CD 59 C0 04 0571*  	call vdu_load_img
049A94             0572*  
049A94 21 E6 9D 04 0573*  	ld hl,Frc085
049A98 11 0A CB 04 0574*  	ld de,filedata
049A9C 01 00 00 01 0575*  	ld bc,65536
049AA0 3E 01       0576*  	ld a,mos_load
049AA2 5B CF       0577*  	RST.LIL 08h
049AA4 21 55 10 00 0578*  	ld hl,BUF_4181
049AA8 01 08 00 00 0579*  	ld bc,8
049AAC 11 0E 00 00 0580*  	ld de,14
049AB0 DD 21 70 00 0581*  	ld ix,112
       00          
049AB5 CD 59 C0 04 0582*  	call vdu_load_img
049AB9             0583*  
049AB9 21 F9 9D 04 0584*  	ld hl,Frc086
049ABD 11 0A CB 04 0585*  	ld de,filedata
049AC1 01 00 00 01 0586*  	ld bc,65536
049AC5 3E 01       0587*  	ld a,mos_load
049AC7 5B CF       0588*  	RST.LIL 08h
049AC9 21 56 10 00 0589*  	ld hl,BUF_4182
049ACD 01 07 00 00 0590*  	ld bc,7
049AD1 11 0E 00 00 0591*  	ld de,14
049AD5 DD 21 62 00 0592*  	ld ix,98
       00          
049ADA CD 59 C0 04 0593*  	call vdu_load_img
049ADE             0594*  
049ADE 21 0C 9E 04 0595*  	ld hl,Frc087
049AE2 11 0A CB 04 0596*  	ld de,filedata
049AE6 01 00 00 01 0597*  	ld bc,65536
049AEA 3E 01       0598*  	ld a,mos_load
049AEC 5B CF       0599*  	RST.LIL 08h
049AEE 21 57 10 00 0600*  	ld hl,BUF_4183
049AF2 01 0B 00 00 0601*  	ld bc,11
049AF6 11 0E 00 00 0602*  	ld de,14
049AFA DD 21 9A 00 0603*  	ld ix,154
       00          
049AFF CD 59 C0 04 0604*  	call vdu_load_img
049B03             0605*  
049B03 21 1F 9E 04 0606*  	ld hl,Frc088
049B07 11 0A CB 04 0607*  	ld de,filedata
049B0B 01 00 00 01 0608*  	ld bc,65536
049B0F 3E 01       0609*  	ld a,mos_load
049B11 5B CF       0610*  	RST.LIL 08h
049B13 21 58 10 00 0611*  	ld hl,BUF_4184
049B17 01 07 00 00 0612*  	ld bc,7
049B1B 11 0E 00 00 0613*  	ld de,14
049B1F DD 21 62 00 0614*  	ld ix,98
       00          
049B24 CD 59 C0 04 0615*  	call vdu_load_img
049B28             0616*  
049B28 21 32 9E 04 0617*  	ld hl,Frc089
049B2C 11 0A CB 04 0618*  	ld de,filedata
049B30 01 00 00 01 0619*  	ld bc,65536
049B34 3E 01       0620*  	ld a,mos_load
049B36 5B CF       0621*  	RST.LIL 08h
049B38 21 59 10 00 0622*  	ld hl,BUF_4185
049B3C 01 08 00 00 0623*  	ld bc,8
049B40 11 0E 00 00 0624*  	ld de,14
049B44 DD 21 70 00 0625*  	ld ix,112
       00          
049B49 CD 59 C0 04 0626*  	call vdu_load_img
049B4D             0627*  
049B4D 21 45 9E 04 0628*  	ld hl,Frc090
049B51 11 0A CB 04 0629*  	ld de,filedata
049B55 01 00 00 01 0630*  	ld bc,65536
049B59 3E 01       0631*  	ld a,mos_load
049B5B 5B CF       0632*  	RST.LIL 08h
049B5D 21 5A 10 00 0633*  	ld hl,BUF_4186
049B61 01 07 00 00 0634*  	ld bc,7
049B65 11 0E 00 00 0635*  	ld de,14
049B69 DD 21 62 00 0636*  	ld ix,98
       00          
049B6E CD 59 C0 04 0637*  	call vdu_load_img
049B72             0638*  ; Missing character 91
049B72             0639*  ; Missing character 92
049B72             0640*  ; Missing character 93
049B72             0641*  ; Missing character 94
049B72             0642*  ; Missing character 95
049B72             0643*  ; Missing character 96
049B72             0644*  ; Missing character 97
049B72             0645*  ; Missing character 98
049B72             0646*  ; Missing character 99
049B72             0647*  ; Missing character 100
049B72             0648*  ; Missing character 101
049B72             0649*  ; Missing character 102
049B72             0650*  ; Missing character 103
049B72             0651*  ; Missing character 104
049B72             0652*  ; Missing character 105
049B72             0653*  ; Missing character 106
049B72             0654*  ; Missing character 107
049B72             0655*  ; Missing character 108
049B72             0656*  ; Missing character 109
049B72             0657*  ; Missing character 110
049B72             0658*  ; Missing character 111
049B72             0659*  ; Missing character 112
049B72             0660*  ; Missing character 113
049B72             0661*  ; Missing character 114
049B72             0662*  ; Missing character 115
049B72             0663*  ; Missing character 116
049B72             0664*  ; Missing character 117
049B72             0665*  ; Missing character 118
049B72             0666*  ; Missing character 119
049B72             0667*  ; Missing character 120
049B72             0668*  ; Missing character 121
049B72             0669*  ; Missing character 122
049B72             0670*  
049B72 C9          0671*  	ret
049B73             0672*  
049B73 66 6F 6E 74 0673*  Frc032: db "fonts/rc/032.rgba2",0
       73 2F 72 63 
       2F 30 33 32 
       2E 72 67 62 
       61 32 00    
049B86 66 6F 6E 74 0674*  Frc033: db "fonts/rc/033.rgba2",0
       73 2F 72 63 
       2F 30 33 33 
       2E 72 67 62 
       61 32 00    
049B99 66 6F 6E 74 0675*  Frc048: db "fonts/rc/048.rgba2",0
       73 2F 72 63 
       2F 30 34 38 
       2E 72 67 62 
       61 32 00    
049BAC 66 6F 6E 74 0676*  Frc049: db "fonts/rc/049.rgba2",0
       73 2F 72 63 
       2F 30 34 39 
       2E 72 67 62 
       61 32 00    
049BBF 66 6F 6E 74 0677*  Frc050: db "fonts/rc/050.rgba2",0
       73 2F 72 63 
       2F 30 35 30 
       2E 72 67 62 
       61 32 00    
049BD2 66 6F 6E 74 0678*  Frc051: db "fonts/rc/051.rgba2",0
       73 2F 72 63 
       2F 30 35 31 
       2E 72 67 62 
       61 32 00    
049BE5 66 6F 6E 74 0679*  Frc052: db "fonts/rc/052.rgba2",0
       73 2F 72 63 
       2F 30 35 32 
       2E 72 67 62 
       61 32 00    
049BF8 66 6F 6E 74 0680*  Frc053: db "fonts/rc/053.rgba2",0
       73 2F 72 63 
       2F 30 35 33 
       2E 72 67 62 
       61 32 00    
049C0B 66 6F 6E 74 0681*  Frc054: db "fonts/rc/054.rgba2",0
       73 2F 72 63 
       2F 30 35 34 
       2E 72 67 62 
       61 32 00    
049C1E 66 6F 6E 74 0682*  Frc055: db "fonts/rc/055.rgba2",0
       73 2F 72 63 
       2F 30 35 35 
       2E 72 67 62 
       61 32 00    
049C31 66 6F 6E 74 0683*  Frc056: db "fonts/rc/056.rgba2",0
       73 2F 72 63 
       2F 30 35 36 
       2E 72 67 62 
       61 32 00    
049C44 66 6F 6E 74 0684*  Frc057: db "fonts/rc/057.rgba2",0
       73 2F 72 63 
       2F 30 35 37 
       2E 72 67 62 
       61 32 00    
049C57 66 6F 6E 74 0685*  Frc063: db "fonts/rc/063.rgba2",0
       73 2F 72 63 
       2F 30 36 33 
       2E 72 67 62 
       61 32 00    
049C6A 66 6F 6E 74 0686*  Frc065: db "fonts/rc/065.rgba2",0
       73 2F 72 63 
       2F 30 36 35 
       2E 72 67 62 
       61 32 00    
049C7D 66 6F 6E 74 0687*  Frc066: db "fonts/rc/066.rgba2",0
       73 2F 72 63 
       2F 30 36 36 
       2E 72 67 62 
       61 32 00    
049C90 66 6F 6E 74 0688*  Frc067: db "fonts/rc/067.rgba2",0
       73 2F 72 63 
       2F 30 36 37 
       2E 72 67 62 
       61 32 00    
049CA3 66 6F 6E 74 0689*  Frc068: db "fonts/rc/068.rgba2",0
       73 2F 72 63 
       2F 30 36 38 
       2E 72 67 62 
       61 32 00    
049CB6 66 6F 6E 74 0690*  Frc069: db "fonts/rc/069.rgba2",0
       73 2F 72 63 
       2F 30 36 39 
       2E 72 67 62 
       61 32 00    
049CC9 66 6F 6E 74 0691*  Frc070: db "fonts/rc/070.rgba2",0
       73 2F 72 63 
       2F 30 37 30 
       2E 72 67 62 
       61 32 00    
049CDC 66 6F 6E 74 0692*  Frc071: db "fonts/rc/071.rgba2",0
       73 2F 72 63 
       2F 30 37 31 
       2E 72 67 62 
       61 32 00    
049CEF 66 6F 6E 74 0693*  Frc072: db "fonts/rc/072.rgba2",0
       73 2F 72 63 
       2F 30 37 32 
       2E 72 67 62 
       61 32 00    
049D02 66 6F 6E 74 0694*  Frc073: db "fonts/rc/073.rgba2",0
       73 2F 72 63 
       2F 30 37 33 
       2E 72 67 62 
       61 32 00    
049D15 66 6F 6E 74 0695*  Frc074: db "fonts/rc/074.rgba2",0
       73 2F 72 63 
       2F 30 37 34 
       2E 72 67 62 
       61 32 00    
049D28 66 6F 6E 74 0696*  Frc075: db "fonts/rc/075.rgba2",0
       73 2F 72 63 
       2F 30 37 35 
       2E 72 67 62 
       61 32 00    
049D3B 66 6F 6E 74 0697*  Frc076: db "fonts/rc/076.rgba2",0
       73 2F 72 63 
       2F 30 37 36 
       2E 72 67 62 
       61 32 00    
049D4E 66 6F 6E 74 0698*  Frc077: db "fonts/rc/077.rgba2",0
       73 2F 72 63 
       2F 30 37 37 
       2E 72 67 62 
       61 32 00    
049D61 66 6F 6E 74 0699*  Frc078: db "fonts/rc/078.rgba2",0
       73 2F 72 63 
       2F 30 37 38 
       2E 72 67 62 
       61 32 00    
049D74 66 6F 6E 74 0700*  Frc079: db "fonts/rc/079.rgba2",0
       73 2F 72 63 
       2F 30 37 39 
       2E 72 67 62 
       61 32 00    
049D87 66 6F 6E 74 0701*  Frc080: db "fonts/rc/080.rgba2",0
       73 2F 72 63 
       2F 30 38 30 
       2E 72 67 62 
       61 32 00    
049D9A 66 6F 6E 74 0702*  Frc081: db "fonts/rc/081.rgba2",0
       73 2F 72 63 
       2F 30 38 31 
       2E 72 67 62 
       61 32 00    
049DAD 66 6F 6E 74 0703*  Frc082: db "fonts/rc/082.rgba2",0
       73 2F 72 63 
       2F 30 38 32 
       2E 72 67 62 
       61 32 00    
049DC0 66 6F 6E 74 0704*  Frc083: db "fonts/rc/083.rgba2",0
       73 2F 72 63 
       2F 30 38 33 
       2E 72 67 62 
       61 32 00    
049DD3 66 6F 6E 74 0705*  Frc084: db "fonts/rc/084.rgba2",0
       73 2F 72 63 
       2F 30 38 34 
       2E 72 67 62 
       61 32 00    
049DE6 66 6F 6E 74 0706*  Frc085: db "fonts/rc/085.rgba2",0
       73 2F 72 63 
       2F 30 38 35 
       2E 72 67 62 
       61 32 00    
049DF9 66 6F 6E 74 0707*  Frc086: db "fonts/rc/086.rgba2",0
       73 2F 72 63 
       2F 30 38 36 
       2E 72 67 62 
       61 32 00    
049E0C 66 6F 6E 74 0708*  Frc087: db "fonts/rc/087.rgba2",0
       73 2F 72 63 
       2F 30 38 37 
       2E 72 67 62 
       61 32 00    
049E1F 66 6F 6E 74 0709*  Frc088: db "fonts/rc/088.rgba2",0
       73 2F 72 63 
       2F 30 38 38 
       2E 72 67 62 
       61 32 00    
049E32 66 6F 6E 74 0710*  Frc089: db "fonts/rc/089.rgba2",0
       73 2F 72 63 
       2F 30 38 39 
       2E 72 67 62 
       61 32 00    
049E45 66 6F 6E 74 0711*  Frc090: db "fonts/rc/090.rgba2",0
       73 2F 72 63 
       2F 30 39 30 
       2E 72 67 62 
       61 32 00    
049E58             0020   	include "src/asm/ui.asm"
049E58             0001*  ; ui routines will go here
049E58             0021   	include "src/asm/ui_img.asm"
049E58             0001*  ; Bitmap indices:
049E58             0002*  BUF_UI_BJ_025: equ 0x2000
049E58             0003*  BUF_UI_BJ_050: equ 0x2001
049E58             0004*  BUF_UI_BJ_075: equ 0x2002
049E58             0005*  BUF_UI_BJ_100: equ 0x2003
049E58             0006*  BUF_UI_BJ_120_120: equ 0x2004
049E58             0007*  BUF_UI_LOWER_PANEL: equ 0x2005
049E58             0008*  BUF_UI_LOWER_PANEL_GATLING: equ 0x2006
049E58             0009*  BUF_UI_LOWER_PANEL_KNIFE: equ 0x2007
049E58             0010*  BUF_UI_LOWER_PANEL_MACHINE_GUN: equ 0x2008
049E58             0011*  BUF_UI_LOWER_PANEL_PISTOL: equ 0x2009
049E58             0012*  BUF_UI_SPLASH: equ 0x200A
049E58             0013*  
049E58             0014*  ; Import .rgba2 bitmap files and load them into VDP buffers
049E58             0015*  load_ui_images:
049E58             0016*  
049E58 21 1C A0 04 0017*  	ld hl,F_UI_bj_025
049E5C 11 0A CB 04 0018*  	ld de,filedata
049E60 01 00 00 01 0019*  	ld bc,65536
049E64 3E 01       0020*  	ld a,mos_load
049E66 5B CF       0021*  	RST.LIL 08h
049E68 21 00 20 00 0022*  	ld hl,BUF_UI_BJ_025
049E6C 01 20 00 00 0023*  	ld bc,32
049E70 11 20 00 00 0024*  	ld de,32
049E74 DD 21 00 04 0025*  	ld ix,1024
       00          
049E79 CD 59 C0 04 0026*  	call vdu_load_img
049E7D 3E 2E       0027*  	LD A, '.'
049E7F 5B D7       0028*  	RST.LIL 10h
049E81             0029*  
049E81 21 2C A0 04 0030*  	ld hl,F_UI_bj_050
049E85 11 0A CB 04 0031*  	ld de,filedata
049E89 01 00 00 01 0032*  	ld bc,65536
049E8D 3E 01       0033*  	ld a,mos_load
049E8F 5B CF       0034*  	RST.LIL 08h
049E91 21 01 20 00 0035*  	ld hl,BUF_UI_BJ_050
049E95 01 20 00 00 0036*  	ld bc,32
049E99 11 20 00 00 0037*  	ld de,32
049E9D DD 21 00 04 0038*  	ld ix,1024
       00          
049EA2 CD 59 C0 04 0039*  	call vdu_load_img
049EA6 3E 2E       0040*  	LD A, '.'
049EA8 5B D7       0041*  	RST.LIL 10h
049EAA             0042*  
049EAA 21 3C A0 04 0043*  	ld hl,F_UI_bj_075
049EAE 11 0A CB 04 0044*  	ld de,filedata
049EB2 01 00 00 01 0045*  	ld bc,65536
049EB6 3E 01       0046*  	ld a,mos_load
049EB8 5B CF       0047*  	RST.LIL 08h
049EBA 21 02 20 00 0048*  	ld hl,BUF_UI_BJ_075
049EBE 01 20 00 00 0049*  	ld bc,32
049EC2 11 20 00 00 0050*  	ld de,32
049EC6 DD 21 00 04 0051*  	ld ix,1024
       00          
049ECB CD 59 C0 04 0052*  	call vdu_load_img
049ECF 3E 2E       0053*  	LD A, '.'
049ED1 5B D7       0054*  	RST.LIL 10h
049ED3             0055*  
049ED3 21 4C A0 04 0056*  	ld hl,F_UI_bj_100
049ED7 11 0A CB 04 0057*  	ld de,filedata
049EDB 01 00 00 01 0058*  	ld bc,65536
049EDF 3E 01       0059*  	ld a,mos_load
049EE1 5B CF       0060*  	RST.LIL 08h
049EE3 21 03 20 00 0061*  	ld hl,BUF_UI_BJ_100
049EE7 01 20 00 00 0062*  	ld bc,32
049EEB 11 20 00 00 0063*  	ld de,32
049EEF DD 21 00 04 0064*  	ld ix,1024
       00          
049EF4 CD 59 C0 04 0065*  	call vdu_load_img
049EF8 3E 2E       0066*  	LD A, '.'
049EFA 5B D7       0067*  	RST.LIL 10h
049EFC             0068*  
049EFC 21 5C A0 04 0069*  	ld hl,F_UI_bj_120_120
049F00 11 0A CB 04 0070*  	ld de,filedata
049F04 01 00 00 01 0071*  	ld bc,65536
049F08 3E 01       0072*  	ld a,mos_load
049F0A 5B CF       0073*  	RST.LIL 08h
049F0C 21 04 20 00 0074*  	ld hl,BUF_UI_BJ_120_120
049F10 01 78 00 00 0075*  	ld bc,120
049F14 11 78 00 00 0076*  	ld de,120
049F18 DD 21 40 38 0077*  	ld ix,14400
       00          
049F1D CD 59 C0 04 0078*  	call vdu_load_img
049F21 3E 2E       0079*  	LD A, '.'
049F23 5B D7       0080*  	RST.LIL 10h
049F25             0081*  
049F25 21 70 A0 04 0082*  	ld hl,F_UI_lower_panel
049F29 11 0A CB 04 0083*  	ld de,filedata
049F2D 01 00 00 01 0084*  	ld bc,65536
049F31 3E 01       0085*  	ld a,mos_load
049F33 5B CF       0086*  	RST.LIL 08h
049F35 21 05 20 00 0087*  	ld hl,BUF_UI_LOWER_PANEL
049F39 01 40 01 00 0088*  	ld bc,320
049F3D 11 50 00 00 0089*  	ld de,80
049F41 DD 21 00 64 0090*  	ld ix,25600
       00          
049F46 CD 59 C0 04 0091*  	call vdu_load_img
049F4A 3E 2E       0092*  	LD A, '.'
049F4C 5B D7       0093*  	RST.LIL 10h
049F4E             0094*  
049F4E 21 85 A0 04 0095*  	ld hl,F_UI_lower_panel_gatling
049F52 11 0A CB 04 0096*  	ld de,filedata
049F56 01 00 00 01 0097*  	ld bc,65536
049F5A 3E 01       0098*  	ld a,mos_load
049F5C 5B CF       0099*  	RST.LIL 08h
049F5E 21 06 20 00 0100*  	ld hl,BUF_UI_LOWER_PANEL_GATLING
049F62 01 28 00 00 0101*  	ld bc,40
049F66 11 14 00 00 0102*  	ld de,20
049F6A DD 21 20 03 0103*  	ld ix,800
       00          
049F6F CD 59 C0 04 0104*  	call vdu_load_img
049F73 3E 2E       0105*  	LD A, '.'
049F75 5B D7       0106*  	RST.LIL 10h
049F77             0107*  
049F77 21 A2 A0 04 0108*  	ld hl,F_UI_lower_panel_knife
049F7B 11 0A CB 04 0109*  	ld de,filedata
049F7F 01 00 00 01 0110*  	ld bc,65536
049F83 3E 01       0111*  	ld a,mos_load
049F85 5B CF       0112*  	RST.LIL 08h
049F87 21 07 20 00 0113*  	ld hl,BUF_UI_LOWER_PANEL_KNIFE
049F8B 01 28 00 00 0114*  	ld bc,40
049F8F 11 14 00 00 0115*  	ld de,20
049F93 DD 21 20 03 0116*  	ld ix,800
       00          
049F98 CD 59 C0 04 0117*  	call vdu_load_img
049F9C 3E 2E       0118*  	LD A, '.'
049F9E 5B D7       0119*  	RST.LIL 10h
049FA0             0120*  
049FA0 21 BD A0 04 0121*  	ld hl,F_UI_lower_panel_machine_gun
049FA4 11 0A CB 04 0122*  	ld de,filedata
049FA8 01 00 00 01 0123*  	ld bc,65536
049FAC 3E 01       0124*  	ld a,mos_load
049FAE 5B CF       0125*  	RST.LIL 08h
049FB0 21 08 20 00 0126*  	ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
049FB4 01 28 00 00 0127*  	ld bc,40
049FB8 11 14 00 00 0128*  	ld de,20
049FBC DD 21 20 03 0129*  	ld ix,800
       00          
049FC1 CD 59 C0 04 0130*  	call vdu_load_img
049FC5 3E 2E       0131*  	LD A, '.'
049FC7 5B D7       0132*  	RST.LIL 10h
049FC9             0133*  
049FC9 21 DE A0 04 0134*  	ld hl,F_UI_lower_panel_pistol
049FCD 11 0A CB 04 0135*  	ld de,filedata
049FD1 01 00 00 01 0136*  	ld bc,65536
049FD5 3E 01       0137*  	ld a,mos_load
049FD7 5B CF       0138*  	RST.LIL 08h
049FD9 21 09 20 00 0139*  	ld hl,BUF_UI_LOWER_PANEL_PISTOL
049FDD 01 28 00 00 0140*  	ld bc,40
049FE1 11 14 00 00 0141*  	ld de,20
049FE5 DD 21 20 03 0142*  	ld ix,800
       00          
049FEA CD 59 C0 04 0143*  	call vdu_load_img
049FEE 3E 2E       0144*  	LD A, '.'
049FF0 5B D7       0145*  	RST.LIL 10h
049FF2             0146*  
049FF2 21 FA A0 04 0147*  	ld hl,F_UI_splash
049FF6 11 0A CB 04 0148*  	ld de,filedata
049FFA 01 00 00 01 0149*  	ld bc,65536
049FFE 3E 01       0150*  	ld a,mos_load
04A000 5B CF       0151*  	RST.LIL 08h
04A002 21 0A 20 00 0152*  	ld hl,BUF_UI_SPLASH
04A006 01 40 01 00 0153*  	ld bc,320
04A00A 11 A0 00 00 0154*  	ld de,160
04A00E DD 21 00 C8 0155*  	ld ix,51200
       00          
04A013 CD 59 C0 04 0156*  	call vdu_load_img
04A017 3E 2E       0157*  	LD A, '.'
04A019 5B D7       0158*  	RST.LIL 10h
04A01B             0159*  
04A01B C9          0160*  	ret
04A01C             0161*  
04A01C 75 69 2F 62 0162*  F_UI_bj_025: db "ui/bj_025.rgba2",0
       6A 5F 30 32 
       35 2E 72 67 
       62 61 32 00 
04A02C 75 69 2F 62 0163*  F_UI_bj_050: db "ui/bj_050.rgba2",0
       6A 5F 30 35 
       30 2E 72 67 
       62 61 32 00 
04A03C 75 69 2F 62 0164*  F_UI_bj_075: db "ui/bj_075.rgba2",0
       6A 5F 30 37 
       35 2E 72 67 
       62 61 32 00 
04A04C 75 69 2F 62 0165*  F_UI_bj_100: db "ui/bj_100.rgba2",0
       6A 5F 31 30 
       30 2E 72 67 
       62 61 32 00 
04A05C 75 69 2F 62 0166*  F_UI_bj_120_120: db "ui/bj_120_120.rgba2",0
       6A 5F 31 32 
       30 5F 31 32 
       30 2E 72 67 
       62 61 32 00 
04A070 75 69 2F 6C 0167*  F_UI_lower_panel: db "ui/lower_panel.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 2E 72 
       67 62 61 32 
       00          
04A085 75 69 2F 6C 0168*  F_UI_lower_panel_gatling: db "ui/lower_panel_gatling.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 67 
       61 74 6C 69 
       6E 67 2E 72 
       67 62 61 32 
       00          
04A0A2 75 69 2F 6C 0169*  F_UI_lower_panel_knife: db "ui/lower_panel_knife.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6B 
       6E 69 66 65 
       2E 72 67 62 
       61 32 00    
04A0BD 75 69 2F 6C 0170*  F_UI_lower_panel_machine_gun: db "ui/lower_panel_machine_gun.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 6D 
       61 63 68 69 
       6E 65 5F 67 
       75 6E 2E 72 
       67 62 61 32 
       00          
04A0DE 75 69 2F 6C 0171*  F_UI_lower_panel_pistol: db "ui/lower_panel_pistol.rgba2",0
       6F 77 65 72 
       5F 70 61 6E 
       65 6C 5F 70 
       69 73 74 6F 
       6C 2E 72 67 
       62 61 32 00 
04A0FA 75 69 2F 73 0172*  F_UI_splash: db "ui/splash.rgba2",0
       70 6C 61 73 
       68 2E 72 67 
       62 61 32 00 
04A10A             0022   	include "src/asm/ui_img_bj.asm"
04A10A             0001*  ; Bitmap indices:
04A10A             0002*  BUF_UI_BJ_GATLING_00: equ 0x2100
04A10A             0003*  BUF_UI_BJ_GATLING_01: equ 0x2101
04A10A             0004*  BUF_UI_BJ_GATLING_02: equ 0x2102
04A10A             0005*  BUF_UI_BJ_GATLING_03: equ 0x2103
04A10A             0006*  BUF_UI_BJ_GATLING_04: equ 0x2104
04A10A             0007*  BUF_UI_BJ_KNIFE_00: equ 0x2105
04A10A             0008*  BUF_UI_BJ_KNIFE_01: equ 0x2106
04A10A             0009*  BUF_UI_BJ_KNIFE_02: equ 0x2107
04A10A             0010*  BUF_UI_BJ_KNIFE_03: equ 0x2108
04A10A             0011*  BUF_UI_BJ_KNIFE_04: equ 0x2109
04A10A             0012*  BUF_UI_BJ_MACHINE_GUN_00: equ 0x210A
04A10A             0013*  BUF_UI_BJ_MACHINE_GUN_01: equ 0x210B
04A10A             0014*  BUF_UI_BJ_MACHINE_GUN_02: equ 0x210C
04A10A             0015*  BUF_UI_BJ_MACHINE_GUN_03: equ 0x210D
04A10A             0016*  BUF_UI_BJ_MACHINE_GUN_04: equ 0x210E
04A10A             0017*  BUF_UI_BJ_PISTOL_00: equ 0x210F
04A10A             0018*  BUF_UI_BJ_PISTOL_01: equ 0x2110
04A10A             0019*  BUF_UI_BJ_PISTOL_02: equ 0x2111
04A10A             0020*  BUF_UI_BJ_PISTOL_03: equ 0x2112
04A10A             0021*  BUF_UI_BJ_PISTOL_04: equ 0x2113
04A10A             0022*  
04A10A             0023*  ; Import .rgba2 bitmap files and load them into VDP buffers
04A10A             0024*  load_ui_images_bj:
04A10A             0025*  
04A10A 21 3F A4 04 0026*  	ld hl,F_UI_bj_gatling_00
04A10E 11 0A CB 04 0027*  	ld de,filedata
04A112 01 00 00 01 0028*  	ld bc,65536
04A116 3E 01       0029*  	ld a,mos_load
04A118 5B CF       0030*  	RST.LIL 08h
04A11A 21 00 21 00 0031*  	ld hl,BUF_UI_BJ_GATLING_00
04A11E 01 40 00 00 0032*  	ld bc,64
04A122 11 40 00 00 0033*  	ld de,64
04A126 DD 21 00 10 0034*  	ld ix,4096
       00          
04A12B CD 59 C0 04 0035*  	call vdu_load_img
04A12F 3E 2E       0036*  	LD A, '.'
04A131 5B D7       0037*  	RST.LIL 10h
04A133             0038*  
04A133 21 59 A4 04 0039*  	ld hl,F_UI_bj_gatling_01
04A137 11 0A CB 04 0040*  	ld de,filedata
04A13B 01 00 00 01 0041*  	ld bc,65536
04A13F 3E 01       0042*  	ld a,mos_load
04A141 5B CF       0043*  	RST.LIL 08h
04A143 21 01 21 00 0044*  	ld hl,BUF_UI_BJ_GATLING_01
04A147 01 40 00 00 0045*  	ld bc,64
04A14B 11 40 00 00 0046*  	ld de,64
04A14F DD 21 00 10 0047*  	ld ix,4096
       00          
04A154 CD 59 C0 04 0048*  	call vdu_load_img
04A158 3E 2E       0049*  	LD A, '.'
04A15A 5B D7       0050*  	RST.LIL 10h
04A15C             0051*  
04A15C 21 73 A4 04 0052*  	ld hl,F_UI_bj_gatling_02
04A160 11 0A CB 04 0053*  	ld de,filedata
04A164 01 00 00 01 0054*  	ld bc,65536
04A168 3E 01       0055*  	ld a,mos_load
04A16A 5B CF       0056*  	RST.LIL 08h
04A16C 21 02 21 00 0057*  	ld hl,BUF_UI_BJ_GATLING_02
04A170 01 40 00 00 0058*  	ld bc,64
04A174 11 40 00 00 0059*  	ld de,64
04A178 DD 21 00 10 0060*  	ld ix,4096
       00          
04A17D CD 59 C0 04 0061*  	call vdu_load_img
04A181 3E 2E       0062*  	LD A, '.'
04A183 5B D7       0063*  	RST.LIL 10h
04A185             0064*  
04A185 21 8D A4 04 0065*  	ld hl,F_UI_bj_gatling_03
04A189 11 0A CB 04 0066*  	ld de,filedata
04A18D 01 00 00 01 0067*  	ld bc,65536
04A191 3E 01       0068*  	ld a,mos_load
04A193 5B CF       0069*  	RST.LIL 08h
04A195 21 03 21 00 0070*  	ld hl,BUF_UI_BJ_GATLING_03
04A199 01 40 00 00 0071*  	ld bc,64
04A19D 11 40 00 00 0072*  	ld de,64
04A1A1 DD 21 00 10 0073*  	ld ix,4096
       00          
04A1A6 CD 59 C0 04 0074*  	call vdu_load_img
04A1AA 3E 2E       0075*  	LD A, '.'
04A1AC 5B D7       0076*  	RST.LIL 10h
04A1AE             0077*  
04A1AE 21 A7 A4 04 0078*  	ld hl,F_UI_bj_gatling_04
04A1B2 11 0A CB 04 0079*  	ld de,filedata
04A1B6 01 00 00 01 0080*  	ld bc,65536
04A1BA 3E 01       0081*  	ld a,mos_load
04A1BC 5B CF       0082*  	RST.LIL 08h
04A1BE 21 04 21 00 0083*  	ld hl,BUF_UI_BJ_GATLING_04
04A1C2 01 40 00 00 0084*  	ld bc,64
04A1C6 11 40 00 00 0085*  	ld de,64
04A1CA DD 21 00 10 0086*  	ld ix,4096
       00          
04A1CF CD 59 C0 04 0087*  	call vdu_load_img
04A1D3 3E 2E       0088*  	LD A, '.'
04A1D5 5B D7       0089*  	RST.LIL 10h
04A1D7             0090*  
04A1D7 21 C1 A4 04 0091*  	ld hl,F_UI_bj_knife_00
04A1DB 11 0A CB 04 0092*  	ld de,filedata
04A1DF 01 00 00 01 0093*  	ld bc,65536
04A1E3 3E 01       0094*  	ld a,mos_load
04A1E5 5B CF       0095*  	RST.LIL 08h
04A1E7 21 05 21 00 0096*  	ld hl,BUF_UI_BJ_KNIFE_00
04A1EB 01 40 00 00 0097*  	ld bc,64
04A1EF 11 40 00 00 0098*  	ld de,64
04A1F3 DD 21 00 10 0099*  	ld ix,4096
       00          
04A1F8 CD 59 C0 04 0100*  	call vdu_load_img
04A1FC 3E 2E       0101*  	LD A, '.'
04A1FE 5B D7       0102*  	RST.LIL 10h
04A200             0103*  
04A200 21 D9 A4 04 0104*  	ld hl,F_UI_bj_knife_01
04A204 11 0A CB 04 0105*  	ld de,filedata
04A208 01 00 00 01 0106*  	ld bc,65536
04A20C 3E 01       0107*  	ld a,mos_load
04A20E 5B CF       0108*  	RST.LIL 08h
04A210 21 06 21 00 0109*  	ld hl,BUF_UI_BJ_KNIFE_01
04A214 01 40 00 00 0110*  	ld bc,64
04A218 11 40 00 00 0111*  	ld de,64
04A21C DD 21 00 10 0112*  	ld ix,4096
       00          
04A221 CD 59 C0 04 0113*  	call vdu_load_img
04A225 3E 2E       0114*  	LD A, '.'
04A227 5B D7       0115*  	RST.LIL 10h
04A229             0116*  
04A229 21 F1 A4 04 0117*  	ld hl,F_UI_bj_knife_02
04A22D 11 0A CB 04 0118*  	ld de,filedata
04A231 01 00 00 01 0119*  	ld bc,65536
04A235 3E 01       0120*  	ld a,mos_load
04A237 5B CF       0121*  	RST.LIL 08h
04A239 21 07 21 00 0122*  	ld hl,BUF_UI_BJ_KNIFE_02
04A23D 01 40 00 00 0123*  	ld bc,64
04A241 11 40 00 00 0124*  	ld de,64
04A245 DD 21 00 10 0125*  	ld ix,4096
       00          
04A24A CD 59 C0 04 0126*  	call vdu_load_img
04A24E 3E 2E       0127*  	LD A, '.'
04A250 5B D7       0128*  	RST.LIL 10h
04A252             0129*  
04A252 21 09 A5 04 0130*  	ld hl,F_UI_bj_knife_03
04A256 11 0A CB 04 0131*  	ld de,filedata
04A25A 01 00 00 01 0132*  	ld bc,65536
04A25E 3E 01       0133*  	ld a,mos_load
04A260 5B CF       0134*  	RST.LIL 08h
04A262 21 08 21 00 0135*  	ld hl,BUF_UI_BJ_KNIFE_03
04A266 01 40 00 00 0136*  	ld bc,64
04A26A 11 40 00 00 0137*  	ld de,64
04A26E DD 21 00 10 0138*  	ld ix,4096
       00          
04A273 CD 59 C0 04 0139*  	call vdu_load_img
04A277 3E 2E       0140*  	LD A, '.'
04A279 5B D7       0141*  	RST.LIL 10h
04A27B             0142*  
04A27B 21 21 A5 04 0143*  	ld hl,F_UI_bj_knife_04
04A27F 11 0A CB 04 0144*  	ld de,filedata
04A283 01 00 00 01 0145*  	ld bc,65536
04A287 3E 01       0146*  	ld a,mos_load
04A289 5B CF       0147*  	RST.LIL 08h
04A28B 21 09 21 00 0148*  	ld hl,BUF_UI_BJ_KNIFE_04
04A28F 01 40 00 00 0149*  	ld bc,64
04A293 11 40 00 00 0150*  	ld de,64
04A297 DD 21 00 10 0151*  	ld ix,4096
       00          
04A29C CD 59 C0 04 0152*  	call vdu_load_img
04A2A0 3E 2E       0153*  	LD A, '.'
04A2A2 5B D7       0154*  	RST.LIL 10h
04A2A4             0155*  
04A2A4 21 39 A5 04 0156*  	ld hl,F_UI_bj_machine_gun_00
04A2A8 11 0A CB 04 0157*  	ld de,filedata
04A2AC 01 00 00 01 0158*  	ld bc,65536
04A2B0 3E 01       0159*  	ld a,mos_load
04A2B2 5B CF       0160*  	RST.LIL 08h
04A2B4 21 0A 21 00 0161*  	ld hl,BUF_UI_BJ_MACHINE_GUN_00
04A2B8 01 40 00 00 0162*  	ld bc,64
04A2BC 11 40 00 00 0163*  	ld de,64
04A2C0 DD 21 00 10 0164*  	ld ix,4096
       00          
04A2C5 CD 59 C0 04 0165*  	call vdu_load_img
04A2C9 3E 2E       0166*  	LD A, '.'
04A2CB 5B D7       0167*  	RST.LIL 10h
04A2CD             0168*  
04A2CD 21 57 A5 04 0169*  	ld hl,F_UI_bj_machine_gun_01
04A2D1 11 0A CB 04 0170*  	ld de,filedata
04A2D5 01 00 00 01 0171*  	ld bc,65536
04A2D9 3E 01       0172*  	ld a,mos_load
04A2DB 5B CF       0173*  	RST.LIL 08h
04A2DD 21 0B 21 00 0174*  	ld hl,BUF_UI_BJ_MACHINE_GUN_01
04A2E1 01 40 00 00 0175*  	ld bc,64
04A2E5 11 40 00 00 0176*  	ld de,64
04A2E9 DD 21 00 10 0177*  	ld ix,4096
       00          
04A2EE CD 59 C0 04 0178*  	call vdu_load_img
04A2F2 3E 2E       0179*  	LD A, '.'
04A2F4 5B D7       0180*  	RST.LIL 10h
04A2F6             0181*  
04A2F6 21 75 A5 04 0182*  	ld hl,F_UI_bj_machine_gun_02
04A2FA 11 0A CB 04 0183*  	ld de,filedata
04A2FE 01 00 00 01 0184*  	ld bc,65536
04A302 3E 01       0185*  	ld a,mos_load
04A304 5B CF       0186*  	RST.LIL 08h
04A306 21 0C 21 00 0187*  	ld hl,BUF_UI_BJ_MACHINE_GUN_02
04A30A 01 40 00 00 0188*  	ld bc,64
04A30E 11 40 00 00 0189*  	ld de,64
04A312 DD 21 00 10 0190*  	ld ix,4096
       00          
04A317 CD 59 C0 04 0191*  	call vdu_load_img
04A31B 3E 2E       0192*  	LD A, '.'
04A31D 5B D7       0193*  	RST.LIL 10h
04A31F             0194*  
04A31F 21 93 A5 04 0195*  	ld hl,F_UI_bj_machine_gun_03
04A323 11 0A CB 04 0196*  	ld de,filedata
04A327 01 00 00 01 0197*  	ld bc,65536
04A32B 3E 01       0198*  	ld a,mos_load
04A32D 5B CF       0199*  	RST.LIL 08h
04A32F 21 0D 21 00 0200*  	ld hl,BUF_UI_BJ_MACHINE_GUN_03
04A333 01 40 00 00 0201*  	ld bc,64
04A337 11 40 00 00 0202*  	ld de,64
04A33B DD 21 00 10 0203*  	ld ix,4096
       00          
04A340 CD 59 C0 04 0204*  	call vdu_load_img
04A344 3E 2E       0205*  	LD A, '.'
04A346 5B D7       0206*  	RST.LIL 10h
04A348             0207*  
04A348 21 B1 A5 04 0208*  	ld hl,F_UI_bj_machine_gun_04
04A34C 11 0A CB 04 0209*  	ld de,filedata
04A350 01 00 00 01 0210*  	ld bc,65536
04A354 3E 01       0211*  	ld a,mos_load
04A356 5B CF       0212*  	RST.LIL 08h
04A358 21 0E 21 00 0213*  	ld hl,BUF_UI_BJ_MACHINE_GUN_04
04A35C 01 40 00 00 0214*  	ld bc,64
04A360 11 40 00 00 0215*  	ld de,64
04A364 DD 21 00 10 0216*  	ld ix,4096
       00          
04A369 CD 59 C0 04 0217*  	call vdu_load_img
04A36D 3E 2E       0218*  	LD A, '.'
04A36F 5B D7       0219*  	RST.LIL 10h
04A371             0220*  
04A371 21 CF A5 04 0221*  	ld hl,F_UI_bj_pistol_00
04A375 11 0A CB 04 0222*  	ld de,filedata
04A379 01 00 00 01 0223*  	ld bc,65536
04A37D 3E 01       0224*  	ld a,mos_load
04A37F 5B CF       0225*  	RST.LIL 08h
04A381 21 0F 21 00 0226*  	ld hl,BUF_UI_BJ_PISTOL_00
04A385 01 40 00 00 0227*  	ld bc,64
04A389 11 40 00 00 0228*  	ld de,64
04A38D DD 21 00 10 0229*  	ld ix,4096
       00          
04A392 CD 59 C0 04 0230*  	call vdu_load_img
04A396 3E 2E       0231*  	LD A, '.'
04A398 5B D7       0232*  	RST.LIL 10h
04A39A             0233*  
04A39A 21 E8 A5 04 0234*  	ld hl,F_UI_bj_pistol_01
04A39E 11 0A CB 04 0235*  	ld de,filedata
04A3A2 01 00 00 01 0236*  	ld bc,65536
04A3A6 3E 01       0237*  	ld a,mos_load
04A3A8 5B CF       0238*  	RST.LIL 08h
04A3AA 21 10 21 00 0239*  	ld hl,BUF_UI_BJ_PISTOL_01
04A3AE 01 40 00 00 0240*  	ld bc,64
04A3B2 11 40 00 00 0241*  	ld de,64
04A3B6 DD 21 00 10 0242*  	ld ix,4096
       00          
04A3BB CD 59 C0 04 0243*  	call vdu_load_img
04A3BF 3E 2E       0244*  	LD A, '.'
04A3C1 5B D7       0245*  	RST.LIL 10h
04A3C3             0246*  
04A3C3 21 01 A6 04 0247*  	ld hl,F_UI_bj_pistol_02
04A3C7 11 0A CB 04 0248*  	ld de,filedata
04A3CB 01 00 00 01 0249*  	ld bc,65536
04A3CF 3E 01       0250*  	ld a,mos_load
04A3D1 5B CF       0251*  	RST.LIL 08h
04A3D3 21 11 21 00 0252*  	ld hl,BUF_UI_BJ_PISTOL_02
04A3D7 01 40 00 00 0253*  	ld bc,64
04A3DB 11 40 00 00 0254*  	ld de,64
04A3DF DD 21 00 10 0255*  	ld ix,4096
       00          
04A3E4 CD 59 C0 04 0256*  	call vdu_load_img
04A3E8 3E 2E       0257*  	LD A, '.'
04A3EA 5B D7       0258*  	RST.LIL 10h
04A3EC             0259*  
04A3EC 21 1A A6 04 0260*  	ld hl,F_UI_bj_pistol_03
04A3F0 11 0A CB 04 0261*  	ld de,filedata
04A3F4 01 00 00 01 0262*  	ld bc,65536
04A3F8 3E 01       0263*  	ld a,mos_load
04A3FA 5B CF       0264*  	RST.LIL 08h
04A3FC 21 12 21 00 0265*  	ld hl,BUF_UI_BJ_PISTOL_03
04A400 01 40 00 00 0266*  	ld bc,64
04A404 11 40 00 00 0267*  	ld de,64
04A408 DD 21 00 10 0268*  	ld ix,4096
       00          
04A40D CD 59 C0 04 0269*  	call vdu_load_img
04A411 3E 2E       0270*  	LD A, '.'
04A413 5B D7       0271*  	RST.LIL 10h
04A415             0272*  
04A415 21 33 A6 04 0273*  	ld hl,F_UI_bj_pistol_04
04A419 11 0A CB 04 0274*  	ld de,filedata
04A41D 01 00 00 01 0275*  	ld bc,65536
04A421 3E 01       0276*  	ld a,mos_load
04A423 5B CF       0277*  	RST.LIL 08h
04A425 21 13 21 00 0278*  	ld hl,BUF_UI_BJ_PISTOL_04
04A429 01 40 00 00 0279*  	ld bc,64
04A42D 11 40 00 00 0280*  	ld de,64
04A431 DD 21 00 10 0281*  	ld ix,4096
       00          
04A436 CD 59 C0 04 0282*  	call vdu_load_img
04A43A 3E 2E       0283*  	LD A, '.'
04A43C 5B D7       0284*  	RST.LIL 10h
04A43E             0285*  
04A43E C9          0286*  	ret
04A43F             0287*  
04A43F 75 69 2F 62 0288*  F_UI_bj_gatling_00: db "ui/bj/bj_gatling_00.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04A459 75 69 2F 62 0289*  F_UI_bj_gatling_01: db "ui/bj/bj_gatling_01.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04A473 75 69 2F 62 0290*  F_UI_bj_gatling_02: db "ui/bj/bj_gatling_02.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04A48D 75 69 2F 62 0291*  F_UI_bj_gatling_03: db "ui/bj/bj_gatling_03.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04A4A7 75 69 2F 62 0292*  F_UI_bj_gatling_04: db "ui/bj/bj_gatling_04.rgba2",0
       6A 2F 62 6A 
       5F 67 61 74 
       6C 69 6E 67 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04A4C1 75 69 2F 62 0293*  F_UI_bj_knife_00: db "ui/bj/bj_knife_00.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       30 2E 72 67 
       62 61 32 00 
04A4D9 75 69 2F 62 0294*  F_UI_bj_knife_01: db "ui/bj/bj_knife_01.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       31 2E 72 67 
       62 61 32 00 
04A4F1 75 69 2F 62 0295*  F_UI_bj_knife_02: db "ui/bj/bj_knife_02.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       32 2E 72 67 
       62 61 32 00 
04A509 75 69 2F 62 0296*  F_UI_bj_knife_03: db "ui/bj/bj_knife_03.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       33 2E 72 67 
       62 61 32 00 
04A521 75 69 2F 62 0297*  F_UI_bj_knife_04: db "ui/bj/bj_knife_04.rgba2",0
       6A 2F 62 6A 
       5F 6B 6E 69 
       66 65 5F 30 
       34 2E 72 67 
       62 61 32 00 
04A539 75 69 2F 62 0298*  F_UI_bj_machine_gun_00: db "ui/bj/bj_machine_gun_00.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 30 2E 
       72 67 62 61 
       32 00       
04A557 75 69 2F 62 0299*  F_UI_bj_machine_gun_01: db "ui/bj/bj_machine_gun_01.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 31 2E 
       72 67 62 61 
       32 00       
04A575 75 69 2F 62 0300*  F_UI_bj_machine_gun_02: db "ui/bj/bj_machine_gun_02.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 32 2E 
       72 67 62 61 
       32 00       
04A593 75 69 2F 62 0301*  F_UI_bj_machine_gun_03: db "ui/bj/bj_machine_gun_03.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 33 2E 
       72 67 62 61 
       32 00       
04A5B1 75 69 2F 62 0302*  F_UI_bj_machine_gun_04: db "ui/bj/bj_machine_gun_04.rgba2",0
       6A 2F 62 6A 
       5F 6D 61 63 
       68 69 6E 65 
       5F 67 75 6E 
       5F 30 34 2E 
       72 67 62 61 
       32 00       
04A5CF 75 69 2F 62 0303*  F_UI_bj_pistol_00: db "ui/bj/bj_pistol_00.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 30 2E 72 
       67 62 61 32 
       00          
04A5E8 75 69 2F 62 0304*  F_UI_bj_pistol_01: db "ui/bj/bj_pistol_01.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 31 2E 72 
       67 62 61 32 
       00          
04A601 75 69 2F 62 0305*  F_UI_bj_pistol_02: db "ui/bj/bj_pistol_02.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 32 2E 72 
       67 62 61 32 
       00          
04A61A 75 69 2F 62 0306*  F_UI_bj_pistol_03: db "ui/bj/bj_pistol_03.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 33 2E 72 
       67 62 61 32 
       00          
04A633 75 69 2F 62 0307*  F_UI_bj_pistol_04: db "ui/bj/bj_pistol_04.rgba2",0
       6A 2F 62 6A 
       5F 70 69 73 
       74 6F 6C 5F 
       30 34 2E 72 
       67 62 61 32 
       00          
04A64C             0023   	include "src/asm/sprites.asm"
04A64C             0001*  ; ###### SPRITE TABLE FIELD INDICES ######
04A64C             0002*  sprite_id:              equ 00 ; 1 byte  - unique spriteId, zero-based
04A64C             0003*  sprite_obj:             equ 01 ; 1 byte  - type of sprite as defined in polys.asm, 255 is dead
04A64C             0004*  sprite_health:          equ 02 ; 1 byte  - health points, signed binary, zero or negative is dead
04A64C             0005*  sprite_triggers_mask:   equ 03 ; 1 byte  - bitmask for tracking which sprite behaviors have been triggered
04A64C             0006*  sprite_x:               equ 04 ; 1 byte  - map x position
04A64C             0007*  sprite_y:               equ 05 ; 1 byte  - map y position
04A64C             0008*  sprite_orientation:     equ 06 ; 1 byte  - orientation
04A64C             0009*  sprite_animation:       equ 07 ; 1 byte  - current animation index, zero-based
04A64C             0010*  sprite_anim_timer:      equ 08 ; 1 byte  - when hits zero, draw next animation frame
04A64C             0011*  sprite_move_timer:      equ 09 ; 1 byte  - when zero, go to next move program, or step
04A64C             0012*  sprite_move_step:       equ 10 ; 1 byte  - stage in a move program sequence, varies
04A64C             0013*  sprite_points:          equ 11 ; 1 byte  - points awarded for killing this sprite type, binary
04A64C             0014*  sprite_health_modifier: equ 12 ; 1 byte  - health points deducted per successful attack on player, signed binary (positive gains health)
04A64C             0015*  sprite_unassigned:      equ 13 ; 3 bytes - unassigned can be used for custom properties
04A64C             0016*  sprite_record_size:     equ 16 ; 16 bytes per sprite record
04A64C             0017*  
04A64C             0018*  ; sprite_triggers_mask defs
04A64C             0019*  sprite_trigger_see:     equ %00000001 ; player has been seen
04A64C             0020*  sprite_trigger_use:     equ %00000010 ; player has used the sprite
04A64C             0021*  sprite_trigger_hurt:    equ %00000100 ; player has hurt the sprite
04A64C             0022*  sprite_trigger_kill:    equ %00001000 ; player has killed the sprite
04A64C             0023*  sprite_trigger_move:    equ %00010000 ; sprite has moved
04A64C             0024*  sprite_trigger_shoot:   equ %00100000 ; sprite has shot
04A64C             0025*  
04A64C             0026*  ; obj_ids for selected sprites
04A64C             0027*  ; these are the sprite_obj values for the selected sprites
04A64C             0028*  OBJ_ID_DEAD_GUARD:      equ 56
04A64C             0029*  OBJ_ID_EXPLOSION:       equ 60
04A64C             0030*  
04A64C             0031*  ; ###### SPRITE TABLE VARIABLES ######
04A64C             0032*  ; maximum number of sprites
04A64C             0033*  table_max_records:      equ 64 ; at 16 bytes per record = 1024 bytes + 7 KiB for the map is an even 8 KiB
04A64C             0034*  table_total_bytes:      equ table_max_records*sprite_record_size
04A64C             0035*  
04A64C             0036*  ; #### THIS DEFINES THE SPACE ALLOCATED TO THE SPRITE TABLE IN EACH MAP FILE ####
04A64C             0037*  sprite_table_base:       equ 0xB7FC00
04A64C             0038*  sprite_table_limit:      equ sprite_table_base + table_total_bytes + 1 ; in case we ever need to know where it ends
04A64C             0039*  
04A64C             0040*  ; pointer to top address of current record, initialized to sprite_table_base
04A64C 00 FC B7    0041*  sprite_table_pointer: dl sprite_table_base
04A64F             0042*  ; how many active sprites
04A64F 00          0043*  table_active_sprites: db 0x00
04A650             0044*  ; flag indicating collision with screen edge
04A650             0045*  ; uses orientation codes to specify which edge(s)
04A650 00          0046*  sprite_screen_edge: db #00
04A651             0047*  ; next sprite id to use
04A651 00          0048*  sprite_next_id: db 0
04A652             0049*  
04A652             0050*  ; ######### COLLISION SPRITE PARAMETERS ##########
04A652             0051*  ; integer coordinates are all that are needed for collision calculations
04A652 00          0052*  collision_x: db 0x00
04A653 00          0053*  collision_y: db 0x00
04A654 00          0054*  collision_dim_x: db 0x00
04A655 00          0055*  collision_dim_y: db 0x00
04A656             0056*  
04A656             0057*  ; scratch variables
04A656 00          0058*  x: db 0x00 ; 8-bit signed integer
04A657 00          0059*  y: db 0x00 ; 8-bit signed integer
04A658 00 00 00    0060*  x0: dl 0x000000 ; 16.8 signed fixed place
04A65B 00 00 00    0061*  y0: dl 0x000000 ; 16.8 signed fixed place
04A65E 00 00 00    0062*  incx1: dl 0x000000 ; 16.8 signed fixed place
04A661 00 00 00    0063*  incy1: dl 0x000000 ; 16.8 signed fixed place
04A664 00 00 00    0064*  incx2: dl 0x000000 ; 16.8 signed fixed place
04A667 00 00 00    0065*  incy2: dl 0x000000 ; 16.8 signed fixed place
04A66A             0066*  
04A66A             0067*  ; sprite_heading: dl 0x000000 ; signed fixed 16.8
04A66A 00 00 00    0068*  radius: dl 0x000000 ; signed fixed 16.8 (but should always be positive)
04A66D 00 00 00    0069*  sin_sprite_heading: dl 0x000000 ; signed fixed 16.8
04A670 00 00 00    0070*  cos_sprite_heading: dl 0x000000 ; signed fixed 16.8
04A673             0071*  
04A673             0072*  ; gets the next available sprite id
04A673             0073*  ; inputs; none
04A673             0074*  ; returns: if new sprite available, a = sprite id,
04A673             0075*  ;      ix pointing to new sprite vars, carry set
04A673             0076*  ;      otherwise, a = 0, carry flag reset, ix pointing to highest sprite vars
04A673             0077*  ; destroys: a,b,hl,ix
04A673             0078*  ; affects: bumps table_active_sprites by one
04A673             0079*  table_get_next_id:
04A673 DD 21 00 FC 0080*      ld ix,sprite_table_base
       B7          
04A678 11 10 00 00 0081*      ld de,sprite_record_size
04A67C 06 40       0082*      ld b,table_max_records
04A67E             0083*  @loop:
04A67E DD 7E 01    0084*      ld a,(ix+sprite_obj)
04A681 A7          0085*      and a
04A682 28 06       0086*      jr z,@found
04A684 DD 19       0087*      add ix,de
04A686 10 F6       0088*      djnz @loop
04A688             0089*  @notfound:
04A688 AF          0090*      xor a ; a = 0 and reset carry flag indicating that we didn't find a free sprite
04A689 C9          0091*      ret
04A68A             0092*  @found:
04A68A             0093*  ; bump number of active sprites
04A68A 21 4F A6 04 0094*      ld hl,table_active_sprites
04A68E 34          0095*      inc (hl)
04A68F             0096*  ; return sprite id
04A68F 3E 40       0097*      ld a,table_max_records
04A691 90          0098*      sub b
04A692 32 51 A6 04 0099*      ld (sprite_next_id),a
04A696 37          0100*      scf ; sets carry flag indicating we found a free sprite
04A697 C9          0101*      ret ; done
04A698             0102*  
04A698             0103*  ; deactivate the sprite with the given id
04A698             0104*  ; inputs: a = sprite id
04A698             0105*  ; outputs: nothing
04A698             0106*  ; destroys: a,ix,de
04A698             0107*  ; affects: decrements table_active_sprites by one
04A698             0108*  table_deactivate_sprite:
04A698 F5          0109*      push af ; save sprite id bc we need it later
04A699 CD 1F B3 04 0110*      call vdu_sprite_select
04A69D CD A3 B3 04 0111*      call vdu_sprite_hide
04A6A1 F1          0112*      pop af ; restore sprite id
04A6A2 11 00 00 00 0113*      ld de,0 ; clear deu
04A6A6 57          0114*      ld d,a
04A6A7 1E 10       0115*      ld e,sprite_record_size
04A6A9 ED 5C       0116*      mlt de
04A6AB DD 21 00 FC 0117*      ld ix,sprite_table_base
       B7          
04A6B0 DD 19       0118*      add ix,de
04A6B2 AF          0119*      xor a
04A6B3 DD 77 01    0120*      ld (ix+sprite_obj),a
04A6B6 DD 21 4F A6 0121*      ld ix,table_active_sprites
       04          
04A6BB DD 35 00    0122*      dec (ix)
04A6BE C9          0123*      ret
04A6BF             0124*  
04A6BF             0125*  ; sets iy and sprite_table_pointer to the sprite record with the given id
04A6BF             0126*  ; inputs: a = sprite id
04A6BF             0127*  ; outputs: iy = sprite_table_pointer to the sprite record with the given id
04A6BF             0128*  ; destroys: bc
04A6BF             0129*  sprite_set_pointer:
04A6BF 47          0130*      ld b,a
04A6C0 0E 10       0131*      ld c,sprite_record_size
04A6C2 ED 4C       0132*      mlt bc
04A6C4 FD 21 00 FC 0133*      ld iy,sprite_table_base
       B7          
04A6C9 FD 09       0134*      add iy,bc
04A6CB FD 22 4C A6 0135*      ld (sprite_table_pointer),iy
       04          
04A6D0 C9          0136*      ret
04A6D1             0137*  
04A6D1             0138*  ; points ix at the map address of the sprite's current location
04A6D1             0139*  ; inputs: iy pointed at sprite record
04A6D1             0140*  ; outputs: ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A6D1             0141*  ; destroys: af,de,hl
04A6D1             0142*  sprite_get_cell:
04A6D1             0143*  ; point ix at sprite's current map location
04A6D1 11 00 00 00 0144*      ld de,0 ; make sure deu is zero
04A6D5 FD 5E 04    0145*      ld e,(iy+sprite_x)
04A6D8 FD 56 05    0146*      ld d,(iy+sprite_y)
04A6DB CD 4A 68 04 0147*      call get_cell_from_coords
04A6DF C9          0148*      ret
04A6E0             0149*  
04A6E0             0150*  ; set the active sprite record to no sprite and remove it from the map cell it was in
04A6E0             0151*  ; inputs: iy pointed at sprite record to clear
04A6E0             0152*  sprite_kill:
04A6E0             0153*  ; point ix at sprite's current map location
04A6E0 CD D1 A6 04 0154*      call sprite_get_cell
04A6E4             0155*  ; set sprite table record to no sprite
04A6E4 21 FF FF FF 0156*      ld hl,0xFFFFFF ; a string of -1s
04A6E8 FD 2F 00    0157*      ld (iy),hl ; populates sprite_id, sprite_obj and sprite_heatlth with -1, all indicating that it is quite dead
04A6EB             0158*  
04A6EB             0159*  ; set map cell to no sprite and normal floor
04A6EB 21 01 FF 1D 0160*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dyanmically based on the defs in tiles.txt at some point
04A6EF DD 2F 00    0161*      ld (ix),hl
04A6F2 3E FF       0162*      ld a,0xFF ; no sprite
04A6F4 DD 77 03    0163*      ld (ix+map_sprite_id),a ; now sprite is truly dead
04A6F7 C9          0164*      ret
04A6F8             0165*  
04A6F8 00          0166*  sprite_new_x: db 0x00
04A6F9 00          0167*  sprite_new_y: db 0x00
04A6FA 00          0168*                db 0x00 ; padding
04A6FB             0169*  
04A6FB             0170*  ; checks if the sprite can move to the new position
04A6FB             0171*  ; inputs: iy pointed at sprite record, d,e = new y,x position
04A6FB             0172*  ; returns: a = 1 if move legal, 0 if not
04A6FB             0173*  ; modifies: sprite_new_x,y populated by de with new y,x position irrespecitve of legality
04A6FB             0174*  sprite_check_move:
04A6FB ED 53 F8 A6 0175*      ld (sprite_new_x),de ; save new y,x position
       04          
04A700             0176*  ; check whether target cell is occupied by player
04A700 2A 52 B9 04 0177*      ld hl,(cur_x) ; h,l = player y,x position
04A704 AF          0178*      xor a ; clear carry
04A705 ED 52       0179*      sbc hl,de ; zero if player is at target cell
04A707 C2 14 A7 04 0180*      jp nz,@not_player
04A70B 3E 01       0181*      ld a,sp_use ; TODO: add melee attack behavior to sprite routines
04A70D CD FC A7 04 0182*      call do_sprite_behavior
04A711 3E 01       0183*      ld a,1 ; signals caller that move was legal
04A713 C9          0184*      ret
04A714             0185*  @not_player:
04A714 CD 4A 68 04 0186*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A718             0187*  ; check whether target cell contains a sprite
04A718 DD 7E 03    0188*      ld a,(ix+map_sprite_id)
04A71B FE FF       0189*      cp 255 ; value if not sprite
04A71D CA 23 A7 04 0190*      jp z,@not_sprite
04A721 AF          0191*      xor a ; signals caller that move was illegal
04A722 C9          0192*      ret
04A723             0193*  @not_sprite:
04A723             0194*  ; read map type/status mask from target cell
04A723 DD 7E 00    0195*      ld a,(ix+map_type_status)
04A726 E6 01       0196*      and render_type_floor
04A728 C8          0197*      ret z ; target cell is not a floor so we can't move there
04A729             0198*  ; we are cleared for movement
04A729 CD 53 A7 04 0199*      call sprite_move
04A72D 3E 01       0200*      ld a,1 ; signals caller that move was legal
04A72F C9          0201*      ret
04A730             0202*  
04A730             0203*  ; creates a new sprite at the given map position
04A730             0204*  ; inputs: a = obj_id, ix pointing at map address, iy pointing at sprite address
04A730             0205*  sprite_spawn:
04A730             0206*  ; copy obj_id to map_obj_id
04A730 DD 77 02    0207*      ld (ix+map_obj_id),a
04A733             0208*  ; lookup map_type_status and sprite_obj from obj_id
04A733 D6 0A       0209*      sub 10 ; first record in list is 10
04A735 21 16 82 04 0210*      ld hl,map_type_status_lut
04A739 47          0211*      ld b,a
04A73A 0E 02       0212*      ld c,2 ; two bytes per record
04A73C ED 4C       0213*      mlt bc
04A73E 09          0214*      add hl,bc ; hl points to lookup record
04A73F ED 27       0215*      ld hl,(hl) ; l = map_type_status, h = sprite_obj
04A741             0216*  ; copy sprite_obj to sprite record
04A741 FD 74 01    0217*      ld (iy+sprite_obj),h
04A744             0218*  ; copy map_type_status to map cell
04A744 DD 75 00    0219*      ld (ix+map_type_status),l
04A747             0220*  ; write sprite_id to map cell
04A747 FD 7E 00    0221*      ld a,(iy+sprite_id)
04A74A DD 77 03    0222*      ld (ix+map_sprite_id),a
04A74D             0223*  ; write 255 to map_img_idx to indicate type sprite
04A74D 3E FF       0224*      ld a,255
04A74F DD 77 01    0225*      ld (ix+map_img_idx),a
04A752             0226*  ; ; TODO: this will be clunky to do until the sprite table layout is adjusted to better separate definitional from state data
04A752             0227*  ; ; initialize sprite data
04A752             0228*  ;     ld a,sp_init
04A752             0229*  ;     call sprite_init_data
04A752 C9          0230*      ret
04A753             0231*  
04A753             0232*  ; moves the sprite to the given map position
04A753             0233*  ; inputs: iy pointed at sprite record, sprite_new_x/y populated
04A753             0234*  sprite_move:
04A753             0235*  ; point ix to old map cell
04A753 FD 17 04    0236*      ld de,(iy+sprite_x) ; d,e = sprite old y,x position
04A756 CD 4A 68 04 0237*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04A75A             0238*  ; update sprite record with new position
04A75A ED 5B F8 A6 0239*      ld de,(sprite_new_x) ; d,e = sprite new y,x position
       04          
04A75F FD 1F 04    0240*      ld (iy+sprite_x),de
04A762             0241*  ; point iy to old map cell, ix to new map cell
04A762 DD E5       0242*      push ix ; old map cell
04A764 FD E1       0243*      pop iy ; new map cell
04A766 CD 4A 68 04 0244*      call get_cell_from_coords ; d,e already had new y,x
04A76A             0245*  ; copy old cell status to new
04A76A FD 27 00    0246*      ld hl,(iy+map_type_status)
04A76D DD 2F 00    0247*      ld (ix+map_type_status),hl
04A770 FD 7E 03    0248*      ld a,(iy+map_sprite_id)
04A773 DD 77 03    0249*      ld (ix+map_sprite_id),a
04A776             0250*  ; set old map cell to no sprite and normal floor
04A776 21 01 FF 1D 0251*      ld hl,0x1DFF01 ; normal floor TODO: we should set these values dynanmically based on the defs in tiles.txt at some point
04A77A FD 2F 00    0252*      ld (iy+map_type_status),hl
04A77D 3E FF       0253*      ld a,0xFF ; no sprite
04A77F FD 77 03    0254*      ld (iy+map_sprite_id),a
04A782 C9          0255*      ret
04A783             0256*  
04A783             0257*  ; move a sprite in a random direction
04A783             0258*  ; inputs: iy pointed at sprite record
04A783             0259*  ; destroys: potentially everything
04A783             0260*  sprite_move_random:
04A783             0261*  ; point iy at sprite record
04A783 FD 2A 4C A6 0262*      ld iy,(sprite_table_pointer)
       04          
04A788             0263*  ; set number of times to try a random direction before giving up
04A788 06 08       0264*      ld b,8
04A78A             0265*  @loop:
04A78A C5          0266*      push bc ; save loop counter
04A78B             0267*  ; pick a random direction
04A78B CD C6 BE 04 0268*      call rand_8
04A78F E6 03       0269*      and 3 ; direction between 0 and 3
04A791             0270*  ; get dy,dx for moving once cell in the chosen direction
04A791 5F          0271*      ld e,a
04A792 16 01       0272*      ld d,1 ; distance
04A794 CD 6F 68 04 0273*      call get_dx_dy ; d,e = dy,dx
04A798             0274*  ; calculate new position
04A798 FD 7E 04    0275*      ld a,(iy+sprite_x)
04A79B 83          0276*      add a,e
04A79C E6 0F       0277*      and 15 ; modulo 16
04A79E 5F          0278*      ld e,a
04A79F FD 7E 05    0279*      ld a,(iy+sprite_y)
04A7A2 82          0280*      add a,d
04A7A3 E6 0F       0281*      and 15 ; modulo 16
04A7A5 57          0282*      ld d,a
04A7A6 CD FB A6 04 0283*      call sprite_check_move
04A7AA C1          0284*      pop bc ; get back loop counter
04A7AB A7          0285*      and a
04A7AC C0          0286*      ret nz ; move was legal so we're done
04A7AD 10 DB       0287*      djnz @loop ; try again
04A7AF C9          0288*      ret ; no move found in 8 tries, so we're done
04A7B0             0289*  
04A7B0             0290*  ; #### SPRITE BEHAVIOR SUBROUTINES ####
04A7B0             0291*  sprite_behavior_lookup:
04A7B0 19 A8 04    0292*      dl LAMP
04A7B3 49 A8 04    0293*      dl BARREL
04A7B6 95 A8 04    0294*      dl TABLE
04A7B9 C5 A8 04    0295*      dl OVERHEAD_LIGHT
04A7BC F5 A8 04    0296*      dl RADIOACTIVE_BARREL
04A7BF 3F A9 04    0297*      dl HEALTH_PACK
04A7C2 79 A9 04    0298*      dl GOLD_CHALISE
04A7C5 BB A9 04    0299*      dl GOLD_CROSS
04A7C8 FD A9 04    0300*      dl PLATE_OF_FOOD
04A7CB 37 AA 04    0301*      dl KEYCARD
04A7CE 74 AA 04    0302*      dl GOLD_CHEST
04A7D1 B6 AA 04    0303*      dl MACHINE_GUN
04A7D4 05 AB 04    0304*      dl GATLING_GUN
04A7D7 54 AB 04    0305*      dl DOG_FOOD
04A7DA 8E AB 04    0306*      dl GOLD_KEY
04A7DD BE AB 04    0307*      dl DOG
04A7E0 48 AC 04    0308*      dl GERMAN_TROOPER
04A7E3 E9 AC 04    0309*      dl SS_GUARD
04A7E6 8A AD 04    0310*      dl DEAD_GUARD
04A7E9 CB AD 04    0311*      dl EXPLOSION
04A7EC             0312*  
04A7EC             0313*  ; initializes sprite data for a particular sprite type and id
04A7EC             0314*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A7EC             0315*  sprite_init_data:
04A7EC 3E 00       0316*      ld a,sp_init ; index for sprite init routine
04A7EE CD FC A7 04 0317*      call do_sprite_behavior ; hl points at address to copy from
04A7F2 ED 13 02    0318*      lea de,iy+sprite_health ; de points at the address for LDIR to copy to
04A7F5 01 0E 00 00 0319*      ld bc,sprite_record_size-2 ; copy all but the first two bytes
04A7F9 ED B0       0320*      ldir ; hl came back with the copy from address, so we're ready to copy the data
04A7FB C9          0321*      ret ; done
04A7FC             0322*  
04A7FC             0323*  ; #### SPRITE BEHAVIOR ROUTINES ####
04A7FC             0324*  ; sprite behavior indices
04A7FC             0325*  sp_init:   equ 0
04A7FC             0326*  sp_use:    equ 1
04A7FC             0327*  sp_hurt:  equ 2
04A7FC             0328*  sp_kill:   equ 3
04A7FC             0329*  sp_see:    equ 4
04A7FC             0330*  sp_move:  equ 5
04A7FC             0331*  sp_shoot:  equ 6
04A7FC             0332*  
04A7FC             0333*  ; calls the sprite behavior routine for the sprite pointed to by iy
04A7FC             0334*  ; inputs: iy pointed at sprite record, sprite_obj set for same
04A7FC             0335*  ;         a = type index of routine to call
04A7FC             0336*  do_sprite_behavior:
04A7FC FD 22 4C A6 0337*      ld (sprite_table_pointer),iy ; save pointer to sprite record
       04          
04A801 FD 46 01    0338*      ld b,(iy+sprite_obj)
04A804 0E 03       0339*      ld c,3 ; three bytes per lookup record
04A806 ED 4C       0340*      mlt bc ; bc is offset from the base of the lookup table
04A808 21 B0 A7 04 0341*      ld hl,sprite_behavior_lookup
04A80C 09          0342*      add hl,bc
04A80D ED 27       0343*      ld hl,(hl) ; hl points to the base address of the sprite behavior routines
04A80F 47          0344*      ld b,a ; b holds the routine index
04A810 0E 03       0345*      ld c,3 ; three bytes per lookup record
04A812 ED 4C       0346*      mlt bc ; bc is offset from the base of the lookup table
04A814 09          0347*      add hl,bc ; hl points to the label of the routine to call
04A815 ED 27       0348*      ld hl,(hl) ; hl points to the routine to call
04A817 E9          0349*      jp (hl) ; call the behavior routine
04A818 C9          0350*      ret
04A819             0351*  
04A819             0352*  LAMP:
04A819             0353*  ; behavior routine address lookup
04A819 2E A8 04    0354*      dl @init
04A81C 41 A8 04    0355*      dl @use
04A81F 42 A8 04    0356*      dl @hurt
04A822 44 A8 04    0357*      dl @kill
04A825 45 A8 04    0358*      dl @see
04A828 47 A8 04    0359*      dl @move
04A82B 48 A8 04    0360*      dl @shoot
04A82E             0361*  @init:
04A82E 21 33 A8 04 0362*      ld hl,@data ; address for LDIR to copy from
04A832 C9          0363*      ret
04A833             0364*  @data:
04A833 64          0365*      db 100 ; sprite_health
04A834 00          0366*      db 000 ; sprite_triggers_mask
04A835 00          0367*      db 000 ; sprite_x
04A836 00          0368*      db 000 ; sprite_y
04A837 00          0369*      db 000 ; sprite_orientation
04A838 00          0370*      db 000 ; sprite_animation
04A839 00          0371*      db 000 ; sprite_anim_timer
04A83A 01          0372*      db 001 ; sprite_move_timer
04A83B 00          0373*      db 000 ; sprite_move_step
04A83C 00          0374*      db 000 ; sprite_points
04A83D 00          0375*      db 000 ; sprite_health_modifier
04A83E 00          0376*      db 000 ; sprite_unassigned_0
04A83F 00          0377*      db 000 ; sprite_unassigned_1
04A840 00          0378*      db 000 ; sprite_unassigned_2
04A841             0379*  @use:
04A841 C9          0380*      ret
04A842             0381*  @hurt:
04A842 AF          0382*      xor a
04A843 C9          0383*      ret
04A844             0384*  @kill:
04A844 C9          0385*      ret
04A845             0386*  @see:
04A845 AF          0387*      xor a
04A846 C9          0388*      ret
04A847             0389*  @move:
04A847 C9          0390*      ret
04A848             0391*  @shoot:
04A848 C9          0392*      ret
04A849             0393*  
04A849             0394*  BARREL:
04A849             0395*  ; behavior routine address lookup
04A849 5E A8 04    0396*      dl @init
04A84C 71 A8 04    0397*      dl @use
04A84F 72 A8 04    0398*      dl @hurt
04A852 83 A8 04    0399*      dl @kill
04A855 91 A8 04    0400*      dl @see
04A858 93 A8 04    0401*      dl @move
04A85B 94 A8 04    0402*      dl @shoot
04A85E             0403*  @init:
04A85E 21 63 A8 04 0404*      ld hl,@data ; address for LDIR to copy from
04A862 C9          0405*      ret
04A863             0406*  @data:
04A863 12          0407*      db 018 ; sprite_health
04A864 00          0408*      db 000 ; sprite_triggers_mask
04A865 00          0409*      db 000 ; sprite_x
04A866 00          0410*      db 000 ; sprite_y
04A867 00          0411*      db 000 ; sprite_orientation
04A868 00          0412*      db 000 ; sprite_animation
04A869 00          0413*      db 000 ; sprite_anim_timer
04A86A 01          0414*      db 001 ; sprite_move_timer
04A86B 00          0415*      db 000 ; sprite_move_step
04A86C 00          0416*      db 000 ; sprite_points
04A86D CE          0417*      db -50 ; sprite_health_modifier
04A86E 00          0418*      db 000 ; sprite_unassigned_0
04A86F 00          0419*      db 000 ; sprite_unassigned_1
04A870 00          0420*      db 000 ; sprite_unassigned_2
04A871             0421*  @use:
04A871 C9          0422*      ret
04A872             0423*  @hurt:
04A872 3E FF       0424*      ld a,255 ; kill player's shot
04A874 32 62 B9 04 0425*      ld (plyr_shot_status),a
04A878 3A 66 B9 04 0426*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A87C FD 86 02    0427*      add a,(iy+sprite_health)
04A87F FD 77 02    0428*      ld (iy+sprite_health),a
04A882 F0          0429*      ret p ; if health is positive, return
04A883             0430*      ; otherwise fall through to kill sprite
04A883             0431*  @kill:
04A883 FD E5       0432*      push iy
04A885 CD 05 C6 04 0433*      call sfx_play_explode
04A889 FD E1       0434*      pop iy
04A88B 3E 3C       0435*      ld a,OBJ_ID_EXPLOSION
04A88D CD 30 A7 04 0436*      call sprite_spawn
04A891             0437*  @see:
04A891 AF          0438*      xor a
04A892 C9          0439*      ret
04A893             0440*  @move:
04A893 C9          0441*      ret
04A894             0442*  @shoot:
04A894 C9          0443*      ret
04A895             0444*  
04A895             0445*  TABLE:
04A895             0446*  ; behavior routine address lookup
04A895 AA A8 04    0447*      dl @init
04A898 BD A8 04    0448*      dl @use
04A89B BE A8 04    0449*      dl @hurt
04A89E C0 A8 04    0450*      dl @kill
04A8A1 C1 A8 04    0451*      dl @see
04A8A4 C3 A8 04    0452*      dl @move
04A8A7 C4 A8 04    0453*      dl @shoot
04A8AA             0454*  @init:
04A8AA 21 AF A8 04 0455*      ld hl,@data ; address for LDIR to copy from
04A8AE C9          0456*      ret
04A8AF             0457*  @data:
04A8AF 64          0458*      db 100 ; sprite_health
04A8B0 00          0459*      db 000 ; sprite_triggers_mask
04A8B1 00          0460*      db 000 ; sprite_x
04A8B2 00          0461*      db 000 ; sprite_y
04A8B3 00          0462*      db 000 ; sprite_orientation
04A8B4 00          0463*      db 000 ; sprite_animation
04A8B5 00          0464*      db 000 ; sprite_anim_timer
04A8B6 01          0465*      db 001 ; sprite_move_timer
04A8B7 00          0466*      db 000 ; sprite_move_step
04A8B8 00          0467*      db 000 ; sprite_points
04A8B9 00          0468*      db 000 ; sprite_health_modifier
04A8BA 00          0469*      db 000 ; sprite_unassigned_0
04A8BB 00          0470*      db 000 ; sprite_unassigned_1
04A8BC 00          0471*      db 000 ; sprite_unassigned_2
04A8BD             0472*  @use:
04A8BD C9          0473*      ret
04A8BE             0474*  @hurt:
04A8BE AF          0475*      xor a
04A8BF C9          0476*      ret
04A8C0             0477*  @kill:
04A8C0 C9          0478*      ret
04A8C1             0479*  @see:
04A8C1 AF          0480*      xor a
04A8C2 C9          0481*      ret
04A8C3             0482*  @move:
04A8C3 C9          0483*      ret
04A8C4             0484*  @shoot:
04A8C4 C9          0485*      ret
04A8C5             0486*  
04A8C5             0487*  OVERHEAD_LIGHT:
04A8C5             0488*  ; behavior routine address lookup
04A8C5 DA A8 04    0489*      dl @init
04A8C8 ED A8 04    0490*      dl @use
04A8CB EE A8 04    0491*      dl @hurt
04A8CE F0 A8 04    0492*      dl @kill
04A8D1 F1 A8 04    0493*      dl @see
04A8D4 F3 A8 04    0494*      dl @move
04A8D7 F4 A8 04    0495*      dl @shoot
04A8DA             0496*  @init:
04A8DA 21 DF A8 04 0497*      ld hl,@data ; address for LDIR to copy from
04A8DE C9          0498*      ret
04A8DF             0499*  @data:
04A8DF 64          0500*      db 100 ; sprite_health
04A8E0 00          0501*      db 000 ; sprite_triggers_mask
04A8E1 00          0502*      db 000 ; sprite_x
04A8E2 00          0503*      db 000 ; sprite_y
04A8E3 00          0504*      db 000 ; sprite_orientation
04A8E4 00          0505*      db 000 ; sprite_animation
04A8E5 00          0506*      db 000 ; sprite_anim_timer
04A8E6 01          0507*      db 001 ; sprite_move_timer
04A8E7 00          0508*      db 000 ; sprite_move_step
04A8E8 00          0509*      db 000 ; sprite_points
04A8E9 00          0510*      db 000 ; sprite_health_modifier
04A8EA 00          0511*      db 000 ; sprite_unassigned_0
04A8EB 00          0512*      db 000 ; sprite_unassigned_1
04A8EC 00          0513*      db 000 ; sprite_unassigned_2
04A8ED             0514*  @use:
04A8ED C9          0515*      ret
04A8EE             0516*  @hurt:
04A8EE AF          0517*      xor a
04A8EF C9          0518*      ret
04A8F0             0519*  @kill:
04A8F0 C9          0520*      ret
04A8F1             0521*  @see:
04A8F1 AF          0522*      xor a
04A8F2 C9          0523*      ret
04A8F3             0524*  @move:
04A8F3 C9          0525*      ret
04A8F4             0526*  @shoot:
04A8F4 C9          0527*      ret
04A8F5             0528*  
04A8F5             0529*  RADIOACTIVE_BARREL:
04A8F5             0530*  ; behavior routine address lookup
04A8F5 0A A9 04    0531*      dl @init
04A8F8 1D A9 04    0532*      dl @use
04A8FB 1E A9 04    0533*      dl @hurt
04A8FE 2F A9 04    0534*      dl @kill
04A901 3B A9 04    0535*      dl @see
04A904 3D A9 04    0536*      dl @move
04A907 3E A9 04    0537*      dl @shoot
04A90A             0538*  @init:
04A90A 21 0F A9 04 0539*      ld hl,@data ; address for LDIR to copy from
04A90E C9          0540*      ret
04A90F             0541*  @data:
04A90F 18          0542*      db 024 ; sprite_health
04A910 00          0543*      db 000 ; sprite_triggers_mask
04A911 00          0544*      db 000 ; sprite_x
04A912 00          0545*      db 000 ; sprite_y
04A913 00          0546*      db 000 ; sprite_orientation
04A914 00          0547*      db 000 ; sprite_animation
04A915 00          0548*      db 000 ; sprite_anim_timer
04A916 01          0549*      db 001 ; sprite_move_timer
04A917 00          0550*      db 000 ; sprite_move_step
04A918 00          0551*      db 000 ; sprite_points
04A919 B5          0552*      db -75 ; sprite_health_modifier
04A91A 00          0553*      db 000 ; sprite_unassigned_0
04A91B 00          0554*      db 000 ; sprite_unassigned_1
04A91C 00          0555*      db 000 ; sprite_unassigned_2
04A91D             0556*  @use:
04A91D C9          0557*      ret
04A91E             0558*  @hurt:
04A91E 3E FF       0559*      ld a,255 ; kill player's shot
04A920 32 62 B9 04 0560*      ld (plyr_shot_status),a
04A924 3A 66 B9 04 0561*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04A928 FD 86 02    0562*      add a,(iy+sprite_health)
04A92B FD 77 02    0563*      ld (iy+sprite_health),a
04A92E F0          0564*      ret p ; if health is positive, return
04A92F             0565*      ; otherwise fall through to kill sprite
04A92F             0566*  @kill:
04A92F FD E5       0567*      push iy
04A931 CD 05 C6 04 0568*      call sfx_play_explode
04A935 FD E1       0569*      pop iy
04A937 C3 E0 A6 04 0570*      jp sprite_kill
04A93B             0571*  @see:
04A93B AF          0572*      xor a
04A93C C9          0573*      ret
04A93D             0574*  @move:
04A93D C9          0575*      ret
04A93E             0576*  @shoot:
04A93E C9          0577*      ret
04A93F             0578*  
04A93F             0579*  HEALTH_PACK:
04A93F             0580*  ; behavior routine address lookup
04A93F 54 A9 04    0581*      dl @init
04A942 67 A9 04    0582*      dl @use
04A945 72 A9 04    0583*      dl @hurt
04A948 74 A9 04    0584*      dl @kill
04A94B 75 A9 04    0585*      dl @see
04A94E 77 A9 04    0586*      dl @move
04A951 78 A9 04    0587*      dl @shoot
04A954             0588*  @init:
04A954 21 59 A9 04 0589*      ld hl,@data ; address for LDIR to copy from
04A958 C9          0590*      ret
04A959             0591*  @data:
04A959 64          0592*      db 100 ; sprite_health
04A95A 00          0593*      db 000 ; sprite_triggers_mask
04A95B 00          0594*      db 000 ; sprite_x
04A95C 00          0595*      db 000 ; sprite_y
04A95D 00          0596*      db 000 ; sprite_orientation
04A95E 00          0597*      db 000 ; sprite_animation
04A95F 00          0598*      db 000 ; sprite_anim_timer
04A960 01          0599*      db 001 ; sprite_move_timer
04A961 00          0600*      db 000 ; sprite_move_step
04A962 00          0601*      db 000 ; sprite_points
04A963 14          0602*      db 020 ; sprite_health_modifier
04A964 00          0603*      db 000 ; sprite_unassigned_0
04A965 00          0604*      db 000 ; sprite_unassigned_1
04A966 00          0605*      db 000 ; sprite_unassigned_2
04A967             0606*  @use:
04A967 FD 7E 0C    0607*      ld a,(iy+sprite_health_modifier)
04A96A CD 85 BB 04 0608*      call plyr_add_health
04A96E C3 E0 A6 04 0609*      jp sprite_kill
04A972             0610*  @hurt:
04A972 AF          0611*      xor a
04A973 C9          0612*      ret
04A974             0613*  @kill:
04A974 C9          0614*      ret
04A975             0615*  @see:
04A975 AF          0616*      xor a
04A976 C9          0617*      ret
04A977             0618*  @move:
04A977 C9          0619*      ret
04A978             0620*  @shoot:
04A978 C9          0621*      ret
04A979             0622*  
04A979             0623*  GOLD_CHALISE:
04A979             0624*  ; behavior routine address lookup
04A979 8E A9 04    0625*      dl @init
04A97C A1 A9 04    0626*      dl @use
04A97F B4 A9 04    0627*      dl @hurt
04A982 B6 A9 04    0628*      dl @kill
04A985 B7 A9 04    0629*      dl @see
04A988 B9 A9 04    0630*      dl @move
04A98B BA A9 04    0631*      dl @shoot
04A98E             0632*  @init:
04A98E 21 93 A9 04 0633*      ld hl,@data ; address for LDIR to copy from
04A992 C9          0634*      ret
04A993             0635*  @data:
04A993 64          0636*      db 100 ; sprite_health
04A994 00          0637*      db 000 ; sprite_triggers_mask
04A995 00          0638*      db 000 ; sprite_x
04A996 00          0639*      db 000 ; sprite_y
04A997 00          0640*      db 000 ; sprite_orientation
04A998 00          0641*      db 000 ; sprite_animation
04A999 00          0642*      db 000 ; sprite_anim_timer
04A99A 01          0643*      db 001 ; sprite_move_timer
04A99B 00          0644*      db 000 ; sprite_move_step
04A99C 64          0645*      db 100 ; sprite_points
04A99D 00          0646*      db 000 ; sprite_health_modifier
04A99E 00          0647*      db 000 ; sprite_unassigned_0
04A99F 00          0648*      db 000 ; sprite_unassigned_1
04A9A0 00          0649*      db 000 ; sprite_unassigned_2
04A9A1             0650*  @use:
04A9A1 FD E5       0651*      push iy
04A9A3 CD 11 C6 04 0652*      call sfx_play_got_treasure
04A9A7 FD E1       0653*      pop iy
04A9A9 FD 7E 0B    0654*      ld a,(iy+sprite_points)
04A9AC CD E3 BB 04 0655*      call plyr_mod_score
04A9B0 C3 E0 A6 04 0656*      jp sprite_kill
04A9B4             0657*  @hurt:
04A9B4 AF          0658*      xor a
04A9B5 C9          0659*      ret
04A9B6             0660*  @kill:
04A9B6 C9          0661*      ret
04A9B7             0662*  @see:
04A9B7 AF          0663*      xor a
04A9B8 C9          0664*      ret
04A9B9             0665*  @move:
04A9B9 C9          0666*      ret
04A9BA             0667*  @shoot:
04A9BA C9          0668*      ret
04A9BB             0669*  
04A9BB             0670*  GOLD_CROSS:
04A9BB             0671*  ; behavior routine address lookup
04A9BB D0 A9 04    0672*      dl @init
04A9BE E3 A9 04    0673*      dl @use
04A9C1 F6 A9 04    0674*      dl @hurt
04A9C4 F8 A9 04    0675*      dl @kill
04A9C7 F9 A9 04    0676*      dl @see
04A9CA FB A9 04    0677*      dl @move
04A9CD FC A9 04    0678*      dl @shoot
04A9D0             0679*  @init:
04A9D0 21 D5 A9 04 0680*      ld hl,@data ; address for LDIR to copy from
04A9D4 C9          0681*      ret
04A9D5             0682*  @data:
04A9D5 64          0683*      db 100 ; sprite_health
04A9D6 00          0684*      db 000 ; sprite_triggers_mask
04A9D7 00          0685*      db 000 ; sprite_x
04A9D8 00          0686*      db 000 ; sprite_y
04A9D9 00          0687*      db 000 ; sprite_orientation
04A9DA 00          0688*      db 000 ; sprite_animation
04A9DB 00          0689*      db 000 ; sprite_anim_timer
04A9DC 01          0690*      db 001 ; sprite_move_timer
04A9DD 00          0691*      db 000 ; sprite_move_step
04A9DE 32          0692*      db 050 ; sprite_points
04A9DF 00          0693*      db 000 ; sprite_health_modifier
04A9E0 00          0694*      db 000 ; sprite_unassigned_0
04A9E1 00          0695*      db 000 ; sprite_unassigned_1
04A9E2 00          0696*      db 000 ; sprite_unassigned_2
04A9E3             0697*  @use:
04A9E3 FD E5       0698*      push iy
04A9E5 CD 11 C6 04 0699*      call sfx_play_got_treasure
04A9E9 FD E1       0700*      pop iy
04A9EB FD 7E 0B    0701*      ld a,(iy+sprite_points)
04A9EE CD E3 BB 04 0702*      call plyr_mod_score
04A9F2 C3 E0 A6 04 0703*      jp sprite_kill
04A9F6             0704*  @hurt:
04A9F6 AF          0705*      xor a
04A9F7 C9          0706*      ret
04A9F8             0707*  @kill:
04A9F8 C9          0708*      ret
04A9F9             0709*  @see:
04A9F9 AF          0710*      xor a
04A9FA C9          0711*      ret
04A9FB             0712*  @move:
04A9FB C9          0713*      ret
04A9FC             0714*  @shoot:
04A9FC C9          0715*      ret
04A9FD             0716*  
04A9FD             0717*  PLATE_OF_FOOD:
04A9FD             0718*  ; behavior routine address lookup
04A9FD 12 AA 04    0719*      dl @init
04AA00 25 AA 04    0720*      dl @use
04AA03 30 AA 04    0721*      dl @hurt
04AA06 32 AA 04    0722*      dl @kill
04AA09 33 AA 04    0723*      dl @see
04AA0C 35 AA 04    0724*      dl @move
04AA0F 36 AA 04    0725*      dl @shoot
04AA12             0726*  @init:
04AA12 21 17 AA 04 0727*      ld hl,@data ; address for LDIR to copy from
04AA16 C9          0728*      ret
04AA17             0729*  @data:
04AA17 64          0730*      db 100 ; sprite_health
04AA18 00          0731*      db 000 ; sprite_triggers_mask
04AA19 00          0732*      db 000 ; sprite_x
04AA1A 00          0733*      db 000 ; sprite_y
04AA1B 00          0734*      db 000 ; sprite_orientation
04AA1C 00          0735*      db 000 ; sprite_animation
04AA1D 00          0736*      db 000 ; sprite_anim_timer
04AA1E 01          0737*      db 001 ; sprite_move_timer
04AA1F 00          0738*      db 000 ; sprite_move_step
04AA20 00          0739*      db 000 ; sprite_points
04AA21 0A          0740*      db 010 ; sprite_health_modifier
04AA22 00          0741*      db 000 ; sprite_unassigned_0
04AA23 00          0742*      db 000 ; sprite_unassigned_1
04AA24 00          0743*      db 000 ; sprite_unassigned_2
04AA25             0744*  @use:
04AA25 FD 7E 0C    0745*      ld a,(iy+sprite_health_modifier)
04AA28 CD 85 BB 04 0746*      call plyr_add_health
04AA2C C3 E0 A6 04 0747*      jp sprite_kill
04AA30             0748*  @hurt:
04AA30 AF          0749*      xor a
04AA31 C9          0750*      ret
04AA32             0751*  @kill:
04AA32 C9          0752*      ret
04AA33             0753*  @see:
04AA33 AF          0754*      xor a
04AA34 C9          0755*      ret
04AA35             0756*  @move:
04AA35 C9          0757*      ret
04AA36             0758*  @shoot:
04AA36 C9          0759*      ret
04AA37             0760*  
04AA37             0761*  KEYCARD:
04AA37             0762*  ; behavior routine address lookup
04AA37 4C AA 04    0763*      dl @init
04AA3A 5F AA 04    0764*      dl @use
04AA3D 6D AA 04    0765*      dl @hurt
04AA40 6F AA 04    0766*      dl @kill
04AA43 70 AA 04    0767*      dl @see
04AA46 72 AA 04    0768*      dl @move
04AA49 73 AA 04    0769*      dl @shoot
04AA4C             0770*  @init:
04AA4C 21 51 AA 04 0771*      ld hl,@data ; address for LDIR to copy from
04AA50 C9          0772*      ret
04AA51             0773*  @data:
04AA51 64          0774*      db 100 ; sprite_health
04AA52 00          0775*      db 000 ; sprite_triggers_mask
04AA53 00          0776*      db 000 ; sprite_x
04AA54 00          0777*      db 000 ; sprite_y
04AA55 00          0778*      db 000 ; sprite_orientation
04AA56 00          0779*      db 000 ; sprite_animation
04AA57 00          0780*      db 000 ; sprite_anim_timer
04AA58 01          0781*      db 001 ; sprite_move_timer
04AA59 00          0782*      db 000 ; sprite_move_step
04AA5A 00          0783*      db 000 ; sprite_points
04AA5B 00          0784*      db 000 ; sprite_health_modifier
04AA5C 00          0785*      db 000 ; sprite_unassigned_0
04AA5D 00          0786*      db 000 ; sprite_unassigned_1
04AA5E 00          0787*      db 000 ; sprite_unassigned_2
04AA5F             0788*  @use:
04AA5F 3E 08       0789*      ld a,8
04AA61 CD F2 BB 04 0790*      call plyr_add_ammo
04AA65 CD 29 C6 04 0791*      call sfx_play_gun_reload
04AA69 C3 E0 A6 04 0792*      jp sprite_kill
04AA6D             0793*  @hurt:
04AA6D AF          0794*      xor a
04AA6E C9          0795*      ret
04AA6F             0796*  @kill:
04AA6F C9          0797*      ret
04AA70             0798*  @see:
04AA70 AF          0799*      xor a
04AA71 C9          0800*      ret
04AA72             0801*  @move:
04AA72 C9          0802*      ret
04AA73             0803*  @shoot:
04AA73 C9          0804*      ret
04AA74             0805*  
04AA74             0806*  GOLD_CHEST:
04AA74             0807*  ; behavior routine address lookup
04AA74 89 AA 04    0808*      dl @init
04AA77 9C AA 04    0809*      dl @use
04AA7A AF AA 04    0810*      dl @hurt
04AA7D B1 AA 04    0811*      dl @kill
04AA80 B2 AA 04    0812*      dl @see
04AA83 B4 AA 04    0813*      dl @move
04AA86 B5 AA 04    0814*      dl @shoot
04AA89             0815*  @init:
04AA89 21 8E AA 04 0816*      ld hl,@data ; address for LDIR to copy from
04AA8D C9          0817*      ret
04AA8E             0818*  @data:
04AA8E 64          0819*      db 100 ; sprite_health
04AA8F 00          0820*      db 000 ; sprite_triggers_mask
04AA90 00          0821*      db 000 ; sprite_x
04AA91 00          0822*      db 000 ; sprite_y
04AA92 00          0823*      db 000 ; sprite_orientation
04AA93 00          0824*      db 000 ; sprite_animation
04AA94 00          0825*      db 000 ; sprite_anim_timer
04AA95 01          0826*      db 001 ; sprite_move_timer
04AA96 00          0827*      db 000 ; sprite_move_step
04AA97 FA          0828*      db 250 ; sprite_points
04AA98 00          0829*      db 000 ; sprite_health_modifier
04AA99 00          0830*      db 000 ; sprite_unassigned_0
04AA9A 00          0831*      db 000 ; sprite_unassigned_1
04AA9B 00          0832*      db 000 ; sprite_unassigned_2
04AA9C             0833*  @use:
04AA9C FD E5       0834*      push iy
04AA9E CD 11 C6 04 0835*      call sfx_play_got_treasure
04AAA2 FD E1       0836*      pop iy
04AAA4 FD 7E 0B    0837*      ld a,(iy+sprite_points)
04AAA7 CD E3 BB 04 0838*      call plyr_mod_score
04AAAB C3 E0 A6 04 0839*      jp sprite_kill
04AAAF             0840*  @hurt:
04AAAF AF          0841*      xor a
04AAB0 C9          0842*      ret
04AAB1             0843*  @kill:
04AAB1 C9          0844*      ret
04AAB2             0845*  @see:
04AAB2 AF          0846*      xor a
04AAB3 C9          0847*      ret
04AAB4             0848*  @move:
04AAB4 C9          0849*      ret
04AAB5             0850*  @shoot:
04AAB5 C9          0851*      ret
04AAB6             0852*  
04AAB6             0853*  MACHINE_GUN:
04AAB6             0854*  ; behavior routine address lookup
04AAB6 CB AA 04    0855*      dl @init
04AAB9 DE AA 04    0856*      dl @use
04AABC FE AA 04    0857*      dl @hurt
04AABF 00 AB 04    0858*      dl @kill
04AAC2 01 AB 04    0859*      dl @see
04AAC5 03 AB 04    0860*      dl @move
04AAC8 04 AB 04    0861*      dl @shoot
04AACB             0862*  @init:
04AACB 21 D0 AA 04 0863*      ld hl,@data ; address for LDIR to copy from
04AACF C9          0864*      ret
04AAD0             0865*  @data:
04AAD0 64          0866*      db 100 ; sprite_health
04AAD1 00          0867*      db 000 ; sprite_triggers_mask
04AAD2 00          0868*      db 000 ; sprite_x
04AAD3 00          0869*      db 000 ; sprite_y
04AAD4 00          0870*      db 000 ; sprite_orientation
04AAD5 00          0871*      db 000 ; sprite_animation
04AAD6 00          0872*      db 000 ; sprite_anim_timer
04AAD7 01          0873*      db 001 ; sprite_move_timer
04AAD8 00          0874*      db 000 ; sprite_move_step
04AAD9 00          0875*      db 000 ; sprite_points
04AADA 00          0876*      db 000 ; sprite_health_modifier
04AADB 00          0877*      db 000 ; sprite_unassigned_0
04AADC 00          0878*      db 000 ; sprite_unassigned_1
04AADD 00          0879*      db 000 ; sprite_unassigned_2
04AADE             0880*  @use:
04AADE CD E0 A6 04 0881*      call sprite_kill
04AAE2 3E 10       0882*      ld a,16
04AAE4 CD F2 BB 04 0883*      call plyr_add_ammo
04AAE8 CD 29 C6 04 0884*      call sfx_play_gun_reload
04AAEC 3E 04       0885*      ld a,plyr_wpn_mg
04AAEE 21 67 B9 04 0886*      ld hl,plyr_wpns
04AAF2 B6          0887*      or (hl)
04AAF3 77          0888*      ld (hl),a
04AAF4 3E 04       0889*      ld a,plyr_wpn_mg
04AAF6 32 68 B9 04 0890*      ld (plyr_wpn_active),a
04AAFA CD CC BA 04 0891*      call plyr_set_weapon_parameters
04AAFE             0892*  @hurt:
04AAFE AF          0893*      xor a
04AAFF C9          0894*      ret
04AB00             0895*  @kill:
04AB00 C9          0896*      ret
04AB01             0897*  @see:
04AB01 AF          0898*      xor a
04AB02 C9          0899*      ret
04AB03             0900*  @move:
04AB03 C9          0901*      ret
04AB04             0902*  @shoot:
04AB04 C9          0903*      ret
04AB05             0904*  
04AB05             0905*  GATLING_GUN:
04AB05             0906*  ; behavior routine address lookup
04AB05 1A AB 04    0907*      dl @init
04AB08 2D AB 04    0908*      dl @use
04AB0B 4D AB 04    0909*      dl @hurt
04AB0E 4F AB 04    0910*      dl @kill
04AB11 50 AB 04    0911*      dl @see
04AB14 52 AB 04    0912*      dl @move
04AB17 53 AB 04    0913*      dl @shoot
04AB1A             0914*  @init:
04AB1A 21 1F AB 04 0915*      ld hl,@data ; address for LDIR to copy from
04AB1E C9          0916*      ret
04AB1F             0917*  @data:
04AB1F 64          0918*      db 100 ; sprite_health
04AB20 00          0919*      db 000 ; sprite_triggers_mask
04AB21 00          0920*      db 000 ; sprite_x
04AB22 00          0921*      db 000 ; sprite_y
04AB23 00          0922*      db 000 ; sprite_orientation
04AB24 00          0923*      db 000 ; sprite_animation
04AB25 00          0924*      db 000 ; sprite_anim_timer
04AB26 01          0925*      db 001 ; sprite_move_timer
04AB27 00          0926*      db 000 ; sprite_move_step
04AB28 00          0927*      db 000 ; sprite_points
04AB29 00          0928*      db 000 ; sprite_health_modifier
04AB2A 00          0929*      db 000 ; sprite_unassigned_0
04AB2B 00          0930*      db 000 ; sprite_unassigned_1
04AB2C 00          0931*      db 000 ; sprite_unassigned_2
04AB2D             0932*  @use:
04AB2D CD E0 A6 04 0933*      call sprite_kill
04AB31 3E 20       0934*      ld a,32
04AB33 CD F2 BB 04 0935*      call plyr_add_ammo
04AB37 CD 29 C6 04 0936*      call sfx_play_gun_reload
04AB3B 3E 08       0937*      ld a,plyr_wpn_gg
04AB3D 21 67 B9 04 0938*      ld hl,plyr_wpns
04AB41 B6          0939*      or (hl)
04AB42 77          0940*      ld (hl),a
04AB43 3E 08       0941*      ld a,plyr_wpn_gg
04AB45 32 68 B9 04 0942*      ld (plyr_wpn_active),a
04AB49 CD CC BA 04 0943*      call plyr_set_weapon_parameters
04AB4D             0944*  @hurt:
04AB4D AF          0945*      xor a
04AB4E C9          0946*      ret
04AB4F             0947*  @kill:
04AB4F C9          0948*      ret
04AB50             0949*  @see:
04AB50 AF          0950*      xor a
04AB51 C9          0951*      ret
04AB52             0952*  @move:
04AB52 C9          0953*      ret
04AB53             0954*  @shoot:
04AB53 C9          0955*      ret
04AB54             0956*  
04AB54             0957*  DOG_FOOD:
04AB54             0958*  ; behavior routine address lookup
04AB54 69 AB 04    0959*      dl @init
04AB57 7C AB 04    0960*      dl @use
04AB5A 87 AB 04    0961*      dl @hurt
04AB5D 89 AB 04    0962*      dl @kill
04AB60 8A AB 04    0963*      dl @see
04AB63 8C AB 04    0964*      dl @move
04AB66 8D AB 04    0965*      dl @shoot
04AB69             0966*  @init:
04AB69 21 6E AB 04 0967*      ld hl,@data ; address for LDIR to copy from
04AB6D C9          0968*      ret
04AB6E             0969*  @data:
04AB6E 64          0970*      db 100 ; sprite_health
04AB6F 00          0971*      db 000 ; sprite_triggers_mask
04AB70 00          0972*      db 000 ; sprite_x
04AB71 00          0973*      db 000 ; sprite_y
04AB72 00          0974*      db 000 ; sprite_orientation
04AB73 00          0975*      db 000 ; sprite_animation
04AB74 00          0976*      db 000 ; sprite_anim_timer
04AB75 01          0977*      db 001 ; sprite_move_timer
04AB76 00          0978*      db 000 ; sprite_move_step
04AB77 00          0979*      db 000 ; sprite_points
04AB78 05          0980*      db 005 ; sprite_health_modifier
04AB79 00          0981*      db 000 ; sprite_unassigned_0
04AB7A 00          0982*      db 000 ; sprite_unassigned_1
04AB7B 00          0983*      db 000 ; sprite_unassigned_2
04AB7C             0984*  @use:
04AB7C FD 7E 0C    0985*      ld a,(iy+sprite_health_modifier)
04AB7F CD 85 BB 04 0986*      call plyr_add_health
04AB83 C3 E0 A6 04 0987*      jp sprite_kill
04AB87             0988*  @hurt:
04AB87 AF          0989*      xor a
04AB88 C9          0990*      ret
04AB89             0991*  @kill:
04AB89 C9          0992*      ret
04AB8A             0993*  @see:
04AB8A AF          0994*      xor a
04AB8B C9          0995*      ret
04AB8C             0996*  @move:
04AB8C C9          0997*      ret
04AB8D             0998*  @shoot:
04AB8D C9          0999*      ret
04AB8E             1000*  
04AB8E             1001*  GOLD_KEY:
04AB8E             1002*  ; behavior routine address lookup
04AB8E A3 AB 04    1003*      dl @init
04AB91 B6 AB 04    1004*      dl @use
04AB94 B7 AB 04    1005*      dl @hurt
04AB97 B9 AB 04    1006*      dl @kill
04AB9A BA AB 04    1007*      dl @see
04AB9D BC AB 04    1008*      dl @move
04ABA0 BD AB 04    1009*      dl @shoot
04ABA3             1010*  @init:
04ABA3 21 A8 AB 04 1011*      ld hl,@data ; address for LDIR to copy from
04ABA7 C9          1012*      ret
04ABA8             1013*  @data:
04ABA8 64          1014*      db 100 ; sprite_health
04ABA9 00          1015*      db 000 ; sprite_triggers_mask
04ABAA 00          1016*      db 000 ; sprite_x
04ABAB 00          1017*      db 000 ; sprite_y
04ABAC 00          1018*      db 000 ; sprite_orientation
04ABAD 00          1019*      db 000 ; sprite_animation
04ABAE 00          1020*      db 000 ; sprite_anim_timer
04ABAF 01          1021*      db 001 ; sprite_move_timer
04ABB0 00          1022*      db 000 ; sprite_move_step
04ABB1 00          1023*      db 000 ; sprite_points
04ABB2 00          1024*      db 000 ; sprite_health_modifier
04ABB3 00          1025*      db 000 ; sprite_unassigned_0
04ABB4 00          1026*      db 000 ; sprite_unassigned_1
04ABB5 00          1027*      db 000 ; sprite_unassigned_2
04ABB6             1028*  @use:
04ABB6 C9          1029*      ret
04ABB7             1030*  @hurt:
04ABB7 AF          1031*      xor a
04ABB8 C9          1032*      ret
04ABB9             1033*  @kill:
04ABB9 C9          1034*      ret
04ABBA             1035*  @see:
04ABBA AF          1036*      xor a
04ABBB C9          1037*      ret
04ABBC             1038*  @move:
04ABBC C9          1039*      ret
04ABBD             1040*  @shoot:
04ABBD C9          1041*      ret
04ABBE             1042*  
04ABBE             1043*  DOG:
04ABBE             1044*  ; behavior routine address lookup
04ABBE D3 AB 04    1045*      dl @init
04ABC1 E6 AB 04    1046*      dl @use
04ABC4 F6 AB 04    1047*      dl @hurt
04ABC7 12 AC 04    1048*      dl @kill
04ABCA 26 AC 04    1049*      dl @see
04ABCD 2B AC 04    1050*      dl @move
04ABD0 47 AC 04    1051*      dl @shoot
04ABD3             1052*  @init:
04ABD3 21 D8 AB 04 1053*      ld hl,@data ; address for LDIR to copy from
04ABD7 C9          1054*      ret
04ABD8             1055*  @data:
04ABD8 32          1056*      db 050 ; sprite_health
04ABD9 00          1057*      db 000 ; sprite_triggers_mask
04ABDA 00          1058*      db 000 ; sprite_x
04ABDB 00          1059*      db 000 ; sprite_y
04ABDC 00          1060*      db 000 ; sprite_orientation
04ABDD 00          1061*      db 000 ; sprite_animation
04ABDE 00          1062*      db 000 ; sprite_anim_timer
04ABDF 01          1063*      db 001 ; sprite_move_timer
04ABE0 00          1064*      db 000 ; sprite_move_step
04ABE1 0A          1065*      db 010 ; sprite_points
04ABE2 F6          1066*      db -10 ; sprite_health_modifier
04ABE3 00          1067*      db 000 ; sprite_unassigned_0
04ABE4 00          1068*      db 000 ; sprite_unassigned_1
04ABE5 00          1069*      db 000 ; sprite_unassigned_2
04ABE6             1070*  @use:
04ABE6 FD E5       1071*      push iy
04ABE8 CD ED C5 04 1072*      call sfx_play_dog_woof_single
04ABEC FD E1       1073*      pop iy
04ABEE FD 7E 0C    1074*      ld a,(iy+sprite_health_modifier)
04ABF1 CD 95 BB 04 1075*      call plyr_sub_health
04ABF5 C9          1076*      ret
04ABF6             1077*  @hurt:
04ABF6 FD E5       1078*      push iy
04ABF8 CD F9 C5 04 1079*      call sfx_play_dog_yelp
04ABFC FD E1       1080*      pop iy
04ABFE             1081*  @nosound:
04ABFE 3E FF       1082*      ld a,255 ; kill player's shot
04AC00 32 62 B9 04 1083*      ld (plyr_shot_status),a
04AC04 3A 66 B9 04 1084*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04AC08 FD 86 02    1085*      add a,(iy+sprite_health)
04AC0B FD 77 02    1086*      ld (iy+sprite_health),a
04AC0E             1087*      ; ret p ; if health is positive, return
04AC0E F2 32 AC 04 1088*      jp p,@do_move
04AC12             1089*      ; otherwise fall through to kill sprite
04AC12             1090*  @kill:
04AC12 FD E5       1091*      push iy
04AC14 CD F9 C5 04 1092*      call sfx_play_dog_yelp
04AC18 FD E1       1093*      pop iy
04AC1A FD 7E 0B    1094*      ld a,(iy+sprite_points)
04AC1D CD E3 BB 04 1095*      call plyr_mod_score
04AC21 C3 E0 A6 04 1096*      jp sprite_kill
04AC25 C9          1097*      ret
04AC26             1098*  @see:
04AC26 18 03       1099*      jr @move
04AC28             1100*  @seen:
04AC28 AF          1101*      xor a
04AC29 3C          1102*      inc a
04AC2A C9          1103*      ret
04AC2B             1104*  @move:
04AC2B FD 35 09    1105*      dec (iy+sprite_move_timer)
04AC2E 28 02       1106*      jr z,@do_move
04AC30 18 F6       1107*      jr @seen
04AC32             1108*  @do_move:
04AC32 CD C6 BE 04 1109*      call rand_8
04AC36 E6 3F       1110*      and %00111111 ; between 0 and 63
04AC38             1111*      ; or %00100000  ; at least 32
04AC38 F6 10       1112*      or %00010000  ; at least 16
04AC3A FD 77 09    1113*      ld (iy+sprite_move_timer),a
04AC3D CD 83 A7 04 1114*      call sprite_move_random
04AC41 CD E1 C5 04 1115*      call sfx_play_dog_woof_double
04AC45 18 E1       1116*      jr @seen
04AC47             1117*  @shoot:
04AC47 C9          1118*      ret
04AC48             1119*  
04AC48             1120*  GERMAN_TROOPER:
04AC48             1121*  ; behavior routine address lookup
04AC48 5D AC 04    1122*      dl @init
04AC4B 70 AC 04    1123*      dl @use
04AC4E 7F AC 04    1124*      dl @hurt
04AC51 9B AC 04    1125*      dl @kill
04AC54 B1 AC 04    1126*      dl @see
04AC57 CD AC 04    1127*      dl @move
04AC5A E0 AC 04    1128*      dl @shoot
04AC5D             1129*  @init:
04AC5D 21 62 AC 04 1130*      ld hl,@data ; address for LDIR to copy from
04AC61 C9          1131*      ret
04AC62             1132*  @data:
04AC62 4B          1133*      db 075 ; sprite_health
04AC63 00          1134*      db 000 ; sprite_triggers_mask
04AC64 00          1135*      db 000 ; sprite_x
04AC65 00          1136*      db 000 ; sprite_y
04AC66 00          1137*      db 000 ; sprite_orientation
04AC67 00          1138*      db 000 ; sprite_animation
04AC68 00          1139*      db 000 ; sprite_anim_timer
04AC69 01          1140*      db 001 ; sprite_move_timer
04AC6A 00          1141*      db 000 ; sprite_move_step
04AC6B 14          1142*      db 020 ; sprite_points
04AC6C EC          1143*      db -20 ; sprite_health_modifier
04AC6D 00          1144*      db 000 ; sprite_unassigned_0
04AC6E 00          1145*      db 000 ; sprite_unassigned_1
04AC6F 00          1146*      db 000 ; sprite_unassigned_2
04AC70             1147*  @use:
04AC70 FD E5       1148*      push iy
04AC72 CD A5 C5 04 1149*      call sfx_play_achtung
04AC76 FD E1       1150*      pop iy
04AC78 3E FB       1151*      ld a,-5
04AC7A CD 95 BB 04 1152*      call plyr_sub_health
04AC7E C9          1153*      ret
04AC7F             1154*  @hurt:
04AC7F FD E5       1155*      push iy
04AC81 CD 82 B4 04 1156*      call sfx_play_random_hurt
04AC85 FD E1       1157*      pop iy
04AC87             1158*  @nosound:
04AC87 3E FF       1159*      ld a,255 ; kill player's shot
04AC89 32 62 B9 04 1160*      ld (plyr_shot_status),a
04AC8D 3A 66 B9 04 1161*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04AC91 FD 86 02    1162*      add a,(iy+sprite_health)
04AC94 FD 77 02    1163*      ld (iy+sprite_health),a
04AC97             1164*      ; ret p ; if health is positive, return
04AC97 F2 DA AC 04 1165*      jp p,@do_move
04AC9B             1166*      ; otherwise fall through to kill sprite
04AC9B             1167*  @kill:
04AC9B FD E5       1168*      push iy
04AC9D CD A1 C6 04 1169*      call sfx_play_wilhelm
04ACA1 FD E1       1170*      pop iy
04ACA3 FD 7E 0B    1171*      ld a,(iy+sprite_points)
04ACA6 CD E3 BB 04 1172*      call plyr_mod_score
04ACAA 3E 38       1173*      ld a,OBJ_ID_DEAD_GUARD
04ACAC CD 30 A7 04 1174*      call sprite_spawn
04ACB0 C9          1175*      ret
04ACB1             1176*  @see:
04ACB1 FD 7E 03    1177*      ld a,(iy+sprite_triggers_mask)
04ACB4 E6 01       1178*      and sprite_trigger_see
04ACB6 C2 CD AC 04 1179*      jp nz,@move
04ACBA 3E 01       1180*      ld a,sprite_trigger_see
04ACBC FD B6 03    1181*      or a,(iy+sprite_triggers_mask)
04ACBF FD 77 03    1182*      ld (iy+sprite_triggers_mask),a
04ACC2 FD E5       1183*      push iy
04ACC4 CD A5 C5 04 1184*      call sfx_play_achtung
04ACC8 FD E1       1185*      pop iy
04ACCA             1186*  @seen:
04ACCA AF          1187*      xor a
04ACCB 3C          1188*      inc a
04ACCC C9          1189*      ret
04ACCD             1190*  @move:
04ACCD FD 35 09    1191*      dec (iy+sprite_move_timer)
04ACD0 CC E0 AC 04 1192*      call z,@shoot
04ACD4 CC DA AC 04 1193*      call z,@do_move
04ACD8 18 F0       1194*      jr @seen
04ACDA             1195*  @do_move:
04ACDA CD 83 A7 04 1196*      call sprite_move_random
04ACDE 18 EA       1197*      jr @seen
04ACE0             1198*  @shoot:
04ACE0 CD 09 AE 04 1199*      call sprite_reset_move_timer
04ACE4 CD 15 AE 04 1200*      call sprite_shoot
04ACE8 C9          1201*      ret
04ACE9             1202*  
04ACE9             1203*  SS_GUARD:
04ACE9             1204*  ; behavior routine address lookup
04ACE9 FE AC 04    1205*      dl @init
04ACEC 11 AD 04    1206*      dl @use
04ACEF 20 AD 04    1207*      dl @hurt
04ACF2 3C AD 04    1208*      dl @kill
04ACF5 52 AD 04    1209*      dl @see
04ACF8 6E AD 04    1210*      dl @move
04ACFB 81 AD 04    1211*      dl @shoot
04ACFE             1212*  @init:
04ACFE 21 03 AD 04 1213*      ld hl,@data ; address for LDIR to copy from
04AD02 C9          1214*      ret
04AD03             1215*  @data:
04AD03 64          1216*      db 100 ; sprite_health
04AD04 00          1217*      db 000 ; sprite_triggers_mask
04AD05 00          1218*      db 000 ; sprite_x
04AD06 00          1219*      db 000 ; sprite_y
04AD07 00          1220*      db 000 ; sprite_orientation
04AD08 00          1221*      db 000 ; sprite_animation
04AD09 00          1222*      db 000 ; sprite_anim_timer
04AD0A 01          1223*      db 001 ; sprite_move_timer
04AD0B 00          1224*      db 000 ; sprite_move_step
04AD0C 1E          1225*      db 030 ; sprite_points
04AD0D E2          1226*      db -30 ; sprite_health_modifier
04AD0E 00          1227*      db 000 ; sprite_unassigned_0
04AD0F 00          1228*      db 000 ; sprite_unassigned_1
04AD10 00          1229*      db 000 ; sprite_unassigned_2
04AD11             1230*  @use:
04AD11 FD E5       1231*      push iy
04AD13 CD 59 C6 04 1232*      call sfx_play_schusstaffel
04AD17 FD E1       1233*      pop iy
04AD19 3E F6       1234*      ld a,-10
04AD1B CD 95 BB 04 1235*      call plyr_sub_health
04AD1F C9          1236*      ret
04AD20             1237*  @hurt:
04AD20 FD E5       1238*      push iy
04AD22 CD 82 B4 04 1239*      call sfx_play_random_hurt
04AD26 FD E1       1240*      pop iy
04AD28             1241*  @nosound:
04AD28 3E FF       1242*      ld a,255 ; kill player's shot
04AD2A 32 62 B9 04 1243*      ld (plyr_shot_status),a
04AD2E 3A 66 B9 04 1244*      ld a,(plyr_shot_damage) ; damage done by player's shot set by plyr_shoot
04AD32 FD 86 02    1245*      add a,(iy+sprite_health)
04AD35 FD 77 02    1246*      ld (iy+sprite_health),a
04AD38             1247*      ; ret p ; if health is positive, return
04AD38 F2 7B AD 04 1248*      jp p,@do_move
04AD3C             1249*      ; otherwise fall through to kill sprite
04AD3C             1250*  @kill:
04AD3C FD E5       1251*      push iy
04AD3E CD 41 C6 04 1252*      call sfx_play_mein_leben
04AD42 FD E1       1253*      pop iy
04AD44 FD 7E 0B    1254*      ld a,(iy+sprite_points)
04AD47 CD E3 BB 04 1255*      call plyr_mod_score
04AD4B 3E 38       1256*      ld a,OBJ_ID_DEAD_GUARD
04AD4D CD 30 A7 04 1257*      call sprite_spawn
04AD51 C9          1258*      ret
04AD52             1259*  @see:
04AD52 FD 7E 03    1260*      ld a,(iy+sprite_triggers_mask)
04AD55 E6 01       1261*      and sprite_trigger_see
04AD57 C2 6E AD 04 1262*      jp nz,@move
04AD5B 3E 01       1263*      ld a,sprite_trigger_see
04AD5D FD B6 03    1264*      or a,(iy+sprite_triggers_mask)
04AD60 FD 77 03    1265*      ld (iy+sprite_triggers_mask),a
04AD63 FD E5       1266*      push iy
04AD65 CD 59 C6 04 1267*      call sfx_play_schusstaffel
04AD69 FD E1       1268*      pop iy
04AD6B             1269*  @seen:
04AD6B AF          1270*      xor a
04AD6C 3C          1271*      inc a
04AD6D C9          1272*      ret
04AD6E             1273*  @move:
04AD6E FD 35 09    1274*      dec (iy+sprite_move_timer)
04AD71 CC 81 AD 04 1275*      call z,@shoot
04AD75 CC 7B AD 04 1276*      call z,@do_move
04AD79 18 F0       1277*      jr @seen
04AD7B             1278*  @do_move:
04AD7B CD 83 A7 04 1279*      call sprite_move_random
04AD7F 18 EA       1280*      jr @seen
04AD81             1281*  @shoot:
04AD81 CD 09 AE 04 1282*      call sprite_reset_move_timer
04AD85 CD 15 AE 04 1283*      call sprite_shoot
04AD89 C9          1284*      ret
04AD8A             1285*  
04AD8A             1286*  DEAD_GUARD:
04AD8A             1287*  ; behavior routine address lookup
04AD8A 9F AD 04    1288*      dl @init
04AD8D B2 AD 04    1289*      dl @use
04AD90 C4 AD 04    1290*      dl @hurt
04AD93 C6 AD 04    1291*      dl @kill
04AD96 C7 AD 04    1292*      dl @see
04AD99 C9 AD 04    1293*      dl @move
04AD9C CA AD 04    1294*      dl @shoot
04AD9F             1295*  @init:
04AD9F 21 A4 AD 04 1296*      ld hl,@data ; address for LDIR to copy from
04ADA3 C9          1297*      ret
04ADA4             1298*  @data:
04ADA4 64          1299*      db 100 ; sprite_health
04ADA5 00          1300*      db 000 ; sprite_triggers_mask
04ADA6 00          1301*      db 000 ; sprite_x
04ADA7 00          1302*      db 000 ; sprite_y
04ADA8 00          1303*      db 000 ; sprite_orientation
04ADA9 00          1304*      db 000 ; sprite_animation
04ADAA 00          1305*      db 000 ; sprite_anim_timer
04ADAB 01          1306*      db 001 ; sprite_move_timer
04ADAC 00          1307*      db 000 ; sprite_move_step
04ADAD 00          1308*      db 000 ; sprite_points
04ADAE 00          1309*      db 000 ; sprite_health_modifier
04ADAF 00          1310*      db 000 ; sprite_unassigned_0
04ADB0 00          1311*      db 000 ; sprite_unassigned_1
04ADB1 00          1312*      db 000 ; sprite_unassigned_2
04ADB2             1313*  @use:
04ADB2 CD C6 BE 04 1314*      call rand_8
04ADB6 E6 07       1315*      and %00000111
04ADB8 CD F2 BB 04 1316*      call plyr_add_ammo
04ADBC CD 29 C6 04 1317*      call sfx_play_gun_reload
04ADC0 C3 E0 A6 04 1318*      jp sprite_kill
04ADC4             1319*  @hurt:
04ADC4 AF          1320*      xor a
04ADC5 C9          1321*      ret
04ADC6             1322*  @kill:
04ADC6 C9          1323*      ret
04ADC7             1324*  @see:
04ADC7 AF          1325*      xor a
04ADC8 C9          1326*      ret
04ADC9             1327*  @move:
04ADC9 C9          1328*      ret
04ADCA             1329*  @shoot:
04ADCA C9          1330*      ret
04ADCB             1331*  
04ADCB             1332*  EXPLOSION:
04ADCB             1333*  ; behavior routine address lookup
04ADCB E0 AD 04    1334*      dl @init
04ADCE F3 AD 04    1335*      dl @use
04ADD1 02 AE 04    1336*      dl @hurt
04ADD4 04 AE 04    1337*      dl @kill
04ADD7 05 AE 04    1338*      dl @see
04ADDA 07 AE 04    1339*      dl @move
04ADDD 08 AE 04    1340*      dl @shoot
04ADE0             1341*  @init:
04ADE0 21 E5 AD 04 1342*      ld hl,@data ; address for LDIR to copy from
04ADE4 C9          1343*      ret
04ADE5             1344*  @data:
04ADE5 64          1345*      db 100 ; sprite_health
04ADE6 00          1346*      db 000 ; sprite_triggers_mask
04ADE7 00          1347*      db 000 ; sprite_x
04ADE8 00          1348*      db 000 ; sprite_y
04ADE9 00          1349*      db 000 ; sprite_orientation
04ADEA 00          1350*      db 000 ; sprite_animation
04ADEB 00          1351*      db 000 ; sprite_anim_timer
04ADEC 01          1352*      db 001 ; sprite_move_timer
04ADED 00          1353*      db 000 ; sprite_move_step
04ADEE 00          1354*      db 000 ; sprite_points
04ADEF 9C          1355*      db -100; sprite_health_modifier
04ADF0 00          1356*      db 000 ; sprite_unassigned_0
04ADF1 00          1357*      db 000 ; sprite_unassigned_1
04ADF2 00          1358*      db 000 ; sprite_unassigned_2
04ADF3             1359*  @use:
04ADF3 FD E5       1360*      push iy
04ADF5 CD 05 C6 04 1361*      call sfx_play_explode
04ADF9 FD E1       1362*      pop iy
04ADFB 3E 9C       1363*      ld a,-100
04ADFD CD 95 BB 04 1364*      call plyr_sub_health
04AE01 C9          1365*      ret
04AE02             1366*  @hurt:
04AE02 AF          1367*      xor a
04AE03 C9          1368*      ret
04AE04             1369*  @kill:
04AE04 C9          1370*      ret
04AE05             1371*  @see:
04AE05 AF          1372*      xor a
04AE06 C9          1373*      ret
04AE07             1374*  @move:
04AE07 C9          1375*      ret
04AE08             1376*  @shoot:
04AE08 C9          1377*      ret
04AE09             1378*  
04AE09             1379*  sprite_reset_move_timer:
04AE09 CD C6 BE 04 1380*      call rand_8
04AE0D E6 3F       1381*      and %00111111 ; between 0 and 63
04AE0F F6 10       1382*      or %00010000  ; at least 16
04AE11 FD 77 09    1383*      ld (iy+sprite_move_timer),a
04AE14 C9          1384*      ret
04AE15             1385*  
04AE15             1386*  ; determines whether an enemy sprite can shoot at the player
04AE15             1387*  ; and handles the shooting mechanics if so
04AE15             1388*  ; inputs: iy pointed at sprite record
04AE15             1389*  ; returns: a = 0 if the sprite didn't shoot, 1 if it did
04AE15             1390*  ; destroys: probably everything
04AE15             1391*  sprite_shoot:
04AE15             1392*  ; check whether sprite has the same x or y coordinate as player
04AE15 FD 27 04    1393*      ld hl,(iy+sprite_x) ; h,l = sprite y,x position
04AE18 ED 5B 52 B9 1394*      ld de,(cur_x) ; d,e = player y,x position
       04          
04AE1D 7D          1395*      ld a,l ; compare x
04AE1E BB          1396*      cp e
04AE1F 28 06       1397*      jr z,@shoot
04AE21 7C          1398*      ld a,h ; compare y
04AE22 BA          1399*      cp d
04AE23 28 02       1400*      jr z,@shoot
04AE25 AF          1401*      xor a ; no shot so return zero
04AE26 C9          1402*      ret
04AE27             1403*  @shoot:
04AE27 CD 89 C6 04 1404*      call sfx_play_shot_pistol
04AE2B             1405*  ; generate randomized fractional damage multiplier
04AE2B CD C6 BE 04 1406*      call rand_8 ; a is a random fraction
04AE2F 5F          1407*      ld e,a
04AE30 FD 7E 0C    1408*      ld a,(iy+sprite_health_modifier)
04AE33 ED 44       1409*      neg ; setting up an unsigned mlt
04AE35 57          1410*      ld d,a
04AE36 ED 5C       1411*      mlt de ; d.e is an 8.8 fixed point number
04AE38 7A          1412*      ld a,d ; ... we only want the integer portion
04AE39 ED 44       1413*      neg ; back to signed
04AE3B CD 95 BB 04 1414*      call plyr_sub_health
04AE3F 3E 01       1415*      ld a,1
04AE41 C9          1416*      ret
04AE42             1417*  
04AE42 00          1418*  see_orientation: db 0x00
04AE43             1419*  ; cycle through all cells visible to the player from the current position
04AE43             1420*  ; and all orientations, and trigger the @see behavior for any sprites in those cells
04AE43             1421*  ; inputs: cur_x, cur_y,
04AE43             1422*  ; outputs: player-aware enemies
04AE43             1423*  ; destroys: everything
04AE43             1424*  sprites_see_plyr:
04AE43             1425*  ; ; DEBUG: set up loop timer
04AE43             1426*  ;     call prt_loop_reset
04AE43             1427*  ; ; END DEBUG
04AE43             1428*  ; ; DEBUG: start loop timer
04AE43             1429*  ;     call prt_loop_start
04AE43             1430*  ; ; END DEBUG
04AE43             1431*  
04AE43             1432*  ; intialize orientation
04AE43 AF          1433*      xor a
04AE44 32 42 AE 04 1434*      ld (see_orientation),a
04AE48             1435*  @loop_orientation:
04AE48             1436*  ; get current map position and camera orientation
04AE48 ED 5B 52 B9 1437*      ld de,(cur_x) ; d,e = cur_y,x
       04          
04AE4D             1438*      ; 0-1 prt ticks, 4 loops
04AE4D CD 4A 68 04 1439*      call get_cell_from_coords ; ix=cell_status lut; a=obj_id, bc = cell_id
04AE51             1440*  ; get cell_views address for this cell and orientation
04AE51 3A 42 AE 04 1441*      ld a,(see_orientation)
04AE55 5F          1442*      ld e,a
04AE56 16 06       1443*      ld d,6 ; 6 bytes per orientation
04AE58 ED 5C       1444*      mlt de ; de = orientation offset
04AE5A EB          1445*      ex de,hl ; hl = orientation offset
04AE5B 06 18       1446*      ld b,24 ; 24 bytes per cell in cell_views lut
04AE5D ED 4C       1447*      mlt bc ; bc = offset from base address of cell_views lut
04AE5F 09          1448*      add hl,bc ; hl = total offset from cell_views base address
04AE60 EB          1449*      ex de,hl ; because we can't add iy to hl
04AE61 FD 21 00 E4 1450*      ld iy,cell_views ; base address of cell_views lut
       B7          
04AE66 FD 19       1451*      add iy,de ; iy = cell_views address
04AE68 FD 22 CE 6A 1452*      ld (cur_cell_views),iy
       04          
04AE6D             1453*  ; cycle through the cell views masks and trigger the @see behavior for any sprites in those cells
04AE6D 01 00 46 28 1454*      ld bc,0x284600 ; bcu = jr z,nnn opcode, c = bit operand, b = displacement operand
04AE71 AF          1455*      xor a ; poly_id
04AE72 32 CA 6A 04 1456*      ld (to_poly_id),a
04AE76             1457*  @loop:
04AE76 ED 43 82 AE 1458*      ld (@bit_iy+2),bc
       04          
04AE7B FD 2A CE 6A 1459*      ld iy,(cur_cell_views)
       04          
04AE80             1460*  @bit_iy:
04AE80 FD CB 00 46 1461*      bit 0,(iy+0) ; the bit tested and offset will be self-modified through the loop
04AE84 28 2E       1462*      jr z,@next_poly ; the first byte of this instruction is 0x28, and will be re-written as such each loop
04AE86             1463*  ; get_polys_deltas inputs: a is the orientation, c is the poly_id
04AE86 3A CA 6A 04 1464*      ld a,(to_poly_id)
04AE8A 4F          1465*      ld c,a ; poly_id
04AE8B 3A 42 AE 04 1466*      ld a,(see_orientation)
04AE8F CD 22 6D 04 1467*      call get_polys_deltas ; d,e = y,x deltas
04AE93 3A 52 B9 04 1468*      ld a,(cur_x)
04AE97 83          1469*      add a,e
04AE98 5F          1470*      ld e,a
04AE99 3A 53 B9 04 1471*      ld a,(cur_y)
04AE9D 82          1472*      add a,d
04AE9E 57          1473*      ld d,a
04AE9F CD 4A 68 04 1474*      call get_cell_from_coords
04AEA3 DD 7E 03    1475*      ld a,(ix+map_sprite_id)
04AEA6 FE FF       1476*      cp 0xFF ; no sprite
04AEA8 28 0A       1477*      jr z,@next_poly
04AEAA CD BF A6 04 1478*      call sprite_set_pointer
04AEAE 3E 04       1479*      ld a,sp_see
04AEB0 CD FC A7 04 1480*      call do_sprite_behavior
04AEB4             1481*  @next_poly:
04AEB4 ED 4B 82 AE 1482*      ld bc,(@bit_iy+2)
       04          
04AEB9 3A CA 6A 04 1483*      ld a,(to_poly_id)
04AEBD 3C          1484*      inc a ; a is next poly_id
04AEBE 32 CA 6A 04 1485*      ld (to_poly_id),a
04AEC2 FE 2D       1486*      cp num_polys
04AEC4 28 0F       1487*      jr z,@next_orientation
04AEC6 3E 08       1488*      ld a,8
04AEC8 80          1489*      add a,b
04AEC9 47          1490*      ld b,a ; bit tested codes to 0x46 + b/8
04AECA FE 86       1491*      cp 0x86 ; = 0x7E + 8 where 0x7E is the highest bit possible (7)
04AECC C2 76 AE 04 1492*      jp nz,@loop
04AED0 06 46       1493*      ld b,0x46
04AED2 0C          1494*      inc c ; iy address offset
04AED3 18 A1       1495*      jr @loop
04AED5             1496*  @next_orientation:
04AED5 3A 42 AE 04 1497*      ld a,(see_orientation)
04AED9 3C          1498*      inc a
04AEDA E6 03       1499*      and 3 ; modulo 4
04AEDC 32 42 AE 04 1500*      ld (see_orientation),a
04AEE0 C2 48 AE 04 1501*      jp nz,@loop_orientation
04AEE4             1502*  
04AEE4             1503*  ; full loop 1-2 prt ticks
04AEE4             1504*  ; ; DEBUG: stop loop timer
04AEE4             1505*  ;     call prt_loop_stop
04AEE4             1506*  ; ; END DEBUG
04AEE4 C9          1507*      ret
04AEE5             0024   	include "src/asm/vdu.asm"
04AEE5             0001*  ; The following is a high-level list of the VDU sequences that are supported:
04AEE5             0002*  ; VDU 0: Null (no operation)
04AEE5             0003*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04AEE5             0004*  ; VDU 2: Enable “printer” §§
04AEE5             0005*  ; VDU 3: Disable “printer” §§
04AEE5             0006*  ; VDU 4: Write text at text cursor
04AEE5             0007*  ; VDU 5: Write text at graphics cursor
04AEE5             0008*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04AEE5             0009*  ; VDU 7: Make a short beep (BEL)
04AEE5             0010*  ; VDU 8: Move cursor back one character
04AEE5             0011*  ; VDU 9: Move cursor forward one character
04AEE5             0012*  ; VDU 10: Move cursor down one line
04AEE5             0013*  ; VDU 11: Move cursor up one line
04AEE5             0014*  ; VDU 12: Clear text area (CLS)
04AEE5             0015*  ; VDU 13: Carriage return
04AEE5             0016*  ; VDU 14: Page mode On *
04AEE5             0017*  ; VDU 15: Page mode Off *
04AEE5             0018*  ; VDU 16: Clear graphics area (CLG)
04AEE5             0019*  ; VDU 17, colour: Define text colour (COLOUR)
04AEE5             0020*  ; VDU 18, mode, colour: Define graphics colour (GCOL mode, colour)
04AEE5             0021*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04AEE5             0022*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04AEE5             0023*  ; VDU 21: Disable screen (turns of VDU command processing, except for VDU 1 and VDU 6) §§
04AEE5             0024*  ; VDU 22, n: Select screen mode (MODE n)
04AEE5             0025*  ; VDU 23, n: Re-program display character / System Commands
04AEE5             0026*  ; VDU 24, left; bottom; right; top;: Set graphics viewport **
04AEE5             0027*  ; VDU 25, mode, x; y;: PLOT command
04AEE5             0028*  ; VDU 26: Reset graphics and text viewports **
04AEE5             0029*  ; VDU 27, char: Output character to screen §
04AEE5             0030*  ; VDU 28, left, bottom, right, top: Set text viewport **
04AEE5             0031*  ; VDU 29, x; y;: Set graphics origin
04AEE5             0032*  ; VDU 30: Home cursor
04AEE5             0033*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04AEE5             0034*  ; VDU 127: Backspace
04AEE5             0035*  
04AEE5             0036*  ; VDU 0: Null (no operation)
04AEE5             0037*  ;     On encountering a VDU 0 command, the VDP will do nothing.
04AEE5             0038*  ;     This may be useful for padding out a VDU command sequence,
04AEE5             0039*  ;     or for inserting a placeholder for a command that will be added later.
04AEE5             0040*  ; inputs: none
04AEE5             0041*  ; outputs: an empty byte somewhere in VDU
04AEE5             0042*  ; destroys: a
04AEE5             0043*  vdu_null:
04AEE5 AF          0044*      xor a
04AEE6 5B D7       0045*  	rst.lil $10
04AEE8 C9          0046*  	ret
04AEE9             0047*  
04AEE9             0048*  ; VDU 1: Send next character to “printer” (if “printer” is enabled) §§
04AEE9             0049*  ;     Ensures that the next character received by the VDP is sent through to
04AEE9             0050*  ;     the “printer”, and not to the screen. This is useful for sending control
04AEE9             0051*  ;     codes to the “printer”, or for sending data to the “printer” that is not
04AEE9             0052*  ;     intended to be displayed on the screen. It allows characters that would
04AEE9             0053*  ;     not otherwise normally be sent through to the “printer” to be sent.
04AEE9             0054*  ;     If the “printer” has not been enabled then this command will just discard
04AEE9             0055*  ;     the next byte sent to the VDP.
04AEE9             0056*  ; inputs: a is the ascii code of the character to send
04AEE9             0057*  ; prerequisites: "printer" must first be activated with VDU 2 (see below)
04AEE9             0058*  ; outputs: a character on the serial terminal connected to the USB port
04AEE9             0059*  ;           and the same character on the screen at the current text cursor location
04AEE9             0060*  ; QUESTION: does it also advance the text cursor?
04AEE9             0061*  ; destroys: hl, bc
04AEE9             0062*  vdu_char_to_printer:
04AEE9 32 F9 AE 04 0063*  	ld (@arg),a
04AEED 21 F8 AE 04 0064*  	ld hl,@cmd
04AEF1 01 02 00 00 0065*  	ld bc,@end-@cmd
04AEF5 5B DF       0066*  	rst.lil $18
04AEF7 C9          0067*  	ret
04AEF8 01          0068*  @cmd: db 1
04AEF9 00          0069*  @arg: db 0
04AEFA             0070*  @end:
04AEFA             0071*  
04AEFA             0072*  ; VDU 2: Enable “printer” §§
04AEFA             0073*  ;     Enables the “printer”.
04AEFA             0074*  ;     In the context of the Agon platform, the “printer” is a serial
04AEFA             0075*  ;     terminal that is connected to the VDP’s USB port. Typically
04AEFA             0076*  ;     this port is used for power, but it can also be used to send and
04AEFA             0077*  ;     receive data to and from the VDP.
04AEFA             0078*  ;     When the “printer” is enabled, the VDP will send characters it receives
04AEFA             0079*  ;     to the “printer” as well as to the screen. It will additionally send
04AEFA             0080*  ;     through control codes 8-13. To send other control codes to the “printer”,
04AEFA             0081*  ;     use the VDU 1 command.
04AEFA             0082*  ;     The VDP will not send through other control codes to the printer,
04AEFA             0083*  ;     and will will not send through data it receives as part of other commands.
04AEFA             0084*  vdu_enable_printer:
04AEFA 3E 02       0085*      ld a,2
04AEFC 5B D7       0086*  	rst.lil $10
04AEFE C9          0087*  	ret
04AEFF             0088*  
04AEFF             0089*  ; VDU 3: Disable “printer” §§
04AEFF             0090*  ; inputs: none
04AEFF             0091*  ; outputs: a USB port bereft of communication with the VDP
04AEFF             0092*  ; destroys: a
04AEFF             0093*  vdu_disable_printer:
04AEFF 3E 03       0094*      ld a,3
04AF01 5B D7       0095*  	rst.lil $10
04AF03 C9          0096*  	ret
04AF04             0097*  
04AF04             0098*  ; VDU 4: Write text at text cursor
04AF04             0099*  ;     This causes text to be written at the current text cursor position.
04AF04             0100*  ;     This is the default mode for text display.
04AF04             0101*  ;     Text is written using the current text foreground and background colours.
04AF04             0102*  ; inputs: a is the character to write to the screen
04AF04             0103*  ; prerequisites: the text cursor at the intended position on screen
04AF04             0104*  ; outputs: prints the character and moves text cursor right one position
04AF04             0105*  ; destroys: a, hl, bc
04AF04             0106*  vdu_char_to_text_cursor:
04AF04 32 14 AF 04 0107*  	ld (@arg),a
04AF08 21 13 AF 04 0108*  	ld hl,@cmd
04AF0C 01 02 00 00 0109*  	ld bc,@end-@cmd
04AF10 5B DF       0110*  	rst.lil $18
04AF12 C9          0111*  	ret
04AF13 04          0112*  @cmd: db 4
04AF14 00          0113*  @arg: db 0
04AF15             0114*  @end:
04AF15             0115*  
04AF15             0116*  ; VDU 5: Write text at graphics cursor
04AF15             0117*  ;     This causes text to be written at the current graphics cursor position.
04AF15             0118*  ;     Using this, characters may be positioned at any graphics coordinate within
04AF15             0119*  ;     the graphics viewport. This is useful for positioning text over graphics,
04AF15             0120*  ;     or for positioning text at a specific location on the screen.
04AF15             0121*  ;     Characters are plotted using the current graphics foreground colour,
04AF15             0122*  ;     using the current graphics foreground plotting mode (see VDU 18).
04AF15             0123*  ;     The character background is transparent, and will not overwrite any
04AF15             0124*  ;     graphics that are already present at the character’s location.
04AF15             0125*  ;     The exception to this is VDU 27, the “delete” character, which backspaces
04AF15             0126*  ;     and deletes as per its usual behaviour, but will erase using the current
04AF15             0127*  ;     graphics background colour.
04AF15             0128*  ; inputs: a is the character to write to the screen
04AF15             0129*  ; prerequisites: the graphics cursor at the intended position on screen
04AF15             0130*  ; outputs: see the name of the function
04AF15             0131*  ; destroys: a, hl, bc
04AF15             0132*  vdu_char_to_gfx_cursor:
04AF15 32 25 AF 04 0133*  	ld (@arg),a
04AF19 21 24 AF 04 0134*  	ld hl,@cmd
04AF1D 01 02 00 00 0135*  	ld bc,@end-@cmd
04AF21 5B DF       0136*  	rst.lil $18
04AF23 C9          0137*  	ret
04AF24 05          0138*  @cmd: db 5
04AF25 00          0139*  @arg: db 0
04AF26             0140*  @end:
04AF26             0141*  
04AF26             0142*  ; VDU 6: Enable screen (opposite of VDU 21) §§
04AF26             0143*  ;     This enables the screen, and re-enables VDU command processing,
04AF26             0144*  ;     reversing the effect of VDU 21.
04AF26             0145*  ; inputs: none
04AF26             0146*  ; outputs: a functioning screen and VDU
04AF26             0147*  ; destroys: a
04AF26             0148*  vdu_enable_screen:
04AF26 3E 06       0149*      ld a,6
04AF28 5B D7       0150*  	rst.lil $10
04AF2A C9          0151*  	ret
04AF2B             0152*  
04AF2B             0153*  ; PASSES
04AF2B             0154*  ; VDU 7: Make a short beep (BEL)
04AF2B             0155*  ;     Plays a short beep sound on audio channel 0. If the audio channel
04AF2B             0156*  ;     is already in use, or has been disabled, then this command will have no effect.
04AF2B             0157*  ; inputs: none
04AF2B             0158*  ; outputs: an unpleasant but thankfully short-lived audio tone
04AF2B             0159*  ; destroys: a
04AF2B             0160*  vdu_beep:
04AF2B 3E 07       0161*      ld a,7
04AF2D 5B D7       0162*  	rst.lil $10
04AF2F C9          0163*  	ret
04AF30             0164*  
04AF30             0165*  ; VDU 8: Move cursor back one character
04AF30             0166*  ;     Moves the text cursor one character in the negative “X” direction.
04AF30             0167*  ;     By default, when at the start of a line it will move to the end of
04AF30             0168*  ;     the previous line (as defined by the current text viewport).
04AF30             0169*  ;     If the cursor is also at the top of the screen then the viewport will scroll down.
04AF30             0170*  ;     The cursor remains constrained to the current text viewport.
04AF30             0171*  ;     When in VDU 5 mode and the graphics cursor is active, the viewport will not scroll.
04AF30             0172*  ;     The cursor is just moved left by one character width.
04AF30             0173*  ;     Further behaviour of the cursor can be controlled using the VDU 23,16 command.
04AF30             0174*  ;     It should be noted that as of Console8 VDP 2.5.0, the cursor system does not
04AF30             0175*  ;     support adjusting the direction of the cursor’s X axis, so this command
04AF30             0176*  ;     will move the cursor to the left. This is likely to change in the future.
04AF30             0177*  vdu_cursor_back:
04AF30 3E 08       0178*      ld a,8
04AF32 5B D7       0179*  	rst.lil $10
04AF34 C9          0180*  	ret
04AF35             0181*  
04AF35             0182*  ; VDU 9: Move cursor forward one character
04AF35             0183*  vdu_cursor_forward:
04AF35 3E 09       0184*      ld a,9
04AF37 5B D7       0185*  	rst.lil $10
04AF39 C9          0186*  	ret
04AF3A             0187*  
04AF3A             0188*  ; VDU 10: Move cursor down one line
04AF3A             0189*  vdu_cursor_down:
04AF3A 3E 0A       0190*      ld a,10
04AF3C 5B D7       0191*  	rst.lil $10
04AF3E C9          0192*  	ret
04AF3F             0193*  
04AF3F             0194*  ; VDU 11: Move cursor up one line
04AF3F             0195*  vdu_cursor_up:
04AF3F 3E 0B       0196*      ld a,11
04AF41 5B D7       0197*  	rst.lil $10
04AF43 C9          0198*  	ret
04AF44             0199*  
04AF44             0200*  ; VDU 12: Clear text area (CLS)
04AF44             0201*  vdu_cls:
04AF44 3E 0C       0202*      ld a,12
04AF46 5B D7       0203*  	rst.lil $10
04AF48 C9          0204*  	ret
04AF49             0205*  
04AF49             0206*  ; VDU 13: Carriage return
04AF49             0207*  vdu_cr:
04AF49 3E 0D       0208*      ld a,13
04AF4B 5B D7       0209*  	rst.lil $10
04AF4D C9          0210*  	ret
04AF4E             0211*  
04AF4E             0212*  ; VDU 14: Page mode On *
04AF4E             0213*  vdu_page_on:
04AF4E 3E 0E       0214*      ld a,14
04AF50 5B D7       0215*  	rst.lil $10
04AF52 C9          0216*  	ret
04AF53             0217*  
04AF53             0218*  ; VDU 15: Page mode Off *
04AF53             0219*  vdu_page_off:
04AF53 3E 0F       0220*      ld a,15
04AF55 5B D7       0221*  	rst.lil $10
04AF57 C9          0222*  	ret
04AF58             0223*  
04AF58             0224*  ; VDU 16: Clear graphics area (CLG)
04AF58             0225*  vdu_clg:
04AF58 3E 10       0226*      ld a,16
04AF5A 5B D7       0227*  	rst.lil $10
04AF5C C9          0228*  	ret
04AF5D             0229*  
04AF5D             0230*  ; VDU 17, colour: Define text colour (COLOUR)
04AF5D             0231*  vdu_colour_text:
04AF5D 32 6D AF 04 0232*  	ld (@arg),a
04AF61 21 6C AF 04 0233*  	ld hl,@cmd
04AF65 01 02 00 00 0234*  	ld bc,@end-@cmd
04AF69 5B DF       0235*  	rst.lil $18
04AF6B C9          0236*  	ret
04AF6C 11          0237*  @cmd: db 17
04AF6D 00          0238*  @arg: db 0
04AF6E             0239*  @end:
04AF6E             0240*  
04AF6E             0241*  ; VDU 18, mode, colour: Set graphics colour (GCOL mode, colour)
04AF6E             0242*  ; inputs: a is the plotting mode, c is the colour
04AF6E             0243*  ; outputs: a VDU set to put pixels on the screen with the selected mode/colour
04AF6E             0244*  vdu_gcol_fg:
04AF6E             0245*  ; This command will set both the current graphics colour,
04AF6E             0246*  ; and the current graphics plotting mode.
04AF6E             0247*  ; As with VDU 17 the colour number will set the foreground colour
04AF6E             0248*  ; if it is in the range 0-127, or the background colour if it is
04AF6E             0249*  ; in the range 128-255, and will be interpreted in the same manner.
04AF6E             0250*  ; Support for different plotting modes on Agon is currently very limited.
04AF6E             0251*  ; The only fully supported mode is mode 0, which is the default mode.
04AF6E             0252*  ; This mode will plot the given colour at the given graphics coordinate,
04AF6E             0253*  ; and will overwrite any existing graphics at that coordinate. There is
04AF6E             0254*  ; very limited support for mode 4, which will invert the colour of any
04AF6E             0255*  ; existing graphics at the given coordinate, but this is not fully supported
04AF6E             0256*  ; and may not work as expected.
04AF6E             0257*  ; Support for other plotting modes, matching those provided by Acorn’s
04AF6E             0258*  ; original VDU system, may be added in the future.
04AF6E             0259*  ; This command is identical to the BASIC GCOL keyword.
04AF6E 32 83 AF 04 0260*  	ld (@mode),a
04AF72 79          0261*      ld a,c
04AF73 32 84 AF 04 0262*      ld (@col),a
04AF77 21 82 AF 04 0263*  	ld hl,@cmd
04AF7B 01 03 00 00 0264*  	ld bc,@end-@cmd
04AF7F 5B DF       0265*  	rst.lil $18
04AF81 C9          0266*  	ret
04AF82 12          0267*  @cmd: db 18
04AF83 00          0268*  @mode: db 0
04AF84 00          0269*  @col: db 0
04AF85             0270*  @end:
04AF85             0271*  
04AF85             0272*  vdu_gcol_bg:
04AF85 32 9C AF 04 0273*  	ld (@mode),a
04AF89 79          0274*      ld a,c
04AF8A C6 80       0275*      add a,128
04AF8C 32 9D AF 04 0276*      ld (@col),a
04AF90 21 9B AF 04 0277*  	ld hl,@cmd
04AF94 01 03 00 00 0278*  	ld bc,@end-@cmd
04AF98 5B DF       0279*  	rst.lil $18
04AF9A C9          0280*  	ret
04AF9B 12          0281*  @cmd:  db 18
04AF9C 00          0282*  @mode: db 0
04AF9D 00          0283*  @col:  db 0
04AF9E             0284*  @end:
04AF9E             0285*  
04AF9E             0286*  ; VDU 19, l, p, r, g, b: Define logical colour (COLOUR l, p / COLOUR l, r, g, b)
04AF9E             0287*  ;     This command sets the colour palette, by mapping a logical colour
04AF9E             0288*  ;     to a physical colour. This is useful for defining custom colours,
04AF9E             0289*  ;     or for redefining the default colours.
04AF9E             0290*  ;     If the physical colour number is given as 255 then the colour will
04AF9E             0291*  ;     be defined using the red, green, and blue values given. If the physical
04AF9E             0292*  ;     colour number is given as any other value then the colour will be defined
04AF9E             0293*  ;     using the colour palette entry given by that number, up to colour number 63.
04AF9E             0294*  ;     If the physical colour is not 255 then the red, green, and blue values
04AF9E             0295*  ;     must still be provided, but will be ignored.
04AF9E             0296*  ;     The values for red, green and blue must be given in the range 0-255.
04AF9E             0297*  ;     You should note that the physical Agon hardware only supports 64 colours,
04AF9E             0298*  ;     so the actual colour displayed may not be exactly the same as the colour
04AF9E             0299*  ;     requested. The nearest colour will be chosen.
04AF9E             0300*  ;     This command is equivalent to the BASIC COLOUR keyword.
04AF9E             0301*  ; inputs: a=physcial colour, b=logical colour, chl=r,g,b
04AF9E             0302*  vdu_def_log_colour:
04AF9E 32 C3 AF 04 0303*  	ld (@physical),a
04AFA2 47          0304*      ld b,a
04AFA3 32 C2 AF 04 0305*      ld (@logical),a
04AFA7 79          0306*      ld a,c
04AFA8 32 C4 AF 04 0307*      ld (@red),a
04AFAC 7C          0308*      ld a,h
04AFAD 32 C5 AF 04 0309*      ld (@green),a
04AFB1 7D          0310*      ld a,l
04AFB2 32 C6 AF 04 0311*      ld (@blue),a
04AFB6 21 C1 AF 04 0312*  	ld hl,@cmd
04AFBA 01 06 00 00 0313*  	ld bc,@end-@cmd
04AFBE 5B DF       0314*  	rst.lil $18
04AFC0 C9          0315*  	ret
04AFC1 13          0316*  @cmd: db 19
04AFC2 00          0317*  @logical: db 0
04AFC3 00          0318*  @physical: db 0
04AFC4 00          0319*  @red: db 0
04AFC5 00          0320*  @green: db 0
04AFC6 00          0321*  @blue: db 0
04AFC7             0322*  @end:
04AFC7             0323*  
04AFC7             0324*  ; VDU 20: Reset palette and text/graphics colours and drawing modes §§
04AFC7             0325*  vdu_reset_gfx:
04AFC7 3E 14       0326*      ld a,20
04AFC9 5B D7       0327*  	rst.lil $10
04AFCB C9          0328*  	ret
04AFCC             0329*  
04AFCC             0330*  ; VDU 21: Disable screen (turns off VDU command processing,
04AFCC             0331*  ; except for VDU 1 and VDU 6) §§
04AFCC             0332*  vdu_disable_screen:
04AFCC 3E 15       0333*      ld a,21
04AFCE 5B D7       0334*  	rst.lil $10
04AFD0 C9          0335*  	ret
04AFD1             0336*  
04AFD1             0337*  ; VDU 22, n: Select screen mode (MODE n)
04AFD1             0338*  ; Inputs: a, screen mode (8-bit unsigned integer), in the following list:
04AFD1             0339*  ; https://agonconsole8.github.io/agon-docs/VDP---Screen-Modes.html
04AFD1             0340*  ; Screen modes
04AFD1             0341*  ; Modes over 128 are double-buffered
04AFD1             0342*  ; From Version 1.04 or greater
04AFD1             0343*  ; Mode 	Horz 	Vert 	Cols 	Refresh
04AFD1             0344*  ; 0 	640 	480 	16 	    60hz
04AFD1             0345*  ; * 1 	640 	480 	4 	    60hz
04AFD1             0346*  ; 2 	640 	480 	2 	    60hz
04AFD1             0347*  ; 3 	640 	240 	64 	    60hz
04AFD1             0348*  ; 4 	640 	240 	16 	    60hz
04AFD1             0349*  ; 5 	640 	240 	4 	    60hz
04AFD1             0350*  ; 6 	640 	240 	2 	    60hz
04AFD1             0351*  ; ** 7 	n/a 	n/a 	16 	    60hz
04AFD1             0352*  ; 8 	320 	240 	64 	    60hz
04AFD1             0353*  ; 9 	320 	240 	16 	    60hz
04AFD1             0354*  ; 10 	320 	240 	4 	    60hz
04AFD1             0355*  ; 11 	320 	240 	2 	    60hz
04AFD1             0356*  ; 12 	320 	200 	64 	    70hz
04AFD1             0357*  ; 13 	320 	200 	16 	    70hz
04AFD1             0358*  ; 14 	320 	200 	4 	    70hz
04AFD1             0359*  ; 15 	320 	200 	2 	    70hz
04AFD1             0360*  ; 16 	800 	600 	4 	    60hz
04AFD1             0361*  ; 17 	800 	600 	2 	    60hz
04AFD1             0362*  ; 18 	1024 	768 	2 	    60hz
04AFD1             0363*  ; 129 	640 	480 	4 	    60hz
04AFD1             0364*  ; 130 	640 	480 	2 	    60hz
04AFD1             0365*  ; 132 	640 	240 	16 	    60hz
04AFD1             0366*  ; 133 	640 	240 	4 	    60hz
04AFD1             0367*  ; 134 	640 	240 	2 	    60hz
04AFD1             0368*  ; 136 	320 	240 	64 	    60hz
04AFD1             0369*  ; 137 	320 	240 	16 	    60hz
04AFD1             0370*  ; 138 	320 	240 	4 	    60hz
04AFD1             0371*  ; 139 	320 	240 	2 	    60hz
04AFD1             0372*  ; 140 	320 	200 	64 	    70hz
04AFD1             0373*  ; 141 	320 	200 	16 	    70hz
04AFD1             0374*  ; 142 	320 	200 	4 	    70hz
04AFD1             0375*  ; 143 	320 	200 	2 	    70hz
04AFD1             0376*  ; * Mode 1 is the “default” mode, and is the mode that the system will use on startup.
04AFD1             0377*  ; It is also the mode that the system will fall back to use if it was not possible to
04AFD1             0378*  ; change to the requested mode.
04AFD1             0379*  ; ** Mode 7 is the “Teletext” mode, and essentially works in a very similar manner to
04AFD1             0380*  ; the BBC Micro’s Teletext mode, which was also mode 7.
04AFD1             0381*  vdu_set_screen_mode:
04AFD1 32 E1 AF 04 0382*  	ld (@arg),a
04AFD5 21 E0 AF 04 0383*  	ld hl,@cmd
04AFD9 01 02 00 00 0384*  	ld bc,@end-@cmd
04AFDD 5B DF       0385*  	rst.lil $18
04AFDF C9          0386*  	ret
04AFE0 16          0387*  @cmd: db 22 ; set screen mode
04AFE1 00          0388*  @arg: db 0  ; screen mode parameter
04AFE2             0389*  @end:
04AFE2             0390*  
04AFE2             0391*  ; VDU 23, n: Re-program display character / System Commands
04AFE2             0392*  ; inputs: a, ascii code; hl, pointer to bitmask data
04AFE2             0393*  vdu_define_character:
04AFE2 32 FE AF 04 0394*  	ld (@ascii),a
04AFE6 11 FF AF 04 0395*  	ld de,@data
04AFEA 06 08       0396*  	ld b,8 ; loop counter for 8 bytes of data
04AFEC             0397*  @loop:
04AFEC 7E          0398*  	ld a,(hl)
04AFED 12          0399*  	ld (de),a
04AFEE 23          0400*  	inc hl
04AFEF 13          0401*  	inc de
04AFF0 10 FA       0402*  	djnz @loop
04AFF2 21 FD AF 04 0403*  	ld hl,@cmd
04AFF6 01 0A 00 00 0404*  	ld bc,@end-@cmd
04AFFA 5B DF       0405*  	rst.lil $18
04AFFC C9          0406*  	ret
04AFFD 17          0407*  @cmd:   db 23
04AFFE 00          0408*  @ascii: db 0
04AFFF             0409*  @data:  ds 8
04B007             0410*  @end:
04B007             0411*  
04B007             0412*  ; VDU 24, left; bottom; right; top;: Set graphics viewport
04B007             0413*  ; NOTE: the order of the y-coordinate parameters are inverted
04B007             0414*  ; 	because we have turned off logical screen scaling
04B007             0415*  ; inputs: bc=x0,de=y0,ix=x1,iy=y1
04B007             0416*  ; outputs; nothing
04B007             0417*  ; destroys: a might make it out alive
04B007             0418*  vdu_set_gfx_viewport:
04B007 ED 43 27 B0 0419*      ld (@x0),bc
       04          
04B00C FD 22 29 B0 0420*      ld (@y1),iy
       04          
04B011 DD 22 2B B0 0421*  	ld (@x1),ix
       04          
04B016 ED 53 2D B0 0422*  	ld (@y0),de
       04          
04B01B 21 26 B0 04 0423*  	ld hl,@cmd
04B01F 01 09 00 00 0424*  	ld bc,@end-@cmd
04B023 5B DF       0425*  	rst.lil $18
04B025 C9          0426*  	ret
04B026 18          0427*  @cmd:   db 24 ; set graphics viewport command
04B027 00 00       0428*  @x0: 	dw 0x0000 ; set by bc
04B029 00 00       0429*  @y1: 	dw 0x0000 ; set by iy
04B02B 00 00       0430*  @x1: 	dw 0x0000 ; set by ix
04B02D 00 00       0431*  @y0: 	dw 0x0000 ; set by de
04B02F 00          0432*  @end:   db 0x00	  ; padding
04B030             0433*  
04B030             0434*  ; VDU 25, mode, x; y;: PLOT command
04B030             0435*  ; Implemented in vdu_plot.asm
04B030             0436*  
04B030             0437*  ; VDU 26: Reset graphics and text viewports **
04B030             0438*  vdu_reset_txt_gfx_view:
04B030 3E 1A       0439*      ld a,26
04B032 5B D7       0440*  	rst.lil $10
04B034 C9          0441*  	ret
04B035             0442*  
04B035             0443*  ; PASSES
04B035             0444*  ; VDU 27, char: Output character to screen §
04B035             0445*  ; inputs: a is the ascii code of the character to draw
04B035             0446*  vdu_draw_char:
04B035 32 45 B0 04 0447*  	ld (@arg),a
04B039 21 44 B0 04 0448*  	ld hl,@cmd
04B03D 01 02 00 00 0449*  	ld bc,@end-@cmd
04B041 5B DF       0450*  	rst.lil $18
04B043 C9          0451*  	ret
04B044 1B          0452*  @cmd: db 27
04B045 00          0453*  @arg: db 0  ; ascii code of character to draw
04B046             0454*  @end:
04B046             0455*  
04B046             0456*  ; VDU 28, left, bottom, right, top: Set text viewport **
04B046             0457*  ; MIND THE LITTLE-ENDIANESS
04B046             0458*  ; inputs: c=left,b=bottom,e=right,d=top
04B046             0459*  ; outputs; nothing
04B046             0460*  ; destroys: a might make it out alive
04B046             0461*  vdu_set_txt_viewport:
04B046 ED 43 5C B0 0462*      ld (@lb),bc
       04          
04B04B ED 53 5E B0 0463*  	ld (@rt),de
       04          
04B050 21 5B B0 04 0464*  	ld hl,@cmd
04B054 01 05 00 00 0465*  	ld bc,@end-@cmd
04B058 5B DF       0466*  	rst.lil $18
04B05A C9          0467*  	ret
04B05B 1C          0468*  @cmd:   db 28 ; set text viewport command
04B05C 00 00       0469*  @lb: 	dw 0x0000 ; set by bc
04B05E 00 00       0470*  @rt: 	dw 0x0000 ; set by de
04B060 00          0471*  @end:   db 0x00	  ; padding
04B061             0472*  
04B061             0473*  ; PASSES
04B061             0474*  ; VDU 29, x; y;: Set graphics origin
04B061             0475*  ; inputs: bc,de x,y coordinates
04B061             0476*  vdu_set_gfx_origin:
04B061 ED 43 77 B0 0477*      ld (@x0),bc
       04          
04B066 ED 53 79 B0 0478*      ld (@y0),de
       04          
04B06B 21 76 B0 04 0479*  	ld hl,@cmd
04B06F 01 05 00 00 0480*  	ld bc,@end-@cmd
04B073 5B DF       0481*  	rst.lil $18
04B075 C9          0482*  	ret
04B076 1D          0483*  @cmd:	db 29
04B077 00 00       0484*  @x0: 	dw 0
04B079 00 00       0485*  @y0: 	dw 0
04B07B 00          0486*  @end: 	db 0 ; padding
04B07C             0487*  
04B07C             0488*  ; PASSES
04B07C             0489*  ; VDU 30: Home cursor
04B07C             0490*  vdu_home_cursor:
04B07C 3E 1E       0491*      ld a,30
04B07E 5B D7       0492*  	rst.lil $10
04B080 C9          0493*  	ret
04B081             0494*  
04B081             0495*  ; PASSES
04B081             0496*  ; VDU 31, x, y: Move text cursor to x, y text position (TAB(x, y))
04B081             0497*  ; inputs: c=x, b=y 8-bit unsigned integers
04B081             0498*  vdu_move_cursor:
04B081 ED 43 92 B0 0499*      ld (@x0),bc
       04          
04B086 21 91 B0 04 0500*  	ld hl,@cmd
04B08A 01 03 00 00 0501*  	ld bc,@end-@cmd
04B08E 5B DF       0502*  	rst.lil $18
04B090 C9          0503*  	ret
04B091 1F          0504*  @cmd: 	db 31
04B092 00          0505*  @x0:	db 0
04B093 00          0506*  @y0: 	db 0
04B094 00          0507*  @end: 	db 0 ; padding
04B095             0508*  
04B095             0509*  
04B095             0510*  ; VDU 127: Backspace
04B095             0511*  vdu_bksp:
04B095 3E 7F       0512*      ld a,127
04B097 5B D7       0513*  	rst.lil $10
04B099 C9          0514*  	ret
04B09A             0515*  
04B09A             0516*  ; activate a bitmap in preparation to draw it
04B09A             0517*  ; inputs: a holding the bitmap index
04B09A             0518*  vdu_bmp_select:
04B09A 32 AC B0 04 0519*  	ld (@bmp),a
04B09E 21 A9 B0 04 0520*  	ld hl,@cmd
04B0A2 01 04 00 00 0521*  	ld bc,@end-@cmd
04B0A6 5B DF       0522*  	rst.lil $18
04B0A8 C9          0523*  	ret
04B0A9 17 1B 00    0524*  @cmd: db 23,27,0
04B0AC 00          0525*  @bmp: db 0
04B0AD             0526*  @end:
04B0AD             0527*  
04B0AD             0528*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04B0AD             0529*  ; inputs: hl=bufferId
04B0AD             0530*  vdu_buff_select:
04B0AD 22 BF B0 04 0531*  	ld (@bufferId),hl
04B0B1 21 BC B0 04 0532*  	ld hl,@cmd
04B0B5 01 05 00 00 0533*  	ld bc,@end-@cmd
04B0B9 5B DF       0534*  	rst.lil $18
04B0BB C9          0535*  	ret
04B0BC 17 1B 20    0536*  @cmd: db 23,27,0x20
04B0BF 00 00       0537*  @bufferId: dw 0x0000
04B0C1 00          0538*  @end: db 0x00 ; padding
04B0C2             0539*  
04B0C2             0540*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer
04B0C2             0541*  ; inputs: a=format; bc=width; de=height
04B0C2             0542*  ; prerequisites: buffer selected by vdu_bmp_select or vdu_buff_select
04B0C2             0543*  ; formats: https://agonconsole8.github.io/agon-docs/VDP---Bitmaps-API.html
04B0C2             0544*  ; 0 	RGBA8888 (4-bytes per pixel)
04B0C2             0545*  ; 1 	RGBA2222 (1-bytes per pixel)
04B0C2             0546*  ; 2 	Mono/Mask (1-bit per pixel)
04B0C2             0547*  ; 3 	Reserved for internal use by VDP (“native” format)
04B0C2             0548*  vdu_bmp_create:
04B0C2 ED 43 DE B0 0549*      ld (@width),bc
       04          
04B0C7 ED 53 E0 B0 0550*      ld (@height),de
       04          
04B0CC 32 E2 B0 04 0551*      ld (@fmt),a
04B0D0 21 DB B0 04 0552*  	ld hl,@cmd
04B0D4 01 08 00 00 0553*  	ld bc,@end-@cmd
04B0D8 5B DF       0554*  	rst.lil $18
04B0DA C9          0555*  	ret
04B0DB 17 1B 21    0556*  @cmd:       db 23,27,0x21
04B0DE 00 00       0557*  @width:     dw 0x0000
04B0E0 00 00       0558*  @height:    dw 0x0000
04B0E2 00          0559*  @fmt:       db 0x00
04B0E3             0560*  @end:
04B0E3             0561*  
04B0E3             0562*  ; Draw a bitmap on the screen
04B0E3             0563*  ; inputs: bc, x-coordinate; de, y-coordinate
04B0E3             0564*  ; prerequisite: bitmap index set by e.g. vdu_bmp_select
04B0E3             0565*  vdu_bmp_draw:
04B0E3 ED 43 FB B0 0566*      ld (@x0),bc
       04          
04B0E8 ED 53 FD B0 0567*      ld (@y0),de
       04          
04B0ED 21 F8 B0 04 0568*  	ld hl,@cmd
04B0F1 01 07 00 00 0569*  	ld bc,@end-@cmd
04B0F5 5B DF       0570*  	rst.lil $18
04B0F7 C9          0571*  	ret
04B0F8 17 1B 03    0572*  @cmd: db 23,27,3
04B0FB 00 00       0573*  @x0:  dw 0x0000
04B0FD 00 00       0574*  @y0:  dw 0x0000
04B0FF 00          0575*  @end: db 0x00 ; padding
04B100             0576*  
04B100             0577*  ; VDU 23, 0, &C0, n: Turn logical screen scaling on and off *
04B100             0578*  ; inputs: a is scaling mode, 1=on, 0=off
04B100             0579*  ; note: default setting on boot is scaling ON
04B100             0580*  vdu_set_scaling:
04B100 32 12 B1 04 0581*  	ld (@arg),a
04B104 21 0F B1 04 0582*  	ld hl,@cmd
04B108 01 04 00 00 0583*  	ld bc,@end-@cmd
04B10C 5B DF       0584*  	rst.lil $18
04B10E C9          0585*  	ret
04B10F 17 00 C0    0586*  @cmd: db 23,0,0xC0
04B112 00          0587*  @arg: db 0  ; scaling on/off
04B113             0588*  @end:
04B113             0589*  
04B113             0590*  ; VDU 23, 0, &C3: Swap the screen buffer and/or wait for VSYNC **
04B113             0591*  ; 	Swap the screen buffer (double-buffered modes only) or wait for VSYNC
04B113             0592*  ; 	(all modes).
04B113             0593*  
04B113             0594*  ; 	This command will swap the screen buffer, if the current screen mode
04B113             0595*  ; 	is double-buffered, doing so at the next VSYNC. If the current screen
04B113             0596*  ; 	mode is not double-buffered then this command will wait for the next
04B113             0597*  ; 	VSYNC signal before returning. This can be used to synchronise the
04B113             0598*  ; 	screen with the vertical refresh rate of the monitor.
04B113             0599*  
04B113             0600*  ; 	Waiting for VSYNC can be useful for ensuring smooth graphical animation,
04B113             0601*  ; 	as it will prevent tearing of the screen.
04B113             0602*  ; inputs: none
04B113             0603*  ; outputs: none
04B113             0604*  ; destroys: hl, bc
04B113             0605*  vdu_flip:
04B113 21 1E B1 04 0606*  	ld hl,@cmd
04B117 01 03 00 00 0607*  	ld bc,@end-@cmd
04B11B 5B DF       0608*  	rst.lil $18
04B11D C9          0609*  	ret
04B11E 17 00 C3    0610*  @cmd: db 23,0,0xC3
04B121             0611*  @end:
04B121             0612*  
04B121             0613*  ; Command 64: Compress a buffer
04B121             0614*  ; VDU 23, 0, &A0, targetBufferId; 64, sourceBufferId;
04B121             0615*  ; This command will compress the contents of a buffer, replacing the target buffer with the compressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04B121             0616*  
04B121             0617*  
04B121             0618*  ; Command 65: Decompress a buffer
04B121             0619*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04B121             0620*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04B121             0621*  ; inputs: hl=sourceBufferId/targetBufferId
04B121             0622*  vdu_decompress_buffer:
04B121 22 3D B1 04 0623*  	ld (@targetBufferId),hl
04B125 22 40 B1 04 0624*  	ld (@sourceBufferId),hl
04B129 3E 41       0625*  	ld a,65
04B12B 32 3F B1 04 0626*  	ld (@cmd1),a ; restore the part of command that got stomped on
04B12F 21 3A B1 04 0627*  	ld hl,@cmd
04B133 01 08 00 00 0628*  	ld bc,@end-@cmd
04B137 5B DF       0629*  	rst.lil $18
04B139 C9          0630*  	ret
04B13A 17 00 A0    0631*  @cmd: 	db 23,0,0xA0
04B13D 00 00       0632*  @targetBufferId: dw 0x0000
04B13F 41          0633*  @cmd1:	db 65
04B140 00 00       0634*  @sourceBufferId: dw 0x0000
04B142 00          0635*  @end: 	db 0x00 ; padding
04B143             0636*  
04B143             0637*  ; Command 65: Decompress a buffer
04B143             0638*  ; VDU 23, 0, &A0, targetBufferId; 65, sourceBufferId;
04B143             0639*  ; This command will decompress the contents of a buffer, replacing the target buffer with the decompressed data. Unless the target buffer is the same as the source, the source buffer will be left unchanged.
04B143             0640*  ; inputs: hl=sourceBufferId/targetBufferId
04B143             0641*  ; 0x7FFF for the source buffer is just an easy-to remember aribtrary value
04B143             0642*  vdu_decompress_buffer_different:
04B143 22 63 B1 04 0643*  	ld (@targetBufferId),hl
04B147 21 FF 7F 00 0644*      ld hl,0x7FFF
04B14B 22 66 B1 04 0645*  	ld (@sourceBufferId),hl
04B14F 3E 41       0646*  	ld a,65
04B151 32 65 B1 04 0647*  	ld (@cmd1),a ; restore the part of command that got stomped on
04B155 21 60 B1 04 0648*  	ld hl,@cmd
04B159 01 08 00 00 0649*  	ld bc,@end-@cmd
04B15D 5B DF       0650*  	rst.lil $18
04B15F C9          0651*  	ret
04B160 17 00 A0    0652*  @cmd: 	db 23,0,0xA0
04B163 00 00       0653*  @targetBufferId: dw 0x0000
04B165 41          0654*  @cmd1:	db 65
04B166 00 00       0655*  @sourceBufferId: dw 0x0000
04B168 00          0656*  @end: 	db 0x00 ; padding
04B169             0657*  
04B169             0658*  ; #### from vdp.asm ####
04B169             0659*  
04B169             0660*  ; https://github.com/breakintoprogram/agon-docs/wiki/VDP
04B169             0661*  ; VDU 23, 7: Scrolling
04B169             0662*  ;     VDU 23, 7, extent, direction, speed: Scroll the screen
04B169             0663*  ; inputs: a, extent; l, direction; h; speed
04B169             0664*  vdu_scroll_down:
04B169 32 7E B1 04 0665*  	ld (@extent),a
04B16D 22 7F B1 04 0666*  	ld (@dir),hl ; implicitly populates @speed
04B171 21 7C B1 04 0667*  	ld hl,@cmd
04B175 01 05 00 00 0668*  	ld bc,@end-@cmd
04B179 5B DF       0669*  	rst.lil $18     ;; Sending command to VDP
04B17B C9          0670*  	ret
04B17C 17 07       0671*  @cmd:       db 23,7
04B17E 00          0672*  @extent:    db 0x00 ; 0 current text window, 1 entire screen, 2 curr gfx viewport
04B17F 00          0673*  @dir:       db 0x00 ; 0 right, 1 left, 2 down, 3 up
04B180 00          0674*  @speed:     db 0x00 ; pixels
04B181 00          0675*  @end:		db 0x00 ; padding
04B182             0676*  
04B182             0677*  cursor_on:
04B182 21 8D B1 04 0678*  	ld hl,@cmd
04B186 01 03 00 00 0679*  	ld bc,@end-@cmd
04B18A 5B DF       0680*  	rst.lil $18
04B18C C9          0681*  	ret
04B18D             0682*  @cmd:
04B18D 17 01 01    0683*  	db 23,1,1
04B190             0684*  @end:
04B190             0685*  
04B190             0686*  cursor_off:
04B190 21 9B B1 04 0687*  	ld hl,@cmd
04B194 01 03 00 00 0688*  	ld bc,@end-@cmd
04B198 5B DF       0689*  	rst.lil $18
04B19A C9          0690*  	ret
04B19B             0691*  @cmd:
04B19B 17 01 00    0692*  	db 23,1,0
04B19E             0693*  @end:
04B19E             0694*  
04B19E DD E5       0695*  vdu_vblank:		PUSH 	IX			; Wait for VBLANK interrupt
04B1A0             0696*  			MOSCALL	mos_sysvars		; Fetch pointer to system variables
04B1A0 3E 08       0001*M 			LD	A, function
04B1A2 5B CF       0002*M 			RST.LIL	08h
04B1A4 DD 7E 00    0697*  			LD	A, (IX + sysvar_time + 0)
04B1A7 DD BE 00    0698*  @wait:			CP 	A, (IX + sysvar_time + 0)
04B1AA 28 FB       0699*  			JR	Z, @wait
04B1AC DD E1       0700*  			POP	IX
04B1AE C9          0701*  			RET
04B1AF             0702*  
04B1AF             0703*  ; #### from vdu_bmp.asm ####
04B1AF             0704*  ; =========================================================================
04B1AF             0705*  ; Bitmaps
04B1AF             0706*  ; -------------------------------------------------------------------------
04B1AF             0707*  ; VDU 23, 27, 0, n: Select bitmap n
04B1AF             0708*  ; VDU 23, 27, &20, bufferId;: Select bitmap using a 16-bit buffer ID *
04B1AF             0709*  ; VDU 23, 27, 1, w; h; b1, b2 ... bn: Load colour bitmap data into current bitmap
04B1AF             0710*  
04B1AF             0711*  ; VDU 23, 27, 1, n, 0, 0;: Capture screen data into bitmap n *
04B1AF             0712*  ; VDU 23, 27, &21, bitmapId; 0; : same, but to 16-bit buffer ID *
04B1AF             0713*  ; Any PLOT, or VDU 25, style command will push the graphics cursor position -
04B1AF             0714*  ; typically "move" style plot commands are used to define the rectangle.
04B1AF             0715*  ; To be clear, this command should be performed after two "move" style PLOT commands.
04B1AF             0716*  ; inputs: hl; target bufferId
04B1AF             0717*  ; all the following are in 16.8 fixed point format
04B1AF             0718*  ;   ub.c; top-left x coordinate
04B1AF             0719*  ;   ud.e; top-left y coordinate
04B1AF             0720*  ;   ui.x; width
04B1AF             0721*  ;   ui.y; height
04B1AF             0722*  vdu_buff_screen_capture168:
04B1AF ED 53 E6 B1 0723*          ld (@y0-1),de
       04          
04B1B4 ED 43 E4 B1 0724*          ld (@x0-1),bc
       04          
04B1B9 3E 44       0725*          ld a,0x44 ; plot_pt+mv_abs
04B1BB 32 E4 B1 04 0726*          ld (@x0-1),a
04B1BF             0727*  
04B1BF DD 22 EB B1 0728*          ld (@x1),ix
       04          
04B1C4 FD 22 ED B1 0729*          ld (@y1),iy
       04          
04B1C9 3E 17       0730*          ld a,23
04B1CB 32 EF B1 04 0731*          ld (@y1+2),a
04B1CF             0732*  
04B1CF 22 F2 B1 04 0733*          ld (@bufId),hl
04B1D3 AF          0734*          xor a
04B1D4 32 F4 B1 04 0735*          ld (@bufId+2),a
04B1D8             0736*  
04B1D8 21 E3 B1 04 0737*          ld hl,@begin
04B1DC 01 13 00 00 0738*          ld bc,@end-@begin
04B1E0 5B DF       0739*          rst.lil $18
04B1E2 C9          0740*          ret
04B1E3             0741*  @begin:
04B1E3             0742*  ; absolute move gfx cursor to top-left screen coordinate
04B1E3             0743*  ; VDU 25, mode, x; y;: PLOT command
04B1E3 19 44       0744*          db 25,0x44 ; plot_pt+mv_abs
04B1E5 40 00       0745*  @x0: 	dw 64
04B1E7 40 00       0746*  @y0: 	dw 64
04B1E9             0747*  ; relative move gfx cursor to bottom-right screen coordinate
04B1E9             0748*  ; VDU 25, mode, x; y;: PLOT command
04B1E9 19 40       0749*          db 25,0x40 ; plot_pt+mv_rel
04B1EB 0F 00       0750*  @x1: 	dw 15
04B1ED 0F 00       0751*  @y1: 	dw 15
04B1EF             0752*  ; now the main event
04B1EF             0753*  ; VDU 23, 27, &21, bitmapId; 0;
04B1EF 17 1B 21    0754*          db 23,27,0x21
04B1F2 00 20 00 00 0755*  @bufId: dw 0x2000,0x0000
04B1F6             0756*  @end: ; no padding required
04B1F6             0757*  
04B1F6             0758*  vdu_buff_screen_capture_full:
04B1F6 21 01 B2 04 0759*          ld hl,@begin
04B1FA 01 13 00 00 0760*          ld bc,@end-@begin
04B1FE 5B DF       0761*          rst.lil $18
04B200 C9          0762*          ret
04B201             0763*  @begin:
04B201             0764*  ; absolute move gfx cursor to top-left screen coordinate
04B201             0765*  ; VDU 25, mode, x; y;: PLOT command
04B201 19 44       0766*          db 25,0x44 ; plot_pt+mv_abs
04B203 00 00       0767*  @x0: 	dw 0
04B205 00 00       0768*  @y0: 	dw 0
04B207             0769*  ; relative move gfx cursor to bottom-right screen coordinate
04B207             0770*  ; VDU 25, mode, x; y;: PLOT command
04B207 19 40       0771*          db 25,0x40 ; plot_pt+mv_rel
04B209 3F 01       0772*  @x1: 	dw 319
04B20B EF 00       0773*  @y1: 	dw 239
04B20D             0774*  ; now the main event
04B20D             0775*  ; VDU 23, 27, &21, bitmapId; 0;
04B20D 17 1B 21    0776*          db 23,27,0x21
04B210 00 20 00 00 0777*  @bufId: dw 0x2000,0x0000
04B214             0778*  @end: ; no padding required
04B214             0779*  
04B214             0780*  vdu_buff_screen_paste_full:
04B214 21 1F B2 04 0781*          ld hl,@begin
04B218 01 0B 00 00 0782*          ld bc,@end-@begin
04B21C 5B DF       0783*          rst.lil $18
04B21E C9          0784*          ret
04B21F             0785*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04B21F 17 1B 20    0786*  @begin:    db 23,27,0x20
04B222 00 20       0787*  @bufferId: dw 0x2000
04B224             0788*  ; VDU 25, mode, x; y;: PLOT command
04B224 19 ED       0789*             db 25,0xED ; plot_bmp+dr_abs_fg
04B226 00 00 00 00 0790*             dw 0x0000,0x0000
04B22A             0791*  @end: ; no padding required
04B22A             0792*  
04B22A             0793*  vdu_buff_screen_capture_tiles:
04B22A 21 35 B2 04 0794*          ld hl,@begin
04B22E 01 13 00 00 0795*          ld bc,@end-@begin
04B232 5B DF       0796*          rst.lil $18
04B234 C9          0797*          ret
04B235             0798*  @begin:
04B235             0799*  ; absolute move gfx cursor to top-left screen coordinate
04B235             0800*  ; VDU 25, mode, x; y;: PLOT command
04B235 19 44       0801*          db 25,0x44 ; plot_pt+mv_abs
04B237 00 00       0802*  @x0: 	dw 0
04B239 00 00       0803*  @y0: 	dw 0
04B23B             0804*  ; relative move gfx cursor to bottom-right screen coordinate
04B23B             0805*  ; VDU 25, mode, x; y;: PLOT command
04B23B 19 40       0806*          db 25,0x40 ; plot_pt+mv_rel
04B23D FF 00       0807*  @x1: 	dw 319-64
04B23F EF 00       0808*  @y1: 	dw 239
04B241             0809*  ; now the main event
04B241             0810*  ; VDU 23, 27, &21, bitmapId; 0;
04B241 17 1B 21    0811*          db 23,27,0x21
04B244 00 20 00 00 0812*  @bufId: dw 0x2000,0x0000
04B248             0813*  @end: ; no padding required
04B248             0814*  
04B248             0815*  vdu_buff_screen_paste_tiles:
04B248 21 53 B2 04 0816*          ld hl,@begin
04B24C 01 0B 00 00 0817*          ld bc,@end-@begin
04B250 5B DF       0818*          rst.lil $18
04B252 C9          0819*          ret
04B253             0820*  ; VDU 23, 27, &20, bufferId; : Select bitmap (using a buffer ID)
04B253 17 1B 20    0821*  @begin:    db 23,27,0x20
04B256 00 20       0822*  @bufferId: dw 0x2000
04B258             0823*  ; VDU 25, mode, x; y;: PLOT command
04B258 19 ED       0824*             db 25,0xED ; plot_bmp+dr_abs_fg
04B25A 00 00 01 00 0825*             dw 0x0000,0x0001
04B25E             0826*  @end: ; no padding required
04B25E             0827*  
04B25E             0828*  ; VDU 23, 27, 2, w; h; col1; col2;: Create a solid colour rectangular bitmap
04B25E             0829*  ; VDU 23, 27, 3, x; y;: Draw current bitmap on screen at pixel position x, y
04B25E             0830*  ; VDU 23, 27, &21, w; h; format: Create bitmap from selected buffer *
04B25E             0831*  ; Value	Meaning
04B25E             0832*  ; 0	RGBA8888 (4-bytes per pixel)
04B25E             0833*  ; 1	RGBA2222 (1-bytes per pixel)
04B25E             0834*  ; 2	Mono/Mask (1-bit per pixel)
04B25E             0835*  ; 3	Reserved for internal use by VDP ("native" format)VDP.
04B25E             0836*  ;     They have some significant limitations, and are not intended for general use.
04B25E             0837*  
04B25E             0838*  ; =========================================================================
04B25E             0839*  ; Sprites
04B25E             0840*  ; -------------------------------------------------------------------------
04B25E             0841*  ; VDU 23, 27, 4, n: Select sprite n
04B25E             0842*  ; VDU 23, 27, 5: Clear frames in current sprite
04B25E             0843*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B25E             0844*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04B25E             0845*  ; VDU 23, 27, 7, n: Activate n sprites
04B25E             0846*  ; VDU 23, 27, 8: Select next frame of current sprite
04B25E             0847*  ; VDU 23, 27, 9: Select previous frame of current sprite
04B25E             0848*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B25E             0849*  ; VDU 23, 27, 11: Show current sprite
04B25E             0850*  ; VDU 23, 27, 12: Hide current sprite
04B25E             0851*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B25E             0852*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B25E             0853*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B25E             0854*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B25E             0855*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B25E             0856*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B25E             0857*  
04B25E             0858*  ; =========================================================================
04B25E             0859*  ; Mouse cursor
04B25E             0860*  ; -------------------------------------------------------------------------
04B25E             0861*  ; VDU 23, 27, &40, hotX, hotY: Setup a mouse cursor with a hot spot at hotX, hotY
04B25E             0862*  
04B25E             0863*  ; #### from vdu_plot.asm ####
04B25E             0864*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B25E             0865*  ; PLOT code 	(Decimal) 	Effect
04B25E             0866*  ; &00-&07 	0-7 	Solid line, includes both ends
04B25E             0867*  plot_sl_both: equ 0x00
04B25E             0868*  
04B25E             0869*  ; &08-&0F 	8-15 	Solid line, final point omitted
04B25E             0870*  plot_sl_first: equ 0x08
04B25E             0871*  
04B25E             0872*  ; &10-&17 	16-23 	Not supported (Dot-dash line, includes both ends, pattern restarted)
04B25E             0873*  ; &18-&1F 	24-31 	Not supported (Dot-dash line, first point omitted, pattern restarted)
04B25E             0874*  
04B25E             0875*  ; &20-&27 	32-39 	Solid line, first point omitted
04B25E             0876*  plot_sl_last: equ 0x20
04B25E             0877*  
04B25E             0878*  ; &28-&2F 	40-47 	Solid line, both points omitted
04B25E             0879*  plot_sl_none: equ 0x28
04B25E             0880*  
04B25E             0881*  ; &30-&37 	48-55 	Not supported (Dot-dash line, first point omitted, pattern continued)
04B25E             0882*  ; &38-&3F 	56-63 	Not supported (Dot-dash line, both points omitted, pattern continued)
04B25E             0883*  
04B25E             0884*  ; &40-&47 	64-71 	Point plot
04B25E             0885*  plot_pt: equ 0x40
04B25E             0886*  
04B25E             0887*  ; &48-&4F 	72-79 	Line fill left and right to non-background §§
04B25E             0888*  plot_lf_lr_non_bg: equ 0x48
04B25E             0889*  
04B25E             0890*  ; &50-&57 	80-87 	Triangle fill
04B25E             0891*  plot_tf: equ 0x50
04B25E             0892*  
04B25E             0893*  ; &58-&5F 	88-95 	Line fill right to background §§
04B25E             0894*  plot_lf_r_bg: equ 0x58
04B25E             0895*  
04B25E             0896*  ; &60-&67 	96-103 	Rectangle fill
04B25E             0897*  plot_rf: equ 0x60
04B25E             0898*  
04B25E             0899*  ; &68-&6F 	104-111 	Line fill left and right to foreground §§
04B25E             0900*  plot_lf_lr_fg: equ 0x60
04B25E             0901*  
04B25E             0902*  ; &70-&77 	112-119 	Parallelogram fill
04B25E             0903*  plot_pf: equ 0x70
04B25E             0904*  
04B25E             0905*  ; &78-&7F 	120-127 	Line fill right to non-foreground §§
04B25E             0906*  plot_lf_r_non_fg: equ 0x78
04B25E             0907*  
04B25E             0908*  ; &80-&87 	128-135 	Not supported (Flood until non-background)
04B25E             0909*  ; &88-&8F 	136-143 	Not supported (Flood until foreground)
04B25E             0910*  
04B25E             0911*  ; &90-&97 	144-151 	Circle outline
04B25E             0912*  plot_co: equ 0x90
04B25E             0913*  
04B25E             0914*  ; &98-&9F 	152-159 	Circle fill
04B25E             0915*  plot_cf: equ 0x98
04B25E             0916*  
04B25E             0917*  ; &A0-&A7 	160-167 	Not supported (Circular arc)
04B25E             0918*  ; &A8-&AF 	168-175 	Not supported (Circular segment)
04B25E             0919*  ; &B0-&B7 	176-183 	Not supported (Circular sector)
04B25E             0920*  
04B25E             0921*  ; &B8-&BF 	184-191 	Rectangle copy/move
04B25E             0922*  plot_rcm: equ 0xB8
04B25E             0923*  
04B25E             0924*  ; &C0-&C7 	192-199 	Not supported (Ellipse outline)
04B25E             0925*  ; &C8-&CF 	200-207 	Not supported (Ellipse fill)
04B25E             0926*  ; &D0-&D7 	208-215 	Not defined
04B25E             0927*  ; &D8-&DF 	216-223 	Not defined
04B25E             0928*  ; &E0-&E7 	224-231 	Not defined
04B25E             0929*  
04B25E             0930*  ; &E8-&EF 	232-239 	Bitmap plot §
04B25E             0931*  plot_bmp: equ 0xE8
04B25E             0932*  
04B25E             0933*  ; &F0-&F7 	240-247 	Not defined
04B25E             0934*  ; &F8-&FF 	248-255 	Not defined
04B25E             0935*  
04B25E             0936*  ; § Support added in Agon Console8 VDP 2.1.0 §§ Support added in
04B25E             0937*  ; Agon Console8 VDP 2.2.0
04B25E             0938*  
04B25E             0939*  ; Within each group of eight plot codes, the effects are as follows:
04B25E             0940*  ; Plot code 	Effect
04B25E             0941*  ; 0 	Move relative
04B25E             0942*  mv_rel: equ 0
04B25E             0943*  
04B25E             0944*  ; 1 	Plot relative in current foreground colour
04B25E             0945*  dr_rel_fg: equ 1
04B25E             0946*  
04B25E             0947*  ; 2 	Not supported (Plot relative in logical inverse colour)
04B25E             0948*  ; 3 	Plot relative in current background colour
04B25E             0949*  dr_rel_bg: equ 3
04B25E             0950*  
04B25E             0951*  ; 4 	Move absolute
04B25E             0952*  mv_abs: equ 4
04B25E             0953*  
04B25E             0954*  ; 5 	Plot absolute in current foreground colour
04B25E             0955*  dr_abs_fg: equ 5
04B25E             0956*  
04B25E             0957*  ; 6 	Not supported (Plot absolute in logical inverse colour)
04B25E             0958*  ; 7 	Plot absolute in current background colour
04B25E             0959*  dr_abs_bg: equ 7
04B25E             0960*  
04B25E             0961*  ; Codes 0-3 use the position data provided as part of the command
04B25E             0962*  ; as a relative position, adding the position given to the current
04B25E             0963*  ; graphical cursor position. Codes 4-7 use the position data provided
04B25E             0964*  ; as part of the command as an absolute position, setting the current
04B25E             0965*  ; graphical cursor position to the position given.
04B25E             0966*  
04B25E             0967*  ; Codes 2 and 6 on Acorn systems plot using a logical inverse of the
04B25E             0968*  ; current pixel colour. These operations cannot currently be supported
04B25E             0969*  ; by the graphics system the Agon VDP uses, so these codes are not
04B25E             0970*  ; supported. Support for these codes may be added in a future version
04B25E             0971*  ; of the VDP firmware.
04B25E             0972*  
04B25E             0973*  ; 16 colour palette constants
04B25E             0974*  c_black: equ 0
04B25E             0975*  c_red_dk: equ 1
04B25E             0976*  c_green_dk: equ 2
04B25E             0977*  c_yellow_dk: equ 3
04B25E             0978*  c_blue_dk: equ 4
04B25E             0979*  c_magenta_dk: equ 5
04B25E             0980*  c_cyan_dk: equ 6
04B25E             0981*  c_grey: equ 7
04B25E             0982*  c_grey_dk: equ 8
04B25E             0983*  c_red: equ 9
04B25E             0984*  c_green: equ 10
04B25E             0985*  c_yellow: equ 11
04B25E             0986*  c_blue: equ 12
04B25E             0987*  c_magenta: equ 13
04B25E             0988*  c_cyan: equ 14
04B25E             0989*  c_white: equ 15
04B25E             0990*  
04B25E             0991*  ; VDU 25, mode, x; y;: PLOT command
04B25E             0992*  ; inputs: a=mode, bc=x0, de=y0
04B25E             0993*  vdu_plot:
04B25E 32 78 B2 04 0994*      ld (@mode),a
04B262 ED 43 79 B2 0995*      ld (@x0),bc
       04          
04B267 ED 53 7B B2 0996*      ld (@y0),de
       04          
04B26C 21 77 B2 04 0997*  	ld hl,@cmd
04B270 01 06 00 00 0998*  	ld bc,@end-@cmd
04B274 5B DF       0999*  	rst.lil $18
04B276 C9          1000*  	ret
04B277 19          1001*  @cmd:   db 25
04B278 00          1002*  @mode:  db 0
04B279 00 00       1003*  @x0: 	dw 0
04B27B 00 00       1004*  @y0: 	dw 0
04B27D 00          1005*  @end:   db 0 ; extra byte to soak up deu
04B27E             1006*  
04B27E             1007*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B27E             1008*  ; &E8-&EF 	232-239 	Bitmap plot §
04B27E             1009*  ; VDU 25, mode, x; y;: PLOT command
04B27E             1010*  ; inputs: bc=x0, de=y0
04B27E             1011*  ; prerequisites: vdu_buff_select
04B27E             1012*  vdu_plot_bmp:
04B27E ED 43 95 B2 1013*      ld (@x0),bc
       04          
04B283 ED 53 97 B2 1014*      ld (@y0),de
       04          
04B288 21 93 B2 04 1015*  	ld hl,@cmd
04B28C 01 06 00 00 1016*  	ld bc,@end-@cmd
04B290 5B DF       1017*  	rst.lil $18
04B292 C9          1018*  	ret
04B293 19          1019*  @cmd:   db 25
04B294 ED          1020*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04B295 00 00       1021*  @x0: 	dw 0x0000
04B297 00 00       1022*  @y0: 	dw 0x0000
04B299 00          1023*  @end:   db 0x00 ; padding
04B29A             1024*  
04B29A             1025*  ; https://agonconsole8.github.io/agon-docs/VDP---PLOT-Commands.html
04B29A             1026*  ; &E8-&EF 	232-239 	Bitmap plot §
04B29A             1027*  ; VDU 25, mode, x; y;: PLOT command
04B29A             1028*  ; inputs: bc=x0, de=y0
04B29A             1029*  ; USING 16.8 FIXED POINT COORDINATES
04B29A             1030*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B29A             1031*  ;   the fractional portiion of the inputs are truncated
04B29A             1032*  ;   leaving only the 16-bit integer portion
04B29A             1033*  ; prerequisites: vdu_buff_select
04B29A             1034*  vdu_plot_bmp168:
04B29A             1035*  ; populate in the reverse of normal to keep the
04B29A             1036*  ; inputs from stomping on each other
04B29A ED 53 B8 B2 1037*      ld (@y0-1),de
       04          
04B29F ED 43 B6 B2 1038*      ld (@x0-1),bc
       04          
04B2A4 3E ED       1039*      ld a,plot_bmp+dr_abs_fg ; 0xED
04B2A6 32 B6 B2 04 1040*      ld (@mode),a ; restore the mode byte that got stomped on by bcu
04B2AA 21 B5 B2 04 1041*  	ld hl,@cmd
04B2AE 01 06 00 00 1042*  	ld bc,@end-@cmd
04B2B2 5B DF       1043*  	rst.lil $18
04B2B4 C9          1044*  	ret
04B2B5 19          1045*  @cmd:   db 25
04B2B6 ED          1046*  @mode:  db plot_bmp+dr_abs_fg ; 0xED
04B2B7 00 00       1047*  @x0: 	dw 0x0000
04B2B9 00 00       1048*  @y0: 	dw 0x0000
04B2BB             1049*  @end:  ; no padding required b/c we shifted de right
04B2BB             1050*  
04B2BB             1051*  ; draw a filled rectangle
04B2BB             1052*  vdu_plot_rf:
04B2BB ED 43 E2 B2 1053*      ld (@x0),bc
       04          
04B2C0 ED 53 E4 B2 1054*      ld (@y0),de
       04          
04B2C5 DD 22 E8 B2 1055*      ld (@x1),ix
       04          
04B2CA FD 22 EA B2 1056*      ld (@y1),iy
       04          
04B2CF 3E 19       1057*      ld a,25 ; we have to reload the 2nd plot command
04B2D1 32 E6 B2 04 1058*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04B2D5 21 E0 B2 04 1059*  	ld hl,@cmd0
04B2D9 01 0C 00 00 1060*  	ld bc,@end-@cmd0
04B2DD 5B DF       1061*  	rst.lil $18
04B2DF C9          1062*      ret
04B2E0 19          1063*  @cmd0:  db 25 ; plot
04B2E1 04          1064*  @arg0:  db plot_sl_both+mv_abs
04B2E2 00 00       1065*  @x0:    dw 0x0000
04B2E4 00 00       1066*  @y0:    dw 0x0000
04B2E6 19          1067*  @cmd1:  db 25 ; plot
04B2E7 65          1068*  @arg1:  db plot_rf+dr_abs_fg
04B2E8 00 00       1069*  @x1:    dw 0x0000
04B2EA 00 00       1070*  @y1:    dw 0x0000
04B2EC 00          1071*  @end:   db 0x00 ; padding
04B2ED             1072*  
04B2ED             1073*  ; draw a filled circle
04B2ED             1074*  vdu_plot_cf:
04B2ED ED 43 14 B3 1075*      ld (@x0),bc
       04          
04B2F2 ED 53 16 B3 1076*      ld (@y0),de
       04          
04B2F7 DD 22 1A B3 1077*      ld (@x1),ix
       04          
04B2FC FD 22 1C B3 1078*      ld (@y1),iy
       04          
04B301 3E 19       1079*      ld a,25 ; we have to reload the 2nd plot command
04B303 32 18 B3 04 1080*      ld (@cmd1),a ; because the 24-bit y0 load stomped on it
04B307 21 12 B3 04 1081*  	ld hl,@cmd0
04B30B 01 0C 00 00 1082*  	ld bc,@end-@cmd0
04B30F 5B DF       1083*  	rst.lil $18
04B311 C9          1084*      ret
04B312 19          1085*  @cmd0:  db 25 ; plot
04B313 04          1086*  @arg0:  db plot_sl_both+mv_abs
04B314 00 00       1087*  @x0:    dw 0x0000
04B316 00 00       1088*  @y0:    dw 0x0000
04B318 19          1089*  @cmd1:  db 25 ; plot
04B319 9D          1090*  @arg1:  db plot_cf+dr_abs_fg
04B31A 00 00       1091*  @x1:    dw 0x0000
04B31C 00 00       1092*  @y1:    dw 0x0000
04B31E 00          1093*  @end:   db 0x00 ; padding
04B31F             1094*  
04B31F             1095*  ; #### from vdu_sprites.asm ####
04B31F             1096*  ; ; https://github.com/AgonConsole8/agon-docs/blob/main/VDP---Bitmaps-API.md
04B31F             1097*  ; the VDP can support up to 256 sprites. They must be defined
04B31F             1098*  ; contiguously, and so the first sprite is sprite 0.
04B31F             1099*  ; (In contrast, bitmaps can have any ID from 0 to 65534.)
04B31F             1100*  ; Once a selection of sprites have been defined, you can activate
04B31F             1101*  ; them using the VDU 23, 27, 7, n command, where n is the number
04B31F             1102*  ; of sprites to activate. This will activate the first n sprites,
04B31F             1103*  ; starting with sprite 0. All sprites from 0 to n-1 must be defined.
04B31F             1104*  
04B31F             1105*  ; A single sprite can have multiple "frames", referring to
04B31F             1106*  ; different bitmaps.
04B31F             1107*  ; (These bitmaps do not need to be the same size.)
04B31F             1108*  ; This allows a sprite to include an animation sequence,
04B31F             1109*  ; which can be stepped through one frame at a time, or picked
04B31F             1110*  ; in any order.
04B31F             1111*  
04B31F             1112*  ; Any format of bitmap can be used as a sprite frame. It should
04B31F             1113*  ; be noted however that "native" format bitmaps are not
04B31F             1114*  ; recommended for use as sprite frames, as they cannot get
04B31F             1115*  ; erased from the screen. (As noted above, the "native" bitmap
04B31F             1116*  ; format is not really intended for general use.) This is part
04B31F             1117*  ; of why from Agon Console8 VDP 2.6.0 bitmaps captured from the
04B31F             1118*  ; screen are now stored in RGBA2222 format.
04B31F             1119*  
04B31F             1120*  ; An "active" sprite can be hidden, so it will stop being drawn,
04B31F             1121*  ; and then later shown again.
04B31F             1122*  
04B31F             1123*  ; Moving sprites around the screen is done by changing the
04B31F             1124*  ; position of the sprite. This can be done either by setting
04B31F             1125*  ; the absolute position of the sprite, or by moving the sprite
04B31F             1126*  ; by a given number of pixels. (Sprites are positioned using
04B31F             1127*  ; pixel coordinates, and not by the logical OS coordinate system.)
04B31F             1128*  ; In the current sprite system, sprites will not update their
04B31F             1129*  ; position on-screen until either another drawing operation is
04B31F             1130*  ; performed or an explicit VDU 23, 27, 15 command is performed.
04B31F             1131*  
04B31F             1132*  ; Here are the sprite commands:
04B31F             1133*  ;
04B31F             1134*  ; VDU 23, 27, 4,  n: Select sprite n
04B31F             1135*  ; inputs: a is the 8-bit sprite id
04B31F             1136*  ; vdu_sprite_select:
04B31F             1137*  
04B31F             1138*  ; VDU 23, 27, 5:  Clear frames in current sprite
04B31F             1139*  ; inputs: none
04B31F             1140*  ; prerequisites: vdu_sprite_select
04B31F             1141*  ; vdu_sprite_clear_frames:
04B31F             1142*  
04B31F             1143*  ; VDU 23, 27, 6,  n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B31F             1144*  ; inputs: a is the 8-bit bitmap number
04B31F             1145*  ; prerequisites: vdu_sprite_select
04B31F             1146*  ; vdu_sprite_add_bmp:
04B31F             1147*  
04B31F             1148*  ; VDU 23, 27, 7,  n: Activate n sprites
04B31F             1149*  ; inputs: a is the number of sprites to activate
04B31F             1150*  ; vdu_sprite_activate:
04B31F             1151*  
04B31F             1152*  ; VDU 23, 27, 8:  Select next frame of current sprite
04B31F             1153*  ; inputs: none
04B31F             1154*  ; prerequisites: vdu_sprite_select
04B31F             1155*  ; vdu_sprite_next_frame:
04B31F             1156*  
04B31F             1157*  ; VDU 23, 27, 9:  Select previous frame of current sprite
04B31F             1158*  ; inputs: none
04B31F             1159*  ; prerequisites: vdu_sprite_select
04B31F             1160*  ; vdu_sprite_prev_frame:
04B31F             1161*  
04B31F             1162*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B31F             1163*  ; inputs: a is frame number to select
04B31F             1164*  ; prerequisites: vdu_sprite_select
04B31F             1165*  ; vdu_sprite_select_frame:
04B31F             1166*  
04B31F             1167*  ; VDU 23, 27, 11: Show current sprite
04B31F             1168*  ; inputs: none
04B31F             1169*  ; prerequisites: vdu_sprite_select
04B31F             1170*  ; vdu_sprite_show:
04B31F             1171*  
04B31F             1172*  ; VDU 23, 27, 12: Hide current sprite
04B31F             1173*  ; inputs: none
04B31F             1174*  ; prerequisites: vdu_sprite_select
04B31F             1175*  ; vdu_sprite_hide:
04B31F             1176*  
04B31F             1177*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B31F             1178*  ; inputs: bc is x coordinate, de is y coordinate
04B31F             1179*  ; prerequisites: vdu_sprite_select
04B31F             1180*  ; vdu_sprite_move_abs:
04B31F             1181*  ;
04B31F             1182*  ; USING 16.8 FIXED POINT COORDINATES
04B31F             1183*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B31F             1184*  ;   the fractional portiion of the inputs are truncated
04B31F             1185*  ;   leaving only the 16-bit integer portion
04B31F             1186*  ; prerequisites: vdu_sprite_select
04B31F             1187*  ; vdu_sprite_move_abs168:
04B31F             1188*  
04B31F             1189*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B31F             1190*  ; inputs: bc is x coordinate, de is y coordinate
04B31F             1191*  ; prerequisites: vdu_sprite_select
04B31F             1192*  ; vdu_sprite_move_rel:
04B31F             1193*  ;
04B31F             1194*  ; USING 16.8 FIXED POINT COORDINATES
04B31F             1195*  ; inputs: ub.c is dx, ud.e is dy
04B31F             1196*  ;   the fractional portiion of the inputs are truncated
04B31F             1197*  ;   leaving only the 16-bit integer portion
04B31F             1198*  ; prerequisites: vdu_sprite_select
04B31F             1199*  ; vdu_sprite_move_rel168:
04B31F             1200*  
04B31F             1201*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B31F             1202*  ; inputs: none
04B31F             1203*  ; vdu_sprite_update:
04B31F             1204*  
04B31F             1205*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B31F             1206*  ; inputs: none
04B31F             1207*  ; vdu_sprite_bmp_reset:
04B31F             1208*  
04B31F             1209*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B31F             1210*  ; inputs: none
04B31F             1211*  ; vdu_sprite_reset:
04B31F             1212*  
04B31F             1213*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B31F             1214*  ; inputs: a is the GCOL paint mode
04B31F             1215*  ; prerequisites: vdu_sprite_select
04B31F             1216*  ; vdu_sprite_set_gcol:
04B31F             1217*  
04B31F             1218*  ; VDU 23, 27, &26, n;: Add bitmap n as a frame to current sprite using a 16-bit buffer ID
04B31F             1219*  ; inputs: hl=bufferId
04B31F             1220*  ; prerequisites: vdu_sprite_select
04B31F             1221*  ; vdu_sprite_add_buff:
04B31F             1222*  
04B31F             1223*  @dummy_label: ; dummy label to serve as a break from the above comments and the below code
04B31F             1224*  
04B31F             1225*  ; VDU 23, 27, 4, n: Select sprite n
04B31F             1226*  ; inputs: a is the 8-bit sprite id
04B31F             1227*  vdu_sprite_select:
04B31F 32 31 B3 04 1228*      ld (@sprite),a
04B323 21 2E B3 04 1229*      ld hl,@cmd
04B327 01 04 00 00 1230*      ld bc,@end-@cmd
04B32B 5B DF       1231*      rst.lil $18
04B32D C9          1232*      ret
04B32E 17 1B 04    1233*  @cmd:    db 23,27,4
04B331 00          1234*  @sprite: db 0x00
04B332             1235*  @end:
04B332             1236*  
04B332             1237*  ; VDU 23, 27, 5: Clear frames in current sprite
04B332             1238*  ; inputs: none
04B332             1239*  ; prerequisites: vdu_sprite_select
04B332             1240*  vdu_sprite_clear_frames:
04B332 21 3D B3 04 1241*      ld hl,@cmd
04B336 01 03 00 00 1242*      ld bc,@end-@cmd
04B33A 5B DF       1243*      rst.lil $18
04B33C C9          1244*      ret
04B33D 17 1B 05    1245*  @cmd: db 23,27,5
04B340             1246*  @end:
04B340             1247*  
04B340             1248*  ; VDU 23, 27, 6, n: Add bitmap n as a frame to current sprite (where bitmap's buffer ID is 64000+n)
04B340             1249*  ; inputs: a is the 8-bit bitmap number
04B340             1250*  ; prerequisites: vdu_sprite_select
04B340             1251*  vdu_sprite_add_bmp:
04B340 32 52 B3 04 1252*      ld (@bmp),a
04B344 21 4F B3 04 1253*      ld hl,@cmd
04B348 01 04 00 00 1254*      ld bc,@end-@cmd
04B34C 5B DF       1255*      rst.lil $18
04B34E C9          1256*      ret
04B34F 17 1B 06    1257*  @cmd: db 23,27,6
04B352 00          1258*  @bmp: db 0x00
04B353             1259*  @end:
04B353             1260*  
04B353             1261*  ; VDU 23, 27, 7, n: Activate n sprites
04B353             1262*  ; inputs: a is the number of sprites to activate
04B353             1263*  vdu_sprite_activate:
04B353 32 65 B3 04 1264*      ld (@num),a
04B357 21 62 B3 04 1265*      ld hl,@cmd
04B35B 01 04 00 00 1266*      ld bc,@end-@cmd
04B35F 5B DF       1267*      rst.lil $18
04B361 C9          1268*      ret
04B362 17 1B 07    1269*  @cmd: db 23,27,7
04B365 00          1270*  @num: db 0x00
04B366             1271*  @end:
04B366             1272*  
04B366             1273*  ; VDU 23, 27, 8: Select next frame of current sprite
04B366             1274*  ; inputs: none
04B366             1275*  ; prerequisites: vdu_sprite_select
04B366             1276*  vdu_sprite_next_frame:
04B366 21 71 B3 04 1277*      ld hl,@cmd
04B36A 01 03 00 00 1278*      ld bc,@end-@cmd
04B36E 5B DF       1279*      rst.lil $18
04B370 C9          1280*      ret
04B371 17 1B 08    1281*  @cmd: db 23,27,8
04B374             1282*  @end:
04B374             1283*  
04B374             1284*  ; VDU 23, 27, 9: Select previous frame of current sprite
04B374             1285*  ; inputs: none
04B374             1286*  ; prerequisites: vdu_sprite_select
04B374             1287*  vdu_sprite_prev_frame:
04B374 21 7F B3 04 1288*      ld hl,@cmd
04B378 01 03 00 00 1289*      ld bc,@end-@cmd
04B37C 5B DF       1290*      rst.lil $18
04B37E C9          1291*      ret
04B37F 17 1B 09    1292*  @cmd: db 23,27,9
04B382             1293*  @end:
04B382             1294*  
04B382             1295*  ; VDU 23, 27, 10, n: Select the nth frame of current sprite
04B382             1296*  ; inputs: a is frame number to select
04B382             1297*  ; prerequisites: vdu_sprite_select
04B382             1298*  vdu_sprite_select_frame:
04B382 32 94 B3 04 1299*      ld (@frame),a
04B386 21 91 B3 04 1300*      ld hl,@cmd
04B38A 01 04 00 00 1301*      ld bc,@end-@cmd
04B38E 5B DF       1302*      rst.lil $18
04B390 C9          1303*      ret
04B391 17 1B 0A    1304*  @cmd:    db 23,27,10
04B394 00          1305*  @frame:  db 0x00
04B395             1306*  @end:
04B395             1307*  
04B395             1308*  ; VDU 23, 27, 11: Show current sprite
04B395             1309*  ; inputs: none
04B395             1310*  ; prerequisites: vdu_sprite_select
04B395             1311*  vdu_sprite_show:
04B395 21 A0 B3 04 1312*      ld hl,@cmd
04B399 01 03 00 00 1313*      ld bc,@end-@cmd
04B39D 5B DF       1314*      rst.lil $18
04B39F C9          1315*      ret
04B3A0 17 1B 0B    1316*  @cmd: db 23,27,11
04B3A3             1317*  @end:
04B3A3             1318*  
04B3A3             1319*  ; VDU 23, 27, 12: Hide current sprite
04B3A3             1320*  ; inputs: none
04B3A3             1321*  ; prerequisites: vdu_sprite_select
04B3A3             1322*  vdu_sprite_hide:
04B3A3 21 AE B3 04 1323*      ld hl,@cmd
04B3A7 01 03 00 00 1324*      ld bc,@end-@cmd
04B3AB 5B DF       1325*      rst.lil $18
04B3AD C9          1326*      ret
04B3AE 17 1B 0C    1327*  @cmd: db 23,27,12
04B3B1             1328*  @end:
04B3B1             1329*  
04B3B1             1330*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B3B1             1331*  ; inputs: bc is x coordinate, de is y coordinate
04B3B1             1332*  ; prerequisites: vdu_sprite_select
04B3B1             1333*  vdu_sprite_move_abs:
04B3B1 ED 43 C9 B3 1334*      ld (@xpos),bc
       04          
04B3B6 ED 53 CB B3 1335*      ld (@ypos),de
       04          
04B3BB 21 C6 B3 04 1336*      ld hl,@cmd
04B3BF 01 07 00 00 1337*      ld bc,@end-@cmd
04B3C3 5B DF       1338*      rst.lil $18
04B3C5 C9          1339*      ret
04B3C6 17 1B 0D    1340*  @cmd:  db 23,27,13
04B3C9 00 00       1341*  @xpos: dw 0x0000
04B3CB 00 00       1342*  @ypos: dw 0x0000
04B3CD 00          1343*  @end:  db 0x00 ; padding
04B3CE             1344*  
04B3CE             1345*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B3CE             1346*  ; inputs: bc is x coordinate, de is y coordinate
04B3CE             1347*  ; prerequisites: vdu_sprite_select
04B3CE             1348*  vdu_sprite_move_rel:
04B3CE ED 43 E6 B3 1349*      ld (@dx),bc
       04          
04B3D3 ED 53 E8 B3 1350*      ld (@dy),de
       04          
04B3D8 21 E3 B3 04 1351*      ld hl,@cmd
04B3DC 01 07 00 00 1352*      ld bc,@end-@cmd
04B3E0 5B DF       1353*      rst.lil $18
04B3E2 C9          1354*      ret
04B3E3 17 1B 0E    1355*  @cmd: db 23,27,14
04B3E6 00 00       1356*  @dx:  dw 0x0000
04B3E8 00 00       1357*  @dy:  dw 0x0000
04B3EA 00          1358*  @end: db 0x00 ; padding
04B3EB             1359*  
04B3EB             1360*  ; VDU 23, 27, 13, x; y;: Move current sprite to pixel position x, y
04B3EB             1361*  ; USING 16.8 FIXED POINT COORDINATES
04B3EB             1362*  ; inputs: ub.c is x coordinate, ud.e is y coordinate
04B3EB             1363*  ;   the fractional portiion of the inputs are truncated
04B3EB             1364*  ;   leaving only the 16-bit integer portion
04B3EB             1365*  ; prerequisites: vdu_sprite_select
04B3EB             1366*  vdu_sprite_move_abs168:
04B3EB             1367*  ; populate in the reverse of normal to keep the
04B3EB             1368*  ; inputs from stomping on each other
04B3EB ED 53 0A B4 1369*      ld (@ypos-1),de
       04          
04B3F0 ED 43 08 B4 1370*      ld (@xpos-1),bc
       04          
04B3F5 3E 0D       1371*      ld a,13       ; restore the final byte of the command
04B3F7 32 08 B4 04 1372*      ld (@cmd+2),a ; string that got stomped on by bcu
04B3FB 21 06 B4 04 1373*      ld hl,@cmd
04B3FF 01 07 00 00 1374*      ld bc,@end-@cmd
04B403 5B DF       1375*      rst.lil $18
04B405 C9          1376*      ret
04B406 17 1B 0D    1377*  @cmd:  db 23,27,13
04B409 00 00       1378*  @xpos: dw 0x0000
04B40B 00 00       1379*  @ypos: dw 0x0000
04B40D             1380*  @end:  ; no padding required b/c we shifted de right
04B40D             1381*  
04B40D             1382*  ; VDU 23, 27, 14, x; y;: Move current sprite by x, y pixels
04B40D             1383*  ; USING 16.8 FIXED POINT COORDINATES
04B40D             1384*  ; inputs: ub.c is dx, ud.e is dy
04B40D             1385*  ;   the fractional portiion of the inputs are truncated
04B40D             1386*  ;   leaving only the 16-bit integer portion
04B40D             1387*  ; prerequisites: vdu_sprite_select
04B40D             1388*  vdu_sprite_move_rel168:
04B40D             1389*  ; populate in the reverse of normal to keep the
04B40D             1390*  ; inputs from stomping on each other
04B40D ED 53 2C B4 1391*      ld (@dy-1),de
       04          
04B412 ED 43 2A B4 1392*      ld (@dx-1),bc
       04          
04B417 3E 0E       1393*      ld a,14       ; restore the final byte of the command
04B419 32 2A B4 04 1394*      ld (@cmd+2),a ; string that got stomped on by bcu
04B41D 21 28 B4 04 1395*      ld hl,@cmd
04B421 01 07 00 00 1396*      ld bc,@end-@cmd
04B425 5B DF       1397*      rst.lil $18
04B427 C9          1398*      ret
04B428 17 1B 0E    1399*  @cmd:  db 23,27,14
04B42B 00 00       1400*  @dx: dw 0x0000
04B42D 00 00       1401*  @dy: dw 0x0000
04B42F             1402*  @end:  ; no padding required b/c we shifted de right
04B42F             1403*  
04B42F             1404*  ; VDU 23, 27, 15: Update the sprites in the GPU
04B42F             1405*  ; inputs: none
04B42F             1406*  vdu_sprite_update:
04B42F 21 3A B4 04 1407*      ld hl,@cmd
04B433 01 03 00 00 1408*      ld bc,@end-@cmd
04B437 5B DF       1409*      rst.lil $18
04B439 C9          1410*      ret
04B43A 17 1B 0F    1411*  @cmd: db 23,27,15
04B43D             1412*  @end:
04B43D             1413*  
04B43D             1414*  ; VDU 23, 27, 16: Reset bitmaps and sprites and clear all data
04B43D             1415*  ; inputs: none
04B43D             1416*  vdu_sprite_bmp_reset:
04B43D 21 48 B4 04 1417*      ld hl,@cmd
04B441 01 03 00 00 1418*      ld bc,@end-@cmd
04B445 5B DF       1419*      rst.lil $18
04B447 C9          1420*      ret
04B448 17 1B 10    1421*  @cmd: db 23,27,16
04B44B             1422*  @end:
04B44B             1423*  
04B44B             1424*  ; VDU 23, 27, 17: Reset sprites (only) and clear all data
04B44B             1425*  ; inputs: none
04B44B             1426*  vdu_sprite_reset:
04B44B 21 56 B4 04 1427*      ld hl,@cmd
04B44F 01 03 00 00 1428*      ld bc,@end-@cmd
04B453 5B DF       1429*      rst.lil $18
04B455 C9          1430*      ret
04B456 17 1B 11    1431*  @cmd: db 23,27,17
04B459             1432*  @end:
04B459             1433*  
04B459             1434*  ; VDU 23, 27, 18, n: Set the current sprite GCOL paint mode to n **
04B459             1435*  ; inputs: a is the GCOL paint mode
04B459             1436*  ; prerequisites: vdu_sprite_select
04B459             1437*  vdu_sprite_set_gcol:
04B459 32 6B B4 04 1438*      ld (@mode),a
04B45D 21 68 B4 04 1439*      ld hl,@cmd
04B461 01 04 00 00 1440*      ld bc,@end-@cmd
04B465 5B DF       1441*      rst.lil $18
04B467 C9          1442*      ret
04B468 17 1B 12    1443*  @cmd:  db 23,27,18
04B46B 00          1444*  @mode: db 0x00
04B46C             1445*  @end:
04B46C             1446*  
04B46C             1447*  ; VDU 23, 27, &26, n;: Add bitmap bufferId
04B46C             1448*  ;     as a frame to current sprite using a 16-bit buffer ID
04B46C             1449*  ; inputs: hl=bufferId
04B46C             1450*  ; prerequisites: vdu_sprite_select
04B46C             1451*  vdu_sprite_add_buff:
04B46C 22 7E B4 04 1452*      ld (@bufferId),hl
04B470 21 7B B4 04 1453*      ld hl,@cmd
04B474 01 05 00 00 1454*      ld bc,@end-@cmd
04B478 5B DF       1455*      rst.lil $18
04B47A C9          1456*      ret
04B47B 17 1B 26    1457*  @cmd:      db 23,27,0x26
04B47E 00 00       1458*  @bufferId: dw 0x0000
04B480 00          1459*  @end:      db 0x00 ; padding
04B481             1460*  
04B481             1461*  
04B481             1462*  ; #### from sfx.asm ####
04B481 00          1463*  sfx_last_channel: db 0x00 ; 8-bit value between 0 and 31
04B482             1464*  
04B482             1465*  ; ; play a sound effect on the next available channel at full volume for its full duration
04B482             1466*  ; ; inputs: hl = bufferId
04B482             1467*  ; sfx_play:
04B482             1468*  ; 	ld iy,sfx_last_channel
04B482             1469*  ; 	ld a,(iy+0)
04B482             1470*  ; 	ld (@bufferId),hl
04B482             1471*  ; @find_next_channel:
04B482             1472*  ; 	inc a ; bump to next channel
04B482             1473*  ; 	and 31 ; modulo 32 channel
04B482             1474*  ; 	cp (iy+0) ; if this is zero we've wrapped around and not found a free channel
04B482             1475*  ; 	ret z ; so we return to caller without doing anything
04B482             1476*  ; 	push af ; back up channel
04B482             1477*  ; 	call vdu_channel_status ; a comes back with channel status bitmask
04B482             1478*  ; 	and %00000010 ; bit 1 is the "is playing" flag
04B482             1479*  ; 	jr z,@play_sfx ; if not playing, we can use this channel
04B482             1480*  ; 	pop af ; restore channel
04B482             1481*  ; 	jr @find_next_channel ; try the next channel
04B482             1482*  ; @play_sfx:
04B482             1483*  ; 	pop af ; restore channel
04B482             1484*  ; 	ld (iy+0),a ; store channel
04B482             1485*  ; 	ld hl,(@bufferId)
04B482             1486*  ; 	ld c,a ; channel
04B482             1487*  ; 	ld b,127 ; full volume
04B482             1488*  ; 	ld de,1000 ; 1 second duration (should have no effect)
04B482             1489*  ; 	jp vdu_play_sample
04B482             1490*  ; @bufferId:
04B482             1491*  ; 	dw 0x0000 ; 16-bit value
04B482             1492*  
04B482             1493*  sfx_play_random_hurt:
04B482 CD C6 BE 04 1494*  	call rand_8
04B486 E6 03       1495*  	and 3
04B488 FE 00       1496*  	cp 0
04B48A CA B1 C5 04 1497*  	jp z,sfx_play_ahh
04B48E FE 01       1498*  	cp 1
04B490 CA BD C5 04 1499*  	jp z,sfx_play_augh
04B494 FE 02       1500*  	cp 2
04B496 CA C9 C5 04 1501*  	jp z,sfx_play_ayee
04B49A C3 95 C6 04 1502*  	jp sfx_play_ugh
04B49E             1503*  
04B49E             1504*  ; inputs: bc is the number of sounds to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04B49E             1505*  sfx_load_main:
04B49E 21 00 00 00 1506*      ld hl,0
04B4A2 22 DB BE 04 1507*      ld (cur_file_idx),hl
04B4A6             1508*  sfx_load_main_loop:
04B4A6             1509*  ; back up loop counter
04B4A6 C5          1510*      push bc
04B4A7             1511*  ; load the next sound
04B4A7 CD FB B4 04 1512*      call load_next_sound
04B4AB             1513*  ; draw all the things
04B4AB CD 44 C0 04 1514*      call tmp_draw_all_the_things
04B4AF             1515*  ; move bj
04B4AF CD CC BF 04 1516*  	call move_bj
04B4B3             1517*  ; print welcome message
04B4B3 DD 21 CA 82 1518*  	ld ix,font_itc_honda
       04          
04B4B8 21 AE C8 04 1519*  	ld hl,hello_world
04B4BC 01 20 00 00 1520*  	ld bc,32
04B4C0 11 02 00 00 1521*  	ld de,2
04B4C4 CD 27 68 04 1522*  	call font_bmp_print
04B4C8             1523*  ; print current filename
04B4C8 CD 44 AF 04 1524*  	call vdu_cls
04B4CC 2A DE BE 04 1525*  	ld hl,(cur_filename)
04B4D0 CD 43 B5 04 1526*  	call printString
04B4D4 CD 58 B5 04 1527*  	call printNewLine
04B4D8             1528*  
04B4D8             1529*  ; print current load stopwatch
04B4D8 21 D0 C8 04 1530*  	ld hl,loading_time
04B4DC CD 43 B5 04 1531*  	call printString
04B4E0 CD 60 C8 04 1532*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04B4E4 CD 91 B5 04 1533*  	call printDec
04B4E8             1534*  
04B4E8             1535*  ; flip screen
04B4E8 CD 13 B1 04 1536*      call vdu_flip
04B4EC             1537*  ; ; delay for a bit so sound can play
04B4EC             1538*  ;     ld a,%10000000 ; 1 second delay
04B4EC             1539*  ;     call multiPurposeDelay
04B4EC             1540*  ; decrement loop counter
04B4EC C1          1541*      pop bc
04B4ED 0B          1542*  	dec bc
04B4EE             1543*  ; ; DEBUG: DUMP REGISTERS
04B4EE             1544*  ; 	push bc
04B4EE             1545*  ; 	call dumpRegistersHex
04B4EE             1546*  ; 	call vdu_flip
04B4EE             1547*  ; 	pop bc
04B4EE             1548*  ; ; END DEBUG
04B4EE 79          1549*      ld a,c
04B4EF B7          1550*      or a
04B4F0 C2 A6 B4 04 1551*      jp nz,sfx_load_main_loop
04B4F4 78          1552*      ld a,b
04B4F5 B7          1553*      or a
04B4F6 C2 A6 B4 04 1554*      jp nz,sfx_load_main_loop
04B4FA C9          1555*      ret
04B4FB             1556*  
04B4FB             1557*  load_next_sound:
04B4FB             1558*  ; look up the load routine for the current file index
04B4FB 2A DB BE 04 1559*  	ld hl,(cur_file_idx)
04B4FF 29          1560*  	add hl,hl ; multiply current index by 2 ...
04B500 ED 5B DB BE 1561*  	ld de,(cur_file_idx)
       04          
04B505 19          1562*  	add hl,de ; ... now by 3
04B506 ED 5B E7 BE 1563*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04B50B 19          1564*  	add hl,de
04B50C ED 27       1565*  	ld hl,(hl) ; hl is pointing to load routine address
04B50E 22 13 B5 04 1566*  	ld (@jump_addr+1),hl ; self-modifying code ...
04B512             1567*  @jump_addr:
04B512 CD 00 00 00 1568*  	call 0 ; call the sound load routine
04B516             1569*  ; look up the buffer id for the current file
04B516 2A DB BE 04 1570*  	ld hl,(cur_file_idx)
04B51A 29          1571*  	add hl,hl ; multiply current index by 2 ...
04B51B ED 5B DB BE 1572*  	ld de,(cur_file_idx)
       04          
04B520 19          1573*  	add hl,de ; ... now by 3
04B521 ED 5B E4 BE 1574*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04B526 19          1575*  	add hl,de
04B527 ED 27       1576*  	ld hl,(hl)
04B529 22 E1 BE 04 1577*  	ld (cur_buffer_id),hl
04B52D             1578*  ; bump the current file index
04B52D 2A DB BE 04 1579*  	ld hl,(cur_file_idx)
04B531 23          1580*  	inc hl
04B532 22 DB BE 04 1581*  	ld (cur_file_idx),hl
04B536 C9          1582*  	ret
04B537             1583*  
04B537             1584*  ; load a sound file to a buffer
04B537             1585*  ; inputs: hl = bufferId ; ix = file size
04B537             1586*  vdu_load_sfx:
04B537             1587*  ; back up input parameters
04B537 E5          1588*      push hl ; bufferId
04B538             1589*  ; load the sound
04B538 CD BD CA 04 1590*  	call vdu_load_buffer_from_file
04B53C             1591*  ; now make the buffer a sound sample
04B53C E1          1592*      pop hl ; bufferId
04B53D AF          1593*  	xor a ; zero is the magic number for 8-bit signed PCM 16KHz
04B53E             1594*      ; push hl ; bufferId
04B53E CD 2D 01 04 1595*  	call vdu_buffer_to_sound
04B542             1596*  ; ; play the loaded sound
04B542             1597*  ;     ld c,0 ; channel
04B542             1598*  ;     ld b,127 ; full volume
04B542             1599*  ;     ld de,1000 ; 1 second duration
04B542             1600*  ;     pop hl ; bufferId
04B542             1601*  ;     call vdu_play_sample
04B542 C9          1602*      ret
04B543             0025       include "src/asm/functions.asm"
04B543             0001*  ; https://github.com/envenomator/Agon/blob/master/ez80asm%20examples%20(annotated)/functions.s
04B543             0002*  ; Print a zero-terminated string
04B543             0003*  ; HL: Pointer to string
04B543             0004*  printString:
04B543 C5          0005*  	PUSH	BC
04B544 01 00 00 00 0006*  	LD		BC,0
04B548 3E 00       0007*  	LD 	 	A,0
04B54A 5B DF       0008*  	RST.LIL 18h
04B54C C1          0009*  	POP		BC
04B54D C9          0010*  	RET
04B54E             0011*  ; print a VDU sequence
04B54E             0012*  ; HL: Pointer to VDU sequence - <1 byte length> <data>
04B54E             0013*  sendVDUsequence:
04B54E C5          0014*  	PUSH	BC
04B54F 01 00 00 00 0015*  	LD		BC, 0
04B553 4E          0016*  	LD		C, (HL)
04B554 5B DF       0017*  	RST.LIL	18h
04B556 C1          0018*  	POP		BC
04B557 C9          0019*  	RET
04B558             0020*  ; Print Newline sequence to VDP
04B558             0021*  printNewLine:
04B558 3E 0D       0022*  	LD	A, '\r'
04B55A 5B D7       0023*  	RST.LIL 10h
04B55C 3E 0A       0024*  	LD	A, '\n'
04B55E 5B D7       0025*  	RST.LIL 10h
04B560 C9          0026*  	RET
04B561             0027*  ; Print a 24-bit HEX number
04B561             0028*  ; HLU: Number to print
04B561             0029*  printHex24:
04B561 E5          0030*  	PUSH	HL
04B562 21 02 00 00 0031*  	LD		HL, 2
04B566 39          0032*  	ADD		HL, SP
04B567 7E          0033*  	LD		A, (HL)
04B568 E1          0034*  	POP		HL
04B569 CD 73 B5 04 0035*  	CALL	printHex8
04B56D             0036*  ; Print a 16-bit HEX number
04B56D             0037*  ; HL: Number to print
04B56D             0038*  printHex16:
04B56D 7C          0039*  	LD		A,H
04B56E CD 73 B5 04 0040*  	CALL	printHex8
04B572 7D          0041*  	LD		A,L
04B573             0042*  ; Print an 8-bit HEX number
04B573             0043*  ; A: Number to print
04B573             0044*  printHex8:
04B573 4F          0045*  	LD		C,A
04B574 1F          0046*  	RRA
04B575 1F          0047*  	RRA
04B576 1F          0048*  	RRA
04B577 1F          0049*  	RRA
04B578 CD 7D B5 04 0050*  	CALL	@F
04B57C 79          0051*  	LD		A,C
04B57D             0052*  @@:
04B57D E6 0F       0053*  	AND		0Fh
04B57F C6 90       0054*  	ADD		A,90h
04B581 27          0055*  	DAA
04B582 CE 40       0056*  	ADC		A,40h
04B584 27          0057*  	DAA
04B585 5B D7       0058*  	RST.LIL	10h
04B587 C9          0059*  	RET
04B588             0060*  
04B588             0061*  ; Print a 0x HEX prefix
04B588             0062*  DisplayHexPrefix:
04B588 3E 30       0063*  	LD	A, '0'
04B58A 5B D7       0064*  	RST.LIL 10h
04B58C 3E 78       0065*  	LD	A, 'x'
04B58E 5B D7       0066*  	RST.LIL 10h
04B590 C9          0067*  	RET
04B591             0068*  
04B591             0069*  
04B591             0070*  ; Prints the right justified decimal value in HL without leading zeroes
04B591             0071*  ; HL : Value to print
04B591             0072*  printDec:
04B591 11 B5 B5 04 0073*  	LD	 DE, _printDecBuffer
04B595 CD BE B5 04 0074*  	CALL Num2String
04B599             0075*  ; BEGIN MY CODE
04B599             0076*  ; replace leading zeroes with spaces
04B599 21 B5 B5 04 0077*      LD	 HL, _printDecBuffer
04B59D 06 07       0078*      ld   B, 7 ; if HL was 0, we want to keep the final zero
04B59F             0079*  @loop:
04B59F 7E          0080*      LD	 A, (HL)
04B5A0 FE 30       0081*      CP	 '0'
04B5A2 C2 B0 B5 04 0082*      JP	 NZ, @done
04B5A6 3E 20       0083*      LD   A, ' '
04B5A8 77          0084*      LD	 (HL), A
04B5A9 23          0085*      INC	 HL
04B5AA CD 35 AF 04 0086*      CALL vdu_cursor_forward
04B5AE 10 EF       0087*      DJNZ @loop
04B5B0             0088*  @done:
04B5B0             0089*  ; END MY CODE
04B5B0             0090*  	; LD	 HL, _printDecBuffer
04B5B0 CD 43 B5 04 0091*  	CALL printString
04B5B4 C9          0092*  	RET
04B5B5 00 00 00 00 0093*  _printDecBuffer: blkb 9,0 ; nine bytes full of zeroes
       00 00 00 00 
       00          
04B5BE             0094*  
04B5BE             0095*  ; This routine converts the value from HL into it's ASCII representation,
04B5BE             0096*  ; starting to memory location pointing by DE, in decimal form and with leading zeroes
04B5BE             0097*  ; so it will allways be 8 characters length
04B5BE             0098*  ; HL : Value to convert to string
04B5BE             0099*  ; DE : pointer to buffer, at least 8 byte + 0
04B5BE             0100*  Num2String:
04B5BE 01 80 69 67 0101*  	LD	 BC,-10000000
04B5C2 CD F5 B5 04 0102*  	CALL OneDigit
04B5C6 01 C0 BD F0 0103*  	LD	 BC,-1000000
04B5CA CD F5 B5 04 0104*  	CALL OneDigit
04B5CE 01 60 79 FE 0105*  	LD	 BC,-100000
04B5D2 CD F5 B5 04 0106*  	CALL OneDigit
04B5D6 01 F0 D8 FF 0107*  	LD   BC,-10000
04B5DA CD F5 B5 04 0108*  	CALL OneDigit
04B5DE 01 18 FC FF 0109*  	LD   BC,-1000
04B5E2 CD F5 B5 04 0110*  	CALL OneDigit
04B5E6 01 9C FF FF 0111*  	LD   BC,-100
04B5EA CD F5 B5 04 0112*  	CALL OneDigit
04B5EE 0E F6       0113*  	LD   C,-10
04B5F0 CD F5 B5 04 0114*  	CALL OneDigit
04B5F4 48          0115*  	LD   C,B
04B5F5             0116*  OneDigit:
04B5F5 3E 2F       0117*  	LD   A,'0'-1
04B5F7             0118*  DivideMe:
04B5F7 3C          0119*  	INC  A
04B5F8 09          0120*  	ADD  HL,BC
04B5F9 38 FC       0121*  	JR   C,DivideMe
04B5FB ED 42       0122*  	SBC  HL,BC
04B5FD 12          0123*  	LD   (DE),A
04B5FE 13          0124*  	INC  DE
04B5FF C9          0125*  	RET
04B600             0126*  
04B600             0127*  
04B600             0128*  ; #### new functions added by Brandon R. Gates ####
04B600             0129*  
04B600             0130*  ; print the binary representation of the 8-bit value in a
04B600             0131*  ; destroys a, hl, bc
04B600             0132*  printBin8:
04B600 06 08       0133*      ld b,8      ; loop counter for 8 bits
04B602 21 1D B6 04 0134*      ld hl,@cmd  ; set hl to the low byte of the output string
04B606             0135*                  ; (which will be the high bit of the value in a)
04B606             0136*  @loop:
04B606 07          0137*      rlca ; put the next highest bit into carry
04B607 38 04       0138*      jr c,@one
04B609 36 30       0139*      ld (hl),'0'
04B60B 18 02       0140*      jr @next_bit
04B60D             0141*  @one:
04B60D 36 31       0142*      ld (hl),'1'
04B60F             0143*  @next_bit:
04B60F 23          0144*      inc hl
04B610 10 F4       0145*      djnz @loop
04B612             0146*  ; print it
04B612 21 1D B6 04 0147*  	ld hl,@cmd
04B616 01 08 00 00 0148*  	ld bc,@end-@cmd
04B61A 5B DF       0149*  	rst.lil $18
04B61C C9          0150*  	ret
04B61D             0151*  @cmd: ds 8 ; eight bytes for eight bits
04B625             0152*  @end:
04B625             0153*  
04B625             0154*  ; print the binary representation of the 8-bit value in a
04B625             0155*  ; in reverse order (lsb first)
04B625             0156*  ; destroys a, hl, bc
04B625             0157*  printBin8Rev:
04B625 06 08       0158*      ld b,8      ; loop counter for 8 bits
04B627 21 42 B6 04 0159*      ld hl,@cmd  ; set hl to the low byte of the output string
04B62B             0160*                  ; (which will be the high bit of the value in a)
04B62B             0161*  @loop:
04B62B 0F          0162*      rrca ; put the next lowest bit into carry
04B62C 38 04       0163*      jr c,@one
04B62E 36 30       0164*      ld (hl),'0'
04B630 18 02       0165*      jr @next_bit
04B632             0166*  @one:
04B632 36 31       0167*      ld (hl),'1'
04B634             0168*  @next_bit:
04B634 23          0169*      inc hl
04B635 10 F4       0170*      djnz @loop
04B637             0171*  ; print it
04B637 21 42 B6 04 0172*  	ld hl,@cmd
04B63B 01 08 00 00 0173*  	ld bc,@end-@cmd
04B63F 5B DF       0174*  	rst.lil $18
04B641 C9          0175*  	ret
04B642             0176*  @cmd: ds 8 ; eight bytes for eight bits
04B64A             0177*  @end:
04B64A             0178*  
04B64A             0179*  ; print registers to screen in hexidecimal format
04B64A             0180*  ; inputs: none
04B64A             0181*  ; outputs: values of every register printed to screen
04B64A             0182*  ;    values of each register in global scratch memory
04B64A             0183*  ; destroys: nothing
04B64A             0184*  stepRegistersHex:
04B64A             0185*  ; store everything in scratch
04B64A 22 4D B8 04 0186*      ld (uhl),hl
04B64E ED 43 50 B8 0187*      ld (ubc),bc
       04          
04B653 ED 53 53 B8 0188*      ld (ude),de
       04          
04B658 DD 22 56 B8 0189*      ld (uix),ix
       04          
04B65D FD 22 59 B8 0190*      ld (uiy),iy
       04          
04B662 F5          0191*      push af ; fml
04B663 E1          0192*      pop hl  ; thanks, zilog
04B664 22 4A B8 04 0193*      ld (uaf),hl
04B668 F5          0194*      push af ; dammit
04B669             0195*  
04B669             0196*  ; home the cursor
04B669 CD 7C B0 04 0197*      call vdu_home_cursor
04B66D             0198*  
04B66D             0199*  ; print each register
04B66D 21 D6 B7 04 0200*      ld hl,str_afu
04B671 CD 43 B5 04 0201*      call printString
04B675 2A 4A B8 04 0202*      ld hl,(uaf)
04B679 CD 61 B5 04 0203*      call printHex24
04B67D CD 58 B5 04 0204*      call printNewLine
04B681             0205*  
04B681 21 DA B7 04 0206*      ld hl,str_hlu
04B685 CD 43 B5 04 0207*      call printString
04B689 2A 4D B8 04 0208*      ld hl,(uhl)
04B68D CD 61 B5 04 0209*      call printHex24
04B691 CD 58 B5 04 0210*      call printNewLine
04B695             0211*  
04B695 21 DE B7 04 0212*      ld hl,str_bcu
04B699 CD 43 B5 04 0213*      call printString
04B69D 2A 50 B8 04 0214*      ld hl,(ubc)
04B6A1 CD 61 B5 04 0215*      call printHex24
04B6A5 CD 58 B5 04 0216*      call printNewLine
04B6A9             0217*  
04B6A9 21 E2 B7 04 0218*      ld hl,str_deu
04B6AD CD 43 B5 04 0219*      call printString
04B6B1 2A 53 B8 04 0220*      ld hl,(ude)
04B6B5 CD 61 B5 04 0221*      call printHex24
04B6B9 CD 58 B5 04 0222*      call printNewLine
04B6BD             0223*  
04B6BD 21 E6 B7 04 0224*      ld hl,str_ixu
04B6C1 CD 43 B5 04 0225*      call printString
04B6C5 2A 56 B8 04 0226*      ld hl,(uix)
04B6C9 CD 61 B5 04 0227*      call printHex24
04B6CD CD 58 B5 04 0228*      call printNewLine
04B6D1             0229*  
04B6D1 21 EA B7 04 0230*      ld hl,str_iyu
04B6D5 CD 43 B5 04 0231*      call printString
04B6D9 2A 59 B8 04 0232*      ld hl,(uiy)
04B6DD CD 61 B5 04 0233*      call printHex24
04B6E1 CD 58 B5 04 0234*      call printNewLine
04B6E5             0235*  
04B6E5             0236*      ; call vsync
04B6E5             0237*  
04B6E5 CD 58 B5 04 0238*      call printNewLine
04B6E9             0239*  
04B6E9             0240*  ; check for right shift key and quit if pressed
04B6E9             0241*  	MOSCALL mos_getkbmap
04B6E9 3E 1E       0001*M 			LD	A, function
04B6EB 5B CF       0002*M 			RST.LIL	08h
04B6ED             0242*  @stayhere:
04B6ED             0243*  ; 7 RightShift
04B6ED DD CB 00 76 0244*      bit 6,(ix+0)
04B6F1 20 02       0245*      jr nz,@RightShift
04B6F3 18 F8       0246*      jr @stayhere
04B6F5             0247*  @RightShift:
04B6F5 DD CB 0E 86 0248*      res 0,(ix+14) ; debounce the key (hopefully)
04B6F9 3E 80       0249*      ld a,%10000000
04B6FB CD 73 C8 04 0250*      call multiPurposeDelay
04B6FF             0251*  
04B6FF             0252*  ; restore everything
04B6FF 2A 4D B8 04 0253*      ld hl, (uhl)
04B703 ED 4B 50 B8 0254*      ld bc, (ubc)
       04          
04B708 ED 5B 53 B8 0255*      ld de, (ude)
       04          
04B70D DD 2A 56 B8 0256*      ld ix, (uix)
       04          
04B712 FD 2A 59 B8 0257*      ld iy, (uiy)
       04          
04B717 F1          0258*      pop af
04B718             0259*  ; all done
04B718 C9          0260*      ret
04B719             0261*  
04B719             0262*  ; print registers to screen in hexidecimal format
04B719             0263*  ; inputs: none
04B719             0264*  ; outputs: values of every register printed to screen
04B719             0265*  ;    values of each register in global scratch memory
04B719             0266*  ; destroys: nothing
04B719             0267*  dumpRegistersHex:
04B719             0268*  ; store everything in scratch
04B719 22 4D B8 04 0269*      ld (uhl),hl
04B71D ED 43 50 B8 0270*      ld (ubc),bc
       04          
04B722 ED 53 53 B8 0271*      ld (ude),de
       04          
04B727 DD 22 56 B8 0272*      ld (uix),ix
       04          
04B72C FD 22 59 B8 0273*      ld (uiy),iy
       04          
04B731 F5          0274*      push af ; fml
04B732 E1          0275*      pop hl  ; thanks, zilog
04B733 22 4A B8 04 0276*      ld (uaf),hl
04B737 F5          0277*      push af ; dammit
04B738             0278*  
04B738             0279*  ; home the cursor
04B738 CD 7C B0 04 0280*      call vdu_home_cursor
04B73C             0281*  
04B73C             0282*  ; print each register
04B73C 21 D6 B7 04 0283*      ld hl,str_afu
04B740 CD 43 B5 04 0284*      call printString
04B744 2A 4A B8 04 0285*      ld hl,(uaf)
04B748 CD 61 B5 04 0286*      call printHex24
04B74C CD 58 B5 04 0287*      call printNewLine
04B750             0288*  
04B750 21 DA B7 04 0289*      ld hl,str_hlu
04B754 CD 43 B5 04 0290*      call printString
04B758 2A 4D B8 04 0291*      ld hl,(uhl)
04B75C CD 61 B5 04 0292*      call printHex24
04B760 CD 58 B5 04 0293*      call printNewLine
04B764             0294*  
04B764 21 DE B7 04 0295*      ld hl,str_bcu
04B768 CD 43 B5 04 0296*      call printString
04B76C 2A 50 B8 04 0297*      ld hl,(ubc)
04B770 CD 61 B5 04 0298*      call printHex24
04B774 CD 58 B5 04 0299*      call printNewLine
04B778             0300*  
04B778 21 E2 B7 04 0301*      ld hl,str_deu
04B77C CD 43 B5 04 0302*      call printString
04B780 2A 53 B8 04 0303*      ld hl,(ude)
04B784 CD 61 B5 04 0304*      call printHex24
04B788 CD 58 B5 04 0305*      call printNewLine
04B78C             0306*  
04B78C 21 E6 B7 04 0307*      ld hl,str_ixu
04B790 CD 43 B5 04 0308*      call printString
04B794 2A 56 B8 04 0309*      ld hl,(uix)
04B798 CD 61 B5 04 0310*      call printHex24
04B79C CD 58 B5 04 0311*      call printNewLine
04B7A0             0312*  
04B7A0 21 EA B7 04 0313*      ld hl,str_iyu
04B7A4 CD 43 B5 04 0314*      call printString
04B7A8 2A 59 B8 04 0315*      ld hl,(uiy)
04B7AC CD 61 B5 04 0316*      call printHex24
04B7B0 CD 58 B5 04 0317*      call printNewLine
04B7B4             0318*  
04B7B4 CD 9E B1 04 0319*      call vdu_vblank
04B7B8             0320*  
04B7B8 CD 58 B5 04 0321*      call printNewLine
04B7BC             0322*  ; restore everything
04B7BC 2A 4D B8 04 0323*      ld hl, (uhl)
04B7C0 ED 4B 50 B8 0324*      ld bc, (ubc)
       04          
04B7C5 ED 5B 53 B8 0325*      ld de, (ude)
       04          
04B7CA DD 2A 56 B8 0326*      ld ix, (uix)
       04          
04B7CF FD 2A 59 B8 0327*      ld iy, (uiy)
       04          
04B7D4 F1          0328*      pop af
04B7D5             0329*  ; all done
04B7D5 C9          0330*      ret
04B7D6             0331*  
04B7D6 61 66 3D 00 0332*  str_afu: db "af=",0
04B7DA 68 6C 3D 00 0333*  str_hlu: db "hl=",0
04B7DE 62 63 3D 00 0334*  str_bcu: db "bc=",0
04B7E2 64 65 3D 00 0335*  str_deu: db "de=",0
04B7E6 69 78 3D 00 0336*  str_ixu: db "ix=",0
04B7EA 69 79 3D 00 0337*  str_iyu: db "iy=",0
04B7EE             0338*  
04B7EE             0339*  ; print udeuhl to screen in hexidecimal format
04B7EE             0340*  ; inputs: none
04B7EE             0341*  ; outputs: concatenated hexidecimal udeuhl
04B7EE             0342*  ; destroys: nothing
04B7EE             0343*  dumpUDEUHLHex:
04B7EE             0344*  ; store everything in scratch
04B7EE 22 4D B8 04 0345*      ld (uhl),hl
04B7F2 ED 43 50 B8 0346*      ld (ubc),bc
       04          
04B7F7 ED 53 53 B8 0347*      ld (ude),de
       04          
04B7FC DD 22 56 B8 0348*      ld (uix),ix
       04          
04B801 FD 22 59 B8 0349*      ld (uiy),iy
       04          
04B806 F5          0350*      push af
04B807             0351*  
04B807             0352*  ; print each register
04B807             0353*  
04B807 21 41 B8 04 0354*      ld hl,str_udeuhl
04B80B CD 43 B5 04 0355*      call printString
04B80F 2A 53 B8 04 0356*      ld hl,(ude)
04B813 CD 61 B5 04 0357*      call printHex24
04B817 3E 2E       0358*  	ld a,'.'	; print a dot to separate the values
04B819 5B D7       0359*  	rst.lil 10h
04B81B 2A 4D B8 04 0360*      ld hl,(uhl)
04B81F CD 61 B5 04 0361*      call printHex24
04B823 CD 58 B5 04 0362*      call printNewLine
04B827             0363*  
04B827             0364*  ; restore everything
04B827 2A 4D B8 04 0365*      ld hl, (uhl)
04B82B ED 4B 50 B8 0366*      ld bc, (ubc)
       04          
04B830 ED 5B 53 B8 0367*      ld de, (ude)
       04          
04B835 DD 2A 56 B8 0368*      ld ix, (uix)
       04          
04B83A FD 2A 59 B8 0369*      ld iy, (uiy)
       04          
04B83F F1          0370*      pop af
04B840             0371*  ; all done
04B840 C9          0372*      ret
04B841             0373*  
04B841 75 64 65 2E 0374*  str_udeuhl: db "ude.uhl=",0
       75 68 6C 3D 
       00          
04B84A             0375*  
04B84A             0376*  ; global scratch memory for registers
04B84A 00 00 00    0377*  uaf: dl 0
04B84D 00 00 00    0378*  uhl: dl 0
04B850 00 00 00    0379*  ubc: dl 0
04B853 00 00 00    0380*  ude: dl 0
04B856 00 00 00    0381*  uix: dl 0
04B859 00 00 00    0382*  uiy: dl 0
04B85C 00 00 00    0383*  usp: dl 0
04B85F 00 00 00    0384*  upc: dl 0
04B862             0385*  
04B862             0386*  ; inputs: whatever is in the flags register
04B862             0387*  ; outputs: binary representation of flags
04B862             0388*  ;          with a header so we know which is what
04B862             0389*  ; destroys: nothing
04B862             0390*  ; preserves: everything
04B862             0391*  dumpFlags:
04B862             0392*  ; first we curse zilog for not giving direct access to flags
04B862 F5          0393*      push af ; this is so we can send it back unharmed
04B863 F5          0394*      push af ; this is so we can pop it to hl
04B864             0395*  ; store everything in scratch
04B864 22 4D B8 04 0396*      ld (uhl),hl
04B868 ED 43 50 B8 0397*      ld (ubc),bc
       04          
04B86D ED 53 53 B8 0398*      ld (ude),de
       04          
04B872 DD 22 56 B8 0399*      ld (uix),ix
       04          
04B877 FD 22 59 B8 0400*      ld (uiy),iy
       04          
04B87C             0401*  ; next we print the header
04B87C 21 A8 B8 04 0402*      ld hl,@header
04B880 CD 43 B5 04 0403*      call printString
04B884 E1          0404*      pop hl ; flags are now in l
04B885 7D          0405*      ld a,l ; flags are now in a
04B886 CD 00 B6 04 0406*      call printBin8
04B88A CD 58 B5 04 0407*  	call printNewLine
04B88E             0408*  ; restore everything
04B88E 2A 4D B8 04 0409*      ld hl, (uhl)
04B892 ED 4B 50 B8 0410*      ld bc, (ubc)
       04          
04B897 ED 5B 53 B8 0411*      ld de, (ude)
       04          
04B89C DD 2A 56 B8 0412*      ld ix, (uix)
       04          
04B8A1 FD 2A 59 B8 0413*      ld iy, (uiy)
       04          
04B8A6 F1          0414*      pop af ; send her home the way she came
04B8A7 C9          0415*      ret
04B8A8             0416*  ; Bit 7 (S): Sign flag
04B8A8             0417*  ; Bit 6 (Z): Zero flag
04B8A8             0418*  ; Bit 5 (5): Reserved (copy of bit 5 of the result)
04B8A8             0419*  ; Bit 4 (H): Half Carry flag
04B8A8             0420*  ; Bit 3 (3): Reserved (copy of bit 3 of the result)
04B8A8             0421*  ; Bit 2 (PV): Parity/Overflow flag
04B8A8             0422*  ; Bit 1 (N): Subtract flag
04B8A8             0423*  ; Bit 0 (C): Carry flag
04B8A8 53 5A 78 48 0424*  @header: db "SZxHxPNC\r\n",0 ; cr/lf and 0 terminator
       78 50 4E 43 
       0D 0A 00    
04B8B3             0425*  
04B8B3             0426*  ; set all the bits in the flag register
04B8B3             0427*  ; more of an academic exercise than anything useful
04B8B3             0428*  ; inputs; none
04B8B3             0429*  ; outputs; a=0,f=255
04B8B3             0430*  ; destroys: flags, hl
04B8B3             0431*  ; preserves: a, because why not
04B8B3             0432*  setAllFlags:
04B8B3 21 FF 00 00 0433*      ld hl,255
04B8B7 67          0434*      ld h,a ; four cycles to preserve a is cheap
04B8B8 E5          0435*      push hl
04B8B9 F1          0436*      pop af
04B8BA C9          0437*      ret
04B8BB             0438*  
04B8BB             0439*  ; reset all the bits in the flag register
04B8BB             0440*  ; unlike its inverse counterpart, this may actually be useful
04B8BB             0441*  ; inputs; none
04B8BB             0442*  ; outputs; a=0,f=0
04B8BB             0443*  ; destroys: flags, hl
04B8BB             0444*  ; preserves: a, because why not
04B8BB             0445*  resetAllFlags:
04B8BB 21 00 00 00 0446*      ld hl,0
04B8BF 67          0447*      ld h,a ; four cycles to preserve a is cheap
04B8C0 E5          0448*      push hl
04B8C1 F1          0449*      pop af
04B8C2 C9          0450*      ret
04B8C3             0451*  
04B8C3             0452*  ; wait until user presses a key
04B8C3             0453*  ; inputs: none
04B8C3             0454*  ; outputs: none
04B8C3             0455*  ; destroys: af,ix
04B8C3             0456*  waitKeypress:
04B8C3             0457*      MOSCALL mos_sysvars
04B8C3 3E 08       0001*M 			LD	A, function
04B8C5 5B CF       0002*M 			RST.LIL	08h
04B8C7 AF          0458*      xor a ; zero out any prior keypresses
04B8C8 DD 77 05    0459*      ld (ix+sysvar_keyascii),a
04B8CB             0460*  @loop:
04B8CB DD 7E 05    0461*      ld a,(ix+sysvar_keyascii)
04B8CE A7          0462*      and a
04B8CF C0          0463*      ret nz
04B8D0 18 F9       0464*      jr @loop
04B8D2             0465*  
04B8D2             0466*  
04B8D2             0467*  ; print bytes from an address to the screen in hexidecimal format
04B8D2             0468*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B8D2             0469*  ; outputs: values of each byte printed to screen separated by spaces
04B8D2             0470*  ; destroys: nothing
04B8D2             0471*  dumpMemoryHex:
04B8D2             0472*  ; save all registers to the stack
04B8D2 F5          0473*      push af
04B8D3 C5          0474*      push bc
04B8D4 D5          0475*      push de
04B8D5 E5          0476*      push hl
04B8D6 DD E5       0477*      push ix
04B8D8 FD E5       0478*      push iy
04B8DA             0479*  
04B8DA             0480*  ; set b to be our loop counter
04B8DA 47          0481*      ld b,a
04B8DB             0482*  @loop:
04B8DB             0483*  ; print the byte
04B8DB 7E          0484*      ld a,(hl)
04B8DC CD 73 B5 04 0485*      call printHex8
04B8E0             0486*  ; print a space
04B8E0 3E 20       0487*      ld a,' '
04B8E2 5B D7       0488*      rst.lil 10h
04B8E4 23          0489*      inc hl
04B8E5 10 F4       0490*      djnz @loop
04B8E7 CD 58 B5 04 0491*      call printNewLine
04B8EB             0492*  
04B8EB             0493*  ; restore everything
04B8EB FD E1       0494*      pop iy
04B8ED DD E1       0495*      pop ix
04B8EF E1          0496*      pop hl
04B8F0 D1          0497*      pop de
04B8F1 C1          0498*      pop bc
04B8F2 F1          0499*      pop af
04B8F3             0500*  ; all done
04B8F3 C9          0501*      ret
04B8F4             0502*  
04B8F4             0503*  
04B8F4             0504*  ; print bytes from an address to the screen in binary format
04B8F4             0505*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B8F4             0506*  ; outputs: values of each byte printed to screen separated by spaces
04B8F4             0507*  ; destroys: nothing
04B8F4             0508*  dumpMemoryBin:
04B8F4             0509*  ; save all registers to the stack
04B8F4 F5          0510*      push af
04B8F5 C5          0511*      push bc
04B8F6 D5          0512*      push de
04B8F7 E5          0513*      push hl
04B8F8 DD E5       0514*      push ix
04B8FA FD E5       0515*      push iy
04B8FC             0516*  
04B8FC             0517*  ; set b to be our loop counter
04B8FC 47          0518*      ld b,a
04B8FD             0519*  @loop:
04B8FD             0520*  ; print the byte
04B8FD 7E          0521*      ld a,(hl)
04B8FE E5          0522*      push hl
04B8FF C5          0523*      push bc
04B900 CD 00 B6 04 0524*      call printBin8
04B904 C1          0525*      pop bc
04B905             0526*  ; print a space
04B905 3E 20       0527*      ld a,' '
04B907 5B D7       0528*      rst.lil 10h
04B909 E1          0529*      pop hl
04B90A 23          0530*      inc hl
04B90B 10 F0       0531*      djnz @loop
04B90D CD 58 B5 04 0532*      call printNewLine
04B911             0533*  
04B911             0534*  ; restore everything
04B911 FD E1       0535*      pop iy
04B913 DD E1       0536*      pop ix
04B915 E1          0537*      pop hl
04B916 D1          0538*      pop de
04B917 C1          0539*      pop bc
04B918 F1          0540*      pop af
04B919             0541*  ; all done
04B919 C9          0542*      ret
04B91A             0543*  
04B91A             0544*  ; print bytes from an address to the screen in binary format
04B91A             0545*  ; with the bits of each byte in reverse order (lsb first)
04B91A             0546*  ; inputs: hl = address of first byte to print, a = number of bytes to print
04B91A             0547*  ; outputs: values of each byte printed to screen separated by spaces
04B91A             0548*  ; destroys: nothing
04B91A             0549*  dumpMemoryBinRev:
04B91A             0550*  ; save all registers to the stack
04B91A F5          0551*      push af
04B91B C5          0552*      push bc
04B91C D5          0553*      push de
04B91D E5          0554*      push hl
04B91E DD E5       0555*      push ix
04B920 FD E5       0556*      push iy
04B922             0557*  
04B922             0558*  ; set b to be our loop counter
04B922 47          0559*      ld b,a
04B923             0560*  @loop:
04B923             0561*  ; print the byte
04B923 7E          0562*      ld a,(hl)
04B924 E5          0563*      push hl
04B925 C5          0564*      push bc
04B926 CD 25 B6 04 0565*      call printBin8Rev
04B92A C1          0566*      pop bc
04B92B             0567*  ; print a space
04B92B 3E 20       0568*      ld a,' '
04B92D 5B D7       0569*      rst.lil 10h
04B92F E1          0570*      pop hl
04B930 23          0571*      inc hl
04B931 10 F0       0572*      djnz @loop
04B933 CD 58 B5 04 0573*      call printNewLine
04B937             0574*  
04B937             0575*  ; restore everything
04B937 FD E1       0576*      pop iy
04B939 DD E1       0577*      pop ix
04B93B E1          0578*      pop hl
04B93C D1          0579*      pop de
04B93D C1          0580*      pop bc
04B93E F1          0581*      pop af
04B93F             0582*  ; all done
04B93F C9          0583*      ret
04B940             0026   	include "src/asm/player.asm"
04B940             0001*  ; ######## GAME STATE VARIABLES #######
04B940             0002*  ; we use 24-bit values for all of these for easy use with Num2String function
04B940 00 00 00    0003*  plyr_score: dl 0x000000 ; binary
04B943             0004*  ; player current health,binary
04B943             0005*  ; when < 0 player splodes
04B943             0006*  ; restores to plyr_max_health when new ship spawns
04B943 00 00 00    0007*  plyr_health: dl 0x000000 ; binary TODO: temp set at 50% for testing, set to 100 for actual game
04B946             0008*  ; max player health,binary
04B946             0009*  ; can increase with power-ups (todo)
04B946 64 00 00    0010*  plyr_max_health: dl 100 ; binary
04B949             0011*  ; when reaches zero,game ends
04B949             0012*  ; can increase based on TODO
04B949 03 00 00    0013*  plyr_lives: dl 3 ; binary
04B94C             0014*  
04B94C             0015*  ; ######### Player Variables ##########
04B94C             0016*  ; player position on the map and orientation
04B94C 00          0017*  cur_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B94D 00          0018*  cur_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B94E 00          0019*  cur_cell: db 0x00 ; 0-255, corresponds to cell_id in build scripts
04B94F 00          0020*  from_floor: db 0x00 ; 0-255, corresponds to floor_num in build scripts
04B950 00          0021*  from_room: db 0x00 ; 0-9, corresponds to room_id in build scripts
04B951 00          0022*  orientation: db 0x00 ; 0-3 north,east,south,west
04B952 00          0023*  cur_x: db 0x00
04B953 00          0024*  cur_y: db 0x00
04B954 00          0025*         db 0x00 ; padding so we can read/write 24-bit registers
04B955 00          0026*  xvel:  db 0x00
04B956 00          0027*  yvel:  db 0x00
04B957 00          0028*         db 0x00 ; padding
04B958 00          0029*  dy:    db 0x00
04B959 00          0030*  dx:    db 0x00
04B95A 00          0031*         db 0x00 ; padding
04B95B 00          0032*  avel:  db 0x00 ; player angular velocity in orientation ticks per move tick
04B95C             0033*  
04B95C 00          0034*  plyr_shot_x:      db 0x00
04B95D 00          0035*  plyr_shot_y:      db 0x00
04B95E 00          0036*                      db 0x00 ; padding
04B95F 00          0037*  plyr_shot_xvel:   db 0x00
04B960 00          0038*  plyr_shot_yvel:   db 0x00
04B961 00          0039*                      db 0x00 ; padding
04B962 FF          0040*  plyr_shot_status: db 0xFF ; -1 = no shot, otherwise shot direction of travel
04B963 00 00 00    0041*  plyr_shot_time:   dl 0x000000 ; time shot was fired from RTC
04B966 00          0042*  plyr_shot_damage: db 0x00 ; damage dealt by latest shot
04B967             0043*  
04B967 00          0044*  plyr_wpns:     db 0x00 ; weapons in player's possession according to following bitmasks
04B968 00          0045*  plyr_wpn_active: db 0x00 ; currently active weapon according to following bitmasks
04B969             0046*  plyr_wpn_knife: equ %00000001
04B969             0047*  plyr_wpn_pistol: equ %00000010
04B969             0048*  plyr_wpn_mg: equ %00000100
04B969             0049*  plyr_wpn_gg: equ %00001000
04B969 00          0050*  plyr_wpn_damage: db 0x00 ; damage dealt by current weapon
04B96A 00 00 00    0051*  plyr_wpn_ui_sm: dl 0x000000 ; bufferId for weapon UI
04B96D 00 00 00    0052*  plyr_wpn_ui_lg: dl 0x000000 ; bufferId for weapon UI
04B970             0053*  plyr_wpn_select_tmr: ds 6 ; time until player can selet a new weapon in 1/120ths of a second
04B976             0054*  plyr_wpn_fire_tmr: ds 6 ; time until player can fire again in 1/120ths of a second
04B97C 00 00 00    0055*  plyr_wpn_fire_rate: dl 0x000000 ; rate of fire in 1/120ths of a second
04B97F             0056*  
04B97F             0057*  ; plyr_wpn_anim_tmr: ds 6 ; time until next weapon animation frame in 1/120ths of a second
04B97F 00 00 00    0058*  plyr_wpn_anim_fr: dl 0x000000 ; current weapon animation frame
04B982             0059*  ; plyr_wpn_anim_tmr_rst: dl 0
04B982             0060*  
04B982             0061*  
04B982 00 00 00    0062*  plyr_ammo: dl 0x000000 ; ammo for all projectile weapons
04B985             0063*  plyr_ammo_str: ds 8 ; Num2String buffer
04B98D 00          0064*                   db 0 ; string terminator
04B98E             0065*  
04B98E             0066*  ; ######### PLAYER CONSTANTS ##########
04B98E             0067*  speed_plyr: equ 1 ; 1 map grid unit per movement tick
04B98E             0068*  plyr_move_timer: ds 6 ; time until player can move again in 1/120ths of a second
04B994             0069*  plyr_move_rate: equ 120/4 ; 4 times per second
04B994             0070*  
04B994             0071*  ; ######### PLAYER SPRITE PARAMETERS ##########
04B994             0072*  ; uses the same offsets from its table base as the main sprite table:
04B994             0073*  plyr_start_variables: ; label marking beginning of table
04B994 40          0074*  plyr_id:               db table_max_records
04B995 00          0075*  plyr_type:             db     0x00 ; 1 bytes currently not used
04B996 00 00 00    0076*  plyr_base_bufferId:    dl 0x000000 ; 3 bytes bitmap bufferId
04B999 00 00 00    0077*  plyr_move_program:     dl 0x000000 ; 3 bytes not currently used
04B99C 00          0078*  plyr_collisions:       db     0x00 ; 1 bytes bit 0 set=alive, otherwise dead, bit 1 set=just died
04B99D 00          0079*  plyr_dim_x:            db     0x00 ; 1 bytes sprite width in pixels
04B99E 00          0080*  plyr_dim_y:            db     0x00 ; 1 bytes sprite height in pixels
04B99F 00 00 00    0081*  plyr_x:                dl 0x000000 ; 3 bytes 16.8 fractional x position in pixels
04B9A2 00 00 00    0082*  plyr_y:                dl 0x000000 ; 3 bytes 16.8 fractional y position in pixels
04B9A5 00 00 00    0083*  plyr_xvel:             dl 0x000000 ; 3 bytes x-component velocity, 16.8 fixed, pixels
04B9A8 00 00 00    0084*  plyr_yvel:             dl 0x000000 ; 3 bytes y-component velocity, 16.8 fixed, pixels
04B9AB 00 00 00    0085*  playervel:               dl 0x000000 ; 3 bytes velocity px/frame (16.8 fixed)
04B9AE 00 00 00    0086*  plyr_heading:          dl 0x000000 ; 3 bytes sprite movement direction deg256 16.8 fixed
04B9B1 00 00 00    0087*  plyr_orientation:      dl 0x000000 ; 3 bytes not currently used
04B9B4 00          0088*  plyr_animation:        db     0x00 ; 1 bytes not currently used
04B9B5 00          0089*  plyr_anim_tmr:  db     0x00 ; 1 bytes not currently used
04B9B6             0090*  ; plyr_move_timer:       db     0x00 ; 1 bytes not currently used
04B9B6 00          0091*  plyr_move_step:        db     0x00 ; 1 bytes not currently used
04B9B7 00          0092*  plyr_points:           db     0x00 ; 1 bytes not currently used
04B9B8 00          0093*  plyr_health_damage:    db     0x00 ; 1 bytes not currently used
04B9B9             0094*  plyr_end_variables: ; for when we want to traverse this table in reverse
04B9B9             0095*  
04B9B9             0096*  
04B9B9             0097*  ; set initial player position
04B9B9             0098*  ; inputs: none,everything is hardcoded
04B9B9             0099*  ; outputs: player set to the first valid position on the map
04B9B9             0100*  ; destroys: a
04B9B9             0101*  plyr_init:
04B9B9 CD 86 69 04 0102*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04B9BD 32 4E B9 04 0103*      ld (cur_cell),a
04B9C1 ED 53 52 B9 0104*      ld (cur_x),de ; implicitly populates cur_y
       04          
04B9C6 AF          0105*      xor a ; north is default orientation
04B9C7 32 51 B9 04 0106*      ld (orientation),a
04B9CB 21 1E 00 00 0107*      ld hl,plyr_move_rate
04B9CF FD 21 8E B9 0108*      ld iy,plyr_move_timer
       04          
04B9D4 CD 37 C8 04 0109*      call timestamp_tmr_set
04B9D8 3E 03       0110*      ld a,3
04B9DA 32 49 B9 04 0111*      ld (plyr_lives),a
04B9DE 3E 64       0112*      ld a,100
04B9E0 32 43 B9 04 0113*      ld (plyr_health),a
04B9E4 3E 08       0114*      ld a,8
04B9E6 32 82 B9 04 0115*      ld (plyr_ammo),a
04B9EA 3E 01       0116*      ld a,plyr_wpn_knife
04B9EC F6 02       0117*      or plyr_wpn_pistol
04B9EE 32 67 B9 04 0118*      ld (plyr_wpns),a
04B9F2 3E 01       0119*      ld a,plyr_wpn_knife
04B9F4 32 68 B9 04 0120*      ld (plyr_wpn_active),a
04B9F8 CD CC BA 04 0121*      call plyr_set_weapon_parameters
04B9FC FD 21 70 B9 0122*      ld iy,plyr_wpn_select_tmr
       04          
04BA01 21 00 00 00 0123*      ld hl,0
04BA05 CD 37 C8 04 0124*      call timestamp_tmr_set
04BA09 C9          0125*      ret
04BA0A             0126*  
04BA0A             0127*  ; restart player after dying
04BA0A             0128*  ; inputs: none,everything is hardcoded
04BA0A             0129*  ; outputs: player set to the first valid position on the map
04BA0A             0130*  ; destroys: a
04BA0A             0131*  plyr_restart:
04BA0A 3A 4D B9 04 0132*      ld a,(cur_room)
04BA0E A7          0133*      and a
04BA0F 28 3A       0134*      jr z,@no_load
04BA11             0135*  ; not in room zero so save state of current room
04BA11 21 5C 6A 04 0136*      ld hl,room_flags
04BA15 11 00 00 00 0137*  	ld de,0 ; make sure deu and d are zero
04BA19 5F          0138*  	ld e,a
04BA1A 19          0139*  	add hl,de ; hl = address of room flags entry
04BA1B 3E 01       0140*  	ld a,room_flag_visited
04BA1D B6          0141*  	or (hl)
04BA1E 77          0142*  	ld (hl),a
04BA1F             0143*  ; update from_room
04BA1F 3A 4D B9 04 0144*  	ld a,(cur_room)
04BA23 32 50 B9 04 0145*  	ld (from_room),a
04BA27             0146*  ; save old room state to room dat memory location
04BA27 21 66 6A 04 0147*  	ld hl,room_dat_lut
04BA2B 57          0148*  	ld d,a
04BA2C 1E 03       0149*  	ld e,3 ; three bytes per lookup record
04BA2E ED 5C       0150*  	mlt de ; de = offset to room dat entry
04BA30 19          0151*  	add hl,de ; hl = address of room dat entry
04BA31 ED 17       0152*  	ld de,(hl) ; destination address for room data
04BA33 21 00 E0 B7 0153*  	ld hl,cell_status ; source address for room data
04BA37 01 00 20 00 0154*  	ld bc,8*1024 ; size of room data
04BA3B ED B0       0155*  	ldir
04BA3D             0156*  ; fetch room zero state from room dat memory location
04BA3D 2A 66 6A 04 0157*  	ld hl,(room_00_dat) ; source address for room data
04BA41 11 00 E0 B7 0158*  	ld de,cell_status ; destination address for room data
04BA45 01 00 20 00 0159*  	ld bc,8*1024 ; size of room data
04BA49 ED B0       0160*  	ldir
04BA4B             0161*  @no_load:
04BA4B AF          0162*      xor a
04BA4C 32 4D B9 04 0163*      ld (cur_room),a
04BA50 32 51 B9 04 0164*      ld (orientation),a ; north is default orientation
04BA54 21 1E 00 00 0165*      ld hl,plyr_move_rate
04BA58 FD 21 8E B9 0166*      ld iy,plyr_move_timer
       04          
04BA5D             0167*  
04BA5D 3A 49 B9 04 0168*      ld a,(plyr_lives)
04BA61 3D          0169*      dec a
04BA62 32 49 B9 04 0170*      ld (plyr_lives),a
04BA66 3E 64       0171*      ld a,100
04BA68 32 43 B9 04 0172*      ld (plyr_health),a
04BA6C 3E 08       0173*      ld a,8
04BA6E CD F2 BB 04 0174*      call plyr_add_ammo
04BA72             0175*  
04BA72 CD 86 69 04 0176*      call get_floor_start ; a = cell_id, d = map_y, e = map_x
04BA76 32 4E B9 04 0177*      ld (cur_cell),a
04BA7A ED 53 52 B9 0178*      ld (cur_x),de ; implicitly populates cur_y
       04          
04BA7F             0179*  
04BA7F C9          0180*      ret
04BA80             0181*  
04BA80             0182*  plyr_next_weapon:
04BA80             0183*  ; check if select weapons timer has expired
04BA80 FD 21 70 B9 0184*      ld iy,plyr_wpn_select_tmr
       04          
04BA85 CD 42 C8 04 0185*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BA89 F0          0186*      ret p ; time left on timer so no weapon select
04BA8A             0187*  ; reset weapon select timer
04BA8A 21 14 00 00 0188*      ld hl,120/6 ; 1/6 second
04BA8E CD 37 C8 04 0189*      call timestamp_tmr_set
04BA92             0190*  ; select next weapon
04BA92 21 67 B9 04 0191*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04BA96 ED 07       0192*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04BA98             0193*  @loop:
04BA98 3A 68 B9 04 0194*      ld a,(plyr_wpn_active)
04BA9C 07          0195*      rlca ; rotate left
04BA9D 32 68 B9 04 0196*      ld (plyr_wpn_active),a
04BAA1 A6          0197*      and (hl) ; check inventory mask
04BAA2 28 F4       0198*      jr z,@loop
04BAA4 C3 CC BA 04 0199*      jp plyr_set_weapon_parameters
04BAA8             0200*  
04BAA8             0201*  plyr_previous_weapon:
04BAA8             0202*  ; check if select weapons timer has expired
04BAA8 FD 21 70 B9 0203*      ld iy,plyr_wpn_select_tmr
       04          
04BAAD CD 42 C8 04 0204*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BAB1 F0          0205*      ret p ; time left on timer so no weapon select
04BAB2             0206*  ; reset weapon select timer
04BAB2 21 14 00 00 0207*      ld hl,120/6 ; 1/6 second
04BAB6 CD 37 C8 04 0208*      call timestamp_tmr_set
04BABA             0209*  ; select next weapon
04BABA 21 67 B9 04 0210*      ld hl,plyr_wpns ; hl points to plyr_wpns flags
04BABE ED 07       0211*      ld bc,(hl) ; bc contains bitmask of player's weapons inventory
04BAC0             0212*  @loop:
04BAC0 3A 68 B9 04 0213*      ld a,(plyr_wpn_active)
04BAC4 0F          0214*      rrca ; rotate right
04BAC5 32 68 B9 04 0215*      ld (plyr_wpn_active),a
04BAC9 A6          0216*      and (hl) ; check inventory mask
04BACA 28 F4       0217*      jr z,@loop
04BACC             0218*      ; fall through to plyr_set_weapon_parameters
04BACC             0219*  
04BACC             0220*  plyr_set_weapon_parameters:
04BACC FE 01       0221*      cp %00000001 ; knife
04BACE CA E5 BA 04 0222*      jp z,@knife
04BAD2 FE 02       0223*      cp %00000010 ; pistol
04BAD4 CA 0D BB 04 0224*      jp z,@pistol
04BAD8 FE 04       0225*      cp %00000100 ; machine gun
04BADA CA 35 BB 04 0226*      jp z,@machine_gun
04BADE FE 08       0227*      cp %00001000 ; gatling gun
04BAE0 CA 5D BB 04 0228*      jp z,@gatling_gun
04BAE4 C9          0229*      ret ; if none of the above do nothing
04BAE5             0230*  @knife:
04BAE5 21 05 21 00 0231*      ld hl,BUF_UI_BJ_KNIFE_00
04BAE9 22 6D B9 04 0232*      ld (plyr_wpn_ui_lg),hl
04BAED 21 07 20 00 0233*      ld hl,BUF_UI_LOWER_PANEL_KNIFE
04BAF1 22 6A B9 04 0234*      ld (plyr_wpn_ui_sm),hl
04BAF5 3E 14       0235*      ld a,20 ; dps = 60
04BAF7 32 69 B9 04 0236*      ld (plyr_wpn_damage),a
04BAFB 21 3C 00 00 0237*      ld hl,120/2 ; 3 times/second
04BAFF 22 7C B9 04 0238*      ld (plyr_wpn_fire_rate),hl
04BB03 FD 21 76 B9 0239*      ld iy,plyr_wpn_fire_tmr
       04          
04BB08 CD 37 C8 04 0240*      call timestamp_tmr_set
04BB0C C9          0241*      ret
04BB0D             0242*  @pistol:
04BB0D 21 0F 21 00 0243*      ld hl,BUF_UI_BJ_PISTOL_00
04BB11 22 6D B9 04 0244*      ld (plyr_wpn_ui_lg),hl
04BB15 21 09 20 00 0245*      ld hl,BUF_UI_LOWER_PANEL_PISTOL
04BB19 22 6A B9 04 0246*      ld (plyr_wpn_ui_sm),hl
04BB1D             0247*  ; 1 shots/burst, 3 bursts/sec, 30 dmg/burst, 90 dmg/sec, 30 dmg/shot
04BB1D 3E 1E       0248*      ld a,30 ; damage/burst
04BB1F 32 69 B9 04 0249*      ld (plyr_wpn_damage),a
04BB23 21 28 00 00 0250*      ld hl,120/3 ; 3 bursts/second
04BB27 22 7C B9 04 0251*      ld (plyr_wpn_fire_rate),hl
04BB2B FD 21 76 B9 0252*      ld iy,plyr_wpn_fire_tmr
       04          
04BB30 CD 37 C8 04 0253*      call timestamp_tmr_set
04BB34 C9          0254*      ret
04BB35             0255*  @machine_gun:
04BB35 21 0A 21 00 0256*      ld hl,BUF_UI_BJ_MACHINE_GUN_00
04BB39 22 6D B9 04 0257*      ld (plyr_wpn_ui_lg),hl
04BB3D 21 08 20 00 0258*      ld hl,BUF_UI_LOWER_PANEL_MACHINE_GUN
04BB41 22 6A B9 04 0259*      ld (plyr_wpn_ui_sm),hl
04BB45             0260*  ; 4 shots/burst, 3 bursts/sec, 80 dmg/burst, 240 dmg/sec, 20 dmg/shot
04BB45 3E 50       0261*      ld a,80 ; damage/burst
04BB47 32 69 B9 04 0262*      ld (plyr_wpn_damage),a
04BB4B 21 28 00 00 0263*      ld hl,120/3 ; 3 bursts/second
04BB4F 22 7C B9 04 0264*      ld (plyr_wpn_fire_rate),hl
04BB53 FD 21 76 B9 0265*      ld iy,plyr_wpn_fire_tmr
       04          
04BB58 CD 37 C8 04 0266*      call timestamp_tmr_set
04BB5C C9          0267*      ret
04BB5D             0268*  @gatling_gun:
04BB5D 21 00 21 00 0269*      ld hl,BUF_UI_BJ_GATLING_00
04BB61 22 6D B9 04 0270*      ld (plyr_wpn_ui_lg),hl
04BB65 21 06 20 00 0271*      ld hl,BUF_UI_LOWER_PANEL_GATLING
04BB69 22 6A B9 04 0272*      ld (plyr_wpn_ui_sm),hl
04BB6D             0273*  ; 8 shots/burst, 3 bursts/sec, 120 dmg/burst, 360 dmg/sec, 15 dmg/shot
04BB6D 3E 78       0274*      ld a,120 ; damage/burst
04BB6F 32 69 B9 04 0275*      ld (plyr_wpn_damage),a
04BB73 21 28 00 00 0276*      ld hl,120/3 ; 3 bursts/second
04BB77 22 7C B9 04 0277*      ld (plyr_wpn_fire_rate),hl
04BB7B FD 21 76 B9 0278*      ld iy,plyr_wpn_fire_tmr
       04          
04BB80 CD 37 C8 04 0279*      call timestamp_tmr_set
04BB84 C9          0280*      ret
04BB85             0281*  
04BB85             0282*  ; adds to player's health by a set amount
04BB85             0283*  ; inputs: a is the signed amount to modify health
04BB85             0284*  ; outputs: a will contain amount of health remaining
04BB85             0285*  ;          carry will be set if health maxes out to 255
04BB85             0286*  plyr_add_health:
04BB85 21 43 B9 04 0287*      ld hl,plyr_health
04BB89 86          0288*      add a,(hl)
04BB8A D2 90 BB 04 0289*      jp nc,@update ; if we roll over to zero when adding
04BB8E 3E FF       0290*      ld a,255 ; ... set health remaining to max
04BB90             0291*  @update:
04BB90 77          0292*      ld (hl),a
04BB91 C3 B9 BB 04 0293*      jp plyr_health_image
04BB95             0294*  
04BB95             0295*  ; subtracts from player's health by a set amount
04BB95             0296*  ; inputs: a is the signed amount to modify health
04BB95             0297*  ; outputs: zero flag set, carry reset if player health rolls through/becomes zero
04BB95             0298*  ;        a contains remaining health
04BB95             0299*  plyr_sub_health:
04BB95 A7          0300*      and a
04BB96 C8          0301*      ret z
04BB97             0302*  ; DEBUG
04BB97 ED 44       0303*      neg
04BB99 32 E0 BB 04 0304*      ld (last_damage),a
04BB9D ED 44       0305*      neg
04BB9F             0306*  ; END DEBUG
04BB9F 21 43 B9 04 0307*      ld hl,plyr_health
04BBA3 86          0308*      add a,(hl)
04BBA4 CA AC BB 04 0309*      jp z,@zero
04BBA8 DA B8 BB 04 0310*      jp c,@update
04BBAC             0311*  @zero:
04BBAC 21 03 20 00 0312*      ld hl,BUF_UI_BJ_100
04BBB0 22 D1 6A 04 0313*      ld (bj_health_image),hl
04BBB4 C3 0A BA 04 0314*      jp plyr_restart ; will go the right place from there
04BBB8             0315*  @update:
04BBB8 77          0316*      ld (hl),a
04BBB9             0317*  ; fall through to plyr_health_image
04BBB9             0318*  
04BBB9             0319*  plyr_health_image:
04BBB9 FE 19       0320*      cp 25
04BBBB 38 0E       0321*      jr c,@less_than_25
04BBBD FE 32       0322*      cp 50
04BBBF 38 10       0323*      jr c,@less_than_50
04BBC1 FE 4B       0324*      cp 75
04BBC3 38 12       0325*      jr c,@less_than_75
04BBC5 21 03 20 00 0326*      ld hl,BUF_UI_BJ_100
04BBC9 18 10       0327*      jr @update
04BBCB             0328*  @less_than_25:
04BBCB 21 00 20 00 0329*      ld hl,BUF_UI_BJ_025
04BBCF 18 0A       0330*      jr @update
04BBD1             0331*  @less_than_50:
04BBD1 21 01 20 00 0332*      ld hl,BUF_UI_BJ_050
04BBD5 18 04       0333*      jr @update
04BBD7             0334*  @less_than_75:
04BBD7 21 02 20 00 0335*      ld hl,BUF_UI_BJ_075
04BBDB             0336*  @update:
04BBDB 22 D1 6A 04 0337*      ld (bj_health_image),hl
04BBDF C9          0338*      ret
04BBE0             0339*  
04BBE0 00 00 00    0340*  last_damage: dl 0x00 ; last damage dealt to player
04BBE3             0341*  
04BBE3             0342*  ; modifies the players score by a set amount
04BBE3             0343*  ; inputs: a is the signed amount to modify score
04BBE3             0344*  plyr_mod_score:
04BBE3 11 00 00 00 0345*      ld de,0 ; make sure deu is zero
04BBE7 5F          0346*      ld e,a
04BBE8 2A 40 B9 04 0347*      ld hl,(plyr_score)
04BBEC 19          0348*      add hl,de
04BBED 22 40 B9 04 0349*      ld (plyr_score),hl
04BBF1 C9          0350*      ret
04BBF2             0351*  
04BBF2             0352*  ; adds to player's ammo by a set amount
04BBF2             0353*  ; inputs: a is the signed amount to modify ammo
04BBF2             0354*  ; outputs: a will contain amount of ammo remaining
04BBF2             0355*  ;          carry will be set if ammo maxes out to 255
04BBF2             0356*  plyr_add_ammo:
04BBF2 21 82 B9 04 0357*      ld hl,plyr_ammo
04BBF6 86          0358*      add a,(hl)
04BBF7 D2 FD BB 04 0359*      jp nc,@update ; if we roll over to zero when adding
04BBFB 3E FF       0360*      ld a,255 ; ... set ammo remaining to max
04BBFD             0361*  @update:
04BBFD 77          0362*      ld (hl),a
04BBFE C9          0363*      ret
04BBFF             0364*  
04BBFF             0365*  ; subtracts from player's ammo by a set amount
04BBFF             0366*  ; inputs: a is the signed amount to modify ammo
04BBFF             0367*  ; outputs: carry reset if player was out of ammo before firing
04BBFF             0368*  ;          a will also contain amount of ammo remaining after shot
04BBFF             0369*  plyr_sub_ammo:
04BBFF 21 82 B9 04 0370*      ld hl,plyr_ammo
04BC03 86          0371*      add a,(hl)
04BC04 DA 17 BC 04 0372*      jp c,@update
04BC08 3E 01       0373*      ld a,%00000001 ; knife
04BC0A 32 68 B9 04 0374*      ld (plyr_wpn_active),a
04BC0E CD CC BA 04 0375*      call plyr_set_weapon_parameters
04BC12 AF          0376*      xor a ; clear carry, set ammo to zero
04BC13 21 82 B9 04 0377*      ld hl,plyr_ammo
04BC17             0378*  @update:
04BC17 77          0379*      ld (hl),a
04BC18 C9          0380*      ret
04BC19             0381*  
04BC19             0382*  plyr_shoot_knife:
04BC19 CD 35 C6 04 0383*      call sfx_play_knife
04BC1D             0384*      ; check whether the player hit anything
04BC1D 3A 51 B9 04 0385*      ld a,(orientation) ; direction knife is moving
04BC21 5F          0386*      ld e,a
04BC22 16 01       0387*      ld d,1 ; shot "velocity" in map units
04BC24 CD 6F 68 04 0388*      call get_dx_dy ; d,e = dy,dx
04BC28 ED 53 5F B9 0389*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04BC2D 2A 52 B9 04 0390*      ld hl,(cur_x) ; h,l = player y,x
04BC31 22 5C B9 04 0391*      ld (plyr_shot_x),hl ; initial shot position
04BC35 ED 5B 5F B9 0392*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04BC3A 2A 5C B9 04 0393*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04BC3E             0394*      ; bump bullet position one map unit in direction of travel
04BC3E 7D          0395*      ld a,l ; player shot x
04BC3F 83          0396*      add a,e ; add xvel
04BC40 6F          0397*      ld l,a ; save new x
04BC41 7C          0398*      ld a,h ; player shot y
04BC42 82          0399*      add a,d ; add yvel
04BC43 67          0400*      ld h,a ; save new y
04BC44 22 5C B9 04 0401*      ld (plyr_shot_x),hl ; and save that position
04BC48 EB          0402*      ex de,hl ; d,e = bullet y,x
04BC49 CD 4A 68 04 0403*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04BC4D             0404*  ; check whether target cell contains a sprite
04BC4D DD 7E 03    0405*      ld a,(ix+map_sprite_id)
04BC50 FE FF       0406*      cp 255 ; value if not sprite
04BC52 C8          0407*      ret z ; if we hit a non-sprite, we're done
04BC53             0408*  ; is a sprite so run its "hurt" behavior routine
04BC53 CD BF A6 04 0409*      call sprite_set_pointer
04BC57 3E 02       0410*      ld a,sp_hurt
04BC59 CD FC A7 04 0411*      call do_sprite_behavior ; a = sprite behavior return code
04BC5D C9          0412*      ret
04BC5E             0413*  
04BC5E             0414*  plyr_shoot_pistol:
04BC5E 3E FF       0415*      ld a,-1
04BC60 CD FF BB 04 0416*      call plyr_sub_ammo
04BC64 DA 6D BC 04 0417*      jp c,@shoot
04BC68 CD 1D C6 04 0418*      call sfx_play_gun_empty
04BC6C C9          0419*      ret
04BC6D             0420*  @shoot:
04BC6D CD 89 C6 04 0421*      call sfx_play_shot_pistol
04BC71 C3 A3 BC 04 0422*      jp plyr_move_bullet
04BC75             0423*  
04BC75             0424*  plyr_shoot_machine_gun:
04BC75 3E FC       0425*      ld a,-4
04BC77 CD FF BB 04 0426*      call plyr_sub_ammo
04BC7B DA 84 BC 04 0427*      jp c,@shoot
04BC7F CD 1D C6 04 0428*      call sfx_play_gun_empty
04BC83 C9          0429*      ret
04BC84             0430*  @shoot:
04BC84 CD 7D C6 04 0431*      call sfx_play_shot_machine_gun_burst
04BC88 C3 A3 BC 04 0432*      jp plyr_move_bullet
04BC8C             0433*  
04BC8C             0434*  plyr_shoot_gatling_gun:
04BC8C 3E F8       0435*      ld a,-8
04BC8E CD FF BB 04 0436*      call plyr_sub_ammo
04BC92 DA 9B BC 04 0437*      jp c,@shoot
04BC96 CD 1D C6 04 0438*      call sfx_play_gun_empty
04BC9A C9          0439*      ret
04BC9B             0440*  @shoot:
04BC9B CD 71 C6 04 0441*      call sfx_play_shot_gatling_burst
04BC9F C3 A3 BC 04 0442*      jp plyr_move_bullet
04BCA3             0443*  
04BCA3             0444*  plyr_move_bullet:
04BCA3             0445*      ; check whether the player hit anything
04BCA3 3A 51 B9 04 0446*      ld a,(orientation) ; direction shot is moving
04BCA7 32 62 B9 04 0447*      ld (plyr_shot_status),a ; save shot direction -- indicates live shot in flight
04BCAB 5F          0448*      ld e,a
04BCAC 16 01       0449*      ld d,1 ; shot "velocity" in map units
04BCAE CD 6F 68 04 0450*      call get_dx_dy ; d,e = dy,dx
04BCB2 ED 53 5F B9 0451*      ld (plyr_shot_xvel),de ; implicity populates yvel
       04          
04BCB7 2A 52 B9 04 0452*      ld hl,(cur_x) ; h,l = player y,x
04BCBB 22 5C B9 04 0453*      ld (plyr_shot_x),hl ; initial shot position
04BCBF 06 05       0454*      ld b,view_distance ; loop counter so player can't shoot past view distance
04BCC1             0455*  @loop:
04BCC1 C5          0456*      push bc ; save loop counter
04BCC2 ED 5B 5F B9 0457*      ld de,(plyr_shot_xvel) ; d,e = shot yvel,xvel
       04          
04BCC7 2A 5C B9 04 0458*      ld hl,(plyr_shot_x) ; h,l = player shot y,x
04BCCB             0459*      ; bump bullet position one map unit in direction of travel
04BCCB 7D          0460*      ld a,l ; player shot x
04BCCC 83          0461*      add a,e ; add xvel
04BCCD 6F          0462*      ld l,a ; save new x
04BCCE 7C          0463*      ld a,h ; player shot y
04BCCF 82          0464*      add a,d ; add yvel
04BCD0 67          0465*      ld h,a ; save new y
04BCD1 22 5C B9 04 0466*      ld (plyr_shot_x),hl ; and save that position
04BCD5 EB          0467*      ex de,hl ; d,e = bullet y,x
04BCD6 CD 4A 68 04 0468*      call get_cell_from_coords ; ix = pointer to cell_status lut; a = obj_id, bc = cell_id
04BCDA             0469*  ; check whether target cell contains a sprite
04BCDA DD 7E 03    0470*      ld a,(ix+map_sprite_id)
04BCDD FE FF       0471*      cp 255 ; value if not sprite
04BCDF 28 14       0472*      jr z,@not_sprite
04BCE1             0473*  ; is a sprite so run its "hurt" behavior routine
04BCE1 CD BF A6 04 0474*      call sprite_set_pointer
04BCE5 3E 02       0475*      ld a,sp_hurt
04BCE7 CD FC A7 04 0476*      call do_sprite_behavior ; a = sprite behavior return code
04BCEB 3A 62 B9 04 0477*      ld a,(plyr_shot_status)
04BCEF FE FF       0478*      cp 255 ; value if shot hit a shootable sprite
04BCF1 28 10       0479*      jr z,@stop_bullet ; if we hit a shootable sprite, we're done
04BCF3 18 16       0480*      jr @move_bullet ; otherwise keep moving bullet
04BCF5             0481*  @not_sprite:
04BCF5 ED 5B 5F B9 0482*      ld de,(plyr_shot_xvel) ; restore yvel,xvel to d,e
       04          
04BCFA             0483*  ; read map type/status mask from target cell
04BCFA DD 7E 00    0484*      ld a,(ix+map_type_status)
04BCFD E6 03       0485*      and %00000011 ; mask off everything but the render type mask bits
04BCFF             0486*  ; branch on the values in the bitmask
04BCFF FE 01       0487*      cp render_type_floor
04BD01 28 08       0488*      jr z,@move_bullet ; keep going if map cell is a floor
04BD03             0489*  @stop_bullet:
04BD03 C1          0490*      pop bc ; dummy pop to balance stack
04BD04 3E FF       0491*      ld a,255
04BD06 32 62 B9 04 0492*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04BD0A C9          0493*      ret ; combat ended
04BD0B             0494*  @move_bullet:
04BD0B C1          0495*      pop bc ; restore loop counter
04BD0C 10 B3       0496*      djnz @loop ; keep moving bullet if we have more distance to cover
04BD0E 3E FF       0497*      ld a,255
04BD10 32 62 B9 04 0498*      ld (plyr_shot_status),a ; set shot status to -1 to indicate shot is done
04BD14 C9          0499*      ret ; combat ended
04BD15             0500*  
04BD15             0501*  plyr_shoot:
04BD15             0502*  ; check if fire weapons timer has expired
04BD15 FD 21 76 B9 0503*      ld iy,plyr_wpn_fire_tmr
       04          
04BD1A CD 42 C8 04 0504*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BD1E CA 27 BD 04 0505*      jp z,@time_up ; timer zero so fire weapon
04BD22 FA 27 BD 04 0506*      jp m,@time_up ; timer negative so fire weapon
04BD26 C9          0507*      ret ; timer not expired so don't fire weapon
04BD27             0508*  @time_up:
04BD27             0509*  ; reset fire weapon timer
04BD27 FD 21 76 B9 0510*      ld iy,plyr_wpn_fire_tmr ; DEBUG - we should not need this?
       04          
04BD2C 2A 7C B9 04 0511*      ld hl,(plyr_wpn_fire_rate)
04BD30 CD 37 C8 04 0512*      call timestamp_tmr_set
04BD34             0513*  ; check animation frame for zero
04BD34 21 7F B9 04 0514*      ld hl,plyr_wpn_anim_fr
04BD38 7E          0515*      ld a,(hl)
04BD39 A7          0516*      and a
04BD3A 20 01       0517*      jr nz,@shoot ; if not zero, we're already in the middle of an animation
04BD3C 34          0518*      inc (hl) ; is zero so bump to first animation frame
04BD3D             0519*  @shoot:
04BD3D             0520*  ; roll for damage modifier
04BD3D CD C6 BE 04 0521*      call rand_8 ; a is a bitmask we apply to the weapon's dmg/burst
04BD41 21 69 B9 04 0522*      ld hl,plyr_wpn_damage
04BD45 A6          0523*      and a,(hl) ; a contains modified damage value
04BD46 ED 44       0524*      neg ; so we can add the negative
04BD48 32 66 B9 04 0525*      ld (plyr_shot_damage),a ; pass shot damage to sprite hurt routine
04BD4C             0526*  ; determine active weapon and shoot it
04BD4C 3A 68 B9 04 0527*      ld a,(plyr_wpn_active)
04BD50 FE 02       0528*      cp plyr_wpn_pistol
04BD52 CA 5E BC 04 0529*      jp z,plyr_shoot_pistol
04BD56 FE 04       0530*      cp plyr_wpn_mg
04BD58 CA 75 BC 04 0531*      jp z,plyr_shoot_machine_gun
04BD5C FE 08       0532*      cp plyr_wpn_gg
04BD5E CA 8C BC 04 0533*      jp z,plyr_shoot_gatling_gun
04BD62 FE 01       0534*      cp plyr_wpn_knife
04BD64 CA 19 BC 04 0535*      jp z,plyr_shoot_knife
04BD68 C9          0536*      ret
04BD69             0537*  
04BD69             0538*  ; process player keyboard input
04BD69             0539*  ; Inputs: plyr_x/y set at desired position
04BD69             0540*  ; Returns: player position updated
04BD69             0541*  ; Destroys: probably everything
04BD69             0542*  plyr_input:
04BD69             0543*  ; check weapon anmation frame for zero
04BD69 3A 7F B9 04 0544*      ld a,(plyr_wpn_anim_fr)
04BD6D E6 03       0545*      and 3 ; modulo 4
04BD6F 32 7F B9 04 0546*      ld (plyr_wpn_anim_fr),a
04BD73 28 05       0547*      jr z,@get_input
04BD75             0548*  ; ; animation frame is not zero so check animation timer
04BD75             0549*  ;     ld iy,plyr_wpn_anim_tmr
04BD75             0550*  ;     call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BD75             0551*  ;     jp z,@animate ; timer zero so animate
04BD75             0552*  ;     jp m,@animate ; timer negative so animate
04BD75             0553*  ;     jp @get_input ; time left on timer so no animation
04BD75             0554*  ; bump animation frame
04BD75             0555*  @animate:
04BD75 21 7F B9 04 0556*      ld hl,plyr_wpn_anim_fr
04BD79 34          0557*      inc (hl) ; next frame
04BD7A             0558*  ; ; reset animation timer
04BD7A             0559*  ;     ld iy,plyr_wpn_anim_tmr ; DEBUG - we should not need this?
04BD7A             0560*  ;     ld hl,(plyr_wpn_anim_tmr_rst)
04BD7A             0561*  ;     call timestamp_tmr_set
04BD7A             0562*  
04BD7A             0563*  @get_input:
04BD7A             0564*  ; reset player component velocities to zero as the default
04BD7A 21 00 00 00 0565*      ld hl,0
04BD7E 22 55 B9 04 0566*      ld (xvel),hl ; implicitly sets yvel
04BD82 AF          0567*      xor a ;
04BD83 32 5B B9 04 0568*      ld (avel),a ; set player angular velocity to zero as default
04BD87             0569*  
04BD87             0570*  ; check for keypresses and branch accordingly
04BD87             0571*      MOSCALL	mos_getkbmap ;ix = pointer to MOS virtual keys table
04BD87 3E 1E       0001*M 			LD	A, function
04BD89 5B CF       0002*M 			RST.LIL	08h
04BD8B             0572*  
04BD8B             0573*  ; CHECK WEAPON CONTROL KEYS
04BD8B             0574*  ; 58 Up player selects next weapon
04BD8B DD CB 07 4E 0575*      bit 1,(ix+7)
04BD8F 28 08       0576*      jr z,@Up
04BD91 DD E5       0577*      push ix ; it gets clobbered by the weapon select routine
04BD93 CD 80 BA 04 0578*      call plyr_next_weapon
04BD97 DD E1       0579*      pop ix
04BD99             0580*  @Up:
04BD99             0581*  
04BD99             0582*  ; 42 Down
04BD99 DD CB 05 4E 0583*      bit 1,(ix+5)
04BD9D 28 08       0584*      jr z,@Down
04BD9F DD E5       0585*      push ix ; it gets clobbered by the weapon select routine
04BDA1 CD A8 BA 04 0586*      call plyr_previous_weapon
04BDA5 DD E1       0587*      pop ix
04BDA7             0588*  @Down:
04BDA7             0589*  
04BDA7             0590*  ; =====================
04BDA7             0591*  ; 99 Space FIRE ZEE MISSILES!!!111
04BDA7 DD CB 0C 56 0592*      bit 2,(ix+12)
04BDAB 28 08       0593*      jr z,@Space
04BDAD DD E5       0594*      push ix ; it gets clobbered by the weapon firing
04BDAF CD 15 BD 04 0595*      call plyr_shoot
04BDB3 DD E1       0596*      pop ix ; restore ix
04BDB5             0597*  @Space:
04BDB5             0598*  
04BDB5             0599*  ; CHECK MOVEMENT KEYS
04BDB5             0600*  ; non-zero means no movement key was pressed
04BDB5 3E FF       0601*      ld a,-1
04BDB7             0602*  
04BDB7             0603*  ; 34 W player moves forward
04BDB7 DD CB 04 4E 0604*      bit 1,(ix+4)
04BDBB 28 07       0605*      jr z,@W
04BDBD 3E 01       0606*      ld a,speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04BDBF 32 56 B9 04 0607*      ld (yvel),a
04BDC3 AF          0608*      xor a
04BDC4             0609*  @W:
04BDC4             0610*  
04BDC4             0611*  ; 82 S player moves backward
04BDC4 DD CB 0A 4E 0612*      bit 1,(ix+10)
04BDC8 28 0C       0613*      jr z,@S
04BDCA 16 FF       0614*      ld d,-speed_plyr ; this is *camera* relative, not map relative, so y-axis is NOT inverted!
04BDCC 3A 56 B9 04 0615*      ld a,(yvel)
04BDD0 82          0616*      add a,d
04BDD1 32 56 B9 04 0617*      ld (yvel),a
04BDD5 AF          0618*      xor a
04BDD6             0619*  @S:
04BDD6             0620*  
04BDD6             0621*  ; 66 A plyer moves left
04BDD6 DD CB 08 4E 0622*      bit 1,(ix+8)
04BDDA 28 07       0623*      jr z,@A
04BDDC 3E FF       0624*      ld a,-speed_plyr ; no funky axis conversion here
04BDDE 32 55 B9 04 0625*      ld (xvel),a
04BDE2 AF          0626*      xor a
04BDE3             0627*  @A:
04BDE3             0628*  
04BDE3             0629*  ; 51 D player moves right
04BDE3 DD CB 06 56 0630*      bit 2,(ix+6)
04BDE7 28 0C       0631*      jr z,@D
04BDE9 16 01       0632*      ld d,speed_plyr ; no funky axis conversion here
04BDEB 3A 55 B9 04 0633*      ld a,(xvel)
04BDEF 82          0634*      add a,d
04BDF0 32 55 B9 04 0635*      ld (xvel),a
04BDF4 AF          0636*      xor a
04BDF5             0637*  @D:
04BDF5             0638*  
04BDF5             0639*  ; 26 Left player rotates anti-clockwise
04BDF5 DD CB 03 4E 0640*      bit 1,(ix+3)
04BDF9 28 06       0641*      jr z,@Left
04BDFB 21 5B B9 04 0642*      ld hl,avel
04BDFF 35          0643*      dec (hl)
04BE00 AF          0644*      xor a
04BE01             0645*  @Left:
04BE01             0646*  
04BE01             0647*  ; 122 Right player rotates clockwise
04BE01 DD CB 0F 4E 0648*      bit 1,(ix+15)
04BE05 28 06       0649*      jr z,@Right
04BE07 21 5B B9 04 0650*      ld hl,avel
04BE0B 34          0651*      inc (hl)
04BE0C AF          0652*      xor a
04BE0D             0653*  @Right:
04BE0D             0654*  
04BE0D             0655*  ; KEYPRESS DETECTION DONE
04BE0D A7          0656*      and a ; this will zero if player pressed a movement key
04BE0E C0          0657*      ret nz ; non zero so no key pressed
04BE0F             0658*  ; check move timer
04BE0F FD 21 8E B9 0659*      ld iy,plyr_move_timer
       04          
04BE14 CD 42 C8 04 0660*      call timestamp_tmr_get ; hl is time left in 120ths of a second, sign flag or zero flag set if expired
04BE18 F0          0661*      ret p ; time left on timer so no movement
04BE19             0662*  ; reset_move_timer
04BE19 21 1E 00 00 0663*      ld hl,plyr_move_rate
04BE1D FD 21 8E B9 0664*      ld iy,plyr_move_timer; DEBUG - we should not need this?
       04          
04BE22 CD 37 C8 04 0665*      call timestamp_tmr_set
04BE26             0666*  ; move player according to velocities set by keypresses
04BE26 ED 5B 55 B9 0667*      ld de,(xvel) ; d = yvel, e = xvel
       04          
04BE2B 3A 5B B9 04 0668*      ld a,(avel)
04BE2F 21 51 B9 04 0669*      ld hl,orientation
04BE33 86          0670*      add a,(hl)
04BE34 E6 03       0671*      and 0x03 ; modulo 4
04BE36 77          0672*      ld (hl),a
04BE37 CD B7 68 04 0673*      call trans_dx_dy ; d = dy, e = dx
04BE3B ED 53 59 B9 0674*      ld (dx),de
       04          
04BE40 3A 52 B9 04 0675*      ld a,(cur_x)
04BE44 83          0676*      add a,e
04BE45 5F          0677*      ld e,a
04BE46 3A 53 B9 04 0678*      ld a,(cur_y)
04BE4A 82          0679*      add a,d
04BE4B 57          0680*      ld d,a
04BE4C ED 53 55 B9 0681*      ld (xvel),de ; save yvel,xvel from d,e
       04          
04BE51 CD 4A 68 04 0682*      call get_cell_from_coords ; ix points to cell defs/status, a is target cell current obj_id, bc is cell_id
04BE55             0683*  ; check whether target cell contains a sprite
04BE55 DD 7E 03    0684*      ld a,(ix+map_sprite_id)
04BE58 FE FF       0685*      cp 255 ; value if not sprite
04BE5A 28 0A       0686*      jr z,@not_sprite
04BE5C             0687*  ; is a sprite so run its "use" behavior routine
04BE5C CD BF A6 04 0688*      call sprite_set_pointer
04BE60 3E 01       0689*      ld a,sp_use
04BE62 CD FC A7 04 0690*      call do_sprite_behavior
04BE66             0691*  ; fall through because we still need to check out what's going on in the target cell
04BE66             0692*  @not_sprite:
04BE66 ED 5B 55 B9 0693*      ld de,(xvel) ; restore yvel,xvel to d,e
       04          
04BE6B             0694*  ; read map type/status mask from target cell
04BE6B DD 7E 00    0695*      ld a,(ix+map_type_status)
04BE6E 47          0696*      ld b,a ; b = target cell type/status
04BE6F             0697*  ; branch on the values in the bitmask
04BE6F 3E 40       0698*      ld a,cell_is_wall
04BE71 A0          0699*      and b
04BE72 C0          0700*      ret nz ; can't move thru walls
04BE73 3E 04       0701*      ld a,cell_is_to_room
04BE75 A0          0702*      and b
04BE76 C2 C2 69 04 0703*      jp nz,change_room
04BE7A             0704*      ; fall through to @move_it
04BE7A             0705*  @move_it:
04BE7A             0706*  ; we are cleared for movement so update player position
04BE7A 11 00 00 00 0707*      ld de,0 ; make sure deu is zero
04BE7E ED 4B 59 B9 0708*      ld bc,(dx) ; b = dy, c = dx
       04          
04BE83 3A 52 B9 04 0709*      ld a,(cur_x)
04BE87 81          0710*      add a,c
04BE88 5F          0711*      ld e,a
04BE89 32 52 B9 04 0712*      ld (cur_x),a
04BE8D 3A 53 B9 04 0713*      ld a,(cur_y)
04BE91 80          0714*      add a,b
04BE92 57          0715*      ld d,a
04BE93 32 53 B9 04 0716*      ld (cur_y),a
04BE97 C9          0717*      ret
04BE98             0027   	include "src/asm/maths.asm"
04BE98 00 00 00 00 0001*  add_bcd_arg1: db #00,#00,#00,#00
04BE9C 00 00 00 00 0002*  add_bcd_arg2: db #00,#00,#00,#00
04BEA0             0003*  
04BEA0             0004*  ; set bcd values in a scratch memory address from registers bcde
04BEA0             0005*  ; input: hl; scratch address,bcde; 8-place bcd number
04BEA0             0006*  ; destroys ; hl
04BEA0             0007*  set_bcd:
04BEA0 73          0008*      ld (hl),e
04BEA1 23          0009*      inc hl
04BEA2 72          0010*      ld (hl),d
04BEA3 23          0011*      inc hl
04BEA4 71          0012*      ld (hl),c
04BEA5 23          0013*      inc hl
04BEA6 70          0014*      ld (hl),b
04BEA7 C9          0015*      ret
04BEA8             0016*  
04BEA8             0017*  ; load bcd values from a scratch memory address to bcde
04BEA8             0018*  ; input: hl; scratch address
04BEA8             0019*  ; output: bcde; 8-place bcd number
04BEA8             0020*  ; destroys: hl
04BEA8             0021*  get_bcd:
04BEA8 5E          0022*      ld e,(hl)
04BEA9 23          0023*      inc hl
04BEAA 56          0024*      ld d,(hl)
04BEAB 23          0025*      inc hl
04BEAC 4E          0026*      ld c,(hl)
04BEAD 23          0027*      inc hl
04BEAE 46          0028*      ld b,(hl)
04BEAF C9          0029*      ret
04BEB0             0030*  
04BEB0             0031*  ; BCD addition
04BEB0             0032*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04BEB0             0033*  ;       a is the number of bytes holding each number (number of places/2)
04BEB0             0034*  ; outputs: (hl) + (de) --> (hl)
04BEB0             0035*  ; destroys: a,b,de,hl
04BEB0             0036*  add_bcd:
04BEB0 47          0037*      ld b,a ; loop counter
04BEB1 AF          0038*      xor a ; reset a, clear carry flag
04BEB2             0039*  adcec:
04BEB2 1A          0040*      ld a,(de) ; addend to acc
04BEB3 8E          0041*      adc a,(hl) ; add (hl) to acc
04BEB4 27          0042*      daa ; adjust result to bcd
04BEB5 77          0043*      ld (hl),a ; store result
04BEB6 23          0044*      inc hl ; advance memory pointers
04BEB7 13          0045*      inc de
04BEB8 10 F8       0046*      djnz adcec ; loop until b == 0
04BEBA C9          0047*      ret
04BEBB             0048*  
04BEBB             0049*  ; BCD subtraction
04BEBB             0050*  ; inputs: (hl) and (de) point to BCD numbers of equal length (divisible by 2)
04BEBB             0051*  ;       a is the number of bytes holding each number (number of places/2)
04BEBB             0052*  ; outputs: (hl) - (de) --> (hl)
04BEBB             0053*  ; destroys: a,b,de,hl
04BEBB             0054*  sub_bcd:
04BEBB 47          0055*      ld b,a ; loop counter
04BEBC AF          0056*      xor a ; reset a,clear carry flag
04BEBD             0057*  subdec:
04BEBD 1A          0058*      ld a,(de) ; subtrahend to acc
04BEBE 9E          0059*      sbc a,(hl) ; subtract (hl) from acc
04BEBF 27          0060*      daa ; adjust result to bcd
04BEC0 77          0061*      ld (hl),a ; store result
04BEC1 23          0062*      inc hl ; advance memory pointers
04BEC2 13          0063*      inc de
04BEC3 10 F8       0064*      djnz subdec ; loop until b == 0
04BEC5 C9          0065*      ret
04BEC6             0066*  
04BEC6             0067*  ; http://www.z80.info/pseudo-random.txt
04BEC6             0068*  rand_8:
04BEC6 C5          0069*      push bc
04BEC7 3A DA BE 04 0070*      ld a,(r_seed)
04BECB 4F          0071*      ld c,a
04BECC             0072*  
04BECC 0F          0073*      rrca ; multiply by 32
04BECD 0F          0074*      rrca
04BECE 0F          0075*      rrca
04BECF EE 1F       0076*      xor 0x1f
04BED1             0077*  
04BED1 81          0078*      add a,c
04BED2 DE FF       0079*      sbc a,255 ; carry
04BED4             0080*  
04BED4 32 DA BE 04 0081*      ld (r_seed),a
04BED8 C1          0082*      pop bc
04BED9 C9          0083*      ret
04BEDA 50          0084*  r_seed: defb $50
04BEDB             0028   	include "src/asm/img_load.asm"
04BEDB 00 00 00    0001*  cur_file_idx: dl 0
04BEDE 00 00 00    0002*  cur_filename: dl 0
04BEE1 00 00 00    0003*  cur_buffer_id: dl 0
04BEE4 00 00 00    0004*  cur_buffer_id_lut: dl 0
04BEE7 00 00 00    0005*  cur_load_jump_table: dl 0
04BEEA             0006*  
04BEEA             0007*  img_load_init:
04BEEA             0008*  ; initialize bj's position parameters
04BEEA 21 00 00 00 0009*  	ld hl,0
04BEEE 22 38 C0 04 0010*  	ld (bj_yvel),hl
04BEF2             0011*  
04BEF2 21 2D 00 00 0012*      ld hl,45
04BEF6 22 3B C0 04 0013*  	ld (bj_y_cur),hl
04BEFA 22 3E C0 04 0014*  	ld (bj_y_min),hl
04BEFE 22 41 C0 04 0015*      ld (bj_y_max),hl
04BF02             0016*  
04BF02 21 01 00 00 0017*  	ld hl,1
04BF06 22 2C C0 04 0018*  	ld (bj_xvel),hl
04BF0A             0019*  
04BF0A 21 0A 00 00 0020*  	ld hl,10
04BF0E 22 2F C0 04 0021*  	ld (bj_x_cur),hl
04BF12 22 32 C0 04 0022*  	ld (bj_x_min),hl
04BF16             0023*  
04BF16 21 C8 00 00 0024*  	ld hl,320-120
04BF1A 22 35 C0 04 0025*  	ld (bj_x_max),hl
04BF1E             0026*  
04BF1E C9          0027*      ret
04BF1F             0028*  
04BF1F             0029*  ; inputs: bc is the number of images to load, cur_buffer_id_lut and cur_load_jump_table set to the address of the first entry in the respective lookup tables
04BF1F             0030*  img_load_main:
04BF1F 21 00 00 00 0031*      ld hl,0
04BF23 22 DB BE 04 0032*      ld (cur_file_idx),hl
04BF27             0033*  img_load_main_loop:
04BF27             0034*  ; back up loop counter
04BF27 C5          0035*      push bc
04BF28             0036*  ; load the next panel
04BF28 CD 90 BF 04 0037*      call load_next_panel
04BF2C             0038*  ; draw all the things
04BF2C CD 44 C0 04 0039*      call tmp_draw_all_the_things
04BF30             0040*  ; draw the most recently loaded panel
04BF30 2A E1 BE 04 0041*  	ld hl,(cur_buffer_id)
04BF34 CD AD B0 04 0042*  	call vdu_buff_select
04BF38 01 00 00 00 0043*  	ld bc,0
04BF3C 11 00 00 00 0044*  	ld de,0
04BF40 CD 7E B2 04 0045*  	call vdu_plot_bmp
04BF44             0046*  ; move bj
04BF44 CD CC BF 04 0047*  	call move_bj
04BF48             0048*  ; print welcome message
04BF48 DD 21 CA 82 0049*  	ld ix,font_itc_honda
       04          
04BF4D 21 AE C8 04 0050*  	ld hl,hello_world
04BF51 01 20 00 00 0051*  	ld bc,32
04BF55 11 02 00 00 0052*  	ld de,2
04BF59 CD 27 68 04 0053*  	call font_bmp_print
04BF5D             0054*  ; print current filename
04BF5D CD 44 AF 04 0055*  	call vdu_cls
04BF61 2A DE BE 04 0056*  	ld hl,(cur_filename)
04BF65 CD 43 B5 04 0057*  	call printString
04BF69 CD 58 B5 04 0058*  	call printNewLine
04BF6D             0059*  
04BF6D             0060*  ; print current load stopwatch
04BF6D 21 D0 C8 04 0061*  	ld hl,loading_time
04BF71 CD 43 B5 04 0062*  	call printString
04BF75 CD 60 C8 04 0063*  	call stopwatch_get ; hl = elapsed time in 120ths of a second
04BF79 CD 91 B5 04 0064*  	call printDec
04BF7D             0065*  
04BF7D             0066*  ; flip screen
04BF7D CD 13 B1 04 0067*      call vdu_flip
04BF81             0068*  ; decrement loop counter
04BF81 C1          0069*      pop bc
04BF82 0B          0070*  	dec bc
04BF83             0071*  ; ; DEBUG: DUMP REGISTERS
04BF83             0072*  ; 	push bc
04BF83             0073*  ; 	call dumpRegistersHex
04BF83             0074*  ; 	call vdu_flip
04BF83             0075*  ; 	pop bc
04BF83             0076*  ; ; END DEBUG
04BF83 79          0077*      ld a,c
04BF84 B7          0078*      or a
04BF85 C2 27 BF 04 0079*      jp nz,img_load_main_loop
04BF89 78          0080*      ld a,b
04BF8A B7          0081*      or a
04BF8B C2 27 BF 04 0082*      jp nz,img_load_main_loop
04BF8F C9          0083*      ret
04BF90             0084*  
04BF90             0085*  load_next_panel:
04BF90             0086*  ; look up the load routine for the current file index
04BF90 2A DB BE 04 0087*  	ld hl,(cur_file_idx)
04BF94 29          0088*  	add hl,hl ; multiply current index by 2 ...
04BF95 ED 5B DB BE 0089*  	ld de,(cur_file_idx)
       04          
04BF9A 19          0090*  	add hl,de ; ... now by 3
04BF9B ED 5B E7 BE 0091*  	ld de,(cur_load_jump_table) ; tack it on to the base address of the jump table
       04          
04BFA0 19          0092*  	add hl,de
04BFA1 ED 27       0093*  	ld hl,(hl) ; hl is pointing to load routine address
04BFA3 22 A8 BF 04 0094*  	ld (@jump_addr+1),hl ; self-modifying code ...
04BFA7             0095*  @jump_addr:
04BFA7 CD 00 00 00 0096*  	call 0 ; call the panel load routine
04BFAB             0097*  ; look up the buffer id for the current file
04BFAB 2A DB BE 04 0098*  	ld hl,(cur_file_idx)
04BFAF 29          0099*  	add hl,hl ; multiply current index by 2 ...
04BFB0 ED 5B DB BE 0100*  	ld de,(cur_file_idx)
       04          
04BFB5 19          0101*  	add hl,de ; ... now by 3
04BFB6 ED 5B E4 BE 0102*  	ld de,(cur_buffer_id_lut) ; tack it on to the base address of the lookup table
       04          
04BFBB 19          0103*  	add hl,de
04BFBC ED 27       0104*  	ld hl,(hl)
04BFBE 22 E1 BE 04 0105*  	ld (cur_buffer_id),hl
04BFC2             0106*  ; bump the current file index
04BFC2 2A DB BE 04 0107*  	ld hl,(cur_file_idx)
04BFC6 23          0108*  	inc hl
04BFC7 22 DB BE 04 0109*  	ld (cur_file_idx),hl
04BFCB C9          0110*  	ret
04BFCC             0111*  
04BFCC             0112*  move_bj:
04BFCC             0113*  ; activate bj bitmap
04BFCC 21 04 20 00 0114*  	ld hl, BUF_UI_BJ_120_120
04BFD0 CD AD B0 04 0115*  	call vdu_buff_select
04BFD4             0116*  ; update position based on velocity parameters
04BFD4 2A 2F C0 04 0117*  	ld hl, (bj_x_cur)
04BFD8 ED 5B 2C C0 0118*  	ld de, (bj_xvel)
       04          
04BFDD 19          0119*  	add hl, de
04BFDE 22 2F C0 04 0120*  	ld (bj_x_cur), hl
04BFE2 EB          0121*  	ex de,hl ; store x_cur in de
04BFE3             0122*  ; check if we're < x_min
04BFE3 2A 32 C0 04 0123*  	ld hl,(bj_x_min)
04BFE7 AF          0124*  	xor a ; clear carry
04BFE8 ED 52       0125*  	sbc hl,de ; x_min - x_cur
04BFEA F2 08 C0 04 0126*  	jp p, move_bj_x_min
04BFEE             0127*  ; check if we're > x_max
04BFEE 2A 35 C0 04 0128*  	ld hl,(bj_x_max)
04BFF2 AF          0129*  	xor a ; clear carry
04BFF3 ED 52       0130*  	sbc hl,de ; x_max - x_cur
04BFF5 FA 1A C0 04 0131*  	jp m, move_bj_x_max
04BFF9             0132*  ; if not at either boundary, fall through to draw bj's
04BFF9             0133*  draw_bj:
04BFF9 ED 4B 2F C0 0134*  	ld bc,(bj_x_cur)
       04          
04BFFE ED 5B 3B C0 0135*  	ld de,(bj_y_cur)
       04          
04C003 CD 7E B2 04 0136*  	call vdu_plot_bmp
04C007 C9          0137*  	ret
04C008             0138*  move_bj_x_min:
04C008 21 01 00 00 0139*  	ld hl,1
04C00C 22 2C C0 04 0140*  	ld (bj_xvel),hl
04C010 2A 32 C0 04 0141*  	ld hl,(bj_x_min)
04C014 22 2F C0 04 0142*  	ld (bj_x_cur),hl
04C018 18 DF       0143*  	jr draw_bj
04C01A             0144*  move_bj_x_max:
04C01A 21 FF FF FF 0145*  	ld hl,-1
04C01E 22 2C C0 04 0146*  	ld (bj_xvel),hl
04C022 2A 35 C0 04 0147*  	ld hl,(bj_x_max)
04C026 22 2F C0 04 0148*  	ld (bj_x_cur),hl
04C02A 18 CD       0149*  	jr draw_bj
04C02C 00 00 00    0150*  bj_xvel: dl 0
04C02F 00 00 00    0151*  bj_x_cur: dl 0
04C032 00 00 00    0152*  bj_x_min: dl 0
04C035 00 00 00    0153*  bj_x_max: dl 0
04C038             0154*  
04C038 00 00 00    0155*  bj_yvel: dl 0
04C03B 00 00 00    0156*  bj_y_cur: dl 0
04C03E 00 00 00    0157*  bj_y_min: dl 0
04C041 00 00 00    0158*  bj_y_max: dl 0
04C044             0159*  
04C044             0160*  tmp_draw_all_the_things:
04C044 21 0A 20 00 0161*      ld hl,BUF_UI_SPLASH
04C048 CD AD B0 04 0162*      call vdu_buff_select
04C04C 01 00 00 00 0163*      ld bc,0
04C050 11 00 00 00 0164*      ld de,0
04C054 CD 7E B2 04 0165*      call vdu_plot_bmp
04C058 C9          0166*  	ret
04C059             0167*  
04C059             0168*  ; load an uncompressed rgba2222 image file to a buffer
04C059             0169*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04C059             0170*  vdu_load_img:
04C059             0171*  ; back up image dimension parameters
04C059 C5          0172*  	push bc
04C05A D5          0173*  	push de
04C05B             0174*  ; load the image
04C05B CD BD CA 04 0175*  	call vdu_load_buffer_from_file
04C05F             0176*  ; now make it a bitmap
04C05F D1          0177*  	pop de
04C060 C1          0178*  	pop bc
04C061 3E 01       0179*  	ld a,1 ; the magic number for rgba2222
04C063 C3 C2 B0 04 0180*  	jp vdu_bmp_create ; will return to caller from there
04C067             0181*  
04C067             0182*  ; load a compressed rgba2222 image file to a buffer
04C067             0183*  ; inputs: bc,de image width,height ; hl = bufferId ; ix = file size
04C067             0184*  vdu_load_img_cmp:
04C067             0185*  ; back up image dimension parameters
04C067 C5          0186*  	push bc
04C068 D5          0187*  	push de
04C069             0188*  ; back up the buffer id
04C069 E5          0189*  	push hl
04C06A             0190*  ; load the image
04C06A CD BD CA 04 0191*  	call vdu_load_buffer_from_file
04C06E             0192*  ; decompress the buffer
04C06E E1          0193*  	pop hl ; bufferId
04C06F CD 21 B1 04 0194*  	call vdu_decompress_buffer
04C073             0195*  ; now make it a bitmap
04C073 D1          0196*  	pop de ; image height
04C074 C1          0197*  	pop bc ; image width
04C075 3E 01       0198*  	ld a,1 ; the magic number for rgba2222
04C077 C3 C2 B0 04 0199*  	jp vdu_bmp_create ; will return to caller from there
04C07B             0029   	include "src/asm/sfx.asm"
04C07B             0001*  ; This file is created by build_98_asm_sfx.py, do not edit it!
04C07B             0002*  
04C07B             0003*  SFX_num_buffers: equ 22
04C07B             0004*  ; SFX buffer ids:
04C07B             0005*  BUF_ACHTUNG: equ 0xFB00
04C07B             0006*  BUF_AHH: equ 0xFB01
04C07B             0007*  BUF_AUGH: equ 0xFB02
04C07B             0008*  BUF_AYEE: equ 0xFB03
04C07B             0009*  BUF_AYEE_HIGH: equ 0xFB04
04C07B             0010*  BUF_DOG_WOOF_DOUBLE: equ 0xFB05
04C07B             0011*  BUF_DOG_WOOF_SINGLE: equ 0xFB06
04C07B             0012*  BUF_DOG_YELP: equ 0xFB07
04C07B             0013*  BUF_EXPLODE: equ 0xFB08
04C07B             0014*  BUF_GOT_TREASURE: equ 0xFB09
04C07B             0015*  BUF_GUN_EMPTY: equ 0xFB0A
04C07B             0016*  BUF_GUN_RELOAD: equ 0xFB0B
04C07B             0017*  BUF_KNIFE: equ 0xFB0C
04C07B             0018*  BUF_MEIN_LEBEN: equ 0xFB0D
04C07B             0019*  BUF_OOF: equ 0xFB0E
04C07B             0020*  BUF_SCHUSSTAFFEL: equ 0xFB0F
04C07B             0021*  BUF_SCREAM: equ 0xFB10
04C07B             0022*  BUF_SHOT_GATLING_BURST: equ 0xFB11
04C07B             0023*  BUF_SHOT_MACHINE_GUN_BURST: equ 0xFB12
04C07B             0024*  BUF_SHOT_PISTOL: equ 0xFB13
04C07B             0025*  BUF_UGH: equ 0xFB14
04C07B             0026*  BUF_WILHELM: equ 0xFB15
04C07B             0027*  
04C07B             0028*  ; SFX buffer id reverse lookup:
04C07B             0029*  SFX_buffer_id_lut:
04C07B 00 FB 00    0030*  	dl BUF_ACHTUNG
04C07E 01 FB 00    0031*  	dl BUF_AHH
04C081 02 FB 00    0032*  	dl BUF_AUGH
04C084 03 FB 00    0033*  	dl BUF_AYEE
04C087 04 FB 00    0034*  	dl BUF_AYEE_HIGH
04C08A 05 FB 00    0035*  	dl BUF_DOG_WOOF_DOUBLE
04C08D 06 FB 00    0036*  	dl BUF_DOG_WOOF_SINGLE
04C090 07 FB 00    0037*  	dl BUF_DOG_YELP
04C093 08 FB 00    0038*  	dl BUF_EXPLODE
04C096 09 FB 00    0039*  	dl BUF_GOT_TREASURE
04C099 0A FB 00    0040*  	dl BUF_GUN_EMPTY
04C09C 0B FB 00    0041*  	dl BUF_GUN_RELOAD
04C09F 0C FB 00    0042*  	dl BUF_KNIFE
04C0A2 0D FB 00    0043*  	dl BUF_MEIN_LEBEN
04C0A5 0E FB 00    0044*  	dl BUF_OOF
04C0A8 0F FB 00    0045*  	dl BUF_SCHUSSTAFFEL
04C0AB 10 FB 00    0046*  	dl BUF_SCREAM
04C0AE 11 FB 00    0047*  	dl BUF_SHOT_GATLING_BURST
04C0B1 12 FB 00    0048*  	dl BUF_SHOT_MACHINE_GUN_BURST
04C0B4 13 FB 00    0049*  	dl BUF_SHOT_PISTOL
04C0B7 14 FB 00    0050*  	dl BUF_UGH
04C0BA 15 FB 00    0051*  	dl BUF_WILHELM
04C0BD             0052*  
04C0BD             0053*  ; SFX duration lookup:
04C0BD             0054*  SFX_duration_lut:
04C0BD 58 03       0055*  	dw 856 ; ACHTUNG
04C0BF 91 01       0056*  	dw 401 ; AHH
04C0C1 FC 02       0057*  	dw 764 ; AUGH
04C0C3 E6 01       0058*  	dw 486 ; AYEE
04C0C5 40 04       0059*  	dw 1088 ; AYEE_HIGH
04C0C7 63 02       0060*  	dw 611 ; DOG_WOOF_DOUBLE
04C0C9 15 02       0061*  	dw 533 ; DOG_WOOF_SINGLE
04C0CB B0 01       0062*  	dw 432 ; DOG_YELP
04C0CD 13 05       0063*  	dw 1299 ; EXPLODE
04C0CF A7 05       0064*  	dw 1447 ; GOT_TREASURE
04C0D1 24 01       0065*  	dw 292 ; GUN_EMPTY
04C0D3 BA 01       0066*  	dw 442 ; GUN_RELOAD
04C0D5 F2 00       0067*  	dw 242 ; KNIFE
04C0D7 2E 03       0068*  	dw 814 ; MEIN_LEBEN
04C0D9 CE 03       0069*  	dw 974 ; OOF
04C0DB 48 02       0070*  	dw 584 ; SCHUSSTAFFEL
04C0DD E0 02       0071*  	dw 736 ; SCREAM
04C0DF B6 05       0072*  	dw 1462 ; SHOT_GATLING_BURST
04C0E1 F9 03       0073*  	dw 1017 ; SHOT_MACHINE_GUN_BURST
04C0E3 7C 04       0074*  	dw 1148 ; SHOT_PISTOL
04C0E5 77 01       0075*  	dw 375 ; UGH
04C0E7 FD 04       0076*  	dw 1277 ; WILHELM
04C0E9             0077*  
04C0E9             0078*  ; SFX load routines jump table:
04C0E9             0079*  SFX_load_routines_table:
04C0E9 2B C1 04    0080*  	dl load_sfx_ACHTUNG
04C0EC 4D C1 04    0081*  	dl load_sfx_AHH
04C0EF 6F C1 04    0082*  	dl load_sfx_AUGH
04C0F2 91 C1 04    0083*  	dl load_sfx_AYEE
04C0F5 B3 C1 04    0084*  	dl load_sfx_AYEE_HIGH
04C0F8 D5 C1 04    0085*  	dl load_sfx_DOG_WOOF_DOUBLE
04C0FB F7 C1 04    0086*  	dl load_sfx_DOG_WOOF_SINGLE
04C0FE 19 C2 04    0087*  	dl load_sfx_DOG_YELP
04C101 3B C2 04    0088*  	dl load_sfx_EXPLODE
04C104 5D C2 04    0089*  	dl load_sfx_GOT_TREASURE
04C107 7F C2 04    0090*  	dl load_sfx_GUN_EMPTY
04C10A A1 C2 04    0091*  	dl load_sfx_GUN_RELOAD
04C10D C3 C2 04    0092*  	dl load_sfx_KNIFE
04C110 E5 C2 04    0093*  	dl load_sfx_MEIN_LEBEN
04C113 07 C3 04    0094*  	dl load_sfx_OOF
04C116 29 C3 04    0095*  	dl load_sfx_SCHUSSTAFFEL
04C119 4B C3 04    0096*  	dl load_sfx_SCREAM
04C11C 6D C3 04    0097*  	dl load_sfx_SHOT_GATLING_BURST
04C11F 8F C3 04    0098*  	dl load_sfx_SHOT_MACHINE_GUN_BURST
04C122 B1 C3 04    0099*  	dl load_sfx_SHOT_PISTOL
04C125 D3 C3 04    0100*  	dl load_sfx_UGH
04C128 F5 C3 04    0101*  	dl load_sfx_WILHELM
04C12B             0102*  
04C12B             0103*  ; Import sfx .raw files and load them into VDP buffers
04C12B             0104*  
04C12B             0105*  load_sfx_ACHTUNG:
04C12B 21 17 C4 04 0106*  	ld hl,FACHTUNG
04C12F 22 DE BE 04 0107*  	ld (cur_filename),hl
04C133 11 0A CB 04 0108*  	ld de,filedata
04C137 01 00 00 01 0109*  	ld bc,65536
04C13B 3E 01       0110*  	ld a,mos_load
04C13D 5B CF       0111*  	RST.LIL 08h
04C13F 21 00 FB 00 0112*  	ld hl,BUF_ACHTUNG
04C143 DD 21 3A 38 0113*  	ld ix,14394
       00          
04C148 CD 37 B5 04 0114*  	call vdu_load_sfx
04C14C C9          0115*  	ret
04C14D             0116*  
04C14D             0117*  load_sfx_AHH:
04C14D 21 27 C4 04 0118*  	ld hl,FAHH
04C151 22 DE BE 04 0119*  	ld (cur_filename),hl
04C155 11 0A CB 04 0120*  	ld de,filedata
04C159 01 00 00 01 0121*  	ld bc,65536
04C15D 3E 01       0122*  	ld a,mos_load
04C15F 5B CF       0123*  	RST.LIL 08h
04C161 21 01 FB 00 0124*  	ld hl,BUF_AHH
04C165 DD 21 63 1A 0125*  	ld ix,6755
       00          
04C16A CD 37 B5 04 0126*  	call vdu_load_sfx
04C16E C9          0127*  	ret
04C16F             0128*  
04C16F             0129*  load_sfx_AUGH:
04C16F 21 33 C4 04 0130*  	ld hl,FAUGH
04C173 22 DE BE 04 0131*  	ld (cur_filename),hl
04C177 11 0A CB 04 0132*  	ld de,filedata
04C17B 01 00 00 01 0133*  	ld bc,65536
04C17F 3E 01       0134*  	ld a,mos_load
04C181 5B CF       0135*  	RST.LIL 08h
04C183 21 02 FB 00 0136*  	ld hl,BUF_AUGH
04C187 DD 21 39 32 0137*  	ld ix,12857
       00          
04C18C CD 37 B5 04 0138*  	call vdu_load_sfx
04C190 C9          0139*  	ret
04C191             0140*  
04C191             0141*  load_sfx_AYEE:
04C191 21 40 C4 04 0142*  	ld hl,FAYEE
04C195 22 DE BE 04 0143*  	ld (cur_filename),hl
04C199 11 0A CB 04 0144*  	ld de,filedata
04C19D 01 00 00 01 0145*  	ld bc,65536
04C1A1 3E 01       0146*  	ld a,mos_load
04C1A3 5B CF       0147*  	RST.LIL 08h
04C1A5 21 03 FB 00 0148*  	ld hl,BUF_AYEE
04C1A9 DD 21 00 20 0149*  	ld ix,8192
       00          
04C1AE CD 37 B5 04 0150*  	call vdu_load_sfx
04C1B2 C9          0151*  	ret
04C1B3             0152*  
04C1B3             0153*  load_sfx_AYEE_HIGH:
04C1B3 21 4D C4 04 0154*  	ld hl,FAYEE_HIGH
04C1B7 22 DE BE 04 0155*  	ld (cur_filename),hl
04C1BB 11 0A CB 04 0156*  	ld de,filedata
04C1BF 01 00 00 01 0157*  	ld bc,65536
04C1C3 3E 01       0158*  	ld a,mos_load
04C1C5 5B CF       0159*  	RST.LIL 08h
04C1C7 21 04 FB 00 0160*  	ld hl,BUF_AYEE_HIGH
04C1CB DD 21 77 47 0161*  	ld ix,18295
       00          
04C1D0 CD 37 B5 04 0162*  	call vdu_load_sfx
04C1D4 C9          0163*  	ret
04C1D5             0164*  
04C1D5             0165*  load_sfx_DOG_WOOF_DOUBLE:
04C1D5 21 5F C4 04 0166*  	ld hl,FDOG_WOOF_DOUBLE
04C1D9 22 DE BE 04 0167*  	ld (cur_filename),hl
04C1DD 11 0A CB 04 0168*  	ld de,filedata
04C1E1 01 00 00 01 0169*  	ld bc,65536
04C1E5 3E 01       0170*  	ld a,mos_load
04C1E7 5B CF       0171*  	RST.LIL 08h
04C1E9 21 05 FB 00 0172*  	ld hl,BUF_DOG_WOOF_DOUBLE
04C1ED DD 21 24 28 0173*  	ld ix,10276
       00          
04C1F2 CD 37 B5 04 0174*  	call vdu_load_sfx
04C1F6 C9          0175*  	ret
04C1F7             0176*  
04C1F7             0177*  load_sfx_DOG_WOOF_SINGLE:
04C1F7 21 77 C4 04 0178*  	ld hl,FDOG_WOOF_SINGLE
04C1FB 22 DE BE 04 0179*  	ld (cur_filename),hl
04C1FF 11 0A CB 04 0180*  	ld de,filedata
04C203 01 00 00 01 0181*  	ld bc,65536
04C207 3E 01       0182*  	ld a,mos_load
04C209 5B CF       0183*  	RST.LIL 08h
04C20B 21 06 FB 00 0184*  	ld hl,BUF_DOG_WOOF_SINGLE
04C20F DD 21 10 23 0185*  	ld ix,8976
       00          
04C214 CD 37 B5 04 0186*  	call vdu_load_sfx
04C218 C9          0187*  	ret
04C219             0188*  
04C219             0189*  load_sfx_DOG_YELP:
04C219 21 8F C4 04 0190*  	ld hl,FDOG_YELP
04C21D 22 DE BE 04 0191*  	ld (cur_filename),hl
04C221 11 0A CB 04 0192*  	ld de,filedata
04C225 01 00 00 01 0193*  	ld bc,65536
04C229 3E 01       0194*  	ld a,mos_load
04C22B 5B CF       0195*  	RST.LIL 08h
04C22D 21 07 FB 00 0196*  	ld hl,BUF_DOG_YELP
04C231 DD 21 60 1C 0197*  	ld ix,7264
       00          
04C236 CD 37 B5 04 0198*  	call vdu_load_sfx
04C23A C9          0199*  	ret
04C23B             0200*  
04C23B             0201*  load_sfx_EXPLODE:
04C23B 21 A0 C4 04 0202*  	ld hl,FEXPLODE
04C23F 22 DE BE 04 0203*  	ld (cur_filename),hl
04C243 11 0A CB 04 0204*  	ld de,filedata
04C247 01 00 00 01 0205*  	ld bc,65536
04C24B 3E 01       0206*  	ld a,mos_load
04C24D 5B CF       0207*  	RST.LIL 08h
04C24F 21 08 FB 00 0208*  	ld hl,BUF_EXPLODE
04C253 DD 21 48 55 0209*  	ld ix,21832
       00          
04C258 CD 37 B5 04 0210*  	call vdu_load_sfx
04C25C C9          0211*  	ret
04C25D             0212*  
04C25D             0213*  load_sfx_GOT_TREASURE:
04C25D 21 B0 C4 04 0214*  	ld hl,FGOT_TREASURE
04C261 22 DE BE 04 0215*  	ld (cur_filename),hl
04C265 11 0A CB 04 0216*  	ld de,filedata
04C269 01 00 00 01 0217*  	ld bc,65536
04C26D 3E 01       0218*  	ld a,mos_load
04C26F 5B CF       0219*  	RST.LIL 08h
04C271 21 09 FB 00 0220*  	ld hl,BUF_GOT_TREASURE
04C275 DD 21 07 5F 0221*  	ld ix,24327
       00          
04C27A CD 37 B5 04 0222*  	call vdu_load_sfx
04C27E C9          0223*  	ret
04C27F             0224*  
04C27F             0225*  load_sfx_GUN_EMPTY:
04C27F 21 C5 C4 04 0226*  	ld hl,FGUN_EMPTY
04C283 22 DE BE 04 0227*  	ld (cur_filename),hl
04C287 11 0A CB 04 0228*  	ld de,filedata
04C28B 01 00 00 01 0229*  	ld bc,65536
04C28F 3E 01       0230*  	ld a,mos_load
04C291 5B CF       0231*  	RST.LIL 08h
04C293 21 0A FB 00 0232*  	ld hl,BUF_GUN_EMPTY
04C297 DD 21 3F 13 0233*  	ld ix,4927
       00          
04C29C CD 37 B5 04 0234*  	call vdu_load_sfx
04C2A0 C9          0235*  	ret
04C2A1             0236*  
04C2A1             0237*  load_sfx_GUN_RELOAD:
04C2A1 21 D7 C4 04 0238*  	ld hl,FGUN_RELOAD
04C2A5 22 DE BE 04 0239*  	ld (cur_filename),hl
04C2A9 11 0A CB 04 0240*  	ld de,filedata
04C2AD 01 00 00 01 0241*  	ld bc,65536
04C2B1 3E 01       0242*  	ld a,mos_load
04C2B3 5B CF       0243*  	RST.LIL 08h
04C2B5 21 0B FB 00 0244*  	ld hl,BUF_GUN_RELOAD
04C2B9 DD 21 0F 1D 0245*  	ld ix,7439
       00          
04C2BE CD 37 B5 04 0246*  	call vdu_load_sfx
04C2C2 C9          0247*  	ret
04C2C3             0248*  
04C2C3             0249*  load_sfx_KNIFE:
04C2C3 21 EA C4 04 0250*  	ld hl,FKNIFE
04C2C7 22 DE BE 04 0251*  	ld (cur_filename),hl
04C2CB 11 0A CB 04 0252*  	ld de,filedata
04C2CF 01 00 00 01 0253*  	ld bc,65536
04C2D3 3E 01       0254*  	ld a,mos_load
04C2D5 5B CF       0255*  	RST.LIL 08h
04C2D7 21 0C FB 00 0256*  	ld hl,BUF_KNIFE
04C2DB DD 21 F3 0F 0257*  	ld ix,4083
       00          
04C2E0 CD 37 B5 04 0258*  	call vdu_load_sfx
04C2E4 C9          0259*  	ret
04C2E5             0260*  
04C2E5             0261*  load_sfx_MEIN_LEBEN:
04C2E5 21 F8 C4 04 0262*  	ld hl,FMEIN_LEBEN
04C2E9 22 DE BE 04 0263*  	ld (cur_filename),hl
04C2ED 11 0A CB 04 0264*  	ld de,filedata
04C2F1 01 00 00 01 0265*  	ld bc,65536
04C2F5 3E 01       0266*  	ld a,mos_load
04C2F7 5B CF       0267*  	RST.LIL 08h
04C2F9 21 0D FB 00 0268*  	ld hl,BUF_MEIN_LEBEN
04C2FD DD 21 81 35 0269*  	ld ix,13697
       00          
04C302 CD 37 B5 04 0270*  	call vdu_load_sfx
04C306 C9          0271*  	ret
04C307             0272*  
04C307             0273*  load_sfx_OOF:
04C307 21 0B C5 04 0274*  	ld hl,FOOF
04C30B 22 DE BE 04 0275*  	ld (cur_filename),hl
04C30F 11 0A CB 04 0276*  	ld de,filedata
04C313 01 00 00 01 0277*  	ld bc,65536
04C317 3E 01       0278*  	ld a,mos_load
04C319 5B CF       0279*  	RST.LIL 08h
04C31B 21 0E FB 00 0280*  	ld hl,BUF_OOF
04C31F DD 21 00 40 0281*  	ld ix,16384
       00          
04C324 CD 37 B5 04 0282*  	call vdu_load_sfx
04C328 C9          0283*  	ret
04C329             0284*  
04C329             0285*  load_sfx_SCHUSSTAFFEL:
04C329 21 17 C5 04 0286*  	ld hl,FSCHUSSTAFFEL
04C32D 22 DE BE 04 0287*  	ld (cur_filename),hl
04C331 11 0A CB 04 0288*  	ld de,filedata
04C335 01 00 00 01 0289*  	ld bc,65536
04C339 3E 01       0290*  	ld a,mos_load
04C33B 5B CF       0291*  	RST.LIL 08h
04C33D 21 0F FB 00 0292*  	ld hl,BUF_SCHUSSTAFFEL
04C341 DD 21 63 26 0293*  	ld ix,9827
       00          
04C346 CD 37 B5 04 0294*  	call vdu_load_sfx
04C34A C9          0295*  	ret
04C34B             0296*  
04C34B             0297*  load_sfx_SCREAM:
04C34B 21 2C C5 04 0298*  	ld hl,FSCREAM
04C34F 22 DE BE 04 0299*  	ld (cur_filename),hl
04C353 11 0A CB 04 0300*  	ld de,filedata
04C357 01 00 00 01 0301*  	ld bc,65536
04C35B 3E 01       0302*  	ld a,mos_load
04C35D 5B CF       0303*  	RST.LIL 08h
04C35F 21 10 FB 00 0304*  	ld hl,BUF_SCREAM
04C363 DD 21 5E 30 0305*  	ld ix,12382
       00          
04C368 CD 37 B5 04 0306*  	call vdu_load_sfx
04C36C C9          0307*  	ret
04C36D             0308*  
04C36D             0309*  load_sfx_SHOT_GATLING_BURST:
04C36D 21 3B C5 04 0310*  	ld hl,FSHOT_GATLING_BURST
04C371 22 DE BE 04 0311*  	ld (cur_filename),hl
04C375 11 0A CB 04 0312*  	ld de,filedata
04C379 01 00 00 01 0313*  	ld bc,65536
04C37D 3E 01       0314*  	ld a,mos_load
04C37F 5B CF       0315*  	RST.LIL 08h
04C381 21 11 FB 00 0316*  	ld hl,BUF_SHOT_GATLING_BURST
04C385 DD 21 00 60 0317*  	ld ix,24576
       00          
04C38A CD 37 B5 04 0318*  	call vdu_load_sfx
04C38E C9          0319*  	ret
04C38F             0320*  
04C38F             0321*  load_sfx_SHOT_MACHINE_GUN_BURST:
04C38F 21 56 C5 04 0322*  	ld hl,FSHOT_MACHINE_GUN_BURST
04C393 22 DE BE 04 0323*  	ld (cur_filename),hl
04C397 11 0A CB 04 0324*  	ld de,filedata
04C39B 01 00 00 01 0325*  	ld bc,65536
04C39F 3E 01       0326*  	ld a,mos_load
04C3A1 5B CF       0327*  	RST.LIL 08h
04C3A3 21 12 FB 00 0328*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04C3A7 DD 21 C4 42 0329*  	ld ix,17092
       00          
04C3AC CD 37 B5 04 0330*  	call vdu_load_sfx
04C3B0 C9          0331*  	ret
04C3B1             0332*  
04C3B1             0333*  load_sfx_SHOT_PISTOL:
04C3B1 21 75 C5 04 0334*  	ld hl,FSHOT_PISTOL
04C3B5 22 DE BE 04 0335*  	ld (cur_filename),hl
04C3B9 11 0A CB 04 0336*  	ld de,filedata
04C3BD 01 00 00 01 0337*  	ld bc,65536
04C3C1 3E 01       0338*  	ld a,mos_load
04C3C3 5B CF       0339*  	RST.LIL 08h
04C3C5 21 13 FB 00 0340*  	ld hl,BUF_SHOT_PISTOL
04C3C9 DD 21 61 4B 0341*  	ld ix,19297
       00          
04C3CE CD 37 B5 04 0342*  	call vdu_load_sfx
04C3D2 C9          0343*  	ret
04C3D3             0344*  
04C3D3             0345*  load_sfx_UGH:
04C3D3 21 89 C5 04 0346*  	ld hl,FUGH
04C3D7 22 DE BE 04 0347*  	ld (cur_filename),hl
04C3DB 11 0A CB 04 0348*  	ld de,filedata
04C3DF 01 00 00 01 0349*  	ld bc,65536
04C3E3 3E 01       0350*  	ld a,mos_load
04C3E5 5B CF       0351*  	RST.LIL 08h
04C3E7 21 14 FB 00 0352*  	ld hl,BUF_UGH
04C3EB DD 21 A9 18 0353*  	ld ix,6313
       00          
04C3F0 CD 37 B5 04 0354*  	call vdu_load_sfx
04C3F4 C9          0355*  	ret
04C3F5             0356*  
04C3F5             0357*  load_sfx_WILHELM:
04C3F5 21 95 C5 04 0358*  	ld hl,FWILHELM
04C3F9 22 DE BE 04 0359*  	ld (cur_filename),hl
04C3FD 11 0A CB 04 0360*  	ld de,filedata
04C401 01 00 00 01 0361*  	ld bc,65536
04C405 3E 01       0362*  	ld a,mos_load
04C407 5B CF       0363*  	RST.LIL 08h
04C409 21 15 FB 00 0364*  	ld hl,BUF_WILHELM
04C40D DD 21 D7 53 0365*  	ld ix,21463
       00          
04C412 CD 37 B5 04 0366*  	call vdu_load_sfx
04C416 C9          0367*  	ret
04C417             0368*  
04C417             0369*  ; File name lookups:
04C417 73 66 78 2F 0370*  FACHTUNG: db "sfx/ACHTUNG.raw",0
       41 43 48 54 
       55 4E 47 2E 
       72 61 77 00 
04C427 73 66 78 2F 0371*  FAHH: db "sfx/AHH.raw",0
       41 48 48 2E 
       72 61 77 00 
04C433 73 66 78 2F 0372*  FAUGH: db "sfx/AUGH.raw",0
       41 55 47 48 
       2E 72 61 77 
       00          
04C440 73 66 78 2F 0373*  FAYEE: db "sfx/AYEE.raw",0
       41 59 45 45 
       2E 72 61 77 
       00          
04C44D 73 66 78 2F 0374*  FAYEE_HIGH: db "sfx/AYEE_HIGH.raw",0
       41 59 45 45 
       5F 48 49 47 
       48 2E 72 61 
       77 00       
04C45F 73 66 78 2F 0375*  FDOG_WOOF_DOUBLE: db "sfx/DOG_WOOF_DOUBLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 44 4F 55 
       42 4C 45 2E 
       72 61 77 00 
04C477 73 66 78 2F 0376*  FDOG_WOOF_SINGLE: db "sfx/DOG_WOOF_SINGLE.raw",0
       44 4F 47 5F 
       57 4F 4F 46 
       5F 53 49 4E 
       47 4C 45 2E 
       72 61 77 00 
04C48F 73 66 78 2F 0377*  FDOG_YELP: db "sfx/DOG_YELP.raw",0
       44 4F 47 5F 
       59 45 4C 50 
       2E 72 61 77 
       00          
04C4A0 73 66 78 2F 0378*  FEXPLODE: db "sfx/EXPLODE.raw",0
       45 58 50 4C 
       4F 44 45 2E 
       72 61 77 00 
04C4B0 73 66 78 2F 0379*  FGOT_TREASURE: db "sfx/GOT_TREASURE.raw",0
       47 4F 54 5F 
       54 52 45 41 
       53 55 52 45 
       2E 72 61 77 
       00          
04C4C5 73 66 78 2F 0380*  FGUN_EMPTY: db "sfx/GUN_EMPTY.raw",0
       47 55 4E 5F 
       45 4D 50 54 
       59 2E 72 61 
       77 00       
04C4D7 73 66 78 2F 0381*  FGUN_RELOAD: db "sfx/GUN_RELOAD.raw",0
       47 55 4E 5F 
       52 45 4C 4F 
       41 44 2E 72 
       61 77 00    
04C4EA 73 66 78 2F 0382*  FKNIFE: db "sfx/KNIFE.raw",0
       4B 4E 49 46 
       45 2E 72 61 
       77 00       
04C4F8 73 66 78 2F 0383*  FMEIN_LEBEN: db "sfx/MEIN_LEBEN.raw",0
       4D 45 49 4E 
       5F 4C 45 42 
       45 4E 2E 72 
       61 77 00    
04C50B 73 66 78 2F 0384*  FOOF: db "sfx/OOF.raw",0
       4F 4F 46 2E 
       72 61 77 00 
04C517 73 66 78 2F 0385*  FSCHUSSTAFFEL: db "sfx/SCHUSSTAFFEL.raw",0
       53 43 48 55 
       53 53 54 41 
       46 46 45 4C 
       2E 72 61 77 
       00          
04C52C 73 66 78 2F 0386*  FSCREAM: db "sfx/SCREAM.raw",0
       53 43 52 45 
       41 4D 2E 72 
       61 77 00    
04C53B 73 66 78 2F 0387*  FSHOT_GATLING_BURST: db "sfx/SHOT_GATLING_BURST.raw",0
       53 48 4F 54 
       5F 47 41 54 
       4C 49 4E 47 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04C556 73 66 78 2F 0388*  FSHOT_MACHINE_GUN_BURST: db "sfx/SHOT_MACHINE_GUN_BURST.raw",0
       53 48 4F 54 
       5F 4D 41 43 
       48 49 4E 45 
       5F 47 55 4E 
       5F 42 55 52 
       53 54 2E 72 
       61 77 00    
04C575 73 66 78 2F 0389*  FSHOT_PISTOL: db "sfx/SHOT_PISTOL.raw",0
       53 48 4F 54 
       5F 50 49 53 
       54 4F 4C 2E 
       72 61 77 00 
04C589 73 66 78 2F 0390*  FUGH: db "sfx/UGH.raw",0
       55 47 48 2E 
       72 61 77 00 
04C595 73 66 78 2F 0391*  FWILHELM: db "sfx/WILHELM.raw",0
       57 49 4C 48 
       45 4C 4D 2E 
       72 61 77 00 
04C5A5             0392*  
04C5A5             0393*  ; Play sfx routines
04C5A5             0394*  
04C5A5             0395*  sfx_play_achtung:
04C5A5 21 00 FB 00 0396*  	ld hl,BUF_ACHTUNG
04C5A9 01 58 03 00 0397*  	ld bc,856
04C5AD C3 46 00 04 0398*  	jp vdu_play_sfx
04C5B1             0399*  
04C5B1             0400*  sfx_play_ahh:
04C5B1 21 01 FB 00 0401*  	ld hl,BUF_AHH
04C5B5 01 91 01 00 0402*  	ld bc,401
04C5B9 C3 46 00 04 0403*  	jp vdu_play_sfx
04C5BD             0404*  
04C5BD             0405*  sfx_play_augh:
04C5BD 21 02 FB 00 0406*  	ld hl,BUF_AUGH
04C5C1 01 FC 02 00 0407*  	ld bc,764
04C5C5 C3 46 00 04 0408*  	jp vdu_play_sfx
04C5C9             0409*  
04C5C9             0410*  sfx_play_ayee:
04C5C9 21 03 FB 00 0411*  	ld hl,BUF_AYEE
04C5CD 01 E6 01 00 0412*  	ld bc,486
04C5D1 C3 46 00 04 0413*  	jp vdu_play_sfx
04C5D5             0414*  
04C5D5             0415*  sfx_play_ayee_high:
04C5D5 21 04 FB 00 0416*  	ld hl,BUF_AYEE_HIGH
04C5D9 01 40 04 00 0417*  	ld bc,1088
04C5DD C3 46 00 04 0418*  	jp vdu_play_sfx
04C5E1             0419*  
04C5E1             0420*  sfx_play_dog_woof_double:
04C5E1 21 05 FB 00 0421*  	ld hl,BUF_DOG_WOOF_DOUBLE
04C5E5 01 63 02 00 0422*  	ld bc,611
04C5E9 C3 46 00 04 0423*  	jp vdu_play_sfx
04C5ED             0424*  
04C5ED             0425*  sfx_play_dog_woof_single:
04C5ED 21 06 FB 00 0426*  	ld hl,BUF_DOG_WOOF_SINGLE
04C5F1 01 15 02 00 0427*  	ld bc,533
04C5F5 C3 46 00 04 0428*  	jp vdu_play_sfx
04C5F9             0429*  
04C5F9             0430*  sfx_play_dog_yelp:
04C5F9 21 07 FB 00 0431*  	ld hl,BUF_DOG_YELP
04C5FD 01 B0 01 00 0432*  	ld bc,432
04C601 C3 46 00 04 0433*  	jp vdu_play_sfx
04C605             0434*  
04C605             0435*  sfx_play_explode:
04C605 21 08 FB 00 0436*  	ld hl,BUF_EXPLODE
04C609 01 13 05 00 0437*  	ld bc,1299
04C60D C3 46 00 04 0438*  	jp vdu_play_sfx
04C611             0439*  
04C611             0440*  sfx_play_got_treasure:
04C611 21 09 FB 00 0441*  	ld hl,BUF_GOT_TREASURE
04C615 01 A7 05 00 0442*  	ld bc,1447
04C619 C3 46 00 04 0443*  	jp vdu_play_sfx
04C61D             0444*  
04C61D             0445*  sfx_play_gun_empty:
04C61D 21 0A FB 00 0446*  	ld hl,BUF_GUN_EMPTY
04C621 01 24 01 00 0447*  	ld bc,292
04C625 C3 46 00 04 0448*  	jp vdu_play_sfx
04C629             0449*  
04C629             0450*  sfx_play_gun_reload:
04C629 21 0B FB 00 0451*  	ld hl,BUF_GUN_RELOAD
04C62D 01 BA 01 00 0452*  	ld bc,442
04C631 C3 46 00 04 0453*  	jp vdu_play_sfx
04C635             0454*  
04C635             0455*  sfx_play_knife:
04C635 21 0C FB 00 0456*  	ld hl,BUF_KNIFE
04C639 01 F2 00 00 0457*  	ld bc,242
04C63D C3 46 00 04 0458*  	jp vdu_play_sfx
04C641             0459*  
04C641             0460*  sfx_play_mein_leben:
04C641 21 0D FB 00 0461*  	ld hl,BUF_MEIN_LEBEN
04C645 01 2E 03 00 0462*  	ld bc,814
04C649 C3 46 00 04 0463*  	jp vdu_play_sfx
04C64D             0464*  
04C64D             0465*  sfx_play_oof:
04C64D 21 0E FB 00 0466*  	ld hl,BUF_OOF
04C651 01 CE 03 00 0467*  	ld bc,974
04C655 C3 46 00 04 0468*  	jp vdu_play_sfx
04C659             0469*  
04C659             0470*  sfx_play_schusstaffel:
04C659 21 0F FB 00 0471*  	ld hl,BUF_SCHUSSTAFFEL
04C65D 01 48 02 00 0472*  	ld bc,584
04C661 C3 46 00 04 0473*  	jp vdu_play_sfx
04C665             0474*  
04C665             0475*  sfx_play_scream:
04C665 21 10 FB 00 0476*  	ld hl,BUF_SCREAM
04C669 01 E0 02 00 0477*  	ld bc,736
04C66D C3 46 00 04 0478*  	jp vdu_play_sfx
04C671             0479*  
04C671             0480*  sfx_play_shot_gatling_burst:
04C671 21 11 FB 00 0481*  	ld hl,BUF_SHOT_GATLING_BURST
04C675 01 B6 05 00 0482*  	ld bc,1462
04C679 C3 46 00 04 0483*  	jp vdu_play_sfx
04C67D             0484*  
04C67D             0485*  sfx_play_shot_machine_gun_burst:
04C67D 21 12 FB 00 0486*  	ld hl,BUF_SHOT_MACHINE_GUN_BURST
04C681 01 F9 03 00 0487*  	ld bc,1017
04C685 C3 46 00 04 0488*  	jp vdu_play_sfx
04C689             0489*  
04C689             0490*  sfx_play_shot_pistol:
04C689 21 13 FB 00 0491*  	ld hl,BUF_SHOT_PISTOL
04C68D 01 7C 04 00 0492*  	ld bc,1148
04C691 C3 46 00 04 0493*  	jp vdu_play_sfx
04C695             0494*  
04C695             0495*  sfx_play_ugh:
04C695 21 14 FB 00 0496*  	ld hl,BUF_UGH
04C699 01 77 01 00 0497*  	ld bc,375
04C69D C3 46 00 04 0498*  	jp vdu_play_sfx
04C6A1             0499*  
04C6A1             0500*  sfx_play_wilhelm:
04C6A1 21 15 FB 00 0501*  	ld hl,BUF_WILHELM
04C6A5 01 FD 04 00 0502*  	ld bc,1277
04C6A9 C3 46 00 04 0503*  	jp vdu_play_sfx
04C6AD             0030   	include "src/asm/timer.asm"
04C6AD             0001*  ; Table 32. Timer Control Registers
04C6AD             0002*  ; this constant is the base address of the timer control registers
04C6AD             0003*  ; each timer takes three bytes:
04C6AD             0004*  ;   0: control register
04C6AD             0005*  ;   1: low byte of timer reset value
04C6AD             0006*  ;   2: high byte of timer reset value
04C6AD             0007*  ; note that the value is only 8-bits,so we use in0/out0 i/o calls,
04C6AD             0008*  ; which correctly force the high and upper bytes of the address bus to zero
04C6AD             0009*  TMR_CTL:     equ 80h
04C6AD             0010*  
04C6AD             0011*  ; Timer Control Register Bit Definitions
04C6AD             0012*  PRT_IRQ_0:    equ %00000000 ; The timer does not reach its end-of-count value.
04C6AD             0013*                              ; This bit is reset to 0 every time the TMRx_CTL register is read.
04C6AD             0014*  PRT_IRQ_1:    equ %10000000 ; The timer reaches its end-of-count value. If IRQ_EN is set to 1,
04C6AD             0015*                              ; an interrupt signal is sent to the CPU. This bit remains 1 until
04C6AD             0016*                              ; the TMRx_CTL register is read.
04C6AD             0017*  
04C6AD             0018*  IRQ_EN_0:     equ %00000000 ; Timer interrupt requests are disabled.
04C6AD             0019*  IRQ_EN_1:     equ %01000000 ; Timer interrupt requests are enabled.
04C6AD             0020*  
04C6AD             0021*  PRT_MODE_0:   equ %00000000 ; The timer operates in SINGLE PASS mode. PRT_EN (bit 0) is reset to
04C6AD             0022*                              ;  0,and counting stops when the end-of-count value is reached.
04C6AD             0023*  PRT_MODE_1:   equ %00010000 ; The timer operates in CONTINUOUS mode. The timer reload value is
04C6AD             0024*                              ; written to the counter when the end-of-count value is reached.
04C6AD             0025*  
04C6AD             0026*  ; CLK_DIV is a 2-bit mask that sets the timer input source clock divider
04C6AD             0027*  CLK_DIV_256:  equ %00001100 ;
04C6AD             0028*  CLK_DIV_64:   equ %00001000 ;
04C6AD             0029*  CLK_DIV_16:   equ %00000100 ;
04C6AD             0030*  CLK_DIV_4:    equ %00000000 ;
04C6AD             0031*  
04C6AD             0032*  RST_EN_0:     equ %00000000 ; The reload and restart function is disabled.
04C6AD             0033*  RST_EN_1:     equ %00000010 ; The reload and restart function is enabled.
04C6AD             0034*                              ; When a 1 is written to this bit,the values in the reload registers
04C6AD             0035*                              ;  are loaded into the downcounter when the timer restarts. The
04C6AD             0036*                              ; programmer must ensure that this bit is set to 1 each time
04C6AD             0037*                              ; SINGLE-PASS mode is used.
04C6AD             0038*  
04C6AD             0039*  ; disable/enable the programmable reload timer
04C6AD             0040*  PRT_EN_0:     equ %00000000 ;
04C6AD             0041*  PRT_EN_1:     equ %00000001 ;
04C6AD             0042*  
04C6AD             0043*  ; Table 37. Timer Input Source Select Register
04C6AD             0044*  ; Each of the 4 timers are allocated two bits of the 8-bit register
04C6AD             0045*  ; in little-endian order,with TMR0 using bits 0 and 1,TMR1 using bits 2 and 3,etc.
04C6AD             0046*  ;   00: System clock / CLK_DIV
04C6AD             0047*  ;   01: RTC / CLK_DIV
04C6AD             0048*  ;   NOTE: these are the values given in the manual,but it may be a typo
04C6AD             0049*  ;   10: GPIO port B pin 1.
04C6AD             0050*  ;   11: GPIO port B pin 1.
04C6AD             0051*  TMR_ISS:   equ 92h ; register address
04C6AD             0052*  
04C6AD             0053*  ; Table 51. Real-Time Clock Control Register
04C6AD             0054*  RTC_CTRL: equ EDh ; register address
04C6AD             0055*  
04C6AD             0056*  ; alarm interrupt disable/enable
04C6AD             0057*  RTC_ALARM_0:    equ %00000000
04C6AD             0058*  RTC_ALARM_1:    equ %10000000
04C6AD             0059*  
04C6AD             0060*  ; interrupt on alarm disable/enable
04C6AD             0061*  RTC_INT_ENT_0:  equ %00000000
04C6AD             0062*  RTC_INT_ENT_1:  equ %01000000
04C6AD             0063*  
04C6AD             0064*  RTC_BCD_EN_0:   equ %00000000   ; RTC count and alarm registers are binary
04C6AD             0065*  RTC_BCD_EN_1:   equ %00100000   ; RTC count and alarm registers are BCD
04C6AD             0066*  
04C6AD             0067*  RTC_CLK_SEL_0:  equ %00000000   ; RTC clock source is crystal oscillator output (32768 Hz).
04C6AD             0068*                                  ; On-chip 32768 Hz oscillator is enabled.
04C6AD             0069*  RTC_CLK_SEL_1:  equ %00010000   ; RTC clock source is power line frequency input as set by FREQ_SEL.
04C6AD             0070*                                  ; On-chip 32768 Hz oscillator is disabled.
04C6AD             0071*  
04C6AD             0072*  RTC_FREQ_SEL_0: equ %00000000   ; 60 Hz power line frequency.
04C6AD             0073*  RTC_FREQ_SEL_1: equ %00001000   ; 50 Hz power line frequency.
04C6AD             0074*  
04C6AD             0075*  RTC_SLP_WAKE_0: equ %00000000   ; RTC does not generate a sleep-mode recovery reset.
04C6AD             0076*  RTC_SLP_WAKE_1: equ %00000010   ; RTC generates a sleep-mode recovery reset.
04C6AD             0077*  
04C6AD             0078*  RTC_UNLOCK_0:   equ %00000000   ; RTC count registers are locked to prevent Write access.
04C6AD             0079*                                  ; RTC counter is enabled.
04C6AD             0080*  RTC_UNLOCK_1:   equ %00000001   ; RTC count registers are unlocked to allow Write access.
04C6AD             0081*                                  ; RTC counter is disabled.
04C6AD             0082*  
04C6AD             0083*  ; prt_reload_emulator: equ 11234 ; 1/102.4 seconds on emulator with 16 clock divider
04C6AD             0084*  
04C6AD             0085*  prt_reload_emulator: equ 11519 ; 1 centisecond on emulator with 16 clock divider
04C6AD             0086*  prt_reload_hardware: equ 11532 ; 1 centisecond on hardware with 16 clock divider
04C6AD 00 00 00    0087*  prt_reload: dl 0x000000
04C6B0             0088*  
04C6B0             0089*  ; returns: a = 0 if running on hardware,1 if running on emulator
04C6B0             0090*  ;          de = number PRT interrupts during test interval
04C6B0             0091*  prt_calibrate:
04C6B0 CD 9E B1 04 0092*      call vdu_vblank
04C6B4             0093*  ; set a MOS timer
04C6B4 21 78 00 00 0094*      ld hl,120*1 ; 1 second
04C6B8 FD 21 0B C8 0095*      ld iy,tmr_test
       04          
04C6BD CD E9 C7 04 0096*      call tmr_set
04C6C1             0097*  ; set a PRT timer
04C6C1             0098*      ; ld hl,prt_reload_hardware
04C6C1             0099*      ; ld hl,prt_reload_emulator
04C6C1 21 05 2D 00 0100*      ld hl,prt_reload_emulator + prt_reload_hardware / 2
04C6C5 22 AD C6 04 0101*      ld (prt_reload),hl
04C6C9 CD 24 C7 04 0102*      call prt_set
04C6CD             0103*  @loop:
04C6CD             0104*  ; check time remaining on MOS timer
04C6CD CD F7 C7 04 0105*      call tmr_get
04C6D1 CA DB C6 04 0106*      jp z,@done ; time expired,so quit
04C6D5 FA DB C6 04 0107*      jp m,@done ; time past expiration (negative),so quit
04C6D9 18 F2       0108*      jr @loop
04C6DB             0109*  @done:
04C6DB ED 5B 72 C7 0110*      ld de,(prt_irq_counter)
       04          
04C6E0 01 0C 2D 00 0111*      ld bc,prt_reload_hardware ; default value for running on hardware
04C6E4 ED 43 AD C6 0112*      ld (prt_reload),bc
       04          
04C6E9 21 64 00 00 0113*      ld hl,100 ; halfway between 101 for real hardware and 99 for emulator
04C6ED AF          0114*      xor a ; clear carry,zero is default value for running on hardware
04C6EE 32 FB C8 04 0115*      ld (is_emulator),a
04C6F2 ED 52       0116*      sbc hl,de
04C6F4 21 13 C9 04 0117*      ld hl,on_hardware ; default message for running on hardware
04C6F8 CA B0 C6 04 0118*      jp z,prt_calibrate ; zero result is indeterminate so we try again
04C6FC F8          0119*      ret m ; negative result means we're on hardware
04C6FD 3C          0120*      inc a ; we're on emulator
04C6FE 32 FB C8 04 0121*      ld (is_emulator),a
04C702 01 FF 2C 00 0122*      ld bc,prt_reload_emulator
04C706 ED 43 AD C6 0123*      ld (prt_reload),bc
       04          
04C70B 21 FC C8 04 0124*      ld hl,on_emulator
04C70F C9          0125*      ret
04C710             0126*  
04C710 43 61 6C 69 0127*  calibrating_timer: defb "Calibrating timer\r\n",0
       62 72 61 74 
       69 6E 67 20 
       74 69 6D 65 
       72 0D 0A 00 
04C724             0128*  
04C724             0129*  ; set PRT timer
04C724             0130*  prt_set:
04C724 21 00 00 00 0131*      ld hl,0
04C728 22 72 C7 04 0132*      ld (prt_irq_counter),hl
04C72C 2A AD C6 04 0133*      ld hl,(prt_reload)
04C730 ED 29 84    0134*      out0 ($84),l
04C733 ED 21 85    0135*  	out0 ($85),h
04C736             0136*  ; disable timer
04C736 3E 06       0137*      ld a,PRT_IRQ_0 | IRQ_EN_0 | PRT_MODE_0 | CLK_DIV_16 | RST_EN_1 | PRT_EN_0
04C738 ED 39 83    0138*  	out0 ($83),a
04C73B             0139*  ; enable timer,with interrupt and CONTINUOUS mode,clock divider 16
04C73B 3E 57       0140*      ld a,PRT_IRQ_0 | IRQ_EN_1 | PRT_MODE_1 | CLK_DIV_16 | RST_EN_1 | PRT_EN_1
04C73D ED 39 83    0141*  	out0 ($83),a
04C740 C9          0142*      ret
04C741             0143*  
04C741             0144*  ; ===============================================
04C741             0145*  ; PRT Timer Interrupt Handling
04C741             0146*  ; https://github.com/tomm/agon-cpu-emulator/blob/main/sdcard/regression_suite/timerirq.asm
04C741             0147*  ; -----------------------------------------------
04C741             0148*  prt_irq_init:
04C741             0149*      ; set up interrupt vector table 2
04C741 21 00 00 00 0150*  	ld hl,0
04C745 3A 0C 01 00 0151*  	ld a,($10c)
04C749 6F          0152*  	ld l,a
04C74A 3A 0D 01 00 0153*  	ld a,($10d)
04C74E 67          0154*  	ld h,a
04C74F             0155*  
04C74F             0156*  	; skip over CALL ($c3)
04C74F 23          0157*  	inc hl
04C750             0158*  	; load address of jump into vector table 2 (in ram)
04C750 ED 27       0159*  	ld hl,(hl)
04C752             0160*  
04C752             0161*  	; write CALL prt_irq_handler to vector table 2
04C752 3E C3       0162*  	ld a,$c3
04C754 77          0163*  	ld (hl),a
04C755 23          0164*  	inc hl
04C756 11 5D C7 04 0165*  	ld de,prt_irq_handler
04C75A ED 1F       0166*  	ld (hl),de
04C75C             0167*  
04C75C C9          0168*      ret
04C75D             0169*  
04C75D             0170*  prt_irq_handler:
04C75D F3          0171*  	di
04C75E F5          0172*  	push af
04C75F E5          0173*      push hl
04C760 ED 38 83    0174*  	in0 a,($83)
04C763 2A 72 C7 04 0175*  	ld hl,(prt_irq_counter)
04C767 23          0176*  	inc hl
04C768 22 72 C7 04 0177*  	ld (prt_irq_counter),hl
04C76C E1          0178*      pop hl
04C76D F1          0179*  	pop af
04C76E FB          0180*  	ei
04C76F 5B ED 4D    0181*  	reti.l
04C772             0182*  
04C772             0183*  prt_irq_counter:
04C772 00 00 00    0184*  	.dl 0
04C775             0185*  prt_irq_counter_saved:
04C775 00 00 00    0186*      .dl 0
04C778             0187*  
04C778             0188*  prt_loop_reset:
04C778 E5          0189*      push hl
04C779 21 00 00 00 0190*  	ld hl,0
04C77D 22 72 C7 04 0191*  	ld (prt_irq_counter),hl
04C781 22 E3 C7 04 0192*      ld (prt_loop_counter),hl
04C785 22 E6 C7 04 0193*      ld (prt_loops),hl
04C789 CD 24 C7 04 0194*      call prt_set
04C78D E1          0195*      pop hl
04C78E C9          0196*      ret
04C78F             0197*  
04C78F             0198*  prt_loop_start:
04C78F E5          0199*      push hl
04C790 21 00 00 00 0200*  	ld hl,0
04C794 22 72 C7 04 0201*  	ld (prt_irq_counter),hl
04C798 E1          0202*      pop hl
04C799 C9          0203*      ret
04C79A             0204*  
04C79A             0205*  prt_loop_stop:
04C79A E5          0206*      push hl
04C79B D5          0207*      push de
04C79C 2A 72 C7 04 0208*      ld hl,(prt_irq_counter)
04C7A0 ED 5B E3 C7 0209*      ld de,(prt_loop_counter)
       04          
04C7A5 19          0210*      add hl,de
04C7A6 22 E3 C7 04 0211*      ld (prt_loop_counter),hl
04C7AA 21 00 00 00 0212*      ld hl,0
04C7AE 22 72 C7 04 0213*      ld (prt_irq_counter),hl
04C7B2 2A E6 C7 04 0214*      ld hl,(prt_loops)
04C7B6 23          0215*      inc hl
04C7B7 22 E6 C7 04 0216*      ld (prt_loops),hl
04C7BB D1          0217*      pop de
04C7BC E1          0218*      pop hl
04C7BD C9          0219*      ret
04C7BE             0220*  
04C7BE             0221*  ; inputs: bc = y,x text coordinates to print
04C7BE             0222*  prt_loop_print:
04C7BE F5          0223*      push af
04C7BF E5          0224*      push hl
04C7C0 C5          0225*      push bc
04C7C1 D5          0226*      push de
04C7C2 DD E5       0227*      push ix
04C7C4 FD E5       0228*      push iy
04C7C6 CD 81 B0 04 0229*      call vdu_move_cursor
04C7CA             0230*  
04C7CA 2A E3 C7 04 0231*      ld hl,(prt_loop_counter)
04C7CE CD 91 B5 04 0232*      call printDec
04C7D2             0233*  
04C7D2 2A E6 C7 04 0234*      ld hl,(prt_loops)
04C7D6 CD 91 B5 04 0235*      call printDec
04C7DA             0236*  
04C7DA FD E1       0237*      pop iy
04C7DC DD E1       0238*      pop ix
04C7DE D1          0239*      pop de
04C7DF C1          0240*      pop bc
04C7E0 E1          0241*      pop hl
04C7E1 F1          0242*      pop af
04C7E2 C9          0243*      ret
04C7E3             0244*  
04C7E3             0245*  prt_loop_counter:
04C7E3 00 00 00    0246*      .dl 0
04C7E6             0247*  prt_loops:
04C7E6 00 00 00    0248*      .dl 0
04C7E9             0249*  
04C7E9             0250*  ; ===============================================
04C7E9             0251*  ; Timer functions
04C7E9             0252*  ; -----------------------------------------------
04C7E9             0253*  ; set a countdown timer
04C7E9             0254*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C7E9             0255*  ; returns: hl = current time
04C7E9             0256*  tmr_set:
04C7E9 FD 2F 03    0257*      ld (iy+3),hl            ; set time remaining
04C7EC             0258*      MOSCALL mos_sysvars     ; ix points to syvars table
04C7EC 3E 08       0001*M 			LD	A, function
04C7EE 5B CF       0002*M 			RST.LIL	08h
04C7F0 DD 27 00    0259*      ld hl,(ix+sysvar_time)  ; get current time
04C7F3 FD 2F 00    0260*      ld (iy+0),hl            ; set start time
04C7F6 C9          0261*      ret
04C7F7             0262*  
04C7F7             0263*  ; gets time remaining on a countdown timer
04C7F7             0264*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C7F7             0265*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C7F7             0266*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C7F7             0267*  tmr_get:
04C7F7             0268*      MOSCALL mos_sysvars     ; ix points to syvars table
04C7F7 3E 08       0001*M 			LD	A, function
04C7F9 5B CF       0002*M 			RST.LIL	08h
04C7FB DD 17 00    0269*      ld de,(ix+sysvar_time)  ; get current time
04C7FE FD 27 00    0270*      ld hl,(iy+0)            ; get start time
04C801 AF          0271*      xor a                   ; clear carry
04C802 ED 52       0272*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C804 FD 17 03    0273*      ld de,(iy+3)            ; get timer set value
04C807 AF          0274*      xor a                   ; clear carry
04C808 ED 5A       0275*      adc hl,de               ; hl = time remaining
04C80A             0276*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C80A C9          0277*      ret
04C80B             0278*  
04C80B             0279*  tmr_test: ds 6 ; example of a buffer to hold timer data
04C811             0280*  
04C811 00 00 00    0281*  timestamp_now: dl 0
04C814 00 00 00    0282*  timestamp_old: dl 0
04C817 00 00 00    0283*  timestamp_chg: dl 0
04C81A             0284*  
04C81A             0285*  ; update the global timestamp from the system clock
04C81A             0286*  ; inputs: none
04C81A             0287*  ; returns: hl = time elapsed in 1/120ths of a second
04C81A             0288*  ;          de = current time
04C81A             0289*  ;          ix = pointer to syvars table
04C81A             0290*  ; destroys: af,hl,de,ix
04C81A             0291*  timestamp_tick:
04C81A ED 5B 11 C8 0292*      ld de,(timestamp_now)   ; get previous time
       04          
04C81F ED 53 14 C8 0293*      ld (timestamp_old),de   ; save previous time
       04          
04C824             0294*      MOSCALL mos_sysvars     ; ix points to syvars table
04C824 3E 08       0001*M 			LD	A, function
04C826 5B CF       0002*M 			RST.LIL	08h
04C828 DD 27 00    0295*      ld hl,(ix+sysvar_time)  ; get current time
04C82B 22 11 C8 04 0296*      ld (timestamp_now),hl   ; save current time
04C82F AF          0297*      xor a                   ; clear carry
04C830 ED 52       0298*      sbc hl,de               ; hl = time elapsed
04C832 22 17 C8 04 0299*      ld (timestamp_chg),hl   ; save elapsed time
04C836 C9          0300*      ret
04C837             0301*  
04C837             0302*  ; set a countdown timer
04C837             0303*  ; inputs: hl = time to set in 1/120ths of a second; iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C837             0304*  ; requires: timestamp_tick to be called at least once before this function
04C837             0305*  ; returns: hl = current time
04C837             0306*  ; destroys: hl
04C837             0307*  timestamp_tmr_set:
04C837 FD 2F 03    0308*      ld (iy+3),hl            ; set time remaining
04C83A 2A 11 C8 04 0309*      ld hl,(timestamp_now)   ; get current timestamp
04C83E FD 2F 00    0310*      ld (iy+0),hl            ; set start time
04C841 C9          0311*      ret
04C842             0312*  
04C842             0313*  ; gets time remaining on a countdown timer following the global timestamp
04C842             0314*  ; inputs: iy = pointer to 3-byte buffer holding start time,iy+3 = pointer to 3-byte buffer holding timer set value
04C842             0315*  ; requires: timestamp_tick to be called at least once before this function
04C842             0316*  ; returns: hl pos = time remaining in 1/120ths of a second,hl neg = time past expiration
04C842             0317*  ;          sign flags: pos = time not expired,zero or neg = time expired
04C842             0318*  ; destroys: af,hl,de
04C842             0319*  timestamp_tmr_get:
04C842 ED 5B 11 C8 0320*      ld de,(timestamp_now)   ; get current timestamp
       04          
04C847 FD 27 00    0321*      ld hl,(iy+0)            ; get start time
04C84A AF          0322*      xor a                   ; clear carry
04C84B ED 52       0323*      sbc hl,de               ; hl = time elapsed (will always be zero or negative)
04C84D FD 17 03    0324*      ld de,(iy+3)            ; get timer set value
04C850 AF          0325*      xor a                   ; clear carry
04C851 ED 5A       0326*      adc hl,de               ; hl = time remaining
04C853             0327*                              ; (we do adc because add hl,rr doesn't set sign or zero flags)
04C853 C9          0328*      ret
04C854             0329*  
04C854             0330*  ; set a stopwatch
04C854             0331*  ; returns: hl = start time
04C854             0332*  ; destroys: hl,ix
04C854             0333*  stopwatch_set:
04C854             0334*      MOSCALL mos_sysvars     ; ix points to syvars table
04C854 3E 08       0001*M 			LD	A, function
04C856 5B CF       0002*M 			RST.LIL	08h
04C858 DD 27 00    0335*      ld hl,(ix+sysvar_time)  ; get current time
04C85B 22 70 C8 04 0336*      ld (stopwatch_started),hl            ; set start time
04C85F C9          0337*      ret
04C860             0338*  
04C860             0339*  ; gets time elapsed on a stopwatch
04C860             0340*  ; returns: hl = time elapsed in 1/120ths of a second
04C860             0341*  ; destroys: af,hl,de,ix
04C860             0342*  stopwatch_get:
04C860             0343*      MOSCALL mos_sysvars     ; ix points to syvars table
04C860 3E 08       0001*M 			LD	A, function
04C862 5B CF       0002*M 			RST.LIL	08h
04C864 DD 27 00    0344*      ld hl,(ix+sysvar_time)  ; get current time
04C867 ED 5B 70 C8 0345*      ld de,(stopwatch_started)            ; get start time
       04          
04C86C AF          0346*      xor a                   ; clear carry
04C86D ED 52       0347*      sbc hl,de               ; hl = time elapsed (will always be zero or positive)
04C86F C9          0348*      ret
04C870             0349*  
04C870             0350*  stopwatch_started: ds 3 ; buffer to hold stopwatch start time
04C873             0351*  
04C873             0352*  ; ------------------
04C873             0353*  ; delay routine
04C873             0354*  ; Author: Richard Turrnidge
04C873             0355*  ; https://github.com/richardturnnidge/lessons/blob/main/slowdown.asm
04C873             0356*  ; routine waits a fixed time,then returns
04C873             0357*  ; arrive with A =  the delay byte. One bit to be set only.
04C873             0358*  ; eg. ld A,00000100b
04C873             0359*  
04C873             0360*  multiPurposeDelay:
04C873 F5          0361*      push af
04C874 C5          0362*      push bc
04C875 DD E5       0363*      push ix
04C877 47          0364*      ld b,a
04C878 3E 08       0365*      ld a,$08
04C87A 5B CF       0366*      RST.LIL	08h                 ; get IX pointer to sysvars
04C87C             0367*  
04C87C             0368*  waitLoop:
04C87C             0369*  
04C87C DD 7E 00    0370*      ld a,(ix + 0)              ; ix+0h is lowest byte of clock timer
04C87F             0371*  
04C87F             0372*                                  ;   we check if bit set is same as last time we checked.
04C87F             0373*                                  ;   bit 0 - don't use
04C87F             0374*                                  ;   bit 1 - changes 64 times per second
04C87F             0375*                                  ;   bit 2 - changes 32 times per second
04C87F             0376*                                  ;   bit 3 - changes 16 times per second
04C87F             0377*  
04C87F             0378*                                  ;   bit 4 - changes 8 times per second
04C87F             0379*                                  ;   bit 5 - changes 4 times per second
04C87F             0380*                                  ;   bit 6 - changes 2 times per second
04C87F             0381*                                  ;   bit 7 - changes 1 times per second
04C87F A0          0382*      and b
04C880 4F          0383*      ld c,a
04C881 3A 92 C8 04 0384*      ld a,(oldTimeStamp)
04C885 B9          0385*      cp c                        ; is A same as last value?
04C886 28 F4       0386*      jr z,waitLoop              ; loop here if it is
04C888 79          0387*      ld a,c
04C889 32 92 C8 04 0388*      ld (oldTimeStamp),a        ; set new value
04C88D             0389*  
04C88D DD E1       0390*      pop ix
04C88F C1          0391*      pop bc
04C890 F1          0392*      pop af
04C891 C9          0393*      ret
04C892             0394*  
04C892 00          0395*  oldTimeStamp:   .db 00h
04C893             0031   
04C893             0032   
04C893             0033   start:
04C893 F5          0034       push af
04C894 C5          0035       push bc
04C895 D5          0036       push de
04C896 DD E5       0037       push ix
04C898 FD E5       0038       push iy
04C89A             0039   
04C89A CD 2A C9 04 0040   	call init ; Initialization code
04C89E CD 6D CA 04 0041       call main ; Call the main function
04C8A2             0042   
04C8A2             0043   exit:
04C8A2             0044   
04C8A2 FD E1       0045       pop iy
04C8A4 DD E1       0046       pop ix
04C8A6 D1          0047       pop de
04C8A7 C1          0048       pop bc
04C8A8 F1          0049       pop af
04C8A9 21 00 00 00 0050       ld hl,0
04C8AD             0051   
04C8AD C9          0052       ret
04C8AE             0053   
04C8AE 57 65 6C 63 0054   hello_world: defb "Welcome to Agon Wolf3D",0
       6F 6D 65 20 
       74 6F 20 41 
       67 6F 6E 20 
       57 6F 6C 66 
       33 44 00    
04C8C5 4C 6F 61 64 0055   loading_ui: defb "Loading UI",0
       69 6E 67 20 
       55 49 00    
04C8D0 4C 6F 61 64 0056   loading_time: defb "Loading time:",0
       69 6E 67 20 
       74 69 6D 65 
       3A 00       
04C8DE 50 72 65 73 0057   loading_complete: defb "Press any key to continue.\r\n",0
       73 20 61 6E 
       79 20 6B 65 
       79 20 74 6F 
       20 63 6F 6E 
       74 69 6E 75 
       65 2E 0D 0A 
       00          
04C8FB 00          0058   is_emulator: defb 0
04C8FC 52 75 6E 6E 0059   on_emulator: defb "Running on emulator.\r\n",0
       69 6E 67 20 
       6F 6E 20 65 
       6D 75 6C 61 
       74 6F 72 2E 
       0D 0A 00    
04C913 52 75 6E 6E 0060   on_hardware: defb "Running on hardware.\r\n",0
       69 6E 67 20 
       6F 6E 20 68 
       61 72 64 77 
       61 72 65 2E 
       0D 0A 00    
04C92A             0061   
04C92A             0062   init:
04C92A             0063   ; start generic stopwatch to time setup loop
04C92A             0064   ; so we can determine if we're running on emulator or hardware
04C92A CD 54 C8 04 0065   	call stopwatch_set
04C92E             0066   
04C92E             0067   ; initialize global timestamp
04C92E DD 27 00    0068       ld hl,(ix+sysvar_time) ; ix was set by stopwatch_start
04C931 22 11 C8 04 0069       ld (timestamp_now),hl
04C935             0070   
04C935             0071   ; set the cursor off
04C935 CD 90 B1 04 0072   	call cursor_off
04C939             0073   
04C939             0074   ; print loading ui message
04C939 21 C5 C8 04 0075   	ld hl,loading_ui
04C93D CD 43 B5 04 0076   	call printString
04C941             0077   
04C941             0078   ; load fonts
04C941 CD EC 84 04 0079   	call load_font_itc_honda
04C945 CD CF 95 04 0080   	call load_font_retro_computer
04C949             0081   
04C949             0082   ; load UI images
04C949 CD 58 9E 04 0083   	call load_ui_images
04C94D CD 0A A1 04 0084   	call load_ui_images_bj
04C951             0085   
04C951             0086   ; set up the display
04C951 3E 88       0087       ld a,8+128 ; 320x240x64 double-buffered
04C953 CD D1 AF 04 0088       call vdu_set_screen_mode
04C957 AF          0089       xor a
04C958 CD 00 B1 04 0090       call vdu_set_scaling
04C95C             0091   
04C95C             0092   ; set text background color
04C95C 3E 84       0093   	ld a,4 + 128
04C95E CD 5D AF 04 0094   	call vdu_colour_text
04C962             0095   
04C962             0096   ; set text foreground color
04C962 3E 2F       0097   	ld a,47 ; aaaaff lavenderish
04C964 CD 5D AF 04 0098   	call vdu_colour_text
04C968             0099   
04C968             0100   ; set gfx bg color
04C968 AF          0101   	xor a ; plotting mode 0
04C969 0E 04       0102   	ld c,4 ; dark blue
04C96B CD 85 AF 04 0103   	call vdu_gcol_bg
04C96F CD 58 AF 04 0104   	call vdu_clg
04C973             0105   
04C973             0106   ; set the cursor off again since we changed screen modes
04C973 CD 90 B1 04 0107   	call cursor_off
04C977             0108   
04C977             0109   ; VDU 28, left, bottom, right, top: Set text viewport **
04C977             0110   ; MIND THE LITTLE-ENDIANESS
04C977             0111   ; inputs: c=left,b=bottom,e=right,d=top
04C977 0E 00       0112   	ld c,0 ; left
04C979 16 14       0113   	ld d,20 ; top
04C97B 1E 27       0114   	ld e,39 ; right
04C97D 06 1D       0115   	ld b,29; bottom
04C97F CD 46 B0 04 0116   	call vdu_set_txt_viewport
04C983             0117   
04C983             0118   ; initialize image load routine
04C983 CD EA BE 04 0119   	call img_load_init
04C987             0120   
04C987             0121   ; load panels
04C987 01 13 01 00 0122   	ld bc,cube_num_panels
04C98B 21 20 02 04 0123   	ld hl,cube_buffer_id_lut
04C98F 22 E4 BE 04 0124   	ld (cur_buffer_id_lut),hl
04C993 21 59 05 04 0125   	ld hl,cube_load_panels_table
04C997 22 E7 BE 04 0126   	ld (cur_load_jump_table),hl
04C99B CD 1F BF 04 0127   	call img_load_main
04C99F             0128   
04C99F             0129   ; load sprites
04C99F 01 64 00 00 0130   	ld bc,sprite_num_panels
04C9A3 21 2C 4B 04 0131   	ld hl,sprite_buffer_id_lut
04C9A7 22 E4 BE 04 0132   	ld (cur_buffer_id_lut),hl
04C9AB 21 58 4C 04 0133   	ld hl,sprite_load_panels_table
04C9AF 22 E7 BE 04 0134   	ld (cur_load_jump_table),hl
04C9B3 CD 1F BF 04 0135   	call img_load_main
04C9B7             0136   
04C9B7             0137   ; load distance walls
04C9B7 01 09 00 00 0138   	ld bc,dws_num_panels
04C9BB 21 BC 65 04 0139   	ld hl,dws_buffer_id_lut
04C9BF 22 E4 BE 04 0140   	ld (cur_buffer_id_lut),hl
04C9C3 21 D7 65 04 0141   	ld hl,dws_load_panels_table
04C9C7 22 E7 BE 04 0142   	ld (cur_load_jump_table),hl
04C9CB CD 1F BF 04 0143   	call img_load_main
04C9CF             0144   
04C9CF             0145   ; load sound effects
04C9CF 01 16 00 00 0146   	ld bc,SFX_num_buffers
04C9D3 21 7B C0 04 0147   	ld hl,SFX_buffer_id_lut
04C9D7 22 E4 BE 04 0148   	ld (cur_buffer_id_lut),hl
04C9DB 21 E9 C0 04 0149   	ld hl,SFX_load_routines_table
04C9DF 22 E7 BE 04 0150   	ld (cur_load_jump_table),hl
04C9E3 CD 9E B4 04 0151   	call sfx_load_main
04C9E7             0152   
04C9E7             0153   ; self modify vdu_play_sfx to enable sound
04C9E7 AF          0154   	xor a
04C9E8 32 46 00 04 0155   	ld (vdu_play_sfx_disable),a
04C9EC             0156   
04C9EC             0157   ; use loading time to determine if we're running on emulator or hardware
04C9EC CD 60 C8 04 0158   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04C9F0 11 40 1F 00 0159   	ld de,8000 ; emulator loads in about 2,400 ticks, hardware about 15,000
04C9F4 AF          0160   	xor a ; clear carry, default is running on hardware
04C9F5 32 FB C8 04 0161   	ld (is_emulator),a
04C9F9 ED 52       0162   	sbc hl,de
04C9FB FA 0F CA 04 0163   	jp m,@on_emulator
04C9FF CD 7C B0 04 0164   	call vdu_home_cursor
04CA03 21 13 C9 04 0165   	ld hl,on_hardware
04CA07 CD 43 B5 04 0166   	call printString
04CA0B C3 21 CA 04 0167   	jp @test_done
04CA0F             0168   
04CA0F             0169   @on_emulator:
04CA0F             0170   ; print emulator message
04CA0F 3E 01       0171   	ld a,1
04CA11 32 FB C8 04 0172   	ld (is_emulator),a
04CA15 CD 7C B0 04 0173   	call vdu_home_cursor
04CA19 21 FC C8 04 0174   	ld hl,on_emulator
04CA1D CD 43 B5 04 0175   	call printString
04CA21             0176   
04CA21             0177   @test_done:
04CA21             0178   ; print final loading time
04CA21 21 D0 C8 04 0179   	ld hl,loading_time
04CA25 CD 43 B5 04 0180   	call printString
04CA29 CD 60 C8 04 0181   	call stopwatch_get ; hl = elapsed time in 120ths of a second
04CA2D CD 91 B5 04 0182   	call printDec
04CA31 CD 58 B5 04 0183   	call printNewLine
04CA35             0184   
04CA35             0185   ; print loading complete message and wait for user keypress
04CA35 21 DE C8 04 0186   	ld hl,loading_complete
04CA39 CD 43 B5 04 0187   	call printString
04CA3D CD 13 B1 04 0188   	call vdu_flip
04CA41 CD C3 B8 04 0189   	call waitKeypress
04CA45             0190   
04CA45             0191   ; initialization done
04CA45 C9          0192   	ret
04CA46             0193   
04CA46             0194   ; DEBUG: set up a simple countdown timer
04CA46 01          0195   debug_timer: db 0x01
04CA47             0196   
04CA47             0197   main_loop_tmr: ds 6
04CA4D             0198   framerate: equ 30
04CA4D             0199   
04CA4D             0200   new_game:
04CA4D             0201   ; initialize map variables and load map file
04CA4D 21 5C 6A 04 0202   	ld hl,room_flags
04CA51 AF          0203   	xor a
04CA52 06 0A       0204   	ld b,10
04CA54             0205   @room_flags_loop:
04CA54 77          0206   	ld (hl),a
04CA55 23          0207   	inc hl
04CA56 10 FC       0208   	djnz @room_flags_loop
04CA58             0209   ; map_init:
04CA58 32 4C B9 04 0210   	ld (cur_floor),a
04CA5C 32 4D B9 04 0211   	ld (cur_room),a
04CA60             0212   ; load room file
04CA60 CD F2 68 04 0213   	call map_load
04CA64             0214   ; initialize sprite data
04CA64 CD 23 69 04 0215   	call map_init_sprites
04CA68             0216   ; initialize player position
04CA68 CD B9 B9 04 0217   	call plyr_init
04CA6C             0218   
04CA6C C9          0219   	ret
04CA6D             0220   
04CA6D             0221   main:
04CA6D CD 4D CA 04 0222   	call new_game
04CA71             0223   
04CA71             0224   ; main:
04CA71             0225   ; ; set map variables and load initial map file
04CA71             0226   ; 	call map_init
04CA71             0227   ; ; initialize player position
04CA71             0228   ; 	call plyr_init
04CA71             0229   
04CA71             0230   
04CA71             0231   main_loop:
04CA71             0232   ; update global timestamp
04CA71 CD 1A C8 04 0233       call timestamp_tick
04CA75             0234   
04CA75             0235   ; move enemies
04CA75 CD 43 AE 04 0236   	call sprites_see_plyr ; 220-285  prt ticks
04CA79             0237   
04CA79             0238   ; get player input and update sprite position
04CA79             0239   	; 0-1 prt ticks
04CA79 CD 69 BD 04 0240   	call plyr_input ; ix points to cell defs/status, a is target cell current obj_id
04CA7D             0241   
04CA7D             0242   ; render the updated scene
04CA7D CD D9 6B 04 0243   	call render_scene ; 6-12 prt ticks
04CA81             0244   ; full loop 12-16 prt ticks
04CA81             0245   
04CA81             0246   ; flip the screen
04CA81 CD 13 B1 04 0247   	call vdu_flip
04CA85             0248   
04CA85             0249   @wait:
04CA85 FD 21 47 CA 0250   	ld iy,main_loop_tmr
       04          
04CA8A CD F7 C7 04 0251   	call tmr_get
04CA8E CA 9A CA 04 0252   	jp z,@continue
04CA92 FA 9A CA 04 0253   	jp m,@continue
04CA96 C3 85 CA 04 0254   	jp @wait
04CA9A             0255   @continue:
04CA9A             0256   
04CA9A             0257   ; reset main loop timer
04CA9A FD 21 47 CA 0258   	ld iy,main_loop_tmr
       04          
04CA9F 21 04 00 00 0259   	ld hl,120/framerate
04CAA3 CD E9 C7 04 0260   	call tmr_set
04CAA7             0261   
04CAA7             0262   ; check for escape key and quit if pressed
04CAA7             0263   	MOSCALL mos_getkbmap
04CAA7 3E 1E       0001M  			LD	A, function
04CAA9 5B CF       0002M  			RST.LIL	08h
04CAAB             0264   ; 113 Escape
04CAAB DD CB 0E 46 0265       bit 0,(ix+14)
04CAAF 20 02       0266   	jr nz,main_end
04CAB1             0267   @Escape:
04CAB1 18 BE       0268   	jr main_loop
04CAB3             0269   
04CAB3             0270   main_end:
04CAB3             0271   	; call do_outro
04CAB3             0272   ; restore screen to something normalish
04CAB3 AF          0273   	xor a
04CAB4 CD D1 AF 04 0274   	call vdu_set_screen_mode
04CAB8 CD 82 B1 04 0275   	call cursor_on
04CABC C9          0276   	ret
04CABD             0277   
04CABD             0278   ; files.asm must go here so that filedata doesn't stomp on program data
04CABD             0279   	include "src/asm/files.asm"
04CABD             0001*  ; WARNING: this routine must be the last one loaded in the main program so that filedata doesn't stomp on any program code
04CABD             0002*  ; inputs: hl = bufferId, ix = file size
04CABD             0003*  vdu_load_buffer_from_file:
04CABD             0004*  	; load buffer ids
04CABD 22 FA CA 04 0005*  		ld (@id0),hl
04CAC1 22 00 CB 04 0006*  		ld (@id1),hl
04CAC5 22 05 CB 04 0007*  		ld (@id2),hl
04CAC9             0008*  	; clean up bytes that got stomped on by the ID loads
04CAC9 3E 02       0009*  		ld a,2
04CACB 32 FC CA 04 0010*  		ld (@id0+2),a
04CACF 3E 17       0011*  		ld a,23
04CAD1 32 02 CB 04 0012*  		ld (@id1+2),a
04CAD5 AF          0013*  		xor a
04CAD6 32 07 CB 04 0014*  		ld (@id2+2),a
04CADA             0015*  	; read size from ix
04CADA DD 7D       0016*  		ld a,ixl
04CADC 32 08 CB 04 0017*  		ld (@size),a
04CAE0 DD 7C       0018*  		ld a,ixh
04CAE2 32 09 CB 04 0019*  		ld (@size+1),a
04CAE6             0020*  	; get all the ducks in a row for the vdu call
04CAE6 01 13 00 00 0021*  		ld bc,filedata-@start
04CAEA DD 09       0022*  		add ix,bc
04CAEC DD 44       0023*  		ld b,ixh
04CAEE DD 4D       0024*  		ld c,ixl
04CAF0 21 F7 CA 04 0025*  		ld hl,@start
04CAF4             0026*  	; push the button
04CAF4 5B DF       0027*  		rst.lil $18
04CAF6             0028*  	; back to caller
04CAF6 C9          0029*  		ret
04CAF7             0030*  ; vdp command string:
04CAF7 17 00 A0    0031*  @start: db 23,0,0xA0 ; Clear buffer
04CAFA 00 00       0032*  @id0:	dw 0x0000 ; bufferId
04CAFC 02          0033*  		db 2
04CAFD             0034*  	; select buffer VDU 23, 27, &20, bufferId;
04CAFD 17 1B 20    0035*  		db 23,27,0x20
04CB00 00 00       0036*  @id1:	dw 0x0000 ; bufferId
04CB02             0037*  	; Upload data :: VDU 23, 0 &A0, bufferId; 0, length; <buffer-data>
04CB02 17 00 A0    0038*  		db 23,0,0xA0
04CB05 00 00       0039*  @id2:	dw 0x0000 ; bufferId
04CB07 00          0040*  		db 0
04CB08             0041*  		; CAUTION: the size argument is a 16-bit value, so the max number of bytes we can load in one chunk is 64KiB!! This corresponds to an rgba2 image size of 320x204.
04CB08 00 00       0042*  @size:	dw 0x0000 ; length of data in bytes
04CB0A             0043*  filedata: ; no need to allocate space here if this is the final include of the application
04CB0A             0044*  	; ds 65536 ; placeholder for file data	DEBUG
